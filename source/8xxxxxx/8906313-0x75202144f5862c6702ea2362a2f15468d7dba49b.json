{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2019-09-16\r\n*/\r\n\r\npragma solidity ^0.5.7;\r\n\r\n// File: contracts/Ownable/Ownable.sol\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/KYC/IKYC.sol\r\n\r\n/// @title IKYC\r\n/// @notice This contract represents interface for KYC contract\r\ncontract IKYC {\r\n    // Fired after the status for a manager is updated\r\n    event ManagerStatusUpdated(address KYCManager, bool managerStatus);\r\n\r\n    // Fired after the status for a user is updated\r\n    event UserStatusUpdated(address user, bool status);\r\n\r\n    /// @notice Sets status for a manager\r\n    /// @param KYCManager The address of manager for which the status is to be updated\r\n    /// @param managerStatus The status for the manager\r\n    /// @return status of the transaction\r\n    function setKYCManagerStatus(address KYCManager, bool managerStatus)\r\n        public\r\n        returns (bool);\r\n\r\n    /// @notice Sets status for a user\r\n    /// @param userAddress The address of user for which the status is to be updated\r\n    /// @param passedKYC The status for the user\r\n    /// @return status of the transaction\r\n    function setUserAddressStatus(address userAddress, bool passedKYC)\r\n        public\r\n        returns (bool);\r\n\r\n    /// @notice returns the status of a user\r\n    /// @param userAddress The address of user for which the status is to be returned\r\n    /// @return status of the user\r\n    function getAddressStatus(address userAddress) public view returns (bool);\r\n\r\n}\r\n\r\n// File: contracts/Properties/IProperties.sol\r\n\r\n/**\r\n@title IProperties\r\n@dev This contract represents properties contract interface */\r\ncontract IProperties {\r\n    /**\r\n    @notice fired when owner is changed\r\n     */\r\n    event OwnerChanged(address newOwner);\r\n\r\n    /**\r\n    @notice fired when a manager's status is set\r\n     */\r\n    event ManagerSet(address manager, bool status);\r\n\r\n    /**\r\n    @notice fired when a new property is created\r\n     */\r\n    event PropertyCreated(\r\n        uint256 propertyId,\r\n        uint256 allocationCapacity,\r\n        string title,\r\n        string location,\r\n        uint256 marketValue,\r\n        uint256 maxInvestedATperInvestor,\r\n        uint256 totalAllowedATinvestments,\r\n        address AT,\r\n        uint256 dateAdded\r\n    );\r\n\r\n    /**\r\n    @notice fired when the status of a property is updated\r\n     */\r\n    event PropertyStatusUpdated(uint256 propertyId, uint256 status);\r\n\r\n    /**\r\n    @notice fired when a property is invested in\r\n     */\r\n    event PropertyInvested(uint256 propertyId, uint256 tokens);\r\n\r\n    /**\r\n    @dev fired when investment contract's status is set\r\n    */\r\n    event InvestmentContractStatusSet(address investmentContract, bool status);\r\n\r\n    /**\r\n    @dev fired when a property is updated\r\n    s */\r\n    event PropertyUpdated(uint256 propertyId);\r\n\r\n    /**\r\n    @dev function to change the owner\r\n    @param newOwner the address of new owner\r\n     */\r\n    function changeOwner(address newOwner) external;\r\n\r\n    /**\r\n    @dev function to set the status of manager\r\n    @param manager address of manager\r\n    @param status the status to set\r\n     */\r\n    function setManager(address manager, bool status) external;\r\n\r\n    /**\r\n    @dev function to create a new property\r\n    @param  allocationCapacity refers to the number of ATs allocated to a property\r\n    @param title title of property\r\n    @param location location of property\r\n    @param marketValue market value of property in USD\r\n    @param maxInvestedATperInvestor absolute amount of shares that could be allocated per person\r\n    @param totalAllowedATinvestments absolute amount of shares to be issued\r\n    @param AT address of AT contract\r\n    */\r\n    function createProperty(\r\n        uint256 allocationCapacity,\r\n        string memory title,\r\n        string memory location,\r\n        uint256 marketValue,\r\n        uint256 maxInvestedATperInvestor,\r\n        uint256 totalAllowedATinvestments,\r\n        address AT\r\n    ) public returns (bool);\r\n\r\n    /**\r\n    @notice function is called to update a property's status\r\n    @param propertyId ID of the property\r\n    @param status status of the property\r\n     */\r\n    function updatePropertyStatus(uint256 propertyId, uint256 status) external;\r\n\r\n    /**\r\n    @notice function is called to invest in the property\r\n    @param investor the address of the investor\r\n    @param propertyId the ID of the property to invest in\r\n    @param shares the amount of shares being invested\r\n     */\r\n    function invest(address investor, uint256 propertyId, uint256 shares)\r\n        public\r\n        returns (bool);\r\n\r\n    /**\r\n    @dev this function is called to set the status of an investment contract\r\n    @param investmentContract the address of investment contract\r\n    @param status status of the investment smart contact\r\n     */\r\n    function setInvestmentContractStatus(\r\n        address investmentContract,\r\n        bool status\r\n    ) external;\r\n\r\n    /**\r\n    @notice the function returns the paramters of a property\r\n    @param propertyId the ID of the property to get\r\n     */\r\n    function getProperty(uint256 propertyId)\r\n        public\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            string memory,\r\n            string memory,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            address,\r\n            uint256,\r\n            uint8\r\n        );\r\n\r\n    /**\r\n    @notice function returns the list of property investors\r\n    @param from the starting number . minimum = 0\r\n    @param to the ending number\r\n     */\r\n    function getPropertyInvestors(uint256 propertyId, uint256 from, uint256 to)\r\n        public\r\n        view\r\n        returns (address[] memory);\r\n\r\n    /**\r\n    @notice Called to get the total amount of investment and investment for a specific holder for a property\r\n    @param propertyId The ID of the property\r\n    @param holder The address of the holder\r\n    @return The total amount of investment\r\n    @return The amount of shares owned by the holder */\r\n    function getTotalAndHolderShares(uint256 propertyId, address holder)\r\n        public\r\n        view\r\n        returns (uint256 totalShares, uint256 holderShares);\r\n}\r\n\r\n// File: contracts/AllocationToken/IAllocationToken.sol\r\n\r\n/**\r\n@title IAllocationToken\r\n@notice This contract provides an interface for AllocationToken\r\n */\r\ncontract IAllocationToken {\r\n    /**\r\n    @dev fired on exchange contract's updation\r\n    @param exchangeContract the address of exchange contract\r\n     */\r\n    event ExchangeContractUpdated(address exchangeContract);\r\n\r\n    /**\r\n    @dev fired on investment contract's updation\r\n    @param investmentContract the address of investment contract\r\n     */\r\n    event InvestmentContractUpdated(address investmentContract);\r\n\r\n    /**\r\n    @dev updates exchange contract's address\r\n    @param _exchangeContract the address of updated exchange contract\r\n     */\r\n    function updateExchangeContract(address _exchangeContract) external;\r\n\r\n    /**\r\n    @dev updates the investment contract's address\r\n    @param _investmentContract the address of updated innvestment contract\r\n     */\r\n    function updateInvestmentContract(address _investmentContract) external;\r\n\r\n    /**\r\n    @notice Allows to mint new AT tokens\r\n    @dev Only owner or exchange contract can call this function\r\n    @param _holder The address to mint the tokens to\r\n    @param _tokens The amount of tokens to mint\r\n     */\r\n    function mint(address _holder, uint256 _tokens) public;\r\n\r\n    /**\r\n    @notice Allows to burn AT tokens\r\n    @dev Only Investment contract contract can call this function\r\n    @param _address The address to burn the tokens from\r\n    @param _value The amount of tokens to burn\r\n    */\r\n    function burn(address _address, uint256 _value) public;\r\n}\r\n\r\n// File: contracts/Investment/IInvestment.sol\r\n\r\n/**\r\n@title IInvestment\r\n@dev This contract is an interface for Investment contract\r\n */\r\ncontract IInvestment {\r\n    /**\r\n    @dev fired on investment state change\r\n    */\r\n    event StateChanged(uint256 state);\r\n\r\n    /**\r\n    @dev fired when user invests\r\n     */\r\n    event Invested(\r\n        uint256 propertyId,\r\n        address investor,\r\n        address tokenAddress,\r\n        uint256 tokens\r\n    );\r\n\r\n    /**\r\n    @dev fired when property is set by owner\r\n     */\r\n    event PropertySet(address property);\r\n\r\n    /**\r\n    @dev fired when the premium status of a use is changed\r\n     */\r\n    event PremiumStatusOfUserChanged(address user, bool status);\r\n\r\n    /**\r\n    @dev fired when allocation token state is changed\r\n     */\r\n    event AllocationTokenStateChanged(address allocationToken, bool state);\r\n\r\n    /**\r\n    @notice it invests allocation tokens to buy property\r\n    @param propertyId ID of the property to make investment into\r\n    @param tokenAddress address of the token using which the investment is made\r\n    @param tokens the amount of tokens to invest\r\n     */\r\n    function invest(uint256 propertyId, address tokenAddress, uint256 tokens)\r\n        external;\r\n\r\n    /**\r\n    @notice this function sets/changes state of this smart contract and owner can call it\r\n    @param state it can be either 0 (Inactive) or 1 (Active)\r\n     */\r\n    function setState(uint256 state) external;\r\n\r\n    /**\r\n    @notice is called by owner to set property address\r\n    @param _property it is the address of the property\r\n     */\r\n    function setProperty(IProperties _property) external;\r\n\r\n    /**\r\n    @notice is called by owner to change the allocation token state\r\n    @param _token it is the address of the allocation token\r\n    @param _state it is the state of the allocation token\r\n     */\r\n\r\n    /**\r\n    @notice is called by owner to change the allocation token state\r\n    @param _token it is the address of the allocation token\r\n    @param _state it is the state of the allocation token\r\n    @param _isPremium sets true if the set is premium\r\n     */\r\n    function setAllocationTokenState(\r\n        address _token,\r\n        bool _state,\r\n        bool _isPremium\r\n    ) external;\r\n\r\n    /**\r\n    @notice It changes premium status of a user\r\n    @param user The address of the user\r\n    @param status The premium status of the user */\r\n    function changePremiumStatusOfUser(address user, bool status) public;\r\n\r\n}\r\n\r\n// File: contracts/Investment/Investment.sol\r\n\r\n/**\r\n@notice Investment smart contract for Chelle app\r\n */\r\ncontract Investment is IInvestment, Ownable {\r\n    enum State {INACTIVE, ACTIVE}\r\n\r\n    struct AllocationToken {\r\n        bool state;\r\n        bool isPremium;\r\n    }\r\n\r\n    mapping(address => AllocationToken) public allocationTokens; //addresses of ERC-20, that could be invested through this contract.\r\n    mapping(address => bool) public premiumUsers;\r\n    IProperties public property; // address of Real Estate Properties ERC721 Contract.\r\n    IKYC public kyc;\r\n\r\n    State investmentState; //current state of contract to indicate is it allowed to invest AT tokens through this contract.\r\n\r\n    /**\r\n    @notice constructor of investment contract\r\n     */\r\n    constructor(IKYC _kyc) public {\r\n        investmentState = State.ACTIVE;\r\n        kyc = _kyc;\r\n        emit StateChanged(uint256(investmentState));\r\n    }\r\n\r\n    /**\r\n    @notice call is only allowed to pass when investment contract is in ACTIVE state\r\n     */\r\n    modifier isStateActive() {\r\n        require(\r\n            investmentState == State.ACTIVE,\r\n            \"Investment contract's state is INACTIVE.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n    @notice validates the contract state\r\n     */\r\n    modifier validateContract(address tokenAddress) {\r\n        require(address(property) != address(0), \"property is not set.\");\r\n        require(\r\n            allocationTokens[tokenAddress].state,\r\n            \"token is not a part of allocation tokens.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n    @notice It changes premium status of a user\r\n    @param user The address of the user\r\n    @param status The premium status of the user */\r\n    function changePremiumStatusOfUser(address user, bool status)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(user != address(0), \"Provide a valid user address.\");\r\n        require(\r\n            premiumUsers[user] != status,\r\n            \"The provided status is already set.\"\r\n        );\r\n\r\n        premiumUsers[user] = status;\r\n        emit PremiumStatusOfUserChanged(user, status);\r\n    }\r\n    /**\r\n    @notice it invests allocation tokens to buy property\r\n    @param propertyId ID of the property to make investment into\r\n    @param tokenAddress address of the token using which the investment is made\r\n    @param tokens the amount of tokens to invest\r\n     */\r\n    function invest(uint256 propertyId, address tokenAddress, uint256 tokens)\r\n        external\r\n        isStateActive\r\n        validateContract(tokenAddress)\r\n    {\r\n        require(propertyId > 0, \"propertyId should be greater than zero\");\r\n        require(tokens > 0, \"investment tokens should be greater than zero\");\r\n\r\n        require(\r\n            kyc.getAddressStatus(msg.sender),\r\n            \"msg.sender is not whiteliisted in KYC\"\r\n        );\r\n\r\n        if (allocationTokens[tokenAddress].isPremium) {\r\n            require(\r\n                premiumUsers[msg.sender],\r\n                \"Only premium users can invest in the property\"\r\n            );\r\n        } else {\r\n            require(\r\n                !premiumUsers[msg.sender],\r\n                \"Only basic users can invest in the property\"\r\n            );\r\n        }\r\n\r\n        IAllocationToken allocationToken = IAllocationToken(tokenAddress);\r\n\r\n        allocationToken.burn(msg.sender, tokens);\r\n\r\n        (, , , , , , , address ATToken, , uint8 propertyStatus) = property\r\n            .getProperty(propertyId);\r\n\r\n        require(ATToken == tokenAddress, \"ATTokens do not match\");\r\n        require(propertyStatus == 0, \"property is not investable\");\r\n\r\n        // call invest function on the property contract\r\n        property.invest(msg.sender, propertyId, tokens);\r\n        emit Invested(propertyId, msg.sender, tokenAddress, tokens);\r\n    }\r\n\r\n    /**\r\n    @notice this function sets/changes state of this smart contract and owner can call it\r\n    @param state it can be either 0 (Inactive) or 1 (Active)\r\n     */\r\n    function setState(uint256 state) external onlyOwner {\r\n        require(state == 0 || state == 1, \"Provided state is invalid.\");\r\n        require(\r\n            state != uint256(investmentState),\r\n            \"Provided state is already set.\"\r\n        );\r\n\r\n        investmentState = State(state);\r\n        emit StateChanged(uint256(investmentState));\r\n    }\r\n\r\n    /**\r\n    @notice is called by owner to set property address\r\n    @param _property it is the address of the property\r\n     */\r\n    function setProperty(IProperties _property) external onlyOwner {\r\n        require(\r\n            address(_property) != address(0),\r\n            \"property address must be a valid address.\"\r\n        );\r\n        property = _property;\r\n\r\n        emit PropertySet(address(property));\r\n    }\r\n\r\n    /**\r\n    @dev fired when allocation token state is changed\r\n     */\r\n    event AllocationTokenStateChanged(address allocationToken, bool state);\r\n\r\n    /**\r\n    @notice is called by owner to change the allocation token state\r\n    @param _token it is the address of the allocation token\r\n    @param _state it is the state of the allocation token\r\n    @param _isPremium sets true if the set is premium\r\n     */\r\n    function setAllocationTokenState(\r\n        address _token,\r\n        bool _state,\r\n        bool _isPremium\r\n    ) external onlyOwner {\r\n        require(\r\n            _token != address(0),\r\n            \"allocation token address must be a valid address.\"\r\n        );\r\n        require(\r\n            allocationTokens[_token].state != _state,\r\n            \"this state is already set for the provided allocation token.\"\r\n        );\r\n\r\n        allocationTokens[_token].state = _state;\r\n        allocationTokens[_token].isPremium = _isPremium;\r\n\r\n        emit AllocationTokenStateChanged(_token, _state);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"property\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_property\",\"type\":\"address\"}],\"name\":\"setProperty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kyc\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"state\",\"type\":\"uint256\"}],\"name\":\"setState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"changePremiumStatusOfUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"premiumUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_state\",\"type\":\"bool\"},{\"name\":\"_isPremium\",\"type\":\"bool\"}],\"name\":\"setAllocationTokenState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allocationTokens\",\"outputs\":[{\"name\":\"state\",\"type\":\"bool\"},{\"name\":\"isPremium\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"propertyId\",\"type\":\"uint256\"},{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_kyc\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"allocationToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"AllocationTokenStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"state\",\"type\":\"uint256\"}],\"name\":\"StateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"propertyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Invested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"property\",\"type\":\"address\"}],\"name\":\"PropertySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"PremiumStatusOfUserChanged\",\"type\":\"event\"}]","ContractName":"Investment","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000d97234a022750fa2cde897d8653e7daaf53bbbf9","Library":"","LicenseType":"None","SwarmSource":"bzzr://9d6ccd773742bd6e838a14aaa691f87d7b092e50596a9bda1353654811853a87"}]}