{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.11;\r\n\r\n\r\ninterface DharmaSmartWalletImplementationV0Interface {\r\n    enum ActionType {\r\n        Cancel, SetUserSigningKey, Generic, GenericAtomicBatch, DAIWithdrawal,\r\n        USDCWithdrawal, ETHWithdrawal, DAIBorrow, USDCBorrow\r\n    }\r\n    function getUserSigningKey() external view returns (address userSigningKey);\r\n    function getNonce() external view returns (uint256 nonce);\r\n    function getVersion() external pure returns (uint256 version);\r\n}\r\n\r\n\r\ninterface DharmaKeyRegistryInterface {\r\n    function getKeyForUser(address account) external view returns (address key);\r\n}\r\n\r\n\r\ncontract SetUserSigningKeyActionIDHelper {\r\n    function getSetUserSigningKeyActionID(\r\n        DharmaSmartWalletImplementationV0Interface smartWallet,\r\n        address userSigningKey,\r\n        uint256 minimumActionGas\r\n    ) external view returns (bytes32 actionID) {\r\n        uint256 version = smartWallet.getVersion();\r\n        DharmaKeyRegistryInterface keyRegistry;\r\n        if (version == 2) {\r\n            keyRegistry = DharmaKeyRegistryInterface(\r\n                0x00000000006c7f32F0cD1eA4C1383558eb68802D\r\n            );\r\n        } else {\r\n            keyRegistry = DharmaKeyRegistryInterface(\r\n                0x00000000006c7f32F0cD1eA4C1383558eb68802D\r\n            );\r\n        }\r\n\r\n        actionID = keccak256(\r\n            abi.encodePacked(\r\n                address(smartWallet),\r\n                version,\r\n                smartWallet.getUserSigningKey(),\r\n                keyRegistry.getKeyForUser(address(smartWallet)),\r\n                smartWallet.getNonce(),\r\n                minimumActionGas,\r\n                DharmaSmartWalletImplementationV0Interface.ActionType.SetUserSigningKey,\r\n                abi.encode(userSigningKey)\r\n            )\r\n        );\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"internalType\":\"contract DharmaSmartWalletImplementationV0Interface\",\"name\":\"smartWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userSigningKey\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimumActionGas\",\"type\":\"uint256\"}],\"name\":\"getSetUserSigningKeyActionID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"actionID\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SetUserSigningKeyActionIDHelper","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://14d1a26b0d58e921f698480da8adc167744a85761a7160000a5353941d5600ff"}]}