{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    \r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n    \r\n    modifier protected() {\r\n        if(msg.sender != address(this)) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            throw;\r\n        }\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract InvestmentWithDividend is Ownable {\r\n\r\n    event Transfer(\r\n        uint amount,\r\n        bytes32 message,\r\n        address target,\r\n        address currentOwner\r\n    );\r\n    \r\n    struct Investor {\r\n        uint investment;\r\n        uint lastDividend;\r\n    }\r\n\r\n    mapping(address => Investor) investors;\r\n\r\n    uint public minInvestment;\r\n    uint public sumInvested;\r\n    uint public sumDividend;\r\n    \r\n    function InvestmentWithDividend() public { \r\n        minInvestment = 1 ether;\r\n    }\r\n    \r\n    function loggedTransfer(uint amount, bytes32 message, address target, address currentOwner) protected {\r\n        if(! target.call.value(amount)() ) {\r\n            throw;\r\n        }\r\n        Transfer(amount, message, target, currentOwner);\r\n    }\r\n    \r\n    function invest() public payable {\r\n        if (msg.value >= minInvestment) {\r\n            sumInvested += msg.value;\r\n            investors[msg.sender].investment += msg.value;\r\n            // manually call payDividend() before reinvesting, because this resets dividend payments!\r\n            investors[msg.sender].lastDividend = sumDividend;\r\n        }\r\n    }\r\n\r\n    function divest(uint amount) public {\r\n        if (investors[msg.sender].investment == 0 || amount == 0) {\r\n            throw;\r\n        }\r\n        // no need to test, this will throw if amount > investment\r\n        investors[msg.sender].investment -= amount;\r\n        sumInvested -= amount; \r\n        this.loggedTransfer(amount, \"\", msg.sender, owner);\r\n    }\r\n\r\n    function calculateDividend() constant public returns(uint dividend) {\r\n        uint lastDividend = investors[msg.sender].lastDividend;\r\n        if (sumDividend > lastDividend) {\r\n            throw;\r\n        }\r\n        // no overflows here, because not that much money will be handled\r\n        dividend = (sumDividend - lastDividend) * investors[msg.sender].investment / sumInvested;\r\n    }\r\n    \r\n    function getInvestment() constant public returns(uint investment) {\r\n        investment = investors[msg.sender].investment;\r\n    }\r\n    \r\n    function payDividend() public {\r\n        uint dividend = calculateDividend();\r\n        if (dividend == 0) {\r\n            throw;\r\n        }\r\n        investors[msg.sender].lastDividend = sumDividend;\r\n        this.loggedTransfer(dividend, \"Dividend payment\", msg.sender, owner);\r\n    }\r\n    \r\n    function distributeDividends() public payable onlyOwner {\r\n        sumDividend += msg.value;\r\n    }\r\n    \r\n    function doTransfer(address target, uint amount) public onlyOwner {\r\n        this.loggedTransfer(amount, \"Owner transfer\", target, owner);\r\n    }\r\n    \r\n    function setMinInvestment(uint amount) public onlyOwner {\r\n        minInvestment = amount;\r\n    }\r\n    \r\n    function destroy() public onlyOwner {\r\n        selfdestruct(msg.sender);\r\n    }\r\n    \r\n    function withdraw() public onlyOwner {\r\n        owner.transfer(address(this).balance);\r\n    }\r\n\r\n    function withdraw(uint256 amount) public onlyOwner {\r\n        owner.transfer(amount);\r\n    }\r\n    \r\n    function () public payable {}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"distributeDividends\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payDividend\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"doTransfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sumDividend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"message\",\"type\":\"bytes32\"},{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"currentOwner\",\"type\":\"address\"}],\"name\":\"loggedTransfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calculateDividend\",\"outputs\":[{\"name\":\"dividend\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"divest\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sumInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMinInvestment\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInvestment\",\"outputs\":[{\"name\":\"investment\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"message\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"currentOwner\",\"type\":\"address\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"InvestmentWithDividend","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7b0e7af93d97fab3932fce51a0388466de7e10e6a253bbd3b27d1babe6f05ff9"}]}