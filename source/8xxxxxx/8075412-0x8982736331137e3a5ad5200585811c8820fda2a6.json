{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title BulkSender, support ETH and ERC20 Tokens\r\n * @dev To Use this Dapp: https://bulksender.app\r\n*/\r\n\r\n/**\r\n * @title EternalStorage\r\n * @dev This contract holds all the necessary state variables to carry out the storage of any contract.\r\n */\r\ncontract EternalStorage {\r\n\r\n    mapping(bytes32 => uint256) internal uintStorage;\r\n    mapping(bytes32 => string) internal stringStorage;\r\n    mapping(bytes32 => address) internal addressStorage;\r\n    mapping(bytes32 => bytes) internal bytesStorage;\r\n    mapping(bytes32 => bool) internal boolStorage;\r\n    mapping(bytes32 => int256) internal intStorage;\r\n\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal pure  returns (uint) {\r\n    uint c = a * b;\r\n    require(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint a, uint b) internal pure returns (uint) {\r\n    require(b > 0);\r\n    uint c = a / b;\r\n    require(a == b * c + a % b);\r\n    return c;\r\n  }\r\n  function sub(uint a, uint b) internal pure returns (uint) {\r\n    require(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a + b;\r\n    require(c >= a);\r\n    return c;\r\n  }\r\n  function max64(uint64 a, uint64 b) internal  pure returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n  function min64(uint64 a, uint64 b) internal  pure returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n  function max256(uint256 a, uint256 b) internal  pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n  function min256(uint256 a, uint256 b) internal  pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external;\r\n    function transferFrom(address from, address to, uint256 value) external;\r\n    function balanceOf(address tokenOwner)  external returns (uint balance);\r\n\r\n}\r\n\r\n\r\ncontract Ownable is EternalStorage {\r\n  \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner());\r\n        _;\r\n    }\r\n\r\n  \r\n    function owner() public view returns (address) {\r\n        return addressStorage[keccak256(\"owner\")];\r\n    }\r\n\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        setOwner(newOwner);\r\n    }\r\n\r\n  \r\n    function setOwner(address newOwner) internal {\r\n        addressStorage[keccak256(\"owner\")] = newOwner;\r\n    }\r\n\r\n    \r\n    \r\n}\r\n\r\n/**\r\n * @title BulkSender, support ETH and ERC20 Tokens\r\n * @dev To Use this Dapp: https://bulksender.app\r\n*/\r\n\r\ncontract Bulksender is Ownable{\r\n\r\n    using SafeMath for uint;\r\n    event LogTokenBulkSent(address token,uint256 total);\r\n    event LogGetToken(address token, address receiver, uint256 balance);\r\n    /*\r\n  *  get balance\r\n  */\r\n  function getBalance(IERC20 token) onlyOwner public {\r\n      address _receiverAddress = getReceiverAddress();\r\n      if(token == address(0)){\r\n          require(_receiverAddress.send(address(this).balance));\r\n          return;\r\n      }\r\n      uint256 balance = token.balanceOf(this);\r\n      token.transfer(_receiverAddress, balance);\r\n      emit LogGetToken(token,_receiverAddress,balance);\r\n  }\r\n  \r\n  function initialize(address _owner) public{\r\n        require(!initialized());\r\n        setOwner(_owner);\r\n        setReceiverAddress(_owner);\r\n        setTxFee(0.01 ether);\r\n        setVIPFee(1 ether);\r\n        \r\n        boolStorage[keccak256(\"initialized\")] = true;\r\n\r\n        \r\n  }\r\n  \r\n  function() public payable {}\r\n\r\n  function initialized() public view returns (bool) {\r\n        return boolStorage[keccak256(\"initialized\")];\r\n  }\r\n\r\n   /*\r\n  *  Register VIP\r\n  */\r\n  function registerVIP() payable public {\r\n      require(msg.value >= VIPFee());\r\n      address _receiverAddress = getReceiverAddress();\r\n      require(_receiverAddress.send(msg.value));\r\n      boolStorage[keccak256(abi.encodePacked(\"vip\", msg.sender))] = true;\r\n  }\r\n  \r\n  \r\n\r\n  /*\r\n  *  VIP list\r\n  */\r\n  function addToVIPList(address[] _vipList) onlyOwner public {\r\n    for (uint i =0;i<_vipList.length;i++){\r\n      boolStorage[keccak256(abi.encodePacked(\"vip\", _vipList[i]))] = true;\r\n    }\r\n  }\r\n\r\n  /*\r\n    * Remove address from VIP List by Owner\r\n  */\r\n  function removeFromVIPList(address[] _vipList) onlyOwner public {\r\n    for (uint i =0;i<_vipList.length;i++){\r\n      boolStorage[keccak256(abi.encodePacked(\"vip\", _vipList[i]))] = false;\r\n    }\r\n   }\r\n\r\n    /*\r\n        * Check isVIP\r\n    */\r\n    function isVIP(address _addr) public view returns (bool) {\r\n        return _addr == owner() || boolStorage[keccak256(abi.encodePacked(\"vip\",_addr))];\r\n    }\r\n\r\n    /*\r\n        * set receiver address\r\n    */\r\n    function setReceiverAddress(address _addr) onlyOwner public {\r\n        require(_addr != address(0));\r\n        addressStorage[keccak256(\"receiverAddress\")] = _addr;\r\n\r\n    }\r\n\r\n    /*\r\n        * get receiver address\r\n    */\r\n    function getReceiverAddress() public view returns  (address){\r\n        address _receiverAddress = addressStorage[keccak256(\"receiverAddress\")];\r\n        if(_receiverAddress == address(0)){\r\n            return owner();\r\n        }\r\n        return _receiverAddress;\r\n    }\r\n    \r\n     /*\r\n        * get vip fee\r\n    */\r\n    function VIPFee() public view returns (uint256) {\r\n        return uintStorage[keccak256(\"vipFee\")];\r\n    }\r\n\r\n\r\n     /*\r\n        * set vip fee\r\n    */\r\n    function setVIPFee(uint256 _fee) onlyOwner public {\r\n        uintStorage[keccak256(\"vipFee\")] = _fee;\r\n    }\r\n\r\n    /*\r\n        * set tx fee\r\n    */\r\n    function setTxFee(uint256 _fee) onlyOwner public {\r\n        uintStorage[keccak256(\"txFee\")] = _fee;\r\n    }\r\n    \r\n    function txFee() public view returns (uint256) {\r\n        return uintStorage[keccak256(\"txFee\")];\r\n    }\r\n    \r\n    function checkTxExist(bytes32 _txRecordId)  public view returns  (bool){\r\n        return boolStorage[keccak256(abi.encodePacked(\"txRecord\", msg.sender, _txRecordId))];\r\n    }\r\n    \r\n    function addTxRecord(bytes32 _txRecordId) internal{\r\n        boolStorage[keccak256(abi.encodePacked(\"txRecord\", msg.sender, _txRecordId))] = true;\r\n    }\r\n\r\n    function _bulksendEther(address[] _to, uint256[] _values) internal {\r\n\r\n        uint sendAmount = _values[0];\r\n\t\tuint remainingValue = msg.value;\r\n\r\n\t    bool vip = isVIP(msg.sender);\r\n        if(vip){\r\n            require(remainingValue >= sendAmount);\r\n        }else{\r\n            require(remainingValue >= sendAmount.add(txFee())) ;\r\n        }\r\n\t\trequire(_to.length == _values.length);\r\n\r\n\t\tfor (uint256 i = 1; i < _to.length; i++) {\r\n\t\t\tremainingValue = remainingValue.sub(_values[i]);\r\n\t\t\trequire(_to[i].send(_values[i]));\r\n\t\t}\r\n\t    emit LogTokenBulkSent(0x000000000000000000000000000000000000bEEF,msg.value);\r\n\r\n    }\r\n\r\n    function _bulksendToken(IERC20 _token, address[] _to, uint256[] _values)  internal  {\r\n\t\tuint sendValue = msg.value;\r\n\t    bool vip = isVIP(msg.sender);\r\n        if(!vip){\r\n\t\t    require(sendValue >= txFee());\r\n        }\r\n\t\trequire(_to.length == _values.length);\r\n\r\n        uint256 sendAmount = _values[0];\r\n        _token.transferFrom(msg.sender,address(this), sendAmount);\r\n        \r\n\t\tfor (uint256 i = 1; i < _to.length; i++) {\r\n\t\t    _token.transfer(_to[i], _values[i]);\r\n\t\t}\r\n        emit LogTokenBulkSent(_token,sendAmount);\r\n\r\n    }\r\n    \r\n    function _bulksendTokenSample(IERC20 _token, address[] _to, uint256[] _values)  internal  {\r\n\t\tuint sendValue = msg.value;\r\n\t    bool vip = isVIP(msg.sender);\r\n        if(!vip){\r\n\t\t    require(sendValue >= txFee());\r\n        }\r\n\t\trequire(_to.length == _values.length);\r\n\r\n        uint256 sendAmount = _values[0];\r\n\t\tfor (uint256 i = 1; i < _to.length; i++) {\r\n\t\t    _token.transferFrom(msg.sender, _to[i], _values[i]);\r\n\t\t}\r\n        emit LogTokenBulkSent(_token,sendAmount);\r\n\r\n    }\r\n    \r\n    function bulksendTokenSample(IERC20 _token, address[] _to, uint256[] _values, bytes32 _uniqueId) payable public {\r\n        if(checkTxExist(_uniqueId)){\r\n            if (msg.value > 0)\r\n                require(msg.sender.send(msg.value));//refund the tx fee to msg send if the tx already exists\r\n        }else{\r\n            addTxRecord(_uniqueId);\r\n\t        _bulksendTokenSample(_token, _to, _values);\r\n        }\r\n    }\r\n\r\n    function bulksendToken(IERC20 _token, address[] _to, uint256[] _values, bytes32 _uniqueId) payable public {\r\n        if(checkTxExist(_uniqueId)){\r\n            if (msg.value > 0)\r\n                require(msg.sender.send(msg.value));//refund the tx fee to msg send if the tx already exists\r\n        }else{\r\n            addTxRecord(_uniqueId);\r\n\t        _bulksendToken(_token, _to, _values);\r\n        }\r\n    }\r\n    \r\n    function bulksendEther(address[] _to, uint256[] _values,bytes32 _uniqueId) payable public {\r\n        if(checkTxExist(_uniqueId)){\r\n            if (msg.value > 0)\r\n                require(msg.sender.send(msg.value));//refund the tx fee to msg send if the tx already exists\r\n        }else{\r\n            addTxRecord(_uniqueId);\r\n\t        _bulksendEther(_to, _values);\r\n        }\r\n\t}\r\n\t\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setVIPFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getReceiverAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setReceiverAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"},{\"name\":\"_uniqueId\",\"type\":\"bytes32\"}],\"name\":\"bulksendEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_txRecordId\",\"type\":\"bytes32\"}],\"name\":\"checkTxExist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"registerVIP\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vipList\",\"type\":\"address[]\"}],\"name\":\"addToVIPList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"txFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"},{\"name\":\"_uniqueId\",\"type\":\"bytes32\"}],\"name\":\"bulksendTokenSample\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setTxFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VIPFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isVIP\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vipList\",\"type\":\"address[]\"}],\"name\":\"removeFromVIPList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"},{\"name\":\"_uniqueId\",\"type\":\"bytes32\"}],\"name\":\"bulksendToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"LogTokenBulkSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"LogGetToken\",\"type\":\"event\"}]","ContractName":"Bulksender","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://fb2a87baf793c23d898d1ea8914194730df5feff9b6c3344bbcfcfeceb544ca5"}]}