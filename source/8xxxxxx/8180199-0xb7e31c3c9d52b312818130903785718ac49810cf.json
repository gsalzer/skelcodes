{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.10;\r\n\r\ncontract EmpowSpin {\r\n    \r\n    event Spin(address indexed _address, uint256 _time, uint32 _number);\r\n    \r\n    struct SpinHistory {\r\n        uint256 time;\r\n        uint32 number;\r\n    }\r\n    \r\n    mapping (address => uint256) public countSpin;\r\n    mapping (address => mapping (uint256 => SpinHistory)) public spinHistories;\r\n    \r\n    uint32 NEXT_SPIN_WAIT_TIME = 24 * 60 * 60; // 1 day\r\n    uint32 MIN_SPIN_NUMBER = 10;\r\n    uint32 MAX_SPIN_NUMBER = 200;\r\n    \r\n    address owner;\r\n    \r\n    modifier onlyOwner () {\r\n        require(msg.sender == owner, \"owner require\");\r\n        _;\r\n    }\r\n    \r\n    constructor ()\r\n        public\r\n    {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function changeWaitTime(uint32 _waitTime) \r\n        public\r\n        onlyOwner\r\n        returns(bool)\r\n    {\r\n        NEXT_SPIN_WAIT_TIME = _waitTime;\r\n        return true;\r\n    }\r\n    \r\n    function spin ()\r\n        public\r\n        returns(uint32)\r\n    {\r\n        if(countSpin[msg.sender] > 0) {\r\n            uint256 lastSpinTime = spinHistories[msg.sender][countSpin[msg.sender] - 1].time;\r\n            require(block.timestamp > lastSpinTime + NEXT_SPIN_WAIT_TIME, \"You need wait more time\");\r\n        }\r\n        \r\n        uint256 spinTime = block.timestamp;\r\n        uint32 number = randomNumber();\r\n        \r\n        emit Spin(msg.sender, spinTime, number);\r\n        saveHistory(msg.sender, spinTime, number);\r\n        \r\n        return number;\r\n    }\r\n    \r\n    function saveHistory (address _address, uint256 _time, uint32 _number)\r\n        private\r\n        returns(bool)\r\n    {\r\n        spinHistories[msg.sender][countSpin[_address]].time = _time;\r\n        spinHistories[msg.sender][countSpin[_address]].number = _number;\r\n        \r\n        countSpin[_address]++;\r\n        return true;\r\n    }\r\n    \r\n    function randomNumber()\r\n        private\r\n        view\r\n        returns(uint32)\r\n    {\r\n        uint32 random = uint32(uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty))) % (MAX_SPIN_NUMBER - MIN_SPIN_NUMBER + 1));\r\n        random += MIN_SPIN_NUMBER;\r\n        return random;\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"spinHistories\",\"outputs\":[{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"number\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_waitTime\",\"type\":\"uint32\"}],\"name\":\"changeWaitTime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"countSpin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"spin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_number\",\"type\":\"uint32\"}],\"name\":\"Spin\",\"type\":\"event\"}]","ContractName":"EmpowSpin","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://34af105a7a6aab5831668c39ead00f0cee21902f48472012eacc55af4f61ddea"}]}