{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity =0.5.10;\r\n\r\n\r\ncontract MJIB_ICSD {\r\n\r\n    address owner;\r\n\r\n    struct Case {\r\n        bytes32 hash;\r\n        uint time;\r\n        uint8 updateCount;\r\n    }\r\n\r\n    mapping (uint256 => Case) public caseList;\r\n\r\n    mapping (address => uint8) public unitCodeList;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function setUnitCode(address unitAddress, uint8 unitCode) public {\r\n        require(msg.sender == owner, \"Only contract owner is allow to set unit code\");\r\n        unitCodeList[unitAddress] = unitCode;\r\n    }\r\n\r\n    function createCase(uint64 caseID, bytes32 hash) public {\r\n        require(unitCodeList[msg.sender] != 0, \"Unit code not found\");\r\n        require(unitCodeList[msg.sender] < 100, \"Invalid unit code\");\r\n        require(caseID > 1000000 && caseID < 10000000, \"Invalid case ID\");\r\n\r\n        uint256 reportID;\r\n        reportID = caseID * 10000;\r\n        reportID += unitCodeList[msg.sender] * 100;\r\n        if (caseList[reportID].hash == 0x0 && caseList[reportID].time == 0) {\r\n            caseList[reportID].hash = hash;\r\n            caseList[reportID].time = now;\r\n        } else {\r\n            require(caseList[reportID].updateCount < 100, \"Update count limit reached\");\r\n            caseList[reportID].updateCount += 1;\r\n            reportID += caseList[reportID].updateCount;\r\n            caseList[reportID].hash = hash;\r\n            caseList[reportID].time = now;\r\n        }\r\n    }\r\n\r\n    function getCase(uint64 caseID, uint8 unitCode) public view returns (bytes32, uint) {\r\n        require(caseID > 1000000 && caseID < 10000000, \"Invalid case ID\");\r\n        require(unitCode < 100, \"Invalid group code\");\r\n        uint256 reportID;\r\n        reportID = caseID * 10000;\r\n        reportID += unitCode * 100;\r\n        reportID += caseList[reportID].updateCount;\r\n        return (caseList[reportID].hash, caseList[reportID].time);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"unitCodeList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"unitAddress\",\"type\":\"address\"},{\"name\":\"unitCode\",\"type\":\"uint8\"}],\"name\":\"setUnitCode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"caseID\",\"type\":\"uint64\"},{\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"createCase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"caseID\",\"type\":\"uint64\"},{\"name\":\"unitCode\",\"type\":\"uint8\"}],\"name\":\"getCase\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"caseList\",\"outputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"updateCount\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"MJIB_ICSD","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://bf1c97b41b17e6912073ec8370c31918746a5e1ffff616b219238408dc780f71"}]}