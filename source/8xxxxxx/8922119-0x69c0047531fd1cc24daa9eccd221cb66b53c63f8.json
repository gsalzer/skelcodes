{"status":"1","message":"OK","result":[{"SourceCode":"/**\nAuthor: Authereum Labs, Inc.\n*/\n\npragma solidity 0.5.12;\npragma experimental ABIEncoderV2;\n\n\ncontract Owned {\n\n    // The owner\n    address public owner;\n\n    event OwnerChanged(address indexed _newOwner);\n\n    /// @dev Throws if the sender is not the owner\n    modifier onlyOwner {\n        require(msg.sender == owner, \"Must be owner\");\n        _;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /// @dev Return the ownership status of an address\n    /// @param _potentialOwner Address being checked\n    /// @return True if the _potentialOwner is the owner\n    function isOwner(address _potentialOwner) external view returns (bool) {\n        return owner == _potentialOwner;\n    }\n\n    /// @dev Lets the owner transfer ownership of the contract to a new owner\n    /// @param _newOwner The new owner\n    function changeOwner(address _newOwner) external onlyOwner {\n        require(_newOwner != address(0), \"Address must not be null\");\n        owner = _newOwner;\n        emit OwnerChanged(_newOwner);\n    }\n}\n\ncontract AuthereumProxy {\n    string constant public authereumProxyVersion = \"2019102500\";\n\n    /// @dev Storage slot with the address of the current implementation.\n    /// @notice This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted \n    /// @notice by 1, and is validated in the constructor.\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /// @dev Set the implementation in the constructor\n    /// @param _logic Address of the logic contract\n    constructor(address _logic) public payable {\n        bytes32 slot = IMPLEMENTATION_SLOT;\n        assembly {\n            sstore(slot, _logic)\n        }\n    }\n\n    /// @dev Fallback function\n    /// @notice A payable fallback needs to be implemented in the implementation contract\n    /// @notice This is a low level function that doesn't return to its internal call site.\n    /// @notice It will return to the external caller whatever the implementation returns.\n    function () external payable {\n        if (msg.data.length == 0) return;\n        address _implementation = implementation();\n\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize)\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas, _implementation, 0, calldatasize, 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize)\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 { revert(0, returndatasize) }\n            default { return(0, returndatasize) }\n        }\n    }\n\n    /// @dev Returns the current implementation.\n    /// @return Address of the current implementation\n    function implementation() public view returns (address impl) {\n        bytes32 slot = IMPLEMENTATION_SLOT;\n        assembly {\n            impl := sload(slot)\n        }\n    }\n}\n\ncontract AuthereumEnsManager {\n    function register(string calldata _label, address _owner) external {}\n}\n\ncontract AuthereumProxyFactory is Owned {\n    string constant public authereumProxyFactoryVersion = \"2019111500\";\n    bytes private initCode;\n    address private authereumEnsManagerAddress;\n    \n    AuthereumEnsManager authereumEnsManager;\n\n    event initCodeChanged(bytes initCode);\n    event authereumEnsManagerChanged(address indexed authereumEnsManager);\n\n    /// @dev Constructor\n    /// @param _implementation Address of the Authereum implementation\n    /// @param _authereumEnsManagerAddress Address for the Authereum ENS Manager contract\n    constructor(address _implementation, address _authereumEnsManagerAddress) public {\n        initCode = abi.encodePacked(type(AuthereumProxy).creationCode, uint256(_implementation));\n        authereumEnsManagerAddress =  _authereumEnsManagerAddress;\n        authereumEnsManager = AuthereumEnsManager(authereumEnsManagerAddress);\n        emit initCodeChanged(initCode);\n        emit authereumEnsManagerChanged(authereumEnsManagerAddress);\n    }\n\n    /**\n     * Setters\n     */\n\n    /// @dev Setter for the proxy initCode\n    /// @param _initCode Init code off the AuthereumProxy and constructor\n    function setInitCode(bytes memory _initCode) public onlyOwner {\n        initCode = _initCode;\n        emit initCodeChanged(initCode);\n    }\n\n    /// @dev Setter for the Authereum ENS Manager address\n    /// @param _authereumEnsManagerAddress Address of the new Authereum ENS Manager\n    function setAuthereumEnsManager(address _authereumEnsManagerAddress) public onlyOwner {\n        authereumEnsManagerAddress = _authereumEnsManagerAddress;\n        authereumEnsManager = AuthereumEnsManager(authereumEnsManagerAddress);\n        emit authereumEnsManagerChanged(authereumEnsManagerAddress);\n    }\n\n    /**\n     *  Getters\n     */\n\n    /// @dev Getter for the proxy initCode\n    /// @return Init code\n    function getInitCode() public view returns (bytes memory) {\n        return initCode;\n    }\n\n    /// @dev Getter for the private authereumEnsManager variable\n    /// @return Authereum Ens Manager\n    function getAuthereumEnsManager() public view returns (address) {\n        return authereumEnsManagerAddress;\n    }\n\n    /// @dev Create an Authereum Proxy and iterate through initialize data\n    /// @notice The bytes[] _initData is an array of initialize functions. \n    /// @notice This is used when a user creates an account e.g. on V5, but V1,2,3, \n    /// @notice etc. have state vars that need to be included.\n    /// @param _salt A uint256 value to add randomness to the account creation\n    /// @param _label Label for the user's Authereum ENS subdomain\n    /// @param _initData Array of initialize data\n    function createProxy(\n        uint256 _salt, \n        string memory _label,\n        bytes[] memory _initData\n    ) \n        public \n        onlyOwner\n        returns (AuthereumProxy)\n    {\n        address payable addr;\n        bytes memory _initCode = initCode;\n        bytes32 salt = _getSalt(_salt, msg.sender);\n\n        // Create proxy\n        assembly {\n            addr := create2(0, add(_initCode, 0x20), mload(_initCode), salt)\n            if iszero(extcodesize(addr)) {\n                revert(0, 0)\n            }\n        }\n\n        // Loop through initializations of each version of the logic contract\n        bool success;\n        for (uint256 i = 0; i < _initData.length; i++) {\n            if(_initData.length > 0) {\n                (success,) = addr.call(_initData[i]);\n                require(success);\n            }\n        }\n\n        // Set ENS name\n        authereumEnsManager.register(_label, addr);\n\n        return AuthereumProxy(addr);\n    }\n\n    /// @dev Generate a salt out of a uint256 value and the sender\n    /// @param _salt A uint256 value to add randomness to the account creation\n    /// @param _sender Sender of the transaction\n    function _getSalt(uint256 _salt, address _sender) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_salt, _sender)); \n    }\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_authereumEnsManagerAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authereumEnsManager\",\"type\":\"address\"}],\"name\":\"authereumEnsManagerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"}],\"name\":\"initCodeChanged\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"authereumProxyFactoryVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_salt\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_label\",\"type\":\"string\"},{\"internalType\":\"bytes[]\",\"name\":\"_initData\",\"type\":\"bytes[]\"}],\"name\":\"createProxy\",\"outputs\":[{\"internalType\":\"contract AuthereumProxy\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAuthereumEnsManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitCode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_potentialOwner\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authereumEnsManagerAddress\",\"type\":\"address\"}],\"name\":\"setAuthereumEnsManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_initCode\",\"type\":\"bytes\"}],\"name\":\"setInitCode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AuthereumProxyFactory","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000d8cab604bdd8cbb7c3eb0c26f7dc3abffb005a920000000000000000000000009442a2eff399a9e97bcc6b2a4194399496f76e59","Library":"","LicenseType":"","SwarmSource":"bzzr://df4401333fb8c26a38547c751ff4c528d95f9c5a191e6bc81f110b4125072004"}]}