{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.10;\r\n\r\n/*\r\n* @Author Flash\r\n* Source at https://github.com/Flash-Git/Arca/tree/master/contracts\r\n*/\r\n\r\n/*\r\n* @Author Flash\r\n* @title Arca\r\n*\r\n* @dev Allows for the simultaneous trade of multiple asset types\r\n* Handles escrowless ERC20 and ERC721 transfers\r\n*/\r\n\r\ninterface Erc20 {\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\ninterface Erc721 {\r\n  function ownerOf(uint256 tokenId) external view returns (address owner);\r\n  function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n  function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n}\r\n\r\ncontract Arca {\r\n  event TradeAccepted(address indexed sender, address indexed partner, uint256 indexed boxNum, uint256 partnerNonce);\r\n  event TradeUnaccepted(address indexed sender, address indexed partner, uint256 indexed boxNum);\r\n  event TradeExecuted(address indexed sender, address indexed partner, uint256 indexed boxNum);\r\n  event OfferModifiedERC20(address indexed sender, address indexed partner, uint256 indexed boxNum,\r\n    address contractAdd, uint256 amount, uint8 index, uint256 nonce);\r\n  event OfferModifiedERC721(address indexed sender, address indexed partner, uint256 indexed boxNum,\r\n    address contractAdd, uint256 id, uint8 index, uint256 nonce);\r\n  event OfferRemovedERC20(address indexed sender, address indexed partner, uint256 indexed boxNum, uint8 index, uint256 nonce);\r\n  event OfferRemovedERC721(address indexed sender, address indexed partner, uint256 indexed boxNum, uint8 index, uint256 nonce);\r\n  event BoxCountModifiedERC20(address indexed sender, address indexed partner, uint256 indexed boxNum, uint8 count, uint256 nonce);\r\n  event BoxCountModifiedERC721(address indexed sender, address indexed partner, uint256 indexed boxNum, uint8 count, uint256 nonce);\r\n  event OwnerUpdated(address indexed oldOwner, address indexed newOwner);\r\n  event KilledContract(address indexed owner, address indexed newContract);\r\n\r\n  address payable public owner;\r\n  mapping(address => mapping(address => mapping(uint256 => Box))) private boxes;\r\n\r\n  struct OfferErc20 {\r\n    address add;\r\n    uint256 amount;\r\n  }\r\n\r\n  struct OfferErc721 {\r\n    address add;\r\n    uint256 id;\r\n  }\r\n\r\n  struct Box {\r\n    OfferErc20[] offersErc20;\r\n    OfferErc721[] offersErc721;\r\n    uint8 countErc20;\r\n    uint8 countErc721;\r\n    uint256 nonce;\r\n    uint256 partnerNonce;\r\n  }\r\n\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier isOwner() {\r\n    require(msg.sender == owner, \"Sender isn't the contract's owner\");\r\n\r\n    _;//Continue to run\r\n  }\r\n\r\n\r\n  /*\r\n  * GETTERS\r\n  */\r\n\r\n  function getOfferErc20(address _add1, address _add2, uint256 _boxNum, uint8 _index) external view returns(address, uint256) {\r\n    return (boxes[_add1][_add2][_boxNum].offersErc20[_index].add, boxes[_add1][_add2][_boxNum].offersErc20[_index].amount);\r\n  }\r\n  \r\n  function getOfferErc721(address _add1, address _add2, uint256 _boxNum, uint8 _index) external view returns(address, uint256) {\r\n    return (boxes[_add1][_add2][_boxNum].offersErc721[_index].add, boxes[_add1][_add2][_boxNum].offersErc721[_index].id);\r\n  }\r\n\r\n  function getErc20Count(address _add1, address _add2, uint256 _boxNum) external view returns(uint8) {\r\n    return boxes[_add1][_add2][_boxNum].countErc20;\r\n  }\r\n\r\n  function getErc721Count(address _add1, address _add2, uint256 _boxNum) external view returns(uint8) {\r\n    return boxes[_add1][_add2][_boxNum].countErc721;\r\n  }\r\n\r\n  function getNonce(address _add1, address _add2, uint256 _boxNum) external view returns(uint256) {\r\n    return boxes[_add1][_add2][_boxNum].nonce;\r\n  }\r\n\r\n  function getPartnerNonce(address _add1, address _add2, uint256 _boxNum) external view returns(uint256) {\r\n    return boxes[_add1][_add2][_boxNum].partnerNonce;\r\n  }\r\n\r\n\r\n  /*\r\n  * TRADE ACTIONS\r\n  */\r\n\r\n  function acceptTrade(address _tradePartner, uint256 _boxNum, uint256 _partnerNonce) external {\r\n    boxes[msg.sender][_tradePartner][_boxNum].partnerNonce = _partnerNonce+1; //Offset serves to avoid explicit \"satisfied\" variable\r\n    emit TradeAccepted(msg.sender, _tradePartner, _boxNum, _partnerNonce+1);\r\n\r\n    if(boxes[_tradePartner][msg.sender][_boxNum].partnerNonce == boxes[msg.sender][_tradePartner][_boxNum].nonce+1){\r\n      executeTrade(_tradePartner, _boxNum);\r\n    }\r\n  }\r\n\r\n  function unacceptTrade(address _tradePartner, uint256 _boxNum) external {\r\n    boxes[msg.sender][_tradePartner][_boxNum].partnerNonce = 0;\r\n    emit TradeUnaccepted(msg.sender, _tradePartner, _boxNum);\r\n  }\r\n\r\n  function executeTrade(address _tradePartner, uint256 _boxNum) private {\r\n    Box storage senderBox = boxes[msg.sender][_tradePartner][_boxNum];\r\n    Box storage prtnerBox = boxes[_tradePartner][msg.sender][_boxNum];\r\n\r\n    //Check Satisfaction\r\n    require(senderBox.nonce+1 == prtnerBox.partnerNonce, \"Sender not satisfied\");\r\n    require(prtnerBox.nonce+1 == senderBox.partnerNonce, \"Trade partner not satisfied\");\r\n\r\n    //Drop Satisfaction\r\n    senderBox.partnerNonce = 0;\r\n    prtnerBox.partnerNonce = 0;\r\n\r\n    //Execute Erc20 Transfers\r\n    executeTransfersErc20(msg.sender, _tradePartner, _boxNum);\r\n    executeTransfersErc20(_tradePartner, msg.sender, _boxNum);\r\n\r\n    //Execute Erc721 Transfers\r\n    executeTransfersErc721(msg.sender, _tradePartner, _boxNum);\r\n    executeTransfersErc721(_tradePartner, msg.sender, _boxNum);\r\n\r\n    //Wipe (Not Necessary)\r\n    senderBox.countErc20 = 0;\r\n    prtnerBox.countErc20 = 0;\r\n    senderBox.countErc721 = 0;\r\n    prtnerBox.countErc721 = 0;\r\n    \r\n    emit BoxCountModifiedERC20(msg.sender, _tradePartner, _boxNum, 0, senderBox.nonce);\r\n    emit BoxCountModifiedERC20(_tradePartner, msg.sender, _boxNum, 0, prtnerBox.nonce);\r\n\r\n    emit BoxCountModifiedERC721(msg.sender, _tradePartner, _boxNum, 0, senderBox.nonce);\r\n    emit BoxCountModifiedERC721(_tradePartner, msg.sender, _boxNum, 0, prtnerBox.nonce);\r\n\r\n    emit TradeExecuted(msg.sender, _tradePartner, _boxNum);\r\n  }\r\n\r\n\r\n  /*\r\n  * BOX FUNCTIONS\r\n  */\r\n\r\n  function pushOfferErc20(address _tradePartner, uint256 _boxNum, address _erc20Address, uint256 _amount) external {\r\n    addOfferErc20(_tradePartner, _boxNum, _erc20Address, _amount, boxes[msg.sender][_tradePartner][_boxNum].countErc20);\r\n  }\r\n\r\n  function addOfferErc20(address _tradePartner, uint256 _boxNum, address _erc20Address, uint256 _amount, uint8 _index) public {\r\n    require(Erc20(_erc20Address).allowance(msg.sender, address(this)) >= _amount, \"Insufficient allowance\");\r\n    \r\n    OfferErc20 memory offer = OfferErc20({add: _erc20Address, amount:_amount});\r\n    Box storage box = boxes[msg.sender][_tradePartner][_boxNum];\r\n    \r\n    if(box.offersErc20.length > _index){\r\n      box.offersErc20[_index] = offer;\r\n    }else{\r\n      box.offersErc20.push(offer);\r\n    }\r\n\r\n    if(box.countErc20 <= _index){\r\n      box.countErc20++;\r\n    }\r\n\r\n    emit OfferModifiedERC20(msg.sender, _tradePartner, _boxNum, _erc20Address, _amount, _index, box.nonce++);\r\n  }\r\n  \r\n  function pushOfferErc721(address _tradePartner, uint256 _boxNum, address _erc721Address, uint256 _id) external {\r\n    addOfferErc721(_tradePartner, _boxNum, _erc721Address, _id, boxes[msg.sender][_tradePartner][_boxNum].countErc721);\r\n  }\r\n  \r\n  function addOfferErc721(address _tradePartner, uint256 _boxNum, address _erc721Address, uint256 _id, uint8 _index) public {\r\n    require(Erc721(_erc721Address).ownerOf(_id) == msg.sender, \"Sender isn't owner of this erc721 token\");\r\n    require(Erc721(_erc721Address).isApprovedForAll(msg.sender, address(this)) == true, \"Contract not approved for erc721 token transfers\");\r\n\r\n    OfferErc721 memory offer = OfferErc721({add: _erc721Address, id:_id});\r\n    Box storage box = boxes[msg.sender][_tradePartner][_boxNum];\r\n\r\n    if(box.offersErc721.length > _index){\r\n      box.offersErc721[_index] = offer;\r\n    }else{\r\n      box.offersErc721.push(offer);\r\n    }\r\n\r\n    if(box.countErc721 <= _index){\r\n      box.countErc721++;\r\n    }\r\n\r\n    emit OfferModifiedERC721(msg.sender, _tradePartner, _boxNum, _erc721Address, _id, _index, box.nonce++);\r\n  }\r\n\r\n  function removeOfferErc20(address _tradePartner, uint256 _boxNum, uint8 _index) external {\r\n    Box storage box = boxes[msg.sender][_tradePartner][_boxNum];\r\n    box.offersErc20[_index].add = address(0);\r\n\r\n    emit OfferRemovedERC20(msg.sender, _tradePartner, _boxNum, _index, box.nonce++);\r\n  }\r\n\r\n  function removeOfferErc721(address _tradePartner, uint256 _boxNum, uint8 _index) external {\r\n    Box storage box = boxes[msg.sender][_tradePartner][_boxNum];\r\n    box.offersErc721[_index].add = address(0);\r\n\r\n    emit OfferRemovedERC721(msg.sender, _tradePartner, _boxNum, _index, box.nonce++);\r\n  }\r\n\r\n  //Set to 0 to clear\r\n  function setCountErc20(address _tradePartner, uint256 _boxNum, uint8 _count) external {\r\n    Box storage box = boxes[msg.sender][_tradePartner][_boxNum];\r\n    box.countErc20 = _count;\r\n\r\n    emit BoxCountModifiedERC20(msg.sender, _tradePartner, _boxNum, _count, box.nonce++);\r\n  }\r\n\r\n  //Set to 0 to clear\r\n  function setCountErc721(address _tradePartner, uint256 _boxNum, uint8 _count) external {\r\n    Box storage box = boxes[msg.sender][_tradePartner][_boxNum];\r\n    box.countErc721 = _count;\r\n\r\n    emit BoxCountModifiedERC721(msg.sender, _tradePartner, _boxNum, _count, box.nonce++);\r\n  }\r\n\r\n\r\n  /*\r\n  * EXECUTION\r\n  */\r\n\r\n  function executeTransfersErc20(address _add1, address _add2, uint256 _boxNum) private {\r\n    Box memory box = boxes[_add1][_add2][_boxNum];\r\n\r\n    OfferErc20[] memory offers = box.offersErc20;\r\n    for(uint8 i = 0; i < box.countErc20; i++){\r\n      if(box.offersErc20[i].add != address(0)){\r\n        directErc20Transfer(_add1, _add2, offers[i].add, offers[i].amount);\r\n      }\r\n    }\r\n  }\r\n  \r\n  function executeTransfersErc721(address _add1, address _add2, uint256 _boxNum) private {\r\n    Box memory box = boxes[_add1][_add2][_boxNum];\r\n\r\n    OfferErc721[] memory offers = box.offersErc721;\r\n    for(uint8 i = 0; i < box.countErc721; i++){\r\n      if(box.offersErc721[i].add != address(0)){\r\n        directErc721Transfer(_add1, _add2, offers[i].add, offers[i].id);\r\n      }\r\n    }\r\n  }\r\n\r\n  function directErc20Transfer(address _add1, address _add2, address _erc20Address, uint256 _amount) private {\r\n    uint startBalance = Erc20(_erc20Address).balanceOf(_add2);\r\n    Erc20(_erc20Address).transferFrom(_add1, _add2, _amount);\r\n    require(startBalance + _amount == Erc20(_erc20Address).balanceOf(_add2), \"Balance of ERC20 failed to update\");\r\n  }\r\n\r\n  function directErc721Transfer(address _add1, address _add2, address _erc721Address, uint256 _id) private {\r\n    Erc721(_erc721Address).safeTransferFrom(_add1, _add2, _id);\r\n    require(Erc721(_erc721Address).ownerOf(_id) == _add2, \"Owner of ERC721 failed to update\");\r\n  }\r\n\r\n\r\n  /*\r\n  * OWNER\r\n  */\r\n\r\n  function updateOwner(address payable _newOwner) external isOwner() {\r\n    owner = _newOwner;\r\n    emit OwnerUpdated(msg.sender, owner);\r\n  }\r\n\r\n  function killContract(address _newContract) external isOwner() {\r\n    emit KilledContract(msg.sender, _newContract);\r\n    selfdestruct(owner);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_add1\",\"type\":\"address\"},{\"name\":\"_add2\",\"type\":\"address\"},{\"name\":\"_boxNum\",\"type\":\"uint256\"}],\"name\":\"getErc20Count\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tradePartner\",\"type\":\"address\"},{\"name\":\"_boxNum\",\"type\":\"uint256\"},{\"name\":\"_partnerNonce\",\"type\":\"uint256\"}],\"name\":\"acceptTrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_add1\",\"type\":\"address\"},{\"name\":\"_add2\",\"type\":\"address\"},{\"name\":\"_boxNum\",\"type\":\"uint256\"},{\"name\":\"_index\",\"type\":\"uint8\"}],\"name\":\"getOfferErc721\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tradePartner\",\"type\":\"address\"},{\"name\":\"_boxNum\",\"type\":\"uint256\"}],\"name\":\"unacceptTrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tradePartner\",\"type\":\"address\"},{\"name\":\"_boxNum\",\"type\":\"uint256\"},{\"name\":\"_erc20Address\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_index\",\"type\":\"uint8\"}],\"name\":\"addOfferErc20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tradePartner\",\"type\":\"address\"},{\"name\":\"_boxNum\",\"type\":\"uint256\"},{\"name\":\"_count\",\"type\":\"uint8\"}],\"name\":\"setCountErc20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"updateOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_add1\",\"type\":\"address\"},{\"name\":\"_add2\",\"type\":\"address\"},{\"name\":\"_boxNum\",\"type\":\"uint256\"}],\"name\":\"getPartnerNonce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tradePartner\",\"type\":\"address\"},{\"name\":\"_boxNum\",\"type\":\"uint256\"},{\"name\":\"_erc721Address\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"pushOfferErc721\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_add1\",\"type\":\"address\"},{\"name\":\"_add2\",\"type\":\"address\"},{\"name\":\"_boxNum\",\"type\":\"uint256\"}],\"name\":\"getNonce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newContract\",\"type\":\"address\"}],\"name\":\"killContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tradePartner\",\"type\":\"address\"},{\"name\":\"_boxNum\",\"type\":\"uint256\"},{\"name\":\"_count\",\"type\":\"uint8\"}],\"name\":\"setCountErc721\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_add1\",\"type\":\"address\"},{\"name\":\"_add2\",\"type\":\"address\"},{\"name\":\"_boxNum\",\"type\":\"uint256\"}],\"name\":\"getErc721Count\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tradePartner\",\"type\":\"address\"},{\"name\":\"_boxNum\",\"type\":\"uint256\"},{\"name\":\"_erc721Address\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_index\",\"type\":\"uint8\"}],\"name\":\"addOfferErc721\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_add1\",\"type\":\"address\"},{\"name\":\"_add2\",\"type\":\"address\"},{\"name\":\"_boxNum\",\"type\":\"uint256\"},{\"name\":\"_index\",\"type\":\"uint8\"}],\"name\":\"getOfferErc20\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tradePartner\",\"type\":\"address\"},{\"name\":\"_boxNum\",\"type\":\"uint256\"},{\"name\":\"_index\",\"type\":\"uint8\"}],\"name\":\"removeOfferErc20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tradePartner\",\"type\":\"address\"},{\"name\":\"_boxNum\",\"type\":\"uint256\"},{\"name\":\"_erc20Address\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"pushOfferErc20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tradePartner\",\"type\":\"address\"},{\"name\":\"_boxNum\",\"type\":\"uint256\"},{\"name\":\"_index\",\"type\":\"uint8\"}],\"name\":\"removeOfferErc721\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"partner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"boxNum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"partnerNonce\",\"type\":\"uint256\"}],\"name\":\"TradeAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"partner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"boxNum\",\"type\":\"uint256\"}],\"name\":\"TradeUnaccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"partner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"boxNum\",\"type\":\"uint256\"}],\"name\":\"TradeExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"partner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"boxNum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"contractAdd\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"OfferModifiedERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"partner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"boxNum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"contractAdd\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"OfferModifiedERC721\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"partner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"boxNum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"OfferRemovedERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"partner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"boxNum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"OfferRemovedERC721\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"partner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"boxNum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"count\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"BoxCountModifiedERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"partner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"boxNum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"count\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"BoxCountModifiedERC721\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"KilledContract\",\"type\":\"event\"}]","ContractName":"Arca","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://50f34ae31777a239aebc210f73f65e3e54a5a2a86f6bd3c62461f26c15f33463"}]}