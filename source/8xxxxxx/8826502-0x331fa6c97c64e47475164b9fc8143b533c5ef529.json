{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.12 <0.6.0;  \r\n\r\n// -------------------------------------------------------------------------------------------\r\n// EXMR FOUNDATION = EXMR FND.\r\n// \"Public Smart Contract\"\r\n//\r\n// For details, please visit: https://exmrfoundation.org\r\n// Staking Reward:            https://dapp.exmr.io\r\n// We handle different projects, we are opening the doors to the entire developer community \r\n// so they can create Dapps and platforms based on our EXMR and get rewards for it...\r\n// -------------------------------------------------------------------------------------------\r\n\r\n\r\ncontract ownerShip    \r\n{\r\n    \r\n    address payable public owner;\r\n\r\n    address payable public newOwner;\r\n\r\n    bool public safeGuard ; \r\n\r\n    \r\n    event OwnershipTransferredEv(address payable indexed previousOwner, address payable indexed newOwner);\r\n\r\n    constructor() public \r\n    {\r\n        \r\n        owner = msg.sender;\r\n        \r\n        safeGuard = false;\r\n\r\n    }\r\n    \r\n    \r\n    modifier onlyOwner() \r\n    {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    function transferOwnership(address payable _newOwner) public onlyOwner \r\n    {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n\r\n    function acceptOwnership() public \r\n    {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferredEv(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n\r\n    function changesafeGuardStatus() onlyOwner public\r\n    {\r\n        if (safeGuard == false)\r\n        {\r\n            safeGuard = true;\r\n        }\r\n        else\r\n        {\r\n            safeGuard = false;    \r\n        }\r\n    }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n   \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n   \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    \r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n   \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n       \r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        \r\n\r\n        return c;\r\n    }\r\n\r\n    \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract tokenERC20 is  ownerShip\r\n{\r\n    \r\n    using SafeMath for uint256;\r\n    bytes23 public name;\r\n    bytes8 public symbol;\r\n    uint8 public decimals; \r\n    uint256 public totalSupply;\r\n    uint256 public totalMintAfterInitial;\r\n    uint256 public maximumSupply;\r\n\r\n    uint public burningRate = 500;    // 500=5%\r\n\r\n    \r\n    struct userBalance \r\n    {\r\n        uint256 totalValue;\r\n        uint256 freezeValue;\r\n        uint256 freezeDate;\r\n        uint256 meltValue;    \r\n    }\r\n\r\n    \r\n    mapping (address => mapping (address => userBalance)) public tokens;\r\n\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    \r\n   \r\n    mapping (address => bool) public frozenAccount;\r\n        \r\n    \r\n    event FrozenFunds(address target, bool frozen);\r\n    \r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n  \r\n    \r\n    event Burn(address indexed from, uint256 value);\r\n\r\n     \r\n    function calculatePercentage(uint256 PercentOf, uint256 percentTo ) internal pure returns (uint256) \r\n    {\r\n        uint256 factor = 10000;\r\n        require(percentTo <= factor);\r\n        uint256 c = PercentOf.mul(percentTo).div(factor);\r\n        return c;\r\n    }   \r\n\r\n    function setBurningRate(uint _burningRate) onlyOwner public returns(bool success)\r\n    {\r\n        burningRate = _burningRate;\r\n        return true;\r\n    }\r\n\r\n   \r\n    struct tokenTypeData\r\n    {\r\n        bytes23 tokenName;\r\n        bytes8 tokenSymbol;\r\n        uint decimalCount;\r\n        uint minFreezingValue;\r\n        uint rateFactor;      \r\n        uint perDayFreezeRate;   \r\n        bool freezingAllowed;   \r\n    }\r\n    \r\n    mapping (address => tokenTypeData) public tokenTypeDatas;\r\n\r\n    constructor () public {\r\n    \tdecimals = 18; \r\n        totalSupply = 18000000000000000000000000;       \r\n        maximumSupply = 75000000000000000000000000;\r\n        balanceOf[msg.sender]=totalSupply;       \r\n        tokens[address(this)][owner].totalValue = balanceOf[msg.sender];\r\n        name = \"EXMR FDN.\";                           \r\n        symbol = \"EXMR\";                       \r\n\r\n       \r\n        tokenTypeData memory temp;\r\n\r\n        temp.tokenName=name;\r\n        temp.tokenSymbol=symbol;\r\n        temp.decimalCount=decimals;\r\n        temp.minFreezingValue=100;\r\n        temp.rateFactor=10000;     \r\n        temp.perDayFreezeRate=1;   \r\n        temp.freezingAllowed=true;  \r\n        tokenTypeDatas[address(this)] = temp;\r\n        emit Transfer(address(0), msg.sender, totalSupply);\r\n    }\r\n    \r\n         \r\n        function _transfer(address _from, address _to, uint _value) internal {\r\n            require(!safeGuard,\"safeGuard Active\");\r\n\t\t\trequire (_to != address(0),\"to is address 0\");                               \r\n\t\t\trequire (balanceOf[_from] >= _value, \"no balance in from\");               \r\n\t\t\trequire (balanceOf[_to].add(_value) >= balanceOf[_to],\"overflow balance\"); \r\n\t\t\trequire(!frozenAccount[_from],\"from account frozen\");                     \r\n\t\t\trequire(!frozenAccount[_to],\"to account frozen\");                       \r\n\t\t\tbalanceOf[_from] = balanceOf[_from].sub(_value);    \r\n            tokens[address(this)][_from].totalValue = tokens[address(this)][_from].totalValue.sub(_value); \r\n\t\t\tbalanceOf[_to] = balanceOf[_to].add(_value);        \r\n            tokens[address(this)][_to].totalValue = tokens[address(this)][_to].totalValue.add(_value);            \r\n            uint burnValue;\r\n            if(!(msg.sender == owner || msg.sender == address(this)))   \r\n            {\r\n                burnValue = calculatePercentage(_value,burningRate); \r\n                require(burnInternal(_to, burnValue),\"burning failed\");   \r\n            }\r\n\t\t\temit Transfer(_from, _to,_value);\r\n            \r\n        } \r\n\r\n        function burnInternal(address _burnFrom, uint _burnValue) internal returns(bool success)\r\n        {   \r\n            require(!safeGuard,\"safeGuard Active\");\r\n            require(_burnFrom != address(0));\r\n            require(balanceOf[_burnFrom] >= _burnValue);   \r\n\t\t\trequire(!frozenAccount[_burnFrom],\"to account frozen\");                       \r\n\t\t\tbalanceOf[_burnFrom] = balanceOf[_burnFrom].sub(_burnValue);    \r\n            tokens[address(this)][_burnFrom].totalValue = tokens[address(this)][_burnFrom].totalValue.sub(_burnValue); \r\n\t\t\tbalanceOf[address(0)] = balanceOf[address(0)].add(_burnValue);        \r\n            tokens[address(this)][address(0)].totalValue = tokens[address(this)][address(0)].totalValue.add(_burnValue);            \r\n            totalSupply = totalSupply.sub(_burnValue);            \r\n\t\t\temit Transfer(_burnFrom, address(0),_burnValue);                         \r\n            return true;            \r\n        }\r\n\r\n\t\tfunction mintInternal(uint256 mintedAmount)  internal returns (bool success) {                         \r\n\t\t\ttotalSupply = totalSupply.add(mintedAmount);\r\n            totalMintAfterInitial = totalMintAfterInitial.add(mintedAmount);\r\n            return true;\r\n\t\t}\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n         _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(!safeGuard);\r\n        require(_from != address(0),\"transfer from adderss(0) is invalid\");\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n        \r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n        require(!safeGuard);\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\t\t\r\n\t\tfunction mintToken(address target, uint256 mintedAmount)  public onlyOwner returns (bool success) {\r\n\t\t\tbalanceOf[target] = balanceOf[target].add(mintedAmount);\r\n            tokens[address(this)][target].totalValue = tokens[address(this)][target].totalValue.add(mintedAmount); //parallel record for multi token addressing need                         \r\n\t\t\ttotalSupply = totalSupply.add(mintedAmount);\r\n            totalMintAfterInitial = totalMintAfterInitial.add(mintedAmount);\r\n\t\t \temit Transfer(address(0), address(this), mintedAmount);\r\n            return true;\r\n\t\t}\r\n\t\t\r\n    function burn(uint256 _value) public onlyOwner returns (bool success) {\r\n        burnInternal(msg.sender, _value);\r\n        return true;\r\n    }\r\n    \r\n        \r\n    function burnFrom(address _from, uint256 _value) public onlyOwner returns (bool success) {\r\n        burnInternal(_from, _value);\r\n        return true;\r\n    }\r\n        \r\n}\r\n\r\n\r\ninterface ERC20Necessary {\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract EXMR_FDN is tokenERC20\r\n{\r\n\r\n    using SafeMath for uint256;\r\n    \r\n    \t\r\n        bool public whitelistingStatus = false;\r\n        mapping (address => bool) public whitelisted;\r\n\r\n        \r\n        function changeWhitelistingStatus() onlyOwner public{\r\n            if (whitelistingStatus == false){\r\n\t\t\t    whitelistingStatus = true;\r\n                whitelisted[owner]= true;\r\n            }\r\n            else{\r\n                whitelistingStatus = false;    \r\n            }\r\n\t\t}\r\n\t\t\r\n\t\t\r\n        function whitelistUser(address userAddress) onlyOwner public{\r\n            require(whitelistingStatus == true);\r\n            require(userAddress != address(0));\r\n            whitelisted[userAddress] = true;\r\n\t\t}    \r\n\t\t\r\n\r\n\r\n\t\tfunction freezeAccount(address target, bool freeze) onlyOwner public {\r\n\t\t\t\tfrozenAccount[target] = freeze;\r\n\t\t\temit  FrozenFunds(target, freeze);\r\n\t\t}\r\n        \r\n\r\n        function manualWithdrawToken(uint256 _amount) onlyOwner public {\r\n      \t\tuint256 tokenAmount = _amount.mul(100);\r\n            _transfer(address(this), msg.sender, tokenAmount);\r\n        }\r\n          \r\n        \r\n        function manualWithdrawEther()onlyOwner public{\r\n\t\t\tuint256 amount=address(this).balance;\r\n\t\t\towner.transfer(amount);\r\n\t\t}\r\n\t    //Bounty\r\n        function Bounty(address[] memory recipients,uint[] memory tokenAmount) public onlyOwner returns (bool) {\r\n            uint reciversLength  = recipients.length;\r\n            require(reciversLength <= 150);\r\n            for(uint i = 0; i < reciversLength; i++)\r\n            {\r\n                  //This will loop through all the recipients and send them the specified tokens\r\n                  _transfer(owner, recipients[i], tokenAmount[i]);\r\n            }\r\n            return true;\r\n        }\r\n    \r\n\r\n    uint public meltHoldSeconds = 172800;  // 48 Hr. user can withdraw only after this period\r\n\r\n\r\n    event tokenDepositEv(address token, address user, uint amount, uint balance);\r\n    event tokenWithdrawEv(address token, address user, uint amount, uint balance);\r\n\r\n    function setWithdrawWaitingPeriod(uint valueInSeconds) onlyOwner public returns (bool)\r\n    {\r\n        meltHoldSeconds = valueInSeconds;\r\n        return true;\r\n    }\r\n\r\n    function newTokenTypeData(address token,bytes23 _tokenName, bytes8 _tokenSymbol, uint _decimalCount, uint _minFreezingValue, uint _rateFactor, uint _perDayFreezeRate) onlyOwner public returns (bool)\r\n    {\r\n        tokenTypeData memory temp;\r\n\r\n        temp.tokenName=_tokenName;\r\n        temp.tokenSymbol=_tokenSymbol;\r\n        temp.decimalCount=_decimalCount;\r\n        temp.minFreezingValue=_minFreezingValue;\r\n        temp.rateFactor=_rateFactor;      \r\n        temp.perDayFreezeRate=_perDayFreezeRate;   \r\n        temp.freezingAllowed=true;  \r\n        tokenTypeDatas[token] = temp;\r\n        return true;\r\n    }\r\n\r\n    function freezingOnOffForTokenType(address token) onlyOwner public returns (bool)\r\n    {\r\n        if (tokenTypeDatas[token].freezingAllowed == false)\r\n        {\r\n            tokenTypeDatas[token].freezingAllowed = true;\r\n        }\r\n        else\r\n        {\r\n            tokenTypeDatas[token].freezingAllowed = false;    \r\n        } \r\n        return true;     \r\n    }\r\n\r\n    function setMinFreezingValue(address token, uint _minFreezingValue) onlyOwner public returns (bool)\r\n    {\r\n        tokenTypeDatas[token].minFreezingValue = _minFreezingValue;\r\n        return true;\r\n    }\r\n\r\n    function setRateFactor(address token, uint _rateFactor) onlyOwner public returns (bool)\r\n    {\r\n        tokenTypeDatas[token].rateFactor = _rateFactor;\r\n        return true;\r\n    }\r\n\r\n    function setPerDayFreezeRate(address token, uint _perDayFreezeRate) onlyOwner public returns (bool)\r\n    {\r\n        tokenTypeDatas[token].perDayFreezeRate = _perDayFreezeRate;\r\n        return true;\r\n    }\r\n\r\n   \r\n    function tokenDeposit(address token, uint amount) public \r\n    {\r\n        \r\n        require(token!=address(0),\"Address(0) found, can't continue\");\r\n        require(ERC20Necessary(token).transferFrom(msg.sender, address(this), amount),\"ERC20 'transferFrom' call failed\");\r\n        tokens[token][msg.sender].totalValue = tokens[token][msg.sender].totalValue.add(amount);\r\n        emit tokenDepositEv(token, msg.sender, amount, tokens[token][msg.sender].totalValue);\r\n    }\r\n\r\n    \r\n    function tokenWithdraw(address token, uint amount) public\r\n    {\r\n        require(!safeGuard,\"System Paused By Admin\");\r\n        require(token != address(this));\r\n        require(token!=address(0),\"Address(0) found, can't continue\");\r\n        if(now.sub(meltHoldSeconds) > tokens[token][msg.sender].freezeDate)\r\n        {\r\n           tokens[token][msg.sender].meltValue = 0; \r\n        }\r\n        require(tokens[token][msg.sender].totalValue.sub(tokens[token][msg.sender].freezeValue.add(tokens[token][msg.sender].meltValue)) >= amount,\"Required amount is not free to withdraw\");       \r\n        tokens[token][msg.sender].totalValue = tokens[token][msg.sender].totalValue.sub(amount);\r\n        ERC20Necessary(token).transfer(msg.sender, amount);\r\n        emit tokenWithdrawEv(token, msg.sender, amount, tokens[token][msg.sender].totalValue);\r\n    }\r\n\r\n    event releaseMyExmrEv(address token, uint amount);\r\n    //releasing after minumum waiting period to withdraw EXMR \r\n    function releaseMyExmr(address token) public returns (bool)\r\n    {\r\n        require(!safeGuard,\"System Paused By Admin\");\r\n        require(token!=address(0),\"Address(0) found, can't continue\");\r\n        require(token == address(this),\"Only pissible for EXMR \");\r\n        require(now.sub(meltHoldSeconds) > tokens[token][msg.sender].freezeDate,\"wait period is not over\");\r\n        uint amount = tokens[token][msg.sender].meltValue;\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(amount);\r\n        tokens[token][msg.sender].totalValue = balanceOf[msg.sender].add(tokens[token][msg.sender].freezeValue );\r\n        tokens[token][msg.sender].meltValue = 0; \r\n        emit releaseMyExmrEv(token, amount);\r\n        return true;\r\n    }\r\n\r\n    event tokenBalanceFreezeEv(address token, uint amount, uint earning);\r\n\r\n\r\n    function tokenBalanceFreeze(address token, uint amount)   public returns (bool)\r\n    {\r\n        require(!safeGuard,\"System Paused By Admin\");\r\n        require(tokenTypeDatas[token].freezingAllowed,\"token type not allowed to freeze\");\r\n        require(token!=address(0),\"Address(0) found, can't continue\");\r\n        address callingUser = msg.sender;\r\n        require(msg.sender != address(0),\"Address(0) found, can't continue\");\r\n\r\n        require(amount <=  tokens[token][callingUser].totalValue.sub(tokens[token][callingUser].freezeValue.add(tokens[token][callingUser].meltValue)) && amount >= tokenTypeDatas[token].minFreezingValue, \"less than required or less balance\");\r\n        \r\n        uint freezeValue = tokens[token][callingUser].freezeValue;\r\n        uint earnedValue;\r\n        if (freezeValue > 0)\r\n        {\r\n            earnedValue = getEarning(token,callingUser,freezeValue);\r\n            require(mintInternal(earnedValue),\"minting failed\");\r\n            tokens[address(this)][callingUser].meltValue = tokens[address(this)][callingUser].meltValue.add(earnedValue);\r\n        }\r\n\r\n        tokens[token][callingUser].freezeValue = tokens[token][callingUser].freezeValue.add(amount);\r\n        if (token==address(this))\r\n        {\r\n            balanceOf[callingUser] = balanceOf[callingUser].sub(amount);\r\n        }\r\n        tokens[token][callingUser].freezeDate = now;\r\n\r\n        emit tokenBalanceFreezeEv(token,amount,earnedValue);\r\n        return true;\r\n    }\r\n\r\n    function getEarning(address token,address user,uint amount) internal view returns(uint256)\r\n    {\r\n        uint effectiveAmount = calculatePercentage(amount,tokenTypeDatas[token].rateFactor);\r\n        uint interestAmount = calculatePercentage(effectiveAmount,tokenTypeDatas[token].perDayFreezeRate);\r\n        uint secondsPassed = (now - tokens[token][user].freezeDate);\r\n        uint daysPassed=0;\r\n        if (secondsPassed >= 86400)  // if less than one day earning will be zero\r\n        {\r\n           daysPassed = secondsPassed.div(86400); \r\n        }\r\n        return daysPassed.mul(interestAmount);\r\n    }\r\n\r\n\r\n    event tokenBalanceMeltEv(address token, uint amount, uint earning);\r\n\r\n\r\n    function tokenBalanceMelt(address token, uint amount)   public returns (bool)\r\n    {\r\n        require(!safeGuard,\"System Paused By Admin\");\r\n        require(token!=address(0),\"Address(0) found, can't continue\");\r\n        address callingUser = msg.sender;\r\n        require(msg.sender != address(0),\"Address(0) found, can't continue\");\r\n        require(amount <=  tokens[token][callingUser].freezeValue && amount > 0, \"less than required or less balance\");\r\n        \r\n        uint freezeValue = tokens[token][callingUser].freezeValue;\r\n        uint earnedValue = getEarning(token,callingUser,freezeValue);\r\n        require(mintInternal(earnedValue),\"minting failed\");\r\n        tokens[address(this)][callingUser].meltValue = tokens[address(this)][callingUser].meltValue.add(earnedValue);       \r\n        \r\n        tokens[token][callingUser].freezeValue = tokens[token][callingUser].freezeValue.sub(amount);\r\n        if (token==address(this))\r\n        {\r\n            tokens[token][callingUser].meltValue = tokens[token][callingUser].meltValue.add(amount);\r\n        }\r\n\r\n        tokens[token][callingUser].freezeDate = now;\r\n        emit tokenBalanceMeltEv(token,amount,earnedValue);\r\n        return true;\r\n    }\r\n\r\n    function viewMyReward(address token) public view returns(uint freezedValue, uint rewardValue)\r\n    {\r\n        address callingUser = msg.sender;\r\n        uint freezeValue = tokens[token][callingUser].freezeValue;\r\n        uint earnedValue = getEarning(token,callingUser,freezeValue);\r\n        return (freezeValue,earnedValue);\r\n    }\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address payable\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferredEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"releaseMyExmrEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earning\",\"type\":\"uint256\"}],\"name\":\"tokenBalanceFreezeEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earning\",\"type\":\"uint256\"}],\"name\":\"tokenBalanceMeltEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"tokenDepositEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"tokenWithdrawEv\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenAmount\",\"type\":\"uint256[]\"}],\"name\":\"Bounty\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burningRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"changeWhitelistingStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"changesafeGuardStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"freezingOnOffForTokenType\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"manualWithdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"manualWithdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"meltHoldSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"bytes23\",\"name\":\"\",\"type\":\"bytes23\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes23\",\"name\":\"_tokenName\",\"type\":\"bytes23\"},{\"internalType\":\"bytes8\",\"name\":\"_tokenSymbol\",\"type\":\"bytes8\"},{\"internalType\":\"uint256\",\"name\":\"_decimalCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minFreezingValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rateFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_perDayFreezeRate\",\"type\":\"uint256\"}],\"name\":\"newTokenTypeData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"releaseMyExmr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"safeGuard\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burningRate\",\"type\":\"uint256\"}],\"name\":\"setBurningRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minFreezingValue\",\"type\":\"uint256\"}],\"name\":\"setMinFreezingValue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_perDayFreezeRate\",\"type\":\"uint256\"}],\"name\":\"setPerDayFreezeRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rateFactor\",\"type\":\"uint256\"}],\"name\":\"setRateFactor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"valueInSeconds\",\"type\":\"uint256\"}],\"name\":\"setWithdrawWaitingPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"bytes8\",\"name\":\"\",\"type\":\"bytes8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"tokenBalanceFreeze\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"tokenBalanceMelt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"tokenDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenTypeDatas\",\"outputs\":[{\"internalType\":\"bytes23\",\"name\":\"tokenName\",\"type\":\"bytes23\"},{\"internalType\":\"bytes8\",\"name\":\"tokenSymbol\",\"type\":\"bytes8\"},{\"internalType\":\"uint256\",\"name\":\"decimalCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minFreezingValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perDayFreezeRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"freezingAllowed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"tokenWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freezeValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freezeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"meltValue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalMintAfterInitial\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"viewMyReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"freezedValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardValue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"whitelistUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistingStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"EXMR_FDN","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://3a8fa2f8c6d095c09255a7b004f1edadd44c596c8dfc4f2b1a3792c02d1db46e"}]}