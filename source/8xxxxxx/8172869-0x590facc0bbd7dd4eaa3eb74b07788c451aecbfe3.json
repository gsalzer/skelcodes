{"status":"1","message":"OK","result":[{"SourceCode":"{\"GlosferToken.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\nimport \\\"SafeMath.sol\\\";\\r\\n\\r\\ncontract GlosferToken {\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    // ## Variables ## //    \\r\\n    string public name = \\\"Glosfer Token\\\";\\r\\n    string public symbol = \\\"GLO\\\";\\r\\n    uint256 public decimals = 18;\\r\\n    // Beneficiary of tokens\\r\\n    uint256 public totalSupply;\\r\\n    uint256 public ProjectSupply;\\r\\n    uint256 public PrivateSale;\\r\\n    uint256 public LockTwoYears;\\r\\n    uint256 public LockOneYear;\\r\\n    uint256 public DappSupply;\\r\\n    address public admin;\\r\\n    address public projectSupply;\\r\\n    address public privateSale;\\r\\n    // Address for locked tokens for two years\\r\\n    address public lockTwoYears;\\r\\n    // Address for locked tokens for one year\\r\\n    address public lockOneYear;\\r\\n    address public dappSupply;\\r\\n    uint256 public releaseTime;\\r\\n    bool public released;\\r\\n    uint public lockTypeOneCounter;\\r\\n    uint public lockTypeTwoCounter;\\r\\n    bool public oneYearReleased;\\r\\n\\r\\n    mapping(address =\\u003e uint256) public balanceOf;\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) public allowance;\\r\\n\\r\\n    // Events\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    constructor(address _admin, address _projectSupply, address _privateSale, address _dappSupply, address _lockTwoYears, address _lockOneYear, uint256 _releaseTime) public {\\r\\n        admin = _admin;\\r\\n        projectSupply = _projectSupply;\\r\\n        privateSale = _privateSale;\\r\\n        lockTwoYears = _lockTwoYears;\\r\\n        lockOneYear = _lockOneYear;\\r\\n        dappSupply = _dappSupply;\\r\\n\\r\\n        releaseTime = _releaseTime;\\r\\n        released = false;\\r\\n\\r\\n        totalSupply = 4000000000 * (10 ** decimals);\\r\\n\\r\\n        ProjectSupply = totalSupply * 15 / 100;\\r\\n        balanceOf[_projectSupply] = ProjectSupply;\\r\\n\\r\\n        PrivateSale = totalSupply * 10 / 100;\\r\\n        balanceOf[_privateSale] = PrivateSale;\\r\\n\\r\\n        DappSupply = totalSupply * 65 / 100;\\r\\n        balanceOf[_dappSupply] = DappSupply;\\r\\n\\r\\n        LockTwoYears = totalSupply * 5 / 100;\\r\\n        LockOneYear = totalSupply * 5 / 100;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner {\\r\\n        require(msg.sender == admin);\\r\\n        _;                            \\r\\n    }\\r\\n\\r\\n    function setReleaseTime(uint256 _releaseTime) public onlyOwner {\\r\\n        releaseTime = _releaseTime;        \\r\\n    }\\r\\n\\r\\n    function transfer(address _to, uint256 _value) public returns (bool success) {\\r\\n        require(balanceOf[msg.sender] \\u003e= _value);\\r\\n        _transfer(msg.sender, _to, _value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _transfer(address _from, address _to, uint256 _value) internal {\\r\\n        require(_to != address(0));\\r\\n        balanceOf[_from] = balanceOf[_from].sub(_value);\\r\\n        balanceOf[_to] = balanceOf[_to].add(_value);\\r\\n        emit Transfer(_from, _to, _value);\\r\\n    }\\r\\n\\r\\n    function approve(address _spender, uint256 _value) public returns (bool success) {\\r\\n        require(_spender != address(0));\\r\\n        allowance[msg.sender][_spender] = _value;\\r\\n        emit Approval(msg.sender, _spender, _value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\\r\\n        require(_value \\u003c= balanceOf[_from]);\\r\\n        require(_value \\u003c= allowance[_from][msg.sender]);\\r\\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\\r\\n        _transfer(_from, _to, _value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function release() public onlyOwner {        \\r\\n        require(released == false);\\r\\n        require(now \\u003e= releaseTime);\\r\\n        \\r\\n        if (lockTypeOneCounter \\u003c 24)\\r\\n            lockTypeOneCounter ++;\\r\\n        \\r\\n        if (lockTypeTwoCounter \\u003c 12)\\r\\n            lockTypeTwoCounter ++;\\r\\n        \\r\\n        // One year release \\r\\n        if (oneYearReleased == false) {\\r\\n            balanceOf[lockOneYear] = balanceOf[lockOneYear].add(LockOneYear.div(12));\\r\\n            if (lockTypeTwoCounter == 12)\\r\\n                // All released for one year\\r\\n                oneYearReleased = true;\\r\\n        }\\r\\n\\r\\n        // Two years release \\r\\n        if (released == false) {\\r\\n            balanceOf[lockTwoYears] = balanceOf[lockTwoYears].add(LockTwoYears.div(24));            \\r\\n            if (lockTypeOneCounter == 24)\\r\\n                // All released for two years\\r\\n                released = true;\\r\\n            else\\r\\n                // Increase release time for one month\\r\\n                releaseTime = releaseTime + 2678400;\\r\\n        }\\r\\n    }\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it\\u0027s recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, \\\"SafeMath: subtraction overflow\\\");\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b \\u003e 0, \\\"SafeMath: division by zero\\\");\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b != 0, \\\"SafeMath: modulo by zero\\\");\\r\\n        return a % b;\\r\\n    }\\r\\n}\"}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oneYearReleased\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockTwoYears\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PrivateSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"projectSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dappSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockTypeOneCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LockTwoYears\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockTypeTwoCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"released\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LockOneYear\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DappSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_releaseTime\",\"type\":\"uint256\"}],\"name\":\"setReleaseTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockOneYear\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releaseTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateSale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ProjectSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"},{\"name\":\"_projectSupply\",\"type\":\"address\"},{\"name\":\"_privateSale\",\"type\":\"address\"},{\"name\":\"_dappSupply\",\"type\":\"address\"},{\"name\":\"_lockTwoYears\",\"type\":\"address\"},{\"name\":\"_lockOneYear\",\"type\":\"address\"},{\"name\":\"_releaseTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"GlosferToken","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000ed33f6f33d9dbd5ee434abb680d0c5e989bb7bff000000000000000000000000ddf64aa822d53eba7a3162e5ec15cde3a97a3890000000000000000000000000678416b5a400f509c10ff1593fc915f5dcc8ddc6000000000000000000000000cc5fb4a44b208acfaf2cb3a94ee80346c61913c0000000000000000000000000aafb95c4c0dffb1506fce2c1f3ca241174a91a99000000000000000000000000509c03f8eba71c27b2a3e6187752f0a49112567e000000000000000000000000000000000000000000000000000000005d589500","Library":"","SwarmSource":"bzzr://34b3f4e74d85ed585f6a6f6df7d07996c2e0b353d8e7bc35e5063395250085d3"}]}