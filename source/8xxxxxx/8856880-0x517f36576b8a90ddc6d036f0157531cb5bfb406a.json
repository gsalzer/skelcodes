{"status":"1","message":"OK","result":[{"SourceCode":"// File: @aragon/os/contracts/common/UnstructuredStorage.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\nlibrary UnstructuredStorage {\r\n    function getStorageBool(bytes32 position) internal view returns (bool data) {\r\n        assembly { data := sload(position) }\r\n    }\r\n\r\n    function getStorageAddress(bytes32 position) internal view returns (address data) {\r\n        assembly { data := sload(position) }\r\n    }\r\n\r\n    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\r\n        assembly { data := sload(position) }\r\n    }\r\n\r\n    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\r\n        assembly { data := sload(position) }\r\n    }\r\n\r\n    function setStorageBool(bytes32 position, bool data) internal {\r\n        assembly { sstore(position, data) }\r\n    }\r\n\r\n    function setStorageAddress(bytes32 position, address data) internal {\r\n        assembly { sstore(position, data) }\r\n    }\r\n\r\n    function setStorageBytes32(bytes32 position, bytes32 data) internal {\r\n        assembly { sstore(position, data) }\r\n    }\r\n\r\n    function setStorageUint256(bytes32 position, uint256 data) internal {\r\n        assembly { sstore(position, data) }\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/acl/IACL.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ninterface IACL {\r\n    function initialize(address permissionsCreator) external;\r\n\r\n    // TODO: this should be external\r\n    // See https://github.com/ethereum/solidity/issues/4832\r\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\r\n}\r\n\r\n// File: @aragon/os/contracts/common/IVaultRecoverable.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ninterface IVaultRecoverable {\r\n    event RecoverToVault(address indexed vault, address indexed token, uint256 amount);\r\n\r\n    function transferToVault(address token) external;\r\n\r\n    function allowRecoverability(address token) external view returns (bool);\r\n    function getRecoveryVault() external view returns (address);\r\n}\r\n\r\n// File: @aragon/os/contracts/kernel/IKernel.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\ninterface IKernelEvents {\r\n    event SetApp(bytes32 indexed namespace, bytes32 indexed appId, address app);\r\n}\r\n\r\n\r\n// This should be an interface, but interfaces can't inherit yet :(\r\ncontract IKernel is IKernelEvents, IVaultRecoverable {\r\n    function acl() public view returns (IACL);\r\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\r\n\r\n    function setApp(bytes32 namespace, bytes32 appId, address app) public;\r\n    function getApp(bytes32 namespace, bytes32 appId) public view returns (address);\r\n}\r\n\r\n// File: @aragon/os/contracts/apps/AppStorage.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\ncontract AppStorage {\r\n    using UnstructuredStorage for bytes32;\r\n\r\n    /* Hardcoded constants to save gas\r\n    bytes32 internal constant KERNEL_POSITION = keccak256(\"aragonOS.appStorage.kernel\");\r\n    bytes32 internal constant APP_ID_POSITION = keccak256(\"aragonOS.appStorage.appId\");\r\n    */\r\n    bytes32 internal constant KERNEL_POSITION = 0x4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b;\r\n    bytes32 internal constant APP_ID_POSITION = 0xd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b;\r\n\r\n    function kernel() public view returns (IKernel) {\r\n        return IKernel(KERNEL_POSITION.getStorageAddress());\r\n    }\r\n\r\n    function appId() public view returns (bytes32) {\r\n        return APP_ID_POSITION.getStorageBytes32();\r\n    }\r\n\r\n    function setKernel(IKernel _kernel) internal {\r\n        KERNEL_POSITION.setStorageAddress(address(_kernel));\r\n    }\r\n\r\n    function setAppId(bytes32 _appId) internal {\r\n        APP_ID_POSITION.setStorageBytes32(_appId);\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/acl/ACLSyntaxSugar.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ncontract ACLSyntaxSugar {\r\n    function arr() internal pure returns (uint256[]) {\r\n        return new uint256[](0);\r\n    }\r\n\r\n    function arr(bytes32 _a) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a));\r\n    }\r\n\r\n    function arr(bytes32 _a, bytes32 _b) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b));\r\n    }\r\n\r\n    function arr(address _a) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a));\r\n    }\r\n\r\n    function arr(address _a, address _b) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b));\r\n    }\r\n\r\n    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), _b, _c);\r\n    }\r\n\r\n    function arr(address _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), _b, _c, _d);\r\n    }\r\n\r\n    function arr(address _a, uint256 _b) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b));\r\n    }\r\n\r\n    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b), _c, _d, _e);\r\n    }\r\n\r\n    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b), uint256(_c));\r\n    }\r\n\r\n    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b), uint256(_c));\r\n    }\r\n\r\n    function arr(uint256 _a) internal pure returns (uint256[] r) {\r\n        r = new uint256[](1);\r\n        r[0] = _a;\r\n    }\r\n\r\n    function arr(uint256 _a, uint256 _b) internal pure returns (uint256[] r) {\r\n        r = new uint256[](2);\r\n        r[0] = _a;\r\n        r[1] = _b;\r\n    }\r\n\r\n    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\r\n        r = new uint256[](3);\r\n        r[0] = _a;\r\n        r[1] = _b;\r\n        r[2] = _c;\r\n    }\r\n\r\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\r\n        r = new uint256[](4);\r\n        r[0] = _a;\r\n        r[1] = _b;\r\n        r[2] = _c;\r\n        r[3] = _d;\r\n    }\r\n\r\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\r\n        r = new uint256[](5);\r\n        r[0] = _a;\r\n        r[1] = _b;\r\n        r[2] = _c;\r\n        r[3] = _d;\r\n        r[4] = _e;\r\n    }\r\n}\r\n\r\n\r\ncontract ACLHelpers {\r\n    function decodeParamOp(uint256 _x) internal pure returns (uint8 b) {\r\n        return uint8(_x >> (8 * 30));\r\n    }\r\n\r\n    function decodeParamId(uint256 _x) internal pure returns (uint8 b) {\r\n        return uint8(_x >> (8 * 31));\r\n    }\r\n\r\n    function decodeParamsList(uint256 _x) internal pure returns (uint32 a, uint32 b, uint32 c) {\r\n        a = uint32(_x);\r\n        b = uint32(_x >> (8 * 4));\r\n        c = uint32(_x >> (8 * 8));\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/Uint256Helpers.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\nlibrary Uint256Helpers {\r\n    uint256 private constant MAX_UINT64 = uint64(-1);\r\n\r\n    string private constant ERROR_NUMBER_TOO_BIG = \"UINT64_NUMBER_TOO_BIG\";\r\n\r\n    function toUint64(uint256 a) internal pure returns (uint64) {\r\n        require(a <= MAX_UINT64, ERROR_NUMBER_TOO_BIG);\r\n        return uint64(a);\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/TimeHelpers.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract TimeHelpers {\r\n    using Uint256Helpers for uint256;\r\n\r\n    /**\r\n    * @dev Returns the current block number.\r\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\r\n    *      tests.\r\n    */\r\n    function getBlockNumber() internal view returns (uint256) {\r\n        return block.number;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the current block number, converted to uint64.\r\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\r\n    *      tests.\r\n    */\r\n    function getBlockNumber64() internal view returns (uint64) {\r\n        return getBlockNumber().toUint64();\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the current timestamp.\r\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\r\n    *      tests.\r\n    */\r\n    function getTimestamp() internal view returns (uint256) {\r\n        return block.timestamp; // solium-disable-line security/no-block-members\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the current timestamp, converted to uint64.\r\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\r\n    *      tests.\r\n    */\r\n    function getTimestamp64() internal view returns (uint64) {\r\n        return getTimestamp().toUint64();\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/Initializable.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\ncontract Initializable is TimeHelpers {\r\n    using UnstructuredStorage for bytes32;\r\n\r\n    // keccak256(\"aragonOS.initializable.initializationBlock\")\r\n    bytes32 internal constant INITIALIZATION_BLOCK_POSITION = 0xebb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e;\r\n\r\n    string private constant ERROR_ALREADY_INITIALIZED = \"INIT_ALREADY_INITIALIZED\";\r\n    string private constant ERROR_NOT_INITIALIZED = \"INIT_NOT_INITIALIZED\";\r\n\r\n    modifier onlyInit {\r\n        require(getInitializationBlock() == 0, ERROR_ALREADY_INITIALIZED);\r\n        _;\r\n    }\r\n\r\n    modifier isInitialized {\r\n        require(hasInitialized(), ERROR_NOT_INITIALIZED);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @return Block number in which the contract was initialized\r\n    */\r\n    function getInitializationBlock() public view returns (uint256) {\r\n        return INITIALIZATION_BLOCK_POSITION.getStorageUint256();\r\n    }\r\n\r\n    /**\r\n    * @return Whether the contract has been initialized by the time of the current block\r\n    */\r\n    function hasInitialized() public view returns (bool) {\r\n        uint256 initializationBlock = getInitializationBlock();\r\n        return initializationBlock != 0 && getBlockNumber() >= initializationBlock;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to be called by top level contract after initialization has finished.\r\n    */\r\n    function initialized() internal onlyInit {\r\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(getBlockNumber());\r\n    }\r\n\r\n    /**\r\n    * @dev Function to be called by top level contract after initialization to enable the contract\r\n    *      at a future block number rather than immediately.\r\n    */\r\n    function initializedAt(uint256 _blockNumber) internal onlyInit {\r\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(_blockNumber);\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/Petrifiable.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract Petrifiable is Initializable {\r\n    // Use block UINT256_MAX (which should be never) as the initializable date\r\n    uint256 internal constant PETRIFIED_BLOCK = uint256(-1);\r\n\r\n    function isPetrified() public view returns (bool) {\r\n        return getInitializationBlock() == PETRIFIED_BLOCK;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to be called by top level contract to prevent being initialized.\r\n    *      Useful for freezing base contracts when they're used behind proxies.\r\n    */\r\n    function petrify() internal onlyInit {\r\n        initializedAt(PETRIFIED_BLOCK);\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/Autopetrified.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract Autopetrified is Petrifiable {\r\n    constructor() public {\r\n        // Immediately petrify base (non-proxy) instances of inherited contracts on deploy.\r\n        // This renders them uninitializable (and unusable without a proxy).\r\n        petrify();\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/ConversionHelpers.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\nlibrary ConversionHelpers {\r\n    string private constant ERROR_IMPROPER_LENGTH = \"CONVERSION_IMPROPER_LENGTH\";\r\n\r\n    function dangerouslyCastUintArrayToBytes(uint256[] memory _input) internal pure returns (bytes memory output) {\r\n        // Force cast the uint256[] into a bytes array, by overwriting its length\r\n        // Note that the bytes array doesn't need to be initialized as we immediately overwrite it\r\n        // with the input and a new length. The input becomes invalid from this point forward.\r\n        uint256 byteLength = _input.length * 32;\r\n        assembly {\r\n            output := _input\r\n            mstore(output, byteLength)\r\n        }\r\n    }\r\n\r\n    function dangerouslyCastBytesToUintArray(bytes memory _input) internal pure returns (uint256[] memory output) {\r\n        // Force cast the bytes array into a uint256[], by overwriting its length\r\n        // Note that the uint256[] doesn't need to be initialized as we immediately overwrite it\r\n        // with the input and a new length. The input becomes invalid from this point forward.\r\n        uint256 intsLength = _input.length / 32;\r\n        require(_input.length == intsLength * 32, ERROR_IMPROPER_LENGTH);\r\n\r\n        assembly {\r\n            output := _input\r\n            mstore(output, intsLength)\r\n        }\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/ReentrancyGuard.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract ReentrancyGuard {\r\n    using UnstructuredStorage for bytes32;\r\n\r\n    /* Hardcoded constants to save gas\r\n    bytes32 internal constant REENTRANCY_MUTEX_POSITION = keccak256(\"aragonOS.reentrancyGuard.mutex\");\r\n    */\r\n    bytes32 private constant REENTRANCY_MUTEX_POSITION = 0xe855346402235fdd185c890e68d2c4ecad599b88587635ee285bce2fda58dacb;\r\n\r\n    string private constant ERROR_REENTRANT = \"REENTRANCY_REENTRANT_CALL\";\r\n\r\n    modifier nonReentrant() {\r\n        // Ensure mutex is unlocked\r\n        require(!REENTRANCY_MUTEX_POSITION.getStorageBool(), ERROR_REENTRANT);\r\n\r\n        // Lock mutex before function call\r\n        REENTRANCY_MUTEX_POSITION.setStorageBool(true);\r\n\r\n        // Perform function call\r\n        _;\r\n\r\n        // Unlock mutex after function call\r\n        REENTRANCY_MUTEX_POSITION.setStorageBool(false);\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/lib/token/ERC20.sol\r\n\r\n// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/a9f910d34f0ab33a1ae5e714f69f9596a02b4d91/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint256);\r\n\r\n    function balanceOf(address _who) public view returns (uint256);\r\n\r\n    function allowance(address _owner, address _spender)\r\n        public view returns (uint256);\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n\r\n    function approve(address _spender, uint256 _value)\r\n        public returns (bool);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        public returns (bool);\r\n\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 value\r\n    );\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// File: @aragon/os/contracts/common/EtherTokenConstant.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n// aragonOS and aragon-apps rely on address(0) to denote native ETH, in\r\n// contracts where both tokens and ETH are accepted\r\ncontract EtherTokenConstant {\r\n    address internal constant ETH = address(0);\r\n}\r\n\r\n// File: @aragon/os/contracts/common/IsContract.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ncontract IsContract {\r\n    /*\r\n    * NOTE: this should NEVER be used for authentication\r\n    * (see pitfalls: https://github.com/fergarrui/ethereum-security/tree/master/contracts/extcodesize).\r\n    *\r\n    * This is only intended to be used as a sanity check that an address is actually a contract,\r\n    * RATHER THAN an address not being a contract.\r\n    */\r\n    function isContract(address _target) internal view returns (bool) {\r\n        if (_target == address(0)) {\r\n            return false;\r\n        }\r\n\r\n        uint256 size;\r\n        assembly { size := extcodesize(_target) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/SafeERC20.sol\r\n\r\n// Inspired by AdEx (https://github.com/AdExNetwork/adex-protocol-eth/blob/b9df617829661a7518ee10f4cb6c4108659dd6d5/contracts/libs/SafeERC20.sol)\r\n// and 0x (https://github.com/0xProject/0x-monorepo/blob/737d1dc54d72872e24abce5a1dbe1b66d35fa21a/contracts/protocol/contracts/protocol/AssetProxy/ERC20Proxy.sol#L143)\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\nlibrary SafeERC20 {\r\n    // Before 0.5, solidity has a mismatch between `address.transfer()` and `token.transfer()`:\r\n    // https://github.com/ethereum/solidity/issues/3544\r\n    bytes4 private constant TRANSFER_SELECTOR = 0xa9059cbb;\r\n\r\n    string private constant ERROR_TOKEN_BALANCE_REVERTED = \"SAFE_ERC_20_BALANCE_REVERTED\";\r\n    string private constant ERROR_TOKEN_ALLOWANCE_REVERTED = \"SAFE_ERC_20_ALLOWANCE_REVERTED\";\r\n\r\n    function invokeAndCheckSuccess(address _addr, bytes memory _calldata)\r\n        private\r\n        returns (bool)\r\n    {\r\n        bool ret;\r\n        assembly {\r\n            let ptr := mload(0x40)    // free memory pointer\r\n\r\n            let success := call(\r\n                gas,                  // forward all gas\r\n                _addr,                // address\r\n                0,                    // no value\r\n                add(_calldata, 0x20), // calldata start\r\n                mload(_calldata),     // calldata length\r\n                ptr,                  // write output over free memory\r\n                0x20                  // uint256 return\r\n            )\r\n\r\n            if gt(success, 0) {\r\n                // Check number of bytes returned from last function call\r\n                switch returndatasize\r\n\r\n                // No bytes returned: assume success\r\n                case 0 {\r\n                    ret := 1\r\n                }\r\n\r\n                // 32 bytes returned: check if non-zero\r\n                case 0x20 {\r\n                    // Only return success if returned data was true\r\n                    // Already have output in ptr\r\n                    ret := eq(mload(ptr), 1)\r\n                }\r\n\r\n                // Not sure what was returned: don't mark as success\r\n                default { }\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    function staticInvoke(address _addr, bytes memory _calldata)\r\n        private\r\n        view\r\n        returns (bool, uint256)\r\n    {\r\n        bool success;\r\n        uint256 ret;\r\n        assembly {\r\n            let ptr := mload(0x40)    // free memory pointer\r\n\r\n            success := staticcall(\r\n                gas,                  // forward all gas\r\n                _addr,                // address\r\n                add(_calldata, 0x20), // calldata start\r\n                mload(_calldata),     // calldata length\r\n                ptr,                  // write output over free memory\r\n                0x20                  // uint256 return\r\n            )\r\n\r\n            if gt(success, 0) {\r\n                ret := mload(ptr)\r\n            }\r\n        }\r\n        return (success, ret);\r\n    }\r\n\r\n    /**\r\n    * @dev Same as a standards-compliant ERC20.transfer() that never reverts (returns false).\r\n    *      Note that this makes an external call to the token.\r\n    */\r\n    function safeTransfer(ERC20 _token, address _to, uint256 _amount) internal returns (bool) {\r\n        bytes memory transferCallData = abi.encodeWithSelector(\r\n            TRANSFER_SELECTOR,\r\n            _to,\r\n            _amount\r\n        );\r\n        return invokeAndCheckSuccess(_token, transferCallData);\r\n    }\r\n\r\n    /**\r\n    * @dev Same as a standards-compliant ERC20.transferFrom() that never reverts (returns false).\r\n    *      Note that this makes an external call to the token.\r\n    */\r\n    function safeTransferFrom(ERC20 _token, address _from, address _to, uint256 _amount) internal returns (bool) {\r\n        bytes memory transferFromCallData = abi.encodeWithSelector(\r\n            _token.transferFrom.selector,\r\n            _from,\r\n            _to,\r\n            _amount\r\n        );\r\n        return invokeAndCheckSuccess(_token, transferFromCallData);\r\n    }\r\n\r\n    /**\r\n    * @dev Same as a standards-compliant ERC20.approve() that never reverts (returns false).\r\n    *      Note that this makes an external call to the token.\r\n    */\r\n    function safeApprove(ERC20 _token, address _spender, uint256 _amount) internal returns (bool) {\r\n        bytes memory approveCallData = abi.encodeWithSelector(\r\n            _token.approve.selector,\r\n            _spender,\r\n            _amount\r\n        );\r\n        return invokeAndCheckSuccess(_token, approveCallData);\r\n    }\r\n\r\n    /**\r\n    * @dev Static call into ERC20.balanceOf().\r\n    * Reverts if the call fails for some reason (should never fail).\r\n    */\r\n    function staticBalanceOf(ERC20 _token, address _owner) internal view returns (uint256) {\r\n        bytes memory balanceOfCallData = abi.encodeWithSelector(\r\n            _token.balanceOf.selector,\r\n            _owner\r\n        );\r\n\r\n        (bool success, uint256 tokenBalance) = staticInvoke(_token, balanceOfCallData);\r\n        require(success, ERROR_TOKEN_BALANCE_REVERTED);\r\n\r\n        return tokenBalance;\r\n    }\r\n\r\n    /**\r\n    * @dev Static call into ERC20.allowance().\r\n    * Reverts if the call fails for some reason (should never fail).\r\n    */\r\n    function staticAllowance(ERC20 _token, address _owner, address _spender) internal view returns (uint256) {\r\n        bytes memory allowanceCallData = abi.encodeWithSelector(\r\n            _token.allowance.selector,\r\n            _owner,\r\n            _spender\r\n        );\r\n\r\n        (bool success, uint256 allowance) = staticInvoke(_token, allowanceCallData);\r\n        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\r\n\r\n        return allowance;\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/VaultRecoverable.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract VaultRecoverable is IVaultRecoverable, EtherTokenConstant, IsContract {\r\n    using SafeERC20 for ERC20;\r\n\r\n    string private constant ERROR_DISALLOWED = \"RECOVER_DISALLOWED\";\r\n    string private constant ERROR_VAULT_NOT_CONTRACT = \"RECOVER_VAULT_NOT_CONTRACT\";\r\n    string private constant ERROR_TOKEN_TRANSFER_FAILED = \"RECOVER_TOKEN_TRANSFER_FAILED\";\r\n\r\n    /**\r\n     * @notice Send funds to recovery Vault. This contract should never receive funds,\r\n     *         but in case it does, this function allows one to recover them.\r\n     * @param _token Token balance to be sent to recovery vault.\r\n     */\r\n    function transferToVault(address _token) external {\r\n        require(allowRecoverability(_token), ERROR_DISALLOWED);\r\n        address vault = getRecoveryVault();\r\n        require(isContract(vault), ERROR_VAULT_NOT_CONTRACT);\r\n\r\n        uint256 balance;\r\n        if (_token == ETH) {\r\n            balance = address(this).balance;\r\n            vault.transfer(balance);\r\n        } else {\r\n            ERC20 token = ERC20(_token);\r\n            balance = token.staticBalanceOf(this);\r\n            require(token.safeTransfer(vault, balance), ERROR_TOKEN_TRANSFER_FAILED);\r\n        }\r\n\r\n        emit RecoverToVault(vault, _token, balance);\r\n    }\r\n\r\n    /**\r\n    * @dev By default deriving from AragonApp makes it recoverable\r\n    * @param token Token address that would be recovered\r\n    * @return bool whether the app allows the recovery\r\n    */\r\n    function allowRecoverability(address token) public view returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    // Cast non-implemented interface to be public so we can use it internally\r\n    function getRecoveryVault() public view returns (address);\r\n}\r\n\r\n// File: @aragon/os/contracts/evmscript/IEVMScriptExecutor.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ninterface IEVMScriptExecutor {\r\n    function execScript(bytes script, bytes input, address[] blacklist) external returns (bytes);\r\n    function executorType() external pure returns (bytes32);\r\n}\r\n\r\n// File: @aragon/os/contracts/evmscript/IEVMScriptRegistry.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract EVMScriptRegistryConstants {\r\n    /* Hardcoded constants to save gas\r\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = apmNamehash(\"evmreg\");\r\n    */\r\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = 0xddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd61;\r\n}\r\n\r\n\r\ninterface IEVMScriptRegistry {\r\n    function addScriptExecutor(IEVMScriptExecutor executor) external returns (uint id);\r\n    function disableScriptExecutor(uint256 executorId) external;\r\n\r\n    // TODO: this should be external\r\n    // See https://github.com/ethereum/solidity/issues/4832\r\n    function getScriptExecutor(bytes script) public view returns (IEVMScriptExecutor);\r\n}\r\n\r\n// File: @aragon/os/contracts/kernel/KernelConstants.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ncontract KernelAppIds {\r\n    /* Hardcoded constants to save gas\r\n    bytes32 internal constant KERNEL_CORE_APP_ID = apmNamehash(\"kernel\");\r\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = apmNamehash(\"acl\");\r\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = apmNamehash(\"vault\");\r\n    */\r\n    bytes32 internal constant KERNEL_CORE_APP_ID = 0x3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c;\r\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = 0xe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a;\r\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = 0x7e852e0fcfce6551c13800f1e7476f982525c2b5277ba14b24339c68416336d1;\r\n}\r\n\r\n\r\ncontract KernelNamespaceConstants {\r\n    /* Hardcoded constants to save gas\r\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = keccak256(\"core\");\r\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = keccak256(\"base\");\r\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = keccak256(\"app\");\r\n    */\r\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = 0xc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f8;\r\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = 0xf1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f;\r\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;\r\n}\r\n\r\n// File: @aragon/os/contracts/evmscript/EVMScriptRunner.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract EVMScriptRunner is AppStorage, Initializable, EVMScriptRegistryConstants, KernelNamespaceConstants {\r\n    string private constant ERROR_EXECUTOR_UNAVAILABLE = \"EVMRUN_EXECUTOR_UNAVAILABLE\";\r\n    string private constant ERROR_PROTECTED_STATE_MODIFIED = \"EVMRUN_PROTECTED_STATE_MODIFIED\";\r\n\r\n    /* This is manually crafted in assembly\r\n    string private constant ERROR_EXECUTOR_INVALID_RETURN = \"EVMRUN_EXECUTOR_INVALID_RETURN\";\r\n    */\r\n\r\n    event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData);\r\n\r\n    function getEVMScriptExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\r\n        return IEVMScriptExecutor(getEVMScriptRegistry().getScriptExecutor(_script));\r\n    }\r\n\r\n    function getEVMScriptRegistry() public view returns (IEVMScriptRegistry) {\r\n        address registryAddr = kernel().getApp(KERNEL_APP_ADDR_NAMESPACE, EVMSCRIPT_REGISTRY_APP_ID);\r\n        return IEVMScriptRegistry(registryAddr);\r\n    }\r\n\r\n    function runScript(bytes _script, bytes _input, address[] _blacklist)\r\n        internal\r\n        isInitialized\r\n        protectState\r\n        returns (bytes)\r\n    {\r\n        IEVMScriptExecutor executor = getEVMScriptExecutor(_script);\r\n        require(address(executor) != address(0), ERROR_EXECUTOR_UNAVAILABLE);\r\n\r\n        bytes4 sig = executor.execScript.selector;\r\n        bytes memory data = abi.encodeWithSelector(sig, _script, _input, _blacklist);\r\n\r\n        bytes memory output;\r\n        assembly {\r\n            let success := delegatecall(\r\n                gas,                // forward all gas\r\n                executor,           // address\r\n                add(data, 0x20),    // calldata start\r\n                mload(data),        // calldata length\r\n                0,                  // don't write output (we'll handle this ourselves)\r\n                0                   // don't write output\r\n            )\r\n\r\n            output := mload(0x40) // free mem ptr get\r\n\r\n            switch success\r\n            case 0 {\r\n                // If the call errored, forward its full error data\r\n                returndatacopy(output, 0, returndatasize)\r\n                revert(output, returndatasize)\r\n            }\r\n            default {\r\n                switch gt(returndatasize, 0x3f)\r\n                case 0 {\r\n                    // Need at least 0x40 bytes returned for properly ABI-encoded bytes values,\r\n                    // revert with \"EVMRUN_EXECUTOR_INVALID_RETURN\"\r\n                    // See remix: doing a `revert(\"EVMRUN_EXECUTOR_INVALID_RETURN\")` always results in\r\n                    // this memory layout\r\n                    mstore(output, 0x08c379a000000000000000000000000000000000000000000000000000000000)         // error identifier\r\n                    mstore(add(output, 0x04), 0x0000000000000000000000000000000000000000000000000000000000000020) // starting offset\r\n                    mstore(add(output, 0x24), 0x000000000000000000000000000000000000000000000000000000000000001e) // reason length\r\n                    mstore(add(output, 0x44), 0x45564d52554e5f4558454355544f525f494e56414c49445f52455455524e0000) // reason\r\n\r\n                    revert(output, 100) // 100 = 4 + 3 * 32 (error identifier + 3 words for the ABI encoded error)\r\n                }\r\n                default {\r\n                    // Copy result\r\n                    //\r\n                    // Needs to perform an ABI decode for the expected `bytes` return type of\r\n                    // `executor.execScript()` as solidity will automatically ABI encode the returned bytes as:\r\n                    //    [ position of the first dynamic length return value = 0x20 (32 bytes) ]\r\n                    //    [ output length (32 bytes) ]\r\n                    //    [ output content (N bytes) ]\r\n                    //\r\n                    // Perform the ABI decode by ignoring the first 32 bytes of the return data\r\n                    let copysize := sub(returndatasize, 0x20)\r\n                    returndatacopy(output, 0x20, copysize)\r\n\r\n                    mstore(0x40, add(output, copysize)) // free mem ptr set\r\n                }\r\n            }\r\n        }\r\n\r\n        emit ScriptResult(address(executor), _script, _input, output);\r\n\r\n        return output;\r\n    }\r\n\r\n    modifier protectState {\r\n        address preKernel = address(kernel());\r\n        bytes32 preAppId = appId();\r\n        _; // exec\r\n        require(address(kernel()) == preKernel, ERROR_PROTECTED_STATE_MODIFIED);\r\n        require(appId() == preAppId, ERROR_PROTECTED_STATE_MODIFIED);\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/apps/AragonApp.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Contracts inheriting from AragonApp are, by default, immediately petrified upon deployment so\r\n// that they can never be initialized.\r\n// Unless overriden, this behaviour enforces those contracts to be usable only behind an AppProxy.\r\n// ReentrancyGuard, EVMScriptRunner, and ACLSyntaxSugar are not directly used by this contract, but\r\n// are included so that they are automatically usable by subclassing contracts\r\ncontract AragonApp is AppStorage, Autopetrified, VaultRecoverable, ReentrancyGuard, EVMScriptRunner, ACLSyntaxSugar {\r\n    string private constant ERROR_AUTH_FAILED = \"APP_AUTH_FAILED\";\r\n\r\n    modifier auth(bytes32 _role) {\r\n        require(canPerform(msg.sender, _role, new uint256[](0)), ERROR_AUTH_FAILED);\r\n        _;\r\n    }\r\n\r\n    modifier authP(bytes32 _role, uint256[] _params) {\r\n        require(canPerform(msg.sender, _role, _params), ERROR_AUTH_FAILED);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Check whether an action can be performed by a sender for a particular role on this app\r\n    * @param _sender Sender of the call\r\n    * @param _role Role on this app\r\n    * @param _params Permission params for the role\r\n    * @return Boolean indicating whether the sender has the permissions to perform the action.\r\n    *         Always returns false if the app hasn't been initialized yet.\r\n    */\r\n    function canPerform(address _sender, bytes32 _role, uint256[] _params) public view returns (bool) {\r\n        if (!hasInitialized()) {\r\n            return false;\r\n        }\r\n\r\n        IKernel linkedKernel = kernel();\r\n        if (address(linkedKernel) == address(0)) {\r\n            return false;\r\n        }\r\n\r\n        return linkedKernel.hasPermission(\r\n            _sender,\r\n            address(this),\r\n            _role,\r\n            ConversionHelpers.dangerouslyCastUintArrayToBytes(_params)\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev Get the recovery vault for the app\r\n    * @return Recovery vault address for the app\r\n    */\r\n    function getRecoveryVault() public view returns (address) {\r\n        // Funds recovery via a vault is only available when used with a kernel\r\n        return kernel().getRecoveryVault(); // if kernel is not set, it will revert\r\n    }\r\n}\r\n\r\n// File: @aragon/apps-shared-minime/contracts/ITokenController.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/// @dev The token controller contract must implement these functions\r\n\r\n\r\ninterface ITokenController {\r\n    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\r\n    /// @param _owner The address that sent the ether to create tokens\r\n    /// @return True if the ether is accepted, false if it throws\r\n    function proxyPayment(address _owner) external payable returns(bool);\r\n\r\n    /// @notice Notifies the controller about a token transfer allowing the\r\n    ///  controller to react if desired\r\n    /// @param _from The origin of the transfer\r\n    /// @param _to The destination of the transfer\r\n    /// @param _amount The amount of the transfer\r\n    /// @return False if the controller does not authorize the transfer\r\n    function onTransfer(address _from, address _to, uint _amount) external returns(bool);\r\n\r\n    /// @notice Notifies the controller about an approval allowing the\r\n    ///  controller to react if desired\r\n    /// @param _owner The address that calls `approve()`\r\n    /// @param _spender The spender in the `approve()` call\r\n    /// @param _amount The amount in the `approve()` call\r\n    /// @return False if the controller does not authorize the approval\r\n    function onApprove(address _owner, address _spender, uint _amount) external returns(bool);\r\n}\r\n\r\n// File: @aragon/apps-shared-minime/contracts/MiniMeToken.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/*\r\n    Copyright 2016, Jordi Baylina\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\n/// @title MiniMeToken Contract\r\n/// @author Jordi Baylina\r\n/// @dev This token contract's goal is to make it easy for anyone to clone this\r\n///  token using the token distribution at a given block, this will allow DAO's\r\n///  and DApps to upgrade their features in a decentralized manner without\r\n///  affecting the original token\r\n/// @dev It is ERC20 compliant, but still needs to under go further testing.\r\n\r\n\r\ncontract Controlled {\r\n    /// @notice The address of the controller is the only address that can call\r\n    ///  a function with this modifier\r\n    modifier onlyController {\r\n        require(msg.sender == controller);\r\n        _;\r\n    }\r\n\r\n    address public controller;\r\n\r\n    function Controlled()  public { controller = msg.sender;}\r\n\r\n    /// @notice Changes the controller of the contract\r\n    /// @param _newController The new controller of the contract\r\n    function changeController(address _newController) onlyController  public {\r\n        controller = _newController;\r\n    }\r\n}\r\n\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(\r\n        address from,\r\n        uint256 _amount,\r\n        address _token,\r\n        bytes _data\r\n    ) public;\r\n}\r\n\r\n/// @dev The actual token contract, the default controller is the msg.sender\r\n///  that deploys the contract, so usually this token will be deployed by a\r\n///  token controller contract, which Giveth will call a \"Campaign\"\r\ncontract MiniMeToken is Controlled {\r\n\r\n    string public name;                //The Token's name: e.g. DigixDAO Tokens\r\n    uint8 public decimals;             //Number of decimals of the smallest unit\r\n    string public symbol;              //An identifier: e.g. REP\r\n    string public version = \"MMT_0.1\"; //An arbitrary versioning scheme\r\n\r\n\r\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\r\n    ///  given value, the block number attached is the one that last changed the\r\n    ///  value\r\n    struct Checkpoint {\r\n\r\n        // `fromBlock` is the block number that the value was generated from\r\n        uint128 fromBlock;\r\n\r\n        // `value` is the amount of tokens at a specific block number\r\n        uint128 value;\r\n    }\r\n\r\n    // `parentToken` is the Token address that was cloned to produce this token;\r\n    //  it will be 0x0 for a token that was not cloned\r\n    MiniMeToken public parentToken;\r\n\r\n    // `parentSnapShotBlock` is the block number from the Parent Token that was\r\n    //  used to determine the initial distribution of the Clone Token\r\n    uint public parentSnapShotBlock;\r\n\r\n    // `creationBlock` is the block number that the Clone Token was created\r\n    uint public creationBlock;\r\n\r\n    // `balances` is the map that tracks the balance of each address, in this\r\n    //  contract when the balance changes the block number that the change\r\n    //  occurred is also included in the map\r\n    mapping (address => Checkpoint[]) balances;\r\n\r\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    // Tracks the history of the `totalSupply` of the token\r\n    Checkpoint[] totalSupplyHistory;\r\n\r\n    // Flag that determines if the token is transferable or not.\r\n    bool public transfersEnabled;\r\n\r\n    // The factory used to create new clone tokens\r\n    MiniMeTokenFactory public tokenFactory;\r\n\r\n////////////////\r\n// Constructor\r\n////////////////\r\n\r\n    /// @notice Constructor to create a MiniMeToken\r\n    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\r\n    ///  will create the Clone token contracts, the token factory needs to be\r\n    ///  deployed first\r\n    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\r\n    ///  new token\r\n    /// @param _parentSnapShotBlock Block of the parent token that will\r\n    ///  determine the initial distribution of the clone token, set to 0 if it\r\n    ///  is a new token\r\n    /// @param _tokenName Name of the new token\r\n    /// @param _decimalUnits Number of decimals of the new token\r\n    /// @param _tokenSymbol Token Symbol for the new token\r\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\r\n    function MiniMeToken(\r\n        MiniMeTokenFactory _tokenFactory,\r\n        MiniMeToken _parentToken,\r\n        uint _parentSnapShotBlock,\r\n        string _tokenName,\r\n        uint8 _decimalUnits,\r\n        string _tokenSymbol,\r\n        bool _transfersEnabled\r\n    )  public\r\n    {\r\n        tokenFactory = _tokenFactory;\r\n        name = _tokenName;                                 // Set the name\r\n        decimals = _decimalUnits;                          // Set the decimals\r\n        symbol = _tokenSymbol;                             // Set the symbol\r\n        parentToken = _parentToken;\r\n        parentSnapShotBlock = _parentSnapShotBlock;\r\n        transfersEnabled = _transfersEnabled;\r\n        creationBlock = block.number;\r\n    }\r\n\r\n\r\n///////////////////\r\n// ERC20 Methods\r\n///////////////////\r\n\r\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\r\n        require(transfersEnabled);\r\n        return doTransfer(msg.sender, _to, _amount);\r\n    }\r\n\r\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\r\n    ///  is approved by `_from`\r\n    /// @param _from The address holding the tokens being transferred\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return True if the transfer was successful\r\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\r\n\r\n        // The controller of this contract can move tokens around at will,\r\n        //  this is important to recognize! Confirm that you trust the\r\n        //  controller of this contract, which in most situations should be\r\n        //  another open source smart contract or 0x0\r\n        if (msg.sender != controller) {\r\n            require(transfersEnabled);\r\n\r\n            // The standard ERC 20 transferFrom functionality\r\n            if (allowed[_from][msg.sender] < _amount)\r\n                return false;\r\n            allowed[_from][msg.sender] -= _amount;\r\n        }\r\n        return doTransfer(_from, _to, _amount);\r\n    }\r\n\r\n    /// @dev This is the actual transfer function in the token contract, it can\r\n    ///  only be called by other functions in this contract.\r\n    /// @param _from The address holding the tokens being transferred\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return True if the transfer was successful\r\n    function doTransfer(address _from, address _to, uint _amount) internal returns(bool) {\r\n        if (_amount == 0) {\r\n            return true;\r\n        }\r\n        require(parentSnapShotBlock < block.number);\r\n        // Do not allow transfer to 0x0 or the token contract itself\r\n        require((_to != 0) && (_to != address(this)));\r\n        // If the amount being transfered is more than the balance of the\r\n        //  account the transfer returns false\r\n        var previousBalanceFrom = balanceOfAt(_from, block.number);\r\n        if (previousBalanceFrom < _amount) {\r\n            return false;\r\n        }\r\n        // Alerts the token controller of the transfer\r\n        if (isContract(controller)) {\r\n            // Adding the ` == true` makes the linter shut up so...\r\n            require(ITokenController(controller).onTransfer(_from, _to, _amount) == true);\r\n        }\r\n        // First update the balance array with the new value for the address\r\n        //  sending the tokens\r\n        updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\r\n        // Then update the balance array with the new value for the address\r\n        //  receiving the tokens\r\n        var previousBalanceTo = balanceOfAt(_to, block.number);\r\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\r\n        updateValueAtNow(balances[_to], previousBalanceTo + _amount);\r\n        // An event to make the transfer easy to find on the blockchain\r\n        Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @param _owner The address that's balance is being requested\r\n    /// @return The balance of `_owner` at the current block\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balanceOfAt(_owner, block.number);\r\n    }\r\n\r\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\r\n    ///  its behalf. This is a modified version of the ERC20 approve function\r\n    ///  to be a little bit safer\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _amount The amount of tokens to be approved for transfer\r\n    /// @return True if the approval was successful\r\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\r\n        require(transfersEnabled);\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        // Alerts the token controller of the approve function call\r\n        if (isContract(controller)) {\r\n            // Adding the ` == true` makes the linter shut up so...\r\n            require(ITokenController(controller).onApprove(msg.sender, _spender, _amount) == true);\r\n        }\r\n\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @dev This function makes it easy to read the `allowed[]` map\r\n    /// @param _owner The address of the account that owns the token\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\r\n    ///  to spend\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\r\n    ///  its behalf, and then a function is triggered in the contract that is\r\n    ///  being approved, `_spender`. This allows users to use their tokens to\r\n    ///  interact with contracts in one function call instead of two\r\n    /// @param _spender The address of the contract able to transfer the tokens\r\n    /// @param _amount The amount of tokens to be approved for transfer\r\n    /// @return True if the function call was successful\r\n    function approveAndCall(ApproveAndCallFallBack _spender, uint256 _amount, bytes _extraData) public returns (bool success) {\r\n        require(approve(_spender, _amount));\r\n\r\n        _spender.receiveApproval(\r\n            msg.sender,\r\n            _amount,\r\n            this,\r\n            _extraData\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev This function makes it easy to get the total number of tokens\r\n    /// @return The total number of tokens\r\n    function totalSupply() public constant returns (uint) {\r\n        return totalSupplyAt(block.number);\r\n    }\r\n\r\n\r\n////////////////\r\n// Query balance and totalSupply in History\r\n////////////////\r\n\r\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @param _blockNumber The block number when the balance is queried\r\n    /// @return The balance at `_blockNumber`\r\n    function balanceOfAt(address _owner, uint _blockNumber) public constant returns (uint) {\r\n\r\n        // These next few lines are used when the balance of the token is\r\n        //  requested before a check point was ever created for this token, it\r\n        //  requires that the `parentToken.balanceOfAt` be queried at the\r\n        //  genesis block for that token as this contains initial balance of\r\n        //  this token\r\n        if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {\r\n            if (address(parentToken) != 0) {\r\n                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\r\n            } else {\r\n                // Has no parent\r\n                return 0;\r\n            }\r\n\r\n        // This will return the expected balance during normal situations\r\n        } else {\r\n            return getValueAt(balances[_owner], _blockNumber);\r\n        }\r\n    }\r\n\r\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\r\n    /// @param _blockNumber The block number when the totalSupply is queried\r\n    /// @return The total amount of tokens at `_blockNumber`\r\n    function totalSupplyAt(uint _blockNumber) public constant returns(uint) {\r\n\r\n        // These next few lines are used when the totalSupply of the token is\r\n        //  requested before a check point was ever created for this token, it\r\n        //  requires that the `parentToken.totalSupplyAt` be queried at the\r\n        //  genesis block for this token as that contains totalSupply of this\r\n        //  token at this block number.\r\n        if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\r\n            if (address(parentToken) != 0) {\r\n                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\r\n            } else {\r\n                return 0;\r\n            }\r\n\r\n        // This will return the expected totalSupply during normal situations\r\n        } else {\r\n            return getValueAt(totalSupplyHistory, _blockNumber);\r\n        }\r\n    }\r\n\r\n////////////////\r\n// Clone Token Method\r\n////////////////\r\n\r\n    /// @notice Creates a new clone token with the initial distribution being\r\n    ///  this token at `_snapshotBlock`\r\n    /// @param _cloneTokenName Name of the clone token\r\n    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\r\n    /// @param _cloneTokenSymbol Symbol of the clone token\r\n    /// @param _snapshotBlock Block when the distribution of the parent token is\r\n    ///  copied to set the initial distribution of the new clone token;\r\n    ///  if the block is zero than the actual block, the current block is used\r\n    /// @param _transfersEnabled True if transfers are allowed in the clone\r\n    /// @return The address of the new MiniMeToken Contract\r\n    function createCloneToken(\r\n        string _cloneTokenName,\r\n        uint8 _cloneDecimalUnits,\r\n        string _cloneTokenSymbol,\r\n        uint _snapshotBlock,\r\n        bool _transfersEnabled\r\n    ) public returns(MiniMeToken)\r\n    {\r\n        uint256 snapshot = _snapshotBlock == 0 ? block.number - 1 : _snapshotBlock;\r\n\r\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\r\n            this,\r\n            snapshot,\r\n            _cloneTokenName,\r\n            _cloneDecimalUnits,\r\n            _cloneTokenSymbol,\r\n            _transfersEnabled\r\n        );\r\n\r\n        cloneToken.changeController(msg.sender);\r\n\r\n        // An event to make the token easy to find on the blockchain\r\n        NewCloneToken(address(cloneToken), snapshot);\r\n        return cloneToken;\r\n    }\r\n\r\n////////////////\r\n// Generate and destroy tokens\r\n////////////////\r\n\r\n    /// @notice Generates `_amount` tokens that are assigned to `_owner`\r\n    /// @param _owner The address that will be assigned the new tokens\r\n    /// @param _amount The quantity of tokens generated\r\n    /// @return True if the tokens are generated correctly\r\n    function generateTokens(address _owner, uint _amount) onlyController public returns (bool) {\r\n        uint curTotalSupply = totalSupply();\r\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\r\n        uint previousBalanceTo = balanceOf(_owner);\r\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\r\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\r\n        Transfer(0, _owner, _amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    /// @notice Burns `_amount` tokens from `_owner`\r\n    /// @param _owner The address that will lose the tokens\r\n    /// @param _amount The quantity of tokens to burn\r\n    /// @return True if the tokens are burned correctly\r\n    function destroyTokens(address _owner, uint _amount) onlyController public returns (bool) {\r\n        uint curTotalSupply = totalSupply();\r\n        require(curTotalSupply >= _amount);\r\n        uint previousBalanceFrom = balanceOf(_owner);\r\n        require(previousBalanceFrom >= _amount);\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\r\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\r\n        Transfer(_owner, 0, _amount);\r\n        return true;\r\n    }\r\n\r\n////////////////\r\n// Enable tokens transfers\r\n////////////////\r\n\r\n\r\n    /// @notice Enables token holders to transfer their tokens freely if true\r\n    /// @param _transfersEnabled True if transfers are allowed in the clone\r\n    function enableTransfers(bool _transfersEnabled) onlyController public {\r\n        transfersEnabled = _transfersEnabled;\r\n    }\r\n\r\n////////////////\r\n// Internal helper functions to query and set a value in a snapshot array\r\n////////////////\r\n\r\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\r\n    /// @param checkpoints The history of values being queried\r\n    /// @param _block The block number to retrieve the value at\r\n    /// @return The number of tokens being queried\r\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block) constant internal returns (uint) {\r\n        if (checkpoints.length == 0)\r\n            return 0;\r\n\r\n        // Shortcut for the actual value\r\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\r\n            return checkpoints[checkpoints.length-1].value;\r\n        if (_block < checkpoints[0].fromBlock)\r\n            return 0;\r\n\r\n        // Binary search of the value in the array\r\n        uint min = 0;\r\n        uint max = checkpoints.length-1;\r\n        while (max > min) {\r\n            uint mid = (max + min + 1) / 2;\r\n            if (checkpoints[mid].fromBlock<=_block) {\r\n                min = mid;\r\n            } else {\r\n                max = mid-1;\r\n            }\r\n        }\r\n        return checkpoints[min].value;\r\n    }\r\n\r\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\r\n    ///  `totalSupplyHistory`\r\n    /// @param checkpoints The history of data being updated\r\n    /// @param _value The new number of tokens\r\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value) internal {\r\n        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {\r\n            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];\r\n            newCheckPoint.fromBlock = uint128(block.number);\r\n            newCheckPoint.value = uint128(_value);\r\n        } else {\r\n            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length - 1];\r\n            oldCheckPoint.value = uint128(_value);\r\n        }\r\n    }\r\n\r\n    /// @dev Internal function to determine if an address is a contract\r\n    /// @param _addr The address being queried\r\n    /// @return True if `_addr` is a contract\r\n    function isContract(address _addr) constant internal returns(bool) {\r\n        uint size;\r\n        if (_addr == 0)\r\n            return false;\r\n\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n\r\n        return size>0;\r\n    }\r\n\r\n    /// @dev Helper function to return a min betwen the two uints\r\n    function min(uint a, uint b) pure internal returns (uint) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /// @notice The fallback function: If the contract's controller has not been\r\n    ///  set to 0, then the `proxyPayment` method is called which relays the\r\n    ///  ether and creates tokens as described in the token controller contract\r\n    function () external payable {\r\n        require(isContract(controller));\r\n        // Adding the ` == true` makes the linter shut up so...\r\n        require(ITokenController(controller).proxyPayment.value(msg.value)(msg.sender) == true);\r\n    }\r\n\r\n//////////\r\n// Safety Methods\r\n//////////\r\n\r\n    /// @notice This method can be used by the controller to extract mistakenly\r\n    ///  sent tokens to this contract.\r\n    /// @param _token The address of the token contract that you want to recover\r\n    ///  set to 0 in case you want to extract ether.\r\n    function claimTokens(address _token) onlyController public {\r\n        if (_token == 0x0) {\r\n            controller.transfer(this.balance);\r\n            return;\r\n        }\r\n\r\n        MiniMeToken token = MiniMeToken(_token);\r\n        uint balance = token.balanceOf(this);\r\n        token.transfer(controller, balance);\r\n        ClaimedTokens(_token, controller, balance);\r\n    }\r\n\r\n////////////////\r\n// Events\r\n////////////////\r\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\r\n    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _amount\r\n        );\r\n\r\n}\r\n\r\n\r\n////////////////\r\n// MiniMeTokenFactory\r\n////////////////\r\n\r\n/// @dev This contract is used to generate clone contracts from a contract.\r\n///  In solidity this is the way to create a contract from a contract of the\r\n///  same class\r\ncontract MiniMeTokenFactory {\r\n\r\n    /// @notice Update the DApp by creating a new token with new functionalities\r\n    ///  the msg.sender becomes the controller of this clone token\r\n    /// @param _parentToken Address of the token being cloned\r\n    /// @param _snapshotBlock Block of the parent token that will\r\n    ///  determine the initial distribution of the clone token\r\n    /// @param _tokenName Name of the new token\r\n    /// @param _decimalUnits Number of decimals of the new token\r\n    /// @param _tokenSymbol Token Symbol for the new token\r\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\r\n    /// @return The address of the new token contract\r\n    function createCloneToken(\r\n        MiniMeToken _parentToken,\r\n        uint _snapshotBlock,\r\n        string _tokenName,\r\n        uint8 _decimalUnits,\r\n        string _tokenSymbol,\r\n        bool _transfersEnabled\r\n    ) public returns (MiniMeToken)\r\n    {\r\n        MiniMeToken newToken = new MiniMeToken(\r\n            this,\r\n            _parentToken,\r\n            _snapshotBlock,\r\n            _tokenName,\r\n            _decimalUnits,\r\n            _tokenSymbol,\r\n            _transfersEnabled\r\n        );\r\n\r\n        newToken.changeController(msg.sender);\r\n        return newToken;\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/lib/math/SafeMath.sol\r\n\r\n// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/d51e38758e1d985661534534d5c61e27bece5042/contracts/math/SafeMath.sol\r\n// Adapted to use pragma ^0.4.24 and satisfy our linter rules\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    string private constant ERROR_ADD_OVERFLOW = \"MATH_ADD_OVERFLOW\";\r\n    string private constant ERROR_SUB_UNDERFLOW = \"MATH_SUB_UNDERFLOW\";\r\n    string private constant ERROR_MUL_OVERFLOW = \"MATH_MUL_OVERFLOW\";\r\n    string private constant ERROR_DIV_ZERO = \"MATH_DIV_ZERO\";\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = _a * _b;\r\n        require(c / _a == _b, ERROR_MUL_OVERFLOW);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = _a / _b;\r\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b <= _a, ERROR_SUB_UNDERFLOW);\r\n        uint256 c = _a - _b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        uint256 c = _a + _b;\r\n        require(c >= _a, ERROR_ADD_OVERFLOW);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, ERROR_DIV_ZERO);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/lib/math/SafeMath64.sol\r\n\r\n// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/d51e38758e1d985661534534d5c61e27bece5042/contracts/math/SafeMath.sol\r\n// Adapted for uint64, pragma ^0.4.24, and satisfying our linter rules\r\n// Also optimized the mul() implementation, see https://github.com/aragon/aragonOS/pull/417\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath64\r\n * @dev Math operations for uint64 with safety checks that revert on error\r\n */\r\nlibrary SafeMath64 {\r\n    string private constant ERROR_ADD_OVERFLOW = \"MATH64_ADD_OVERFLOW\";\r\n    string private constant ERROR_SUB_UNDERFLOW = \"MATH64_SUB_UNDERFLOW\";\r\n    string private constant ERROR_MUL_OVERFLOW = \"MATH64_MUL_OVERFLOW\";\r\n    string private constant ERROR_DIV_ZERO = \"MATH64_DIV_ZERO\";\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint64 _a, uint64 _b) internal pure returns (uint64) {\r\n        uint256 c = uint256(_a) * uint256(_b);\r\n        require(c < 0x010000000000000000, ERROR_MUL_OVERFLOW); // 2**64 (less gas this way)\r\n\r\n        return uint64(c);\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint64 _a, uint64 _b) internal pure returns (uint64) {\r\n        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\r\n        uint64 c = _a / _b;\r\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint64 _a, uint64 _b) internal pure returns (uint64) {\r\n        require(_b <= _a, ERROR_SUB_UNDERFLOW);\r\n        uint64 c = _a - _b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint64 _a, uint64 _b) internal pure returns (uint64) {\r\n        uint64 c = _a + _b;\r\n        require(c >= _a, ERROR_ADD_OVERFLOW);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        require(b != 0, ERROR_DIV_ZERO);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @tps/test-helpers/contracts/evmscript/ScriptHelpers.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.18;\r\n\r\n\r\nlibrary ScriptHelpers {\r\n    // To test with JS and compare with actual encoder. Maintaining for reference.\r\n    // t = function() { return IEVMScriptExecutor.at('0x4bcdd59d6c77774ee7317fc1095f69ec84421e49').contract.execScript.getData(...[].slice.call(arguments)).slice(10).match(/.{1,64}/g) }\r\n    // run = function() { return ScriptHelpers.new().then(sh => { sh.abiEncode.call(...[].slice.call(arguments)).then(a => console.log(a.slice(2).match(/.{1,64}/g)) ) }) }\r\n    // This is truly not beautiful but lets no daydream to the day solidity gets reflection features\r\n\r\n    function abiEncode(bytes _a, bytes _b, address[] _c) public pure returns (bytes d) {\r\n        return encode(_a, _b, _c);\r\n    }\r\n\r\n    function encode(bytes memory _a, bytes memory _b, address[] memory _c) internal pure returns (bytes memory d) {\r\n        // A is positioned after the 3 position words\r\n        uint256 aPosition = 0x60;\r\n        uint256 bPosition = aPosition + 32 * abiLength(_a);\r\n        uint256 cPosition = bPosition + 32 * abiLength(_b);\r\n        uint256 length = cPosition + 32 * abiLength(_c);\r\n\r\n        d = new bytes(length);\r\n        assembly {\r\n            // Store positions\r\n            mstore(add(d, 0x20), aPosition)\r\n            mstore(add(d, 0x40), bPosition)\r\n            mstore(add(d, 0x60), cPosition)\r\n        }\r\n\r\n        // Copy memory to correct position\r\n        copy(d, getPtr(_a), aPosition, _a.length);\r\n        copy(d, getPtr(_b), bPosition, _b.length);\r\n        copy(d, getPtr(_c), cPosition, _c.length * 32); // 1 word per address\r\n    }\r\n\r\n    function abiLength(bytes memory _a) internal pure returns (uint256) {\r\n        // 1 for length +\r\n        // memory words + 1 if not divisible for 32 to offset word\r\n        return 1 + (_a.length / 32) + (_a.length % 32 > 0 ? 1 : 0);\r\n    }\r\n\r\n    function abiLength(address[] _a) internal pure returns (uint256) {\r\n        // 1 for length + 1 per item\r\n        return 1 + _a.length;\r\n    }\r\n\r\n    function copy(bytes _d, uint256 _src, uint256 _pos, uint256 _length) internal pure {\r\n        uint dest;\r\n        assembly {\r\n            dest := add(add(_d, 0x20), _pos)\r\n        }\r\n        memcpy(dest, _src, _length);\r\n    }\r\n\r\n    function getPtr(bytes memory _x) internal pure returns (uint256 ptr) {\r\n        assembly {\r\n            ptr := _x\r\n        }\r\n    }\r\n\r\n    function getPtr(address[] memory _x) internal pure returns (uint256 ptr) {\r\n        assembly {\r\n            ptr := _x\r\n        }\r\n    }\r\n\r\n    function getSpecId(bytes _script) internal pure returns (uint32) {\r\n        return uint32At(_script, 0);\r\n    }\r\n\r\n    function uint256At(bytes _data, uint256 _location) internal pure returns (uint256 result) {\r\n        assembly {\r\n            result := mload(add(_data, add(0x20, _location)))\r\n        }\r\n    }\r\n\r\n    function bytes32At(bytes _data, uint256 _location) internal pure returns (bytes32 result) {\r\n        assembly {\r\n            result := mload(add(_data, add(0x20, _location)))\r\n        }\r\n    }\r\n\r\n    function addressAt(bytes _data, uint256 _location) internal pure returns (address result) {\r\n        uint256 word = uint256At(_data, _location);\r\n\r\n        assembly {\r\n            result := div(and(word, 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000),\r\n            0x1000000000000000000000000)\r\n        }\r\n    }\r\n\r\n    function uint32At(bytes _data, uint256 _location) internal pure returns (uint32 result) {\r\n        uint256 word = uint256At(_data, _location);\r\n\r\n        assembly {\r\n            result := div(and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000),\r\n            0x100000000000000000000000000000000000000000000000000000000)\r\n        }\r\n    }\r\n\r\n    function locationOf(bytes _data, uint256 _location) internal pure returns (uint256 result) {\r\n        assembly {\r\n            result := add(_data, add(0x20, _location))\r\n        }\r\n    }\r\n\r\n    function toBytes(bytes4 _sig) internal pure returns (bytes) {\r\n        bytes memory payload = new bytes(4);\r\n        assembly { mstore(add(payload, 0x20), _sig) }\r\n        return payload;\r\n    }\r\n\r\n    function memcpy(uint _dest, uint _src, uint _len) internal pure {\r\n        uint256 src = _src;\r\n        uint256 dest = _dest;\r\n        uint256 len = _len;\r\n\r\n        // Copy word-length chunks while possible\r\n        for (; len >= 32; len -= 32) {\r\n            assembly {\r\n                mstore(dest, mload(src))\r\n            }\r\n            dest += 32;\r\n            src += 32;\r\n        }\r\n\r\n        // Copy remaining bytes\r\n        uint mask = 256 ** (32 - len) - 1;\r\n        assembly {\r\n            let srcpart := and(mload(src), not(mask))\r\n            let destpart := and(mload(dest), mask)\r\n            mstore(dest, or(destpart, srcpart))\r\n        }\r\n    }\r\n}\r\n\r\n// File: @tps/test-helpers/contracts/common/IForwarder.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ninterface IForwarder {\r\n    function isForwarder() external pure returns (bool);\r\n\r\n    // TODO: this should be external\r\n    // See https://github.com/ethereum/solidity/issues/4832\r\n    function canForward(address sender, bytes evmCallScript) public view returns (bool);\r\n\r\n    // TODO: this should be external\r\n    // See https://github.com/ethereum/solidity/issues/4832\r\n    function forward(bytes evmCallScript) public;\r\n}\r\n\r\n// File: @tps/test-helpers/contracts/common/ADynamicForwarder.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n// TODO: Use @aragon/os/contracts/ version when it gets merged\r\n\r\n// TODO: Research why using the @aragon/os version breaks coverage\r\n\r\n\r\n/**\r\n  * @title ADynamicForwarder App\r\n  * @author Autark\r\n  * @dev This serves as an abstract contract to facilitate any voting pattern where dynamic\r\n  *     results must be passed out of the contract. It provides options for the voting contract\r\n  *     to then act upon and helpers to parce and encode evmScripts from/to options.\r\n  */\r\n\r\n\r\ncontract ADynamicForwarder is IForwarder {\r\n    using ScriptHelpers for bytes;\r\n    using SafeMath for uint256;\r\n    using SafeMath64 for uint64;\r\n\r\n    uint256 constant public OPTION_ADDR_PARAM_LOC = 1;\r\n    uint256 constant public OPTION_SUPPORT_PARAM_LOC = 2;\r\n    uint256 constant public INDICIES_PARAM_LOC = 3;\r\n    uint256 constant public OPTION_INFO_PARAM_LOC = 4;\r\n    uint256 constant public DESCRIPTION_PARAM_LOC = 5;\r\n    uint256 constant public EX_ID1_PARAM_LOC = 6;\r\n    uint256 constant public EX_ID2_PARAM_LOC = 7;\r\n    uint256 constant public TOTAL_DYNAMIC_PARAMS = 7;\r\n\r\n    struct Action {\r\n        uint256 externalId;\r\n        string description;\r\n        uint256 infoStringLength;\r\n        bytes executionScript;\r\n        bool executed;\r\n        bytes32[] optionKeys;\r\n        mapping (bytes32 => OptionState) options;\r\n    }\r\n\r\n    struct OptionState {\r\n        bool added;\r\n        string metadata;\r\n        uint8 keyArrayIndex;\r\n        uint256 actionSupport;\r\n        bytes32 externalId1;\r\n        bytes32 externalId2;\r\n    }\r\n\r\n    mapping (bytes32 => address ) optionAddresses;\r\n    mapping (uint256 => Action) actions;\r\n    uint256 actionsLength = 0;\r\n\r\n    event AddOption(uint256 actionId, address optionAddress, uint256 optionQty);\r\n    event OptionQty(uint256 qty);\r\n    event Address(address currentOption);\r\n    event OrigScript(bytes script);\r\n\r\n    /**\r\n    * @notice `getOption` serves as a basic getter using the description\r\n    *         to return the struct data.\r\n    * @param _actionId id for action structure this 'ballot action' is connected to\r\n    * @param _optionIndex The option descrciption of the option.\r\n    */\r\n    function getOption(uint256 _actionId, uint256 _optionIndex) // solium-disable-line function-order\r\n    external view returns(address optionAddress, uint256 actionSupport, string metadata, bytes32 externalId1, bytes32 externalId2)\r\n    {\r\n        Action storage actionInstance = actions[_actionId];\r\n        OptionState storage option = actionInstance.options[actionInstance.optionKeys[_optionIndex]];\r\n        optionAddress = optionAddresses[actionInstance.optionKeys[_optionIndex]];\r\n        actionSupport = option.actionSupport;\r\n        metadata = option.metadata;\r\n        externalId1 = option.externalId1;\r\n        externalId2 = option.externalId2;\r\n    }\r\n\r\n    /**\r\n    * @notice `getOptionLength` returns the total number of options for\r\n    *         a given action.\r\n    * @param _actionId The ID of the Action struct in the `actions` array\r\n    */\r\n    function getOptionLength(uint256 _actionId) public view returns\r\n    ( uint totalOptions ) { // solium-disable-line lbrace\r\n        totalOptions = actions[_actionId].optionKeys.length;\r\n    }\r\n\r\n    /**\r\n    * @notice `addOption` allows internal addition of options\r\n    *         (or options) to the current action.\r\n    * @param _actionId id for action structure this 'ballot action' is connected to\r\n    * @param _metadata Any additional information about the option.\r\n    *        Base implementation does not use this parameter.\r\n    * @param _description This is the string that will be displayed along the\r\n    *        option when voting\r\n    */\r\n    function addOption(uint256 _actionId, string _metadata, address _description, bytes32 eId1, bytes32 eId2)\r\n    internal\r\n    {\r\n        // Get action and option into storage\r\n        Action storage actionInstance = actions[_actionId];\r\n        bytes32[] storage keys = actionInstance.optionKeys;\r\n        bytes32 cKey = keccak256(abi.encodePacked(_description));\r\n        OptionState storage option = actionInstance.options[cKey];\r\n        // Make sure that this option has not already been added\r\n        require(option.added == false); // solium-disable-line error-reason\r\n        // ensure there is no potential for truncation when keys.length gets converted from uint256 to uint8\r\n        require(keys.length < uint8(-1)); // solium-disable-line error-reason\r\n        // Set all data for the option\r\n        option.added = true;\r\n        option.keyArrayIndex = uint8(keys.length);\r\n        option.metadata = _metadata;\r\n        option.externalId1 = eId1;\r\n        option.externalId2 = eId2;\r\n        // double check\r\n        optionAddresses[cKey] = _description;\r\n        keys.push(cKey);\r\n        actionInstance.infoStringLength += bytes(_metadata).length;\r\n        emit AddOption(_actionId, optionAddresses[cKey], actionInstance.optionKeys.length);\r\n    }\r\n\r\n    function addDynamicElements(\r\n        bytes script,\r\n        uint256 offset,\r\n        uint256 numberOfOptions,\r\n        uint256 strLength,\r\n        uint256 desLength\r\n    ) internal pure returns(bytes)\r\n    {\r\n        uint256 secondDynamicElementLocation = 32 + offset + (numberOfOptions * 32);\r\n        uint256 thirdDynamicElementLocation = secondDynamicElementLocation + 32 + (numberOfOptions * 32);\r\n        uint256 fourthDynamicElementLocation = thirdDynamicElementLocation + 32 + (numberOfOptions * 32);\r\n        uint256 fifthDynamicElementLocation = fourthDynamicElementLocation + (strLength / 32) * 32 + (strLength % 32 == 0 ? 32 : 64);\r\n        uint256 sixthDynamicElementLocation = fifthDynamicElementLocation + (desLength / 32) * 32 + (desLength % 32 == 0 ? 32 : 64);\r\n        uint256 seventhDynamicElementLocation = sixthDynamicElementLocation + 32 + (numberOfOptions * 32);\r\n\r\n        assembly {\r\n            mstore(add(script, 96), secondDynamicElementLocation)\r\n            mstore(add(script, 128), thirdDynamicElementLocation)\r\n            mstore(add(script, 160), fourthDynamicElementLocation)\r\n            mstore(add(script, 192), fifthDynamicElementLocation)\r\n            mstore(add(script, 224), sixthDynamicElementLocation)\r\n            mstore(add(script, 256), seventhDynamicElementLocation)\r\n        }\r\n\r\n        return script;\r\n    }\r\n\r\n    function _goToParamOffset(uint256 _paramNum, bytes _executionScript) internal pure returns(uint256 paramOffset) {\r\n        /*\r\n        param numbers and what they map to:\r\n        1. option addresses\r\n        2. Supports values\r\n        3. Info String indexes\r\n        4. Info String length\r\n        5. Description\r\n        6. Level 1 external references\r\n        7. level 2 external references\r\n        */\r\n        paramOffset = _executionScript.uint256At(0x20 + (0x20 * (_paramNum - 1) )) + 0x20;\r\n\r\n    }\r\n\r\n    function substring(\r\n        bytes strBytes,\r\n        uint startIndex,\r\n        uint endIndex\r\n    ) internal pure returns (string)\r\n    {\r\n        // first char is at location 0\r\n        //IPFS addresses span from 0 (startindex) to 46 (endIndex)\r\n        bytes memory result = new bytes(endIndex-startIndex);\r\n        for (uint i = startIndex; i < endIndex; i++) {\r\n            result[i-startIndex] = strBytes[i];\r\n        }\r\n        return string(result);\r\n    }\r\n\r\n    function _iterateExtraction(uint256 _actionId, bytes _executionScript, uint256 _currentOffset, uint256 _optionLength) internal {\r\n        uint256 currentOffset = _currentOffset;\r\n        address currentOption;\r\n        string memory info;\r\n        uint256 infoEnd;\r\n        bytes32 externalId1;\r\n        bytes32 externalId2;\r\n        uint256 idOffset;\r\n        uint256 infoStart = _goToParamOffset(OPTION_INFO_PARAM_LOC,_executionScript) + 0x20;\r\n        //Location(infoStart);\r\n        emit OptionQty(_optionLength);\r\n        for (uint256 i = 0 ; i < _optionLength; i++) {\r\n            currentOption = _executionScript.addressAt(currentOffset + 0x0C);\r\n            emit Address(currentOption);\r\n            //find the end of the infoString using the relative arg positions\r\n            infoEnd = infoStart + _executionScript.uint256At(currentOffset + (0x20 * 2 * (_optionLength + 1) ));\r\n            info = substring(_executionScript, infoStart, infoEnd);\r\n            //Metadata(info);\r\n            //Location(infoEnd);\r\n            currentOffset = currentOffset + 0x20;\r\n            // update the index for the next iteration\r\n            infoStart = infoEnd;\r\n            // store option external IDs\r\n            idOffset = _goToParamOffset(EX_ID1_PARAM_LOC, _executionScript) + 0x20 * (i + 1);\r\n            externalId1 = bytes32(_executionScript.uint256At(idOffset));\r\n            idOffset = _goToParamOffset(EX_ID2_PARAM_LOC, _executionScript) + 0x20 * (i + 1);\r\n            externalId2 = bytes32(_executionScript.uint256At(idOffset));\r\n\r\n            addOption(_actionId, info, currentOption, externalId1, externalId2);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev This function parses the option quantity\r\n    *      and passes it into _iterateExtraction to parse the option details\r\n    *\r\n    */\r\n    function _extractOptions(bytes _executionScript, uint256 _actionId) internal {\r\n        Action storage actionInstance = actions[_actionId];\r\n        // in order to find out the total length of our call data we take the 3rd\r\n        // relevent byte chunk (after the specid and the target address)\r\n        uint256 calldataLength = uint256(_executionScript.uint32At(0x4 + 0x14));\r\n        // Since the calldataLength is 4 bytes the start offset is\r\n        uint256 startOffset = 0x04 + 0x14 + 0x04;\r\n        // The first parameter is located at a byte depth indicated by the first\r\n        // word in the calldata (which is located at the startOffset + 0x04 for the function signature)\r\n        // so we have:\r\n        // start offset (spec id + address + calldataLength) + param offset + function signature\r\n        // note:function signature length (0x04) added in both contexts: grabbing the offset value and the outer offset calculation\r\n        uint256 firstParamOffset = _goToParamOffset(OPTION_ADDR_PARAM_LOC, _executionScript);\r\n        uint256 fifthParamOffset = _goToParamOffset(DESCRIPTION_PARAM_LOC, _executionScript);\r\n        uint256 currentOffset = firstParamOffset;\r\n        // compute end of script / next location and ensure there's no\r\n        // shenanigans\r\n        require(startOffset + calldataLength == _executionScript.length); // solium-disable-line error-reason\r\n        // The first word in the param slot is the length of the array\r\n        // obtain the beginning index of the infoString\r\n        uint256 optionLength = _executionScript.uint256At(currentOffset);\r\n        currentOffset = currentOffset + 0x20;\r\n        // This has the potential to be too gas expensive to ever happen.\r\n        // Upper limit of options should be checked against this function\r\n        _iterateExtraction(_actionId, _executionScript, currentOffset, optionLength);\r\n        uint256 descriptionStart = fifthParamOffset + 0x20;\r\n        uint256 descriptionEnd = descriptionStart + (_executionScript.uint256At(fifthParamOffset));\r\n        actionInstance.description = substring(_executionScript, descriptionStart, descriptionEnd);\r\n        // Skip the next param since it's also determined by this contract\r\n        // In order to do this we move the offset one word for the length of the param\r\n        // and we move the offset one word for each param.\r\n        //currentOffset = currentOffset.add(_executionScript.uint256At(currentOffset).mul(0x20));\r\n        //currentOffset = fifthParamOffset;\r\n        // The offset represents the data we've already accounted for; the rest is what will later\r\n        // need to be copied over.\r\n        //calldataLength = calldataLength.sub(currentOffset);\r\n    }\r\n\r\n    function addAddressesAndActions(\r\n        uint256 _actionId,\r\n        bytes script,\r\n        uint256 numberOfOptions,\r\n        uint256 dynamicOffset\r\n        ) internal view returns(uint256 offset)\r\n        {\r\n                // Set the initial offest after the static parameters\r\n        offset = 64 + dynamicOffset;\r\n\r\n        assembly { // solium-disable-line security/no-inline-assembly\r\n            mstore(add(script, offset), numberOfOptions)\r\n        }\r\n\r\n        offset += 32;\r\n\r\n        // Copy all option addresses\r\n        for (uint256 i = 0; i < numberOfOptions; i++) {\r\n            bytes32 canKey = actions[_actionId].optionKeys[i];\r\n            uint256 optionData = uint256(optionAddresses[canKey]);\r\n            assembly {\r\n                mstore(add(script, offset), optionData)\r\n            }\r\n            offset += 32;\r\n        }\r\n\r\n        assembly { // solium-disable-line security/no-inline-assembly\r\n            mstore(add(script, offset), numberOfOptions)\r\n        }\r\n\r\n        offset += 32;\r\n\r\n        // Copy all support data\r\n        for (i = 0; i < numberOfOptions; i++) {\r\n            uint256 supportsData = actions[_actionId].options[actions[_actionId].optionKeys[i]].actionSupport;\r\n\r\n            assembly { // solium-disable-line security/no-inline-assembly\r\n                mstore(add(script, offset), supportsData)\r\n            }\r\n            offset += 32;\r\n        }\r\n        return offset;\r\n    }\r\n\r\n    function addInfoString(\r\n        uint256 _actionId,\r\n        bytes script,\r\n        uint256 numberOfOptions,\r\n        uint256 _offset)\r\n        internal view returns (uint256 newOffset)\r\n    {\r\n        Action storage actionInstance = actions[_actionId];\r\n        uint256 infoStringLength = actionInstance.infoStringLength;\r\n        bytes memory infoString = new bytes(infoStringLength);\r\n        bytes memory optionMetaData;\r\n        uint256 metaDataLength;\r\n        uint256 strOffset = 0;\r\n        newOffset = _offset;\r\n        // Add number of options for array size of \"infoIndicies\"\r\n        assembly { // solium-disable-line security/no-inline-assembly\r\n            mstore(add(script, newOffset), numberOfOptions)\r\n        }\r\n        // Offset \"infoIndicies\" size\r\n        newOffset += 32;\r\n\r\n        for (uint256 i = 0; i < numberOfOptions; i++) {\r\n            bytes32 canKey = actionInstance.optionKeys[i];\r\n            optionMetaData = bytes(actionInstance.options[canKey].metadata);\r\n            infoString.copy(optionMetaData.getPtr() + 32, strOffset, optionMetaData.length);\r\n            strOffset += optionMetaData.length;\r\n            metaDataLength = optionMetaData.length;\r\n\r\n            assembly { // solium-disable-line security/no-inline-assembly\r\n                mstore(add(script, newOffset), metaDataLength)\r\n            }\r\n\r\n            newOffset += 32;\r\n        }\r\n\r\n        assembly { // solium-disable-line security/no-inline-assembly\r\n                mstore(add(script, newOffset), infoStringLength)\r\n        }\r\n\r\n\r\n        script.copy(infoString.getPtr() + 32, newOffset, infoStringLength);\r\n\r\n        newOffset += (infoStringLength / 32) * 32 + (infoStringLength % 32 == 0 ? 0 : 32);\r\n    }\r\n\r\n    function addExternalIds(\r\n        uint256 _actionId,\r\n        bytes script,\r\n        uint256 numberOfOptions,\r\n        uint256 _offset\r\n        ) internal view returns(uint256 offset)\r\n        {\r\n        offset = _offset;\r\n        assembly { // solium-disable-line security/no-inline-assembly\r\n            mstore(add(script, offset), numberOfOptions)\r\n        }\r\n\r\n        offset += 32;\r\n\r\n        // Copy all option addresses\r\n        for (uint256 i = 0; i < numberOfOptions; i++) {\r\n            //bytes32 canKey = actions[_actionId].optionKeys[i];\r\n            bytes32 externalId1 = actions[_actionId].options[actions[_actionId].optionKeys[i]].externalId1;\r\n            assembly {\r\n                mstore(add(script, offset), externalId1)\r\n            }\r\n            offset += 32;\r\n\r\n        }\r\n\r\n        assembly { // solium-disable-line security/no-inline-assembly\r\n            mstore(add(script, offset), numberOfOptions)\r\n        }\r\n\r\n        offset += 32;\r\n\r\n        // Copy all support data\r\n        for (i = 0; i < numberOfOptions; i++) {\r\n            bytes32 externalId2 = actions[_actionId].options[actions[_actionId].optionKeys[i]].externalId2;\r\n\r\n            assembly { // solium-disable-line security/no-inline-assembly\r\n                mstore(add(script, offset), externalId2)\r\n            }\r\n            offset += 32;\r\n\r\n        }\r\n        return offset;\r\n    }\r\n\r\n    function memcpyshort(uint _dest, uint _src, uint _len) internal pure {\r\n        uint256 src = _src;\r\n        uint256 dest = _dest;\r\n        uint256 len = _len;\r\n\r\n        // this line is unnecessary since the _len passed in is hard-coded\r\n        //require(_len < 32, \"_len should be less than 32\");\r\n        // Copy remaining bytes\r\n        uint mask = 256 ** (32 - len) - 1;\r\n        assembly { // solium-disable-line security/no-inline-assembly\r\n            let srcpart := and(mload(src), not(mask))\r\n            let destpart := and(mload(dest), mask)\r\n            mstore(dest, or(destpart, srcpart))\r\n        }\r\n    }\r\n\r\n    function encodeInput(uint256 _actionId) internal returns(bytes) {\r\n        Action storage action = actions[_actionId];\r\n        uint256 optionsLength = action.optionKeys.length;\r\n\r\n        // initialize the pointer for the originally parsed script\r\n        bytes memory origExecScript = new bytes(32);\r\n        // set the pointer to the original script\r\n        origExecScript = action.executionScript;\r\n        // dynmaicOffset: The bytevalue in the script where the\r\n        // dynamic-length parameters will be encoded\r\n        // This can probably be hard-coded now that we're nailing down this specification\r\n        uint256 dynamicOffset = origExecScript.uint256At(32);\r\n        // The total length of the new script will be two 32 byte spaces\r\n        // for each candidate (one for support one for address)\r\n        // as well as 3 32 byte spaces for\r\n        // the header (specId 0x4, target address 0x14, calldata 0x4, function hash 0x4)\r\n        // and the two dynamic param locations\r\n        // as well as additional space for the staticParameters\r\n        uint256 infoStrLength = action.infoStringLength;\r\n        uint256 desStrLength = bytes(action.description).length;\r\n        // Calculate the total length of the call script to be encoded\r\n        // 228: The words needed to specify lengths of the various dynamic params\r\n        //      There are  7 dynamic params in this spec so 7 * 32 + function hash = 228\r\n        // dynamicOffset: the byte number where the first parameter's data area begins\r\n        //      This number accounts for the size of the initial parameter locations\r\n        // optionsLength: The quantity of options in the action script multiplied by 160\r\n        //      aince each option will require 5 words for it's data (160 = 32 * 5)\r\n        uint256 callDataLength = 228 + dynamicOffset + optionsLength * 160;\r\n        // add the length of the info and description strings to the total length\r\n        // string lengths that aren't cleanly divisible by 32 require an extra word\r\n        callDataLength += (infoStrLength / 32) * 32 + (infoStrLength % 32 == 0 ? 0 : 32);\r\n        callDataLength += (desStrLength / 32) * 32 + (desStrLength % 32 == 0 ? 0 : 32);\r\n        // initialize a location in memory to copy in the call data length\r\n        bytes memory callDataLengthMem = new bytes(32);\r\n        // copy the call data length into the memory location\r\n        assembly { // solium-disable-line security/no-inline-assembly\r\n            mstore(add(callDataLengthMem, 32), callDataLength)\r\n        }\r\n        // initialize the script with 28 extra bytes to account for header info:\r\n        //  1. specId (4 bytes)\r\n        //  2. target address (20 bytes)\r\n        //  3. callDataLength itself (4 bytes)\r\n        bytes memory script = new bytes(callDataLength + 28);\r\n        // copy the header info plus the dynamicOffset entry into the first param\r\n        // since it doesn't change\r\n        script.copy(origExecScript.getPtr() + 32,0, 96); // 64 + 32 = 96\r\n        // copy the calldatalength stored in memory into the new script\r\n        memcpyshort((script.getPtr() + 56), callDataLengthMem.getPtr() + 60, 4);\r\n        // calculate and copy in the locations for all dynamic elements\r\n        addDynamicElements(script, dynamicOffset, optionsLength, infoStrLength, desStrLength);\r\n        // copy over remaining static parameters\r\n        script.copy(origExecScript.getPtr() + 288, 256, dynamicOffset - 224); // -256 + 32 = 224\r\n        // add option addresses and option values\r\n        // keep track of current location in the script using offset\r\n        uint256 offset = addAddressesAndActions(_actionId, script, optionsLength, dynamicOffset);\r\n\r\n        offset = _goToParamOffset(INDICIES_PARAM_LOC, script) + 0x20;\r\n        // Copy in the composite info string for all options,\r\n        // along with the indices for each options substring\r\n        offset = addInfoString(_actionId, script, optionsLength, offset);\r\n        //Copy over Description\r\n        offset = _goToParamOffset(DESCRIPTION_PARAM_LOC, script) + 0x20;\r\n        assembly { // solium-disable-line security/no-inline-assembly\r\n                mstore(add(script, offset), desStrLength)\r\n        }\r\n        script.copy(bytes(action.description).getPtr() + 32, offset, desStrLength);\r\n        // Copy over External References\r\n        offset = _goToParamOffset(EX_ID1_PARAM_LOC, script) + 0x20;\r\n        addExternalIds(_actionId, script, optionsLength, offset);\r\n        emit OrigScript(origExecScript);\r\n        return script;\r\n    }\r\n\r\n    function parseScript(bytes _executionScript) internal returns(uint256 actionId) {\r\n        actionId = actionsLength++;\r\n        Action storage actionInstance = actions[actionId];\r\n        actionInstance.executionScript = _executionScript;\r\n        actionInstance.infoStringLength = 0;\r\n        // Spec ID must be 1\r\n        require(_executionScript.uint32At(0x0) == 1); // solium-disable-line error-reason\r\n        if (_executionScript.length != 4) {\r\n            _extractOptions(_executionScript, actionId);\r\n        }\r\n        // First Static Parameter in script parsed for the externalId\r\n        actionInstance.externalId = _goToParamOffset(TOTAL_DYNAMIC_PARAMS + 1, _executionScript) - 0x20;\r\n        emit OrigScript(_executionScript);\r\n    }\r\n}\r\n\r\n// File: contracts/DotVoting.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer: GPL-3.0-or-later\r\n */\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n// TODO: Revert import path when changes get merged into aragon/os\r\n// import \"@aragon/os/contracts/common/ADynamicForwarder.sol\";\r\n\r\n\r\n\r\ncontract DotVoting is ADynamicForwarder, AragonApp {\r\n\r\n    MiniMeToken public token;\r\n    uint256 public globalCandidateSupportPct;\r\n    uint256 public globalMinQuorum;\r\n    uint64 public voteTime;\r\n    uint256 voteLength;\r\n\r\n    uint256 constant public PCT_BASE = 10 ** 18; // 0% = 0; 1% = 10^16; 100% = 10^18\r\n\r\n\r\n    // bytes32 constant public ROLE_ADD_CANDIDATES = keccak256(\"ROLE_ADD_CANDIDATES\");\r\n    bytes32 constant public ROLE_ADD_CANDIDATES = 0xa71d8ae250b03a7b4831d7ee658104bf1ee3193c61256a07e2008fdfb75c5fa9;\r\n    // bytes32 constant public ROLE_CREATE_VOTES = keccak256(\"ROLE_CREATE_VOTES\");\r\n    bytes32 constant public ROLE_CREATE_VOTES = 0x59036cbdc6597a5655363d74de8211c9fcba4dd9204c466ef593666e56a6e574;\r\n    // bytes32 constant public ROLE_MODIFY_QUORUM = keccak256(\"ROLE_MODIFY_QUORUM\");\r\n    bytes32 constant public ROLE_MODIFY_QUORUM = 0xaa42a0cff9103a0165dffb0f5652f3a480d3fb6edf2c364f5e2110629719a5a7;\r\n    // bytes32 constant public ROLE_MODIFY_CANDIDATE_SUPPORT = keccak256(\"ROLE_MODIFY_CANDIDATE_SUPPORT\");\r\n    bytes32 constant public ROLE_MODIFY_CANDIDATE_SUPPORT = 0xbd671bb523f136ed8ffc557fe00fbb016a7f9f856a4b550bb6366d356dcb8c74;\r\n\r\n    string private constant ERROR_CAN_VOTE = \"ERROR_CAN_VOTE\";\r\n    string private constant ERROR_MIN_QUORUM = \"ERROR_MIN_QUORUM\";\r\n    string private constant ERROR_VOTE_LENGTH = \"ERROR_VOTE_LENGTH\";\r\n\r\n    struct Vote {\r\n        string metadata;\r\n        address creator;\r\n        uint64 startDate;\r\n        uint256 snapshotBlock;\r\n        uint256 candidateSupportPct;\r\n        uint256 minQuorum;\r\n        uint256 totalVoters;\r\n        uint256 totalParticipation;\r\n        mapping (address => uint256[]) voters;\r\n        uint256 actionId;\r\n    }\r\n\r\n    mapping (uint256 => Vote) votes;\r\n\r\n    event StartVote(uint256 indexed voteId);\r\n    event CastVote(uint256 indexed voteId);\r\n    event UpdateCandidateSupport(string indexed candidateKey, uint256 support);\r\n    event ExecuteVote(uint256 indexed voteId);\r\n    event ExecutionScript(bytes script, uint256 data);\r\n    // Add hash info\r\n    event ExternalContract(uint256 indexed voteId, address addr, bytes32 funcSig);\r\n    event AddCandidate(uint256 voteId, address candidate, uint length);\r\n    event Metadata(string metadata);\r\n    event Location(uint256 currentLocation);\r\n    event Address(address candidate);\r\n    event CandidateQty(uint256 numberOfCandidates);\r\n    event UpdateQuorum(uint256 quorum);\r\n    event UpdateMinimumSupport(uint256 minSupport);\r\n\r\n////////////////\r\n// Constructor\r\n////////////////\r\n\r\n   /**\r\n    * @notice Initializes DotVoting app with `_token.symbol(): string` for\r\n    *         governance, minimum quorum of\r\n    *         `(_minQuorum - _minQuorum % 10^14)\r\n    *         / 10^16`, minimal candidate acceptance of\r\n    *         `(_candidateSupportPct - _candidateSupportPct % 10^14) / 10^16`\r\n    *         and vote duations of `(_voteTime - _voteTime % 86400) / 86400`\r\n    *         day `_voteTime >= 172800 ? 's' : ''`\r\n    * @param _token MiniMeToken address that will be used as governance token\r\n    * @param _minQuorum Percentage of voters that must participate in\r\n    *        a dot vote for it to succeed (expressed as a 10^18 percentage,\r\n    *        (eg 10^16 = 1%, 10^18 = 100%)\r\n    * @param _candidateSupportPct Percentage of votes cast that must\r\n    *        support a voting option for it to be valid (expressed as a 10^18\r\n    *        percentage, (eg 10^16 = 1%, 10^18 = 100%)\r\n    * @param _voteTime Seconds that a vote will be open for tokenholders to\r\n    *        vote (unless it is impossible for the fate of the vote to change)\r\n    */\r\n    function initialize(\r\n        MiniMeToken _token,\r\n        uint256 _minQuorum,\r\n        uint256 _candidateSupportPct,\r\n        uint64 _voteTime\r\n    ) external onlyInit\r\n    {\r\n        initialized();\r\n        require(_minQuorum > 0, ERROR_MIN_QUORUM);\r\n        require(_minQuorum <= PCT_BASE, ERROR_MIN_QUORUM);\r\n        require(_minQuorum >= _candidateSupportPct, ERROR_MIN_QUORUM);\r\n        token = _token;\r\n        globalMinQuorum = _minQuorum;\r\n        globalCandidateSupportPct = _candidateSupportPct;\r\n        voteTime = _voteTime;\r\n        voteLength = 1;\r\n    }\r\n\r\n///////////////////////\r\n// Voting functions\r\n///////////////////////\r\n\r\n\r\n    /**\r\n    * @notice Create a new dot vote about \"`_metadata`.\"\r\n    * @param _executionScript EVM script to be executed on approval\r\n    * @param _metadata Vote metadata\r\n    * @return voteId Id for newly created vote\r\n    */\r\n    function newVote(bytes _executionScript, string _metadata)\r\n        external auth(ROLE_CREATE_VOTES) returns (uint256 voteId)\r\n    {\r\n        voteId = _newVote(_executionScript, _metadata);\r\n    }\r\n\r\n    /**\r\n    * @notice Cast a dot vote.\r\n    * @param _voteId id for vote structure this 'ballot action' is connected to\r\n    * @param _supports Array of support weights in order of their order in\r\n    *                  `votes[_voteId].candidateKeys`, sum of all supports\r\n    *                  must be less than `token.balance[msg.sender]`.\r\n    */\r\n    function vote(uint256 _voteId, uint256[] _supports)  external isInitialized {\r\n        require(canVote(_voteId, msg.sender), ERROR_CAN_VOTE);\r\n        _vote(_voteId, _supports, msg.sender);\r\n    }\r\n\r\n    /**\r\n    * @notice Execute dot vote #`_voteId`.\r\n    * @param _voteId Id for vote\r\n    */\r\n    function executeVote(uint256 _voteId) external isInitialized {\r\n        require(canExecute(_voteId), ERROR_CAN_VOTE);\r\n        _executeVote(_voteId);\r\n    }\r\n\r\n    /**\r\n    * @notice `getCandidate` serves as a basic getter using the description\r\n    *         to return the struct data.\r\n    * @param _voteId id for vote structure this 'ballot action' is connected to\r\n    * @param _candidateIndex The candidate descrciption of the candidate.\r\n    */\r\n    function getCandidate(uint256 _voteId, uint256 _candidateIndex)\r\n    external view isInitialized returns(address candidateAddress, uint256 voteSupport, string metadata, bytes32 externalId1, bytes32 externalId2)\r\n    {\r\n        require(_voteId < voteLength, ERROR_VOTE_LENGTH); // \"Vote ID outside of current vote range\");\r\n        uint256 actionId = votes[_voteId].actionId;\r\n        Action storage action = actions[actionId];\r\n        uint256 candidateLength = action.optionKeys.length;\r\n        require(_candidateIndex < candidateLength); // solium-disable-line error-reason\r\n        OptionState storage candidate = action.options[action.optionKeys[_candidateIndex]];\r\n        candidateAddress = optionAddresses[action.optionKeys[_candidateIndex]];\r\n        voteSupport = candidate.actionSupport;\r\n        metadata = candidate.metadata;\r\n        externalId1 = candidate.externalId1;\r\n        externalId2 = candidate.externalId2;\r\n    }\r\n\r\n    /**\r\n    * @notice Global parameter change: A dot voting option will require at least `@formatPct(_globalCandidateSupportPct)`% of the votes for it to be considered valid.\r\n    * @param _globalCandidateSupportPct Percentage of votes cast that must support\r\n    *        a voting option for it to be valid (expressed as a 10^18 percentage,\r\n    *        e.g. 10^16 = 1%, 10^18 = 100%)\r\n    */\r\n    function setglobalCandidateSupportPct(uint256 _globalCandidateSupportPct)\r\n    external auth(ROLE_MODIFY_CANDIDATE_SUPPORT)\r\n    {\r\n        require(globalMinQuorum >= _globalCandidateSupportPct); // solium-disable-line error-reason\r\n        globalCandidateSupportPct = _globalCandidateSupportPct;\r\n        emit UpdateMinimumSupport(globalCandidateSupportPct);\r\n    }\r\n\r\n    /**\r\n    * @notice Global parameter change: A dot vote will require a minimum participation from `@formatPct(_minQuorum)`% of the total token supply for the proposal to be considered valid.\r\n    * @param _minQuorum Percentage of voters that must participate in a vote for it\r\n    *        to be considered valid (expressed as a 10^18 percentage, e.g. 10^16 = 1%,\r\n    *        10^18 = 100%)\r\n    */\r\n    function setGlobalQuorum(uint256 _minQuorum)\r\n    external auth(ROLE_MODIFY_QUORUM)\r\n    {\r\n        require(_minQuorum > 0); // solium-disable-line error-reason\r\n        require(_minQuorum <= PCT_BASE); // solium-disable-line error-reason\r\n        require(_minQuorum >= globalCandidateSupportPct); // solium-disable-line error-reason\r\n        globalMinQuorum = _minQuorum;\r\n        emit UpdateQuorum(globalMinQuorum);\r\n    }\r\n\r\n    /**\r\n    * @dev `addCandidate` allows the `ROLE_ADD_CANDIDATES` to add candidates\r\n    *      (aka voting options) to an open dot vote.\r\n    * @notice Add voting option \"`_description`\" to dot vote #`_voteId` for the purpose of `_metadata`.\r\n    * @param _voteId id for vote structure this 'ballot action' is connected to\r\n    * @param _metadata Any additional information about the candidate.\r\n    *        Base implementation does not use this parameter.\r\n    * @param _description This is the address that will be displayed along the\r\n    *        option when voting\r\n    * @param _eId1 External ID 1, can be used for basic candidate information\r\n    * @param _eId2 External ID 2, can be used for basic candidate information\r\n    */\r\n    function addCandidate(uint256 _voteId, string _metadata, address _description, bytes32 _eId1, bytes32 _eId2)\r\n    public auth(ROLE_ADD_CANDIDATES)\r\n    {\r\n        Vote storage voteInstance = votes[_voteId];\r\n        require(_voteId < voteLength, ERROR_VOTE_LENGTH);\r\n        require(_isVoteOpen(voteInstance)); // solium-disable-line error-reason\r\n        addOption(votes[_voteId].actionId, _metadata, _description, _eId1, _eId2);\r\n    }\r\n\r\n///////////////////////\r\n// IForwarder functions\r\n///////////////////////\r\n\r\n    /**\r\n    * @notice `isForwarder` is a basic helper function used to determine\r\n    *         if a function implements the IForwarder interface\r\n    * @dev IForwarder interface conformance\r\n    * @return always returns true\r\n    */\r\n    function isForwarder() public pure returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @notice Used to ensure that the permissions are being handled properly\r\n    *         for the dot vote forwarding\r\n    * @dev IForwarder interface conformance\r\n    * @param _sender Address of the entity trying to forward\r\n    * @return True is `_sender` has correct permissions\r\n    */\r\n    function canForward(address _sender, bytes /*_evmCallScript*/) public view returns (bool) {\r\n        return canPerform(_sender, ROLE_CREATE_VOTES, arr());\r\n    }\r\n\r\n    // * @param _evmCallScript Not used in this implementation\r\n\r\n        /**\r\n    * @notice Creates a vote to execute the desired action\r\n    * @dev IForwarder interface conformance\r\n    * @param _evmScript Start vote with script\r\n    */\r\n    function forward(bytes _evmScript) public { // solium-disable-line function-order\r\n        require(canForward(msg.sender, _evmScript)); // solium-disable-line error-reason\r\n        _newVote(_evmScript, \"\");\r\n    }\r\n\r\n///////////////////////\r\n// View state functions\r\n///////////////////////\r\n\r\n    /**\r\n    * @notice `canVote` is used to check whether an address is elligible to\r\n    *         cast a dot vote in a given dot vote action.\r\n    * @param _voteId The ID of the Vote on which the vote would be cast.\r\n    * @param _voter The address of the entity trying to vote\r\n    * @return True is `_voter` has a vote token balance and vote is open\r\n    */\r\n    function canVote(uint256 _voteId, address _voter) public view isInitialized returns (bool) {\r\n        require(_voteId < voteLength, ERROR_VOTE_LENGTH);\r\n        Vote storage voteInstance = votes[_voteId];\r\n        return _isVoteOpen(voteInstance) && token.balanceOfAt(_voter, voteInstance.snapshotBlock) > 0;\r\n    }\r\n\r\n    /**\r\n    * @notice `canExecute` is used to check that the participation has been met\r\n    *         and the vote has reached it's end before the execute function is\r\n    *         called.\r\n    * @param _voteId id for vote structure this 'ballot action' is connected to\r\n    * @return True if the vote is elligible for execution.\r\n    */\r\n    function canExecute(uint256 _voteId) public view isInitialized returns (bool) {\r\n        require(_voteId < voteLength, ERROR_VOTE_LENGTH);\r\n        Vote storage voteInstance = votes[_voteId];\r\n        Action storage action = actions[voteInstance.actionId];\r\n        if (action.executed)\r\n            return false;\r\n         // vote ended?\r\n        if (_isVoteOpen(voteInstance))\r\n          return false;\r\n         // has minimum participation threshold been reached?\r\n        if (!_isValuePct(voteInstance.totalParticipation, voteInstance.totalVoters, voteInstance.minQuorum))\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @notice `getVote` splits all of the data elements out of a vote\r\n    *         struct and returns the individual values.\r\n    * @param _voteId The ID of the Vote struct in the `votes` array\r\n    */\r\n    function getVote(uint256 _voteId) public view isInitialized returns\r\n    (\r\n        bool open,\r\n        address creator,\r\n        uint64 startDate,\r\n        uint256 snapshotBlock,\r\n        uint256 candidateSupport,\r\n        uint256 totalVoters,\r\n        uint256 totalParticipation,\r\n        uint256 externalId,\r\n        bytes executionScript, // script,\r\n        bool executed,\r\n        string voteDescription\r\n    ) { // solium-disable-line lbrace\r\n        require(_voteId < voteLength, ERROR_VOTE_LENGTH);\r\n        Vote storage voteInstance = votes[_voteId];\r\n        Action memory action = actions[voteInstance.actionId];\r\n        open = _isVoteOpen(voteInstance);\r\n        creator = voteInstance.creator;\r\n        startDate = voteInstance.startDate;\r\n        snapshotBlock = voteInstance.snapshotBlock;\r\n        candidateSupport = voteInstance.candidateSupportPct;\r\n        totalVoters = voteInstance.totalVoters;\r\n        totalParticipation = voteInstance.totalParticipation;\r\n        executionScript = action.executionScript;\r\n        executed = action.executed;\r\n        externalId = action.externalId;\r\n        voteDescription = action.description;\r\n    }\r\n\r\n        /**\r\n    * @notice `getCandidateLength` returns the total number of voting options for\r\n    *         a given dot vote.\r\n    * @param _voteId The ID of the Vote struct in the `votes` array\r\n    */\r\n    function getCandidateLength(uint256 _voteId) public view isInitialized returns\r\n    ( uint totalCandidates ) { // solium-disable-line lbrace\r\n        require(_voteId < voteLength, ERROR_VOTE_LENGTH);\r\n        uint256 actionId = votes[_voteId].actionId;\r\n        totalCandidates = actions[actionId].optionKeys.length;\r\n    }\r\n\r\n    /**\r\n    * @notice `getVoteMetadata` returns the vote metadata for a given dot vote.\r\n    * @param _voteId The ID of the Vote struct in the `votes` array\r\n    */\r\n    function getVoteMetadata(uint256 _voteId) public view isInitialized returns (string) {\r\n        require(_voteId < voteLength, ERROR_VOTE_LENGTH);\r\n        return votes[_voteId].metadata;\r\n    }\r\n\r\n    /**\r\n    * @notice `getVoterState` returns the voting power for a given voter.\r\n    * @param _voteId The ID of the Vote struct in the `votes` array.\r\n    * @param _voter The voter whose weights will be returned\r\n    */\r\n    function getVoterState(uint256 _voteId, address _voter) public view isInitialized returns (uint256[]) {\r\n        require(_voteId < voteLength, ERROR_VOTE_LENGTH);\r\n        return votes[_voteId].voters[_voter];\r\n    }\r\n\r\n///////////////////////\r\n// Internal functions\r\n///////////////////////\r\n\r\n    /**\r\n    * @notice `_newVote` starts a new vote and adds it to the votes array.\r\n    *         votes are not started with a vote from the caller, as candidates\r\n    *         and candidate weights need to be supplied.\r\n    * @param _executionScript The script that will be executed when\r\n    *        this vote closes. Script is of the following form:\r\n    *            [ specId (uint32: 4 bytes) ] many calls with this structure ->\r\n    *            [ to (address: 20 bytes) ]\r\n    *            [calldataLength (uint32: 4 bytes) ]\r\n    *            [ function hash (uint32: 4 bytes) ]\r\n    *            [ calldata (calldataLength bytes) ]\r\n    *        In order to work with a dot vote the execution script must contain\r\n    *        Arrays as its first six parameters. Non-string array lengths must all equal candidateLength\r\n    *        The first Array is generally a list of identifiers (address)\r\n    *        The second array will be composed of support value (uint256).\r\n    *        The third array will be end index for each candidates Information within the infoString (optional uint256)\r\n    *        The fourth array is a string of concatenated candidate information, the infoString (optional string)\r\n    *        The fifth array is used for description params (optional string)\r\n    *        The sixth array is an array of identification keys (optional uint256)\r\n    *        The seventh array is a second array of identification keys, usually mapping to a second level (optional uint256)\r\n    *        The eigth parameter is used as the identifier for this vote. (uint256)\r\n    *        See ExecutionTarget.sol in the test folder for an example  forwarded function (setSignal)\r\n    * @param _metadata The metadata or vote information attached to the vote.\r\n    * @return voteId The ID(or index) of this vote in the votes array.\r\n    */\r\n    function _newVote(bytes _executionScript, string _metadata) internal\r\n    isInitialized returns (uint256 voteId)\r\n    {\r\n        require(_executionScript.uint32At(0x0) == 1); // solium-disable-line error-reason\r\n        uint256 actionId = parseScript(_executionScript);\r\n        voteId = voteLength++;\r\n        Vote storage voteInstance = votes[voteId];\r\n        voteInstance.creator = msg.sender;\r\n        voteInstance.metadata = _metadata;\r\n        voteInstance.actionId = actionId;\r\n        voteInstance.startDate = uint64(block.timestamp); // solium-disable-line security/no-block-members\r\n        voteInstance.snapshotBlock = getBlockNumber() - 1; // avoid double voting in this very block\r\n        voteInstance.totalVoters = token.totalSupplyAt(voteInstance.snapshotBlock);\r\n        voteInstance.candidateSupportPct = globalCandidateSupportPct;\r\n        voteInstance.minQuorum = globalMinQuorum;\r\n        // First Static Parameter in script parsed for the externalId\r\n        emit ExternalContract(voteId, _executionScript.addressAt(0x4),_executionScript.bytes32At(0x0));\r\n        emit StartVote(voteId);\r\n        emit ExecutionScript(_executionScript, 0);\r\n    }\r\n\r\n    /**\r\n    * @dev `_vote` is the internal function that allows a token holder to\r\n    *         caste a vote on the current options.\r\n    * @param _voteId id for vote structure this 'ballot action' is connected to\r\n    * @param _supports Array of support weights in order of their order in\r\n    *        `votes[_voteId].candidateKeys`, sum of all supports must be less\r\n    *        than `token.balance[msg.sender]`.\r\n    * @param _voter The address of the entity \"casting\" this vote action.\r\n    */\r\n    function _vote(\r\n        uint256 _voteId,\r\n        uint256[] _supports,\r\n        address _voter\r\n    ) internal\r\n    {\r\n        require(_voteId < voteLength, ERROR_VOTE_LENGTH);\r\n        Vote storage voteInstance = votes[_voteId];\r\n        Action storage action = actions[voteInstance.actionId];\r\n\r\n        // this could re-enter, though we can asume the\r\n        // governance token is not maliciuous\r\n        uint256 voterStake = token.balanceOfAt(_voter, voteInstance.snapshotBlock);\r\n        uint256 totalSupport = 0;\r\n\r\n        emit CastVote(_voteId);\r\n\r\n\r\n        uint256 voteSupport;\r\n        uint256[] storage oldVoteSupport = voteInstance.voters[msg.sender];\r\n        bytes32[] storage cKeys = action.optionKeys;\r\n        uint256 supportsLength = _supports.length;\r\n        uint256 oldSupportLength = oldVoteSupport.length;\r\n        uint256 totalParticipation = voteInstance.totalParticipation;\r\n        require(cKeys.length == supportsLength); // solium-disable-line error-reason\r\n        require(oldSupportLength <= supportsLength); // solium-disable-line error-reason\r\n        _checkTotalSupport(_supports, voterStake);\r\n        uint256 i = 0;\r\n        // This is going to cost a lot of gas... it'd be cool if there was\r\n        // a better way to do this.\r\n        //totalParticipation = _syncOldSupports(oldSupportLength, )\r\n        for (i; i < oldSupportLength; i++) {\r\n            voteSupport = action.options[cKeys[i]].actionSupport;\r\n            totalParticipation = totalParticipation.sub(oldVoteSupport[i]);\r\n            voteSupport = voteSupport.sub(oldVoteSupport[i]);\r\n            voteSupport = voteSupport.add(_supports[i]);\r\n            totalParticipation = totalParticipation.add(_supports[i]);\r\n            action.options[cKeys[i]].actionSupport = voteSupport;\r\n        }\r\n        for (i; i < supportsLength; i++) {\r\n            voteSupport = action.options[cKeys[i]].actionSupport;\r\n            voteSupport = voteSupport.add(_supports[i]);\r\n            totalParticipation = totalParticipation.add(_supports[i]);\r\n            action.options[cKeys[i]].actionSupport = voteSupport;\r\n        }\r\n        voteInstance.totalParticipation = totalParticipation;\r\n        voteInstance.voters[msg.sender] = _supports;\r\n    }\r\n\r\n    function _checkTotalSupport(uint256[] _supports, uint256 _voterStake) internal {\r\n        uint256 totalSupport;\r\n        for (uint64 i = 0; i < _supports.length; i++) {\r\n            totalSupport = totalSupport.add(_supports[i]);\r\n        }\r\n        require(totalSupport <= _voterStake); // solium-disable-line error-reason\r\n    }\r\n\r\n    /**\r\n    * @notice `_pruneVotes` trims out options that don't meet the minimum support pct.\r\n    */\r\n    function _pruneVotes(uint256 _voteId, uint256 _candidateSupportPct) internal {\r\n        require(_voteId < voteLength, ERROR_VOTE_LENGTH);\r\n        Vote storage voteInstance = votes[_voteId];\r\n        uint256 actionId = voteInstance.actionId;\r\n        Action storage action = actions[actionId];\r\n        bytes32[] memory candidateKeys = actions[actionId].optionKeys;\r\n        uint256 candidateLength = candidateKeys.length;\r\n        for (uint256 i = 0; i < candidateLength; i++) {\r\n            bytes32 key = candidateKeys[i];\r\n            OptionState storage candidateState = action.options[key];\r\n            if (!_isValuePct(candidateState.actionSupport, voteInstance.totalParticipation, voteInstance.candidateSupportPct)) {\r\n                voteInstance.totalParticipation -= candidateState.actionSupport;\r\n                candidateState.actionSupport = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @notice `_executeVote` executes the provided script for this vote and\r\n    *         passes along the candidate data to the next function.\r\n    * @return voteId The ID(or index) of this vote in the votes array.\r\n    */\r\n    function _executeVote(uint256 _voteId) internal {\r\n        require(_voteId < voteLength, ERROR_VOTE_LENGTH);\r\n        Vote storage voteInstance = votes[_voteId];\r\n        uint256 actionId = voteInstance.actionId;\r\n        Action storage action = actions[actionId];\r\n        uint256 candidateSupportPct = voteInstance.candidateSupportPct;\r\n        if (candidateSupportPct > 0) {\r\n            _pruneVotes(_voteId, candidateSupportPct);\r\n        }\r\n        bytes memory script = encodeInput(voteInstance.actionId);\r\n        emit ExecutionScript(script, 0);\r\n        action.executed = true;\r\n        runScript(script, new bytes(0), new address[](0));\r\n        emit ExecuteVote(_voteId);\r\n    }\r\n\r\n    /**\r\n    * @dev Checks whether vote time has passed and whether vote has executed\r\n    */\r\n    function _isVoteOpen(Vote storage voteArg) internal view returns (bool) {\r\n        bool voteWithinTime = uint64(block.timestamp) < (voteArg.startDate.add(voteTime)); // solium-disable-line security/no-block-members\r\n        return voteWithinTime && !actions[voteArg.actionId].executed;\r\n    }\r\n\r\n    /**\r\n    * @dev Calculates whether `_value` is at least a percentage `_pct` of `_total`\r\n    */\r\n    function _isValuePct(uint256 _value, uint256 _total, uint256 _pct)\r\n        internal pure returns (bool)\r\n    {\r\n        // if (_total == 0) {\r\n        if (_value == 0 && _total > 0)\r\n            return false;\r\n        // }\r\n\r\n        uint256 m = _total.mul(_pct);\r\n        uint256 v = m / PCT_BASE;\r\n        // uint256 computedPct = _value.mul(PCT_BASE) / _total;\r\n\r\n        // return computedPct >= _pct;\r\n\r\n        // If division is exact, allow same value,\r\n        // otherwise require value to be greater\r\n        return m % PCT_BASE == 0 ? _value >= v : _value > v;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"DESCRIPTION_PARAM_LOC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_actionId\",\"type\":\"uint256\"},{\"name\":\"_optionIndex\",\"type\":\"uint256\"}],\"name\":\"getOption\",\"outputs\":[{\"name\":\"optionAddress\",\"type\":\"address\"},{\"name\":\"actionSupport\",\"type\":\"uint256\"},{\"name\":\"metadata\",\"type\":\"string\"},{\"name\":\"externalId1\",\"type\":\"bytes32\"},{\"name\":\"externalId2\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_script\",\"type\":\"bytes\"}],\"name\":\"getEVMScriptExecutor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecoveryVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_minQuorum\",\"type\":\"uint256\"},{\"name\":\"_candidateSupportPct\",\"type\":\"uint256\"},{\"name\":\"_voteTime\",\"type\":\"uint64\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voteId\",\"type\":\"uint256\"},{\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"getVoterState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voteId\",\"type\":\"uint256\"},{\"name\":\"_candidateIndex\",\"type\":\"uint256\"}],\"name\":\"getCandidate\",\"outputs\":[{\"name\":\"candidateAddress\",\"type\":\"address\"},{\"name\":\"voteSupport\",\"type\":\"uint256\"},{\"name\":\"metadata\",\"type\":\"string\"},{\"name\":\"externalId1\",\"type\":\"bytes32\"},{\"name\":\"externalId2\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_ADD_CANDIDATES\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voteId\",\"type\":\"uint256\"}],\"name\":\"getVote\",\"outputs\":[{\"name\":\"open\",\"type\":\"bool\"},{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"startDate\",\"type\":\"uint64\"},{\"name\":\"snapshotBlock\",\"type\":\"uint256\"},{\"name\":\"candidateSupport\",\"type\":\"uint256\"},{\"name\":\"totalVoters\",\"type\":\"uint256\"},{\"name\":\"totalParticipation\",\"type\":\"uint256\"},{\"name\":\"externalId\",\"type\":\"uint256\"},{\"name\":\"executionScript\",\"type\":\"bytes\"},{\"name\":\"executed\",\"type\":\"bool\"},{\"name\":\"voteDescription\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_CREATE_VOTES\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EX_ID1_PARAM_LOC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globalMinQuorum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_globalCandidateSupportPct\",\"type\":\"uint256\"}],\"name\":\"setglobalCandidateSupportPct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_voteId\",\"type\":\"uint256\"},{\"name\":\"_supports\",\"type\":\"uint256[]\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_MODIFY_CANDIDATE_SUPPORT\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OPTION_SUPPORT_PARAM_LOC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OPTION_ADDR_PARAM_LOC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"allowRecoverability\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globalCandidateSupportPct\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitializationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_actionId\",\"type\":\"uint256\"}],\"name\":\"getOptionLength\",\"outputs\":[{\"name\":\"totalOptions\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_MODIFY_QUORUM\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"transferToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"},{\"name\":\"_params\",\"type\":\"uint256[]\"}],\"name\":\"canPerform\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEVMScriptRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OPTION_INFO_PARAM_LOC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INDICIES_PARAM_LOC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_DYNAMIC_PARAMS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_voteId\",\"type\":\"uint256\"},{\"name\":\"_metadata\",\"type\":\"string\"},{\"name\":\"_description\",\"type\":\"address\"},{\"name\":\"_eId1\",\"type\":\"bytes32\"},{\"name\":\"_eId2\",\"type\":\"bytes32\"}],\"name\":\"addCandidate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"voteTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voteId\",\"type\":\"uint256\"}],\"name\":\"getVoteMetadata\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"canForward\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minQuorum\",\"type\":\"uint256\"}],\"name\":\"setGlobalQuorum\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voteId\",\"type\":\"uint256\"}],\"name\":\"canExecute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voteId\",\"type\":\"uint256\"},{\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"canVote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_executionScript\",\"type\":\"bytes\"},{\"name\":\"_metadata\",\"type\":\"string\"}],\"name\":\"newVote\",\"outputs\":[{\"name\":\"voteId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_evmScript\",\"type\":\"bytes\"}],\"name\":\"forward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPetrified\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EX_ID2_PARAM_LOC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voteId\",\"type\":\"uint256\"}],\"name\":\"getCandidateLength\",\"outputs\":[{\"name\":\"totalCandidates\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_voteId\",\"type\":\"uint256\"}],\"name\":\"executeVote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PCT_BASE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isForwarder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"voteId\",\"type\":\"uint256\"}],\"name\":\"StartVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"voteId\",\"type\":\"uint256\"}],\"name\":\"CastVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"candidateKey\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"support\",\"type\":\"uint256\"}],\"name\":\"UpdateCandidateSupport\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"voteId\",\"type\":\"uint256\"}],\"name\":\"ExecuteVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"script\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"ExecutionScript\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"voteId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"funcSig\",\"type\":\"bytes32\"}],\"name\":\"ExternalContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"voteId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"candidate\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"AddCandidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"Metadata\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"currentLocation\",\"type\":\"uint256\"}],\"name\":\"Location\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"Address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"numberOfCandidates\",\"type\":\"uint256\"}],\"name\":\"CandidateQty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"quorum\",\"type\":\"uint256\"}],\"name\":\"UpdateQuorum\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"minSupport\",\"type\":\"uint256\"}],\"name\":\"UpdateMinimumSupport\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"script\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"input\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"ScriptResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoverToVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"actionId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"optionAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"optionQty\",\"type\":\"uint256\"}],\"name\":\"AddOption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"qty\",\"type\":\"uint256\"}],\"name\":\"OptionQty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"script\",\"type\":\"bytes\"}],\"name\":\"OrigScript\",\"type\":\"event\"}]","ContractName":"DotVoting","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://0495c29aff69234f7e390a605fc29e7c2933a127900877f3ed34245c1b609a9d"}]}