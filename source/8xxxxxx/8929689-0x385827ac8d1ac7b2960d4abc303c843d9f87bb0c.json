{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2019-11-13\r\n*/\r\n\r\n// File: contracts/common/Validating.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\ninterface Validating {\r\n  modifier notZero(uint number) { require(number > 0, \"invalid 0 value\"); _; }\r\n  modifier notEmpty(string memory text) { require(bytes(text).length > 0, \"invalid empty string\"); _; }\r\n  modifier validAddress(address value) { require(value != address(0x0), \"invalid address\"); _; }\r\n}\r\n\r\n// File: contracts/gluon/AppGovernance.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\ninterface AppGovernance {\r\n  function approve(uint32 id) external;\r\n  function disapprove(uint32 id) external;\r\n  function activate(uint32 id) external;\r\n}\r\n\r\n// File: contracts/gluon/AppLogic.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\ninterface AppLogic {\r\n  function upgrade() external;\r\n  function credit(address account, address asset, uint quantity) external;\r\n  function debit(address account, bytes calldata parameters) external returns (address asset, uint quantity);\r\n}\r\n\r\n// File: contracts/gluon/AppState.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\ncontract AppState {\r\n\r\n  enum State { OFF, ON, RETIRED }\r\n  State public state = State.ON;\r\n  event Off();\r\n  event Retired();\r\n\r\n  modifier whenOn() { require(state == State.ON, \"must be on\"); _; }\r\n  modifier whenOff() { require(state == State.OFF, \"must be off\"); _; }\r\n  modifier whenRetired() { require(state == State.RETIRED, \"must be retired\"); _; }\r\n\r\n  function retire_() internal whenOn {\r\n    state = State.RETIRED;\r\n    emit Retired();\r\n  }\r\n\r\n  function switchOff_() internal whenOn {\r\n    state = State.OFF;\r\n    emit Off();\r\n  }\r\n\r\n  function isOn() external view returns (bool) { return state == State.ON; }\r\n}\r\n\r\n// File: contracts/gluon/GluonView.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\ninterface GluonView {\r\n  function app(uint32 id) external view returns (address current, address proposal, uint activationBlock);\r\n  function current(uint32 id) external view returns (address);\r\n  function history(uint32 id) external view returns (address[] memory);\r\n  function getBalance(uint32 id, address asset) external view returns (uint);\r\n  function isAnyLogic(uint32 id, address logic) external view returns (bool);\r\n  function isAppOwner(uint32 id, address appOwner) external view returns (bool);\r\n  function proposals(address logic) external view returns (bool);\r\n  function totalAppsCount() external view returns(uint32);\r\n}\r\n\r\n// File: contracts/gluon/GluonCentric.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\ncontract GluonCentric {\r\n  uint32 internal constant REGISTRY_INDEX = 0;\r\n  uint32 internal constant STAKE_INDEX = 1;\r\n\r\n  uint32 public id;\r\n  address public gluon;\r\n\r\n  constructor(uint32 id_, address gluon_) public {\r\n    id = id_;\r\n    gluon = gluon_;\r\n  }\r\n\r\n  modifier onlyCurrentLogic { require(currentLogic() == msg.sender, \"invalid sender; must be current logic contract\"); _; }\r\n  modifier onlyGluon { require(gluon == msg.sender, \"invalid sender; must be gluon contract\"); _; }\r\n  modifier onlyOwner { require(GluonView(gluon).isAppOwner(id, msg.sender), \"invalid sender; must be app owner\"); _; }\r\n\r\n  function currentLogic() public view returns (address) { return GluonView(gluon).current(id); }\r\n}\r\n\r\n// File: contracts/apps/registry/RegistryData.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\ncontract RegistryData is GluonCentric {\r\n\r\n  mapping(address => address) public accounts;\r\n\r\n  constructor(address gluon) GluonCentric(REGISTRY_INDEX, gluon) public { }\r\n\r\n  function addKey(address apiKey, address account) external onlyCurrentLogic {\r\n    accounts[apiKey] = account;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/gluon/Upgrading.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\n\r\ncontract Upgrading {\r\n  address public upgradeOperator;\r\n\r\n  modifier onlyOwner { require(false, \"modifier onlyOwner must be implemented\"); _; }\r\n  modifier onlyUpgradeOperator { require(upgradeOperator == msg.sender, \"invalid sender; must be upgrade operator\"); _; }\r\n  function setUpgradeOperator(address upgradeOperator_) external onlyOwner { upgradeOperator = upgradeOperator_; }\r\n  function upgrade_(AppGovernance appGovernance, uint32 id) internal {\r\n    appGovernance.activate(id);\r\n    delete upgradeOperator;\r\n  }\r\n}\r\n\r\n// File: contracts/apps/registry/RegistryLogic.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract RegistryLogic is Upgrading, Validating, AppLogic, AppState, GluonCentric {\r\n\r\n  RegistryData public data;\r\n  OldRegistry public old;\r\n\r\n  event Registered(address apiKey, address indexed account);\r\n\r\n  constructor(address gluon, address old_, address data_) GluonCentric(REGISTRY_INDEX, gluon) public {\r\n    data = RegistryData(data_);\r\n    old = OldRegistry(old_);\r\n  }\r\n\r\n  modifier isAbsent(address apiKey) { require(translate(apiKey) == address (0x0), \"api key already in use\"); _; }\r\n\r\n  function register(address apiKey) external whenOn validAddress(apiKey) isAbsent(apiKey) {\r\n    data.addKey(apiKey, msg.sender);\r\n    emit Registered(apiKey, msg.sender);\r\n  }\r\n\r\n  function translate(address apiKey) public view returns (address) {\r\n    address account = data.accounts(apiKey);\r\n    if (account == address(0x0)) account = old.translate(apiKey);\r\n    return account;\r\n  }\r\n\r\n  /**************************************************** AppLogic ****************************************************/\r\n\r\n  function upgrade() external onlyUpgradeOperator {\r\n    retire_();\r\n    upgrade_(AppGovernance(gluon), id);\r\n  }\r\n\r\n  function credit(address, address, uint) external { revert(\"not supported\"); }\r\n\r\n  function debit(address, bytes calldata) external returns (address, uint) { revert(\"not supported\"); }\r\n\r\n  function switchOff() external onlyOwner {\r\n    uint32 totalAppsCount = GluonView(gluon).totalAppsCount();\r\n    for (uint32 i = 2; i < totalAppsCount; i++) {\r\n      AppState appState = AppState(GluonView(gluon).current(i));\r\n      require(!appState.isOn(), \"One of the apps is still ON\");\r\n    }\r\n    switchOff_();\r\n  }\r\n}\r\n\r\n\r\ncontract OldRegistry {\r\n  function translate(address) public view returns (address);\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gluon\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"old_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"data_\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Off\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"apiKey\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Retired\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"credit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentLogic\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"data\",\"outputs\":[{\"internalType\":\"contract RegistryData\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"debit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gluon\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"id\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"old\",\"outputs\":[{\"internalType\":\"contract OldRegistry\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"apiKey\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"upgradeOperator_\",\"type\":\"address\"}],\"name\":\"setUpgradeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum AppState.State\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"switchOff\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"apiKey\",\"type\":\"address\"}],\"name\":\"translate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"RegistryLogic","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000075ace7a086ea0fb1a79e43cc6331ad053d8c67cb0000000000000000000000007b70acd346892736f9f6c7f4f196b07400a50da00000000000000000000000000fc25c7931679b838209c484d49df0cb9e633c41","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://b84dc9109f18f6406962b68829ad917b9ccfdbd4d1999ac0d58d3f2f5961ff8c"}]}