{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.3; // optimization disabled, evm version: constantinople\r\n\r\n\r\ninterface DharmaSmartWalletImplementationV0Interface {\r\n  // Fires when a new user signing key is set on the smart wallet.\r\n  event NewUserSigningKey(address userSigningKey);\r\n\r\n  // Fires when an error occurs as part of an attempted action.\r\n  event ExternalError(address indexed source, string revertReason);\r\n\r\n  // DAI + USDC are the only assets initially supported (include ETH for later).\r\n  enum AssetType {\r\n    DAI,\r\n    USDC,\r\n    ETH\r\n  }\r\n\r\n  // Actions, or protected methods (i.e. not deposits) each have an action type.\r\n  enum ActionType {\r\n    Cancel,\r\n    SetUserSigningKey,\r\n    Generic,\r\n    GenericAtomicBatch,\r\n    DAIWithdrawal,\r\n    USDCWithdrawal,\r\n    ETHWithdrawal,\r\n    SetEscapeHatch,\r\n    RemoveEscapeHatch,\r\n    DisableEscapeHatch,\r\n    DAIBorrow,\r\n    USDCBorrow\r\n  }\r\n\r\n  function initialize(address userSigningKey) external;\r\n\r\n  function repayAndDeposit() external;\r\n\r\n  function withdrawDai(\r\n    uint256 amount,\r\n    address recipient,\r\n    uint256 minimumActionGas,\r\n    bytes calldata userSignature,\r\n    bytes calldata dharmaSignature\r\n  ) external returns (bool ok);\r\n\r\n  function withdrawUSDC(\r\n    uint256 amount,\r\n    address recipient,\r\n    uint256 minimumActionGas,\r\n    bytes calldata userSignature,\r\n    bytes calldata dharmaSignature\r\n  ) external returns (bool ok);\r\n\r\n  function cancel(\r\n    uint256 minimumActionGas,\r\n    bytes calldata signature\r\n  ) external;\r\n\r\n  function setUserSigningKey(\r\n    address userSigningKey,\r\n    uint256 minimumActionGas,\r\n    bytes calldata userSignature,\r\n    bytes calldata dharmaSignature\r\n  ) external;\r\n\r\n  // Note: function selector same as V0/V1 but returns two additional arguments.\r\n  function getBalances() external returns (\r\n    uint256 daiBalance,\r\n    uint256 usdcBalance,\r\n    uint256 etherBalance,\r\n    uint256 cDaiUnderlyingDaiBalance,\r\n    uint256 cUsdcUnderlyingUsdcBalance,\r\n    uint256 cEtherUnderlyingEtherBalance\r\n  );\r\n\r\n  function getUserSigningKey() external view returns (address userSigningKey);\r\n\r\n  function getNonce() external view returns (uint256 nonce);\r\n\r\n  function getNextCustomActionID(\r\n    ActionType action,\r\n    uint256 amount,\r\n    address recipient,\r\n    uint256 minimumActionGas\r\n  ) external view returns (bytes32 actionID);\r\n\r\n  function getCustomActionID(\r\n    ActionType action,\r\n    uint256 amount,\r\n    address recipient,\r\n    uint256 nonce,\r\n    uint256 minimumActionGas\r\n  ) external view returns (bytes32 actionID);\r\n\r\n  function getVersion() external pure returns (uint256 version);\r\n}\r\n\r\n\r\ninterface DharmaSmartWalletImplementationV1Interface {\r\n  event CallSuccess(\r\n    bytes32 actionID,\r\n    bool rolledBack,\r\n    uint256 nonce,\r\n    address to,\r\n    bytes data,\r\n    bytes returnData\r\n  );\r\n  \r\n  event CallFailure(\r\n    bytes32 actionID,\r\n    uint256 nonce,\r\n    address to,\r\n    bytes data,\r\n    string revertReason\r\n  );\r\n\r\n  function withdrawEther(\r\n    uint256 amount,\r\n    address payable recipient,\r\n    uint256 minimumActionGas,\r\n    bytes calldata userSignature,\r\n    bytes calldata dharmaSignature\r\n  ) external returns (bool ok);\r\n\r\n  function executeAction(\r\n    address to,\r\n    bytes calldata data,\r\n    uint256 minimumActionGas,\r\n    bytes calldata userSignature,\r\n    bytes calldata dharmaSignature\r\n  ) external returns (bool ok, bytes memory returnData);\r\n\r\n  function recover(address newUserSigningKey) external;\r\n\r\n  function getNextGenericActionID(\r\n    address to,\r\n    bytes calldata data,\r\n    uint256 minimumActionGas\r\n  ) external view returns (bytes32 actionID);\r\n\r\n  function getGenericActionID(\r\n    address to,\r\n    bytes calldata data,\r\n    uint256 nonce,\r\n    uint256 minimumActionGas\r\n  ) external view returns (bytes32 actionID);\r\n}\r\n\r\n\r\ninterface DharmaSmartWalletImplementationV3Interface {\r\n  event Cancel(uint256 cancelledNonce);\r\n  event EthWithdrawal(uint256 amount, address recipient);\r\n}\r\n\r\n\r\ninterface CTokenInterface {\r\n  function mint(uint256 mintAmount) external returns (uint256 err);\r\n\r\n  function redeem(uint256 redeemAmount) external returns (uint256 err);\r\n  \r\n  function redeemUnderlying(uint256 redeemAmount) external returns (uint256 err);\r\n\r\n  function balanceOfUnderlying(address account) external returns (uint256 balance);\r\n}\r\n\r\n\r\ninterface USDCV1Interface {\r\n  function isBlacklisted(address _account) external view returns (bool);\r\n  \r\n  function paused() external view returns (bool);\r\n}\r\n\r\n\r\ninterface ComptrollerInterface {}\r\n\r\n\r\ninterface DharmaKeyRegistryInterface {\r\n  function getKey() external view returns (address key);\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n}\r\n\r\n\r\ninterface ERC1271 {\r\n  function isValidSignature(\r\n    bytes calldata data, bytes calldata signature\r\n  ) external view returns (bytes4 magicValue);\r\n}\r\n\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n\r\nlibrary ECDSA {\r\n  function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n    if (signature.length != 65) {\r\n      return (address(0));\r\n    }\r\n\r\n    bytes32 r;\r\n    bytes32 s;\r\n    uint8 v;\r\n\r\n    assembly {\r\n      r := mload(add(signature, 0x20))\r\n      s := mload(add(signature, 0x40))\r\n      v := byte(0, mload(add(signature, 0x60)))\r\n    }\r\n\r\n    if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n      return address(0);\r\n    }\r\n\r\n    if (v != 27 && v != 28) {\r\n      return address(0);\r\n    }\r\n\r\n    return ecrecover(hash, v, r, s);\r\n  }\r\n\r\n  function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n    return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title DharmaSmartWalletImplementationV3 (inefficient version)\r\n * @author 0age\r\n * @notice The V3 implementation for the Dharma smart wallet is a non-custodial,\r\n * meta-transaction-enabled wallet with helper functions to facilitate lending\r\n * funds using CompoundV2, and with a security backstop provided by Dharma Labs\r\n * prior to making withdrawals. It makes a few minor fixes and changes to the V2\r\n * implementation to improve efficiency and reliability for an initial save-only\r\n * Dharma Smart Wallet. It also contains methods to support account recovery and\r\n * generic actions, (this version has no atomic batch). The smart wallets\r\n * utilizing this implementation are deployed through the Dharma Smart Wallet\r\n * Factory via `CREATE2`, which allows for their address to be known ahead of\r\n * time, and any Dai or USDC that has already been sent into that address will\r\n * automatically be deposited into Compound upon deployment of the new smart\r\n * wallet instance.\r\n */\r\ncontract DharmaSmartWalletImplementationV3 is\r\n  DharmaSmartWalletImplementationV0Interface,\r\n  DharmaSmartWalletImplementationV1Interface,\r\n  DharmaSmartWalletImplementationV3Interface {\r\n  using Address for address;\r\n  using ECDSA for bytes32;\r\n  // WARNING: DO NOT REMOVE OR REORDER STORAGE WHEN WRITING NEW IMPLEMENTATIONS!\r\n\r\n  // The user signing key associated with this account is in storage slot 0.\r\n  // It is the core differentiator when it comes to the account in question.\r\n  address private _userSigningKey;\r\n\r\n  // The nonce associated with this account is in storage slot 1. Every time a\r\n  // signature is submitted, it must have the appropriate nonce, and once it has\r\n  // been accepted the nonce will be incremented.\r\n  uint256 private _nonce;\r\n\r\n  // The self-call context flag is in storage slot 2. Some protected functions\r\n  // may only be called externally from calls originating from other methods on\r\n  // this contract, which enables appropriate exception handling on reverts.\r\n  // Any storage should only be set immediately preceding a self-call and should\r\n  // be cleared upon entering the protected function being called.\r\n  bytes4 internal _selfCallContext;\r\n\r\n  // END STORAGE DECLARATIONS - DO NOT REMOVE OR REORDER STORAGE ABOVE HERE!\r\n\r\n  // The smart wallet version will be used when constructing valid signatures.\r\n  uint256 internal constant _DHARMA_SMART_WALLET_VERSION = 1003;\r\n\r\n  // DharmaKeyRegistryV2 holds a public key for verifying meta-transactions.\r\n  DharmaKeyRegistryInterface internal constant _DHARMA_KEY_REGISTRY = (\r\n    DharmaKeyRegistryInterface(0x000000000D38df53b45C5733c7b34000dE0BDF52)\r\n  );\r\n\r\n  // Account recovery is facilitated using a hard-coded recovery manager,\r\n  // controlled by Dharma and implementing appropriate timelocks.\r\n  address internal constant _ACCOUNT_RECOVERY_MANAGER = address(\r\n    0x00000000004cDa75701EeA02D1F2F9BDcE54C10D\r\n  );\r\n\r\n  // This contract interfaces with Dai, USDC, and related CompoundV2 contracts.\r\n  CTokenInterface internal constant _CDAI = CTokenInterface(\r\n    0xF5DCe57282A584D2746FaF1593d3121Fcac444dC // mainnet\r\n  );\r\n\r\n  CTokenInterface internal constant _CUSDC = CTokenInterface(\r\n    0x39AA39c021dfbaE8faC545936693aC917d5E7563 // mainnet\r\n  );\r\n\r\n  IERC20 internal constant _DAI = IERC20(\r\n    0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359 // mainnet\r\n  );\r\n\r\n  IERC20 internal constant _USDC = IERC20(\r\n    0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48 // mainnet\r\n  );\r\n\r\n  USDCV1Interface internal constant _USDC_NAUGHTY = USDCV1Interface(\r\n    0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48 // mainnet\r\n  );\r\n\r\n  ComptrollerInterface internal constant _COMPTROLLER = ComptrollerInterface(\r\n    0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B // mainnet\r\n  );\r\n\r\n  // Compound returns a value of 0 to indicate success, or lack of an error.\r\n  uint256 internal constant _COMPOUND_SUCCESS = 0;\r\n\r\n  // ERC-1271 must return this magic value when `isValidSignature` is called.\r\n  bytes4 internal constant _ERC_1271_MAGIC_VALUE = bytes4(0x20c13b0b);\r\n\r\n  // Minimum supported deposit & non-maximum withdrawal size is .001 underlying.\r\n  uint256 private constant _JUST_UNDER_ONE_1000th_DAI = 999999999999999;\r\n  uint256 private constant _JUST_UNDER_ONE_1000th_USDC = 999;\r\n\r\n  /**\r\n   * @notice In initializer, set up user signing key, set approval on the cDAI\r\n   * and cUSDC contracts, and deposit any Dai or USDC already at the address to\r\n   * Compound. Note that this initializer is only callable while the smart\r\n   * wallet instance is still in the contract creation phase.\r\n   * @param userSigningKey address The initial user signing key for the smart\r\n   * wallet.\r\n   */\r\n  function initialize(address userSigningKey) external {\r\n    // Ensure that this function is only callable during contract construction.\r\n    assembly { if extcodesize(address) { revert(0, 0) } }\r\n\r\n    // Set up the user's signing key and emit a corresponding event.\r\n    _setUserSigningKey(userSigningKey);\r\n\r\n    // Approve the cDAI contract to transfer Dai on behalf of this contract.\r\n    if (_setFullApproval(AssetType.DAI)) {\r\n      // Get the current Dai balance on this contract.\r\n      uint256 daiBalance = _DAI.balanceOf(address(this));\r\n\r\n      // Try to deposit any dai balance on Compound.\r\n      _depositOnCompound(AssetType.DAI, daiBalance);\r\n    }\r\n\r\n    // Approve the cUSDC contract to transfer USDC on behalf of this contract.\r\n    if (_setFullApproval(AssetType.USDC)) {\r\n      // Get the current USDC balance on this contract.\r\n      uint256 usdcBalance = _USDC.balanceOf(address(this));\r\n\r\n      // Try to deposit any USDC balance on Compound.\r\n      _depositOnCompound(AssetType.USDC, usdcBalance);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Deposit all Dai and USDC currently residing at this address to\r\n   * Compound. Note that \"repay\" is not currently implemented, but the function\r\n   * is still named \"repayAndDeposit\" so that infrastructure around calling this\r\n   * function will not need to be altered for a future smart wallet version. If\r\n   * some step of this function fails, the function itself will still succeed,\r\n   * but an ExternalError with information on what went wrong will be emitted.\r\n   */\r\n  function repayAndDeposit() external {\r\n    // Get the current Dai balance on this contract.\r\n    uint256 daiBalance = _DAI.balanceOf(address(this));\r\n\r\n    // Deposit any available Dai.\r\n    _depositOnCompound(AssetType.DAI, daiBalance);\r\n\r\n    // Get the current USDC balance on this contract.\r\n    uint256 usdcBalance = _USDC.balanceOf(address(this));\r\n\r\n    // If there is any USDC balance, check for adequate approval for cUSDC.\r\n    if (usdcBalance > 0) {\r\n      uint256 usdcAllowance = _USDC.allowance(address(this), address(_CUSDC));\r\n      // If allowance is insufficient, try to set it before depositing.\r\n      if (usdcAllowance < usdcBalance) {\r\n        if (_setFullApproval(AssetType.USDC)) {\r\n          // Deposit any available USDC.\r\n          _depositOnCompound(AssetType.USDC, usdcBalance);\r\n        }\r\n      // Otherwise, go ahead and try the deposit.\r\n      } else {\r\n        // Deposit any available USDC.\r\n        _depositOnCompound(AssetType.USDC, usdcBalance);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Withdraw Dai to a provided recipient address by redeeming the\r\n   * underlying Dai from the cDAI contract and transferring it to the recipient.\r\n   * All Dai in Compound and in the smart wallet itself can be withdrawn by\r\n   * providing an amount of uint256(-1) or 0xfff...fff. This function can be\r\n   * called directly by the account set as the global key on the Dharma Key\r\n   * Registry, or by any relayer that provides a signed message from the same\r\n   * keyholder. The nonce used for the signature must match the current nonce on\r\n   * the smart wallet, and gas supplied to the call must exceed the specified\r\n   * minimum action gas, plus the gas that will be spent before the gas check is\r\n   * reached - usually somewhere around 25,000 gas. If the withdrawal fails, an\r\n   * ExternalError with additional details on what went wrong will be emitted.\r\n   * Note that some dust may still be left over, even in the event of a max\r\n   * withdrawal, due to the fact that Dai has a higher precision than cDAI. Also\r\n   * note that the withdrawal will fail in the event that Compound does not have\r\n   * sufficient Dai available to withdraw.\r\n   * @param amount uint256 The amount of Dai to withdraw.\r\n   * @param recipient address The account to transfer the withdrawn Dai to.\r\n   * @param minimumActionGas uint256 The minimum amount of gas that must be\r\n   * provided to this call - be aware that additional gas must still be included\r\n   * to account for the cost of overhead incurred up until the start of this\r\n   * function call.\r\n   * @param userSignature bytes A signature that resolves to the public key\r\n   * set for this account in storage slot zero, `_userSigningKey`. If the user\r\n   * signing key is not a contract, ecrecover will be used; otherwise, ERC1271\r\n   * will be used. A unique hash returned from `getCustomActionID` is prefixed\r\n   * and hashed to create the message hash for the signature.\r\n   * @param dharmaSignature bytes A signature that resolves to the public key\r\n   * returned for this account from the Dharma Key Registry. A unique hash\r\n   * returned from `getCustomActionID` is prefixed and hashed to create the\r\n   * signed message.\r\n   * @return True if the withdrawal succeeded, otherwise false.\r\n   */\r\n  function withdrawDai(\r\n    uint256 amount,\r\n    address recipient,\r\n    uint256 minimumActionGas,\r\n    bytes calldata userSignature,\r\n    bytes calldata dharmaSignature\r\n  ) external returns (bool ok) {\r\n    // Ensure caller and/or supplied signatures are valid and increment nonce.\r\n    _validateActionAndIncrementNonce(\r\n      ActionType.DAIWithdrawal,\r\n      abi.encode(amount, recipient),\r\n      minimumActionGas,\r\n      userSignature,\r\n      dharmaSignature\r\n    );\r\n\r\n    // Ensure that an amount of at least 0.001 Dai has been supplied.\r\n    require(amount > _JUST_UNDER_ONE_1000th_DAI, \"Insufficient Dai supplied.\");\r\n\r\n    // Ensure that a non-zero recipient has been supplied.\r\n    require(recipient != address(0), \"No recipient supplied.\");\r\n\r\n    // Set the self-call context in order to call _withdrawDaiAtomic.\r\n    _selfCallContext = this.withdrawDai.selector;\r\n\r\n    // Make the atomic self-call - if redeemUnderlying fails on cDAI, it will\r\n    // succeed but nothing will happen except firing an ExternalError event. If\r\n    // the second part of the self-call (the Dai transfer) fails, it will revert\r\n    // and roll back the first part of the call as well as fire an ExternalError\r\n    // event after returning from the failed call.\r\n    bytes memory returnData;\r\n    (ok, returnData) = address(this).call(abi.encodeWithSelector(\r\n      this._withdrawDaiAtomic.selector, amount, recipient\r\n    ));\r\n\r\n    // If the atomic call failed, emit an event signifying a transfer failure.\r\n    if (!ok) {\r\n      emit ExternalError(address(_DAI), \"DAI contract reverted on transfer.\");\r\n    } else {\r\n      // Set ok to false if the call succeeded but the withdrawal failed.\r\n      ok = abi.decode(returnData, (bool));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Protected function that can only be called from `withdrawDai` on\r\n   * this contract. It will attempt to withdraw the supplied amount of Dai, or\r\n   * the maximum amount if specified using `uint256(-1)`, to the supplied\r\n   * recipient address by redeeming the underlying Dai from the cDAI contract\r\n   * and transferring it to the recipient. An ExternalError will be emitted and\r\n   * the transfer will be skipped if the call to `redeem` or `redeemUnderlying`\r\n   * fails, and any revert will be caught by `withdrawDai` and diagnosed in\r\n   * order to emit an appropriate ExternalError as well.\r\n   * @param amount uint256 The amount of Dai to withdraw.\r\n   * @param recipient address The account to transfer the withdrawn Dai to.\r\n   * @return True if the withdrawal succeeded, otherwise false.\r\n   */\r\n  function _withdrawDaiAtomic(\r\n    uint256 amount,\r\n    address recipient\r\n  ) external returns (bool success) {\r\n    // Ensure caller is this contract and self-call context is correctly set.\r\n    _enforceSelfCallFrom(this.withdrawDai.selector);\r\n\r\n    // If amount = 0xfff...fff, withdraw the maximum amount possible.\r\n    bool maxWithdraw = (amount == uint256(-1));\r\n    if (maxWithdraw) {\r\n      // Attempt to withdraw all Dai from Compound before proceeding.\r\n      if (_withdrawMaxFromCompound(AssetType.DAI)) {\r\n        // At this point dai transfer should never fail - wrap it just in case.\r\n        require(_DAI.transfer(recipient, _DAI.balanceOf(address(this))));\r\n        success = true;\r\n      }\r\n    } else {\r\n      // Attempt to withdraw specified Dai from Compound before proceeding.\r\n      if (_withdrawFromCompound(AssetType.DAI, amount)) {\r\n        // At this point dai transfer should never fail - wrap it just in case.\r\n        require(_DAI.transfer(recipient, amount));\r\n        success = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Withdraw USDC to a provided recipient address by redeeming the\r\n   * underlying USDC from the cUSDC contract and transferring it to recipient.\r\n   * All USDC in Compound and in the smart wallet itself can be withdrawn by\r\n   * providing an amount of uint256(-1) or 0xfff...fff. This function can be\r\n   * called directly by the account set as the global key on the Dharma Key\r\n   * Registry, or by any relayer that provides a signed message from the same\r\n   * keyholder. The nonce used for the signature must match the current nonce on\r\n   * the smart wallet, and gas supplied to the call must exceed the specified\r\n   * minimum action gas, plus the gas that will be spent before the gas check is\r\n   * reached - usually somewhere around 25,000 gas. If the withdrawal fails, an\r\n   * ExternalError with additional details on what went wrong will be emitted.\r\n   * Note that the USDC contract can be paused and also allows for blacklisting\r\n   * accounts - either of these possibilities may cause a withdrawal to fail. In\r\n   * addition, Compound may not have sufficient USDC available at the time to\r\n   * withdraw.\r\n   * @param amount uint256 The amount of USDC to withdraw.\r\n   * @param recipient address The account to transfer the withdrawn USDC to.\r\n   * @param minimumActionGas uint256 The minimum amount of gas that must be\r\n   * provided to this call - be aware that additional gas must still be included\r\n   * to account for the cost of overhead incurred up until the start of this\r\n   * function call.\r\n   * @param userSignature bytes A signature that resolves to the public key\r\n   * set for this account in storage slot zero, `_userSigningKey`. If the user\r\n   * signing key is not a contract, ecrecover will be used; otherwise, ERC1271\r\n   * will be used. A unique hash returned from `getCustomActionID` is prefixed\r\n   * and hashed to create the message hash for the signature.\r\n   * @param dharmaSignature bytes A signature that resolves to the public key\r\n   * returned for this account from the Dharma Key Registry. A unique hash\r\n   * returned from `getCustomActionID` is prefixed and hashed to create the\r\n   * signed message.\r\n   * @return True if the withdrawal succeeded, otherwise false.\r\n   */\r\n  function withdrawUSDC(\r\n    uint256 amount,\r\n    address recipient,\r\n    uint256 minimumActionGas,\r\n    bytes calldata userSignature,\r\n    bytes calldata dharmaSignature\r\n  ) external returns (bool ok) {\r\n    // Ensure caller and/or supplied signatures are valid and increment nonce.\r\n    _validateActionAndIncrementNonce(\r\n      ActionType.USDCWithdrawal,\r\n      abi.encode(amount, recipient),\r\n      minimumActionGas,\r\n      userSignature,\r\n      dharmaSignature\r\n    );\r\n\r\n    // Ensure that an amount of at least 0.001 USDC has been supplied.\r\n    require(amount > _JUST_UNDER_ONE_1000th_USDC, \"Insufficient USDC supplied.\");\r\n\r\n    // Ensure that a non-zero recipient has been supplied.\r\n    require(recipient != address(0), \"No recipient supplied.\");\r\n\r\n    // Set the self-call context in order to call _withdrawUSDCAtomic.\r\n    _selfCallContext = this.withdrawUSDC.selector;\r\n\r\n    // Make the atomic self-call - if redeemUnderlying fails on cUSDC, it will\r\n    // succeed but nothing will happen except firing an ExternalError event. If\r\n    // the second part of the self-call (USDC transfer) fails, it will revert\r\n    // and roll back the first part of the call as well as fire an ExternalError\r\n    // event after returning from the failed call.\r\n    bytes memory returnData;\r\n    (ok, returnData) = address(this).call(abi.encodeWithSelector(\r\n      this._withdrawUSDCAtomic.selector, amount, recipient\r\n    ));\r\n    if (!ok) {\r\n      // Find out why USDC transfer reverted (doesn't give revert reasons).\r\n      _diagnoseAndEmitUSDCSpecificError(_USDC.transfer.selector);\r\n    } else {\r\n      // Set ok to false if the call succeeded but the withdrawal failed.\r\n      ok = abi.decode(returnData, (bool));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Protected function that can only be called from `withdrawUSDC` on\r\n   * this contract. It will attempt to withdraw the supplied amount of USDC, or\r\n   * the maximum amount if specified using `uint256(-1)`, to the supplied\r\n   * recipient address by redeeming the underlying USDC from the cUSDC contract\r\n   * and transferring it to the recipient. An ExternalError will be emitted and\r\n   * the transfer will be skipped if the call to `redeemUnderlying` fails, and\r\n   * any revert will be caught by `withdrawUSDC` and diagnosed in order to emit\r\n   * an appropriate ExternalError as well.\r\n   * @param amount uint256 The amount of USDC to withdraw.\r\n   * @param recipient address The account to transfer the withdrawn USDC to.\r\n   * @return True if the withdrawal succeeded, otherwise false.\r\n   */\r\n  function _withdrawUSDCAtomic(\r\n    uint256 amount,\r\n    address recipient\r\n  ) external returns (bool success) {\r\n    // Ensure caller is this contract and self-call context is correctly set.\r\n    _enforceSelfCallFrom(this.withdrawUSDC.selector);\r\n\r\n    // If amount = 0xfff...fff, withdraw the maximum amount possible.\r\n    bool maxWithdraw = (amount == uint256(-1));\r\n    if (maxWithdraw) {\r\n      // Attempt to withdraw all USDC from Compound before proceeding.\r\n      if (_withdrawMaxFromCompound(AssetType.USDC)) {\r\n        // Ensure that the USDC transfer does not fail.\r\n        require(_USDC.transfer(recipient, _USDC.balanceOf(address(this))));\r\n        success = true;\r\n      }\r\n    } else {\r\n      // Attempt to withdraw specified USDC from Compound before proceeding.\r\n      if (_withdrawFromCompound(AssetType.USDC, amount)) {\r\n        // Ensure that the USDC transfer does not fail.\r\n        require(_USDC.transfer(recipient, amount));\r\n        success = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Withdraw Ether to a provided recipient address by transferring it\r\n   * to a recipient. This is only intended to be utilized on V3 as a mechanism\r\n   * for recovering Ether from this contract.\r\n   * @param amount uint256 The amount of Ether to withdraw.\r\n   * @param recipient address The account to transfer the Ether to.\r\n   * @param minimumActionGas uint256 The minimum amount of gas that must be\r\n   * provided to this call - be aware that additional gas must still be included\r\n   * to account for the cost of overhead incurred up until the start of this\r\n   * function call.\r\n   * @param userSignature bytes A signature that resolves to the public key\r\n   * set for this account in storage slot zero, `_userSigningKey`. If the user\r\n   * signing key is not a contract, ecrecover will be used; otherwise, ERC1271\r\n   * will be used. A unique hash returned from `getCustomActionID` is prefixed\r\n   * and hashed to create the message hash for the signature.\r\n   * @param dharmaSignature bytes A signature that resolves to the public key\r\n   * returned for this account from the Dharma Key Registry. A unique hash\r\n   * returned from `getCustomActionID` is prefixed and hashed to create the\r\n   * signed message.\r\n   * @return True if the transfer succeeded, otherwise false.\r\n   */\r\n  function withdrawEther(\r\n    uint256 amount,\r\n    address payable recipient,\r\n    uint256 minimumActionGas,\r\n    bytes calldata userSignature,\r\n    bytes calldata dharmaSignature\r\n  ) external returns (bool ok) {\r\n    // Ensure caller and/or supplied signatures are valid and increment nonce.\r\n    _validateActionAndIncrementNonce(\r\n      ActionType.ETHWithdrawal,\r\n      abi.encode(amount, recipient),\r\n      minimumActionGas,\r\n      userSignature,\r\n      dharmaSignature\r\n    );\r\n\r\n    // Attempt to perform the transfer and emit an event if it fails.\r\n    (ok, ) = recipient.call.gas(2300).value(amount)(\"\");\r\n    if (!ok) {\r\n      emit ExternalError(recipient, \"Recipient rejected ether transfer.\");\r\n    } else {\r\n      emit EthWithdrawal(amount, recipient);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Allow a signatory to increment the nonce at any point. The current\r\n   * nonce needs to be provided as an argument to the a signature so as not to\r\n   * enable griefing attacks. All arguments can be omitted if called directly.\r\n   * No value is returned from this function - it will either succeed or revert.\r\n   * @param minimumActionGas uint256 The minimum amount of gas that must be\r\n   * provided to this call - be aware that additional gas must still be included\r\n   * to account for the cost of overhead incurred up until the start of this\r\n   * function call.\r\n   * @param signature bytes A signature that resolves to either the public key\r\n   * set for this account in storage slot zero, `_userSigningKey`, or the public\r\n   * key returned for this account from the Dharma Key Registry. A unique hash\r\n   * returned from `getCustomActionID` is prefixed and hashed to create the\r\n   * signed message.\r\n   */  \r\n  function cancel(\r\n    uint256 minimumActionGas,\r\n    bytes calldata signature\r\n  ) external {\r\n    // Get the current nonce.\r\n    uint256 nonceToCancel = _nonce;\r\n\r\n    // Ensure the caller or the supplied signature is valid and increment nonce.\r\n    _validateActionAndIncrementNonce(\r\n      ActionType.Cancel,\r\n      abi.encode(),\r\n      minimumActionGas,\r\n      signature,\r\n      signature\r\n    );\r\n\r\n    // Emit an event to validate that the nonce is no longer valid.\r\n    emit Cancel(nonceToCancel);\r\n  }\r\n\r\n  /**\r\n   * @notice Perform a generic call to another contract. Note that accounts with\r\n   * no code may not be specified, nor may the smart wallet itself. In order to\r\n   * increment the nonce and invalidate the signature, a call to this function\r\n   * with a valid target, signatutes, and gas will always succeed. To determine\r\n   * whether the call made as part of the action was successful or not, either\r\n   * the return values or the `CallSuccess` or `CallFailure` event can be used.\r\n   * @param to address The contract to call.\r\n   * @param data bytes The calldata to provide when making the call.\r\n   * @param minimumActionGas uint256 The minimum amount of gas that must be\r\n   * provided to this call - be aware that additional gas must still be included\r\n   * to account for the cost of overhead incurred up until the start of this\r\n   * function call.\r\n   * @param userSignature bytes A signature that resolves to the public key\r\n   * set for this account in storage slot zero, `_userSigningKey`. If the user\r\n   * signing key is not a contract, ecrecover will be used; otherwise, ERC1271\r\n   * will be used. A unique hash returned from `getCustomActionID` is prefixed\r\n   * and hashed to create the message hash for the signature.\r\n   * @param dharmaSignature bytes A signature that resolves to the public key\r\n   * returned for this account from the Dharma Key Registry. A unique hash\r\n   * returned from `getCustomActionID` is prefixed and hashed to create the\r\n   * signed message.\r\n   * @return A boolean signifying the status of the call, as well as any data\r\n   * returned from the call.\r\n   */\r\n  function executeAction(\r\n    address to,\r\n    bytes calldata data,\r\n    uint256 minimumActionGas,\r\n    bytes calldata userSignature,\r\n    bytes calldata dharmaSignature\r\n  ) external returns (bool ok, bytes memory returnData) {\r\n    // Ensure that the `to` address is a contract and is not this contract.\r\n    _ensureValidGenericCallTarget(to);\r\n\r\n    // Ensure caller and/or supplied signatures are valid and increment nonce.\r\n    (bytes32 actionID, uint256 nonce) = _validateActionAndIncrementNonce(\r\n      ActionType.Generic,\r\n      abi.encode(to, data),\r\n      minimumActionGas,\r\n      userSignature,\r\n      dharmaSignature\r\n    );\r\n\r\n    // Note: from this point on, there are no reverts (apart from out-of-gas or\r\n    // call-depth-exceeded) originating from this action. However, the call\r\n    // itself may revert, in which case the function will return `false`, along\r\n    // with the revert reason encoded as bytes, and fire an CallFailure event.\r\n\r\n    // Perform the action via low-level call and set return values using result.\r\n    (ok, returnData) = to.call(data);\r\n\r\n    // Emit a CallSuccess or CallFailure event based on the outcome of the call.\r\n    if (ok) {\r\n      // Note: while the call succeeded, the action may still have \"failed\"\r\n      // (for example, successful calls to Compound can still return an error).\r\n      emit CallSuccess(actionID, false, nonce, to, data, returnData);\r\n    } else {\r\n      // Note: while the call failed, the nonce will still be incremented, which\r\n      // will invalidate all supplied signatures.\r\n      emit CallFailure(actionID, nonce, to, data, string(returnData));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Allow signatory to set a new user signing key. The current nonce\r\n   * needs to be provided as an argument to the a signature so as not to enable\r\n   * griefing attacks. No value is returned from this function - it will either\r\n   * succeed or revert.\r\n   * @param userSigningKey address The new user signing key to set on this smart\r\n   * wallet.\r\n   * @param minimumActionGas uint256 The minimum amount of gas that must be\r\n   * provided to this call - be aware that additional gas must still be included\r\n   * to account for the cost of overhead incurred up until the start of this\r\n   * function call.\r\n   * @param userSignature bytes A signature that resolves to the public key\r\n   * set for this account in storage slot zero, `_userSigningKey`. If the user\r\n   * signing key is not a contract, ecrecover will be used; otherwise, ERC1271\r\n   * will be used. A unique hash returned from `getCustomActionID` is prefixed\r\n   * and hashed to create the message hash for the signature.\r\n   * @param dharmaSignature bytes A signature that resolves to the public key\r\n   * returned for this account from the Dharma Key Registry. A unique hash\r\n   * returned from `getCustomActionID` is prefixed and hashed to create the\r\n   * signed message.\r\n   */\r\n  function setUserSigningKey(\r\n    address userSigningKey,\r\n    uint256 minimumActionGas,\r\n    bytes calldata userSignature,\r\n    bytes calldata dharmaSignature\r\n  ) external {\r\n    // Ensure caller and/or supplied signatures are valid and increment nonce.\r\n    _validateActionAndIncrementNonce(\r\n      ActionType.SetUserSigningKey,\r\n      abi.encode(userSigningKey),\r\n      minimumActionGas,\r\n      userSignature,\r\n      dharmaSignature\r\n    );\r\n\r\n    // Set new user signing key on smart wallet and emit a corresponding event.\r\n    _setUserSigningKey(userSigningKey);\r\n  }\r\n\r\n  // Allow the account recovery manager to change the user signing key.\r\n  function recover(address newUserSigningKey) external {\r\n    require(\r\n      msg.sender == _ACCOUNT_RECOVERY_MANAGER,\r\n      \"Only the account recovery manager may call this function.\"\r\n    );\r\n\r\n    // Increment nonce to prevent signature reuse should original key be reset.\r\n    _nonce++;\r\n\r\n    // Set up the user's new dharma key and emit a corresponding event.\r\n    _setUserSigningKey(newUserSigningKey);\r\n  }\r\n\r\n  /**\r\n   * @notice Retrieve the Dai and USDC balances held by the smart wallet, both\r\n   * directly and held in Compound. This is not a view function since Compound\r\n   * will calculate accrued interest as part of the underlying balance checks,\r\n   * but can still be called from an off-chain source as though it were a view\r\n   * function.\r\n   * @return The Dai balance, the USDC balance, the underlying Dai balance of\r\n   * the cDAI balance, and the underlying USDC balance of the cUSDC balance.\r\n   */\r\n  function getBalances() external returns (\r\n    uint256 daiBalance,\r\n    uint256 usdcBalance,\r\n    uint256 etherBalance, // always returns 0\r\n    uint256 cDaiUnderlyingDaiBalance,\r\n    uint256 cUsdcUnderlyingUsdcBalance,\r\n    uint256 cEtherUnderlyingEtherBalance // always returns 0\r\n  ) {\r\n    daiBalance = _DAI.balanceOf(address(this));\r\n    usdcBalance = _USDC.balanceOf(address(this));\r\n    cDaiUnderlyingDaiBalance = _CDAI.balanceOfUnderlying(address(this));\r\n    cUsdcUnderlyingUsdcBalance = _CUSDC.balanceOfUnderlying(address(this));\r\n  }\r\n\r\n  /**\r\n   * @notice View function for getting the current user signing key for the\r\n   * smart wallet.\r\n   * @return The current user signing key.\r\n   */\r\n  function getUserSigningKey() external view returns (address userSigningKey) {\r\n    userSigningKey = _userSigningKey;\r\n  }\r\n\r\n  /**\r\n   * @notice View function for getting the current nonce of the smart wallet.\r\n   * This nonce is incremented whenever an action is taken that requires a\r\n   * signature and/or a specific caller.\r\n   * @return The current nonce.\r\n   */\r\n  function getNonce() external view returns (uint256 nonce) {\r\n    nonce = _nonce;\r\n  }\r\n\r\n  /**\r\n   * @notice View function that, given an action type and arguments, will return\r\n   * the action ID or message hash that will need to be prefixed (according to\r\n   * EIP-191 0x45), hashed, and signed by the key designated by the Dharma Key\r\n   * Registry in order to construct a valid signature for the corresponding\r\n   * action. The current nonce will be used, which means that it will only be\r\n   * valid for the next action taken.\r\n   * @param action uint8 The type of action, designated by it's index. Valid\r\n   * custom actions in V3 include Cancel (0), SetUserSigningKey (1),\r\n   * DAIWithdrawal (4), USDCWithdrawal (5), and ETHWithdrawal (6).\r\n   * @param amount uint256 The amount to withdraw for Withdrawal actions. This\r\n   * value is ignored for Cancel and SetUserSigningKey action types.\r\n   * @param recipient address The account to transfer withdrawn funds to or the\r\n   * new user signing key. This value is ignored for Cancel action types.\r\n   * @param minimumActionGas uint256 The minimum amount of gas that must be\r\n   * provided to this call - be aware that additional gas must still be included\r\n   * to account for the cost of overhead incurred up until the start of this\r\n   * function call.\r\n   * @return The action ID, which will need to be prefixed, hashed and signed in\r\n   * order to construct a valid signature.\r\n   */\r\n  function getNextCustomActionID(\r\n    ActionType action,\r\n    uint256 amount,\r\n    address recipient,\r\n    uint256 minimumActionGas\r\n  ) external view returns (bytes32 actionID) {\r\n    // Determine the actionID - this serves as a signature hash for an action.\r\n    actionID = _getActionID(\r\n      action,\r\n      _validateCustomActionTypeAndGetArguments(action, amount, recipient),\r\n      _nonce,\r\n      minimumActionGas,\r\n      _userSigningKey,\r\n      _getDharmaSigningKey()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice View function that, given an action type and arguments, will return\r\n   * the action ID or message hash that will need to be prefixed (according to\r\n   * EIP-191 0x45), hashed, and signed by the key designated by the Dharma Key\r\n   * Registry in order to construct a valid signature for the corresponding\r\n   * action. Any nonce value may be supplied, which enables constructing valid\r\n   * message hashes for multiple future actions ahead of time.\r\n   * @param action uint8 The type of action, designated by it's index. Valid\r\n   * custom actions in V3 include Cancel (0), SetUserSigningKey (1),\r\n   * DAIWithdrawal (4), USDCWithdrawal (5), and ETHWithdrawal (6).\r\n   * @param amount uint256 The amount to withdraw for Withdrawal actions. This\r\n   * value is ignored for Cancel and SetUserSigningKey action types.\r\n   * @param recipient address The account to transfer withdrawn funds to or the\r\n   * new user signing key. This value is ignored for Cancel action types.\r\n   * @param nonce uint256 The nonce to use.\r\n   * @param minimumActionGas uint256 The minimum amount of gas that must be\r\n   * provided to this call - be aware that additional gas must still be included\r\n   * to account for the cost of overhead incurred up until the start of this\r\n   * function call.\r\n   * @return The action ID, which will need to be prefixed, hashed and signed in\r\n   * order to construct a valid signature.\r\n   */\r\n  function getCustomActionID(\r\n    ActionType action,\r\n    uint256 amount,\r\n    address recipient,\r\n    uint256 nonce,\r\n    uint256 minimumActionGas\r\n  ) external view returns (bytes32 actionID) {\r\n    // Determine the actionID - this serves as a signature hash for an action.\r\n    actionID = _getActionID(\r\n      action,\r\n      _validateCustomActionTypeAndGetArguments(action, amount, recipient),\r\n      nonce,\r\n      minimumActionGas,\r\n      _userSigningKey,\r\n      _getDharmaSigningKey()\r\n    );\r\n  }\r\n\r\n  function getNextGenericActionID(\r\n    address to,\r\n    bytes calldata data,\r\n    uint256 minimumActionGas\r\n  ) external view returns (bytes32 actionID) {\r\n    // Determine the actionID - this serves as a signature hash for an action.\r\n    actionID = _getActionID(\r\n      ActionType.Generic,\r\n      abi.encode(to, data),\r\n      _nonce,\r\n      minimumActionGas,\r\n      _userSigningKey,\r\n      _getDharmaSigningKey()\r\n    );\r\n  }\r\n\r\n  function getGenericActionID(\r\n    address to,\r\n    bytes calldata data,\r\n    uint256 nonce,\r\n    uint256 minimumActionGas\r\n  ) external view returns (bytes32 actionID) {\r\n    // Determine the actionID - this serves as a signature hash for an action.\r\n    actionID = _getActionID(\r\n      ActionType.Generic,\r\n      abi.encode(to, data),\r\n      nonce,\r\n      minimumActionGas,\r\n      _userSigningKey,\r\n      _getDharmaSigningKey()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice Pure function for getting the current Dharma Smart Wallet version.\r\n   * @return The current Dharma Smart Wallet version.\r\n   */\r\n  function getVersion() external pure returns (uint256 version) {\r\n    version = _DHARMA_SMART_WALLET_VERSION;\r\n  }\r\n\r\n  /**\r\n   * @notice Internal function for setting a new user signing key. A\r\n   * NewUserSigningKey event will also be emitted.\r\n   * @param userSigningKey address The new user signing key to set on this smart\r\n   * wallet.\r\n   */\r\n  function _setUserSigningKey(address userSigningKey) internal {\r\n    // Ensure that a user signing key is set on this smart wallet.\r\n    require(userSigningKey != address(0), \"No user signing key provided.\");\r\n    \r\n    _userSigningKey = userSigningKey;\r\n    emit NewUserSigningKey(userSigningKey);\r\n  }\r\n\r\n  /**\r\n   * @notice Internal function for setting the allowance of a given ERC20 asset\r\n   * to the maximum value. This enables the corresponding cToken for the asset\r\n   * to pull in tokens in order to make deposits.\r\n   * @param asset uint256 The ID of the asset, either Dai (0) or USDC (1).\r\n   * @return True if the approval succeeded, otherwise false.\r\n   */\r\n  function _setFullApproval(AssetType asset) internal returns (bool ok) {\r\n    // Get asset's underlying token address and corresponding cToken address.\r\n    address token;\r\n    address cToken;\r\n    if (asset == AssetType.DAI) {\r\n      token = address(_DAI);\r\n      cToken = address(_CDAI);\r\n    } else {\r\n      token = address(_USDC);\r\n      cToken = address(_CUSDC);\r\n    }\r\n\r\n    // Approve cToken contract to transfer underlying on behalf of this wallet.\r\n    (ok, ) = token.call(abi.encodeWithSelector(\r\n      // Note: since both cTokens have the same interface, just use cDAI's.\r\n      _DAI.approve.selector, cToken, uint256(-1)\r\n    ));\r\n\r\n    // Emit a corresponding event if the approval failed.\r\n    if (!ok) {\r\n      if (asset == AssetType.DAI) {\r\n        emit ExternalError(address(_DAI), \"DAI contract reverted on approval.\");\r\n      } else {\r\n        // Find out why USDC transfer reverted (it doesn't give revert reasons).\r\n        _diagnoseAndEmitUSDCSpecificError(_USDC.approve.selector);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Internal function for depositing a given ERC20 asset and balance on\r\n   * the corresponding cToken. No value is returned, as no additional steps need\r\n   * to be conditionally performed after the deposit.\r\n   * @param asset uint256 The ID of the asset, either Dai (0) or USDC (1).\r\n   * @param balance uint256 The amount of the asset to deposit. Note that an\r\n   * attempt to deposit \"dust\" (i.e. very small amounts) may result in 0 cTokens\r\n   * being minted, or in fewer cTokens being minted than is implied by the\r\n   * current exchange rate (due to lack of sufficient precision on the tokens).\r\n   */\r\n  function _depositOnCompound(AssetType asset, uint256 balance) internal {\r\n    // Only perform a deposit if the balance is at least .001 Dai or USDC.\r\n    if (\r\n      asset == AssetType.DAI && balance > _JUST_UNDER_ONE_1000th_DAI ||\r\n      asset == AssetType.USDC && balance > _JUST_UNDER_ONE_1000th_USDC\r\n    ) {\r\n      // Get cToken address for the asset type.\r\n      address cToken = asset == AssetType.DAI ? address(_CDAI) : address(_CUSDC);\r\n\r\n      // Attempt to mint the balance on the cToken contract.\r\n      (bool ok, bytes memory data) = cToken.call(abi.encodeWithSelector(\r\n        // Note: since both cTokens have the same interface, just use cDAI's.\r\n        _CDAI.mint.selector, balance\r\n      ));\r\n\r\n      // Log an external error if something went wrong with the attempt.\r\n      _checkCompoundInteractionAndLogAnyErrors(\r\n        asset, _CDAI.mint.selector, ok, data\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Internal function for withdrawing a given underlying asset balance\r\n   * from the corresponding cToken. Note that the requested balance may not be\r\n   * currently available on Compound, which will cause the withdrawal to fail.\r\n   * @param asset uint256 The asset's ID, either Dai (0) or USDC (1).\r\n   * @param balance uint256 The amount of the asset to withdraw, denominated in\r\n   * the underlying token. Note that an attempt to withdraw \"dust\" (i.e. very\r\n   * small amounts) may result in 0 underlying tokens being redeemed, or in\r\n   * fewer tokens being redeemed than is implied by the current exchange rate\r\n   * (due to lack of sufficient precision on the tokens).\r\n   * @return True if the withdrawal succeeded, otherwise false.\r\n   */\r\n  function _withdrawFromCompound(\r\n    AssetType asset,\r\n    uint256 balance\r\n  ) internal returns (bool success) {\r\n    // Get cToken address for the asset type. (No custom ETH withdrawal action.)\r\n    address cToken = asset == AssetType.DAI ? address(_CDAI) : address(_CUSDC);\r\n\r\n    // Attempt to redeem the underlying balance from the cToken contract.\r\n    (bool ok, bytes memory data) = cToken.call(abi.encodeWithSelector(\r\n      // Note: function selector is the same for each cToken so just use cDAI's.\r\n      _CDAI.redeemUnderlying.selector, balance\r\n    ));\r\n\r\n    // Log an external error if something went wrong with the attempt.\r\n    success = _checkCompoundInteractionAndLogAnyErrors(\r\n      asset, _CDAI.redeemUnderlying.selector, ok, data\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice Internal function for withdrawing the total underlying asset\r\n   * balance from the corresponding cToken. Note that the requested balance may\r\n   * not be currently available on Compound, which will cause the withdrawal to\r\n   * fail.\r\n   * @param asset uint256 The asset's ID, either Dai (0) or USDC (1).\r\n   * @return True if the withdrawal succeeded, otherwise false.\r\n   */\r\n  function _withdrawMaxFromCompound(\r\n    AssetType asset\r\n  ) internal returns (bool success) {\r\n    // Get cToken address for the asset type. (No custom ETH withdrawal action.)\r\n    address cToken = asset == AssetType.DAI ? address(_CDAI) : address(_CUSDC);\r\n\r\n    // Get the current cToken balance for this account.\r\n    uint256 redeemAmount = IERC20(cToken).balanceOf(address(this));\r\n\r\n    // Attempt to redeem the underlying balance from the cToken contract.\r\n    (bool ok, bytes memory data) = cToken.call(abi.encodeWithSelector(\r\n      // Note: function selector is the same for each cToken so just use cDAI's.\r\n      _CDAI.redeem.selector, redeemAmount\r\n    ));\r\n\r\n    // Log an external error if something went wrong with the attempt.\r\n    success = _checkCompoundInteractionAndLogAnyErrors(\r\n      asset, _CDAI.redeem.selector, ok, data\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice Internal function for validating supplied gas (if specified),\r\n   * retrieving the signer's public key from the Dharma Key Registry, deriving\r\n   * the action ID, validating the provided caller and/or signatures using that\r\n   * action ID, and incrementing the nonce. This function serves as the\r\n   * entrypoint for all protected \"actions\" on the smart wallet, and is the only\r\n   * area where these functions should revert (other than due to out-of-gas\r\n   * errors, which can be guarded against by supplying a minimum action gas\r\n   * requirement).\r\n   * @param action uint8 The type of action, designated by it's index. Valid\r\n   * actions in V3 include Cancel (0), SetUserSigningKey (1), Generic (2),\r\n   * GenericAtomicBatch (3), DAIWithdrawal (4), USDCWithdrawal (5), and\r\n   * ETHWithdrawal (6).\r\n   * @param arguments bytes ABI-encoded arguments for the action.\r\n   * @param minimumActionGas uint256 The minimum amount of gas that must be\r\n   * provided to this call - be aware that additional gas must still be included\r\n   * to account for the cost of overhead incurred up until the start of this\r\n   * function call.\r\n   * @param userSignature bytes A signature that resolves to the public key\r\n   * set for this account in storage slot zero, `_userSigningKey`. If the user\r\n   * signing key is not a contract, ecrecover will be used; otherwise, ERC1271\r\n   * will be used. A unique hash returned from `getCustomActionID` is prefixed\r\n   * and hashed to create the message hash for the signature.\r\n   * @param dharmaSignature bytes A signature that resolves to the public key\r\n   * returned for this account from the Dharma Key Registry. A unique hash\r\n   * returned from `getCustomActionID` is prefixed and hashed to create the\r\n   * signed message.\r\n   * @return The nonce of the current action (prior to incrementing it).\r\n   */\r\n  function _validateActionAndIncrementNonce(\r\n    ActionType action,\r\n    bytes memory arguments,\r\n    uint256 minimumActionGas,\r\n    bytes memory userSignature,\r\n    bytes memory dharmaSignature\r\n  ) internal returns (bytes32 actionID, uint256 actionNonce) {\r\n    // Ensure that the current gas exceeds the minimum required action gas.\r\n    // This prevents griefing attacks where an attacker can invalidate a\r\n    // signature without providing enough gas for the action to succeed. Also\r\n    // note that some gas will be spent before this check is reached - supplying\r\n    // ~30,000 additional gas should suffice when submitting transactions. To\r\n    // skip this requirement, supply zero for the minimumActionGas argument.\r\n    if (minimumActionGas != 0) {\r\n      require(\r\n        gasleft() >= minimumActionGas,\r\n        \"Invalid action - insufficient gas supplied by transaction submitter.\"\r\n      );\r\n    }\r\n\r\n    // Get the current nonce for the action to be performed.\r\n    actionNonce = _nonce;\r\n\r\n    // Get the user signing key that will be used to verify their signature.\r\n    address userSigningKey = _userSigningKey;\r\n\r\n    // Get the Dharma signing key that will be used to verify their signature.\r\n    address dharmaSigningKey = _getDharmaSigningKey();\r\n\r\n    // Determine the actionID - this serves as the signature hash.\r\n    actionID = _getActionID(\r\n      action,\r\n      arguments,\r\n      actionNonce,\r\n      minimumActionGas,\r\n      userSigningKey,\r\n      dharmaSigningKey\r\n    );\r\n\r\n    // Compute the message hash - the hashed, EIP-191-0x45-prefixed action ID.\r\n    bytes32 messageHash = actionID.toEthSignedMessageHash();\r\n\r\n    // Actions other than Cancel require both signatures; Cancel only needs one.\r\n    if (action != ActionType.Cancel) {\r\n      // Validate user signing key signature unless it is `msg.sender`.\r\n      if (msg.sender != userSigningKey) {\r\n        require(\r\n          _validateUserSignature(\r\n            messageHash, action, arguments, userSigningKey, userSignature\r\n          ),\r\n          \"Invalid action - invalid user signature.\"\r\n        );\r\n      }\r\n\r\n      // Validate Dharma signing key signature unless it is `msg.sender`.\r\n      if (msg.sender != dharmaSigningKey) {\r\n        require(\r\n          dharmaSigningKey == messageHash.recover(dharmaSignature),\r\n          \"Invalid action - invalid Dharma signature.\"\r\n        );\r\n      }\r\n    } else {\r\n      // Validate signing key signature unless user or Dharma is `msg.sender`.\r\n      if (msg.sender != userSigningKey && msg.sender != dharmaSigningKey) {\r\n        require(\r\n          dharmaSigningKey == messageHash.recover(dharmaSignature) ||\r\n          _validateUserSignature(\r\n            messageHash, action, arguments, userSigningKey, userSignature\r\n          ),\r\n          \"Invalid action - invalid signature.\"\r\n        );\r\n      }\r\n    }\r\n\r\n    // Increment nonce in order to prevent reuse of signatures after the call.\r\n    _nonce++;\r\n  }\r\n\r\n  /**\r\n   * @notice Internal function to determine whether a call to a given cToken\r\n   * succeeded, and to emit a relevant ExternalError event if it failed. The\r\n   * failure can be caused by a call that reverts, or by a call that does not\r\n   * revert but returns a non-zero error code.\r\n   * @param asset uint256 The ID of the asset, either Dai (0) or USDC (1).\r\n   * @param functionSelector bytes4 The function selector that was called on the\r\n   * corresponding cToken of the asset type.\r\n   * @param ok bool A boolean representing whether the call returned or\r\n   * reverted.\r\n   * @param data bytes The data provided by the returned or reverted call.\r\n   * @return True if the interaction was successful, otherwise false. This will\r\n   * be used to determine if subsequent steps in the action should be attempted\r\n   * or not, specifically a transfer following a withdrawal.\r\n   */\r\n  function _checkCompoundInteractionAndLogAnyErrors(\r\n    AssetType asset,\r\n    bytes4 functionSelector,\r\n    bool ok,\r\n    bytes memory data\r\n  ) internal returns (bool success) {\r\n    // Log an external error if something went wrong with the attempt.\r\n    if (ok) {\r\n      uint256 compoundError = abi.decode(data, (uint256));\r\n      if (compoundError != _COMPOUND_SUCCESS) {\r\n        // Get called contract address, name of contract, and function name.\r\n        (address account, string memory name, string memory functionName) = (\r\n          _getCTokenDetails(asset, functionSelector)\r\n        );\r\n\r\n        emit ExternalError(\r\n          account,\r\n          string(\r\n            abi.encodePacked(\r\n              \"Compound \",\r\n              name,\r\n              \" contract returned error code \",\r\n              uint8((compoundError / 10) + 48),\r\n              uint8((compoundError % 10) + 48),\r\n              \" while attempting to call \",\r\n              functionName,\r\n              \".\"\r\n            )\r\n          )\r\n        );\r\n      } else {\r\n        success = true;\r\n      }\r\n    } else {\r\n      // Get called contract address, name of contract, and function name.\r\n      (address account, string memory name, string memory functionName) = (\r\n        _getCTokenDetails(asset, functionSelector)\r\n      );\r\n\r\n      // Decode the revert reason in the event one was returned.\r\n      string memory revertReason = _decodeRevertReason(data);\r\n\r\n      emit ExternalError(\r\n        account,\r\n        string(\r\n          abi.encodePacked(\r\n            \"Compound \",\r\n            name,\r\n            \" contract reverted while attempting to call \",\r\n            functionName,\r\n            \": \",\r\n            revertReason\r\n          )\r\n        )\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Internal function to diagnose the reason that a call to the USDC\r\n   * contract failed and to emit a corresponding ExternalError event. USDC can\r\n   * blacklist accounts and pause the contract, which can both cause a transfer\r\n   * or approval to fail.\r\n   * @param functionSelector bytes4 The function selector that was called on the\r\n   * USDC contract.\r\n   */\r\n  function _diagnoseAndEmitUSDCSpecificError(bytes4 functionSelector) internal {\r\n    // Determine the name of the function that was called on USDC.\r\n    string memory functionName;\r\n    if (functionSelector == _USDC.transfer.selector) {\r\n      functionName = \"transfer\";\r\n    } else {\r\n      functionName = \"approve\";\r\n    }\r\n\r\n    // Find out why USDC transfer reverted (it doesn't give revert reasons).\r\n    if (_USDC_NAUGHTY.isBlacklisted(address(this))) {\r\n      emit ExternalError(\r\n        address(_USDC),\r\n        string(\r\n          abi.encodePacked(\r\n            functionName, \" failed - USDC has blacklisted this user.\"\r\n          )\r\n        )\r\n      );\r\n    } else { // Note: `else if` breaks coverage.\r\n      if (_USDC_NAUGHTY.paused()) {\r\n        emit ExternalError(\r\n          address(_USDC),\r\n          string(\r\n            abi.encodePacked(\r\n              functionName, \" failed - USDC contract is currently paused.\"\r\n            )\r\n          )\r\n        );\r\n      } else {\r\n        emit ExternalError(\r\n          address(_USDC),\r\n          string(\r\n            abi.encodePacked(\r\n              \"USDC contract reverted on \", functionName, \".\"\r\n            )\r\n          )\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Internal function to ensure that protected functions can only be\r\n   * called from this contract and that they have the appropriate context set.\r\n   * The self-call context is then cleared. It is used as an additional guard\r\n   * against reentrancy, especially once generic actions are supported by the\r\n   * smart wallet in future versions.\r\n   * @param selfCallContext bytes4 The expected self-call context, equal to the\r\n   * function selector of the approved calling function.\r\n   */\r\n  function _enforceSelfCallFrom(bytes4 selfCallContext) internal {\r\n    // Ensure caller is this contract and self-call context is correctly set.\r\n    require(\r\n      msg.sender == address(this) &&\r\n      _selfCallContext == selfCallContext,\r\n      \"External accounts or unapproved internal functions cannot call this.\"\r\n    );\r\n\r\n    // Clear the self-call context.\r\n    delete _selfCallContext;\r\n  }\r\n\r\n  /**\r\n   * @notice Internal view function for validating a user's signature. If the\r\n   * user's signing key does not have contract code, it will be validated via\r\n   * ecrecover; otherwise, it will be validated using ERC-1271, passing the\r\n   * message hash that was signed, the action type, and the arguments as data.\r\n   * @param messageHash bytes32 The message hash that is signed by the user. It\r\n   * is derived by prefixing (according to EIP-191 0x45) and hashing an actionID\r\n   * returned from `getCustomActionID`.\r\n   * @param action uint8 The type of action, designated by it's index. Valid\r\n   * actions in V3 include Cancel (0), SetUserSigningKey (1), Generic (2),\r\n   * GenericAtomicBatch (3), DAIWithdrawal (4), USDCWithdrawal (5), and\r\n   * ETHWithdrawal (6).\r\n   * @param arguments bytes ABI-encoded arguments for the action.\r\n   * @param userSignature bytes A signature that resolves to the public key\r\n   * set for this account in storage slot zero, `_userSigningKey`. If the user\r\n   * signing key is not a contract, ecrecover will be used; otherwise, ERC1271\r\n   * will be used.\r\n   * @return A boolean representing the validity of the supplied user signature.\r\n   */\r\n  function _validateUserSignature(\r\n    bytes32 messageHash,\r\n    ActionType action,\r\n    bytes memory arguments,\r\n    address userSigningKey,\r\n    bytes memory userSignature\r\n  ) internal view returns (bool valid) {\r\n    if (!userSigningKey.isContract()) {\r\n      valid = userSigningKey == messageHash.recover(userSignature);\r\n    } else {\r\n      bytes memory data = abi.encode(messageHash, action, arguments);\r\n      valid = (\r\n        ERC1271(userSigningKey).isValidSignature(\r\n          data, userSignature\r\n        ) == _ERC_1271_MAGIC_VALUE\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Internal view function to get the Dharma signing key for the smart\r\n   * wallet from the Dharma Key Registry. This key can be set for each specific\r\n   * smart wallet - if none has been set, a global fallback key will be used.\r\n   * @return The address of the Dharma signing key, or public key corresponding\r\n   * to the secondary signer.\r\n   */\r\n  function _getDharmaSigningKey() internal view returns (\r\n    address dharmaSigningKey\r\n  ) {\r\n    dharmaSigningKey = _DHARMA_KEY_REGISTRY.getKey();\r\n  }\r\n\r\n  /**\r\n   * @notice Internal view function that, given an action type and arguments,\r\n   * will return the action ID or message hash that will need to be prefixed\r\n   * (according to EIP-191 0x45), hashed, and signed by the key designated by\r\n   * the Dharma Key Registry in order to construct a valid signature for the\r\n   * corresponding action. The current nonce will be supplied to this function\r\n   * when reconstructing an action ID during protected function execution based\r\n   * on the supplied parameters.\r\n   * @param action uint8 The type of action, designated by it's index. Valid\r\n   * actions in V3 include Cancel (0), SetUserSigningKey (1), Generic (2),\r\n   * GenericAtomicBatch (3), DAIWithdrawal (4), USDCWithdrawal (5), and\r\n   * ETHWithdrawal (6).\r\n   * @param arguments bytes ABI-encoded arguments for the action.\r\n   * @param nonce uint256 The nonce to use.\r\n   * @param minimumActionGas uint256 The minimum amount of gas that must be\r\n   * provided to this call - be aware that additional gas must still be included\r\n   * to account for the cost of overhead incurred up until the start of this\r\n   * function call.\r\n   * @param dharmaSigningKey address The address of the secondary key, or public\r\n   * key corresponding to the secondary signer.\r\n   * @return The action ID, which will need to be prefixed, hashed and signed in\r\n   * order to construct a valid signature.\r\n   */\r\n  function _getActionID(\r\n    ActionType action,\r\n    bytes memory arguments,\r\n    uint256 nonce,\r\n    uint256 minimumActionGas,\r\n    address userSigningKey,\r\n    address dharmaSigningKey\r\n  ) internal view returns (bytes32 actionID) {\r\n    // actionID is constructed according to EIP-191-0x45 to prevent replays.\r\n    actionID = keccak256(\r\n      abi.encodePacked(\r\n        address(this),\r\n        _DHARMA_SMART_WALLET_VERSION,\r\n        userSigningKey,\r\n        dharmaSigningKey,\r\n        nonce,\r\n        minimumActionGas,\r\n        action,\r\n        arguments\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice Internal pure function to get the cToken address, it's name, and\r\n   * the name of the called function, based on a supplied asset type and\r\n   * function selector. It is used to help construct ExternalError events.\r\n   * @param asset uint256 The ID of the asset, either Dai (0) or USDC (1).\r\n   * @param functionSelector bytes4 The function selector that was called on the\r\n   * corresponding cToken of the asset type.\r\n   * @return The cToken address, it's name, and the name of the called function.\r\n   */\r\n  function _getCTokenDetails(\r\n    AssetType asset,\r\n    bytes4 functionSelector\r\n  ) internal pure returns (\r\n    address account,\r\n    string memory name,\r\n    string memory functionName\r\n  ) {\r\n    if (asset == AssetType.DAI) {\r\n      account = address(_CDAI);\r\n      name = \"cDAI\";\r\n    } else {\r\n      account = address(_CUSDC);\r\n      name = \"cUSDC\";\r\n    }\r\n\r\n    // Note: since both cTokens have the same interface, just use cDAI's.\r\n    if (functionSelector == _CDAI.mint.selector) {\r\n      functionName = \"mint\";\r\n    } else {\r\n      functionName = string(abi.encodePacked(\r\n        \"redeem\",\r\n        functionSelector == _CDAI.redeemUnderlying.selector ? \"Underlying\" : \"\"\r\n      ));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Internal view function to ensure that a given `to` address provided\r\n   * as part of a generic action is valid. Calls cannot be performed to accounts\r\n   * without code or back into the smart wallet itself.\r\n   */\r\n  function _ensureValidGenericCallTarget(address to) internal view {\r\n    require(\r\n      to.isContract(),\r\n      \"Invalid `to` parameter - must supply a contract address containing code.\"\r\n    );\r\n\r\n    require(\r\n      to != address(this),\r\n      \"Invalid `to` parameter - cannot supply the address of this contract.\"\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice Internal pure function to ensure that a given action type is a\r\n   * \"custom\" action type (i.e. is not a generic action type) and to construct\r\n   * the \"arguments\" input to an actionID based on that action type.\r\n   * @param action uint8 The type of action, designated by it's index. Valid\r\n   * custom actions in V3 include Cancel (0), SetUserSigningKey (1),\r\n   * DAIWithdrawal (4), USDCWithdrawal (5), and ETHWithdrawal (6).\r\n   * @param amount uint256 The amount to withdraw for Withdrawal actions. This\r\n   * value is ignored for Cancel and SetUserSigningKey action types.\r\n   * @param recipient address The account to transfer withdrawn funds to or the\r\n   * new user signing key. This value is ignored for Cancel action types.\r\n   * @return A bytes array containing the arguments that will be provided as\r\n   * a component of the inputs when constructing a custom action ID.\r\n   */\r\n  function _validateCustomActionTypeAndGetArguments(\r\n    ActionType action, uint256 amount, address recipient\r\n  ) internal pure returns (bytes memory arguments) {\r\n    // Ensure that the action type is a valid custom action type.\r\n    require(\r\n      action == ActionType.Cancel ||\r\n      action == ActionType.SetUserSigningKey ||\r\n      action == ActionType.DAIWithdrawal ||\r\n      action == ActionType.USDCWithdrawal ||\r\n      action == ActionType.ETHWithdrawal,\r\n      \"Invalid custom action type.\"\r\n    );\r\n\r\n    // Use action type to determine parameters to include in returned arguments.\r\n    if (action == ActionType.Cancel) {\r\n      // Ignore all parameters if custom action type is Cancel.\r\n      arguments = abi.encode();\r\n    } else if (action == ActionType.SetUserSigningKey) {\r\n      // Ignore `amount` parameter if custom action type is SetUserSigningKey.\r\n      arguments = abi.encode(recipient);\r\n    } else {\r\n      // Use both `amount` and `recipient` parameters for withdrawals.\r\n      arguments = abi.encode(amount, recipient);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Internal pure function to decode revert reasons. The revert reason\r\n   * prefix is removed and the remaining string argument is decoded.\r\n   * @param revertData bytes The raw data supplied alongside the revert.\r\n   * @return The decoded revert reason string.\r\n   */\r\n  function _decodeRevertReason(\r\n    bytes memory revertData\r\n  ) internal pure returns (string memory revertReason) {\r\n    // Solidity prefixes revert reason with 0x08c379a0 -> Error(string) selector\r\n    if (\r\n      revertData.length > 68 && // prefix (4) + position (32) + length (32)\r\n      revertData[0] == byte(0x08) &&\r\n      revertData[1] == byte(0xc3) &&\r\n      revertData[2] == byte(0x79) &&\r\n      revertData[3] == byte(0xa0)\r\n    ) {\r\n      // Get the revert reason without the prefix from the revert data.\r\n      bytes memory revertReasonBytes = new bytes(revertData.length - 4);\r\n      for (uint256 i = 4; i < revertData.length; i++) {\r\n        revertReasonBytes[i - 4] = revertData[i];\r\n      }\r\n\r\n      // Decode the resultant revert reason as a string.\r\n      revertReason = abi.decode(revertReasonBytes, (string));\r\n    } else {\r\n      // Simply return the default, with no revert reason.\r\n      revertReason = \"(no revert reason)\";\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"getBalances\",\"outputs\":[{\"name\":\"daiBalance\",\"type\":\"uint256\"},{\"name\":\"usdcBalance\",\"type\":\"uint256\"},{\"name\":\"etherBalance\",\"type\":\"uint256\"},{\"name\":\"cDaiUnderlyingDaiBalance\",\"type\":\"uint256\"},{\"name\":\"cUsdcUnderlyingUsdcBalance\",\"type\":\"uint256\"},{\"name\":\"cEtherUnderlyingEtherBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newUserSigningKey\",\"type\":\"address\"}],\"name\":\"recover\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"name\":\"version\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minimumActionGas\",\"type\":\"uint256\"},{\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"cancel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userSigningKey\",\"type\":\"address\"},{\"name\":\"minimumActionGas\",\"type\":\"uint256\"},{\"name\":\"userSignature\",\"type\":\"bytes\"},{\"name\":\"dharmaSignature\",\"type\":\"bytes\"}],\"name\":\"setUserSigningKey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"minimumActionGas\",\"type\":\"uint256\"},{\"name\":\"userSignature\",\"type\":\"bytes\"},{\"name\":\"dharmaSignature\",\"type\":\"bytes\"}],\"name\":\"withdrawUSDC\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"action\",\"type\":\"uint8\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"minimumActionGas\",\"type\":\"uint256\"}],\"name\":\"getCustomActionID\",\"outputs\":[{\"name\":\"actionID\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUserSigningKey\",\"outputs\":[{\"name\":\"userSigningKey\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\"},{\"name\":\"minimumActionGas\",\"type\":\"uint256\"}],\"name\":\"getNextGenericActionID\",\"outputs\":[{\"name\":\"actionID\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"minimumActionGas\",\"type\":\"uint256\"}],\"name\":\"getGenericActionID\",\"outputs\":[{\"name\":\"actionID\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"minimumActionGas\",\"type\":\"uint256\"},{\"name\":\"userSignature\",\"type\":\"bytes\"},{\"name\":\"dharmaSignature\",\"type\":\"bytes\"}],\"name\":\"withdrawEther\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"_withdrawUSDCAtomic\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"_withdrawDaiAtomic\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"minimumActionGas\",\"type\":\"uint256\"},{\"name\":\"userSignature\",\"type\":\"bytes\"},{\"name\":\"dharmaSignature\",\"type\":\"bytes\"}],\"name\":\"withdrawDai\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userSigningKey\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\"},{\"name\":\"minimumActionGas\",\"type\":\"uint256\"},{\"name\":\"userSignature\",\"type\":\"bytes\"},{\"name\":\"dharmaSignature\",\"type\":\"bytes\"}],\"name\":\"executeAction\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"},{\"name\":\"returnData\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNonce\",\"outputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"repayAndDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"action\",\"type\":\"uint8\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"minimumActionGas\",\"type\":\"uint256\"}],\"name\":\"getNextCustomActionID\",\"outputs\":[{\"name\":\"actionID\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"cancelledNonce\",\"type\":\"uint256\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"EthWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"actionID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"rolledBack\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"CallSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"actionID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"revertReason\",\"type\":\"string\"}],\"name\":\"CallFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"userSigningKey\",\"type\":\"address\"}],\"name\":\"NewUserSigningKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"revertReason\",\"type\":\"string\"}],\"name\":\"ExternalError\",\"type\":\"event\"}]","ContractName":"DharmaSmartWalletImplementationV3","CompilerVersion":"v0.5.3+commit.10d17f24","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://6a2526a3ca423b1c0ca30ad8a0ee32280e85b6932435900037eafcfee510e51f"}]}