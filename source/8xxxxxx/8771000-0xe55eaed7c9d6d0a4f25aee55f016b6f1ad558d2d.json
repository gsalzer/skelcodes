{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.11;\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint supply);\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    function decimals() external view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n\r\n/// @title Kyber Network interface\r\ninterface KyberNetworkProxyInterface {\r\n    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty) external view returns (uint expectedRate, uint slippageRate);\r\n    function tradeWithHint(ERC20 src, uint srcAmount, ERC20 dest, address destAddress,\r\n            uint maxDestAmount, uint minConversionRate, address walletId, bytes calldata hint) external payable returns(uint);\r\n}\r\n\r\n\r\n/// @title Compound Finance interface\r\ninterface CERC20 {\r\n  function mint(uint mintAmount) external returns (uint);\r\n  function redeemUnderlying(uint redeemAmount) external returns (uint);\r\n  function borrow(uint borrowAmount) external returns (uint);\r\n  function repayBorrow(uint repayAmount) external returns (uint);\r\n  function borrowBalanceCurrent(address account) external returns (uint);\r\n  function exchangeRateCurrent() external returns (uint);\r\n\r\n  function balanceOf(address account) external view returns (uint);\r\n  function decimals() external view returns (uint);\r\n  function underlying() external view returns (address);\r\n}\r\n\r\n\r\n/// @title Ownable Contract\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"caller must be the Contract Owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     * @notice Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"New Owner must not be empty.\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/// @title Memento Fund Contract\r\ncontract Mementofund is Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    \r\n    \r\n    //variables\r\n    uint minRate;\r\n    // uint256 public totalFundsInDAI;\r\n    uint256 public developerFeeRate;\r\n    uint public managerTransactionFee;\r\n    uint public managerFundFee;\r\n    uint accountIndexMax;\r\n    uint userTokenCount;\r\n\r\n    //Events\r\n    event managerAddressUpdated(address newaddress);\r\n    event kybertrade(address _src, uint256 _amount, address _dest, uint256 _destqty);\r\n    event deposit(ERC20 _src, uint256 _amount);\r\n\r\n    // addresses\r\n    address public DAI_ADDR;\r\n    address payable public CDAI_ADDR;\r\n    address payable public KYBER_ADDR;\r\n    address payable public ADMIN_ADDR;\r\n    address payable public COMPOUND_ADDR;\r\n\r\n    // Interfaces\r\n    ERC20 internal dai;\r\n    KyberNetworkProxyInterface internal kyber;\r\n    CERC20 internal CDai;\r\n    bytes public constant PERM_HINT = \"PERM\";\r\n\r\n    // Constants\r\n    ERC20 internal constant ETH_TOKEN_ADDRESS = ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\r\n    uint constant internal PRECISION = (10**18);\r\n    uint constant internal MAX_QTY   = (10**28); // 10B tokens\r\n    uint constant internal ETH_DECIMALS = 18;\r\n    uint constant internal MAX_DECIMALS = 18;\r\n\r\n    //Structs\r\n\r\n    struct Account{\r\n        address payable benefactorAddress;\r\n        string benefactorName;\r\n        address payable managerAddress;\r\n        address[] signatories;\r\n        uint creationDate;\r\n        uint unlockDate;\r\n        uint preUnlockMonthlyquota;\r\n\r\n    }\r\n\r\n\r\n    struct Investment{\r\n        uint256 timestamp;\r\n        address depositedBy;\r\n        address srcTokenAddress;\r\n        uint256 srcAmount;\r\n        address destTokenAddress;\r\n        uint256 destAmount;\r\n    }\r\n\r\n    struct Memory{\r\n        uint256 timestamp;\r\n        address depositedBy;\r\n        bytes ipfshash;\r\n        string memoryText;\r\n        string filetype;\r\n    }\r\n\r\n    //Mappings\r\n    //Account Tracking\r\n    mapping(address => mapping(uint => address)) public usertokenMapping;\r\n    mapping(address => uint) public userTokens;\r\n\r\n    mapping(address => mapping(address => uint256)) public userBalance;\r\n    mapping(address => Account) public accounts;\r\n    mapping(address => Investment[]) public userInvestments;\r\n    // mapping(address => address) uniswapExchange;\r\n\r\n    constructor(\r\n        address payable _adminAddr,\r\n        address _daiAddr,\r\n        address payable _kyberAddr,\r\n        address payable _cdaiAddr\r\n\r\n      ) public {\r\n\r\n        KYBER_ADDR = _kyberAddr;\r\n        ADMIN_ADDR = _adminAddr;\r\n        CDAI_ADDR = _cdaiAddr;\r\n        DAI_ADDR = _daiAddr;\r\n        dai = ERC20(DAI_ADDR);\r\n        CDai = CERC20(CDAI_ADDR);\r\n        kyber = KyberNetworkProxyInterface(_kyberAddr);\r\n        // compound = Compound(_compoundAddr);\r\n        \r\n        \r\n        bool daiApprovalResult = dai.approve(DAI_ADDR, 2**256-1);\r\n        require(daiApprovalResult, \"Failed to approve cDAI contract to spend DAI\");\r\n      }\r\n\r\n    // Internal Utilities\r\n    modifier onlyFundAdmin() {\r\n        require(isFundAdmin(), \"Only Fund Manger is Authorised to execute that function.\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isFundAdmin() public view returns (bool) {\r\n        return msg.sender == ADMIN_ADDR;\r\n    }\r\n\r\n\r\n    function isRegisteredBenefactor(address _account) public view returns (bool) {\r\n\r\n        if (accounts[_account].benefactorAddress != address(0x00)){\r\n        return  true;\r\n        }\r\n    }\r\n\r\n    function isAccountManager(address _account) public view returns (bool) {\r\n\r\n        if (accounts[_account].managerAddress == msg.sender){\r\n        return  true;\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n    function handleIndexes(address _account, address _token) internal {\r\n        if (userBalance[_account][_token] == 0x00) {\r\n                usertokenMapping[_account][userTokens[_account]] = _token;\r\n                userTokens[_account] += 1;\r\n            }\r\n    }\r\n\r\n\r\n\r\n    //Account Management Functions\r\n    function registerAccount(address payable _benefactorAddress, string memory _benefactorName,\r\n                             address payable _managerAddress, address[] memory _signatories, uint _unlockDate,\r\n                             uint _preUnlockMonthlyquota) public returns(bool) {\r\n\r\n        if (accounts[_benefactorAddress].benefactorAddress == address(0x00)){\r\n\r\n            Account storage account = accounts[_benefactorAddress];\r\n            account.benefactorAddress = _benefactorAddress;\r\n            account.benefactorName = _benefactorName;\r\n            account.managerAddress = _managerAddress;\r\n            account.signatories = _signatories;\r\n            account.creationDate = now;\r\n            account.unlockDate = _unlockDate;\r\n            account.preUnlockMonthlyquota = _preUnlockMonthlyquota;\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n    // Kyber Trading Function\r\n    function _kybertrade(ERC20 _srcToken, uint256 _srcAmount, ERC20 _destToken)\r\n    internal\r\n    returns(\r\n      uint256 _actualDestAmount\r\n    )\r\n  {\r\n    require(_srcToken != _destToken, \"Source matches Destination.\");\r\n    uint256 msgValue;\r\n    uint256 rate;\r\n\r\n    if (_srcToken != ETH_TOKEN_ADDRESS) {\r\n      msgValue = 0;\r\n      _srcToken.approve(KYBER_ADDR, 0);\r\n      _srcToken.approve(KYBER_ADDR, _srcAmount);\r\n    } else {\r\n      msgValue = _srcAmount;\r\n    }\r\n    (,rate) = kyber.getExpectedRate(_srcToken, _destToken, _srcAmount);\r\n    _actualDestAmount = kyber.tradeWithHint.value(msgValue)(\r\n      _srcToken,\r\n      _srcAmount,\r\n      _destToken,\r\n      address(uint160(address(this))),\r\n      MAX_QTY,\r\n      rate,\r\n      address(0),\r\n      PERM_HINT\r\n    );\r\n    require(_actualDestAmount > 0, \"Destination value must be greater than 0\");\r\n    if (_srcToken != ETH_TOKEN_ADDRESS) {\r\n      _srcToken.approve(KYBER_ADDR, 0);\r\n        }\r\n    }\r\n\r\n    function investEthToDai(address _account) public payable returns (bool) {\r\n        require(isRegisteredBenefactor(_account),\"Specified account must be registered.\");\r\n\r\n        handleIndexes(_account, address(DAI_ADDR));\r\n\r\n        uint256 destqty = _kybertrade(ETH_TOKEN_ADDRESS, msg.value, dai);\r\n\r\n        userBalance[_account][address(DAI_ADDR)] = userBalance[_account][address(DAI_ADDR)].add(destqty);\r\n        userInvestments[_account].push(Investment({\r\n                                                timestamp: now,\r\n                                                depositedBy: msg.sender,\r\n                                                srcTokenAddress: address(ETH_TOKEN_ADDRESS),\r\n                                                srcAmount: msg.value,\r\n                                                destTokenAddress: address(DAI_ADDR),\r\n                                                destAmount: destqty\r\n                                                }));\r\n        emit kybertrade(address(ETH_TOKEN_ADDRESS), msg.value, DAI_ADDR, destqty);\r\n\r\n        return true;\r\n    }\r\n\r\n    function investEthToToken(address _account, ERC20 _token) external payable returns (bool) {\r\n        require(isRegisteredBenefactor(_account),\"Sepcified account must be registered\");\r\n        handleIndexes(_account, address(_token));\r\n\r\n        uint256 destqty = _kybertrade(ETH_TOKEN_ADDRESS, msg.value, _token);\r\n        userBalance[_account][address(_token)] = userBalance[_account][address(_token)].add(destqty);\r\n        userInvestments[_account].push(Investment({\r\n                                                timestamp: now,\r\n                                                depositedBy: msg.sender,\r\n                                                srcTokenAddress: address(ETH_TOKEN_ADDRESS),\r\n                                                srcAmount: msg.value,\r\n                                                destTokenAddress: address(_token),\r\n                                                destAmount: destqty\r\n                                                }));\r\n        emit kybertrade(address(ETH_TOKEN_ADDRESS), msg.value, address(_token), destqty);\r\n        return true;\r\n    }\r\n\r\n    function investToken(address _account, ERC20 _token, uint256 _amount) external  returns (bool) {\r\n        require(isRegisteredBenefactor(_account),\"Specified account must be registered\");\r\n\r\n        require(_token.balanceOf(msg.sender) >= _amount, \"Sender balance Too Low.\");\r\n        require(_token.approve(address(this), _amount), \"Fund not approved to transfer senders Token Balance\");\r\n        require(_token.transfer(address(this), _amount), \"Sender hasn'tr transferred tokens.\");\r\n\r\n        handleIndexes(_account, address(_token));\r\n\r\n        userBalance[_account][address(_token)] = userBalance[_account][address(_token)].add(_amount);\r\n        userInvestments[_account].push(Investment({\r\n                                                timestamp: now,\r\n                                                depositedBy: msg.sender,\r\n                                                srcTokenAddress: address(_token),\r\n                                                srcAmount: _amount,\r\n                                                destTokenAddress: address(_token),\r\n                                                destAmount: _amount\r\n                                                }));\r\n        return true;\r\n    }\r\n\r\n    function investTokenToToken(address _account, ERC20 _token, uint256 _amount, ERC20 _dest) external  returns (bool) {\r\n        require(isRegisteredBenefactor(_account), \"Specified account must be registered\");\r\n        require(_token.balanceOf(msg.sender) >= _amount, \"Account token balance must be greater that spscified amount\");\r\n        require(_token.approve(address(this), _amount), \"Contract must be approved to transfer Specified token\");\r\n        require(_token.transfer(address(this), _amount), \"Specified Token must be tranferred from caller to contract\");\r\n\r\n        handleIndexes(_account, address(_token));\r\n\r\n        uint destqty = _kybertrade(_token, _amount, _dest);\r\n        userBalance[_account][address(_token)] = userBalance[_account][address(_token)].add(destqty);\r\n        userInvestments[_account].push(Investment({\r\n                                                timestamp: now,\r\n                                                depositedBy: msg.sender,\r\n                                                srcTokenAddress: address(_token),\r\n                                                srcAmount: _amount,\r\n                                                destTokenAddress: address(_dest),\r\n                                                destAmount: destqty\r\n                                                }));\r\n        emit deposit(_dest, destqty);\r\n        return true;\r\n    }\r\n\r\n    function splitInvestEthToToken(address _account, address[] memory _tokens, uint[] memory _ratios) public payable {\r\n        require(isRegisteredBenefactor(_account),\"Specified account must be registered\");\r\n        require(msg.value > 0, \"Transaction must have ether value\");\r\n        require(_tokens.length == _ratios.length, \"unmatched array lengths\");\r\n\r\n        handleIndexes(_account, address(ETH_TOKEN_ADDRESS));\r\n\r\n        uint256 msgValue = msg.value;\r\n\r\n            require(_tokens.length > 0, \"Array must be greater than 0.\");\r\n            uint quotaTotal;\r\n            for (uint i = 0;i < _tokens.length; i++) {\r\n                quotaTotal = quotaTotal.add(quotaTotal);\r\n            }\r\n\r\n            require(quotaTotal < 100, \"Split Total Greater than 100.\");\r\n\r\n            for (uint i = 0; i < _tokens.length; i++) {\r\n                handleIndexes(_account, address(_tokens[i]));\r\n                uint256 quota = (msg.value * _ratios[i]) / 100;\r\n                require(quota < msg.value, \"Quota Split greater than Message Value\");\r\n                uint destqty = _kybertrade(ETH_TOKEN_ADDRESS, quota, ERC20(_tokens[i]));\r\n                userBalance[_account][address(_tokens[i])] = userBalance[_account][address(_tokens[i])].add(destqty);\r\n                userInvestments[_account].push(Investment({\r\n                                                timestamp: now,\r\n                                                depositedBy: msg.sender,\r\n                                                srcTokenAddress: address(ETH_TOKEN_ADDRESS),\r\n                                                srcAmount: quota,\r\n                                                destTokenAddress: address(_tokens[i]),\r\n                                                destAmount: destqty\r\n                                                }));\r\n                msgValue = msgValue.sub(quota);\r\n                emit kybertrade(address(ETH_TOKEN_ADDRESS),quota, address(_tokens[i]), destqty);\r\n            }\r\n        userBalance[_account][address(ETH_TOKEN_ADDRESS)] = userBalance[_account][address(ETH_TOKEN_ADDRESS)].add(msgValue);\r\n        userInvestments[_account].push(Investment({\r\n                                        timestamp: now,\r\n                                        depositedBy: msg.sender,\r\n                                        srcTokenAddress: address(ETH_TOKEN_ADDRESS),\r\n                                        srcAmount: msgValue,\r\n                                        destTokenAddress: address(ETH_TOKEN_ADDRESS),\r\n                                        destAmount: msgValue\r\n                                        }));\r\n    }\r\n\r\n    function swapTokenToEther (address _account, ERC20 _src, uint _amount) public {\r\n        require(isAccountManager(_account),\"Caller must be registered as an Account Manager\");\r\n        uint destqty = _kybertrade(_src, _amount, ETH_TOKEN_ADDRESS);\r\n        userBalance[_account][address(_src)] = userBalance[_account][address(_src)].sub(_amount);\r\n        userBalance[_account][address(ETH_TOKEN_ADDRESS)] = userBalance[_account][address(ETH_TOKEN_ADDRESS)].add(destqty);\r\n\r\n        emit kybertrade(address(_src), _amount, address(ETH_TOKEN_ADDRESS), destqty);\r\n\r\n    }\r\n\r\n    function swapEtherToToken (address _account, ERC20 _dest, uint _amount) public {\r\n        require(isAccountManager(_account),\"Caller must be registered as an Account Manager\");\r\n        uint destqty = _kybertrade(ETH_TOKEN_ADDRESS, _amount, _dest);\r\n        userBalance[_account][address(_dest)] = userBalance[_account][address(_dest)].add(destqty);\r\n        userBalance[_account][address(ETH_TOKEN_ADDRESS)] = userBalance[_account][address(ETH_TOKEN_ADDRESS)].sub(_amount);\r\n\r\n        emit kybertrade(address(ETH_TOKEN_ADDRESS), _amount, address(_dest), destqty);\r\n\r\n    }\r\n\r\n\r\n    function swapTokenToToken(address _account, ERC20 _src, uint256 _amount, ERC20 _dest) public {\r\n        require(isAccountManager(_account),\"Caller must be registered as an Account Manager\");\r\n        uint destqty = _kybertrade(_src, _amount, _dest);\r\n        userBalance[_account][address(_src)] = userBalance[_account][address(_src)].sub(_amount);\r\n        userBalance[_account][address(_dest)] = userBalance[_account][address(_dest)].add(destqty);\r\n        emit kybertrade(address(_src), _amount, address(_dest), destqty);\r\n\r\n    }\r\n\r\n\r\n\r\n    //Fund Admin Functions\r\n    function updateAdminAddress(address payable _newaddress) external onlyFundAdmin returns (bool) {\r\n        require(_newaddress != address(0),\"New admin address must not be blank\");\r\n        require(_newaddress != ADMIN_ADDR, \"New admin addres must not be current admin address\");\r\n\r\n        ADMIN_ADDR = _newaddress;\r\n        emit managerAddressUpdated(_newaddress);\r\n\r\n    }\r\n\r\n    function updateDaiAddress(address payable _newaddress) external onlyFundAdmin returns (bool) {\r\n        require(_newaddress != address(0),\"New admin address must not be blank\");\r\n        require(_newaddress != DAI_ADDR, \"New DAI Contract adress must not be current DAI Contract Address\");\r\n\r\n        DAI_ADDR = _newaddress;\r\n\r\n    }\r\n\r\n    function updateKyberAddress(address payable _newaddress) external onlyFundAdmin returns (bool) {\r\n        require(_newaddress != address(0),\"New admin address must not be blank\");\r\n        require(_newaddress != KYBER_ADDR, \"New KYBER Contract address must be different from old Contract Address\");\r\n\r\n        KYBER_ADDR = _newaddress;\r\n\r\n    }\r\n\r\n\r\n    // function lend(address _account, )\r\n\r\n    function getBalance(address _account, ERC20 _token) public view returns(uint256) {\r\n        return userBalance[_account][address(_token)];\r\n    }\r\n\r\n\r\n    function withdraw(address payable _account, ERC20 _token, uint256 _amount) public {\r\n        require(isRegisteredBenefactor(address(_account)));\r\n        require(now > accounts[_account].unlockDate);\r\n        require(userBalance[msg.sender][address(_token)] >= _amount);\r\n        if (_token == ETH_TOKEN_ADDRESS) {\r\n                userBalance[msg.sender][address(_token)] = userBalance[msg.sender][address(_token)].sub(_amount);\r\n                msg.sender.transfer(_amount);\r\n        } else {\r\n                userBalance[msg.sender][address(_token)] = userBalance[msg.sender][address(_token)].sub(_amount);\r\n                _token.transfer(msg.sender, _amount);\r\n        }\r\n\r\n    }\r\n\r\n    function closeaccount(address payable _account) public {\r\n        require(isRegisteredBenefactor(_account));\r\n        require(block.timestamp > accounts[_account].unlockDate);\r\n        require(userTokens[_account] > 0, \"User Tokens must be greater than 0\");\r\n\r\n\r\n\r\n        for (uint i = 0; i < userTokens[msg.sender]; i++) {\r\n            address token = usertokenMapping[msg.sender][i];\r\n            uint256 balance = userBalance[msg.sender][token];\r\n            withdraw(_account, ERC20(token), balance);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    //Management functions\r\n\r\n\r\n    //fallback - send eth to manager so he can refund sender\r\n    function () external payable {\r\n        userBalance[ADMIN_ADDR][address(ETH_TOKEN_ADDRESS)] = userBalance[ADMIN_ADDR][address(ETH_TOKEN_ADDRESS)].add(msg.value);\r\n\r\n\r\n\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"developerFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"managerFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newaddress\",\"type\":\"address\"}],\"name\":\"updateKyberAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"_dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"swapEtherToToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isRegisteredBenefactor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_benefactorAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_benefactorName\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"_managerAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_signatories\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_unlockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_preUnlockMonthlyquota\",\"type\":\"uint256\"}],\"name\":\"registerAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newaddress\",\"type\":\"address\"}],\"name\":\"updateDaiAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"investToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"_src\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20\",\"name\":\"_dest\",\"type\":\"address\"}],\"name\":\"swapTokenToToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"investEthToToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFundAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accounts\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"benefactorAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"benefactorName\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"managerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creationDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preUnlockMonthlyquota\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ratios\",\"type\":\"uint256[]\"}],\"name\":\"splitInvestEthToToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"managerTransactionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newaddress\",\"type\":\"address\"}],\"name\":\"updateAdminAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERM_HINT\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isAccountManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userInvestments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"depositedBy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"srcTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usertokenMapping\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ADMIN_ADDR\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20\",\"name\":\"_dest\",\"type\":\"address\"}],\"name\":\"investTokenToToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KYBER_ADDR\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMPOUND_ADDR\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAI_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CDAI_ADDR\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"closeaccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"_src\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"swapTokenToEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"investEthToDai\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_adminAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_daiAddr\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_kyberAddr\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_cdaiAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newaddress\",\"type\":\"address\"}],\"name\":\"managerAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_src\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_dest\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_destqty\",\"type\":\"uint256\"}],\"name\":\"kybertrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ERC20\",\"name\":\"_src\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Mementofund","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000047259b700a4360146e4f359ce29ed8a7ef79a83000000000000000000000000089d24a6b4ccb1b6faa2625fe562bdd9a23260359000000000000000000000000818e6fecd516ecc3849daf6845e3ec868087b755000000000000000000000000f5dce57282a584d2746faf1593d3121fcac444dc","Library":"","LicenseType":"GNU GPLv2","SwarmSource":"bzzr://cdd4d6fc9c20dae8bc6c47455ca958dfc613cc750de93a0e46f461ce949a40dd"}]}