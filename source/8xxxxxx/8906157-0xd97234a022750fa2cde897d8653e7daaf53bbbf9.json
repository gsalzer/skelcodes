{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2019-07-19\r\n*/\r\n\r\npragma solidity ^0.5.7;\r\n\r\n// File: contracts/Ownable/Ownable.sol\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/KYC/IKYC.sol\r\n\r\n/// @title IKYC\r\n/// @notice This contract represents interface for KYC contract\r\ncontract IKYC {\r\n    // Fired after the status for a manager is updated\r\n    event ManagerStatusUpdated(address KYCManager, bool managerStatus);\r\n\r\n    // Fired after the status for a user is updated\r\n    event UserStatusUpdated(address user, bool status);\r\n\r\n    /// @notice Sets status for a manager\r\n    /// @param KYCManager The address of manager for which the status is to be updated\r\n    /// @param managerStatus The status for the manager\r\n    /// @return status of the transaction\r\n    function setKYCManagerStatus(address KYCManager, bool managerStatus)\r\n        public\r\n        returns (bool);\r\n\r\n    /// @notice Sets status for a user\r\n    /// @param userAddress The address of user for which the status is to be updated\r\n    /// @param passedKYC The status for the user\r\n    /// @return status of the transaction\r\n    function setUserAddressStatus(address userAddress, bool passedKYC)\r\n        public\r\n        returns (bool);\r\n\r\n    /// @notice returns the status of a user\r\n    /// @param userAddress The address of user for which the status is to be returned\r\n    /// @return status of the user\r\n    function getAddressStatus(address userAddress) public view returns (bool);\r\n\r\n}\r\n\r\n// File: contracts/KYC/KYC.sol\r\n\r\n/// @title A contract for KYC of platform users\r\n/// @notice This contract is used to authorize any address who is interacting with the ChelleCoin smart contracts platform\r\ncontract KYC is IKYC, Ownable {\r\n    mapping(address => bool) private userStatuses; // A mapping for users and their status i.e. eligible / non-eligible\r\n    mapping(address => bool) public KYCManagers; // A mapping for managers and their status i.e. eligible / non-eligible\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than Managers.\r\n     */\r\n    modifier onlyKYCManager() {\r\n        require(\r\n            KYCManagers[msg.sender],\r\n            \"Only KYC manager can call this function.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// @notice Sets status for a manager\r\n    /// @param KYCManager The address of manager for which the status is to be updated\r\n    /// @param managerStatus The status for the manager\r\n    /// @return status of the transaction\r\n    function setKYCManagerStatus(address KYCManager, bool managerStatus)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(\r\n            KYCManager != address(0),\r\n            \"Provided mannager address is not valid.\"\r\n        );\r\n        require(\r\n            KYCManagers[KYCManager] != managerStatus,\r\n            \"This status of manager is already set.\"\r\n        );\r\n\r\n        KYCManagers[KYCManager] = managerStatus;\r\n\r\n        emit ManagerStatusUpdated(KYCManager, managerStatus);\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @notice Sets status for a user\r\n    /// @param userAddress The address of user for which the status is to be updated\r\n    /// @param passedKYC The status for the user\r\n    /// @return status of the transaction\r\n    function setUserAddressStatus(address userAddress, bool passedKYC)\r\n        public\r\n        onlyKYCManager\r\n        returns (bool)\r\n    {\r\n        require(\r\n            userAddress != address(0),\r\n            \"Provided user address is not valid.\"\r\n        );\r\n        require(\r\n            userStatuses[userAddress] != passedKYC,\r\n            \"This status of user is already set.\"\r\n        );\r\n\r\n        userStatuses[userAddress] = passedKYC;\r\n\r\n        emit UserStatusUpdated(userAddress, passedKYC);\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @notice returns the status of a user\r\n    /// @param userAddress The address of user for which the status is to be returned\r\n    /// @return status of the user\r\n    function getAddressStatus(address userAddress) public view returns (bool) {\r\n        require(\r\n            userAddress != address(0),\r\n            \"Provided user address is not valid.\"\r\n        );\r\n        return userStatuses[userAddress];\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"KYCManager\",\"type\":\"address\"},{\"name\":\"managerStatus\",\"type\":\"bool\"}],\"name\":\"setKYCManagerStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"passedKYC\",\"type\":\"bool\"}],\"name\":\"setUserAddressStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"KYCManagers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getAddressStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"KYCManager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"managerStatus\",\"type\":\"bool\"}],\"name\":\"ManagerStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"UserStatusUpdated\",\"type\":\"event\"}]","ContractName":"KYC","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://179ce907405d7a02945521798d35ef463a48f17c42ec23ecc56c68cc26ae1b98"}]}