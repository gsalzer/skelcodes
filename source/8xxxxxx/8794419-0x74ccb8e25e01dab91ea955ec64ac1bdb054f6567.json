{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\ncontract BastionEx {\r\nbytes32 public standard;\r\nbytes32 public name;\r\nbytes32 public symbol;\r\nuint256 public totalSupply;\r\nuint8 public decimals;\r\nbool public allowTransactions;\r\nmapping (address => uint256) public balanceOf;\r\n \r\n mapping (address => mapping (address => uint256)) public allowance;\r\nfunction transfer(address _to, uint256 _value)public returns (bool success);\r\nfunction approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success);\r\nfunction approve(address _spender, uint256 _value) public returns (bool success);\r\nfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n}\r\ncontract SafeMath {\r\nfunction safeMul(uint256 a, uint256 b) internal pure returns (uint256 c) { if (a == 0) {\r\nreturn 0; }\r\nc = a * b;\r\nassert(c / a == b); return c;\r\n}\r\nfunction safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n// uint256 c = a / b;\r\n// assert(a == b * c + a % b); // There is no case in which this doesn't hold return a / b;\r\n}\r\nfunction safeSub(uint256 a, uint256 b) internal pure returns (uint256) { assert(b <= a);\r\nreturn a - b;\r\n}\r\nfunction safeAdd(uint256 a, uint256 b) internal pure returns (uint256 c) { c = a + b;\r\nassert(c >= a);\r\nreturn c;\r\n}\r\n \r\n  }\r\ncontract BastionDex is SafeMath {\r\naddress public owner;\r\nmapping (address => uint256) public invalidOrder;\r\nevent SetOwner(address indexed previousOwner, address indexed newOwner); modifier onlyOwner {\r\nrequire(msg.sender == owner);\r\n_; }\r\nfunction setOwner(address newOwner)public onlyOwner { emit SetOwner(owner, newOwner);\r\nowner = newOwner;\r\n}\r\nfunction invalidateOrdersBefore(address user, uint256 nonce) public onlyAdmin { require(nonce > invalidOrder[user]);\r\ninvalidOrder[user] = nonce;\r\n}\r\nmapping (address => mapping (address => uint256)) public tokens; //mapping of token addresses to mapping of account balances\r\nmapping (address => bool) public admins;\r\nmapping (address => uint256) public lastActiveTransaction;\r\naddress public feeAccount;\r\nuint256 public inactivityReleasePeriod;\r\nevent Trade(address tokenBuy, uint256 amountBuy, address tokenSell, uint256\r\namountSell, address get, address give);\r\nevent Deposit(address token, address user, uint256 amount, uint256 balance); event Withdraw(address token, address user, uint256 amount, uint256 balance);\r\nfunction setInactivityReleasePeriod(uint256 expiry) public onlyAdmin returns (bool success) {\r\nrequire(expiry < 1000000);\r\n\r\n inactivityReleasePeriod = expiry;\r\nreturn true; }\r\nconstructor(address feeAccount_) public { owner = msg.sender;\r\nfeeAccount = feeAccount_; inactivityReleasePeriod = 100000;\r\n}\r\nfunction setAdmin(address admin, bool isAdmin) public onlyOwner { admins[admin] = isAdmin;\r\n}\r\nmodifier onlyAdmin {\r\nrequire(msg.sender == owner && admins[msg.sender]);\r\n_; }\r\nfunction() external { revert();\r\n}\r\nfunction depositToken(address token, uint256 amount) public { \r\n    tokens[token][msg.sender] = safeAdd(tokens[token][msg.sender], amount); \r\n    lastActiveTransaction[msg.sender] = block.number; \r\n    require(BastionEx(token).transferFrom(msg.sender, this, amount));\r\nemit Deposit(token, msg.sender, amount, tokens[token][msg.sender]); }\r\nfunction deposit() public payable {\r\ntokens[address(0)][msg.sender] = safeAdd(tokens[address(0)][msg.sender], msg.value); lastActiveTransaction[msg.sender] = block.number;\r\nemit Deposit(address(0), msg.sender, msg.value, tokens[address(0)][msg.sender]);\r\n}\r\nfunction withdrawToken(address token, uint256 amount) public returns (bool) {\r\n\r\n require(safeSub(block.number, lastActiveTransaction[msg.sender]) > inactivityReleasePeriod);\r\nrequire(tokens[token][msg.sender] > amount);\r\ntokens[token][msg.sender] = safeSub(tokens[token][msg.sender], amount); if (token == address(0)) {\r\nmsg.sender.transfer(amount); } else {\r\nrequire(BastionEx(token).transfer(msg.sender, amount)); }\r\nemit Withdraw(token, msg.sender, amount, tokens[token][msg.sender]); }\r\nfunction adminWithdraw(address token, uint256 amount, address user, uint256 feeWithdrawal) public onlyAdmin returns (bool) {\r\nif (feeWithdrawal > 50 finney) feeWithdrawal = 50 finney;\r\nrequire(tokens[token][user] > amount);\r\ntokens[token][user] = safeSub(tokens[token][user], amount);\r\ntokens[token][feeAccount] = safeAdd(tokens[token][feeAccount], safeMul(feeWithdrawal,\r\namount) / 1 ether);\r\namount = safeMul((1 ether - feeWithdrawal), amount) / 1 ether; if (token == address(0)) {\r\nuser.transfer(amount); } else {\r\nrequire(BastionEx(token).transfer(user, amount)); }\r\nlastActiveTransaction[user] = block.number;\r\nemit Withdraw(token, user, amount, tokens[token][user]); }\r\nfunction balanceOf(address token, address user) public constant returns (uint256) { return tokens[token][user];\r\n}\r\nfunction trade(uint256[8] X, address[4] Y) public onlyAdmin returns (bool) { /* amount is in amountBuy terms */\r\n/* X\r\n[0] amountBuy [1] amountSell [2] expires\r\n\r\n[3] nonce\r\n[4] amount\r\n[5] tradeNonce [6] feeMake [7] feeTake\r\nY\r\n[0] tokenBuy [1] tokenSell [2] maker\r\n[3] taker\r\n*/\r\nrequire(invalidOrder[Y[2]] < X[3]);\r\nif (X[6] > 100 finney) X[6] = 100 finney;\r\nif (X[7] > 100 finney) X[7] = 100 finney;\r\nrequire(tokens[Y[0]][Y[3]] > X[4]);\r\nrequire(tokens[Y[1]][Y[2]] > (safeMul(X[1], X[4]) / X[0]));\r\ntokens[Y[0]][Y[3]] = safeSub(tokens[Y[0]][Y[3]], X[4]);\r\ntokens[Y[0]][Y[2]] = safeAdd(tokens[Y[0]][Y[2]], safeMul(X[4], ((1 ether) - X[6])) / (1\r\nether));\r\ntokens[Y[0]][feeAccount] = safeAdd(tokens[Y[0]][feeAccount], safeMul(X[4], X[6]) / (1\r\nether));\r\ntokens[Y[1]][Y[2]] = safeSub(tokens[Y[1]][Y[2]], safeMul(X[1], X[4]) / X[0]); tokens[Y[1]][Y[3]] = safeAdd(tokens[Y[1]][Y[3]], safeMul(safeMul(((1 ether) - X[7]), X[1]),\r\nX[4]) / X[0] / (1 ether));\r\ntokens[Y[1]][feeAccount] = safeAdd(tokens[Y[1]][feeAccount], safeMul(safeMul(X[7],\r\nX[1]), X[4]) / X[0] / (1 ether)); lastActiveTransaction[Y[2]] = block.number; lastActiveTransaction[Y[3]] = block.number;\r\n} }","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastActiveTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"feeWithdrawal\",\"type\":\"uint256\"}],\"name\":\"adminWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"admin\",\"type\":\"address\"},{\"name\":\"isAdmin\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"X\",\"type\":\"uint256[8]\"},{\"name\":\"Y\",\"type\":\"address[4]\"}],\"name\":\"trade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"invalidOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"invalidateOrdersBefore\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"setInactivityReleasePeriod\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inactivityReleasePeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"feeAccount_\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"SetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenBuy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountBuy\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenSell\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountSell\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"get\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"give\",\"type\":\"address\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"}]","ContractName":"BastionDex","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000055cc8628681c172b86ed4260c5fc4f8c84706de7","Library":"","LicenseType":"None","SwarmSource":"bzzr://93dc0f67c4695936513215cba8e5d2e70dd73ca20ba8e7eb592cc47c4e644098"}]}