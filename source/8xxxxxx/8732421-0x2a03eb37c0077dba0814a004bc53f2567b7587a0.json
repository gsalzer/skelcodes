{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n * DO NOT EDIT! DO NOT EDIT! DO NOT EDIT!\r\n *\r\n * This is an automatically generated file. It will be overwritten.\r\n *\r\n * For the original source see\r\n *    '/Users/swaldman/Dropbox/BaseFolders/development-why/gitproj/eth-quip/src/main/solidity/Quip.sol'\r\n */\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/* Importing from 'URL(https://raw.githubusercontent.com/swaldman/solstragglers/b5086e28547b68fdf86946aa39a8029aff7ac01b/src/main/solidity/)' with key 'https://github.com/swaldman/solstragglers/blob/b5086e28547b68fdf86946aa39a8029aff7ac01b/src/main/solidity/solstragglers.sol'. */\r\n\r\n\r\nlibrary solstragglers {\r\n  function shittyRandom() internal view returns ( uint number ) {\r\n    number = uint( blockhash( block.number - 1 ) );  \t   \r\n  }\r\n}\r\n/* End importing from 'URL(https://raw.githubusercontent.com/swaldman/solstragglers/b5086e28547b68fdf86946aa39a8029aff7ac01b/src/main/solidity/)' with key 'https://github.com/swaldman/solstragglers/blob/b5086e28547b68fdf86946aa39a8029aff7ac01b/src/main/solidity/solstragglers.sol'. */\r\n\r\n\r\ncontract ERC20 {\r\n  function totalSupply() public view returns (uint);\r\n  function balanceOf(address tokenOwner) public view returns (uint balance);\r\n  function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n  function transfer(address to, uint tokens) public returns (bool success);\r\n  function approve(address spender, uint tokens) public returns (bool success);\r\n  function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n \r\n  event Transfer(address indexed from, address indexed to, uint tokens);\r\n  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract Quip {\r\n\r\n  event QuipAdded( address indexed quipper, string quip );\r\n  event VoterRegistered( address indexed voter );\r\n  event VoteUpdated( address indexed voter, address indexed quipper, uint256 indexed quipIndex, string quip );\r\n  event QuipPaid( address indexed voter, address indexed quipper, uint256 indexed quipIndex, string quip, address payoutToken, uint256 payout );\r\n\r\n  string[]                   _quips;\r\n  address[]                  _quippers;\r\n  address[]                  _voters;\r\n  mapping (address=>bool)    _voted;\r\n  mapping (address=>uint256) _votes;\r\n\r\n  \r\n  // public accessors\r\n\r\n  function quipCount()\r\n    public\r\n    view\r\n    returns( uint256 count ) {\r\n    count = _quips.length;\r\n  }\r\n\r\n  function getQuip(uint256 i)\r\n    public\r\n    view\r\n    returns( string memory quip, address quipper ) {\r\n    quip    = _quips[i];\r\n    quipper = _quippers[i];\r\n  }\r\n\r\n  function hasVoted( address voter )\r\n    public\r\n    view\r\n    returns ( bool voted ) {\r\n    voted = _voted[voter];\r\n  }\r\n\r\n  function currentVote( address voter )\r\n    public\r\n    view\r\n    returns( uint256 index ) {\r\n    require( _voted[voter] );\r\n    index = _votes[voter];\r\n  }\r\n\r\n  function uniformRandomQuip()\r\n    public\r\n    view\r\n    returns( string memory quip, address quipper ) {\r\n    uint256 quipIndex = solstragglers.shittyRandom() % _quips.length;\r\n    quip    = _quips[ quipIndex ];\r\n    quipper = _quippers[ quipIndex ];\r\n  }\r\n\r\n  function voteWeightedRandomQuip()\r\n    public\r\n    view\r\n    returns( string memory quip, address quipper ) {\r\n    ( , uint256 quipIndex ) = drawQuipper();\r\n    quip    = _quips[quipIndex];\r\n    quipper = _quippers[ quipIndex ];\r\n  }\r\n  \r\n\r\n  // public mutators\r\n\r\n  function addQuip( string memory quip )\r\n    public\r\n    returns( uint256 index ) {\r\n    _quips.push( quip );\r\n    _quippers.push( msg.sender );\r\n    index = _quips.length - 1;\r\n\r\n    emit QuipAdded( msg.sender, quip );\r\n  }\r\n\r\n  // should fail bounds checks in event emission if the index is bad, so we don't check bounds explicitly\r\n  function vote( uint256 index ) \r\n    public {\r\n    if (! _voted[msg.sender]) { // first-time voter\r\n      _voters.push( msg.sender );\r\n      _voted[msg.sender] = true;\r\n      emit VoterRegistered( msg.sender );\r\n    }\r\n    address quipper = _quippers[index];\r\n    require( msg.sender != quipper, \"Quippers are disallowed from voting for their own quips.\" );\r\n    _votes[msg.sender] = index;\r\n    emit VoteUpdated( msg.sender, quipper, index, _quips[index] ); \r\n  }\r\n\r\n  function payout( address token, uint256 amount )\r\n    public\r\n    payable {\r\n    ( address voter, uint256 quipIndex ) = drawQuipper();\r\n    address quipper = _quippers[quipIndex];\r\n    doPayout( quipper, token, amount );\r\n    emit QuipPaid( voter, quipper, quipIndex, _quips[quipIndex], token, amount );    \r\n  }\r\n\r\n  // private functions\r\n  function doPayout( address recipient, address token, uint256 amount )\r\n    private {\r\n    require( token == address(0) || msg.value == 0, \"Pay either in Ether, or pay with only a token, not both.\" );\r\n    if ( token == address(0) ) {\r\n      require( msg.value >= amount, \"Send enough ether to make your payout, if you are sending Ether.\" );\r\n      address payable payableRecipient = address(uint160(recipient));\r\n      payableRecipient.transfer( amount );\r\n      uint256 change = msg.value - amount;\r\n      if ( change > 0 ) {\r\n\tmsg.sender.transfer( change );\r\n      }\r\n    }\r\n    else {\r\n      ERC20 erc20 = ERC20(token);\r\n      require( erc20.allowance( msg.sender, address(this) ) >= amount, \"If you are paying in a token, this contract must be allowed to spend the amount you wish to pay on your behalf.\" );\r\n      erc20.transferFrom( msg.sender, recipient, amount );\r\n    }\r\n  }\r\n\r\n  function drawQuipper()\r\n    private\r\n    view\r\n    returns( address voter, uint256 quipIndex ) {\r\n    voter     = _voters[ solstragglers.shittyRandom() % _voters.length ];\r\n    quipIndex = _votes[voter];\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"hasVoted\",\"outputs\":[{\"name\":\"voted\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payout\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniformRandomQuip\",\"outputs\":[{\"name\":\"quip\",\"type\":\"string\"},{\"name\":\"quipper\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"voteWeightedRandomQuip\",\"outputs\":[{\"name\":\"quip\",\"type\":\"string\"},{\"name\":\"quipper\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getQuip\",\"outputs\":[{\"name\":\"quip\",\"type\":\"string\"},{\"name\":\"quipper\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"quipCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"quip\",\"type\":\"string\"}],\"name\":\"addQuip\",\"outputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"currentVote\",\"outputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"quipper\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"quip\",\"type\":\"string\"}],\"name\":\"QuipAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"VoterRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"quipper\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"quipIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"quip\",\"type\":\"string\"}],\"name\":\"VoteUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"quipper\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"quipIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"quip\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"payoutToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"payout\",\"type\":\"uint256\"}],\"name\":\"QuipPaid\",\"type\":\"event\"}]","ContractName":"Quip","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU LGPLv2.1","SwarmSource":"bzzr://18329159472c803672f1a43f8afdfe8d9b9a6c7368b27131a510a31348ee291b"}]}