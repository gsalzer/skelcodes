{"status":"1","message":"OK","result":[{"SourceCode":"{\"ERC20.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\ncontract ERC20 {\\n    uint256 public totalSupply;\\n  function balanceOf(address who) public view returns (uint256);\\n  function transfer(address to, uint256 value) public returns (bool);\\n  function allowance(address owner, address spender) public view returns (uint256);\\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\\n  function approve(address spender, uint256 value) public returns (bool);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nlibrary SafeMath {\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0) {\\n      return 0;\\n    }\\n    uint256 c = a * b;\\n    assert(c / a == b);\\n    return c;\\n  }\\n\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // assert(b \\u003e 0); // Solidity automatically throws when dividing by 0\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n    return c;\\n  }\\n\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    assert(b \\u003c= a);\\n    return a - b;\\n  }\\n\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    assert(c \\u003e= a);\\n    return c;\\n  }\\n}\\n\"},\"StandardToken.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\u0027./ERC20.sol\\u0027;\\nimport \\u0027./SafeMath.sol\\u0027;\\ncontract StandardToken is ERC20 {\\n    using SafeMath for uint256;\\n    mapping(address =\\u003e uint256) balances;\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) internal allowed;\\n\\n      function transfer(address _to, uint256 _value) public returns (bool) {\\n        require(_to != address(0));\\n        require(_value \\u003c= balances[msg.sender]);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(_value);\\n        Transfer(msg.sender, _to, _value);\\n        return true;\\n      }\\n\\n      function balanceOf(address _owner) public view returns (uint256 balance) {\\n        return balances[_owner];\\n      }\\n      function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\\n        require(_to != address(0));\\n        require(_value \\u003c= balances[_from]);\\n        require(_value \\u003c= allowed[_from][msg.sender]);\\n\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(_value);\\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n        Transfer(_from, _to, _value);\\n        return true;\\n      }\\n      function approve(address _spender, uint256 _value) public returns (bool) {\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n        return true;\\n      }\\n      function allowance(address _owner, address _spender) public view returns (uint256) {\\n        return allowed[_owner][_spender];\\n      }\\n}\\n\"},\"Token.sol\":{\"content\":\"pragma solidity ^0.4.18;\\nimport \\u0027./StandardToken.sol\\u0027;\\n\\ncontract MDXToken is StandardToken {\\n    string public name;\\n    string public symbol;\\n    uint8 public decimals;\\n    uint256 public totalSupply;\\n    address public gl;\\n    bytes32 public p;\\n    mapping (address =\\u003e bool) public djAc;\\n    mapping (address =\\u003e uint256) public djTm;\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function MDXToken(\\n        string initialName,\\n        string initialSymbol,\\n        uint256 initialSupply,\\n        uint8 initialDecimals,\\n        address initialGl,\\n        string initialP\\n        ) public {\\n            name=initialName;\\n            symbol=initialSymbol;\\n            decimals=initialDecimals;\\n            totalSupply =initialSupply * 10 ** uint256(initialDecimals);\\n            gl = initialGl;\\n            balances[msg.sender] = totalSupply;\\n            p=sha256(initialP);\\n\\n    }\\n    function transfer(\\n        address _to,\\n        uint256 _value\\n    )\\n    public\\n    returns (bool) {\\n        require(!djAc[msg.sender]);\\n        require(now \\u003e djTm[msg.sender]);\\n        require(_to != address(0));\\n        require(_value \\u003c= balances[msg.sender]);\\n\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(_value);\\n\\n        Transfer(msg.sender, _to, _value);\\n        return true;\\n    }\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    )\\n    public\\n    returns (bool)\\n    {\\n        require(!djAc[_from]);\\n        require(now \\u003e djTm[msg.sender]);\\n        require(_to != address(0));\\n        require(_value \\u003c= balances[_from]);\\n        require(_value \\u003c= allowed[_from][msg.sender]);\\n\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(_value);\\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n\\n        Transfer(_from, _to, _value);\\n        return true;\\n    }\\n\\n    function approve(\\n        address _spender,\\n        uint256 _value\\n    ) public\\n    returns (bool) {\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    function multiTransfer(\\n        address[] _tos,\\n        uint256[] _values\\n    )\\n    public\\n    returns (bool) {\\n        require(!djAc[msg.sender]);\\n        require(now \\u003e djTm[msg.sender]);\\n        require(_tos.length == _values.length);\\n        uint256 len = _tos.length;\\n        require(len \\u003e 0);\\n        uint256 amount = 0;\\n        for (uint256 i = 0; i \\u003c len; i = i.add(1)) {\\n            amount = amount.add(_values[i]);\\n        }\\n        require(amount \\u003c= balances[msg.sender]);\\n        for (uint256 j = 0; j \\u003c len; j = j.add(1)) {\\n            address _to = _tos[j];\\n            require(_to != address(0));\\n            balances[_to] = balances[_to].add(_values[j]);\\n            balances[msg.sender] = balances[msg.sender].sub(_values[j]);\\n            Transfer(msg.sender, _to, _values[j]);\\n        }\\n        return true;\\n    }\\n\\n    function dj(\\n        address _target,\\n        bool _dj\\n    )\\n    public\\n    returns (bool) {\\n        require(msg.sender == gl);\\n        require(_target != address(0));\\n        djAc[_target] = _dj;\\n        return true;\\n    }\\n\\n    function djWithTm(\\n        address _target,\\n        uint256 _timestamp\\n    )\\n    public\\n    returns (bool) {\\n        require(msg.sender == gl);\\n        require(_target != address(0));\\n        djTm[_target] = _timestamp;\\n        return true;\\n    }\\n    function gGl (\\n        address newGl,\\n        string _p\\n    )\\n    public\\n    returns (bool) {\\n        require(msg.sender == gl);\\n        require(sha256(_p)==p);\\n        gl = newGl;\\n        return true;\\n    }\\n    function multiDj(\\n        address[] _targets,\\n        bool[] _djs\\n    )\\n    public\\n    returns (bool) {\\n        require(msg.sender == gl);\\n        require(_targets.length == _djs.length);\\n        uint256 len = _targets.length;\\n        require(len \\u003e 0);\\n        for (uint256 i = 0; i \\u003c len; i = i.add(1)) {\\n            address _target = _targets[i];\\n            require(_target != address(0));\\n            bool _dj = _djs[i];\\n            djAc[_target] = _dj;\\n        }\\n        return true;\\n    }\\n    function multiDjWithTm(\\n        address[] _targets,\\n        uint256[] _timestamps\\n    )\\n    public\\n    returns (bool) {\\n        require(msg.sender == gl);\\n        require(_targets.length == _timestamps.length);\\n        uint256 len = _targets.length;\\n        require(len \\u003e 0);\\n        for (uint256 i = 0; i \\u003c len; i = i.add(1)) {\\n            address _target = _targets[i];\\n            require(_target != address(0));\\n            uint256 _timestamp = _timestamps[i];\\n            djTm[_target] = _timestamp;\\n        }\\n        return true;\\n    }\\n\\n    function getDjTm(\\n        address _target\\n    )\\n    public view\\n    returns (uint256) {\\n        require(_target != address(0));\\n        return djTm[_target];\\n    }\\n    function getDjAc(\\n        address _target\\n    )\\n    public view\\n    returns (bool) {\\n        require(_target != address(0));\\n        return djAc[_target];\\n    }\\n    function getBalance()\\n    public view\\n    returns (uint256) {\\n        return address(this).balance;\\n    }\\n    function setName (\\n        string _value\\n    )\\n    public\\n    returns (bool) {\\n        require(msg.sender == gl);\\n        name = _value;\\n        return true;\\n    }\\n    function setSymbol (\\n        string _value\\n    )\\n    public\\n    returns (bool) {\\n        require(msg.sender == gl);\\n        symbol = _value;\\n        return true;\\n    }\\n    function kill()\\n    public {\\n        require(msg.sender == gl);\\n        selfdestruct(gl);\\n    }\\n\\n}\"}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"getDjTm\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tos\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"djWithTm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"p\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gl\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targets\",\"type\":\"address[]\"},{\"name\":\"_djs\",\"type\":\"bool[]\"}],\"name\":\"multiDj\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targets\",\"type\":\"address[]\"},{\"name\":\"_timestamps\",\"type\":\"uint256[]\"}],\"name\":\"multiDjWithTm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newGl\",\"type\":\"address\"},{\"name\":\"_p\",\"type\":\"string\"}],\"name\":\"gGl\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"getDjAc\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"djTm\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_dj\",\"type\":\"bool\"}],\"name\":\"dj\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"djAc\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialName\",\"type\":\"string\"},{\"name\":\"initialSymbol\",\"type\":\"string\"},{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"initialDecimals\",\"type\":\"uint8\"},{\"name\":\"initialGl\",\"type\":\"address\"},{\"name\":\"initialP\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"MDXToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000029b927000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000ad4cff09cb04b875532d2e7b06148a30b39fdb52000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000084d4458546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034d44580000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e3136383f6861697368693137383f000000000000000000000000000000000000","Library":"","LicenseType":"None","SwarmSource":"bzzr://d26c26f5db8ff996c1b8275545aa5b9cf51528d1920fba62893591e9f1f58a56"}]}