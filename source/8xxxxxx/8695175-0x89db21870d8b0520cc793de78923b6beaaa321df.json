{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.0;\r\ncontract LuckUtils{\r\n    struct User{\r\n        address raddr;\r\n        uint8 valid;\r\n        uint recode;\r\n    }\r\n    struct Wallet{\r\n        uint last_invest;\r\n        uint profit_d;\r\n        uint index;\r\n        uint8 status;\r\n        uint profit_s;\r\n        uint profit;\r\n        uint amount;\r\n        uint rn;\r\n    }\r\n    struct Invset{\r\n        uint amount;\r\n        uint8 lv;\r\n        uint8 day;\r\n        uint8 share;\r\n        address addr;\r\n        uint8 notDone;\r\n        uint time;\r\n    }\r\n    struct Journal{\r\n        uint amount;\r\n        uint8 tag;\r\n        uint time;\r\n    }\r\n    address private owner = 0x008C35450C696a9312Aef0f45d0813056Cc57759;\r\n    uint private uinwei = 1 ether;\r\n    uint private minAmount = 1;\r\n    uint private maxAmount1 = 5;\r\n    uint private maxAmount2 = 10;\r\n    uint private maxAmount3 = 50;\r\n    constructor()public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier IsOwner{\r\n        require(msg.sender==owner,\"not owner\");\r\n        _;\r\n    }\r\n\r\n    function pstatic(uint256 amount,uint8 lv) public pure returns(uint256){\r\n        if(lv==1){\r\n            return amount*5/1000;\r\n        }else if(lv==2){\r\n            return amount/100;\r\n        }else if(lv==3){\r\n            return amount*12/1000;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function pdynamic(uint256 uinam,uint8 uLv,uint256 rei,uint8 riL2,uint remRn,uint256 layer) public pure returns(uint256){\r\n        uint256 samount = 0;\r\n        if(uinam<=0){\r\n            return 0;\r\n        }else if(rei<=0){\r\n            return 0;\r\n        }else if(riL2==3||rei>uinam){\r\n            samount = pstatic(uinam,uLv);\r\n        }else{\r\n            samount = pstatic(rei,uLv);\r\n        }\r\n\r\n        if(riL2 == 1){\r\n            if(layer==1){\r\n                return samount/2;\r\n            }else if(layer==2){\r\n                return samount/5;\r\n            }else if(layer==3){\r\n                return samount/10;\r\n            }else{\r\n                return 0;\r\n            }\r\n        }else if(riL2 == 2||riL2 == 3){\r\n            if(layer==1){\r\n                return samount;\r\n            }else if(layer==2){\r\n                return samount*70/100;\r\n            }else if(layer==3){\r\n                return samount/2;\r\n            }else if(layer>=4&&layer<=10){\r\n                return samount/10;\r\n            }else if(layer>=11&&layer<=20){\r\n                return samount*5/100;\r\n            }else if(layer>=21&&remRn>=2){\r\n                return samount/100;\r\n            }else{\r\n                return 0;\r\n            }\r\n        }else{\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function check(uint amount,uint open3)public view returns (bool,uint8){\r\n\r\n        if(amount%uinwei != 0){\r\n            return (false,0);\r\n        }\r\n\r\n        uint amountEth = amount/uinwei;\r\n\r\n        if(amountEth>=minAmount&&amountEth<=maxAmount1){\r\n            return (true,1);\r\n        }else if(amountEth>maxAmount1&&amountEth<=maxAmount2){\r\n            return (true,2);\r\n        }else if(open3==1&&amountEth>maxAmount2&&amountEth<=maxAmount3){\r\n            return (true,3);\r\n        }else{\r\n            return (false,0);\r\n        }\r\n    }\r\n\r\n    function isSufficient(uint amount,uint betPool,uint riskPool,uint thisBln) public pure returns(bool,uint256){\r\n        if(amount>0&&betPool>amount){\r\n            if(thisBln>riskPool){\r\n                uint256 balance = thisBln-riskPool;\r\n                if(balance>=amount){\r\n                    return (true,amount);\r\n                }\r\n                return (false,balance);\r\n            }\r\n        }\r\n        return (false,0);\r\n    }\r\n\r\n    function currTimeInSeconds() public view returns (uint256){\r\n        return block.timestamp;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"lv\",\"type\":\"uint8\"}],\"name\":\"pstatic\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"betPool\",\"type\":\"uint256\"},{\"name\":\"riskPool\",\"type\":\"uint256\"},{\"name\":\"thisBln\",\"type\":\"uint256\"}],\"name\":\"isSufficient\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currTimeInSeconds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"open3\",\"type\":\"uint256\"}],\"name\":\"check\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"uinam\",\"type\":\"uint256\"},{\"name\":\"uLv\",\"type\":\"uint8\"},{\"name\":\"rei\",\"type\":\"uint256\"},{\"name\":\"riL2\",\"type\":\"uint8\"},{\"name\":\"remRn\",\"type\":\"uint256\"},{\"name\":\"layer\",\"type\":\"uint256\"}],\"name\":\"pdynamic\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"LuckUtils","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://a7a10a92d9bf093ed6f9e2c8a6154b6db03dbdf718f0a94e43cb17b25af10619"}]}