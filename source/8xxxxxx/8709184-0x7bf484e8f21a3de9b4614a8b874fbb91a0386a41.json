{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.11;\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title BTALToken interface\r\n */\r\ninterface IBTALToken {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function released() external view returns (bool);\r\n    function isAdmin(address account) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @title Crowdsale interface\r\n */\r\ninterface ICrowdsale {\r\n    function reserved() external view returns (uint256);\r\n    function reserveLimit() external view returns (uint256);\r\n    function reserveTrigger() external view returns (uint256);\r\n    function isEnlisted(address account) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @title Exchange contract\r\n */\r\ncontract Exchange {\r\n    using SafeMath for uint256;\r\n\r\n    IBTALToken public BTAL;\r\n    ICrowdsale public crowdsale;\r\n\r\n    address payable private _reserveAddress;\r\n\r\n    uint256 private _balance;\r\n\r\n    modifier inActiveState() {\r\n        require(\r\n            crowdsale.reserved() >= crowdsale.reserveLimit()\r\n            && !BTAL.released()\r\n            );\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(BTAL.isAdmin(msg.sender), \"Caller has no permission\");\r\n        _;\r\n    }\r\n\r\n    event Exchanged(address user, uint256 tokenAmount, uint256 weiAmount);\r\n    event BalanceIncreased(address user, uint256 amount);\r\n\r\n    constructor(address BTALAddr, address crowdsaleAddr, address payable reserveAddress) public {\r\n        require(BTALAddr != address(0) && crowdsaleAddr != address(0) && reserveAddress != address(0));\r\n\r\n        BTAL = IBTALToken(BTALAddr);\r\n        crowdsale = ICrowdsale(crowdsaleAddr);\r\n        _reserveAddress = reserveAddress;\r\n        _balance = address(this).balance;\r\n    }\r\n\r\n    function() external payable {\r\n        acceptETH();\r\n    }\r\n\r\n    function acceptETH() public payable {\r\n        _balance += msg.value;\r\n        emit BalanceIncreased(msg.sender, msg.value);\r\n    }\r\n\r\n    function receiveApproval(address payable from, uint256 amount, address token, bytes calldata extraData) external {\r\n        require(token == address(BTAL));\r\n        exchange(from, amount);\r\n    }\r\n\r\n    function exchange(address payable account, uint256 amount) public inActiveState {\r\n        require(crowdsale.isEnlisted(account));\r\n        BTAL.transferFrom(account, address(this), amount);\r\n        BTAL.transfer(_reserveAddress, amount);\r\n\r\n        uint256 weiAmount = getETHAmount(amount);\r\n\r\n        account.transfer(weiAmount);\r\n\r\n        emit Exchanged(account, amount, weiAmount);\r\n    }\r\n\r\n    function finish() public onlyAdmin {\r\n        require(BTAL.released());\r\n        _reserveAddress.transfer(address(this).balance);\r\n    }\r\n\r\n    function setCrowdsaleAddr(address addr) public onlyAdmin {\r\n        require(addr != address(0));\r\n        require(isContract(addr));\r\n        crowdsale = ICrowdsale(addr);\r\n    }\r\n\r\n    function withdrawERC20(address ERC20Token, address recipient) external onlyAdmin {\r\n\r\n        uint256 amount = IBTALToken(ERC20Token).balanceOf(address(this));\r\n        require(amount > 0);\r\n        IBTALToken(ERC20Token).transfer(recipient, amount);\r\n\r\n    }\r\n\r\n    function enlisted(address addr) public view returns(bool) {\r\n        if (addr == address(this)) {\r\n            return true;\r\n        }\r\n        return crowdsale.isEnlisted(addr);\r\n    }\r\n\r\n    function getETHAmount(uint256 tokenAmount) public view returns(uint256) {\r\n        return tokenAmount.mul(_balance).div(crowdsale.reserveTrigger());\r\n    }\r\n\r\n    function reserveAddress() public view returns(address payable) {\r\n        return _reserveAddress;\r\n    }\r\n\r\n    function isContract(address addr) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"exchange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BTAL\",\"outputs\":[{\"internalType\":\"contract IBTALToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"ERC20Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsale\",\"outputs\":[{\"internalType\":\"contract ICrowdsale\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"enlisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finish\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setCrowdsaleAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"getETHAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"BTALAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"crowdsaleAddr\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"reserveAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"Exchanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BalanceIncreased\",\"type\":\"event\"}]","ContractName":"Exchange","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000a888643d9284c02ef149308aed7cc8517e02fac4000000000000000000000000cd5ff8c51b39395183d823092e4a9e911d8097b2000000000000000000000000156b520ab3bd39919d0ded338a1f4af3efb60fc4","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://f54e2fb40926135ad9f44d0a713f037692bce36167382397522d47c756ca5338"}]}