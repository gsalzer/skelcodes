{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.11;\r\n\r\n\r\ninterface ERC20 {\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n    function totalSupply() external view returns (uint supply);\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    function decimals() external view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ncontract OtcInterface {\r\n    function getOffer(uint id) external view returns (uint, ERC20, uint, ERC20);\r\n    function getBestOffer(ERC20 sellGem, ERC20 buyGem) external view returns(uint);\r\n    function getWorseOffer(uint id) external view returns(uint);\r\n    function take(bytes32 id, uint128 maxTakeAmount) external;\r\n}\r\n\r\n/// @title Kyber utils and utils2 contracts\r\ncontract Utils {\r\n\r\n    ERC20 constant internal ETH_TOKEN_ADDRESS = ERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n    uint  constant internal PRECISION = (10**18);\r\n    uint  constant internal MAX_QTY   = (10**28); // 10B tokens\r\n    uint  constant internal MAX_RATE  = (PRECISION * 10**6); // up to 1M tokens per ETH\r\n    uint  constant internal MAX_DECIMALS = 18;\r\n    uint  constant internal ETH_DECIMALS = 18;\r\n\r\n    mapping(address=>uint) internal decimals;\r\n\r\n    /// @dev get the balance of a user.\r\n    /// @param token The token type\r\n    /// @return The balance\r\n    function getBalance(ERC20 token, address user) public view returns(uint) {\r\n        if (token == ETH_TOKEN_ADDRESS)\r\n            return user.balance;\r\n        else\r\n            return token.balanceOf(user);\r\n    }\r\n\r\n    function setDecimals(ERC20 token) internal {\r\n        if (token == ETH_TOKEN_ADDRESS)\r\n            decimals[address(token)] = ETH_DECIMALS;\r\n        else\r\n            decimals[address(token)] = token.decimals();\r\n    }\r\n\r\n    function getDecimals(ERC20 token) internal view returns(uint) {\r\n        if (token == ETH_TOKEN_ADDRESS) return ETH_DECIMALS; // save storage access\r\n        uint tokenDecimals = decimals[address(token)];\r\n        // moreover, very possible that old tokens have decimals 0\r\n        // these tokens will just have higher gas fees.\r\n        if (tokenDecimals == 0) return token.decimals();\r\n\r\n        return tokenDecimals;\r\n    }\r\n\r\n    function calcDstQty(uint srcQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\r\n        require(srcQty <= MAX_QTY);\r\n        require(rate <= MAX_RATE);\r\n\r\n        if (dstDecimals >= srcDecimals) {\r\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\r\n            return (srcQty * rate * (10**(dstDecimals - srcDecimals))) / PRECISION;\r\n        } else {\r\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\r\n            return (srcQty * rate) / (PRECISION * (10**(srcDecimals - dstDecimals)));\r\n        }\r\n    }\r\n\r\n    function calcSrcQty(uint dstQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\r\n        require(dstQty <= MAX_QTY);\r\n        require(rate <= MAX_RATE);\r\n        \r\n        //source quantity is rounded up. to avoid dest quantity being too low.\r\n        uint numerator;\r\n        uint denominator;\r\n        if (srcDecimals >= dstDecimals) {\r\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\r\n            numerator = (PRECISION * dstQty * (10**(srcDecimals - dstDecimals)));\r\n            denominator = rate;\r\n        } else {\r\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\r\n            numerator = (PRECISION * dstQty);\r\n            denominator = (rate * (10**(dstDecimals - srcDecimals)));\r\n        }\r\n        return (numerator + denominator - 1) / denominator; //avoid rounding down errors\r\n    }\r\n\r\n    function calcDestAmount(ERC20 src, ERC20 dest, uint srcAmount, uint rate) internal view returns(uint) {\r\n        return calcDstQty(srcAmount, getDecimals(src), getDecimals(dest), rate);\r\n    }\r\n\r\n    function calcSrcAmount(ERC20 src, ERC20 dest, uint destAmount, uint rate) internal view returns(uint) {\r\n        return calcSrcQty(destAmount, getDecimals(src), getDecimals(dest), rate);\r\n    }\r\n\r\n    function calcRateFromQty(uint srcAmount, uint destAmount, uint srcDecimals, uint dstDecimals)\r\n        internal pure returns(uint)\r\n    {\r\n        require(srcAmount <= MAX_QTY);\r\n        require(destAmount <= MAX_QTY);\r\n\r\n        if (dstDecimals >= srcDecimals) {\r\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\r\n            return (destAmount * PRECISION / ((10 ** (dstDecimals - srcDecimals)) * srcAmount));\r\n        } else {\r\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\r\n            return (destAmount * PRECISION * (10 ** (srcDecimals - dstDecimals)) / srcAmount);\r\n        }\r\n    }\r\n\r\n    function minOf(uint x, uint y) internal pure returns(uint) {\r\n        return x > y ? y : x;\r\n    }\r\n}\r\n\r\n\r\ncontract WethInterface is ERC20 {\r\n    function deposit() public payable;\r\n    function withdraw(uint) public;\r\n}\r\n\r\n\r\ncontract MarketHelper is Utils {\r\n\r\n    // constants\r\n    uint constant internal INVALID_ID = uint(-1);\r\n    uint constant internal POW_2_32 = 2 ** 32;\r\n    uint constant internal POW_2_96 = 2 ** 96;\r\n    uint constant internal BPS = 10000; // 10^4\r\n\r\n    // values\r\n    address public kyberNetwork;\r\n    bool public tradeEnabled;\r\n    uint public feeBps;\r\n\r\n    OtcInterface public otc = OtcInterface(0x39755357759cE0d7f32dC8dC45414CCa409AE24e);\r\n    WethInterface public wethToken = WethInterface(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    ERC20 public mkrToken = ERC20(0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2);\r\n\r\n    function getNextBestOffer(\r\n        ERC20 offerSellGem,\r\n        ERC20 offerBuyGem,\r\n        uint payAmount,\r\n        uint prevOfferId\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint offerId,\r\n            uint offerPayAmount,\r\n            uint offerBuyAmount\r\n        )\r\n    {\r\n        if (prevOfferId == INVALID_ID) {\r\n            offerId = otc.getBestOffer(offerSellGem, offerBuyGem);\r\n        } else {\r\n            offerId = otc.getWorseOffer(prevOfferId);\r\n        }\r\n\r\n        (offerBuyAmount, ,offerPayAmount, ) = otc.getOffer(offerId);\r\n\r\n        while (payAmount > offerPayAmount) {\r\n            offerId = otc.getWorseOffer(offerId); // next best offer\r\n            if (offerId == 0) {\r\n                offerId = 0;\r\n                offerPayAmount = 0;\r\n                offerBuyAmount = 0;\r\n                break;\r\n            }\r\n            (offerBuyAmount, ,offerPayAmount, ) = otc.getOffer(offerId);\r\n        }\r\n    }\r\n\r\n    function getOffers(ERC20 token, bool isEthToToken, uint numOrders) public view\r\n    returns(uint [] memory ethPayAmtTokens, uint [] memory tokenBuyAmtTokens, uint [] memory rateTokenDivEthx1000, uint [] memory Ids,\r\n        uint totalBuyAmountToken, uint totalPayAmountEthers, uint totalRateTokenDivEthx1000) \r\n    {\r\n        uint offerId = INVALID_ID;\r\n        ethPayAmtTokens = new uint[](numOrders);\r\n        tokenBuyAmtTokens = new uint[](numOrders);    \r\n        rateTokenDivEthx1000 = new uint[](numOrders);\r\n        Ids = new uint[](numOrders);\r\n        \r\n        uint offerBuyAmt;\r\n        uint offerPayAmt;\r\n        \r\n        for (uint i = 0; i < numOrders; i++) {\r\n            \r\n            if (isEthToToken) {\r\n                (offerId, offerPayAmt, offerBuyAmt) = getNextBestOffer(token, wethToken, 1, offerId);\r\n                rateTokenDivEthx1000[i] = (offerBuyAmt * 1000) / offerPayAmt;\r\n            } else {\r\n                (offerId, offerPayAmt, offerBuyAmt) = getNextBestOffer(wethToken, token, 1, offerId);\r\n                rateTokenDivEthx1000[i] = (offerPayAmt * 1000) / offerBuyAmt;\r\n            }\r\n\r\n            totalBuyAmountToken += offerBuyAmt;\r\n            totalPayAmountEthers += offerPayAmt;\r\n            \r\n            ethPayAmtTokens[i] = offerPayAmt / 10 ** 15;\r\n            tokenBuyAmtTokens[i] = offerBuyAmt / 10 ** 15;\r\n            Ids[i] = offerId;\r\n            \r\n            if(offerId == 0) break;\r\n        }\r\n\r\n        if (isEthToToken) {\r\n            totalRateTokenDivEthx1000 = totalBuyAmountToken * 1000 / totalPayAmountEthers;\r\n        } else {\r\n            totalRateTokenDivEthx1000 = totalPayAmountEthers * 1000 / totalBuyAmountToken;\r\n        }\r\n\r\n        totalBuyAmountToken /= 10 ** 18;\r\n        totalPayAmountEthers /= 10 ** 18;\r\n    }\r\n\r\n    function getEthToMkrOrders(uint numOrders) public view\r\n        returns(uint [] memory ethPayAmtTokens, uint [] memory mkrBuyAmtTokens, uint [] memory rateMkrDivEthx1000, uint [] memory Ids,\r\n        uint totalBuyAmountMkrToken, uint totalPayAmountEthers, uint totalRateMkrDivEthx1000) \r\n    {\r\n        uint offerId = INVALID_ID;\r\n        ethPayAmtTokens = new uint[](numOrders);\r\n        mkrBuyAmtTokens = new uint[](numOrders);    \r\n        rateMkrDivEthx1000 = new uint[](numOrders);\r\n        Ids = new uint[](numOrders);\r\n        \r\n        uint offerBuyAmt;\r\n        uint offerPayAmt;\r\n        \r\n        for (uint i = 0; i < numOrders; i++) {\r\n            \r\n            (offerId, offerPayAmt, offerBuyAmt) = getNextBestOffer(mkrToken, wethToken, 1, offerId);\r\n            \r\n            totalBuyAmountMkrToken += offerBuyAmt;\r\n            totalPayAmountEthers += offerPayAmt;\r\n            \r\n            ethPayAmtTokens[i] = offerPayAmt / 10 ** 15;\r\n            mkrBuyAmtTokens[i] = offerBuyAmt / 10 ** 15;\r\n            rateMkrDivEthx1000[i] = (offerBuyAmt * 1000) / offerPayAmt;\r\n            Ids[i] = offerId;\r\n            \r\n            if(offerId == 0) break;\r\n        }\r\n        \r\n        totalRateMkrDivEthx1000 = totalBuyAmountMkrToken * 1000 / totalPayAmountEthers;\r\n        totalBuyAmountMkrToken /= 10 ** 15;\r\n        totalPayAmountEthers /= 10 ** 15;\r\n    }\r\n    \r\n    function getMkrToEthOrders(uint numOrders) public view\r\n        returns(uint [] memory mkrPayAmtTokens, uint [] memory ethBuyAmtTokens, uint [] memory rateMkrDivEthx1000, uint [] memory Ids,\r\n        uint totalPayAmountMkrToken, uint totalBuyAmountEthers, uint totalRateMkrDivEthx1000)\r\n    {\r\n        uint offerId = INVALID_ID;\r\n        mkrPayAmtTokens = new uint[](numOrders);\r\n        ethBuyAmtTokens = new uint[](numOrders);\r\n        rateMkrDivEthx1000 = new uint[](numOrders);\r\n        Ids = new uint[](numOrders);\r\n        \r\n        uint offerBuyAmt;\r\n        uint offerPayAmt;\r\n\r\n        for (uint i = 0; i < numOrders; i++) {\r\n\r\n            (offerId, offerPayAmt, offerBuyAmt) = getNextBestOffer(wethToken, mkrToken, 1, offerId);\r\n            \r\n            totalPayAmountMkrToken += offerPayAmt;\r\n            totalBuyAmountEthers += offerBuyAmt;\r\n            \r\n            mkrPayAmtTokens[i] = offerPayAmt / 10 ** 15;\r\n            ethBuyAmtTokens[i] = offerBuyAmt / 10 ** 15;\r\n            rateMkrDivEthx1000[i] = (offerPayAmt * 1000) / offerBuyAmt;\r\n            Ids[i] = offerId;\r\n            \r\n            if (offerId == 0) break;\r\n        }\r\n        \r\n        totalRateMkrDivEthx1000 = totalPayAmountMkrToken * 1000 / totalBuyAmountEthers;\r\n        totalPayAmountMkrToken /= 10 ** 15;\r\n        totalBuyAmountEthers /= 10 ** 15;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"feeBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"otc\",\"outputs\":[{\"internalType\":\"contract OtcInterface\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEthToToken\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"numOrders\",\"type\":\"uint256\"}],\"name\":\"getOffers\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ethPayAmtTokens\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenBuyAmtTokens\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rateTokenDivEthx1000\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"Ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"totalBuyAmountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPayAmountEthers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRateTokenDivEthx1000\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wethToken\",\"outputs\":[{\"internalType\":\"contract WethInterface\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"offerSellGem\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"offerBuyGem\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"payAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prevOfferId\",\"type\":\"uint256\"}],\"name\":\"getNextBestOffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offerPayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offerBuyAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mkrToken\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numOrders\",\"type\":\"uint256\"}],\"name\":\"getEthToMkrOrders\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ethPayAmtTokens\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"mkrBuyAmtTokens\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rateMkrDivEthx1000\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"Ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"totalBuyAmountMkrToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPayAmountEthers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRateMkrDivEthx1000\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kyberNetwork\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numOrders\",\"type\":\"uint256\"}],\"name\":\"getMkrToEthOrders\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"mkrPayAmtTokens\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ethBuyAmtTokens\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rateMkrDivEthx1000\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"Ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"totalPayAmountMkrToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBuyAmountEthers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRateMkrDivEthx1000\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MarketHelper","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://314591eb9b29ef74d9c24c4007b0a6c30ce387e98e3eb479a004d343c495174f"}]}