{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * Smart contract holds Ethereum and Edgeless tokens.\r\n * Ethereum is used to fund authorized casino wallets which is responsible for\r\n * approving withdrawal and sending deposits to casino smart contract.\r\n * Edgeless tokens is used to fund casino bankroll for users who chooses\r\n * to deposit not an EDG token but crypto like BTC, ETH, etc.\r\n * author: Rytis Grinceviƒçius\r\n * */\r\n \r\npragma solidity ^0.5.10;\r\n\r\ncontract SafeMath {\r\n    function safeSub(uint a, uint b) internal pure returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function safeSub(int a, int b) internal pure returns (int) {\r\n        if (b < 0) assert(a - b > a);\r\n        else assert(a - b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        assert(c >= a && c >= b);\r\n        return c;\r\n    }\r\n\r\n    function safeMul(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract ERC20Token {\r\n    function transfer(address receiver, uint amount) public returns (bool) {\r\n        (receiver);\r\n        (amount);\r\n        return false;\r\n    }\r\n\r\n    function balanceOf(address holder) public returns (uint) {\r\n        (holder);\r\n        return 0;\r\n    }\r\n}\r\n\r\ncontract Casino {\r\n    mapping(address => bool) public authorized;\r\n}\r\n\r\ncontract Owned {\r\n  address public owner;\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  constructor() internal {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  function changeOwner(address newOwner) onlyOwner public {\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract BankWallet is SafeMath, Owned {\r\n    Casino public edgelessCasino;\r\n    \r\n    mapping(address => uint) public tokenToLimit; \r\n    \r\n    bool public paused = false;\r\n\r\n    event Transfer(address _token, address _receiver, uint _amount);\r\n    event Withdrawal(address _token, address _receiver, uint _amount);\r\n    event Paused(bool _paused);\r\n\r\n    constructor(address _casino) public {\r\n        edgelessCasino = Casino(_casino);\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * Allow ether to be received.\r\n     */\r\n    function () external payable {}\r\n    \r\n    /**\r\n     * @param _token      Asset contract (0x0 for eth) to transfer \r\n     * @param _receiver   Asset receiver wallet address\r\n     * @param _amount     How much to transfer\r\n     */\r\n    function transfer(address _token, address _receiver, uint _amount) public onlyActive onlyAuthorized returns (bool _success) {\r\n        require(tokenToLimit[_token] == 0 || tokenToLimit[_token] >= _amount, \"Amount exceeds transfer limit for asset.\");\r\n        _success = _transfer(_token, _receiver, _amount);\r\n        if (_success) {\r\n            emit Transfer(_token, _receiver, _amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Allow owner to withdraw assets.\r\n     * @param _token      Asset contract (0x0 for eth) to transfer \r\n     * @param _receiver   Asset receiver wallet address\r\n     * @param _amount     How much to transfer\r\n     */\r\n    function adminTransfer(address _token, address _receiver, uint _amount) public onlyOwner returns (bool _success) {\r\n        _success = _transfer(_token, _receiver, _amount);\r\n        if (_success) {\r\n            emit Withdrawal(_token, _receiver, _amount);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @param _token      Asset contract (0x0 for eth) to transfer \r\n     * @param _receiver   Asset receiver wallet address\r\n     * @param _amount     How much to transfer\r\n     */ \r\n    function _transfer(address _token, address _receiver, uint _amount) internal returns (bool _success) {\r\n        require(_receiver != address(0), \"Please use valid receiver wallet address.\");\r\n        _success = false;\r\n        if (_token == address (0)) {\r\n            require(_amount <= address(this).balance, \"Eth balance is too small.\");\r\n            assert(_success = address(uint160(_receiver)).send(_amount));\r\n        } else {\r\n            ERC20Token __token = ERC20Token(_token);\r\n            require(_amount <= __token.balanceOf(address(this)), \"Asset balance is too small.\");\r\n            _success = __token.transfer(_receiver, _amount);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Set how much of asset can contract transfer with single transaction.\r\n     * @param _token address of token or 0x0 if its eth.\r\n     * @param _limit limit of maximum amount for one transaction. \r\n     */\r\n    function setTokenLimit(address _token, uint _limit) public onlyOwner {\r\n        tokenToLimit[_token] = _limit;\r\n    }\r\n    \r\n    /**\r\n     * Pause contract in case of emergency or upgrade.\r\n     */ \r\n    function pause() public onlyActive onlyAuthorized {\r\n        paused = true;\r\n        emit Paused(paused);\r\n    }\r\n\r\n    /**\r\n     * Resume transfers from contract.\r\n     */ \r\n    function activate() public onlyPaused onlyOwner {\r\n        paused = false;\r\n        emit Paused(paused);\r\n    }\r\n    \r\n    modifier onlyAuthorized {\r\n        require(edgelessCasino.authorized(msg.sender), \"Sender is not authorized.\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyPaused {\r\n        require(paused == true, \"Contract is not paused.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyActive {\r\n        require(paused == false, \"Contract is paused.\");\r\n        _;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"activate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenToLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"edgelessCasino\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"setTokenLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"adminTransfer\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_casino\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"Paused\",\"type\":\"event\"}]","ContractName":"BankWallet","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000764280456ae178591e037e36b01f69a52d9327a7","Library":"","SwarmSource":"bzzr://031096f23850ab8627e1e77c5f4466ac18feb4d71bb7fb814bde7f103a8767b4"}]}