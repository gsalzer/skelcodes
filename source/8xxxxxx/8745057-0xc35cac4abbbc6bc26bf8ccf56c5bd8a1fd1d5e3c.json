{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.7.0;\r\n\r\ncontract MyEthDice {\r\n    struct Bet {\r\n        uint amount; // wei\r\n        bytes32 seedHash; // seed hash. Shown to player before they make a bet to prove we can't change result\r\n        string randomSeed;\r\n        bytes32 playerSeed; // seed provided by player to combine with random seed to calculate result\r\n        uint roll;  // result of roll\r\n        uint target; // target the player was trying to roll under\r\n        address payable player; \r\n        bool settled; \r\n    }\r\n    \r\n    uint constant public MIN_BET = 0.01 ether;\r\n    \r\n    address public owner;\r\n    address public settler;\r\n    \r\n    mapping (uint => Bet) bets;\r\n    \r\n    uint public maxProfit;\r\n    uint128 private lockedFunds;\r\n    uint private leverage = 3;\r\n    \r\n    event BetResult(address indexed player, uint winAmount, bytes32 playerSeed, bytes32 seedHash, uint target, string randomSeed, uint roll);\r\n    event BetPlaced(bytes32 hash);\r\n    event FailedPayment(address indexed player, uint amount, bytes32 seedHash);\r\n    \r\n    constructor () public {\r\n      owner = msg.sender;\r\n      settler = msg.sender;\r\n    }\r\n    \r\n    function () external payable {\r\n        updateMaxProfit(); //TODO too much gas warning?\r\n    }\r\n    \r\n    modifier onlyOwner {\r\n        require (msg.sender == owner, \"Only the owner can call this method.\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlySettler {\r\n        require (msg.sender == settler, \"Must be the settler to call this method.\");\r\n        _;\r\n    }\r\n\r\n    function setSettler(address newSettler) external onlyOwner {\r\n        settler = newSettler;\r\n    }\r\n\r\n    function updateMaxProfit() private {\r\n      maxProfit = ((address(this).balance - lockedFunds) / 100) * leverage;\r\n    }\r\n    \r\n    function setLeverage(uint _leverage) public onlyOwner {\r\n        leverage = _leverage;\r\n        updateMaxProfit();\r\n    }\r\n\r\n    function withdrawFunds(address payable receiver, uint withdrawAmount) external onlyOwner {\r\n        require (withdrawAmount <= address(this).balance, \"amount larger than balance.\");\r\n        require (lockedFunds + withdrawAmount <= address(this).balance, \"Too much locked up\");\r\n        receiver.send(withdrawAmount);\r\n        updateMaxProfit();\r\n    }\r\n\r\n    function kill() public onlyOwner {\r\n        require (lockedFunds == 0, \"Still bets locked up.\");\r\n        selfdestruct(msg.sender);\r\n    }\r\n    \r\n    function placeBet(bytes32 playerSeed, bytes32 seedHash, uint target) external payable {\r\n        require(target > 0 && target <= 100, \"target out of range\"); \r\n      \r\n        uint betAmount = msg.value;\r\n        require(betAmount >= MIN_BET, \"betAmount too small\");\r\n\r\n        uint payout = (betAmount - (betAmount / 100)) * 100 / target;  //TODO this is different from dice2win\r\n        require (payout <= betAmount + maxProfit, \"Payout is more than max allowed profit.\");\r\n\r\n        lockedFunds += uint128(payout);\r\n        require (lockedFunds <= address(this).balance, \"Cannot take bet.\");\r\n      \r\n        Bet storage bet = bets[uint(seedHash)];\r\n        \r\n        //check bet doesnt exist with hash\r\n        require(bet.seedHash != seedHash, \"Bet with hash already exists\");\r\n    \r\n        bet.seedHash = seedHash;\r\n        bet.amount = betAmount;\r\n        bet.player = msg.sender;\r\n        bet.playerSeed = playerSeed;\r\n        bet.target = target;\r\n        bet.settled = false;\r\n        \r\n        updateMaxProfit();\r\n        emit BetPlaced(seedHash);\r\n    }\r\n    \r\n    function settleBet(string calldata randomSeed) external onlySettler {\r\n         bytes32 seedHash = keccak256(abi.encodePacked(randomSeed));\r\n         Bet storage bet = bets[uint(seedHash)];\r\n\r\n         require(bet.seedHash == seedHash, \"No bet found with server seed\");\r\n         require(bet.settled == false, \"Bet already settled\");\r\n         \r\n         uint amount = bet.amount;\r\n         uint target = bet.target;\r\n         uint payout = (amount - (amount / 100)) * 100 / target;\r\n         \r\n         bytes32 combinedHash = keccak256(abi.encodePacked(randomSeed, bet.playerSeed));\r\n         bet.roll = uint(combinedHash) % 100;\r\n         \r\n         if(bet.roll < bet.target) {\r\n          if (!bet.player.send(payout)) {\r\n            emit FailedPayment(bet.player, payout, bet.seedHash);\r\n          }\r\n          emit BetResult(bet.player, payout, bet.playerSeed, bet.seedHash, target, randomSeed, bet.roll);\r\n        } else {\r\n            emit BetResult(bet.player, 0, bet.playerSeed, bet.seedHash, target, randomSeed, bet.roll);\r\n        }\r\n\r\n         lockedFunds -= uint128(payout);\r\n         bet.settled = true;\r\n         bet.randomSeed = randomSeed;\r\n\r\n         updateMaxProfit();\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"BetPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"playerSeed\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"seedHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"randomSeed\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roll\",\"type\":\"uint256\"}],\"name\":\"BetResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"seedHash\",\"type\":\"bytes32\"}],\"name\":\"FailedPayment\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_BET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"playerSeed\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"seedHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"name\":\"placeBet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_leverage\",\"type\":\"uint256\"}],\"name\":\"setLeverage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSettler\",\"type\":\"address\"}],\"name\":\"setSettler\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"randomSeed\",\"type\":\"string\"}],\"name\":\"settleBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"settler\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MyEthDice","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://20d8662ace16b1c6824b174d5211b02c61f4f2d6bb71ad1b9193ef7855a02f4d"}]}