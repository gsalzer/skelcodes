{"status":"1","message":"OK","result":[{"SourceCode":"// median.sol - Medianizer v2\r\n\r\n// Copyright (C) 2019 Maker Foundation\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity >=0.5.10;\r\n\r\ncontract LibNote {\r\n    event LogNote(\r\n        bytes4   indexed  sig,\r\n        address  indexed  usr,\r\n        bytes32  indexed  arg1,\r\n        bytes32  indexed  arg2,\r\n        bytes             data\r\n    ) anonymous;\r\n\r\n    modifier note {\r\n        _;\r\n        assembly {\r\n            // log an 'anonymous' event with a constant 6 words of calldata\r\n            // and four indexed topics: selector, caller, arg1 and arg2\r\n            let mark := msize                         // end of memory ensures zero\r\n            mstore(0x40, add(mark, 288))              // update free memory pointer\r\n            mstore(mark, 0x20)                        // bytes type data offset\r\n            mstore(add(mark, 0x20), 224)              // bytes size (padded)\r\n            calldatacopy(add(mark, 0x40), 0, 224)     // bytes payload\r\n            log4(mark, 288,                           // calldata\r\n                 shl(224, shr(224, calldataload(0))), // msg.sig\r\n                 caller,                              // msg.sender\r\n                 calldataload(4),                     // arg1\r\n                 calldataload(36)                     // arg2\r\n                )\r\n        }\r\n    }\r\n}\r\n\r\ncontract Median is LibNote {\r\n\r\n    // --- Auth ---\r\n    mapping (address => uint) public wards;\r\n    function rely(address usr) external note auth { wards[usr] = 1; }\r\n    function deny(address usr) external note auth { wards[usr] = 0; }\r\n    modifier auth {\r\n        require(wards[msg.sender] == 1, \"Median/not-authorized\");\r\n        _;\r\n    }\r\n\r\n    uint128        val;\r\n    uint32  public age;\r\n    bytes32 public constant wat = \"ethusd\"; // You want to change this every deploy\r\n    uint256 public bar = 1;\r\n\r\n    // Authorized oracles, set by an auth\r\n    mapping (address => uint256) public orcl;\r\n\r\n    // Whitelisted contracts, set by an auth\r\n    mapping (address => uint256) public bud;\r\n\r\n    // Mapping for at most 256 oracles\r\n    mapping (uint8 => address) public slot;\r\n\r\n    modifier toll { require(bud[msg.sender] == 1, \"Median/contract-not-whitelisted\"); _;}\r\n\r\n    event LogMedianPrice(uint256 val, uint256 age);\r\n\r\n    //Set type of Oracle\r\n    constructor() public {\r\n        wards[msg.sender] = 1;\r\n    }\r\n\r\n    function read() external view toll returns (uint256) {\r\n        require(val > 0, \"Median/invalid-price-feed\");\r\n        return val;\r\n    }\r\n\r\n    function peek() external view toll returns (uint256,bool) {\r\n        return (val, val > 0);\r\n    }\r\n\r\n    function recover(uint256 val_, uint256 age_, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\r\n        return ecrecover(\r\n            keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", keccak256(abi.encodePacked(val_, age_, wat)))),\r\n            v, r, s\r\n        );\r\n    }\r\n\r\n    function poke(\r\n        uint256[] calldata val_, uint256[] calldata age_,\r\n        uint8[] calldata v, bytes32[] calldata r, bytes32[] calldata s) external\r\n    {\r\n        require(val_.length == bar, \"Median/bar-too-low\");\r\n\r\n        uint256 bloom = 0;\r\n        uint256 last = 0;\r\n        uint256 zzz = age;\r\n\r\n        for (uint i = 0; i < val_.length; i++) {\r\n            // Validate the values were signed by an authorized oracle\r\n            address signer = recover(val_[i], age_[i], v[i], r[i], s[i]);\r\n            // Check that signer is an oracle\r\n            require(orcl[signer] == 1, \"Median/invalid-oracle\");\r\n            // Price feed age greater than last medianizer age\r\n            require(age_[i] > zzz, \"Median/stale-message\");\r\n            // Check for ordered values\r\n            require(val_[i] >= last, \"Median/messages-not-in-order\");\r\n            last = val_[i];\r\n            // Bloom filter for signer uniqueness\r\n            uint8 sl = uint8(uint256(signer) >> 152);\r\n            require((bloom >> sl) % 2 == 0, \"Median/oracle-already-signed\");\r\n            bloom += uint256(2) ** sl;\r\n        }\r\n\r\n        val = uint128(val_[val_.length >> 1]);\r\n        age = uint32(block.timestamp);\r\n\r\n        emit LogMedianPrice(val, age);\r\n    }\r\n\r\n    function lift(address[] calldata a) external note auth {\r\n        for (uint i = 0; i < a.length; i++) {\r\n            require(a[i] != address(0), \"Median/no-oracle-0\");\r\n            uint8 s = uint8(uint256(a[i]) >> 152);\r\n            require(slot[s] == address(0), \"Median/signer-already-exists\");\r\n            orcl[a[i]] = 1;\r\n            slot[s] = a[i];\r\n        }\r\n    }\r\n\r\n    function drop(address[] calldata a) external note auth {\r\n       for (uint i = 0; i < a.length; i++) {\r\n            orcl[a[i]] = 0;\r\n            slot[uint8(uint256(a[i]) >> 152)] = address(0);\r\n       }\r\n    }\r\n\r\n    function setBar(uint256 bar_) external note auth {\r\n        require(bar_ > 0, \"Median/quorum-is-zero\");\r\n        require(bar_ % 2 != 0, \"Median/quorum-not-odd-number\");\r\n        bar = bar_;\r\n    }\r\n\r\n    function kiss(address a) external note auth {\r\n        require(a != address(0), \"Median/no-contract-0\");\r\n        bud[a] = 1;\r\n    }\r\n\r\n    function diss(address a) external note auth {\r\n        bud[a] = 0;\r\n    }\r\n\r\n    function kiss(address[] calldata a) external note auth {\r\n        for(uint i = 0; i < a.length; i++) {\r\n            require(a[i] != address(0), \"Median/no-contract-0\");\r\n            bud[a[i]] = 1;\r\n        }\r\n    }\r\n\r\n    function diss(address[] calldata a) external note auth {\r\n        for(uint i = 0; i < a.length; i++) {\r\n            bud[a[i]] = 0;\r\n        }\r\n    }\r\n}\r\n\r\ncontract MedianETHUSD is Median {\r\n    bytes32 public constant wat = \"ETHUSD\";\r\n\r\n    function recover(uint256 val_, uint256 age_, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\r\n        return ecrecover(\r\n            keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", keccak256(abi.encodePacked(val_, age_, wat)))),\r\n            v, r, s\r\n        );\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"age\",\"type\":\"uint256\"}],\"name\":\"LogMedianPrice\",\"type\":\"event\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"arg1\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"arg2\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"age\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bar\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bud\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"deny\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"a\",\"type\":\"address[]\"}],\"name\":\"diss\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"diss\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"a\",\"type\":\"address[]\"}],\"name\":\"drop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"a\",\"type\":\"address[]\"}],\"name\":\"kiss\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"kiss\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"a\",\"type\":\"address[]\"}],\"name\":\"lift\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"orcl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"peek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"val_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"age_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"poke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"read\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"rely\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bar_\",\"type\":\"uint256\"}],\"name\":\"setBar\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"slot\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wat\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MedianETHUSD","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://9ad13e6b0b368fc1552fd5884613f8a7d4231e29bdfd2467a628a5b048b07012"}]}