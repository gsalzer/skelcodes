{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract CryptoPunk\r\n{\r\n  function punkIndexToAddress(uint256 punkIndex) public view returns (address ownerAddress);\r\n  function balanceOf(address tokenOwner) public view returns (uint balance);\r\n  function transferPunk(address to, uint punkIndex) public;\r\n}\r\n\r\ncontract ERC20\r\n{\r\n  function balanceOf(address tokenOwner) public view returns (uint balance);\r\n  function transfer(address to, uint tokens) public returns (bool success);\r\n}\r\n\r\ncontract PunkLombard\r\n{\r\n  address public CryptoPunksContract;\r\n\r\n  uint256 public loanAmount; //amount of loan in wei\r\n  uint256 public punkIndex; //punk identifier\r\n  uint256 public annualInterestRate; // 10% = 100000000000000000\r\n  uint256 public loanTenor; //loan term; seconds after start of loan when default occurs and punk can be claimed\r\n  uint256 public loanPeriod; //effective number of seconds until loan was repaid\r\n  address public lender; //address providing loan proceeds\r\n  address public borrower; //address putting the CryptoPunk up as collateral\r\n  uint256 public loanStart; //time when lender sent ETH\r\n  uint256 public loanEnd; //time when borrower repaid loan + interest\r\n  uint256 public interest; //effective interest amount in ETH\r\n\r\n  address public contractOwner;\r\n\r\n  modifier onlyOwner\r\n  {\r\n    if (msg.sender != contractOwner) revert();\r\n    _;\r\n  }\r\n\r\n  modifier onlyLender\r\n  {\r\n    if (msg.sender != lender) revert();\r\n    _;\r\n  }\r\n\r\n  constructor () public\r\n  {\r\n    CryptoPunksContract = 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB; //MainNet\r\n    contractOwner = msg.sender;\r\n    borrower = msg.sender;\r\n  }\r\n\r\n  function transferContractOwnership(address newContractOwner) public onlyOwner\r\n  {\r\n    contractOwner = newContractOwner;\r\n  }\r\n\r\n  function setTerms(uint256 _loanAmount, uint256 _annualInterestRate, uint256 _loanTenor, uint256 _punkIndex) public onlyOwner\r\n  {\r\n    require(CryptoPunk(CryptoPunksContract).balanceOf(address(this)) == 1);\r\n    loanAmount = _loanAmount;\r\n    annualInterestRate = _annualInterestRate;\r\n    loanTenor = _loanTenor;\r\n    punkIndex = _punkIndex;\r\n  }\r\n\r\n\r\n  function claimCollateral() public onlyLender //in case of default\r\n  {\r\n    require(now > (loanStart + loanTenor));\r\n    CryptoPunk(CryptoPunksContract).transferPunk(lender, punkIndex); //lender now gets ownership of punk\r\n  }\r\n\r\n  function () payable public\r\n  {\r\n\r\n    if(msg.sender == borrower) //repaying loan\r\n    {\r\n      require(now <= (loanStart + loanTenor)); //if loan tenor lapses, loan defaults and repayment no longer possible\r\n      uint256 loanPeriodCheck = (now - loanStart);\r\n      interest = (((loanAmount * annualInterestRate) / 10 ** 18) * loanPeriodCheck) / 365 days;\r\n      require(msg.value >= loanAmount + interest);\r\n      loanPeriod = loanPeriodCheck;\r\n      loanEnd = now;\r\n      uint256 change = msg.value - (loanAmount + interest);\r\n      lender.transfer(loanAmount + interest);\r\n      if(change > 0)\r\n      {\r\n        borrower.transfer(change);\r\n      }\r\n      CryptoPunk(CryptoPunksContract).transferPunk(borrower, punkIndex); //transfer punk ownership back to borrower after successful repayment\r\n    }\r\n\r\n    if(msg.sender != borrower) // lender sending loan principal\r\n    {\r\n      require(loanStart == 0); //Loan proceeds can only be sent once\r\n      require(CryptoPunk(CryptoPunksContract).balanceOf(address(this)) == 1); //lombard contract should only own 1 punk\r\n      require(CryptoPunk(CryptoPunksContract).punkIndexToAddress(punkIndex) == address(this));  //ensure the lombard contract owns the punk specified\r\n      require(msg.value >= loanAmount); //primitive interest\r\n      lender = msg.sender;\r\n      loanStart = now;\r\n      if(msg.value > loanAmount) //lender sent amount in excess of loanAmount\r\n      {\r\n        msg.sender.transfer(msg.value-loanAmount); //return excess amount\r\n      }\r\n      borrower.transfer(loanAmount); //send loan proceeds through to borrower\r\n    }\r\n\r\n  }\r\n\r\n  //to rescue trapped tokens\r\n  function transfer_targetToken(address target, address to, uint256 quantity) public onlyOwner\r\n  {\r\n    ERC20(target).transfer(to, quantity);\r\n  }\r\n\r\n  //abiltiy to reclaim pumk before loan has begun\r\n  function reclaimPunkBeforeLoan(address _to, uint256 _punkIndex) public onlyOwner\r\n  {\r\n    require(loanStart == 0);\r\n    CryptoPunk(CryptoPunksContract).transferPunk(_to, _punkIndex);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"loanPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"transfer_targetToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"annualInterestRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_punkIndex\",\"type\":\"uint256\"}],\"name\":\"reclaimPunkBeforeLoan\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"loanTenor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimCollateral\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"borrower\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"loanAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newContractOwner\",\"type\":\"address\"}],\"name\":\"transferContractOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lender\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"interest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"punkIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_loanAmount\",\"type\":\"uint256\"},{\"name\":\"_annualInterestRate\",\"type\":\"uint256\"},{\"name\":\"_loanTenor\",\"type\":\"uint256\"},{\"name\":\"_punkIndex\",\"type\":\"uint256\"}],\"name\":\"setTerms\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"loanStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"loanEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CryptoPunksContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"PunkLombard","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6f5fe157fe5b927d6dd2fc70e376042c5214753893bef485b445373493247dfa"}]}