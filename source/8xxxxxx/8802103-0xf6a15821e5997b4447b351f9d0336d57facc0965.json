{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\n\n\ninterface ITransferRules {\n    function setSRC(address src20) external returns (bool);\n    function doTransfer(address from, address to, uint256 value) external returns (bool);\n}\n\ninterface ISRC20 {\n\n    event RestrictionsAndRulesUpdated(address restrictions, address rules);\n\n    function transferToken(address to, uint256 value, uint256 nonce, uint256 expirationTime,\n        bytes32 msgHash, bytes calldata signature) external returns (bool);\n    function transferTokenFrom(address from, address to, uint256 value, uint256 nonce,\n        uint256 expirationTime, bytes32 hash, bytes calldata signature) external returns (bool);\n    function getTransferNonce() external view returns (uint256);\n    function getTransferNonce(address account) external view returns (uint256);\n    function executeTransfer(address from, address to, uint256 value) external returns (bool);\n    function updateRestrictionsAndRules(address restrictions, address rules) external returns (bool);\n\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address who) external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 value) external returns (bool);\n    function transfer(address to, uint256 value) external returns (bool);\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function increaseAllowance(address spender, uint256 value) external returns (bool);\n    function decreaseAllowance(address spender, uint256 value) external returns (bool);\n}\n\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    \n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    \n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    \n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    \n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    \n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    \n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    \n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ncontract ManualApproval is Ownable {\n    struct TransferReq {\n        address from;\n        address to;\n        uint256 value;\n    }\n\n    uint256 public _reqNumber;\n    ISRC20 public _src20;\n\n    mapping(uint256 => TransferReq) public _transferReq;\n    mapping(address => bool) public _greyList;\n\n    event TransferRequest(\n        uint256 indexed requestNumber,\n        address from,\n        address to,\n        uint256 value\n    );\n\n    event TransferApproval(\n        uint256 indexed requestNumber,\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event TransferRequestCanceled(\n        uint256 indexed requestNumber,\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    constructor () public {\n    }\n\n    \n    function transferApproval(uint256 reqNumber) external onlyOwner returns (bool) {\n        TransferReq memory req = _transferReq[reqNumber];\n\n        require(_src20.executeTransfer(address(this), req.to, req.value), \"SRC20 transfer failed\");\n\n        delete _transferReq[reqNumber];\n        emit TransferApproval(reqNumber, req.from, req.to, req.value);\n        return true;\n    }\n\n    \n    function cancelTransferRequest(uint256 reqNumber) external returns (bool) {\n        TransferReq memory req = _transferReq[reqNumber];\n        require(req.from == msg.sender, \"Not owner of the transfer request\");\n\n        require(_src20.executeTransfer(address(this), req.from, req.value), \"SRC20: External transfer failed\");\n\n        delete _transferReq[reqNumber];\n        emit TransferRequestCanceled(reqNumber, req.from, req.to, req.value);\n\n        return true;\n    }\n\n    \n    function isGreyListed(address account) public view returns (bool){\n        return _greyList[account];\n    }\n\n    function greyListAccount(address account) external onlyOwner returns (bool) {\n        _greyList[account] = true;\n        return true;\n    }\n\n    function bulkGreyListAccount(address[] calldata accounts) external onlyOwner returns (bool) {\n        for (uint256 i = 0; i < accounts.length ; i++) {\n            address account = accounts[i];\n            _greyList[account] = true;\n        }\n        return true;\n    }\n\n    function unGreyListAccount(address account) external onlyOwner returns (bool) {\n        delete _greyList[account];\n        return true;\n    }\n\n    function bulkUnGreyListAccount(address[] calldata accounts) external onlyOwner returns (bool) {\n        for (uint256 i = 0; i < accounts.length ; i++) {\n            address account = accounts[i];\n            delete _greyList[account];\n        }\n        return true;\n    }\n\n    function _transferRequest(address from, address to, uint256 value) internal returns (bool) {\n        require(_src20.executeTransfer(from, address(this), value), \"SRC20 transfer failed\");\n\n        _transferReq[_reqNumber] = TransferReq(from, to, value);\n\n        emit TransferRequest(_reqNumber, from, to, value);\n        _reqNumber = _reqNumber + 1;\n\n        return true;\n    }\n}\n\ncontract Whitelisted is Ownable {\n    mapping (address => bool) public _whitelisted;\n\n    function whitelistAccount(address account) external onlyOwner {\n        _whitelisted[account] = true;\n    }\n\n    function bulkWhitelistAccount(address[] calldata accounts) external onlyOwner {\n        for (uint256 i = 0; i < accounts.length ; i++) {\n            address account = accounts[i];\n            _whitelisted[account] = true;\n        }\n    }\n\n    function unWhitelistAccount(address account) external onlyOwner {\n         delete _whitelisted[account];\n    }\n\n    function bulkUnWhitelistAccount(address[] calldata accounts) external onlyOwner {\n        for (uint256 i = 0; i < accounts.length ; i++) {\n            address account = accounts[i];\n            delete _whitelisted[account];\n        }\n    }\n\n    function isWhitelisted(address account) public view returns (bool) {\n        return _whitelisted[account];\n    }\n}\n\ninterface ITransferRestrictions {\n    function authorize(address from, address to, uint256 value) external returns (bool);\n}\n\ncontract TransferRules is ITransferRules, ManualApproval, Whitelisted {\n\n    modifier onlySRC20 {\n        require(msg.sender == address(_src20));\n        _;\n    }\n\n    constructor(address owner) public {\n        _transferOwnership(owner);\n        _whitelisted[owner] = true;\n    }\n\n    \n    function setSRC(address src20) external returns (bool) {\n        require(address(_src20) == address(0), \"SRC20 already set\");\n        _src20 = ISRC20(src20);\n        return true;\n    }\n\n    \n    function authorize(address from, address to, uint256 value) public returns (bool) {\n        return (isWhitelisted(from) || isGreyListed(from)) &&\n        (isWhitelisted(to) || isGreyListed(to));\n    }\n\n    \n    function doTransfer(address from, address to, uint256 value) external onlySRC20 returns (bool) {\n        require(authorize(from, to, value), \"Transfer not authorized\");\n\n        if (isGreyListed(from) || isGreyListed(to)) {\n            _transferRequest(from, to, value);\n            return true;\n        }\n\n        require(ISRC20(_src20).executeTransfer(from, to, value), \"SRC20 transfer failed\");\n\n        return true;\n    }\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_whitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"bulkUnGreyListAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_reqNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_transferReq\",\"outputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_greyList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_src20\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"doTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"authorize\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"reqNumber\",\"type\":\"uint256\"}],\"name\":\"cancelTransferRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"bulkUnWhitelistAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"whitelistAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"bulkWhitelistAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unGreyListAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"reqNumber\",\"type\":\"uint256\"}],\"name\":\"transferApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"bulkGreyListAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isGreyListed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"greyListAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unWhitelistAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"src20\",\"type\":\"address\"}],\"name\":\"setSRC\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"requestNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"requestNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"requestNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferRequestCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TransferRules","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c39bf343cfc1083497549d7f10468769becc79e4","Library":"","LicenseType":"","SwarmSource":"bzzr://416c0bd4ecf86a961605c67dc64de7a337c9990a1583634221568a27a03a699e"}]}