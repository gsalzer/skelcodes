{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * RedLine project\r\n *\r\n * Website: https://redline.fund\r\n * Email: admin@redline.fund\r\n */\r\n\r\npragma solidity ^0.5.10;\r\n\r\ncontract Redline {\r\n  mapping (uint => uint) public stagePrice;\r\n\r\n  address public owner;\r\n\r\n  uint public currentUserID;\r\n\r\n  mapping (address => User) public users;\r\n  mapping (uint => address) public userAddresses;\r\n\r\n  uint REFERRALS_LIMIT = 3;\r\n  uint STAGE_DURATION = 365 days;\r\n\r\n  struct User {\r\n    uint id;\r\n    uint referrerID;\r\n    address[] referrals;\r\n    mapping (uint => uint) stageEndTime;\r\n  }\r\n\r\n  event RegisterUserEvent(address indexed user, address indexed referrer, uint time);\r\n  event BuyStageEvent(address indexed user, uint indexed stage, uint time);\r\n  event GetStageProfitEvent(address indexed user, address indexed referral, uint indexed stage, uint time);\r\n  event LostStageProfitEvent(address indexed user, address indexed referral, uint indexed stage, uint time);\r\n\r\n  modifier userNotRegistered() {\r\n    require(users[msg.sender].id == 0, 'User is already registered');\r\n    _;\r\n  }\r\n\r\n  modifier userRegistered() {\r\n    require(users[msg.sender].id != 0, 'User does not exist');\r\n    _;\r\n  }\r\n\r\n  modifier validReferrerID(uint _referrerID) {\r\n    require(_referrerID > 0 && _referrerID <= currentUserID, 'Invalid referrer ID');\r\n    _;\r\n  }\r\n\r\n  modifier validStage(uint _stage) {\r\n    require(_stage > 0 && _stage <= 8, 'Invalid stage');\r\n    _;\r\n  }\r\n\r\n  modifier validStageAmount(uint _stage) {\r\n    require(msg.value == stagePrice[_stage], 'Invalid stage amount');\r\n    _;\r\n  }\r\n\r\n  constructor() public {\r\n    stagePrice[1] = 0.05 ether;\r\n    stagePrice[2] = 0.15 ether;\r\n    stagePrice[3] = 0.45 ether;\r\n    stagePrice[4] = 1.35 ether;\r\n    stagePrice[5] = 4.05 ether;\r\n    stagePrice[6] = 12.15 ether;\r\n    stagePrice[7] = 36.45 ether;\r\n    stagePrice[8] = 109.35 ether;\r\n\r\n    currentUserID++;\r\n\r\n    owner = msg.sender;\r\n\r\n    users[owner] = createNewUser(0);\r\n    userAddresses[currentUserID] = owner;\r\n\r\n    for (uint i = 1; i <= 8; i++) {\r\n      users[owner].stageEndTime[i] = 1 << 37;\r\n    }\r\n  }\r\n\r\n  function () external payable {\r\n    uint stage;\r\n\r\n    for (uint i = 1; i <= 8; i++) {\r\n      if (msg.value == stagePrice[i]) {\r\n        stage = i;\r\n        break;\r\n      }\r\n    }\r\n\r\n    require(stage > 0, 'Invalid amount has sent');\r\n\r\n    if (users[msg.sender].id != 0) {\r\n      buyStage(stage);\r\n      return;\r\n    }\r\n\r\n    if (stage != 1) {\r\n      revert('Buy first stage for 0.05 ETH');\r\n    }\r\n\r\n    address referrer = bytesToAddress(msg.data);\r\n    registerUser(users[referrer].id);\r\n  }\r\n\r\n  function registerUser(uint _referrerID) public payable userNotRegistered() validReferrerID(_referrerID) validStageAmount(1) {\r\n    if (users[userAddresses[_referrerID]].referrals.length >= REFERRALS_LIMIT) {\r\n      _referrerID = users[findReferrer(userAddresses[_referrerID])].id;\r\n    }\r\n\r\n    currentUserID++;\r\n\r\n    users[msg.sender] = createNewUser(_referrerID);\r\n    userAddresses[currentUserID] = msg.sender;\r\n    users[msg.sender].stageEndTime[1] = now + STAGE_DURATION;\r\n\r\n    users[userAddresses[_referrerID]].referrals.push(msg.sender);\r\n\r\n    transferStagePayment(1, msg.sender);\r\n    emit RegisterUserEvent(msg.sender, userAddresses[_referrerID], now);\r\n  }\r\n\r\n  function buyStage(uint _stage) public payable userRegistered() validStage(_stage) validStageAmount(_stage) {\r\n    for (uint s = _stage - 1; s > 0; s--) {\r\n      require(getUserStageEndTime(msg.sender, s) >= now, 'Buy the previous stage');\r\n    }\r\n\r\n    if (getUserStageEndTime(msg.sender, _stage) == 0) {\r\n      users[msg.sender].stageEndTime[_stage] = now + STAGE_DURATION;\r\n    } else {\r\n      users[msg.sender].stageEndTime[_stage] += STAGE_DURATION;\r\n    }\r\n\r\n    transferStagePayment(_stage, msg.sender);\r\n    emit BuyStageEvent(msg.sender, _stage, now);\r\n  }\r\n\r\n  function findReferrer(address _user) public view returns (address) {\r\n    if (users[_user].referrals.length < REFERRALS_LIMIT) {\r\n      return _user;\r\n    }\r\n\r\n    address[363] memory referrals;\r\n    referrals[0] = users[_user].referrals[0];\r\n    referrals[1] = users[_user].referrals[1];\r\n    referrals[2] = users[_user].referrals[2];\r\n\r\n    address referrer;\r\n\r\n    for (uint i = 0; i < 363; i++) {\r\n      if (users[referrals[i]].referrals.length < REFERRALS_LIMIT) {\r\n        referrer = referrals[i];\r\n        break;\r\n      }\r\n\r\n      if (i >= 120) {\r\n        continue;\r\n      }\r\n\r\n      referrals[(i+1)*3] = users[referrals[i]].referrals[0];\r\n      referrals[(i+1)*3+1] = users[referrals[i]].referrals[1];\r\n      referrals[(i+1)*3+2] = users[referrals[i]].referrals[2];\r\n    }\r\n\r\n    require(referrer != address(0), 'Referrer was not found');\r\n\r\n    return referrer;\r\n  }\r\n\r\n  function transferStagePayment(uint _stage, address _user) internal {\r\n    uint height;\r\n    if (_stage == 1 || _stage == 5) {\r\n      height = 1;\r\n    } else if (_stage == 2 || _stage == 6) {\r\n      height = 2;\r\n    } else if (_stage == 3 || _stage == 7) {\r\n      height = 3;\r\n    } else if (_stage == 4 || _stage == 8) {\r\n      height = 4;\r\n    }\r\n\r\n    address referrer = getUserUpline(_user, height);\r\n\r\n    if (referrer == address(0)) {\r\n      referrer = owner;\r\n    }\r\n\r\n    if (getUserStageEndTime(referrer, _stage) < now) {\r\n      emit LostStageProfitEvent(referrer, msg.sender, _stage, now);\r\n      transferStagePayment(_stage, referrer);\r\n      return;\r\n    }\r\n\r\n    if (addressToPayable(referrer).send(msg.value)) {\r\n      emit GetStageProfitEvent(referrer, msg.sender, _stage, now);\r\n    }\r\n  }\r\n\r\n\r\n  function getUserUpline(address _user, uint height) public view returns (address) {\r\n    if (height <= 0 || _user == address(0)) {\r\n      return _user;\r\n    } else {\r\n      return this.getUserUpline(userAddresses[users[_user].referrerID], height - 1);\r\n    }\r\n  }\r\n\r\n  function getUserReferrals(address _user) public view returns (address[] memory) {\r\n    return users[_user].referrals;\r\n  }\r\n\r\n  function getUserStageEndTime(address _user, uint _stage) public view returns (uint) {\r\n    return users[_user].stageEndTime[_stage];\r\n  }\r\n\r\n\r\n  function createNewUser(uint _referrerID) private view returns (User memory) {\r\n    return User({ id: currentUserID, referrerID: _referrerID, referrals: new address[](0) });\r\n  }\r\n\r\n  function bytesToAddress(bytes memory _addr) private pure returns (address addr) {\r\n    assembly {\r\n      addr := mload(add(_addr, 20))\r\n    }\r\n  }\r\n\r\n  function addressToPayable(address _addr) private pure returns (address payable) {\r\n    return address(uint160(_addr));\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_stage\",\"type\":\"uint256\"}],\"name\":\"getUserStageEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referrerID\",\"type\":\"uint256\"}],\"name\":\"registerUser\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserReferrals\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"referrerID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentUserID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stagePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"findReferrer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stage\",\"type\":\"uint256\"}],\"name\":\"buyStage\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"height\",\"type\":\"uint256\"}],\"name\":\"getUserUpline\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"RegisterUserEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"stage\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"BuyStageEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"stage\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"GetStageProfitEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"stage\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"LostStageProfitEvent\",\"type\":\"event\"}]","ContractName":"Redline","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d01f4d916dd2868ef434e016892ed1bfe0d1bf0276db06320610dbb5109b272f"}]}