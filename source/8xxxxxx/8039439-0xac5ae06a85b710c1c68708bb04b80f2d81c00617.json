{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.7;\r\n\r\n\r\ninterface PrimaryStorageInterface {\r\n    function getMaxProtectionPercentage() external view returns (uint256);\r\n    function getDefaultBasePolicyDuration() external view returns (uint256);\r\n    function getDefaultPolicyDuration() external view returns (uint256);\r\n    function isCanceled(uint256 ins) external view returns (bool);\r\n    function getEtherSecured(uint256 insId) external view returns (uint256);\r\n    function getInsuranceOwner(uint256 insId) external view returns (address);\r\n    function getVotedForARefund(uint256 insId) external view returns (bool);\r\n    function getVotedAfterFailedVoting(uint256 insId) external view returns (bool);\r\n}\r\n\r\n\r\ninterface ProjectTokenInterface {\r\n    function balanceOf(address who) external view returns (uint256);\r\n}\r\n\r\n\r\n/* Hybrid Storage B */\r\n\r\ncontract SecondaryStorage {\r\n    address projectController;\r\n    address refundController;\r\n    address disputeController;\r\n    address utilityController;\r\n\r\n    PrimaryStorageInterface primary;\r\n    CoveredProject[] private project;\r\n\r\n    struct CoveredProject {\r\n        uint256 id;\r\n        bytes32 controllerState;\r\n        address payable projectController;\r\n        address payable refundController;\r\n        address payable disputeController;\r\n        address payable utilityController;\r\n        ProjectData data;\r\n        ProjectState state;\r\n        ProjectToken token;\r\n    }\r\n\r\n    struct ProjectData {\r\n        bytes projectName;\r\n        uint256 amountOfFundsContributed;\r\n        uint256 ownerContribution;\r\n        uint256 protectionRate;\r\n        uint256 percentageFloatContainer;\r\n        uint256 ownerPercentageFloatContainer;\r\n        uint256 totalAmountSecuredEther;\r\n        uint256 returnedRefundTokens;\r\n        uint256 votesForRefundState;\r\n        uint256 policyBase;\r\n        uint256 policyEndDate;\r\n        uint256[] protectedInvestments;\r\n        address[] protectedInvestors;\r\n        mapping (address => bool) alreadyProtected;\r\n        mapping (address => uint256) ownerFunds;\r\n    }\r\n\r\n    struct ProjectState {\r\n        uint256 refundStatePeriod;\r\n        uint256 freezeStatePeriod;\r\n        uint256 voteEnd;\r\n        bool isInvestorsVoteFailed;\r\n        bool isRefundInProgress;\r\n        bool isDisputed;\r\n        bool basePolicyExpired;\r\n        ForcedRefundState isRefundStateForced;\r\n        mapping(address => bool) ownerBaseFundsRepaid;\r\n        ProjectCurrentState current;\r\n    }\r\n\r\n    enum ProjectCurrentState {\r\n        Open,\r\n        Closed,\r\n        VoteInProgress,\r\n        InDispute,\r\n        RefundComplete,\r\n        Suspended,\r\n        Expired\r\n    }\r\n\r\n    enum ForcedRefundState {\r\n        No,\r\n        Yes,\r\n        Overturned\r\n    }\r\n\r\n    struct ProjectToken {\r\n        uint256 crowdsaleEndDate;\r\n        uint256 lastCrowdsalePrice;\r\n        uint8 tokenDecimals;\r\n        mapping (uint256 => address) tokenLitter;\r\n        mapping (address => uint256) minimumAmountOfProjectTokens;\r\n        ProjectTokenInterface projectTokenContract;\r\n    }\r\n\r\n    constructor(address primaryStorageAddr) public {\r\n        primary = PrimaryStorageInterface(primaryStorageAddr);\r\n    }\r\n\r\n    modifier onlyValidProjectControllers(uint256 pid) {\r\n        if (_verifyProjectControllers(msg.sender, pid)) {\r\n            _;\r\n        }\r\n        else {\r\n            revert(\"Invalid project controller\");\r\n        }\r\n    }\r\n\r\n    function addProject() external returns (uint256 projectId)\r\n    {\r\n        require(msg.sender == address(primary), \"Not allowed\");\r\n        return project.length++;\r\n    }\r\n\r\n    function setControllerStateToProject(\r\n        uint256 pid,\r\n        address payable latestProjectCtrl,\r\n        address payable latestRefundCtrl,\r\n        address payable latestDisputeCtrl,\r\n        address payable latestUtilityCtrl,\r\n        bytes32 cntrllrs\r\n    )\r\n        external\r\n\r\n    {\r\n        require(msg.sender == address(primary), \"Not allowed\");\r\n        require(\r\n            project[pid].projectController == address(0) &&\r\n            project[pid].refundController  == address(0) &&\r\n            project[pid].disputeController == address(0) &&\r\n            project[pid].utilityController == address(0),\r\n            \"Controllers are already set\"\r\n        );\r\n        project[pid].projectController = latestProjectCtrl;\r\n        project[pid].refundController  = latestRefundCtrl;\r\n        project[pid].disputeController = latestDisputeCtrl;\r\n        project[pid].utilityController = latestUtilityCtrl;\r\n\r\n        project[pid].controllerState = cntrllrs;\r\n    }\r\n\r\n    function setProjectId(uint256 pid)\r\n        external\r\n        onlyValidProjectControllers(pid)\r\n    {\r\n        project[pid].id = pid;\r\n    }\r\n\r\n    function setProjectCurrentState(uint256 pid, uint8 currentState)\r\n        external\r\n        onlyValidProjectControllers(pid)\r\n    {\r\n        project[pid].state.current = ProjectCurrentState(currentState);\r\n    }\r\n\r\n    function setInitialProtectionRate(uint256 pid)\r\n        external\r\n        onlyValidProjectControllers(pid)\r\n    {\r\n        project[pid].data.protectionRate = primary.getMaxProtectionPercentage();\r\n    }\r\n\r\n    function setProtectionRate(uint256 pid, uint256 protectionPercentage)\r\n        external\r\n        onlyValidProjectControllers(pid)\r\n    {\r\n        project[pid].data.protectionRate = protectionPercentage;\r\n    }\r\n\r\n    function setVotesForRefundState(uint256 pid, uint256 numberOfVotes)\r\n        external\r\n        onlyValidProjectControllers(pid)\r\n    {\r\n        project[pid].data.votesForRefundState = numberOfVotes;\r\n    }\r\n\r\n    function setPercentageFloatContainer(uint256 pid, uint256 amountOfFunds)\r\n        external\r\n        onlyValidProjectControllers(pid)\r\n    {\r\n        project[pid].data.percentageFloatContainer = amountOfFunds;\r\n    }\r\n\r\n    function setOwnerPercentageFloatContainer(\r\n        uint256 pid,\r\n        uint256 amountOfFunds\r\n      )\r\n        external\r\n        onlyValidProjectControllers(pid)\r\n    {\r\n        project[pid].data.ownerPercentageFloatContainer = amountOfFunds;\r\n    }\r\n\r\n    function setPolicyBase(uint256 pid)\r\n        external\r\n        onlyValidProjectControllers(pid)\r\n    {\r\n        project[pid].data.policyBase = block.number + primary.getDefaultBasePolicyDuration();\r\n    }\r\n\r\n    function setPolicyEnd(uint256 pid)\r\n        external\r\n        onlyValidProjectControllers(pid)\r\n    {\r\n        project[pid].data.policyEndDate = block.number + primary.getDefaultPolicyDuration();\r\n    }\r\n\r\n    function setAmountOfFundsContributed(uint256 pid, uint256 amount)\r\n        external\r\n        onlyValidProjectControllers(pid)\r\n    {\r\n        project[pid].data.amountOfFundsContributed = amount;\r\n    }\r\n\r\n    function setTotalAmountSecuredEther(uint256 pid, uint256 amount)\r\n        external\r\n        onlyValidProjectControllers(pid)\r\n    {\r\n        project[pid].data.totalAmountSecuredEther = amount;\r\n    }\r\n\r\n    function setReturnedRefundTokens(uint256 pid, uint256 amount)\r\n        external\r\n        onlyValidProjectControllers(pid)\r\n    {\r\n        project[pid].data.returnedRefundTokens = amount;\r\n    }\r\n\r\n    function setInvestorToProject(uint256 pid, address investor)\r\n        external\r\n        onlyValidProjectControllers(pid)\r\n    {\r\n        project[pid].data.protectedInvestors.push(investor);\r\n    }\r\n\r\n    function setRefundStatePeriod(uint256 pid, uint256 numberInBlocks)\r\n        external\r\n        onlyValidProjectControllers(pid)\r\n    {\r\n        project[pid].state.refundStatePeriod = numberInBlocks;\r\n    }\r\n\r\n    function setFreezeStatePeriod(uint256 pid, uint256 numberInBlocks)\r\n        external\r\n        onlyValidProjectControllers(pid)\r\n    {\r\n        project[pid].state.freezeStatePeriod = numberInBlocks;\r\n    }\r\n\r\n    function setOwnerContribution(uint256 pid, uint256 amount)\r\n        external\r\n        onlyValidProjectControllers(pid)\r\n    {\r\n        project[pid].data.ownerContribution = amount;\r\n    }\r\n\r\n    function setOwnerFunds(uint256 pid, address ownerAddr, uint256 amount)\r\n        external\r\n        onlyValidProjectControllers(pid)\r\n    {\r\n        project[pid].data.ownerFunds[ownerAddr] = amount;\r\n    }\r\n\r\n    function setInsuranceIdToProject(uint256 pid, uint256 insId)\r\n        external\r\n        onlyValidProjectControllers(pid)\r\n    {\r\n        project[pid].data.protectedInvestments.push(insId);\r\n    }\r\n\r\n    function removeInsuranceIdFromProject(uint256 pid, uint256 ins, uint256 idx)\r\n        external\r\n        onlyValidProjectControllers(pid)\r\n    {\r\n        uint256 replacementIndex = project[pid].data.protectedInvestments.length - 1;\r\n        uint256 replacementIns = project[pid].data.protectedInvestments[replacementIndex];\r\n        if (idx == 0) {\r\n            for (uint256 i = 1; i < project[pid].data.protectedInvestments.length; i++) {\r\n                if (project[pid].data.protectedInvestments[i] == ins) {\r\n                    project[pid].data.protectedInvestments[i] = replacementIns;\r\n                    break;\r\n                }\r\n            }\r\n        } else {\r\n            project[pid].data.protectedInvestments[idx] = replacementIns;\r\n        }\r\n        project[pid].data.protectedInvestments.length--;\r\n    }\r\n\r\n    function removeInvestorAddressFromProject(uint256 pid, address investorAddress, uint256 idx)\r\n        external\r\n        onlyValidProjectControllers(pid)\r\n    {\r\n        uint256 replacementIndex = project[pid].data.protectedInvestors.length - 1;\r\n        address replacementInvst = project[pid].data.protectedInvestors[replacementIndex];\r\n        if (idx == 0) {\r\n            for (uint256 i = 1; i < project[pid].data.protectedInvestors.length; i++) {\r\n                if (project[pid].data.protectedInvestors[i] == investorAddress) {\r\n                    project[pid].data.protectedInvestors[i] = replacementInvst;\r\n                    break;\r\n                }\r\n            }\r\n        } else {\r\n            project[pid].data.protectedInvestors[idx] = replacementInvst;\r\n        }\r\n        project[pid].data.protectedInvestors.length--;\r\n    }\r\n\r\n    function setProjectName(uint256 pid, bytes calldata name)\r\n        external\r\n        onlyValidProjectControllers(pid)\r\n    {\r\n        project[pid].data.projectName = name;\r\n    }\r\n\r\n    function setProjectTokenContract(uint256 pid, address tokenAddress)\r\n        external\r\n        onlyValidProjectControllers(pid)\r\n    {\r\n        project[pid].token.projectTokenContract = ProjectTokenInterface(tokenAddress);\r\n    }\r\n\r\n    function setCrowdsaleEndTime(uint256 pid, uint256 crowdsaleEnd)\r\n        external\r\n        onlyValidProjectControllers(pid)\r\n    {\r\n        project[pid].token.crowdsaleEndDate = crowdsaleEnd;\r\n    }\r\n\r\n    function setHighestTokenPrice(uint256 pid, uint256 highestTokenPrice)\r\n        external\r\n        onlyValidProjectControllers(pid)\r\n    {\r\n        project[pid].token.lastCrowdsalePrice = highestTokenPrice;\r\n    }\r\n\r\n    function setTokenDecimals(uint256 pid, uint8 tokenDecimals)\r\n        external\r\n        onlyValidProjectControllers(pid)\r\n    {\r\n        project[pid].token.tokenDecimals = tokenDecimals;\r\n    }\r\n\r\n    function setTokenLitter(\r\n        uint256 pid,\r\n        uint256 ins,\r\n        address tokenLitter\r\n    )\r\n        external\r\n        onlyValidProjectControllers(pid)\r\n    {\r\n        project[pid].token.tokenLitter[ins] = tokenLitter;\r\n    }\r\n\r\n    function setMinAmountProjectTokens(\r\n        uint256 pid,\r\n        uint256 minAmountProjectTokens,\r\n        address investor\r\n    )\r\n        external\r\n        onlyValidProjectControllers(pid)\r\n    {\r\n        project[pid].token.minimumAmountOfProjectTokens[investor] = minAmountProjectTokens;\r\n    }\r\n\r\n    function setAlreadyProtected(\r\n        uint256 pid,\r\n        address investor\r\n    )\r\n        external\r\n        onlyValidProjectControllers(pid)\r\n    {\r\n        project[pid].data.alreadyProtected[investor] = true;\r\n    }\r\n\r\n    function setVoteEnd(uint256 pid, uint256 numberOfBlock)\r\n        external\r\n        onlyValidProjectControllers(pid)\r\n    {\r\n        project[pid].state.voteEnd = numberOfBlock;\r\n    }\r\n\r\n    function setIsInvestorsVoteFailed(uint256 pid, bool failedOrNot)\r\n        external\r\n        onlyValidProjectControllers(pid)\r\n    {\r\n        project[pid].state.isInvestorsVoteFailed = failedOrNot;\r\n    }\r\n\r\n    function setIsRefundInProgress(uint256 pid, bool status)\r\n        external\r\n        onlyValidProjectControllers(pid)\r\n    {\r\n        project[pid].state.isRefundInProgress = status;\r\n    }\r\n\r\n    function setIsDisputed(uint256 pid)\r\n        external\r\n        onlyValidProjectControllers(pid)\r\n    {\r\n        project[pid].state.isDisputed = true;\r\n    }\r\n\r\n    function setOwnerBaseFundsRepaid(uint256 pid, address owner)\r\n        external\r\n        onlyValidProjectControllers(pid)\r\n    {\r\n        project[pid].state.ownerBaseFundsRepaid[owner] = true;\r\n    }\r\n\r\n    function setBasePolicyExpired(uint256 pid)\r\n        external\r\n        onlyValidProjectControllers(pid)\r\n    {\r\n        project[pid].state.basePolicyExpired = true;\r\n    }\r\n\r\n    function setForcedRefundState(uint256 pid, uint8 value) external onlyValidProjectControllers(pid) {\r\n        project[pid].state.isRefundStateForced = ForcedRefundState(value);\r\n    }\r\n\r\n    function getActiveProjects() external view returns (uint256) {\r\n        uint256 activeProjects;\r\n        uint8 pjs;\r\n        for (uint256 i = 0; project.length > i; i++) {\r\n            pjs = uint8(project[i].state.current);\r\n            if (pjs != 4 && pjs != 5 && pjs != 6) {\r\n                activeProjects++;\r\n            }\r\n        }\r\n        return activeProjects;\r\n    }\r\n\r\n    function getProjectControllerState(uint256 pid) external view returns (bytes32) {\r\n        return project[pid].controllerState;\r\n    }\r\n\r\n    function getRefundControllerOfProject(uint256 pid) external view returns (address payable) {\r\n        return project[pid].refundController;\r\n    }\r\n\r\n    function getUtilityControllerOfProject(uint256 pid) external view returns (address payable) {\r\n        return project[pid].utilityController;\r\n    }\r\n\r\n    function getDisputeControllerOfProject(uint256 pid) external view returns (address payable) {\r\n        return project[pid].disputeController;\r\n    }\r\n\r\n    function getProjectControllerOfProject(uint256 pid) external view returns (address payable) {\r\n        return project[pid].projectController;\r\n    }\r\n\r\n    function getNumberOfCoveredProjects() external view returns (uint256) {\r\n        return project.length;\r\n    }\r\n\r\n    function getAmountOfFundsContributed(uint256 pid) external view returns (uint256) {\r\n        return project[pid].data.amountOfFundsContributed;\r\n    }\r\n\r\n    function getProjectCurrentState(uint256 pid) external view returns (uint8) {\r\n        return uint8(project[pid].state.current);\r\n    }\r\n\r\n    function getCrowdsaleEndTime(uint256 pid) external view returns (uint256) {\r\n        return project[pid].token.crowdsaleEndDate;\r\n    }\r\n\r\n    function getAlreadyProtected(uint256 pid, address investor)\r\n        external\r\n        view\r\n        returns(bool isProtected)\r\n    {\r\n        return project[pid].data.alreadyProtected[investor];\r\n    }\r\n\r\n    function getTotalAmountSecuredEther(uint256 pid) external view returns (uint256) {\r\n        return project[pid].data.totalAmountSecuredEther;\r\n    }\r\n\r\n    function getProtectionRate(uint256 pid) external view returns (uint256) {\r\n        return project[pid].data.protectionRate;\r\n    }\r\n\r\n    function getHighestTokenPrice(uint256 pid) external view returns (uint256) {\r\n        return project[pid].token.lastCrowdsalePrice;\r\n    }\r\n\r\n    function getTokenDecimals(uint256 pid) external view returns (uint8) {\r\n        return project[pid].token.tokenDecimals;\r\n    }\r\n\r\n    function getProjectTokenAddress(uint256 pid) external view returns (address) {\r\n        return address(project[pid].token.projectTokenContract);\r\n    }\r\n\r\n    function getProjectTokenContract(uint256 pid) external view returns (ProjectTokenInterface) {\r\n        return project[pid].token.projectTokenContract;\r\n    }\r\n\r\n    function getTokenLitter(uint256 pid, uint256 ins) external view returns (address) {\r\n        return project[pid].token.tokenLitter[ins];\r\n    }\r\n\r\n    function getPercentageFloatContainer(uint256 pid) external view returns (uint256) {\r\n        return project[pid].data.percentageFloatContainer;\r\n    }\r\n\r\n    function getOwnerContribution(uint256 pid) external view returns (uint256) {\r\n        return project[pid].data.ownerContribution;\r\n    }\r\n\r\n    function getOwnerPercentageFloatContainer(uint256 pid) external view returns (uint256) {\r\n        return project[pid].data.ownerPercentageFloatContainer;\r\n    }\r\n\r\n    function getProjectName(uint256 pid) external view returns (bytes memory) {\r\n        return project[pid].data.projectName;\r\n    }\r\n\r\n    function getNumberOfProjectInvestments(uint256 pid) external view returns (uint256) {\r\n        return project[pid].data.protectedInvestments.length;\r\n    }\r\n\r\n    function getReturnedRefundTokens(uint256 pid)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return project[pid].data.returnedRefundTokens;\r\n    }\r\n\r\n    function getVotesForRefundState(uint256 pid)\r\n        external\r\n        view\r\n        onlyValidProjectControllers(pid)\r\n        returns (uint256)\r\n    {\r\n        return project[pid].data.votesForRefundState;\r\n    }\r\n\r\n    function getPolicyBase(uint256 pid) external view returns (uint256) {\r\n        return project[pid].data.policyBase;\r\n    }\r\n\r\n    function getPolicyEndDate(uint256 pid) external view returns (uint256) {\r\n        return project[pid].data.policyEndDate;\r\n    }\r\n\r\n    function getAddressOfInvestorInProject(uint256 pid, uint256 invstrNumber) external view returns (address) {\r\n        return project[pid].data.protectedInvestors[invstrNumber];\r\n    }\r\n\r\n    function getNumberOfInvestor(uint256 pid, address investorAddress)\r\n        external\r\n        view\r\n        returns(uint256)\r\n    {\r\n        for (uint256 i = 1; i < project[pid].data.protectedInvestors.length; i++) {\r\n            if (project[pid].data.protectedInvestors[i] == investorAddress) {\r\n                return i;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getNumberOfInvestmentToProject(uint256 pid, uint256 insId) external view returns (uint256) {\r\n        for (uint256 i = 1; i < project[pid].data.protectedInvestments.length; i++) {\r\n            if (project[pid].data.protectedInvestments[i] == insId) {\r\n                return i;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getOwnerFunds(uint256 pid, address ownerAddr) external view returns (uint256) {\r\n        return project[pid].data.ownerFunds[ownerAddr];\r\n    }\r\n\r\n    function getInvestmentId(uint256 pid, address investor) external view returns (uint256 insId) {\r\n        for (uint256 i = 1; i < project[pid].data.protectedInvestments.length; i++) {\r\n            insId = project[pid].data.protectedInvestments[i];\r\n            if (investor == primary.getInsuranceOwner(insId)) {\r\n                return insId;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getMinAmountProjectTokens(uint256 pid, address investor) external view returns (uint256) {\r\n        return project[pid].token.minimumAmountOfProjectTokens[investor];\r\n    }\r\n\r\n    function getInvestmentToProject(\r\n        uint256 pid,\r\n        uint256 insuranceNumber\r\n    )\r\n        external\r\n        view\r\n        returns (uint256 investmentId)\r\n    {\r\n        return project[pid].data.protectedInvestments[insuranceNumber];\r\n    }\r\n\r\n    function getRefundStatePeriod(uint256 pid) external view returns (uint256) {\r\n        return project[pid].state.refundStatePeriod;\r\n    }\r\n\r\n    function getFreezeStatePeriod(uint256 pid) external view returns (uint256) {\r\n        return project[pid].state.freezeStatePeriod;\r\n    }\r\n\r\n    function getVoteEnd(uint256 pid) external view returns (uint256) {\r\n        return project[pid].state.voteEnd;\r\n    }\r\n\r\n    function getIsInvestorsVoteFailed(uint256 pid) external view returns (bool) {\r\n        return project[pid].state.isInvestorsVoteFailed;\r\n    }\r\n\r\n    function getIsRefundInProgress(uint256 pid) external view returns (bool) {\r\n        return project[pid].state.isRefundInProgress;\r\n    }\r\n\r\n    function getIsDisputed(uint256 pid) external view returns (bool) {\r\n        return project[pid].state.isDisputed;\r\n    }\r\n\r\n    function getOwnerBaseFundsRepaid(uint256 pid, address owner)\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        return project[pid].state.ownerBaseFundsRepaid[owner];\r\n    }\r\n\r\n    function getBasePolicyExpired(uint256 pid)\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        return project[pid].state.basePolicyExpired;\r\n    }\r\n\r\n    function isRefundStateForced(uint256 pid) external view returns (uint8) {\r\n        return uint8(project[pid].state.isRefundStateForced);\r\n    }\r\n\r\n    function getEligibleForInternalVote(uint256 pid)\r\n        external\r\n        view\r\n        returns (uint256 eligibleInvestors, uint256 validSecuredEther)\r\n    {\r\n        uint256 insrnc;\r\n        uint256 numinv = project[pid].data.protectedInvestments.length;\r\n        for (uint256 i = 1; i < numinv; i++) {\r\n            if (i > 412) {\r\n                eligibleInvestors += (numinv - i);\r\n                for (i; i < numinv; i++) {\r\n                    validSecuredEther += primary.getEtherSecured(project[pid].data.protectedInvestments[i]);\r\n                }\r\n                break;\r\n            }\r\n\r\n            insrnc = project[pid].data.protectedInvestments[i];\r\n            if (!project[pid].state.isInvestorsVoteFailed) {\r\n                eligibleInvestors++;\r\n                validSecuredEther += primary.getEtherSecured(insrnc);\r\n            } else {\r\n                if (!primary.getVotedForARefund(insrnc)) {\r\n                    eligibleInvestors++;\r\n                    validSecuredEther += primary.getEtherSecured(insrnc);\r\n                }\r\n            }\r\n        }\r\n        return (eligibleInvestors, validSecuredEther);\r\n    }\r\n\r\n    function getInvalidInsurances(uint256 pid)\r\n        external\r\n        view\r\n        returns (uint256[8] memory invalidInsurances)\r\n    {\r\n        ProjectTokenInterface tknadd = project[pid].token.projectTokenContract;\r\n        uint256 i = 1;\r\n        uint256 invalid;\r\n        address investor;\r\n        uint256 insurance;\r\n        address tknlitter;\r\n\r\n        while (i < project[pid].data.protectedInvestments.length && invalid < 8) {\r\n            insurance = project[pid].data.protectedInvestments[i];\r\n            if (!primary.isCanceled(insurance)) {\r\n                investor = project[pid].data.protectedInvestors[i];\r\n                tknlitter = project[pid].token.tokenLitter[insurance];\r\n\r\n                if (tknadd.balanceOf(tknlitter) < project[pid].token.minimumAmountOfProjectTokens[investor] &&\r\n                    tknadd.balanceOf(investor) < project[pid].token.minimumAmountOfProjectTokens[investor]) {\r\n                    invalidInsurances[invalid] = insurance;\r\n                    invalid++;\r\n                }\r\n            }\r\n            i++;\r\n        }\r\n        return invalidInsurances;\r\n    }\r\n\r\n    function getIncorrectlyVoted(uint256 pid)\r\n        external\r\n        view\r\n        returns (uint256[8] memory invalidInsurances)\r\n    {\r\n        uint256 i = 1;\r\n        uint256 invalid;\r\n        uint256 insurance;\r\n        bool intvtf = project[pid].state.isInvestorsVoteFailed;\r\n        while (i < project[pid].data.protectedInvestments.length && invalid < 8) {\r\n            insurance = project[pid].data.protectedInvestments[i];\r\n            if (!intvtf && primary.getVotedForARefund(insurance) && !primary.isCanceled(insurance)) {\r\n                invalidInsurances[invalid] = insurance;\r\n                invalid++;\r\n            }\r\n            if (intvtf && primary.getVotedAfterFailedVoting(insurance) && !primary.isCanceled(insurance)) {\r\n                invalidInsurances[invalid] = insurance;\r\n                invalid++;\r\n            }\r\n            i++;\r\n        }\r\n        return invalidInsurances;\r\n    }\r\n\r\n    function getOverallSecuredFunds() external view returns (uint256) {\r\n        uint8 pjs;\r\n        uint256 totalSecuredFunds;\r\n        for (uint256 i = 0; project.length > i; i++) {\r\n            pjs = uint8(project[i].state.current);\r\n            if (pjs != 4 && pjs != 5 && pjs != 6 && project[i].data.totalAmountSecuredEther > 1) {\r\n                totalSecuredFunds = totalSecuredFunds + project[i].data.totalAmountSecuredEther;\r\n            }\r\n        }\r\n    }\r\n\r\n    function onlyProjectControllers(address caller, uint256 pid) external view returns (bool) {\r\n        return _verifyProjectControllers(caller, pid);\r\n    }\r\n\r\n    function _verifyProjectControllers(address caller, uint256 pid) internal view returns (bool) {\r\n        if (caller == project[pid].projectController ||\r\n            caller == project[pid].refundController  ||\r\n            caller == project[pid].disputeController ||\r\n            caller == project[pid].utilityController) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getNumberOfProjectInvestments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"ins\",\"type\":\"uint256\"},{\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"removeInsuranceIdFromProject\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getPolicyBase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getProjectControllerState\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getCrowdsaleEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"numberInBlocks\",\"type\":\"uint256\"}],\"name\":\"setRefundStatePeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getIsInvestorsVoteFailed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"getInvestmentId\",\"outputs\":[{\"name\":\"insId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"setBasePolicyExpired\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getVotesForRefundState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getTotalAmountSecuredEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getActiveProjects\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"ins\",\"type\":\"uint256\"}],\"name\":\"getTokenLitter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getHighestTokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getVoteEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"insId\",\"type\":\"uint256\"}],\"name\":\"setInsuranceIdToProject\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getIncorrectlyVoted\",\"outputs\":[{\"name\":\"invalidInsurances\",\"type\":\"uint256[8]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"numberOfVotes\",\"type\":\"uint256\"}],\"name\":\"setVotesForRefundState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"isRefundStateForced\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getUtilityControllerOfProject\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getBasePolicyExpired\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"bytes\"}],\"name\":\"setProjectName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addProject\",\"outputs\":[{\"name\":\"projectId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"highestTokenPrice\",\"type\":\"uint256\"}],\"name\":\"setHighestTokenPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"latestProjectCtrl\",\"type\":\"address\"},{\"name\":\"latestRefundCtrl\",\"type\":\"address\"},{\"name\":\"latestDisputeCtrl\",\"type\":\"address\"},{\"name\":\"latestUtilityCtrl\",\"type\":\"address\"},{\"name\":\"cntrllrs\",\"type\":\"bytes32\"}],\"name\":\"setControllerStateToProject\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"setAlreadyProtected\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getDisputeControllerOfProject\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"setOwnerBaseFundsRepaid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getOwnerContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getFreezeStatePeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getIsRefundInProgress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getRefundControllerOfProject\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setReturnedRefundTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"setPolicyEnd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getIsDisputed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint8\"}],\"name\":\"setForcedRefundState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getPolicyEndDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getReturnedRefundTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"tokenDecimals\",\"type\":\"uint8\"}],\"name\":\"setTokenDecimals\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getAmountOfFundsContributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getInvalidInsurances\",\"outputs\":[{\"name\":\"invalidInsurances\",\"type\":\"uint256[8]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"setInvestorToProject\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"currentState\",\"type\":\"uint8\"}],\"name\":\"setProjectCurrentState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"numberInBlocks\",\"type\":\"uint256\"}],\"name\":\"setFreezeStatePeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"setIsDisputed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"investorAddress\",\"type\":\"address\"}],\"name\":\"getNumberOfInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"amountOfFunds\",\"type\":\"uint256\"}],\"name\":\"setPercentageFloatContainer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getRefundStatePeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"invstrNumber\",\"type\":\"uint256\"}],\"name\":\"getAddressOfInvestorInProject\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getOwnerPercentageFloatContainer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"protectionPercentage\",\"type\":\"uint256\"}],\"name\":\"setProtectionRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getEligibleForInternalVote\",\"outputs\":[{\"name\":\"eligibleInvestors\",\"type\":\"uint256\"},{\"name\":\"validSecuredEther\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"minAmountProjectTokens\",\"type\":\"uint256\"},{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"setMinAmountProjectTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"ownerAddr\",\"type\":\"address\"}],\"name\":\"getOwnerFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getOwnerBaseFundsRepaid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"numberOfBlock\",\"type\":\"uint256\"}],\"name\":\"setVoteEnd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"caller\",\"type\":\"address\"},{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"onlyProjectControllers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"insId\",\"type\":\"uint256\"}],\"name\":\"getNumberOfInvestmentToProject\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getProjectTokenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"insuranceNumber\",\"type\":\"uint256\"}],\"name\":\"getInvestmentToProject\",\"outputs\":[{\"name\":\"investmentId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"amountOfFunds\",\"type\":\"uint256\"}],\"name\":\"setOwnerPercentageFloatContainer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setOwnerContribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOverallSecuredFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getProjectControllerOfProject\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getTokenDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getProjectCurrentState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"setProjectTokenContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setIsRefundInProgress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getProtectionRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getPercentageFloatContainer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"setProjectId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"ins\",\"type\":\"uint256\"},{\"name\":\"tokenLitter\",\"type\":\"address\"}],\"name\":\"setTokenLitter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setTotalAmountSecuredEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setAmountOfFundsContributed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"setInitialProtectionRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"setPolicyBase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumberOfCoveredProjects\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"getMinAmountProjectTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"getAlreadyProtected\",\"outputs\":[{\"name\":\"isProtected\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getProjectName\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"ownerAddr\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setOwnerFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"investorAddress\",\"type\":\"address\"},{\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"removeInvestorAddressFromProject\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getProjectTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"failedOrNot\",\"type\":\"bool\"}],\"name\":\"setIsInvestorsVoteFailed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"crowdsaleEnd\",\"type\":\"uint256\"}],\"name\":\"setCrowdsaleEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"primaryStorageAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"SecondaryStorage","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"500000","ConstructorArguments":"00000000000000000000000057d504f3ebcc43b8a894a7933676eb17236cc35d","Library":"","SwarmSource":"bzzr://47f23d59cfc4f23f0feb4cdfaccdfe8598581d0fba1391eda6725a091b648565"}]}