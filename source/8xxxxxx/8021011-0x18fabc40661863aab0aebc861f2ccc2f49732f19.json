{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\nINFERNO (BLAZE)\r\n\r\nwebsite:  https://inferno.cash\r\n\r\ndiscord:  https://discord.gg/VCbevQ\r\n\r\n2,000,000 BLAZE Initial Supply\r\n\r\n1,000,000 BLAZE can be claimed on the website\r\n\r\n2% Burn on Every Transfer\r\n\r\n1% Goes to Cummunity Fund Project from Every Transfer\r\n\r\nCommunity is chosen by the user every month\r\n\r\n\r\n*/\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\r\n    uint256 c = add(a,m);\r\n    uint256 d = sub(c,1);\r\n    return mul(div(d,m),m);\r\n  }\r\n}\r\n\r\ncontract ERC20Detailed is IERC20 {\r\n\r\n  uint8 private _Tokendecimals;\r\n  string private _Tokenname;\r\n  string private _Tokensymbol;\r\n\r\n  constructor(string memory name, string memory symbol, uint8 decimals) public {\r\n   \r\n   _Tokendecimals = decimals;\r\n    _Tokenname = name;\r\n    _Tokensymbol = symbol;\r\n    \r\n  }\r\n\r\n  function name() public view returns(string memory) {\r\n    return _Tokenname;\r\n  }\r\n\r\n  function symbol() public view returns(string memory) {\r\n    return _Tokensymbol;\r\n  }\r\n\r\n  function decimals() public view returns(uint8) {\r\n    return _Tokendecimals;\r\n  }\r\n}\r\n\r\n/**end here**/\r\n\r\ncontract Inferno is ERC20Detailed {\r\n\r\n  using SafeMath for uint256;\r\n  mapping (address => uint256) private _InfernoTokenBalances;\r\n  mapping (address => mapping (address => uint256)) private _allowed;\r\n  mapping (address => uint256) public _lastClaimBlock;\r\n  string constant tokenName = \"Inferno\";\r\n  string constant tokenSymbol = \"BLAZE\";\r\n  uint8  constant tokenDecimals = 18;\r\n  uint256 _totalSupply = 2000000e18;\r\n  uint256 public _nextClaimAmount = 1000e18;\r\n  address public admin;\r\n  uint256 public _InfernoFund = 2000000e18;\r\n  bool public _allowClaims = false;\r\n  address public _communityAccount;\r\n  uint256 public _claimPrice = 0;\r\n \r\n \r\n  constructor() public payable ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) {\r\n    //_mint(msg.sender, _totalSupply);\r\n    admin = msg.sender;\r\n    _communityAccount = msg.sender;   //just until we set one\r\n  }\r\n\r\n\r\n\r\n  function totalSupply() public view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  function myTokens() public view returns (uint256) {\r\n    return _InfernoTokenBalances[msg.sender];\r\n  }\r\n\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n    return _InfernoTokenBalances[owner];\r\n  }\r\n\r\n  function allowance(address owner, address spender) public view returns (uint256) {\r\n    return _allowed[owner][spender];\r\n  }\r\n\r\n  function setAllowClaims(bool _setClaims) public {\r\n    require(msg.sender == admin);\r\n    _allowClaims = _setClaims;\r\n  }\r\n\r\n  function setCommunityAcccount(address _newAccount) public {\r\n    require(msg.sender == admin);\r\n    _communityAccount = _newAccount;\r\n  }\r\n\r\n  function setClaimPrice(uint256 _newPrice) public {    //normally price is zero, this will be bot defense if necessary\r\n    require(msg.sender == admin);\r\n    _claimPrice = _newPrice;\r\n  }\r\n\r\n  function distributeETH(address payable _to, uint _amount) public {\r\n    require(msg.sender == admin);\r\n    require(_amount <= address(this).balance);\r\n    _to.transfer(_amount);\r\n  }\r\n  \r\n\r\n\r\n  function transfer(address to, uint256 value) public returns (bool) {\r\n    require(value <= _InfernoTokenBalances[msg.sender]);\r\n    require(to != address(0));\r\n\r\n    uint256 InfernoTokenDecay = value.div(50);   //2%\r\n    uint256 tokensToTransfer = value.sub(InfernoTokenDecay);\r\n\r\n    uint256 communityAmount = value.div(100);   //1%\r\n    _InfernoTokenBalances[_communityAccount] = _InfernoTokenBalances[_communityAccount].add(communityAmount);\r\n    tokensToTransfer = tokensToTransfer.sub(communityAmount);\r\n\r\n    _InfernoTokenBalances[msg.sender] = _InfernoTokenBalances[msg.sender].sub(value);\r\n    _InfernoTokenBalances[to] = _InfernoTokenBalances[to].add(tokensToTransfer);\r\n\r\n    _totalSupply = _totalSupply.sub(InfernoTokenDecay);\r\n\r\n    emit Transfer(msg.sender, to, tokensToTransfer);\r\n    emit Transfer(msg.sender, address(0), InfernoTokenDecay);\r\n    emit Transfer(msg.sender, _communityAccount, communityAmount);\r\n    return true;\r\n  }\r\n\r\n  function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {\r\n    for (uint256 i = 0; i < receivers.length; i++) {\r\n      transfer(receivers[i], amounts[i]);\r\n    }\r\n  }\r\n\r\n  function approve(address spender, uint256 value) public returns (bool) {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = value;\r\n    emit Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n    require(value <= _InfernoTokenBalances[from]);\r\n    require(value <= _allowed[from][msg.sender]);\r\n    require(to != address(0));\r\n\r\n    _InfernoTokenBalances[from] = _InfernoTokenBalances[from].sub(value);\r\n\r\n    uint256 InfernoTokenDecay = value.div(50);\r\n    uint256 tokensToTransfer = value.sub(InfernoTokenDecay);\r\n\r\n     uint256 communityAmount = value.div(100);   //1%\r\n    _InfernoTokenBalances[_communityAccount] = _InfernoTokenBalances[_communityAccount].add(communityAmount);\r\n    tokensToTransfer = tokensToTransfer.sub(communityAmount);\r\n\r\n    _InfernoTokenBalances[to] = _InfernoTokenBalances[to].add(tokensToTransfer);\r\n    _totalSupply = _totalSupply.sub(InfernoTokenDecay);\r\n\r\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n\r\n    emit Transfer(from, to, tokensToTransfer);\r\n    emit Transfer(from, address(0), InfernoTokenDecay);\r\n    emit Transfer(from, _communityAccount, communityAmount);\r\n\r\n    return true;\r\n  }\r\n\r\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  function burn(uint256 amount) public {\r\n    _burn(msg.sender, amount);\r\n  }\r\n\r\n  function _burn(address account, uint256 amount) internal {\r\n    require(amount != 0);\r\n    require(amount <= _InfernoTokenBalances[account]);\r\n    _totalSupply = _totalSupply.sub(amount);\r\n    _InfernoTokenBalances[account] = _InfernoTokenBalances[account].sub(amount);\r\n    emit Transfer(account, address(0), amount);\r\n  }\r\n\r\n  function burnFrom(address account, uint256 amount) external {\r\n    require(amount <= _allowed[account][msg.sender]);\r\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);\r\n    _burn(account, amount);\r\n  }\r\n\r\n  function claim() payable public  {\r\n    require(_allowClaims || (msg.sender == admin));\r\n    require((block.number.sub(_lastClaimBlock[msg.sender])) >= 5900);\r\n    require((msg.value >= (_claimPrice.mul(_nextClaimAmount).div(1e18))) || (msg.sender == admin));\r\n    _InfernoTokenBalances[msg.sender] = _InfernoTokenBalances[msg.sender].add(_nextClaimAmount);\r\n    emit Transfer(address(this), msg.sender, _nextClaimAmount);\r\n    _InfernoFund = _InfernoFund.add(_nextClaimAmount);\r\n    _totalSupply = _totalSupply.add(_nextClaimAmount.mul(2));\r\n    _nextClaimAmount = _nextClaimAmount.mul(999).div(1000);\r\n    _lastClaimBlock[msg.sender] = block.number;\r\n      \r\n  }\r\n\r\n  function distributeFund(address _to, uint256 _amount) public {\r\n      require(msg.sender == admin);\r\n      require(_amount <= _InfernoFund);\r\n      _InfernoFund = _InfernoFund.sub(_amount);\r\n      _InfernoTokenBalances[_to] = _InfernoTokenBalances[_to].add(_amount);\r\n      emit Transfer(address(this), _to, _amount);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receivers\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"setClaimPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_InfernoFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_setClaims\",\"type\":\"bool\"}],\"name\":\"setAllowClaims\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_claimPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"distributeETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_nextClaimAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"distributeFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_lastClaimBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_allowClaims\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAccount\",\"type\":\"address\"}],\"name\":\"setCommunityAcccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_communityAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Inferno","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://18b84959d9982ede12c3c693557d81483fd2ddf94b8d0c08c575e5d9325160b0"}]}