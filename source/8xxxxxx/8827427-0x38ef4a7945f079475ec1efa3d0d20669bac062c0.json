{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2019-09-16\r\n*/\r\n\r\npragma solidity ^0.5.11;\r\n\r\ncontract UtilWin {\r\n    uint ethWei = 1 ether;\r\n\r\n\t/*投注等级*/\r\n    function getLevel(uint value) public view returns(uint) {\r\n        if (value >= 1*ethWei && value <= 5*ethWei) {\r\n            return 1;\r\n        }\r\n        if (value >= 6*ethWei && value <= 10*ethWei) {\r\n            return 2;\r\n        }\r\n        if (value >= 11*ethWei && value <= 15*ethWei) {\r\n            return 3;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n\r\n\t/*投注分红比例*/\r\n    function getScByLevel(uint level) public pure returns(uint) {\r\n        if (level == 1) {\r\n            return 10;\r\n        }\r\n        if (level == 2) {\r\n            return 12;\r\n        }\r\n        if (level == 3) {\r\n            return 15;\r\n        }\r\n        return 0;\r\n    }\r\n\t\r\n\t/*等级系数*/\r\n\tfunction getFireScByLevel(uint level) public pure returns(uint) {\r\n        if (level == 1) {\r\n            return 3;\r\n        }\r\n        if (level == 2) {\r\n            return 6;\r\n        }\r\n        if (level == 3) {\r\n            return 10;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n\t/*节点奖励比例，level（等级）、times （推荐代数）*/\r\n    function getNodeScaleByLevel(uint level,uint times) public pure returns(uint){\r\n        if (level == 1 && times == 1) {\r\n            return 50;\r\n        }\r\n        if (level == 2 && times == 1) {\r\n            return 50;\r\n        }\r\n        if (level == 2 && times == 2) {\r\n            return 30;\r\n        }\r\n        if (level == 3) {\r\n            if(times == 1){\r\n                return 50;\r\n            }\r\n            if (times == 2) {\r\n                return 30;\r\n            }\r\n            if (times == 3) {\r\n                return 20;\r\n            }\r\n            if (times >= 4 && times <= 10) {\r\n                return 10;\r\n            }\r\n            if (times >= 11 && times <= 20) {\r\n                return 5;\r\n            }\r\n            if (times >= 21) {\r\n                return 1;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function compareStr(string memory _str, string memory str) public pure returns(bool) {\r\n        if (keccak256(abi.encodePacked(_str)) == keccak256(abi.encodePacked(str))) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor() internal {}\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n/**\r\n * @title AdminRole\r\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\r\n */\r\ncontract AdminRole is Context, Ownable {\r\n    using Roles for Roles.Role;\r\n\r\n    event WhitelistAdminAdded(address indexed account);\r\n    event WhitelistAdminRemoved(address indexed account);\r\n\r\n    Roles.Role private _whitelistAdmins;\r\n\r\n    constructor () internal {\r\n        _addWhitelistAdmin(_msgSender());\r\n    }\r\n\r\n    modifier onlyWhitelistAdmin() {\r\n        require(isWhitelistAdmin(_msgSender()) || isOwner(), \"AdminRole: caller does not have the WhitelistAdmin role\");\r\n        _;\r\n    }\r\n\r\n    function isWhitelistAdmin(address account) public view returns (bool) {\r\n        return _whitelistAdmins.has(account);\r\n    }\r\n\r\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\r\n        _addWhitelistAdmin(account);\r\n    }\r\n\r\n    function removeWhitelistAdmin(address account) public onlyOwner {\r\n        _whitelistAdmins.remove(account);\r\n        emit WhitelistAdminRemoved(account);\r\n    }\r\n\r\n \r\n\r\n    function _addWhitelistAdmin(address account) internal {\r\n        _whitelistAdmins.add(account);\r\n        emit WhitelistAdminAdded(account);\r\n    }\r\n\r\n    function _removeWhitelistAdmin(address account) internal {\r\n        _whitelistAdmins.remove(account);\r\n        emit WhitelistAdminRemoved(account);\r\n    }\r\n}\r\n\r\ncontract LifeWinner is UtilWin, AdminRole {\r\n\r\n    using SafeMath for *;\r\n\r\n    string constant private name = \"LifeWinner\";\r\n\r\n    uint ethWei = 1 ether;\r\n\r\n    address payable private devAddr = address(0x00Cc7Cde28335Fe2Ef8d73651eB9D22e6e385fDA);\r\n\t\r\n    struct User{\r\n        uint id;\r\n        address userAddress;\r\n        string inviteCode;\r\n        string referrer;\r\n        uint staticLevel;\r\n        uint dynamicLevel;\r\n        uint allInvest;\r\n        uint freezeAmount;\r\n        uint unlockAmount;\r\n        uint allStaticAmount;\r\n        uint allDynamicAmount;\r\n        uint hisStaticAmount;\r\n        uint hisDynamicAmount;\r\n        uint todayStaticAmount;\r\n        uint inviteCount;\r\n        Invest[] invests;\r\n        uint staticFlag;\r\n    }\r\n\r\n    struct UserGlobal {\r\n        uint id;\r\n        address userAddress;\r\n        string inviteCode;\r\n        string referrer;\r\n    }\r\n\r\n    struct Invest{\r\n        address userAddress;\r\n        uint investAmount;\r\n        uint investTime;\r\n        uint times;\r\n    }\r\n\r\n    uint coefficient = 10;\r\n\tuint rday = 5;\r\n    uint startTime;\r\n    uint investCount = 0;\r\n    mapping(uint => uint) rLastUid;\r\n    mapping(uint => uint) rInvestCount;\r\n    uint investMoney = 0;\r\n    mapping(uint => uint) rInvestMoney;\r\n    uint uid = 0;\r\n    uint rid = 1;\r\n    uint period = 2 days;\r\n    mapping (uint => mapping(address => User)) userRoundMapping;\r\n    mapping(address => UserGlobal) userMapping;\r\n    mapping (string => address) addressMapping;\r\n    mapping (uint => address) public indexMapping;\r\n\r\n\r\n    modifier isHuman() {\r\n        address addr = msg.sender;\r\n        uint codeLength;\r\n\r\n        assembly {codeLength := extcodesize(addr)}\r\n        require(codeLength == 0, \"sorry humans only\");\r\n        require(tx.origin == msg.sender, \"sorry, human only\");\r\n        _;\r\n    }\r\n\r\n    event LogInvestIn(address indexed who, uint indexed uid, uint amount, uint time, string inviteCode, string referrer);\r\n    event LogWithdrawProfit(address indexed who, uint indexed uid, uint amount, uint time);\r\n    event LogRedeem(address indexed who, uint indexed uid, uint amount, uint now);\r\n\tevent LogDuplicateInvestIn(address indexed who, uint indexed uid, uint amount, uint time, string inviteCode, string referrer);\r\n    \r\n    constructor () public {\r\n    }\r\n\r\n    function () external payable {\r\n    }\r\n\r\n\t\r\n    function activeGame(uint time) external onlyWhitelistAdmin\r\n    {\r\n        require(time > now, \"invalid game start time\");\r\n        startTime = time;\r\n    }\r\n\r\n    \r\n\r\n    function gameStart() public view returns(bool) {\r\n        return startTime != 0 && now > startTime;\r\n    }\r\n\r\n    function investIn(string memory inviteCode, string memory referrer)\r\n        public\r\n        isHuman()\r\n        payable\r\n    {\r\n        require(gameStart(), \"game not start\");\r\n        require(msg.value >= 1*ethWei && msg.value <= 15*ethWei, \"between 1 and 15\");\r\n        require(msg.value == msg.value.div(ethWei).mul(ethWei), \"invalid msg value\");\r\n\r\n\r\n        UserGlobal storage userGlobal = userMapping[msg.sender];\r\n        if (userGlobal.id == 0) {\r\n            \r\n            address referrerAddr = getUserAddressByCode(referrer);\r\n            require(!compareStr(inviteCode, \"\"), \"empty invite code\");\r\n            require(uint(referrerAddr) != 0, \"referer not exist\");\r\n            require(referrerAddr != msg.sender, \"referrer can't be self\");\r\n            \r\n            require(!isUsed(inviteCode), \"invite code is used\");\r\n\r\n            registerUser(msg.sender, inviteCode, referrer);\r\n            \r\n             User storage puser = userRoundMapping[rid][referrerAddr];\r\n             puser.inviteCount=puser.inviteCount.add(1);\r\n        }\r\n\r\n       \r\n        User storage user = userRoundMapping[rid][msg.sender];\r\n        if (uint(user.userAddress) != 0) {\r\n            require(user.freezeAmount.add(msg.value) <= 15*ethWei, \"can not beyond 15 eth\");\r\n            user.allInvest = user.allInvest.add(msg.value);\r\n            user.freezeAmount = user.freezeAmount.add(msg.value);\r\n            user.staticLevel = getLevel(user.freezeAmount);\r\n            user.dynamicLevel = getLevel(user.freezeAmount.add(user.unlockAmount));\r\n        } else {\r\n            user.id = userGlobal.id;\r\n            user.userAddress = msg.sender;\r\n            user.freezeAmount = msg.value;\r\n            user.staticLevel = getLevel(msg.value);\r\n            user.allInvest = msg.value;\r\n            user.dynamicLevel = getLevel(msg.value);\r\n            user.inviteCode = userGlobal.inviteCode;\r\n            user.referrer = userGlobal.referrer;\r\n        }\r\n\r\n        Invest memory invest = Invest(msg.sender, msg.value, now, 0);\r\n        user.invests.push(invest);\r\n\r\n        investCount = investCount.add(1);\r\n        investMoney = investMoney.add(msg.value);\r\n        rInvestCount[rid] = rInvestCount[rid].add(1);\r\n        rInvestMoney[rid] = rInvestMoney[rid].add(msg.value);\r\n        rLastUid[rid]=userGlobal.id;\r\n        sendFeetoAdmin(msg.value);\r\n        emit LogInvestIn(msg.sender, userGlobal.id, msg.value, now, userGlobal.inviteCode, userGlobal.referrer);\r\n    }\r\n\r\n    function withdrawProfit()\r\n        external\r\n        isHuman()\r\n    {\r\n        require(gameStart(), \"game not start\");\r\n        User storage user = userRoundMapping[rid][msg.sender];\r\n        uint sendMoney = user.allStaticAmount.add(user.allDynamicAmount);\r\n\r\n        bool isEnough = false;\r\n        uint resultMoney = 0;\r\n        (isEnough, resultMoney) = isEnoughBalance(sendMoney);\r\n        if (!isEnough) {\r\n            endRound();\r\n        }\r\n\r\n        if (resultMoney > 0) {\r\n            sendMoneyToUser(msg.sender, resultMoney);\r\n            user.allStaticAmount = 0;\r\n            user.allDynamicAmount = 0;\r\n            emit LogWithdrawProfit(msg.sender, user.id, resultMoney, now);\r\n        }\r\n    }\r\n\r\n    function isEnoughBalance(uint sendMoney) private view returns (bool, uint){\r\n        if (sendMoney >= address(this).balance) {\r\n            return (false, address(this).balance);\r\n        } else {\r\n            return (true, sendMoney);\r\n        }\r\n    }\r\n\r\n    function sendMoneyToUser(address payable userAddress, uint money) private {\r\n        userAddress.transfer(money);\r\n    }\r\n\r\n    function calStaticProfit(address userAddr) external onlyWhitelistAdmin returns(uint)\r\n    {\r\n        return calStaticProfitInner(userAddr);\r\n    }\r\n\r\n    function calStaticProfitInner(address userAddr) private returns(uint)\r\n    {\r\n        User storage user = userRoundMapping[rid][userAddr];\r\n        if (user.id == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint scale = getScByLevel(user.staticLevel);\r\n        uint allStatic = 0;\r\n        for (uint i = user.staticFlag; i < user.invests.length; i++) {\r\n            Invest storage invest = user.invests[i];\r\n            uint startDay = invest.investTime.sub(8 hours).div(1 days).mul(1 days);\r\n            uint staticGaps = now.sub(8 hours).sub(startDay).div(1 days);\r\n\r\n            uint unlockDay = now.sub(invest.investTime).div(1 days);\r\n\r\n            if(staticGaps > rday){\r\n                staticGaps = rday;\r\n            }\r\n            if (staticGaps > invest.times) {\r\n                allStatic += staticGaps.sub(invest.times).mul(scale).mul(invest.investAmount).div(1000);\r\n                invest.times = staticGaps;\r\n            }\r\n\r\n            if (unlockDay >= rday) {\r\n                user.staticFlag++;\r\n                user.freezeAmount = user.freezeAmount.sub(invest.investAmount);\r\n                user.unlockAmount = user.unlockAmount.add(invest.investAmount);\r\n                user.staticLevel = getLevel(user.freezeAmount);\r\n            }\r\n\r\n        }\r\n        allStatic = allStatic.mul(coefficient).div(10);\r\n        user.todayStaticAmount=allStatic;\r\n        user.allStaticAmount = user.allStaticAmount.add(user.todayStaticAmount);\r\n        user.hisStaticAmount = user.hisStaticAmount.add(user.todayStaticAmount);\r\n        userRoundMapping[rid][userAddr] = user;\r\n        return user.todayStaticAmount;\r\n    }\r\n\r\n    function calDynamicProfit(uint start, uint end) external onlyWhitelistAdmin {\r\n        \t\t\r\n        for (uint i = start; i <= end; i++) {\r\n            address userAddr = indexMapping[i];\r\n            User memory user = userRoundMapping[rid][userAddr];\r\n\t\t\tuint freezeAmount = user.freezeAmount;\r\n\t\t\tuint staticAmount= calStaticProfitInner(userAddr);\r\n            if (staticAmount>0 && user.freezeAmount >= 1*ethWei) {\r\n                uint scale = getScByLevel(user.staticLevel);\r\n                calUserDynamicProfit(user.referrer, freezeAmount, scale);\r\n            }\r\n        }\r\n    }\r\n\r\n    function registerUserInfo(address user, string calldata inviteCode, string calldata referrer) external onlyOwner {\r\n        registerUser(user, inviteCode, referrer);\r\n    }\r\n\r\n    function calUserDynamicProfit(string memory referrer, uint money, uint shareSc) private {\r\n        string memory tmpReferrer = referrer;\r\n        \r\n        for (uint i = 1; i <= 30; i++) {\r\n            if (compareStr(tmpReferrer, \"\")) {\r\n                break;\r\n            }\r\n            address tmpUserAddr = addressMapping[tmpReferrer];\r\n            User storage calUser = userRoundMapping[rid][tmpUserAddr];\r\n\t\t\tif(calUser.id==0){\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n            \r\n            uint fireSc = getFireScByLevel(calUser.staticLevel);\r\n            uint recommendSc = getNodeScaleByLevel(calUser.dynamicLevel, i);\r\n            uint moneyResult = 0;\r\n            if (money <= calUser.freezeAmount.add(calUser.unlockAmount)) {\r\n                moneyResult = money;\r\n            } else {\r\n                moneyResult = calUser.freezeAmount.add(calUser.unlockAmount);\r\n            }\r\n            \r\n            if (recommendSc != 0) {\r\n                uint tmpDynamicAmount = moneyResult.mul(shareSc).mul(fireSc).mul(recommendSc);\r\n                tmpDynamicAmount = tmpDynamicAmount.div(1000).div(10).div(100);\r\n\r\n                tmpDynamicAmount = tmpDynamicAmount.mul(coefficient).div(10);\r\n                calUser.allDynamicAmount = calUser.allDynamicAmount.add(tmpDynamicAmount);\r\n                calUser.hisDynamicAmount = calUser.hisDynamicAmount.add(tmpDynamicAmount);\r\n            }\r\n\r\n            tmpReferrer = calUser.referrer;\r\n        }\r\n    }\r\n\r\n    function redeem()\r\n        external\r\n        isHuman()\r\n    {\r\n        require(gameStart(), \"game not start\");\r\n        User storage user = userRoundMapping[rid][msg.sender];\r\n        require(user.id > 0, \"user not exist\");\r\n\r\n        calStaticProfitInner(msg.sender);\r\n\r\n        uint sendMoney = user.unlockAmount;\r\n\r\n        bool isEnough = false;\r\n        uint resultMoney = 0;\r\n\r\n        (isEnough, resultMoney) = isEnoughBalance(sendMoney);\r\n\r\n        if (!isEnough) {\r\n            endRound();\r\n        }\r\n\r\n        if (resultMoney > 0) {\r\n            sendMoneyToUser(msg.sender, resultMoney);\r\n            user.unlockAmount = 0;\r\n            user.staticLevel = getLevel(user.freezeAmount);\r\n            user.dynamicLevel = getLevel(user.freezeAmount);\r\n\r\n            emit LogRedeem(msg.sender, user.id, resultMoney, now);\r\n        }\r\n    }\r\n\t\r\n\tfunction duplicateInvestIn()\r\n        external\r\n        isHuman()\r\n    {\r\n        require(gameStart(), \"game not start\");\r\n        User storage user = userRoundMapping[rid][msg.sender];\r\n        require(user.id > 0, \"user not exist\");\r\n\r\n        uint sendMoney = user.unlockAmount;\r\n\t\t\r\n\t\trequire(sendMoney>0, \"No principal available\");\r\n\t\trequire(user.freezeAmount.add(sendMoney) >= 1*ethWei && user.freezeAmount.add(sendMoney) <= 15*ethWei, \"between 1 and 15\");\r\n      \r\n\t\tbool isEnough = false;\r\n        uint resultMoney = 0;\r\n        uint devMoney = sendMoney.div(25);\r\n\r\n        (isEnough, resultMoney) = isEnoughBalance(devMoney);\r\n\r\n        require(isEnough, \"Pool Balance not Enough\");\r\n\r\n        sendFeetoAdmin(sendMoney);\r\n\t\t\r\n\t\tuser.unlockAmount = 0;\r\n\t\tuser.allInvest = user.allInvest.add(sendMoney);\r\n\t\tuser.freezeAmount=user.freezeAmount.add(sendMoney);\r\n\t\tuser.staticLevel = getLevel(user.freezeAmount);\r\n\t\tuser.dynamicLevel = getLevel(user.freezeAmount);\r\n\t\t\r\n\t\t\r\n\t\tInvest memory invest = Invest(msg.sender, sendMoney, now,0);\r\n        user.invests.push(invest);\r\n\r\n        investCount = investCount.add(1);\r\n        investMoney = investMoney.add(sendMoney);\r\n        rInvestCount[rid] = rInvestCount[rid].add(1);\r\n        rInvestMoney[rid] = rInvestMoney[rid].add(sendMoney);\r\n        rLastUid[rid]=user.id;\r\n        \r\n\t\temit LogDuplicateInvestIn(msg.sender, user.id, sendMoney, now, user.inviteCode, user.referrer);\r\n\r\n        \r\n    }\r\n\r\n    function endRound() private {\r\n        rid++;\r\n        startTime = now.add(period).div(1 days).mul(1 days);\r\n        coefficient = 10;\r\n    }\r\n\r\n    function isUsed(string memory code) public view returns(bool) {\r\n        address user = getUserAddressByCode(code);\r\n        return uint(user) != 0;\r\n    }\r\n\r\n    function getUserAddressByCode(string memory code) public view returns(address) {\r\n        return addressMapping[code];\r\n    }\r\n\r\n    function sendFeetoAdmin(uint amount) private {\r\n        devAddr.transfer(amount.div(25));\r\n    }\r\n\r\n    function getGameInfo() public isHuman() view returns(uint, uint, uint, uint, uint, uint, uint, uint) {\r\n        return (\r\n            rid,\r\n            uid,\r\n            startTime,\r\n            investCount,\r\n            investMoney,\r\n            rInvestCount[rid],\r\n            rInvestMoney[rid],\r\n            coefficient\r\n        );\r\n    }\r\n\r\n    function getUserInfo(address user, uint roundId) public isHuman() view returns(\r\n        uint[11] memory ct, string memory inviteCode, string memory referrer\r\n    ) {\r\n\r\n        if(roundId == 0){\r\n            roundId = rid;\r\n        }\r\n        \r\n         UserGlobal storage userGlobal = userMapping[user];\r\n\r\n        User memory userInfo = userRoundMapping[roundId][user];\r\n        userInfo.id=userGlobal.id;\r\n        userInfo.inviteCode=userGlobal.inviteCode;\r\n        userInfo.referrer=userGlobal.referrer;\r\n\r\n        ct[0] = userInfo.id;\r\n        ct[1] = userInfo.staticLevel;\r\n        ct[2] = userInfo.dynamicLevel;\r\n        ct[3] = userInfo.allInvest;\r\n        ct[4] = userInfo.freezeAmount;\r\n        ct[5] = userInfo.unlockAmount;\r\n        ct[6] = userInfo.allStaticAmount;\r\n        ct[7] = userInfo.allDynamicAmount;\r\n        ct[8] = userInfo.hisStaticAmount;\r\n        ct[9] = userInfo.hisDynamicAmount;\r\n        ct[10] = userInfo.inviteCount;\r\n\r\n\r\n        inviteCode = userInfo.inviteCode;\r\n        referrer = userInfo.referrer;\r\n\r\n        return (\r\n            ct,\r\n            inviteCode,\r\n            referrer\r\n        );\r\n    \t\r\n    }\r\n\r\n    function getUserById(uint id) public view returns(address){\r\n        return indexMapping[id];\r\n    }\r\n\r\n\r\n    function registerUser(address user, string memory inviteCode, string memory referrer) private {\r\n        UserGlobal storage userGlobal = userMapping[user];\r\n        uid++;\r\n        userGlobal.id = uid;\r\n        userGlobal.userAddress = user;\r\n        userGlobal.inviteCode = inviteCode;\r\n        userGlobal.referrer = referrer;\r\n\r\n        addressMapping[inviteCode] = user;\r\n        indexMapping[uid] = user;\r\n    }\r\n    \r\n     function getLastInviteUser(uint roundId) public view returns(address){\r\n        uint id = rLastUid[roundId];\r\n        return indexMapping[id];\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"mul overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"div zero\"); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"lower sub bigger\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"mod zero\");\r\n        return a % b;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"calDynamicProfit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGameInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameStart\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"inviteCode\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"referrer\",\"type\":\"string\"}],\"name\":\"investIn\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"times\",\"type\":\"uint256\"}],\"name\":\"getNodeScaleByLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"code\",\"type\":\"string\"}],\"name\":\"isUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getUserById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256[11]\",\"name\":\"ct\",\"type\":\"uint256[11]\"},{\"internalType\":\"string\",\"name\":\"inviteCode\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"referrer\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_str\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"compareStr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"calStaticProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawProfit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"code\",\"type\":\"string\"}],\"name\":\"getUserAddressByCode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"inviteCode\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"referrer\",\"type\":\"string\"}],\"name\":\"registerUserInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"indexMapping\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getLastInviteUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelistAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"activeGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"duplicateInvestIn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"getFireScByLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"getScByLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"uid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"inviteCode\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"referrer\",\"type\":\"string\"}],\"name\":\"LogInvestIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"uid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawProfit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"uid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"now\",\"type\":\"uint256\"}],\"name\":\"LogRedeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"uid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"inviteCode\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"referrer\",\"type\":\"string\"}],\"name\":\"LogDuplicateInvestIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"LifeWinner","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://67f148962b8892f5ff486098b657a0bf5cc0218e004c71c9b0e3a994516e62d9"}]}