{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.8;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Helps contracts guard against reentrancy attacks.\r\n * @author Remco Bloemen <remco@2Ï€.com>, Eenae <alexey@mixbytes.io>\r\n * @dev If you mark a function `nonReentrant`, you should also\r\n * mark it `external`.\r\n */\r\ncontract ReentrancyGuard {\r\n    /// @dev counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private _guardCounter;\r\n\r\n    constructor() public {\r\n        // The counter starts at one to prevent changing it from zero to a non-zero\r\n        // value, which is a more expensive operation.\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter);\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/// @title Main contract for WrappedNFT. This contract converts any NFT between the ERC721 standard and the\r\n///  ERC20 standard by locking NFT's into the contract and minting 1:1 backed ERC20 tokens, that\r\n///  can then be redeemed for NFTs's when desired.\r\n/// @notice When wrapping an NFT, you get a generic WNFT token. Since the WNFT token is generic, it has no\r\n///  no information about which specific NFT you submitted besides the originating NFT's contract address, so\r\n///  you will most likely not receive the same NFT back when redeeming the token unless you specify that NFT's\r\n///  ID, although you are guaranteed that it will be from the same NFT contract address. The token only entitles\r\n///  you to receive *an* NFT from that NFT contract in return, not necessarily the *same* NFT in return. A\r\n///  different user can submit their own WNFT tokens to the contract and withdraw the NFT that you originally\r\n///  deposited. WNFT tokens have no information about which NFT was originally deposited to mint WNFT besides\r\n///  which NFT contract it originated from - this is due to the very nature of the ERC20 standard being fungible,\r\n///  and the ERC721 standard being nonfungible.\r\ncontract WrappedNFT is IERC20, ReentrancyGuard {\r\n\r\n    // OpenZeppelin's SafeMath library is used for all arithmetic operations to avoid overflows/underflows.\r\n    using SafeMath for uint256;\r\n\r\n    /* ****** */\r\n    /* EVENTS */\r\n    /* ****** */\r\n\r\n    /// @dev This event is fired when a user deposits an NFT into the contract in exchange\r\n    ///  for an equal number of WNFT ERC20 tokens.\r\n    /// @param nftId  The NFT id of the NFT that was deposited into the contract.\r\n    event DepositNFTAndMintToken(\r\n        uint256 nftId\r\n    );\r\n\r\n    /// @dev This event is fired when a user deposits WNFT ERC20 tokens into the contract in exchange\r\n    ///  for an equal number of locked NFTs.\r\n    /// @param nftId  The NF id of the NFT that was withdrawn from the contract.\r\n    event BurnTokenAndWithdrawNFT(\r\n        uint256 nftId\r\n    );\r\n\r\n    /* ******* */\r\n    /* STORAGE */\r\n    /* ******* */\r\n\r\n    /// @dev An Array containing all of the NFTs that are locked in the contract, backing\r\n    ///  WNFT ERC20 tokens 1:1\r\n    /// @notice Some of the NFTs in this array were indeed deposited to the contract, but they\r\n    ///  are no longer held by the contract. This is because burnTokensAndWithdrawNfts() allows a\r\n    ///  user to withdraw an NFT \"out of order\". Since it would be prohibitively expensive to\r\n    ///  shift the entire array once we've withdrawn a single element, we instead maintain the\r\n    ///  mapping nftIsDepositedInContract to determine whether an element is still contained in\r\n    ///  the contract or not.\r\n    uint256[] private depositedNftsArray;\r\n\r\n    /// @dev A mapping keeping track of which nftIDs are currently contained within the contract.\r\n    /// @notice We cannot rely on depositedNftsArray as the source of truth as to which NFTs are\r\n    ///  deposited in the contract. This is because burnTokensAndWithdrawNfts() allows a user to\r\n    ///  withdraw an NFT \"out of order\" of the order that they are stored in the array. Since it\r\n    ///  would be prohibitively expensive to shift the entire array once we've withdrawn a single\r\n    ///  element, we instead maintain this mapping to determine whether an element is still contained\r\n    ///  in the contract or not.\r\n    mapping (uint256 => bool) public nftIsDepositedInContract;\r\n\r\n    /* ********* */\r\n    /* CONSTANTS */\r\n    /* ********* */\r\n\r\n    /// @dev The metadata details about the \"Wrapped NFT\" WNFT ERC20 token.\r\n    uint8 constant public decimals = 18;\r\n    string public name = 'Wrapped NFT';\r\n    string public symbol = 'WNFT';\r\n\r\n    /// @dev The address of official NFT contract that stores the metadata about each NFT.\r\n    /// @notice The contract creator is not capable of changing the address of the NFTCore contract\r\n    ///  once the contract has been deployed.\r\n    address public nftCoreAddress;\r\n    NFTCoreContract nftCore;\r\n\r\n    /// @dev Addresses that begin as whitelisted in all WNFT contracts that are created\r\n    ///  by this factory. The WNFT contracts begin with an allowance of UINT256_MAX for\r\n    ///  these addresses for all users, but any user can subsequently override that\r\n    ///  allowance if they wish.\r\n    address public wyvernTokenTransferProxyAddress;\r\n    address public wrappedNFTLiquidationProxyAddress;\r\n    address public uniswapFactoryAddress;\r\n\r\n    /* ********* */\r\n    /* FUNCTIONS */\r\n    /* ********* */\r\n\r\n    /// @notice Allows a user to lock NFTs in the contract in exchange for an equal number\r\n    ///  of WCK ERC20 tokens.\r\n    /// @param _nftIds  The ids of the NFTs that will be locked into the contract.\r\n    /// @notice If the NFT contract does not implement onERC721Received() or approveAll(), then the\r\n    ///  user must first call approve() in the NFT's Core contract on each NFT that they wish to\r\n    ///  deposit before calling depositNftsAndMintTokens(). If the contract implements approveAll() but\r\n    ///  not onERC721Received, then the user simply needs to call approveAll() once for this contract.\r\n    function depositNftsAndMintTokens(uint256[] calldata _nftIds) external nonReentrant {\r\n        require(_nftIds.length > 0, 'you must submit an array with at least one element');\r\n        for(uint i = 0; i < _nftIds.length; i++){\r\n            uint256 nftToDeposit = _nftIds[i];\r\n            require(msg.sender == nftCore.ownerOf(nftToDeposit), 'you do not own this NFT');\r\n            nftCore.transferFrom(msg.sender, address(this), nftToDeposit);\r\n            _pushNft(nftToDeposit);\r\n            emit DepositNFTAndMintToken(nftToDeposit);\r\n        }\r\n        _mint(msg.sender, (_nftIds.length).mul(10**18));\r\n    }\r\n\r\n    /// @notice Allows a user to burn WNFT ERC20 tokens in exchange for an equal number of locked\r\n    ///  NFTs.\r\n    /// @param _nftIds  The IDs of the NFTs that the user wishes to withdraw. If the user submits 0\r\n    ///  as the ID for any NFT, the contract uses the last NFT in the array for that NFT.\r\n    /// @param _destinationAddresses  The addresses that the withdrawn NFTs will be sent to (this allows\r\n    ///  anyone to \"airdrop\" NFTs to addresses that they do not own in a single transaction).\r\n    function burnTokensAndWithdrawNfts(uint256[] calldata _nftIds, address[] calldata _destinationAddresses) external nonReentrant {\r\n        require(_nftIds.length == _destinationAddresses.length, 'you did not provide a destination address for each of the NFTs you wish to withdraw');\r\n        require(_nftIds.length > 0, 'you must submit an array with at least one element');\r\n\r\n        uint256 numTokensToBurn = _nftIds.length;\r\n        uint256 numTokensToBurnInWei = numTokensToBurn.mul(10**18);\r\n        require(balanceOf(msg.sender) >= numTokensToBurnInWei, 'you do not own enough ERC20 tokens to withdraw this many NFTs');\r\n        _burn(msg.sender, numTokensToBurnInWei);\r\n\r\n        for(uint i = 0; i < numTokensToBurn; i++){\r\n            uint256 nftToWithdraw = _nftIds[i];\r\n            if(nftToWithdraw == 0){\r\n                nftToWithdraw = _popNft();\r\n            } else {\r\n                require(nftIsDepositedInContract[nftToWithdraw] == true, 'this NFT has already been withdrawn');\r\n                require(address(this) == nftCore.ownerOf(nftToWithdraw), 'the contract does not own this NFT');\r\n                nftIsDepositedInContract[nftToWithdraw] = false;\r\n            }\r\n            nftCore.transferFrom(address(this), _destinationAddresses[i], nftToWithdraw);\r\n            emit BurnTokenAndWithdrawNFT(nftToWithdraw);\r\n        }\r\n    }\r\n\r\n    /// @notice Adds a locked NFT to the end of the array\r\n    /// @param _nftId  The id of the NFT that will be locked into the contract.\r\n    function _pushNft(uint256 _nftId) internal {\r\n        depositedNftsArray.push(_nftId);\r\n        nftIsDepositedInContract[_nftId] = true;\r\n    }\r\n\r\n    /// @notice Removes an unlocked NFT from the end of the array\r\n    /// @notice The reason that this function must check if the nftIsDepositedInContract\r\n    ///  is that the burnTokensAndWithdrawNfts() function allows a user to withdraw an NFT\r\n    ///  from the array \"out of order\" of the order that they entered the array..\r\n    /// @return  The id of the NFT that will be unlocked from the contract.\r\n    function _popNft() internal returns(uint256){\r\n        require(depositedNftsArray.length > 0, 'there are no NFTs in the array');\r\n        uint256 nftId = depositedNftsArray[depositedNftsArray.length - 1];\r\n        depositedNftsArray.length--;\r\n        while(nftIsDepositedInContract[nftId] == false){\r\n            nftId = depositedNftsArray[depositedNftsArray.length - 1];\r\n            depositedNftsArray.length--;\r\n        }\r\n        nftIsDepositedInContract[nftId] = false;\r\n        return nftId;\r\n    }\r\n\r\n    /// @notice Removes any NFTs that exist in the array but are no longer held in the\r\n    ///  contract, which happens if the first few NFTs have previously been withdrawn\r\n    ///  out of order using the burnTokensAndWithdrawNfts() function.\r\n    /// @notice This function exists to prevent a griefing attack where a malicious attacker\r\n    ///  could call burnTokensAndWithdrawNfts() on a large number of specific NFTs at the\r\n    ///  front of the array, causing the while-loop in _popNft to always run out of gas.\r\n    /// @notice It is unclear whether this griefing attack is even possible, because when a\r\n    ///  user is forced to traverse the array, they delete an item at each step of walking the\r\n    ///  array, so the repeated gas refunds may be sufficient to cover the repeated walking of\r\n    ///  the array.\r\n    /// @param _numSlotsToCheck  The number of slots to check in the array.\r\n    function batchRemoveWithdrawnNFTsFromStorage(uint256 _numSlotsToCheck) external {\r\n        require(_numSlotsToCheck <= depositedNftsArray.length, 'you are trying to batch remove more slots than exist in the array');\r\n        uint256 arrayIndex = depositedNftsArray.length;\r\n        for(uint i = 0; i < _numSlotsToCheck; i++){\r\n            arrayIndex = arrayIndex.sub(1);\r\n            uint256 nftId = depositedNftsArray[arrayIndex];\r\n            if(nftIsDepositedInContract[nftId] == false){\r\n                depositedNftsArray.length--;\r\n            } else {\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev If a user sends an NFT from nftCoreContract directly to this contract using a\r\n    ///  transfer function that implements onERC721Received, then we can simply mint a token\r\n    ///  for them here rather than having them call approve() and then have them call\r\n    ///  depositNftsAndMintTokens().\r\n    /// @notice The contract address is always the message sender.\r\n    /// @param _operator The address which called `safeTransferFrom` function\r\n    /// @param _from The address which previously owned the token\r\n    /// @param _tokenId The NFT identifier which is being transferred\r\n    /// @param _data Additional data with no specified format\r\n    /// @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))` to indicate that\r\n    ///  this contract is written in such a way to be prepared to receive ERC721 tokens.\r\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data) external returns(bytes4) {\r\n        require(msg.sender == nftCoreAddress, 'you can only mint tokens if the ERC721 token originates from nftCoreContract');\r\n        _pushNft(_tokenId);\r\n        _mint(_from, 10**18);\r\n        emit DepositNFTAndMintToken(_tokenId);\r\n        return bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"));\r\n    }\r\n\r\n    /// @notice The contract creator is not capable of changing any of the hardcoded addresses\r\n    ///  once the contract is deployed.\r\n    /// @notice This contract whitelists three addresses (wyvernTokenTransferProxyAddress,\r\n    ///  uniswapExchange, and wrappedNFTLiquidationProxyAddress) for easier UX for users using\r\n    ///  OpenSea for the WNFTs. It accomplishes this by starting every user's account with an\r\n    ///  allowance of UINT256_MAX for these three addresses. However, any user can subsequently\r\n    ///  override this allowance if they wish by either calling approve() or calling\r\n    ///  decreaseAllowance().\r\n    constructor(address _nftCoreAddress, address _uniswapFactoryAddress, address _wyvernTokenTransferProxyAddress, address _wrappedNFTLiquidationProxyAddress) public {\r\n        nftCore = NFTCoreContract(_nftCoreAddress);\r\n        nftCoreAddress = _nftCoreAddress;\r\n        \r\n        name = string(abi.encodePacked('Wrapped ', nftCore.name()));\r\n        symbol = string(abi.encodePacked('W', nftCore.symbol()));\r\n\r\n        // Modified _transfer() auto-adds max allowance to whitelisted addresses the first\r\n        // time that someone receives WNFT tokens, but not again. Users can subsequently\r\n        // revoke this approval by calling approve() or decreaseAllowance(). This is added\r\n        // for easier UX for users using OpenSea for their WNFTs.\r\n        wyvernTokenTransferProxyAddress = _wyvernTokenTransferProxyAddress;\r\n        wrappedNFTLiquidationProxyAddress = _wrappedNFTLiquidationProxyAddress;\r\n        uniswapFactoryAddress = _uniswapFactoryAddress;\r\n    }\r\n\r\n    /// @dev We revert on any payment to the fallback function, since any ether sent directly to\r\n    ///  this contract would be lost forever.\r\n    function() external payable {\r\n        revert(\"This contract does not accept direct payments\");\r\n    }\r\n\r\n    /* *********************************************** */\r\n    /* ERC20_With_Whitelisted_Addresses Implementation */\r\n    /* *********************************************** */\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    mapping (address => bool) private _haveAddedAllowancesForWhitelistedAddresses;\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param owner The address to query the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /// @notice The _trasfer() function is modified to set max allowance for whitelisted\r\n    ///  addresses the first time that a user receives any WNFT tokens. They can subsequently\r\n    ///  revoke this approval by calling approve() or decreaseAllowance(), and the contract\r\n    ///  will not auto-add the whitelisted contract's allowance again. This is added\r\n    ///  for easier UX for users using OpenSea for their WNFTs.\r\n    /**\r\n    * @dev Transfer token for a specified addresses\r\n    * @param from The address to transfer from.\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n\r\n        // Modified _transfer() auto-adds max allowance to whitelisted addresses the first\r\n        // time that someone receives WNFT tokens, but not again. Users can subsequently\r\n        // revoke this approval by calling approve() or decreaseAllowance(). This is added\r\n        // for easier UX for users using OpenSea for their WNFTs.\r\n        if(_haveAddedAllowancesForWhitelistedAddresses[to] == false){\r\n            if(uniswapFactoryAddress != address(0)){\r\n                address uniswapExchangeAddress = UniswapFactory(uniswapFactoryAddress).getExchange(address(this));\r\n                if(uniswapExchangeAddress != address(0)){\r\n                    _allowed[to][uniswapExchangeAddress] = ~uint256(0);\r\n                }\r\n            }\r\n            if(wyvernTokenTransferProxyAddress != address(0)){\r\n                _allowed[to][wyvernTokenTransferProxyAddress] = ~uint256(0);\r\n            }\r\n            if(wrappedNFTLiquidationProxyAddress != address(0)){\r\n                _allowed[to][wrappedNFTLiquidationProxyAddress] = ~uint256(0);\r\n            }\r\n            _haveAddedAllowancesForWhitelistedAddresses[to] = true;\r\n        }\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that mints an amount of the token and assigns it to\r\n     * an account. This encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param account The account that will receive the created tokens.\r\n     * @param value The amount that will be created.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account, deducting from the sender's allowance for said account. Uses the\r\n     * internal burn function.\r\n     * Emits an Approval event (reflecting the reduced allowance).\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burnFrom(address account, uint256 value) internal {\r\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\r\n        _burn(account, value);\r\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\r\n    }\r\n}\r\n\r\n/// @title Interface for interacting with the NFT Core contract\r\ncontract NFTCoreContract {\r\n    function name() external pure returns (string memory _name);\r\n    function symbol() external pure returns (string memory _symbol);\r\n    function ownerOf(uint256 _tokenId) public view returns (address owner);\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n    function transfer(address _to, uint256 _tokenId) external;\r\n    function approve(address _to, uint256 _tokenId) external;\r\n}\r\n\r\n/// @title Interface for interacting with the UniswapFactory contract\r\ncontract UniswapFactory {\r\n    function getExchange(address token) external view returns (address exchange);\r\n    function getToken(address exchange) external view returns (address token);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_nftIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_destinationAddresses\",\"type\":\"address[]\"}],\"name\":\"burnTokensAndWithdrawNfts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numSlotsToCheck\",\"type\":\"uint256\"}],\"name\":\"batchRemoveWithdrawnNFTsFromStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wyvernTokenTransferProxyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniswapFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftIsDepositedInContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_nftIds\",\"type\":\"uint256[]\"}],\"name\":\"depositNftsAndMintTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nftCoreAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wrappedNFTLiquidationProxyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftCoreAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapFactoryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wyvernTokenTransferProxyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wrappedNFTLiquidationProxyAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"DepositNFTAndMintToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"BurnTokenAndWithdrawNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"WrappedNFT","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000006a6a7af298129e3a2ab396c9c06f91d3c54aba8000000000000000000000000c0a47dfe034b400b47bdad5fecda2621de6c4d95000000000000000000000000e5c783ee536cf5e63e792988335c4255169be4e1000000000000000000000000995835145dd85c012f3e2d7d5561abd626658c04","Library":"","SwarmSource":"bzzr://e09c31b6a8d84a9176dc4bc4c8399dff6741278c551edda0232da30c464805d6"}]}