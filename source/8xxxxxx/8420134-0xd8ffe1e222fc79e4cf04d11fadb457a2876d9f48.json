{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >0.4.2;\r\n\r\n// 'Salemcash' token contract\r\n//\r\n// Deployed to : 0xd9aF74B27919D8b96C2D0FA3e26B20463dbfa497\r\n// Symbol      : SCS\r\n// Name        : Salemcash Token\r\n// Total supply: 20000000\r\n// Decimals    : 18\r\n//\r\n// Welcome.\r\n//\r\n// (c) by Pastor Ombura / JSCI 2019. Copyright (c) 2011 The LevelDB Authors.\r\n// ----------------------------------------------------------------------------\r\n\r\npragma solidity >0.4.2;\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\ncontract SafeMath {\r\n    function safeAdd(uint a, uint b) public pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function safeSub(uint a, uint b) public pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function safeMul(uint a, uint b) public pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function safeDiv(uint a, uint b) public pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\n\r\nlibrary ExtendedMath {\r\n\r\n\r\n    //return the smaller of the two inputs (a or b)\r\n    function limitLessThan(uint a, uint b) internal pure returns (uint c) {\r\n\r\n        if(a > b) return b;\r\n\r\n        return a;\r\n\r\n    }\r\n}\r\n\r\n\r\npragma solidity >0.4.2;\r\n\r\ncontract Salemcash {\r\n\r\n    mapping(address => uint) private _balances;\r\n\r\n    constructor() public {\r\n        _balances[msg.sender] = 20000000000000000000000000;\r\n    }\r\n\r\n    function getBalance(address account) public view returns (uint) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address to, uint amount) public {\r\n        require(_balances[msg.sender] >= amount);\r\n\r\n        _balances[msg.sender] -= amount;\r\n        _balances[to] += amount;\r\n    }\r\n}\r\n\r\npragma solidity >0.4.2;\r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() public returns (uint);\r\n    function balanceOf(address tokenOwner) public returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\npragma solidity >0.4.2;\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\npragma solidity >0.4.2;\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev ERC20 modified with pausable transfers.\r\n */\r\ncontract ERC20Pausable {\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        return transfer(to, value);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        return transferFrom(from, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        return approve(spender, value);\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint addedValue) public returns (bool) {\r\n        return increaseAllowance(spender, addedValue);\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint subtractedValue) public returns (bool) {\r\n        return decreaseAllowance(spender, subtractedValue);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Salemcash","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU LGPLv3","SwarmSource":"bzzr://c56e7caa2834188c445f436e9062edb176b611f32b1d86fdc3e3d033383f75b4"}]}