{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.10;\r\n\r\n/* MintHelper for BitcoinSoV\r\n * Based off https://github.com/0xbitcoin/mint-helper\r\n * 1% Burn fee comes from mining pool's fee, allowing miner payout contract to receive its full share.\r\n * https://www.btcsov.com\r\n */\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract ERC918Interface {\r\n  function totalSupply() public view returns (uint);\r\n  function getMiningDifficulty() public view returns (uint);\r\n  function getMiningTarget() public view returns (uint);\r\n  function getMiningReward() public view returns (uint);\r\n  function balanceOf(address tokenOwner) public view returns (uint balance);\r\n\r\n  function mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success);\r\n\r\n  event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\r\n}\r\n\r\n/*\r\nThe owner (or anyone) will deposit tokens in here\r\nThe owner calls the multisend method to send out payments\r\n*/\r\ncontract MintHelper is Ownable {\r\n   using SafeMath for uint;\r\n\r\n    string public name;\r\n    address public mintableToken;\r\n    address public payoutsWallet;\r\n    address public minterWallet;\r\n    uint public minterFeePercent;\r\n\r\n    constructor(address mToken, address pWallet, address mWallet, string memory mName, uint256 mMintFeePct)\r\n    public\r\n    {\r\n      mintableToken = mToken;\r\n      payoutsWallet = pWallet;\r\n      minterWallet = mWallet;\r\n      name = mName;\r\n      \r\n      minterFeePercent = mMintFeePct;\r\n    }\r\n\r\n    function setMintableToken(address mToken)\r\n    public onlyOwner\r\n    returns (bool)\r\n    {\r\n      mintableToken = mToken;\r\n      return true;\r\n    }\r\n\r\n    function setPayoutsWallet(address pWallet)\r\n    public onlyOwner\r\n    returns (bool)\r\n    {\r\n      payoutsWallet = pWallet;\r\n      return true;\r\n    }\r\n\r\n    function setMinterWallet(address mWallet)\r\n    public onlyOwner\r\n    returns (bool)\r\n    {\r\n      minterWallet = mWallet;\r\n      return true;\r\n    }\r\n\r\n    function setMinterFeePercent(uint fee)\r\n    public onlyOwner\r\n    returns (bool)\r\n    {\r\n      require(fee >= 0 && fee <= 100, \"Fee not within range\");\r\n      minterFeePercent = fee;\r\n      return true;\r\n    }\r\n\r\n    function proxyMint(uint256 nonce, bytes32 challenge_digest )\r\n    public\r\n    returns (bool)\r\n    {\r\n      //identify the rewards that will be won and how to split them up\r\n      uint totalReward = ERC918Interface(mintableToken).getMiningReward();\r\n\r\n      // Pool fee covers the 0.5 BSOV (1%) burned. Payout fund gets the 90% it expects.\r\n      uint burnAmount = totalReward.div(100);\r\n      uint minterReward = totalReward.mul(minterFeePercent).div(100).sub(burnAmount);\r\n      uint payoutReward = totalReward.sub(minterReward);\r\n      \r\n      // get paid in new tokens\r\n      require(ERC918Interface(mintableToken).mint(nonce, challenge_digest), \"Could not mint token\");\r\n\r\n      //transfer the tokens to the correct wallets\r\n      require(ERC20Interface(mintableToken).transfer(minterWallet, minterReward), \"Could not transfer minter fee of token\");\r\n      require(ERC20Interface(mintableToken).transfer(payoutsWallet, payoutReward), \"Could not transfer minter fee of token\");\r\n\r\n      return true;\r\n    }\r\n\r\n    //withdraw any eth inside\r\n    function withdraw()\r\n    public onlyOwner\r\n    {\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n\r\n    //send tokens out\r\n    function send(address _tokenAddr, address dest, uint value)\r\n    public onlyOwner\r\n    returns (bool)\r\n    {\r\n     return ERC20Interface(_tokenAddr).transfer(dest, value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"name\":\"dest\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"send\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mToken\",\"type\":\"address\"}],\"name\":\"setMintableToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mWallet\",\"type\":\"address\"}],\"name\":\"setMinterWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minterWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintableToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minterFeePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setMinterFeePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"challenge_digest\",\"type\":\"bytes32\"}],\"name\":\"proxyMint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pWallet\",\"type\":\"address\"}],\"name\":\"setPayoutsWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payoutsWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"mToken\",\"type\":\"address\"},{\"name\":\"pWallet\",\"type\":\"address\"},{\"name\":\"mWallet\",\"type\":\"address\"},{\"name\":\"mName\",\"type\":\"string\"},{\"name\":\"mMintFeePct\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MintHelper","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000026946ada5ecb57f3a1f91605050ce45c482c9eb1000000000000000000000000b3aabf107065817fc4e5c57d2b7ce304e0fe4de7000000000000000000000000b3aabf107065817fc4e5c57d2b7ce304e0fe4de700000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000442534f5600000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://c3ecdea9d66fdbac53305ee9694e417c8f3a151ec3c9565c954792aa6a8ebce8"}]}