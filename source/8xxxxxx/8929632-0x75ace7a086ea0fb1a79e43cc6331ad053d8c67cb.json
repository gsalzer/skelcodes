{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2019-11-13\r\n*/\r\n\r\n// File: contracts/common/Validating.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\ninterface Validating {\r\n  modifier notZero(uint number) { require(number > 0, \"invalid 0 value\"); _; }\r\n  modifier notEmpty(string memory text) { require(bytes(text).length > 0, \"invalid empty string\"); _; }\r\n  modifier validAddress(address value) { require(value != address(0x0), \"invalid address\"); _; }\r\n}\r\n\r\n// File: contracts/common/Versioned.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\ncontract Versioned {\r\n\r\n  string public version;\r\n\r\n  constructor(string memory version_) public { version = version_; }\r\n\r\n}\r\n\r\n// File: contracts/external/SafeMath.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n/**\r\n * @title Math provides arithmetic functions for uint type pairs.\r\n * You can safely `plus`, `minus`, `times`, and `divide` uint numbers without fear of integer overflow.\r\n * You can also find the `min` and `max` of two numbers.\r\n */\r\nlibrary SafeMath {\r\n\r\n  function min(uint x, uint y) internal pure returns (uint) { return x <= y ? x : y; }\r\n  function max(uint x, uint y) internal pure returns (uint) { return x >= y ? x : y; }\r\n\r\n\r\n  /** @dev adds two numbers, reverts on overflow */\r\n  function plus(uint x, uint y) internal pure returns (uint z) { require((z = x + y) >= x, \"bad addition\"); }\r\n\r\n  /** @dev subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend) */\r\n  function minus(uint x, uint y) internal pure returns (uint z) { require((z = x - y) <= x, \"bad subtraction\"); }\r\n\r\n\r\n  /** @dev multiplies two numbers, reverts on overflow */\r\n  function times(uint x, uint y) internal pure returns (uint z) { require(y == 0 || (z = x * y) / y == x, \"bad multiplication\"); }\r\n\r\n  /** @dev divides two numbers and returns the remainder (unsigned integer modulo), reverts when dividing by zero */\r\n  function mod(uint x, uint y) internal pure returns (uint z) {\r\n    require(y != 0, \"bad modulo; using 0 as divisor\");\r\n    z = x % y;\r\n  }\r\n\r\n  /** @dev Integer division of two numbers truncating the quotient, reverts on division by zero */\r\n  function div(uint a, uint b) internal pure returns (uint c) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/external/Token.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n/*\r\n * Abstract contract for the full ERC 20 Token standard\r\n * https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract Token {\r\n  /** This is a slight change to the ERC20 base standard.\r\n  function totalSupply() view returns (uint supply);\r\n  is replaced map:\r\n  uint public totalSupply;\r\n  This automatically creates a getter function for the totalSupply.\r\n  This is moved to the base contract since public getter functions are not\r\n  currently recognised as an implementation of the matching abstract\r\n  function by the compiler.\r\n  */\r\n  /// total amount of tokens\r\n  uint public totalSupply;\r\n\r\n  /// @param _owner The address from which the balance will be retrieved\r\n  /// @return The balance\r\n  function balanceOf(address _owner) public view returns (uint balance);\r\n\r\n  /// @notice send `_value` token to `_to` from `msg.sender`\r\n  /// @param _to The address of the recipient\r\n  /// @param _value The amount of token to be transferred\r\n  /// @return Whether the transfer was successful or not\r\n  function transfer(address _to, uint _value) public returns (bool success);\r\n\r\n  /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n  /// @param _from The address of the sender\r\n  /// @param _to The address of the recipient\r\n  /// @param _value The amount of token to be transferred\r\n  /// @return Whether the transfer was successful or not\r\n  function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n\r\n  /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\r\n  /// @param _spender The address of the account able to transfer the tokens\r\n  /// @param _value The amount of tokens to be approved for transfer\r\n  /// @return Whether the approval was successful or not\r\n  function approve(address _spender, uint _value) public returns (bool success);\r\n\r\n  /// @param _owner The address of the account owning tokens\r\n  /// @param _spender The address of the account able to transfer the tokens\r\n  /// @return Amount of remaining tokens allowed to spent\r\n  function allowance(address _owner, address _spender) public view returns (uint remaining);\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n// File: contracts/gluon/AppGovernance.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\ninterface AppGovernance {\r\n  function approve(uint32 id) external;\r\n  function disapprove(uint32 id) external;\r\n  function activate(uint32 id) external;\r\n}\r\n\r\n// File: contracts/gluon/AppLogic.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\ninterface AppLogic {\r\n  function upgrade() external;\r\n  function credit(address account, address asset, uint quantity) external;\r\n  function debit(address account, bytes calldata parameters) external returns (address asset, uint quantity);\r\n}\r\n\r\n// File: contracts/gluon/GluonView.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\ninterface GluonView {\r\n  function app(uint32 id) external view returns (address current, address proposal, uint activationBlock);\r\n  function current(uint32 id) external view returns (address);\r\n  function history(uint32 id) external view returns (address[] memory);\r\n  function getBalance(uint32 id, address asset) external view returns (uint);\r\n  function isAnyLogic(uint32 id, address logic) external view returns (bool);\r\n  function isAppOwner(uint32 id, address appOwner) external view returns (bool);\r\n  function proposals(address logic) external view returns (bool);\r\n  function totalAppsCount() external view returns(uint32);\r\n}\r\n\r\n// File: contracts/gluon/GluonWallet.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\ninterface GluonWallet {\r\n  function depositEther(uint32 id) external payable;\r\n  function depositToken(uint32 id, address token, uint quantity) external;\r\n  function withdraw(uint32 id, bytes calldata parameters) external;\r\n  function transfer(uint32 from, uint32 to, bytes calldata parameters) external;\r\n}\r\n\r\n// File: contracts/gluon/Governing.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\ninterface Governing {\r\n  function deleteVoteTally(address proposal) external;\r\n  function activationInterval() external view returns (uint);\r\n}\r\n\r\n// File: contracts/common/HasOwners.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\ncontract HasOwners is Validating {\r\n\r\n  address[] public owners;\r\n  mapping(address => bool) public isOwner;\r\n\r\n  event OwnerAdded(address indexed owner);\r\n  event OwnerRemoved(address indexed owner);\r\n\r\n  constructor(address[] memory owners_) public {\r\n    for (uint i = 0; i < owners_.length; i++) addOwner_(owners_[i]);\r\n  }\r\n\r\n  modifier onlyOwner { require(isOwner[msg.sender], \"invalid sender; must be owner\"); _; }\r\n\r\n  function getOwners() public view returns (address[] memory) { return owners; }\r\n\r\n  function addOwner(address owner) external onlyOwner { addOwner_(owner); }\r\n\r\n  function addOwner_(address owner) private validAddress(owner) {\r\n    if (!isOwner[owner]) {\r\n      isOwner[owner] = true;\r\n      owners.push(owner);\r\n      emit OwnerAdded(owner);\r\n    }\r\n  }\r\n\r\n  function removeOwner(address owner) external onlyOwner {\r\n    require(isOwner[owner], 'only owners can be removed');\r\n    require(owners.length > 1, 'can not remove last owner');\r\n    isOwner[owner] = false;\r\n    for (uint i = 0; i < owners.length; i++) {\r\n      if (owners[i] == owner) {\r\n        owners[i] = owners[owners.length - 1];\r\n        owners.pop();\r\n        emit OwnerRemoved(owner);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/gluon/HasAppOwners.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\ncontract HasAppOwners is HasOwners {\r\n\r\n  mapping(uint32 => address[]) public appOwners;\r\n\r\n  event AppOwnerAdded (uint32 appId, address appOwner);\r\n  event AppOwnerRemoved (uint32 appId, address appOwner);\r\n\r\n  constructor(address[] memory owners) HasOwners(owners) public { }\r\n\r\n  modifier onlyAppOwner(uint32 appId) { require(isAppOwner(appId, msg.sender), \"invalid sender; must be app owner\"); _; }\r\n\r\n  function isAppOwner(uint32 appId, address appOwner) public view returns (bool) {\r\n    address[] memory currentOwners = appOwners[appId];\r\n    for (uint i = 0; i < currentOwners.length; i++) {\r\n      if (currentOwners[i] == appOwner) return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function getAppOwners(uint32 appId) public view returns (address[] memory) { return appOwners[appId]; }\r\n\r\n  function addAppOwners(uint32 appId, address[] calldata toBeAdded) external onlyAppOwner(appId) {\r\n    addAppOwners_(appId, toBeAdded);\r\n  }\r\n\r\n  function addAppOwners_(uint32 appId, address[] memory toBeAdded) internal {\r\n    for (uint i = 0; i < toBeAdded.length; i++) {\r\n      if (!isAppOwner(appId, toBeAdded[i])) {\r\n        appOwners[appId].push(toBeAdded[i]);\r\n        emit AppOwnerAdded(appId, toBeAdded[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  function removeAppOwners(uint32 appId, address[] calldata toBeRemoved) external onlyAppOwner(appId) {\r\n    address[] storage currentOwners = appOwners[appId];\r\n    require(currentOwners.length > toBeRemoved.length, \"can not remove last owner\");\r\n    for (uint i = 0; i < toBeRemoved.length; i++) {\r\n      for (uint j = 0; j < currentOwners.length; j++) {\r\n        if (currentOwners[j] == toBeRemoved[i]) {\r\n          currentOwners[j] = currentOwners[currentOwners.length - 1];\r\n          currentOwners.pop();\r\n          emit AppOwnerRemoved(appId, toBeRemoved[i]);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/gluon/Gluon.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Gluon is Validating, Versioned, AppGovernance, GluonView, GluonWallet, HasAppOwners {\r\n  using SafeMath for uint;\r\n\r\n  struct App {\r\n    address[] history;\r\n    address proposal;\r\n    uint activationBlock;\r\n    mapping(address => uint) balances;\r\n  }\r\n\r\n  address private constant ETH = address(0x0);\r\n  uint32 private constant REGISTRY_INDEX = 0;\r\n  uint32 private constant STAKE_INDEX = 1;\r\n\r\n  mapping(uint32 => App) public apps;\r\n  mapping(address => bool) public proposals;\r\n  uint32 public totalAppsCount = 0;\r\n\r\n  event AppRegistered (uint32 appId);\r\n  event AppProvisioned(uint32 indexed appId, uint8 version, address logic);\r\n  event ProposalAdded(uint32 indexed appId, uint8 version, address logic, uint activationBlock);\r\n  event ProposalRemoved(uint32 indexed appId, uint8 version, address logic);\r\n  event Activated(uint32 indexed appId, uint8 version, address logic);\r\n\r\n  constructor(address[] memory owners, string memory version) Versioned(version) public HasAppOwners(owners) {\r\n    registerApp_(REGISTRY_INDEX, owners);\r\n    registerApp_(STAKE_INDEX, owners);\r\n  }\r\n\r\n  modifier onlyCurrentLogic(uint32 appId) { require(msg.sender == current(appId), \"invalid sender; must be latest logic contract\"); _; }\r\n  modifier provisioned(uint32 appId) { require(apps[appId].history.length > 0, \"App is not yet provisioned\"); _; }\r\n\r\n  function registerApp(uint32 appId, address[] calldata appOwners_) external onlyOwner { registerApp_(appId, appOwners_); }\r\n\r\n  function registerApp_(uint32 appId, address[] memory appOwners_) private {\r\n    require(appOwners[appId].length == 0, \"App already has app owner\");\r\n    require(totalAppsCount == appId, \"app ids are incremented by 1\");\r\n    totalAppsCount++;\r\n    emit AppRegistered(appId);\r\n    addAppOwners_(appId, appOwners_);\r\n  }\r\n\r\n  function provisionApp(uint32 appId, address logic) external onlyAppOwner(appId) validAddress(logic) {\r\n    App storage app = apps[appId];\r\n    require(app.history.length == 0, \"App is already provisioned\");\r\n    app.history.push(logic);\r\n    emit AppProvisioned(appId, uint8(app.history.length - 1), logic);\r\n  }\r\n\r\n  function addProposal(uint32 appId, address logic) external onlyAppOwner(appId) provisioned(appId) validAddress(logic) {\r\n    App storage app = apps[appId];\r\n    require(app.proposal == address(0), \"Proposal already exists. remove proposal before adding new one\");\r\n    app.proposal = logic;\r\n    app.activationBlock = block.number + Governing(current(STAKE_INDEX)).activationInterval();\r\n    proposals[logic] = true;\r\n    emit ProposalAdded(appId, uint8(app.history.length - 1), app.proposal, app.activationBlock);\r\n  }\r\n\r\n  function removeProposal(uint32 appId) external onlyAppOwner(appId) provisioned(appId) {\r\n    App storage app = apps[appId];\r\n    emit ProposalRemoved(appId, uint8(app.history.length - 1), app.proposal);\r\n    deleteProposal(app);\r\n  }\r\n\r\n  function deleteProposal(App storage app) private {\r\n    Governing(current(STAKE_INDEX)).deleteVoteTally(app.proposal);\r\n    delete proposals[app.proposal];\r\n    delete app.proposal;\r\n    app.activationBlock = 0;\r\n  }\r\n\r\n  /************************************************* AppGovernance ************************************************/\r\n\r\n  function approve(uint32 appId) external onlyCurrentLogic(STAKE_INDEX) {\r\n    apps[appId].activationBlock = block.number;\r\n  }\r\n\r\n  function disapprove(uint32 appId) external onlyCurrentLogic(STAKE_INDEX) {\r\n    App storage app = apps[appId];\r\n    emit ProposalRemoved(appId, uint8(app.history.length - 1), app.proposal);\r\n    deleteProposal(app);\r\n  }\r\n\r\n  function activate(uint32 appId) external onlyCurrentLogic(appId) provisioned(appId) {\r\n    App storage app = apps[appId];\r\n    require(app.activationBlock > 0, \"nothing to activate\");\r\n    require(app.activationBlock < block.number, \"new app can not be activated before activation block\");\r\n    app.history.push(app.proposal); // now make it the current\r\n    deleteProposal(app);\r\n    emit Activated(appId, uint8(app.history.length - 1), current(appId));\r\n  }\r\n\r\n  /**************************************************** GluonWallet ****************************************************/\r\n\r\n  function depositEther(uint32 appId) external payable provisioned(appId) {\r\n    App storage app = apps[appId];\r\n    app.balances[ETH] = app.balances[ETH].plus(msg.value);\r\n    AppLogic(current(appId)).credit(msg.sender, ETH, msg.value);\r\n  }\r\n\r\n  /// @notice an account must call token.approve(logic, quantity) beforehand\r\n  function depositToken(uint32 appId, address token, uint quantity) external provisioned(appId) {\r\n    transferTokensToGluonSecurely(appId, Token(token), quantity);\r\n    AppLogic(current(appId)).credit(msg.sender, token, quantity);\r\n  }\r\n\r\n  function transferTokensToGluonSecurely(uint32 appId, Token token, uint quantity) private {\r\n    uint balanceBefore = token.balanceOf(address(this));\r\n    require(token.transferFrom(msg.sender, address(this), quantity), \"failure to transfer quantity from token\");\r\n    uint balanceAfter = token.balanceOf(address(this));\r\n    require(balanceAfter.minus(balanceBefore) == quantity, \"bad Token; transferFrom erroneously reported of successful transfer\");\r\n    App storage app = apps[appId];\r\n    app.balances[address(token)] = app.balances[address(token)].plus(quantity);\r\n  }\r\n\r\n  function withdraw(uint32 appId, bytes calldata parameters) external provisioned(appId) {\r\n    (address asset, uint quantity) = AppLogic(current(appId)).debit(msg.sender, parameters);\r\n    if (quantity > 0) {\r\n      App storage app = apps[appId];\r\n      require(app.balances[asset] >= quantity, \"not enough funds to transfer\");\r\n      app.balances[asset] = apps[appId].balances[asset].minus(quantity);\r\n      asset == ETH ?\r\n        require(address(uint160(msg.sender)).send(quantity), \"failed to transfer ether\") : // explicit casting to `address payable`\r\n        transferTokensToAccountSecurely(Token(asset), quantity, msg.sender);\r\n    }\r\n  }\r\n\r\n  function transferTokensToAccountSecurely(Token token, uint quantity, address to) private {\r\n    uint balanceBefore = token.balanceOf(to);\r\n    require(token.transfer(to, quantity), \"failure to transfer quantity from token\");\r\n    uint balanceAfter = token.balanceOf(to);\r\n    require(balanceAfter.minus(balanceBefore) == quantity, \"bad Token; transferFrom erroneously reported of successful transfer\");\r\n  }\r\n\r\n  function transfer(uint32 from, uint32 to, bytes calldata parameters) external provisioned(from) provisioned(to) {\r\n    (address asset, uint quantity) = AppLogic(current(from)).debit(msg.sender, parameters);\r\n    if (quantity > 0) {\r\n      if (from != to) {\r\n        require(apps[from].balances[asset] >= quantity, \"not enough balance in logic to transfer\");\r\n        apps[from].balances[asset] = apps[from].balances[asset].minus(quantity);\r\n        apps[to].balances[asset] = apps[to].balances[asset].plus(quantity);\r\n      }\r\n      AppLogic(current(to)).credit(msg.sender, asset, quantity);\r\n    }\r\n  }\r\n\r\n  /**************************************************** GluonView  ****************************************************/\r\n\r\n  function app(uint32 appId) external view returns (address current, address proposal, uint activationBlock) {\r\n    App memory app_ = apps[appId];\r\n    current = app_.history[app_.history.length - 1];\r\n    proposal = app_.proposal;\r\n    activationBlock = app_.activationBlock;\r\n  }\r\n\r\n  function current(uint32 appId) public view returns (address) { return apps[appId].history[apps[appId].history.length - 1]; }\r\n\r\n  function history(uint32 appId) external view returns (address[] memory) { return apps[appId].history; }\r\n\r\n  function isAnyLogic(uint32 appId, address logic) public view returns (bool) {\r\n    address[] memory history_ = apps[appId].history;\r\n    for (uint i = history_.length; i > 0; i--) {\r\n      if (history_[i - 1] == logic) return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function getBalance(uint32 appId, address asset) external view returns (uint) { return apps[appId].balances[asset]; }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"appId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"logic\",\"type\":\"address\"}],\"name\":\"Activated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"appId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"appOwner\",\"type\":\"address\"}],\"name\":\"AppOwnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"appId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"appOwner\",\"type\":\"address\"}],\"name\":\"AppOwnerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"appId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"logic\",\"type\":\"address\"}],\"name\":\"AppProvisioned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"appId\",\"type\":\"uint32\"}],\"name\":\"AppRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"appId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"logic\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"activationBlock\",\"type\":\"uint256\"}],\"name\":\"ProposalAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"appId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"logic\",\"type\":\"address\"}],\"name\":\"ProposalRemoved\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"appId\",\"type\":\"uint32\"}],\"name\":\"activate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"appId\",\"type\":\"uint32\"},{\"internalType\":\"address[]\",\"name\":\"toBeAdded\",\"type\":\"address[]\"}],\"name\":\"addAppOwners\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"appId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"logic\",\"type\":\"address\"}],\"name\":\"addProposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"appId\",\"type\":\"uint32\"}],\"name\":\"app\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"current\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"activationBlock\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"appOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"appId\",\"type\":\"uint32\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"apps\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"activationBlock\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"appId\",\"type\":\"uint32\"}],\"name\":\"current\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"appId\",\"type\":\"uint32\"}],\"name\":\"depositEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"appId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"appId\",\"type\":\"uint32\"}],\"name\":\"disapprove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"appId\",\"type\":\"uint32\"}],\"name\":\"getAppOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"appId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"appId\",\"type\":\"uint32\"}],\"name\":\"history\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"appId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"logic\",\"type\":\"address\"}],\"name\":\"isAnyLogic\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"appId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"appOwner\",\"type\":\"address\"}],\"name\":\"isAppOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"appId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"logic\",\"type\":\"address\"}],\"name\":\"provisionApp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"appId\",\"type\":\"uint32\"},{\"internalType\":\"address[]\",\"name\":\"appOwners_\",\"type\":\"address[]\"}],\"name\":\"registerApp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"appId\",\"type\":\"uint32\"},{\"internalType\":\"address[]\",\"name\":\"toBeRemoved\",\"type\":\"address[]\"}],\"name\":\"removeAppOwners\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"appId\",\"type\":\"uint32\"}],\"name\":\"removeProposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAppsCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"from\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"to\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"appId\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Gluon","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000030000000000000000000000004d2130d9d20428dc249a1e938a0bcea4b5b9ac1a000000000000000000000000ac01f01f51f0bdd012c1838bd5cef330e6c7ffca0000000000000000000000005ccaaae7bea14e8e04fb0fc7ed16df49d5678eb80000000000000000000000000000000000000000000000000000000000000005312e312e30000000000000000000000000000000000000000000000000000000","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://b938ada3bc32828138c90daad9eb4f4f3adb36884397a1e83f125cc02a74ccef"}]}