{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.11;\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner || msg.sender == address(this));\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\r\n    uint256 c = add(a,m);\r\n    uint256 d = sub(c,1);\r\n    return mul(div(d,m),m);\r\n  }\r\n}\r\n\r\ncontract Token{\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n}\r\n\r\ncontract Staking is Owned{\r\n    Token public token;\r\n    bool lock;\r\n    uint256 public minstakeTokens;\r\n    uint256 private basePercent = 200;\r\n    using SafeMath for uint256;\r\n    uint256 public stakeTime = 1814400; // 3 weeks = 3*7*24*60*60  OR 1 week = 604800 secs, 3 weeks = 3*604800 = 1,814,400\r\n    uint public stakePercentage = 30;\r\n    event stakingstarted(address staker, uint256 tokens, uint256 time);\r\n    event tokensRedeemed(address staker, uint256 stakedTokens, uint256 reward);\r\n    \r\n    struct stake{\r\n        uint256 time;\r\n        bool redeem;\r\n        uint256 tokens;\r\n    }\r\n    mapping(address => stake) staker;\r\n    \r\n    \r\n    constructor(address tokenContractAddress) public{\r\n        token = Token(tokenContractAddress);\r\n        owner = msg.sender;\r\n        minstakeTokens = 500 * 10 ** uint(10);\r\n    }\r\n    \r\n    function startStaking(uint256 stakeTokens) public{\r\n        stakeTokens = stakeTokens * 10 ** uint(10);\r\n        require(stakeTokens >= minstakeTokens);\r\n        require(token.balanceOf(msg.sender) >= stakeTokens + findOnePercent(stakeTokens));\r\n        require(token.transferFrom(msg.sender, address(this), stakeTokens  + findOnePercent(stakeTokens)));\r\n        staker[msg.sender].time = now;\r\n        staker[msg.sender].tokens =  staker[msg.sender].tokens + stakeTokens;\r\n        emit stakingstarted(msg.sender, staker[msg.sender].tokens, staker[msg.sender].time);\r\n    }\r\n    \r\n    function redeem() public{\r\n        require(!lock);\r\n        require(!staker[msg.sender].redeem);\r\n        require(staker[msg.sender].time + stakeTime <= now);\r\n        require(token.transfer(msg.sender,staker[msg.sender].tokens));\r\n        require(token.transferFrom(owner, msg.sender ,staker[msg.sender].tokens * stakePercentage * 100 / 10000));\r\n        emit tokensRedeemed(msg.sender, staker[msg.sender].tokens, staker[msg.sender].tokens * stakePercentage * 100 / 10000);\r\n        staker[msg.sender].redeem = true;\r\n        staker[msg.sender].tokens = 0;\r\n    }\r\n    \r\n    function changeStakeTokens(uint256 _NewTokensThreshold) public onlyOwner{\r\n        minstakeTokens = _NewTokensThreshold * 10 ** uint(10);\r\n    }\r\n    \r\n    function changeStakeTime(uint256 _newStakeTime) public onlyOwner{\r\n        stakeTime = _newStakeTime;\r\n    }\r\n    \r\n    function changeStakingPercentage(uint _newStakePercentage) public onlyOwner{\r\n        stakePercentage = _newStakePercentage;\r\n        \r\n    }\r\n    \r\n    function lockWithdrawals() public onlyOwner{\r\n        lock = true;\r\n    }\r\n    \r\n    function findOnePercent(uint256 value) private view returns (uint256)  {\r\n        uint256 roundValue = value.ceil(basePercent);\r\n        uint256 onePercent = roundValue.mul(basePercent).div(10000);\r\n        return onePercent;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newStakeTime\",\"type\":\"uint256\"}],\"name\":\"changeStakeTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeTokens\",\"type\":\"uint256\"}],\"name\":\"startStaking\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newStakePercentage\",\"type\":\"uint256\"}],\"name\":\"changeStakingPercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_NewTokensThreshold\",\"type\":\"uint256\"}],\"name\":\"changeStakeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minstakeTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockWithdrawals\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract Token\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"stakingstarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakedTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"tokensRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Staking","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c85bd82baab231b31bdfe6cf3d92020d1408863a","Library":"","LicenseType":"None","SwarmSource":"bzzr://d0637472801a69cd93eb01086087d6bdc89c4c65ac79b957a0265a845d5fbbdb"}]}