{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n\r\n  \r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  \r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n \r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// https://github.com/ethereum/EIPs/issues/20\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint supply);\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    function decimals() external view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n/**\r\n * Author : Hamza Yasin\r\n * Linkedin: linkedin.com/in/hamzayasin\r\n * Github: HamzaYasin1\r\n */\r\n\r\ncontract BitherxSales is Ownable {\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    // The token being sold\r\n    ERC20 private _token;\r\n    \r\n    // Address where funds are collected\r\n    address private _wallet;\r\n    \r\n    uint256 private _rate = 17000; //1 Token = 1 cent -  Dollar Rate 168.96 per Ether\r\n    \r\n    // Amount of wei raised\r\n    uint256 private _weiRaised;\r\n    \r\n    uint256 public _tierOneBonus;\r\n    \r\n    uint256 public _tierTwoBonus;\r\n    \r\n    uint256 public _tierThreeBonus;\r\n    \r\n    uint256 public _weekOne;\r\n        \r\n    uint256 public _weekTwo;\r\n    \r\n    uint256 public _weekThree;\r\n    \r\n    uint256 private _tokensSold;\r\n    \r\n    uint256 public _startTime = 1568140200; //10 Sept 04:15 PKT\r\n    \r\n    uint256 public _endTime = _startTime + 90 minutes; //11-Nov-2019 - 12 am\r\n    \r\n    uint256 public _claimTime = _endTime + 10 minutes;\r\n    \r\n    uint256 public _saleSupply = SafeMath.mul(390000000, 1 ether); // 60%\r\n    uint256 public bountySupply = SafeMath.mul(32500000, 1 ether); // 5%\r\n    uint256 public advisorSupply = SafeMath.mul(39000000, 1 ether); // 6%\r\n    uint256 public legalSupply = SafeMath.mul(13000000, 1 ether); // 2%\r\n    uint256 public teamSupply = SafeMath.mul(45500000, 1 ether); // 7%\r\n    uint256 public developmentSupply = SafeMath.mul(130000000, 1 ether); // 20 %\r\n  \r\n\r\n    // timelocks\r\n    uint256 internal legalTimeLock;\r\n    uint256 internal advisorTimeLock;\r\n    uint256 internal developmentTimeLock;\r\n    uint256 internal teamTimeLock;\r\n\r\n    // count the number of function calls\r\n    uint internal legalCounter = 0; // internal\r\n    uint internal teamCounter = 0;\r\n    uint internal advisorCounter = 0;\r\n    uint internal developmentCounter = 0;\r\n    \r\n    struct TokenHolders {\r\n        address to;\r\n        uint256 amount;\r\n        bool status;\r\n    }\r\n    \r\n    mapping(address => TokenHolders) public holders;\r\n    \r\n    modifier onlyHolder(address _caller) {\r\n        require(_caller == holders[_caller].to);\r\n        _;\r\n    }\r\n    \r\n    \r\n    event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n    \r\n    constructor (address  wallet, ERC20 token) public {\r\n        require(wallet != address(0), \"Crowdsale: wallet is the zero address\");\r\n        require(address(token) != address(0), \"Crowdsale: token is the zero address\");\r\n\r\n        _wallet = wallet;\r\n        _token = token;\r\n        _tokensSold = 0;\r\n        \r\n        _weekOne = SafeMath.add(_startTime, 20 minutes);\r\n        _weekTwo = SafeMath.add(_weekOne, 20 minutes);\r\n        _weekThree = SafeMath.add(_weekTwo, 20 minutes);\r\n       \r\n       _tierOneBonus =  SafeMath.div(SafeMath.mul(_rate,30),100);\r\n       _tierTwoBonus =  SafeMath.div(SafeMath.mul(_rate,25),100);\r\n       _tierThreeBonus =  SafeMath.div(SafeMath.mul(_rate,20),100);\r\n       \r\n        /** Vested Period calculations for team and advisors*/\r\n        legalTimeLock = SafeMath.add(_endTime, 5 minutes);\r\n        advisorTimeLock = SafeMath.add(_endTime, 5 minutes);\r\n        developmentTimeLock = SafeMath.add(_endTime, 5 minutes);\r\n        teamTimeLock = SafeMath.add(_endTime, 5 minutes);\r\n    }\r\n\r\n    function () external payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n\r\n    function token() public view returns (ERC20) {\r\n        return _token;\r\n    }\r\n\r\n    function wallet() public view returns (address ) {\r\n        return _wallet;\r\n    }\r\n\r\n    function rate() public view returns (uint256) {\r\n        return _rate;\r\n    }\r\n\r\n    function weiRaised() public view returns (uint256) {\r\n        return _weiRaised;\r\n    }\r\n\r\n    function buyTokens(address beneficiary) public  payable {\r\n        require(validPurchase());\r\n\r\n        uint256 weiAmount = msg.value;\r\n        uint256 accessTime = now;\r\n        \r\n        require(weiAmount >= 10000000000000000, \"Wei amount should be greater than 0.01 ETH\");\r\n        _preValidatePurchase(beneficiary, weiAmount);\r\n        \r\n        uint256 tokens = 0;\r\n        \r\n        tokens = _processPurchase(accessTime,weiAmount, tokens);\r\n      \r\n        _weiRaised = _weiRaised.add(weiAmount);\r\n        \r\n        _holdTokens(beneficiary, tokens);\r\n\r\n        emit TokensPurchased(msg.sender, beneficiary, weiAmount, tokens);\r\n        \r\n        _tokensSold = _tokensSold.add(tokens);\r\n        \r\n        _forwardFunds();\r\n     \r\n    }\r\n\r\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal pure {\r\n        require(beneficiary != address(0), \"Crowdsale: beneficiary is the zero address\");\r\n        require(weiAmount != 0, \"Crowdsale: weiAmount is 0\");\r\n    }\r\n\r\n    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {\r\n        _token.transfer(beneficiary, tokenAmount);\r\n    }\r\n\r\n    function _holdTokens(address beneficiary, uint256 tokenAmount) internal {\r\n         require(holders[beneficiary].status == false);\r\n         if (holders[beneficiary].to == beneficiary) {\r\n             holders[beneficiary].amount = holders[beneficiary].amount + tokenAmount;\r\n         }\r\n         else {\r\n             holders[beneficiary].to = beneficiary;\r\n             holders[beneficiary].amount = tokenAmount;\r\n             holders[beneficiary].status = false;\r\n\r\n         }\r\n    }\r\n    \r\n    function _claimTokens() public onlyHolder(msg.sender) {\r\n        require(holders[msg.sender].status == false);\r\n        require(now >= _claimTime);\r\n        \r\n        _deliverTokens(msg.sender, holders[msg.sender].amount);\r\n    \r\n        holders[msg.sender].status = true;\r\n    }\r\n    \r\n\r\n    function _processPurchase(uint256 accessTime, uint256 weiAmount, uint256 tokenAmount)  internal returns (uint256) {\r\n       \r\n       if ( accessTime <= _weekOne ) { \r\n        tokenAmount = SafeMath.add(tokenAmount, weiAmount.mul(_tierOneBonus));\r\n      } else if (( accessTime <= _weekTwo ) && (accessTime > _weekOne)) { \r\n        tokenAmount = SafeMath.add(tokenAmount, weiAmount.mul(_tierTwoBonus));\r\n      } \r\n      else if (( accessTime <= _weekThree ) && (accessTime > _weekTwo)) { \r\n        tokenAmount = SafeMath.add(tokenAmount, weiAmount.mul(_tierThreeBonus));\r\n      } \r\n        tokenAmount = tokenAmount = SafeMath.add(tokenAmount, weiAmount.mul(_rate));\r\n        \r\n        require(_saleSupply >= tokenAmount, \"sale supply should be greater or equals to tokenAmount\");\r\n        \r\n        _saleSupply = _saleSupply.sub(tokenAmount);        \r\n\r\n        return tokenAmount;\r\n        \r\n    }\r\n    \r\n      // @return true if the transaction can buy tokens\r\n    function validPurchase() internal constant returns (bool) {\r\n        bool withinPeriod = now >= _startTime && now <= _endTime;\r\n        bool nonZeroPurchase = msg.value != 0;\r\n        return withinPeriod && nonZeroPurchase;\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n    function hasEnded() public constant returns (bool) {\r\n      return now > _endTime;\r\n    }\r\n\r\n    function _forwardFunds() internal {\r\n        _wallet.transfer(msg.value);\r\n    }\r\n    function withdrawTokens(uint _amount) external onlyOwner {\r\n       _token.transfer(_wallet, _amount);\r\n   }\r\n     \r\n    function grantAdvisorToken(address beneficiary ) external onlyOwner {\r\n        require((advisorCounter < 4) && (advisorTimeLock < now));\r\n       \r\n        advisorTimeLock = SafeMath.add(advisorTimeLock, 24 weeks);\r\n        _token.transfer(beneficiary,SafeMath.div(advisorSupply, 4));\r\n        advisorCounter = SafeMath.add(advisorCounter, 1);    \r\n    }\r\n\r\n    function grantLegalToken(address founderAddress) external onlyOwner {\r\n        require((legalCounter < 4) && (legalTimeLock < now));\r\n       \r\n        legalTimeLock = SafeMath.add(legalTimeLock, 24 weeks);\r\n        _token.transfer(founderAddress,SafeMath.div(legalSupply, 4));\r\n        legalCounter = SafeMath.add(legalCounter, 1);        \r\n    }\r\n    \r\n    function grantBounty(address[] recipients, uint256[] values) external onlyOwner {\r\n\r\n        for (uint i = 0; i < recipients.length; i++) {\r\n            uint x = values[i].mul(1 ether);\r\n            require(bountySupply >= values[i]);\r\n            bountySupply = SafeMath.sub(bountySupply,values[i]);\r\n            _token.transfer(recipients[i], x); \r\n        }\r\n    } \r\n\r\n    function grantTeamToken(address teamAddress) external onlyOwner {\r\n        require((teamCounter < 4) && (teamTimeLock < now));\r\n       \r\n        teamTimeLock = SafeMath.add(teamTimeLock, 24 weeks);\r\n        _token.transfer(teamAddress,SafeMath.div(teamSupply, 4));\r\n        teamCounter = SafeMath.add(teamCounter, 1);        \r\n    }\r\n\r\n    function grantDevelopmentToken(address developmentAddress) external onlyOwner {\r\n        require((developmentCounter < 4) && (developmentTimeLock < now));\r\n       \r\n        developmentTimeLock = SafeMath.add(developmentTimeLock, 24 weeks);\r\n        _token.transfer(developmentAddress,SafeMath.div(developmentSupply, 4));\r\n        developmentCounter = SafeMath.add(developmentCounter, 1);        \r\n    }\r\n    \r\n    function transferFunds(address[] recipients, uint256[] values) external onlyOwner {\r\n\r\n        for (uint i = 0; i < recipients.length; i++) {\r\n            uint x = values[i].mul(1 ether);\r\n            require(_saleSupply >= values[i]);\r\n            _saleSupply = SafeMath.sub(_saleSupply,values[i]);\r\n            _token.transfer(recipients[i], x); \r\n        }\r\n    } \r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"holders\",\"outputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipients\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"grantBounty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_tierTwoBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_saleSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_weekThree\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developmentSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipients\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"transferFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_claimTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"founderAddress\",\"type\":\"address\"}],\"name\":\"grantLegalToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_tierOneBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"developmentAddress\",\"type\":\"address\"}],\"name\":\"grantDevelopmentToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"_claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisorSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountySupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_weekOne\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"grantAdvisorToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"teamAddress\",\"type\":\"address\"}],\"name\":\"grantTeamToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_tierThreeBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"legalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_weekTwo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BitherxSales","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000005026396f499cd14bb0b5ccefe00f202d7a0e7bb900000000000000000000000011e8c16a474a05a2f40a74900b4c16dd6829fcf1","Library":"","LicenseType":"GNU GPLv2","SwarmSource":"bzzr://2c91f2a5aabcbcc0f0233b1994a31c81a1fb1af40bb55d12c80a657ee63ebccb"}]}