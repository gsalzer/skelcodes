{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  *  Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20 {\r\n  uint256 public totalSupply;\r\n\r\n  function balanceOf(address _who) public view returns (uint256);\r\n\r\n  function allowance(address _owner, address _spender) public view returns (uint256);\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  \r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n\r\n  event Transfer( address indexed from, address indexed to,  uint256 value);\r\n\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n  \r\n  event Burn(address indexed from, uint256 value);\r\n}\r\n\r\ncontract owned {\r\n    address public owner;\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract StandardToken is ERC20, owned {\r\n  using SafeMath for uint256;\r\n  uint256 internal oneToken;\r\n  mapping (address => uint256) availableBalances;\r\n  mapping (address => uint256) frozeBalances;\r\n  mapping (address => mapping (address => uint256)) internal allowedBalances;\r\n  mapping (address => bool) internal frozenAccounts;\r\n  event FrozenAccount(address target, bool frozen);\r\n  event FrozenAmount(address target, bool frozen, uint256 amount);\r\n  event FrozenTransfer( address indexed from, address indexed to,  uint256 value, bool _freeze);\r\n  \r\n  /**\r\n   * Transfer the onwer of contract to other user\r\n   */\r\n    function transferOwner(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0), \"Owner address can not be zero\");\r\n        require(_newOwner != owner, \"Same address of owner.\");\r\n        require(!frozenAccounts[_newOwner], \"The address has been frozen\");\r\n        \r\n        owner = _newOwner;\r\n    }\r\n    \r\n    /**\r\n     * destory the contract\r\n     */\r\n    function destoryContract(address _recipient) external onlyOwner {\r\n        selfdestruct(_recipient);\r\n    }\r\n    \r\n    /**\r\n     * transfer Ether balance to owner from account of contract\r\n     */\r\n    function transferEtherToOwner(uint256 _amount) public onlyOwner {\r\n        require(_amount >0, \"Amount must be greater than zero\");\r\n        require(address(this).balance > _amount, \"Ether balance not enough\");\r\n        owner.transfer(_amount);\r\n    }\r\n    \r\n    /**\r\n     * deposit ether to account of contract\r\n     */\r\n    function depositEtherToContract() public payable {\r\n    }\r\n    \r\n  /**\r\n   * transfer Token balance to owner from account of contract\r\n   */\r\n  function transferTokenToOwner(uint256 _amount) public onlyOwner returns (uint256) {\r\n      // check amount\r\n      require(_amount > 0, \"Amount must be greater than zero\");\r\n      require(availableBalances[this] >= _amount, \"Available balance not enough\");\r\n      \r\n      // update balance\r\n      availableBalances[owner] = availableBalances[owner].add(_amount);\r\n      availableBalances[this] = availableBalances[this].sub(_amount);\r\n      emit Transfer(this, owner, _amount);\r\n      emit FrozenTransfer(this, owner, _amount, false);\r\n      return _amount;\r\n  }\r\n  \r\n  /**\r\n   * Frozen account of the specified address\r\n   */\r\n  function freezeAccount(address _target, bool _freeze) public onlyOwner {\r\n      require(_target != address(0), \"Freeze account can not be zero\");\r\n      require(_target != owner, \"Freeze account can not equals to owner\");\r\n\r\n      frozenAccounts[_target] = _freeze;\r\n      emit FrozenAccount(_target, _freeze);\r\n  }\r\n  \r\n  /**\r\n   * Gets frozen status of the specified address\r\n   */\r\n  function frozenAccount(address _target) public view returns (bool) {\r\n      return frozenAccounts[_target];\r\n  }\r\n  \r\n  /**\r\n   * Froze amount of money of the specified address\r\n   */\r\n  function freezeFundsFrom(address _target, bool _freeze, uint256 _amount) public onlyOwner {\r\n    // check address\r\n    require(_target != address(0), \"The account can not be zero\");\r\n    require(_target != owner, \"The account can not equals to owner\");\r\n    \r\n    // check amount\r\n    require(_amount > 0, \"Amount must be greater than zero\");\r\n    \r\n    // update balance\r\n    if (_freeze) {\r\n      require(availableBalances[_target] >= _amount, \"Available balance not enough\");\r\n      availableBalances[_target] = availableBalances[_target].sub(_amount);\r\n      frozeBalances[_target] = frozeBalances[_target].add(_amount);\r\n    } else {\r\n      require(frozeBalances[_target] >= _amount, \"Frozen balance not enough\");\r\n      availableBalances[_target] = availableBalances[_target].add(_amount);\r\n      frozeBalances[_target] = frozeBalances[_target].sub(_amount);\r\n    }\r\n    emit FrozenAmount(_target, _freeze, _amount);\r\n  }\r\n  \r\n  /**\r\n   * Froze amount of money of the own address\r\n   */\r\n  function freezeFunds(uint256 _amount) public returns (bool) {\r\n    // check address\r\n    require(msg.sender != owner, \"The account can not equals to owner\");\r\n    require(!frozenAccounts[msg.sender], \"Account of message sender has been frozen\");\r\n    \r\n    // check amount\r\n    require(_amount > 0, \"Amount must be greater than zero\");\r\n    require(availableBalances[msg.sender] >= _amount, \"Available balance not enough\");\r\n    \r\n    // update balance\r\n    availableBalances[msg.sender] = availableBalances[msg.sender].sub(_amount);\r\n    frozeBalances[msg.sender] = frozeBalances[msg.sender].add(_amount);\r\n    emit FrozenAmount(msg.sender, true, _amount);\r\n    return true;\r\n  }\r\n  \r\n  /**\r\n   * Gets the frozen balance of the specified address\r\n   */\r\n  function balanceOfFrozen(address _owner) public view returns (uint256) {\r\n    return frozeBalances[_owner];\r\n  }\r\n  \r\n  /**\r\n   * Gets available balance of the specified address\r\n   */\r\n  function balanceOfAvailable(address _owner) public view returns (uint256) {\r\n      return availableBalances[_owner];\r\n  }\r\n\r\n  /**\r\n  * Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return availableBalances[_owner]+frozeBalances[_owner];\r\n  }\r\n\r\n  /**\r\n   *  Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256){\r\n    return allowedBalances[_owner][_spender];\r\n  }\r\n  \r\n  /**\r\n   * Increase supply for addtional tokens\r\n   * \r\n   * @param _to address The address of increase to account.\r\n   * @param _amount uint256 The amount of addtional money.\r\n   */\r\n  function increaseSupply(address _to, uint256 _amount, bool _freeze) public onlyOwner returns (bool) {\r\n    // check address\r\n    require(_to != address(0), \"Account can not be zero.\");\r\n    \r\n    // update balance\r\n    totalSupply = totalSupply.add(_amount);\r\n    if (_freeze) {\r\n        frozeBalances[_to] = frozeBalances[_to].add(_amount);\r\n        emit Transfer(0, _to, _amount);\r\n        emit FrozenTransfer(0, _to, _amount, true);\r\n        return true;\r\n    } else {\r\n        availableBalances[_to] = availableBalances[_to].add(_amount);\r\n        emit Transfer(0, _to, _amount);\r\n        emit FrozenTransfer(0, _to, _amount, false);\r\n        return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Transfer token for a specified address\r\n  * \r\n  * @param _to address The address to transfer to.\r\n  * @param _amount uint256 The amount of money to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _amount) public returns (bool) {\r\n    // check address\r\n    require(_to != address(0), \"Transfer account can not be zeros\");\r\n    require(!frozenAccounts[msg.sender], \"Account of message sender has been frozen\");\r\n    \r\n    // check amount\r\n    require(_amount > 0, \"Amount must be greater than zero\");\r\n    require(availableBalances[msg.sender] >= _amount, \"Available balance not enough\");\r\n    \r\n    // update balance\r\n    availableBalances[msg.sender] = availableBalances[msg.sender].sub(_amount);\r\n    availableBalances[_to] = availableBalances[_to].add(_amount);\r\n    emit Transfer(msg.sender, _to, _amount);\r\n    emit FrozenTransfer(msg.sender, _to, _amount, false);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Transfer tokens from one address to another\r\n   * \r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _amount uint256 the amount of money to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _amount) public returns (bool){\r\n    // check address\r\n    require(_from != address(0), \"Transfer account can not be zero\");\r\n    require(_to != address(0), \"Transfer account can not be zero\");\r\n    require(!frozenAccounts[_from], \"Transfer account has been frozen\");\r\n    require(!frozenAccounts[msg.sender], \"Spender account has been frozen\");\r\n    \r\n    // check balance\r\n    require(_amount > 0, \"Amount must be greater than zero\");\r\n    require(availableBalances[_from] >= _amount, \"Available balance not enough\");\r\n    require(allowedBalances[_from][msg.sender] >= _amount, \"Allowed balance not enough\");\r\n    \r\n    // update balance\r\n    availableBalances[_from] = availableBalances[_from].sub(_amount);\r\n    availableBalances[_to] = availableBalances[_to].add(_amount);\r\n    allowedBalances[_from][msg.sender] = allowedBalances[_from][msg.sender].sub(_amount);\r\n    emit Transfer(_from, _to, _amount);\r\n    emit FrozenTransfer(_from, _to, _amount, false);\r\n    return true;\r\n  }\r\n  \r\n  /**\r\n   * Approve the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * \r\n   * @param _spender address The address which will spend the funds.\r\n   * @param _amount uint256 The amount of money to approve the allowance by.\r\n   */\r\n  function approve(address _spender, uint256 _amount) public returns (bool) {\r\n    // check address\r\n    require(_spender != address(0), \"Spender account can not be zero\");\r\n    \r\n    // check amount\r\n    require(_amount >= 0, \"Amount can not less than zero\");\r\n    \r\n    // update balance\r\n    allowedBalances[msg.sender][_spender] = _amount;\r\n    emit Approval(msg.sender, _spender, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * \r\n   * @param _spender address The address which will spend the funds.\r\n   * @param _amount uint256 The amount of money to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint256 _amount) public returns (bool) {\r\n      // check address\r\n      require(_spender != address(0), \"Spender account can not be zero\");\r\n      \r\n      // check amount\r\n      require(_amount > 0, \"Amount must be greater than zero\");\r\n\r\n      // update balance\r\n      allowedBalances[msg.sender][_spender] = allowedBalances[msg.sender][_spender].add(_amount);\r\n      emit Approval(msg.sender, _spender, allowedBalances[msg.sender][_spender]);\r\n      return true;\r\n  }\r\n\r\n  /**\r\n   * Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * \r\n   * @param _spender address The address which will spend the funds.\r\n   * @param _amount uint256 The amount of money to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender,  uint256 _amount) public returns (bool) {\r\n      // check address\r\n      require(_spender != address(0), \"Spender account can not be zero\");\r\n      \r\n      // check amount\r\n      require(_amount > 0, \"Amount must be greater than zero\");\r\n      require(allowedBalances[msg.sender][_spender] >= _amount, \"Allowed balance not enough\");\r\n      \r\n      // update balance\r\n      allowedBalances[msg.sender][_spender] = allowedBalances[msg.sender][_spender].sub(_amount);\r\n      emit Approval(msg.sender, _spender, allowedBalances[msg.sender][_spender]);\r\n      return true;\r\n  }\r\n  \r\n   /**\r\n     * Destroy tokens\r\n     * Remove `_amount` tokens from the system irreversibly\r\n     * \r\n     * @param _amount address The amount of money to burn\r\n     */\r\n    function burn(uint256 _amount) public returns (bool success) {\r\n        // check address\r\n        require(!frozenAccounts[msg.sender], \"Transfer account has bee frozen\");\r\n        \r\n        // check amount\r\n        require(_amount > 0, \"Amount must be greater than zero\");\r\n        require(availableBalances[msg.sender] >= _amount, \"Available balance not enough\");\r\n        \r\n        // update balance\r\n        availableBalances[msg.sender] = availableBalances[msg.sender].sub(_amount);          \r\n        totalSupply = totalSupply.sub(_amount);\r\n        emit Burn(msg.sender, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens from other account\r\n     * Remove `_amount` tokens from the system irreversibly on behalf of `_from`.\r\n     *\r\n     * @param _from address The address of the transfer\r\n     * @param _amount address The amount of money to burn\r\n     */\r\n    function burnFrom(address _from, uint256 _amount) public returns (bool success) {\r\n        // check address\r\n        require(_from != address(0), \"Transfer account can not be zero\");\r\n        require(!frozenAccounts[msg.sender], \"Spender account has bee frozen\");\r\n        require(!frozenAccounts[_from], \"Transfer account has bee frozen\");\r\n        \r\n        // check amount\r\n        require(_amount > 0, \"Amount must be greater than zero\");\r\n        require(availableBalances[_from] >= _amount, \"Available balance not enough\");\r\n        require(allowedBalances[_from][msg.sender] >= _amount, \"Allowed balance not enough\");\r\n        \r\n        // update balance\r\n        availableBalances[_from] = availableBalances[_from].sub(_amount);\r\n        allowedBalances[_from][msg.sender] = allowedBalances[_from][msg.sender].sub(_amount);\r\n        totalSupply = totalSupply.sub(_amount);              \r\n        emit Burn(_from, _amount);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract SEC is StandardToken {\r\n    // Public variables of the token\r\n    string public name = \"SEC\";\r\n    string public symbol = \"SEC\";\r\n    uint8 constant public decimals = 18;\r\n    uint256 constant public initialSupply = 90000000;\r\n\r\n    constructor() public {\r\n        oneToken = 10 ** uint256(decimals);\r\n        totalSupply = initialSupply * oneToken;\r\n        availableBalances[msg.sender] = totalSupply;\r\n        emit Transfer(address(0), msg.sender, totalSupply);\r\n        emit FrozenTransfer(address(0), msg.sender, totalSupply, false);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_freeze\",\"type\":\"bool\"}],\"name\":\"increaseSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"freezeFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferEtherToOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOfAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferTokenToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"destoryContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOfFrozen\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositEtherToContract\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_freeze\",\"type\":\"bool\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"freezeFundsFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FrozenAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_freeze\",\"type\":\"bool\"}],\"name\":\"FrozenTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"SEC","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://95f94c466d34e3703cc26efd8e0720a2ac7494aadf0c065ad0d94de7abad9275"}]}