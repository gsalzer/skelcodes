{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function initOwnership(address newOwner) public {\r\n        require(_owner == address(0), \"Ownable: already owned\");\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: ../3rdparty/openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: ../3rdparty/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/Vesting.sol\r\n\r\npragma solidity ^0.5.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\ncontract Vesting is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    struct VestingStruct{\r\n        uint256 starttime;\r\n        uint256 period;\r\n        uint256 release_periods;\r\n        uint256 amount;\r\n        uint256 withdrawn;\r\n        uint256 group_id;\r\n        bool is_revoked;\r\n    }\r\n\r\n    struct GroupVestingStruct{\r\n        string name;\r\n        uint256 amount;\r\n        uint256 withdrawn;\r\n    }\r\n\r\n    mapping(address=>VestingStruct) vestings;\r\n    mapping(uint256=>address) users;\r\n    uint256 users_counter;\r\n\r\n    mapping(uint256=>GroupVestingStruct) groups;\r\n    uint256 groups_counter;\r\n\r\n    //uint256 seconds_in_day = 60*60*24;\r\n    uint256 seconds_in_day = 60*60*24;\r\n\r\n\r\n    bool _initialized=false;\r\n    bool _initialized2=false;\r\n\r\n    IERC20 token;\r\n\r\n    uint256 _initialized3=0;\r\n\r\n\r\n    event Granted(address indexed account, uint256 amount, uint256 starttime, uint256 period, uint256 release_periods, uint256 group_id);\r\n    event Revoked(address indexed account);\r\n    event ChangeVesting(address indexed account, uint256 amount, uint256 period, uint256 release_periods);\r\n    event ChangeVestingTime(address indexed account, uint256 start_time);\r\n    event ChangeVestingGroup(address indexed account, uint256 group_id);\r\n    event Withdraw(address indexed account, uint256 amount);\r\n\r\n\r\n    function initialize() public{\r\n        require(_initialized3==0, \"Already initialized\");\r\n        _initialized3 = 1;\r\n        seconds_in_day = 60*60*24;\r\n        //initOwnership(msg.sender);\r\n    }\r\n\r\n    function isInitialized() public view returns(bool){\r\n        return _initialized;\r\n    }\r\n    function isInitialized2() public view returns(bool){\r\n        return _initialized2;\r\n    }\r\n    function isInitialized3() public view returns(uint256){\r\n        return _initialized3;\r\n    }\r\n    function getSecondsInDay() public view returns(uint256){\r\n        return seconds_in_day;\r\n    }\r\n    function setSecondsInDay(uint256 _seconds_in_day) public onlyOwner returns(bool){\r\n        seconds_in_day = _seconds_in_day;\r\n        return true;\r\n    }\r\n\r\n\r\n    function setToken(address token_address) public onlyOwner returns(bool){\r\n        token = IERC20(token_address);\r\n    }\r\n\r\n    function getToken() public view returns(address){\r\n        return(address(token));\r\n    }\r\n\r\n\r\n    function usersCounter() public view returns(uint256){\r\n        return users_counter;\r\n    }\r\n\r\n    function groupsCounter() public view returns(uint256){\r\n        return groups_counter;\r\n    }\r\n\r\n\r\n    function addGroup(string memory name) public onlyOwner returns(bool){\r\n        groups[groups_counter].name = name;\r\n        groups_counter++;\r\n    }\r\n\r\n    function renameGroup(uint256 group_id, string memory name ) public onlyOwner returns(bool){\r\n        groups[group_id].name = name;\r\n    }\r\n\r\n    function getGroup(uint256 group_id) public view returns(GroupVestingStruct memory){\r\n        return groups[group_id];\r\n    }\r\n\r\n    function getGroupName(uint256 group_id) public view returns(string memory){\r\n        return groups[group_id].name;\r\n    }\r\n\r\n    function getGroupAmount(uint256 group_id) public view returns(uint256){\r\n        return groups[group_id].amount;\r\n    }\r\n\r\n    function getGroupWithdrawn(uint256 group_id) public view returns(uint256){\r\n        return groups[group_id].withdrawn;\r\n    }\r\n\r\n\r\n    function getVesting(address account) public view returns(VestingStruct memory){\r\n        return vestings[account];\r\n    }\r\n\r\n\r\n    function changeGroup(address account, uint256 new_group_id) public onlyOwner returns(bool){\r\n        require(isGranted(account), \"Not granted\");\r\n\r\n        uint256 granted = vestings[account].amount;\r\n        uint256 withdrawn = vestings[account].withdrawn;\r\n        uint256 prev_group_id = vestings[account].group_id;\r\n        groups[new_group_id].amount = groups[new_group_id].amount.add(granted);\r\n        groups[new_group_id].withdrawn = groups[new_group_id].withdrawn.add(withdrawn);\r\n        groups[prev_group_id].amount = groups[prev_group_id].amount.sub(granted);\r\n        groups[prev_group_id].withdrawn = groups[prev_group_id].withdrawn.sub(withdrawn);\r\n        vestings[account].group_id = new_group_id;\r\n        emit ChangeVestingGroup(account, new_group_id);\r\n    }\r\n\r\n\r\n    function isGranted(address account) public view returns(bool){\r\n        return (vestings[account].starttime != 0);\r\n    }\r\n\r\n    function _grant(address account, uint256 amount, uint256 start_time, uint256 period, uint256 release_periods, uint256 group_id) internal returns(bool){\r\n        vestings[account] = VestingStruct(start_time, period, release_periods, amount, 0, group_id, false);\r\n        groups[group_id].amount = groups[group_id].amount.add(amount);\r\n        users[users_counter] = account;\r\n        users_counter++;\r\n    }\r\n\r\n    function grant(address account, uint256 amount, uint256 period, uint256 release_periods, uint256 group_id, uint256 start_time) public onlyOwner returns (bool){\r\n        require(!isGranted(account), \"Already granted\");\r\n        uint256 vesting_start_time = start_time;\r\n        if(vesting_start_time == 0 ){\r\n            vesting_start_time = now;\r\n        }\r\n        _grant(account, amount, vesting_start_time, period, release_periods, group_id);\r\n        emit Granted(account, amount, vesting_start_time, period, release_periods, group_id);\r\n    }\r\n\r\n    function _revoke(address account) internal returns (bool){\r\n        uint256 withdrawn = vestings[account].withdrawn;\r\n        uint256 group_id = vestings[account].group_id;\r\n        vestings[account].amount = withdrawn;\r\n        if (withdrawn < vestings[account].amount){\r\n            groups[group_id].amount = groups[group_id].amount.sub(vestings[account].amount.sub(withdrawn));\r\n        }\r\n        vestings[account].is_revoked = true;\r\n        return true;\r\n    }\r\n\r\n    function revoke(address account) public onlyOwner returns (bool){\r\n        _revoke(account);\r\n        emit Revoked(account);\r\n    }\r\n\r\n\r\n    function change(address account, uint256 period, uint256 release_periods, uint256 amount) public onlyOwner returns (bool){\r\n        require(isGranted(account), \"Not granted\");\r\n        require(amount >= vestings[account].withdrawn, \"Amount is lower than withdrawn\");\r\n        uint256 group_id = vestings[account].group_id;\r\n        if( amount > vestings[account].amount){\r\n            groups[group_id].amount = groups[group_id].amount.add(amount.sub(vestings[account].amount));\r\n        }else if (amount < vestings[account].amount){\r\n            groups[group_id].amount = groups[group_id].amount.sub(vestings[account].amount.sub(amount));\r\n        }\r\n        vestings[account].period = period;\r\n        vestings[account].release_periods = release_periods;\r\n        vestings[account].amount = amount;\r\n        vestings[account].is_revoked = false;\r\n        return true;\r\n    }\r\n\r\n    function changeStartTime(address account, uint256 start_time) public onlyOwner returns(bool){\r\n        require(isGranted(account), \"Not granted\");\r\n        vestings[account].starttime = start_time;\r\n        emit ChangeVestingTime(account, start_time);\r\n\r\n    }\r\n\r\n    function getUserAddress(uint256 user_id) public view returns (address){\r\n        return users[user_id];\r\n    }\r\n\r\n\r\n    function getCurrentPeriod(address account) public view returns (uint256) {\r\n        \r\n        if( vestings[account].starttime == 0 || vestings[account].starttime >= now){\r\n            return 0;\r\n        }\r\n        \r\n        uint256 calculated_period = (now.sub(vestings[account].starttime).div(seconds_in_day).div(vestings[account].period.div(vestings[account].release_periods)));\r\n        if( calculated_period >= vestings[account].release_periods)\r\n        {\r\n            return vestings[account].release_periods;\r\n        }\r\n        return calculated_period;\r\n    }\r\n\r\n    function getAmount(address account) public view returns (uint256) {\r\n        return vestings[account].amount;\r\n    }\r\n\r\n    function getReleasePeriods(address account) public view returns (uint256) {\r\n        return vestings[account].release_periods;\r\n    }\r\n\r\n    function getPeriod(address account) public view returns (uint256) {\r\n        return vestings[account].period;\r\n    }\r\n\r\n\r\n    function getWithdrawn(address account) public view returns (uint256) {\r\n        return vestings[account].withdrawn;\r\n    }\r\n\r\n    function getRevoked(address account) public view returns (bool) {\r\n        return vestings[account].is_revoked;\r\n    }\r\n\r\n    function getStartTime(address account) public view returns (uint256) {\r\n        return vestings[account].starttime;\r\n    }\r\n\r\n    function getGroupId(address account) public view returns (uint256) {\r\n        return vestings[account].group_id;\r\n    }\r\n\r\n    function getAvailable(address account) public view returns (uint256) {\r\n        uint256 release_periods = getReleasePeriods(account);\r\n        if( !isGranted(account) || release_periods == 0 ){\r\n            return 0;\r\n        }\r\n        uint256 current_release_period = getCurrentPeriod(account);\r\n        uint256 available = current_release_period.mul(getAmount(account).div(release_periods));\r\n        uint256 withdrawn = getWithdrawn(account);\r\n        uint256 amount = getAmount(account);\r\n        if(available <= withdrawn ){\r\n            return 0;\r\n        }\r\n        if( available >= amount || current_release_period >= release_periods){\r\n            return amount.sub(withdrawn);\r\n        }\r\n\r\n        return available.sub(withdrawn);\r\n    }\r\n\r\n    function withdraw() public returns(bool){\r\n        uint256 available = getAvailable(msg.sender);\r\n        require(available > 0, \"Nothing to withdraw\");\r\n        vestings[msg.sender].withdrawn = vestings[msg.sender].withdrawn.add(available);\r\n        groups[vestings[msg.sender].group_id].withdrawn = groups[vestings[msg.sender].group_id].withdrawn.add(available);\r\n        token.transfer(msg.sender, available);\r\n        emit Withdraw(msg.sender, available);\r\n        return true;\r\n    }\r\n\r\n    function reclaimEther(address payable _to) public onlyOwner returns(bool) {\r\n        _to.transfer(address(this).balance);\r\n        return true;\r\n    }\r\n\r\n    function reclaimToken(IERC20 _token, address _to) public onlyOwner returns(bool) {\r\n        uint256 balance = _token.balanceOf(address(this));\r\n        _token.transfer(_to, balance);\r\n        return true;\r\n    }\r\n\r\n    function transferToken(address _to, uint256 _amount ) public onlyOwner returns(bool){\r\n        token.transfer(_to, _amount);\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"period\",\"type\":\"uint256\"},{\"name\":\"release_periods\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"change\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"groupsCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token_address\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group_id\",\"type\":\"uint256\"}],\"name\":\"getGroupWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group_id\",\"type\":\"uint256\"}],\"name\":\"getGroupName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getReleasePeriods\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSecondsInDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group_id\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"renameGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"initOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"start_time\",\"type\":\"uint256\"}],\"name\":\"changeStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revoke\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getRevoked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user_id\",\"type\":\"uint256\"}],\"name\":\"getUserAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group_id\",\"type\":\"uint256\"}],\"name\":\"getGroupAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getGroupId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialized3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isGranted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"reclaimEther\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"period\",\"type\":\"uint256\"},{\"name\":\"release_periods\",\"type\":\"uint256\"},{\"name\":\"group_id\",\"type\":\"uint256\"},{\"name\":\"start_time\",\"type\":\"uint256\"}],\"name\":\"grant\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"addGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialized2\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVesting\",\"outputs\":[{\"components\":[{\"name\":\"starttime\",\"type\":\"uint256\"},{\"name\":\"period\",\"type\":\"uint256\"},{\"name\":\"release_periods\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"name\":\"group_id\",\"type\":\"uint256\"},{\"name\":\"is_revoked\",\"type\":\"bool\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"new_group_id\",\"type\":\"uint256\"}],\"name\":\"changeGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group_id\",\"type\":\"uint256\"}],\"name\":\"getGroup\",\"outputs\":[{\"components\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"withdrawn\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usersCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_seconds_in_day\",\"type\":\"uint256\"}],\"name\":\"setSecondsInDay\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCurrentPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"starttime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"release_periods\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"group_id\",\"type\":\"uint256\"}],\"name\":\"Granted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Revoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"release_periods\",\"type\":\"uint256\"}],\"name\":\"ChangeVesting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"start_time\",\"type\":\"uint256\"}],\"name\":\"ChangeVestingTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"group_id\",\"type\":\"uint256\"}],\"name\":\"ChangeVestingGroup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Vesting","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://75544facd213e9b1f9c6c00dc7e049396126ecad88fb4bcb7976b57416d6313e"}]}