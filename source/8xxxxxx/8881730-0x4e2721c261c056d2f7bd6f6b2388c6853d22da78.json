{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n\r\n\r\ncontract ERC20Interface {\r\n\r\n    function totalSupply() public constant returns (uint);\r\n\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n\r\n}\r\n\r\n\r\n\r\ncontract CryptoQuantumTradingFund is ERC20Interface {\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t// ERC20 //////////////\r\n\r\n\r\n\r\n\tevent Burn(address indexed from, uint256 value);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Destroy tokens\r\n\r\n     */\r\n\r\n    function burn(uint256 _value) public returns (bool success) {\r\n\r\n\tif (msg.sender != owner) \r\n\r\n\t{\r\n\r\n\t\t    revert();\r\n\r\n\t}\r\n\r\n\tif(_value <= 0 || _totalBalance < _value){\r\n\r\n\t    revert();\r\n\r\n\t}\r\n\r\n        balances[owner] -= _value;\r\n\r\n        _totalBalance -= _value;\r\n\ttotalCQTFSupply -= _value;\r\n\r\n\r\n\r\n        emit Burn(msg.sender, _value);\r\n\r\n        emit Transfer(msg.sender, address(0), _value);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\tfunction totalSupply()public constant returns (uint) {\r\n\r\n\t\treturn totalCQTFSupply;\r\n\r\n\t}\r\n\r\n\t\r\n\r\n\tfunction balanceOf(address tokenOwner)public constant returns (uint balance) {\r\n\r\n\t\treturn balances[tokenOwner];\r\n\r\n\t}\r\n\r\n\r\n\r\n\tfunction transfer(address to, uint tokens)public returns (bool success) {\r\n\r\n\t\tif (balances[msg.sender] >= tokens && tokens > 0 && balances[to] + tokens > balances[to]) {\r\n\r\n            if(lockedUsers[msg.sender].lockedTokens > 0){\r\n\r\n                TryUnLockBalance(msg.sender);\r\n\r\n                if(balances[msg.sender] - tokens < lockedUsers[msg.sender].lockedTokens)\r\n\r\n                {\r\n\r\n                    return false;\r\n\r\n                }\r\n\r\n            }\r\n\r\n            \r\n\r\n\t\t\tbalances[msg.sender] -= tokens;\r\n\r\n\t\t\tbalances[to] += tokens;\r\n\r\n\t\t\temit Transfer(msg.sender, to, tokens);\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t\r\n\r\n\r\n\r\n\tfunction transferFrom(address from, address to, uint tokens)public returns (bool success) {\r\n\r\n\t\tif (balances[from] >= tokens && allowed[from][msg.sender] >= tokens && tokens > 0 && balances[to] + tokens > balances[to]) {\r\n\r\n            if(lockedUsers[from].lockedTokens > 0)\r\n\r\n            {\r\n\r\n                TryUnLockBalance(from);\r\n\r\n                if(balances[from] - tokens < lockedUsers[from].lockedTokens)\r\n\r\n                {\r\n\r\n                    return false;\r\n\r\n                }\r\n\r\n            }\r\n\r\n            \r\n\r\n\t\t\tbalances[from] -= tokens;\r\n\r\n\t\t\tallowed[from][msg.sender] -= tokens;\r\n\r\n\t\t\tbalances[to] += tokens;\r\n\r\n\t\t\temit Transfer(from, to, tokens);\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t\r\n\r\n\t\r\n\r\n\tfunction approve(address spender, uint tokens)public returns (bool success) {\r\n\r\n\t\tallowed[msg.sender][spender] = tokens;\r\n\r\n\t\temit Approval(msg.sender, spender, tokens);\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\t\r\n\r\n\tfunction allowance(address tokenOwner, address spender)public constant returns (uint remaining) {\r\n\r\n\t\treturn allowed[tokenOwner][spender];\r\n\r\n\t}\r\n\r\n\t\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint tokens);//transfer方法调用时的通知事件\r\n\r\n\tevent Approval(address indexed tokenOwner, address indexed spender, uint tokens); //approve方法调用时的通知事件\r\n\r\n\t\r\n\r\n\t// ERC20 //////////////\r\n\r\n\t\t\r\n\r\n    \tstring public name = \"CryptoQuantumTradingFund\";\r\n\r\n    \tstring public symbol = \"CQTF\";\r\n\r\n    \tuint8 public decimals = 18;\r\n\r\n\tuint256 private totalCQTFSupply = 100000000000000000000000000;\r\n\r\n\tuint256 private _totalBalance = totalCQTFSupply;\r\n\r\n\t\r\n\r\n\tstruct LockUser{\r\n\r\n\t    uint256 lockedTokens;\r\n\r\n\t    uint lockedTime;\r\n\r\n\t    uint lockedIdx;\r\n\r\n\t}\r\n\r\n\t\r\n\r\n\t\r\n\r\n\taddress public owner = 0x0;\r\n\r\n\t\r\n\r\n    \tmapping (address => uint256) balances;\r\n\r\n    \tmapping(address => mapping (address => uint256)) allowed;\r\n\r\n\r\n\r\n\tmapping(address => LockUser) lockedUsers;\r\n\r\n\t\r\n\r\n\t\r\n\r\n\tuint  constant    private ONE_DAY_TIME_LEN =     86400; //一天的秒数\r\n\r\n\tuint  constant    private ONE_YEAR_TIME_LEN = 31536000; //一年的秒数\r\n\r\n\tuint  constant    private THREE_MONTH_LEN =    7776000; //三个月秒数\r\n\r\n\t// uint  constant    private ONE_DAY_TIME_LEN = 1; //一天的秒数 测试\r\n\r\n\t// uint  constant    private ONE_YEAR_TIME_LEN = 10; //一年的秒数 测试\r\n\r\n\tuint32 private constant MAX_UINT32 = 0xFFFFFFFF;\r\n\r\n\t\r\n\r\n\r\n\r\n\tuint256   public creatorsTotalBalance =    8000000000000000000000000;//创世团队当前锁定额度\r\n\r\n\t\r\n\r\n\r\n\r\n\t\r\n\r\n\tevent SendTo(uint32 indexed _idx, uint8 indexed _type, address _from, address _to, uint256 _value);\r\n\r\n\t\r\n\r\n\tuint32 sendToIdx = 0;\r\n\r\n\t\r\n\r\n\tfunction safeToNextIdx() internal{\r\n\r\n        if (sendToIdx >= MAX_UINT32){\r\n\r\n\t\t\tsendToIdx = 1;\r\n\r\n\t\t}\r\n\r\n        else{\r\n\r\n\t\t\tsendToIdx += 1;\r\n\r\n\t\t}\r\n\r\n    }\r\n\r\n\r\n\r\n    function CryptoQuantumTradingFund() public {\r\n\r\n\t\r\n\r\n\t\towner = msg.sender;\r\n\r\n\t\tbalances[owner] = _totalBalance;\r\n\r\n    }\r\n\r\n\t\r\n\r\n\t\r\n\r\n\r\n\r\n\t\r\n\r\n\t//解锁\r\n\r\n\tfunction TryUnLockBalance(address target) public {\r\n\r\n\t    if(target == 0x0)\r\n\r\n\t    {\r\n\r\n\t        revert();\r\n\r\n\t    }\r\n\r\n\t    LockUser storage user = lockedUsers[target];\r\n\r\n\t    if(user.lockedIdx > 0 && user.lockedTokens > 0)\r\n\r\n\t    {\r\n\r\n\t        if(block.timestamp >= user.lockedTime)\r\n\r\n\t        {\r\n\r\n\t            if(user.lockedIdx == 1)\r\n\r\n\t            {\r\n\r\n\t                user.lockedIdx = 0;\r\n\r\n\t                user.lockedTokens = 0;\r\n\r\n\t            }\r\n\r\n\t            else\r\n\r\n\t            {\r\n\r\n\t                uint256 append = user.lockedTokens/user.lockedIdx;\r\n\r\n\t                user.lockedTokens -= append;\r\n\r\n        \t\t\tuser.lockedIdx--;\r\n\r\n        \t\t\tuser.lockedTime = block.timestamp + ONE_YEAR_TIME_LEN;\r\n\r\n        \t\t\tlockedUsers[target] = user;\r\n\r\n\t            }\r\n\r\n\t        }\r\n\r\n\t    }\r\n\r\n\t\t\r\n\r\n\t}\r\n\r\n\t\r\n\r\n\t\r\n\r\n\r\n\r\n\t\r\n\r\n\t//创始团队\r\n\r\n\tfunction sendCreatorByOwner(address _to, uint256 _value) public {\r\n\r\n\t\tif (msg.sender != owner) \r\n\r\n\t\t{\r\n\r\n\t\t    revert();\r\n\r\n\t\t}\r\n\r\n\t\t\r\n\r\n\t\tif(_to == 0x0){\r\n\r\n\t\t\trevert();\r\n\r\n\t\t}\r\n\r\n\t\t\r\n\r\n\t\tif(_value > creatorsTotalBalance){\r\n\r\n\t\t\trevert();\r\n\r\n\t\t}\r\n\r\n\t\t\r\n\r\n\t\t\r\n\r\n\t\tcreatorsTotalBalance -= _value;\r\n\r\n\t\tbalances[owner] -= _value;\r\n\r\n\t\t_totalBalance -= _value;\r\n\r\n\t\tbalances[_to] += _value;\r\n\r\n\t\tLockUser storage lockUser = lockedUsers[_to];\r\n\r\n\t\tlockUser.lockedTime = block.timestamp + ONE_YEAR_TIME_LEN;\r\n\r\n\t\tlockUser.lockedTokens += _value;\r\n\r\n\t\tlockUser.lockedIdx = 1;\r\n\r\n\r\n\r\n                lockedUsers[_to] = lockUser;\r\n\r\n\t\t\r\n\r\n\t\temit Transfer(owner, _to, _value);\r\n\r\n\t\t\r\n\r\n\t\tsafeToNextIdx();\r\n\r\n\t\temit SendTo(sendToIdx, 4, 0x0, _to, _value);\r\n\r\n\t}\r\n\r\n\r\n\r\n\r\n\r\n       \r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\tfunction changeOwner(address newOwner) public {\r\n\r\n\t\tif (msg.sender != owner) \r\n\r\n\t\t{\r\n\r\n\t\t    revert();\r\n\r\n\t\t}\r\n\r\n\t\telse\r\n\r\n\t\t{\r\n\r\n\t\t\tbalances[newOwner] = balances[owner];\r\n\r\n\t\t\tbalances[owner] = 0x0;\r\n\r\n\t\t\towner = newOwner;\r\n\r\n\t\t\t\r\n\r\n\t\t}\r\n\r\n    }\r\n\r\n\t\r\n\r\n\tfunction destruct() public {\r\n\r\n\t\tif (msg.sender != owner) \r\n\r\n\t\t{\r\n\r\n\t\t    revert();\r\n\r\n\t\t}\r\n\r\n\t\telse\r\n\r\n\t\t{\r\n\r\n\t\t\tselfdestruct(owner);\r\n\r\n\t\t}\r\n\r\n    }\r\n\r\n\t\r\n\r\n\t\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"TryUnLockBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendCreatorByOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creatorsTotalBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_idx\",\"type\":\"uint32\"},{\"indexed\":true,\"name\":\"_type\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"SendTo\",\"type\":\"event\"}]","ContractName":"CryptoQuantumTradingFund","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://b89c62ad9b4cebf820408f53feab5f837e14f2596fef998e482392f3e887838e"}]}