{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2018-02-28\r\n*/\r\n\r\npragma solidity 0.4.18;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract ERC20TokenInterface {\r\n    function totalSupply() constant public returns (uint256 supply);\r\n    function balanceOf(address _owner) constant public returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) constant public returns (uint256 remaining);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ERC20Faucet {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public maxAllowanceInclusive;\r\n    mapping (address => uint256) public claimedTokens;\r\n    ERC20TokenInterface public erc20Contract;\r\n    \r\n    address private mOwner;\r\n    bool private mIsPaused = false;\r\n    bool private mReentrancyLock = false;\r\n    \r\n    event GetTokens(address requestor, uint256 amount);\r\n    event ReclaimTokens(address owner, uint256 tokenAmount);\r\n    event SetPause(address setter, bool newState, bool oldState);\r\n    event SetMaxAllowance(address setter, uint256 newState, uint256 oldState);\r\n    \r\n    modifier notPaused() {\r\n        require(!mIsPaused);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == mOwner);\r\n        _;\r\n    }\r\n    \r\n    modifier nonReentrant() {\r\n        require(!mReentrancyLock);\r\n        mReentrancyLock = true;\r\n        _;\r\n        mReentrancyLock = false;\r\n    }\r\n    \r\n    function ERC20Faucet(ERC20TokenInterface _erc20ContractAddress, uint256 _maxAllowanceInclusive) public {\r\n        mOwner = msg.sender;\r\n        maxAllowanceInclusive = _maxAllowanceInclusive;\r\n        erc20Contract = _erc20ContractAddress;\r\n    }\r\n    \r\n    function getTokens(uint256 amount) notPaused nonReentrant public returns (bool) {\r\n        require(claimedTokens[msg.sender].add(amount) <= maxAllowanceInclusive);\r\n        require(erc20Contract.balanceOf(this) >= amount);\r\n        \r\n        claimedTokens[msg.sender] = claimedTokens[msg.sender].add(amount);\r\n\r\n        if (!erc20Contract.transfer(msg.sender, amount)) {\r\n            claimedTokens[msg.sender] = claimedTokens[msg.sender].sub(amount);\r\n            return false;\r\n        }\r\n        \r\n        GetTokens(msg.sender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function setMaxAllowance(uint256 _maxAllowanceInclusive) onlyOwner nonReentrant public {\r\n        SetMaxAllowance(msg.sender, _maxAllowanceInclusive, maxAllowanceInclusive);\r\n        maxAllowanceInclusive = _maxAllowanceInclusive;\r\n    }\r\n    \r\n    function reclaimTokens() onlyOwner nonReentrant public returns (bool) {\r\n        uint256 tokenBalance = erc20Contract.balanceOf(this);\r\n        if (!erc20Contract.transfer(msg.sender, tokenBalance)) {\r\n            return false;\r\n        }\r\n\r\n        ReclaimTokens(msg.sender, tokenBalance);\r\n        return true;\r\n    }\r\n    \r\n    function setPause(bool isPaused) onlyOwner nonReentrant public {\r\n        SetPause(msg.sender, isPaused, mIsPaused);\r\n        mIsPaused = isPaused;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"reclaimTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxAllowanceInclusive\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxAllowanceInclusive\",\"type\":\"uint256\"}],\"name\":\"setMaxAllowance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc20Contract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_erc20ContractAddress\",\"type\":\"address\"},{\"name\":\"_maxAllowanceInclusive\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GetTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"ReclaimTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"setter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newState\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"oldState\",\"type\":\"bool\"}],\"name\":\"SetPause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"setter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newState\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldState\",\"type\":\"uint256\"}],\"name\":\"SetMaxAllowance\",\"type\":\"event\"}]","ContractName":"ERC20Faucet","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006911270d4bc1915744aedd785d41d44f47245bd000000000000000000000000000000000000000000000000d8d726b7177a80000","Library":"","SwarmSource":"bzzr://ecc9ac9ef2f0dfbb39904d077ba0c285219bf39d9ed337698a82e62d8e4f0387"}]}