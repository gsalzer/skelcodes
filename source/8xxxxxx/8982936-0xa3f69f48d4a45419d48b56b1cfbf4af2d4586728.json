{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.6;\r\n\r\ninterface ENS {\r\n\r\n    // Logged when the owner of a node assigns a new owner to a subnode.\r\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\r\n\r\n    // Logged when the owner of a node transfers ownership to a new account.\r\n    event Transfer(bytes32 indexed node, address owner);\r\n\r\n    // Logged when the resolver for a node changes.\r\n    event NewResolver(bytes32 indexed node, address resolver);\r\n\r\n    // Logged when the TTL of a node changes\r\n    event NewTTL(bytes32 indexed node, uint64 ttl);\r\n\r\n\r\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external;\r\n    function setResolver(bytes32 node, address resolver) external;\r\n    function setOwner(bytes32 node, address owner) external;\r\n    function setTTL(bytes32 node, uint64 ttl) external;\r\n    function owner(bytes32 node) external view returns (address);\r\n    function resolver(bytes32 node) external view returns (address);\r\n    function ttl(bytes32 node) external view returns (uint64);\r\n\r\n}\r\n\r\ninterface Resolver{\r\n    event AddrChanged(bytes32 indexed node, address a);\r\n    event AddressChanged(bytes32 indexed node, uint coinType, bytes newAddress);\r\n    event NameChanged(bytes32 indexed node, string name);\r\n    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\r\n    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\r\n    event TextChanged(bytes32 indexed node, string indexed indexedKey, string key);\r\n    event ContenthashChanged(bytes32 indexed node, bytes hash);\r\n\r\n    function ABI(bytes32 node, uint256 contentTypes) external view returns (uint256, bytes memory);\r\n    function addr(bytes32 node) external view returns (address);\r\n    function contenthash(bytes32 node) external view returns (bytes memory);\r\n    function dnsrr(bytes32 node) external view returns (bytes memory);\r\n    function name(bytes32 node) external view returns (string memory);\r\n    function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y);\r\n    function text(bytes32 node, string calldata key) external view returns (string memory);\r\n    function interfaceImplementer(bytes32 node, bytes4 interfaceID) external view returns (address);\r\n\r\n    function setABI(bytes32 node, uint256 contentType, bytes calldata data) external;\r\n    function setAddr(bytes32 node, address _addr) external;\r\n    function setContenthash(bytes32 node, bytes calldata hash) external;\r\n    function setDnsrr(bytes32 node, bytes calldata data) external;\r\n    function setName(bytes32 node, string calldata _name) external;\r\n    function setPubkey(bytes32 node, bytes32 x, bytes32 y) external;\r\n    function setText(bytes32 node, string calldata key, string calldata value) external;\r\n    function setInterface(bytes32 node, bytes4 interfaceID, address implementer) external;\r\n\r\n    function supportsInterface(bytes4 interfaceID) external pure returns (bool);\r\n}\r\n\r\n\r\ncontract AdExENSManager {\r\n    ENS ens;\r\n    bytes32 rootNode;\r\n\r\n    constructor(ENS ensAddr, bytes32 node) public {\r\n        ens = ensAddr;\r\n        rootNode = node;\r\n    }\r\n\r\n    function register(bytes32 label, address owner) public {\r\n        bytes32 subdomainNode = keccak256(abi.encodePacked(rootNode, label));\r\n        address currentOwner = ens.owner(subdomainNode);\r\n        require(currentOwner == address(0x0) || currentOwner == msg.sender);\r\n        ens.setSubnodeOwner(rootNode, label, owner);\r\n    }\r\n\r\n    // Register a subdomain and point it to an address\r\n    function registerAndSetup(Resolver resolver, bytes32 label, address identity) public {\r\n        bytes32 subdomainNode = keccak256(abi.encodePacked(rootNode, label));\r\n        address currentOwner = ens.owner(subdomainNode);\r\n        require(currentOwner == address(0x0) || currentOwner == msg.sender);\r\n        ens.setSubnodeOwner(rootNode, label, address(this));\r\n\tens.setResolver(subdomainNode, address(resolver));\r\n\tresolver.setAddr(subdomainNode, identity);\r\n\t// Give ownership to the Identity\r\n\tens.setOwner(subdomainNode, identity);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"label\",\"type\":\"bytes32\"},{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"resolver\",\"type\":\"address\"},{\"name\":\"label\",\"type\":\"bytes32\"},{\"name\":\"identity\",\"type\":\"address\"}],\"name\":\"registerAndSetup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"ensAddr\",\"type\":\"address\"},{\"name\":\"node\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"AdExENSManager","CompilerVersion":"v0.5.6+commit.b259423e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000314159265dd8dbb310642f98f50c066173c1259b4e4e818e9467df5c5d1f8c399b11acc73ea24ad69e9c8e1ba6e5784a302c47d4","Library":"","LicenseType":"None","SwarmSource":"bzzr://e4fe4fb37c752640246c534e625f9331b8a0e6f475080df8d41a3425d60cb407"}]}