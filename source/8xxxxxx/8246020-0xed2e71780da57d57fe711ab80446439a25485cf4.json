{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.5.10;\r\n\r\ncontract SimpleMultiSig {\r\n\r\n// EIP712 Precomputed hashes:\r\n// keccak256(\"EIP712Domain(string name,string version,uint256256 chainId,address verifyingContract,bytes32 salt)\")\r\nbytes32 constant public EIP712DOMAINTYPE_HASH = 0xd87cd6ef79d4e2b95e15ce8abf732db51ec771f1ca2edccf22a46c729ac56472;\r\n// keccak256(\"Seba Multisig\");\r\nbytes32 constant public NAME_HASH = 0x32f3de0d7fc1cdd909bb4d992a94061e800669c611b9d07f137df1f4bb85f097;\r\n// keccak256(\"1\")\r\nbytes32 constant public VERSION_HASH = 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6;\r\n// keccak256(\"MultiSigTransaction(address destination,uint256 value,bytes data,uint256 nonce,address executor,uint256 gasLimit)\")\r\nbytes32 constant public TXTYPE_HASH = 0x3ee892349ae4bbe61dce18f95115b5dc02daf49204cc602458cd4c1f540d56d7;\r\n\r\nbytes32 constant public SALT = 0x72dc1dc597006ea524d75bd3377c4663827629e52e27fd2169cca6f90f6d1ef9;\r\n\r\n  uint256 public nonce;                 // (only) mutable state\r\n  uint256 public threshold;             // immutable state\r\n  mapping (address => bool) public isOwner; // immutable state\r\n  address[] public ownersArr;        // immutable state\r\n\r\n  bytes32 public DOMAIN_SEPARATOR;          // hash for EIP712, computed from contract address\r\n  \r\n  // Note that owners_ must be strictly increasing, in order to prevent duplicates\r\n  constructor(uint256 threshold_, address[] memory owners_, uint256 chainId) public {\r\n    require(owners_.length <= 10 && threshold_ <= owners_.length && threshold_ > 0);\r\n\r\n    address lastAdd = address(0);\r\n    for (uint256 i = 0; i < owners_.length; i++) {\r\n      require(owners_[i] > lastAdd);\r\n      isOwner[owners_[i]] = true;\r\n      lastAdd = owners_[i];\r\n    }\r\n    ownersArr = owners_;\r\n    threshold = threshold_;\r\n\r\n    DOMAIN_SEPARATOR = keccak256(abi.encode(EIP712DOMAINTYPE_HASH,\r\n                                            NAME_HASH,\r\n                                            VERSION_HASH,\r\n                                            chainId,\r\n                                            this,\r\n                                            SALT));\r\n  }\r\n\r\n\r\n  // Note that address recovered from signatures must be strictly increasing, in order to prevent duplicates\r\n  function execute(uint8[] memory sigV, bytes32[] memory sigR, bytes32[] memory sigS, address destination, uint256 value, bytes memory data, address executor, uint256 gasLimit) public {\r\n    require(sigR.length == threshold);\r\n    require(sigR.length == sigS.length && sigR.length == sigV.length);\r\n    require(executor == msg.sender || executor == address(0));\r\n\r\n    // EIP712 scheme: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-712.md\r\n    bytes32 txInputHash = keccak256(abi.encode(TXTYPE_HASH, destination, value, keccak256(data), nonce, executor, gasLimit));\r\n    bytes32 totalHash = keccak256(abi.encodePacked(\"\\x19\\x01\", DOMAIN_SEPARATOR, txInputHash));\r\n    address lastAdd = address(0); // cannot have address(0) as an owner\r\n    for (uint256 i = 0; i < threshold; i++) {\r\n      address recovered = ecrecover(totalHash, sigV[i], sigR[i], sigS[i]);\r\n      require(recovered > lastAdd && isOwner[recovered]);\r\n      lastAdd = recovered;\r\n    }\r\n\r\n    // If we make it here all signatures are accounted for.\r\n    // The address.call() syntax is no longer recommended, see:\r\n    // https://github.com/ethereum/solidity/issues/2884\r\n    nonce = nonce + 1;\r\n    bool success = false;\r\n    assembly { success := call(gasLimit, destination, value, add(data, 0x20), mload(data), 0, 0) }\r\n    require(success);\r\n    emit Execution(msg.sender, destination, value, data);\r\n  }\r\n\r\n  function () external payable {\r\n    emit Deposit(msg.sender, msg.value, msg.data);\r\n  }\r\n\r\n  event Deposit(address sender, uint256 amount, bytes data);\r\n\tevent Execution(address executor, address destination, uint256 amount, bytes data);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"NAME_HASH\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TXTYPE_HASH\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EIP712DOMAINTYPE_HASH\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"threshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION_HASH\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sigV\",\"type\":\"uint8[]\"},{\"name\":\"sigR\",\"type\":\"bytes32[]\"},{\"name\":\"sigS\",\"type\":\"bytes32[]\"},{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"},{\"name\":\"executor\",\"type\":\"address\"},{\"name\":\"gasLimit\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownersArr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SALT\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"threshold_\",\"type\":\"uint256\"},{\"name\":\"owners_\",\"type\":\"address[]\"},{\"name\":\"chainId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Execution\",\"type\":\"event\"}]","ContractName":"SimpleMultiSig","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000003000000000000000000000000354bf419e0b910cb0e79e55c097bf9d41b0b88d40000000000000000000000004c9950b2cdf6c462f305a8758a7582d92afbfdf400000000000000000000000091e6adeb41f1dcc5330ba19c34d4a632cddc45c1","Library":"","SwarmSource":"bzzr://096b5da919aa77c424ceaed70d4b3a128809fd0c90a2bbf31a4413a091805720"}]}