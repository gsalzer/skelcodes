{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.6;\r\n\r\ninterface ILinkdropERC20 {\r\n\r\n    function verifyLinkdropSignerSignature\r\n    (\r\n        uint _weiAmount,\r\n        address _tokenAddress,\r\n        uint _tokenAmount,\r\n        uint _expiration,\r\n        address _linkId,\r\n        bytes calldata _signature\r\n    )\r\n    external view returns (bool);\r\n\r\n    function verifyReceiverSignature\r\n    (\r\n        address _linkId,\r\n\t    address _receiver,\r\n\t\tbytes calldata _signature\r\n    )\r\n    external view returns (bool);\r\n\r\n    function checkClaimParams\r\n    (\r\n        uint _weiAmount,\r\n        address _tokenAddress,\r\n        uint _tokenAmount,\r\n        uint _expiration,\r\n        address _linkId,\r\n        bytes calldata _linkdropSignerSignature,\r\n        address _receiver,\r\n        bytes calldata _receiverSignature,\r\n        uint _fee\r\n    )\r\n    external view returns (bool);\r\n\r\n    function claim\r\n    (\r\n        uint _weiAmount,\r\n        address _tokenAddress,\r\n        uint _tokenAmount,\r\n        uint _expiration,\r\n        address _linkId,\r\n        bytes calldata _linkdropSignerSignature,\r\n        address payable _receiver,\r\n        bytes calldata _receiverSignature,\r\n        address payable _feeReceiver,\r\n        uint _fee\r\n    )\r\n    external returns (bool);\r\n\r\n}\r\n\r\ninterface ILinkdropFactoryERC20 {\r\n\r\n    function checkClaimParams\r\n    (\r\n        uint _weiAmount,\r\n        address _tokenAddress,\r\n        uint _tokenAmount,\r\n        uint _expiration,\r\n        address _linkId,\r\n        address payable _linkdropMaster,\r\n        uint _campaignId,\r\n        bytes calldata _linkdropSignerSignature,\r\n        address _receiver,\r\n        bytes calldata _receiverSignature\r\n    )\r\n    external view\r\n    returns (bool);\r\n\r\n    function claim\r\n    (\r\n        uint _weiAmount,\r\n        address _tokenAddress,\r\n        uint _tokenAmount,\r\n        uint _expiration,\r\n        address _linkId,\r\n        address payable _linkdropMaster,\r\n        uint _campaignId,\r\n        bytes calldata _linkdropSignerSignature,\r\n        address payable _receiver,\r\n        bytes calldata _receiverSignature\r\n    )\r\n    external\r\n    returns (bool);\r\n\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ninterface ILinkdropERC721 {\r\n\r\n    function verifyLinkdropSignerSignatureERC721\r\n    (\r\n        uint _weiAmount,\r\n        address _nftAddress,\r\n        uint _tokenId,\r\n        uint _expiration,\r\n        address _linkId,\r\n        bytes calldata _signature\r\n    )\r\n    external view returns (bool);\r\n\r\n    function verifyReceiverSignatureERC721\r\n    (\r\n        address _linkId,\r\n\t    address _receiver,\r\n\t\tbytes calldata _signature\r\n    )\r\n    external view returns (bool);\r\n\r\n    function checkClaimParamsERC721\r\n    (\r\n        uint _weiAmount,\r\n        address _nftAddress,\r\n        uint _tokenId,\r\n        uint _expiration,\r\n        address _linkId,\r\n        bytes calldata _linkdropSignerSignature,\r\n        address _receiver,\r\n        bytes calldata _receiverSignature,\r\n        uint _fee\r\n    )\r\n    external view returns (bool);\r\n\r\n    function claimERC721\r\n    (\r\n        uint _weiAmount,\r\n        address _nftAddress,\r\n        uint _tokenId,\r\n        uint _expiration,\r\n        address _linkId,\r\n        bytes calldata _linkdropSignerSignature,\r\n        address payable _receiver,\r\n        bytes calldata _receiverSignature,\r\n        address payable _feeReceiver,\r\n        uint _fee\r\n    )\r\n    external returns (bool);\r\n\r\n}\r\n\r\n\r\ninterface ILinkdropFactoryERC721 {\r\n\r\n    function checkClaimParamsERC721\r\n    (\r\n        uint _weiAmount,\r\n        address _nftAddress,\r\n        uint _tokenId,\r\n        uint _expiration,\r\n        address _linkId,\r\n        address payable _linkdropMaster,\r\n        uint _campaignId,\r\n        bytes calldata _linkdropSignerSignature,\r\n        address _receiver,\r\n        bytes calldata _receiverSignature\r\n    )\r\n    external view\r\n    returns (bool);\r\n\r\n    function claimERC721\r\n    (\r\n        uint _weiAmount,\r\n        address _nftAddress,\r\n        uint _tokenId,\r\n        uint _expiration,\r\n        address _linkId,\r\n        address payable _linkdropMaster,\r\n        uint _campaignId,\r\n        bytes calldata _linkdropSignerSignature,\r\n        address payable _receiver,\r\n        bytes calldata _receiverSignature\r\n    )\r\n    external\r\n    returns (bool);\r\n\r\n}\r\n\r\ninterface ILinkdropCommon {\r\n\r\n    function initialize\r\n    (\r\n        address _owner,\r\n        address payable _linkdropMaster,\r\n        uint _version,\r\n        uint _chainId\r\n    )\r\n    external returns (bool);\r\n\r\n    function isClaimedLink(address _linkId) external view returns (bool);\r\n    function isCanceledLink(address _linkId) external view returns (bool);\r\n    function paused() external view returns (bool);\r\n    function cancel(address _linkId) external  returns (bool);\r\n    function withdraw() external returns (bool);\r\n    function pause() external returns (bool);\r\n    function unpause() external returns (bool);\r\n    function addSigner(address _linkdropSigner) external payable returns (bool);\r\n    function removeSigner(address _linkdropSigner) external returns (bool);\r\n    function destroy() external;\r\n    function getMasterCopyVersion() external view returns (uint);\r\n    function () external payable;\r\n\r\n}\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * (.note) This call _does not revert_ if the signature is invalid, or\r\n     * if the signer is otherwise unable to be retrieved. In those scenarios,\r\n     * the zero address is returned.\r\n     *\r\n     * (.warning) `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise)\r\n     * be too long), and then calling `toEthSignedMessageHash` on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        // Check the signature length\r\n        if (signature.length != 65) {\r\n            return (address(0));\r\n        }\r\n\r\n        // Divide the signature in r, s and v variables\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        // ecrecover takes the signature parameters, and the only way to get them\r\n        // currently is to use assembly.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := byte(0, mload(add(signature, 0x60)))\r\n        }\r\n\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            return address(0);\r\n        }\r\n\r\n        if (v != 27 && v != 28) {\r\n            return address(0);\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        return ecrecover(hash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * replicates the behavior of the\r\n     * [`eth_sign`](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign)\r\n     * JSON-RPC method.\r\n     *\r\n     * See `recover`.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * [EIP](https://eips.ethereum.org/EIPS/eip-165).\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others (`ERC165Checker`).\r\n *\r\n * For an implementation, see `ERC165`.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ncontract IERC721 is IERC165 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of NFTs in `owner`'s account.\r\n     */\r\n    function balanceOf(address owner) public view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the NFT specified by `tokenId`.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view returns (address owner);\r\n\r\n    /**\r\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * \r\n     *\r\n     * Requirements:\r\n     * - `from`, `to` cannot be zero.\r\n     * - `tokenId` must be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this\r\n     * NFT by either `approve` or `setApproveForAll`.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\r\n    /**\r\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Requirements:\r\n     * - If the caller is not `from`, it must be approved to move this NFT by\r\n     * either `approve` or `setApproveForAll`.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) public;\r\n    function approve(address to, uint256 tokenId) public;\r\n    function getApproved(uint256 tokenId) public view returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) public;\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\r\n\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\r\n}\r\n\r\n\r\ncontract LinkdropFactoryStorage is Ownable {\r\n\r\n    // Current version of mastercopy contract\r\n    uint public masterCopyVersion;\r\n\r\n    // Contract bytecode to be installed when deploying proxy\r\n    bytes internal _bytecode;\r\n\r\n    // Bootstrap initcode to fetch the actual contract bytecode. Used to generate repeatable contract addresses\r\n    bytes internal _initcode;\r\n\r\n    // Network id\r\n    uint public chainId;\r\n\r\n    // Maps hash(sender address, campaign id) to its corresponding proxy address\r\n    mapping (bytes32 => address) public deployed;\r\n\r\n    // Events\r\n    event Deployed(address payable indexed owner, uint campaignId, address payable proxy, bytes32 salt);\r\n    event Destroyed(address payable owner, address payable proxy);\r\n    event SetMasterCopy(address masterCopy, uint version);\r\n\r\n}\r\n\r\ncontract FeeManager is Ownable {\r\n\r\n    event FeeChanged(address proxy, uint fee);\r\n\r\n    mapping (address => uint) fees;\r\n\r\n    uint public standardFee = 0.002 ether;\r\n\r\n    function setFee(address _proxy, uint _fee) external onlyOwner returns (bool) {\r\n        _setFee(_proxy, _fee);\r\n        return true;\r\n    }\r\n\r\n    function _setFee(address _proxy, uint _fee) internal {\r\n        if (fees[_proxy] != 0) {\r\n            require(_fee < fees[_proxy], \"CANNOT_INCREASE_FEE\");\r\n        }\r\n        fees[_proxy] = _fee;\r\n        emit FeeChanged(_proxy, _fee);\r\n    }\r\n\r\n    function setStandardFee(uint _fee) external onlyOwner {\r\n        standardFee = _fee;\r\n    }\r\n\r\n}\r\n\r\ncontract RelayerManager is Ownable {\r\n\r\n    mapping (address => bool) public isRelayer;\r\n\r\n    event RelayerAdded(address indexed relayer);\r\n\r\n    event RelayerRemoved(address indexed relayer);\r\n\r\n    function addRelayer(address _relayer) external onlyOwner returns (bool) {\r\n        require(_relayer != address(0) && !isRelayer[_relayer], \"INVALID_RELAYER_ADDRESS\");\r\n        isRelayer[_relayer] = true;\r\n        emit RelayerAdded(_relayer);\r\n        return true;\r\n    }\r\n\r\n    function removeRelayer(address _relayer) external onlyOwner returns (bool) {\r\n        require(isRelayer[_relayer], \"INVALID_RELAYER_ADDRESS\");\r\n        isRelayer[_relayer] = false;\r\n        emit RelayerRemoved(_relayer);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract LinkdropFactoryCommon is LinkdropFactoryStorage, FeeManager, RelayerManager {\r\n    using SafeMath for uint;\r\n\r\n    /**\r\n    * @dev Indicates whether a proxy contract for linkdrop master is deployed or not\r\n    * @param _linkdropMaster Address of linkdrop master\r\n    * @param _campaignId Campaign id\r\n    * @return True if deployed\r\n    */\r\n    function isDeployed(address _linkdropMaster, uint _campaignId) public view returns (bool) {\r\n        return (deployed[salt(_linkdropMaster, _campaignId)] != address(0));\r\n    }\r\n\r\n    /**\r\n    * @dev Indicates whether a link is claimed or not\r\n    * @param _linkdropMaster Address of lindkrop master\r\n    * @param _campaignId Campaign id\r\n    * @param _linkId Address corresponding to link key\r\n    * @return True if claimed\r\n    */\r\n    function isClaimedLink(address payable _linkdropMaster, uint _campaignId, address _linkId) public view returns (bool) {\r\n\r\n        if (!isDeployed(_linkdropMaster, _campaignId)) {\r\n            return false;\r\n        }\r\n        else {\r\n            address payable proxy = address(uint160(deployed[salt(_linkdropMaster, _campaignId)]));\r\n            return ILinkdropCommon(proxy).isClaimedLink(_linkId);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev Function to deploy a proxy contract for msg.sender\r\n    * @param _campaignId Campaign id\r\n    * @return Proxy contract address\r\n    */\r\n    function deployProxy(uint _campaignId)\r\n    public\r\n    payable\r\n    returns (address payable proxy)\r\n    {\r\n        proxy = _deployProxy(msg.sender, _campaignId);\r\n    }\r\n\r\n    /**\r\n    * @dev Function to deploy a proxy contract for msg.sender and add a new signing key\r\n    * @param _campaignId Campaign id\r\n    * @param _signer Address corresponding to signing key\r\n    * @return Proxy contract address\r\n    */\r\n    function deployProxyWithSigner(uint _campaignId, address _signer)\r\n    public\r\n    payable\r\n    returns (address payable proxy)\r\n    {\r\n        proxy = deployProxy(_campaignId);\r\n        ILinkdropCommon(proxy).addSigner(_signer);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to deploy a proxy contract for linkdrop master\r\n    * @param _linkdropMaster Address of linkdrop master\r\n    * @param _campaignId Campaign id\r\n    * @return Proxy contract address\r\n    */\r\n    function _deployProxy(address payable _linkdropMaster, uint _campaignId)\r\n    internal\r\n    returns (address payable proxy)\r\n    {\r\n\r\n        require(!isDeployed(_linkdropMaster, _campaignId), \"LINKDROP_PROXY_CONTRACT_ALREADY_DEPLOYED\");\r\n        require(_linkdropMaster != address(0), \"INVALID_LINKDROP_MASTER_ADDRESS\");\r\n\r\n        bytes32 salt = salt(_linkdropMaster, _campaignId);\r\n        bytes memory initcode = getInitcode();\r\n\r\n        assembly {\r\n            proxy := create2(0, add(initcode, 0x20), mload(initcode), salt)\r\n            if iszero(extcodesize(proxy)) { revert(0, 0) }\r\n        }\r\n\r\n        deployed[salt] = proxy;\r\n\r\n        // Initialize owner address, linkdrop master address master copy version in proxy contract\r\n        require\r\n        (\r\n            ILinkdropCommon(proxy).initialize\r\n            (\r\n                address(this), // Owner address\r\n                _linkdropMaster, // Linkdrop master address\r\n                masterCopyVersion,\r\n                chainId\r\n            ),\r\n            \"INITIALIZATION_FAILED\"\r\n        );\r\n\r\n        // Send funds attached to proxy contract\r\n        proxy.transfer(msg.value);\r\n\r\n        // Set standard fee for the proxy\r\n        _setFee(proxy, standardFee);\r\n\r\n        emit Deployed(_linkdropMaster, _campaignId, proxy, salt);\r\n        return proxy;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to destroy proxy contract, called by proxy owner\r\n    * @param _campaignId Campaign id\r\n    * @return True if destroyed successfully\r\n    */\r\n    function destroyProxy(uint _campaignId)\r\n    public\r\n    returns (bool)\r\n    {\r\n        require(isDeployed(msg.sender, _campaignId), \"LINKDROP_PROXY_CONTRACT_NOT_DEPLOYED\");\r\n        address payable proxy = address(uint160(deployed[salt(msg.sender, _campaignId)]));\r\n        ILinkdropCommon(proxy).destroy();\r\n        delete deployed[salt(msg.sender, _campaignId)];\r\n        delete fees[proxy];\r\n        emit Destroyed(msg.sender, proxy);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to get bootstrap initcode for generating repeatable contract addresses\r\n    * @return Static bootstrap initcode\r\n    */\r\n    function getInitcode()\r\n    public view\r\n    returns (bytes memory)\r\n    {\r\n        return _initcode;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to fetch the actual contract bytecode to install. Called by proxy when executing initcode\r\n    * @return Contract bytecode to install\r\n    */\r\n    function getBytecode()\r\n    public view\r\n    returns (bytes memory)\r\n    {\r\n        return _bytecode;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to set new master copy and update contract bytecode to install. Can only be called by factory owner\r\n    * @param _masterCopy Address of linkdrop mastercopy contract to calculate bytecode from\r\n    * @return True if updated successfully\r\n    */\r\n    function setMasterCopy(address payable _masterCopy)\r\n    public onlyOwner\r\n    returns (bool)\r\n    {\r\n        require(_masterCopy != address(0), \"INVALID_MASTER_COPY_ADDRESS\");\r\n        masterCopyVersion = masterCopyVersion.add(1);\r\n\r\n        require\r\n        (\r\n            ILinkdropCommon(_masterCopy).initialize\r\n            (\r\n                address(0), // Owner address\r\n                address(0), // Linkdrop master address\r\n                masterCopyVersion,\r\n                chainId\r\n            ),\r\n            \"INITIALIZATION_FAILED\"\r\n        );\r\n\r\n        bytes memory bytecode = abi.encodePacked\r\n        (\r\n            hex\"363d3d373d3d3d363d73\",\r\n            _masterCopy,\r\n            hex\"5af43d82803e903d91602b57fd5bf3\"\r\n        );\r\n\r\n        _bytecode = bytecode;\r\n\r\n        emit SetMasterCopy(_masterCopy, masterCopyVersion);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to fetch the master copy version installed (or to be installed) to proxy\r\n    * @param _linkdropMaster Address of linkdrop master\r\n    * @param _campaignId Campaign id\r\n    * @return Master copy version\r\n    */\r\n    function getProxyMasterCopyVersion(address _linkdropMaster, uint _campaignId) external view returns (uint) {\r\n\r\n        if (!isDeployed(_linkdropMaster, _campaignId)) {\r\n            return masterCopyVersion;\r\n        }\r\n        else {\r\n            address payable proxy = address(uint160(deployed[salt(_linkdropMaster, _campaignId)]));\r\n            return ILinkdropCommon(proxy).getMasterCopyVersion();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Function to hash `_linkdropMaster` and `_campaignId` params. Used as salt when deploying with create2\r\n     * @param _linkdropMaster Address of linkdrop master\r\n     * @param _campaignId Campaign id\r\n     * @return Hash of passed arguments\r\n     */\r\n    function salt(address _linkdropMaster, uint _campaignId) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(_linkdropMaster, _campaignId));\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\ncontract LinkdropFactoryERC20 is ILinkdropFactoryERC20, LinkdropFactoryCommon {\r\n\r\n    /**\r\n    * @dev Function to verify claim params, make sure the link is not claimed or canceled and proxy has sufficient balance\r\n    * @param _weiAmount Amount of wei to be claimed\r\n    * @param _tokenAddress Token address\r\n    * @param _tokenAmount Amount of tokens to be claimed (in atomic value)\r\n    * @param _expiration Unix timestamp of link expiration time\r\n    * @param _linkId Address corresponding to link key\r\n    * @param _linkdropMaster Address corresponding to linkdrop master key\r\n    * @param _campaignId Campaign id\r\n    * @param _linkdropSignerSignature ECDSA signature of linkdrop signer\r\n    * @param _receiver Address of linkdrop receiver\r\n    * @param _receiverSignature ECDSA signature of linkdrop receiver\r\n    * @return True if success\r\n    */\r\n    function checkClaimParams\r\n    (\r\n        uint _weiAmount,\r\n        address _tokenAddress,\r\n        uint _tokenAmount,\r\n        uint _expiration,\r\n        address _linkId,\r\n        address payable _linkdropMaster,\r\n        uint _campaignId,\r\n        bytes memory _linkdropSignerSignature,\r\n        address _receiver,\r\n        bytes memory _receiverSignature\r\n    )\r\n    public view\r\n    returns (bool)\r\n    {\r\n        // Make sure proxy contract is deployed\r\n        require(isDeployed(_linkdropMaster, _campaignId), \"LINKDROP_PROXY_CONTRACT_NOT_DEPLOYED\");\r\n\r\n        uint fee = fees[deployed[salt(_linkdropMaster, _campaignId)]];\r\n\r\n        return ILinkdropERC20(deployed[salt(_linkdropMaster, _campaignId)]).checkClaimParams\r\n        (\r\n            _weiAmount,\r\n            _tokenAddress,\r\n            _tokenAmount,\r\n            _expiration,\r\n            _linkId,\r\n            _linkdropSignerSignature,\r\n            _receiver,\r\n            _receiverSignature,\r\n            fee\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev Function to claim ETH and/or ERC20 tokens\r\n    * @param _weiAmount Amount of wei to be claimed\r\n    * @param _tokenAddress Token address\r\n    * @param _tokenAmount Amount of tokens to be claimed (in atomic value)\r\n    * @param _expiration Unix timestamp of link expiration time\r\n    * @param _linkId Address corresponding to link key\r\n    * @param _linkdropMaster Address corresponding to linkdrop master key\r\n    * @param _campaignId Campaign id\r\n    * @param _linkdropSignerSignature ECDSA signature of linkdrop signer\r\n    * @param _receiver Address of linkdrop receiver\r\n    * @param _receiverSignature ECDSA signature of linkdrop receiver\r\n    * @return True if success\r\n    */\r\n    function claim\r\n    (\r\n        uint _weiAmount,\r\n        address _tokenAddress,\r\n        uint _tokenAmount,\r\n        uint _expiration,\r\n        address _linkId,\r\n        address payable _linkdropMaster,\r\n        uint _campaignId,\r\n        bytes calldata _linkdropSignerSignature,\r\n        address payable _receiver,\r\n        bytes calldata _receiverSignature\r\n    )\r\n    external\r\n    returns (bool)\r\n    {\r\n        // Make sure proxy contract is deployed\r\n        require(isDeployed(_linkdropMaster, _campaignId), \"LINKDROP_PROXY_CONTRACT_NOT_DEPLOYED\");\r\n\r\n        // Make sure only whitelisted relayer calls this function\r\n        require(isRelayer[msg.sender], \"ONLY_RELAYER\");\r\n\r\n        uint fee = fees[deployed[salt(_linkdropMaster, _campaignId)]];\r\n\r\n        // Call claim function in the context of proxy contract\r\n        ILinkdropERC20(deployed[salt(_linkdropMaster, _campaignId)]).claim\r\n        (\r\n            _weiAmount,\r\n            _tokenAddress,\r\n            _tokenAmount,\r\n            _expiration,\r\n            _linkId,\r\n            _linkdropSignerSignature,\r\n            _receiver,\r\n            _receiverSignature,\r\n            msg.sender, // Fee receiver\r\n            fee\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\ncontract LinkdropFactoryERC721 is ILinkdropFactoryERC721, LinkdropFactoryCommon {\r\n\r\n    /**\r\n    * @dev Function to verify claim params, make sure the link is not claimed or canceled and proxy is allowed to spend token\r\n    * @param _weiAmount Amount of wei to be claimed\r\n    * @param _nftAddress NFT address\r\n    * @param _tokenId Token id to be claimed\r\n    * @param _expiration Unix timestamp of link expiration time\r\n    * @param _linkId Address corresponding to link key\r\n    * @param _linkdropMaster Address corresponding to linkdrop master key\r\n    * @param _campaignId Campaign id\r\n    * @param _linkdropSignerSignature ECDSA signature of linkdrop signer\r\n    * @param _receiver Address of linkdrop receiver\r\n    * @param _receiverSignature ECDSA signature of linkdrop receiver\r\n    * @return True if success\r\n    */\r\n    function checkClaimParamsERC721\r\n    (\r\n        uint _weiAmount,\r\n        address _nftAddress,\r\n        uint _tokenId,\r\n        uint _expiration,\r\n        address _linkId,\r\n        address payable _linkdropMaster,\r\n        uint _campaignId,\r\n        bytes memory _linkdropSignerSignature,\r\n        address _receiver,\r\n        bytes memory _receiverSignature\r\n    )\r\n    public view\r\n    returns (bool)\r\n    {\r\n        // Make sure proxy contract is deployed\r\n        require(isDeployed(_linkdropMaster, _campaignId), \"LINKDROP_PROXY_CONTRACT_NOT_DEPLOYED\");\r\n\r\n        uint fee = fees[deployed[salt(_linkdropMaster, _campaignId)]];\r\n\r\n        return ILinkdropERC721(deployed[salt(_linkdropMaster, _campaignId)]).checkClaimParamsERC721\r\n        (\r\n            _weiAmount,\r\n            _nftAddress,\r\n            _tokenId,\r\n            _expiration,\r\n            _linkId,\r\n            _linkdropSignerSignature,\r\n            _receiver,\r\n            _receiverSignature,\r\n            fee\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev Function to claim ETH and/or ERC721 token\r\n    * @param _weiAmount Amount of wei to be claimed\r\n    * @param _nftAddress NFT address\r\n    * @param _tokenId Token id to be claimed\r\n    * @param _expiration Unix timestamp of link expiration time\r\n    * @param _linkId Address corresponding to link key\r\n    * @param _linkdropMaster Address corresponding to linkdrop master key\r\n    * @param _campaignId Campaign id\r\n    * @param _linkdropSignerSignature ECDSA signature of linkdrop signer\r\n    * @param _receiver Address of linkdrop receiver\r\n    * @param _receiverSignature ECDSA signature of linkdrop receiver\r\n    * @return True if success\r\n    */\r\n    function claimERC721\r\n    (\r\n        uint _weiAmount,\r\n        address _nftAddress,\r\n        uint _tokenId,\r\n        uint _expiration,\r\n        address _linkId,\r\n        address payable _linkdropMaster,\r\n        uint _campaignId,\r\n        bytes calldata _linkdropSignerSignature,\r\n        address payable _receiver,\r\n        bytes calldata _receiverSignature\r\n    )\r\n    external\r\n    returns (bool)\r\n    {\r\n        // Make sure proxy contract is deployed\r\n        require(isDeployed(_linkdropMaster, _campaignId), \"LINKDROP_PROXY_CONTRACT_NOT_DEPLOYED\");\r\n\r\n        // Make sure only whitelisted relayer calls this function\r\n        require(isRelayer[msg.sender], \"ONLY_RELAYER\");\r\n\r\n        uint fee = fees[deployed[salt(_linkdropMaster, _campaignId)]];\r\n\r\n        // Call claim function in the context of proxy contract\r\n        ILinkdropERC721(deployed[salt(_linkdropMaster, _campaignId)]).claimERC721\r\n        (\r\n            _weiAmount,\r\n            _nftAddress,\r\n            _tokenId,\r\n            _expiration,\r\n            _linkId,\r\n            _linkdropSignerSignature,\r\n            _receiver,\r\n            _receiverSignature,\r\n            msg.sender, // Fee receiver\r\n            fee\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract LinkdropFactory is LinkdropFactoryERC20, LinkdropFactoryERC721 {\r\n\r\n    /**\r\n    * @dev Constructor that sets bootstap initcode, factory owner, chainId and master copy\r\n    * @param _masterCopy Linkdrop mastercopy contract address to calculate bytecode from\r\n    * @param _chainId Chain id\r\n    */\r\n    constructor(address payable _masterCopy, uint _chainId) public {\r\n        _initcode = (hex\"6352c7420d6000526103ff60206004601c335afa6040516060f3\");\r\n        chainId = _chainId;\r\n        setMasterCopy(_masterCopy);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"masterCopyVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_campaignId\",\"type\":\"uint256\"}],\"name\":\"deployProxy\",\"outputs\":[{\"name\":\"proxy\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitcode\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBytecode\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRelayer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_relayer\",\"type\":\"address\"}],\"name\":\"removeRelayer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"deployed\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_campaignId\",\"type\":\"uint256\"},{\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"deployProxyWithSigner\",\"outputs\":[{\"name\":\"proxy\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_campaignId\",\"type\":\"uint256\"}],\"name\":\"destroyProxy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_linkdropMaster\",\"type\":\"address\"},{\"name\":\"_campaignId\",\"type\":\"uint256\"}],\"name\":\"getProxyMasterCopyVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_weiAmount\",\"type\":\"uint256\"},{\"name\":\"_nftAddress\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_expiration\",\"type\":\"uint256\"},{\"name\":\"_linkId\",\"type\":\"address\"},{\"name\":\"_linkdropMaster\",\"type\":\"address\"},{\"name\":\"_campaignId\",\"type\":\"uint256\"},{\"name\":\"_linkdropSignerSignature\",\"type\":\"bytes\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_receiverSignature\",\"type\":\"bytes\"}],\"name\":\"claimERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setStandardFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_linkdropMaster\",\"type\":\"address\"},{\"name\":\"_campaignId\",\"type\":\"uint256\"}],\"name\":\"salt\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_weiAmount\",\"type\":\"uint256\"},{\"name\":\"_nftAddress\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_expiration\",\"type\":\"uint256\"},{\"name\":\"_linkId\",\"type\":\"address\"},{\"name\":\"_linkdropMaster\",\"type\":\"address\"},{\"name\":\"_campaignId\",\"type\":\"uint256\"},{\"name\":\"_linkdropSignerSignature\",\"type\":\"bytes\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_receiverSignature\",\"type\":\"bytes\"}],\"name\":\"checkClaimParamsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_linkdropMaster\",\"type\":\"address\"},{\"name\":\"_campaignId\",\"type\":\"uint256\"},{\"name\":\"_linkId\",\"type\":\"address\"}],\"name\":\"isClaimedLink\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_weiAmount\",\"type\":\"uint256\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"name\":\"_expiration\",\"type\":\"uint256\"},{\"name\":\"_linkId\",\"type\":\"address\"},{\"name\":\"_linkdropMaster\",\"type\":\"address\"},{\"name\":\"_campaignId\",\"type\":\"uint256\"},{\"name\":\"_linkdropSignerSignature\",\"type\":\"bytes\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_receiverSignature\",\"type\":\"bytes\"}],\"name\":\"checkClaimParams\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_masterCopy\",\"type\":\"address\"}],\"name\":\"setMasterCopy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_relayer\",\"type\":\"address\"}],\"name\":\"addRelayer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_weiAmount\",\"type\":\"uint256\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"name\":\"_expiration\",\"type\":\"uint256\"},{\"name\":\"_linkId\",\"type\":\"address\"},{\"name\":\"_linkdropMaster\",\"type\":\"address\"},{\"name\":\"_campaignId\",\"type\":\"uint256\"},{\"name\":\"_linkdropSignerSignature\",\"type\":\"bytes\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_receiverSignature\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proxy\",\"type\":\"address\"},{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_linkdropMaster\",\"type\":\"address\"},{\"name\":\"_campaignId\",\"type\":\"uint256\"}],\"name\":\"isDeployed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standardFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_masterCopy\",\"type\":\"address\"},{\"name\":\"_chainId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"RelayerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"RelayerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"FeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"campaignId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"Deployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"Destroyed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"masterCopy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"SetMasterCopy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"LinkdropFactory","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000006a86aa5d394741b4464c785bd7bf3d4c4bd87a6e0000000000000000000000000000000000000000000000000000000000000001","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://91722cf1690e5b0034beea402db30b7a29878c74a9e257a77775a88b87a1dd9b"}]}