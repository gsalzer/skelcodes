{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\n\n\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    \n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    \n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    \n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    \n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    \n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    \n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    \n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    \n    function add(Role storage role, address account) internal {\n        require(!has(role, account), \"Roles: account already has role\");\n        role.bearer[account] = true;\n    }\n\n    \n    function remove(Role storage role, address account) internal {\n        require(has(role, account), \"Roles: account does not have role\");\n        role.bearer[account] = false;\n    }\n\n    \n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0), \"Roles: account is the zero address\");\n        return role.bearer[account];\n    }\n}\n\ncontract DelegateRole {\n    using Roles for Roles.Role;\n\n    event DelegateAdded(address indexed account);\n    event DelegateRemoved(address indexed account);\n\n    Roles.Role private _delegates;\n\n    function _addDelegate(address account) internal {\n        _delegates.add(account);\n        emit DelegateAdded(account);\n    }\n\n    function _removeDelegate(address account) internal {\n        _delegates.remove(account);\n        emit DelegateRemoved(account);\n    }\n\n    function _hasDelegate(address account) internal view returns (bool) {\n        return _delegates.has(account);\n    }\n}\n\ncontract AuthorityRole {\n    using Roles for Roles.Role;\n\n    event AuthorityAdded(address indexed account);\n    event AuthorityRemoved(address indexed account);\n\n    Roles.Role private _authorities;\n\n    function _addAuthority(address account) internal {\n        _authorities.add(account);\n        emit AuthorityAdded(account);\n    }\n\n    function _removeAuthority(address account) internal {\n        _authorities.remove(account);\n        emit AuthorityRemoved(account);\n    }\n\n    function _hasAuthority(address account) internal view returns (bool) {\n        return _authorities.has(account);\n    }\n}\n\ncontract Managed {\n    address internal _manager;\n\n    event ManagementTransferred(address indexed previousManager, address indexed newManager);\n\n    \n    constructor (address manager) internal {\n        _manager = manager;\n        emit ManagementTransferred(address(0), _manager);\n    }\n\n    \n    modifier onlyManager() {\n        require(_isManager(msg.sender), \"Caller not manager\");\n        _;\n    }\n\n    \n    function _isManager(address account) internal view returns (bool) {\n        return account == _manager;\n    }\n\n    \n    function _renounceManagement() internal returns (bool) {\n        emit ManagementTransferred(_manager, address(0));\n        _manager = address(0);\n\n        return true;\n    }\n\n    \n    function _transferManagement(address newManager) internal returns (bool) {\n        require(newManager != address(0));\n\n        emit ManagementTransferred(_manager, newManager);\n        _manager = newManager;\n\n        return true;\n    }\n}\n\ncontract ISRC20Roles {\n    function isAuthority(address account) external view returns (bool);\n    function removeAuthority(address account) external returns (bool);\n    function addAuthority(address account) external returns (bool);\n\n    function isDelegate(address account) external view returns (bool);\n    function addDelegate(address account) external returns (bool);\n    function removeDelegate(address account) external returns (bool);\n\n    function manager() external view returns (address);\n    function isManager(address account) external view returns (bool);\n    function transferManagement(address newManager) external returns (bool);\n    function renounceManagement() external returns (bool);\n}\n\ncontract SRC20Roles is ISRC20Roles, DelegateRole, AuthorityRole, Managed, Ownable {\n    constructor(address owner, address manager, address rules) public\n        Managed(manager)\n    {\n        _transferOwnership(owner);\n        if (rules != address(0)) {\n            _addAuthority(rules);\n        }\n    }\n\n    function addAuthority(address account) external onlyOwner returns (bool) {\n        _addAuthority(account);\n        return true;\n    }\n\n    function removeAuthority(address account) external onlyOwner returns (bool) {\n        _removeAuthority(account);\n        return true;\n    }\n\n    function isAuthority(address account) external view returns (bool) {\n        return _hasAuthority(account);\n    }\n\n    function addDelegate(address account) external onlyOwner returns (bool) {\n        _addDelegate(account);\n        return true;\n    }\n\n    function removeDelegate(address account) external onlyOwner returns (bool) {\n        _removeDelegate(account);\n        return true;\n    }\n\n    function isDelegate(address account) external view returns (bool) {\n        return _hasDelegate(account);\n    }\n\n    \n    function manager() external view returns (address) {\n        return _manager;\n    }\n\n    function isManager(address account) external view returns (bool) {\n        return _isManager(account);\n    }\n\n    function renounceManagement() external onlyManager returns (bool) {\n        _renounceManagement();\n        return true;\n    }\n\n    function transferManagement(address newManager) external onlyManager returns (bool) {\n        _transferManagement(newManager);\n        return true;\n    }\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isDelegate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceManagement\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAuthority\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAuthority\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeDelegate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAuthority\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"transferManagement\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addDelegate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"manager\",\"type\":\"address\"},{\"name\":\"rules\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousManager\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"ManagementTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AuthorityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AuthorityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"DelegateAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"DelegateRemoved\",\"type\":\"event\"}]","ContractName":"SRC20Roles","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c39bf343cfc1083497549d7f10468769becc79e4000000000000000000000000a79958571d55749898292f09366ce2b7c2f89b74000000000000000000000000f6a15821e5997b4447b351f9d0336d57facc0965","Library":"","LicenseType":"","SwarmSource":"bzzr://d3601cdf24f526971623715d589a8e015f02c1f3c8fd2ea69d1145fda40e35a0"}]}