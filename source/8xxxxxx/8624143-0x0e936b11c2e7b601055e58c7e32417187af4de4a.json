{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.26;\n\n// File: contracts/token/interfaces/IERC20Token.sol\n\n/*\n    ERC20 Standard Token interface\n*/\ncontract IERC20Token {\n    // these functions aren't abstract since the compiler emits automatically generated getter functions as external\n    function name() public view returns (string) {}\n    function symbol() public view returns (string) {}\n    function decimals() public view returns (uint8) {}\n    function totalSupply() public view returns (uint256) {}\n    function balanceOf(address _owner) public view returns (uint256) { _owner; }\n    function allowance(address _owner, address _spender) public view returns (uint256) { _owner; _spender; }\n\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n}\n\n// File: contracts/IBancorNetwork.sol\n\n/*\n    Bancor Network interface\n*/\ncontract IBancorNetwork {\n    function convert2(\n        IERC20Token[] _path,\n        uint256 _amount,\n        uint256 _minReturn,\n        address _affiliateAccount,\n        uint256 _affiliateFee\n    ) public payable returns (uint256);\n\n    function claimAndConvert2(\n        IERC20Token[] _path,\n        uint256 _amount,\n        uint256 _minReturn,\n        address _affiliateAccount,\n        uint256 _affiliateFee\n    ) public returns (uint256);\n\n    function convertFor2(\n        IERC20Token[] _path,\n        uint256 _amount,\n        uint256 _minReturn,\n        address _for,\n        address _affiliateAccount,\n        uint256 _affiliateFee\n    ) public payable returns (uint256);\n\n    function claimAndConvertFor2(\n        IERC20Token[] _path,\n        uint256 _amount,\n        uint256 _minReturn,\n        address _for,\n        address _affiliateAccount,\n        uint256 _affiliateFee\n    ) public returns (uint256);\n\n    function convertForPrioritized4(\n        IERC20Token[] _path,\n        uint256 _amount,\n        uint256 _minReturn,\n        address _for,\n        uint256[] memory _signature,\n        address _affiliateAccount,\n        uint256 _affiliateFee\n    ) public payable returns (uint256);\n\n    // deprecated, backward compatibility\n    function convert(\n        IERC20Token[] _path,\n        uint256 _amount,\n        uint256 _minReturn\n    ) public payable returns (uint256);\n\n    // deprecated, backward compatibility\n    function claimAndConvert(\n        IERC20Token[] _path,\n        uint256 _amount,\n        uint256 _minReturn\n    ) public returns (uint256);\n\n    // deprecated, backward compatibility\n    function convertFor(\n        IERC20Token[] _path,\n        uint256 _amount,\n        uint256 _minReturn,\n        address _for\n    ) public payable returns (uint256);\n\n    // deprecated, backward compatibility\n    function claimAndConvertFor(\n        IERC20Token[] _path,\n        uint256 _amount,\n        uint256 _minReturn,\n        address _for\n    ) public returns (uint256);\n\n    // deprecated, backward compatibility\n    function convertForPrioritized3(\n        IERC20Token[] _path,\n        uint256 _amount,\n        uint256 _minReturn,\n        address _for,\n        uint256 _customVal,\n        uint256 _block,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s\n    ) public payable returns (uint256);\n\n    // deprecated, backward compatibility\n    function convertForPrioritized2(\n        IERC20Token[] _path,\n        uint256 _amount,\n        uint256 _minReturn,\n        address _for,\n        uint256 _block,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s\n    ) public payable returns (uint256);\n\n    // deprecated, backward compatibility\n    function convertForPrioritized(\n        IERC20Token[] _path,\n        uint256 _amount,\n        uint256 _minReturn,\n        address _for,\n        uint256 _block,\n        uint256 _nonce,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s\n    ) public payable returns (uint256);\n}\n\n// File: contracts/ContractIds.sol\n\n/**\r\n  * @dev Id definitions for bancor contracts\r\n  * \r\n  * Can be used in conjunction with the contract registry to get contract addresses\r\n*/\r\ncontract ContractIds {\r\n    // generic\r\n    bytes32 public constant CONTRACT_FEATURES = \"ContractFeatures\";\r\n    bytes32 public constant CONTRACT_REGISTRY = \"ContractRegistry\";\r\n    bytes32 public constant NON_STANDARD_TOKEN_REGISTRY = \"NonStandardTokenRegistry\";\r\n\r\n    // bancor logic\r\n    bytes32 public constant BANCOR_NETWORK = \"BancorNetwork\";\r\n    bytes32 public constant BANCOR_FORMULA = \"BancorFormula\";\r\n    bytes32 public constant BANCOR_GAS_PRICE_LIMIT = \"BancorGasPriceLimit\";\r\n    bytes32 public constant BANCOR_CONVERTER_UPGRADER = \"BancorConverterUpgrader\";\r\n    bytes32 public constant BANCOR_CONVERTER_FACTORY = \"BancorConverterFactory\";\r\n\r\n    // BNT core\r\n    bytes32 public constant BNT_TOKEN = \"BNTToken\";\r\n    bytes32 public constant BNT_CONVERTER = \"BNTConverter\";\r\n\r\n    // BancorX\r\n    bytes32 public constant BANCOR_X = \"BancorX\";\r\n    bytes32 public constant BANCOR_X_UPGRADER = \"BancorXUpgrader\";\r\n}\n\n// File: contracts/FeatureIds.sol\n\n/**\r\n  * @dev Id definitions for bancor contract features\r\n  * \r\n  * Can be used to query the ContractFeatures contract to check whether a certain feature is supported by a contract\r\n*/\r\ncontract FeatureIds {\r\n    // converter features\r\n    uint256 public constant CONVERTER_CONVERSION_WHITELIST = 1 << 0;\r\n}\n\n// File: contracts/utility/interfaces/IWhitelist.sol\n\n/*\n    Whitelist interface\n*/\ncontract IWhitelist {\n    function isWhitelisted(address _address) public view returns (bool);\n}\n\n// File: contracts/converter/interfaces/IBancorConverter.sol\n\n/*\n    Bancor Converter interface\n*/\ncontract IBancorConverter {\n    function getReturn(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount) public view returns (uint256, uint256);\n    function convert2(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount, uint256 _minReturn, address _affiliateAccount, uint256 _affiliateFee) public returns (uint256);\n    function quickConvert2(IERC20Token[] _path, uint256 _amount, uint256 _minReturn, address _affiliateAccount, uint256 _affiliateFee) public payable returns (uint256);\n    function conversionWhitelist() public view returns (IWhitelist) {}\n    function conversionFee() public view returns (uint32) {}\n    function reserves(address _address) public view returns (uint256, uint32, bool, bool, bool) { _address; }\n    function getReserveBalance(IERC20Token _reserveToken) public view returns (uint256);\n    // deprecated, backward compatibility\n    function change(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount, uint256 _minReturn) public returns (uint256);\n    function convert(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount, uint256 _minReturn) public returns (uint256);\n    function quickConvert(IERC20Token[] _path, uint256 _amount, uint256 _minReturn) public payable returns (uint256);\n    function connectors(address _address) public view returns (uint256, uint32, bool, bool, bool);\n    function getConnectorBalance(IERC20Token _connectorToken) public view returns (uint256);\n}\n\n// File: contracts/converter/interfaces/IBancorFormula.sol\n\n/*\n    Bancor Formula interface\n*/\ncontract IBancorFormula {\n    function calculatePurchaseReturn(uint256 _supply, uint256 _reserveBalance, uint32 _reserveRatio, uint256 _depositAmount) public view returns (uint256);\n    function calculateSaleReturn(uint256 _supply, uint256 _reserveBalance, uint32 _reserveRatio, uint256 _sellAmount) public view returns (uint256);\n    function calculateCrossReserveReturn(uint256 _fromReserveBalance, uint32 _fromReserveRatio, uint256 _toReserveBalance, uint32 _toReserveRatio, uint256 _amount) public view returns (uint256);\n    // deprecated, backward compatibility\n    function calculateCrossConnectorReturn(uint256 _fromConnectorBalance, uint32 _fromConnectorWeight, uint256 _toConnectorBalance, uint32 _toConnectorWeight, uint256 _amount) public view returns (uint256);\n}\n\n// File: contracts/converter/interfaces/IBancorGasPriceLimit.sol\n\n/*\n    Bancor Gas Price Limit interface\n*/\ncontract IBancorGasPriceLimit {\n    function gasPrice() public view returns (uint256) {}\n    function validateGasPrice(uint256) public view;\n}\n\n// File: contracts/utility/interfaces/IOwned.sol\n\n/*\n    Owned contract interface\n*/\ncontract IOwned {\n    // this function isn't abstract since the compiler emits automatically generated getter functions as external\n    function owner() public view returns (address) {}\n\n    function transferOwnership(address _newOwner) public;\n    function acceptOwnership() public;\n}\n\n// File: contracts/utility/Owned.sol\n\n/**\r\n  * @dev Provides support and utilities for contract ownership\r\n*/\r\ncontract Owned is IOwned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    /**\r\n      * @dev triggered when the owner is updated\r\n      * \r\n      * @param _prevOwner previous owner\r\n      * @param _newOwner  new owner\r\n    */\r\n    event OwnerUpdate(address indexed _prevOwner, address indexed _newOwner);\r\n\r\n    /**\r\n      * @dev initializes a new Owned instance\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // allows execution by the owner only\r\n    modifier ownerOnly {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n      * @dev allows transferring the contract ownership\r\n      * the new owner still needs to accept the transfer\r\n      * can only be called by the contract owner\r\n      * \r\n      * @param _newOwner    new contract owner\r\n    */\r\n    function transferOwnership(address _newOwner) public ownerOnly {\r\n        require(_newOwner != owner);\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    /**\r\n      * @dev used by a new owner to accept an ownership transfer\r\n    */\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnerUpdate(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\n\n// File: contracts/utility/Utils.sol\n\n/**\r\n  * @dev Utilities & Common Modifiers\r\n*/\r\ncontract Utils {\r\n    /**\r\n      * constructor\r\n    */\r\n    constructor() public {\r\n    }\r\n\r\n    // verifies that an amount is greater than zero\r\n    modifier greaterThanZero(uint256 _amount) {\r\n        require(_amount > 0);\r\n        _;\r\n    }\r\n\r\n    // validates an address - currently only checks that it isn't null\r\n    modifier validAddress(address _address) {\r\n        require(_address != address(0));\r\n        _;\r\n    }\r\n\r\n    // verifies that the address is different than this contract address\r\n    modifier notThis(address _address) {\r\n        require(_address != address(this));\r\n        _;\r\n    }\r\n\r\n}\n\n// File: contracts/utility/interfaces/ITokenHolder.sol\n\n/*\n    Token Holder interface\n*/\ncontract ITokenHolder is IOwned {\n    function withdrawTokens(IERC20Token _token, address _to, uint256 _amount) public;\n}\n\n// File: contracts/token/interfaces/INonStandardERC20.sol\n\n/*\n    ERC20 Standard Token interface which doesn't return true/false for transfer, transferFrom and approve\n*/\ncontract INonStandardERC20 {\n    // these functions aren't abstract since the compiler emits automatically generated getter functions as external\n    function name() public view returns (string) {}\n    function symbol() public view returns (string) {}\n    function decimals() public view returns (uint8) {}\n    function totalSupply() public view returns (uint256) {}\n    function balanceOf(address _owner) public view returns (uint256) { _owner; }\n    function allowance(address _owner, address _spender) public view returns (uint256) { _owner; _spender; }\n\n    function transfer(address _to, uint256 _value) public;\n    function transferFrom(address _from, address _to, uint256 _value) public;\n    function approve(address _spender, uint256 _value) public;\n}\n\n// File: contracts/utility/TokenHolder.sol\n\n/**\r\n  * @dev We consider every contract to be a 'token holder' since it's currently not possible\r\n  * for a contract to deny receiving tokens.\r\n  * \r\n  * The TokenHolder's contract sole purpose is to provide a safety mechanism that allows\r\n  * the owner to send tokens that were sent to the contract by mistake back to their sender.\r\n  * \r\n  * Note that we use the non standard ERC-20 interface which has no return value for transfer\r\n  * in order to support both non standard as well as standard token contracts.\r\n  * see https://github.com/ethereum/solidity/issues/4116\r\n*/\r\ncontract TokenHolder is ITokenHolder, Owned, Utils {\r\n    /**\r\n      * @dev initializes a new TokenHolder instance\r\n    */\r\n    constructor() public {\r\n    }\r\n\r\n    /**\r\n      * @dev withdraws tokens held by the contract and sends them to an account\r\n      * can only be called by the owner\r\n      * \r\n      * @param _token   ERC20 token contract address\r\n      * @param _to      account to receive the new amount\r\n      * @param _amount  amount to withdraw\r\n    */\r\n    function withdrawTokens(IERC20Token _token, address _to, uint256 _amount)\r\n        public\r\n        ownerOnly\r\n        validAddress(_token)\r\n        validAddress(_to)\r\n        notThis(_to)\r\n    {\r\n        INonStandardERC20(_token).transfer(_to, _amount);\r\n    }\r\n}\n\n// File: contracts/utility/SafeMath.sol\n\n/**\r\n  * @dev Library for basic math operations with overflow/underflow protection\r\n*/\r\nlibrary SafeMath {\r\n    /**\r\n      * @dev returns the sum of _x and _y, reverts if the calculation overflows\r\n      * \r\n      * @param _x   value 1\r\n      * @param _y   value 2\r\n      * \r\n      * @return sum\r\n    */\r\n    function add(uint256 _x, uint256 _y) internal pure returns (uint256) {\r\n        uint256 z = _x + _y;\r\n        require(z >= _x);\r\n        return z;\r\n    }\r\n\r\n    /**\r\n      * @dev returns the difference of _x minus _y, reverts if the calculation underflows\r\n      * \r\n      * @param _x   minuend\r\n      * @param _y   subtrahend\r\n      * \r\n      * @return difference\r\n    */\r\n    function sub(uint256 _x, uint256 _y) internal pure returns (uint256) {\r\n        require(_x >= _y);\r\n        return _x - _y;\r\n    }\r\n\r\n    /**\r\n      * @dev returns the product of multiplying _x by _y, reverts if the calculation overflows\r\n      * \r\n      * @param _x   factor 1\r\n      * @param _y   factor 2\r\n      * \r\n      * @return product\r\n    */\r\n    function mul(uint256 _x, uint256 _y) internal pure returns (uint256) {\r\n        // gas optimization\r\n        if (_x == 0)\r\n            return 0;\r\n\r\n        uint256 z = _x * _y;\r\n        require(z / _x == _y);\r\n        return z;\r\n    }\r\n\r\n      /**\r\n        * ev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n        * \r\n        * aram _x   dividend\r\n        * aram _y   divisor\r\n        * \r\n        * eturn quotient\r\n    */\r\n    function div(uint256 _x, uint256 _y) internal pure returns (uint256) {\r\n        require(_y > 0);\r\n        uint256 c = _x / _y;\r\n\r\n        return c;\r\n    }\r\n}\n\n// File: contracts/utility/interfaces/IContractRegistry.sol\n\n/*\n    Contract Registry interface\n*/\ncontract IContractRegistry {\n    function addressOf(bytes32 _contractName) public view returns (address);\n\n    // deprecated, backward compatibility\n    function getAddress(bytes32 _contractName) public view returns (address);\n}\n\n// File: contracts/utility/interfaces/IContractFeatures.sol\n\n/*\n    Contract Features interface\n*/\ncontract IContractFeatures {\n    function isSupported(address _contract, uint256 _features) public view returns (bool);\n    function enableFeatures(uint256 _features, bool _enable) public;\n}\n\n// File: contracts/utility/interfaces/IAddressList.sol\n\n/*\n    Address list interface\n*/\ncontract IAddressList {\n    mapping (address => bool) public listedAddresses;\n}\n\n// File: contracts/token/interfaces/IEtherToken.sol\n\n/*\n    Ether Token interface\n*/\ncontract IEtherToken is ITokenHolder, IERC20Token {\n    function deposit() public payable;\n    function withdraw(uint256 _amount) public;\n    function withdrawTo(address _to, uint256 _amount) public;\n}\n\n// File: contracts/token/interfaces/ISmartToken.sol\n\n/*\n    Smart Token interface\n*/\ncontract ISmartToken is IOwned, IERC20Token {\n    function disableTransfers(bool _disable) public;\n    function issue(address _to, uint256 _amount) public;\n    function destroy(address _from, uint256 _amount) public;\n}\n\n// File: contracts/bancorx/interfaces/IBancorX.sol\n\ncontract IBancorX {\n    function xTransfer(bytes32 _toBlockchain, bytes32 _to, uint256 _amount, uint256 _id) public;\n    function getXTransferAmount(uint256 _xTransferId, address _for) public view returns (uint256);\n}\n\n// File: contracts/BancorNetwork.sol\n\n/**\r\n  * @dev The BancorNetwork contract is the main entry point for Bancor token conversions. It also allows for the conversion of any token in the Bancor Network to any other token in a single transaction by providing a conversion path. \r\n  * \r\n  * A note on Conversion Path: Conversion path is a data structure that is used when converting a token to another token in the Bancor Network when the conversion cannot necessarily be done by a single converter and might require multiple 'hops'. The path defines which converters should be used and what kind of conversion should be done in each step. \r\n  * \r\n  * The path format doesn't include complex structure; instead, it is represented by a single array in which each 'hop' is represented by a 2-tuple - smart token & to token. In addition, the first element is always the source token. The smart token is only used as a pointer to a converter (since converter addresses are more likely to change as opposed to smart token addresses).\r\n  * \r\n  * Format:\r\n  * [source token, smart token, to token, smart token, to token...]\r\n*/\r\ncontract BancorNetwork is IBancorNetwork, TokenHolder, ContractIds, FeatureIds {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 private constant CONVERSION_FEE_RESOLUTION = 1000000;\r\n    uint256 private constant AFFILIATE_FEE_RESOLUTION = 1000000;\r\n\r\n    uint256 public maxAffiliateFee = 30000;     // maximum affiliate-fee\r\n    address public signerAddress = 0x0;         // verified address that allows conversions with higher gas price\r\n    IContractRegistry public registry;          // contract registry contract address\r\n\r\n    mapping (address => bool) public etherTokens;       // list of all supported ether tokens\r\n    mapping (bytes32 => bool) public conversionHashes;  // list of conversion hashes, to prevent re-use of the same hash\r\n\r\n    /**\r\n      * @dev initializes a new BancorNetwork instance\r\n      * \r\n      * @param _registry    address of a contract registry contract\r\n    */\r\n    constructor(IContractRegistry _registry) public validAddress(_registry) {\r\n        registry = _registry;\r\n    }\r\n\r\n    /**\r\n      * @dev allows the owner to update the maximum affiliate-fee\r\n      * \r\n      * @param _maxAffiliateFee   maximum affiliate-fee\r\n    */\r\n    function setMaxAffiliateFee(uint256 _maxAffiliateFee)\r\n        public\r\n        ownerOnly\r\n    {\r\n        require(_maxAffiliateFee <= AFFILIATE_FEE_RESOLUTION);\r\n        maxAffiliateFee = _maxAffiliateFee;\r\n    }\r\n\r\n    /**\r\n      * @dev allows the owner to update the contract registry contract address\r\n      * \r\n      * @param _registry   address of a contract registry contract\r\n    */\r\n    function setRegistry(IContractRegistry _registry)\r\n        public\r\n        ownerOnly\r\n        validAddress(_registry)\r\n        notThis(_registry)\r\n    {\r\n        registry = _registry;\r\n    }\r\n\r\n    /**\r\n      * @dev allows the owner to update the signer address\r\n      * \r\n      * @param _signerAddress    new signer address\r\n    */\r\n    function setSignerAddress(address _signerAddress)\r\n        public\r\n        ownerOnly\r\n        validAddress(_signerAddress)\r\n        notThis(_signerAddress)\r\n    {\r\n        signerAddress = _signerAddress;\r\n    }\r\n\r\n    /**\r\n      * @dev allows the owner to register/unregister ether tokens\r\n      * \r\n      * @param _token       ether token contract address\r\n      * @param _register    true to register, false to unregister\r\n    */\r\n    function registerEtherToken(IEtherToken _token, bool _register)\r\n        public\r\n        ownerOnly\r\n        validAddress(_token)\r\n        notThis(_token)\r\n    {\r\n        etherTokens[_token] = _register;\r\n    }\r\n\r\n    /**\r\n      * @dev verifies that the signer address is trusted by recovering \r\n      * the address associated with the public key from elliptic \r\n      * curve signature, returns zero on error.\r\n      * notice that the signature is valid only for one conversion\r\n      * and expires after the give block.\r\n    */\r\n    function verifyTrustedSender(IERC20Token[] _path, address _addr, uint256[] memory _signature) private {\r\n        uint256 blockNumber = _signature[1];\r\n\r\n        // check that the current block number doesn't exceeded the maximum allowed with the current signature\r\n        require(block.number <= blockNumber);\r\n\r\n        // create the hash of the given signature\r\n        bytes32 hash = keccak256(abi.encodePacked(blockNumber, tx.gasprice, _addr, msg.sender, _signature[0], _path));\r\n\r\n        // check that it is the first conversion with the given signature\r\n        require(!conversionHashes[hash]);\r\n\r\n        // verify that the signing address is identical to the trusted signer address in the contract\r\n        bytes32 prefixedHash = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n        require(ecrecover(prefixedHash, uint8(_signature[2]), bytes32(_signature[3]), bytes32(_signature[4])) == signerAddress);\r\n\r\n        // mark the hash so that it can't be used multiple times\r\n        conversionHashes[hash] = true;\r\n    }\r\n\r\n    /**\r\n      * @dev converts the token to any other token in the bancor network by following\r\n      * a predefined conversion path and transfers the result tokens to a target account\r\n      * note that the converter should already own the source tokens\r\n      * \r\n      * @param _path                conversion path, see conversion path format above\r\n      * @param _amount              amount to convert from (in the initial source token)\r\n      * @param _minReturn           if the conversion results in an amount smaller than the minimum return - it is cancelled, must be nonzero\r\n      * @param _for                 account that will receive the conversion result\r\n      * @param _affiliateAccount    affiliate account\r\n      * @param _affiliateFee        affiliate fee in PPM\r\n      * \r\n      * @return tokens issued in return\r\n    */\r\n    function convertFor2(IERC20Token[] _path, uint256 _amount, uint256 _minReturn, address _for, address _affiliateAccount, uint256 _affiliateFee) public payable returns (uint256) {\r\n        return convertForPrioritized4(_path, _amount, _minReturn, _for, getSignature(0x0, 0x0, 0x0, 0x0, 0x0), _affiliateAccount, _affiliateFee);\r\n    }\r\n\r\n    /**\r\n      * @dev converts the token to any other token in the bancor network\r\n      * by following a predefined conversion path and transfers the result\r\n      * tokens to a target account.\r\n      * this version of the function also allows the verified signer\r\n      * to bypass the universal gas price limit.\r\n      * note that the converter should already own the source tokens\r\n      * \r\n      * @param _path                conversion path, see conversion path format above\r\n      * @param _amount              amount to convert from (in the initial source token)\r\n      * @param _minReturn           if the conversion results in an amount smaller than the minimum return - it is cancelled, must be nonzero\r\n      * @param _for                 account that will receive the conversion result\r\n      * @param _signature           an array of the following elements:\r\n      *                             [0] uint256     custom value that was signed for prioritized conversion\r\n      *                             [1] uint256     if the current block exceeded the given parameter - it is cancelled\r\n      *                             [2] uint8       (signature[128:130]) associated with the signer address and helps to validate if the signature is legit\r\n      *                             [3] bytes32     (signature[0:64]) associated with the signer address and helps to validate if the signature is legit\r\n      *                             [4] bytes32     (signature[64:128]) associated with the signer address and helps to validate if the signature is legit\r\n      *                             if the array is empty (length == 0), then the gas-price limit is verified instead of the signature\r\n      * @param _affiliateAccount    affiliate account\r\n      * @param _affiliateFee        affiliate fee in PPM\r\n      * \r\n      * @return tokens issued in return\r\n    */\r\n    function convertForPrioritized4(\r\n        IERC20Token[] _path,\r\n        uint256 _amount,\r\n        uint256 _minReturn,\r\n        address _for,\r\n        uint256[] memory _signature,\r\n        address _affiliateAccount,\r\n        uint256 _affiliateFee\r\n    )\r\n        public\r\n        payable\r\n        returns (uint256)\r\n    {\r\n        // verify that the conversion parameters are legal\r\n        verifyConversionParams(_path, _for, _for, _signature);\r\n\r\n        // handle msg.value\r\n        handleValue(_path[0], _amount, false);\r\n\r\n        // convert and get the resulting amount\r\n        uint256 amount = convertByPath(_path, _amount, _minReturn, _affiliateAccount, _affiliateFee);\r\n\r\n        // finished the conversion, transfer the funds to the target account\r\n        // if the target token is an ether token, withdraw the tokens and send them as ETH\r\n        // otherwise, transfer the tokens as is\r\n        IERC20Token toToken = _path[_path.length - 1];\r\n        if (etherTokens[toToken])\r\n            IEtherToken(toToken).withdrawTo(_for, amount);\r\n        else\r\n            ensureTransfer(toToken, _for, amount);\r\n\r\n        return amount;\r\n    }\r\n\r\n    /**\r\n      * @dev converts any other token to BNT in the bancor network\r\n      * by following a predefined conversion path and transfers the resulting\r\n      * tokens to BancorX.\r\n      * note that the network should already have been given allowance of the source token (if not ETH)\r\n      * \r\n      * @param _path             conversion path, see conversion path format above\r\n      * @param _amount           amount to convert from (in the initial source token)\r\n      * @param _minReturn        if the conversion results in an amount smaller than the minimum return - it is cancelled, must be nonzero\r\n      * @param _toBlockchain     blockchain BNT will be issued on\r\n      * @param _to               address/account on _toBlockchain to send the BNT to\r\n      * @param _conversionId     pre-determined unique (if non zero) id which refers to this transaction \r\n      * \r\n      * @return the amount of BNT received from this conversion\r\n    */\r\n    function xConvert(\r\n        IERC20Token[] _path,\r\n        uint256 _amount,\r\n        uint256 _minReturn,\r\n        bytes32 _toBlockchain,\r\n        bytes32 _to,\r\n        uint256 _conversionId\r\n    )\r\n        public\r\n        payable\r\n        returns (uint256)\r\n    {\r\n        return xConvertPrioritized2(_path, _amount, _minReturn, _toBlockchain, _to, _conversionId, getSignature(0x0, 0x0, 0x0, 0x0, 0x0));\r\n    }\r\n\r\n    /**\r\n      * @dev converts any other token to BNT in the bancor network\r\n      * by following a predefined conversion path and transfers the resulting\r\n      * tokens to BancorX.\r\n      * this version of the function also allows the verified signer\r\n      * to bypass the universal gas price limit.\r\n      * note that the network should already have been given allowance of the source token (if not ETH)\r\n      * \r\n      * @param _path            conversion path, see conversion path format above\r\n      * @param _amount          amount to convert from (in the initial source token)\r\n      * @param _minReturn       if the conversion results in an amount smaller than the minimum return - it is cancelled, must be nonzero\r\n      * @param _toBlockchain    blockchain BNT will be issued on\r\n      * @param _to              address/account on _toBlockchain to send the BNT to\r\n      * @param _conversionId    pre-determined unique (if non zero) id which refers to this transaction \r\n      * @param _signature       an array of the following elements:\r\n      *                         [0] uint256     custom value that was signed for prioritized conversion; must be equal to _amount\r\n      *                         [1] uint256     if the current block exceeded the given parameter - it is cancelled\r\n      *                         [2] uint8       (signature[128:130]) associated with the signer address and helps to validate if the signature is legit\r\n      *                         [3] bytes32     (signature[0:64]) associated with the signer address and helps to validate if the signature is legit\r\n      *                         [4] bytes32     (signature[64:128]) associated with the signer address and helps to validate if the signature is legit\r\n      *                         if the array is empty (length == 0), then the gas-price limit is verified instead of the signature\r\n      * \r\n      * @return the amount of BNT received from this conversion\r\n    */\r\n    function xConvertPrioritized2(\r\n        IERC20Token[] _path,\r\n        uint256 _amount,\r\n        uint256 _minReturn,\r\n        bytes32 _toBlockchain,\r\n        bytes32 _to,\r\n        uint256 _conversionId,\r\n        uint256[] memory _signature\r\n    )\r\n        public\r\n        payable\r\n        returns (uint256)\r\n    {\r\n        // verify that the custom value (if valid) is equal to _amount\r\n        require(_signature.length == 0 || _signature[0] == _amount);\r\n\r\n        // verify that the conversion parameters are legal\r\n        verifyConversionParams(_path, msg.sender, this, _signature);\r\n\r\n        // verify that the destination token is BNT\r\n        require(_path[_path.length - 1] == registry.addressOf(ContractIds.BNT_TOKEN));\r\n\r\n        // handle msg.value\r\n        handleValue(_path[0], _amount, true);\r\n\r\n        // convert and get the resulting amount\r\n        uint256 amount = convertByPath(_path, _amount, _minReturn, address(0), 0);\r\n\r\n        // transfer the resulting amount to BancorX\r\n        IBancorX(registry.addressOf(ContractIds.BANCOR_X)).xTransfer(_toBlockchain, _to, amount, _conversionId);\r\n\r\n        return amount;\r\n    }\r\n\r\n    /**\r\n      * @dev executes the actual conversion by following the conversion path\r\n      * \r\n      * @param _path                conversion path, see conversion path format above\r\n      * @param _amount              amount to convert from (in the initial source token)\r\n      * @param _minReturn           if the conversion results in an amount smaller than the minimum return - it is cancelled, must be nonzero\r\n      * @param _affiliateAccount    affiliate account\r\n      * @param _affiliateFee        affiliate fee in PPM\r\n      * \r\n      * @return amount of tokens issued\r\n    */\r\n    function convertByPath(\r\n        IERC20Token[] _path,\r\n        uint256 _amount,\r\n        uint256 _minReturn,\r\n        address _affiliateAccount,\r\n        uint256 _affiliateFee\r\n    ) private returns (uint256) {\r\n        uint256 amount = _amount;\r\n        uint256 lastIndex = _path.length - 1;\r\n\r\n        address bntToken;\r\n        if (address(_affiliateAccount) == 0) {\r\n            require(_affiliateFee == 0);\r\n            bntToken = address(0);\r\n        }\r\n        else {\r\n            require(0 < _affiliateFee && _affiliateFee <= maxAffiliateFee);\r\n            bntToken = registry.addressOf(ContractIds.BNT_TOKEN);\r\n        }\r\n\r\n        // iterate over the conversion path\r\n        for (uint256 i = 2; i <= lastIndex; i += 2) {\r\n            IBancorConverter converter = IBancorConverter(ISmartToken(_path[i - 1]).owner());\r\n\r\n            // if the smart token isn't the source (from token), the converter doesn't have control over it and thus we need to approve the request\r\n            if (_path[i - 1] != _path[i - 2])\r\n                ensureAllowance(_path[i - 2], converter, amount);\r\n\r\n            // make the conversion - if it's the last one, also provide the minimum return value\r\n            amount = converter.change(_path[i - 2], _path[i], amount, i == lastIndex ? _minReturn : 1);\r\n\r\n            // pay affiliate-fee if needed\r\n            if (address(_path[i]) == bntToken) {\r\n                uint256 affiliateAmount = amount.mul(_affiliateFee).div(AFFILIATE_FEE_RESOLUTION);\r\n                require(_path[i].transfer(_affiliateAccount, affiliateAmount));\r\n                amount -= affiliateAmount;\r\n                bntToken = address(0);\r\n            }\r\n        }\r\n\r\n        return amount;\r\n    }\r\n\r\n    bytes4 private constant GET_RETURN_FUNC_SELECTOR = bytes4(uint256(keccak256(\"getReturn(address,address,uint256)\") >> (256 - 4 * 8)));\r\n\r\n    function getReturn(address _dest, address _fromToken, address _toToken, uint256 _amount) internal view returns (uint256, uint256) {\r\n        uint256[2] memory ret;\r\n        bytes memory data = abi.encodeWithSelector(GET_RETURN_FUNC_SELECTOR, _fromToken, _toToken, _amount);\r\n\r\n        assembly {\r\n            let success := staticcall(\r\n                gas,           // gas remaining\r\n                _dest,         // destination address\r\n                add(data, 32), // input buffer (starts after the first 32 bytes in the `data` array)\r\n                mload(data),   // input length (loaded from the first 32 bytes in the `data` array)\r\n                ret,           // output buffer\r\n                64             // output length\r\n            )\r\n            if iszero(success) {\r\n                revert(0, 0)\r\n            }\r\n        }\r\n\r\n        return (ret[0], ret[1]);\r\n    }\r\n\r\n    /**\r\n      * @dev returns the expected return amount for converting a specific amount by following\r\n      * a given conversion path.\r\n      * notice that there is no support for circular paths.\r\n      * \r\n      * @param _path        conversion path, see conversion path format above\r\n      * @param _amount      amount to convert from (in the initial source token)\r\n      * \r\n      * @return expected conversion return amount and conversion fee\r\n    */\r\n    function getReturnByPath(IERC20Token[] _path, uint256 _amount) public view returns (uint256, uint256) {\r\n        uint256 amount;\r\n        uint256 fee;\r\n        uint256 supply;\r\n        uint256 balance;\r\n        uint32 ratio;\r\n        IBancorConverter converter;\r\n        IBancorFormula formula = IBancorFormula(registry.addressOf(ContractIds.BANCOR_FORMULA));\r\n\r\n        amount = _amount;\r\n\r\n        // verify that the number of elements is larger than 2 and odd\r\n        require(_path.length > 2 && _path.length % 2 == 1);\r\n\r\n        // iterate over the conversion path\r\n        for (uint256 i = 2; i < _path.length; i += 2) {\r\n            IERC20Token fromToken = _path[i - 2];\r\n            IERC20Token smartToken = _path[i - 1];\r\n            IERC20Token toToken = _path[i];\r\n\r\n            if (toToken == smartToken) { // buy the smart token\r\n                // check if the current smart token has changed\r\n                if (i < 3 || smartToken != _path[i - 3]) {\r\n                    supply = smartToken.totalSupply();\r\n                    converter = IBancorConverter(ISmartToken(smartToken).owner());\r\n                }\r\n\r\n                // validate input\r\n                require(getReserveSaleEnabled(converter, fromToken));\r\n\r\n                // calculate the amount & the conversion fee\r\n                balance = converter.getConnectorBalance(fromToken);\r\n                (, ratio, , , ) = converter.connectors(fromToken);\r\n                amount = formula.calculatePurchaseReturn(supply, balance, ratio, amount);\r\n                fee = amount.mul(converter.conversionFee()).div(CONVERSION_FEE_RESOLUTION);\r\n                amount -= fee;\r\n\r\n                // update the smart token supply for the next iteration\r\n                supply += amount;\r\n            }\r\n            else if (fromToken == smartToken) { // sell the smart token\r\n                // check if the current smart token has changed\r\n                if (i < 3 || smartToken != _path[i - 3]) {\r\n                    supply = smartToken.totalSupply();\r\n                    converter = IBancorConverter(ISmartToken(smartToken).owner());\r\n                }\r\n\r\n                // calculate the amount & the conversion fee\r\n                balance = converter.getConnectorBalance(toToken);\r\n                (, ratio, , , ) = converter.connectors(toToken);\r\n                amount = formula.calculateSaleReturn(supply, balance, ratio, amount);\r\n                fee = amount.mul(converter.conversionFee()).div(CONVERSION_FEE_RESOLUTION);\r\n                amount -= fee;\r\n\r\n                // update the smart token supply for the next iteration\r\n                supply -= amount;\r\n            }\r\n            else { // cross reserve conversion\r\n                // check if the current smart token has changed\r\n                if (i < 3 || smartToken != _path[i - 3]) {\r\n                    converter = IBancorConverter(ISmartToken(smartToken).owner());\r\n                }\r\n\r\n                (amount, fee) = getReturn(converter, fromToken, toToken, amount);\r\n            }\r\n        }\r\n\r\n        return (amount, fee);\r\n    }\r\n\r\n    /**\r\n      * @dev claims the caller's tokens, converts them to any other token in the bancor network\r\n      * by following a predefined conversion path and transfers the result tokens to a target account\r\n      * note that allowance must be set beforehand\r\n      * \r\n      * @param _path                conversion path, see conversion path format above\r\n      * @param _amount              amount to convert from (in the initial source token)\r\n      * @param _minReturn           if the conversion results in an amount smaller than the minimum return - it is cancelled, must be nonzero\r\n      * @param _for                 account that will receive the conversion result\r\n      * @param _affiliateAccount    affiliate account\r\n      * @param _affiliateFee        affiliate fee in PPM\r\n      * \r\n      * @return tokens issued in return\r\n    */\r\n    function claimAndConvertFor2(IERC20Token[] _path, uint256 _amount, uint256 _minReturn, address _for, address _affiliateAccount, uint256 _affiliateFee) public returns (uint256) {\r\n        // we need to transfer the tokens from the caller to the converter before we follow\r\n        // the conversion path, to allow it to execute the conversion on behalf of the caller\r\n        // note: we assume we already have allowance\r\n        IERC20Token fromToken = _path[0];\r\n        ensureTransferFrom(fromToken, msg.sender, this, _amount);\r\n        return convertFor2(_path, _amount, _minReturn, _for, _affiliateAccount, _affiliateFee);\r\n    }\r\n\r\n    /**\r\n      * @dev converts the token to any other token in the bancor network by following\r\n      * a predefined conversion path and transfers the result tokens back to the sender\r\n      * note that the converter should already own the source tokens\r\n      * \r\n      * @param _path                conversion path, see conversion path format above\r\n      * @param _amount              amount to convert from (in the initial source token)\r\n      * @param _minReturn           if the conversion results in an amount smaller than the minimum return - it is cancelled, must be nonzero\r\n      * @param _affiliateAccount    affiliate account\r\n      * @param _affiliateFee        affiliate fee in PPM\r\n      * \r\n      * @return tokens issued in return\r\n    */\r\n    function convert2(IERC20Token[] _path, uint256 _amount, uint256 _minReturn, address _affiliateAccount, uint256 _affiliateFee) public payable returns (uint256) {\r\n        return convertFor2(_path, _amount, _minReturn, msg.sender, _affiliateAccount, _affiliateFee);\r\n    }\r\n\r\n    /**\r\n      * @dev claims the caller's tokens, converts them to any other token in the bancor network\r\n      * by following a predefined conversion path and transfers the result tokens back to the sender\r\n      * note that allowance must be set beforehand\r\n      * \r\n      * @param _path                conversion path, see conversion path format above\r\n      * @param _amount              amount to convert from (in the initial source token)\r\n      * @param _minReturn           if the conversion results in an amount smaller than the minimum return - it is cancelled, must be nonzero\r\n      * @param _affiliateAccount    affiliate account\r\n      * @param _affiliateFee        affiliate fee in PPM\r\n      * \r\n      * @return tokens issued in return\r\n    */\r\n    function claimAndConvert2(IERC20Token[] _path, uint256 _amount, uint256 _minReturn, address _affiliateAccount, uint256 _affiliateFee) public returns (uint256) {\r\n        return claimAndConvertFor2(_path, _amount, _minReturn, msg.sender, _affiliateAccount, _affiliateFee);\r\n    }\r\n\r\n    /**\r\n      * @dev ensures transfer of tokens, taking into account that some ERC-20 implementations don't return\r\n      * true on success but revert on failure instead\r\n      * \r\n      * @param _token     the token to transfer\r\n      * @param _to        the address to transfer the tokens to\r\n      * @param _amount    the amount to transfer\r\n    */\r\n    function ensureTransfer(IERC20Token _token, address _to, uint256 _amount) private {\r\n        IAddressList addressList = IAddressList(registry.addressOf(ContractIds.NON_STANDARD_TOKEN_REGISTRY));\r\n\r\n        if (addressList.listedAddresses(_token)) {\r\n            uint256 prevBalance = _token.balanceOf(_to);\r\n            // we have to cast the token contract in an interface which has no return value\r\n            INonStandardERC20(_token).transfer(_to, _amount);\r\n            uint256 postBalance = _token.balanceOf(_to);\r\n            assert(postBalance > prevBalance);\r\n        } else {\r\n            // if the token isn't whitelisted, we assert on transfer\r\n            assert(_token.transfer(_to, _amount));\r\n        }\r\n    }\r\n\r\n    /**\r\n      * @dev ensures transfer of tokens, taking into account that some ERC-20 implementations don't return\r\n      * true on success but revert on failure instead\r\n      * \r\n      * @param _token     the token to transfer\r\n      * @param _from      the address to transfer the tokens from\r\n      * @param _to        the address to transfer the tokens to\r\n      * @param _amount    the amount to transfer\r\n    */\r\n    function ensureTransferFrom(IERC20Token _token, address _from, address _to, uint256 _amount) private {\r\n        IAddressList addressList = IAddressList(registry.addressOf(ContractIds.NON_STANDARD_TOKEN_REGISTRY));\r\n\r\n        if (addressList.listedAddresses(_token)) {\r\n            uint256 prevBalance = _token.balanceOf(_to);\r\n            // we have to cast the token contract in an interface which has no return value\r\n            INonStandardERC20(_token).transferFrom(_from, _to, _amount);\r\n            uint256 postBalance = _token.balanceOf(_to);\r\n            assert(postBalance > prevBalance);\r\n        } else {\r\n            // if the token isn't whitelisted, we assert on transfer\r\n            assert(_token.transferFrom(_from, _to, _amount));\r\n        }\r\n    }\r\n\r\n    /**\r\n      * @dev utility, checks whether allowance for the given spender exists and approves one if it doesn't.\r\n      * Note that we use the non standard erc-20 interface in which `approve` has no return value so that\r\n      * this function will work for both standard and non standard tokens\r\n      * \r\n      * @param _token   token to check the allowance in\r\n      * @param _spender approved address\r\n      * @param _value   allowance amount\r\n    */\r\n    function ensureAllowance(IERC20Token _token, address _spender, uint256 _value) private {\r\n        // check if allowance for the given amount already exists\r\n        if (_token.allowance(this, _spender) >= _value)\r\n            return;\r\n\r\n        // if the allowance is nonzero, must reset it to 0 first\r\n        if (_token.allowance(this, _spender) != 0)\r\n            INonStandardERC20(_token).approve(_spender, 0);\r\n\r\n        // approve the new allowance\r\n        INonStandardERC20(_token).approve(_spender, _value);\r\n    }\r\n\r\n    /**\r\n      * @dev returns true if reserve sale is enabled\r\n      * \r\n      * @param _converter       converter contract address\r\n      * @param _reserve         reserve's address to read from\r\n      * \r\n      * @return true if reserve sale is enabled, otherwise - false\r\n    */\r\n    function getReserveSaleEnabled(IBancorConverter _converter, IERC20Token _reserve)\r\n        private\r\n        view\r\n        returns(bool)\r\n    {\r\n        bool isSaleEnabled;\r\n        (, , , isSaleEnabled, ) = _converter.connectors(_reserve);\r\n        return isSaleEnabled;\r\n    }\r\n\r\n    function getSignature(\r\n        uint256 _customVal,\r\n        uint256 _block,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) private pure returns (uint256[] memory) {\r\n        if (_v == 0x0 && _r == 0x0 && _s == 0x0)\r\n            return new uint256[](0);\r\n        uint256[] memory signature = new uint256[](5);\r\n        signature[0] = _customVal;\r\n        signature[1] = _block;\r\n        signature[2] = uint256(_v);\r\n        signature[3] = uint256(_r);\r\n        signature[4] = uint256(_s);\r\n        return signature;\r\n    }\r\n\r\n    function verifyConversionParams(\r\n        IERC20Token[] _path,\r\n        address _sender,\r\n        address _receiver,\r\n        uint256[] memory _signature\r\n    )\r\n        private\r\n    {\r\n        // verify that the number of elements is odd and that maximum number of 'hops' is 10\r\n        require(_path.length > 2 && _path.length <= (1 + 2 * 10) && _path.length % 2 == 1);\r\n\r\n        // verify that the account which should receive the conversion result is whitelisted\r\n        IContractFeatures features = IContractFeatures(registry.addressOf(ContractIds.CONTRACT_FEATURES));\r\n        for (uint256 i = 1; i < _path.length; i += 2) {\r\n            IBancorConverter converter = IBancorConverter(ISmartToken(_path[i]).owner());\r\n            if (features.isSupported(converter, FeatureIds.CONVERTER_CONVERSION_WHITELIST)) {\r\n                IWhitelist whitelist = converter.conversionWhitelist();\r\n                require (whitelist == address(0) || whitelist.isWhitelisted(_receiver));\r\n            }\r\n        }\r\n\r\n        if (_signature.length >= 5) {\r\n            // verify signature\r\n            verifyTrustedSender(_path, _sender, _signature);\r\n        }\r\n        else {\r\n            // verify gas price limit\r\n            IBancorGasPriceLimit gasPriceLimit = IBancorGasPriceLimit(registry.addressOf(ContractIds.BANCOR_GAS_PRICE_LIMIT));\r\n            gasPriceLimit.validateGasPrice(tx.gasprice);\r\n        }\r\n    }\r\n\r\n    function handleValue(IERC20Token _token, uint256 _amount, bool _claim) private {\r\n        // if ETH is provided, ensure that the amount is identical to _amount, verify that the source token is an ether token and deposit the ETH in it\r\n        if (msg.value > 0) {\r\n            require(_amount == msg.value && etherTokens[_token]);\r\n            IEtherToken(_token).deposit.value(msg.value)();\r\n        }\r\n        // Otherwise, claim the tokens from the sender if needed\r\n        else if (_claim) {\r\n            ensureTransferFrom(_token, msg.sender, this, _amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n      * @dev deprecated, backward compatibility\r\n    */\r\n    function convert(\r\n        IERC20Token[] _path,\r\n        uint256 _amount,\r\n        uint256 _minReturn\r\n    ) public payable returns (uint256)\r\n    {\r\n        return convert2(_path, _amount, _minReturn, address(0), 0);\r\n    }\r\n\r\n    /**\r\n      * @dev deprecated, backward compatibility\r\n    */\r\n    function claimAndConvert(\r\n        IERC20Token[] _path,\r\n        uint256 _amount,\r\n        uint256 _minReturn\r\n    ) public returns (uint256)\r\n    {\r\n        return claimAndConvert2(_path, _amount, _minReturn, address(0), 0);\r\n    }\r\n\r\n    /**\r\n      * @dev deprecated, backward compatibility\r\n    */\r\n    function convertFor(\r\n        IERC20Token[] _path,\r\n        uint256 _amount,\r\n        uint256 _minReturn,\r\n        address _for\r\n    ) public payable returns (uint256)\r\n    {\r\n        return convertFor2(_path, _amount, _minReturn, _for, address(0), 0);\r\n    }\r\n\r\n    /**\r\n      * @dev deprecated, backward compatibility\r\n    */\r\n    function claimAndConvertFor(\r\n        IERC20Token[] _path,\r\n        uint256 _amount,\r\n        uint256 _minReturn,\r\n        address _for\r\n    ) public returns (uint256)\r\n    {\r\n        return claimAndConvertFor2(_path, _amount, _minReturn, _for, address(0), 0);\r\n    }\r\n\r\n    /**\r\n      * @dev deprecated, backward compatibility\r\n    */\r\n    function xConvertPrioritized(\r\n        IERC20Token[] _path,\r\n        uint256 _amount,\r\n        uint256 _minReturn,\r\n        bytes32 _toBlockchain,\r\n        bytes32 _to,\r\n        uint256 _conversionId,\r\n        uint256 _block,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        payable\r\n        returns (uint256)\r\n    {\r\n        // workaround the 'stack too deep' compilation error\r\n        uint256[] memory signature = getSignature(_amount, _block, _v, _r, _s);\r\n        return xConvertPrioritized2(_path, _amount, _minReturn, _toBlockchain, _to, _conversionId, signature);\r\n        // return xConvertPrioritized2(_path, _amount, _minReturn, _toBlockchain, _to, _conversionId, getSignature(_amount, _block, _v, _r, _s));\r\n    }\r\n\r\n    /**\r\n      * @dev deprecated, backward compatibility\r\n    */\r\n    function convertForPrioritized3(\r\n        IERC20Token[] _path,\r\n        uint256 _amount,\r\n        uint256 _minReturn,\r\n        address _for,\r\n        uint256 _customVal,\r\n        uint256 _block,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        payable\r\n        returns (uint256)\r\n    {\r\n        return convertForPrioritized4(_path, _amount, _minReturn, _for, getSignature(_customVal, _block, _v, _r, _s), address(0), 0);\r\n    }\r\n\r\n    /**\r\n      * @dev deprecated, backward compatibility\r\n    */\r\n    function convertForPrioritized2(\r\n        IERC20Token[] _path,\r\n        uint256 _amount,\r\n        uint256 _minReturn,\r\n        address _for,\r\n        uint256 _block,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        payable\r\n        returns (uint256)\r\n    {\r\n        return convertForPrioritized4(_path, _amount, _minReturn, _for, getSignature(_amount, _block, _v, _r, _s), address(0), 0);\r\n    }\r\n\r\n    /**\r\n      * @dev deprecated, backward compatibility\r\n    */\r\n    function convertForPrioritized(\r\n        IERC20Token[] _path,\r\n        uint256 _amount,\r\n        uint256 _minReturn,\r\n        address _for,\r\n        uint256 _block,\r\n        uint256 _nonce,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s)\r\n        public payable returns (uint256)\r\n    {\r\n        _nonce;\r\n        return convertForPrioritized4(_path, _amount, _minReturn, _for, getSignature(_amount, _block, _v, _r, _s), address(0), 0);\r\n    }\r\n}\n","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_register\",\"type\":\"bool\"}],\"name\":\"registerEtherToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signerAddress\",\"type\":\"address\"}],\"name\":\"setSignerAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_path\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getReturnByPath\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BANCOR_CONVERTER_UPGRADER\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_path\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_minReturn\",\"type\":\"uint256\"},{\"name\":\"_for\",\"type\":\"address\"},{\"name\":\"_block\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"convertForPrioritized\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BNT_TOKEN\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_REGISTRY\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_path\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_minReturn\",\"type\":\"uint256\"},{\"name\":\"_for\",\"type\":\"address\"},{\"name\":\"_affiliateAccount\",\"type\":\"address\"},{\"name\":\"_affiliateFee\",\"type\":\"uint256\"}],\"name\":\"claimAndConvertFor2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_path\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_minReturn\",\"type\":\"uint256\"},{\"name\":\"_for\",\"type\":\"address\"},{\"name\":\"_signature\",\"type\":\"uint256[]\"},{\"name\":\"_affiliateAccount\",\"type\":\"address\"},{\"name\":\"_affiliateFee\",\"type\":\"uint256\"}],\"name\":\"convertForPrioritized4\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_path\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_minReturn\",\"type\":\"uint256\"},{\"name\":\"_affiliateAccount\",\"type\":\"address\"},{\"name\":\"_affiliateFee\",\"type\":\"uint256\"}],\"name\":\"convert2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BANCOR_CONVERTER_FACTORY\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxAffiliateFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BNT_CONVERTER\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_path\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_minReturn\",\"type\":\"uint256\"},{\"name\":\"_toBlockchain\",\"type\":\"bytes32\"},{\"name\":\"_to\",\"type\":\"bytes32\"},{\"name\":\"_conversionId\",\"type\":\"uint256\"},{\"name\":\"_block\",\"type\":\"uint256\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"xConvertPrioritized\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_path\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_minReturn\",\"type\":\"uint256\"},{\"name\":\"_for\",\"type\":\"address\"},{\"name\":\"_block\",\"type\":\"uint256\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"convertForPrioritized2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BANCOR_FORMULA\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"etherTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_FEATURES\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"conversionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BANCOR_NETWORK\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BANCOR_GAS_PRICE_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONVERTER_CONVERSION_WHITELIST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_path\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_minReturn\",\"type\":\"uint256\"},{\"name\":\"_for\",\"type\":\"address\"},{\"name\":\"_affiliateAccount\",\"type\":\"address\"},{\"name\":\"_affiliateFee\",\"type\":\"uint256\"}],\"name\":\"convertFor2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_path\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_minReturn\",\"type\":\"uint256\"},{\"name\":\"_for\",\"type\":\"address\"}],\"name\":\"claimAndConvertFor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_path\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_minReturn\",\"type\":\"uint256\"},{\"name\":\"_for\",\"type\":\"address\"},{\"name\":\"_customVal\",\"type\":\"uint256\"},{\"name\":\"_block\",\"type\":\"uint256\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"convertForPrioritized3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BANCOR_X\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_path\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_minReturn\",\"type\":\"uint256\"},{\"name\":\"_toBlockchain\",\"type\":\"bytes32\"},{\"name\":\"_to\",\"type\":\"bytes32\"},{\"name\":\"_conversionId\",\"type\":\"uint256\"}],\"name\":\"xConvert\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_path\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_minReturn\",\"type\":\"uint256\"}],\"name\":\"claimAndConvert\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_path\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_minReturn\",\"type\":\"uint256\"},{\"name\":\"_for\",\"type\":\"address\"}],\"name\":\"convertFor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BANCOR_X_UPGRADER\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_path\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_minReturn\",\"type\":\"uint256\"},{\"name\":\"_toBlockchain\",\"type\":\"bytes32\"},{\"name\":\"_to\",\"type\":\"bytes32\"},{\"name\":\"_conversionId\",\"type\":\"uint256\"},{\"name\":\"_signature\",\"type\":\"uint256[]\"}],\"name\":\"xConvertPrioritized2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_path\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_minReturn\",\"type\":\"uint256\"},{\"name\":\"_affiliateAccount\",\"type\":\"address\"},{\"name\":\"_affiliateFee\",\"type\":\"uint256\"}],\"name\":\"claimAndConvert2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_path\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_minReturn\",\"type\":\"uint256\"}],\"name\":\"convert\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxAffiliateFee\",\"type\":\"uint256\"}],\"name\":\"setMaxAffiliateFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NON_STANDARD_TOKEN_REGISTRY\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"}]","ContractName":"BancorNetwork","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000052ae12abe5d8bd778bd5397f99ca900624cfadd4","Library":"","LicenseType":"","SwarmSource":"bzzr://99eeb481a6c4cea5b7cc782f6f47f8f19febea2acea2c70deaf3ba57de524f88"}]}