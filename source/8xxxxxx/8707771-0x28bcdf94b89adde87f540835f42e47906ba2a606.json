{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n\r\n\r\ndETH is the provably dead token.\r\n\r\nHOW DETH WORKS:\r\n\r\nETH sent to this smart contract is irrevocably killed and removed from the\r\neconomy. It is not just burned, it is dead.\r\n\r\nThis is accomplished by transferring ETH to Hades, a self-destructing\r\nsmart contract that sends ETH to itself during self-destruction. The dead\r\neth isn't just inaccessible, it literally ceases to exist.\r\n\r\nTOKENOMICS:\r\n\r\nThe price of dETH increases by .1% with each purchase from this smart contract.\r\n\r\nThis simple bonding curve incentives destroying large amounts of ETH in each\r\ntransaction to lock-in the lowest possible price.\r\n\r\nPlus, receive a 30% bonus by destroying 3 eth or more.\r\n\r\n3 eth is the block reward in Ethereum and by destroying more than 3 eth in a\r\nsingle transaction, you are removing more ether from the economy than is created.\r\n\r\nGAME THEORY:\r\n\r\nMaking a large mint and then making many small mints will drive the price\r\nup for others.\r\n\r\nThe price doubles every 1000 times dETH has been minted.\r\n\r\nFEE DISCLOSURE:\r\n\r\nThere is a .01 eth fee for minting dETH. This is paid to Charon to cross the\r\nRiver Styx into Hades. All eth collected by Charon is converted into Sparkle,\r\na redistributive currency.\r\n\r\nPro-tip: Share in Charon's profits by buying Sparkle.\r\n\r\nThe fee is the same regardless of the amount of dETH minted. This further\r\nincentives destroying large amounts of ETH in each transaction.\r\n\r\nSPECIAL CONTRACT FUNCTIONS:\r\n\r\nfunction totalDead returns the total amount of wei that has been destroyed\r\n\r\n____\r\n\r\nCreated by Micah White for Halloween 2019\r\n\r\n____\r\n\r\nHappy Halloween!\r\n\r\n*/\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\r\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\r\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\r\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n     constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n         _name = name;\r\n         _symbol = symbol;\r\n         _decimals = decimals;\r\n     }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\ncontract Sparkle is ERC20Detailed {\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n\r\n    }\r\n\r\n    function tobinsCollected() public view returns (uint256) {\r\n\r\n    }\r\n\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n\r\n    }\r\n\r\n    function () external payable {\r\n        mintSparkle();\r\n    }\r\n\r\n    function mintSparkle() public payable returns (bool) {\r\n\r\n    }\r\n\r\n    function sellSparkle(uint256 amount) public returns (bool) {\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\ncontract Hades {\r\n\r\n  function () external payable {\r\n    selfdestruct(address(this));\r\n    }\r\n\r\n}\r\n\r\ncontract dETH is ERC20Detailed {\r\n  using SafeMath for uint256;\r\n\r\n  mapping (address => uint256) private _balances;\r\n\r\n  mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n  uint256 private _totalSupply;\r\n  uint256 private _totalDead;\r\n  uint256 private _numberOfBuys;\r\n  address payable charon = 0x4C3cC1D2229CBD17D26ec984F2E1b9bD336cBf69;\r\n  address payable deployed_sparkle = 0x286ae10228C274a9396a05A56B9E3B8f42D1cE14;\r\n  uint256 constant private COST_PER_SPARKLE = 1e14; // 1 Sparkle = .0001 ETH\r\n  uint256 constant private MAX_SPARKLE_SUPPLY = 400000000 * 10 ** 18;\r\n\r\n  constructor() public ERC20Detailed(\"dETH\", \"DETH\", 18) {}\r\n\r\n  /**\r\n   * @dev See `IERC20.totalSupply`.\r\n   */\r\n  function totalSupply() public view returns (uint256) {\r\n      return _totalSupply;\r\n  }\r\n\r\n  function totalDead() public view returns (uint256) {\r\n      return _totalDead;\r\n  }\r\n\r\n  /**\r\n   * @dev See `IERC20.balanceOf`.\r\n   */\r\n  function balanceOf(address account) public view returns (uint256) {\r\n      return _balances[account];\r\n  }\r\n\r\n  /**\r\n   * @dev See `IERC20.transfer`.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `recipient` cannot be the zero address.\r\n   * - the caller must have a balance of at least `amount`.\r\n   */\r\n  function transfer(address recipient, uint256 amount) public returns (bool) {\r\n      _transfer(msg.sender, recipient, amount);\r\n      return true;\r\n  }\r\n\r\n  /**\r\n   * @dev See `IERC20.allowance`.\r\n   */\r\n  function allowance(address owner, address spender) public view returns (uint256) {\r\n      return _allowances[owner][spender];\r\n  }\r\n\r\n  /**\r\n   * @dev See `IERC20.approve`.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function approve(address spender, uint256 value) public returns (bool) {\r\n      _approve(msg.sender, spender, value);\r\n      return true;\r\n  }\r\n\r\n  /**\r\n   * @dev See `IERC20.transferFrom`.\r\n   *\r\n   * Emits an `Approval` event indicating the updated allowance. This is not\r\n   * required by the EIP. See the note at the beginning of `ERC20`;\r\n   *\r\n   * Requirements:\r\n   * - `sender` and `recipient` cannot be the zero address.\r\n   * - `sender` must have a balance of at least `value`.\r\n   * - the caller must have allowance for `sender`'s tokens of at least\r\n   * `amount`.\r\n   */\r\n  function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n      _transfer(sender, recipient, amount);\r\n      _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n      return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n   *\r\n   * This is an alternative to `approve` that can be used as a mitigation for\r\n   * problems described in `IERC20.approve`.\r\n   *\r\n   * Emits an `Approval` event indicating the updated allowance.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n      _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n      return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n   *\r\n   * This is an alternative to `approve` that can be used as a mitigation for\r\n   * problems described in `IERC20.approve`.\r\n   *\r\n   * Emits an `Approval` event indicating the updated allowance.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   * - `spender` must have allowance for the caller of at least\r\n   * `subtractedValue`.\r\n   */\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n      _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n      return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n   *\r\n   * This is internal function is equivalent to `transfer`, and can be used to\r\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n   *\r\n   * Emits a `Transfer` event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `sender` cannot be the zero address.\r\n   * - `recipient` cannot be the zero address.\r\n   * - `sender` must have a balance of at least `amount`.\r\n   */\r\n  function _transfer(address sender, address recipient, uint256 amount) internal {\r\n      require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n      require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n      _balances[sender] = _balances[sender].sub(amount);\r\n      _balances[recipient] = _balances[recipient].add(amount);\r\n      emit Transfer(sender, recipient, amount);\r\n  }\r\n\r\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n   * the total supply.\r\n   *\r\n   * Emits a `Transfer` event with `from` set to the zero address.\r\n   *\r\n   * Requirements\r\n   *\r\n   * - `to` cannot be the zero address.\r\n   */\r\n  function _mint(address account, uint256 amount) internal {\r\n      require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n      _totalSupply = _totalSupply.add(amount);\r\n      _balances[account] = _balances[account].add(amount);\r\n      emit Transfer(address(0), account, amount);\r\n  }\r\n\r\n   /**\r\n   * @dev Destoys `amount` tokens from `account`, reducing the\r\n   * total supply.\r\n   *\r\n   * Emits a `Transfer` event with `to` set to the zero address.\r\n   *\r\n   * Requirements\r\n   *\r\n   * - `account` cannot be the zero address.\r\n   * - `account` must have at least `amount` tokens.\r\n   */\r\n  function _burn(address account, uint256 value) internal {\r\n      require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n      _totalSupply = _totalSupply.sub(value);\r\n      _balances[account] = _balances[account].sub(value);\r\n      emit Transfer(account, address(0), value);\r\n  }\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n   *\r\n   * This is internal function is equivalent to `approve`, and can be used to\r\n   * e.g. set automatic allowances for certain subsystems, etc.\r\n   *\r\n   * Emits an `Approval` event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `owner` cannot be the zero address.\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function _approve(address owner, address spender, uint256 value) internal {\r\n      require(owner != address(0), \"ERC20: approve from the zero address\");\r\n      require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n      _allowances[owner][spender] = value;\r\n      emit Approval(owner, spender, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\r\n   * from the caller's allowance.\r\n   *\r\n   * See `_burn` and `_approve`.\r\n   */\r\n  function _burnFrom(address account, uint256 amount) internal {\r\n      _burn(account, amount);\r\n      _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\r\n  }\r\n\r\n\r\n  function createDeath() internal returns (Hades tokenAddress) {\r\n      return new Hades();\r\n  }\r\n\r\n\r\n    function () external payable {\r\n        mintDeth();\r\n    }\r\n\r\n    function mintDeth() public payable returns (bool) {\r\n        require(gasleft() >= 101000, \"Increase gas limit to over 101,000\");\r\n        require(msg.value > 1e16, \"Insufficient deposit. Minimum mint is .01 eth\");\r\n\r\n        if (msg.value >= 3000000000000000000) {\r\n          uint256 amount = msg.value.sub(1e16); // Charon takes .01 eth to cross River Styx\r\n          uint256 amountBonus = amount.mul(13).div(10); // 30% bonus for destroying more than block reward\r\n          uint256 _price = _numberOfBuys.add(1000);\r\n          uint256 buyerAmount = amountBonus.div(_price).mul(1000);\r\n          _numberOfBuys = _numberOfBuys.add(1);\r\n\r\n          address payable riverStyx = address(createDeath());\r\n          riverStyx.transfer(amount);\r\n\r\n          _balances[msg.sender] = _balances[msg.sender].add(buyerAmount);\r\n\r\n          _totalSupply = _totalSupply.add(buyerAmount);\r\n          _totalDead = _totalDead.add(amount);\r\n\r\n          emit Transfer(address(0), msg.sender, buyerAmount);\r\n\r\n          return true;\r\n        } else {\r\n        uint256 amount = msg.value.sub(1e16); // Charon takes .01 eth to cross River Styx\r\n        uint256 _price = _numberOfBuys.add(1000);\r\n        uint256 buyerAmount = amount.div(_price).mul(1000);\r\n        _numberOfBuys = _numberOfBuys.add(1);\r\n\r\n        address payable riverStyx = address(createDeath());\r\n        riverStyx.transfer(amount);\r\n\r\n        _balances[msg.sender] = _balances[msg.sender].add(buyerAmount);\r\n\r\n        _totalSupply = _totalSupply.add(buyerAmount);\r\n        _totalDead = _totalDead.add(amount);\r\n\r\n        emit Transfer(address(0), msg.sender, buyerAmount);\r\n\r\n        return true;\r\n        }\r\n    }\r\n\r\n\r\n    // all ether collected by Charon must be converted into Sparkle in order to withdraw it\r\n    function buySparkle() public returns (bool) {\r\n      require(msg.sender == charon, \"Access denied.\");\r\n      uint256 pot = address(this).balance;\r\n      uint256 buyingAmount = pot.div(COST_PER_SPARKLE);\r\n      uint256 sparkleSupply = Sparkle(deployed_sparkle).totalSupply();\r\n      // if the Sparkle max supply cap has been reached, send colleted eth to Charon\r\n      if (MAX_SPARKLE_SUPPLY >= sparkleSupply.add(buyingAmount)) {\r\n      deployed_sparkle.call.value(pot).gas(120000)(\"\");\r\n      return true;\r\n    } else {\r\n      charon.transfer(address(this).balance);\r\n      return true;\r\n    }\r\n    }\r\n\r\n    function sellSparkle(uint256 amount) public returns (bool) {\r\n            require(msg.sender == charon, \"Access denied.\");\r\n            Sparkle(deployed_sparkle).sellSparkle(amount);\r\n            charon.transfer(address(this).balance);\r\n            return true;\r\n        }\r\n\r\n\r\n    function withdrawSparkle(uint256 amount) public returns (bool) {\r\n          require(msg.sender == charon, \"Access denied.\");\r\n              Sparkle(deployed_sparkle).transfer(charon, amount);\r\n              return true;\r\n                    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mintDeth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawSparkle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sellSparkle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDead\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buySparkle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"dETH","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://5879a2e6e80041d2f42cef08ee9fbb14c8fd747a6577791f2b2a4bb98887ba90"}]}