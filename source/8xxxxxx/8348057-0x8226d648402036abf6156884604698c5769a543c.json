{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\n// pragma solidity ^0.5.0; ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n// pragma solidity ^0.5.0; ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n// pragma solidity ^0.5.0; ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the `IERC20` interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using `_mint`.\r\n * For a generic mechanism see `ERC20Mintable`.\r\n *\r\n * *For a detailed writeup see our guide [How to implement supply\r\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See `IERC20.approve`.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See `IERC20.totalSupply`.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.balanceOf`.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transfer`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.allowance`.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.approve`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transferFrom`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of `ERC20`;\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `value`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to `transfer`, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a `Transfer` event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    // function _mint(address account, uint256 amount) internal {\r\n    //     require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n    //     _totalSupply = _totalSupply.add(amount);\r\n    //     _balances[account] = _balances[account].add(amount);\r\n    //     emit Transfer(address(0), account, amount);\r\n    // }\r\n\r\n     /**\r\n     * @dev Destoys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a `Transfer` event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    // function _burn(address account, uint256 value) internal {\r\n    //     require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n    //     _totalSupply = _totalSupply.sub(value);\r\n    //     _balances[account] = _balances[account].sub(value);\r\n    //     emit Transfer(account, address(0), value);\r\n    // }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an `Approval` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See `_burn` and `_approve`.\r\n     */\r\n    // function _burnFrom(address account, uint256 amount) internal {\r\n    //     _burn(account, amount);\r\n    //     _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\r\n    // }\r\n}\r\n\r\n// File: contracts/CocosTokenLock.sol\r\n\r\n// pragma solidity ^0.5.0; ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @title CocosTokenLock\r\n * @dev CocosToken for lock some Cocos token\r\n * @author reedhong\r\n */\r\ncontract CocosTokenLock is Ownable {\r\n    ERC20 public token;\r\n\r\n    // 0 Contributor\r\n    // 1 Team\r\n    // 2 Adivisors\r\n    // 3 UserIncentive\r\n    // 4 PartnerIncentive\r\n    // 5 DPOSReward\r\n    // 6 TokenTreasury\r\n    uint8 public constant CONTRIBUTOR = 0;  // 4\r\n    uint8 public constant TEAM = 1; // 3\r\n    uint8 public constant ADIVISORS = 2; // 13\r\n    uint8 public constant USER_INCENTIVE = 3; // 41\r\n    uint8 public constant PARTNER_INCENTIE = 4; // 21\r\n    uint8 public constant DPOS_REWARD = 5; // 120\r\n    uint8 public constant TOKEN_TREASURY = 6; //21\r\n    uint8 public constant TOTAL_LOCK_TYPES = 7;\r\n\r\n    uint256 public constant DV = (10 ** 18);\r\n\r\n\r\n    uint256[TOTAL_LOCK_TYPES] public tokenDistribution = [\r\n        22396452170 * DV,\r\n        17000000000 * DV,\r\n        4000000000 * DV,\r\n        7603547830 * DV,\r\n        10000000000 * DV,\r\n        30000000000 * DV,\r\n        9000000000 * DV\r\n    ];\r\n\r\n\r\n    uint[TOTAL_LOCK_TYPES] public startTimes = [0, 365 days, 30 days, 0, 0, 90 days, 0];  // from tge(token generator event)\r\n    //uint[TOTAL_LOCK_TYPES] public startTimes = [0,  10 seconds, 1 minutes, 0 minutes, 0, 10 seconds, 0];  // for test\r\n    uint[TOTAL_LOCK_TYPES] public lockIntervalTimes = [180 days, 365 days, 90 days, 90 days, 90 days, 30 days, 90 days];\r\n    //uint[TOTAL_LOCK_TYPES] public lockIntervalTimes = [10 seconds, 10 seconds,  3 seconds, 5 seconds,\r\n    //    3 seconds, 2 seconds, 5 seconds];  // for test\r\n\r\n    uint public constant ADIVISORS_SECOND_AHEAD_TIME = 30 days;\r\n    //uint public constant ADIVISORS_SECOND_AHEAD_TIME = 2 minutes;  // for test\r\n    uint public constant PARTNER_INCENTIE_SECOND_DELAY_TIME = 30 days;\r\n    //uint public constant PARTNER_INCENTIE_SECOND_DELAY_TIME = 2 minutes; // for test\r\n\r\n    // seven token address\r\n    address[TOTAL_LOCK_TYPES] public tokenAddresses = [\r\n        0xf9948BD195a7Aa64FbBc461B8D1286873C364721,\r\n        0xf18E50748AC2882E7F4b87A147F31453ef69C08B,\r\n        0x5E401eB4E132B17A3217401c9b0e51EA1B608e28,\r\n        0x82d54E42b88522b936E4139A758d5fA3D4Bb35c1,\r\n        0x8da5569f3831CAB8Fc6439AF4bC4fcAa7C729250,\r\n        0x6eD0885ec149d8c8504a4cBcD5067F7fb011cc0c,\r\n        0x6a5d6692d847c83d047bFCaC293FAF02e1488a64\r\n    ];\r\n\r\n    uint256[][TOTAL_LOCK_TYPES] public lockTokenMatrix;\r\n\r\n    uint[TOTAL_LOCK_TYPES] public lastUnlockTimes= [0, 0, 0, 0, 0, 0, 0];\r\n    uint[TOTAL_LOCK_TYPES] public currentLockSteps = [0, 0, 0, 0, 0, 0, 0];\r\n\r\n    uint public lockedAt = 0;\r\n\r\n    event UnlockToken(uint8 tokenType, uint currentStep, uint steps, uint256 tokens, uint lockTime, address addr);\r\n    event CheckTokenDistribution(uint tokenType, uint256 distribution);\r\n    event RecoverFailedLock(uint256 token);\r\n    event SetAddress(uint8 tokenType, address addr);\r\n\r\n    //Has not been locked yet\r\n    modifier notLocked {\r\n        require(lockedAt == 0, \"not locked\");\r\n        _;\r\n    }\r\n\r\n    modifier locked {\r\n        require(lockedAt > 0, \"has locked\");\r\n        _;\r\n    }\r\n\r\n    modifier validAddress( address addr ) {\r\n        require(addr != address(0x0), \"address is 0x00\");\r\n        require(addr != address(this), \"address is myself\");\r\n        _;\r\n    }\r\n\r\n    modifier validTokenType(uint8 tokenType ){\r\n        require(0 <= tokenType && tokenType < TOTAL_LOCK_TYPES, \"tokenType must in [0,6]\");\r\n        _;\r\n    }\r\n\r\n    constructor(address payable _cocosToken)\r\n        public\r\n        validAddress(_cocosToken){\r\n        token = ERC20(_cocosToken);\r\n\r\n        lockTokenMatrix[CONTRIBUTOR] = [\r\n            12025214795 * DV,\r\n            5353626719 * DV,\r\n            4582828047 * DV,\r\n            434782609 * DV\r\n        ];\r\n        lockTokenMatrix[TEAM] = [\r\n            5692583331 * DV,\r\n            5691833331 * DV,\r\n            5615583338 * DV\r\n        ];\r\n        lockTokenMatrix[ADIVISORS] = [\r\n            350000000 * DV,\r\n            433333332 * DV,\r\n            577833332 * DV,\r\n            83333332 * DV,\r\n            577833332 * DV,\r\n            83333332 * DV,\r\n            577833332 * DV,\r\n            83333332 * DV,\r\n            899833332 * DV,\r\n            83333332 * DV,\r\n            83333332 * DV,\r\n            83333332 * DV,\r\n            83333348 * DV\r\n        ];\r\n    }\r\n\r\n    function setAddress(uint8 tokenType, address addr) public\r\n        onlyOwner\r\n        validAddress(addr)\r\n        validTokenType(tokenType) {\r\n            tokenAddresses[tokenType] = addr;\r\n            emit SetAddress(tokenType, addr);\r\n        }\r\n\r\n\r\n    //In the case locking failed, then allow the owner to reclaim the tokens on the contract.\r\n    //Recover Tokens in case incorrect amount was sent to contract.\r\n    function recoverFailedLock() public\r\n        notLocked\r\n        onlyOwner{\r\n        // Transfer all tokens on this contract back to the owner\r\n        uint256 balance = token.balanceOf(address(this));\r\n        require(token.transfer(owner(), balance), \"transfer error\");\r\n        emit RecoverFailedLock(balance);\r\n    }\r\n\r\n    function lock() public\r\n        notLocked\r\n        onlyOwner{\r\n        uint256 totalSupply = token.totalSupply();\r\n        require(token.balanceOf(address(this)) == totalSupply, \"can't enough token\");\r\n\r\n        lockTokenMatrix[USER_INCENTIVE] = new uint256[](41);\r\n        for(uint256 i = 0; i < 40; i++){\r\n            lockTokenMatrix[USER_INCENTIVE][i] = 190000000 * DV;\r\n        }\r\n        lockTokenMatrix[USER_INCENTIVE][40] = 3547830 * DV; //totalSupply * lockPerK[USER_INCENTIVE] - 190000000 * DV * 40;\r\n\r\n        lockTokenMatrix[PARTNER_INCENTIE] = new uint256[](21);\r\n        lockTokenMatrix[PARTNER_INCENTIE][0] = 2000000000 * DV;\r\n        for(uint256 i = 1; i < 21; i++){\r\n            lockTokenMatrix[PARTNER_INCENTIE][i] = 400000000 * DV;\r\n        }\r\n\r\n        lockTokenMatrix[DPOS_REWARD] = new uint256[](120);\r\n        for(uint256 i = 0; i < 120; i++){\r\n            lockTokenMatrix[DPOS_REWARD][i] = 250000000 * DV;\r\n        }\r\n\r\n        lockTokenMatrix[TOKEN_TREASURY] = new uint256[](21);\r\n        lockTokenMatrix[TOKEN_TREASURY][0] = 1500000000 * DV;\r\n        for(uint256 i = 1; i < 21; i++){\r\n            lockTokenMatrix[TOKEN_TREASURY][i] = 375000000 * DV;\r\n        }\r\n\r\n        // check lock percentage\r\n        uint tokenCount = 0;\r\n        for(uint i = 0; i < tokenDistribution.length; i++){\r\n            tokenCount = tokenCount + tokenDistribution[i];\r\n        }\r\n        require(tokenCount == totalSupply, \"error lock rate, please check it again\");\r\n\r\n        // check token set\r\n        for(uint i = 0; i < TOTAL_LOCK_TYPES; i++){\r\n            uint256 tokens = tokenDistribution[i];\r\n            uint256 count = 0;\r\n            for(uint j = 0; j < lockTokenMatrix[i].length; j++ ){\r\n                count = count + lockTokenMatrix[i][j];\r\n            }\r\n            require(tokens == count, \"error token set\");\r\n            emit CheckTokenDistribution(i, tokens);\r\n        }\r\n\r\n        lockedAt = block.timestamp;\r\n    }\r\n\r\n    /**\r\n    * @notice unlock token by type\r\n    */\r\n    function unlock(uint8 tokenType) public\r\n        locked\r\n        onlyOwner\r\n        validTokenType(tokenType){\r\n        require(currentLockSteps[tokenType] < lockTokenMatrix[tokenType].length, \"unlock finish\");\r\n\r\n        uint currentTime = block.timestamp;\r\n\r\n        uint steps = 0;\r\n        bool isFirst = false;\r\n        if(lastUnlockTimes[tokenType] == 0){  // first time\r\n            uint interval = currentTime - lockedAt;\r\n            if( interval > startTimes[tokenType]){\r\n                steps = 1;\r\n                isFirst = true;\r\n            }\r\n        }else{\r\n            require(lastUnlockTimes[tokenType] <= currentTime, \"subtraction overflow\");\r\n            uint dt = currentTime - lastUnlockTimes[tokenType];\r\n            steps = dt/lockIntervalTimes[tokenType];\r\n        }\r\n\r\n        require(steps > 0, \"can't unlock\");\r\n\r\n        uint256 unlockToken = 0;\r\n        uint oldStep = currentLockSteps[tokenType];\r\n        uint totalLockStep = lockTokenMatrix[tokenType].length;\r\n        for(uint i = currentLockSteps[tokenType]; i < (currentLockSteps[tokenType] + steps) && i < totalLockStep; i++ ){\r\n            unlockToken = unlockToken + lockTokenMatrix[tokenType][i];\r\n        }\r\n        lastUnlockTimes[tokenType] = lastUnlockTimes[tokenType] + steps * lockIntervalTimes[tokenType];\r\n \r\n        // first time is different\r\n        if(isFirst){\r\n            lastUnlockTimes[tokenType] = lockedAt + startTimes[tokenType];\r\n\r\n            if( tokenType == ADIVISORS){\r\n                lastUnlockTimes[tokenType] = lastUnlockTimes[tokenType] - ADIVISORS_SECOND_AHEAD_TIME;\r\n            }else if(tokenType == PARTNER_INCENTIE ) {\r\n                lastUnlockTimes[tokenType] = lastUnlockTimes[tokenType] + PARTNER_INCENTIE_SECOND_DELAY_TIME;\r\n            }\r\n        }\r\n\r\n        currentLockSteps[tokenType] = currentLockSteps[tokenType] + steps;\r\n\r\n        uint256 amount = token.balanceOf(address(this));\r\n        require(amount >= unlockToken, 'not enough token');\r\n\r\n        emit UnlockToken(tokenType, oldStep, steps, unlockToken, lastUnlockTimes[tokenType], tokenAddresses[tokenType]);\r\n\r\n        token.transfer(tokenAddresses[tokenType], unlockToken);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"tokenType\",\"type\":\"uint8\"},{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenType\",\"type\":\"uint8\"}],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastUnlockTimes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenDistribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"currentLockSteps\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_LOCK_TYPES\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ADIVISORS_SECOND_AHEAD_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"USER_INCENTIVE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DV\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRIBUTOR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_TREASURY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"startTimes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PARTNER_INCENTIE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockTokenMatrix\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DPOS_REWARD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEAM\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockIntervalTimes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PARTNER_INCENTIE_SECOND_DELAY_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ADIVISORS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"recoverFailedLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_cocosToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenType\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"currentStep\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"steps\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"UnlockToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenType\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"distribution\",\"type\":\"uint256\"}],\"name\":\"CheckTokenDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"uint256\"}],\"name\":\"RecoverFailedLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenType\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"SetAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CocosTokenLock","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000c6f5f7d555e7518f6841a79436bd2b1eef03381","Library":"","SwarmSource":"bzzr://48736440c9edefeb4715516fec7c4ba4d2f5e3f1d2df271d46c94230a6031c21"}]}