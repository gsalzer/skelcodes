{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.8;\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) { return 0; }\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n\r\n}\r\n\r\ncontract Validity {\r\n\r\n    // Author ::: Samuel JJ Gosling\r\n    // Usage ::: Governance\r\n    // Entity ::: Validity\r\n\r\n    using SafeMath for uint;\r\n\r\n    bytes32 constant POS = 0x506f736974697665000000000000000000000000000000000000000000000000;\r\n    bytes32 constant NEU = 0x4e65757472616c00000000000000000000000000000000000000000000000000;\r\n    bytes32 constant NEG = 0x4e65676174697665000000000000000000000000000000000000000000000000;\r\n\r\n    struct userObject {\r\n        bytes32 _validationIdentifier;\r\n        bool _validationStatus;\r\n        bool _stakingStatus;\r\n    }\r\n\r\n    struct delegateObject {\r\n        address _delegateAddress;\r\n        bytes32 _delegateIdentity;\r\n        bytes32 _viabilityLimit;\r\n        bytes32 _viabilityRank;\r\n        bytes32 _positiveVotes;\r\n        bytes32 _negativeVotes;\r\n        bytes32 _neutralVotes;\r\n        bytes32 _totalEvents;\r\n        bytes32 _totalVotes;\r\n        bool _votingStatus;\r\n    }\r\n\r\n    mapping (address => mapping (address => uint)) private _allowed;\r\n    mapping (address => uint) private _balances;\r\n\r\n    mapping (bytes32 => delegateObject) private validationData;\r\n    mapping (address => userObject) private validationUser;\r\n\r\n    address private _founder = msg.sender;\r\n    address private _admin = address(0x0);\r\n\r\n    uint private _totalSupply;\r\n    uint private _maxSupply;\r\n    uint private _decimals;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    modifier _viabilityLimit(bytes32 _id) {\r\n        require(uint(validationData[_id]._viabilityLimit) <= block.number);\r\n        _;\r\n    }\r\n\r\n    modifier _stakeCheck(address _from, address _to) {\r\n        require(!isStaking(_from) && !isStaking(_to));\r\n        _;\r\n    }\r\n\r\n    modifier _onlyAdmin() {\r\n        require(msg.sender == _admin);\r\n        _;\r\n    }\r\n\r\n    modifier _onlyFounder() {\r\n        require(msg.sender == _founder);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        //  Max supply (100%) ::: 50,600,000,000 VLDY\r\n        //  Genesis supply (92.5%) ::: 46,805,000,000 VLDY\r\n        //  Validation supply (7.5%) ::: 3,795,000,000 VLDY\r\n        uint genesis = uint(46805000000).mul(10**uint(18));\r\n        _maxSupply = uint(50600000000).mul(10**uint(18));\r\n        _mint(_founder, genesis);\r\n        _name = \"Validity\";\r\n        _symbol = \"VLDY\";\r\n        _decimals = 18;\r\n    }\r\n\r\n    function toggleStake() public {\r\n        require(!isVoted(validityId(msg.sender)));\r\n        require(isActive(msg.sender));\r\n\r\n        bool currentState = validationUser[msg.sender]._stakingStatus;\r\n        validationUser[msg.sender]._stakingStatus = !currentState;\r\n        emit Stake(msg.sender);\r\n    }\r\n\r\n    function setIdentity(bytes32 _identity) public {\r\n        require(isActive(msg.sender));\r\n\r\n        validationData[validityId(msg.sender)]._delegateIdentity = _identity;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint) {\r\n        return _decimals;\r\n    }\r\n\r\n    function maxSupply() public view returns (uint) {\r\n        return _maxSupply;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function isVoted(bytes32 _id) public view returns (bool) {\r\n        return validationData[_id]._votingStatus;\r\n    }\r\n\r\n    function isActive(address _account) public view returns (bool) {\r\n        return validationUser[_account]._validationStatus;\r\n    }\r\n\r\n    function isStaking(address _account) public view returns (bool) {\r\n        return validationUser[_account]._stakingStatus;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint) {\r\n        return _balances[_owner];\r\n    }\r\n\r\n    function validityId(address _account) public view returns (bytes32) {\r\n        return validationUser[_account]._validationIdentifier;\r\n    }\r\n\r\n    function getIdentity(bytes32 _id) public view returns (bytes32) {\r\n        return validationData[_id]._delegateIdentity;\r\n    }\r\n\r\n    function getAddress(bytes32 _id) public view returns (address) {\r\n        return validationData[_id]._delegateAddress;\r\n    }\r\n\r\n    function viability(bytes32 _id) public view returns (uint) {\r\n        return uint(validationData[_id]._viabilityRank);\r\n    }\r\n\r\n    function totalEvents(bytes32 _id) public view returns (uint) {\r\n        return uint(validationData[_id]._totalEvents);\r\n    }\r\n\r\n    function totalVotes(bytes32 _id) public view returns (uint) {\r\n        return uint(validationData[_id]._totalVotes);\r\n    }\r\n\r\n    function positiveVotes(bytes32 _id) public view returns (uint) {\r\n        return uint(validationData[_id]._positiveVotes);\r\n    }\r\n\r\n    function negativeVotes(bytes32 _id) public view returns (uint) {\r\n        return uint(validationData[_id]._negativeVotes);\r\n    }\r\n\r\n    function neutralVotes(bytes32 _id) public view returns (uint) {\r\n        return uint(validationData[_id]._neutralVotes);\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint) {\r\n        return _allowed[_owner][_spender];\r\n    }\r\n\r\n    function transfer(address _to, uint _value) public returns (bool) {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint _value) public returns (bool) {\r\n        _approve(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\r\n        _approve(_from, msg.sender, _allowed[_from][msg.sender].sub(_value));\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address _spender, uint _addedValue) public returns (bool) {\r\n        _approve(msg.sender, _spender, _allowed[msg.sender][_spender].add(_addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address _spender, uint _subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, _spender, _allowed[msg.sender][_spender].sub(_subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint _value) internal _stakeCheck(_from, _to) {\r\n        require(_from != address(0x0));\r\n        require(_to != address(0x0));\r\n\r\n        _balances[_from] = _balances[_from].sub(_value);\r\n        _balances[_to] = _balances[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    function _approve(address _owner, address _spender, uint _value) internal {\r\n        require(_spender != address(0x0));\r\n        require(_owner != address(0x0));\r\n\r\n        _allowed[_owner][_spender] = _value;\r\n        emit Approval(_owner, _spender, _value);\r\n    }\r\n\r\n    function _mint(address _account, uint _value) private {\r\n        require(_totalSupply.add(_value) <= _maxSupply);\r\n        require(_account != address(0x0));\r\n\r\n        _totalSupply = _totalSupply.add(_value);\r\n        _balances[_account] = _balances[_account].add(_value);\r\n        emit Transfer(address(0x0), _account, _value);\r\n    }\r\n\r\n    function validationReward(bytes32 _id, address _account, uint _reward) public _onlyAdmin {\r\n        require(isStaking(_account));\r\n        require(isVoted(_id));\r\n\r\n        validationUser[_account]._stakingStatus = false;\r\n        validationData[_id]._votingStatus = false;\r\n        _mint(_account, _reward);\r\n        emit Reward(_id, _reward);\r\n    }\r\n\r\n    function validationEvent(bytes32 _id, bytes32 _subject, bytes32 _choice, uint _weight) public _onlyAdmin {\r\n        require(_choice == POS || _choice == NEU || _choice == NEG);\r\n        require(isStaking(getAddress(_id)));\r\n        require(!isVoted(_id));\r\n\r\n        validationData[_id]._votingStatus = true;\r\n        delegateObject storage x = validationData[_id];\r\n        if(_choice == POS) {\r\n            x._positiveVotes = bytes32(positiveVotes(_id).add(_weight));\r\n        } else if(_choice == NEU) {\r\n            x._neutralVotes = bytes32(neutralVotes(_id).add(_weight));\r\n        } else if(_choice == NEG) {\r\n            x._negativeVotes = bytes32(negativeVotes(_id).add(_weight));\r\n        }\r\n        x._totalVotes = bytes32(totalVotes(_id).add(_weight));\r\n        x._totalEvents = bytes32(totalEvents(_id).add(1));\r\n        emit Vote(_id, _subject, _choice, _weight);\r\n    }\r\n\r\n    function validationGeneration(address _account) internal view returns (bytes32) {\r\n        bytes32 id = 0xffcc000000000000000000000000000000000000000000000000000000000000;\r\n        assembly {\r\n            let product := mul(or(_account, shl(0xa0, and(number, 0xffffffff))), 0x7dee20b84b88)\r\n            id := or(id, xor(product, shl(0x78, and(product, 0xffffffffffffffffffffffffffffff))))\r\n        }\r\n        return id;\r\n    }\r\n\r\n    function increaseViability(bytes32 _id) public _onlyAdmin  _viabilityLimit(_id) {\r\n        validationData[_id]._viabilityLimit = bytes32(block.number.add(1000));\r\n        validationData[_id]._viabilityRank = bytes32(viability(_id).add(1));\r\n        emit Trust(_id, POS);\r\n    }\r\n\r\n    function decreaseViability(bytes32 _id) public _onlyAdmin _viabilityLimit(_id) {\r\n        validationData[_id]._viabilityLimit = bytes32(block.number.add(1000));\r\n        validationData[_id]._viabilityRank = bytes32(viability(_id).sub(1));\r\n        emit Trust(_id, NEG);\r\n    }\r\n\r\n    function conformIdentity() public {\r\n        require(!isActive(msg.sender));\r\n\r\n        bytes32 neophyteDelegate = validationGeneration(msg.sender);\r\n        validationUser[msg.sender]._validationIdentifier = neophyteDelegate;\r\n        validationData[neophyteDelegate]._delegateAddress = msg.sender;\r\n        validationUser[msg.sender]._validationStatus = true;\r\n        emit Neo(msg.sender, neophyteDelegate, block.number);\r\n    }\r\n\r\n    function adminControl(address _entity) public _onlyFounder {\r\n        _admin = _entity;\r\n    }\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Vote(bytes32 id, bytes32 subject, bytes32 choice, uint weight);\r\n    event Neo(address indexed delegate, bytes32 id, uint block);\r\n    event Trust(bytes32 id, bytes32 change);\r\n    event Reward(bytes32 id, uint reward);\r\n    event Stake(address indexed delegate);\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"isVoted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_identity\",\"type\":\"bytes32\"}],\"name\":\"setIdentity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"getAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"conformIdentity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_entity\",\"type\":\"address\"}],\"name\":\"adminControl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"viability\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"validityId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"},{\"name\":\"_subject\",\"type\":\"bytes32\"},{\"name\":\"_choice\",\"type\":\"bytes32\"},{\"name\":\"_weight\",\"type\":\"uint256\"}],\"name\":\"validationEvent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"increaseViability\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isStaking\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"toggleStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"positiveVotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"totalEvents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"decreaseViability\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"},{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"validationReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"getIdentity\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"neutralVotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"totalVotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"negativeVotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"subject\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"choice\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"Neo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"change\",\"type\":\"bytes32\"}],\"name\":\"Trust\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"Stake\",\"type\":\"event\"}]","ContractName":"Validity","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://01cd989354fc8b56a16c27df0401cebff681b07214fd9ace4b4db76f8d52ca67"}]}