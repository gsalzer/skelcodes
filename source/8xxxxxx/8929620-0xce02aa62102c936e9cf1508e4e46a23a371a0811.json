{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.11; // optimization runs: 200, evm version: petersburg\r\n\r\n\r\ninterface IndestructibleRegistryCheckerInterface {\r\n  function isRegisteredAsIndestructible(\r\n    address target\r\n  ) external view returns (bool registeredAsIndestructible);\r\n}\r\n\r\n\r\n/**\r\n * @title DharmaUpgradeBeaconControllerManagerCreationVerifier\r\n * @author 0age\r\n * @notice This contract is used to ensure that the constituent dependencies of\r\n * the Dharma Upgrade Beacon Controller Manager are all deployed correctly and\r\n * registered as indestructible.\r\n */\r\ncontract DharmaUpgradeBeaconControllerManagerCreationVerifier {\r\n  // Store address of Smart Wallet Upgrade Beacon Controller as a constant.\r\n  address private constant _SMART_WALLET_UPGRADE_BEACON_CONTROLLER = address(\r\n    0x00000000002226C940b74d674B85E4bE05539663\r\n  );\r\n\r\n  // Store the address of the Dharma Smart Wallet Upgrade Beacon as a constant.\r\n  address private constant _DHARMA_SMART_WALLET_UPGRADE_BEACON = address(\r\n    0x000000000026750c571ce882B17016557279ADaa\r\n  );\r\n\r\n  // Store the Adharma Smart Wallet Contingency implementation.\r\n  address private constant _ADHARMA_SMART_WALLET_IMPLEMENTATION = address(\r\n    0x00000000009f22dA6fEB6735614563B9Af0339fB\r\n  );\r\n\r\n  // Store address of Key Ring Upgrade Beacon Controller as a constant.\r\n  address private constant _KEY_RING_UPGRADE_BEACON_CONTROLLER = address(\r\n    0x00000000011dF015e8aD00D7B2486a88C2Eb8210\r\n  );\r\n\r\n  // Store the address of the Dharma Key Ring Upgrade Beacon as a constant.\r\n  address private constant _DHARMA_KEY_RING_UPGRADE_BEACON = address(\r\n    0x0000000000BDA2152794ac8c76B2dc86cbA57cad\r\n  );\r\n\r\n  // Store the Adharma Key Ring Contingency implementation.\r\n  address private constant _ADHARMA_KEY_RING_IMPLEMENTATION = address(\r\n    0x000000000053d1F0F8aA88b9001Bec1B49445B3c\r\n  );\r\n\r\n  /**\r\n   * @notice In the constructor, verifu the runtime code of the smart wallet and\r\n   * key ring upgrade beacons, their controllers, and their contingency\r\n   * implementations. Then, verify that each contract in question has also been\r\n   * registered as indestructible at indestructible.eth - this makes it\r\n   * impossible for their runtime bytecode to be altered from the point of the\r\n   * deployment of this contract.\r\n   */\r\n  constructor() public {\r\n    // Declare variable in order to put constants on the stack for hash checks.\r\n    address extcodehashTarget;\r\n\r\n    // Get Smart Wallet Upgrade Beacon Controller runtime code hash.\r\n    bytes32 smartWalletControllerHash;\r\n    extcodehashTarget = _SMART_WALLET_UPGRADE_BEACON_CONTROLLER;\r\n    assembly { smartWalletControllerHash := extcodehash(extcodehashTarget) }\r\n\r\n    // Get Smart Wallet Upgrade Beacon runtime code hash.\r\n    bytes32 smartWalletUpgradeBeaconHash;\r\n    extcodehashTarget = _DHARMA_SMART_WALLET_UPGRADE_BEACON;\r\n    assembly { smartWalletUpgradeBeaconHash := extcodehash(extcodehashTarget) }\r\n\r\n    // Get Adharma Smart Wallet implementation runtime code hash.\r\n    bytes32 adharmaSmartWalletHash;\r\n    extcodehashTarget = _ADHARMA_SMART_WALLET_IMPLEMENTATION;\r\n    assembly { adharmaSmartWalletHash := extcodehash(extcodehashTarget) }\r\n\r\n    // Get Key Ring Upgrade Beacon Controller runtime code hash.\r\n    bytes32 keyRingControllerHash;\r\n    extcodehashTarget = _KEY_RING_UPGRADE_BEACON_CONTROLLER;\r\n    assembly { keyRingControllerHash := extcodehash(extcodehashTarget) }\r\n\r\n    // Get Key Ring Upgrade Beacon runtime code hash.\r\n    bytes32 keyRingUpgradeBeaconHash;\r\n    extcodehashTarget = _DHARMA_KEY_RING_UPGRADE_BEACON;\r\n    assembly { keyRingUpgradeBeaconHash := extcodehash(extcodehashTarget) }\r\n\r\n    // Get Adharma Key Ring implementation runtime code hash.\r\n    bytes32 adharmaKeyRingHash;\r\n    extcodehashTarget = _ADHARMA_KEY_RING_IMPLEMENTATION;\r\n    assembly { adharmaKeyRingHash := extcodehash(extcodehashTarget) }\r\n\r\n    // Verify the runtime hashes of smart wallet and key ring upgrade contracts.\r\n    bool allRuntimeCodeHashesMatchExpectations = (\r\n      smartWalletControllerHash == bytes32(\r\n        0x6586626c057b68d99775ec4cae9aa5ce96907fb5f8d8c8046123f49f8ad93f1e\r\n      ) &&\r\n      smartWalletUpgradeBeaconHash == bytes32(\r\n        0xca51e36cf6ab9af9a6f019a923588cd6df58aa1e58f5ac1639da46931167e436\r\n      ) &&\r\n      adharmaSmartWalletHash == bytes32(\r\n        0xa8d641085d608420781e0b49768aa57d6e19dfeef227f839c33e2e00e2b8d82e\r\n      ) &&\r\n      keyRingControllerHash == bytes32(\r\n        0xb98d105738145a629aeea247cee5f12bb25eabc1040eb01664bbc95f0e7e8d39\r\n      ) &&\r\n      keyRingUpgradeBeaconHash == bytes32(\r\n        0xb65d03cdc199085ae86b460e897b6d53c08a6c6d436063ea29822ea80d90adc3\r\n      ) &&\r\n      adharmaKeyRingHash == bytes32(\r\n        0xc5a2c3124a4bf13329ce188ce5813ad643bedd26058ae22958f6b23962070949\r\n      )\r\n    );\r\n\r\n    // Ensure that the all of the runtime code hashes match expectations.\r\n    require(\r\n      allRuntimeCodeHashesMatchExpectations,\r\n      \"Runtime code hash of supplied upgradeability contracts is incorrect.\"\r\n    );\r\n\r\n    // Set up interface to check Indestructible registry for indestructibility.\r\n    IndestructibleRegistryCheckerInterface indestructible;\r\n    indestructible = IndestructibleRegistryCheckerInterface(\r\n      0x0000000000f55ff05D0080fE17A63b16596Fd59f\r\n    );\r\n\r\n    // Ensure that each specified upgradeability contract is indestructible.\r\n    require(\r\n      indestructible.isRegisteredAsIndestructible(\r\n        _SMART_WALLET_UPGRADE_BEACON_CONTROLLER\r\n      ) &&\r\n      indestructible.isRegisteredAsIndestructible(\r\n        _DHARMA_SMART_WALLET_UPGRADE_BEACON\r\n      ) &&\r\n      indestructible.isRegisteredAsIndestructible(\r\n        _ADHARMA_SMART_WALLET_IMPLEMENTATION\r\n      ) &&\r\n      indestructible.isRegisteredAsIndestructible(\r\n        _KEY_RING_UPGRADE_BEACON_CONTROLLER\r\n      ) &&\r\n      indestructible.isRegisteredAsIndestructible(\r\n        _DHARMA_KEY_RING_UPGRADE_BEACON\r\n      ) &&\r\n      indestructible.isRegisteredAsIndestructible(\r\n        _ADHARMA_KEY_RING_IMPLEMENTATION\r\n      ),\r\n      \"Supplied upgradeability contracts are not registered as indestructible.\"\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice Pure function to verify that this contract was successfully\r\n   * deployed.\r\n   */\r\n  function verified() external pure returns (bool ok) {\r\n    ok = true;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"verified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"DharmaUpgradeBeaconControllerManagerCreationVerifier","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://a8a274027147a33b9f548546588baed661aee00d4bd132699444f7a5c1adce79"}]}