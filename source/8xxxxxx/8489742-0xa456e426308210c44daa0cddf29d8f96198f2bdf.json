{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity-v1.12.0/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity-v1.12.0/contracts/ownership/Claimable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to set the pendingOwner address.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() public onlyPendingOwner {\r\n    emit OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n}\r\n\r\n// File: contracts/utils/Adminable.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n\r\n/**\r\n * @title Adminable.\r\n */\r\ncontract Adminable is Claimable {\r\n    address[] public adminArray;\r\n\r\n    struct AdminInfo {\r\n        bool valid;\r\n        uint256 index;\r\n    }\r\n\r\n    mapping(address => AdminInfo) public adminTable;\r\n\r\n    event AdminAccepted(address indexed _admin);\r\n    event AdminRejected(address indexed _admin);\r\n\r\n    /**\r\n     * @dev Reverts if called by any account other than one of the administrators.\r\n     */\r\n    modifier onlyAdmin() {\r\n        require(adminTable[msg.sender].valid, \"caller is illegal\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Accept a new administrator.\r\n     * @param _admin The administrator's address.\r\n     */\r\n    function accept(address _admin) external onlyOwner {\r\n        require(_admin != address(0), \"administrator is illegal\");\r\n        AdminInfo storage adminInfo = adminTable[_admin];\r\n        require(!adminInfo.valid, \"administrator is already accepted\");\r\n        adminInfo.valid = true;\r\n        adminInfo.index = adminArray.length;\r\n        adminArray.push(_admin);\r\n        emit AdminAccepted(_admin);\r\n    }\r\n\r\n    /**\r\n     * @dev Reject an existing administrator.\r\n     * @param _admin The administrator's address.\r\n     */\r\n    function reject(address _admin) external onlyOwner {\r\n        AdminInfo storage adminInfo = adminTable[_admin];\r\n        require(adminArray.length > adminInfo.index, \"administrator is already rejected\");\r\n        require(_admin == adminArray[adminInfo.index], \"administrator is already rejected\");\r\n        // at this point we know that adminArray.length > adminInfo.index >= 0\r\n        address lastAdmin = adminArray[adminArray.length - 1]; // will never underflow\r\n        adminTable[lastAdmin].index = adminInfo.index;\r\n        adminArray[adminInfo.index] = lastAdmin;\r\n        adminArray.length -= 1; // will never underflow\r\n        delete adminTable[_admin];\r\n        emit AdminRejected(_admin);\r\n    }\r\n\r\n    /**\r\n     * @dev Get an array of all the administrators.\r\n     * @return An array of all the administrators.\r\n     */\r\n    function getAdminArray() external view returns (address[] memory) {\r\n        return adminArray;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the total number of administrators.\r\n     * @return The total number of administrators.\r\n     */\r\n    function getAdminCount() external view returns (uint256) {\r\n        return adminArray.length;\r\n    }\r\n}\r\n\r\n// File: contracts/authorization/interfaces/IAuthorizationDataSource.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n/**\r\n * @title Authorization Data Source Interface.\r\n */\r\ninterface IAuthorizationDataSource {\r\n    /**\r\n     * @dev Get the authorized action-role of a wallet.\r\n     * @param _wallet The address of the wallet.\r\n     * @return The authorized action-role of the wallet.\r\n     */\r\n    function getAuthorizedActionRole(address _wallet) external view returns (bool, uint256);\r\n\r\n    /**\r\n     * @dev Get the trade-limit and trade-class of a wallet.\r\n     * @param _wallet The address of the wallet.\r\n     * @return The trade-limit and trade-class of the wallet.\r\n     */\r\n    function getTradeLimitAndClass(address _wallet) external view returns (uint256, uint256);\r\n}\r\n\r\n// File: contracts/authorization/AuthorizationDataSource.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n\r\n\r\n/**\r\n * Details of usage of licenced software see here: https://www.saga.org/software/readme_v1\r\n */\r\n\r\n/**\r\n * @title Authorization Data Source.\r\n */\r\ncontract AuthorizationDataSource is IAuthorizationDataSource, Adminable {\r\n    string public constant VERSION = \"1.0.0\";\r\n\r\n    uint256 public walletCount;\r\n\r\n    struct WalletInfo {\r\n        uint256 sequenceNum;\r\n        bool isWhitelisted;\r\n        uint256 actionRole;\r\n        uint256 tradeLimit;\r\n        uint256 tradeClass;\r\n    }\r\n\r\n    mapping(address => WalletInfo) public walletTable;\r\n\r\n    event WalletSaved(address indexed _wallet);\r\n    event WalletDeleted(address indexed _wallet);\r\n    event WalletNotSaved(address indexed _wallet);\r\n    event WalletNotDeleted(address indexed _wallet);\r\n\r\n    /**\r\n     * @dev Get the authorized action-role of a wallet.\r\n     * @param _wallet The address of the wallet.\r\n     * @return The authorized action-role of the wallet.\r\n     */\r\n    function getAuthorizedActionRole(address _wallet) external view returns (bool, uint256) {\r\n        WalletInfo storage walletInfo = walletTable[_wallet];\r\n        return (walletInfo.isWhitelisted, walletInfo.actionRole);\r\n    }\r\n\r\n    /**\r\n     * @dev Get the trade-limit and trade-class of a wallet.\r\n     * @param _wallet The address of the wallet.\r\n     * @return The trade-limit and trade-class of the wallet.\r\n     */\r\n    function getTradeLimitAndClass(address _wallet) external view returns (uint256, uint256) {\r\n        WalletInfo storage walletInfo = walletTable[_wallet];\r\n        return (walletInfo.tradeLimit, walletInfo.tradeClass);\r\n    }\r\n\r\n    /**\r\n     * @dev Insert or update a wallet.\r\n     * @param _wallet The address of the wallet.\r\n     * @param _sequenceNum The sequence-number of the operation.\r\n     * @param _isWhitelisted The authorization of the wallet.\r\n     * @param _actionRole The action-role of the wallet.\r\n     * @param _tradeLimit The trade-limit of the wallet.\r\n     * @param _tradeClass The trade-class of the wallet.\r\n     */\r\n    function upsertOne(address _wallet, uint256 _sequenceNum, bool _isWhitelisted, uint256 _actionRole, uint256 _tradeLimit, uint256 _tradeClass) external onlyAdmin {\r\n        _upsert(_wallet, _sequenceNum, _isWhitelisted, _actionRole, _tradeLimit, _tradeClass);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove a wallet.\r\n     * @param _wallet The address of the wallet.\r\n     */\r\n    function removeOne(address _wallet) external onlyAdmin {\r\n        _remove(_wallet);\r\n    }\r\n\r\n    /**\r\n     * @dev Insert or update a list of wallets with the same params.\r\n     * @param _wallets The addresses of the wallets.\r\n     * @param _sequenceNum The sequence-number of the operation.\r\n     * @param _isWhitelisted The authorization of all the wallets.\r\n     * @param _actionRole The action-role of all the the wallets.\r\n     * @param _tradeLimit The trade-limit of all the wallets.\r\n     * @param _tradeClass The trade-class of all the wallets.\r\n     */\r\n    function upsertAll(address[] _wallets, uint256 _sequenceNum, bool _isWhitelisted, uint256 _actionRole, uint256 _tradeLimit, uint256 _tradeClass) external onlyAdmin {\r\n        for (uint256 i = 0; i < _wallets.length; i++)\r\n            _upsert(_wallets[i], _sequenceNum, _isWhitelisted, _actionRole, _tradeLimit, _tradeClass);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove a list of wallets.\r\n     * @param _wallets The addresses of the wallets.\r\n     */\r\n    function removeAll(address[] _wallets) external onlyAdmin {\r\n        for (uint256 i = 0; i < _wallets.length; i++)\r\n            _remove(_wallets[i]);\r\n    }\r\n\r\n    /**\r\n     * @dev Insert or update a wallet.\r\n     * @param _wallet The address of the wallet.\r\n     * @param _sequenceNum The sequence-number of the operation.\r\n     * @param _isWhitelisted The authorization of the wallet.\r\n     * @param _actionRole The action-role of the wallet.\r\n     * @param _tradeLimit The trade-limit of the wallet.\r\n     * @param _tradeClass The trade-class of the wallet.\r\n     */\r\n    function _upsert(address _wallet, uint256 _sequenceNum, bool _isWhitelisted, uint256 _actionRole, uint256 _tradeLimit, uint256 _tradeClass) private {\r\n        require(_wallet != address(0), \"wallet is illegal\");\r\n        WalletInfo storage walletInfo = walletTable[_wallet];\r\n        if (walletInfo.sequenceNum < _sequenceNum) {\r\n            if (walletInfo.sequenceNum == 0) // increment the wallet-count only when a new wallet is inserted\r\n                walletCount += 1; // will never overflow because the number of different wallets = 2^160 < 2^256\r\n            walletInfo.sequenceNum = _sequenceNum;\r\n            walletInfo.isWhitelisted = _isWhitelisted;\r\n            walletInfo.actionRole = _actionRole;\r\n            walletInfo.tradeLimit = _tradeLimit;\r\n            walletInfo.tradeClass = _tradeClass;\r\n            emit WalletSaved(_wallet);\r\n        }\r\n        else {\r\n            emit WalletNotSaved(_wallet);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Remove a wallet.\r\n     * @param _wallet The address of the wallet.\r\n     */\r\n    function _remove(address _wallet) private {\r\n        require(_wallet != address(0), \"wallet is illegal\");\r\n        WalletInfo storage walletInfo = walletTable[_wallet];\r\n        if (walletInfo.sequenceNum > 0) { // decrement the wallet-count only when an existing wallet is removed\r\n            walletCount -= 1; // will never underflow because every decrement follows a corresponding increment\r\n            delete walletTable[_wallet];\r\n            emit WalletDeleted(_wallet);\r\n        }\r\n        else {\r\n            emit WalletNotDeleted(_wallet);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getAuthorizedActionRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"adminTable\",\"outputs\":[{\"name\":\"valid\",\"type\":\"bool\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallets\",\"type\":\"address[]\"}],\"name\":\"removeAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdminArray\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdminCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"adminArray\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_sequenceNum\",\"type\":\"uint256\"},{\"name\":\"_isWhitelisted\",\"type\":\"bool\"},{\"name\":\"_actionRole\",\"type\":\"uint256\"},{\"name\":\"_tradeLimit\",\"type\":\"uint256\"},{\"name\":\"_tradeClass\",\"type\":\"uint256\"}],\"name\":\"upsertOne\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"accept\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"reject\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallets\",\"type\":\"address[]\"},{\"name\":\"_sequenceNum\",\"type\":\"uint256\"},{\"name\":\"_isWhitelisted\",\"type\":\"bool\"},{\"name\":\"_actionRole\",\"type\":\"uint256\"},{\"name\":\"_tradeLimit\",\"type\":\"uint256\"},{\"name\":\"_tradeClass\",\"type\":\"uint256\"}],\"name\":\"upsertAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletTable\",\"outputs\":[{\"name\":\"sequenceNum\",\"type\":\"uint256\"},{\"name\":\"isWhitelisted\",\"type\":\"bool\"},{\"name\":\"actionRole\",\"type\":\"uint256\"},{\"name\":\"tradeLimit\",\"type\":\"uint256\"},{\"name\":\"tradeClass\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"removeOne\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getTradeLimitAndClass\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"WalletSaved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"WalletDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"WalletNotSaved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"WalletNotDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"AdminAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"AdminRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"AuthorizationDataSource","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"6000","ConstructorArguments":"","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://262cbe4a9e28b85f92b9b330bfbab5488042ceceb56c7990798d0e10a220bc2d"}]}