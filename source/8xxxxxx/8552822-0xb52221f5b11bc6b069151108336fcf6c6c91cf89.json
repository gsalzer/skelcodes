{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.10;\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract IERC223ReceivingContract {\r\n\r\n    /// @dev Standard ERC223 function that will handle incoming token transfers.\r\n    /// @param _from  Token sender address.\r\n    /// @param _value Amount of tokens.\r\n    /// @param _data  Transaction metadata.\r\n    function tokenFallback(address _from, uint _value, bytes memory _data) public;\r\n\r\n}\r\n\r\ncontract IDetherToken {\r\n    function mintingFinished() view public returns(bool);\r\n    function name() view public returns(string memory);\r\n    function approve(address _spender, uint256 _value) public returns(bool);\r\n    function totalSupply() view public returns(uint256);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool);\r\n    function decimals() view public returns(uint8);\r\n    function mint(address _to, uint256 _amount) public returns(bool);\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns(bool);\r\n    function balanceOf(address _owner) view public returns(uint256 balance);\r\n    function finishMinting() public returns(bool);\r\n    function owner() view public returns(address);\r\n    function symbol() view public returns(string memory);\r\n    function transfer(address _to, uint256 _value) public returns(bool);\r\n    function transfer(address _to, uint256 _value, bytes memory _data) public returns(bool);\r\n    function increaseApproval(address _spender, uint256 _addedValue) public returns(bool);\r\n    function allowance(address _owner, address _spender) view public returns(uint256);\r\n    function transferOwnership(address newOwner) public;\r\n}\r\n\r\n\r\n\r\ncontract TaxCollector is IERC223ReceivingContract, Ownable {\r\n\r\n    // Address where collected taxes are sent to\r\n    address public taxRecipient;\r\n    bool public unchangeable;\r\n    IDetherToken public dth;\r\n    // Daily tax rate (there are no floats in solidity)\r\n    event ReceivedTaxes(address indexed tokenFrom, uint taxes, address indexed from);\r\n\r\n    constructor (address _dth, address _taxRecipient) public {\r\n        dth = IDetherToken(_dth);\r\n        taxRecipient = _taxRecipient;\r\n    }\r\n\r\n    function unchangeableRecipient()\r\n      onlyOwner\r\n      external\r\n    {\r\n        unchangeable = true;\r\n    }\r\n\r\n    function changeRecipient(address _newRecipient)\r\n      external \r\n      onlyOwner\r\n    {\r\n        require(!unchangeable, 'Impossible to change the recipient');\r\n        taxRecipient = _newRecipient;\r\n    }\r\n\r\n    function collect()\r\n      public\r\n    {\r\n        uint balance = dth.balanceOf(address(this));\r\n        dth.transfer(taxRecipient, balance);\r\n    }\r\n\r\n    function tokenFallback(address _from, uint _value, bytes memory _data) \r\n      public\r\n    {\r\n      emit ReceivedTaxes(msg.sender, _value, _from);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"dth\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unchangeableRecipient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unchangeable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"taxRecipient\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRecipient\",\"type\":\"address\"}],\"name\":\"changeRecipient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"collect\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_dth\",\"type\":\"address\"},{\"name\":\"_taxRecipient\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenFrom\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"taxes\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"}],\"name\":\"ReceivedTaxes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TaxCollector","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000005adc961d6ac3f7062d2ea45fefb8d8167d44b1900000000000000000000000000000000000000000000000000000000000000000","Library":"","LicenseType":"None","SwarmSource":"bzzr://88a585b0220115db2ee9076c2772d1d197b5ed99a81826a4486e6ae52efe8056"}]}