{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.11; // optimization runs: 200, evm version: petersburg\r\n\r\n\r\ninterface ERC1271 {\r\n  function isValidSignature(\r\n    bytes calldata data, \r\n    bytes calldata signature\r\n  ) external view returns (bytes4 magicValue);\r\n}\r\n\r\n\r\ninterface DharmaKeyRegistryInterface {\r\n  function getKeyForUser(address account) external view returns (address key);\r\n}\r\n\r\n\r\nlibrary ECDSA {\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        if (signature.length != 65) {\r\n            return (address(0));\r\n        }\r\n\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := byte(0, mload(add(signature, 0x60)))\r\n        }\r\n\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            return address(0);\r\n        }\r\n\r\n        if (v != 27 && v != 28) {\r\n            return address(0);\r\n        }\r\n\r\n        return ecrecover(hash, v, r, s);\r\n    }\r\n\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title DharmaKeyRegistryV1Mimic\r\n * @author 0age\r\n * @notice This contract will require that the provided signature resolves to\r\n * the key set for a smart wallet on the Dharma Key Registry when it is set as\r\n * the address of a user's signing key.\r\n */\r\ncontract DharmaKeyRegistryV1Mimic is ERC1271 {\r\n  using ECDSA for bytes32;\r\n\r\n  // The Dharma Key Registry holds a public key for verifying meta-transactions.\r\n  DharmaKeyRegistryInterface internal constant _DHARMA_KEY_REGISTRY = (\r\n    DharmaKeyRegistryInterface(0x000000005D7065eB9716a410070Ee62d51092C98)\r\n  );\r\n\r\n  // ERC-1271 must return this magic value when `isValidSignature` is called.\r\n  bytes4 internal constant _ERC_1271_MAGIC_VALUE = bytes4(0x20c13b0b);\r\n\r\n  function isValidSignature(\r\n    bytes calldata data, bytes calldata signature\r\n  ) external view returns (bytes4 magicValue) {\r\n    (bytes32 hash, , ) = abi.decode(data, (bytes32, uint8, bytes));\r\n\r\n    require(\r\n      hash.recover(signature) == _DHARMA_KEY_REGISTRY.getKeyForUser(msg.sender),\r\n      \"Supplied signature does not resolve to the required signer.\"\r\n    );\r\n\r\n    magicValue = _ERC_1271_MAGIC_VALUE;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DharmaKeyRegistryV1Mimic","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://20202020446861726d614b6579526567697374727956314d696d696320202020"}]}