{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * SocialRemit.com\r\n * Stable Coin Algorithm: 1SREUR = 1EUR \r\n * Send ETH directly on contract address and get SREUR tokens!\r\n * Aprrove address of contract withdraw tokens from your account \r\n * And call sreur_change_on_eth function, get ETH on your account\r\n * Developer: Nechesov Andrey \r\n * Skype: Nechesov\r\n * Telegram: @nechesoff\r\n * Facebook: http://fb.com/nechesov \r\n*/\r\n\r\npragma solidity ^0.5.10;\r\n     \r\n  contract Stable {\r\n                  \r\n\r\n      using SafeMath for uint;      \r\n      \r\n      address c = 0x7a0e91c4204355e0A6bBf746dc0B7E32dFEFDecf; \r\n      address payable public address_for_tokens; \r\n      address payable public owner;                 \r\n      uint public etheur = 250;                 \r\n      uint public etheur_time = 1559918545;   \r\n      uint eth_min = 10**14;              \r\n      uint eth_max = 10**24;\r\n      uint procent = 5;\r\n\r\n      constructor() public{\r\n        owner = msg.sender;            \r\n        address_for_tokens = address(this);\r\n      }\r\n      \r\n      function() payable external{ \r\n\r\n          uint tnow = now;                                 \r\n          uint _amount_eth = msg.value;\r\n          address _address = msg.sender;\r\n          uint _amount = 0;\r\n\r\n          require (tnow < etheur_time + 86400*14);\r\n          require(_amount_eth >= eth_min);\r\n          require(_amount_eth < eth_max);\r\n\r\n          uint procent_final = 100-procent;\r\n          uint etheur_price = etheur.mul(procent_final).div(100);\r\n          \r\n          _amount = _amount_eth.mul(etheur_price).mul(10**8).div(10**18);          \r\n          \r\n          require(transfer(_address, _amount));        \r\n      }\r\n\r\n      function sreur_change_on_eth(uint _amount_tokens) public returns (bool) {\r\n\r\n          uint tnow = now; \r\n\r\n          require (tnow < etheur_time + 86400*14);                                \r\n\r\n          address  payable _address = msg.sender;\r\n          require(_amount_tokens >= 1);\r\n          require(_amount_tokens < 300000000);\r\n          uint _amount_eth = 0;\r\n\r\n          uint procent_final = 100+procent;\r\n          uint etheur_price = etheur.mul(procent_final).div(100);\r\n\r\n          _amount_eth = _amount_tokens.mul(10**8).mul(10**18).div(etheur_price.mul(10**8));\r\n\r\n          require(address(this).balance >= _amount_eth);\r\n\r\n          require(transfer_from(_address, address_for_tokens, _amount_tokens.mul(10**8)));\r\n\r\n          \r\n          _address.transfer(_amount_eth); \r\n\r\n          return true;\r\n      } \r\n\r\n      function add_money() onlyOwner payable public{ \r\n\r\n      }        \r\n      \r\n      function withdraw() onlyOwner public returns (bool) {\r\n          \r\n          owner.transfer(address(this).balance);\r\n          return true;\r\n      }\r\n\r\n      function withdraw_tokens(uint256 _amount) onlyOwner public returns (bool) {\r\n          \r\n          //require(c.call(bytes4(keccak256(\"transfer(address,uint256)\")), msg.sender, _amount.mul(10**8)));\r\n          address _address = msg.sender;\r\n          uint256 _amount_total = _amount.mul(10**8);\r\n          //require(c.call(abi.encodeWithSignature(\"transfer(address,uint256)\", _address, _amount_total)));        \r\n          (bool success,) = address(c).call(abi.encodeWithSignature(\"transfer(address,uint256)\", _address, _amount_total));                  \r\n          require(success);\r\n\r\n          return true;\r\n      }   \r\n\r\n      function set_etheur(uint _etheur) onlyOwner public returns (bool) {         \r\n          etheur = _etheur;\r\n          etheur_time = now;\r\n          return true;\r\n      }\r\n\r\n      function set_procent(uint _procent) onlyOwner public returns (bool) {         \r\n          procent = _procent;\r\n          return true;\r\n      }\r\n\r\n      function set_owner(address payable  _address) onlyOwner public returns (bool) {         \r\n          owner = _address;\r\n          return true;\r\n      }\r\n\r\n      function set_address_for_tokens(address payable _address) onlyOwner public returns (bool) {         \r\n          \r\n          address_for_tokens = _address;\r\n          return true;\r\n      }\r\n\r\n      function transfer(address _address,uint _amount) private returns (bool) {                 \r\n        \r\n        //require(c.call(bytes4(keccak256(\"transfer(address,uint256)\")), _address, _amount));        \r\n        (bool success,) = address(c).call(abi.encodeWithSignature(\"transfer(address,uint256)\", _address, _amount));        \r\n        require(success);\r\n        return true;\r\n      }\r\n\r\n      function transfer_from(address _address_from, address _address_to, uint _amount) private returns (bool) {                 \r\n        \r\n        //require(c.call(bytes4(keccak256(\"transferFrom(address,address,uint256)\")), _address_from, _address_to, _amount));        \r\n        (bool success,) = address(c).call(abi.encodeWithSignature(\"transferFrom(address,address,uint256)\", _address_from, _address_to, _amount));        \r\n        require(success);\r\n\r\n        return true;\r\n      }\r\n\r\n      modifier onlyOwner() {          \r\n\r\n          require (msg.sender == owner);\r\n          \r\n          _;\r\n      }\r\n\r\n }\r\n\r\n \r\n  library SafeMath {\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint) {      \r\n\r\n      uint c = a * b;\r\n      require(c / a == b);\r\n\r\n      return c;\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n      require(b > 0); \r\n      uint256 c = a / b;      \r\n\r\n      return c;\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n      require(b <= a);\r\n      uint c = a - b;\r\n\r\n      return c;\r\n    }\r\n\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n      uint c = a + b;\r\n      require(c >= a);\r\n\r\n      return c;\r\n    }\r\n\r\n    function mod(uint a, uint b) internal pure returns (uint) {\r\n      require(b != 0);\r\n      return a % b;\r\n    }\r\n    \r\n  }","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"etheur_time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_procent\",\"type\":\"uint256\"}],\"name\":\"set_procent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"set_address_for_tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"add_money\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"set_owner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"address_for_tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount_tokens\",\"type\":\"uint256\"}],\"name\":\"sreur_change_on_eth\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etheur\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_etheur\",\"type\":\"uint256\"}],\"name\":\"set_etheur\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw_tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Stable","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://32f12dfaf952bee8cee290f394a949412bab66fb38bea5f394d9d5b37ca2eeae"}]}