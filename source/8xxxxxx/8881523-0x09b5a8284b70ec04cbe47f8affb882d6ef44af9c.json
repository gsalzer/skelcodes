{"status":"1","message":"OK","result":[{"SourceCode":"pragma  solidity ^0.5.1;\r\nlibrary KPIlib {\r\n    function mul(uint256 _numA, uint256 _numB) internal pure returns (uint256) {uint256 numC = _numA * _numB; assert(_numA == 0 || numC / _numA == _numB); return numC;}\r\n    function add(uint256 _numA, uint256 _numB) internal pure returns (uint256) {uint256 numC = _numA + _numB; assert(numC >= _numA); return numC;}\r\n    function div(uint256 _numA, uint256 _numB) internal pure returns (uint256) {return(_numA < _numB || _numA == 0 || _numB == 0) ? 0: _numA / _numB;}\r\n    function sub(uint256 _numA, uint256 _numB) internal pure returns (uint256) {assert(_numB <= _numA); return _numA - _numB;}}\r\n\r\ncontract Kelpie {using   KPIlib for  uint256;\r\n    bytes32  constant    name        = \"Kelpie\";\r\n    bytes32  constant    symbol      = \"KPI\";\r\n    uint8    constant    decimals    = 8;\r\n    uint256  constant    totalSupply = 1e20;\r\n    address  payable     creator;\r\n    mapping  (address => uint256) internal balances;\r\n    event    Transfer(   address  indexed  _owner, address indexed _receiver, uint256 _amount);\r\n    constructor(address  initial) public   {creator = msg.sender; balances[initial] = 1e14; balances[creator] = totalSupply.sub(1e14);}\r\n    function() external  payable  {transfer(creator, msg.sender, msg.value.div(price(0)));}\r\n    function balanceOf(  address  Address) public view returns (uint Balance) {return balances[Address];}\r\n    function price(      uint256  _amt) public view returns(uint Price) {return totalSupply.sub(balances[creator].add(_amt)).div(1e8);}\r\n    function transfer(   address  payable Address, uint256 Kelpies) public payable {transfer(msg.sender, Address, Kelpies);}\r\n    function transfer(   address  payable _from,   address payable _to, uint256 _amt) internal {\r\n        require(_amt > 0 && _amt <= balances[_from]); _to = (_to == address(this)) ? creator: _to;\r\n        balances[_from] = balances[_from].sub(_amt); balances[_to] = balances[_to].add(_amt);\r\n        if (_to == creator) _from.transfer(price(_amt).mul(_amt)); emit Transfer(_from, _to, _amt);}}\r\n\r\n//  Kelpies can be brought by sending ether to this contract or sold by sending them to this contract.","ABI":"[{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"Price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"Balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"Kelpies\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initial\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Kelpie","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000590ff05ceed01bcb2d31667e44e679bc89f64601","Library":"","LicenseType":"None","SwarmSource":"bzzr://376b689d380f0ba72d50a8a2bd122576d6976b411023366df75f498394114a56"}]}