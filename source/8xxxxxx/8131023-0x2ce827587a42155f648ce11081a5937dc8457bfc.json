{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n// File: ERC20Interface.sol\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n// File: BVATokenHolder.sol\r\n\r\ncontract BVATokenHolder {\r\n    ERC20Interface erc20Contract;\r\n    address payable owner;\r\n    string public name;\r\n\r\n\r\n    modifier isOwner() {\r\n        require(msg.sender == owner, \"must be contract owner\");\r\n        _;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    constructor(ERC20Interface ctr, string memory _name) public {\r\n        erc20Contract = ctr;\r\n        owner         = msg.sender;\r\n        name          = _name;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Unlock Tokens\r\n    // ------------------------------------------------------------------------\r\n    function transferTokens(address to, uint amount) external isOwner {\r\n        erc20Contract.transfer(to, amount);\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Withdraw ETH from this contract to `owner`\r\n    // ------------------------------------------------------------------------\r\n    function withdrawEther(uint _amount) external isOwner {\r\n        owner.transfer(_amount);\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // accept ETH\r\n    // ------------------------------------------------------------------------\r\n    function () external payable {\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"ctr\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"BVATokenHolder","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000010d88d7495ca381df1391229bdb82d015b9ad17d0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000001145786368616e6765205265736572766573000000000000000000000000000000","Library":"","SwarmSource":"bzzr://e14059c7f120e2abd16d39d96b1492f6ba9cce42bb4bbf004f258bf71debd17c"}]}