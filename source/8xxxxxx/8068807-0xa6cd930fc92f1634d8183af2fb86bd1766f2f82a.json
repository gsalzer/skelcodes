{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/lib/interface/ICelerWallet.sol\r\n\r\npragma solidity ^0.5.1;\r\n\r\n/**\r\n * @title CelerWallet interface\r\n */\r\ninterface ICelerWallet {\r\n    function create(address[] calldata _owners, address _operator, bytes32 _nonce) external returns(bytes32);\r\n\r\n    function depositETH(bytes32 _walletId) external payable;\r\n\r\n    function depositERC20(bytes32 _walletId, address _tokenAddress, uint _amount) external;\r\n    \r\n    function withdraw(bytes32 _walletId, address _tokenAddress, address _receiver, uint _amount) external;\r\n\r\n    function transferToWallet(bytes32 _fromWalletId, bytes32 _toWalletId, address _tokenAddress, address _receiver, uint _amount) external;\r\n\r\n    function transferOperatorship(bytes32 _walletId, address _newOperator) external;\r\n\r\n    function proposeNewOperator(bytes32 _walletId, address _newOperator) external;\r\n\r\n    function drainToken(address _tokenAddress, address _receiver, uint _amount) external;\r\n\r\n    function getWalletOwners(bytes32 _walletId) external view returns(address[] memory);\r\n\r\n    function getOperator(bytes32 _walletId) external view returns(address);\r\n\r\n    function getBalance(bytes32 _walletId, address _tokenAddress) external view returns(uint);\r\n\r\n    function getProposedNewOperator(bytes32 _walletId) external view returns(address);\r\n\r\n    function getProposalVote(bytes32 _walletId, address _owner) external view returns(bool);\r\n\r\n    event CreateWallet(bytes32 indexed walletId, address[] indexed owners, address indexed operator);\r\n\r\n    event DepositToWallet(bytes32 indexed walletId, address indexed tokenAddress, uint amount);\r\n\r\n    event WithdrawFromWallet(bytes32 indexed walletId, address indexed tokenAddress, address indexed receiver, uint amount);\r\n\r\n    event TransferToWallet(bytes32 indexed fromWalletId, bytes32 indexed toWalletId, address indexed tokenAddress, address receiver, uint amount);\r\n\r\n    event ChangeOperator(bytes32 indexed walletId, address indexed oldOperator, address indexed newOperator);\r\n\r\n    event ProposeNewOperator(bytes32 indexed walletId, address indexed newOperator, address indexed proposer);\r\n\r\n    event DrainToken(address indexed tokenAddress, address indexed receiver, uint amount);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        require(token.transfer(to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        require(token.transferFrom(from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require((value == 0) || (token.allowance(msg.sender, spender) == 0));\r\n        require(token.approve(spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        require(token.approve(spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        require(token.approve(spender, newAllowance));\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/Roles.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev give an account access to this role\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(!has(role, account));\r\n\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove an account's access to this role\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(has(role, account));\r\n\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev check if an account has this role\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0));\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/roles/PauserRole.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract PauserRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event PauserAdded(address indexed account);\r\n    event PauserRemoved(address indexed account);\r\n\r\n    Roles.Role private _pausers;\r\n\r\n    constructor () internal {\r\n        _addPauser(msg.sender);\r\n    }\r\n\r\n    modifier onlyPauser() {\r\n        require(isPauser(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isPauser(address account) public view returns (bool) {\r\n        return _pausers.has(account);\r\n    }\r\n\r\n    function addPauser(address account) public onlyPauser {\r\n        _addPauser(account);\r\n    }\r\n\r\n    function renouncePauser() public {\r\n        _removePauser(msg.sender);\r\n    }\r\n\r\n    function _addPauser(address account) internal {\r\n        _pausers.add(account);\r\n        emit PauserAdded(account);\r\n    }\r\n\r\n    function _removePauser(address account) internal {\r\n        _pausers.remove(account);\r\n        emit PauserRemoved(account);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is PauserRole {\r\n    event Paused(address account);\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @return true if the contract is paused, false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() public onlyPauser whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() public onlyPauser whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n}\r\n\r\n// File: contracts/CelerWallet.sol\r\n\r\npragma solidity ^0.5.1;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title CelerWallet contract\r\n * @notice A multi-owner, multi-token, operator-centric wallet designed for CelerChannel.\r\n *   This wallet can run independetly and doesn't rely on trust of any external contracts\r\n *   even CelerLedger to maximize its security.\r\n */\r\ncontract CelerWallet is ICelerWallet, Pausable {\r\n    using SafeMath for uint;\r\n    using SafeERC20 for IERC20;\r\n\r\n    enum MathOperation { Add, Sub }\r\n\r\n    struct Wallet {\r\n        // corresponding to peers in CelerLedger\r\n        address[] owners;\r\n        // corresponding to CelerLedger\r\n        address operator;\r\n        // adderss(0) for ETH\r\n        mapping(address => uint) balances;\r\n        address proposedNewOperator;\r\n        mapping(address => bool) proposalVotes;\r\n    }\r\n\r\n    uint public walletNum;\r\n    mapping(bytes32 => Wallet) private wallets;\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the wallet's operator\r\n     * @param _walletId id of the wallet to be operated\r\n     */\r\n    modifier onlyOperator(bytes32 _walletId) {\r\n        require(msg.sender == wallets[_walletId].operator, \"msg.sender is not operator\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if given address is not an owner of the wallet\r\n     * @param _walletId id of the wallet to be operated\r\n     * @param _addr address to be checked\r\n     */\r\n    modifier onlyWalletOwner(bytes32 _walletId, address _addr) {\r\n        require(_isWalletOwner(_walletId, _addr), \"Given address is not wallet owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Create a new wallet\r\n     * @param _owners owners of the wallet\r\n     * @param _operator initial operator of the wallet\r\n     * @param _nonce nonce given by caller to generate the wallet id\r\n     * @return id of created wallet\r\n     */\r\n    function create(\r\n        address[] memory _owners,\r\n        address _operator,\r\n        bytes32 _nonce\r\n    )\r\n        public\r\n        whenNotPaused\r\n        returns(bytes32)\r\n    {\r\n        require(_operator != address(0), \"New operator is address(0)\");\r\n\r\n        bytes32 walletId = keccak256(abi.encodePacked(address(this), msg.sender, _nonce));\r\n        Wallet storage w = wallets[walletId];\r\n        // wallet must be uninitialized\r\n        require(w.operator == address(0), \"Occupied wallet id\");\r\n        w.owners = _owners;\r\n        w.operator = _operator;\r\n        walletNum++;\r\n\r\n        emit CreateWallet(walletId, _owners, _operator);\r\n        return walletId;\r\n    }\r\n\r\n    /**\r\n     * @notice Deposit ETH to a wallet\r\n     * @param _walletId id of the wallet to deposit into\r\n     */\r\n    function depositETH(bytes32 _walletId) public payable whenNotPaused {\r\n        uint amount = msg.value;\r\n        _updateBalance(_walletId, address(0), amount, MathOperation.Add);\r\n        emit DepositToWallet(_walletId, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Deposit ERC20 tokens to a wallet\r\n     * @param _walletId id of the wallet to deposit into\r\n     * @param _tokenAddress address of token to deposit\r\n     * @param _amount deposit token amount\r\n     */\r\n    function depositERC20(\r\n        bytes32 _walletId,\r\n        address _tokenAddress,\r\n        uint _amount\r\n    )\r\n        public\r\n        whenNotPaused\r\n    {\r\n        _updateBalance(_walletId, _tokenAddress, _amount, MathOperation.Add);\r\n        emit DepositToWallet(_walletId, _tokenAddress, _amount);\r\n\r\n        IERC20(_tokenAddress).safeTransferFrom(msg.sender, address(this), _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw funds to an address\r\n     * @dev Since this withdraw() function uses direct transfer to send ETH, if CelerLedger\r\n     *   allows non externally-owned account (EOA) to be a peer of the channel namely an owner\r\n     *   of the wallet, CelerLedger should implement a withdraw pattern for ETH to avoid\r\n     *   maliciously fund locking. Withdraw pattern reference:\r\n     *   https://solidity.readthedocs.io/en/v0.5.9/common-patterns.html#withdrawal-from-contracts\r\n     * @param _walletId id of the wallet to withdraw from\r\n     * @param _tokenAddress address of token to withdraw\r\n     * @param _receiver token receiver\r\n     * @param _amount withdrawal token amount\r\n     */\r\n    function withdraw(\r\n        bytes32 _walletId,\r\n        address _tokenAddress,\r\n        address _receiver,\r\n        uint _amount\r\n    )\r\n        public\r\n        whenNotPaused\r\n        onlyOperator(_walletId)\r\n        onlyWalletOwner(_walletId, _receiver)\r\n    {\r\n        _updateBalance(_walletId, _tokenAddress, _amount, MathOperation.Sub);\r\n        emit WithdrawFromWallet(_walletId, _tokenAddress, _receiver, _amount);\r\n\r\n        _withdrawToken(_tokenAddress, _receiver, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer funds from one wallet to another wallet with a same owner (as the receiver)\r\n     * @dev from wallet and to wallet must have one common owner as the receiver or beneficiary\r\n     *   of this transfer\r\n     * @param _fromWalletId id of wallet to transfer funds from\r\n     * @param _toWalletId id of wallet to transfer funds to\r\n     * @param _tokenAddress address of token to transfer\r\n     * @param _receiver beneficiary who transfers her funds from one wallet to another wallet\r\n     * @param _amount transferred token amount\r\n     */\r\n    function transferToWallet(\r\n        bytes32 _fromWalletId,\r\n        bytes32 _toWalletId,\r\n        address _tokenAddress,\r\n        address _receiver,\r\n        uint _amount\r\n    )\r\n        public\r\n        whenNotPaused\r\n        onlyOperator(_fromWalletId)\r\n        onlyWalletOwner(_fromWalletId, _receiver)\r\n        onlyWalletOwner(_toWalletId, _receiver)\r\n    {\r\n        _updateBalance(_fromWalletId, _tokenAddress, _amount, MathOperation.Sub);\r\n        _updateBalance(_toWalletId, _tokenAddress, _amount, MathOperation.Add);\r\n        emit TransferToWallet(_fromWalletId, _toWalletId, _tokenAddress, _receiver, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Current operator transfers the operatorship of a wallet to the new operator\r\n     * @param _walletId id of wallet to transfer the operatorship\r\n     * @param _newOperator the new operator\r\n     */\r\n    function transferOperatorship(\r\n        bytes32 _walletId,\r\n        address _newOperator\r\n    )\r\n        public\r\n        whenNotPaused\r\n        onlyOperator(_walletId)\r\n    {\r\n        _changeOperator(_walletId, _newOperator);\r\n    }\r\n\r\n    /**\r\n     * @notice Wallet owners propose and assign a new operator of their wallet\r\n     * @dev it will assign a new operator if all owners propose the same new operator.\r\n     *   This does not require unpaused.\r\n     * @param _walletId id of wallet which owners propose new operator of\r\n     * @param _newOperator the new operator proposal\r\n     */\r\n    function proposeNewOperator(\r\n        bytes32 _walletId,\r\n        address _newOperator\r\n    )\r\n        public\r\n        onlyWalletOwner(_walletId, msg.sender)\r\n    {\r\n        require(_newOperator != address(0), \"New operator is address(0)\");\r\n\r\n        Wallet storage w = wallets[_walletId];\r\n        if (_newOperator != w.proposedNewOperator) {\r\n            _clearVotes(w);\r\n            w.proposedNewOperator = _newOperator;\r\n        }\r\n\r\n        w.proposalVotes[msg.sender] = true;\r\n        emit ProposeNewOperator(_walletId, _newOperator, msg.sender);\r\n\r\n        if (_checkAllVotes(w)) {\r\n            _changeOperator(_walletId, _newOperator);\r\n            _clearVotes(w);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Pauser drains one type of tokens when paused\r\n     * @dev This is for emergency situations.\r\n     * @param _tokenAddress address of token to drain\r\n     * @param _receiver token receiver\r\n     * @param _amount drained token amount\r\n     */\r\n    function drainToken(\r\n        address _tokenAddress,\r\n        address _receiver,\r\n        uint _amount\r\n    )\r\n        public\r\n        whenPaused\r\n        onlyPauser\r\n    {\r\n        emit DrainToken(_tokenAddress, _receiver, _amount);\r\n\r\n        _withdrawToken(_tokenAddress, _receiver, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Get owners of a given wallet\r\n     * @param _walletId id of the queried wallet\r\n     * @return wallet's owners\r\n     */\r\n    function getWalletOwners(bytes32 _walletId) external view returns(address[] memory) {\r\n        return wallets[_walletId].owners;\r\n    }\r\n\r\n    /**\r\n     * @notice Get operator of a given wallet\r\n     * @param _walletId id of the queried wallet\r\n     * @return wallet's operator\r\n     */\r\n    function getOperator(bytes32 _walletId) public view returns(address) {\r\n        return wallets[_walletId].operator;\r\n    }\r\n\r\n    /**\r\n     * @notice Get balance of a given token in a given wallet\r\n     * @param _walletId id of the queried wallet\r\n     * @param _tokenAddress address of the queried token\r\n     * @return amount of the given token in the wallet\r\n     */\r\n    function getBalance(bytes32 _walletId, address _tokenAddress) public view returns(uint) {\r\n        return wallets[_walletId].balances[_tokenAddress];\r\n    }\r\n\r\n    /**\r\n     * @notice Get proposedNewOperator of a given wallet\r\n     * @param _walletId id of the queried wallet\r\n     * @return wallet's proposedNewOperator\r\n     */\r\n    function getProposedNewOperator(bytes32 _walletId) external view returns(address) {\r\n        return wallets[_walletId].proposedNewOperator;\r\n\r\n    }\r\n\r\n    /**\r\n     * @notice Get the vote of an owner for the proposedNewOperator of a wallet\r\n     * @param _walletId id of the queried wallet\r\n     * @param _owner owner to be checked\r\n     * @return the owner's vote for the proposedNewOperator\r\n     */\r\n    function getProposalVote(\r\n        bytes32 _walletId,\r\n        address _owner\r\n    )\r\n        external\r\n        view\r\n        onlyWalletOwner(_walletId, _owner)\r\n        returns(bool)\r\n    {\r\n        return wallets[_walletId].proposalVotes[_owner];\r\n    }\r\n\r\n    /**\r\n     * @notice Internal function to withdraw out one type of token\r\n     * @param _tokenAddress address of token to withdraw\r\n     * @param _receiver token receiver\r\n     * @param _amount withdrawal token amount\r\n     */\r\n    function _withdrawToken(address _tokenAddress, address _receiver, uint _amount) internal {\r\n        if (_tokenAddress == address(0)) {\r\n            // convert from address to address payable\r\n            // TODO: latest version of openzeppelin Address.sol provide this api toPayable()\r\n            address payable receiver  = address(uint160(_receiver));\r\n            receiver.transfer(_amount);\r\n        } else {\r\n            IERC20(_tokenAddress).safeTransfer(_receiver, _amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Update balance record\r\n     * @param _walletId id of wallet to update\r\n     * @param _tokenAddress address of token to update\r\n     * @param _amount update amount\r\n     * @param _op update operation\r\n     */\r\n    function _updateBalance(\r\n        bytes32 _walletId,\r\n        address _tokenAddress,\r\n        uint _amount,\r\n        MathOperation _op\r\n    )\r\n        internal\r\n    {\r\n        Wallet storage w = wallets[_walletId];\r\n        if (_op == MathOperation.Add) {\r\n            w.balances[_tokenAddress] = w.balances[_tokenAddress].add(_amount);\r\n        } else if (_op == MathOperation.Sub) {\r\n            w.balances[_tokenAddress] = w.balances[_tokenAddress].sub(_amount);\r\n        } else {\r\n            assert(false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Clear all votes of new operator proposals of the wallet\r\n     * @param _w the wallet\r\n     */\r\n    function _clearVotes(Wallet storage _w) internal {\r\n        for (uint i = 0; i < _w.owners.length; i++) {\r\n            _w.proposalVotes[_w.owners[i]] = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Internal function of changing the operator of a wallet\r\n     * @param _walletId id of wallet to change its operator\r\n     * @param _newOperator the new operator\r\n     */\r\n    function _changeOperator(bytes32 _walletId, address _newOperator) internal {\r\n        require(_newOperator != address(0), \"New operator is address(0)\");\r\n\r\n        Wallet storage w = wallets[_walletId];\r\n        address oldOperator = w.operator;\r\n        w.operator = _newOperator;\r\n        emit ChangeOperator(_walletId, oldOperator, _newOperator);\r\n    }\r\n\r\n    /**\r\n     * @notice Check if all owners have voted for the same new operator\r\n     * @param _w the wallet\r\n     * @return true if all owners have voted for a same operator; otherwise false\r\n     */\r\n    function _checkAllVotes(Wallet storage _w) internal view returns(bool) {\r\n        for (uint i = 0; i < _w.owners.length; i++) {\r\n            if (_w.proposalVotes[_w.owners[i]] == false) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Check if an address is an owner of a wallet\r\n     * @param _walletId id of wallet to check\r\n     * @param _addr address to check\r\n     * @return true if this address is an owner of the wallet; otherwise false\r\n     */\r\n    function _isWalletOwner(bytes32 _walletId, address _addr) internal view returns(bool) {\r\n        Wallet storage w = wallets[_walletId];\r\n        for (uint i = 0; i < w.owners.length; i++) {\r\n            if (_addr == w.owners[i]) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_owners\",\"type\":\"address[]\"},{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"create\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_walletId\",\"type\":\"bytes32\"}],\"name\":\"getProposedNewOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_walletId\",\"type\":\"bytes32\"}],\"name\":\"getWalletOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_walletId\",\"type\":\"bytes32\"},{\"name\":\"_newOperator\",\"type\":\"address\"}],\"name\":\"proposeNewOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_walletId\",\"type\":\"bytes32\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fromWalletId\",\"type\":\"bytes32\"},{\"name\":\"_toWalletId\",\"type\":\"bytes32\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferToWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_walletId\",\"type\":\"bytes32\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_walletId\",\"type\":\"bytes32\"},{\"name\":\"_newOperator\",\"type\":\"address\"}],\"name\":\"transferOperatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_walletId\",\"type\":\"bytes32\"}],\"name\":\"getOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"drainToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_walletId\",\"type\":\"bytes32\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_walletId\",\"type\":\"bytes32\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getProposalVote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_walletId\",\"type\":\"bytes32\"}],\"name\":\"depositETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"walletId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"owners\",\"type\":\"address[]\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"CreateWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"walletId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositToWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"walletId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawFromWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"fromWalletId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"toWalletId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferToWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"walletId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"oldOperator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"ChangeOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"walletId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"newOperator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"proposer\",\"type\":\"address\"}],\"name\":\"ProposeNewOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DrainToken\",\"type\":\"event\"}]","ContractName":"CelerWallet","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"byzantium","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://a267d9485b9aea3cd16e5d5b2dc6fc9eaf93731dd38628af3c5eebbf47de01e0"}]}