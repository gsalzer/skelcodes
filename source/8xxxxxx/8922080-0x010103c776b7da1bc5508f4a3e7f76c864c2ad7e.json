{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.7;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error.\r\n */\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor(address initialOwner) internal {\r\n        require(initialOwner != address(0));\r\n        _owner = initialOwner;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"New owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function balanceOf(address who) external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @title RefStorage interface\r\n */\r\ncontract RefStorage {\r\n    function changeContracts(address contractAddr) external;\r\n    function changePrize(uint256 newPrize) external;\r\n    function changeInterval(uint256 newInterval) external;\r\n    function newTicket() external;\r\n    function addReferrer(address referrer) external;\r\n    function sendBonus(address winner) external;\r\n    function withdrawERC20(address ERC20Token, address recipient) external;\r\n    function ticketsOf(address player) external view returns(uint256);\r\n    function referrerOf(address player) external view returns(address);\r\n    function transferOwnership(address newOwner) external;\r\n}\r\n\r\n/**\r\n * @title GoldRubleBonusStorage contract\r\n */\r\ncontract GoldRubleBonusStorage is Ownable {\r\n\r\n    IERC20 private _token;\r\n\r\n    RefStorage private _refStorage;\r\n\r\n    mapping (address => bool) admins;\r\n\r\n    modifier restricted {\r\n        require(admins[msg.sender] || isOwner());\r\n        _;\r\n    }\r\n\r\n    constructor(address token, address refStorageAddr, address initialOwner) public Ownable(initialOwner) {\r\n        _token = IERC20(token);\r\n        _refStorage = RefStorage(refStorageAddr);\r\n    }\r\n\r\n    function setAdmins(address account, bool state) public onlyOwner {\r\n        admins[account] = state;\r\n    }\r\n\r\n    function setToken(address token) public onlyOwner {\r\n        _token = IERC20(token);\r\n    }\r\n\r\n    function setRefStorage(address refStorageAddr) public onlyOwner {\r\n        _refStorage = RefStorage(refStorageAddr);\r\n    }\r\n\r\n    function sendBonus(address account, uint256 amount) public restricted {\r\n        _token.transfer(account, amount);\r\n    }\r\n\r\n    function withdrawERC20(address ERC20Token, address recipient) external onlyOwner {\r\n        uint256 amount = IERC20(ERC20Token).balanceOf(address(this));\r\n        IERC20(ERC20Token).transfer(recipient, amount);\r\n    }\r\n\r\n    //////// REFSTORAGE MANAGE METHODS ////////\r\n\r\n    function RS_transferOwnership(address newOwner) external onlyOwner {\r\n        _refStorage.transferOwnership(newOwner);\r\n    }\r\n\r\n    function RS_changeContracts(address contractAddr) external restricted {\r\n        _refStorage.changeContracts(contractAddr);\r\n    }\r\n\r\n    function RS_changePrize(uint256 newPrize) external restricted {\r\n        _refStorage.changePrize(newPrize);\r\n    }\r\n\r\n    function RS_changeInterval(uint256 newInterval) external restricted {\r\n        _refStorage.changeInterval(newInterval);\r\n    }\r\n\r\n    function RS_newTicket() external restricted {\r\n        _refStorage.newTicket();\r\n    }\r\n\r\n    function RS_addReferrer(address referrer) external restricted {\r\n        _refStorage.addReferrer(referrer);\r\n    }\r\n\r\n    function RS_sendBonus(address winner) external restricted {\r\n        _refStorage.sendBonus(winner);\r\n    }\r\n\r\n    function RS_withdrawERC20(address ERC20Token, address recipient) external restricted {\r\n        _refStorage.withdrawERC20(ERC20Token, recipient);\r\n    }\r\n\r\n    function RS_ticketsOf(address player) external view returns(uint256) {\r\n        _refStorage.ticketsOf(player);\r\n    }\r\n\r\n    function RS_referrerOf(address player) external view returns(address) {\r\n        _refStorage.referrerOf(player);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"RS_transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"RS_newTicket\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrize\",\"type\":\"uint256\"}],\"name\":\"RS_changePrize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddr\",\"type\":\"address\"}],\"name\":\"RS_changeContracts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setAdmins\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newInterval\",\"type\":\"uint256\"}],\"name\":\"RS_changeInterval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RS_referrerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RS_ticketsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"RS_addReferrer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ERC20Token\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ERC20Token\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"RS_withdrawERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"RS_sendBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"refStorageAddr\",\"type\":\"address\"}],\"name\":\"setRefStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"refStorageAddr\",\"type\":\"address\"},{\"name\":\"initialOwner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"GoldRubleBonusStorage","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000009f9efdd09e915c1950c5ca7252fa5c4f65ab049b000000000000000000000000978275d7652a35dc8df9ce6b62822aea6a97589d000000000000000000000000446b9bc432efe4f4b5dc318b9cc353b6dd815db0","Library":"","LicenseType":"None","SwarmSource":"bzzr://bee5c4f7eb011ef107786823119561ffef9e8fbb943c3df92b6a9df72efbe2fe"}]}