{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/Commission.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract Commission is Ownable {\r\n\tusing SafeMath for uint256;\r\n\r\n\taddress payable public wallet;\r\n\r\n\tconstructor(address payable _wallet) public {\r\n\t\trequire(_wallet != address(0), \"missing wallet\");\r\n\r\n\t\twallet = _wallet;\r\n\t}\r\n\r\n\t// Holdex wallet ===============================================================================\r\n\r\n\tevent HoldexWalletChanged(address indexed wallet);\r\n\r\n\tfunction changeHoldexWallet(address payable _wallet) external onlyOwner {\r\n\t\t// Inputs validation\r\n\t\trequire(_wallet != address(0), \"missing wallet\");\r\n\t\trequire(_wallet != wallet, \"wallets are the same\");\r\n\r\n\t\t// Change wallet\r\n\t\twallet = _wallet;\r\n\t\temit HoldexWalletChanged(_wallet);\r\n\t}\r\n\r\n\t// Customers ===================================================================================\r\n\r\n\tevent CustomerAdded(address indexed customer, address indexed wallet, uint256 commission);\r\n\tevent CustomerUpdated(address indexed customer, address indexed wallet, uint256 commission);\r\n\tevent CustomerRemoved(address indexed customer);\r\n\r\n\tmapping(address => Customer) public customers;\r\n\r\n\tstruct Customer {\r\n\t\taddress payable wallet;\r\n\t\tuint256 commissionPercent;\r\n\t\tmapping(bytes32 => Partner) partners;\r\n\t}\r\n\r\n\tfunction addCustomer(address _customer, address payable _wallet, uint256 _commissionPercent) external onlyOwner {\r\n\t\t// Inputs validation\r\n\t\trequire(_customer != address(0), \"missing customer address\");\r\n\t\trequire(_wallet != address(0), \"missing wallet address\");\r\n\t\trequire(_commissionPercent < 100, \"invalid commission percent\");\r\n\r\n\t\t// Check if customer already exists\r\n\t\tif (customers[_customer].wallet == address(0)) {\r\n\t\t\t// Customer does not exist, add it\r\n\t\t\tcustomers[_customer].wallet = _wallet;\r\n\t\t\tcustomers[_customer].commissionPercent = _commissionPercent;\r\n\t\t\temit CustomerAdded(_customer, _wallet, _commissionPercent);\r\n\t\t} else {\r\n\t\t\t// Customer already exists, update it\r\n\t\t\tcustomers[_customer].wallet = _wallet;\r\n\t\t\tcustomers[_customer].commissionPercent = _commissionPercent;\r\n\t\t\temit CustomerUpdated(_customer, _wallet, _commissionPercent);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction customerExists(address _customer) internal view {\r\n\t\trequire(customers[_customer].wallet != address(0), \"customer does not exist\");\r\n\t}\r\n\r\n\tfunction removeCustomer(address _customer) external onlyOwner {\r\n\t\t// Inputs validation\r\n\t\trequire(_customer != address(0), \"missing customer address\");\r\n\r\n\t\t// Check if customer exists\r\n\t\tcustomerExists(_customer);\r\n\r\n\t\t// Remove customer\r\n\t\tdelete customers[_customer];\r\n\t\temit CustomerRemoved(_customer);\r\n\t}\r\n\r\n\t// Partners ====================================================================================\r\n\r\n\tevent PartnerAdded(address indexed customer, bytes32 partner, address indexed wallet, uint256 commission);\r\n\tevent PartnerUpdated(address indexed customer, bytes32 partner, address indexed wallet, uint256 commission);\r\n\tevent PartnerRemoved(address indexed customer, bytes32 partner);\r\n\r\n\tstruct Partner {\r\n\t\taddress payable wallet;\r\n\t\tuint256 commissionPercent;\r\n\t}\r\n\r\n\tfunction addPartner(address _customer, bytes32 _partner, address payable _wallet, uint256 _commissionPercent) external onlyOwner {\r\n\t\t// Inputs validation\r\n\t\trequire(_customer != address(0), \"missing customer address\");\r\n\t\trequire(_partner[0] != 0, \"missing partner id\");\r\n\t\trequire(_wallet != address(0), \"missing wallet address\");\r\n\t\trequire(_commissionPercent > 0 && _commissionPercent < 100, \"invalid commission percent\");\r\n\r\n\t\t// Check if customer exists\r\n\t\tcustomerExists(_customer);\r\n\r\n\t\t// Check if partner already exists\r\n\t\tif (customers[_customer].partners[_partner].wallet == address(0)) {\r\n\t\t\t// Partner does not exist, add it\r\n\t\t\tcustomers[_customer].partners[_partner] = Partner(_wallet, _commissionPercent);\r\n\t\t\temit PartnerAdded(_customer, _partner, _wallet, _commissionPercent);\r\n\t\t} else {\r\n\t\t\t// Partner already exists, update it\r\n\t\t\tcustomers[_customer].partners[_partner].wallet = _wallet;\r\n\t\t\tcustomers[_customer].partners[_partner].commissionPercent = _commissionPercent;\r\n\t\t\temit PartnerUpdated(_customer, _partner, _wallet, _commissionPercent);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction removePartner(address _customer, bytes32 _partner) external onlyOwner {\r\n\t\t// Inputs validation\r\n\t\trequire(_customer != address(0), \"missing customer address\");\r\n\t\trequire(_partner[0] != 0, \"missing partner id\");\r\n\r\n\t\t// Check if customer exists\r\n\t\tcustomerExists(_customer);\r\n\t\t// Check if partner exists\r\n\t\trequire(customers[_customer].partners[_partner].wallet != address(0), \"partner does not exist\");\r\n\r\n\t\t// Remove partner\r\n\t\tdelete customers[_customer].partners[_partner];\r\n\t\temit PartnerRemoved(_customer, _partner);\r\n\t}\r\n\r\n\t// Transfer Funds ==============================================================================\r\n\r\n\tfunction transfer(bool holdex, bytes32[] calldata _partners) external payable {\r\n\t\t// Inputs validation\r\n\t\trequire(msg.value > 0, \"transaction value is 0\");\r\n\r\n\t\t// Check if customer exists\r\n\t\tcustomerExists(msg.sender);\r\n\r\n\t\t// Check if customer pays any commission\r\n\t\tif (customers[msg.sender].commissionPercent == 0 || !holdex && _partners.length == 0) {\r\n\t\t\t// No commission. Transfer all funds\r\n\t\t\tcustomers[msg.sender].wallet.transfer(msg.value);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Check if customer should pay some commission on this transaction\r\n\t\tif (holdex || _partners.length > 0) {\r\n\t\t\t// Commission applies. Calculate each's revenues\r\n\r\n\t\t\t// Customer revenue\r\n\t\t\tuint256 customerRevenue = msg.value.div(100).mul(100 - customers[msg.sender].commissionPercent);\r\n\t\t\t// Transfer revenue to customer\r\n\t\t\tcustomers[msg.sender].wallet.transfer(customerRevenue);\r\n\r\n\t\t\t// Calculate Holdex revenue\r\n\t\t\tuint256 holdexRevenue = msg.value.sub(customerRevenue);\r\n\t\t\tuint256 alreadySentPercent = 0;\r\n\t\t\t// Calculate partners revenues\r\n\t\t\tfor (uint256 i = 0; i < _partners.length; i++) {\r\n\t\t\t\tPartner memory p = customers[msg.sender].partners[_partners[i]];\r\n\t\t\t\trequire(p.commissionPercent > 0, \"invalid partner\");\r\n\r\n\t\t\t\t// Calculate partner revenue\r\n\t\t\t\tuint256 partnerRevenue = holdexRevenue.div(100 - alreadySentPercent).mul(p.commissionPercent);\r\n\t\t\t\tp.wallet.transfer(partnerRevenue);\r\n\r\n\t\t\t\t// Subtract partner revenue from Holdex revenue\r\n\t\t\t\talreadySentPercent = alreadySentPercent.add(p.commissionPercent);\r\n\t\t\t\tholdexRevenue = holdexRevenue.sub(partnerRevenue);\r\n\t\t\t}\r\n\r\n\t\t\trequire(holdexRevenue > 0, \"holdex revenue is 0\");\r\n\t\t\t// Transfer Holdex remained revenue\r\n\t\t\twallet.transfer(holdexRevenue);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\trevert(\"can not transfer\");\r\n\t}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"changeHoldexWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"customers\",\"outputs\":[{\"name\":\"wallet\",\"type\":\"address\"},{\"name\":\"commissionPercent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"holdex\",\"type\":\"bool\"},{\"name\":\"_partners\",\"type\":\"bytes32[]\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_customer\",\"type\":\"address\"}],\"name\":\"removeCustomer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_customer\",\"type\":\"address\"},{\"name\":\"_partner\",\"type\":\"bytes32\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_commissionPercent\",\"type\":\"uint256\"}],\"name\":\"addPartner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_customer\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_commissionPercent\",\"type\":\"uint256\"}],\"name\":\"addCustomer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_customer\",\"type\":\"address\"},{\"name\":\"_partner\",\"type\":\"bytes32\"}],\"name\":\"removePartner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"HoldexWalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"commission\",\"type\":\"uint256\"}],\"name\":\"CustomerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"commission\",\"type\":\"uint256\"}],\"name\":\"CustomerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customer\",\"type\":\"address\"}],\"name\":\"CustomerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"partner\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"commission\",\"type\":\"uint256\"}],\"name\":\"PartnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"partner\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"commission\",\"type\":\"uint256\"}],\"name\":\"PartnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"partner\",\"type\":\"bytes32\"}],\"name\":\"PartnerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Commission","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c76d7edddd230b7418fd22ac497d3ce97a2aceb0","Library":"","SwarmSource":"bzzr://719669f2cd0cf418bdb9a625eaa9e7f8d49c2fe1c963c8d7fb3caea1bc718722"}]}