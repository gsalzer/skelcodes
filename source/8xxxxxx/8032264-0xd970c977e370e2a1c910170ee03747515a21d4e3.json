{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     * @notice Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IWhitelistable.sol\r\n\r\npragma solidity 0.5.4;\r\n\r\n\r\ninterface IWhitelistable {\r\n    event Whitelisted(address account);\r\n    event Unwhitelisted(address account);\r\n\r\n    function isWhitelisted(address account) external returns (bool);\r\n    function whitelist(address account) external;\r\n    function unwhitelist(address account) external;\r\n    function isModerator(address account) external view returns (bool);\r\n    function renounceModerator() external;\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/Roles.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev give an account access to this role\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(!has(role, account));\r\n\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove an account's access to this role\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(has(role, account));\r\n\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev check if an account has this role\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0));\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: contracts/roles/ModeratorRole.sol\r\n\r\npragma solidity 0.5.4;\r\n\r\n\r\n\r\n// @notice Moderators are able to modify whitelists and transfer permissions in Moderator contracts.\r\ncontract ModeratorRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event ModeratorAdded(address indexed account);\r\n    event ModeratorRemoved(address indexed account);\r\n\r\n    Roles.Role internal _moderators;\r\n\r\n    modifier onlyModerator() {\r\n        require(isModerator(msg.sender), \"Only Moderators can execute this function.\");\r\n        _;\r\n    }\r\n\r\n    constructor() internal {\r\n        _addModerator(msg.sender);\r\n    }\r\n\r\n    function isModerator(address account) public view returns (bool) {\r\n        return _moderators.has(account);\r\n    }\r\n\r\n    function addModerator(address account) public onlyModerator {\r\n        _addModerator(account);\r\n    }\r\n\r\n    function renounceModerator() public {\r\n        _removeModerator(msg.sender);\r\n    }    \r\n\r\n    function _addModerator(address account) internal {\r\n        _moderators.add(account);\r\n        emit ModeratorAdded(account);\r\n    }    \r\n\r\n    function _removeModerator(address account) internal {\r\n        _moderators.remove(account);\r\n        emit ModeratorRemoved(account);\r\n    }\r\n}\r\n\r\n// File: contracts/rewards/BatchWhitelister.sol\r\n\r\npragma solidity 0.5.4;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @notice Enables batching transactions for Rewards whitelisting\r\n */\r\ncontract BatchWhitelister is ModeratorRole, Ownable {\r\n  event BatchWhitelisted(address indexed from, uint accounts);\r\n  event BatchUnwhitelisted(address indexed from, uint accounts);\r\n\r\n  IWhitelistable public rewards; // The contract which implements IWhitelistable\r\n\r\n  constructor(IWhitelistable _contract) public {\r\n      rewards = _contract;\r\n  }\r\n\r\n  function batchWhitelist(address[] memory accounts) public onlyModerator {\r\n    bool isModerator = rewards.isModerator(address(this));\r\n    require(isModerator, 'This contract is not a moderator.');\r\n\r\n    emit BatchWhitelisted(msg.sender, accounts.length);\r\n    for (uint i = 0; i < accounts.length; i++) {\r\n      rewards.whitelist(accounts[i]);\r\n    }\r\n  }\r\n\r\n  function batchUnwhitelist(address[] memory accounts) public onlyModerator {\r\n    bool isModerator = rewards.isModerator(address(this));\r\n    require(isModerator, 'This contract is not a moderator.');\r\n\r\n    emit BatchUnwhitelisted(msg.sender, accounts.length);\r\n    for (uint i = 0; i < accounts.length; i++) {\r\n      rewards.unwhitelist(accounts[i]);\r\n    }\r\n  }\r\n\r\n  function disconnect() public onlyOwner {\r\n    rewards.renounceModerator();\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"renounceModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"batchWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disconnect\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isModerator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"batchUnwhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"accounts\",\"type\":\"uint256\"}],\"name\":\"BatchWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"accounts\",\"type\":\"uint256\"}],\"name\":\"BatchUnwhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ModeratorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ModeratorRemoved\",\"type\":\"event\"}]","ContractName":"BatchWhitelister","CompilerVersion":"v0.5.4+commit.9549d8ff","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f5d49387ecfa36bd2bf047d9e72344a2b3afbb72","Library":"","SwarmSource":"bzzr://5ad9277cabc110821fce27d4ed74877f5acc8a57977bc381688b2fd85ddb0e5f"}]}