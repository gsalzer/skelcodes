{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.12;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary Address {\r\n    /**\r\n     * Returns whether the target address is a contract\r\n     * @dev This function will return false if invoked during the constructor of a contract,\r\n     * as the code is not actually created until after the constructor finishes.\r\n     * @param account address of the account to check\r\n     * @return whether the target address is a contract\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // XXX Currently there is no better way to check if there is a contract in an address\r\n        // than to check the size of the code at that address.\r\n        // See https://ethereum.stackexchange.com/a/14016/36603\r\n        // for more details about how this works.\r\n        // TODO Check this again before the Serenity release, because all addresses will be\r\n        // contracts then.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids\r\n *\r\n * Include with `using Counter for Counter.Counter;`\r\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the SafeMath\r\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\r\n * directly accessed.\r\n */\r\nlibrary Counters {\r\n    using SafeMath for uint256;\r\n\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n    \r\n    function set(Counter storage counter, uint256 value) internal returns (uint256) {\r\n        counter._value = value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        counter._value += 1;\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        counter._value = counter._value.sub(1);\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ncontract IERC721Receiver {\r\n    /**\r\n     * @notice Handle the receipt of an NFT\r\n     * @dev The ERC721 smart contract calls this function on the recipient\r\n     * after a `safeTransfer`. This function MUST return the function selector,\r\n     * otherwise the caller will revert the transaction. The selector to be\r\n     * returned can be obtained as `this.onERC721Received.selector`. This\r\n     * function MAY throw to revert and reject the transfer.\r\n     * Note: the ERC721 contract address is always the message sender.\r\n     * @param operator The address which called `safeTransferFrom` function\r\n     * @param from The address which previously owned the token\r\n     * @param tokenId The NFT identifier which is being transferred\r\n     * @param data Additional data with no specified format\r\n     * @return bytes4 `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n     */\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\r\n    public returns (bytes4);\r\n}\r\n\r\n/**\r\n * @title CryptoTitties Implementation of ERC721\r\n * @dev ERC721, ERC721Meta plus custom market implementation.\r\n */\r\ncontract CryptoTitties {\r\n\r\n    using SafeMath for uint;\r\n    using Address for address;\r\n    using Counters for Counters.Counter;\r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // Contract ownership\r\n    // ----------------------------------------------------------------------------\r\n    \r\n    // - variables\r\n    address public _ownershipOwner;\r\n    address public _ownershipNewOwner;\r\n    \r\n    // - events\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n    \r\n    // - modifiers\r\n    modifier onlyOwner {\r\n        require(msg.sender == _ownershipOwner, \"Only contract owner is allowed.\");\r\n        _;\r\n    }\r\n\r\n    // - functions\r\n\r\n\r\n    /**\r\n     * @notice Initialize contract ownership transfer\r\n     * @dev This function can be called only by current contract owner, \r\n     * to initialize ownership transfer to other address.\r\n     * @param newOwner The address of desired new owner\r\n     */\r\n    function ownershipTransfer(address newOwner) public onlyOwner {\r\n        _ownershipNewOwner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @notice Finish contract ownership transfer\r\n     * @dev This function can be called only by new contract owner, \r\n     * to accept ownership transfer.\r\n     */\r\n    function ownershipAccept() public {\r\n        require(msg.sender == _ownershipNewOwner, \"Only new contract owner is allowed to accept.\");\r\n        emit OwnershipTransferred(_ownershipOwner, _ownershipNewOwner);\r\n        _ownershipOwner = _ownershipNewOwner;\r\n        _ownershipNewOwner = address(0);\r\n    }\r\n    \r\n    \r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // ERC165\r\n    // ----------------------------------------------------------------------------\r\n    \r\n    // - variables\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n    \r\n    // - functions\r\n    function _registerInterface(bytes4 interfaceId) internal {\r\n        require(interfaceId != 0xffffffff);\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n    \r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // ERC721\r\n    // based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721.sol\r\n    // ----------------------------------------------------------------------------\r\n   \r\n    // - variables\r\n\r\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\r\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\r\n\r\n    // Mapping from token ID to owner\r\n    mapping (uint256 => address) private _tokenOwner;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping (uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to number of owned token\r\n    mapping (address => Counters.Counter) private _ownedTokensCount;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\r\n\r\n    /*\r\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\r\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\r\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\r\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\r\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\r\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\r\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\r\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\r\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\r\n     *\r\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\r\n     *        0xa22cb465 ^ 0xe985e9c ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\r\n    \r\n\r\n    // - events\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n    \r\n\r\n\t// - functions\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param owner address to query the balance of\r\n     * @return uint256 representing the amount owned by the passed address\r\n     */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        require(owner != address(0));\r\n        return _ownedTokensCount[owner].current();\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the owner of the specified token ID.\r\n     * @param tokenId uint256 ID of the token to query the owner of\r\n     * @return address currently marked as the owner of the given token ID\r\n     */\r\n    function ownerOf(uint256 tokenId) public view returns (address) {\r\n        require(_exists(tokenId), \"Token does not exists.\");\r\n        return _ownerOf(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approves another address to transfer the given token ID\r\n     * The zero address indicates there is no approved address.\r\n     * There can only be one approved address per token at a given time.\r\n     * Can only be called by the token owner or an approved operator.\r\n     * @param to address to be approved for the given token ID\r\n     * @param tokenId uint256 ID of the token to be approved\r\n     */\r\n    function approve(address to, uint256 tokenId) public {\r\n        address owner = _ownerOf(tokenId);\r\n        require(to != owner);\r\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(owner, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the approved address for a token ID, or zero if no address set\r\n     * Reverts if the token ID does not exist.\r\n     * @param tokenId uint256 ID of the token to query the approval of\r\n     * @return address currently approved for the given token ID\r\n     */\r\n    function getApproved(uint256 tokenId) public view returns (address) {\r\n        require(_exists(tokenId));\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev Sets or unsets the approval of a given operator\r\n     * An operator is allowed to transfer all tokens of the sender on their behalf.\r\n     * @param to operator address to set the approval\r\n     * @param approved representing the status of the approval to be set\r\n     */\r\n    function setApprovalForAll(address to, bool approved) public {\r\n        require(to != msg.sender);\r\n        _operatorApprovals[msg.sender][to] = approved;\r\n        emit ApprovalForAll(msg.sender, to, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Tells whether an operator is approved by a given owner.\r\n     * @param owner owner address which you want to query the approval of\r\n     * @param operator operator address which you want to query the approval of\r\n     * @return bool whether the given operator is approved by the given owner\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers the ownership of a given token ID to another address.\r\n     * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     * Requires the msg.sender to be the owner, approved, or operator.\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) public {\r\n        require(_isApprovedOrOwner(msg.sender, tokenId));\r\n\t\trequire(!_marketOfferExists(tokenId), \"Token is offered on market can't be transfered.\");\r\n        require(!_marketAuctionExists(tokenId), \"Token is in auction can't be transfered.\");\r\n        \r\n        _transferFrom(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers the ownership of a given token ID to another address\r\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\r\n     * which is called upon a safe transfer, and return the magic value\r\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n     * the transfer is reverted.\r\n     * Requires the msg.sender to be the owner, approved, or operator\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers the ownership of a given token ID to another address\r\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\r\n     * which is called upon a safe transfer, and return the magic value\r\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n     * the transfer is reverted.\r\n     * Requires the _msgSender() to be the owner, approved, or operator\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes data to send along with a safe transfer check\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\r\n        transferFrom(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data));\r\n    }\r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // ERC721 Meta\r\n    // based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721Metadata.sol\r\n    // ----------------------------------------------------------------------------\r\n    \r\n\r\n    // - variables\r\n\r\n    // Token name\r\n    string private _name;\r\n    \r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Base uri to generate tokenURI\r\n    string private _baseTokenURI;\r\n\r\n    //hash to prove token images not changes in time\r\n    string private _imagesJsonHash;\r\n\r\n    /*\r\n     *     bytes4(keccak256('name()')) == 0x06fdde03\r\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\r\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\r\n     *\r\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\r\n    \r\n\r\n    // - functions \r\n\r\n    /**\r\n     * @dev Gets the token name.\r\n     * @return string representing the token name\r\n     */\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the token symbol.\r\n     * @return string representing the token symbol\r\n     */\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an URI for a given token ID.\r\n     * Throws if the token ID does not exist.\r\n     * @param tokenId uint256 ID of the token to query\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory) {\r\n        require(_exists(tokenId));\r\n        return string(abi.encodePacked(_baseTokenURI, uint2str(tokenId)));\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns saved hash.\r\n     * Throws if the token ID does not exist.\r\n     */\r\n    function imagesJsonHash() external view returns (string memory){\r\n    \treturn _imagesJsonHash;\r\n    }\r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // ERC721 Meta Total suply\r\n    // added totalSuply functionality\r\n    // ----------------------------------------------------------------------------\r\n    \r\n    // - vars\r\n\r\n    //total suply\r\n    uint256 private _totalSupply;\r\n    \r\n    // - functions\r\n\r\n    /**\r\n     * @dev Returns totalSupply.\r\n     */\r\n    function totalSupply() public view returns (uint256 _supply) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // Build In Market\r\n    // ----------------------------------------------------------------------------    \r\n    \r\n    // - types     \r\n\r\n    /**\r\n    * @title MarketOffer\r\n    * @dev Stores information about token market offer.\r\n    */\r\n    struct MarketOffer {\r\n        bool isOffer;\r\n        address owner;\r\n        uint256 price;\r\n    }\r\n\r\n    /**\r\n    * @title MarketAuction\r\n    * @dev Stores information about token market auction.\r\n    */\r\n    struct MarketAuction {\r\n        bool isAuction;\r\n        address highestBidder;\r\n        uint256 highestBid;\r\n        uint256 initPrice;\r\n        uint endTime;\r\n    }\r\n    \r\n    // - variables\r\n\r\n    // Mapping from token ID to MarketOffer\r\n    mapping (uint256 => MarketOffer) private _marketOffers;\r\n\r\n    // Mapping from token ID to MarketAuction\r\n    mapping (uint256 => MarketAuction) private _marketAuctions;\r\n\r\n    // Mapping from address to marketBalance (ETH)\r\n    mapping (address => uint256) private _marketBalances;\r\n\r\n    //Mapping from token ID to First owner of token\r\n    mapping (uint256 => address) private _tokenFirstOwner;\r\n\r\n    //Address allowed to place tokens owned by contract to auction\r\n    address private _auctionsAddress;\r\n\r\n    //Address allowed to gift (transfer) tokens owned by contract\r\n    address private _giftsAddress;\r\n    \r\n    // - events \r\n    event MarketOfferCreated(address indexed _from, uint256 _tokenId, uint256 _price);\r\n    event MarketOfferRemoved(address indexed _from, uint256 _tokenId);\r\n    event MarketOfferSold(address indexed _owner, address indexed _buyer, uint256 _tokenId, uint256 _price);\r\n    event MarketAuctionCreated(uint256 _tokenId, uint256 _initPrice, uint256 _starttime, uint256 _endtime);\r\n    event MarketAuctionBid(uint256 _tokenId, uint256 _bid, address _bidder, address _old_bidder); \r\n    event MarketAuctionClaimed(uint256 _tokenId, uint256 _bid, address _bidder); \r\n    \r\n    // - functions\r\n\r\n    /**\r\n     * @dev Sets new _auctionsAddress allowed to place tokens owned by \r\n     * contract to auction.\r\n     * Requires the msg.sender to be the contract owner\r\n     * @param auctionsAddress new _auctionsAddress\r\n     */\r\n    function setAuctionAddress(address auctionsAddress) public onlyOwner {\r\n        _auctionsAddress = auctionsAddress;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets new _giftsAddress allowed to place tokens owned by \r\n     * contract to auction.\r\n     * Requires the msg.sender to be the contract owner\r\n     * @param giftsAddress new _giftsAddress\r\n     */\r\n    function setGiftsAddress(address giftsAddress) public onlyOwner {\r\n        _giftsAddress = giftsAddress;\r\n    }\r\n    \r\n    /**\r\n     * @dev Gets token market price, returns 0 for tokens not on market.\r\n     * Requires token existence\r\n     * @param _tokenId uint256 ID of the token\r\n     */\r\n    function marketOfferGetTokenPrice(uint256 _tokenId) public view returns (uint256 _price) {\r\n        require(_exists(_tokenId), \"Token does not exists.\");\r\n        return _marketOfferGetTokenPrice(_tokenId);\r\n    }\r\n    \r\n    /**\r\n     * @dev Gets token market price, returns 0 for tokens not on market.\r\n     * Internal implementation. For tokens owned by address(0), gets token \r\n     * not from price _marketOffers[_tokenId], but from function \r\n     * _countBasePrice(_tokenId)\r\n     * @param _tokenId uint256 ID of the token\r\n     */\r\n    function _marketOfferGetTokenPrice(uint256 _tokenId) private view returns (uint256 _price) {\r\n        if(_tokenOwner[_tokenId]==address(0)){\r\n            return _countBasePrice(_tokenId);\r\n        }\r\n        return _marketOffers[_tokenId].price;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whatever token is offered on market or not.\r\n     * Requires token existence\r\n     * @param _tokenId uint256 ID of the token\r\n     */\r\n    function marketOfferExists(uint256 _tokenId) public view returns (bool) {\r\n        require(_exists(_tokenId), \"Token does not exists.\");\r\n        \r\n        return _marketOfferExists(_tokenId);\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns whatever token is offered on market or not.\r\n     * Internal implementation. For tokens owned by address(0), gets token \r\n     * not from price _marketOffers[_tokenId], but from function \r\n     * _baseIsOnMarket(_tokenId)\r\n     * @param _tokenId uint256 ID of the token\r\n     */\r\n    function _marketOfferExists(uint256 _tokenId) private view returns (bool) {\r\n\r\n        if(_tokenOwner[_tokenId]==address(0)){\r\n            return _baseIsOnMarket(_tokenId);\r\n        }\r\n\r\n        return _marketOffers[_tokenId].isOffer;\r\n    }\r\n\r\n    /**\r\n     * @dev Places token on internal market.\r\n     * Requires token existence. Requires token not offered and not in auction.\r\n     * Requires owner of token == msg.sender\r\n     * @param _tokenId uint256 ID of the token\r\n     * @param _price uint256 token price\r\n     */\r\n    function marketOfferCreate(uint256 _tokenId, uint256 _price) public {\r\n        require(_exists(_tokenId), \"Token does not exists.\");\r\n        require(!_marketOfferExists(_tokenId), \"Token is allready offered.\");\r\n        require(!_marketAuctionExists(_tokenId), \"Token is allready in auction.\");\r\n\r\n        address _owner = _ownerOf(_tokenId);\r\n\r\n        require(_owner==msg.sender, \"Sender is not authorized.\");\r\n\r\n        _marketOffers[_tokenId].isOffer = true;\r\n        _marketOffers[_tokenId].owner = _owner;\r\n        _marketOffers[_tokenId].price = _price;\r\n        \r\n        if(_tokenOwner[_tokenId]==address(0)){\r\n        \t_tokenOwner[_tokenId] = _owner;\r\n        }\r\n\r\n        emit MarketOfferCreated(_owner, _tokenId, _price);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes token from internal market.\r\n     * Requires token existence. Requires token is offered .\r\n     * Requires owner of token == msg.sender\r\n     * @param _tokenId uint256 ID of the token\r\n     */\r\n    function marketOfferRemove(uint256 _tokenId) public {\r\n        require(_exists(_tokenId), \"Token does not exists.\");\r\n\r\n        address _owner = _ownerOf(_tokenId);\r\n\r\n        require(_owner==msg.sender, \"Sender is not authorized.\");\r\n        require(_marketOfferExists(_tokenId), \"Token is not offered.\");\r\n\r\n        _marketOffers[_tokenId].isOffer = false;\r\n        _marketOffers[_tokenId].owner = address(0);\r\n        _marketOffers[_tokenId].price = 0;\r\n        \r\n        if(_tokenOwner[_tokenId]==address(0)){\r\n        \t_tokenOwner[_tokenId] = _owner;\r\n        }\r\n\r\n        //marketOffers[_tokenId] = MarketOffer(false, address(0),0);  \r\n        emit MarketOfferRemoved(_owner, _tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Buy token from internal market.\r\n     * Requires token existence. Requires token is offered.\r\n     * Requires owner of msg.value >= token price. \r\n     * @param _tokenId uint256 ID of the token\r\n     */\r\n    function marketOfferBuy(uint256 _tokenId) public payable {\r\n        require(_exists(_tokenId), \"Token does not exists.\");\r\n        require(_marketOfferExists(_tokenId), \"Token is not offered.\");\r\n\r\n        \r\n        uint256 _price =  _marketOfferGetTokenPrice(_tokenId);\r\n        uint256 _finalprice = _price;\r\n        uint256 _payed = msg.value;\r\n        address _buyer = msg.sender;\r\n        address _owner = _ownerOf(_tokenId);\r\n        uint256 fee_price = 0;\r\n        uint256 charger_fee = 0;\r\n        uint256 charity_fee = 0;\r\n        uint256 charity_price = 0;\r\n\r\n        require(_price<=_payed, \"Payed price is lower than market price.\");\r\n        \r\n        //return balance to buyer if send more than price\r\n        if(_payed>_price){\r\n            _marketBalances[_buyer] = _marketBalances[_buyer].add(_payed.sub(_price));\r\n        }\r\n\r\n        \r\n        if((_tokenOwner[_tokenId]==address(0)) || (_tokenOwner[_tokenId]==_ownershipOwner)){\r\n            // Primary market\r\n            if(_isCharityToken(_tokenId)){\r\n                //charity token\r\n                \r\n                //full price payed to _charityOwnerAddress\r\n                charity_price = _price;\r\n\r\n                //charity sets as first owner\r\n                _tokenFirstOwner[_tokenId] = _charityOwnerAddress;\r\n            }else{\r\n                //contract token\r\n\r\n                //10% to charity\r\n                charity_fee = _price.div(10);\r\n\r\n                //90% to charger\r\n                charger_fee = _price.sub(charity_fee);\r\n            }            \r\n            \r\n        }else{\r\n            //Secondary market\r\n            \r\n            //calculate 1 %\r\n            fee_price = _price.div(100);\r\n            \r\n            //1% to charity - final price subtracted by 1%\r\n            charity_fee = fee_price;            \r\n            _finalprice = _finalprice.sub(fee_price);\r\n            \r\n            //1% to first owner \r\n            if(_tokenFirstOwner[_tokenId]!=address(0)){ \r\n                //added 1% to first owner               \r\n                _marketBalances[_tokenFirstOwner[_tokenId]] = _marketBalances[_tokenFirstOwner[_tokenId]].add(fee_price);\r\n                \r\n                //final price subtracted by 1%\r\n                _finalprice = _finalprice.sub(fee_price);\r\n            }\r\n            \r\n            //1% to charger - final price subtracted by 1%\r\n            charger_fee = fee_price;\r\n            _finalprice = _finalprice.sub(fee_price);\r\n            \r\n            //add final price to market balances of seller 97 or 98%\r\n            _marketBalances[_owner] = _marketBalances[_owner].add(_finalprice);\r\n        }\r\n\r\n        //remove from market\r\n        _marketOffers[_tokenId].isOffer = false;\r\n        _marketOffers[_tokenId].owner = address(0);\r\n        _marketOffers[_tokenId].price = 0;\r\n\r\n        //actual token transfer\r\n        _transferFrom(_owner, _buyer, _tokenId); \r\n\r\n        //eth transfers to _chargerAddress, _charityAddress, and _charityOwnerAddress\r\n        _charityAddBalance(charity_fee);\r\n        _chargerAddBalance(charger_fee);\r\n        _charityOwnerAddBalance(charity_price);\r\n\r\n        //emit market sold event\r\n        emit MarketOfferSold(_owner, _buyer, _tokenId, _price);\r\n    }\r\n\r\n    /**\r\n     * @dev Places token on internal auction.\r\n     * Requires token existence. \r\n     * Requires token not offered and not in auction.\r\n     * Requires owner of token == msg.sender or if contract token _auctionsAddress == msg.sender. \r\n     * Requires _initPrice > 0.\r\n     * @param _tokenId uint256 ID of the token\r\n     * @param _initPrice uint256 initial (minimal bid) price\r\n     * @param _duration uint256 auction duration in secconds\r\n     */\r\n    function marketAuctionCreate(uint256 _tokenId, uint256 _initPrice, uint _duration) public {\r\n        require(_exists(_tokenId), \"Token does not exists.\");\r\n        require(!_marketOfferExists(_tokenId), \"Token is allready offered.\");\r\n        require(!_marketAuctionExists(_tokenId), \"Token is allready in auction.\");\r\n\r\n        address _owner = _ownerOf(_tokenId);\r\n\r\n        //requre msg.sender to be owner\r\n        if(_owner!=msg.sender){\r\n            //OR require owner == _ownershipOwner\r\n            require(_owner==_ownershipOwner, \"Sender is not authorized.\");    \r\n            //AND msg.sender == _auctionsAddress        \r\n            require(_auctionsAddress==msg.sender, \"Sender is not authorized.\");\r\n        }\r\n\r\n        require(_initPrice>0, \"Auction Init price has to be bigger than 0.\");\r\n        \r\n        //set auction parameters\r\n        _marketAuctions[_tokenId].isAuction = true;\r\n        _marketAuctions[_tokenId].highestBidder = address(0);\r\n        _marketAuctions[_tokenId].highestBid = 0;\r\n        _marketAuctions[_tokenId].initPrice = _initPrice;\r\n        _marketAuctions[_tokenId].endTime = block.timestamp+_duration;\r\n\r\n        //emits MarketAuctionCreated\r\n        emit MarketAuctionCreated(_tokenId, _initPrice, block.timestamp, block.timestamp+_duration);\r\n    }\r\n\r\n    /**\r\n     * @dev Bids on token in internal auction.\r\n     * Requires token existence. \r\n     * Requires token in auction.\r\n     * Requires bid >= _initPrice.\r\n     * Requires bid > highestBid.\r\n     * @param _tokenId uint256 ID of the token\r\n     */\r\n    function marketAuctionBid(uint256 _tokenId) public payable {\r\n        require(_exists(_tokenId), \"Token does not exists.\");\r\n        require(_marketAuctionExists(_tokenId), \"Token is not in auction.\");        \r\n        require(_marketAuctions[_tokenId].highestBid < msg.value, \"Bid has to be bigger than the current highest bid.\"); \r\n        require(_marketAuctions[_tokenId].initPrice <= msg.value, \"Bid has to be at least initPrice value.\");\r\n\r\n        address oldBidder = _marketAuctions[_tokenId].highestBidder;\r\n        address bidder = msg.sender;\r\n        uint256 bidValue = msg.value;\r\n\r\n        //return old bidder bid his to market balances\r\n        if(oldBidder!=address(0)){\r\n            _marketBalances[oldBidder] += _marketAuctions[_tokenId].highestBid;\r\n        }\r\n\r\n        //set new highest bid\r\n        _marketAuctions[_tokenId].highestBidder = bidder;\r\n        _marketAuctions[_tokenId].highestBid = bidValue;\r\n\r\n        //emits MarketAuctionBid\r\n        emit MarketAuctionBid(_tokenId, bidValue, bidder, oldBidder);        \r\n    }   \r\n\r\n    /**\r\n     * @dev Resolved internal auction. Auction can not be resolved automatically after\r\n     * duration expires. Transfer token to auction winner (if someone bids) and \r\n     * remove token from auction.\r\n     * Requires token existence. \r\n     * Requires _marketAuctions[_tokenId].isAuction.\r\n     * Requires _marketAuctions[_tokenId].endTime < block.timestamp - duration expired.\r\n     * @param _tokenId uint256 ID of the token\r\n     */\r\n    function marketAuctionClaim(uint256 _tokenId) public {\r\n        require(_exists(_tokenId), \"Token does not exists.\");\r\n        require(_marketAuctions[_tokenId].isAuction, \"Token is not in auction.\");\r\n        require(_marketAuctions[_tokenId].endTime < block.timestamp, \"Auction not finished yet.\");\r\n\r\n        uint256 fee_price = 0;\r\n        uint256 charger_fee = 0;\r\n        uint256 charity_fee = 0;\r\n        uint256 charity_price = 0;\r\n        uint256 _price = _marketAuctions[_tokenId].highestBid;\r\n        uint256 _finalprice = _price;\r\n        address _buyer = _marketAuctions[_tokenId].highestBidder;\r\n        address _owner = _ownerOf(_tokenId);\r\n        \r\n        // if winner exist (if someone bids)\r\n        if(_buyer != address(0)){\r\n\r\n            if(_tokenOwner[_tokenId]==address(0)){\r\n                // Primary market\r\n                if(_isCharityToken(_tokenId)){\r\n                    //charity token\r\n                \r\n                    //full price payed to _charityOwnerAddress\r\n                    charity_price = _price;\r\n\r\n                    //charity sets as first owner\r\n                    _tokenFirstOwner[_tokenId] = _charityOwnerAddress;\r\n                }else{\r\n                    //contract token \r\n\r\n                    //10% to charity\r\n                    charity_fee = _price.div(10);\r\n\r\n                    //90% to charger\r\n                    charger_fee = _price.sub(charity_fee);\r\n                }\r\n            }else{\r\n                //Secondary market\r\n                \r\n                //calculate 1 %\r\n                fee_price = _price.div(100);\r\n                \r\n                //1% to charity - final price subtracted by 1%\r\n                charity_fee = fee_price;\r\n                _finalprice = _finalprice.sub(fee_price);\r\n                \r\n                //1% to first owner \r\n                if(_tokenFirstOwner[_tokenId]!=address(0)){\r\n                    //added 1% to first owner \r\n                    _marketBalances[_tokenFirstOwner[_tokenId]] = _marketBalances[_tokenFirstOwner[_tokenId]].add(fee_price);\r\n                    \r\n                    //final price subtracted by 1%\r\n                    _finalprice = _finalprice.sub(fee_price);\r\n                }\r\n                \r\n                //1% to charger - final price subtracted by 1%\r\n                charger_fee = fee_price;\r\n                _finalprice = _finalprice.sub(fee_price);\r\n                \r\n                //add final price to market balances of seller 97 or 98%\r\n                _marketBalances[_owner] = _marketBalances[_owner].add(_finalprice);\r\n            }\r\n               \r\n            \r\n            //actual transfer to winner\r\n            _transferFrom(_owner, _buyer, _tokenId);\r\n\r\n            //emit MarketAuctionClaimed\r\n            emit MarketAuctionClaimed(_tokenId, _price, _buyer);\r\n        }else{\r\n            //emit MarketAuctionClaimed - when no bidder/winner\r\n            emit MarketAuctionClaimed(_tokenId, 0, address(0));\r\n        }\r\n\r\n        //remove auction\r\n        _marketAuctions[_tokenId].isAuction = false;\r\n        _marketAuctions[_tokenId].highestBidder = address(0);\r\n        _marketAuctions[_tokenId].highestBid = 0;\r\n\r\n        //eth transfers to _chargerAddress, _charityAddress, and _charityOwnerAddress\r\n        _charityAddBalance(charity_fee);\r\n        _chargerAddBalance(charger_fee);\r\n        _charityOwnerAddBalance(charity_price);\r\n    } \r\n\r\n    /**\r\n     * @dev Gets current highest bid, returns 0 for tokens not in auction.\r\n     * Requires token existence\r\n     * @param _tokenId uint256 ID of the token\r\n     */\r\n    function marketAuctionGetTokenPrice(uint256 _tokenId) public view returns (uint256 _price) {\r\n        require(_exists(_tokenId), \"Token does not exists.\");\r\n\r\n        return _marketAuctions[_tokenId].highestBid;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets address of current highest bidder, returns addres(0) for tokens not in auction.\r\n     * Requires token existence\r\n     * @param _tokenId uint256 ID of the token\r\n     */\r\n    function marketAuctionGetHighestBidder(uint256 _tokenId) public view returns (address _bidder) {\r\n        require(_exists(_tokenId), \"Token does not exists.\");\r\n\r\n        return _marketAuctions[_tokenId].highestBidder;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whatever token is in auction or not.\r\n     * @param _tokenId uint256 ID of the token\r\n     */\r\n    function marketAuctionExists(uint256 _tokenId) public view returns(bool _exists){\r\n        return _marketAuctionExists(_tokenId);\r\n    }  \r\n    \r\n    /**\r\n     * @dev Returns whatever token is in auction or not.\r\n     * Internal implementation. Check if endTime not expired.\r\n     * @param _tokenId uint256 ID of the token\r\n     */\r\n    function _marketAuctionExists(uint256 _tokenId) private view returns(bool _exists){\r\n        if(_marketAuctions[_tokenId].endTime < block.timestamp){\r\n            return false;\r\n        }\r\n        return _marketAuctions[_tokenId].isAuction;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers market balance of msg.sender.\r\n     * Requires _marketBalances[msg.sender]>0\r\n     */\r\n    function marketWithdrawBalance() public {\r\n        uint amount = _marketBalances[msg.sender];\r\n        require(amount>0, \"Sender has no market balance to withdraw.\");\r\n\r\n        _marketBalances[msg.sender] = 0;\r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Get ammount of _owner.\r\n     * @param _owner address Requested address;\r\n     */\r\n    function marketGetBalance(address _owner) public view returns(uint256 _balance){\r\n        return _marketBalances[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Send/transfer token.\r\n     * Requires token exist.\r\n     * Requires token is not offered or in auction.\r\n     * Requires token is owned by _ownershipOwner\r\n     * Requires msq.sender==_giftsAddress\r\n     * @param _tokenId uint256 ID of the token to send\r\n     * @param _to address to send token\r\n     */\r\n    function marketSendGift(uint256 _tokenId, address _to) public {\r\n        require(_exists(_tokenId), \"Token does not exists.\");\r\n        require(!_marketOfferExists(_tokenId), \"Token is offered.\");\r\n        require(!_marketAuctionExists(_tokenId), \"Token is in auction.\");\r\n\r\n        require(_ownerOf(_tokenId)==_ownershipOwner, \"Sender is not authorized.\");            \r\n        require(_giftsAddress==msg.sender, \"Sender is not authorized.\");\r\n\r\n        _transferFrom(_ownerOf(_tokenId), _to, _tokenId);\r\n    }\r\n\r\n\r\n    // --------------------------\r\n    // Safe transfers functions (transefer to kown adresses)\r\n    // -------------------------\r\n    \r\n    address payable private _chargeAddress;\r\n    address payable private _charityAddress;\r\n    address payable private _charityOwnerAddress;\r\n\r\n    /**\r\n     * @dev Transfers eth to _charityAddress\r\n     * @param _balance uint256 Ammount to transfer\r\n     */\r\n    function _charityAddBalance(uint256 _balance) internal {\r\n        if(_balance>0){\r\n            _charityAddress.transfer(_balance);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers eth to _charityOwnerAddress\r\n     * @param _balance uint256 Ammount to transfer\r\n     */\r\n    function _charityOwnerAddBalance(uint256 _balance) internal {\r\n        if(_balance>0){\r\n            _charityOwnerAddress.transfer(_balance);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers eth to _chargeAddress\r\n     * @param _balance uint256 Ammount to transfer\r\n     */\r\n    function _chargerAddBalance(uint256 _balance) internal {\r\n        if(_balance>0){\r\n            _chargeAddress.transfer(_balance);\r\n        }\r\n    }\r\n    \r\n\r\n\t// --------------------------\r\n    // Internal functions\r\n    // -------------------------\r\n\t\r\n    /**\r\n     * @dev Internal function return owner of token _tokenOwner[_tokenId]. \r\n     * if _tokenOwner[_tokenId] == address(0), owner is _charityOwnerAddress \r\n     * OR _ownershipOwner (based on _isCharityToken(_tokenId))\r\n     * @param _tokenId uint256 ID of the token\r\n     */\r\n    function _ownerOf(uint256 _tokenId) internal view returns (address _owner) {\r\n        \r\n        if(_tokenOwner[_tokenId]==address(0)){\r\n            //token has no owner - owner is _charityOwnerAddress OR _ownershipOwner;\r\n            if(_isCharityToken(_tokenId)){\r\n                //owner is _charityOwnerAddress\r\n                return _charityOwnerAddress;\r\n            }\r\n            //owner is _ownershipOwner\r\n            return _ownershipOwner;\r\n        }\r\n        //owner is _tokenOwner[_tokenId]\r\n        return _tokenOwner[_tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whatever token is charity token or not\r\n     * @param _tokenId uint256 ID of the token\r\n     */\r\n    function _isCharityToken(uint256 _tokenId) internal pure returns (bool _isCharity) {\r\n        if(_tokenId>720 && _tokenId<=1320){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\t\r\n    /**\r\n     * @dev Returns whether the specified token exists.\r\n     * @param _tokenId uint256 ID of the token to query the existence of\r\n     * @return bool whether the token exists\r\n     */\r\n    function _exists(uint256 _tokenId) internal view returns(bool _tokenExistence) {\r\n        //all tokens lower then supply exists\r\n        return (_tokenId <= _totalSupply);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether the given spender can transfer a given token ID.\r\n     * @param spender address of the spender to query\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @return bool whether the msg.sender is approved for the given token ID,\r\n     * is an operator of the owner, or is the owner of the token\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\r\n        address owner = _ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to transfer ownership of a given token ID to another address.\r\n     * As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function _transferFrom(address from, address to, uint256 tokenId) internal {\r\n        require(_ownerOf(tokenId) == from);\r\n        require(to != address(0));\r\n\r\n        _clearApproval(tokenId);\r\n\r\n        _ownedTokensCount[from].decrement();\r\n        _ownedTokensCount[to].increment();\r\n\r\n\t\tif(_tokenFirstOwner[tokenId]==address(0)){\r\n\t\t\t_tokenFirstOwner[tokenId] = to;\r\n\t\t}\r\n        _tokenOwner[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n    \r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * This function is deprecated.\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\r\n        internal returns (bool)\r\n    {\r\n        if (!to.isContract()) {\r\n            return true;\r\n        }\r\n\r\n        bytes4 retval = IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data);\r\n        return (retval == _ERC721_RECEIVED);\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to clear current approval of a given token ID.\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function _clearApproval(uint256 tokenId) private {\r\n        if (_tokenApprovals[tokenId] != address(0)) {\r\n            _tokenApprovals[tokenId] = address(0);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev Converts uint256 number to string\r\n     * @param i uint256\r\n     */\r\n    function uint2str(uint256 i) internal pure returns (string memory){\r\n        uint256 _tmpN = i;\r\n\r\n        if (_tmpN == 0) {\r\n            return \"0\";\r\n        }\r\n\r\n        uint256 j = _tmpN;\r\n        uint256 length = 0;\r\n\r\n        while (j != 0){\r\n            length++;\r\n            j /= 10;\r\n        }\r\n\r\n        bytes memory bstr = new bytes(length);\r\n        uint256 k = length - 1;\r\n\r\n        while (_tmpN != 0) {\r\n            bstr[k--] = byte(uint8(48 + _tmpN % 10));\r\n            _tmpN /= 10;\r\n        }\r\n\r\n        return string(bstr);\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns market price of token based on its id. \r\n     * Only used if tokenOwner == address(0)\r\n     * @param _tokenId uint256 id of token\r\n     * @return uint256 marketPrice \r\n     */\r\n    function _countBasePrice(uint256 _tokenId) internal pure returns (uint256 _price) {\r\n      \r\n        if(_tokenId<=720){\r\n            //reserved for gifts and auctions\r\n            return 0;\r\n        }\r\n        if(_tokenId>720 && _tokenId<=1320){\r\n            //charity owned on market\r\n            return 100 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId>1320 && _tokenId<=8020){\r\n            // price 5\r\n            return 34 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId>=8021 && _tokenId<10920){\r\n            // price 6\r\n            return 40 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId>=10920 && _tokenId<17720){\r\n            // price 7\r\n            return 47 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId>=17720 && _tokenId<22920){\r\n            // price 8\r\n            return 54* (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId>=22920 && _tokenId<29470){\r\n            // price 10\r\n            return 67 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId>=29470 && _tokenId<30320){\r\n            // price 11\r\n            return 74 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId>=30320 && _tokenId<32470){\r\n            // price 12\r\n            return 80 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId>=32470 && _tokenId<35120){\r\n            // price 13\r\n            return 87 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId>=35120 && _tokenId<35520){\r\n            // price 14\r\n            return 94 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId>=35520 && _tokenId<42370){\r\n            // price 15\r\n            return 100 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId>=42370 && _tokenId<46370){\r\n            // price 18\r\n            return 120 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId>=46370 && _tokenId<55920){\r\n            // price 20\r\n            return 134 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId>=55920 && _tokenId<59820){\r\n            // price 22\r\n            return 147 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId>=59820 && _tokenId<63120){\r\n            // price 25\r\n            return 167 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId>=63120 && _tokenId<78870){\r\n            // price 30\r\n            return 200 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId>=78870 && _tokenId<79010){\r\n            // price 35\r\n            return 234 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId>=79010 && _tokenId<84505){\r\n            // price 40\r\n            return 267 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId>=84505 && _tokenId<84645){\r\n            // price 45\r\n            return 300 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId>=84645 && _tokenId<85100){\r\n            // price 50\r\n            return 334 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId>=85100 && _tokenId<85165){\r\n            // price 60\r\n            return 400 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId>=85165 && _tokenId<85175){\r\n            // price 65\r\n            return 434 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId>=85175 && _tokenId<85205){\r\n            // price 70\r\n            return 467 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId>=85205 && _tokenId<85235){\r\n            // price 80\r\n            return 534 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId>=85235 && _tokenId<85319){\r\n            // price 90\r\n            return 600 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId>=85319 && _tokenId<85427){\r\n            // price 100\r\n            return 667 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId>=85427 && _tokenId<85441){\r\n            // price 110\r\n            return 734 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId>=85441 && _tokenId<85457){\r\n            // price 120\r\n            return 800 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId>=85457 && _tokenId<85464){\r\n            // price 130\r\n            return 867 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId>=85464 && _tokenId<85465){\r\n            // price 140\r\n            return 934 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId>=85465 && _tokenId<85502){\r\n            // price 150\r\n            return 1000 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId>=85502 && _tokenId<85506){\r\n            // price 160\r\n            return 1067 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId==85506){\r\n            // price 170\r\n            return 1134 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId==85507){\r\n            // price 180\r\n            return 1200 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId>=85508 && _tokenId<85516){\r\n            // price 200\r\n            return 1334 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId>=85516 && _tokenId<85518){\r\n            // price 230\r\n            return 1534 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId>=85518 && _tokenId<85571){\r\n            // price 250\r\n            return 1667 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId>=85571 && _tokenId<85587){\r\n            // price 300\r\n            return 2000 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId>=85587 && _tokenId<85594){\r\n            // price 350\r\n            return 2334 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId>=85594 && _tokenId<85597){\r\n            // price 400\r\n            return 2667 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId>=85597 && _tokenId<85687){\r\n            // price 500\r\n            return 3334 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId==85687){\r\n            // price 550\r\n            return 3667 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId>=85688 && _tokenId<85692){\r\n            // price 600\r\n            return 4000 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId==85692){\r\n            // price 680\r\n            return 4534 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId>=85693 && _tokenId<85698){\r\n            // price 700\r\n            return 4667 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId>=85698 && _tokenId<85700){\r\n            // price 750\r\n            return 5000 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId==85700){\r\n            // price 800\r\n            return 5334 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId==85701){\r\n            // price 900\r\n            return 6000 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId>=85702 && _tokenId<85776){\r\n            // price 1000\r\n            return 6667 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId==85776){\r\n            // price 1100\r\n            return 7334 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId>=85777 && _tokenId<85788){\r\n            // price 1500\r\n            return 10000 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId>=85788 && _tokenId<85795){\r\n            // price 2000\r\n            return 13334 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId>=85795 && _tokenId<85798){\r\n            // price 2500\r\n            return 16667 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId>=85798 && _tokenId<85803){\r\n            // price 3000\r\n            return 20000 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId>=85803 && _tokenId<85806){\r\n            // price 5000\r\n            return 33334 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId>=85806 && _tokenId<85807){\r\n            // price 10000\r\n            return 66667 * (uint256(10) ** 15);\r\n        }\r\n\r\n        if(_tokenId==85807){\r\n            // price 50000\r\n            return 333334 * (uint256(10) ** 15);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whatever token is offerd on market. \r\n     * Only used if tokenOwner == address(0)\r\n     * @param _tokenId uint256 id of token\r\n     */\r\n    function _baseIsOnMarket(uint256 _tokenId) internal pure returns (bool _isOnMarket) {\r\n        if(_tokenId<=720){\r\n            //reserved for gits and auctions\r\n            return false;\r\n        }\r\n        if(_tokenId>720 && _tokenId<=1320){\r\n            //charity owned on market\r\n            return true;\r\n        }\r\n\r\n        if(_tokenId>1320){\r\n            //other on market\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Constructor\r\n     */\r\n    constructor () public {\r\n        // register the supported interfaces to conform to ERC721 via ERC165\r\n    \t_registerInterface(_INTERFACE_ID_ERC165);\r\n        _registerInterface(_INTERFACE_ID_ERC721);\r\n        \r\n        //set metadata values\r\n        _name = \"Crypto Tittiez\";\r\n        _symbol = \"CTT\";\r\n        \r\n        // register the supported interfaces to conform to ERC721 ERC721_METADATA\r\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\r\n        \r\n        //set metadata values\r\n        _baseTokenURI = \"https://cryptotittiez.com/api/tokeninfo/\";\r\n        _totalSupply = 85807;\r\n\r\n        //after tokens creation (allmost) all tokens pretends are owned by _ownershipOwner. Look at function _ownerOf\r\n        _ownedTokensCount[msg.sender].set(85207);\r\n\r\n        //sets known addresse\r\n        _chargeAddress = address(0x03559A5AFC7F55F3d71619523d45889a6b0905c0);\r\n        _charityAddress = address(0x40497Be989B8d6fb532a6A2f0Dbf759F5d644e76);\r\n        _charityOwnerAddress = address(0x949577b216ee2D44d70d6DB210422275694cbA27);\r\n        _auctionsAddress = address(0x6800B4f9A80a1fbA4674a5716A5554f3869b57Bf);\r\n        _giftsAddress = address(0x3990e05DA96EFfF38b0aC9ddD495F41BB82Bf9a9);\r\n\r\n        //after tokens creation 600 tokens pretends are owned by _charityOwnerAddress. Look at function _ownerOf\r\n        _ownedTokensCount[_charityOwnerAddress].set(600);\r\n        \r\n        //sets json hash to prove images not change \r\n        _imagesJsonHash = \"2485dabaebe62276c976e55b290438799f2b60cdb845c50053e2c2be43fa6fce\";\r\n       \r\n        //set contract owner\r\n        _ownershipOwner = msg.sender;\r\n    }      \r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_old_bidder\",\"type\":\"address\"}],\"name\":\"MarketAuctionBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"}],\"name\":\"MarketAuctionClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_initPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_starttime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_endtime\",\"type\":\"uint256\"}],\"name\":\"MarketAuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"MarketOfferCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MarketOfferRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"MarketOfferSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"_ownershipNewOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_ownershipOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"imagesJsonHash\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"marketAuctionBid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"marketAuctionClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"marketAuctionCreate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"marketAuctionExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"marketAuctionGetHighestBidder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"marketAuctionGetTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"marketGetBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"marketOfferBuy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"marketOfferCreate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"marketOfferExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"marketOfferGetTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"marketOfferRemove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"marketSendGift\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"marketWithdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownershipAccept\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ownershipTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"auctionsAddress\",\"type\":\"address\"}],\"name\":\"setAuctionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"giftsAddress\",\"type\":\"address\"}],\"name\":\"setGiftsAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CryptoTitties","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://15750935f59bf9a7781823efde62e214425dc257fb8701d412a4bf2cdc564543"}]}