{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.8;\r\n\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n        return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface tokenRecipient { \r\n    function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; \r\n}\r\n\r\n// 众筹的规则如下：\r\n// 一、\tToken初始总量为1650万个，出售的Token最多达到80%。众筹开始时间为合约发布后（估计在2019年9月1日），结束时间为2019年12月31日24点，共计四个月。\r\n// 二、\t初始Token和以太币的比值为300:1,逐日下降0.1%。但在2019年11月1日前用户投入的以太币按照1.1倍系数获得超额Token。在2019年11月1日前用户可以主动退还自己投入众筹的以太币；在2019年11月1日后用户不能退还自己投入众筹的以太币。\r\n// 三、\t我们认为众筹失败时可以终止众筹，并退还全部参与者的以太币。原则上众筹的以太币少于两万个（或众筹资金少于五百万美元），或者基于其他重大原因不能继续，就可以认为众筹失败。\r\n// 四、\t在2019年12月31日前可以终止众筹。如在2019年11月1日和2019年12月31日之间众筹的以太币满额了（Token按照规则发放完毕），则自动结束众筹。\r\n// 五、\t计划的区块链项目上线后，持有Token的用户将获取这些项目产生的利润。原则上这些利润采用智能合约自动分配，万不得已的时候才采用人工分配。\r\n// 六、\t如果众筹成功，在2020年1月7日后Token可以自由交易。\r\n// 七、\tToken每年通胀，第一年通胀率3%，通胀率逐年降低10%，通胀的Token由目前的项目投资人持有。\r\n// 八、\t如果Token持有人超过20年没有转账、计算分红，等操作，这种账号被称为20年沉默账号，拥有者（Owner）可以把此账号的Token和以太币提到自己帐号。\r\n\r\n\r\ncontract Base {\r\n    using SafeMath for uint256;\r\n\r\n    uint64 public currentEventId = 1;\r\n    function getEventId() internal returns(uint64 _result) {\r\n        _result = currentEventId;\r\n        currentEventId ++;\r\n    }\r\n\r\n    uint public createTime = now;\r\n    \r\n    address public owner;\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function setOwner(address _newOwner)  external  onlyOwner {\r\n        require(_newOwner != address(0x0));\r\n        require(crowdFinishTime < now);         //众筹结束后\r\n        require(!isTerminated);                 //没有终止众筹\r\n        owner = _newOwner;\r\n    }\r\n    \r\n    address public boss;\r\n\r\n    modifier onlyBoss {\r\n        require(msg.sender == boss);\r\n        _;\r\n    }\r\n\r\n    function setBoss(address _newBoss)  external  onlyBoss {\r\n        require(_newBoss != address(0x0));\r\n        owner = _newBoss;\r\n    }\r\n\r\n    uint8 public decimals = 6;\r\n\r\n    uint constant public crowdMaxEther = 40000 * (10 ** 18);    //众筹最大以太币数量，四万个\r\n\r\n    uint public crowdedEther = 0;                               //已经众筹的以太币数量\r\n\r\n    //  uint constant public crowdStartTime  = 1561910400;          //2019年7月1日, 众筹开始时间           //不需要这个开始时间！\r\n\r\n    uint constant public crowdBackTime   = 1572537600;          //2019年11月1日，众筹可以退款截至时间    //TODO\r\n\r\n    uint constant public crowdFinishTime = 1577808000;          //2020年1月1日，众筹结束时间            //TODO\r\n    \r\n    uint constant public iniTokenPerEth = 300;                  //Token的众筹价格，初始是一个eth换300个，然后越来越少，年化减少30%，每天减少 0.1%，半年后减少20%\r\n\r\n    uint constant public tokenReduce1000 = 1;                   //Token的众筹价格，每天减少 0.1%，半年后减少20%\r\n\r\n    uint constant public backMultiple100 = 110;                 //在可以退款前的倍数，1.1倍\r\n\r\n    bool public isTerminated = false;                           //是否人工终止\r\n   \r\n    event OnTerminate(address _exeUser, uint _eventId);\r\n\r\n    function terminate() external onlyOwner\r\n    {\r\n        require(now < crowdFinishTime);\r\n        require(!isTerminated);\r\n        isTerminated = true;\r\n        emit OnTerminate(msg.sender, getEventId());\r\n    }\r\n\r\n    mapping (address => uint256) public userInvEtherOf;         //用户用于购买Token的开销 。 在 crowdBackTime 之前，需要记录投入的ether，因为可以退还！\r\n\r\n    function getPrice() public view returns(uint _result)       //一个以太币能买多少个Token\r\n    {\r\n        uint d = (now - createTime) / (1 days);\r\n        //_result = iniTokenPerEth * (1000 -tokenReduce1000) ** d / 1000**d;\r\n        _result = iniTokenPerEth;\r\n        for(uint i = 0; i < d; i++){\r\n            _result = _result * (1000 - tokenReduce1000) / 1000;\r\n        }\r\n\r\n        if(now < crowdBackTime)\r\n        {\r\n            _result = _result * backMultiple100 / 100;\r\n        }\r\n    }\r\n\r\n\r\n    function canTransfer() public view returns (bool _result)\r\n    {\r\n        //_result = (!isTerminated) && (crowdFinishTime < now);\r\n        _result = (!isTerminated) && (crowdFinishTime.add(7 days) < now);       //众筹结束七天后可以转账！\r\n    }\r\n\r\n    function canBuyToken() public view returns (uint _result)\r\n    {\r\n        if (crowdFinishTime <= now)\r\n        {\r\n            _result = 0;\r\n        }\r\n        else if (isTerminated)\r\n        {\r\n            _result = 0;\r\n        }\r\n        else\r\n        {\r\n            _result = (crowdMaxEther - crowdedEther) * getPrice() * (10 ** uint(decimals)) / (10 ** 18);\r\n        }\r\n    }\r\n\r\n\r\n    event OnDeposit(address indexed _user, uint _amount, uint _balance, uint64 _eventId);\r\n    event OnWithdraw(address indexed _user, uint _amount, uint _balance, uint64 _eventId);\r\n\r\n    mapping (address => uint256) public userEtherOf;\r\n\r\n    function deposit() payable external {\r\n        _deposit();\r\n    }\r\n\r\n    function _deposit() internal {\r\n        userEtherOf[msg.sender] = userEtherOf[msg.sender].add(msg.value);\r\n        emit OnDeposit(msg.sender, msg.value, userEtherOf[msg.sender], getEventId());\r\n    }\r\n\r\n    function withdraw(uint _amount) external {\r\n        if(msg.sender == owner)\r\n        {\r\n            //require(crowdBackTime < now);\r\n            require(crowdFinishTime < now);\r\n        }\r\n    \r\n        _withdraw(_amount);\r\n    }\r\n\r\n    function _withdraw(uint _amount) internal {\r\n        require(userEtherOf[msg.sender] >= _amount);\r\n        userEtherOf[msg.sender] = userEtherOf[msg.sender].sub(_amount);\r\n        msg.sender.transfer(_amount);\r\n        emit OnWithdraw(msg.sender, _amount, userEtherOf[msg.sender], getEventId());\r\n    }\r\n\r\n}\r\n\r\ncontract TokenERC20 is Base {\r\n    string public name;\r\n    string public symbol;\r\n    // uint8 public decimals = 6;\r\n    uint256 public totalSupply;\r\n\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    // constructor(\r\n    //     //uint256 initialSupply,\r\n    //     //string memory tokenName,\r\n    //     //string memory tokenSymbol\r\n    // ) public {\r\n    //     totalSupply = 1000000000 * 10 ** uint256(decimals);  // Update total supply with the decimal amount\r\n    //     //balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\r\n    //     balanceOf[address(this)] = totalSupply;                // Give the creator all initial tokens\r\n    //     name = \"\";                                   // Set the name for display purposes\r\n    //     symbol = \"\";                               // Set the symbol for display purposes\r\n    // }\r\n\r\n\r\n    function _callDividend(address _user) internal returns (bool _result);      \r\n\r\n    function _transfer(address _from, address _to, uint _value) internal returns (bool success) {\r\n        require(_from != address(0x0));\r\n        require(_to != address( 0x0));\r\n        require(_from != _to);\r\n        require(_value > 0);\r\n        require(balanceOf[_from] >= _value);\r\n        \r\n        require(canTransfer());                         //new add\r\n        _callDividend(_from);   \r\n        _callDividend(_to);     \r\n\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        require(_transfer(msg.sender, _to, _value));\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n        require(_transfer(_from, _to, _value));\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool success) \r\n    {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, address(this), _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);            // Subtract from the sender\r\n        totalSupply = totalSupply.sub(_value);                      // Updates totalSupply\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(1 == 2);\r\n        \r\n        // require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n        // require(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n        // balanceOf[_from] -= _value;                         // Subtract from the targeted balance\r\n        // allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\r\n        // totalSupply -= _value;                              // Update totalSupply\r\n        emit Burn(_from, _value);\r\n        return false;\r\n    }\r\n}\r\n\r\n\r\ninterface IWithholdToken{                                                   //代扣，可以省略 approve 这步操作\r\n    function withhold(address _user,  uint256 _amount) external returns (bool _result);\r\n    function setTransferFlag(address _address, bool _canTransfer) external  returns (bool _result);\r\n}\r\n\r\ncontract WithholdToken is TokenERC20, IWithholdToken{                       //代扣，主要是省略 approve 这步操作\r\n    mapping (address => mapping(address => bool)) public transferFlagOf;    //user->game->flag    2018-07-10 默认不允许，必需自己主动加上去！\r\n \r\n    function setTransferFlag(address _address, bool _canTransfer) external  returns (bool _result){    //设置自己是否允许代扣\r\n        require(_address != address(0x0));\r\n        transferFlagOf[msg.sender][_address] = _canTransfer;\r\n        _result = true;\r\n    }\r\n\r\n    mapping(address => bool) public whiteListOf;                            //代扣合约白名单列表\r\n\r\n    event OnWhiteListChange(address indexed _addr, address _operator, bool _result,  uint _eventId);\r\n\r\n    function addWhiteList(address _addr) public onlyOwner {\r\n        require (_addr != address(0x0));\r\n        whiteListOf[_addr] = true;\r\n        emit OnWhiteListChange(_addr, msg.sender, true, getEventId());\r\n    }\r\n\r\n    function delWhiteList(address _addr) public onlyOwner {\r\n        require (_addr != address(0x0));\r\n        whiteListOf[_addr] = false;\r\n        emit OnWhiteListChange(_addr, msg.sender, false, getEventId());\r\n    }\r\n\r\n    function isWhiteList(address _addr) public view returns(bool _result) {                         //白名单检查\r\n        require (_addr != address(0x0));\r\n        _result = whiteListOf[_addr];\r\n    }\r\n\r\n    function canWithhold(address _address,  address _user) public view returns(bool _result) {      //能否代扣\r\n        require (_user != address(0x0));\r\n        require (_address != address(0x0));\r\n        _result = isWhiteList(_address) && transferFlagOf[_user][_address];    \r\n    }\r\n\r\n    //代扣，把玩家的钱打入游戏账号 这里需要token的特殊授权：游戏白名单，改变某address的token数量（balanceOf）,调用者是game,接口函数\r\n    function withhold(address _user,  uint256 _amount) external returns (bool _result) {\r\n        require(_user != address(0x0));\r\n        require(_amount > 0);\r\n        require(msg.sender != tx.origin);                   //只能智能合约才可以执行\r\n        require(msg.sender != _user);                       //不能自己转给自己\r\n        // require(isWhiteList(msg.sender));\r\n        // require(transferFlagOf[_user][msg.sender]);         \r\n        require(canWithhold(msg.sender, _user));            //等同上面两句话，判断代扣权限\r\n        require(balanceOf[_user] >= _amount);\r\n\r\n        _transfer(_user, msg.sender, _amount);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n\r\ninterface IDividendToken{\r\n    function profit() payable external returns(bool _result);   //执行分红，由盈利合约调用此方法\r\n}\r\n\r\ncontract DividendToken is WithholdToken, IDividendToken\r\n{    \r\n    struct DividendPeriod\r\n    {\r\n        uint StartBlock;\r\n        uint EndBlock;\r\n        uint256 TotalEtherAmount;\r\n        uint256 ShareEtherAmount;\r\n    }\r\n\r\n    mapping (uint => DividendPeriod) public dividendPeriodOf;   //分红记录\r\n    uint256 public currentDividendPeriodNo = 0;\r\n\r\n    // uint256 public shareAddEtherValue = 0;\r\n    // uint256 public addTotalEtherValue = 0;\r\n\r\n    uint public lastDividendBlock = block.number;\r\n\r\n    mapping (address => uint) public balanceBlockOf;            //User计算分红记录\r\n\r\n    uint256 public minDividendEtherAmount = 10 ether;           //最小分红金额\r\n    function setMinDividendEtherAmount(uint256 _newMinDividendEtherAmount) public onlyOwner{\r\n        minDividendEtherAmount = _newMinDividendEtherAmount;\r\n    }\r\n\r\n    function callDividend() public returns (uint256 _etherAmount) {             //计算分红\r\n        _callDividend(msg.sender);\r\n        _etherAmount = userEtherOf[msg.sender];        \r\n    }\r\n\r\n    event OnCallDividend(address indexed _user, uint256 _tokenAmount, uint _lastCalBlock, uint _currentBlock, uint _etherAmount, uint _eventId);\r\n\r\n    function _callDividend(address _user) internal returns (bool _result) {     //计算分红\r\n        uint _amount = 0;\r\n        uint lastBlock = balanceBlockOf[_user];\r\n        uint256 tokenNumber = balanceOf[_user];\r\n        if(tokenNumber <= 0)\r\n        {\r\n            balanceBlockOf[_user] = block.number;\r\n            _result = false;\r\n            return _result;\r\n        }\r\n        if(currentDividendPeriodNo == 0){ \r\n        \t_result = false;\r\n            return _result;\r\n        }\r\n        for(uint256 i = currentDividendPeriodNo - 1; i >= 0; i--){\r\n            DividendPeriod memory dp = dividendPeriodOf[i];\r\n            if(lastBlock < dp.EndBlock){                            //不包含结束区块\r\n                _amount = _amount.add(dp.ShareEtherAmount.mul(tokenNumber));\r\n            }\r\n            else if (lastBlock >= dp.EndBlock){\r\n                break;\r\n            }\r\n        }\r\n        balanceBlockOf[_user] = block.number;\r\n        if(_amount > 0){\r\n            userEtherOf[_user] = userEtherOf[_user].add(_amount);\r\n        }\r\n\r\n        emit OnCallDividend(_user, tokenNumber, lastBlock,  block.number,  _amount, getEventId());\r\n        _result = true;\r\n    }\r\n\r\n    function saveDividendPeriod(uint256 _ShareEtherAmount, uint256 _TotalEtherAmount) internal {\r\n        DividendPeriod storage dp = dividendPeriodOf[currentDividendPeriodNo];\r\n        dp.ShareEtherAmount = _ShareEtherAmount;\r\n        dp.TotalEtherAmount = _TotalEtherAmount;\r\n        dp.EndBlock = block.number;\r\n        dividendPeriodOf[currentDividendPeriodNo] = dp;\r\n    }\r\n\r\n    function newDividendPeriod(uint _StartBlock) internal {\r\n        DividendPeriod storage lastD = dividendPeriodOf[currentDividendPeriodNo];\r\n        require(lastD.StartBlock < _StartBlock);\r\n\r\n        DividendPeriod memory newdp = DividendPeriod({\r\n                StartBlock :  _StartBlock,\r\n                EndBlock : 0,\r\n                TotalEtherAmount : 0,\r\n                ShareEtherAmount : 0\r\n        });\r\n\r\n        currentDividendPeriodNo++;\r\n        dividendPeriodOf[currentDividendPeriodNo] = newdp;\r\n    }\r\n\r\n    function callDividendAndWithdraw() public {   \r\n        callDividend();\r\n        _withdraw(userEtherOf[msg.sender]);\r\n    }\r\n    \r\n    // function getProfit(address _profitOrg) public {     \r\n    //     lock();\r\n    //     IProfitOrg pt = IProfitOrg(_profitOrg);\r\n    //     address sh = pt.shareholder();\r\n    //     if(sh == address(this))     \r\n    //     {\r\n    //         pt.userRefund();       \r\n    //     }\r\n    //     unLock();\r\n    // }\r\n\r\n    event OnProfit(address _profitOrg, uint256 _sendAmount, uint256 _divAmount, uint256 _shareAmount, uint _eventId);\r\n\r\n    uint public divIntervalBlocks = 6400;   //分红的时间间隔,6400个区块大概是1天。可以修改\r\n\r\n    function  setDivIntervalBlocks(uint _Blocks) public onlyOwner {\r\n        require(_Blocks > 0);           //for test\r\n        divIntervalBlocks = _Blocks;\r\n    }\r\n\r\n    function profit() payable external  returns(bool _result)\r\n    {\r\n        require(crowdFinishTime < now);\r\n        if (msg.value > 0){\r\n            userEtherOf[address(this)] += msg.value;\r\n        }\r\n\r\n        uint256 canValue = userEtherOf[address(this)];\r\n        if(canValue < minDividendEtherAmount || block.number  < divIntervalBlocks +  lastDividendBlock)   \r\n        {\r\n            emit OnProfit(msg.sender, msg.value, 0, 0,  getEventId());\r\n            return false;\r\n        }\r\n\r\n        uint256 sa = canValue.div(totalSupply);             //金额太小了，不够分 ether 10**18 token 10**6  decimals 是有讲究的！\r\n        if(sa <= 0){\r\n            emit OnProfit(msg.sender, msg.value, 0, 0, getEventId());\r\n            return false;\r\n        }\r\n\r\n        uint256 totalEtherAmount = sa.mul(totalSupply);\r\n        saveDividendPeriod(sa, totalEtherAmount);\r\n        newDividendPeriod(block.number);\r\n        userEtherOf[address(this)] = userEtherOf[address(this)].sub(totalEtherAmount);\r\n        emit OnProfit(msg.sender, msg.value, totalEtherAmount, sa,  getEventId());\r\n        lastDividendBlock = block.number;\r\n        return true;\r\n    }\r\n    \r\n    event OnAddYearToken(uint256 _lastTotalSupply, uint256 _currentTotalSupply, uint _years, uint _eventId);\r\n\r\n    mapping(uint => uint256) yearTotalSupplyOf;     //每年的Token记录\r\n    uint yearInflation1000000 = 30000;              //表示3%。\r\n\r\n    function addYearToken() external {              //通胀，初始值是3，每年递减10%，也就是第二年就是3*0.9了。大概可以领取100年。\r\n        uint y = (now - createTime) / (365 days);\r\n        //require(y <= 30);\r\n        require(yearInflation1000000 > 0);\r\n        \r\n        if (y > 0 && yearTotalSupplyOf[y] == 0){\r\n            _callDividend(boss);\r\n\r\n            uint256 _lastTotalSupply = totalSupply;\r\n\r\n            //totalSupply = totalSupply.mul(10156).div(10000);\r\n            totalSupply = totalSupply.mul(yearInflation1000000 + 1000000).div(1000000);\r\n            yearInflation1000000 = yearInflation1000000 * 9 / 10;\r\n\r\n            uint256 _add = totalSupply.sub(_lastTotalSupply);\r\n            balanceOf[boss] = balanceOf[boss].add(_add);\r\n            yearTotalSupplyOf[y] = totalSupply;\r\n\r\n            emit OnAddYearToken(_lastTotalSupply, totalSupply, y, getEventId());\r\n        }\r\n    }\r\n\r\n    event OnFreeLostToken(address _lostUser, uint256 _tokenNum, uint256 _etherNum, address _to, uint _eventId);\r\n\r\n    function freeLostToken(address _user) public onlyOwner {\r\n        require(_user != address( 0x0) );\r\n        uint addTime = 20 * (365 days);   \r\n            \r\n        require(balanceOf[_user] > 0 && createTime.add(addTime) < now  && balanceBlockOf[_user].add(addTime) < now);     \r\n\t    require(_user != msg.sender);\r\n\r\n        uint256 ba = balanceOf[_user];\r\n        require(ba > 0);\r\n        _callDividend(_user);\r\n        _callDividend(msg.sender);       \r\n\r\n        balanceOf[_user] -= ba;\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(ba);\r\n      \r\n        uint256 amount = userEtherOf[_user];       \r\n        if (amount > 0){\r\n            userEtherOf[_user] = userEtherOf[_user].sub(amount);\r\n            userEtherOf[msg.sender] = userEtherOf[msg.sender].add(amount);\r\n        }\r\n\r\n        emit OnFreeLostToken(_user, ba, amount, msg.sender, getEventId());\r\n    }\r\n\r\n}\r\n\r\n//OK: 把规矩改了，总量恒定，最高出售80%，按照5万个以太币来设定总量（市值约为一千五百万美金），出售4万个以太坊(约一千二百万美金)。\r\ncontract TokenPhiWallet is DividendToken {\r\n    \r\n    //function TokenPhiWallet(address _owner, address _boss) public {\r\n    constructor(address _owner, address _boss) public {\r\n        require(_owner != address(0x0));\r\n        require(_boss != address(0x0));\r\n        owner = _owner;\r\n        boss = _boss;\r\n\r\n        name = \"PhiWalletToken\";\r\n        symbol = \"PWT\";\r\n        decimals = 6;\r\n        createTime = now;\r\n\r\n        // totalSupply = 0;\r\n        totalSupply = 55000 * 300 * (10 ** uint(decimals));     //总量一千五百万个。owner最低只能保留20%，因为有1.1倍的。\r\n        balanceOf[_owner] = totalSupply * 97 / 100;\r\n        balanceOf[_boss] = totalSupply  -  balanceOf[_owner];\r\n\r\n        //uint y = (now - createTime) / (365 days);\r\n        uint y = 0;\r\n        yearTotalSupplyOf[y] = totalSupply;\r\n    }\r\n\r\n    // event OnBuyToken(address _buyer, uint _etherAmount, uint _tokenAmount, uint _ownerTokenAmount, uint _eventId);\r\n    event OnBuyToken(address _buyer, uint _etherAmount, uint _tokenAmount, uint _eventId);\r\n\r\n    function buyToken(uint _tokenAmount) payable external\r\n    {        \r\n        if(msg.value > 0){\r\n            _deposit();\r\n        }\r\n\r\n        require(canBuyToken() > 0);\r\n\r\n        uint CanEtherAmount = crowdMaxEther - crowdedEther;\r\n        if (CanEtherAmount > userEtherOf[msg.sender])\r\n        {\r\n            CanEtherAmount = userEtherOf[msg.sender];\r\n        }\r\n        require(CanEtherAmount > 0);\r\n\r\n        uint price =  getPrice();\r\n        uint CanTokenAmount = CanEtherAmount.mul(price).mul(10 ** uint(decimals)).div(10 ** 18);\r\n        if(CanTokenAmount > _tokenAmount)\r\n        {\r\n            CanTokenAmount = _tokenAmount;\r\n        }\r\n\r\n        CanEtherAmount = CanTokenAmount.mul(10 ** 18) / price / (10 ** uint(decimals));      //chong suan   \r\n\r\n        userInvEtherOf[msg.sender] = userInvEtherOf[msg.sender] + CanEtherAmount;\r\n        // uint OwnerTokenAmount = CanTokenAmount / 4;                             //owner 20%\r\n        balanceOf[msg.sender] =   balanceOf[msg.sender].add(CanTokenAmount);\r\n        balanceOf[owner] =   balanceOf[owner].sub(CanTokenAmount);\r\n        // balanceOf[owner] =   balanceOf[owner] + OwnerTokenAmount;\r\n        // totalSupply = totalSupply.add(CanTokenAmount).add(OwnerTokenAmount);\r\n        \r\n        userEtherOf[msg.sender] = userEtherOf[msg.sender].sub(CanEtherAmount);     //这个有问题的，众筹期间 Owner 可以提币！\r\n        userEtherOf[owner] = userEtherOf[owner].add( CanEtherAmount);              //这个有问题的，众筹期间 Owner 可以提币！\r\n\r\n        crowdedEther = crowdedEther.add(CanEtherAmount);                           //记账\r\n\r\n        emit OnBuyToken(msg.sender, CanEtherAmount, CanTokenAmount, getEventId());\r\n    }\r\n\r\n    event OnCrowdBack(address _user, uint _etherAmount, uint _tokenAmount, uint eventId);\r\n\r\n    function crowdBack() external                       //退回众筹款\r\n    {\r\n        require(now < crowdBackTime || isTerminated);   //在退回事件前，或者终止了\r\n\r\n        uint etherAmount = userInvEtherOf[msg.sender];\r\n        uint tokenAmount = balanceOf[msg.sender];\r\n\r\n        require(etherAmount > 0 && tokenAmount > 0);\r\n        \r\n        balanceOf[msg.sender] = 0;\r\n        balanceOf[owner] = balanceOf[owner].add(tokenAmount);\r\n        // balanceOf[owner] = balanceOf[owner] .sub (tokenAmount / 4);\r\n        // totalSupply = totalSupply.sub(tokenAmount).sub(tokenAmount / 4);\r\n\r\n        userInvEtherOf[msg.sender] = 0;\r\n        userEtherOf[msg.sender] = userEtherOf[msg.sender].add(etherAmount);\r\n        userEtherOf[owner] = userEtherOf[owner].sub(etherAmount);\r\n\r\n        emit OnCrowdBack(msg.sender, etherAmount, tokenAmount, getEventId());\r\n\r\n        msg.sender.transfer(etherAmount);\r\n    }\r\n\r\n    function batchTransfer1(address[] calldata _tos, uint256 _amount) external  {\r\n        require(_batchTransfer1(msg.sender, _tos, _amount));\r\n    }\r\n\r\n    function _batchTransfer1(address _from, address[] memory _tos, uint256 _amount) internal returns (bool _result) {\r\n        require(_amount > 0);\r\n        require(_tos.length > 0);\r\n        for(uint i = 0; i < _tos.length; i++){\r\n            address to = _tos[i];\r\n            require(to != address(0x0));\r\n            require(_transfer(_from, to, _amount));\r\n        }\r\n        _result = true;\r\n    }\r\n\r\n    function batchTransfer2(address[] calldata _tos, uint256[] calldata _amounts) external  {\r\n        require(_batchTransfer2(msg.sender, _tos, _amounts));\r\n    }\r\n\r\n    function _batchTransfer2(address _from, address[] memory _tos, uint256[] memory _amounts) internal returns (bool _result)  {\r\n        require(_amounts.length > 0);\r\n        require(_tos.length > 0);\r\n        require(_amounts.length == _tos.length );\r\n        for(uint i = 0; i < _tos.length; i++){\r\n            require(_tos[i] != address(0x0) && _amounts[i] > 0);\r\n            require(_transfer(_from, _tos[i], _amounts[i]));\r\n        }\r\n        _result = true;\r\n    }\r\n\r\n\r\n    function() payable external {\r\n        // if(canBuyToken() > 0)\r\n        // {\r\n        //     buyToken(totalSupply);\r\n        // }\r\n        // else \r\n        if(msg.value > 0){\r\n           _deposit();\r\n       }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"callDividendAndWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentEventId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"crowdBack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"terminate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentDividendPeriodNo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"freeLostToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"transferFlagOf\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInvEtherOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReduce1000\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_canTransfer\",\"type\":\"bool\"}],\"name\":\"setTransferFlag\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdMaxEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMinDividendEtherAmount\",\"type\":\"uint256\"}],\"name\":\"setMinDividendEtherAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tos\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"batchTransfer1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"buyToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canBuyToken\",\"outputs\":[{\"name\":\"_result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dividendPeriodOf\",\"outputs\":[{\"name\":\"StartBlock\",\"type\":\"uint256\"},{\"name\":\"EndBlock\",\"type\":\"uint256\"},{\"name\":\"TotalEtherAmount\",\"type\":\"uint256\"},{\"name\":\"ShareEtherAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdedEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteListOf\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"divIntervalBlocks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"backMultiple100\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userEtherOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"delWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"createTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"profit\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdBackTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"_result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tos\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"canWithhold\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceBlockOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newBoss\",\"type\":\"address\"}],\"name\":\"setBoss\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_Blocks\",\"type\":\"uint256\"}],\"name\":\"setDivIntervalBlocks\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"boss\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"callDividend\",\"outputs\":[{\"name\":\"_etherAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastDividendBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isTerminated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withhold\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canTransfer\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addYearToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"iniTokenPerEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minDividendEtherAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdFinishTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isWhiteList\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_boss\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_etherAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"OnBuyToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_etherAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"OnCrowdBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_lastCalBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_currentBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_etherAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"OnCallDividend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_profitOrg\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_sendAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_divAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_shareAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"OnProfit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lastTotalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_currentTotalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_years\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"OnAddYearToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lostUser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenNum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_etherNum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"OnFreeLostToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_result\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"OnWhiteListChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_exeUser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"OnTerminate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventId\",\"type\":\"uint64\"}],\"name\":\"OnDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventId\",\"type\":\"uint64\"}],\"name\":\"OnWithdraw\",\"type\":\"event\"}]","ContractName":"TokenPhiWallet","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000020658a75fe7fcb4c71c24260a46e73c28926b15d000000000000000000000000ca21af0e5a0c15c4e2ffaa3c298909773bcc0358","Library":"","SwarmSource":"bzzr://6cf6e97000aac7dd4bd72ab505360683a996907b13120c16fc76f3b616d91e51"}]}