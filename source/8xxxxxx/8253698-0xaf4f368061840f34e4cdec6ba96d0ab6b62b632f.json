{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.1;\r\nlibrary SafeMath {\r\n/**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function Sdiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      if (a == 0) {\r\n          return 0;\r\n      }\r\n    assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n}\r\ncontract PoliPrice{\r\n/**\r\n  * @dev This contract was created to be used in smart contracts where price control is in USD. \r\n  *      The idea is change here to affect a lot of contracts.\r\n  */\r\n    using SafeMath for uint256;\r\n    uint64 public constant oneEther = 1000000000000000000;\r\n    uint16 internal usdPrice;\r\n    address internal admin;\r\n    //Functions Query\r\n    function readETHUSD() public view returns(uint16){\r\n        return usdPrice; //readETHUSD list last registered price of 1 ETHEREUM. Example: 1 ETH = 208 USD\r\n    }\r\n    function readUSDWEI() public view returns(uint256){\r\n        return SafeMath.Sdiv(oneEther, usdPrice); // readUSDWEI convert 1 USD price in WEI. Example: 1 USD = 4807692307692307 wei\r\n    }\r\n    function readAdmin() public view returns(address){\r\n        return admin; // readAdmin return address of administrator\r\n    }\r\n    //Functions Action\r\n    function updateUSD(uint16 newPrice) public payable chkAdm() returns(bool){\r\n        require(newPrice >= 1,'ETH price must be greater than 1 USD');\r\n        usdPrice = newPrice;\r\n        return true;\r\n    }\r\n    function withdrawDonations() public payable chkAdm() returns(bool){\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n    //Initialize\r\n    constructor() public{\r\n        admin = msg.sender;\r\n        usdPrice = 208;\r\n    }\r\n    //Functions modifier\r\n    modifier chkAdm(){\r\n        require(msg.sender == admin, 'Sorry, you must to connect with administrator address');\r\n        _;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"readUSDWEI\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"readAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint16\"}],\"name\":\"updateUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawDonations\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oneEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"readETHUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"PoliPrice","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f690d1d85d45657530c0370c0b28acc1066343fd055a091a011abe6dad79a954"}]}