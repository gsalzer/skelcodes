{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.7;\r\n\r\ninterface ERC20Interface {\r\n    function allowance(address, address) external view returns (uint);\r\n    function balanceOf(address) external view returns (uint);\r\n    function approve(address, uint) external;\r\n    function transfer(address, uint) external returns (bool);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n}\r\n\r\ninterface CTokenInterface {\r\n    function mint(uint mintAmount) external returns (uint); // For ERC20\r\n    function redeem(uint redeemTokens) external returns (uint);\r\n    function borrow(uint borrowAmount) external returns (uint);\r\n    function exchangeRateCurrent() external returns (uint);\r\n    function transfer(address, uint) external returns (bool);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n    function balanceOf(address) external view returns (uint);\r\n    function underlying() external view returns (address);\r\n}\r\n\r\ninterface CETHInterface {\r\n    function exchangeRateCurrent() external returns (uint);\r\n    function mint() external payable; // For ETH\r\n    function transfer(address, uint) external returns (bool);\r\n    function balanceOf(address) external view returns (uint);\r\n}\r\n\r\ninterface LiquidityInterface {\r\n    function depositCTkn(address ctknAddr, uint amt) external;\r\n    function withdrawCTkn(address ctknAddr, uint amt) external returns(uint ctknAmt);\r\n}\r\n\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        c = a - b;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Helper is DSMath {\r\n\r\n    /**\r\n     * @dev get ethereum address for trade\r\n     */\r\n    function getEthAddr() public pure returns (address eth) {\r\n        eth = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    }\r\n\r\n    function getCEthAddr() public pure returns(address ceth) {\r\n        ceth = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\r\n    }\r\n\r\n    function getComptrollerAddr() public pure returns (address troller) {\r\n        troller = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\r\n    }\r\n\r\n    function getLiquidityAddr() public pure returns (address liquidity) {\r\n        liquidity = 0x7281Db02c62e2966d5Cd20504B7C4C6eF4bD48E1;\r\n    }\r\n\r\n    /**\r\n     * @dev setting allowance to compound for the \"user proxy\" if required\r\n     */\r\n    function setApproval(address erc20, uint srcAmt, address to) internal {\r\n        ERC20Interface erc20Contract = ERC20Interface(erc20);\r\n        uint tokenAllowance = erc20Contract.allowance(address(this), to);\r\n        if (srcAmt > tokenAllowance) {\r\n            erc20Contract.approve(to, srcAmt);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract ProvideLiquidity is Helper {\r\n\r\n    event LogDepositToken(address tknAddr, uint amt);\r\n    event LogWithdrawToken(address tknAddr, uint amt);\r\n    event LogDepositCToken(address ctknAddr, uint amt);\r\n    event LogWithdrawCToken(address ctknAddr, uint amt);\r\n\r\n    /**\r\n     * @dev Deposit Token to liquidity.\r\n     */\r\n    function depositToken(address ctknAddr, uint amt) public payable {\r\n        if (ctknAddr != getCEthAddr()) {\r\n            CTokenInterface cTokenContract = CTokenInterface(ctknAddr);\r\n            address tknAddr = cTokenContract.underlying();\r\n            require(ERC20Interface(tknAddr).transferFrom(msg.sender, address(this), amt), \"Not enough tkn to deposit\");\r\n            setApproval(tknAddr, amt, ctknAddr);\r\n            assert(cTokenContract.mint(amt) == 0);\r\n            uint exchangeRate = cTokenContract.exchangeRateCurrent();\r\n            uint cTknAmt = wdiv(amt, exchangeRate);\r\n            uint cTknBal = cTokenContract.balanceOf(address(this));\r\n            cTknAmt = cTknAmt <= cTknBal ? cTknAmt : cTknBal;\r\n            setApproval(ctknAddr, cTknAmt, getLiquidityAddr());\r\n            LiquidityInterface(getLiquidityAddr()).depositCTkn(ctknAddr, cTknAmt);\r\n            emit LogDepositToken(tknAddr, amt);\r\n        } else {\r\n            CETHInterface cEthContract = CETHInterface(ctknAddr);\r\n            cEthContract.mint.value(msg.value)();\r\n            uint exchangeRate = cEthContract.exchangeRateCurrent();\r\n            uint cEthAmt = wdiv(msg.value, exchangeRate);\r\n            uint cEthBal = cEthContract.balanceOf(address(this));\r\n            cEthAmt = cEthAmt <= cEthBal ? cEthAmt : cEthBal;\r\n            setApproval(ctknAddr, cEthAmt, getLiquidityAddr());\r\n            LiquidityInterface(getLiquidityAddr()).depositCTkn(ctknAddr, cEthAmt);\r\n            emit LogDepositToken(getEthAddr(), amt);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw Token from liquidity.\r\n     */\r\n    function withdrawToken(address ctknAddr, uint amt) public {\r\n        CTokenInterface cTokenContract = CTokenInterface(ctknAddr);\r\n        uint exchangeRate = cTokenContract.exchangeRateCurrent();\r\n        uint withdrawAmt = wdiv(amt, exchangeRate); // withdraw CToken Amount\r\n        withdrawAmt = LiquidityInterface(getLiquidityAddr()).withdrawCTkn(ctknAddr, withdrawAmt);\r\n        if (ctknAddr != getCEthAddr()) {\r\n            require(cTokenContract.redeem(withdrawAmt) == 0, \"something went wrong\");\r\n            uint tknAmt = wmul(withdrawAmt, exchangeRate);\r\n            address tknAddr = cTokenContract.underlying();\r\n            uint tknBal = ERC20Interface(tknAddr).balanceOf(address(this));\r\n            tknAmt = tknAmt <= tknBal ? tknAmt : tknBal;\r\n            require(ERC20Interface(tknAddr).transfer(msg.sender, tknAmt), \"not enough tkn to Transfer\");\r\n            emit LogWithdrawToken(tknAddr, tknAmt);\r\n        } else {\r\n            require(cTokenContract.redeem(withdrawAmt) == 0, \"something went wrong\");\r\n            uint ethAmt = wmul(withdrawAmt, exchangeRate);\r\n            uint ethBal = address(this).balance;\r\n            ethAmt = ethAmt <= ethBal ? ethAmt : ethBal;\r\n            msg.sender.transfer(ethAmt);\r\n            emit LogWithdrawToken(getEthAddr(), ethAmt);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Deposit CToken in liquidity\r\n     */\r\n    function depositCTkn(address ctknAddr, uint amt) public {\r\n        require(CTokenInterface(ctknAddr).transferFrom(msg.sender, address(this), amt), \"Nothing to deposit\");\r\n        setApproval(ctknAddr, amt, getLiquidityAddr());\r\n        LiquidityInterface(getLiquidityAddr()).depositCTkn(ctknAddr, amt);\r\n        emit LogDepositCToken(ctknAddr, amt);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw CToken from liquidity\r\n     */\r\n    function withdrawCTkn(address ctknAddr, uint amt) public {\r\n        uint withdrawAmt = LiquidityInterface(getLiquidityAddr()).withdrawCTkn(ctknAddr, amt);\r\n        assert(CTokenInterface(ctknAddr).transfer(msg.sender, withdrawAmt));\r\n        emit LogWithdrawCToken(ctknAddr, withdrawAmt);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract InstaLiquidity is ProvideLiquidity {\r\n\r\n    function() external payable {}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getEthAddr\",\"outputs\":[{\"name\":\"eth\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ctknAddr\",\"type\":\"address\"},{\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ctknAddr\",\"type\":\"address\"},{\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"depositCTkn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getComptrollerAddr\",\"outputs\":[{\"name\":\"troller\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ctknAddr\",\"type\":\"address\"},{\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"withdrawCTkn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ctknAddr\",\"type\":\"address\"},{\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLiquidityAddr\",\"outputs\":[{\"name\":\"liquidity\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCEthAddr\",\"outputs\":[{\"name\":\"ceth\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tknAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"LogDepositToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tknAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ctknAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"LogDepositCToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ctknAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawCToken\",\"type\":\"event\"}]","ContractName":"InstaLiquidity","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://f1dcbb43d7400c37d1da639e0bd7153067fad550197d88682c69edfc87f84fb9"}]}