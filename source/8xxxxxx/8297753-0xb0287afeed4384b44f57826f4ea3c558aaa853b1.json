{"status":"1","message":"OK","result":[{"SourceCode":"// 06.08.2019\r\n// код адаптирован под версию компилятора 0.5.1\r\n// Изменения в весрии 13\r\n\r\n//    uint256 public INITIAL_SUPPLY = 10000 * 1 ether;\r\n//    uint public constant RPESALE_TOKEN_SUPPLY_LIMIT = 1000 * 1 ether;\r\n//    uint public constant RPEICO_TOKEN_SUPPLY_LIMIT = 2000 * 1 ether;\r\n\r\n// текущая версия - 12 тестовая. уменьшены объемы!!!!\r\n// добавлены комменты в require\r\n// исправлена ф-ия refund\r\n// блокировки переводов сделаны на весь период ICO и Crowdsale\r\n// добавлен лог в refund\r\n// добавлены функции блокировки\\разблокировки внешних переводов в рабочем режиме контракта\r\n// для возможности расчета дивидендов\r\n// CRYPT Token = > CRYPT\r\n// CRTT => CRT\r\n// изменены ф-ции раздачи токенов. бесплатно раздать токены можно только с 4-х зарезервированных адресов\r\n// в fallback функцию добавлен блок расчета длительности периодов, пауз между периодами \r\n// и автоматической смены периодов по окончании контрольного времени (пауза=30 суток)\r\n// изменен порядок расчета лимита при приеме средств - учитываются входящие средства\r\n// изменен порядок расчет лимита в первые сутки Pre-ICO - лимит идет не на транзакцию, а на баланс пользователя плюс его платеж\r\n// отключена возможность приема средств и продажи токенов по окончанию Crowdsale(на стадии WorkTime)\r\n// добавлена функция вывода всех токенов с баланса контракта на адрес собственника по окончании Crowdsale.\r\n\r\n//- Лимиты по объему 0.4 ETH = 2 000 токенов\r\n//- Лимиты по времени 1 СУТКИ \r\n//- Пауза между стадиями - 1 сутки \r\n//* МИНИМАЛЬНЫЙ ПЛАТЕЖ НА PRESALE 0.1 ETH \r\n//* МАКСИМАЛЬНЫЙ ПЛАТЕЖ НА PREICO 0.1 ETH\r\n// Всего выпущено = 50 000 токенов\r\n// HardCap 40% = 20 000 токенов = 4 ETH\r\n\r\npragma solidity ^0.5.1;\r\n\r\n\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender)\r\n        public view returns (uint256);\r\n\r\n    function transferFrom(address from, address to, uint256 value)\r\n        public returns (bool);\r\n\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n    );\r\n}\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    uint256 totalSupply_;\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n  \r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function allowance(\r\n        address _owner,\r\n        address _spender\r\n    )\r\n    public\r\n    view\r\n    returns (uint256)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n\r\n    function increaseApproval(\r\n        address _spender,\r\n        uint _addedValue\r\n    )\r\n    public\r\n    returns (bool)\r\n    {\r\n        allowed[msg.sender][_spender] = (\r\n        allowed[msg.sender][_spender].add(_addedValue));\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n\r\n    function decreaseApproval(\r\n        address _spender,\r\n        uint _subtractedValue\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract CRYPTToken is StandardToken {\r\n    string public constant name = \"CRYPT\";\r\n    string public constant symbol = \"CRT\";\r\n    uint32 public constant decimals = 18;\r\n    uint256 public INITIAL_SUPPLY = 10000 * 1 ether;\r\n    address public CrowdsaleAddress;\r\n    bool public lockTransfers = false;\r\n\r\n    constructor(address _CrowdsaleAddress) public {\r\n    \r\n        CrowdsaleAddress = _CrowdsaleAddress;\r\n        totalSupply_ = INITIAL_SUPPLY;\r\n        balances[msg.sender] = INITIAL_SUPPLY;      \r\n    }\r\n  \r\n    modifier onlyOwner() {\r\n        // only Crowdsale contract\r\n        require(msg.sender == CrowdsaleAddress);\r\n        _;\r\n    }\r\n\r\n     // Override\r\n    function transfer(address _to, uint256 _value) public returns(bool){\r\n        if (msg.sender != CrowdsaleAddress){\r\n            require(!lockTransfers, \"Transfers are prohibited in ICO and Crowdsale period\");\r\n        }\r\n        return super.transfer(_to,_value);\r\n    }\r\n\r\n     // Override\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool){\r\n        if (msg.sender != CrowdsaleAddress){\r\n            require(!lockTransfers, \"Transfers are prohibited in ICO and Crowdsale period\");\r\n        }\r\n        return super.transferFrom(_from,_to,_value);\r\n    }\r\n     \r\n    function acceptTokens(address _from, uint256 _value) public onlyOwner returns (bool){\r\n        require (balances[_from] >= _value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[CrowdsaleAddress] = balances[CrowdsaleAddress].add(_value);\r\n        emit Transfer(_from, CrowdsaleAddress, _value);\r\n        return true;\r\n    }\r\n\r\n    function lockTransfer(bool _lock) public onlyOwner {\r\n        lockTransfers = _lock;\r\n    }\r\n\r\n\r\n\r\n    function() external payable {\r\n        // The token contract don`t receive ether\r\n        revert();\r\n    }  \r\n}\r\n\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    address candidate;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        candidate = newOwner;\r\n    }\r\n\r\n    function confirmOwnership() public {\r\n        require(candidate == msg.sender);\r\n        owner = candidate;\r\n        delete candidate;\r\n    }\r\n\r\n}\r\n\r\ncontract HoldProjectAddress {\r\n    //Address where stored command tokens- 50%\r\n    //Withdraw tokens allowed only after 1 year\r\n    function() external payable {\r\n        // The contract don`t receive ether\r\n        revert();\r\n    } \r\n}\r\n\r\ncontract HoldBountyAddress {\r\n    //Address where stored bounty tokens- 1%\r\n    //Withdraw tokens allowed only after 40 days\r\n    function() external payable {\r\n        // The contract don`t receive ether\r\n        revert();\r\n    } \r\n}\r\n\r\ncontract HoldAdvisorsAddress {\r\n    //Address where stored advisors tokens- 1%\r\n    //Withdraw tokens allowed only after 40 days\r\n    function() external payable {\r\n        // The contract don`t receive ether\r\n        revert();\r\n    } \r\n}\r\n\r\ncontract HoldAdditionalAddress {\r\n    //Address where stored additional tokens- 8%\r\n    function() external payable {\r\n        // The contract don`t receive ether\r\n        revert();\r\n    } \r\n}\r\n\r\ncontract Crowdsale is Ownable {\r\n    using SafeMath for uint; \r\n    event LogStateSwitch(State newState);\r\n    event Withdraw(address indexed from, address indexed to, uint256 amount);\r\n    event Refunding(address indexed to, uint256 amount);\r\n    mapping(address => uint) public crowdsaleBalances;\r\n\r\n    address myAddress = address(this);\r\n    uint64 preSaleStartTime = 0;\r\n    uint64 preICOStartTime = 0;\r\n    uint64 crowdSaleStartTime = 0;\r\n    uint public  saleRate = 5000;  //tokens for 1 ether\r\n    uint256 public soldTokens = 0;\r\n\r\n    // 50 000 000 sold tokens limit for Pre-Sale\r\n    uint public constant RPESALE_TOKEN_SUPPLY_LIMIT = 1000 * 1 ether;\r\n\r\n\r\n    // 100 000 000 sold tokens limit for Pre-ICO\r\n    uint public constant RPEICO_TOKEN_SUPPLY_LIMIT = 2000 * 1 ether;\r\n\r\n    // 40 000 000 tokens soft cap (otherwise - refund)\r\n    // equal 8 000 eth\r\n\r\n\r\n    uint public constant TOKEN_SOFT_CAP = 2000 * 1 ether;\r\n\r\n    \r\n    CRYPTToken public token = new CRYPTToken(myAddress);\r\n    \r\n    // New address for hold tokens\r\n    HoldProjectAddress public holdAddress1 = new HoldProjectAddress();\r\n    HoldBountyAddress public holdAddress2 = new HoldBountyAddress();\r\n    HoldAdvisorsAddress public holdAddress3 = new HoldAdvisorsAddress();\r\n    HoldAdditionalAddress public holdAddress4 = new HoldAdditionalAddress();\r\n\r\n    // Create state of contract\r\n    enum State { \r\n        Init,    \r\n        PreSale, \r\n        PreICO,  \r\n        CrowdSale,\r\n        Refunding,\r\n        WorkTime\r\n    }\r\n        \r\n    State public currentState = State.Init;\r\n\r\n    modifier onlyInState(State state){ \r\n        require(state==currentState); \r\n        _; \r\n    }\r\n\r\n    constructor() public {\r\n        uint256 TotalTokens = token.INITIAL_SUPPLY().div(1 ether);\r\n        // distribute tokens\r\n        // Transer tokens to project address.  (50%)\r\n        giveTokens(address(holdAddress1), TotalTokens.div(2));\r\n        // Transer tokens to bounty address.  (1%)\r\n        giveTokens(address(holdAddress2), TotalTokens.div(100));\r\n        // Transer tokens to advisors address. (1%)\r\n        giveTokens(address(holdAddress3), TotalTokens.div(100));\r\n        // Transer tokens to additional address. (8%)\r\n        giveTokens(address(holdAddress4), TotalTokens.div(100).mul(8));\r\n        \r\n    }\r\n\r\n    function returnTokensFromHoldProjectAddress(uint256 _value) internal returns(bool){\r\n        // the function take tokens from HoldProjectAddress to contract\r\n        // only after 1 year\r\n        // the sum is entered in whole tokens (1 = 1 token)\r\n        uint256 value = _value;\r\n        require (value >= 1);\r\n        value = value.mul(1 ether);\r\n        require (now >= preSaleStartTime + 1 days, \"only after 1 year\");\r\n        token.acceptTokens(address(holdAddress1), value); \r\n        return true;\r\n    } \r\n\r\n    function returnTokensFromHoldBountyAddress(uint256 _value) internal returns(bool){\r\n        // the function take tokens from HoldBountyAddress to contract\r\n        // only after 40 days\r\n        // the sum is entered in whole tokens (1 = 1 token)\r\n        uint256 value = _value;\r\n        require (value >= 1);\r\n        value = value.mul(1 ether);\r\n        require (now >= preSaleStartTime + 1 days, \"only after 40 days\");\r\n        token.acceptTokens(address(holdAddress2), value);    \r\n        return true;\r\n    } \r\n    \r\n    function returnTokensFromHoldAdvisorsAddress(uint256 _value) internal returns(bool){\r\n        // the function take tokens from HoldAdvisorsAddress to contract\r\n        // only after 40 days\r\n        // the sum is entered in whole tokens (1 = 1 token)\r\n        uint256 value = _value;\r\n        require (value >= 1);\r\n        value = value.mul(1 ether);\r\n        require (now >= preSaleStartTime + 1 days, \"only after 40 days\");\r\n        token.acceptTokens(address(holdAddress3), value);    \r\n        return true;\r\n    } \r\n    \r\n    function returnTokensFromHoldAdditionalAddress(uint256 _value) internal returns(bool){\r\n        // the function take tokens from HoldAdditionalAddress to contract\r\n        // the sum is entered in whole tokens (1 = 1 token)\r\n        uint256 value = _value;\r\n        require (value >= 1);\r\n        value = value.mul(1 ether);\r\n        token.acceptTokens(address(holdAddress4), value);    \r\n        return true;\r\n    }     \r\n    \r\n    function giveTokens(address _newInvestor, uint256 _value) internal {\r\n        require (_newInvestor != address(0));\r\n        require (_value >= 1);\r\n        uint256 value = _value;\r\n        value = value.mul(1 ether);\r\n        token.transfer(_newInvestor, value);\r\n    }  \r\n    \r\n    function giveBountyTokens(address _newInvestor, uint256 _value) public onlyOwner {\r\n        // the sum is entered in whole tokens (1 = 1 token)\r\n        if (returnTokensFromHoldBountyAddress(_value)){\r\n            giveTokens(_newInvestor, _value);\r\n        }\r\n    }\r\n\r\n    function giveProjectTokens(address _newInvestor, uint256 _value) public onlyOwner {\r\n        // the sum is entered in whole tokens (1 = 1 token)\r\n\r\n        if (returnTokensFromHoldProjectAddress(_value)){\r\n            giveTokens(_newInvestor, _value);\r\n        }\r\n    }\r\n\r\n    function giveAdvisorsTokens(address _newInvestor, uint256 _value) public onlyOwner {\r\n        // the sum is entered in whole tokens (1 = 1 token)\r\n        if (returnTokensFromHoldAdvisorsAddress(_value)){\r\n            giveTokens(_newInvestor, _value);\r\n        }\r\n    }\r\n\r\n    function giveAdditionalTokens(address _newInvestor, uint256 _value) public onlyOwner {\r\n        // the sum is entered in whole tokens (1 = 1 token)\r\n        if (returnTokensFromHoldAdditionalAddress(_value)){\r\n            giveTokens(_newInvestor, _value);\r\n        }\r\n    }\r\n\r\n    function withdrawAllTokensFromBalance() public onlyOwner {\r\n        require(currentState == State.WorkTime || currentState == State.Refunding,\"This function is accessable only in WorkTime or Refunding\");\r\n        uint value = token.balanceOf(myAddress);\r\n        token.transfer(msg.sender, value);\r\n    }\r\n\r\n    function setState(State _state) internal {\r\n        currentState = _state;\r\n        emit LogStateSwitch(_state);\r\n    }\r\n\r\n    function startPreSale() public onlyOwner onlyInState(State.Init) {\r\n        setState(State.PreSale);\r\n        preSaleStartTime = uint64(now);\r\n        token.lockTransfer(true);\r\n    }\r\n\r\n    function startPreICO() public onlyOwner onlyInState(State.PreSale) {\r\n        // PreSale minimum 10 days\r\n        require (now >= preSaleStartTime + 1 days, \"Mimimum period Pre-Sale is 10 days\");\r\n        setState(State.PreICO);\r\n        preICOStartTime = uint64(now);\r\n    }\r\n     \r\n    function startCrowdSale() public onlyOwner onlyInState(State.PreICO) {\r\n        // Pre-ICO minimum 15 days\r\n        require (now >= preICOStartTime + 1 days, \"Mimimum period Pre-ICO is 15 days\");\r\n        setState(State.CrowdSale);\r\n        crowdSaleStartTime = uint64(now);\r\n    }\r\n    \r\n    function finishCrowdSale() public onlyOwner onlyInState(State.CrowdSale) {\r\n        // CrowdSale minimum 30 days\r\n        // Attention - function not have reverse!\r\n\r\n        require (now >= crowdSaleStartTime + 1 days, \"Mimimum period CrowdSale is 30 days\");\r\n        // test coftcap\r\n        if (soldTokens < TOKEN_SOFT_CAP) {\r\n            // softcap don\"t accessable - refunding\r\n            setState(State.Refunding);\r\n        } else {\r\n            // All right! CrowdSale is passed. WithdrawProfit is accessable\r\n            setState(State.WorkTime);\r\n            token.lockTransfer(false);\r\n        }\r\n    }\r\n\r\n\r\n    function blockExternalTransfer() public onlyOwner onlyInState (State.WorkTime){\r\n        //Blocking all external token transfer for dividends calculations\r\n        require (token.lockTransfers() == false);\r\n        token.lockTransfer(true);\r\n    }\r\n\r\n    function unBlockExternalTransfer() public onlyOwner onlyInState (State.WorkTime){\r\n        //Unblocking all external token transfer\r\n        require (token.lockTransfers() == true);\r\n        token.lockTransfer(false);\r\n    }\r\n\r\n\r\n    function calcBonus () public view returns(uint256) {\r\n        // calculation bonus\r\n        uint256 actualBonus = 0;\r\n        if (currentState == State.PreSale){\r\n            actualBonus = 20;\r\n        }\r\n        if (currentState == State.PreICO){\r\n            actualBonus = 10;\r\n        }\r\n        return actualBonus;\r\n    }\r\n\r\n \r\n    function saleTokens() internal {\r\n        require(currentState != State.Init, \"Contract is init, do not accept ether.\"); \r\n        require(currentState != State.Refunding, \"Contract is refunding, do not accept ether.\");\r\n        require(currentState != State.WorkTime, \"Contract is WorkTime, do not accept ether.\");\r\n        //calculation length of periods, pauses, auto set next stage\r\n        if (currentState == State.PreSale) {\r\n            if ((uint64(now) > preSaleStartTime + 1 days) && (uint64(now) <= preSaleStartTime + 2 days)){\r\n                require (false, \"It is pause after PreSale stage - contract do not accept ether\");\r\n            }\r\n            if (uint64(now) > preSaleStartTime + 2 days){\r\n                setState(State.PreICO);\r\n                preICOStartTime = uint64(now);\r\n            }\r\n        }\r\n\r\n        if (currentState == State.PreICO) {\r\n            if ((uint64(now) > preICOStartTime + 1 days) && (uint64(now) <= preICOStartTime + 2 days)){\r\n                require (false, \"It is pause after PreICO stage - contract do not accept ether\");\r\n            }\r\n            if (uint64(now) > preICOStartTime + 2 days){\r\n                setState(State.CrowdSale);\r\n                crowdSaleStartTime = uint64(now);\r\n            }\r\n        }        \r\n        \r\n        if (currentState == State.CrowdSale) {\r\n            if ((uint64(now) > crowdSaleStartTime + 1 days) && (uint64(now) <= crowdSaleStartTime + 2 days)){\r\n                require (false, \"It is pause after CrowdSale stage - contract do not accept ether\");\r\n            }\r\n            if (uint64(now) > crowdSaleStartTime + 2 days){\r\n                // autofinish CrowdSale stage\r\n                if (soldTokens < TOKEN_SOFT_CAP) {\r\n                    // softcap don\"t accessable - refunding\r\n                    setState(State.Refunding);\r\n                } else {\r\n                    // All right! CrowdSale is passed. WithdrawProfit is accessable\r\n                    setState(State.WorkTime);\r\n                    token.lockTransfer(false);\r\n                }\r\n            }\r\n        }        \r\n        \r\n        uint tokens = saleRate.mul(msg.value);\r\n        if (currentState == State.PreSale) {\r\n            require (RPESALE_TOKEN_SUPPLY_LIMIT > soldTokens.add(tokens), \"HardCap of Pre-Sale is excedded.\"); \r\n            require (msg.value >= 1 ether / 10, \"Minimum 20 ether for transaction all Pre-Sale period\");\r\n        }\r\n        if (currentState == State.PreICO) {\r\n            require (RPEICO_TOKEN_SUPPLY_LIMIT > soldTokens.add(tokens), \"HardCap of Pre-ICO is excedded.\");\r\n            if (uint64(now) < preICOStartTime + 1 days){\r\n                uint limitPerUser = crowdsaleBalances[msg.sender] + msg.value;\r\n                require (limitPerUser <= 1 ether / 10, \"Maximum is 20 ether for user in first day of Pre-ICO\");\r\n            }\r\n        }\r\n        tokens = tokens.add(tokens.mul(calcBonus()).div(100));\r\n        crowdsaleBalances[msg.sender] = crowdsaleBalances[msg.sender].add(msg.value);\r\n        token.transfer(msg.sender, tokens);\r\n        soldTokens = soldTokens.add(tokens);\r\n    }\r\n \r\n    function refund() public payable{\r\n        require(currentState == State.Refunding, \"Only for Refunding stage.\");\r\n        // refund ether to investors\r\n        uint value = crowdsaleBalances[msg.sender]; \r\n        crowdsaleBalances[msg.sender] = 0; \r\n        msg.sender.transfer(value);\r\n        emit Refunding(msg.sender, value);\r\n    }\r\n    \r\n    function withdrawProfit (address payable _to, uint256 _value) public onlyOwner payable {\r\n    // withdrawProfit - only if coftcap passed\r\n        require (currentState == State.WorkTime, \"Contract is not at WorkTime stage. Access denied.\");\r\n        require (myAddress.balance >= _value);\r\n        require(_to != address(0));\r\n        _to.transfer(_value);\r\n        emit Withdraw(msg.sender, _to, _value);\r\n    }\r\n\r\n\r\n    function() external payable {\r\n        saleTokens();\r\n    }    \r\n \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"currentState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"crowdsaleBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"holdAddress1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_SOFT_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newInvestor\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"giveProjectTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unBlockExternalTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startPreSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"holdAddress3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RPEICO_TOKEN_SUPPLY_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"holdAddress2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAllTokensFromBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newInvestor\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"giveAdditionalTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RPESALE_TOKEN_SUPPLY_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calcBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startPreICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawProfit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishCrowdSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"holdAddress4\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newInvestor\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"giveAdvisorsTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startCrowdSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newInvestor\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"giveBountyTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"blockExternalTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newState\",\"type\":\"uint8\"}],\"name\":\"LogStateSwitch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Refunding\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c008bbaa07ed62a62fb444d83a849c0f19d8a0bbcdfd420227c63749faa989f9"}]}