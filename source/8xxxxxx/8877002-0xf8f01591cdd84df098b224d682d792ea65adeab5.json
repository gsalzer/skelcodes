{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/Utils/Ownable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, \"msg.sender not owner\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0), \"_newOwner == 0\");\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/Utils/Destructible.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Destructible\r\n * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\r\n */\r\ncontract Destructible is Ownable {\r\n  /**\r\n   * @dev Transfers the current balance to the owner and terminates the contract.\r\n   */\r\n  function destroy() public onlyOwner {\r\n    selfdestruct(owner);\r\n  }\r\n\r\n  function destroyAndSend(address _recipient) public onlyOwner {\r\n    selfdestruct(_recipient);\r\n  }\r\n}\r\n\r\n// File: contracts/Interfaces/IBadERC20.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Bad formed ERC20 token interface.\r\n * @dev The interface of the a bad formed ERC20 token.\r\n */\r\ninterface IBadERC20 {\r\n    function transfer(address to, uint256 value) external;\r\n    function approve(address spender, uint256 value) external;\r\n    function transferFrom(\r\n      address from,\r\n      address to,\r\n      uint256 value\r\n    ) external;\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(\r\n      address who\r\n    ) external view returns (uint256);\r\n\r\n    function allowance(\r\n      address owner,\r\n      address spender\r\n    ) external view returns (uint256);\r\n\r\n    event Transfer(\r\n      address indexed from,\r\n      address indexed to,\r\n      uint256 value\r\n    );\r\n    event Approval(\r\n      address indexed owner,\r\n      address indexed spender,\r\n      uint256 value\r\n    );\r\n}\r\n\r\n// File: contracts/Utils/SafeTransfer.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeTransfer\r\n * @dev Transfer Bad ERC20 tokens\r\n */\r\nlibrary SafeTransfer {\r\n/**\r\n   * @dev Wrapping the ERC20 transferFrom function to avoid missing returns.\r\n   * @param _tokenAddress The address of bad formed ERC20 token.\r\n   * @param _from Transfer sender.\r\n   * @param _to Transfer receiver.\r\n   * @param _value Amount to be transfered.\r\n   * @return Success of the safeTransferFrom.\r\n   */\r\n\r\n  function _safeTransferFrom(\r\n    address _tokenAddress,\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n    returns (bool result)\r\n  {\r\n    IBadERC20(_tokenAddress).transferFrom(_from, _to, _value);\r\n\r\n    assembly {\r\n      switch returndatasize()\r\n      case 0 {                      // This is our BadToken\r\n        result := not(0)            // result is true\r\n      }\r\n      case 32 {                     // This is our GoodToken\r\n        returndatacopy(0, 0, 32)\r\n        result := mload(0)          // result == returndata of external call\r\n      }\r\n      default {                     // This is not an ERC20 token\r\n        revert(0, 0)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Wrapping the ERC20 transfer function to avoid missing returns.\r\n   * @param _tokenAddress The address of bad formed ERC20 token.\r\n   * @param _to Transfer receiver.\r\n   * @param _amount Amount to be transfered.\r\n   * @return Success of the safeTransfer.\r\n   */\r\n  function _safeTransfer(\r\n    address _tokenAddress,\r\n    address _to,\r\n    uint _amount\r\n  )\r\n    internal\r\n    returns (bool result)\r\n  {\r\n    IBadERC20(_tokenAddress).transfer(_to, _amount);\r\n\r\n    assembly {\r\n      switch returndatasize()\r\n      case 0 {                      // This is our BadToken\r\n        result := not(0)            // result is true\r\n      }\r\n      case 32 {                     // This is our GoodToken\r\n        returndatacopy(0, 0, 32)\r\n        result := mload(0)          // result == returndata of external call\r\n      }\r\n      default {                     // This is not an ERC20 token\r\n        revert(0, 0)\r\n      }\r\n    }\r\n  }\r\n\r\n  function _safeApprove(\r\n    address _token,\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n  internal\r\n  returns (bool result)\r\n  {\r\n    IBadERC20(_token).approve(_spender, _value);\r\n\r\n    assembly {\r\n      switch returndatasize()\r\n      case 0 {                      // This is our BadToken\r\n        result := not(0)            // result is true\r\n      }\r\n      case 32 {                     // This is our GoodToken\r\n        returndatacopy(0, 0, 32)\r\n        result := mload(0)          // result == returndata of external call\r\n      }\r\n      default {                     // This is not an ERC20 token\r\n        revert(0, 0)\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// File: contracts/Utils/Pausable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused, \"The contract is paused\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused, \"The contract is not paused\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyOwner whenNotPaused {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyOwner whenPaused {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n// File: contracts/Interfaces/IErc20Swap.sol\r\n\r\npragma solidity ^0.4.0;\r\n\r\ninterface IErc20Swap {\r\n    function getRate(address src, address dst, uint256 srcAmount) external view returns(uint expectedRate, uint slippageRate);  // real rate = returned value / 1e18\r\n    function swap(address src, uint srcAmount, address dest, uint maxDestAmount, uint minConversionRate) external payable;\r\n}\r\n\r\n// File: contracts/Interfaces/IKyberNetwork.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\ninterface IKyberNetwork {\r\n\r\n    function getExpectedRate(address src, address dest, uint srcQty) external view\r\n        returns (uint expectedRate, uint slippageRate);\r\n\r\n    function trade(\r\n        address src,\r\n        uint srcAmount,\r\n        address dest,\r\n        address destAddress,\r\n        uint maxDestAmount,\r\n        uint minConversionRate,\r\n        address walletId\r\n    ) external payable returns(uint256);\r\n}\r\n\r\n// File: contracts/KyberTokenSwap.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title TokenSwap.\r\n * @author Eidoo SAGL.\r\n * @dev A swap asset contract. The offerAmount and wantAmount are collected and sent into the contract itself.\r\n */\r\ncontract KyberTokenSwap is Pausable, Destructible, IErc20Swap\r\n{\r\n  using SafeMath for uint;\r\n  using SafeTransfer for ERC20;\r\n  address constant ETHER = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n  uint constant expScale = 1e18;\r\n  uint constant rateDecimals = 18;\r\n  uint constant rateUnit = 10 ** rateDecimals;\r\n\r\n  IKyberNetwork public kyberNetwork;\r\n\r\n  address public wallet;\r\n  address public kyberFeeWallet;\r\n\r\n  uint public spreadDefault;\r\n  mapping (address => mapping (address => uint)) spreadCustom;\r\n  uint constant spreadDecimals = 6;\r\n  uint constant spreadUnit = 10 ** spreadDecimals;\r\n\r\n  event LogWithdrawToken(\r\n    address indexed _from,\r\n    address indexed _token,\r\n    uint amount\r\n  );\r\n\r\n  event LogTokenSwap(\r\n    address indexed _userAddress,\r\n    address indexed _userSentTokenAddress,\r\n    uint _userSentTokenAmount,\r\n    address indexed _userReceivedTokenAddress,\r\n    uint _userReceivedTokenAmount\r\n  );\r\n\r\n  event LogFee(address token, uint amount);\r\n\r\n  event UnexpectedIntialBalance(address token, uint amount);\r\n\r\n  constructor(\r\n    address _kyberNetwork,\r\n    address _wallet,\r\n    address _kyberFeeWallet,\r\n    uint _spread\r\n  )\r\n    public\r\n  {\r\n    require(_wallet != address(0), \"_wallet == address(0)\");\r\n    require(_kyberNetwork != address(0), \"_kyberNetwork == address(0)\");\r\n    require(_spread < spreadUnit, \"spread >= spreadUnit\");\r\n    wallet = _wallet;\r\n    spreadDefault = _spread;\r\n    kyberNetwork = IKyberNetwork(_kyberNetwork);\r\n    kyberFeeWallet = _kyberFeeWallet;\r\n  }\r\n\r\n  function() external payable {\r\n    // can receive ethers from KyberNetwork\r\n  }\r\n\r\n  function setWallet(address _wallet) public onlyOwner {\r\n    require(_wallet != address(0), \"_wallet == address(0)\");\r\n    wallet = _wallet;\r\n  }\r\n\r\n  function setKyberFeeWallet(address _wallet) public onlyOwner {\r\n    kyberFeeWallet = _wallet;\r\n  }\r\n\r\n  function setSpreadDefault(uint _spread) public onlyOwner {\r\n    require(_spread < spreadUnit, \"spread >= spreadUnit\");\r\n    spreadDefault = _spread;\r\n  }\r\n\r\n  // spread value >= spreadUnit means no fee\r\n  function setSpread(address tokenA, address tokenB, uint spread) public onlyOwner {\r\n    uint value = spread > spreadUnit ? spreadUnit : spread;\r\n    spreadCustom[tokenA][tokenB] = value;\r\n    spreadCustom[tokenB][tokenA] = value;\r\n  }\r\n\r\n  function getSpread(address tokenA, address tokenB) public view returns(uint) {\r\n    uint value = spreadCustom[tokenA][tokenB];\r\n    if (value == 0) return spreadDefault;\r\n    if (value >= spreadUnit) return 0;\r\n    else return value;\r\n  }\r\n\r\n  /**\r\n   * @dev Withdraw asset.\r\n   * @param _tokenAddress Asset to be withdrawed.\r\n   * @return bool.\r\n   */\r\n  function withdrawToken(address _tokenAddress)\r\n    public\r\n    onlyOwner\r\n  {\r\n    uint tokenBalance;\r\n    if (_tokenAddress == ETHER || _tokenAddress == address(0)) {\r\n      tokenBalance = address(this).balance;\r\n      msg.sender.transfer(tokenBalance);\r\n    } else {\r\n      tokenBalance = ERC20(_tokenAddress).balanceOf(address(this));\r\n      ERC20(_tokenAddress)._safeTransfer(msg.sender, tokenBalance);\r\n    }\r\n    emit LogWithdrawToken(msg.sender, _tokenAddress, tokenBalance);\r\n  }\r\n\r\n  /*******************  *******************/\r\n  function getRate(address src, address dest, uint256 srcAmount) external view\r\n    returns(uint expectedRate, uint slippageRate)\r\n  {\r\n    (uint256 kExpected, uint256 kSplippage) = kyberNetwork.getExpectedRate(src, dest, srcAmount);\r\n    uint256 spread = getSpread(src, dest);\r\n    expectedRate = kExpected.mul(spreadUnit - spread).div(spreadUnit);\r\n    slippageRate = kSplippage.mul(spreadUnit - spread).div(spreadUnit);\r\n  }\r\n\r\n  function _freeUnexpectedTokens(address token) private {\r\n    uint256 unexpectedBalance = token == ETHER\r\n      ? address(this).balance.sub(msg.value)\r\n      : ERC20(token).balanceOf(address(this));\r\n    if (unexpectedBalance > 0) {\r\n      _transfer(token, wallet, unexpectedBalance);\r\n      emit UnexpectedIntialBalance(token, unexpectedBalance);\r\n    }\r\n  }\r\n\r\n  function swap(address src, uint srcAmount, address dest, uint maxDestAmount, uint minConversionRate) public payable {\r\n    require(src != dest, \"src == dest\");\r\n    require(srcAmount > 0, \"srcAmount == 0\");\r\n\r\n    // empty unexpected initial balances\r\n    _freeUnexpectedTokens(src);\r\n    _freeUnexpectedTokens(dest);\r\n\r\n    if (src == ETHER) {\r\n      require(msg.value == srcAmount, \"msg.value != srcAmount\");\r\n    } else {\r\n      require(\r\n        ERC20(src).allowance(msg.sender, address(this)) >= srcAmount,\r\n        \"ERC20 allowance < srcAmount\"\r\n      );\r\n      // get user's tokens\r\n      require(\r\n        ERC20(src)._safeTransferFrom(msg.sender, address(this), srcAmount),\r\n        \"cannot transfer src token from msg.sender to this\"\r\n      );\r\n    }\r\n\r\n//    (uint256 expectedRate, ) = kyberNetwork.getExpectedRate(src, dest, srcAmount);\r\n//    require(expectedRate > 0, \"expectedRate is 0, pair is not tradable\");\r\n\r\n    uint256 spread = getSpread(src, dest);\r\n\r\n    uint256 destTradedAmount = _callKyberNetworkTrade(src, srcAmount, dest, maxDestAmount, minConversionRate, spread);\r\n\r\n    uint256 notTraded = _myBalance(src);\r\n    uint256 srcTradedAmount = srcAmount.sub(notTraded);\r\n    require(srcTradedAmount > 0, \"no traded tokens\");\r\n    uint256 minDestAmount = srcTradedAmount.mul(minConversionRate).div(expScale);\r\n    require(\r\n      minDestAmount <= destTradedAmount,\r\n      \"applied rate below minConversionRate\"\r\n    );\r\n    require(\r\n      _myBalance(dest) >= destTradedAmount,\r\n      \"No enough dest tokens after trade\"\r\n    );\r\n    // pay fee and user\r\n    uint256 toUserAmount = _payFee(dest, destTradedAmount, spread);\r\n    _transfer(dest, msg.sender, toUserAmount);\r\n    // returns not traded tokens if any\r\n    if (notTraded > 0) {\r\n      _transfer(src, msg.sender, notTraded);\r\n    }\r\n\r\n    emit LogTokenSwap(\r\n      msg.sender,\r\n      src,\r\n      srcTradedAmount,\r\n      dest,\r\n      toUserAmount\r\n    );\r\n  }\r\n\r\n  function _callKyberNetworkTrade(address src, uint srcAmount, address dest, uint maxDestAmount, uint minConversionRate, uint spread) private returns(uint256) {\r\n    // calculate the minConversionRate and maxDestAmount keeping in mind the fee\r\n    uint256 adaptedMinRate = minConversionRate.mul(spreadUnit).div(spreadUnit - spread);\r\n    uint256 adaptedMaxDestAmount = maxDestAmount.mul(spreadUnit).div(spreadUnit - spread);\r\n    if (src == ETHER) {\r\n      return kyberNetwork.trade\r\n        .value(srcAmount)(src, srcAmount, dest, address(this), adaptedMaxDestAmount, adaptedMinRate, kyberFeeWallet);\r\n    } else {\r\n      if (ERC20(src).allowance(address(this), address(kyberNetwork)) > 0) {\r\n        ERC20(src)._safeApprove(address(kyberNetwork), 0);\r\n      }\r\n      ERC20(src)._safeApprove(address(kyberNetwork), srcAmount);\r\n      return kyberNetwork.trade(src, srcAmount, dest, address(this), adaptedMaxDestAmount, adaptedMinRate, kyberFeeWallet);\r\n    }\r\n  }\r\n\r\n  function _payFee(address token, uint destTradedAmount, uint spread) private returns(uint256 toUserAmount) {\r\n    uint256 fee = destTradedAmount.mul(spread).div(spreadUnit);\r\n    toUserAmount = destTradedAmount.sub(fee);\r\n    // pay fee\r\n    if (fee > 0) {\r\n      _transfer(token, wallet, fee);\r\n      emit LogFee(token, fee);\r\n    }\r\n  }\r\n\r\n  function _myBalance(address token) private view returns(uint256) {\r\n    return token == ETHER\r\n      ? address(this).balance\r\n      : ERC20(token).balanceOf(address(this));\r\n  }\r\n\r\n  function _transfer(address token, address recipient, uint256 amount) private {\r\n    if (token == ETHER) {\r\n      recipient.transfer(amount);\r\n    } else {\r\n      require(ERC20(token)._safeTransfer(recipient, amount), \"cannot transfer tokens\");\r\n    }\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"kyberFeeWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setKyberFeeWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenA\",\"type\":\"address\"},{\"name\":\"tokenB\",\"type\":\"address\"},{\"name\":\"spread\",\"type\":\"uint256\"}],\"name\":\"setSpread\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"name\":\"dest\",\"type\":\"address\"},{\"name\":\"maxDestAmount\",\"type\":\"uint256\"},{\"name\":\"minConversionRate\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenA\",\"type\":\"address\"},{\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getSpread\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"spreadDefault\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kyberNetwork\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"dest\",\"type\":\"address\"},{\"name\":\"srcAmount\",\"type\":\"uint256\"}],\"name\":\"getRate\",\"outputs\":[{\"name\":\"expectedRate\",\"type\":\"uint256\"},{\"name\":\"slippageRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spread\",\"type\":\"uint256\"}],\"name\":\"setSpreadDefault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"destroyAndSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_kyberNetwork\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_kyberFeeWallet\",\"type\":\"address\"},{\"name\":\"_spread\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_userSentTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_userSentTokenAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_userReceivedTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_userReceivedTokenAmount\",\"type\":\"uint256\"}],\"name\":\"LogTokenSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnexpectedIntialBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"KyberTokenSwap","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000818e6fecd516ecc3849daf6845e3ec868087b755000000000000000000000000f4ba4c2aa5bc3c373537ec85f61a02afdb697106000000000000000000000000fb0fce9d94f3f69d419dbf11cf35bed84a50103400000000000000000000000000000000000000000000000000000000000003e8","Library":"","LicenseType":"None","SwarmSource":"bzzr://8c3fdd6e308a2fe474e3363aeb7bd3ddb80a58a19733c2118b22daffc7b4e2fe"}]}