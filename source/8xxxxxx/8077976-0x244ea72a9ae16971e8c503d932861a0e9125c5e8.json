{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.10;\r\n\r\n\r\ncontract Custodian {\r\n\r\n  \r\n    struct Request {\r\n        bytes32 lockId;\r\n        bytes4 callbackSelector;\r\n        address callbackAddress;\r\n        uint256 idx;\r\n        uint256 timestamp;\r\n        bool extended;\r\n    }\r\n\r\n  \r\n    event Requested(\r\n        bytes32 _lockId,\r\n        address _callbackAddress,\r\n        bytes4 _callbackSelector,\r\n        uint256 _nonce,\r\n        address _whitelistedAddress,\r\n        bytes32 _requestMsgHash,\r\n        uint256 _timeLockExpiry\r\n    );\r\n\r\n  \r\n    event TimeLocked(\r\n        uint256 _timeLockExpiry,\r\n        bytes32 _requestMsgHash\r\n    );\r\n\r\n    \r\n    event Completed(\r\n        bytes32 _lockId,\r\n        bytes32 _requestMsgHash,\r\n        address _signer1,\r\n        address _signer2\r\n    );\r\n\r\n  \r\n    event Failed(\r\n        bytes32 _lockId,\r\n        bytes32 _requestMsgHash,\r\n        address _signer1,\r\n        address _signer2\r\n    );\r\n\r\n   \r\n    event TimeLockExtended(\r\n        uint256 _timeLockExpiry,\r\n        bytes32 _requestMsgHash\r\n    );\r\n\r\n  \r\n    uint256 public requestCount;\r\n\r\n   \r\n    mapping (address => bool) public signerSet;\r\n\r\n    \r\n    mapping (bytes32 => Request) public requestMap;\r\n\r\n   \r\n    mapping (address => mapping (bytes4 => uint256)) public lastCompletedIdxs;\r\n\r\n   \r\n    uint256 public defaultTimeLock;\r\n\r\n   \r\n    uint256 public extendedTimeLock;\r\n\r\n   \r\n    address public primary;\r\n\r\n  \r\n    constructor(\r\n        address[] memory _signers,\r\n        uint256 _defaultTimeLock,\r\n        uint256 _extendedTimeLock,\r\n        address _primary\r\n    )\r\n        public\r\n    {\r\n        \r\n        require(_signers.length >= 2);\r\n\r\n      \r\n        require(_defaultTimeLock <= _extendedTimeLock);\r\n        defaultTimeLock = _defaultTimeLock;\r\n        extendedTimeLock = _extendedTimeLock;\r\n\r\n        primary = _primary;\r\n\r\n        \r\n        requestCount = 0;\r\n        \r\n        for (uint i = 0; i < _signers.length; i++) {\r\n            \r\n            require(_signers[i] != address(0) && !signerSet[_signers[i]]);\r\n            signerSet[_signers[i]] = true;\r\n        }\r\n    }\r\n\r\n   \r\n    modifier onlyPrimary {\r\n        require(msg.sender == primary);\r\n        _;\r\n    }\r\n\r\n  \r\n    function requestUnlock(\r\n        bytes32 _lockId,\r\n        address _callbackAddress,\r\n        bytes4 _callbackSelector,\r\n        address _whitelistedAddress\r\n    )\r\n        public\r\n        payable\r\n        returns (bytes32 requestMsgHash)\r\n    {\r\n        require(msg.sender == primary || msg.value >= 1 ether);\r\n\r\n       \r\n        require(_callbackAddress != address(0));\r\n\r\n        uint256 requestIdx = ++requestCount;\r\n      \r\n        uint256 nonce = uint256(keccak256(abi.encodePacked(blockhash(block.number - 1), address(this), requestIdx)));\r\n\r\n        requestMsgHash = keccak256(abi.encodePacked(nonce, _whitelistedAddress, uint256(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)));\r\n        requestMap[requestMsgHash] = Request({\r\n            lockId: _lockId,\r\n            callbackSelector: _callbackSelector,\r\n            callbackAddress: _callbackAddress,\r\n            idx: requestIdx,\r\n            timestamp: block.timestamp,\r\n            extended: false\r\n        });\r\n\r\n      \r\n        uint256 timeLockExpiry = block.timestamp;\r\n        if (msg.sender == primary) {\r\n            timeLockExpiry += defaultTimeLock;\r\n        } else {\r\n            timeLockExpiry += extendedTimeLock;\r\n\r\n          \r\n            requestMap[requestMsgHash].extended = true;\r\n        }\r\n\r\n        emit Requested(_lockId, _callbackAddress, _callbackSelector, nonce, _whitelistedAddress, requestMsgHash, timeLockExpiry);\r\n    }\r\n\r\n    \r\n    function completeUnlock(\r\n        bytes32 _requestMsgHash,\r\n        uint8 _recoveryByte1, bytes32 _ecdsaR1, bytes32 _ecdsaS1,\r\n        uint8 _recoveryByte2, bytes32 _ecdsaR2, bytes32 _ecdsaS2\r\n    )\r\n        public\r\n        returns (bool success)\r\n    {\r\n        Request storage request = requestMap[_requestMsgHash];\r\n\r\n        bytes32 lockId = request.lockId;\r\n        address callbackAddress = request.callbackAddress;\r\n        bytes4 callbackSelector = request.callbackSelector;\r\n\r\n       \r\n        require(callbackAddress != address(0));\r\n\r\n      \r\n        require(request.idx > lastCompletedIdxs[callbackAddress][callbackSelector]);\r\n        \r\n        address signer1 =  ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _requestMsgHash)), _recoveryByte1,_ecdsaR1, _ecdsaS1);\r\n        require(signerSet[signer1]);\r\n\r\n        address signer2 =  ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _requestMsgHash)), _recoveryByte2, _ecdsaR2, _ecdsaS2);\r\n        require(signerSet[signer2]);\r\n        require(signer1 != signer2);\r\n\r\n        if (request.extended && ((block.timestamp - request.timestamp) < extendedTimeLock)) {\r\n            emit TimeLocked(request.timestamp + extendedTimeLock, _requestMsgHash);\r\n            return false;\r\n        } else if ((block.timestamp - request.timestamp) < defaultTimeLock) {\r\n            emit TimeLocked(request.timestamp + defaultTimeLock, _requestMsgHash);\r\n            return false;\r\n        } else {\r\n            if (address(this).balance > 0) {\r\n                \r\n                success = msg.sender.send(address(this).balance);\r\n            }\r\n\r\n         \r\n            lastCompletedIdxs[callbackAddress][callbackSelector] = request.idx;\r\n           \r\n            delete requestMap[_requestMsgHash];\r\n\r\n           \r\n            (success,) = callbackAddress.call(abi.encodeWithSelector(callbackSelector, lockId));\r\n\r\n            if (success) {\r\n                emit Completed(lockId, _requestMsgHash, signer1, signer2);\r\n            } else {\r\n                emit Failed(lockId, _requestMsgHash, signer1, signer2);\r\n            }\r\n        }\r\n    }\r\n\r\n    function deleteUncompletableRequest(bytes32 _requestMsgHash) public {\r\n        Request storage request = requestMap[_requestMsgHash];\r\n\r\n        uint256 idx = request.idx;\r\n\r\n        require(0 < idx && idx < lastCompletedIdxs[request.callbackAddress][request.callbackSelector]);\r\n\r\n        delete requestMap[_requestMsgHash];\r\n    }\r\n\r\n  \r\n    function extendRequestTimeLock(bytes32 _requestMsgHash) public onlyPrimary {\r\n        Request storage request = requestMap[_requestMsgHash];\r\n\r\n     \r\n        require(request.callbackAddress != address(0));\r\n\r\n       \r\n        require(request.extended != true);\r\n\r\n        \r\n        request.extended = true;\r\n\r\n        emit TimeLockExtended(request.timestamp + extendedTimeLock, _requestMsgHash);\r\n    }\r\n}\r\n\r\ncontract LockRequestable {\r\n\r\n   \r\n    uint256 public lockRequestCount;\r\n\r\n    \r\n    constructor() public {\r\n        lockRequestCount = 0;\r\n    }\r\n\r\n    function generateLockId() internal returns (bytes32 lockId) {\r\n        return keccak256(abi.encodePacked(blockhash(block.number - 1), address(this), ++lockRequestCount));\r\n    }\r\n}\r\n\r\ncontract ERC20Interface {\r\n \r\n  function totalSupply() public view returns (uint256);\r\n\r\n \r\n  function balanceOf(address _owner) public view returns (uint256 balance);\r\n\r\n  \r\n  function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n \r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n  \r\n  function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n \r\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n  \r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract CustodianUpgradeable is LockRequestable {\r\n\r\n    \r\n    struct CustodianChangeRequest {\r\n        address proposedNew;\r\n    }\r\n\r\n  \r\n    address public custodian;\r\n\r\n    \r\n    mapping (bytes32 => CustodianChangeRequest) public custodianChangeReqs;\r\n\r\n  \r\n    constructor(\r\n        address _custodian\r\n    )\r\n      LockRequestable()\r\n      public\r\n    {\r\n        custodian = _custodian;\r\n    }\r\n\r\n   \r\n    modifier onlyCustodian {\r\n        require(msg.sender == custodian);\r\n        _;\r\n    }\r\n\r\n    function requestCustodianChange(address _proposedCustodian) public returns (bytes32 lockId) {\r\n        require(_proposedCustodian != address(0));\r\n\r\n        lockId = generateLockId();\r\n\r\n        custodianChangeReqs[lockId] = CustodianChangeRequest({\r\n            proposedNew: _proposedCustodian\r\n        });\r\n\r\n        emit CustodianChangeRequested(lockId, msg.sender, _proposedCustodian);\r\n    }\r\n\r\n   \r\n    function confirmCustodianChange(bytes32 _lockId) public onlyCustodian {\r\n        custodian = getCustodianChangeReq(_lockId);\r\n\r\n        delete custodianChangeReqs[_lockId];\r\n\r\n        emit CustodianChangeConfirmed(_lockId, custodian);\r\n    }\r\n\r\n   \r\n    function getCustodianChangeReq(bytes32 _lockId) private view returns (address _proposedNew) {\r\n        CustodianChangeRequest storage changeRequest = custodianChangeReqs[_lockId];\r\n\r\n       \r\n        require(changeRequest.proposedNew != address(0));\r\n\r\n        return changeRequest.proposedNew;\r\n    }\r\n   \r\n    event CustodianChangeRequested(\r\n        bytes32 _lockId,\r\n        address _msgSender,\r\n        address _proposedCustodian\r\n    );\r\n\r\n    event CustodianChangeConfirmed(bytes32 _lockId, address _newCustodian);\r\n}\r\n\r\ncontract ERC20ImplUpgradeable is CustodianUpgradeable  {\r\n\r\n   \r\n    struct ImplChangeRequest {\r\n        address proposedNew;\r\n    }\r\n\r\n   \r\n    ERC20Impl public erc20Impl;\r\n\r\n   \r\n    mapping (bytes32 => ImplChangeRequest) public implChangeReqs;\r\n\r\n   \r\n    constructor(address _custodian) CustodianUpgradeable(_custodian) public {\r\n        erc20Impl = ERC20Impl(0x0);\r\n    }\r\n\r\n   \r\n    modifier onlyImpl {\r\n        require(msg.sender == address(erc20Impl));\r\n        _;\r\n    }\r\n\r\n    \r\n    function requestImplChange(address _proposedImpl) public returns (bytes32 lockId) {\r\n        require(_proposedImpl != address(0));\r\n\r\n        lockId = generateLockId();\r\n\r\n        implChangeReqs[lockId] = ImplChangeRequest({\r\n            proposedNew: _proposedImpl\r\n        });\r\n\r\n        emit ImplChangeRequested(lockId, msg.sender, _proposedImpl);\r\n    }\r\n\r\n   \r\n    function confirmImplChange(bytes32 _lockId) public onlyCustodian {\r\n        erc20Impl = getImplChangeReq(_lockId);\r\n\r\n        delete implChangeReqs[_lockId];\r\n\r\n        emit ImplChangeConfirmed(_lockId, address(erc20Impl));\r\n    }\r\n\r\n    \r\n    function getImplChangeReq(bytes32 _lockId) private view returns (ERC20Impl _proposedNew) {\r\n        ImplChangeRequest storage changeRequest = implChangeReqs[_lockId];\r\n\r\n     \r\n        require(changeRequest.proposedNew != address(0));\r\n\r\n        return ERC20Impl(changeRequest.proposedNew);\r\n    }\r\n\r\n  \r\n    event ImplChangeRequested(\r\n        bytes32 _lockId,\r\n        address _msgSender,\r\n        address _proposedImpl\r\n    );\r\n\r\n    \r\n    event ImplChangeConfirmed(bytes32 _lockId, address _newImpl);\r\n}\r\n\r\ncontract ERC20Proxy is ERC20Interface, ERC20ImplUpgradeable {\r\n\r\n   \r\n    string public name;\r\n\r\n    \r\n    string public symbol;\r\n\r\n    \r\n    uint8 public decimals;\r\n\r\n    \r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint8 _decimals,\r\n        address _custodian\r\n    )\r\n        ERC20ImplUpgradeable(_custodian)\r\n        public\r\n    {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n    }\r\n\r\n    \r\n    function totalSupply() public view returns (uint256) {\r\n        return erc20Impl.totalSupply();\r\n    }\r\n\r\n   \r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return erc20Impl.balanceOf(_owner);\r\n    }\r\n\r\n    \r\n    function emitTransfer(address _from, address _to, uint256 _value) public onlyImpl {\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    \r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        return erc20Impl.transferWithSender(msg.sender, _to, _value);\r\n    }\r\n\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        return erc20Impl.transferFromWithSender(msg.sender, _from, _to, _value);\r\n    }\r\n\r\n    function emitApproval(address _owner, address _spender, uint256 _value) public onlyImpl {\r\n        emit Approval(_owner, _spender, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        return erc20Impl.approveWithSender(msg.sender, _spender, _value);\r\n    }\r\n \r\n    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool success) {\r\n        return erc20Impl.increaseApprovalWithSender(msg.sender, _spender, _addedValue);\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool success) {\r\n        return erc20Impl.decreaseApprovalWithSender(msg.sender, _spender, _subtractedValue);\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return erc20Impl.allowance(_owner, _spender);\r\n    }\r\n}\r\n\r\ncontract ERC20Store is ERC20ImplUpgradeable {\r\n\r\n    uint256 public totalSupply;\r\n\r\n   \r\n    mapping (address => uint256) public balances;\r\n\r\n   \r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n\r\n    \r\n    constructor(address _custodian) ERC20ImplUpgradeable(_custodian) public {\r\n        totalSupply = 0;\r\n    }\r\n\r\n    function setTotalSupply(\r\n        uint256 _newTotalSupply\r\n    )\r\n        public\r\n        onlyImpl\r\n    {\r\n        totalSupply = _newTotalSupply;\r\n    }\r\n\r\n    function setAllowance(\r\n        address _owner,\r\n        address _spender,\r\n        uint256 _value\r\n    )\r\n        public\r\n        onlyImpl\r\n    {\r\n        allowed[_owner][_spender] = _value;\r\n    }\r\n\r\n    function setBalance(\r\n        address _owner,\r\n        uint256 _newBalance\r\n    )\r\n        public\r\n        onlyImpl\r\n    {\r\n        balances[_owner] = _newBalance;\r\n    }\r\n\r\n    function addBalance(\r\n        address _owner,\r\n        uint256 _balanceIncrease\r\n    )\r\n        public\r\n        onlyImpl\r\n    {\r\n        balances[_owner] = balances[_owner] + _balanceIncrease;\r\n    }\r\n}\r\n\r\ncontract ERC20Impl is CustodianUpgradeable {\r\n\r\n  \r\n    struct PendingPrint {\r\n        address receiver;\r\n        uint256 value;\r\n    }\r\n\r\n    ERC20Proxy public erc20Proxy;\r\n\r\n\r\n    ERC20Store public erc20Store;\r\n\r\n   \r\n    address public sweeper;\r\n\r\n    \r\n    bytes32 public sweepMsg;\r\n\r\n    \r\n    mapping (address => bool) public sweptSet;\r\n\r\n    \r\n    mapping (bytes32 => PendingPrint) public pendingPrintMap;\r\n\r\n   \r\n    constructor(\r\n          address _erc20Proxy,\r\n          address _erc20Store,\r\n          address _custodian,\r\n          address _sweeper\r\n    )\r\n        CustodianUpgradeable(_custodian)\r\n        public\r\n    {\r\n        require(_sweeper != address(0));\r\n        erc20Proxy = ERC20Proxy(_erc20Proxy);\r\n        erc20Store = ERC20Store(_erc20Store);\r\n\r\n        sweeper = _sweeper;\r\n        sweepMsg = keccak256(abi.encodePacked(address(this), \"sweep\"));\r\n    }\r\n\r\n   \r\n    modifier onlyProxy {\r\n        require(msg.sender == address(erc20Proxy));\r\n        _;\r\n    }\r\n    modifier onlySweeper {\r\n        require(msg.sender == sweeper);\r\n        _;\r\n    }\r\n\r\n\r\n   \r\n    function approveWithSender(\r\n        address _sender,\r\n        address _spender,\r\n        uint256 _value\r\n    )\r\n        public\r\n        onlyProxy\r\n        returns (bool success)\r\n    {\r\n        require(_spender != address(0));\r\n        erc20Store.setAllowance(_sender, _spender, _value);\r\n        erc20Proxy.emitApproval(_sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n   \r\n    function increaseApprovalWithSender(\r\n        address _sender,\r\n        address _spender,\r\n        uint256 _addedValue\r\n    )\r\n        public\r\n        onlyProxy\r\n        returns (bool success)\r\n    {\r\n        require(_spender != address(0)); \r\n        uint256 currentAllowance = erc20Store.allowed(_sender, _spender);\r\n        uint256 newAllowance = currentAllowance + _addedValue;\r\n\r\n        require(newAllowance >= currentAllowance);\r\n\r\n        erc20Store.setAllowance(_sender, _spender, newAllowance);\r\n        erc20Proxy.emitApproval(_sender, _spender, newAllowance);\r\n        return true;\r\n    }\r\n\r\n    \r\n    function decreaseApprovalWithSender(\r\n        address _sender,\r\n        address _spender,\r\n        uint256 _subtractedValue\r\n    )\r\n        public\r\n        onlyProxy\r\n        returns (bool success)\r\n    {\r\n        require(_spender != address(0)); \r\n        uint256 currentAllowance = erc20Store.allowed(_sender, _spender);\r\n        uint256 newAllowance = currentAllowance - _subtractedValue;\r\n\r\n        require(newAllowance <= currentAllowance);\r\n\r\n        erc20Store.setAllowance(_sender, _spender, newAllowance);\r\n        erc20Proxy.emitApproval(_sender, _spender, newAllowance);\r\n        return true;\r\n    }\r\n\r\n    \r\n    function requestPrint(address _receiver, uint256 _value) public returns (bytes32 lockId) {\r\n        require(_receiver != address(0));\r\n\r\n        lockId = generateLockId();\r\n\r\n        pendingPrintMap[lockId] = PendingPrint({\r\n            receiver: _receiver,\r\n            value: _value\r\n        });\r\n\r\n        emit PrintingLocked(lockId, _receiver, _value);\r\n    }\r\n\r\n   \r\n    function confirmPrint(bytes32 _lockId) public onlyCustodian {\r\n        PendingPrint storage print = pendingPrintMap[_lockId];\r\n\r\n     \r\n        address receiver = print.receiver;\r\n        require (receiver != address(0));\r\n        uint256 value = print.value;\r\n\r\n        delete pendingPrintMap[_lockId];\r\n\r\n        uint256 supply = erc20Store.totalSupply();\r\n        uint256 newSupply = supply + value;\r\n        if (newSupply >= supply) {\r\n          erc20Store.setTotalSupply(newSupply);\r\n          erc20Store.addBalance(receiver, value);\r\n\r\n          emit PrintingConfirmed(_lockId, receiver, value);\r\n          erc20Proxy.emitTransfer(address(0), receiver, value);\r\n        }\r\n    }\r\n\r\n \r\n    function burn(uint256 _value) public returns (bool success) {\r\n        uint256 balanceOfSender = erc20Store.balances(msg.sender);\r\n        require(_value <= balanceOfSender);\r\n\r\n        erc20Store.setBalance(msg.sender, balanceOfSender - _value);\r\n        erc20Store.setTotalSupply(erc20Store.totalSupply() - _value);\r\n\r\n        erc20Proxy.emitTransfer(msg.sender, address(0), _value);\r\n\r\n        return true;\r\n    }\r\n\r\n  \r\n    function batchTransfer(address[] memory _tos, uint256[] memory _values) public returns (bool success) {\r\n        require(_tos.length == _values.length);\r\n\r\n        uint256 numTransfers = _tos.length;\r\n        uint256 senderBalance = erc20Store.balances(msg.sender);\r\n\r\n        for (uint256 i = 0; i < numTransfers; i++) {\r\n          address to = _tos[i];\r\n          require(to != address(0));\r\n          uint256 v = _values[i];\r\n          require(senderBalance >= v);\r\n\r\n          if (msg.sender != to) {\r\n            senderBalance -= v;\r\n            erc20Store.addBalance(to, v);\r\n          }\r\n          erc20Proxy.emitTransfer(msg.sender, to, v);\r\n        }\r\n\r\n        erc20Store.setBalance(msg.sender, senderBalance);\r\n\r\n        return true;\r\n    }\r\n\r\n    \r\n    function enableSweep(uint8[] memory _vs, bytes32[] memory _rs, bytes32[] memory _ss, address _to) public onlySweeper {\r\n        require(_to != address(0));\r\n        require((_vs.length == _rs.length) && (_vs.length == _ss.length));\r\n\r\n        uint256 numSignatures = _vs.length;\r\n        uint256 sweptBalance = 0;\r\n\r\n        for (uint256 i=0; i<numSignatures; ++i) {\r\n          address from = ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\",sweepMsg)), _vs[i], _rs[i], _ss[i]);\r\n\r\n      \r\n          if (from != address(0)) {\r\n            sweptSet[from] = true;\r\n\r\n            uint256 fromBalance = erc20Store.balances(from);\r\n\r\n            if (fromBalance > 0) {\r\n              sweptBalance += fromBalance;\r\n\r\n              erc20Store.setBalance(from, 0);\r\n\r\n              erc20Proxy.emitTransfer(from, _to, fromBalance);\r\n            }\r\n          }\r\n        }\r\n\r\n        if (sweptBalance > 0) {\r\n          erc20Store.addBalance(_to, sweptBalance);\r\n        }\r\n    }\r\n\r\n    \r\n    function replaySweep(address[] memory _froms, address _to) public onlySweeper {\r\n        require(_to != address(0));\r\n        uint256 lenFroms = _froms.length;\r\n        uint256 sweptBalance = 0;\r\n\r\n        for (uint256 i=0; i<lenFroms; ++i) {\r\n            address from = _froms[i];\r\n\r\n            if (sweptSet[from]) {\r\n                uint256 fromBalance = erc20Store.balances(from);\r\n\r\n                if (fromBalance > 0) {\r\n                    sweptBalance += fromBalance;\r\n\r\n                    erc20Store.setBalance(from, 0);\r\n\r\n                    erc20Proxy.emitTransfer(from, _to, fromBalance);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (sweptBalance > 0) {\r\n            erc20Store.addBalance(_to, sweptBalance);\r\n        }\r\n    }\r\n\r\n   \r\n    function transferFromWithSender(\r\n        address _sender,\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n        public\r\n        onlyProxy\r\n        returns (bool success)\r\n    {\r\n        require(_to != address(0)); \r\n\r\n        uint256 balanceOfFrom = erc20Store.balances(_from);\r\n        require(_value <= balanceOfFrom);\r\n\r\n        uint256 senderAllowance = erc20Store.allowed(_from, _sender);\r\n        require(_value <= senderAllowance);\r\n\r\n        erc20Store.setBalance(_from, balanceOfFrom - _value);\r\n        erc20Store.addBalance(_to, _value);\r\n\r\n        erc20Store.setAllowance(_from, _sender, senderAllowance - _value);\r\n\r\n        erc20Proxy.emitTransfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferWithSender(\r\n        address _sender,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n        public\r\n        onlyProxy\r\n        returns (bool success)\r\n    {\r\n        require(_to != address(0)); \r\n        uint256 balanceOfSender = erc20Store.balances(_sender);\r\n        require(_value <= balanceOfSender);\r\n\r\n        erc20Store.setBalance(_sender, balanceOfSender - _value);\r\n        erc20Store.addBalance(_to, _value);\r\n\r\n        erc20Proxy.emitTransfer(_sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    \r\n    function totalSupply() public view returns (uint256) {\r\n        return erc20Store.totalSupply();\r\n    }\r\n\r\n   \r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return erc20Store.balances(_owner);\r\n    }\r\n\r\n   \r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return erc20Store.allowed(_owner, _spender);\r\n    }\r\n\r\n   \r\n    event PrintingLocked(bytes32 _lockId, address _receiver, uint256 _value);\r\n  \r\n    event PrintingConfirmed(bytes32 _lockId, address _receiver, uint256 _value);\r\n}\r\n\r\ncontract PrintLimiter is LockRequestable {\r\n\r\n   \r\n    struct PendingCeilingRaise {\r\n        uint256 raiseBy;\r\n    }\r\n\r\n  \r\n    ERC20Impl public erc20Impl;\r\n\r\n   \r\n    address public custodian;\r\n\r\n    address public limitedPrinter;\r\n\r\n    uint256 public totalSupplyCeiling;\r\n\r\n    mapping (bytes32 => PendingCeilingRaise) public pendingRaiseMap;\r\n\r\n    constructor(\r\n        address _erc20Impl,\r\n        address _custodian,\r\n        address _limitedPrinter,\r\n        uint256 _initialCeiling\r\n    )\r\n        public\r\n    {\r\n        erc20Impl = ERC20Impl(_erc20Impl);\r\n        custodian = _custodian;\r\n        limitedPrinter = _limitedPrinter;\r\n        totalSupplyCeiling = _initialCeiling;\r\n    }\r\n\r\n   \r\n    modifier onlyCustodian {\r\n        require(msg.sender == custodian);\r\n        _;\r\n    }\r\n    modifier onlyLimitedPrinter {\r\n        require(msg.sender == limitedPrinter);\r\n        _;\r\n    }\r\n\r\n    function limitedPrint(address _receiver, uint256 _value) public onlyLimitedPrinter {\r\n        uint256 totalSupply = erc20Impl.totalSupply();\r\n        uint256 newTotalSupply = totalSupply + _value;\r\n\r\n        require(newTotalSupply >= totalSupply);\r\n        require(newTotalSupply <= totalSupplyCeiling);\r\n        erc20Impl.confirmPrint(erc20Impl.requestPrint(_receiver, _value));\r\n    }\r\n\r\n    function requestCeilingRaise(uint256 _raiseBy) public returns (bytes32 lockId) {\r\n        require(_raiseBy != 0);\r\n\r\n        lockId = generateLockId();\r\n\r\n        pendingRaiseMap[lockId] = PendingCeilingRaise({\r\n            raiseBy: _raiseBy\r\n        });\r\n\r\n        emit CeilingRaiseLocked(lockId, _raiseBy);\r\n    }\r\n\r\n    function confirmCeilingRaise(bytes32 _lockId) public onlyCustodian {\r\n        PendingCeilingRaise storage pendingRaise = pendingRaiseMap[_lockId];\r\n\r\n      \r\n        uint256 raiseBy = pendingRaise.raiseBy;\r\n\r\n        require(raiseBy != 0);\r\n\r\n        delete pendingRaiseMap[_lockId];\r\n\r\n        uint256 newCeiling = totalSupplyCeiling + raiseBy;\r\n        if (newCeiling >= totalSupplyCeiling) {\r\n            totalSupplyCeiling = newCeiling;\r\n\r\n            emit CeilingRaiseConfirmed(_lockId, raiseBy, newCeiling);\r\n        }\r\n    }\r\n\r\n  \r\n    function lowerCeiling(uint256 _lowerBy) public onlyLimitedPrinter {\r\n        uint256 newCeiling = totalSupplyCeiling - _lowerBy;\r\n        // overflow check\r\n        require(newCeiling <= totalSupplyCeiling);\r\n        totalSupplyCeiling = newCeiling;\r\n\r\n        emit CeilingLowered(_lowerBy, newCeiling);\r\n    }\r\n\r\n   \r\n    function confirmPrintProxy(bytes32 _lockId) public onlyCustodian {\r\n        erc20Impl.confirmPrint(_lockId);\r\n    }\r\n\r\n   \r\n    function confirmCustodianChangeProxy(bytes32 _lockId) public onlyCustodian {\r\n        erc20Impl.confirmCustodianChange(_lockId);\r\n    }\r\n\r\n   \r\n    event CeilingRaiseLocked(bytes32 _lockId, uint256 _raiseBy);\r\n  \r\n    event CeilingRaiseConfirmed(bytes32 _lockId, uint256 _raiseBy, uint256 _newCeiling);\r\n\r\n   \r\n    event CeilingLowered(uint256 _lowerBy, uint256 _newCeiling);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_proposedCustodian\",\"type\":\"address\"}],\"name\":\"requestCustodianChange\",\"outputs\":[{\"name\":\"lockId\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_balanceIncrease\",\"type\":\"uint256\"}],\"name\":\"addBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"custodian\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockId\",\"type\":\"bytes32\"}],\"name\":\"confirmCustodianChange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc20Impl\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposedImpl\",\"type\":\"address\"}],\"name\":\"requestImplChange\",\"outputs\":[{\"name\":\"lockId\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockId\",\"type\":\"bytes32\"}],\"name\":\"confirmImplChange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"implChangeReqs\",\"outputs\":[{\"name\":\"proposedNew\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockRequestCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"custodianChangeReqs\",\"outputs\":[{\"name\":\"proposedNew\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setAllowance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_newBalance\",\"type\":\"uint256\"}],\"name\":\"setBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"setTotalSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_custodian\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lockId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_msgSender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_proposedImpl\",\"type\":\"address\"}],\"name\":\"ImplChangeRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lockId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_newImpl\",\"type\":\"address\"}],\"name\":\"ImplChangeConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lockId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_msgSender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_proposedCustodian\",\"type\":\"address\"}],\"name\":\"CustodianChangeRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lockId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_newCustodian\",\"type\":\"address\"}],\"name\":\"CustodianChangeConfirmed\",\"type\":\"event\"}]","ContractName":"ERC20Store","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000005270d1512725c916b0fbda5592440f43285738da","Library":"","SwarmSource":"bzzr://93aab592c09c917ae92e7fe6f4c72e40c1c82449b92458f39028436da9210f94"}]}