{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File: localhost/packages/contracts/contracts/TokenSaver.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract TokenSaver is Ownable {\r\n\r\n    function saveEther() external onlyOwner {\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n\r\n    function saveTokens(address _token) external onlyOwner {\r\n        IERC20 token = IERC20(_token);\r\n        // Some tokens do not allow a balance to drop to zero so we leave 1 wei to be save\r\n        token.transfer(msg.sender, token.balanceOf(msg.sender) - 1);\r\n    }\r\n\r\n}\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * IMPORTANT: It is unsafe to assume that an address for which this\r\n     * function returns false is an externally-owned account (EOA) and not a\r\n     * contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: localhost/packages/contracts/contracts/partials/PartialPush.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\nlibrary PartialPush {\r\n    using Math for uint256;\r\n    using Address for address;\r\n\r\n    function push(IERC20 _token, address _receiver, uint256 _amount) internal {\r\n        uint256 amount = Utils.balanceOrAmount(_token, _amount);\r\n        if(address(_token) == address(0)) {\r\n            _receiver.toPayable().transfer(amount);\r\n        }\r\n        _token.transfer(_receiver, amount);\r\n    }\r\n}\r\n// File: localhost/packages/contracts/contracts/partials/PartialPull.sol\r\n\r\n    pragma solidity ^0.5.0;\r\n\r\n\r\n\r\nlibrary PartialPull {\r\n    using Math for uint256;\r\n\r\n    function pull(IERC20 _token, uint256 _amount) internal {\r\n        if(address(_token) == address(0)) {\r\n            require(msg.value == _amount, \"PartialPull.pull: MSG_VALUE_INCORRECT\");\r\n        }\r\n        // uint256 amount = Utils.balanceOrAmount(_token, _amount);\r\n        // Either pull the balance, allowance or _amount, whichever is the smallest number\r\n        uint256 amount = _token.balanceOf(msg.sender).min(_amount).min(_token.allowance(msg.sender, address(this)));\r\n        require(_token.transferFrom(msg.sender, address(this), amount), \"PartialPull.pull: TRANSFER_FAILED\");\r\n    }\r\n}\r\n\r\n\r\n// File: localhost/packages/contracts/contracts/Registry.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract Registry is Ownable {\r\n    mapping(bytes32 => address) internal contracts;\r\n\r\n    function lookup(bytes32 _hashedName) external view returns(address) {\r\n        return contracts[_hashedName];\r\n    }\r\n\r\n    function lookup(string memory _name) public view returns(address){\r\n        return contracts[keccak256(abi.encodePacked(_name))];\r\n    }\r\n\r\n    function setContract(string memory _name, address _contractAddress) public {\r\n        setContract(keccak256(abi.encodePacked(_name)), _contractAddress);\r\n    }\r\n\r\n    function setContract(bytes32 _hashedName, address _contractAddress) public onlyOwner {\r\n        contracts[_hashedName] = _contractAddress;\r\n    }\r\n}\r\n// File: localhost/packages/contracts/contracts/libraries/RL.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\nlibrary RL {\r\n    Registry constant internal registry = Registry(0xDc7eB6c5d66e4816E5CC69a70AA22f4584167333);\r\n\r\n    // keccakc256(abi.encodePacked(\"sai\"));\r\n    bytes32 public constant _sai = 0x121766960ca66154cf52cc7f62663f2342706e7901d35f1d93fb4a7c321fa14a;\r\n    bytes32 public constant _dai = 0x9f08c71555a1be56230b2e2579fafe4777867e0a1b947f01073e934471de15c1;\r\n    bytes32 public constant _daiMigrationContract = 0x42d07b69ad62387b020b27e811fc060bc382308c513cb96f08ea805c77a04f9b;\r\n\r\n    bytes32 public constant _cache = 0x422c51ed3da5a7658c50a3684c705b5f1e3d2d1673c5e16aaf93ea6271bb54cf;\r\n    bytes32 public constant _gateKeeper = 0xcfa0d7a8bc1be8e2b981746eace0929cdd2721f615b63382540820f02696577b;\r\n    bytes32 public constant _treasury = 0xcbd818ad4dd6f1ff9338c2bb62480241424dd9a65f9f3284101a01cd099ad8ac;\r\n    \r\n    bytes32 public constant _kyber = 0x758760f431d5bf0c2e6f8c11dbc38ddba93c5ba4e9b5425f4730333b3ecaf21b;\r\n    bytes32 public constant _synthetix = 0x52da455363ee608ccf172b43cb25e66cd1734a315508cf1dae3e995e8106011a;\r\n    bytes32 public constant _synthetixDepot = 0xcfead29a36d4ab9b4a23124bdd16cdd5acfdf5334caa9b0df48b01a0b6d68b20;\r\n\r\n\r\n    function lookup(bytes32 _hashedName) internal view returns(address) {\r\n        return registry.lookup(_hashedName);\r\n    }\r\n\r\n    function dai() internal pure returns(bytes32) {\r\n        return _dai;\r\n    }\r\n    function sai() internal pure returns(bytes32) {\r\n        return _sai;\r\n    }\r\n    function daiMigrationContract() internal pure returns(bytes32) {\r\n        return _daiMigrationContract;\r\n    }\r\n    function cache() internal pure returns(bytes32) {\r\n        return _cache;\r\n    }\r\n    function gateKeeper() internal pure returns(bytes32) {\r\n        return _gateKeeper;\r\n    }\r\n    function treasury() internal pure returns(bytes32) {\r\n        return _treasury;\r\n    }\r\n\r\n    function kyber() internal pure returns(bytes32) {\r\n        return _kyber;\r\n    }\r\n    function synthetix() internal pure returns(bytes32) {\r\n        return _synthetix;\r\n    }\r\n    function synthetixDepot() internal pure returns(bytes32) {\r\n        return _synthetixDepot;\r\n    }\r\n}\r\n// File: localhost/packages/contracts/contracts/interfaces/IScdMcdMigration.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface IScdMcdMigration {\r\n    function swapSaiToDai(uint256 _amount) external;\r\n    function swapDaiToSai(uint256 _amount) external;\r\n}\r\n// File: localhost/packages/contracts/contracts/partials/PartialMcdMigration.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\nlibrary PartialMcdMigration {\r\n\r\n    function swapSaiToDai(uint256 _amount) internal {\r\n        IERC20 sai = IERC20(RL.lookup(RL.sai()));\r\n        IScdMcdMigration daiMigrationContract = IScdMcdMigration(RL.lookup(RL.daiMigrationContract()));\r\n        uint256 amount = Utils.balanceOrAmount(sai, _amount);\r\n        sai.approve(address(daiMigrationContract), amount);\r\n        daiMigrationContract.swapSaiToDai(amount);\r\n    }\r\n\r\n    function swapDaiToSai(uint256 _amount) internal {\r\n        IERC20 dai = IERC20(RL.lookup(RL.dai()));\r\n        IScdMcdMigration daiMigrationContract = IScdMcdMigration(RL.lookup(RL.daiMigrationContract()));\r\n        uint256 amount = Utils.balanceOrAmount(dai, _amount);\r\n        dai.approve(address(daiMigrationContract), amount);\r\n        daiMigrationContract.swapDaiToSai(amount);\r\n    }\r\n}\r\n// File: @openzeppelin/contracts/math/Math.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// File: localhost/packages/contracts/contracts/libraries/Utils.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n// Should not forget to linkx\r\nlibrary Utils {\r\n    using Math for uint256;\r\n\r\n    function balanceOrAmount(IERC20 _token, uint256 _amount) internal view returns(uint256) {\r\n        if(address(_token) == address(0)) {\r\n            return address(this).balance;\r\n        }\r\n        return _token.balanceOf(address(this)).min(_amount);\r\n        // return 1 ether;\r\n    }\r\n}\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: localhost/packages/contracts/contracts/interfaces/IIToken.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface IIToken {\r\n    function mint(\r\n        address _receiver,\r\n        uint256 _depositAmount)\r\n        external\r\n        returns (uint256 _mintAmount);\r\n\r\n    function burn(\r\n        address receiver,\r\n        uint256 burnAmount)\r\n        external\r\n        returns (uint256 loanAmountPaid);\r\n    function loanTokenAddress() external view returns (address);\r\n    function tokenPrice() external view returns (uint256);\r\n}\r\n// File: localhost/packages/contracts/contracts/partials/PartialFulcrum.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\nlibrary PartialFulcrum {\r\n    using SafeMath for uint256;\r\n\r\n    function mint(IIToken _iToken, address _receiver, uint256 _amount) internal {\r\n        IERC20 underlying = IERC20(_iToken.loanTokenAddress());\r\n        uint256 amount = Utils.balanceOrAmount(underlying, _amount);\r\n        underlying.approve(address(_iToken), amount);\r\n        _iToken.mint(_receiver, amount);\r\n    }\r\n\r\n    function burn(IIToken _iToken, address _receiver, uint256 _amount) internal {\r\n        uint256 amount = Utils.balanceOrAmount(IERC20(address(_iToken)), _amount);\r\n        uint256 amountPaid = _iToken.burn(_receiver, amount);\r\n        require(amountPaid >= amount.mul(10**18).div(_iToken.tokenPrice()) - 1, \"FULCRUM_NOT_LIQUID\");\r\n    }\r\n\r\n}\r\n// File: localhost/packages/contracts/contracts/static-recipes/FulcrumMcdBridge.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract FulcrumMcdBridge is TokenSaver {\r\n\r\n    uint256 constant MAX = uint256(-1);\r\n\r\n    address iSAI;\r\n    address iDAI;\r\n\r\n    constructor(address _iSAI, address _iDAI) public {\r\n        iSAI = _iSAI;\r\n        iDAI = _iDAI;\r\n    }\r\n\r\n    function bridgeISaiToIDai(uint256 _amount) external {\r\n        PartialPull.pull(IERC20(iSAI), _amount);\r\n        PartialFulcrum.burn(IIToken(iSAI), address(this), _amount);\r\n        PartialMcdMigration.swapSaiToDai(MAX);\r\n        PartialFulcrum.mint(IIToken(iDAI), msg.sender, MAX);\r\n    }\r\n\r\n    function bridgeIDaiToISai(uint256 _amount) external {\r\n        PartialPull.pull(IERC20(iDAI), _amount);\r\n        PartialFulcrum.burn(IIToken(iDAI), address(this), _amount);\r\n        PartialMcdMigration.swapDaiToSai(MAX);\r\n        PartialFulcrum.mint(IIToken(iSAI), msg.sender, MAX);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_iSAI\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_iDAI\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bridgeIDaiToISai\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bridgeISaiToIDai\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"saveEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"saveTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FulcrumMcdBridge","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000014094949152eddbfcd073717200da82fed8dc960000000000000000000000000493c57c4763932315a328269e1adad09653b9081","Library":"","LicenseType":"None","SwarmSource":"bzzr://4e375c0c937fc54602924991a63e4a4f7c3a91af4a0264ac6a8d13b6d4bd1314"}]}