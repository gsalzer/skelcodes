{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2019-05-08\r\n*/\r\n\r\npragma solidity ^0.5.10;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20BasicInterface {\r\n    function totalSupply() public view returns (uint256);\r\n\r\n    function balanceOf(address who) public view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    uint8 public decimals;\r\n}\r\n\r\ncontract Bussiness is Ownable {\r\n    address payable public ceoAddress = address(0x2BebE5B81844151212DE3c7ea2e2C07616f7801B);\r\n    address public technical = address(0x2076A228E6eB670fd1C604DE574d555476520DB7);\r\n    ERC20BasicInterface public nagemonToken = ERC20BasicInterface(0xF63C5639786E7ce7C35B3D2b97E74bf7af63eEEA);\r\n    uint256 public NagemonExchange = 297;\r\n    constructor() public {}\r\n    \r\n    /**\r\n     * @dev Throws if called by any account other than the ceo address.\r\n     */\r\n    modifier onlyCeoAddress() {\r\n        require(msg.sender == ceoAddress);\r\n        _;\r\n    }\r\n    modifier onlyTechnicalAddress() {\r\n        require(msg.sender == technical);\r\n        _;\r\n    }\r\n    event received(address _from, uint256 _amount);\r\n    event receivedErc20(address _from, uint256 _amount);\r\n    struct ticket {\r\n        address owner;\r\n        uint256 amount;\r\n    }\r\n    mapping(address => ticket) public tickets;\r\n    // @dev fallback function to exchange the ether for Monster fossil\r\n    function buyMonsterFossilByEth() public payable {\r\n        ceoAddress.transfer(msg.value);\r\n        // calc token amount\r\n        uint256 amount = getTokenAmount(msg.value);\r\n        tickets[msg.sender] = ticket(msg.sender, amount);\r\n        emit received(msg.sender, msg.value);\r\n    }\r\n    function buyMonsterFossilByNagemon(uint256 _amount) public {\r\n        require(nagemonToken.transferFrom(msg.sender, ceoAddress, _amount));\r\n        tickets[msg.sender] = ticket(msg.sender, _amount);\r\n        emit receivedErc20(msg.sender, _amount);\r\n    }\r\n    function resetTiket(address _ticketOwner) public onlyTechnicalAddress returns (bool) {\r\n        tickets[_ticketOwner] = ticket(address(0), 0);\r\n        return true;\r\n    }\r\n    // @dev return the amount of token that msg.sender can receive based on the amount of ether that msg.sender sent\r\n    function getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\r\n        uint256 tokenDecimal = 18 - nagemonToken.decimals();\r\n        return _weiAmount * NagemonExchange / (10 ** tokenDecimal);\r\n    }\r\n    \r\n    function config(uint256 _NagemonExchange, address _technical) public onlyOwner returns (uint256, address){\r\n        NagemonExchange = _NagemonExchange;\r\n        technical = _technical;\r\n        return (NagemonExchange, technical);\r\n    }\r\n    function changeCeo(address payable _address) public onlyCeoAddress {\r\n        require(_address != address(0));\r\n        ceoAddress = _address;\r\n\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_NagemonExchange\",\"type\":\"uint256\"},{\"name\":\"_technical\",\"type\":\"address\"}],\"name\":\"config\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nagemonToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ticketOwner\",\"type\":\"address\"}],\"name\":\"resetTiket\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tickets\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"technical\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyMonsterFossilByNagemon\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyMonsterFossilByEth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"changeCeo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NagemonExchange\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"receivedErc20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Bussiness","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a76c33b6bc19aefa7218ab08f61ee923692f962d11da887e244a5626df31e748"}]}