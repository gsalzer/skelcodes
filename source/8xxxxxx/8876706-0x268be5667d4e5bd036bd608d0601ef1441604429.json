{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type,\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * > It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: localhost/contracts/proxy/Proxy.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @title Proxy interface for Dinngo exchange contract.\r\n * @author Ben Huang\r\n * @dev Referenced the proxy contract from zeppelin-os project.\r\n * https://github.com/zeppelinos/zos/tree/master/packages/lib\r\n */\r\ncontract Proxy is Ownable {\r\n    using Address for address;\r\n\r\n    // keccak256 hash of \"dinngo.proxy.implementation\"\r\n    bytes32 private constant IMPLEMENTATION_SLOT =\r\n        0x3b2ff02c0f36dba7cc1b20a669e540b974575f04ef71846d482983efb03bebb4;\r\n\r\n    event Upgraded(address indexed implementation);\r\n\r\n    constructor(address implementation) internal {\r\n        assert(IMPLEMENTATION_SLOT == keccak256(\"dinngo.proxy.implementation\"));\r\n        _setImplementation(implementation);\r\n    }\r\n\r\n    /**\r\n     * @notice Upgrade the implementation contract. Can only be triggered\r\n     * by the owner. Emits the Upgraded event.\r\n     * @param implementation The new implementation address.\r\n     */\r\n    function upgrade(address implementation) external onlyOwner {\r\n        _setImplementation(implementation);\r\n        emit Upgraded(implementation);\r\n    }\r\n\r\n    /**\r\n     * @notice Return the version information of implementation\r\n     * @return version The version\r\n     */\r\n    function implementationVersion() external view returns (uint256 version){\r\n        (bool ok, bytes memory ret) = _implementation().staticcall(\r\n            abi.encodeWithSignature(\"version()\")\r\n        );\r\n        require(ok);\r\n        assembly {\r\n            version := mload(add(add(ret, 0x20), 0))\r\n        }\r\n        return version;\r\n    }\r\n\r\n    /**\r\n     * @dev Set the implementation address in the storage slot.\r\n     * @param implementation The new implementation address.\r\n     */\r\n    function _setImplementation(address implementation) internal {\r\n        require(implementation.isContract(),\r\n            \"Implementation address should be a contract address\"\r\n        );\r\n        bytes32 slot = IMPLEMENTATION_SLOT;\r\n\r\n        assembly {\r\n            sstore(slot, implementation)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current implementation address.\r\n     */\r\n    function _implementation() internal view returns (address implementation) {\r\n        bytes32 slot = IMPLEMENTATION_SLOT;\r\n\r\n        assembly {\r\n            implementation := sload(slot)\r\n        }\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: localhost/contracts/Administrable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title Administrable\r\n * @dev The administrator structure\r\n */\r\n/**\r\n * @title Administrable\r\n */\r\ncontract Administrable {\r\n    using SafeMath for uint256;\r\n    mapping (address => bool) private admins;\r\n    uint256 private _nAdmin;\r\n    uint256 private _nLimit;\r\n\r\n    event Activated(address indexed admin);\r\n    event Deactivated(address indexed admin);\r\n\r\n    /**\r\n     * @dev The Administrable constructor sets the original `admin` of the contract to the sender\r\n     * account. The initial limit amount of admin is 2.\r\n     */\r\n    constructor() internal {\r\n        _setAdminLimit(2);\r\n        _activateAdmin(msg.sender);\r\n    }\r\n\r\n    function isAdmin() public view returns(bool) {\r\n        return admins[msg.sender];\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by non-admin.\r\n     */\r\n    modifier onlyAdmin() {\r\n        require(isAdmin(), \"sender not admin\");\r\n        _;\r\n    }\r\n\r\n    function activateAdmin(address admin) external onlyAdmin {\r\n        _activateAdmin(admin);\r\n    }\r\n\r\n    function deactivateAdmin(address admin) external onlyAdmin {\r\n        _safeDeactivateAdmin(admin);\r\n    }\r\n\r\n    function setAdminLimit(uint256 n) external onlyAdmin {\r\n        _setAdminLimit(n);\r\n    }\r\n\r\n    function _setAdminLimit(uint256 n) internal {\r\n        require(_nLimit != n, \"same limit\");\r\n        _nLimit = n;\r\n    }\r\n\r\n    /**\r\n     * @notice The Amount of admin should be bounded by _nLimit.\r\n     */\r\n    function _activateAdmin(address admin) internal {\r\n        require(admin != address(0), \"invalid address\");\r\n        require(_nAdmin < _nLimit, \"too many admins existed\");\r\n        require(!admins[admin], \"already admin\");\r\n        admins[admin] = true;\r\n        _nAdmin = _nAdmin.add(1);\r\n        emit Activated(admin);\r\n    }\r\n\r\n    /**\r\n     * @notice At least one admin should exists.\r\n     */\r\n    function _safeDeactivateAdmin(address admin) internal {\r\n        require(_nAdmin > 1, \"admin should > 1\");\r\n        _deactivateAdmin(admin);\r\n    }\r\n\r\n    function _deactivateAdmin(address admin) internal {\r\n        require(admins[admin], \"not admin\");\r\n        admins[admin] = false;\r\n        _nAdmin = _nAdmin.sub(1);\r\n        emit Deactivated(admin);\r\n    }\r\n}\r\n\r\n// File: localhost/contracts/DinngoProxy.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Dinngo\r\n * @author Ben Huang\r\n * @notice Main exchange contract for Dinngo\r\n */\r\ncontract DinngoProxy is Ownable, Administrable, Proxy {\r\n    uint256 public processTime;\r\n\r\n    mapping (address => mapping (address => uint256)) public balances;\r\n    mapping (bytes32 => uint256) public orderFills;\r\n    mapping (uint256 => address payable) public userID_Address;\r\n    mapping (uint256 => address) public tokenID_Address;\r\n    mapping (address => uint256) public nonces;\r\n    mapping (address => uint256) public ranks;\r\n    mapping (address => uint256) public lockTimes;\r\n\r\n    address public walletOwner;\r\n    address public DGOToken;\r\n    uint8 public eventConf;\r\n\r\n    uint256 constant public version = 2;\r\n\r\n    /**\r\n     * @dev User ID 0 is the management wallet.\r\n     * Token ID 0 is ETH (address 0). Token ID 1 is DGO.\r\n     * @param _walletOwner The fee wallet owner\r\n     * @param _dinngoToken The contract address of DGO\r\n     * @param _impl The implementation contract address\r\n     */\r\n    constructor(\r\n        address payable _walletOwner,\r\n        address _dinngoToken,\r\n        address _impl\r\n    ) Proxy(_impl) public {\r\n        processTime = 90 days;\r\n        walletOwner = _walletOwner;\r\n        tokenID_Address[0] = address(0);\r\n        ranks[address(0)] = 1;\r\n        tokenID_Address[1] = _dinngoToken;\r\n        ranks[_dinngoToken] = 1;\r\n        DGOToken = _dinngoToken;\r\n        eventConf = 0xff;\r\n    }\r\n\r\n    function setEvent(uint8 conf) external onlyAdmin {\r\n        (bool ok,) = _implementation().delegatecall(\r\n            abi.encodeWithSignature(\"setEvent(uint8)\", conf)\r\n        );\r\n        require(ok);\r\n    }\r\n\r\n    /**\r\n     * @notice Add the address to the user list. Event AddUser will be emitted\r\n     * after execution.\r\n     * @dev Record the user list to map the user address to a specific user ID, in\r\n     * order to compact the data size when transferring user address information\r\n     * @param id The user id to be assigned\r\n     * @param user The user address to be added\r\n     */\r\n    function addUser(uint256 id, address user) external onlyAdmin {\r\n        (bool ok,) = _implementation().delegatecall(\r\n            abi.encodeWithSignature(\"addUser(uint256,address)\", id, user)\r\n        );\r\n        require(ok);\r\n    }\r\n\r\n    /**\r\n     * @notice Remove the address from the user list.\r\n     * @dev The user rank is set to 0 to remove the user.\r\n     * @param user The user address to be removed\r\n     */\r\n    function removeUser(address user) external onlyAdmin {\r\n        (bool ok,) = _implementation().delegatecall(\r\n            abi.encodeWithSignature(\"remove(address)\", user)\r\n        );\r\n        require(ok);\r\n    }\r\n\r\n    /**\r\n     * @notice Update the rank of user. Can only be called by admin.\r\n     * @param user The user address\r\n     * @param rank The rank to be assigned\r\n     */\r\n    function updateUserRank(address user, uint256 rank) external onlyAdmin {\r\n        (bool ok,) = _implementation().delegatecall(\r\n            abi.encodeWithSignature(\"updateRank(address,uint256)\", user, rank)\r\n        );\r\n        require(ok);\r\n    }\r\n\r\n    /**\r\n     * @notice Add the token to the token list. Event AddToken will be emitted\r\n     * after execution.\r\n     * @dev Record the token list to map the token contract address to a specific\r\n     * token ID, in order to compact the data size when transferring token contract\r\n     * address information\r\n     * @param id The token id to be assigned\r\n     * @param token The token contract address to be added\r\n     */\r\n    function addToken(uint256 id, address token) external onlyOwner {\r\n        (bool ok,) = _implementation().delegatecall(\r\n            abi.encodeWithSignature(\"addToken(uint256,address)\", id, token)\r\n        );\r\n        require(ok);\r\n    }\r\n\r\n    /**\r\n     * @notice Remove the token from the token list.\r\n     * @dev The token rank is set to 0 to remove the token.\r\n     * @param token The token contract address to be removed.\r\n     */\r\n    function removeToken(address token) external onlyOwner {\r\n        (bool ok,) = _implementation().delegatecall(\r\n            abi.encodeWithSignature(\"remove(address)\", token)\r\n        );\r\n        require(ok);\r\n    }\r\n\r\n    /**\r\n     * @notice Update the rank of token. Can only be called by owner.\r\n     * @param token The token contract address.\r\n     * @param rank The rank to be assigned.\r\n     */\r\n    function updateTokenRank(address token, uint256 rank) external onlyOwner {\r\n        (bool ok,) = _implementation().delegatecall(\r\n            abi.encodeWithSignature(\"updateRank(address,uint256)\", token, rank)\r\n        );\r\n        require(ok);\r\n    }\r\n\r\n    function activateAdmin(address admin) external onlyOwner {\r\n        _activateAdmin(admin);\r\n    }\r\n\r\n    function deactivateAdmin(address admin) external onlyOwner {\r\n        _safeDeactivateAdmin(admin);\r\n    }\r\n\r\n    /**\r\n     * @notice Force-deactivate allows owner to deactivate admin even there will be\r\n     * no admin left. Should only be executed under emergency situation.\r\n     */\r\n    function forceDeactivateAdmin(address admin) external onlyOwner {\r\n        _deactivateAdmin(admin);\r\n    }\r\n\r\n    function setAdminLimit(uint256 n) external onlyOwner {\r\n        _setAdminLimit(n);\r\n    }\r\n\r\n    /**\r\n     * @notice The deposit function for ether. The ether that is sent with the function\r\n     * call will be deposited. The first time user will be added to the user list.\r\n     * Event Deposit will be emitted after execution.\r\n     */\r\n    function deposit() external payable {\r\n        (bool ok,) = _implementation().delegatecall(abi.encodeWithSignature(\"deposit()\"));\r\n        require(ok);\r\n    }\r\n\r\n    /**\r\n     * @notice The deposit function for tokens. The first time user will be added to\r\n     * the user list. Event Deposit will be emitted after execution.\r\n     * @param token Address of the token contract to be deposited\r\n     * @param amount Amount of the token to be depositied\r\n     */\r\n    function depositToken(address token, uint256 amount) external {\r\n        (bool ok,) = _implementation().delegatecall(\r\n            abi.encodeWithSignature(\"depositToken(address,uint256)\", token, amount)\r\n        );\r\n        require(ok);\r\n    }\r\n\r\n    /**\r\n     * @notice The withdraw function for ether. Event Withdraw will be emitted\r\n     * after execution. User needs to be locked before calling withdraw.\r\n     * @param amount The amount to be withdrawn.\r\n     */\r\n    function withdraw(uint256 amount) external {\r\n        (bool ok,) = _implementation().delegatecall(\r\n            abi.encodeWithSignature(\"withdraw(uint256)\", amount)\r\n        );\r\n        require(ok);\r\n    }\r\n\r\n    /**\r\n     * @notice The withdraw function for tokens. Event Withdraw will be emitted\r\n     * after execution. User needs to be locked before calling withdraw.\r\n     * @param token The token contract address to be withdrawn.\r\n     * @param amount The token amount to be withdrawn.\r\n     */\r\n    function withdrawToken(address token, uint256 amount) external {\r\n        (bool ok,) = _implementation().delegatecall(\r\n            abi.encodeWithSignature(\"withdrawToken(address,uint256)\", token, amount)\r\n        );\r\n        require(ok);\r\n    }\r\n\r\n    /**\r\n     * @notice The function to extract the fee from the fee account. This function can\r\n     * only be triggered by the income wallet owner.\r\n     * @param amount The amount to be extracted\r\n     */\r\n    function extractFee(uint256 amount) external {\r\n        (bool ok,) = _implementation().delegatecall(\r\n            abi.encodeWithSignature(\"extractFee(uint256)\", amount)\r\n        );\r\n        require(ok);\r\n    }\r\n\r\n    /**\r\n     * @notice The function to extract the fee from the fee account. This function can\r\n     * only be triggered by the income wallet owner.\r\n     * @param token The token to be extracted\r\n     * @param amount The amount to be extracted\r\n     */\r\n    function extractTokenFee(address token, uint256 amount) external {\r\n        (bool ok,) = _implementation().delegatecall(\r\n            abi.encodeWithSignature(\"extractTokenFee(address,uint256)\", token, amount)\r\n        );\r\n        require(ok);\r\n    }\r\n\r\n    /**\r\n     * @notice The function to get the balance from fee account.\r\n     * @param token The token of the balance to be queried\r\n     */\r\n    function getWalletBalance(address token) external returns (uint256 balance) {\r\n        (bool ok, bytes memory ret) = _implementation().delegatecall(\r\n            abi.encodeWithSignature(\"getWalletBalance(address)\", token)\r\n        );\r\n        require(ok);\r\n        balance = abi.decode(ret, (uint256));\r\n    }\r\n\r\n    /**\r\n     * @notice The function to change the owner of fee wallet.\r\n     * @param newOwner The new wallet owner to be assigned\r\n     */\r\n    function changeWalletOwner(address newOwner) external onlyOwner {\r\n        (bool ok,) = _implementation().delegatecall(\r\n            abi.encodeWithSignature(\"changeWalletOwner(address)\", newOwner)\r\n        );\r\n        require(ok);\r\n    }\r\n\r\n    /**\r\n     * @notice The withdraw function that can only be triggered by owner.\r\n     * Event Withdraw will be emitted after execution.\r\n     * @param withdrawal The serialized withdrawal data\r\n     */\r\n    function withdrawByAdmin(bytes calldata withdrawal, bytes calldata signature) external onlyAdmin {\r\n        (bool ok, bytes memory ret) = _implementation().delegatecall(\r\n            abi.encodeWithSignature(\"withdrawByAdmin(bytes,bytes)\", withdrawal, signature)\r\n        );\r\n        require(ok, string(ret));\r\n    }\r\n\r\n    /**\r\n     * @notice The transfer function that can only be triggered by owner.\r\n     * Event Transfer will be emitted afer execution.\r\n     * @param transferral The serialized transferral data.\r\n     */\r\n    function transferByAdmin(bytes calldata transferral, bytes calldata signature) external onlyAdmin {\r\n        (bool ok, bytes memory ret) = _implementation().delegatecall(\r\n            abi.encodeWithSignature(\"transferByAdmin(bytes,bytes)\", transferral, signature)\r\n        );\r\n        require(ok, string(ret));\r\n    }\r\n\r\n    /**\r\n     * @notice The settle function for orders. First order is taker order and the followings\r\n     * are maker orders.\r\n     * @param orders The serialized orders.\r\n     */\r\n    function settle(bytes calldata orders, bytes calldata signature) external onlyAdmin {\r\n        (bool ok, bytes memory ret) = _implementation().delegatecall(\r\n            abi.encodeWithSignature(\"settle(bytes,bytes)\", orders, signature)\r\n        );\r\n        require(ok, string(ret));\r\n    }\r\n\r\n    /**\r\n     * @notice The migrate function that can only be triggered by admin.\r\n     * @param migration The serialized migration data\r\n     */\r\n    function migrateByAdmin(bytes calldata migration, bytes calldata signature) external onlyAdmin {\r\n        (bool ok, bytes memory ret) = _implementation().delegatecall(\r\n            abi.encodeWithSignature(\"migrateByAdmin(bytes,bytes)\", migration, signature)\r\n        );\r\n        require(ok, string(ret));\r\n    }\r\n\r\n    /**\r\n     * @notice The migration handler\r\n     * @param user The user address to receive the migrated amount.\r\n     * @param token The token address to be migrated.\r\n     * @param amount The amount to be migrated.\r\n     */\r\n    function migrateTo(address user, address token, uint256 amount) payable external {\r\n        (bool ok,) = _implementation().delegatecall(\r\n            abi.encodeWithSignature(\"migrateTo(address,address,uint256)\", user, token, amount)\r\n        );\r\n        require(ok);\r\n    }\r\n\r\n    /**\r\n     * @notice Announce lock of the sender\r\n     */\r\n    function lock() external {\r\n        (bool ok,) = _implementation().delegatecall(abi.encodeWithSignature(\"lock()\"));\r\n        require(ok);\r\n    }\r\n\r\n    /**\r\n     * @notice Unlock the sender\r\n     */\r\n    function unlock() external {\r\n        (bool ok,) = _implementation().delegatecall(abi.encodeWithSignature(\"unlock()\"));\r\n        require(ok);\r\n    }\r\n\r\n    /**\r\n     * @notice Change the processing time of locking the user address\r\n     */\r\n    function changeProcessTime(uint256 time) external onlyOwner {\r\n        (bool ok,) = _implementation().delegatecall(\r\n            abi.encodeWithSignature(\"changeProcessTime(uint256)\", time)\r\n        );\r\n        require(ok);\r\n    }\r\n\r\n    /**\r\n     * @notice Get hash from the transferral parameters.\r\n     */\r\n    function getTransferralHash(\r\n        address from,\r\n        uint8 config,\r\n        uint32 nonce,\r\n        address[] calldata tos,\r\n        uint16[] calldata tokenIDs,\r\n        uint256[] calldata amounts,\r\n        uint256[] calldata fees\r\n    ) external view returns (bytes32 hash) {\r\n        (bool ok, bytes memory ret) = _implementation().staticcall(\r\n            abi.encodeWithSignature(\r\n                \"getTransferralHash(address,uint8,uint32,address[],uint16[],uint256[],uint256[])\",\r\n                from, config, nonce, tos, tokenIDs, amounts, fees\r\n            )\r\n        );\r\n        require(ok);\r\n        hash = abi.decode(ret, (bytes32));\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_walletOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dinngoToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_impl\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"Activated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"Deactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"DGOToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"activateAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"addUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"changeProcessTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeWalletOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"deactivateAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eventConf\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"extractFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"extractTokenFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"forceDeactivateAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"config\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"},{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"uint16[]\",\"name\":\"tokenIDs\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"}],\"name\":\"getTransferralHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getWalletBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementationVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"migration\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"migrateByAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"migrateTo\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orderFills\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"processTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ranks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"removeUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"setAdminLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"conf\",\"type\":\"uint8\"}],\"name\":\"setEvent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"orders\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"settle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenID_Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"transferral\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"transferByAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rank\",\"type\":\"uint256\"}],\"name\":\"updateTokenRank\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rank\",\"type\":\"uint256\"}],\"name\":\"updateUserRank\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userID_Address\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"withdrawal\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"withdrawByAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DinngoProxy","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a4589bb891d020aad7681ff49c0f3911c793255e0000000000000000000000006d38574be6c230272daad16fa5f291f825bd0da10000000000000000000000003cd11ab189af4f9b627547283f03e73ede433127","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://a7ca0022bedcefe0bf539c8ff973928d615ff9f2a0319e9100b7a71d6088180d"}]}