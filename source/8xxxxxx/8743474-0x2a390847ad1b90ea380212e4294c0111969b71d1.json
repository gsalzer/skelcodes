{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ncontract Ownable {\r\n\r\n    address payable public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function setOwner(address payable _owner) public onlyOwner {\r\n        owner = _owner;\r\n    }\r\n\r\n    function getOwner() public view returns (address payable) {\r\n        return owner;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"must be owner to call this function\");\r\n        _;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IReferrals {\r\n\r\n    function getSplit(address user) external view returns (uint8 discount, uint8 referrer);\r\n        \r\n}\r\n\r\ncontract Referrals is Ownable {\r\n\r\n    using SafeMath for uint;\r\n\r\n    uint public discountLimit;\r\n    uint public defaultDiscount;\r\n    uint public defaultRefer;\r\n\r\n    mapping(address => Split) public splits;\r\n\r\n    struct Split {\r\n        bool set;\r\n        uint8 discountPercentage;\r\n        uint8 referrerPercentage;\r\n    }\r\n\r\n    event SplitChanged(address user, uint8 discount, uint8 referrer);\r\n\r\n    constructor(uint _discountLimit, uint _defaultDiscount, uint _defaultRefer) public {   \r\n        setDiscountLimit(_discountLimit);\r\n        setDefaults(_defaultDiscount, _defaultRefer);\r\n    }\r\n\r\n    // sets the discount and referral percentages for the current user\r\n    // this is deliberately user-customisable\r\n    function setSplit(uint8 discount, uint8 referrer) public {\r\n        require(discountLimit >= discount + referrer, \"can't give more than the limit\");\r\n        require(discount + referrer >= discount, \"can't overflow\");\r\n        splits[msg.sender] = Split({\r\n            discountPercentage: discount,\r\n            referrerPercentage: referrer,\r\n            set: true\r\n        });\r\n        emit SplitChanged(msg.sender, discount, referrer);\r\n    }\r\n\r\n    // override a user's split\r\n    function overrideSplit(address user, uint8 discount, uint8 referrer) public onlyOwner {\r\n        require(discountLimit >= discount + referrer, \"can't give more than the limit\");\r\n        require(discount + referrer >= discount, \"can't overflow\");\r\n        splits[user] = Split({\r\n            discountPercentage: discount,\r\n            referrerPercentage: referrer,\r\n            set: true\r\n        });\r\n        emit SplitChanged(user, discount, referrer);\r\n    }\r\n\r\n    // sets the max purchase total discount\r\n    function setDiscountLimit(uint _limit) public onlyOwner {\r\n        require(_limit <= 100, \"discount limit must be <= 100\");\r\n        discountLimit = _limit;\r\n    }\r\n\r\n    // sets the default discount and referral percentages\r\n    function setDefaults(uint _discount, uint _refer) public onlyOwner {\r\n        require(discountLimit >= _discount + _refer, \"can't be more than the limit\");\r\n        require(_discount + _refer >= _discount, \"can't overflow\");\r\n        defaultDiscount = _discount;\r\n        defaultRefer = _refer;\r\n    }\r\n\r\n    // gets the discount and referral rates for a particular user\r\n    function getSplit(address user) public view returns (uint8 discount, uint8 referrer) {\r\n        if (user == address(0)) {\r\n            return (0, 0);\r\n        }\r\n        Split memory s = splits[user];\r\n        if (!s.set) {\r\n            return (uint8(defaultDiscount), uint8(defaultRefer));\r\n        }\r\n        return (s.discountPercentage, s.referrerPercentage);\r\n    }\r\n\r\n}\r\n\r\ncontract Processor is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    IReferrals public referrals;\r\n    address payable public vault;\r\n    uint public count;\r\n    mapping(address => bool) public approvedSellers;\r\n\r\n    event PaymentProcessed(uint id, address user, uint cost, uint items, address referrer, uint toVault, uint toReferrer);\r\n    event SellerApprovalChanged(address seller, bool approved);\r\n\r\n    constructor(address payable _vault, IReferrals _referrals) public {\r\n        referrals = _referrals;\r\n        vault = _vault;\r\n    }\r\n\r\n    function setCanSell(address seller, bool approved) public onlyOwner {\r\n        approvedSellers[seller] = approved;\r\n        emit SellerApprovalChanged(seller, approved);\r\n    }\r\n\r\n    function processPayment(address payable user, uint cost, uint items, address payable referrer) public payable returns (uint) {\r\n\r\n        require(approvedSellers[msg.sender]);\r\n        require(user != referrer, \"can't refer yourself\");\r\n        require(items != 0, \"have to purchase at least one item\");\r\n        require(cost > 0, \"items must cost something\");\r\n        // TODO: are these necessary for the simple percentage logic?\r\n        require(cost >= 100, \"items must cost at least 100 wei\");\r\n        require(cost % 100 == 0, \"costs must be multiples of 100\");\r\n\r\n        uint toVault;\r\n        uint toReferrer;\r\n        \r\n        (toVault, toReferrer) = getAllocations(cost, items, referrer);\r\n\r\n        uint total = toVault.add(toReferrer);\r\n\r\n        // check that the tx has enough value to complete the payment\r\n        require(msg.value >= total, \"not enough value sent to contract\");\r\n        if (msg.value > total) {\r\n            uint change = msg.value.sub(total);\r\n            user.transfer(change);\r\n        }\r\n\r\n        vault.transfer(toVault);\r\n\r\n        // pay the referral fee\r\n        if (toReferrer > 0 && referrer != address(0)) {\r\n            referrer.transfer(toReferrer);\r\n        }\r\n\r\n        // give this payment a unique ID\r\n        uint id = count++;\r\n        emit PaymentProcessed(id, user, cost, items, referrer, toVault, toReferrer);\r\n\r\n        return id;\r\n    }\r\n\r\n    // get the amount of the purchase which will be allocated to\r\n    // the vault and to the referrer\r\n    function getAllocations(uint cost, uint items, address referrer) public view returns (uint toVault, uint toReferrer) {\r\n        uint8 discount;\r\n        uint8 refer;\r\n        (discount, refer) = referrals.getSplit(referrer);\r\n        require(discount + refer <= 100 && discount + refer >= discount, \"invalid referral split\");\r\n        // avoid overflow\r\n        uint total = cost.mul(items);\r\n        uint8 vaultPercentage = 100 - discount - refer;\r\n        toVault = getPercentage(total, vaultPercentage);\r\n        toReferrer = getPercentage(total, refer);\r\n        uint discountedTotal = getPercentage(total, 100 - discount);\r\n        require(discountedTotal == toVault.add(toReferrer), \"not all funds allocated\");\r\n        return (toVault, toReferrer);\r\n    }\r\n\r\n    // returns the price (including discount) which must be paid by the user\r\n    function getPrice(uint cost, uint items, address referrer) public view returns (uint) {\r\n\r\n        uint8 discount;\r\n        (discount, ) = referrals.getSplit(referrer);\r\n\r\n        return getPercentage(cost.mul(items), 100 - discount);\r\n    }\r\n\r\n    function getPercentage(uint amount, uint8 percentage) public pure returns (uint) {\r\n        \r\n        // TODO: are these necessary for the percentage logic?\r\n        require(amount >= 100, \"items must cost at least 100 wei\");\r\n        require(amount % 100 == 0, \"costs must be multiples of 100 wei\");\r\n    \r\n        return amount.mul(percentage).div(100);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setCanSell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"items\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"getAllocations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"toVault\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toReferrer\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"items\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"processPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"items\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedSellers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referrals\",\"outputs\":[{\"internalType\":\"contract IReferrals\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"percentage\",\"type\":\"uint8\"}],\"name\":\"getPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"contract IReferrals\",\"name\":\"_referrals\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"items\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toVault\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toReferrer\",\"type\":\"uint256\"}],\"name\":\"PaymentProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"SellerApprovalChanged\",\"type\":\"event\"}]","ContractName":"Processor","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000091b9d2835ad914bc1dcfe09bd1816febd04fd68900000000000000000000000025834d975c8b80b36c31b3e48a813921708c2547","Library":"","LicenseType":"None","SwarmSource":"bzzr://75598e3aa081960e05e1481885ebf7672a5457cfed10e03b23e81335084aab2e"}]}