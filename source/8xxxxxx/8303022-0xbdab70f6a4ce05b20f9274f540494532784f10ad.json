{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.21 <0.6.0;\r\n\r\n\r\ncontract Token {\r\n    function balanceOf(address a) external returns (uint) {return 0;}\r\n    function transfer(address a, uint val) external returns (bool) {return false;}\r\n}\r\n\r\n\r\ncontract AbstractSweeperList {\r\n    function sweeperOf(address _token) external returns (address);\r\n}\r\n\r\n\r\ncontract UserWallet {\r\n    AbstractSweeperList c;\r\n    constructor (address _sweeperlist) public {\r\n        c = AbstractSweeperList(_sweeperlist);\r\n    }\r\n\r\n    function sweep(address _token, uint _amount) public {\r\n        c.sweeperOf(_token).delegatecall(msg.data);\r\n    }\r\n}\r\n\r\n\r\ncontract Controller is AbstractSweeperList {\r\n    address public owner;\r\n    address public authorizedCaller;\r\n\r\n    //destination defaults to same as owner\r\n    //but is separate to allow never exposing cold storage\r\n    address public destination;\r\n\r\n    bool public halted;\r\n\r\n    event LogNewWallet(address receiver);\r\n    event LogSweep(address from, address token, uint amount);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Sender is not the owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAuthorizedCaller() {\r\n        require(msg.sender == authorizedCaller, \"unauthorized call\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmins() {\r\n        require(msg.sender == authorizedCaller || msg.sender == owner, \"unauthorized call\");\r\n        _;\r\n    }\r\n\r\n    constructor () public\r\n    {\r\n        owner = msg.sender;\r\n        destination = msg.sender;\r\n        authorizedCaller = msg.sender;\r\n    }\r\n\r\n    function changeAuthorizedCaller(address _newCaller) public onlyOwner {\r\n        authorizedCaller = _newCaller;\r\n    }\r\n\r\n    function changeDestination(address _dest) public onlyOwner {\r\n        destination = _dest;\r\n    }\r\n\r\n    function changeOwner(address _owner) public onlyOwner {\r\n        owner = _owner;\r\n    }\r\n\r\n    function makeWallet() public onlyAdmins returns (address wallet)  {\r\n        wallet = address(new UserWallet(address(this)));\r\n        emit LogNewWallet(wallet);\r\n    }\r\n\r\n    //assuming halt because caller is compromised\r\n    //so let caller stop for speed, only owner can restart\r\n\r\n    function halt() public onlyAdmins {\r\n        halted = true;\r\n    }\r\n\r\n    function start() public onlyOwner {\r\n        halted = false;\r\n    }\r\n\r\n    //***********\r\n    //SweeperList\r\n    //***********\r\n    address public defaultSweeper = address(new DefaultSweeper(address(this)));\r\n    mapping (address => address) sweepers;\r\n\r\n    function addSweeper(address _token, address _sweeper) public onlyOwner {\r\n        sweepers[_token] = _sweeper;\r\n    }\r\n\r\n    function sweeperOf(address _token) public returns (address) {\r\n        address sweeper = sweepers[_token];\r\n        if (sweeper == address(0)) sweeper = defaultSweeper;\r\n        return sweeper;\r\n    }\r\n\r\n    function logSweep(address from, address token, uint amount) public {\r\n        emit LogSweep(from, token, amount);\r\n    }\r\n}\r\n\r\n\r\ncontract AbstractSweeper {\r\n    //abstract:\r\n    function sweep(address token, uint amount) external returns (bool);\r\n\r\n    Controller controller;\r\n\r\n    constructor (address _controller) public {\r\n        controller = Controller(_controller);\r\n    }\r\n\r\n    modifier canSweep() {\r\n        require(msg.sender == controller.authorizedCaller() || msg.sender == controller.owner(), \"Unauthorized call\");\r\n        require(controller.halted() == false, \"Controller is in halted state\");\r\n        _;\r\n    }\r\n}\r\n\r\n\r\ncontract DefaultSweeper is AbstractSweeper {\r\n    constructor (address controller) public AbstractSweeper(controller) {}\r\n\r\n    function sweep(address _token, uint _amount) public canSweep\r\n    returns (bool) {\r\n        Token token = Token(_token);\r\n        uint amount = _amount;\r\n        if (amount > token.balanceOf(address(this))) {\r\n            return false;\r\n        }\r\n\r\n        address destination = controller.destination();\r\n\r\n\t// Because sweep is called with delegatecall, this typically\r\n\t// comes from the UserWallet.\r\n        bool success = token.transfer(destination, amount);\r\n        if (success) {\r\n            controller.logSweep(address(this), _token, _amount);\r\n        }\r\n        return success;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_newCaller\",\"type\":\"address\"}],\"name\":\"changeAuthorizedCaller\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sweeperOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dest\",\"type\":\"address\"}],\"name\":\"changeDestination\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultSweeper\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"logSweep\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_sweeper\",\"type\":\"address\"}],\"name\":\"addSweeper\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authorizedCaller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"makeWallet\",\"outputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"destination\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"LogNewWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogSweep\",\"type\":\"event\"}]","ContractName":"Controller","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4f1cd14a2ae39e647120d3c51caac1dd11c1d89de0f604e9be16935d7cecbc06"}]}