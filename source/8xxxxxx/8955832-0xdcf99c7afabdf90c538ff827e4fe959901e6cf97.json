{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.11;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title PayableOwnable\r\n * @dev The PayableOwnable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n * PayableOwnable is extended from open-zeppelin Ownable smart contract, with the difference of making the owner\r\n * a payable address.\r\n */\r\ncontract PayableOwnable {\r\n    address payable internal _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address payable) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address payable newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address payable newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/// @dev - Top Up Billing model - Total Limit\r\n/// A business that allows their customers to purchase various items or services using Credits.\r\n/// -------------------------------------------------------------------------------------------\r\n/// The business allow their customers to subscribe to a top up billing model. The top-up billing model works as follows:\r\n/// 1. The customer can purchase 100 Credits from the business for 10$.\r\n/// 2. The customer can start spending the 100 Credits for using different services or purchasing different items from the business.\r\n/// 3. When the customer’s Credits drops at 25 units, the business is allowed to charge 7.50$ for 75 Credits, therefore ‘topping up’ to 100 Credits again.\r\n/// -------------------------------------------------------------------------------------------\r\n/// Total Limit\r\n/// The customer specifies that the maximum amount that (s)he is willing to spend in total in this top up billing model is 100$.\r\n/// This means that the business can trigger the top up payment and pull PMA from the customer account only up until 100$ in PMA.\r\n/// The customer can increase/decrease the top up limit at any point.\r\ncontract TopUpPullPayment is PayableOwnable {\r\n    using SafeMath for uint256;\r\n\r\n    /// ===============================================================================================================\r\n    ///                                      Events\r\n    /// ===============================================================================================================\r\n    event LogExecutorAdded(address executor);\r\n    event LogExecutorRemoved(address executor);\r\n    event LogSmartContractActorFunded(string actorRole, address payable actor, uint256 timestamp);\r\n\r\n    event LogPaymentRegistered(\r\n        address customerAddress,\r\n        bytes32 paymentID,\r\n        bytes32 businessID\r\n    );\r\n    event LogPaymentCancelled(\r\n        address customerAddress,\r\n        bytes32 paymentID,\r\n        bytes32 businessID\r\n    );\r\n    event LogPullPaymentExecuted(\r\n        address customerAddress,\r\n        bytes32 paymentID,\r\n        bytes32 businessID,\r\n        uint256 amountInPMA,\r\n        uint256 conversionRate\r\n    );\r\n\r\n    event LogTotalLimitUpdated(\r\n        address customerAddress,\r\n        bytes32 paymentID,\r\n        uint256 oldLimit,\r\n        uint256 newLimit\r\n    );\r\n\r\n    /// ===============================================================================================================\r\n    ///                                      Constants\r\n    /// ===============================================================================================================\r\n    uint256 constant internal RATE_CALCULATION_NUMBER = 10 ** 26;    /// Check `calculatePMAFromFiat()` for more details\r\n    uint256 constant internal OVERFLOW_LIMITER_NUMBER = 10 ** 20;    /// 1e^20 - Prevent numeric overflows\r\n\r\n    uint256 constant internal FUNDING_AMOUNT = 0.5 ether;                           /// Amount to transfer to owner/executor\r\n    uint256 constant internal MINIMUM_AMOUNT_OF_ETH_FOR_OPERATORS = 0.15 ether;     /// min amount of ETH for owner/executor\r\n    bytes32 constant internal EMPTY_BYTES32 = \"\";\r\n\r\n    /// ===============================================================================================================\r\n    ///                                      Members\r\n    /// ===============================================================================================================\r\n    IERC20 public token;\r\n    mapping(address => bool) public executors;\r\n    mapping(bytes32 => TopUpPayment) public pullPayments;\r\n\r\n    struct TopUpPayment {\r\n        bytes32[2] paymentIDs;                  /// [0] paymentID / [1] businessID\r\n        string currency;                        /// 3-letter abbr i.e. 'EUR' / 'USD' etc.\r\n        address customerAddress;                /// wallet address of customer\r\n        address treasuryAddress;                /// address which pma tokens will be transfer to on execution\r\n        address executorAddress;                /// address that can execute the pull payment\r\n        uint256 initialConversionRate;          /// conversion rate for first payment execution\r\n        uint256 initialPaymentAmountInCents;    /// initial payment amount in fiat in cents\r\n        uint256 topUpAmountInCents;             /// payment amount in fiat in cents\r\n        uint256 startTimestamp;                 /// when subscription starts - in seconds\r\n        uint256 lastPaymentTimestamp;           /// timestamp of last payment\r\n        uint256 cancelTimestamp;                /// timestamp the payment was cancelled\r\n        uint256 totalLimit;                     /// total limit that the customer is willing to pay\r\n        uint256 totalSpent;                     /// total amount spent by the customer\r\n    }\r\n\r\n    /// ===============================================================================================================\r\n    ///                                      Modifiers\r\n    /// ===============================================================================================================\r\n    modifier isValidAddress(address _address) {\r\n        require(_address != address(0), \"Invalid address - ZERO_ADDRESS provided.\");\r\n        _;\r\n    }\r\n    modifier isValidString(string memory _string) {\r\n        require(bytes(_string).length > 0, \"Invalid string - is empty.\");\r\n        _;\r\n    }\r\n    modifier isValidNumber(uint256 _number) {\r\n        require(_number > 0, \"Invalid number - Must be higher than zero.\");\r\n        require(_number <= OVERFLOW_LIMITER_NUMBER, \"Invalid number - Must be lower than the overflow limit.\");\r\n        _;\r\n    }\r\n    modifier isValidByte32(bytes32 _text) {\r\n        require(_text != EMPTY_BYTES32, \"Invalid byte32 value.\");\r\n        _;\r\n    }\r\n    modifier isValidNewTotalLimit(bytes32 _paymentID, uint256 _newAmount) {\r\n        require(_newAmount >= pullPayments[_paymentID].totalSpent, \"New total amount is less than the amount spent.\");\r\n        _;\r\n    }\r\n    modifier isExecutor() {\r\n        require(executors[msg.sender], \"msg.sender not an executor.\");\r\n        _;\r\n    }\r\n    modifier executorExists(address _executor) {\r\n        require(executors[_executor], \"Executor does not exists.\");\r\n        _;\r\n    }\r\n    modifier executorDoesNotExists(address _executor) {\r\n        require(!executors[_executor], \"Executor already exists.\");\r\n        _;\r\n    }\r\n    modifier isPullPaymentExecutor(bytes32 _paymentID) {\r\n        require(pullPayments[_paymentID].executorAddress == msg.sender, \"msg.sender not allowed to execute this payment.\");\r\n        _;\r\n    }\r\n    modifier isCustomer(bytes32 _paymentID) {\r\n        require(pullPayments[_paymentID].customerAddress == msg.sender, \"msg.sender not allowed to update this payment.\");\r\n        _;\r\n    }\r\n    modifier paymentExists(bytes32 _paymentID) {\r\n        require(pullPayments[_paymentID].paymentIDs[0] != \"\", \"Pull Payment does not exists.\");\r\n        _;\r\n    }\r\n    modifier paymentDoesNotExist(bytes32 _paymentID) {\r\n        require(pullPayments[_paymentID].paymentIDs[0] == \"\", \"Pull Payment exists already.\");\r\n        _;\r\n    }\r\n    modifier paymentNotCancelled(bytes32 _paymentID) {\r\n        require(pullPayments[_paymentID].cancelTimestamp == 0, \"Payment is cancelled\");\r\n        _;\r\n    }\r\n    modifier isWithinTheTotalLimits(bytes32 _paymentID) {\r\n        require(pullPayments[_paymentID].totalSpent.add(pullPayments[_paymentID].topUpAmountInCents) <= pullPayments[_paymentID].totalLimit, \"Total limit reached.\");\r\n        _;\r\n    }\r\n\r\n    /// ===============================================================================================================\r\n    ///                                      Constructor\r\n    /// ===============================================================================================================\r\n    /// @dev Contract constructor - sets the token address that the contract facilitates.\r\n    /// @param _token Token Address.\r\n    constructor(address _token)\r\n    public {\r\n        require(_token != address(0), \"Invalid address for token - ZERO_ADDRESS provided.\");\r\n        token = IERC20(_token);\r\n    }\r\n    // @notice Will receive any eth sent to the contract\r\n    function() external payable {\r\n    }\r\n\r\n    /// ===============================================================================================================\r\n    ///                                      Public Functions - Owner Only\r\n    /// ===============================================================================================================\r\n    /// @dev Adds a new executor. - can be executed only by the owner.\r\n    ///     When adding a new executor 0.5 ETH is transferred to allow the executor to pay for gas.\r\n    ///     The balance of the owner is also checked and if funding is needed 0.5 ETH is transferred.\r\n    /// @param _executor - address of the executor which cannot be zero address.\r\n    function addExecutor(address payable _executor)\r\n    external\r\n    onlyOwner\r\n    isValidAddress(_executor)\r\n    executorDoesNotExists(_executor)\r\n    {\r\n        executors[_executor] = true;\r\n        if (isFundingNeeded(_executor)) {\r\n            _executor.transfer(FUNDING_AMOUNT);\r\n            emit LogSmartContractActorFunded(\"executor\", _executor, now);\r\n        }\r\n\r\n        if (isFundingNeeded(owner())) {\r\n            owner().transfer(FUNDING_AMOUNT);\r\n            emit LogSmartContractActorFunded(\"owner\", owner(), now);\r\n        }\r\n        emit LogExecutorAdded(_executor);\r\n    }\r\n    /// @dev Removes a new executor. - can be executed only by the owner.\r\n    ///     The balance of the owner is checked and if funding is needed 0.5 ETH is transferred.\r\n    /// @param _executor - address of the executor which cannot be zero address.\r\n    function removeExecutor(address payable _executor)\r\n    external\r\n    onlyOwner\r\n    isValidAddress(_executor)\r\n    executorExists(_executor)\r\n    {\r\n        executors[_executor] = false;\r\n        if (isFundingNeeded(owner())) {\r\n            owner().transfer(FUNDING_AMOUNT);\r\n            emit LogSmartContractActorFunded(\"owner\", owner(), now);\r\n        }\r\n        emit LogExecutorRemoved(_executor);\r\n    }\r\n\r\n    /// ===============================================================================================================\r\n    ///                                      Public Functions - Executors Only\r\n    /// ===============================================================================================================\r\n    /// @dev Registers a new top up pull payment to the PumaPay Top Up Pull Payment Contract - The registration can be executed only\r\n    ///     by one of the executors of the PumaPay Pull Payment Contract and the\r\n    ///     PumaPay Pull Payment Contract checks that the pull payment has been singed by the customer of the account.\r\n    ///     The total limits are set on registration and the total and time based amount spent are set to 0.\r\n    ///     The initial payment amount for the top up payment is being executed on the registration of the pull payment.\r\n    ///     On registration the initial payment is executed.\r\n    ///     The balance of the executor (msg.sender) is checked and if funding is needed 0.5 ETH is transferred.\r\n    ///     Emits 'LogPaymentRegistered' with customer address, pull payment executor address and paymentID.\r\n    ///     Emits 'LogPullPaymentExecuted' with customer address, paymentID, businessID, amount in PMA and conversion rate.\r\n    /// @param v - recovery ID of the ETH signature. - https://github.com/ethereum/EIPs/issues/155\r\n    /// @param r - R output of ECDSA signature.\r\n    /// @param s - S output of ECDSA signature.\r\n    /// @param _paymentIDs  - [0] paymentID, [1] businessID\r\n    /// @param _addresses   - [0] customer, [1] pull payment executor, [2] treasury\r\n    /// @param _numbers     - [0] initial conversion rate, [1] initial payment amount in cents,\r\n    ///                       [2] top up amount in cents, [3] start timestamp, [4] total limit\r\n    /// @param _currency - currency of the payment / 3-letter abbr i.e. 'EUR'.\r\n    function registerTopUpPayment(\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        bytes32[2] calldata _paymentIDs,\r\n        address[3] calldata _addresses,\r\n        uint256[5] calldata _numbers,\r\n        string calldata _currency\r\n    )\r\n    external\r\n    isExecutor()\r\n    paymentDoesNotExist(_paymentIDs[0])\r\n    isValidString(_currency)\r\n    {\r\n        require(_paymentIDs[0] != EMPTY_BYTES32, \"PaymentID - Invalid byte32 value.\");\r\n        require(_paymentIDs[1] != EMPTY_BYTES32, \"BusinessID - Invalid byte32 value.\");\r\n\r\n        require(_addresses[0] != address(0), \"Invalid customer address - ZERO_ADDRESS provided.\");\r\n        require(_addresses[1] != address(0), \"Invalid pull payment executor address - ZERO_ADDRESS provided.\");\r\n        require(_addresses[2] != address(0), \"Invalid treasury address - ZERO_ADDRESS provided.\");\r\n\r\n        require(_numbers[0] > 0, \"Invalid initial conversion rate number - Must be higher than zero.\");\r\n        require(_numbers[1] > 0, \"Invalid initial payment amount in cents number - Must be higher than zero.\");\r\n        require(_numbers[2] > 0, \"Invalid top up amount in cents number - Must be higher than zero.\");\r\n        require(_numbers[3] > 0, \"Invalid start timestamp number - Must be higher than zero.\");\r\n        require(_numbers[4] > 0, \"Invalid total limit number - Must be higher than zero.\");\r\n\r\n        require(_numbers[0] <= OVERFLOW_LIMITER_NUMBER, \"Invalid initial conversion rate number - Must be lower than the overflow limit.\");\r\n        require(_numbers[1] <= OVERFLOW_LIMITER_NUMBER, \"Invalid initial payment amount in cents number - Must be lower than the overflow limit.\");\r\n        require(_numbers[2] <= OVERFLOW_LIMITER_NUMBER, \"Invalid top up amount in cents number - Must be lower than the overflow limit.\");\r\n        require(_numbers[3] <= OVERFLOW_LIMITER_NUMBER, \"Invalid start timestamp number - Must be lower than the overflow limit.\");\r\n        require(_numbers[4] <= OVERFLOW_LIMITER_NUMBER, \"Invalid total limit number - Must be lower than the overflow limit.\");\r\n\r\n        pullPayments[_paymentIDs[0]].paymentIDs[0] = _paymentIDs[0];\r\n        pullPayments[_paymentIDs[0]].paymentIDs[1] = _paymentIDs[1];\r\n        pullPayments[_paymentIDs[0]].currency = _currency;\r\n        pullPayments[_paymentIDs[0]].customerAddress = _addresses[0];\r\n        pullPayments[_paymentIDs[0]].executorAddress = _addresses[1];\r\n        pullPayments[_paymentIDs[0]].treasuryAddress = _addresses[2];\r\n\r\n        pullPayments[_paymentIDs[0]].initialConversionRate = _numbers[0];\r\n        pullPayments[_paymentIDs[0]].initialPaymentAmountInCents = _numbers[1];\r\n        pullPayments[_paymentIDs[0]].topUpAmountInCents = _numbers[2];\r\n        pullPayments[_paymentIDs[0]].startTimestamp = _numbers[3];\r\n        pullPayments[_paymentIDs[0]].totalLimit = _numbers[4];\r\n\r\n        require(isValidRegistration(\r\n                v,\r\n                r,\r\n                s,\r\n                pullPayments[_paymentIDs[0]]\r\n            ),\r\n            \"Invalid pull payment registration - ECRECOVER_FAILED.\"\r\n        );\r\n\r\n        executePullPaymentOnRegistration(\r\n            [_paymentIDs[0], _paymentIDs[1]],\r\n            [_addresses[0], _addresses[2]],\r\n            [_numbers[1], _numbers[0]]\r\n        );\r\n\r\n        if (isFundingNeeded(msg.sender)) {\r\n            msg.sender.transfer(FUNDING_AMOUNT);\r\n            emit LogSmartContractActorFunded(\"executor\", msg.sender, now);\r\n        }\r\n\r\n        emit LogPaymentRegistered(_addresses[0], _paymentIDs[0], _paymentIDs[1]);\r\n    }\r\n\r\n    /// @dev Executes a specific top up pull payment based on the payment ID - The pull payment should exist and the payment request\r\n    ///     should be valid in terms of whether it can be executed i.e. it is within the total limit.\r\n    ///     For the execution we calculate the amount in PMA using the conversion rate specified when calling the method.\r\n    ///     From the 'conversionRate' and the 'topUpAmountInCents' we calculate the amount of PMA that\r\n    ///     the business need to receive in their treasuryAddress.\r\n    ///     The smart contract transfers from the customer account to the treasury wallet the amount in PMA.\r\n    ///     After execution we set the last payment timestamp to NOW and we increase the total spent amount with the top up amount.\r\n    ///     Emits 'LogPullPaymentExecuted' with customer address, msg.sender as the pull payment executor address and the paymentID.\r\n    /// @param _paymentID - ID of the payment.\r\n    /// @param _conversionRate - conversion rate with which the payment needs to take place\r\n    function executeTopUpPayment(bytes32 _paymentID, uint256 _conversionRate)\r\n    external\r\n    paymentExists(_paymentID)\r\n    paymentNotCancelled(_paymentID)\r\n    isPullPaymentExecutor(_paymentID)\r\n    isValidNumber(_conversionRate)\r\n    isWithinTheTotalLimits(_paymentID)\r\n    returns (bool)\r\n    {\r\n        TopUpPayment storage payment = pullPayments[_paymentID];\r\n\r\n        uint256 conversionRate = _conversionRate;\r\n        uint256 amountInPMA = calculatePMAFromFiat(payment.topUpAmountInCents, conversionRate);\r\n\r\n        payment.lastPaymentTimestamp = now;\r\n        payment.totalSpent += payment.topUpAmountInCents;\r\n\r\n        require(token.transferFrom(payment.customerAddress, payment.treasuryAddress, amountInPMA));\r\n\r\n        emit LogPullPaymentExecuted(\r\n            payment.customerAddress,\r\n            payment.paymentIDs[0],\r\n            payment.paymentIDs[1],\r\n            amountInPMA,\r\n            conversionRate\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /// @dev Cancels a top up pull payment - The cancellation needs can be executed only by one of the\r\n    ///     executors of the PumaPay Pull Payment Contract and the PumaPay Pull Payment Contract checks\r\n    ///     that the pull payment's paymentID and businessID have been singed by the customer address.\r\n    ///     This method sets the cancellation of the pull payment in the pull payments array for this pull payment executor specified.\r\n    ///     The balance of the executor (msg.sender) is checked and if funding is needed 0.5 ETH is transferred.\r\n    ///     Emits 'LogPaymentCancelled' with pull payment executor address and paymentID.\r\n    /// @param v - recovery ID of the ETH signature. - https://github.com/ethereum/EIPs/issues/155\r\n    /// @param r - R output of ECDSA signature.\r\n    /// @param s - S output of ECDSA signature.\r\n    /// @param _paymentID - ID of the payment.\r\n    function cancelTopUpPayment(\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        bytes32 _paymentID\r\n    )\r\n    external\r\n    isExecutor()\r\n    paymentExists(_paymentID)\r\n    paymentNotCancelled(_paymentID)\r\n    {\r\n        require(isValidCancellation(v, r, s, _paymentID), \"Invalid cancellation - ECRECOVER_FAILED.\");\r\n        pullPayments[_paymentID].cancelTimestamp = now;\r\n        if (isFundingNeeded(msg.sender)) {\r\n            msg.sender.transfer(FUNDING_AMOUNT);\r\n            emit LogSmartContractActorFunded(\"executor\", msg.sender, now);\r\n        }\r\n        emit LogPaymentCancelled(\r\n            pullPayments[_paymentID].customerAddress,\r\n            _paymentID,\r\n            pullPayments[_paymentID].paymentIDs[1]\r\n        );\r\n    }\r\n\r\n    /// @dev Method that updates the total limit for the top up payment\r\n    /// @param _paymentID - the ID of the payment for which total limit will be updated\r\n    /// @param _newLimit - new total limit in FIAT cents\r\n    function updateTotalLimit(bytes32 _paymentID, uint256 _newLimit)\r\n    external\r\n    isCustomer(_paymentID)\r\n    isValidNumber(_newLimit)\r\n    isValidNewTotalLimit(_paymentID, _newLimit)\r\n    {\r\n        uint256 oldLimit = pullPayments[_paymentID].totalLimit;\r\n        pullPayments[_paymentID].totalLimit = _newLimit;\r\n\r\n        emit LogTotalLimitUpdated(msg.sender, _paymentID, oldLimit, _newLimit);\r\n    }\r\n\r\n    /// @dev method that retrieves the limits specified on the top up payment\r\n    /// @param _paymentID - ID of the payment\r\n    function retrieveLimits(bytes32 _paymentID)\r\n    external\r\n    view\r\n    returns (uint256 totalLimit, uint256 totalSpent)\r\n    {\r\n        return (pullPayments[_paymentID].totalLimit, pullPayments[_paymentID].totalSpent);\r\n    }\r\n\r\n    /// ===============================================================================================================\r\n    ///                                      Internal Functions\r\n    /// ===============================================================================================================\r\n    /// @dev The initial payment of the top up happens on registration. We calculate the amount of PMA that needs to be\r\n    ///     needs to be transferred from the customer to the treasury wallet, using the rate for the initial payment signed\r\n    ///     by the customer. The last payment timestamp is updated and a \"LogPullPaymentExecuted\" event is emitted.\r\n    /// @param _paymentIDs - [0] paymentID, [1] businessID\r\n    /// @param _addresses -   [0] customer, [1] treasury\r\n    /// @param _paymentAmounts - [0] initial payment in cents, [1] conversion rate\r\n    function executePullPaymentOnRegistration(\r\n        bytes32[2] memory _paymentIDs,\r\n        address[2] memory _addresses,\r\n        uint256[2] memory _paymentAmounts\r\n    )\r\n    internal\r\n    {\r\n        TopUpPayment storage payment = pullPayments[_paymentIDs[0]];\r\n        uint256 amountInPMA = calculatePMAFromFiat(_paymentAmounts[0], _paymentAmounts[1]);\r\n\r\n        payment.lastPaymentTimestamp = now;\r\n\r\n        require(token.transferFrom(_addresses[0], _addresses[1], amountInPMA));\r\n\r\n        emit LogPullPaymentExecuted(\r\n            _addresses[0],\r\n            _paymentIDs[0],\r\n            _paymentIDs[1],\r\n            amountInPMA,\r\n            _paymentAmounts[1]\r\n        );\r\n    }\r\n\r\n    /// @dev Calculates the PMA Rate for the fiat currency specified - The rate is set every 10 minutes by our PMA server\r\n    ///     for the currencies specified in the smart contract.\r\n    ///     RATE CALCULATION EXAMPLE\r\n    ///     ------------------------\r\n    ///     RATE ==> 1 PMA = 0.01 USD$\r\n    ///     1 USD$ = 1/0.01 PMA = 100 PMA\r\n    ///     Start the calculation from one ether - PMA Token has 18 decimals\r\n    ///     Multiply by the DECIMAL_FIXER (1e+10) to fix the multiplication of the rate\r\n    ///     Multiply with the fiat amount in cents\r\n    ///     Divide by the Rate of PMA to Fiat in cents\r\n    ///     Divide by the FIAT_TO_CENT_FIXER to fix the _topUpAmountInCents\r\n    ///     ---------------------------------------------------------------------------------------------------------------\r\n    ///     To save on gas, we have 'pre-calculated' the equation below and have set a constant in its place.\r\n    ///     ONE_ETHER.mul(DECIMAL_FIXER).div(FIAT_TO_CENT_FIXER) = RATE_CALCULATION_NUMBER\r\n    ///     ONE_ETHER = 10^18           |\r\n    ///     DECIMAL_FIXER = 10^10       |   => 10^18 * 10^10 / 100 ==> 10^26  => RATE_CALCULATION_NUMBER = 10^26\r\n    ///     FIAT_TO_CENT_FIXER = 100    |\r\n    ///     NOTE: The aforementioned value is linked to the OVERFLOW_LIMITER_NUMBER which is set to 10^20.\r\n    ///     ---------------------------------------------------------------------------------------------------------------\r\n    /// @param _topUpAmountInCents - payment amount in fiat CENTS so that is always integer\r\n    /// @param _conversionRate - conversion rate with which the payment needs to take place\r\n    /// NOTE: No modifiers needed to check the uint256 values since we are checking both of them on the caller method\r\n    function calculatePMAFromFiat(uint256 _topUpAmountInCents, uint256 _conversionRate)\r\n    internal\r\n    pure\r\n    returns (uint256) {\r\n        return RATE_CALCULATION_NUMBER.mul(_topUpAmountInCents).div(_conversionRate);\r\n    }\r\n\r\n    /// @dev Checks if a registration request is valid by comparing the v, r, s params\r\n    ///     and the hashed params with the customer address.\r\n    /// @param v - recovery ID of the ETH signature. - https://github.com/ethereum/EIPs/issues/155\r\n    /// @param r - R output of ECDSA signature.\r\n    /// @param s - S output of ECDSA signature.\r\n    /// @param _pullPayment - pull payment to be validated.\r\n    /// @return bool - if the v, r, s params with the hashed params match the customer address\r\n    function isValidRegistration(\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        TopUpPayment memory _pullPayment\r\n    )\r\n    internal\r\n    pure\r\n    returns (bool)\r\n    {\r\n        return ecrecover(\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    _pullPayment.paymentIDs[0],\r\n                    _pullPayment.paymentIDs[1],\r\n                    _pullPayment.currency,\r\n                    _pullPayment.treasuryAddress,\r\n                    _pullPayment.initialConversionRate,\r\n                    _pullPayment.initialPaymentAmountInCents,\r\n                    _pullPayment.topUpAmountInCents,\r\n                    _pullPayment.startTimestamp,\r\n                    _pullPayment.totalLimit\r\n                )\r\n            ),\r\n            v, r, s) == _pullPayment.customerAddress;\r\n    }\r\n\r\n    /// @dev Checks if a cancellation request is valid by comparing the v, r, s params\r\n    ///     and the hashed params with the customer address.\r\n    /// @param v - recovery ID of the ETH signature. - https://github.com/ethereum/EIPs/issues/155\r\n    /// @param r - R output of ECDSA signature.\r\n    /// @param s - S output of ECDSA signature.\r\n    /// @param _paymentID - ID of the pull payment to be cancelled.\r\n    /// @return bool - if the v, r, s params with the hashed params match the customer address\r\n    function isValidCancellation(\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        bytes32 _paymentID\r\n    )\r\n    internal\r\n    view\r\n    returns (bool){\r\n        return ecrecover(\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    pullPayments[_paymentID].paymentIDs[0],\r\n                    pullPayments[_paymentID].paymentIDs[1]\r\n                )\r\n            ),\r\n            v, r, s) == pullPayments[_paymentID].customerAddress;\r\n    }\r\n\r\n    /// @dev Checks if the address of an owner/executor needs to be funded.\r\n    ///     The minimum amount the owner/executors should always have is 0.15 ETH\r\n    /// @param _address - address of owner/executors that the balance is checked against.\r\n    /// @return bool    - whether the address needs more ETH.\r\n    function isFundingNeeded(address _address)\r\n    internal\r\n    view\r\n    returns (bool) {\r\n        return address(_address).balance <= MINIMUM_AMOUNT_OF_ETH_FOR_OPERATORS;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pullPayments\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"currency\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasuryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"executorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialConversionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPaymentAmountInCents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"topUpAmountInCents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastPaymentTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cancelTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSpent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"addExecutor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_paymentID\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_newLimit\",\"type\":\"uint256\"}],\"name\":\"updateTotalLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"removeExecutor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[2]\",\"name\":\"_paymentIDs\",\"type\":\"bytes32[2]\"},{\"internalType\":\"address[3]\",\"name\":\"_addresses\",\"type\":\"address[3]\"},{\"internalType\":\"uint256[5]\",\"name\":\"_numbers\",\"type\":\"uint256[5]\"},{\"internalType\":\"string\",\"name\":\"_currency\",\"type\":\"string\"}],\"name\":\"registerTopUpPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_paymentID\",\"type\":\"bytes32\"}],\"name\":\"cancelTopUpPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_paymentID\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_conversionRate\",\"type\":\"uint256\"}],\"name\":\"executeTopUpPayment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_paymentID\",\"type\":\"bytes32\"}],\"name\":\"retrieveLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSpent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"executors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"LogExecutorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"LogExecutorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"actorRole\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"actor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogSmartContractActorFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"paymentID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"businessID\",\"type\":\"bytes32\"}],\"name\":\"LogPaymentRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"paymentID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"businessID\",\"type\":\"bytes32\"}],\"name\":\"LogPaymentCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"paymentID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"businessID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountInPMA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"conversionRate\",\"type\":\"uint256\"}],\"name\":\"LogPullPaymentExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"paymentID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"LogTotalLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TopUpPullPayment","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000846c66cf71c43f80403b51fe3906b3599d63336f","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://507d8939a399c233dafd64a7f4500f7dd0c3b0396cbfb1366811fd264d03a521"}]}