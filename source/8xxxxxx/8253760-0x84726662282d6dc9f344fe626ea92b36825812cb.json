{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.1;\r\nlibrary SafeMath {\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function Smul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n      uint256 z = a * b;\r\n      assert((a == 0)||(z/a == b));\r\n      return z;\r\n  }\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function Sdiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      if (a == 0) {\r\n          return 0;\r\n      }\r\n    assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function Sadd(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n      uint256 z = a + b;\r\n      require((z >= a) && (z >= b),'Result must be greater than parameters');\r\n      assert((z >= a) && (z >= b));\r\n      return z;\r\n  }\r\n}\r\ncontract PoliPrice{\r\n    /**\r\n     * @dev PoliPrice corrects the USD to ETH price to all open contracts.\r\n     */\r\n    function readETHUSD() public view returns(uint16);\r\n    function readUSDWEI() public view returns(uint256);\r\n}\r\ncontract PoliToken{ \r\n    /**\r\n     * @dev PoliToken used to check balanceOf Tokens and transfer tokens too.\r\n     */\r\n   function balanceOf(address who) public view returns (uint256);\r\n   function transfer(address to, uint256 value) public payable returns (bool);\r\n}\r\ncontract PoliChange{\r\n    /**\r\n     * @dev Here is our smartcontract that change POLI to ETH  \r\n     */\r\n    using SafeMath for uint256;\r\n    address constant public cpolitokenAddress = 0x3F041a9705fd66E0E795fb1fBCA3896030F0679D; //rinkeby 0xd9dbAe6f66B3DA0FddFcDdC81A8EbE2a1c02159b; \r\n    address constant public cpoliPrice = 0xaf4F368061840f34e4CDeC6Ba96D0Ab6B62b632F; // rinkeby 0x7c1AB1A03402bA6Bbd2Aec6c18558b4d7B1e04eA;  \r\n    address internal seller;\r\n    address internal buyer; \r\n    bool    internal waitDeposit;\r\n    uint internal percentGain; \r\n    PoliToken internal pToken;\r\n    PoliPrice internal pPrice;\r\n    constructor() public{\r\n        seller = msg.sender;\r\n        waitDeposit = true; \r\n        pToken = PoliToken(cpolitokenAddress); \r\n        pPrice = PoliPrice(cpoliPrice);\r\n        percentGain = 0; // 1 = 1% or 20 = 20% or 200 = 200%\r\n    }\r\n    //Informations of contract\r\n    function getBalanceETH() public view returns(uint){\r\n        return address(this).balance;\r\n    }\r\n    function getBalancePOLI() public view returns(uint){\r\n        return pToken.balanceOf(address(this));\r\n    }\r\n    function getSellerAddress() public view returns(address){\r\n        return address(seller);\r\n    }\r\n    function getBuyerAddress() public view returns(address){\r\n        return address(buyer);\r\n    }\r\n    function getContractAddress() public view returns(address){\r\n        return address(this);\r\n    }\r\n    function getContractWEIValue() public view returns(uint){ \r\n        return SafeMath.Smul(getWEIGain(), getBalancePOLI()); \r\n    }\r\n    function getUSDPrice() public view returns(uint){\r\n        return pPrice.readETHUSD();\r\n    }\r\n    function getWEIGain() private view returns(uint){\r\n        uint rWEIprice;\r\n        uint gainprice;\r\n        rWEIprice = SafeMath.Smul(1, pPrice.readUSDWEI());\r\n        gainprice = SafeMath.Sdiv(SafeMath.Smul(rWEIprice,percentGain),100);\r\n        return SafeMath.Sadd(rWEIprice,gainprice);\r\n    }\r\n    //Actions of contract\r\n    function buyTokens() public payable chkBuy() returns(bool){\r\n        if (getBalancePOLI() > 0){\r\n           buyer = msg.sender;\r\n           waitDeposit = false;\r\n           bool ret;\r\n           ret = pToken.transfer(buyer, pToken.balanceOf(address(this)));\r\n           return ret; \r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n    }\r\n    function sellerToWithdraw() public payable isSeller() returns(bool){\r\n        if (address(this).balance > 0){\r\n           msg.sender.transfer(address(this).balance);\r\n           return true;\r\n        } \r\n        else{\r\n            return false;\r\n        }\r\n    }\r\n    //Functions modifiers\r\n    modifier isSeller(){\r\n        require(msg.sender == seller, 'Sorry, you must be the seller');\r\n        _;\r\n    }\r\n    modifier isBuyer(){\r\n        require(msg.sender == buyer, 'Sorry, you must be the buyer');\r\n        _;\r\n    } \r\n    modifier chkBuy(){\r\n        require(waitDeposit == true, 'Sorry, This contract has already been purchased.');\r\n        require(msg.value == getContractWEIValue(), 'You must to deposit the full value of contract. Check response of function getContractWEIValue() first');\r\n        require(msg.sender != address(0),'Address need to be different of zero');\r\n        _;\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellerToWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalancePOLI\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSellerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalanceETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUSDPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractWEIValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cpoliPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBuyerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cpolitokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"PoliChange","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://cd89598c716707b9cf4d597b85fb2410fa27b734d5addd14e3c66c01bf55aaeb"}]}