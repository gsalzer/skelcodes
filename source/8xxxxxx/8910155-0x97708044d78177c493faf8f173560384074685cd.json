{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.0 <0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Ethconomy is Ownable {\r\n\r\n    mapping(uint => Order) private orderIdToOrders;\r\n    mapping(address => uint[]) private userToOrderIds;\r\n    // highest orderId so far, increamental\r\n    uint public sequenceNumber;\r\n\r\n    event PlaceOrder (\r\n        uint _orderId,\r\n        uint indexed _productId,\r\n        address indexed _consumer,\r\n        uint _value\r\n    );\r\n\r\n    event CancelOrder (\r\n        uint _orderId,\r\n        address indexed _consumer\r\n    );\r\n\r\n    event FillOrder (\r\n        uint _orderId,\r\n        address indexed _consumer,\r\n        address indexed _broker\r\n    );\r\n\r\n    enum OrderStatus { Placed, Cancelled, Completed }\r\n\r\n    struct Order {\r\n        uint orderId;\r\n        uint productId;\r\n        address buyer;\r\n        uint price;\r\n        OrderStatus status;\r\n        bytes email;\r\n        uint timestamp;\r\n    }\r\n\r\n    function placeOrder(uint _productId, bytes memory _email) public payable {\r\n        ++sequenceNumber;\r\n        uint orderId = generateOrderId(address(this), sequenceNumber);\r\n        orderIdToOrders[orderId] = Order(orderId, _productId, msg.sender, msg.value, OrderStatus.Placed, _email, now);\r\n        userToOrderIds[msg.sender].push(orderId);\r\n\r\n        emit PlaceOrder(orderId, _productId, msg.sender, msg.value);\r\n    }\r\n\r\n    function cancelOrder(uint _orderId) public {\r\n        Order storage order = orderIdToOrders[_orderId];\r\n        require (\r\n            order.orderId == _orderId,\r\n            'Error: cannot cancel nonexisting orders'\r\n        );\r\n        require (\r\n            msg.sender == order.buyer,\r\n            'Error: cannot cancel order of others'\r\n        );\r\n        require (\r\n            order.status != OrderStatus.Cancelled,\r\n            'Error: order already cancelled'\r\n        );\r\n        order.status = OrderStatus.Cancelled;\r\n        msg.sender.transfer(order.price);\r\n\r\n        emit CancelOrder(_orderId, order.buyer);\r\n    }\r\n\r\n    function fillOrder(uint _orderId) public onlyOwner {\r\n        Order storage order = orderIdToOrders[_orderId];\r\n        require (\r\n            order.status == OrderStatus.Placed,\r\n            'Error: order not in placed status'\r\n        );\r\n        order.status = OrderStatus.Completed;\r\n        msg.sender.transfer(order.price);\r\n\r\n        emit FillOrder(_orderId, order.buyer, msg.sender);\r\n    }\r\n\r\n    function getUserOrders(address _user) public view returns (uint[] memory) {\r\n        return userToOrderIds[_user];\r\n    }\r\n\r\n    function getOrder(uint _orderId) public view returns (\r\n        uint orderId_,\r\n        uint productId_,\r\n        address buyer_,\r\n        uint price_,\r\n        OrderStatus orderStatus_,\r\n        bytes memory email_,\r\n        uint timestamp_) {\r\n\r\n        Order memory order = orderIdToOrders[_orderId];\r\n        orderId_ = order.orderId;\r\n        productId_ = order.productId;\r\n        buyer_ = order.buyer;\r\n        price_ = order.price;\r\n        orderStatus_ = order.status;\r\n        email_ = order.email;\r\n        timestamp_ = order.timestamp;\r\n    }\r\n\r\n    function generateOrderId(address _contractAddress, uint _sequenceNumber) public pure returns (uint) {\r\n        return uint(keccak256(abi.encodePacked(_contractAddress, _sequenceNumber)));\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserOrders\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sequenceNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"fillOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_productId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_email\",\"type\":\"bytes\"}],\"name\":\"placeOrder\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sequenceNumber\",\"type\":\"uint256\"}],\"name\":\"generateOrderId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"getOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"productId_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"},{\"internalType\":\"enum Ethconomy.OrderStatus\",\"name\":\"orderStatus_\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"email_\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"timestamp_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_productId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_consumer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"PlaceOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_consumer\",\"type\":\"address\"}],\"name\":\"CancelOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_consumer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_broker\",\"type\":\"address\"}],\"name\":\"FillOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Ethconomy","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://f21e84057761e998ca212d02e20acb7f83a92fb6947a889e9d2265c27fa6bdf6"}]}