{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"pragma solidity 0.5.9;\\n\\n/**\\n * @dev Collection of functions related to the address type,\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * This test is non-exhaustive, and there may be false-negatives: during the\\n     * execution of a contract\\u0027s constructor, its address will be reported as\\n     * not containing a contract.\\n     *\\n     * \\u003e It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n}\\n\"},\"ERC20Interface.sol\":{\"content\":\"pragma solidity 0.5.9;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see `ERC20Detailed`.\\n */\\ninterface ERC20 {\\n    function decimals() external view returns(uint digits);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\n     * zero by default.\\n     *\\n     * This value changes when `approve` or `transferFrom` are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * \\u003e Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an `Approval` event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to `approve`. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"KyberNetworkProxyInterface.sol\":{\"content\":\"pragma solidity 0.5.9;\\n\\nimport \\\"./ERC20Interface.sol\\\";\\n\\n\\n/// @title Kyber Network interface\\ninterface KyberNetworkProxyInterface {\\n    function tradeWithHint(ERC20 src, uint srcAmount, ERC20 dest, address payable destAddress, uint maxDestAmount,\\n        uint minConversionRate, address walletId, bytes calldata hint) external payable returns(uint);\\n\\n    function maxGasPrice() external view returns(uint);\\n    function getUserCapInWei(address user) external view returns(uint);\\n    function getUserCapInTokenWei(address user, ERC20 token) external view returns(uint);\\n    function enabled() external view returns(bool);\\n    function info(bytes32 id) external view returns(uint);\\n\\n    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty) external view\\n        returns (uint expectedRate, uint slippageRate);\\n}\\n\"},\"KyberSwapLimitOrder.sol\":{\"content\":\"pragma solidity 0.5.9;\\n\\nimport \\\"./SafeERC20.sol\\\";\\nimport \\\"./KyberNetworkProxyInterface.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Withdrawable.sol\\\";\\n\\n\\ncontract KyberSwapLimitOrder is Withdrawable {\\n\\n    //userAddress =\\u003e concatenated token addresses =\\u003e nonce\\n    mapping(address =\\u003e mapping(uint256 =\\u003e uint256)) public nonces;\\n    bool public tradeEnabled;\\n    KyberNetworkProxyInterface public kyberNetworkProxy;\\n    uint256 public constant MAX_DEST_AMOUNT = 2 ** 256 - 1;\\n    uint256 public constant PRECISION = 10**4;\\n    using SafeMath for uint256;\\n    using SafeERC20 for ERC20;\\n\\n    //Constructor\\n    constructor(\\n        address _admin,\\n        KyberNetworkProxyInterface _kyberNetworkProxy\\n    )\\n        public\\n        Withdrawable(_admin) {\\n            require(_admin != address(0));\\n            require(address(_kyberNetworkProxy) != address(0));\\n\\n            kyberNetworkProxy = _kyberNetworkProxy;\\n        }\\n\\n    event TradeEnabled(bool tradeEnabled);\\n\\n    function enableTrade() external onlyAdmin {\\n        tradeEnabled = true;\\n        emit TradeEnabled(tradeEnabled);\\n    }\\n\\n    function disableTrade() external onlyAdmin {\\n        tradeEnabled = false;\\n        emit TradeEnabled(tradeEnabled);\\n    }\\n\\n    function listToken(ERC20 token)\\n        external\\n        onlyAdmin\\n    {\\n        require(address(token) != address(0));\\n        /*\\n        No need to set allowance to zero first, as there\\u0027s only 1 scenario here (from zero to max allowance).\\n        No one else can set allowance on behalf of this contract to Kyber.\\n        */\\n        token.safeApprove(address(kyberNetworkProxy), MAX_DEST_AMOUNT);\\n    }\\n\\n    struct VerifyParams {\\n        address user;\\n        uint8 v;\\n        uint256 concatenatedTokenAddresses;\\n        uint256 nonce;\\n        bytes32 hashedParams;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    struct TradeInput {\\n        ERC20 srcToken;\\n        uint256 srcQty;\\n        ERC20 destToken;\\n        address payable destAddress;\\n        uint256 minConversionRate;\\n        uint256 feeInPrecision;\\n    }\\n\\n    event LimitOrderExecute(address indexed user, uint256 nonce, address indexed srcToken,\\n        uint256 actualSrcQty, uint256 destAmount, address indexed destToken,\\n        address destAddress, uint256 feeInSrcTokenWei);\\n\\n    function executeLimitOrder(\\n        address user,\\n        uint256 nonce,\\n        ERC20 srcToken,\\n        uint256 srcQty,\\n        ERC20 destToken,\\n        address payable destAddress,\\n        uint256 minConversionRate,\\n        uint256 feeInPrecision,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    )\\n        external\\n    {\\n        require(tradeEnabled);\\n\\n        VerifyParams memory verifyParams;\\n        verifyParams.user = user;\\n        verifyParams.concatenatedTokenAddresses = concatTokenAddresses(address(srcToken), address(destToken));\\n        verifyParams.nonce = nonce;\\n        verifyParams.hashedParams = keccak256(abi.encodePacked(\\n            user, nonce, srcToken, srcQty, destToken, destAddress, minConversionRate, feeInPrecision));\\n        verifyParams.v = v;\\n        verifyParams.r = r;\\n        verifyParams.s = s;\\n        require(verifyTradeParams(verifyParams));\\n\\n        TradeInput memory tradeInput;\\n        tradeInput.srcToken = srcToken;\\n        tradeInput.srcQty = srcQty;\\n        tradeInput.destToken = destToken;\\n        tradeInput.destAddress = destAddress;\\n        tradeInput.minConversionRate = minConversionRate;\\n        tradeInput.feeInPrecision = feeInPrecision;\\n        trade(tradeInput, verifyParams);\\n    }\\n\\n    event OldOrdersInvalidated(address user, uint256 concatenatedTokenAddresses, uint256 nonce);\\n\\n    function invalidateOldOrders(uint256 concatenatedTokenAddresses, uint256 nonce) external {\\n        require(validAddressInNonce(nonce));\\n        require(isValidNonce(msg.sender, concatenatedTokenAddresses, nonce));\\n        updateNonce(msg.sender, concatenatedTokenAddresses, nonce);\\n        emit OldOrdersInvalidated(msg.sender, concatenatedTokenAddresses, nonce);\\n    }\\n\\n    function concatTokenAddresses(address srcToken, address destToken) public pure returns (uint256) {\\n        return ((uint256(srcToken) \\u003e\\u003e 32) \\u003c\\u003c 128) + (uint256(destToken) \\u003e\\u003e 32);\\n    }\\n\\n    function validAddressInNonce(uint256 nonce) public view returns (bool) {\\n        //check that first 16 bytes in nonce corresponds to first 16 bytes of contract address\\n        return (nonce \\u003e\\u003e 128) == (uint256(address(this)) \\u003e\\u003e 32);\\n    }\\n\\n    function isValidNonce(address user, uint256 concatenatedTokenAddresses, uint256 nonce) public view returns (bool) {\\n        return nonce \\u003e nonces[user][concatenatedTokenAddresses];\\n    }\\n\\n    function verifySignature(bytes32 hash, uint8 v, bytes32 r, bytes32 s, address user) public pure returns (bool) {\\n        //Users have to sign the message using wallets (Trezor, Ledger, Geth)\\n        //These wallets prepend a prefix to the data to prevent some malicious signing scheme\\n        //Eg. website that tries to trick users to sign an Ethereum message\\n        //https://ethereum.stackexchange.com/questions/15364/ecrecover-from-geth-and-web3-eth-sign\\n        bytes memory prefix = \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\";\\n        bytes32 prefixedHash = keccak256(abi.encodePacked(prefix, hash));\\n        return ecrecover(prefixedHash, v, r, s) == user;\\n    }\\n\\n    //used SafeMath lib\\n    function deductFee(uint256 srcQty, uint256 feeInPrecision) public pure returns\\n    (uint256 actualSrcQty, uint256 feeInSrcTokenWei) {\\n        require(feeInPrecision \\u003c= 100 * PRECISION);\\n        feeInSrcTokenWei = srcQty.mul(feeInPrecision).div(100 * PRECISION);\\n        actualSrcQty = srcQty.sub(feeInSrcTokenWei);\\n    }\\n\\n    event NonceUpdated(address user, uint256 concatenatedTokenAddresses, uint256 nonce);\\n\\n    function updateNonce(address user, uint256 concatenatedTokenAddresses, uint256 nonce) internal {\\n        nonces[user][concatenatedTokenAddresses] = nonce;\\n        emit NonceUpdated(user, concatenatedTokenAddresses, nonce);\\n    }\\n\\n    function verifyTradeParams(VerifyParams memory verifyParams) internal view returns (bool) {\\n        require(validAddressInNonce(verifyParams.nonce));\\n        require(isValidNonce(verifyParams.user, verifyParams.concatenatedTokenAddresses, verifyParams.nonce));\\n        require(verifySignature(\\n            verifyParams.hashedParams,\\n            verifyParams.v,\\n            verifyParams.r,\\n            verifyParams.s,\\n            verifyParams.user\\n            ));\\n        return true;\\n    }\\n\\n    function trade(TradeInput memory tradeInput, VerifyParams memory verifyParams) internal {\\n        tradeInput.srcToken.safeTransferFrom(verifyParams.user, address(this), tradeInput.srcQty);\\n        uint256 actualSrcQty;\\n        uint256 feeInSrcTokenWei;\\n        (actualSrcQty, feeInSrcTokenWei) = deductFee(tradeInput.srcQty, tradeInput.feeInPrecision);\\n\\n        updateNonce(verifyParams.user, verifyParams.concatenatedTokenAddresses, verifyParams.nonce);\\n        uint256 destAmount = kyberNetworkProxy.tradeWithHint(\\n            tradeInput.srcToken,\\n            actualSrcQty,\\n            tradeInput.destToken,\\n            tradeInput.destAddress,\\n            MAX_DEST_AMOUNT,\\n            tradeInput.minConversionRate,\\n            address(this), //walletId\\n            \\\"PERM\\\" //hint: only Permissioned reserves to be used\\n        );\\n\\n        emit LimitOrderExecute(\\n            verifyParams.user,\\n            verifyParams.nonce,\\n            address(tradeInput.srcToken),\\n            actualSrcQty,\\n            destAmount,\\n            address(tradeInput.destToken),\\n            tradeInput.destAddress,\\n            feeInSrcTokenWei\\n        );\\n    }\\n}\\n\"},\"Monitor.sol\":{\"content\":\"pragma solidity 0.5.9;\\n\\nimport \\\"./SafeERC20.sol\\\";\\nimport \\\"./KyberNetworkProxyInterface.sol\\\";\\nimport \\\"./PermissionGroups.sol\\\";\\nimport \\\"./Withdrawable.sol\\\";\\nimport \\\"./KyberSwapLimitOrder.sol\\\";\\nimport \\\"./Utils.sol\\\";\\n\\ncontract MonitorHelper is Utils2, PermissionGroups, Withdrawable {\\n    KyberSwapLimitOrder public ksContract;\\n    KyberNetworkProxyInterface public kyberProxy;\\n    uint public slippageRate = 300; // 3%\\n\\n    constructor(KyberSwapLimitOrder _ksContract, KyberNetworkProxyInterface _kyberProxy) public Withdrawable(msg.sender) {\\n        ksContract = _ksContract;\\n        kyberProxy = _kyberProxy;\\n    }\\n\\n    function setKSContract(KyberSwapLimitOrder _ksContract) public onlyAdmin {\\n        ksContract = _ksContract;\\n    }\\n\\n    function setKyberProxy(KyberNetworkProxyInterface _kyberProxy) public onlyAdmin {\\n        kyberProxy = _kyberProxy;\\n    }\\n\\n    function setSlippageRate(uint _slippageRate) public onlyAdmin {\\n        slippageRate = _slippageRate;\\n    }\\n\\n    function getNonces(address []memory users, uint256[] memory concatenatedTokenAddresses)\\n    public view\\n    returns (uint256[] memory nonces) {\\n        require(users.length == concatenatedTokenAddresses.length);\\n        nonces = new uint256[](users.length);\\n        for(uint i=0; i\\u003c users.length; i ++) {\\n            nonces[i]= ksContract.nonces(users[i],concatenatedTokenAddresses[i]);\\n        }\\n        return (nonces);\\n    }\\n\\n    function getNonceFromKS(address user, uint256 concatenatedTokenAddress)\\n    public view\\n    returns (uint256 nonces) {\\n        nonces = ksContract.nonces(user, concatenatedTokenAddress);\\n        return nonces;\\n    }\\n\\n    function getBalancesAndAllowances(address[] memory wallets, ERC20[] memory tokens)\\n    public view\\n    returns (uint[] memory balances, uint[] memory allowances) {\\n        require(wallets.length == tokens.length);\\n        balances = new uint[](wallets.length);\\n        allowances = new uint[](wallets.length);\\n        for(uint i = 0; i \\u003c wallets.length; i++) {\\n            balances[i] = tokens[i].balanceOf(wallets[i]);\\n            allowances[i] = tokens[i].allowance(wallets[i], address(ksContract));\\n        }\\n        return (balances, allowances);\\n    }\\n\\n    function getBalances(address[] memory wallets, ERC20[] memory tokens)\\n    public view\\n    returns (uint[] memory balances) {\\n        require(wallets.length == tokens.length);\\n        balances = new uint[](wallets.length);\\n        for(uint i = 0; i \\u003c wallets.length; i++) {\\n            balances[i] = tokens[i].balanceOf(wallets[i]);\\n        }\\n        return balances;\\n    }\\n\\n    function getBalancesSingleWallet(address wallet, ERC20[] memory tokens)\\n    public view\\n    returns (uint[] memory balances) {\\n        balances = new uint[](tokens.length);\\n        for(uint i = 0; i \\u003c tokens.length; i++) {\\n            balances[i] = tokens[i].balanceOf(wallet);\\n        }\\n        return balances;\\n    }\\n\\n    function getAllowances(address[] memory wallets, ERC20[] memory tokens)\\n    public view\\n    returns (uint[] memory allowances) {\\n        require(wallets.length == tokens.length);\\n        allowances = new uint[](wallets.length);\\n        for(uint i = 0; i \\u003c wallets.length; i++) {\\n            allowances[i] = tokens[i].allowance(wallets[i], address(ksContract));\\n        }\\n        return allowances;\\n    }\\n\\n    function getAllowancesSingleWallet(address wallet, ERC20[] memory tokens)\\n    public view\\n    returns (uint[] memory allowances) {\\n        allowances = new uint[](tokens.length);\\n        for(uint i = 0; i \\u003c tokens.length; i++) {\\n            allowances[i] = tokens[i].allowance(wallet, address(ksContract));\\n        }\\n        return allowances;\\n    }\\n\\n    function checkOrdersExecutable(\\n        address[] memory senders, ERC20[] memory srcs,\\n        uint[] memory srcAmounts, ERC20[] memory dests,\\n        uint[] memory rates, uint[] memory nonces\\n    )\\n    public view\\n    returns (bool[] memory executables) {\\n        require(senders.length == srcs.length);\\n        require(senders.length == dests.length);\\n        require(senders.length == srcAmounts.length);\\n        require(senders.length == rates.length);\\n        require(senders.length == nonces.length);\\n        executables = new bool[](senders.length);\\n        bool isOK = true;\\n        uint curRate = 0;\\n        uint allowance = 0;\\n        uint balance = 0;\\n        for(uint i = 0; i \\u003c senders.length; i++) {\\n            isOK = true;\\n            balance = srcs[i].balanceOf(senders[i]);\\n            if (balance \\u003c srcAmounts[i]) { isOK = false; }\\n            if (isOK) {\\n                allowance = srcs[i].allowance(senders[i], address(ksContract));\\n                if (allowance \\u003c srcAmounts[i]) { isOK = false; }\\n            }\\n            if (isOK \\u0026\\u0026 address(ksContract) != address(0)) {\\n                isOK = ksContract.validAddressInNonce(nonces[i]);\\n                if (isOK) {\\n                    uint concatTokenAddresses = ksContract.concatTokenAddresses(address(srcs[i]), address(dests[i]));\\n                    isOK = ksContract.isValidNonce(senders[i], concatTokenAddresses, nonces[i]);\\n                }\\n            }\\n            if (isOK) {\\n                (curRate, ) = kyberProxy.getExpectedRate(srcs[i], dests[i], srcAmounts[i]);\\n                if (curRate * 10000 \\u003c rates[i] * (10000 + slippageRate)) { isOK = false; }\\n            }\\n            executables[i] = isOK;\\n        }\\n        return executables;\\n    }\\n}\\n\"},\"PermissionGroups.sol\":{\"content\":\"pragma solidity 0.5.9;\\n\\n\\ncontract PermissionGroups {\\n\\n    address public admin;\\n    address public pendingAdmin;\\n    mapping(address=\\u003ebool) internal operators;\\n    mapping(address=\\u003ebool) internal alerters;\\n    address[] internal operatorsGroup;\\n    address[] internal alertersGroup;\\n    uint constant internal MAX_GROUP_SIZE = 50;\\n\\n    constructor(address _admin) public {\\n        admin = _admin;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin);\\n        _;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(operators[msg.sender]);\\n        _;\\n    }\\n\\n    modifier onlyAlerter() {\\n        require(alerters[msg.sender]);\\n        _;\\n    }\\n\\n    function getOperators () external view returns(address[] memory) {\\n        return operatorsGroup;\\n    }\\n\\n    function getAlerters () external view returns(address[] memory) {\\n        return alertersGroup;\\n    }\\n\\n    event TransferAdminPending(address pendingAdmin);\\n\\n    /**\\n     * @dev Allows the current admin to set the pendingAdmin address.\\n     * @param newAdmin The address to transfer ownership to.\\n     */\\n    function transferAdmin(address newAdmin) public onlyAdmin {\\n        require(newAdmin != address(0));\\n        emit TransferAdminPending(pendingAdmin);\\n        pendingAdmin = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Allows the current admin to set the admin in one tx. Useful initial deployment.\\n     * @param newAdmin The address to transfer ownership to.\\n     */\\n    function transferAdminQuickly(address newAdmin) public onlyAdmin {\\n        require(newAdmin != address(0));\\n        emit TransferAdminPending(newAdmin);\\n        emit AdminClaimed(newAdmin, admin);\\n        admin = newAdmin;\\n    }\\n\\n    event AdminClaimed( address newAdmin, address previousAdmin);\\n\\n    /**\\n     * @dev Allows the pendingAdmin address to finalize the change admin process.\\n     */\\n    function claimAdmin() public {\\n        require(pendingAdmin == msg.sender);\\n        emit AdminClaimed(pendingAdmin, admin);\\n        admin = pendingAdmin;\\n        pendingAdmin = address(0);\\n    }\\n\\n    event AlerterAdded (address newAlerter, bool isAdd);\\n\\n    function addAlerter(address newAlerter) public onlyAdmin {\\n        require(!alerters[newAlerter]); // prevent duplicates.\\n        require(alertersGroup.length \\u003c MAX_GROUP_SIZE);\\n\\n        emit AlerterAdded(newAlerter, true);\\n        alerters[newAlerter] = true;\\n        alertersGroup.push(newAlerter);\\n    }\\n\\n    function removeAlerter (address alerter) public onlyAdmin {\\n        require(alerters[alerter]);\\n        alerters[alerter] = false;\\n\\n        for (uint i = 0; i \\u003c alertersGroup.length; ++i) {\\n            if (alertersGroup[i] == alerter) {\\n                alertersGroup[i] = alertersGroup[alertersGroup.length - 1];\\n                alertersGroup.length--;\\n                emit AlerterAdded(alerter, false);\\n                break;\\n            }\\n        }\\n    }\\n\\n    event OperatorAdded(address newOperator, bool isAdd);\\n\\n    function addOperator(address newOperator) public onlyAdmin {\\n        require(!operators[newOperator]); // prevent duplicates.\\n        require(operatorsGroup.length \\u003c MAX_GROUP_SIZE);\\n\\n        emit OperatorAdded(newOperator, true);\\n        operators[newOperator] = true;\\n        operatorsGroup.push(newOperator);\\n    }\\n\\n    function removeOperator (address operator) public onlyAdmin {\\n        require(operators[operator]);\\n        operators[operator] = false;\\n\\n        for (uint i = 0; i \\u003c operatorsGroup.length; ++i) {\\n            if (operatorsGroup[i] == operator) {\\n                operatorsGroup[i] = operatorsGroup[operatorsGroup.length - 1];\\n                operatorsGroup.length -= 1;\\n                emit OperatorAdded(operator, false);\\n                break;\\n            }\\n        }\\n    }\\n}\\n\"},\"SafeERC20.sol\":{\"content\":\"pragma solidity 0.5.9;\\n\\nimport \\\"./ERC20Interface.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(ERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(ERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(ERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(ERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\n        // we\\u0027re implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length \\u003e 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"pragma solidity 0.5.9;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\n\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003c= a, \\\"SafeMath: subtraction overflow\\\");\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b \\u003e 0, \\\"SafeMath: division by zero\\\");\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n}\\n\"},\"Utils.sol\":{\"content\":\"pragma solidity 0.5.9;\\n\\nimport \\\"./SafeERC20.sol\\\";\\n\\n// File: contracts/Utils.sol\\n\\n/// @title Kyber constants contract\\ncontract Utils {\\n\\n   ERC20 constant internal ETH_TOKEN_ADDRESS = ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\\n   uint  constant internal PRECISION = (10**18);\\n   uint  constant internal MAX_QTY   = (10**28); // 10B tokens\\n   uint  constant internal MAX_RATE  = (PRECISION * 10**6); // up to 1M tokens per ETH\\n   uint  constant internal MAX_DECIMALS = 18;\\n   uint  constant internal ETH_DECIMALS = 18;\\n   mapping(address=\\u003euint) internal decimals;\\n\\n   function setDecimals(ERC20 token) internal {\\n       if (token == ETH_TOKEN_ADDRESS) decimals[address(token)] = ETH_DECIMALS;\\n       else decimals[address(token)] = token.decimals();\\n   }\\n\\n   function getDecimals(ERC20 token) internal view returns(uint) {\\n       if (token == ETH_TOKEN_ADDRESS) return ETH_DECIMALS; // save storage access\\n       uint tokenDecimals = decimals[address(token)];\\n       // technically, there might be token with decimals 0\\n       // moreover, very possible that old tokens have decimals 0\\n       // these tokens will just have higher gas fees.\\n       if(tokenDecimals == 0) return token.decimals();\\n\\n       return tokenDecimals;\\n   }\\n\\n   function calcDstQty(uint srcQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\\n       require(srcQty \\u003c= MAX_QTY);\\n       require(rate \\u003c= MAX_RATE);\\n\\n       if (dstDecimals \\u003e= srcDecimals) {\\n           require((dstDecimals - srcDecimals) \\u003c= MAX_DECIMALS);\\n           return (srcQty * rate * (10**(dstDecimals - srcDecimals))) / PRECISION;\\n       } else {\\n           require((srcDecimals - dstDecimals) \\u003c= MAX_DECIMALS);\\n           return (srcQty * rate) / (PRECISION * (10**(srcDecimals - dstDecimals)));\\n       }\\n   }\\n\\n   function calcSrcQty(uint dstQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\\n       require(dstQty \\u003c= MAX_QTY);\\n       require(rate \\u003c= MAX_RATE);\\n\\n       //source quantity is rounded up. to avoid dest quantity being too low.\\n       uint numerator;\\n       uint denominator;\\n       if (srcDecimals \\u003e= dstDecimals) {\\n           require((srcDecimals - dstDecimals) \\u003c= MAX_DECIMALS);\\n           numerator = (PRECISION * dstQty * (10**(srcDecimals - dstDecimals)));\\n           denominator = rate;\\n       } else {\\n           require((dstDecimals - srcDecimals) \\u003c= MAX_DECIMALS);\\n           numerator = (PRECISION * dstQty);\\n           denominator = (rate * (10**(dstDecimals - srcDecimals)));\\n       }\\n       return (numerator + denominator - 1) / denominator; //avoid rounding down errors\\n   }\\n}\\n\\n// File: contracts/Utils2.sol\\n\\ncontract Utils2 is Utils {\\n\\n   /// @dev get the balance of a user.\\n   /// @param token The token type\\n   /// @return The balance\\n   function getBalance(ERC20 token, address user) public view returns(uint) {\\n       if (token == ETH_TOKEN_ADDRESS)\\n           return user.balance;\\n       else\\n           return token.balanceOf(user);\\n   }\\n\\n   function getDecimalsSafe(ERC20 token) internal returns(uint) {\\n\\n       if (decimals[address(token)] == 0) {\\n           setDecimals(token);\\n       }\\n\\n       return decimals[address(token)];\\n   }\\n\\n   function calcDestAmount(ERC20 src, ERC20 dest, uint srcAmount, uint rate) internal view returns(uint) {\\n       return calcDstQty(srcAmount, getDecimals(src), getDecimals(dest), rate);\\n   }\\n\\n   function calcSrcAmount(ERC20 src, ERC20 dest, uint destAmount, uint rate) internal view returns(uint) {\\n       return calcSrcQty(destAmount, getDecimals(src), getDecimals(dest), rate);\\n   }\\n\\n   function calcRateFromQty(uint srcAmount, uint destAmount, uint srcDecimals, uint dstDecimals)\\n       internal pure returns(uint)\\n   {\\n       require(srcAmount \\u003c= MAX_QTY);\\n       require(destAmount \\u003c= MAX_QTY);\\n\\n       if (dstDecimals \\u003e= srcDecimals) {\\n           require((dstDecimals - srcDecimals) \\u003c= MAX_DECIMALS);\\n           return (destAmount * PRECISION / ((10 ** (dstDecimals - srcDecimals)) * srcAmount));\\n       } else {\\n           require((srcDecimals - dstDecimals) \\u003c= MAX_DECIMALS);\\n           return (destAmount * PRECISION * (10 ** (srcDecimals - dstDecimals)) / srcAmount);\\n       }\\n   }\\n}\\n\"},\"Withdrawable.sol\":{\"content\":\"pragma solidity 0.5.9;\\n\\nimport \\\"./PermissionGroups.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\n\\n/**\\n * @title Contracts that should be able to recover tokens or ethers can inherit this contract.\\n * @author Ilan Doron\\n * @dev Allows to recover any tokens or Ethers received in a contract.\\n * Should prevent any accidental loss of tokens.\\n */\\ncontract Withdrawable is PermissionGroups {\\n    using SafeERC20 for ERC20;\\n    constructor(address _admin) public PermissionGroups (_admin) {}\\n\\n    event TokenWithdraw(ERC20 token, uint amount, address sendTo);\\n\\n    /**\\n     * @dev Withdraw all ERC20 compatible tokens\\n     * @param token ERC20 The address of the token contract\\n     */\\n    function withdrawToken(ERC20 token, uint amount, address sendTo) external onlyAdmin {\\n        token.safeTransfer(sendTo, amount);\\n        emit TokenWithdraw(token, amount, sendTo);\\n    }\\n\\n    event EtherWithdraw(uint amount, address sendTo);\\n\\n    /**\\n     * @dev Withdraw Ethers\\n     */\\n    function withdrawEther(uint amount, address payable sendTo) external onlyAdmin {\\n        sendTo.transfer(amount);\\n        emit EtherWithdraw(amount, sendTo);\\n    }\\n}\\n\"}}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"alerter\",\"type\":\"address\"}],\"name\":\"removeAlerter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"wallets\",\"type\":\"address[]\"},{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getAllowances\",\"outputs\":[{\"name\":\"allowances\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"wallets\",\"type\":\"address[]\"},{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getBalancesAndAllowances\",\"outputs\":[{\"name\":\"balances\",\"type\":\"uint256[]\"},{\"name\":\"allowances\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOperators\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAlerter\",\"type\":\"address\"}],\"name\":\"addAlerter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ksContract\",\"type\":\"address\"}],\"name\":\"setKSContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"users\",\"type\":\"address[]\"},{\"name\":\"concatenatedTokenAddresses\",\"type\":\"uint256[]\"}],\"name\":\"getNonces\",\"outputs\":[{\"name\":\"nonces\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getBalancesSingleWallet\",\"outputs\":[{\"name\":\"balances\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"senders\",\"type\":\"address[]\"},{\"name\":\"srcs\",\"type\":\"address[]\"},{\"name\":\"srcAmounts\",\"type\":\"uint256[]\"},{\"name\":\"dests\",\"type\":\"address[]\"},{\"name\":\"rates\",\"type\":\"uint256[]\"},{\"name\":\"nonces\",\"type\":\"uint256[]\"}],\"name\":\"checkOrdersExecutable\",\"outputs\":[{\"name\":\"executables\",\"type\":\"bool[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getAllowancesSingleWallet\",\"outputs\":[{\"name\":\"allowances\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"concatenatedTokenAddress\",\"type\":\"uint256\"}],\"name\":\"getNonceFromKS\",\"outputs\":[{\"name\":\"nonces\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_slippageRate\",\"type\":\"uint256\"}],\"name\":\"setSlippageRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdminQuickly\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"slippageRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAlerters\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ksContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kyberProxy\",\"type\":\"address\"}],\"name\":\"setKyberProxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"wallets\",\"type\":\"address[]\"},{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getBalances\",\"outputs\":[{\"name\":\"balances\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kyberProxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ksContract\",\"type\":\"address\"},{\"name\":\"_kyberProxy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"TokenWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"EtherWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"pendingAdmin\",\"type\":\"address\"}],\"name\":\"TransferAdminPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAdmin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"previousAdmin\",\"type\":\"address\"}],\"name\":\"AdminClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAlerter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isAdd\",\"type\":\"bool\"}],\"name\":\"AlerterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newOperator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isAdd\",\"type\":\"bool\"}],\"name\":\"OperatorAdded\",\"type\":\"event\"}]","ContractName":"MonitorHelper","CompilerVersion":"v0.5.9+commit.e560f70d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000031e362e551ab823daa944963a5b9527549e3d9ab000000000000000000000000c14f34233071543e979f6a79aa272b0ab1b4947d","Library":"","SwarmSource":"bzzr://ac9fb0bcb9feca2c94112e04bf1044704b46959c89283b1c3f6ce234c131e549"}]}