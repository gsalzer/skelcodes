{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\n\n\nlibrary SafeMath {\n    \n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    \n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    \n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        \n        \n        \n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    \n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        \n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        \n\n        return c;\n    }\n\n    \n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n}\n\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    \n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    \n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    \n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    \n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    \n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    \n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    \n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ninterface IManager {\n \n    event SRC20SupplyMinted(address src20, address swmAccount, uint256 swmValue, uint256 src20Value);\n    event SRC20StakeIncreased(address src20, address swmAccount, uint256 swmValue);\n    event SRC20StakeDecreased(address src20, address swmAccount, uint256 swmValue);\n\n    function mintSupply(address src20, address swmAccount, uint256 swmValue, uint256 src20Value) external returns (bool);\n    function increaseSupply(address src20, address swmAccount, uint256 srcValue) external returns (bool);\n    function decreaseSupply(address src20, address swmAccount, uint256 srcValue) external returns (bool);\n    function renounceManagement(address src20) external returns (bool);\n    function transferManagement(address src20, address newManager) external returns (bool);\n    function calcTokens(address src20, uint256 swmValue) external view returns (uint256);\n\n    function getStake(address src20) external view returns (uint256);\n    function swmNeeded(address src20, uint256 srcValue) external view returns (uint256);\n    function getSrc20toSwmRatio(address src20) external returns (uint256);\n    function getTokenOwner(address src20) external view returns (address);\n}\n\ninterface INetAssetValueUSD {\n\n    function getNetAssetValueUSD(address src20) external view returns (uint256);\n}\n\ninterface IPriceUSD {\n\n    function getPrice() external view returns (uint256 numerator, uint256 denominator);\n\n}\n\ncontract GetRateMinter {\n    IManager public _registry;\n    INetAssetValueUSD public _asset;\n    IPriceUSD public _SWMPriceOracle;\n\n    using SafeMath for uint256;\n\n    constructor(address registry, address asset, address SWMRate) public {\n        _registry = IManager(registry);\n        _asset = INetAssetValueUSD(asset);\n        _SWMPriceOracle = IPriceUSD(SWMRate);\n    }\n\n    modifier onlyTokenOwner(address src20) {\n        require(msg.sender == Ownable(src20).owner(), \"caller not token owner\");\n        _;\n    }\n\n    \n    function calcStake(uint256 netAssetValueUSD) public view returns (uint256) {\n\n        uint256 NAV = netAssetValueUSD; \n        uint256 stakeUSD;\n\n        if(NAV >= 0 && NAV <= 500000) \n            stakeUSD = 2500;\n\n        if(NAV > 500000 && NAV <= 1000000) \n            stakeUSD = NAV.mul(5).div(1000);\n\n        if(NAV > 1000000 && NAV <= 5000000) \n            stakeUSD = NAV.mul(45).div(10000);\n\n        if(NAV > 5000000 && NAV <= 15000000) \n            stakeUSD = NAV.mul(4).div(1000);\n\n        if(NAV > 15000000 && NAV <= 50000000) \n            stakeUSD = NAV.mul(25).div(10000);\n\n        if(NAV > 50000000 && NAV <= 100000000) \n            stakeUSD = NAV.mul(2).div(1000);\n\n        if(NAV > 100000000 && NAV <= 150000000) \n            stakeUSD = NAV.mul(15).div(10000);\n\n        if(NAV > 150000000) \n            stakeUSD = NAV.mul(1).div(1000);\n\n        (uint256 numerator, uint denominator) = _SWMPriceOracle.getPrice(); \n\n        return stakeUSD.mul(denominator).div(numerator).mul(10**18); \n\n    } \n\n    \n    function stakeAndMint(address src20, uint256 numSRC20Tokens)\n        external\n        onlyTokenOwner(src20)\n        returns (bool)\n    {\n        uint256 numSWMTokens = calcStake(_asset.getNetAssetValueUSD(src20));\n\n        require(_registry.mintSupply(src20, msg.sender, numSWMTokens, numSRC20Tokens), 'supply minting failed');\n\n        return true;\n    }\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"netAssetValueUSD\",\"type\":\"uint256\"}],\"name\":\"calcStake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_SWMPriceOracle\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_registry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"src20\",\"type\":\"address\"},{\"name\":\"numSRC20Tokens\",\"type\":\"uint256\"}],\"name\":\"stakeAndMint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_asset\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"registry\",\"type\":\"address\"},{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"SWMRate\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"GetRateMinter","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000a79958571d55749898292f09366ce2b7c2f89b7400000000000000000000000030b32447137dddf089b327085d2026eaf2eaf65a0000000000000000000000008ba1bd3b0fb27006bad08229e2e168c882a606e6","Library":"","LicenseType":"","SwarmSource":"bzzr://8f563805fa973df45d004fbc2a07f6ccb92693f66eddde2e78abfcfdc83760c6"}]}