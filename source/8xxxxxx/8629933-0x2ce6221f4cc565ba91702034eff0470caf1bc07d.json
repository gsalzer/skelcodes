{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/Roles.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/membership/ManagerRole.sol\r\n\r\n/**\r\n * @title Manager Role\r\n * @dev This contract is developed based on the Manager contract of OpenZeppelin.\r\n * The key difference is the management of the manager roles is restricted to one owner\r\n * account. At least one manager should exist in any situation.\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_5\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract ManagerRole is Ownable {\r\n    using Roles for Roles.Role;\r\n    using SafeMath for uint256;\r\n\r\n    event ManagerAdded(address indexed account);\r\n    event ManagerRemoved(address indexed account);\r\n\r\n    Roles.Role private managers;\r\n    uint256 private _numManager;\r\n\r\n    constructor() internal {\r\n        _addManager(msg.sender);\r\n        _numManager = 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager can take action\r\n     */\r\n    modifier onlyManager() {\r\n        require(isManager(msg.sender), \"The account is not a manager\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice This function allows to add managers in batch with control of the number of \r\n     * interations\r\n     * @param accounts The accounts to be added in batch\r\n     */\r\n    // solhint-disable-next-line\r\n    function addManagers(address[] calldata accounts) external onlyOwner {\r\n        uint256 length = accounts.length;\r\n        require(length <= 256, \"too many accounts\");\r\n        for (uint256 i = 0; i < length; i++) {\r\n            _addManager(accounts[i]);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @notice Add an account to the list of managers,\r\n     * @param account The account address whose manager role needs to be removed.\r\n     */\r\n    function removeManager(address account) external onlyOwner {\r\n        _removeManager(account);\r\n    }\r\n\r\n    /**\r\n     * @notice Check if an account is a manager\r\n     * @param account The account to be checked if it has a manager role\r\n     * @return true if the account is a manager. Otherwise, false\r\n     */\r\n    function isManager(address account) public view returns (bool) {\r\n        return managers.has(account);\r\n    }\r\n\r\n    /**\r\n     *@notice Get the number of the current managers\r\n     */\r\n    function numManager() public view returns (uint256) {\r\n        return _numManager;\r\n    }\r\n\r\n    /**\r\n     * @notice Add an account to the list of managers,\r\n     * @param account The account that needs to tbe added as a manager\r\n     */\r\n    function addManager(address account) public onlyOwner {\r\n        require(account != address(0), \"account is zero\");\r\n        _addManager(account);\r\n    }\r\n\r\n    /**\r\n     * @notice Renounce the manager role\r\n     * @dev This function was not explicitly required in the specs. There should be at\r\n     * least one manager at any time. Therefore, at least two when one manage renounces\r\n     * themselves.\r\n     */\r\n    function renounceManager() public {\r\n        require(_numManager >= 2, \"Managers are fewer than 2\");\r\n        _removeManager(msg.sender);\r\n    }\r\n\r\n    /** OVERRIDE \r\n    * @notice Allows the current owner to relinquish control of the contract.\r\n    * @dev Renouncing to ownership will leave the contract without an owner.\r\n    * It will not be possible to call the functions with the `onlyOwner`\r\n    * modifier anymore.\r\n    */\r\n    function renounceOwnership() public onlyOwner {\r\n        revert(\"Cannot renounce ownership\");\r\n    }\r\n\r\n    /**\r\n     * @notice Internal function to be called when adding a manager\r\n     * @param account The address of the manager-to-be\r\n     */\r\n    function _addManager(address account) internal {\r\n        _numManager = _numManager.add(1);\r\n        managers.add(account);\r\n        emit ManagerAdded(account);\r\n    }\r\n\r\n    /**\r\n     * @notice Internal function to remove one account from the manager list\r\n     * @param account The address of the to-be-removed manager\r\n     */\r\n    function _removeManager(address account) internal {\r\n        _numManager = _numManager.sub(1);\r\n        managers.remove(account);\r\n        emit ManagerRemoved(account);\r\n    }\r\n}\r\n\r\n// File: contracts/membership/PausableManager.sol\r\n\r\n/**\r\n * @title Pausable Manager Role\r\n * @dev This manager can also pause a contract. This contract is developed based on the \r\n * Pause contract of OpenZeppelin.\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_5\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract PausableManager is ManagerRole {\r\n\r\n    event BePaused(address manager);\r\n    event BeUnpaused(address manager);\r\n\r\n    bool private _paused;   // If the crowdsale contract is paused, controled by the manager...\r\n\r\n    constructor() internal {\r\n        _paused = false;\r\n    }\r\n\r\n   /**\r\n    * @notice Modifier to make a function callable only when the contract is not paused.\r\n    */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @notice Modifier to make a function callable only when the contract is paused.\r\n    */\r\n    modifier whenPaused() {\r\n        require(_paused, \"paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @return true if the contract is paused, false otherwise.\r\n    */\r\n    function paused() public view returns(bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n    * @notice called by the owner to pause, triggers stopped state\r\n    */\r\n    function pause() public onlyManager whenNotPaused {\r\n        _paused = true;\r\n        emit BePaused(msg.sender);\r\n    }\r\n\r\n    /**\r\n    * @notice called by the owner to unpause, returns to normal state\r\n    */\r\n    function unpause() public onlyManager whenPaused {\r\n        _paused = false;\r\n        emit BeUnpaused(msg.sender);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type,\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * > It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/property/Reclaimable.sol\r\n\r\n/**\r\n * @title Reclaimable\r\n * @dev This contract gives owner right to recover any ERC20 tokens accidentally sent to \r\n * the token contract. The recovered token will be sent to the owner of token. \r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_5\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract Reclaimable is Ownable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    /**\r\n     * @notice Let the owner to retrieve other tokens accidentally sent to this contract.\r\n     * @dev This function is suitable when no token of any kind shall be stored under\r\n     * the address of the inherited contract.\r\n     * @param tokenToBeRecovered address of the token to be recovered.\r\n     */\r\n    function reclaimToken(IERC20 tokenToBeRecovered) external onlyOwner {\r\n        uint256 balance = tokenToBeRecovered.balanceOf(address(this));\r\n        tokenToBeRecovered.safeTransfer(owner(), balance);\r\n    }\r\n}\r\n\r\n// File: contracts/property/CounterGuard.sol\r\n\r\n/**\r\n * @title modifier contract that guards certain properties only triggered once\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_5\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract CounterGuard {\r\n    /**\r\n     * @notice Controle if a boolean attribute (false by default) was updated to true.\r\n     * @dev This attribute is designed specifically for recording an action.\r\n     * @param criterion The boolean attribute that records if an action has taken place\r\n     */\r\n    modifier onlyOnce(bool criterion) {\r\n        require(criterion == false, \"Already been set\");\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts/property/ValidAddress.sol\r\n\r\n/**\r\n * @title modifier contract that checks if the address is valid\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_5\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract ValidAddress {\r\n    /**\r\n     * @notice Check if the address is not zero\r\n     */\r\n    modifier onlyValidAddress(address _address) {\r\n        require(_address != address(0), \"Not a valid address\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Check if the address is not the sender's address\r\n    */\r\n    modifier isSenderNot(address _address) {\r\n        require(_address != msg.sender, \"Address is the same as the sender\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Check if the address is the sender's address\r\n    */\r\n    modifier isSender(address _address) {\r\n        require(_address == msg.sender, \"Address is different from the sender\");\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts/vault/IVault.sol\r\n\r\n/*\r\n * @title Interface for basic vaults\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_5\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract IVault {\r\n    /**\r\n     * @notice Adding beneficiary to the vault\r\n     * @param beneficiary The account that receives token\r\n     * @param value The amount of token allocated\r\n     */\r\n    function receiveFor(address beneficiary, uint256 value) public;\r\n\r\n    /**\r\n     * @notice Update the releaseTime for vaults\r\n     * @param roundEndTime The new releaseTime\r\n     */\r\n    function updateReleaseTime(uint256 roundEndTime) public;\r\n}\r\n\r\n// File: contracts/vault/BasicVault.sol\r\n\r\n/**\r\n * @title Vault for private sale, presale, and SAFT\r\n * @dev Inspired by the TokenTimelock contract of OpenZeppelin\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_5\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract BasicVault is IVault, Reclaimable, CounterGuard, ValidAddress, PausableManager {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    // ERC20 basic token contract being held\r\n    IERC20 private _token;\r\n    // The following info can only been updated by the crowdsale contract.\r\n    // amount of tokens that each beneficiary deposits into this vault\r\n    mapping(address=>uint256) private _balances;\r\n    // what a vault should contain\r\n    uint256 private _totalBalance;\r\n    // timestamp of the possible update\r\n    uint256 private _updateTime;\r\n    // timestamp when token release is enabled\r\n    uint256 private _releaseTime;\r\n    // if the _releaseTime is effective\r\n    bool private _knownReleaseTime;\r\n    address private _crowdsale;\r\n\r\n    event Received(address indexed owner, uint256 value);\r\n    event Released(address indexed owner, uint256 value);\r\n    event ReleaseTimeUpdated(address indexed account, uint256 updateTime, uint256 releaseTime);\r\n\r\n    /**\r\n     * @notice When timing is correct.\r\n     */\r\n    modifier readyToRelease {\r\n        require(_knownReleaseTime && (block.timestamp >= _releaseTime), \"Not ready to release\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice When timing is correct.\r\n     */\r\n    modifier saleNotEnd {\r\n        require(!_knownReleaseTime || (block.timestamp < _updateTime), \"Cannot modifiy anymore\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Only crowdsale contract could take actions\r\n     */\r\n    modifier onlyCrowdsale {\r\n        require(msg.sender == _crowdsale, \"The caller is not the crowdsale contract\");\r\n        _;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * @notice Create a vault\r\n     * @dev Upon the creation of the contract, the ownership should be transferred to the \r\n     * crowdsale contract.\r\n     * @param token The address of the token contract\r\n     * @param crowdsale The address of the crowdsale contract\r\n     * @param knownWhenToRelease If the release time is known at creation time\r\n     * @param updateTime The timestamp before which information is still updatable in this\r\n     * contract\r\n     * @param releaseTime The timestamp after which investors could claim their belongings.\r\n     */\r\n    /* solhint-disable */\r\n    constructor(\r\n        IERC20 token,\r\n        address crowdsale,\r\n        bool knownWhenToRelease,\r\n        uint256 updateTime,\r\n        uint256 releaseTime\r\n    )\r\n        public\r\n        onlyValidAddress(crowdsale)\r\n        isSenderNot(crowdsale)\r\n    {\r\n        _token = token;\r\n        _crowdsale = crowdsale;\r\n        _knownReleaseTime = knownWhenToRelease;\r\n        _updateTime = updateTime;\r\n        _releaseTime = releaseTime;\r\n    }\r\n    /* solhint-enable */\r\n\r\n    /** OVERRIDE\r\n     * @notice Let token owner to get the other tokens accidentally sent to this token address.\r\n     * @dev This function allows the contract to hold certain amount of IvoToken, of \r\n     * which the token address is defined in the constructor of the contract.\r\n     * @param tokenToBeRecovered address of the token to be recovered.\r\n     */\r\n    function reclaimToken(IERC20 tokenToBeRecovered) external onlyOwner {\r\n        // only if the token is not the IVO token\r\n        uint256 balance = tokenToBeRecovered.balanceOf(address(this));\r\n        if (tokenToBeRecovered == _token) {\r\n            tokenToBeRecovered.safeTransfer(owner(), balance.sub(_totalBalance));\r\n        } else {\r\n            tokenToBeRecovered.safeTransfer(owner(), balance);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Give back the balance of a beneficiary\r\n     * @param beneficiary The address of the beneficiary\r\n     * @return The balance of the beneficiary \r\n     */\r\n    function balanceOf(address beneficiary) public view returns (uint256) {\r\n        return _balances[beneficiary];\r\n    }\r\n\r\n    /**\r\n     * @return the total amount of token being held in this vault\r\n     */\r\n    function totalBalance() public view returns(uint256) {\r\n        return _totalBalance;\r\n    }\r\n\r\n    /**\r\n     * @return the token being held.\r\n     */\r\n    function token() public view returns(IERC20) {\r\n        return _token;\r\n    }\r\n\r\n    /**\r\n     * @return the address of the crowdsale contract.\r\n     */\r\n    function crowdsale() public view returns(address) {\r\n        return _crowdsale;\r\n    }\r\n\r\n    /**\r\n     * @return the time when the tokens are released.\r\n     */\r\n    function releaseTime() public view returns(uint256) {\r\n        return _releaseTime;\r\n    }\r\n\r\n    /**\r\n     * @return the time before when the update is still acceptable.\r\n     */\r\n    function updateTime() public view returns(uint256) {\r\n        return _updateTime;\r\n    }\r\n\r\n    /**\r\n     * @return the if the release time is known.\r\n     */\r\n    function knownReleaseTime() public view returns(bool) {\r\n        return _knownReleaseTime;\r\n    }\r\n\r\n    /**\r\n     * @notice function called by either crowdsale contract or the token minter, depending\r\n     * on the type of the vault.\r\n     * @param beneficiary The actual token owner once it gets released\r\n     * @param value The amount of token associated to the beneficiary\r\n     */\r\n    function receiveFor(address beneficiary, uint256 value)\r\n        public \r\n        saleNotEnd\r\n        onlyManager\r\n    {\r\n        _receiveFor(beneficiary, value);\r\n    }\r\n\r\n    /**\r\n    * @notice Transfers tokens held by the vault to beneficiary.\r\n    */\r\n    function release() public readyToRelease {\r\n        _releaseFor(msg.sender, _balances[msg.sender]);\r\n    }\r\n\r\n    /**\r\n    * @notice Transfers tokens held by the vault to beneficiary, who is differnt from the\r\n    * msg.sender\r\n    * @param account The account address for whom the vault releases the IVO token.\r\n    */\r\n    function releaseFor(address account) public readyToRelease {\r\n        _releaseFor(account, _balances[account]);\r\n    }\r\n\r\n    /**\r\n     * @notice Disable the update release time function\r\n     * @dev By default this functionality is banned, only certain vaults can \r\n     * updateReleaseTime and thus override this function.\r\n     */\r\n     // solhint-disable-next-line\r\n    function updateReleaseTime(uint256 newTime) public {\r\n        revert(\"cannot update release time\");\r\n    }\r\n\r\n    /**\r\n     * @notice The vault receives tokens on behalf of an account\r\n     * @param account The account address\r\n     * @param value The acount received\r\n     */\r\n    function _receiveFor(address account, uint256 value) internal {\r\n        _balances[account] = _balances[account].add(value);\r\n        _totalBalance = _totalBalance.add(value);\r\n        emit Received(account, value);\r\n    }\r\n\r\n     /**\r\n     * @notice The vault releases tokens on behalf of an account\r\n     * @param account The account address\r\n     * @param amount The amount of token to be released\r\n     */\r\n    function _releaseFor(address account, uint256 amount) internal {\r\n        require(amount > 0 && _balances[account] >= amount, \"the account does not have enough amount\");\r\n\r\n        _balances[account] = _balances[account].sub(amount);\r\n        _totalBalance = _totalBalance.sub(amount);\r\n\r\n        _token.safeTransfer(account, amount);\r\n        emit Released(account, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Only updatable when this release time was not set up previously\r\n     * @param newUpdateTime The timestamp before which information is still updatable in this vault\r\n     * @param newReleaseTime The timestamp before which token cannot be retrieved.\r\n     */\r\n    function _updateReleaseTime(uint256 newUpdateTime, uint256 newReleaseTime) \r\n        internal\r\n        onlyOnce(_knownReleaseTime) \r\n    {\r\n        _knownReleaseTime = true;\r\n        _updateTime = newUpdateTime;\r\n        _releaseTime = newReleaseTime;\r\n        emit ReleaseTimeUpdated(msg.sender, newUpdateTime, newReleaseTime);\r\n    }\r\n\r\n    /**\r\n     * @notice Directly transfer the ownership to an address of Invao managing team\r\n     * This owner does not necessarily be the manage of the contract.\r\n     * @param newOwner The address of the new owner of the contract\r\n     */\r\n    function roleSetup(address newOwner) internal {\r\n        _removeManager(msg.sender);\r\n        transferOwnership(newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/crowdsale/IIvoCrowdsale.sol\r\n\r\n/**\r\n * @title Interface of IVO Crowdale\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_5\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract IIvoCrowdsale {\r\n    /**\r\n     * @return The starting time of the crowdsale.\r\n     */\r\n    function startingTime() public view returns(uint256);\r\n}\r\n\r\n// File: contracts/vault/SaftVault.sol\r\n\r\n/**\r\n * @title SAFT Vault\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_5\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract SaftVault is BasicVault {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    /*** PRE-DEPLOYMENT CONFIGURED CONSTANTS */\r\n    uint256 private constant ALLOCATION = 22500000 ether;\r\n    uint256 private constant RELEASE_PERIOD = 180 days; // 180 days after the starting time of the crowdsale;\r\n\r\n    /**\r\n     * @notice Create the SAFT vault\r\n     * @dev Upon the creation of the contract.\r\n     * @param token The address of the token contract\r\n     * @param crowdsale The address of the crowdsale contract\r\n     * @param updateTime The timestamp before which information is still updatable in this\r\n     * contract\r\n     * @param newOwner The address of the new owner of this contract.\r\n     */\r\n    /* solhint-disable */\r\n    constructor(\r\n        IERC20 token,\r\n        address crowdsale,\r\n        uint256 updateTime,\r\n        address newOwner\r\n    )\r\n        public\r\n        BasicVault(token, crowdsale, true, updateTime, updateTime.add(RELEASE_PERIOD))\r\n    {\r\n        require(updateTime == IIvoCrowdsale(crowdsale).startingTime(), \"Update time not correct\");\r\n        roleSetup(newOwner);\r\n    }\r\n    /* solhint-enable */\r\n\r\n    /**\r\n     * @notice Check if the maximum allocation has been reached\r\n     * @dev Revert if the allocated amount has been reached/exceeded\r\n     * @param additional The amount of token to be added.\r\n     */\r\n    modifier capNotReached(uint256 additional) {\r\n        require(totalBalance().add(additional) <= ALLOCATION, \"exceed the maximum allocation\");\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @notice Add SAFT investors in batch.\r\n     * @param amounts Amounts of token purchased\r\n     * @param beneficiaries Recipients of the token purchase\r\n     */\r\n    // solhint-disable-next-line\r\n    function batchReceiveFor(address[] calldata beneficiaries, uint256[] calldata amounts)\r\n        external\r\n    {\r\n        uint256 length = amounts.length;\r\n        require(beneficiaries.length == length, \"length !=\");\r\n        require(length <= 256, \"To long, please consider shorten the array\");\r\n        for (uint256 i = 0; i < length; i++) {\r\n            receiveFor(beneficiaries[i], amounts[i]);\r\n        }\r\n    }\r\n\r\n    /** OVERRIDE\r\n     * @notice Let token owner to get the other tokens accidentally sent to this token address.\r\n     * @dev Before it reaches the release time, the vault can keep the allocated amount of \r\n     * tokens. Since INVAO managers could still add SAFT investors during the SEED-ROUND,\r\n     * the allocated amount of tokens stays in the SAFT vault during that period. Once the\r\n     * SEED round ends, this vault can only hold max. totalBalance.\r\n     * @param tokenToBeRecovered address of the token to be recovered.\r\n     */\r\n    function reclaimToken(IERC20 tokenToBeRecovered) external onlyOwner {\r\n        // only if the token is not the IVO token\r\n        uint256 balance = tokenToBeRecovered.balanceOf(address(this));\r\n        if (tokenToBeRecovered == this.token()) {\r\n            if (block.timestamp <= this.releaseTime()) {\r\n                tokenToBeRecovered.safeTransfer(owner(), balance.sub(ALLOCATION));\r\n            } else {\r\n                tokenToBeRecovered.safeTransfer(owner(), balance.sub(this.totalBalance()));\r\n            }\r\n        } else {\r\n            tokenToBeRecovered.safeTransfer(owner(), balance);\r\n        }\r\n    }\r\n\r\n    /** OVERRIDE\r\n     * @notice Managers can add SAFT investors' info to the SAFT vault before the SEED-ROUND\r\n     * sale ends (a.k.a the start of the crowdsale)\r\n     * @param beneficiary The actual token owner once it gets released\r\n     * @param value The amount of token associated to the beneficiary\r\n     */\r\n    function receiveFor(address beneficiary, uint256 value)\r\n        public \r\n        capNotReached(value)\r\n    {\r\n        require((block.timestamp < this.releaseTime()), \"Cannot modifiy anymore\");\r\n        super.receiveFor(beneficiary, value);\r\n    }\r\n\r\n    /**\r\n     * @notice Directly transfer the ownership to an address of Invao managing team\r\n     * @dev This new owner is also the manage of the contract.\r\n     * @param newOwner The address of the new owner\r\n     */\r\n    function roleSetup(address newOwner) internal {\r\n        addManager(newOwner);\r\n        super.roleSetup(newOwner);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenToBeRecovered\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numManager\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"knownReleaseTime\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"updateReleaseTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"addManagers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"receiveFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsale\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"updateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"beneficiaries\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchReceiveFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"releaseFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"crowdsale\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"updateTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updateTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"name\":\"ReleaseTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"BePaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"BeUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ManagerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ManagerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SaftVault","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e03df9fda489a405f5db8a919adbc9a1b931a19f00000000000000000000000008d528d69036ce6332630d2a8f52046d1fb4436a000000000000000000000000000000000000000000000000000000005d8e07d0000000000000000000000000532dfbe878a82a3ff794abd0b61230cdc350db2d","Library":"","LicenseType":"GNU LGPLv3","SwarmSource":"bzzr://5fbcee6be6f8476c4377aab6925f4ee1fb8341f7fc9da8a969fa4516fe8150e6"}]}