{"status":"1","message":"OK","result":[{"SourceCode":"//www.structuredeth.com/gift\r\n\r\npragma solidity ^0.4.26;\r\n\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract GiftOfCompoundRegistry {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    uint256 totalGifted;\r\n    mapping (address=>uint256) addresses;\r\n\r\n   \r\n    \r\n    //if smeone sends eth to this contract, throw it because it will just end up getting locked forever\r\n    function() payable {\r\n        throw;\r\n    }\r\n    \r\n    function addGift(address contractAddress, uint256 initialAmount){\r\n        totalGifted = totalGifted.add(initialAmount);\r\n        addresses[contractAddress] = initialAmount;\r\n        \r\n    }\r\n    function totalGiftedAmount()  constant returns (uint256){\r\n        return totalGifted;\r\n    }\r\n    function giftGiven(address theAddress)  constant returns (uint256){\r\n        return addresses[theAddress];\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n\r\n    constructor() public {\r\n        \r\n       \r\n        \r\n    }\r\n    \r\n   \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalGiftedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"theAddress\",\"type\":\"address\"}],\"name\":\"giftGiven\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddress\",\"type\":\"address\"},{\"name\":\"initialAmount\",\"type\":\"uint256\"}],\"name\":\"addGift\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"GiftOfCompoundRegistry","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://291896a3433ba41bf9f14ad9ba80a83e8bf9a455703f844f7df0aa8a550d6304"}]}