{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.11;\r\n\r\n\r\n/**\r\n * @title Sale contract interface\r\n * @notice This interface declares functions of Sale contract deployed at 0x9C666C69595c278063278a604FF12c70691AB234 address\r\n */\r\ninterface ISale {\r\n    function updateRate(uint256 newRate) external;\r\n    function withdraw() external;\r\n    function withdraw(address payable to) external;\r\n    function transferOwnership(address _owner) external;\r\n    function futureRate() external view returns (uint256, uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title Rate updater for Sale contract\r\n * @author SmartDec\r\n * @notice This contract adds updater role for calling Sale contract's updateRate() function\r\n */\r\ncontract Updater {\r\n\r\n    ISale public sale;\r\n    address public updater;\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event ChangedUpdater(address indexed previousUpdater, address indexed newUpdater);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyUpdater() {\r\n        require(msg.sender == updater, \"This function is callable only by updater\");\r\n        _;\r\n    }\r\n\r\n    constructor(ISale _sale, address _updater) public {\r\n        require(address(_sale) != address(0), \"Invalid _sale address\");\r\n        require(_updater != address(0), \"Invalid _updater address\");\r\n\r\n        sale = _sale;\r\n        updater = _updater;\r\n        owner = msg.sender;\r\n\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraws Ether from Sale contract to `msg.sender` address\r\n     */\r\n    function withdraw() external onlyOwner {\r\n        sale.withdraw(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraws Ether from Sale contract to `to` address\r\n     * @param to withdrawn Ether receiver\r\n     */\r\n    function withdraw(address payable to) external onlyOwner {\r\n        sale.withdraw(to);\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers Sale contract ownership from this contract\r\n     * @param newSaleOwner new owner address\r\n     */\r\n    function transferSaleOwnership(address newSaleOwner) external onlyOwner {\r\n        require(newSaleOwner != address(0));\r\n\r\n        sale.transferOwnership(newSaleOwner);\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers THIS contract ownership to the desired address\r\n     * @param _owner new owner address\r\n     */\r\n    function transferOwnership(address _owner) external onlyOwner {\r\n        require(_owner != address(0));\r\n\r\n        emit OwnershipTransferred(owner, _owner);\r\n\r\n        owner = _owner;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers updater role\r\n     * @param _updater new updater address\r\n     */\r\n    function changeUpdater(address _updater) external onlyOwner {\r\n        require(_updater != address(0), \"Invalid _updater address\");\r\n\r\n        emit ChangedUpdater(updater, _updater);\r\n\r\n        updater = _updater;\r\n    }\r\n\r\n    /**\r\n     * @notice Changes rate in Sale contract, callable only by owner\r\n     * @param newRate new rate set in Sale contract\r\n     */\r\n    function updateRateByOwner(uint256 newRate) external onlyOwner {\r\n        sale.updateRate(newRate);\r\n    }\r\n\r\n    /**\r\n     * @notice Changes rate in Sale contract, callable only by updater\r\n     * @notice New rate cannot be more than 1% higher than previous one\r\n     * @param newRate new rate set in Sale contract\r\n     */\r\n    function updateRateByUpdater(uint256 newRate) external onlyUpdater {\r\n        (uint256 rate, uint256 timePriorToApply) = sale.futureRate();\r\n        require(timePriorToApply == 0, \"New rate hasn't been applied yet\");\r\n        uint256 newRateMultiplied = newRate * 100;\r\n        require(newRateMultiplied / 100 == newRate, \"Integer overflow\");\r\n        // No need to check previous rate for overflow as newRate is checked\r\n        // uint256 rateMultiplied = rate * 100;\r\n        // require(rateMultiplied / 100 == rate, \"Integer overflow\");\r\n        require(newRate * 99 <= rate * 100, \"New rate is too high\");\r\n\r\n        sale.updateRate(newRate);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"updateRateByOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_updater\",\"type\":\"address\"}],\"name\":\"changeUpdater\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sale\",\"outputs\":[{\"internalType\":\"contract ISale\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSaleOwner\",\"type\":\"address\"}],\"name\":\"transferSaleOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"updater\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"updateRateByUpdater\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISale\",\"name\":\"_sale\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_updater\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousUpdater\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newUpdater\",\"type\":\"address\"}],\"name\":\"ChangedUpdater\",\"type\":\"event\"}]","ContractName":"Updater","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009c666c69595c278063278a604ff12c70691ab234000000000000000000000000055f7a466a3a14973e4852a9cd1aa906c4604710","Library":"","LicenseType":"None","SwarmSource":"bzzr://c714278141d8e51c9b7bb95b5a217d56c23aa9e04841d0dd74c3fab9b2bb7193"}]}