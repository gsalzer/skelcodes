{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/thirdparty/Cloneable.sol\r\n\r\n// This code is taken from https://gist.github.com/holiman/069de8d056a531575d2b786df3345665\r\n\r\npragma solidity ^0.5.11;\r\n\r\n\r\nlibrary Cloneable {\r\n    function clone(address a)\r\n        external\r\n        returns (address)\r\n    {\r\n\r\n    /*\r\n    Assembly of the code that we want to use as init-code in the new contract,\r\n    along with stack values:\r\n                    # bottom [ STACK ] top\r\n     PUSH1 00       # [ 0 ]\r\n     DUP1           # [ 0, 0 ]\r\n     PUSH20\r\n     <address>      # [0,0, address]\r\n     DUP1           # [0,0, address ,address]\r\n     EXTCODESIZE    # [0,0, address, size ]\r\n     DUP1           # [0,0, address, size, size]\r\n     SWAP4          # [ size, 0, address, size, 0]\r\n     DUP1           # [ size, 0, address ,size, 0,0]\r\n     SWAP2          # [ size, 0, address, 0, 0, size]\r\n     SWAP3          # [ size, 0, size, 0, 0, address]\r\n     EXTCODECOPY    # [ size, 0]\r\n     RETURN\r\n\r\n    The code above weighs in at 33 bytes, which is _just_ above fitting into a uint.\r\n    So a modified version is used, where the initial PUSH1 00 is replaced by `PC`.\r\n    This is one byte smaller, and also a bit cheaper Wbase instead of Wverylow. It only costs 2 gas.\r\n\r\n     PC             # [ 0 ]\r\n     DUP1           # [ 0, 0 ]\r\n     PUSH20\r\n     <address>      # [0,0, address]\r\n     DUP1           # [0,0, address ,address]\r\n     EXTCODESIZE    # [0,0, address, size ]\r\n     DUP1           # [0,0, address, size, size]\r\n     SWAP4          # [ size, 0, address, size, 0]\r\n     DUP1           # [ size, 0, address ,size, 0,0]\r\n     SWAP2          # [ size, 0, address, 0, 0, size]\r\n     SWAP3          # [ size, 0, size, 0, 0, address]\r\n     EXTCODECOPY    # [ size, 0]\r\n     RETURN\r\n\r\n    The opcodes are:\r\n    58 80 73 <address> 80 3b 80 93 80 91 92 3c F3\r\n    We get <address> in there by OR:ing the upshifted address into the 0-filled space.\r\n      5880730000000000000000000000000000000000000000803b80938091923cF3\r\n     +000000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx000000000000000000\r\n     -----------------------------------------------------------------\r\n      588073xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx00000803b80938091923cF3\r\n\r\n    This is simply stored at memory position 0, and create is invoked.\r\n    */\r\n        address retval;\r\n        assembly{\r\n            mstore(0x0, or (0x5880730000000000000000000000000000000000000000803b80938091923cF3 ,mul(a,0x1000000000000000000)))\r\n            retval := create(0,0, 32)\r\n        }\r\n        return retval;\r\n    }\r\n}\r\n\r\n// File: contracts/lib/Ownable.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\npragma solidity ^0.5.11;\r\n\r\n\r\n/// @title Ownable\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\n/// @dev The Ownable contract has an owner address, and provides basic\r\n///      authorization control functions, this simplifies the implementation of\r\n///      \"user permissions\".\r\ncontract Ownable\r\n{\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /// @dev The Ownable constructor sets the original `owner` of the contract\r\n    ///      to the sender.\r\n    constructor()\r\n        public\r\n    {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /// @dev Throws if called by any account other than the owner.\r\n    modifier onlyOwner()\r\n    {\r\n        require(msg.sender == owner, \"UNAUTHORIZED\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Allows the current owner to transfer control of the contract to a\r\n    ///      new owner.\r\n    /// @param newOwner The address to transfer ownership to.\r\n    function transferOwnership(\r\n        address newOwner\r\n        )\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(newOwner != address(0), \"ZERO_ADDRESS\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    function renounceOwnership()\r\n        public\r\n        onlyOwner\r\n    {\r\n        emit OwnershipTransferred(owner, address(0));\r\n        owner = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/lib/Claimable.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\npragma solidity ^0.5.11;\r\n\r\n\r\n\r\n/// @title Claimable\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\n/// @dev Extension for the Ownable contract, where the ownership needs\r\n///      to be claimed. This allows the new owner to accept the transfer.\r\ncontract Claimable is Ownable\r\n{\r\n    address public pendingOwner;\r\n\r\n    /// @dev Modifier throws if called by any account other than the pendingOwner.\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == pendingOwner, \"UNAUTHORIZED\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Allows the current owner to set the pendingOwner address.\r\n    /// @param newOwner The address to transfer ownership to.\r\n    function transferOwnership(\r\n        address newOwner\r\n        )\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(newOwner != address(0) && newOwner != owner, \"INVALID_ADDRESS\");\r\n        pendingOwner = newOwner;\r\n    }\r\n\r\n    /// @dev Allows the pendingOwner address to finalize the transfer.\r\n    function claimOwnership()\r\n        public\r\n        onlyPendingOwner\r\n    {\r\n        emit OwnershipTransferred(owner, pendingOwner);\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/lib/ReentrancyGuard.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\npragma solidity ^0.5.11;\r\n\r\n\r\n/// @title ReentrancyGuard\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\n/// @dev Exposes a modifier that guards a function against reentrancy\r\n///      Changing the value of the same storage value multiple times in a transaction\r\n///      is cheap (starting from Istanbul) so there is no need to minimize\r\n///      the number of times the value is changed\r\ncontract ReentrancyGuard\r\n{\r\n    //The default value must be 0 in order to work behind a proxy.\r\n    uint private _guardValue;\r\n\r\n    // Use this modifier on a function to prevent reentrancy\r\n    modifier nonReentrant()\r\n    {\r\n        // Check if the guard value has its original value\r\n        require(_guardValue == 0, \"REENTRANCY\");\r\n\r\n        // Set the value to something else\r\n        _guardValue = 1;\r\n\r\n        // Function body\r\n        _;\r\n\r\n        // Set the value back\r\n        _guardValue = 0;\r\n    }\r\n}\r\n\r\n// File: contracts/iface/IExchange.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\npragma solidity ^0.5.11;\r\n\r\n\r\n\r\n\r\n\r\n/// @title IExchange\r\n/// @author Daniel Wang  - <daniel@loopring.org>\r\ncontract IExchange is Claimable, ReentrancyGuard\r\n{\r\n    string constant public version = \"\"; // must override this\r\n\r\n    event Cloned (address indexed clone);\r\n\r\n    /// @dev Clones an exchange without any initialization\r\n    /// @return cloneAddress The address of the new exchange.\r\n    function clone()\r\n        external\r\n        nonReentrant\r\n        returns (address cloneAddress)\r\n    {\r\n        address origin = address(this);\r\n        cloneAddress = Cloneable.clone(origin);\r\n\r\n        assert(cloneAddress != origin);\r\n        assert(cloneAddress != address(0));\r\n\r\n        emit Cloned(cloneAddress);\r\n    }\r\n}\r\n\r\n// File: contracts/iface/ILoopring.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\npragma solidity ^0.5.11;\r\n\r\n\r\n\r\n\r\n/// @title ILoopring\r\n/// @author Daniel Wang  - <daniel@loopring.org>\r\ncontract ILoopring is Claimable, ReentrancyGuard\r\n{\r\n    string  constant public version = \"\"; // must override this\r\n\r\n    uint    public exchangeCreationCostLRC;\r\n    address public universalRegistry;\r\n    address public lrcAddress;\r\n\r\n    event ExchangeInitialized(\r\n        uint    indexed exchangeId,\r\n        address indexed exchangeAddress,\r\n        address indexed owner,\r\n        address         operator,\r\n        bool            onchainDataAvailability\r\n    );\r\n\r\n    /// @dev Initializes and registers an exchange.\r\n    ///      This function should only be callable by the UniversalRegistry contract.\r\n    ///      Also note that this function can only be called once per exchange instance.\r\n    /// @param  exchangeAddress The address of the exchange to initialize and register.\r\n    /// @param  exchangeId The unique exchange id.\r\n    /// @param  owner The owner of the exchange.\r\n    /// @param  operator The operator of the exchange.\r\n    /// @param  onchainDataAvailability True if \"Data Availability\" is turned on for this\r\n    ///         exchange. Note that this value can not be changed once the exchange is initialized.\r\n    /// @return exchangeId The id of the exchange.\r\n    function initializeExchange(\r\n        address exchangeAddress,\r\n        uint    exchangeId,\r\n        address owner,\r\n        address payable operator,\r\n        bool    onchainDataAvailability\r\n        )\r\n        external;\r\n}\r\n\r\n// File: contracts/iface/IImplementationManager.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\npragma solidity ^0.5.11;\r\n\r\n\r\n\r\n\r\n/// @title IImplementationManager\r\n/// @dev This contract manages implementation versions for a specific ILoopring\r\n///      contract. The ILoopring contract can be considered as the \"major\" version\r\n///      of a Loopring protocol and each IExchange implementation can be considered\r\n///      as a \"minor\" version. Multiple IExchange contracts can use the same\r\n///      ILoopring contracts.\r\n///\r\n/// @author Daniel Wang  - <daniel@loopring.org>\r\ncontract IImplementationManager is Claimable, ReentrancyGuard\r\n{\r\n    /// === Events ===\r\n\r\n    event DefaultChanged (\r\n        address indexed oldDefault,\r\n        address indexed newDefault\r\n    );\r\n\r\n    event Registered (\r\n        address indexed implementation,\r\n        string          version\r\n    );\r\n\r\n    event Enabled (\r\n        address indexed implementation\r\n    );\r\n\r\n    event Disabled (\r\n        address indexed implementation\r\n    );\r\n\r\n    /// === Data ===\r\n\r\n    address   public protocol;\r\n    address   public defaultImpl;\r\n    address[] public implementations;\r\n\r\n    // version strings => IExchange addresses\r\n    mapping (string => address) public versionMap;\r\n\r\n    /// === Functions ===\r\n\r\n    /// @dev Registers a new implementation.\r\n    /// @param implementation The implemenation to add.\r\n    function register(\r\n        address implementation\r\n        )\r\n        external;\r\n\r\n    /// @dev Sets the default implemenation.\r\n    /// @param implementation The new default implementation.\r\n    function setDefault(\r\n        address implementation\r\n        )\r\n        external;\r\n\r\n    /// @dev Enables an implemenation.\r\n    /// @param implementation The implementation to be enabled.\r\n    function enable(\r\n        address implementation\r\n        )\r\n        external;\r\n\r\n    /// @dev Disables an implemenation.\r\n    /// @param implementation The implementation to be disabled.\r\n    function disable(\r\n        address implementation\r\n        )\r\n        external;\r\n\r\n    /// @dev Returns version information.\r\n    /// @return protocolVersion The protocol's version.\r\n    /// @return defaultImplVersion The default implementation's version.\r\n    function version()\r\n        public\r\n        view\r\n        returns (\r\n            string  memory protocolVersion,\r\n            string  memory defaultImplVersion\r\n        );\r\n\r\n    /// @dev Returns the latest implemenation added.\r\n    /// @param implementation The latest implemenation added.\r\n    function latest()\r\n        public\r\n        view\r\n        returns (address implementation);\r\n\r\n    /// @dev Returns if an implementation has been registered.\r\n    /// @param registered True if the implementation is registered.\r\n    function isRegistered(\r\n        address implementation\r\n        )\r\n        public\r\n        view\r\n        returns (bool registered);\r\n\r\n    /// @dev Returns if an implementation has been registered and enabled.\r\n    /// @param enabled True if the implementation is registered and enabled.\r\n    function isEnabled(\r\n        address implementation\r\n        )\r\n        public\r\n        view\r\n        returns (bool enabled);\r\n}\r\n\r\n// File: contracts/impl/ImplementationManager.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\npragma solidity ^0.5.11;\r\n\r\n\r\n\r\n\r\n\r\n/// @title An Implementation of IImplementationManager.\r\n/// @author Daniel Wang  - <daniel@loopring.org>\r\ncontract ImplementationManager is IImplementationManager\r\n{\r\n    struct Status\r\n    {\r\n        bool registered;\r\n        bool enabled;\r\n    }\r\n\r\n    // IExchange addresses => Status\r\n    mapping (address => Status) private statusMap;\r\n\r\n    constructor(\r\n        address _owner,\r\n        address _protocol,\r\n        address _implementation\r\n        )\r\n        public\r\n    {\r\n        require(_owner != address(0), \"ZERO_ADDRESS\");\r\n        require(_protocol != address(0), \"ZERO_PROTOCOL\");\r\n\r\n        owner = _owner;\r\n        protocol = _protocol;\r\n        defaultImpl = _implementation;\r\n\r\n        registerInternal(_implementation);\r\n    }\r\n\r\n    /// === Functions ===\r\n\r\n    function register(\r\n        address implementation\r\n        )\r\n        external\r\n        nonReentrant\r\n        onlyOwner\r\n    {\r\n        registerInternal(implementation);\r\n    }\r\n\r\n    function setDefault(\r\n        address implementation\r\n        )\r\n        external\r\n        nonReentrant\r\n        onlyOwner\r\n    {\r\n        require(implementation != defaultImpl, \"SAME_IMPLEMENTATION\");\r\n        require(isEnabled(implementation), \"INVALID_IMPLEMENTATION\");\r\n\r\n        address oldDefault = defaultImpl;\r\n        defaultImpl = implementation;\r\n\r\n        emit DefaultChanged(\r\n            oldDefault,\r\n            implementation\r\n        );\r\n    }\r\n\r\n    function enable(\r\n        address implementation\r\n        )\r\n        external\r\n        nonReentrant\r\n        onlyOwner\r\n    {\r\n        Status storage status = statusMap[implementation];\r\n        require(status.registered && !status.enabled, \"INVALID_IMPLEMENTATION\");\r\n\r\n        status.enabled = true;\r\n        emit Enabled(implementation);\r\n    }\r\n\r\n    function disable(\r\n        address implementation\r\n        )\r\n        external\r\n        nonReentrant\r\n        onlyOwner\r\n    {\r\n        require(implementation != defaultImpl, \"FORBIDDEN\");\r\n        require(isEnabled(implementation), \"INVALID_IMPLEMENTATION\");\r\n\r\n        statusMap[implementation].enabled = false;\r\n        emit Disabled(implementation);\r\n    }\r\n\r\n    function version()\r\n        public\r\n        view\r\n        returns (\r\n            string  memory protocolVersion,\r\n            string  memory defaultImplVersion\r\n        )\r\n    {\r\n        protocolVersion = ILoopring(protocol).version();\r\n        defaultImplVersion = IExchange(defaultImpl).version();\r\n    }\r\n\r\n    function latest()\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        return implementations[implementations.length - 1];\r\n    }\r\n\r\n    function isRegistered(\r\n        address implementation\r\n        )\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return statusMap[implementation].registered;\r\n    }\r\n\r\n    function isEnabled(\r\n        address implementation\r\n        )\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return statusMap[implementation].enabled;\r\n    }\r\n\r\n    function registerInternal(\r\n        address implementation\r\n        )\r\n        internal\r\n    {\r\n        require(implementation != address(0), \"INVALID_IMPLEMENTATION\");\r\n\r\n        string memory _version = IExchange(implementation).version();\r\n        require(bytes(_version).length >= 3, \"INVALID_VERSION\");\r\n        require(versionMap[_version] == address(0), \"VERSION_USED\");\r\n        require(!statusMap[implementation].registered, \"ALREADY_REGISTERED\");\r\n\r\n        implementations.push(implementation);\r\n        statusMap[implementation] = Status(true, true);\r\n        versionMap[_version] = implementation;\r\n\r\n        emit Registered(implementation, _version);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"latest\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"protocolVersion\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"defaultImplVersion\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"enable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultImpl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"implementations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"protocol\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"isEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"disable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"setDefault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"versionMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protocol\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldDefault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDefault\",\"type\":\"address\"}],\"name\":\"DefaultChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Enabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Disabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ImplementationManager","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004374d3d032b3c96785094ec9f384f070777927680000000000000000000000008745074248634f37327ee748137c8b31238002c7000000000000000000000000c2d1e8fb0c10810bb888231e7b85118042846105","Library":"","LicenseType":"None","SwarmSource":"bzzr://ebe8f498a2a9a6d5143737847f60a44a37e4e4722213694801d5a3021cf87aec"}]}