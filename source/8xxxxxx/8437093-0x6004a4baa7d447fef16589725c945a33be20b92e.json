{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.11;\r\n\r\n/*\r\n................&..,&&&&&&.......%&&&%..........&....................\r\n................#&&&&&...&&&&&&&&&&&&&&&&&&&&&.......................\r\n..............&&&&&..&&&&&&&&&&&&&&&&&&&&&&&&&&&&&...................\r\n..........%.&&&&&.&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&................\r\n..........&&&&&.&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&..............\r\n.........&&&&.&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&............\r\n........&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&..........\r\n.......&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&.........\r\n......&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&........\r\n.....&&&&&&&&&&&&&&&&&&&&(&&&&&&&&&&&&&&&&&/&&&&&&&&&&&&&&&&&&.......\r\n....#&&&&&&&&&&&&&&,&&&&&&&.&&&&&&&&&&&&&.&&&&&&&(.&&&&&&&&&&&&......\r\n....&&&&&&&&&&&&&&&&&.&&&&&&&..&&&&&&&..&&&&&&&*...&&&&&&&&&&&&&.....\r\n....&&&&&&&&&&&&&&&&&&&/#&&&&&&&..&..&&&&&&&&......&&&&&&&&&&&&&.....\r\n....&&&&&&&&&&&&&&.&&&&&&&.&&&&&&&.&&&&&&&%.......&&&&&&&&&&&&&&&....\r\n...*&&&&&&&&&&&&&&&&.%&&&&&&.(&&&&&&&&&&........&&&&&&&&&&&&&&&&&....\r\n....&&&&&&&&&&&&&&&&&&.*&&&&&&&.&&&&&%.......,&&&&&&&&&&&&&&&&&&&....\r\n....&&&&&&&&&&&&&&&&&&&&..&&&&&&&.(........#&&&&&&&&&&&&&&&&&&&&&....\r\n....&&&&&&&&&&&&&&&&&&&&&&../&&&&&/......&&&&&&&&&&&&&&&&&&&&&&&&....\r\n....&&&&&&&&&&&&&&&&&&&&&&&&(.,&&&/....&&&&&&&&&&&&&&&&&&&&&&&&&&....\r\n.....&&&&&&&&&&&&&&&&&&&&&&&&,,&&&/....&&&&&&&&&&&&&&&&&&&&&&&&&%....\r\n......&&&&&&&&&&&&&&&&&&&&&&&*,&&&/....&&&&&&&&&&&&&&&&&&&&&&&&&.....\r\n.......&&&&&&&&&&&&&&&&&&&&&&%,&&&*....&&&&&&&&&&&&&&&&&&&&&&&&*.....\r\n....,...&&&&&&&&&&&&&&&&&&&&&&,&&&*....&&&&&&&&&&&&&&&&&&&&&&&&......\r\n.........&&&&&&&&&&&&&&&&&&&&&,&&&*...,&&&&&&&&&&&&&&&&&&&&&&&.......\r\n..........&&&&&&&&&&&&&&&&&&&&,&&&*.../&&&&&&&&&&&&&&&&&,&&&&........\r\n............&&&&&&&&&&&&&&&&&&,&&&*...&&&&&&&&&&&&&&&&(&&&&%.........\r\n..............&&&&&&&&&&&&&&&&&&&&*...&&&&&&&&&&&&&&(&&&&&...........\r\n...........&....&&&&&&&&&&&&&&&&&&*...&&&&&&&&&&&&.&&&&&.............\r\n...................%&&&&&&&&&&&&&&*..%&&&&&&&&&..&&&&&...............\r\n................&(......&&&&&&&&&&/&&&&&&&(...&&&&.................\r\n*/\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; }\r\n\r\ncontract Cyle {\r\n\r\n    string name;\r\n    string symbol;\r\n    uint8 decimals = 18;\r\n    uint256 totalSupply;\r\n\r\n    uint256 cyleGenesisBlock;\r\n    uint256 lastBlock;\r\n\r\n    uint256 miningReward;\r\n    uint256 publicMineSupply;\r\n    uint256 masternodeSupply;\r\n    uint256 smallReward = 0;\r\n    uint256 bigReward = 0;\r\n    uint256 masternodeRateNumerator;\r\n    uint256 masternodeRateDenominator;\r\n\r\n    uint256 staticFinney = 1 finney;\r\n    uint256 requiredAmountForMasternode = 100* 10 ** uint256(decimals);\r\n    uint256 public maxAmountForMasternode = 1000* 10 ** uint256(decimals);\r\n\r\n    uint256 blocksBetweenReward;\r\n\r\n    address owner;\r\n\r\n    address cyle = 0x7A160fE9fb2a26531F646cB7eC02C498b15E2cc2;\r\n\r\n    uint256 blacklistedAmountOfBlocks = 5760;\r\n    \r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    mapping (uint256 => bool) public blockHasBeenMined;\r\n\r\n    mapping (address => bool) public masternodeCheck;\r\n\r\n    mapping (address => uint256) public registeredAtBlock;\r\n    mapping (address => uint256) public lastTimeRewarded;\r\n\r\n    mapping (address => bool) public addressHasParkedToken;\r\n    mapping (address => uint256) public lockedAmount;\r\n\r\n    mapping (address => uint256) public blacklistedTillBlock;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event SwapTransfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Burn(address indexed from, uint256 value);\r\n    event ValueCheck(uint256 value);\r\n    event SuccessfullMiningAttempt(address indexed _owner, uint256 _value);\r\n    event SuccessfullMasternodeRegistration(address indexed _owner);\r\n    event SuccessfullLock(address indexed _owner, uint256 _value);\r\n    event SuccessfullPayout(address indexed _owner, uint256 _value);\r\n    event MiningRewardsAdjusted(uint256 _block, uint256 _newReward);\r\n    event MasternodeRewardsAdjusted(uint256 _block, uint256 _newReward);\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyMasterNode {\r\n        require(masternodeCheck[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    modifier remainingNodeSupplyChecky{\r\n        require(masternodeSupply > 0);\r\n        _;\r\n    }\r\n\r\n    modifier remainingMineSupplyCheck{\r\n        require(publicMineSupply > miningReward);\r\n        _;\r\n    }\r\n\r\n    modifier nodePotentialCheck{\r\n        require(!masternodeCheck[msg.sender]);\r\n        require(balanceOf[msg.sender] > requiredAmountForMasternode);\r\n        _;\r\n    }\r\n\r\n    modifier checkForMiningBlacklisting{\r\n        require(getCurrentCyleBlock() > blacklistedTillBlock[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        totalSupply = 45000000 * 10 ** uint256(decimals);  \r\n        balanceOf[address(this)] = totalSupply;             \r\n        name = \"Cyle\";                                   \r\n        symbol = \"CYLE\";                               \r\n        cyleGenesisBlock = block.number;\r\n        lastBlock = block.number;\r\n        publicMineSupply = SafeMath.div(totalSupply,2);\r\n        masternodeSupply = SafeMath.sub(totalSupply, publicMineSupply);\r\n        owner = msg.sender;\r\n        masternodeRateNumerator = 6081;\r\n        masternodeRateDenominator = 500000;\r\n        miningReward = 50 * 10 ** uint256(decimals);\r\n        blocksBetweenReward = 40320;\r\n    }\r\n    \r\n    // MINING\r\n    \r\n    function calcSmallReward(uint256 _miningReward) private pure returns(uint256 _reward){\r\n        _reward=SafeMath.div(SafeMath.mul(_miningReward, 20),100);\r\n        return _reward;\r\n    }\r\n\r\n     function calcBigReward(uint256 _miningReward) private pure returns(uint256 _reward){\r\n        _reward=SafeMath.div(SafeMath.mul(_miningReward, 80),100);\r\n        return _reward;\r\n    }\r\n\r\n    function publicMine() public payable remainingMineSupplyCheck checkForMiningBlacklisting{\r\n        require(!blockHasBeenMined[getCurrentCyleBlock()]);\r\n        miningReward = getCurrentMiningReward();\r\n        smallReward = calcSmallReward(miningReward);\r\n        bigReward = calcBigReward(miningReward);\r\n        this.transfer(msg.sender, bigReward);\r\n        this.transfer(cyle, smallReward);\r\n        publicMineSupply = SafeMath.sub(publicMineSupply,miningReward);\r\n        blockHasBeenMined[getCurrentCyleBlock()] = true;\r\n        blacklistedTillBlock[msg.sender] = SafeMath.add(getCurrentCyleBlock(), blacklistedAmountOfBlocks);\r\n        emit SuccessfullMiningAttempt(msg.sender, bigReward);\r\n    }\r\n    \r\n    // STAKING\r\n    \r\n    function registerMasternode() public nodePotentialCheck{\r\n        require(!masternodeCheck[msg.sender]);\r\n        uint256 currentCyleBlock = getCurrentCyleBlock();\r\n        masternodeCheck[msg.sender] = true;\r\n        registeredAtBlock[msg.sender] = currentCyleBlock;\r\n        lastTimeRewarded[msg.sender] = currentCyleBlock;\r\n        emit SuccessfullMasternodeRegistration(msg.sender);\r\n    }\r\n\r\n    function lockAmountForMasternode(uint256 _amount) public onlyMasterNode{\r\n        require(SafeMath.sub(balanceOf[msg.sender], lockedAmount[msg.sender]) >= _amount);\r\n        require(_amount <= maxAmountForMasternode && SafeMath.add(lockedAmount[msg.sender],_amount)<= maxAmountForMasternode);\r\n        addressHasParkedToken[msg.sender] = true;\r\n        if(lockedAmount[msg.sender] == 0){\r\n            lastTimeRewarded[msg.sender] = getCurrentCyleBlock();\r\n        }\r\n        lockedAmount[msg.sender] = SafeMath.add(lockedAmount[msg.sender],_amount);\r\n        emit SuccessfullLock(msg.sender, _amount);\r\n    }\r\n\r\n    function unlockAmountFromMasterNode() public onlyMasterNode returns(bool){\r\n        addressHasParkedToken[msg.sender] = false;\r\n        lockedAmount[msg.sender] = 0;\r\n        return true;\r\n    }\r\n\r\n    function claimMasternodeReward() public onlyMasterNode remainingNodeSupplyChecky{\r\n        require(addressHasParkedToken[msg.sender]);\r\n        uint256 interest = interestToClaim(msg.sender);\r\n        this.transfer(msg.sender, calcBigReward(interest));\r\n        this.transfer(cyle, calcSmallReward(interest));\r\n        lastTimeRewarded[msg.sender] = getCurrentCyleBlock();\r\n        masternodeSupply = SafeMath.sub(masternodeSupply, interest);\r\n        emit SuccessfullPayout(msg.sender, calcBigReward(interest));\r\n    }\r\n\r\n    function interestToClaim(address _owner) public view returns(uint256 _amountToClaim){\r\n        uint256 blockstopay = SafeMath.div(SafeMath.sub(getCurrentCyleBlock(),lastTimeRewarded[_owner]), blocksBetweenReward);\r\n        _amountToClaim = SafeMath.mul((SafeMath.div(SafeMath.mul(getCurrentMasternodeNumerator(), lockedAmount[_owner]), getCurrentMasternodeDenominator())), blockstopay);\r\n        return _amountToClaim;\r\n    }\r\n    \r\n    // ERC INTERFACE\r\n    \r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require(_to != address(0x0));\r\n        require(balanceOf[_from] >= _value);\r\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        emit Transfer(_from, _to, _value);\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)\r\n        public\r\n        returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, address(this), _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\r\n        totalSupply -= _value;                      // Updates totalSupply\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\r\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\r\n        totalSupply -= _value;                              // Update totalSupply\r\n        emit Burn(_from, _value);\r\n        return true;\r\n    }\r\n    \r\n    // GETTERS\r\n    \r\n    function getStaticFinney() public view returns (uint){\r\n        return staticFinney;\r\n    }\r\n    \r\n    function getRemainingPublicMineSupply() public view returns (uint256 _amount){\r\n        return publicMineSupply;\r\n    }\r\n\r\n    function getRemainingMasternodeSupply() public view returns (uint256 _amount){\r\n        return masternodeSupply;\r\n    }\r\n\r\n    function getBlacklistblockForUser() public view returns(uint256){\r\n        return blacklistedTillBlock[msg.sender];\r\n    }\r\n    \r\n    function getCurrentEthBlock() private view returns (uint256 blockAmount){\r\n        return block.number;\r\n    }\r\n\r\n    function getCurrentCyleBlock() public view returns (uint256){\r\n        uint256 eth = getCurrentEthBlock();\r\n        uint256 cyleBlock = SafeMath.sub(eth, cyleGenesisBlock);\r\n        return cyleBlock;\r\n    }\r\n\r\n    function getCurrentMiningReward() public view returns(uint256 _miningReward){\r\n        return miningReward;\r\n    }\r\n\r\n     function getCurrentMasterNodeReward() public view returns(uint256 _miningReward){\r\n        return SafeMath.mul(SafeMath.div(masternodeRateNumerator,masternodeRateDenominator),100);\r\n    }\r\n\r\n    function getCurrentMasternodeNumerator() public view returns(uint256 _numerator){\r\n        return masternodeRateNumerator;    \r\n    }\r\n \r\n    function getCurrentMasternodeDenominator() public view returns(uint256 _denominator){\r\n        return masternodeRateDenominator;    \r\n    }\r\n\r\n    function getTotalSupply() public view returns (uint256 _totalSupply){\r\n        return totalSupply;\r\n    }\r\n\r\n    function getCurrentLockedAmount() public view returns (uint256 _amount){\r\n        return lockedAmount[msg.sender];\r\n    }\r\n\r\n    function getCurrentUnlockedAmount() public view returns (uint256 _unlockedAmount){\r\n        return SafeMath.sub(balanceOf[msg.sender], lockedAmount[msg.sender]);\r\n    }\r\n\r\n    function getMasternodeRequiredAmount() public view returns(uint256 _reqAmount){\r\n        return requiredAmountForMasternode;\r\n    }\r\n\r\n    function getCurrentPossibleAmountOfAddress(address _owner) public view returns(uint256 _amount){\r\n\r\n         if(!addressHasParkedToken[_owner]){\r\n            _amount = 0;\r\n        } else {\r\n           _amount = SafeMath.add(lockedAmount[_owner], interestToClaim(_owner));\r\n           return _amount;\r\n        }\r\n    }\r\n\r\n    function getLastTimeRewarded(address _owner) public view returns (uint256 _block){\r\n        return lastTimeRewarded[_owner];\r\n\r\n    }\r\n\r\n    function checkForMasterNode(address _owner) public view returns (bool _state){\r\n       _state = masternodeCheck[_owner];\r\n       return _state;\r\n    }\r\n    \r\n    //SETTERS\r\n    \r\n    function adjustMiningRewards() public{\r\n\r\n        uint256 _remainingMiningSupply = getRemainingPublicMineSupply();\r\n\r\n        if(_remainingMiningSupply < 175000000000000000000000000 && _remainingMiningSupply > 131250000000000000000000000){\r\n            miningReward = 25000000000000000000;\r\n        }\r\n\r\n        if(_remainingMiningSupply < 131250000000000000000000000 && _remainingMiningSupply > 93750000000000000000000000){\r\n            miningReward = 12500000000000000000;\r\n        }\r\n\r\n        if(_remainingMiningSupply < 93750000000000000000000000 && _remainingMiningSupply > 62500000000000000000000000){\r\n            miningReward = 6250000000000000000;\r\n        }\r\n\r\n        if(_remainingMiningSupply < 62500000000000000000000000 && _remainingMiningSupply > 37500000000000000000000000){\r\n            miningReward = 3125000000000000000;\r\n        }\r\n\r\n        if(_remainingMiningSupply < 37500000000000000000000000 && _remainingMiningSupply > 18750000000000000000000000){\r\n            miningReward = 1562500000000000000;\r\n        }\r\n\r\n        if(_remainingMiningSupply < 18750000000000000000000000 && _remainingMiningSupply > 12500000000000000000000000){\r\n            miningReward = 800000000000000000;\r\n        }\r\n\r\n        if(_remainingMiningSupply < 12500000000000000000000000 && _remainingMiningSupply > 6250000000000000000000000){\r\n            miningReward = 400000000000000000;\r\n        }\r\n\r\n        if(_remainingMiningSupply < 6250000000000000000000000){\r\n            miningReward = 200000000000000000;\r\n        }\r\n        \r\n        emit MiningRewardsAdjusted(getCurrentCyleBlock(), getCurrentMiningReward());\r\n\r\n    }\r\n\r\n    function adjustMasternodeRewards() public{\r\n\r\n        uint256 _remainingStakeSupply = getRemainingMasternodeSupply();\r\n\r\n        if(_remainingStakeSupply < 218750000000000000000000000 && _remainingStakeSupply > 206250000000000000000000000){\r\n           masternodeRateNumerator=5410;\r\n           masternodeRateDenominator=500000;\r\n        }\r\n\r\n        if(_remainingStakeSupply < 206250000000000000000000000 && _remainingStakeSupply > 187500000000000000000000000){\r\n           masternodeRateNumerator=469;\r\n           masternodeRateDenominator=50000;\r\n        }\r\n\r\n        if(_remainingStakeSupply < 187500000000000000000000000 && _remainingStakeSupply > 162500000000000000000000000){\r\n           masternodeRateNumerator=783;\r\n           masternodeRateDenominator=100000;\r\n        }\r\n\r\n        if(_remainingStakeSupply < 162500000000000000000000000 && _remainingStakeSupply > 131250000000000000000000000){\r\n           masternodeRateNumerator=307;\r\n           masternodeRateDenominator=50000;\r\n        }\r\n\r\n        if(_remainingStakeSupply < 131250000000000000000000000 && _remainingStakeSupply > 93750000000000000000000000){\r\n           masternodeRateNumerator=43;\r\n           masternodeRateDenominator=10000;\r\n        }\r\n\r\n        if(_remainingStakeSupply < 93750000000000000000000000 && _remainingStakeSupply > 50000000000000000000000000){\r\n           masternodeRateNumerator=269;\r\n           masternodeRateDenominator=100000;\r\n        }\r\n\r\n        if(_remainingStakeSupply < 50000000000000000000000000){\r\n           masternodeRateNumerator=183;\r\n           masternodeRateDenominator=100000;\r\n        }\r\n        \r\n        emit MasternodeRewardsAdjusted(getCurrentCyleBlock(), getCurrentMasterNodeReward());\r\n    }\r\n    \r\n    function adjustBlocksBetweenReward(uint256 _newBlocksBetweenReward) public onlyOwner {\r\n        blocksBetweenReward = _newBlocksBetweenReward;\r\n    }\r\n        \r\n    function blacklistUser(address _addr) public onlyOwner {\r\n        blacklistedTillBlock[_addr]=SafeMath.mul(getCurrentEthBlock(), 5);\r\n    }\r\n    \r\n    // SWAPPING FUNCTION\r\n    \r\n    uint256 public remainingSwappingAmount = 81983 * 10 ** uint256(decimals);\r\n    mapping (address => bool) public hasBeenSwapped;\r\n    \r\n    function _transferSwap(address _to, uint _value) public onlyOwner {\r\n        require(!hasBeenSwapped[_to]);\r\n        require(remainingSwappingAmount >= _value);\r\n        require(_to != address(0x0));\r\n        this.transfer(_to, _value);\r\n        masternodeSupply -= _value;\r\n        remainingSwappingAmount -= _value;\r\n        hasBeenSwapped[_to]=true;\r\n        emit SwapTransfer(address(this), _to, _value);\r\n    }\r\n    \r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"claimMasternodeReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentMiningReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_miningReward\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasBeenSwapped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentLockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"checkForMasterNode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBlacklistblockForUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"interestToClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToClaim\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"adjustMiningRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentMasterNodeReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_miningReward\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"_transferSwap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRemainingPublicMineSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMasternodeRequiredAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_reqAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStaticFinney\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"registeredAtBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxAmountForMasternode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentMasternodeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockAmountFromMasterNode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"publicMine\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"adjustMasternodeRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"masternodeCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentMasternodeNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_numerator\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressHasParkedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklistedTillBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"registerMasternode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blockHasBeenMined\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentUnlockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_unlockedAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"lockAmountForMasternode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastTimeRewarded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentCyleBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingSwappingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newBlocksBetweenReward\",\"type\":\"uint256\"}],\"name\":\"adjustBlocksBetweenReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRemainingMasternodeSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getLastTimeRewarded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getCurrentPossibleAmountOfAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"blacklistUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SwapTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ValueCheck\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"SuccessfullMiningAttempt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"SuccessfullMasternodeRegistration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"SuccessfullLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"SuccessfullPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newReward\",\"type\":\"uint256\"}],\"name\":\"MiningRewardsAdjusted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newReward\",\"type\":\"uint256\"}],\"name\":\"MasternodeRewardsAdjusted\",\"type\":\"event\"}]","ContractName":"Cyle","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d9e1a0685c9b17131e6ab70c27dce937933c620171df5ea3a2ebd30dacfafa68"}]}