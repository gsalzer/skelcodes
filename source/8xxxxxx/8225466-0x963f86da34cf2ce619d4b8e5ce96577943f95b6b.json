{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2019-12-02\r\n*/\r\n\r\npragma solidity ^0.5.4;\r\n\r\n/**\r\n * ERC20 contract interface.\r\n */\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint);\r\n    function decimals() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n}\r\n\r\n/**\r\n * @title Module\r\n * @dev Interface for a module. \r\n * A module MUST implement the addModule() method to ensure that a wallet with at least one module\r\n * can never end up in a \"frozen\" state.\r\n * @author Julien Niset - <julien@argent.xyz>\r\n */\r\ninterface Module {\r\n    function init(BaseWallet _wallet) external;\r\n    function addModule(BaseWallet _wallet, Module _module) external;\r\n    function recoverToken(address _token) external;\r\n}\r\n\r\n/**\r\n * @title BaseWallet\r\n * @dev Simple modular wallet that authorises modules to call its invoke() method.\r\n * Based on https://gist.github.com/Arachnid/a619d31f6d32757a4328a428286da186 by \r\n * @author Julien Niset - <julien@argent.xyz>\r\n */\r\ncontract BaseWallet {\r\n    address public implementation;\r\n    address public owner;\r\n    mapping (address => bool) public authorised;\r\n    mapping (bytes4 => address) public enabled;\r\n    uint public modules;\r\n    function init(address _owner, address[] calldata _modules) external;\r\n    function authoriseModule(address _module, bool _value) external;\r\n    function enableStaticCall(address _module, bytes4 _method) external;\r\n    function setOwner(address _newOwner) external;\r\n    function invoke(address _target, uint _value, bytes calldata _data) external;\r\n    function() external payable;\r\n}\r\n\r\n/**\r\n * @title ModuleRegistry\r\n * @dev Registry of authorised modules. \r\n * Modules must be registered before they can be authorised on a wallet.\r\n * @author Julien Niset - <julien@argent.xyz>\r\n */\r\ncontract ModuleRegistry {\r\n    function registerModule(address _module, bytes32 _name) external;\r\n    function deregisterModule(address _module) external;\r\n    function registerUpgrader(address _upgrader, bytes32 _name) external;\r\n    function deregisterUpgrader(address _upgrader) external;\r\n    function recoverToken(address _token) external;\r\n    function moduleInfo(address _module) external view returns (bytes32);\r\n    function upgraderInfo(address _upgrader) external view returns (bytes32);\r\n    function isRegisteredModule(address _module) external view returns (bool);\r\n    function isRegisteredModule(address[] calldata _modules) external view returns (bool);\r\n    function isRegisteredUpgrader(address _upgrader) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @title GuardianStorage\r\n * @dev Contract storing the state of wallets related to guardians and lock.\r\n * The contract only defines basic setters and getters with no logic. Only modules authorised\r\n * for a wallet can modify its state.\r\n * @author Julien Niset - <julien@argent.xyz>\r\n * @author Olivier Van Den Biggelaar - <olivier@argent.xyz>\r\n */\r\ncontract GuardianStorage {\r\n    function addGuardian(BaseWallet _wallet, address _guardian) external;\r\n    function revokeGuardian(BaseWallet _wallet, address _guardian) external;\r\n    function guardianCount(BaseWallet _wallet) external view returns (uint256);\r\n    function getGuardians(BaseWallet _wallet) external view returns (address[] memory);\r\n    function isGuardian(BaseWallet _wallet, address _guardian) external view returns (bool);\r\n    function setLock(BaseWallet _wallet, uint256 _releaseAfter) external;\r\n    function isLocked(BaseWallet _wallet) external view returns (bool);\r\n    function getLock(BaseWallet _wallet) external view returns (uint256);\r\n    function getLocker(BaseWallet _wallet) external view returns (address);\r\n}\r\n\r\n// Interface to MakerDAO's Tub contract, used to manage CDPs\r\ncontract IMakerCdp {\r\n    IDSValue  public pep; // MKR price feed\r\n    IMakerVox public vox; // DAI price feed\r\n\r\n    function sai() external view returns (address);  // DAI\r\n    function skr() external view returns (address);  // PETH\r\n    function gem() external view returns (address);  // WETH\r\n    function gov() external view returns (address);  // MKR\r\n\r\n    function lad(bytes32 cup) external view returns (address);\r\n    function ink(bytes32 cup) external view returns (uint);\r\n    function tab(bytes32 cup) external returns (uint);\r\n    function rap(bytes32 cup) external returns (uint);\r\n\r\n    function tag() public view returns (uint wad);\r\n    function mat() public view returns (uint ray);\r\n    function per() public view returns (uint ray);\r\n    function safe(bytes32 cup) external returns (bool);\r\n    function ask(uint wad) public view returns (uint);\r\n    function bid(uint wad) public view returns (uint);\r\n\r\n    function open() external returns (bytes32 cup);\r\n    function join(uint wad) external; // Join PETH\r\n    function exit(uint wad) external; // Exit PETH\r\n    function give(bytes32 cup, address guy) external;\r\n    function lock(bytes32 cup, uint wad) external;\r\n    function free(bytes32 cup, uint wad) external;\r\n    function draw(bytes32 cup, uint wad) external;\r\n    function wipe(bytes32 cup, uint wad) external;\r\n    function shut(bytes32 cup) external;\r\n    function bite(bytes32 cup) external;\r\n}\r\n\r\ninterface IMakerVox {\r\n    function par() external returns (uint);\r\n}\r\n\r\ninterface IDSValue {\r\n    function peek() external view returns (bytes32, bool);\r\n    function read() external view returns (bytes32);\r\n    function poke(bytes32 wut) external;\r\n    function void() external;\r\n} \r\n\r\ninterface UniswapFactory {\r\n    function getExchange(address _token) external view returns(address);\r\n}\r\n\r\ninterface UniswapExchange {\r\n    function getEthToTokenOutputPrice(uint256 _tokens_bought) external view returns (uint256);\r\n    function getEthToTokenInputPrice(uint256 _eth_sold) external view returns (uint256);\r\n    function getTokenToEthOutputPrice(uint256 _eth_bought) external view returns (uint256);\r\n    function getTokenToEthInputPrice(uint256 _tokens_sold) external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @title Interface for a contract that can loan tokens to a wallet.\r\n * @author Julien Niset - <julien@argent.xyz>\r\n */\r\ninterface Loan {\r\n\r\n    event LoanOpened(address indexed _wallet, bytes32 indexed _loanId, address _collateral, uint256 _collateralAmount, address _debtToken, uint256 _debtAmount);\r\n    event LoanClosed(address indexed _wallet, bytes32 indexed _loanId);\r\n    event CollateralAdded(address indexed _wallet, bytes32 indexed _loanId, address _collateral, uint256 _collateralAmount);\r\n    event CollateralRemoved(address indexed _wallet, bytes32 indexed _loanId, address _collateral, uint256 _collateralAmount);\r\n    event DebtAdded(address indexed _wallet, bytes32 indexed _loanId, address _debtToken, uint256 _debtAmount);\r\n    event DebtRemoved(address indexed _wallet, bytes32 indexed _loanId, address _debtToken, uint256 _debtAmount);\r\n\r\n    /**\r\n     * @dev Opens a collateralized loan.\r\n     * @param _wallet The target wallet.\r\n     * @param _collateral The token used as a collateral.\r\n     * @param _collateralAmount The amount of collateral token provided.\r\n     * @param _debtToken The token borrowed.\r\n     * @param _debtAmount The amount of tokens borrowed.\r\n     * @return (optional) An ID for the loan when the provider enables users to create multiple distinct loans.\r\n     */\r\n    function openLoan(\r\n        BaseWallet _wallet, \r\n        address _collateral, \r\n        uint256 _collateralAmount, \r\n        address _debtToken, \r\n        uint256 _debtAmount\r\n    ) \r\n        external \r\n        returns (bytes32 _loanId);\r\n\r\n    /**\r\n     * @dev Closes a collateralized loan by repaying all debts (plus interest) and redeeming all collateral (plus interest).\r\n     * @param _wallet The target wallet.\r\n     * @param _loanId The ID of the loan if any, 0 otherwise.\r\n     */\r\n    function closeLoan(\r\n        BaseWallet _wallet, \r\n        bytes32 _loanId\r\n    ) \r\n        external;\r\n\r\n    /**\r\n     * @dev Adds collateral to a loan identified by its ID.\r\n     * @param _wallet The target wallet.\r\n     * @param _loanId The ID of the loan if any, 0 otherwise.\r\n     * @param _collateral The token used as a collateral.\r\n     * @param _collateralAmount The amount of collateral to add.\r\n     */\r\n    function addCollateral(\r\n        BaseWallet _wallet, \r\n        bytes32 _loanId, \r\n        address _collateral, \r\n        uint256 _collateralAmount\r\n    ) \r\n        external;\r\n\r\n    /**\r\n     * @dev Removes collateral from a loan identified by its ID.\r\n     * @param _wallet The target wallet.\r\n     * @param _loanId The ID of the loan if any, 0 otherwise.\r\n     * @param _collateral The token used as a collateral.\r\n     * @param _collateralAmount The amount of collateral to remove.\r\n     */\r\n    function removeCollateral(\r\n        BaseWallet _wallet, \r\n        bytes32 _loanId, \r\n        address _collateral, \r\n        uint256 _collateralAmount\r\n    ) \r\n        external;\r\n\r\n    /**\r\n     * @dev Increases the debt by borrowing more token from a loan identified by its ID.\r\n     * @param _wallet The target wallet.\r\n     * @param _loanId The ID of the loan if any, 0 otherwise.\r\n     * @param _debtToken The token borrowed.\r\n     * @param _debtAmount The amount of token to borrow.\r\n     */\r\n    function addDebt(\r\n        BaseWallet _wallet, \r\n        bytes32 _loanId, \r\n        address _debtToken, \r\n        uint256 _debtAmount\r\n    ) \r\n        external;\r\n\r\n    /**\r\n     * @dev Decreases the debt by repaying some token from a loan identified by its ID.\r\n     * @param _wallet The target wallet.\r\n     * @param _loanId The ID of the loan if any, 0 otherwise.\r\n     * @param _debtToken The token to repay.\r\n     * @param _debtAmount The amount of token to repay.\r\n     */\r\n    function removeDebt(\r\n        BaseWallet _wallet, \r\n        bytes32 _loanId, \r\n        address _debtToken, \r\n        uint256 _debtAmount\r\n    ) \r\n        external;\r\n\r\n    /**\r\n     * @dev Gets information about a loan identified by its ID.\r\n     * @param _wallet The target wallet.\r\n     * @param _loanId The ID of the loan if any, 0 otherwise.\r\n     * @return a status [0: no loan, 1: loan is safe, 2: loan is unsafe and can be liquidated, 3: unable to provide info]\r\n     * and a value (in ETH) representing the value that could still be borrowed when status = 1; or the value of the collateral \r\n     * that should be added to avoid liquidation when status = 2.     \r\n     */\r\n    function getLoan(\r\n        BaseWallet _wallet, \r\n        bytes32 _loanId\r\n    ) \r\n        external \r\n        view \r\n        returns (uint8 _status, uint256 _ethValue);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns ceil(a / b).\r\n    */\r\n    function ceil(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        if(a % b == 0) {\r\n            return c;\r\n        }\r\n        else {\r\n            return c + 1;\r\n        }\r\n    }\r\n\r\n    // from DSMath - operations on fixed precision floats\r\n\r\n    uint256 constant WAD = 10 ** 18;\r\n    uint256 constant RAY = 10 ** 27;\r\n\r\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n}\r\n\r\n/**\r\n * @title BaseModule\r\n * @dev Basic module that contains some methods common to all modules.\r\n * @author Julien Niset - <julien@argent.im>\r\n */\r\ncontract BaseModule is Module {\r\n\r\n    // The adddress of the module registry.\r\n    ModuleRegistry internal registry;\r\n\r\n    event ModuleCreated(bytes32 name);\r\n    event ModuleInitialised(address wallet);\r\n\r\n    constructor(ModuleRegistry _registry, bytes32 _name) public {\r\n        registry = _registry;\r\n        emit ModuleCreated(_name);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the target wallet of the call.\r\n     */\r\n    modifier onlyWallet(BaseWallet _wallet) {\r\n        require(msg.sender == address(_wallet), \"BM: caller must be wallet\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner of the target wallet or the module itself.\r\n     */\r\n    modifier onlyWalletOwner(BaseWallet _wallet) {\r\n        require(msg.sender == address(this) || isOwner(_wallet, msg.sender), \"BM: must be an owner for the wallet\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner of the target wallet.\r\n     */\r\n    modifier strictOnlyWalletOwner(BaseWallet _wallet) {\r\n        require(isOwner(_wallet, msg.sender), \"BM: msg.sender must be an owner for the wallet\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Inits the module for a wallet by logging an event.\r\n     * The method can only be called by the wallet itself.\r\n     * @param _wallet The wallet.\r\n     */\r\n    function init(BaseWallet _wallet) external onlyWallet(_wallet) {\r\n        emit ModuleInitialised(address(_wallet));\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a module to a wallet. First checks that the module is registered.\r\n     * @param _wallet The target wallet.\r\n     * @param _module The modules to authorise.\r\n     */\r\n    function addModule(BaseWallet _wallet, Module _module) external strictOnlyWalletOwner(_wallet) {\r\n        require(registry.isRegisteredModule(address(_module)), \"BM: module is not registered\");\r\n        _wallet.authoriseModule(address(_module), true);\r\n    }\r\n\r\n    /**\r\n    * @dev Utility method enbaling anyone to recover ERC20 token sent to the\r\n    * module by mistake and transfer them to the Module Registry. \r\n    * @param _token The token to recover.\r\n    */\r\n    function recoverToken(address _token) external {\r\n        uint total = ERC20(_token).balanceOf(address(this));\r\n        ERC20(_token).transfer(address(registry), total);\r\n    }\r\n\r\n    /**\r\n     * @dev Helper method to check if an address is the owner of a target wallet.\r\n     * @param _wallet The target wallet.\r\n     * @param _addr The address.\r\n     */\r\n    function isOwner(BaseWallet _wallet, address _addr) internal view returns (bool) {\r\n        return _wallet.owner() == _addr;\r\n    }\r\n}\r\n\r\n/**\r\n * @title RelayerModule\r\n * @dev Base module containing logic to execute transactions signed by eth-less accounts and sent by a relayer. \r\n * @author Julien Niset - <julien@argent.im>\r\n */\r\ncontract RelayerModule is Module {\r\n\r\n    uint256 constant internal BLOCKBOUND = 10000;\r\n\r\n    mapping (address => RelayerConfig) public relayer; \r\n\r\n    struct RelayerConfig {\r\n        uint256 nonce;\r\n        mapping (bytes32 => bool) executedTx;\r\n    }\r\n\r\n    event TransactionExecuted(address indexed wallet, bool indexed success, bytes32 signedHash);\r\n\r\n    /**\r\n     * @dev Throws if the call did not go through the execute() method.\r\n     */\r\n    modifier onlyExecute {\r\n        require(msg.sender == address(this), \"RM: must be called via execute()\");\r\n        _;\r\n    }\r\n\r\n    /* ***************** Abstract method ************************* */\r\n\r\n    /**\r\n    * @dev Gets the number of valid signatures that must be provided to execute a\r\n    * specific relayed transaction.\r\n    * @param _wallet The target wallet.\r\n    * @param _data The data of the relayed transaction.\r\n    * @return The number of required signatures.\r\n    */\r\n    function getRequiredSignatures(BaseWallet _wallet, bytes memory _data) internal view returns (uint256);\r\n\r\n    /**\r\n    * @dev Validates the signatures provided with a relayed transaction.\r\n    * The method MUST throw if one or more signatures are not valid.\r\n    * @param _wallet The target wallet.\r\n    * @param _data The data of the relayed transaction.\r\n    * @param _signHash The signed hash representing the relayed transaction.\r\n    * @param _signatures The signatures as a concatenated byte array.\r\n    */\r\n    function validateSignatures(BaseWallet _wallet, bytes memory _data, bytes32 _signHash, bytes memory _signatures) internal view returns (bool);\r\n\r\n    /* ************************************************************ */\r\n\r\n    /**\r\n    * @dev Executes a relayed transaction.\r\n    * @param _wallet The target wallet.\r\n    * @param _data The data for the relayed transaction\r\n    * @param _nonce The nonce used to prevent replay attacks.\r\n    * @param _signatures The signatures as a concatenated byte array.\r\n    * @param _gasPrice The gas price to use for the gas refund.\r\n    * @param _gasLimit The gas limit to use for the gas refund.\r\n    */\r\n    function execute(\r\n        BaseWallet _wallet,\r\n        bytes calldata _data, \r\n        uint256 _nonce, \r\n        bytes calldata _signatures, \r\n        uint256 _gasPrice,\r\n        uint256 _gasLimit\r\n    )\r\n        external\r\n        returns (bool success)\r\n    {\r\n        uint startGas = gasleft();\r\n        bytes32 signHash = getSignHash(address(this), address(_wallet), 0, _data, _nonce, _gasPrice, _gasLimit);\r\n        require(checkAndUpdateUniqueness(_wallet, _nonce, signHash), \"RM: Duplicate request\");\r\n        require(verifyData(address(_wallet), _data), \"RM: the wallet authorized is different then the target of the relayed data\");\r\n        uint256 requiredSignatures = getRequiredSignatures(_wallet, _data);\r\n        if((requiredSignatures * 65) == _signatures.length) {\r\n            if(verifyRefund(_wallet, _gasLimit, _gasPrice, requiredSignatures)) {\r\n                if(requiredSignatures == 0 || validateSignatures(_wallet, _data, signHash, _signatures)) {\r\n                    // solium-disable-next-line security/no-call-value\r\n                    (success,) = address(this).call(_data);\r\n                    refund(_wallet, startGas - gasleft(), _gasPrice, _gasLimit, requiredSignatures, msg.sender);\r\n                }\r\n            }\r\n        }\r\n        emit TransactionExecuted(address(_wallet), success, signHash); \r\n    }\r\n\r\n    /**\r\n    * @dev Gets the current nonce for a wallet.\r\n    * @param _wallet The target wallet.\r\n    */\r\n    function getNonce(BaseWallet _wallet) external view returns (uint256 nonce) {\r\n        return relayer[address(_wallet)].nonce;\r\n    }\r\n\r\n    /**\r\n    * @dev Generates the signed hash of a relayed transaction according to ERC 1077.\r\n    * @param _from The starting address for the relayed transaction (should be the module)\r\n    * @param _to The destination address for the relayed transaction (should be the wallet)\r\n    * @param _value The value for the relayed transaction\r\n    * @param _data The data for the relayed transaction\r\n    * @param _nonce The nonce used to prevent replay attacks.\r\n    * @param _gasPrice The gas price to use for the gas refund.\r\n    * @param _gasLimit The gas limit to use for the gas refund.\r\n    */\r\n    function getSignHash(\r\n        address _from,\r\n        address _to, \r\n        uint256 _value, \r\n        bytes memory _data, \r\n        uint256 _nonce,\r\n        uint256 _gasPrice,\r\n        uint256 _gasLimit\r\n    ) \r\n        internal \r\n        pure\r\n        returns (bytes32) \r\n    {\r\n        return keccak256(\r\n            abi.encodePacked(\r\n                \"\\x19Ethereum Signed Message:\\n32\",\r\n                keccak256(abi.encodePacked(byte(0x19), byte(0), _from, _to, _value, _data, _nonce, _gasPrice, _gasLimit))\r\n        ));\r\n    }\r\n\r\n    /**\r\n    * @dev Checks if the relayed transaction is unique.\r\n    * @param _wallet The target wallet.\r\n    * @param _nonce The nonce\r\n    * @param _signHash The signed hash of the transaction\r\n    */\r\n    function checkAndUpdateUniqueness(BaseWallet _wallet, uint256 _nonce, bytes32 _signHash) internal returns (bool) {\r\n        if(relayer[address(_wallet)].executedTx[_signHash] == true) {\r\n            return false;\r\n        }\r\n        relayer[address(_wallet)].executedTx[_signHash] = true;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Checks that a nonce has the correct format and is valid. \r\n    * It must be constructed as nonce = {block number}{timestamp} where each component is 16 bytes.\r\n    * @param _wallet The target wallet.\r\n    * @param _nonce The nonce\r\n    */\r\n    function checkAndUpdateNonce(BaseWallet _wallet, uint256 _nonce) internal returns (bool) {\r\n        if(_nonce <= relayer[address(_wallet)].nonce) {\r\n            return false;\r\n        }   \r\n        uint256 nonceBlock = (_nonce & 0xffffffffffffffffffffffffffffffff00000000000000000000000000000000) >> 128;\r\n        if(nonceBlock > block.number + BLOCKBOUND) {\r\n            return false;\r\n        }\r\n        relayer[address(_wallet)].nonce = _nonce;\r\n        return true;    \r\n    }\r\n\r\n    /**\r\n    * @dev Recovers the signer at a given position from a list of concatenated signatures.\r\n    * @param _signedHash The signed hash\r\n    * @param _signatures The concatenated signatures.\r\n    * @param _index The index of the signature to recover.\r\n    */\r\n    function recoverSigner(bytes32 _signedHash, bytes memory _signatures, uint _index) internal pure returns (address) {\r\n        uint8 v;\r\n        bytes32 r;\r\n        bytes32 s;\r\n        // we jump 32 (0x20) as the first slot of bytes contains the length\r\n        // we jump 65 (0x41) per signature\r\n        // for v we load 32 bytes ending with v (the first 31 come from s) then apply a mask\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            r := mload(add(_signatures, add(0x20,mul(0x41,_index))))\r\n            s := mload(add(_signatures, add(0x40,mul(0x41,_index))))\r\n            v := and(mload(add(_signatures, add(0x41,mul(0x41,_index)))), 0xff)\r\n        }\r\n        require(v == 27 || v == 28); \r\n        return ecrecover(_signedHash, v, r, s);\r\n    }\r\n\r\n    /**\r\n    * @dev Refunds the gas used to the Relayer. \r\n    * For security reasons the default behavior is to not refund calls with 0 or 1 signatures. \r\n    * @param _wallet The target wallet.\r\n    * @param _gasUsed The gas used.\r\n    * @param _gasPrice The gas price for the refund.\r\n    * @param _gasLimit The gas limit for the refund.\r\n    * @param _signatures The number of signatures used in the call.\r\n    * @param _relayer The address of the Relayer.\r\n    */\r\n    function refund(BaseWallet _wallet, uint _gasUsed, uint _gasPrice, uint _gasLimit, uint _signatures, address _relayer) internal {\r\n        uint256 amount = 29292 + _gasUsed; // 21000 (transaction) + 7620 (execution of refund) + 672 to log the event + _gasUsed\r\n        // only refund if gas price not null, more than 1 signatures, gas less than gasLimit\r\n        if(_gasPrice > 0 && _signatures > 1 && amount <= _gasLimit) {\r\n            if(_gasPrice > tx.gasprice) {\r\n                amount = amount * tx.gasprice;\r\n            }\r\n            else {\r\n                amount = amount * _gasPrice;\r\n            }\r\n            _wallet.invoke(_relayer, amount, \"\");\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Returns false if the refund is expected to fail.\r\n    * @param _wallet The target wallet.\r\n    * @param _gasUsed The expected gas used.\r\n    * @param _gasPrice The expected gas price for the refund.\r\n    */\r\n    function verifyRefund(BaseWallet _wallet, uint _gasUsed, uint _gasPrice, uint _signatures) internal view returns (bool) {\r\n        if(_gasPrice > 0 \r\n            && _signatures > 1 \r\n            && (address(_wallet).balance < _gasUsed * _gasPrice || _wallet.authorised(address(this)) == false)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Checks that the wallet address provided as the first parameter of the relayed data is the same\r\n    * as the wallet passed as the input of the execute() method. \r\n    @return false if the addresses are different.\r\n    */\r\n    function verifyData(address _wallet, bytes memory _data) private pure returns (bool) {\r\n        require(_data.length >= 36, \"RM: Invalid dataWallet\");\r\n        address dataWallet;\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            //_data = {length:32}{sig:4}{_wallet:32}{...}\r\n            dataWallet := mload(add(_data, 0x24))\r\n        }\r\n        return dataWallet == _wallet;\r\n    }\r\n\r\n    /**\r\n    * @dev Parses the data to extract the method signature. \r\n    */\r\n    function functionPrefix(bytes memory _data) internal pure returns (bytes4 prefix) {\r\n        require(_data.length >= 4, \"RM: Invalid functionPrefix\");\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            prefix := mload(add(_data, 0x20))\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title OnlyOwnerModule\r\n * @dev Module that extends BaseModule and RelayerModule for modules where the execute() method\r\n * must be called with one signature frm the owner.\r\n * @author Julien Niset - <julien@argent.im>\r\n */\r\ncontract OnlyOwnerModule is BaseModule, RelayerModule {\r\n\r\n    // *************** Implementation of RelayerModule methods ********************* //\r\n\r\n    // Overrides to use the incremental nonce and save some gas\r\n    function checkAndUpdateUniqueness(BaseWallet _wallet, uint256 _nonce, bytes32 _signHash) internal returns (bool) {\r\n        return checkAndUpdateNonce(_wallet, _nonce);\r\n    }\r\n\r\n    function validateSignatures(BaseWallet _wallet, bytes memory _data, bytes32 _signHash, bytes memory _signatures) internal view returns (bool) {\r\n        address signer = recoverSigner(_signHash, _signatures, 0);\r\n        return isOwner(_wallet, signer); // \"OOM: signer must be owner\"\r\n    }\r\n\r\n    function getRequiredSignatures(BaseWallet _wallet, bytes memory _data) internal view returns (uint256) {\r\n        return 1;\r\n    }\r\n}\r\n\r\n/**\r\n * @title MakerManager\r\n * @dev Module to borrow tokens with MakerDAO\r\n * @author Olivier VDB - <olivier@argent.xyz>, Julien Niset - <julien@argent.xyz>\r\n */\r\ncontract MakerManager is Loan, BaseModule, RelayerModule, OnlyOwnerModule {\r\n\r\n    bytes32 constant NAME = \"MakerManager\";\r\n\r\n    // The Guardian storage \r\n    GuardianStorage public guardianStorage;\r\n    // The Maker Tub contract\r\n    IMakerCdp public makerCdp;\r\n    // The Uniswap Factory contract\r\n    UniswapFactory public uniswapFactory;\r\n\r\n    // Mock token address for ETH\r\n    address constant internal ETH_TOKEN_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n    // Method signatures to reduce gas cost at depoyment\r\n    bytes4 constant internal CDP_DRAW = bytes4(keccak256(\"draw(bytes32,uint256)\"));\r\n    bytes4 constant internal CDP_WIPE = bytes4(keccak256(\"wipe(bytes32,uint256)\"));\r\n    bytes4 constant internal CDP_SHUT = bytes4(keccak256(\"shut(bytes32)\"));\r\n    bytes4 constant internal CDP_JOIN = bytes4(keccak256(\"join(uint256)\"));\r\n    bytes4 constant internal CDP_LOCK = bytes4(keccak256(\"lock(bytes32,uint256)\"));\r\n    bytes4 constant internal CDP_FREE = bytes4(keccak256(\"free(bytes32,uint256)\"));\r\n    bytes4 constant internal CDP_EXIT = bytes4(keccak256(\"exit(uint256)\"));\r\n    bytes4 constant internal WETH_DEPOSIT = bytes4(keccak256(\"deposit()\"));\r\n    bytes4 constant internal WETH_WITHDRAW = bytes4(keccak256(\"withdraw(uint256)\"));\r\n    bytes4 constant internal ERC20_APPROVE = bytes4(keccak256(\"approve(address,uint256)\"));\r\n    bytes4 constant internal ETH_TOKEN_SWAP_OUTPUT = bytes4(keccak256(\"ethToTokenSwapOutput(uint256,uint256)\"));\r\n    bytes4 constant internal ETH_TOKEN_SWAP_INPUT = bytes4(keccak256(\"ethToTokenSwapInput(uint256,uint256)\"));\r\n    bytes4 constant internal TOKEN_ETH_SWAP_INPUT = bytes4(keccak256(\"tokenToEthSwapInput(uint256,uint256,uint256)\"));\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * @dev Throws if the wallet is locked.\r\n     */\r\n    modifier onlyWhenUnlocked(BaseWallet _wallet) {\r\n        // solium-disable-next-line security/no-block-members\r\n        require(!guardianStorage.isLocked(_wallet), \"MakerManager: wallet must be unlocked\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        ModuleRegistry _registry,\r\n        GuardianStorage _guardianStorage,\r\n        IMakerCdp _makerCdp,\r\n        UniswapFactory _uniswapFactory\r\n    )\r\n        BaseModule(_registry, NAME)\r\n        public\r\n    {\r\n        guardianStorage = _guardianStorage;\r\n        makerCdp = _makerCdp;\r\n        uniswapFactory = _uniswapFactory;\r\n    }\r\n\r\n    /* ********************************** Implementation of Loan ************************************* */\r\n\r\n   /**\r\n     * @dev Opens a collateralized loan.\r\n     * @param _wallet The target wallet.\r\n     * @param _collateral The token used as a collateral (must be 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE).\r\n     * @param _collateralAmount The amount of collateral token provided.\r\n     * @param _debtToken The token borrowed (must be the address of the DAI contract).\r\n     * @param _debtAmount The amount of tokens borrowed.\r\n     * @return The ID of the created CDP.\r\n     */\r\n    function openLoan(\r\n        BaseWallet _wallet, \r\n        address _collateral, \r\n        uint256 _collateralAmount, \r\n        address _debtToken, \r\n        uint256 _debtAmount\r\n    ) \r\n        external \r\n        onlyWalletOwner(_wallet)\r\n        onlyWhenUnlocked(_wallet)\r\n        returns (bytes32 _loanId)\r\n    {\r\n        require(_collateral == ETH_TOKEN_ADDRESS, \"Maker: collateral must be ETH\");\r\n        require(_debtToken == makerCdp.sai(), \"Maker: debt token must be DAI\");\r\n        _loanId = openCdp(_wallet, _collateralAmount, _debtAmount, makerCdp);\r\n        emit LoanOpened(address(_wallet), _loanId, _collateral, _collateralAmount, _debtToken, _debtAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Closes a collateralized loan by repaying all debts (plus interest) and redeeming all collateral (plus interest).\r\n     * @param _wallet The target wallet.\r\n     * @param _loanId The ID of the target CDP.\r\n     */\r\n    function closeLoan(\r\n        BaseWallet _wallet, \r\n        bytes32 _loanId\r\n    ) \r\n        external\r\n        onlyWalletOwner(_wallet)\r\n        onlyWhenUnlocked(_wallet)\r\n    {\r\n        closeCdp(_wallet, _loanId, makerCdp, uniswapFactory);\r\n        emit LoanClosed(address(_wallet), _loanId);\r\n    }\r\n\r\n    /**\r\n     * @dev Adds collateral to a loan identified by its ID.\r\n     * @param _wallet The target wallet.\r\n     * @param _loanId The ID of the target CDP.\r\n     * @param _collateral The token used as a collateral (must be 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE).\r\n     * @param _collateralAmount The amount of collateral to add.\r\n     */\r\n    function addCollateral(\r\n        BaseWallet _wallet, \r\n        bytes32 _loanId, \r\n        address _collateral, \r\n        uint256 _collateralAmount\r\n    ) \r\n        external\r\n        onlyWalletOwner(_wallet)\r\n        onlyWhenUnlocked(_wallet)\r\n    {\r\n        require(_collateral == ETH_TOKEN_ADDRESS, \"Maker: collateral must be ETH\");\r\n        addCollateral(_wallet, _loanId, _collateralAmount, makerCdp);\r\n        emit CollateralAdded(address(_wallet), _loanId, _collateral, _collateralAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes collateral from a loan identified by its ID.\r\n     * @param _wallet The target wallet.\r\n     * @param _loanId The ID of the target CDP.\r\n     * @param _collateral The token used as a collateral (must be 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE).\r\n     * @param _collateralAmount The amount of collateral to remove.\r\n     */\r\n    function removeCollateral(\r\n        BaseWallet _wallet, \r\n        bytes32 _loanId, \r\n        address _collateral, \r\n        uint256 _collateralAmount\r\n    ) \r\n        external \r\n        onlyWalletOwner(_wallet)\r\n        onlyWhenUnlocked(_wallet)\r\n    {\r\n        require(_collateral == ETH_TOKEN_ADDRESS, \"Maker: collateral must be ETH\");\r\n        removeCollateral(_wallet, _loanId, _collateralAmount, makerCdp);\r\n        emit CollateralRemoved(address(_wallet), _loanId, _collateral, _collateralAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Increases the debt by borrowing more token from a loan identified by its ID.\r\n     * @param _wallet The target wallet.\r\n     * @param _loanId The ID of the target CDP.\r\n     * @param _debtToken The token borrowed (must be the address of the DAI contract).\r\n     * @param _debtAmount The amount of token to borrow.\r\n     */\r\n    function addDebt(\r\n        BaseWallet _wallet,\r\n        bytes32 _loanId,\r\n        address _debtToken,\r\n        uint256 _debtAmount\r\n    )\r\n        external\r\n        onlyWalletOwner(_wallet)\r\n        onlyWhenUnlocked(_wallet)\r\n    {\r\n        require(_debtToken == makerCdp.sai(), \"Maker: debt token must be DAI\");\r\n        addDebt(_wallet, _loanId, _debtAmount, makerCdp);\r\n        emit DebtAdded(address(_wallet), _loanId, _debtToken, _debtAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Decreases the debt by repaying some token from a loan identified by its ID.\r\n     * @param _wallet The target wallet.\r\n     * @param _loanId The ID of the target CDP.\r\n     * @param _debtToken The token to repay (must be the address of the DAI contract).\r\n     * @param _debtAmount The amount of token to repay.\r\n     */\r\n    function removeDebt(\r\n        BaseWallet _wallet,\r\n        bytes32 _loanId,\r\n        address _debtToken,\r\n        uint256 _debtAmount\r\n    )\r\n        external\r\n        onlyWalletOwner(_wallet)\r\n        onlyWhenUnlocked(_wallet)\r\n    {\r\n        require(_debtToken == makerCdp.sai(), \"Maker: debt token must be DAI\");\r\n        removeDebt(_wallet, _loanId, _debtAmount, makerCdp, uniswapFactory);\r\n        emit DebtRemoved(address(_wallet), _loanId, _debtToken, _debtAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets information about a loan identified by its ID.\r\n     * @param _wallet The target wallet.\r\n     * @param _loanId The ID of the target CDP.\r\n     * @return a status [0: no loan, 1: loan is safe, 2: loan is unsafe and can be liquidated, 3: loan exists but we are unable to provide info] \r\n     * and a value (in ETH) representing the value that could still be borrowed when status = 1; or the value of the collateral that should be added to \r\n     * avoid liquidation when status = 2.      \r\n     */\r\n    function getLoan(\r\n        BaseWallet _wallet, \r\n        bytes32 _loanId\r\n    ) \r\n        external \r\n        view \r\n        returns (uint8 _status, uint256 _ethValue)\r\n    {\r\n        if(exists(_loanId, makerCdp)) {\r\n            return (3,0);\r\n        }\r\n        return (0,0);\r\n    }\r\n\r\n    /* *********************************** Maker wrappers ************************************* */\r\n\r\n    /* CDP actions */\r\n\r\n    /**\r\n     * @dev Lets the owner of a wallet open a new CDP. The owner must have enough ether \r\n     * in their wallet. The required amount of ether will be automatically converted to \r\n     * PETH and used as collateral in the CDP.\r\n     * @param _wallet The target wallet\r\n     * @param _pethCollateral The amount of PETH to lock as collateral in the CDP.\r\n     * @param _daiDebt The amount of DAI to draw from the CDP\r\n     * @param _makerCdp The Maker CDP contract\r\n     * @return The id of the created CDP.\r\n     */\r\n    function openCdp(\r\n        BaseWallet _wallet, \r\n        uint256 _pethCollateral, \r\n        uint256 _daiDebt,\r\n        IMakerCdp _makerCdp\r\n    ) \r\n        internal \r\n        returns (bytes32 _cup)\r\n    {\r\n        // Open CDP (CDP owner will be module)\r\n        _cup = _makerCdp.open();\r\n        // Transfer CDP ownership to wallet\r\n        _makerCdp.give(_cup, address(_wallet));\r\n        // Convert ETH to PETH & lock PETH into CDP\r\n        lockETH(_wallet, _cup, _pethCollateral, _makerCdp);\r\n        // Draw DAI from CDP\r\n        if(_daiDebt > 0) {\r\n            invokeWallet(_wallet, address(_makerCdp), 0, abi.encodeWithSelector(CDP_DRAW, _cup, _daiDebt));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Lets the owner of a CDP add more collateral to their CDP. The owner must have enough ether \r\n     * in their wallet. The required amount of ether will be automatically converted to \r\n     * PETH and locked in the CDP.\r\n     * @param _wallet The target wallet\r\n     * @param _cup The id of the CDP.\r\n     * @param _amount The amount of additional PETH to lock as collateral in the CDP.\r\n     * @param _makerCdp The Maker CDP contract\r\n     */\r\n    function addCollateral(\r\n        BaseWallet _wallet, \r\n        bytes32 _cup,\r\n        uint256 _amount,\r\n        IMakerCdp _makerCdp\r\n    ) \r\n        internal\r\n    {\r\n        // _wallet must be owner of CDP\r\n        require(address(_wallet) == _makerCdp.lad(_cup), \"CM: not CDP owner\");\r\n        // convert ETH to PETH & lock PETH into CDP\r\n        lockETH(_wallet, _cup, _amount, _makerCdp);  \r\n    }\r\n\r\n    /**\r\n     * @dev Lets the owner of a CDP remove some collateral from their CDP\r\n     * @param _wallet The target wallet\r\n     * @param _cup The id of the CDP.\r\n     * @param _amount The amount of PETH to remove from the CDP.\r\n     * @param _makerCdp The Maker CDP contract\r\n     */\r\n    function removeCollateral(\r\n        BaseWallet _wallet, \r\n        bytes32 _cup,\r\n        uint256 _amount,\r\n        IMakerCdp _makerCdp\r\n    ) \r\n        internal\r\n    {\r\n        // unlock PETH from CDP & convert PETH to ETH\r\n        freeETH(_wallet, _cup, _amount, _makerCdp);\r\n    }\r\n\r\n    /**\r\n     * @dev Lets the owner of a CDP draw more DAI from their CDP.\r\n     * @param _wallet The target wallet\r\n     * @param _cup The id of the CDP.\r\n     * @param _amount The amount of additional DAI to draw from the CDP.\r\n     * @param _makerCdp The Maker CDP contract\r\n     */\r\n    function addDebt(\r\n        BaseWallet _wallet, \r\n        bytes32 _cup,\r\n        uint256 _amount,\r\n        IMakerCdp _makerCdp\r\n    ) \r\n        internal\r\n    {\r\n        // draw DAI from CDP\r\n        invokeWallet(_wallet, address(_makerCdp), 0, abi.encodeWithSelector(CDP_DRAW, _cup, _amount));\r\n    }\r\n\r\n    /**\r\n     * @dev Lets the owner of a CDP partially repay their debt. The repayment is made up of \r\n     * the outstanding DAI debt (including the stability fee if non-zero) plus the MKR governance fee.\r\n     * The method will use the user's MKR tokens in priority and will, if needed, convert the required \r\n     * amount of ETH to cover for any missing MKR tokens.\r\n     * @param _wallet The target wallet\r\n     * @param _cup The id of the CDP.\r\n     * @param _amount The amount of DAI debt to repay.\r\n     * @param _makerCdp The Maker CDP contract\r\n     * @param _uniswapFactory The Uniswap Factory contract.\r\n     */\r\n    function removeDebt(\r\n        BaseWallet _wallet, \r\n        bytes32 _cup,\r\n        uint256 _amount,\r\n        IMakerCdp _makerCdp,\r\n        UniswapFactory _uniswapFactory\r\n    ) \r\n        internal\r\n    {\r\n        // _wallet must be owner of CDP\r\n        require(address(_wallet) == _makerCdp.lad(_cup), \"CM: not CDP owner\");\r\n        // get governance fee in MKR\r\n        uint256 mkrFee = governanceFeeInMKR(_cup, _amount, _makerCdp);\r\n        // get MKR balance\r\n        address mkrToken = _makerCdp.gov();\r\n        uint256 mkrBalance = ERC20(mkrToken).balanceOf(address(_wallet));\r\n        if (mkrBalance < mkrFee) {\r\n            // Not enough MKR => Convert some ETH into MKR with Uniswap\r\n            address mkrUniswap = _uniswapFactory.getExchange(mkrToken);\r\n            uint256 etherValueOfMKR = UniswapExchange(mkrUniswap).getEthToTokenOutputPrice(mkrFee - mkrBalance);\r\n            invokeWallet(_wallet, mkrUniswap, etherValueOfMKR, abi.encodeWithSelector(ETH_TOKEN_SWAP_OUTPUT, mkrFee - mkrBalance, block.timestamp));\r\n        }\r\n        \r\n        // get DAI balance\r\n        address daiToken =_makerCdp.sai();\r\n        uint256 daiBalance = ERC20(daiToken).balanceOf(address(_wallet));\r\n        if (daiBalance < _amount) {\r\n            // Not enough DAI => Convert some ETH into DAI with Uniswap\r\n            address daiUniswap = _uniswapFactory.getExchange(daiToken);\r\n            uint256 etherValueOfDAI = UniswapExchange(daiUniswap).getEthToTokenOutputPrice(_amount - daiBalance);\r\n            invokeWallet(_wallet, daiUniswap, etherValueOfDAI, abi.encodeWithSelector(ETH_TOKEN_SWAP_OUTPUT, _amount - daiBalance, block.timestamp));\r\n        }\r\n\r\n        // Approve DAI to let wipe() repay the DAI debt\r\n        invokeWallet(_wallet, daiToken, 0, abi.encodeWithSelector(ERC20_APPROVE, address(_makerCdp), _amount));\r\n        // Approve MKR to let wipe() pay the MKR governance fee\r\n        invokeWallet(_wallet, mkrToken, 0, abi.encodeWithSelector(ERC20_APPROVE, address(_makerCdp), mkrFee));\r\n        // repay DAI debt and MKR governance fee\r\n        invokeWallet(_wallet, address(_makerCdp), 0, abi.encodeWithSelector(CDP_WIPE, _cup, _amount));\r\n    }\r\n\r\n    /**\r\n     * @dev Lets the owner of a CDP close their CDP. The method will 1) repay all debt \r\n     * and governance fee, 2) free all collateral, and 3) delete the CDP.\r\n     * @param _wallet The target wallet\r\n     * @param _cup The id of the CDP.\r\n     * @param _makerCdp The Maker CDP contract\r\n     * @param _uniswapFactory The Uniswap Factory contract.\r\n     */\r\n    function closeCdp(\r\n        BaseWallet _wallet,\r\n        bytes32 _cup,\r\n        IMakerCdp _makerCdp,\r\n        UniswapFactory _uniswapFactory\r\n    ) \r\n        internal\r\n    {\r\n        // repay all debt (in DAI) + stability fee (in DAI) + governance fee (in MKR)\r\n        uint debt = daiDebt(_cup, _makerCdp);\r\n        if(debt > 0) removeDebt(_wallet, _cup, debt, _makerCdp, _uniswapFactory);\r\n        // free all ETH collateral\r\n        uint collateral = pethCollateral(_cup, _makerCdp);\r\n        if(collateral > 0) removeCollateral(_wallet, _cup, collateral, _makerCdp);\r\n        // shut the CDP\r\n        invokeWallet(_wallet, address(_makerCdp), 0, abi.encodeWithSelector(CDP_SHUT, _cup));\r\n    }\r\n\r\n    /* Convenience methods */\r\n\r\n    /**\r\n     * @dev Returns the amount of PETH collateral locked in a CDP.\r\n     * @param _cup The id of the CDP.\r\n     * @param _makerCdp The Maker CDP contract\r\n     * @return the amount of PETH locked in the CDP.\r\n     */\r\n    function pethCollateral(bytes32 _cup, IMakerCdp _makerCdp) public view returns (uint256) { \r\n        return _makerCdp.ink(_cup);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the amount of DAI debt (including the stability fee if non-zero) drawn from a CDP.\r\n     * @param _cup The id of the CDP.\r\n     * @param _makerCdp The Maker CDP contract\r\n     * @return the amount of DAI drawn from the CDP.\r\n     */\r\n    function daiDebt(bytes32 _cup, IMakerCdp _makerCdp) public returns (uint256) { \r\n        return _makerCdp.tab(_cup);\r\n    }\r\n\r\n    /**\r\n     * @dev Indicates whether a CDP is above the liquidation ratio.\r\n     * @param _cup The id of the CDP.\r\n     * @param _makerCdp The Maker CDP contract\r\n     * @return false if the CDP is in danger of being liquidated.\r\n     */\r\n    function isSafe(bytes32 _cup, IMakerCdp _makerCdp) public returns (bool) { \r\n        return _makerCdp.safe(_cup);\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if a CDP exists.\r\n     * @param _cup The id of the CDP.\r\n     * @param _makerCdp The Maker CDP contract\r\n     * @return true if the CDP exists, false otherwise.\r\n     */\r\n    function exists(bytes32 _cup, IMakerCdp _makerCdp) public view returns (bool) { \r\n        return _makerCdp.lad(_cup) != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Max amount of DAI that can still be drawn from a CDP while keeping it above the liquidation ratio. \r\n     * @param _cup The id of the CDP.\r\n     * @param _makerCdp The Maker CDP contract\r\n     * @return the amount of DAI that can still be drawn from a CDP while keeping it above the liquidation ratio. \r\n     */\r\n    function maxDaiDrawable(bytes32 _cup, IMakerCdp _makerCdp) public returns (uint256) {\r\n        uint256 maxTab = _makerCdp.ink(_cup).rmul(_makerCdp.tag()).rdiv(_makerCdp.vox().par()).rdiv(_makerCdp.mat());\r\n        return maxTab.sub(_makerCdp.tab(_cup));\r\n    }\r\n\r\n    /**\r\n     * @dev Min amount of collateral that needs to be added to a CDP to bring it above the liquidation ratio. \r\n     * @param _cup The id of the CDP.\r\n     * @param _makerCdp The Maker CDP contract\r\n     * @return the amount of collateral that needs to be added to a CDP to bring it above the liquidation ratio.\r\n     */\r\n    function minCollateralRequired(bytes32 _cup, IMakerCdp _makerCdp) public returns (uint256) {\r\n        uint256 minInk = _makerCdp.tab(_cup).rmul(_makerCdp.mat()).rmul(_makerCdp.vox().par()).rdiv(_makerCdp.tag());\r\n        return minInk.sub(_makerCdp.ink(_cup));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the governance fee in MKR.\r\n     * @param _cup The id of the CDP.\r\n     * @param _daiRefund The amount of DAI debt being repaid.\r\n     * @param _makerCdp The Maker CDP contract\r\n     * @return the governance fee in MKR\r\n     */\r\n    function governanceFeeInMKR(bytes32 _cup, uint256 _daiRefund, IMakerCdp _makerCdp) public returns (uint256 _fee) { \r\n        uint debt = daiDebt(_cup, _makerCdp);\r\n        if (debt == 0) return 0;\r\n        uint256 feeInDAI = _daiRefund.rmul(_makerCdp.rap(_cup).rdiv(debt));\r\n        (bytes32 daiPerMKR, bool ok) = _makerCdp.pep().peek();\r\n        if (ok && daiPerMKR != 0) _fee = feeInDAI.wdiv(uint(daiPerMKR));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total MKR governance fee to be paid before this CDP can be closed.\r\n     * @param _cup The id of the CDP.\r\n     * @param _makerCdp The Maker CDP contract\r\n     * @return the total governance fee in MKR\r\n     */\r\n    function totalGovernanceFeeInMKR(bytes32 _cup, IMakerCdp _makerCdp) external returns (uint256 _fee) { \r\n        return governanceFeeInMKR(_cup, daiDebt(_cup, _makerCdp), _makerCdp);\r\n    }\r\n\r\n    /**\r\n     * @dev Minimum amount of PETH that must be locked in a CDP for it to be deemed \"safe\"\r\n     * @param _cup The id of the CDP.\r\n     * @param _makerCdp The Maker CDP contract\r\n     * @return The minimum amount of PETH to lock in the CDP\r\n     */\r\n    function minRequiredCollateral(bytes32 _cup, IMakerCdp _makerCdp) public returns (uint256 _minCollateral) { \r\n        _minCollateral = daiDebt(_cup, _makerCdp)    // DAI debt\r\n            .rmul(_makerCdp.vox().par())         // x ~1 USD/DAI \r\n            .rmul(_makerCdp.mat())               // x 1.5\r\n            .rmul(1010000000000000000000000000) // x (1+1%) cushion\r\n            .rdiv(_makerCdp.tag());              // ÷ ~170 USD/PETH\r\n    }\r\n\r\n    /* *********************************** Utilities ************************************* */\r\n\r\n    /**\r\n     * @dev Converts a user's ETH into PETH and locks the PETH in a CDP\r\n     * @param _wallet The target wallet\r\n     * @param _cup The id of the CDP.\r\n     * @param _pethAmount The amount of PETH to buy and lock\r\n     * @param _makerCdp The Maker CDP contract\r\n     */\r\n    function lockETH(\r\n        BaseWallet _wallet, \r\n        bytes32 _cup,\r\n        uint256 _pethAmount,\r\n        IMakerCdp _makerCdp\r\n    ) \r\n        internal \r\n    {\r\n        // 1. Convert ETH to PETH\r\n        address wethToken = _makerCdp.gem();\r\n        // Get WETH/PETH rate\r\n        uint ethAmount = _makerCdp.ask(_pethAmount);\r\n        // ETH to WETH\r\n        invokeWallet(_wallet, wethToken, ethAmount, abi.encodeWithSelector(WETH_DEPOSIT));\r\n        // Approve WETH\r\n        invokeWallet(_wallet, wethToken, 0, abi.encodeWithSelector(ERC20_APPROVE, address(_makerCdp), ethAmount));\r\n        // WETH to PETH\r\n        invokeWallet(_wallet, address(_makerCdp), 0, abi.encodeWithSelector(CDP_JOIN, _pethAmount));\r\n\r\n        // 2. Lock PETH into CDP\r\n        address pethToken = _makerCdp.skr();\r\n        // Approve PETH\r\n        invokeWallet(_wallet, pethToken, 0, abi.encodeWithSelector(ERC20_APPROVE, address(_makerCdp), _pethAmount));\r\n        // lock PETH into CDP\r\n        invokeWallet(_wallet, address(_makerCdp), 0, abi.encodeWithSelector(CDP_LOCK, _cup, _pethAmount));\r\n    }\r\n\r\n    /**\r\n     * @dev Unlocks PETH from a user's CDP and converts it back to ETH\r\n     * @param _wallet The target wallet\r\n     * @param _cup The id of the CDP.\r\n     * @param _pethAmount The amount of PETH to unlock and sell\r\n     * @param _makerCdp The Maker CDP contract\r\n     */\r\n    function freeETH(\r\n        BaseWallet _wallet, \r\n        bytes32 _cup,\r\n        uint256 _pethAmount,\r\n        IMakerCdp _makerCdp\r\n    ) \r\n        internal \r\n    {\r\n        // 1. Unlock PETH\r\n\r\n        // Unlock PETH from CDP\r\n        invokeWallet(_wallet, address(_makerCdp), 0, abi.encodeWithSelector(CDP_FREE, _cup, _pethAmount));\r\n\r\n        // 2. Convert PETH to ETH\r\n        address wethToken = _makerCdp.gem();\r\n        address pethToken = _makerCdp.skr();\r\n        // Approve PETH\r\n        invokeWallet(_wallet, pethToken, 0, abi.encodeWithSelector(ERC20_APPROVE, address(_makerCdp), _pethAmount));\r\n        // PETH to WETH\r\n        invokeWallet(_wallet, address(_makerCdp), 0, abi.encodeWithSelector(CDP_EXIT, _pethAmount));\r\n        // Get WETH/PETH rate\r\n        uint ethAmount = _makerCdp.bid(_pethAmount);\r\n        // WETH to ETH\r\n        invokeWallet(_wallet, wethToken, 0, abi.encodeWithSelector(WETH_WITHDRAW, ethAmount));\r\n    }\r\n\r\n    /**\r\n     * @dev Conversion rate between DAI and MKR\r\n     * @param _makerCdp The Maker CDP contract\r\n     * @return The amount of DAI per MKR\r\n     */\r\n    function daiPerMkr(IMakerCdp _makerCdp) internal view returns (uint256 _daiPerMKR) {\r\n        (bytes32 daiPerMKR_, bool ok) = _makerCdp.pep().peek();\r\n        require(ok && daiPerMKR_ != 0, \"LM: invalid DAI/MKR rate\");\r\n        _daiPerMKR = uint256(daiPerMKR_);\r\n    }\r\n\r\n    /**\r\n     * @dev Utility method to invoke a wallet\r\n     * @param _wallet The wallet to invoke.\r\n     * @param _to The target address.\r\n     * @param _value The value.\r\n     * @param _data The data.\r\n     */\r\n    function invokeWallet(BaseWallet _wallet, address _to, uint256 _value, bytes memory _data) internal {\r\n        _wallet.invoke(_to, _value, _data);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_cup\",\"type\":\"bytes32\"},{\"name\":\"_makerCdp\",\"type\":\"address\"}],\"name\":\"isSafe\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cup\",\"type\":\"bytes32\"},{\"name\":\"_makerCdp\",\"type\":\"address\"}],\"name\":\"daiDebt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cup\",\"type\":\"bytes32\"},{\"name\":\"_makerCdp\",\"type\":\"address\"}],\"name\":\"totalGovernanceFeeInMKR\",\"outputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cup\",\"type\":\"bytes32\"},{\"name\":\"_makerCdp\",\"type\":\"address\"}],\"name\":\"minCollateralRequired\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_module\",\"type\":\"address\"}],\"name\":\"addModule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cup\",\"type\":\"bytes32\"},{\"name\":\"_makerCdp\",\"type\":\"address\"}],\"name\":\"pethCollateral\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cup\",\"type\":\"bytes32\"},{\"name\":\"_makerCdp\",\"type\":\"address\"}],\"name\":\"minRequiredCollateral\",\"outputs\":[{\"name\":\"_minCollateral\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_loanId\",\"type\":\"bytes32\"}],\"name\":\"getLoan\",\"outputs\":[{\"name\":\"_status\",\"type\":\"uint8\"},{\"name\":\"_ethValue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cup\",\"type\":\"bytes32\"},{\"name\":\"_daiRefund\",\"type\":\"uint256\"},{\"name\":\"_makerCdp\",\"type\":\"address\"}],\"name\":\"governanceFeeInMKR\",\"outputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_loanId\",\"type\":\"bytes32\"},{\"name\":\"_debtToken\",\"type\":\"address\"},{\"name\":\"_debtAmount\",\"type\":\"uint256\"}],\"name\":\"addDebt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniswapFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"makerCdp\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recoverToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cup\",\"type\":\"bytes32\"},{\"name\":\"_makerCdp\",\"type\":\"address\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cup\",\"type\":\"bytes32\"},{\"name\":\"_makerCdp\",\"type\":\"address\"}],\"name\":\"maxDaiDrawable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_loanId\",\"type\":\"bytes32\"}],\"name\":\"closeLoan\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_signatures\",\"type\":\"bytes\"},{\"name\":\"_gasPrice\",\"type\":\"uint256\"},{\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_loanId\",\"type\":\"bytes32\"},{\"name\":\"_collateral\",\"type\":\"address\"},{\"name\":\"_collateralAmount\",\"type\":\"uint256\"}],\"name\":\"removeCollateral\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_collateral\",\"type\":\"address\"},{\"name\":\"_collateralAmount\",\"type\":\"uint256\"},{\"name\":\"_debtToken\",\"type\":\"address\"},{\"name\":\"_debtAmount\",\"type\":\"uint256\"}],\"name\":\"openLoan\",\"outputs\":[{\"name\":\"_loanId\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_loanId\",\"type\":\"bytes32\"},{\"name\":\"_collateral\",\"type\":\"address\"},{\"name\":\"_collateralAmount\",\"type\":\"uint256\"}],\"name\":\"addCollateral\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"relayer\",\"outputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"guardianStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_loanId\",\"type\":\"bytes32\"},{\"name\":\"_debtToken\",\"type\":\"address\"},{\"name\":\"_debtAmount\",\"type\":\"uint256\"}],\"name\":\"removeDebt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"},{\"name\":\"_guardianStorage\",\"type\":\"address\"},{\"name\":\"_makerCdp\",\"type\":\"address\"},{\"name\":\"_uniswapFactory\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"signedHash\",\"type\":\"bytes32\"}],\"name\":\"TransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"ModuleCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"ModuleInitialised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_wallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_loanId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_collateral\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_collateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_debtToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_debtAmount\",\"type\":\"uint256\"}],\"name\":\"LoanOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_wallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_loanId\",\"type\":\"bytes32\"}],\"name\":\"LoanClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_wallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_loanId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_collateral\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_collateralAmount\",\"type\":\"uint256\"}],\"name\":\"CollateralAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_wallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_loanId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_collateral\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_collateralAmount\",\"type\":\"uint256\"}],\"name\":\"CollateralRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_wallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_loanId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_debtToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_debtAmount\",\"type\":\"uint256\"}],\"name\":\"DebtAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_wallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_loanId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_debtToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_debtAmount\",\"type\":\"uint256\"}],\"name\":\"DebtRemoved\",\"type\":\"event\"}]","ContractName":"MakerManager","CompilerVersion":"v0.5.4+commit.9549d8ff","OptimizationUsed":"1","Runs":"999","ConstructorArguments":"000000000000000000000000c17d432bd8e8850fd7b32b0270f5afac65db010500000000000000000000000044da3a8051ba88eab0440db3779cab9d679ae76f000000000000000000000000448a5065aebb8e423f0896e6c5d525c040f59af3000000000000000000000000c0a47dfe034b400b47bdad5fecda2621de6c4d95","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://3bf4bedfff4a0e165cdef420704ae6d0f63199fb310cca443144b76dcd0d0272"}]}