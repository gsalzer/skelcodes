{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.7;\r\n\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\ninterface Storage {\r\n    function allowOnlyDappContracts(address caller) external view returns (bool);\r\n}\r\n\r\n\r\ninterface SecondaryStorageInterface {\r\n    function onlyProjectControllers(address caller, uint256 pid) external view returns (bool);\r\n}\r\n\r\n\r\ninterface AffiliateEscrowInterface {\r\n    function deposit(address affiliate) external payable;\r\n    function getAffiliatePayment (address affiliate) external view returns (uint256);\r\n    function withdraw(address to) external;\r\n    function updateControllerState(address payable projectCtrl, address payable refundCtrl, address payable disputeCtrl, address payable utilityCtrl) external;\r\n}\r\n\r\n\r\ninterface Logger {\r\n    function emitAffiliateDeposit(address affiliate, uint256 weiAmount) external;\r\n    function emitAffiliateWithdraw(address affiliate, uint256 weiAmount) external;\r\n}\r\n\r\n\r\ncontract AffiliateEscrow {\r\n    using SafeMath for uint256;\r\n\r\n    Storage data;\r\n    Logger eventLogger;\r\n\r\n    mapping(address => uint256) private payments;\r\n\r\n    constructor(address storageAddress, address eventLoggerContract) public {\r\n        data = Storage(storageAddress);\r\n        eventLogger = Logger(eventLoggerContract);\r\n    }\r\n\r\n    modifier onlyNetworkContracts {\r\n        if (data.allowOnlyDappContracts(msg.sender)) {\r\n            _;\r\n        } else {\r\n            revert(\"Not allowed\");\r\n        }\r\n    }\r\n\r\n    function deposit(address affiliate) external payable onlyNetworkContracts {\r\n        require (msg.value > 0, \"Not a valid deposit\");\r\n        uint256 amount = msg.value;\r\n        payments[affiliate] = payments[affiliate].add(amount);\r\n        eventLogger.emitAffiliateDeposit(affiliate, amount);\r\n    }\r\n\r\n    function getAffiliatePayment(address affiliate) external view returns (uint256) {\r\n        return payments[affiliate];\r\n    }\r\n\r\n    function withdraw(address payable to)\r\n        external\r\n        onlyNetworkContracts\r\n    {\r\n        uint256 amount = payments[to];\r\n        payments[to] = 0;\r\n        require(amount > 0, \"No funds\");\r\n        to.transfer(amount);\r\n        eventLogger.emitAffiliateWithdraw(to, amount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"affiliate\",\"type\":\"address\"}],\"name\":\"getAffiliatePayment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"affiliate\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"storageAddress\",\"type\":\"address\"},{\"name\":\"eventLoggerContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"AffiliateEscrow","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"500000","ConstructorArguments":"00000000000000000000000057d504f3ebcc43b8a894a7933676eb17236cc35d000000000000000000000000358994ca3f907b689c4177790a2cb424a3d2bcdf","Library":"","SwarmSource":"bzzr://cfd92d7188dd01bdf1c169d4eee704d579f0b19ebc448118da91e2929733e5af"}]}