{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n *  \r\n * \r\n *           _               _       _             \r\n *     /\\   | |             | |     | |            \r\n *    /  \\  | |__  ___  ___ | |_   _| |_ _   _ ___ \r\n *   / /\\ \\ | '_ \\/ __|/ _ \\| | | | | __| | | / __|\r\n *  / ____ \\| |_) \\__ \\ (_) | | |_| | |_| |_| \\__ \\\r\n * /_/    \\_\\_.__/|___/\\___/|_|\\__,_|\\__|\\__,_|___/\r\n * \r\n */ \r\n\r\n\r\n\r\npragma solidity 0.5.11;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n  address public ownerWallet;\r\n  address public adminWallet;\r\n  uint adminPersent;\r\n  \r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n    ownerWallet =   0xDCB378Ccb0df00D9000968763DC2B2FD68aA2D9f;\r\n    adminWallet =   0xf1562446F4aC83D4e0263cd242955954c171b387;\r\n    adminPersent =  10;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, \"only for owner\");\r\n    _;\r\n  }\r\n\r\n}\r\n\r\ncontract ABSOLUTUS is Ownable {\r\n\r\n    event regLevelEvent(address indexed _user, address indexed _referrer, uint _time);\r\n    event buyLevelEvent(address indexed _user, uint _level, uint _time);\r\n    event prolongateLevelEvent(address indexed _user, uint _level, uint _time);\r\n    event getMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time, uint _price);\r\n    event lostMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time, uint _price);\r\n    //------------------------------\r\n\r\n    mapping (uint => uint) public LEVEL_COST;\r\n    uint REFERRER_1_LEVEL_LIMIT = 3;\r\n    uint PERIOD_LENGTH = 365 days;\r\n\r\n\r\n    struct UserStruct {\r\n        bool isExist;\r\n        uint id;\r\n        uint referrerID;\r\n        address[] referral;\r\n        mapping (uint => uint) levelExpired;\r\n    }\r\n\r\n    mapping (address => UserStruct) public users;\r\n    mapping (uint => address) public userList;\r\n    uint public currUserID = 0;\r\n\r\n\r\n\r\n\r\n    constructor() public {\r\n\r\n        LEVEL_COST[1] = 0.5 ether;\r\n        LEVEL_COST[2] = 1 ether;\r\n        LEVEL_COST[3] = 2 ether;\r\n        LEVEL_COST[4] = 4 ether;\r\n        LEVEL_COST[5] = 16 ether;\r\n        LEVEL_COST[6] = 32 ether;\r\n        LEVEL_COST[7] = 64 ether;\r\n        LEVEL_COST[8] = 128 ether;\r\n\r\n        UserStruct memory userStruct;\r\n        currUserID++;\r\n\r\n        userStruct = UserStruct({\r\n            isExist : true,\r\n            id : currUserID,\r\n            referrerID : 0,\r\n            referral : new address[](0)\r\n        });\r\n        users[ownerWallet] = userStruct;\r\n        userList[currUserID] = ownerWallet;\r\n\r\n        users[ownerWallet].levelExpired[1] = 2147483647;\r\n        users[ownerWallet].levelExpired[2] = 2147483647;\r\n        users[ownerWallet].levelExpired[3] = 2147483647;\r\n        users[ownerWallet].levelExpired[4] = 2147483647;\r\n        users[ownerWallet].levelExpired[5] = 2147483647;\r\n        users[ownerWallet].levelExpired[6] = 2147483647;\r\n        users[ownerWallet].levelExpired[7] = 2147483647;\r\n        users[ownerWallet].levelExpired[8] = 2147483647;\r\n    }\r\n\r\n    function () external payable {\r\n\r\n        uint level;\r\n\r\n        if(msg.value == LEVEL_COST[1]){\r\n            level = 1;\r\n        }else if(msg.value == LEVEL_COST[2]){\r\n            level = 2;\r\n        }else if(msg.value == LEVEL_COST[3]){\r\n            level = 3;\r\n        }else if(msg.value == LEVEL_COST[4]){\r\n            level = 4;\r\n        }else if(msg.value == LEVEL_COST[5]){\r\n            level = 5;\r\n        }else if(msg.value == LEVEL_COST[6]){\r\n            level = 6;\r\n        }else if(msg.value == LEVEL_COST[7]){\r\n            level = 7;\r\n        }else if(msg.value == LEVEL_COST[8]){\r\n            level = 8;\r\n        }else {\r\n            revert('Incorrect Value send');\r\n        }\r\n\r\n        if(users[msg.sender].isExist){\r\n            buyLevel(level);\r\n        } else if(level == 1) {\r\n            uint refId = 0;\r\n            address referrer = bytesToAddress(msg.data);\r\n\r\n            if (users[referrer].isExist){\r\n                refId = users[referrer].id;\r\n            } else {\r\n                revert('Incorrect referrer');\r\n            }\r\n\r\n            regUser(refId);\r\n        } else {\r\n            revert(\"Please buy first level for 0.5 ETH\");\r\n        }\r\n    }\r\n\r\n    function regUser(uint _referrerID) public payable {\r\n        require(!users[msg.sender].isExist, 'User exist');\r\n\r\n        require(_referrerID > 0 && _referrerID <= currUserID, 'Incorrect referrer Id');\r\n\r\n        require(msg.value==LEVEL_COST[1], 'Incorrect Value');\r\n\r\n\r\n        if(users[userList[_referrerID]].referral.length >= REFERRER_1_LEVEL_LIMIT)\r\n        {\r\n            _referrerID = users[findFreeReferrer(userList[_referrerID])].id;\r\n        }\r\n\r\n\r\n        UserStruct memory userStruct;\r\n        currUserID++;\r\n\r\n        userStruct = UserStruct({\r\n            isExist : true,\r\n            id : currUserID,\r\n            referrerID : _referrerID,\r\n            referral : new address[](0)\r\n        });\r\n\r\n        users[msg.sender] = userStruct;\r\n        userList[currUserID] = msg.sender;\r\n\r\n        users[msg.sender].levelExpired[1] = now + PERIOD_LENGTH;\r\n        users[msg.sender].levelExpired[2] = 0;\r\n        users[msg.sender].levelExpired[3] = 0;\r\n        users[msg.sender].levelExpired[4] = 0;\r\n        users[msg.sender].levelExpired[5] = 0;\r\n        users[msg.sender].levelExpired[6] = 0;\r\n        users[msg.sender].levelExpired[7] = 0;\r\n        users[msg.sender].levelExpired[8] = 0;\r\n\r\n        users[userList[_referrerID]].referral.push(msg.sender);\r\n\r\n        payForLevel(1, msg.sender);\r\n\r\n        emit regLevelEvent(msg.sender, userList[_referrerID], now);\r\n    }\r\n\r\n    function buyLevel(uint _level) public payable {\r\n        require(users[msg.sender].isExist, 'User not exist');\r\n\r\n        require( _level>0 && _level<=8, 'Incorrect level');\r\n\r\n        if(_level == 1){\r\n            require(msg.value==LEVEL_COST[1], 'Incorrect Value');\r\n            users[msg.sender].levelExpired[1] += PERIOD_LENGTH;\r\n        } else {\r\n            require(msg.value==LEVEL_COST[_level], 'Incorrect Value');\r\n\r\n            for(uint l =_level-1; l>0; l-- ){\r\n                require(users[msg.sender].levelExpired[l] >= now, 'Buy the previous level');\r\n            }\r\n\r\n            if(users[msg.sender].levelExpired[_level] == 0){\r\n                users[msg.sender].levelExpired[_level] = now + PERIOD_LENGTH;\r\n            } else {\r\n                users[msg.sender].levelExpired[_level] += PERIOD_LENGTH;\r\n            }\r\n        }\r\n        payForLevel(_level, msg.sender);\r\n        emit buyLevelEvent(msg.sender, _level, now);\r\n    }\r\n\r\n    function payForLevel(uint _level, address _user) internal {\r\n\r\n        address referer;\r\n        address referer1;\r\n        address referer2;\r\n        address referer3;\r\n        if(_level == 1 || _level == 5){\r\n            referer = userList[users[_user].referrerID];\r\n        } else if(_level == 2 || _level == 6){\r\n            referer1 = userList[users[_user].referrerID];\r\n            referer = userList[users[referer1].referrerID];\r\n        } else if(_level == 3 || _level == 7){\r\n            referer1 = userList[users[_user].referrerID];\r\n            referer2 = userList[users[referer1].referrerID];\r\n            referer = userList[users[referer2].referrerID];\r\n        } else if(_level == 4 || _level == 8){\r\n            referer1 = userList[users[_user].referrerID];\r\n            referer2 = userList[users[referer1].referrerID];\r\n            referer3 = userList[users[referer2].referrerID];\r\n            referer = userList[users[referer3].referrerID];\r\n        }\r\n\r\n        if(!users[referer].isExist){\r\n            referer = userList[1];\r\n        }\r\n        \r\n        uint amountToUser;\r\n        uint amountToAdmin;\r\n        \r\n        amountToAdmin = LEVEL_COST[_level] / 100 * adminPersent;\r\n        amountToUser = LEVEL_COST[_level] - amountToAdmin;\r\n            \r\n        if(users[referer].levelExpired[_level] >= now ){\r\n            bool result;\r\n            \r\n            result = address(uint160(referer)).send(amountToUser);\r\n            result = address(uint160(adminWallet)).send(amountToAdmin);\r\n            \r\n            emit getMoneyForLevelEvent(referer, msg.sender, _level, now, amountToUser);\r\n        } else {\r\n            emit lostMoneyForLevelEvent(referer, msg.sender, _level, now, amountToUser);\r\n            payForLevel(_level,referer);\r\n        }\r\n    }\r\n\r\n    function findFreeReferrer(address _user) public view returns(address) {\r\n        if(users[_user].referral.length < REFERRER_1_LEVEL_LIMIT){\r\n            return _user;\r\n        }\r\n\r\n        address[] memory referrals = new address[](363);\r\n        referrals[0] = users[_user].referral[0]; \r\n        referrals[1] = users[_user].referral[1];\r\n        referrals[2] = users[_user].referral[2];\r\n\r\n        address freeReferrer;\r\n        bool noFreeReferrer = true;\r\n\r\n        for(uint i =0; i<363;i++){\r\n            if(users[referrals[i]].referral.length == REFERRER_1_LEVEL_LIMIT){\r\n                if(i<120){\r\n                    referrals[(i+1)*3] = users[referrals[i]].referral[0];\r\n                    referrals[(i+1)*3+1] = users[referrals[i]].referral[1];\r\n                    referrals[(i+1)*3+2] = users[referrals[i]].referral[2];\r\n                }\r\n            }else{\r\n                noFreeReferrer = false;\r\n                freeReferrer = referrals[i];\r\n                break;\r\n            }\r\n        }\r\n        require(!noFreeReferrer, 'No Free Referrer');\r\n        return freeReferrer;\r\n\r\n    }\r\n\r\n    function viewUserReferral(address _user) public view returns(address[] memory) {\r\n        return users[_user].referral;\r\n    }\r\n\r\n    function viewUserLevelExpired(address _user, uint _level) public view returns(uint) {\r\n        return users[_user].levelExpired[_level];\r\n    }\r\n    function bytesToAddress(bytes memory bys) private pure returns (address  addr ) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"findFreeReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewUserReferral\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LEVEL_COST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referrerID\",\"type\":\"uint256\"}],\"name\":\"regUser\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"viewUserLevelExpired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"buyLevel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"regLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"buyLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"prolongateLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"getMoneyForLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"lostMoneyForLevelEvent\",\"type\":\"event\"}]","ContractName":"ABSOLUTUS","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://9bbd5c4f9744ac7b20adf1ae0c9621e91a7a3ad983b4855a32d02e251f37e1d4"}]}