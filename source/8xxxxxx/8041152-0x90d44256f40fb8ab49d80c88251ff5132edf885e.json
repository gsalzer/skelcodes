{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.7;\r\n\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\ninterface Storage {\r\n    function allowOnlyDappContracts(address caller) external returns (bool);\r\n}\r\n\r\n\r\ninterface SecondStorage {\r\n    function onlyProjectControllers(address caller, uint256 pid) external view returns (bool);\r\n}\r\n\r\n\r\n////////////////////////////\r\n//  RefundEther *** RETH\r\n///////////////////////////\r\n\r\n\r\ninterface ERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/* Internal non-tradable token of the dApp used as an indicator for a secured amount of funds.\r\nIt’s pegged at 1:1 ratio to Ether - 1 ETH = 1 rETH and 1 wei = 1 rwei. The total supply when\r\ndeployed is 1 rwei and the only way to mint new tokens is by the creation of new insurance.\r\n\r\nThe internal RefundEther token is used ONLY as an indication unit, meaning that at no point\r\nin the dApp’s functionality there is a conversion of funds from ETH to rETH. All funds are stored\r\nand refunded only in Ether. */\r\n\r\ncontract RefundEther is ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    Storage data;\r\n    SecondStorage secondStorage;\r\n\r\n    string private  _name;\r\n    string private  _symbol;\r\n    uint8 private   _decimals;\r\n    uint256 private _totalSupply;\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    mapping (address => uint256) private frozenAmount;\r\n\r\n    mapping (address => mapping(uint256 => uint256)) private protectedAmount;\r\n\r\n    constructor(address dataStorage, address secondStorageAddr) public {\r\n        _decimals = 18;\r\n        _totalSupply = 1;\r\n        _name = \"RefundEther\";\r\n        _symbol = \"RETH\";\r\n\r\n        _balances[msg.sender] = _totalSupply;\r\n        data = Storage(dataStorage);\r\n        secondStorage = SecondStorage(secondStorageAddr);\r\n    }\r\n\r\n    modifier onlyValidControllers(uint256 pid) {\r\n        require(secondStorage.onlyProjectControllers(msg.sender, pid), \"Not a valid controller\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyNetworkContracts {\r\n        if (data.allowOnlyDappContracts(msg.sender)) {\r\n            _;\r\n        } else {\r\n            revert(\"Only network contracts allowed\");\r\n        }\r\n    }\r\n\r\n    function totalSupply() external view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    function transfer(address to, uint value)\r\n        external\r\n        onlyNetworkContracts\r\n        returns (bool success)\r\n    {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function transferFrom(address from, address to, uint value)\r\n        external\r\n        onlyNetworkContracts\r\n        returns (bool success)\r\n    {\r\n        require (_allowed[from][msg.sender] >= value, \"Insufficient RefundEther allowance\");\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint value)\r\n        external\r\n        onlyNetworkContracts\r\n        returns (bool success)\r\n    {\r\n        require(_freeRefundEtherTokens(msg.sender) >= value, \"Insufficient RefundEther balance\");\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function getAmountOfSecuredEther(\r\n        address investor,\r\n        uint256 projectId\r\n    )\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (investor != address(0)) {\r\n            return protectedAmount[investor][projectId];\r\n        } else {\r\n            return protectedAmount[msg.sender][projectId];\r\n        }\r\n    }\r\n\r\n    function setAmountOfSecuredEther(\r\n        address investor,\r\n        uint256 projectId,\r\n        uint256 amount\r\n    )\r\n        external\r\n        onlyValidControllers(projectId)\r\n        returns (bool success)\r\n    {\r\n        protectedAmount[investor][projectId] = amount;\r\n        frozenAmount[msg.sender] = frozenAmount[msg.sender].add(amount);\r\n        return true;\r\n    }\r\n\r\n    function mint(address to, uint256 mintedAmount) external onlyNetworkContracts {\r\n        _balances[to] = _balances[to].add(mintedAmount);\r\n        _totalSupply = _totalSupply.add(mintedAmount);\r\n    }\r\n\r\n    function burn(address _tokensOwner, uint256 _value)\r\n        public\r\n        onlyNetworkContracts\r\n        returns (bool success)\r\n    {\r\n        require(_balances[_tokensOwner] >= _value, \"Insufficient RefundEther balance\");\r\n        _balances[_tokensOwner] = _balances[_tokensOwner].sub(_value);\r\n        _totalSupply = _totalSupply.sub(_value);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require (_freeRefundEtherTokens(_from) >= _value, \"Insufficient RefundEther balance\");\r\n        _balances[_from] = _balances[_from].sub(_value);\r\n        _balances[_to] = _balances[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    function _freeRefundEtherTokens(address owner)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _balances[owner].sub(frozenAmount[owner]);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"},{\"name\":\"projectId\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setAmountOfSecuredEther\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokensOwner\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"},{\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"getAmountOfSecuredEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"dataStorage\",\"type\":\"address\"},{\"name\":\"secondStorageAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"RefundEther","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"500000","ConstructorArguments":"00000000000000000000000057d504f3ebcc43b8a894a7933676eb17236cc35d000000000000000000000000ac5ae06a85b710c1c68708bb04b80f2d81c00617","Library":"","SwarmSource":"bzzr://3e8e77e9233d439991bb44e31f42de01299632da05533777a472fa0515c74c2f"}]}