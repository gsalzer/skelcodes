{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.9;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Claimable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract Claimable {\r\n    address public owner;\r\n    address public pendingOwner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n    * @dev The Claimable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Modifier throws if called by any account other than the pendingOwner.\r\n    */\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == pendingOwner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to set the pendingOwner address.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        pendingOwner = newOwner;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the pendingOwner address to finalize the transfer.\r\n    */\r\n    function claimOwnership() public onlyPendingOwner {\r\n        emit OwnershipTransferred(owner, pendingOwner);\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n}\r\n\r\n/**\r\n* @title Keeper\r\n*\r\n* @dev Implements the early investors' SWG tokens locking mechanism.\r\n* To avoid momentary dumping SWG token, the Keeper holds the early\r\n* investor's funds frozen until unFreezeStartDate. Between unFreezeStartDate\r\n* and totalUnFreezeDate, the contract allows holder to withdraw amount\r\n* proportional to time passed. After totalUnFreezeDate the funds get totally\r\n* unlocked and the early investor can spend the entire amount at any moment.\r\n*/\r\ncontract Keeper is Claimable {\r\n    using SafeMath for uint256;\r\n    IERC20 public token;\r\n    // the date when withdrawals become possible\r\n    uint256 public unFreezeStartDate;\r\n    // the date when all funds get unfrozen\r\n    uint256 public totalUnFreezeDate;\r\n    // the records about individual balances\r\n    mapping(address => uint256) public balances;\r\n    // the records about already withdrawn amounts\r\n    mapping(address => uint256) public withdrawnBalances;\r\n    // the sum of registered balance\r\n    uint256 public totalBalance;\r\n\r\n    constructor(\r\n        IERC20 _token,\r\n        uint256 _unFreezeStartDate,\r\n        uint256 _totalUnFreezeDate\r\n    ) public {\r\n        // solhint-disable-next-line not-rely-on-time\r\n        require(_unFreezeStartDate >= block.timestamp);\r\n        require(_totalUnFreezeDate > _unFreezeStartDate);\r\n        token = _token;\r\n        unFreezeStartDate = _unFreezeStartDate;\r\n        totalUnFreezeDate = _totalUnFreezeDate;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds the individual holder's balance\r\n     *\r\n     * Called by the backend of payout engine per holder (after token got transferred on the Keeper)\r\n     */\r\n    function addBalance(address _to, uint256 _value) public onlyOwner {\r\n        require(_to != address(0));\r\n        require(_value > 0);\r\n        require(totalBalance.add(_value)\r\n                <= token.balanceOf(address(this)), \"not enough tokens\");\r\n        balances[_to] = balances[_to].add(_value);\r\n        totalBalance = totalBalance.add(_value);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraws the allowed amount of tokens\r\n     *\r\n     * Called by the investor through Keeper Dapp or Etherscan write interface\r\n     */\r\n    function withdraw(address _to, uint256 _value) public {\r\n        require(_to != address(0));\r\n        require(_value > 0);\r\n        require(unFreezeStartDate < now, \"not unfrozen yet\");\r\n        require(\r\n            (getUnfrozenAmount(msg.sender).sub(withdrawnBalances[msg.sender]))\r\n            >= _value\r\n        );\r\n        withdrawnBalances[msg.sender] = withdrawnBalances[msg.sender].add(_value);\r\n        totalBalance = totalBalance.sub(_value);\r\n        token.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Shows the amount of tokens allowed to withdraw\r\n     *\r\n     * Called by the investor through Keeper Dapp or Etherscan write interface\r\n     */\r\n    function getUnfrozenAmount(address _holder) public view returns (uint256) {\r\n        if (now > unFreezeStartDate) {\r\n            if (now > totalUnFreezeDate) {\r\n                return balances[_holder];\r\n            }\r\n            uint256 partialFreezePeriodLen =\r\n                totalUnFreezeDate.sub(unFreezeStartDate);\r\n            uint256 secondsSincePeriodStart = now.sub(unFreezeStartDate);\r\n            uint256 amount = balances[_holder]\r\n                .mul(secondsSincePeriodStart)\r\n                .div(partialFreezePeriodLen);\r\n            return amount;\r\n        }\r\n        return 0;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unFreezeStartDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"getUnfrozenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawnBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUnFreezeDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_unFreezeStartDate\",\"type\":\"uint256\"},{\"name\":\"_totalUnFreezeDate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Keeper","CompilerVersion":"v0.5.9+commit.e560f70d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000085e5cc7bb799b5abe00fd8ebb3edd4ff095789b9000000000000000000000000000000000000000000000000000000005efbd2000000000000000000000000000000000000000000000000000000000060dd0580","Library":"","SwarmSource":"bzzr://05aa72770911fc8c6dae4290590c395323653b933457ad51efacdaa803b7cd7b"}]}