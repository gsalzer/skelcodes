{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.2;\r\n\r\ncontract IERC20Token {\r\n    function balanceOf(address _owner) public view returns (uint);\r\n    function allowance(address _owner, address _spender) public view returns (uint);\r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n    function approve(address _spender, uint _value) public returns (bool success);\r\n    function totalSupply() public view returns (uint);\r\n}\r\n\r\ncontract IDSToken is IERC20Token {\r\n    function mint(address _account, uint _value) public;\r\n    function burn(address _account, uint _value) public;\r\n}\r\n\r\ncontract IDSWrappedToken is IERC20Token {\r\n    function mint(address _account, uint _value) public;\r\n    function burn(address _account, uint _value) public;\r\n    function wrap(address _dst, uint _amount) public returns (uint);\r\n    function unwrap(address _dst, uint _amount) public returns (uint);\r\n    function changeByMultiple(uint _amount) public view returns (uint);\r\n    function reverseByMultiple(uint _xAmount) public view returns (uint);\r\n    function getSrcERC20() public view returns (address);\r\n}\r\n\r\ncontract IDFStore {\r\n\r\n    function getSectionMinted(uint _position) public view returns (uint);\r\n    function addSectionMinted(uint _amount) public;\r\n    function addSectionMinted(uint _position, uint _amount) public;\r\n    function setSectionMinted(uint _amount) public;\r\n    function setSectionMinted(uint _position, uint _amount) public;\r\n\r\n    function getSectionBurned(uint _position) public view returns (uint);\r\n    function addSectionBurned(uint _amount) public;\r\n    function addSectionBurned(uint _position, uint _amount) public;\r\n    function setSectionBurned(uint _amount) public;\r\n    function setSectionBurned(uint _position, uint _amount) public;\r\n\r\n    function getSectionToken(uint _position) public view returns (address[] memory);\r\n    function getSectionWeight(uint _position) public view returns (uint[] memory);\r\n    function getSectionData(uint _position) public view returns (uint, uint, uint, address[] memory, uint[] memory);\r\n    function getBackupSectionData(uint _position) public view returns (uint, address[] memory, uint[] memory);\r\n    function getBackupSectionIndex(uint _position) public view returns (uint);\r\n    function setBackupSectionIndex(uint _position, uint _backupIdx) public;\r\n\r\n    function setSection(address[] memory _wrappedTokens, uint[] memory _weight) public;\r\n    function setBackupSection(uint _position, address[] memory _tokens, uint[] memory _weight) public;\r\n    function burnSectionMoveon() public;\r\n\r\n    function getMintingToken(address _token) public view returns (bool);\r\n    function setMintingToken(address _token, bool _flag) public;\r\n    function getMintedToken(address _token) public view returns (bool);\r\n    function setMintedToken(address _token, bool _flag) public;\r\n    function getBackupToken(address _token) public view returns (address);\r\n    function setBackupToken(address _token, address _backupToken) public;\r\n    function getMintedTokenList() public view returns (address[] memory);\r\n\r\n    function getMintPosition() public view returns (uint);\r\n    function getBurnPosition() public view returns (uint);\r\n\r\n    function getTotalMinted() public view returns (uint);\r\n    function addTotalMinted(uint _amount) public;\r\n    function setTotalMinted(uint _amount) public;\r\n    function getTotalBurned() public view returns (uint);\r\n    function addTotalBurned(uint _amount) public;\r\n    function setTotalBurned(uint _amount) public;\r\n    function getMinBurnAmount() public view returns (uint);\r\n    function setMinBurnAmount(uint _amount) public;\r\n\r\n    function getTokenBalance(address _tokenID) public view returns (uint);\r\n    function setTokenBalance(address _tokenID, uint _amount) public;\r\n    function getResUSDXBalance(address _tokenID) public view returns (uint);\r\n    function setResUSDXBalance(address _tokenID, uint _amount) public;\r\n    function getDepositorBalance(address _depositor, address _tokenID) public view returns (uint);\r\n    function setDepositorBalance(address _depositor, address _tokenID, uint _amount) public;\r\n\r\n    function getFeeRate(uint ct) public view returns (uint);\r\n    function setFeeRate(uint ct, uint rate) public;\r\n    function getTypeToken(uint tt) public view returns (address);\r\n    function setTypeToken(uint tt, address _tokenID) public;\r\n    function getTokenMedian(address _tokenID) public view returns (address);\r\n    function setTokenMedian(address _tokenID, address _median) public;\r\n\r\n    function setTotalCol(uint _amount) public;\r\n    function getTotalCol() public view returns (uint);\r\n\r\n    function setWrappedToken(address _srcToken, address _wrappedToken) public;\r\n    function getWrappedToken(address _srcToken) public view returns (address);\r\n}\r\n\r\ncontract IDFPool {\r\n    function transferOut(address _tokenID, address _to, uint _amount) public returns (bool);\r\n    function transferFromSender(address _tokenID, address _from, uint _amount) public returns (bool);\r\n    function transferToCol(address _tokenID, uint _amount) public returns (bool);\r\n    function transferFromSenderToCol(address _tokenID, address _from, uint _amount) public returns (bool);\r\n    function approveToEngine(address _tokenIdx, address _engineAddress) public;\r\n}\r\n\r\ncontract IMedianizer {\r\n    function read() public view returns (bytes32);\r\n}\r\n\r\ncontract DSAuthority {\r\n    function canCall(\r\n        address src, address dst, bytes4 sig\r\n    ) public view returns (bool);\r\n}\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority (address indexed authority);\r\n    event LogSetOwner     (address indexed owner);\r\n    event OwnerUpdate     (address indexed owner, address indexed newOwner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority  public  authority;\r\n    address      public  owner;\r\n    address      public  newOwner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    // Warning: you should absolutely sure you want to give up authority!!!\r\n    function disableOwnership() public onlyOwner {\r\n        owner = address(0);\r\n        emit OwnerUpdate(msg.sender, owner);\r\n    }\r\n\r\n    function transferOwnership(address newOwner_) public onlyOwner {\r\n        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\r\n        newOwner = newOwner_;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\r\n        emit OwnerUpdate(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0x0);\r\n    }\r\n\r\n    ///[snow] guard is Authority who inherit DSAuth.\r\n    function setAuthority(DSAuthority authority_)\r\n        public\r\n        onlyOwner\r\n    {\r\n        authority = authority_;\r\n        emit LogSetAuthority(address(authority));\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(isOwner(msg.sender), \"ds-auth-non-owner\");\r\n        _;\r\n    }\r\n\r\n    function isOwner(address src) internal view returns (bool) {\r\n        return bool(src == owner);\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig), \"ds-auth-unauthorized\");\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, address(this), sig);\r\n        }\r\n    }\r\n}\r\n\r\ncontract DSMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\r\n    }\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\r\n    }\r\n\r\n    function div(uint x, uint y) internal pure returns (uint z) {\r\n        require(y > 0, \"ds-math-div-overflow\");\r\n        z = x / y;\r\n    }\r\n\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function max(uint x, uint y) internal pure returns (uint z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n    /**\r\n     * @dev x to the power of y power(base, exponent)\r\n     */\r\n    function pow(uint256 base, uint256 exponent) public pure returns (uint256) {\r\n        if (exponent == 0) {\r\n            return 1;\r\n        }\r\n        else if (exponent == 1) {\r\n            return base;\r\n        }\r\n        else if (base == 0 && exponent != 0) {\r\n            return 0;\r\n        }\r\n        else {\r\n            uint256 z = base;\r\n            for (uint256 i = 1; i < exponent; i++)\r\n                z = mul(z, base);\r\n            return z;\r\n        }\r\n    }\r\n}\r\n\r\ncontract DFEngine is DSMath, DSAuth {\r\n    IDFStore public dfStore;\r\n    IDFPool public dfPool;\r\n    IDSToken public usdxToken;\r\n    address public dfCol;\r\n    address public dfFunds;\r\n\r\n    enum ProcessType {\r\n        CT_DEPOSIT,\r\n        CT_DESTROY,\r\n        CT_CLAIM,\r\n        CT_WITHDRAW\r\n    }\r\n\r\n    constructor (\r\n        address _usdxToken,\r\n        address _dfStore,\r\n        address _dfPool,\r\n        address _dfCol,\r\n        address _dfFunds)\r\n        public\r\n    {\r\n        usdxToken = IDSToken(_usdxToken);\r\n        dfStore = IDFStore(_dfStore);\r\n        dfPool = IDFPool(_dfPool);\r\n        dfCol = _dfCol;\r\n        dfFunds = _dfFunds;\r\n    }\r\n\r\n    function getPrice(address oracle) public view returns (uint) {\r\n        bytes32 price = IMedianizer(oracle).read();\r\n        return uint(price);\r\n    }\r\n\r\n    function _unifiedCommission(ProcessType ct, uint _feeTokenIdx, address depositor, uint _amount) internal {\r\n        uint rate = dfStore.getFeeRate(uint(ct));\r\n        if(rate > 0) {\r\n            address _token = dfStore.getTypeToken(_feeTokenIdx);\r\n            require(_token != address(0), \"_UnifiedCommission: fee token not correct.\");\r\n            uint dfPrice = getPrice(dfStore.getTokenMedian(_token));\r\n            uint dfFee = div(mul(mul(_amount, rate), WAD), mul(10000, dfPrice));\r\n            IDSToken(_token).transferFrom(depositor, dfFunds, dfFee);\r\n        }\r\n    }\r\n\r\n    function deposit(address _depositor, address _srcToken, uint _feeTokenIdx, uint _srcAmount) public auth returns (uint) {\r\n        address _tokenID = dfStore.getWrappedToken(_srcToken);\r\n        require(dfStore.getMintingToken(_tokenID), \"Deposit: asset is not allowed.\");\r\n\r\n        uint _amount = IDSWrappedToken(_tokenID).wrap(address(dfPool), _srcAmount);\r\n        require(_amount > 0, \"Deposit: amount is invalid.\");\r\n        dfPool.transferFromSender(_srcToken, _depositor, IDSWrappedToken(_tokenID).reverseByMultiple(_amount));\r\n        _unifiedCommission(ProcessType.CT_DEPOSIT, _feeTokenIdx, _depositor, _amount);\r\n\r\n        address[] memory _tokens;\r\n        uint[] memory _mintCW;\r\n        (, , , _tokens, _mintCW) = dfStore.getSectionData(dfStore.getMintPosition());\r\n\r\n        uint[] memory _tokenBalance = new uint[](_tokens.length);\r\n        uint[] memory _resUSDXBalance = new uint[](_tokens.length);\r\n        uint[] memory _depositorBalance = new uint[](_tokens.length);\r\n        //For stack limit sake.\r\n        uint _misc = uint(-1);\r\n\r\n        for (uint i = 0; i < _tokens.length; i++) {\r\n            _tokenBalance[i] = dfStore.getTokenBalance(_tokens[i]);\r\n            _resUSDXBalance[i] = dfStore.getResUSDXBalance(_tokens[i]);\r\n            _depositorBalance[i] = dfStore.getDepositorBalance(_depositor, _tokens[i]);\r\n            if (_tokenID == _tokens[i]){\r\n                _tokenBalance[i] = add(_tokenBalance[i], _amount);\r\n                _depositorBalance[i] = add(_depositorBalance[i], _amount);\r\n            }\r\n            _misc = min(div(_tokenBalance[i], _mintCW[i]), _misc);\r\n        }\r\n        if (_misc > 0) {\r\n            return _convert(_depositor, _tokens, _mintCW, _tokenBalance, _resUSDXBalance, _depositorBalance, _misc);\r\n        }\r\n        /** Just retrieve minting tokens here. If minted balance has USDX, call claim.*/\r\n        /// @dev reuse _tokenBalance[0], _tokenBalance[1] to avoid stack too deep\r\n        _tokenBalance[1] = 0;\r\n        for (uint i = 0; i < _tokens.length; i++) {\r\n            _tokenBalance[0] = min(_depositorBalance[i], _resUSDXBalance[i]);\r\n\r\n            if (_tokenBalance[0] == 0) {\r\n                if (_tokenID == _tokens[i]) {\r\n                    dfStore.setDepositorBalance(_depositor, _tokens[i], _depositorBalance[i]);\r\n                }\r\n                continue;\r\n            }\r\n\r\n            dfStore.setDepositorBalance(_depositor, _tokens[i], sub(_depositorBalance[i], _tokenBalance[0]));\r\n            dfStore.setResUSDXBalance(_tokens[i], sub(_resUSDXBalance[i], _tokenBalance[0]));\r\n            _tokenBalance[1] = add(_tokenBalance[1], _tokenBalance[0]);\r\n        }\r\n\r\n        if (_tokenBalance[1] > 0)\r\n            dfPool.transferOut(address(usdxToken), _depositor, _tokenBalance[1]);\r\n\r\n        _misc = add(_amount, dfStore.getTokenBalance(_tokenID));\r\n        dfStore.setTokenBalance(_tokenID, _misc);\r\n\r\n        return (_tokenBalance[1]);\r\n    }\r\n\r\n    function withdraw(address _depositor, address _srcToken, uint _feeTokenIdx, uint _srcAmount) public auth returns (uint) {\r\n        address _tokenID = dfStore.getWrappedToken(_srcToken);\r\n        uint _amount = IDSWrappedToken(_tokenID).changeByMultiple(_srcAmount);\r\n        require(_amount > 0, \"Withdraw: amount is invalid.\");\r\n\r\n        uint _depositorBalance = dfStore.getDepositorBalance(_depositor, _tokenID);\r\n        uint _tokenBalance = dfStore.getTokenBalance(_tokenID);\r\n        uint _withdrawAmount = min(_amount, min(_tokenBalance, _depositorBalance));\r\n\r\n        if (_withdrawAmount <= 0)\r\n            return (0);\r\n\r\n        _depositorBalance = sub(_depositorBalance, _withdrawAmount);\r\n        dfStore.setDepositorBalance(_depositor, _tokenID, _depositorBalance);\r\n        dfStore.setTokenBalance(_tokenID, sub(_tokenBalance, _withdrawAmount));\r\n        _unifiedCommission(ProcessType.CT_WITHDRAW, _feeTokenIdx, _depositor, _withdrawAmount);\r\n        IDSWrappedToken(_tokenID).unwrap(address(dfPool), _withdrawAmount);\r\n        uint _srcWithdrawAmount = IDSWrappedToken(_tokenID).reverseByMultiple(_withdrawAmount);\r\n        dfPool.transferOut(_srcToken, _depositor, _srcWithdrawAmount);\r\n\r\n        return (_srcWithdrawAmount);\r\n    }\r\n\r\n    function claim(address _depositor, uint _feeTokenIdx) public auth returns (uint) {\r\n        address[] memory _tokens = dfStore.getMintedTokenList();\r\n        uint _resUSDXBalance;\r\n        uint _depositorBalance;\r\n        uint _depositorMintAmount;\r\n        uint _mintAmount;\r\n\r\n        for (uint i = 0; i < _tokens.length; i++) {\r\n            _resUSDXBalance = dfStore.getResUSDXBalance(_tokens[i]);\r\n            _depositorBalance = dfStore.getDepositorBalance(_depositor, _tokens[i]);\r\n\r\n            _depositorMintAmount = min(_resUSDXBalance, _depositorBalance);\r\n            _mintAmount = add(_mintAmount, _depositorMintAmount);\r\n\r\n            if (_depositorMintAmount > 0){\r\n                dfStore.setResUSDXBalance(_tokens[i], sub(_resUSDXBalance, _depositorMintAmount));\r\n                dfStore.setDepositorBalance(_depositor, _tokens[i], sub(_depositorBalance, _depositorMintAmount));\r\n            }\r\n        }\r\n\r\n        if (_mintAmount <= 0)\r\n            return 0;\r\n\r\n        _unifiedCommission(ProcessType.CT_CLAIM, _feeTokenIdx, _depositor, _mintAmount);\r\n        dfPool.transferOut(address(usdxToken), _depositor, _mintAmount);\r\n        return _mintAmount;\r\n    }\r\n\r\n    function destroy(address _depositor, uint _feeTokenIdx, uint _amount) public auth returns (bool) {\r\n        require(_amount > 0 && (_amount % dfStore.getMinBurnAmount() == 0), \"Destroy: amount not correct.\");\r\n        require(_amount <= usdxToken.balanceOf(_depositor), \"Destroy: exceed max USDX balance.\");\r\n        require(_amount <= sub(dfStore.getTotalMinted(), dfStore.getTotalBurned()), \"Destroy: not enough to burn.\");\r\n        address[] memory _tokens;\r\n        uint[] memory _burnCW;\r\n        uint _sumBurnCW;\r\n        uint _burned;\r\n        uint _minted;\r\n        uint _burnedAmount;\r\n        uint _amountTemp = _amount;\r\n        uint _tokenAmount;\r\n\r\n        _unifiedCommission(ProcessType.CT_DESTROY, _feeTokenIdx, _depositor, _amount);\r\n\r\n        while(_amountTemp > 0) {\r\n            (_minted, _burned, , _tokens, _burnCW) = dfStore.getSectionData(dfStore.getBurnPosition());\r\n\r\n            _sumBurnCW = 0;\r\n            for (uint i = 0; i < _burnCW.length; i++) {\r\n                _sumBurnCW = add(_sumBurnCW, _burnCW[i]);\r\n            }\r\n\r\n            if (add(_burned, _amountTemp) <= _minted){\r\n                dfStore.setSectionBurned(add(_burned, _amountTemp));\r\n                _burnedAmount = _amountTemp;\r\n                _amountTemp = 0;\r\n            } else {\r\n                _burnedAmount = sub(_minted, _burned);\r\n                _amountTemp = sub(_amountTemp, _burnedAmount);\r\n                dfStore.setSectionBurned(_minted);\r\n                dfStore.burnSectionMoveon();\r\n            }\r\n\r\n            if (_burnedAmount == 0)\r\n                continue;\r\n\r\n            for (uint i = 0; i < _tokens.length; i++) {\r\n\r\n                _tokenAmount = div(mul(_burnedAmount, _burnCW[i]), _sumBurnCW);\r\n                IDSWrappedToken(_tokens[i]).unwrap(dfCol, _tokenAmount);\r\n                dfPool.transferOut(\r\n                    IDSWrappedToken(_tokens[i]).getSrcERC20(),\r\n                    _depositor,\r\n                    IDSWrappedToken(_tokens[i]).reverseByMultiple(_tokenAmount));\r\n                dfStore.setTotalCol(sub(dfStore.getTotalCol(), _tokenAmount));\r\n            }\r\n        }\r\n\r\n        usdxToken.burn(_depositor, _amount);\r\n        checkUSDXTotalAndColTotal();\r\n        dfStore.addTotalBurned(_amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function oneClickMinting(address _depositor, uint _feeTokenIdx, uint _amount) public auth {\r\n        address[] memory _tokens;\r\n        uint[] memory _mintCW;\r\n        uint _sumMintCW;\r\n        uint _srcAmount;\r\n\r\n        (, , , _tokens, _mintCW) = dfStore.getSectionData(dfStore.getMintPosition());\r\n        for (uint i = 0; i < _mintCW.length; i++) {\r\n            _sumMintCW = add(_sumMintCW, _mintCW[i]);\r\n        }\r\n        require(_sumMintCW != 0, \"OneClickMinting: minting section is empty\");\r\n        require(_amount > 0 && _amount % _sumMintCW == 0, \"OneClickMinting: amount error\");\r\n\r\n        _unifiedCommission(ProcessType.CT_DEPOSIT, _feeTokenIdx, _depositor, _amount);\r\n\r\n        for (uint i = 0; i < _mintCW.length; i++) {\r\n\r\n            _srcAmount = IDSWrappedToken(_tokens[i]).reverseByMultiple(div(mul(_amount, _mintCW[i]), _sumMintCW));\r\n            dfPool.transferFromSender(IDSWrappedToken(_tokens[i]).getSrcERC20(), _depositor, _srcAmount);\r\n            dfStore.setTotalCol(add(dfStore.getTotalCol(), div(mul(_amount, _mintCW[i]), _sumMintCW)));\r\n            IDSWrappedToken(_tokens[i]).wrap(dfCol, _srcAmount);\r\n        }\r\n\r\n        dfStore.addTotalMinted(_amount);\r\n        dfStore.addSectionMinted(_amount);\r\n        usdxToken.mint(_depositor, _amount);\r\n        checkUSDXTotalAndColTotal();\r\n    }\r\n\r\n    function _convert(\r\n        address _depositor,\r\n        address[] memory _tokens,\r\n        uint[] memory _mintCW,\r\n        uint[] memory _tokenBalance,\r\n        uint[] memory _resUSDXBalance,\r\n        uint[] memory _depositorBalance,\r\n        uint _step)\r\n        internal\r\n        returns(uint)\r\n    {\r\n        uint _mintAmount;\r\n        uint _mintTotal;\r\n        uint _depositorMintAmount;\r\n        uint _depositorMintTotal;\r\n\r\n        for (uint i = 0; i < _tokens.length; i++) {\r\n            _mintAmount = mul(_step, _mintCW[i]);\r\n            _depositorMintAmount = min(_depositorBalance[i], add(_resUSDXBalance[i], _mintAmount));\r\n            dfStore.setTokenBalance(_tokens[i], sub(_tokenBalance[i], _mintAmount));\r\n            dfPool.transferToCol(_tokens[i], _mintAmount);\r\n            dfStore.setTotalCol(add(dfStore.getTotalCol(), _mintAmount));\r\n            _mintTotal = add(_mintTotal, _mintAmount);\r\n\r\n            if (_depositorMintAmount == 0){\r\n                dfStore.setResUSDXBalance(_tokens[i], add(_resUSDXBalance[i], _mintAmount));\r\n                continue;\r\n            }\r\n\r\n            dfStore.setDepositorBalance(_depositor, _tokens[i], sub(_depositorBalance[i], _depositorMintAmount));\r\n            dfStore.setResUSDXBalance(_tokens[i], sub(add(_resUSDXBalance[i], _mintAmount), _depositorMintAmount));\r\n            _depositorMintTotal = add(_depositorMintTotal, _depositorMintAmount);\r\n        }\r\n\r\n        dfStore.addTotalMinted(_mintTotal);\r\n        dfStore.addSectionMinted(_mintTotal);\r\n        usdxToken.mint(address(dfPool), _mintTotal);\r\n        checkUSDXTotalAndColTotal();\r\n        dfPool.transferOut(address(usdxToken), _depositor, _depositorMintTotal);\r\n        return _depositorMintTotal;\r\n    }\r\n\r\n    function checkUSDXTotalAndColTotal() public view {\r\n        address[] memory _tokens = dfStore.getMintedTokenList();\r\n        address _dfCol = dfCol;\r\n        uint _colTotal;\r\n        for (uint i = 0; i < _tokens.length; i++) {\r\n            _colTotal = add(_colTotal, IDSToken(_tokens[i]).balanceOf(_dfCol));\r\n        }\r\n        uint _usdxTotalSupply = usdxToken.totalSupply();\r\n        require(_usdxTotalSupply <= _colTotal,\r\n                \"checkUSDXTotalAndColTotal : Amount of the usdx will be greater than collateral.\");\r\n        require(_usdxTotalSupply == dfStore.getTotalCol(),\r\n                \"checkUSDXTotalAndColTotal : Usdx and total collateral are not equal.\");\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"dfFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_depositor\",\"type\":\"address\"},{\"name\":\"_srcToken\",\"type\":\"address\"},{\"name\":\"_feeTokenIdx\",\"type\":\"uint256\"},{\"name\":\"_srcAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"base\",\"type\":\"uint256\"},{\"name\":\"exponent\",\"type\":\"uint256\"}],\"name\":\"pow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dfStore\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dfCol\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_depositor\",\"type\":\"address\"},{\"name\":\"_feeTokenIdx\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"oneClickMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_depositor\",\"type\":\"address\"},{\"name\":\"_srcToken\",\"type\":\"address\"},{\"name\":\"_feeTokenIdx\",\"type\":\"uint256\"},{\"name\":\"_srcAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdxToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_depositor\",\"type\":\"address\"},{\"name\":\"_feeTokenIdx\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dfPool\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkUSDXTotalAndColTotal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_depositor\",\"type\":\"address\"},{\"name\":\"_feeTokenIdx\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"destroy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_usdxToken\",\"type\":\"address\"},{\"name\":\"_dfStore\",\"type\":\"address\"},{\"name\":\"_dfPool\",\"type\":\"address\"},{\"name\":\"_dfCol\",\"type\":\"address\"},{\"name\":\"_dfFunds\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"}]","ContractName":"DFEngine","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000eb269732ab75a6fd61ea60b06fe994cd32a83549000000000000000000000000d30d06b276867cfa2266542791242ff37c91ba8d000000000000000000000000786bf554473f9ab733fd683c528212492a23d895000000000000000000000000617bed8699f71fe830a50469bd474bc8481f5235000000000000000000000000d5478011ccb79189a240a96ec913a8021b54ce6d","Library":"","SwarmSource":"bzzr://c92d3dc8f395ef3078459f6a8f39334ad90ec17a0c9022f0ec6bc64e34971b0e"}]}