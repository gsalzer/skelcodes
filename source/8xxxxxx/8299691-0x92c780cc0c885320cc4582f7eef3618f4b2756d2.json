{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.5.0 <0.6.0;\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\ncontract Ethertime {\r\n    using SafeMath for *;\r\n    uint256 constant None = uint256(0);\r\n    uint256 constant private MAX_PERCENTS = 10000;\r\n    uint256 constant private FULL_PART = 10000;\r\n    uint256 constant private FEE = 1150;\r\n    uint256 constant MAX_RECENT_BLOCK_NUMBER = 250;\r\n    uint256 constant TRANSACTIONS_PER_PAYOUT = 25;\r\n    enum LotteryStatus {\r\n        Open,        Finished    }\r\n    enum LotteryPrizeType {\r\n        T10,        T30,        T50,        All,        First,        Three    }\r\n    enum OrderStatus {\r\n        Open,\r\n        Closed\r\n    }\r\n    struct Player {\r\n        address addr;\r\n        uint256 blockNumber;\r\n        uint256 sum;\r\n        uint256 prize;\r\n    }\r\n    struct Lottery {\r\n        uint256 id;\r\n        string name;\r\n        uint256 price;\r\n        uint256 begin;\r\n        uint256 end;\r\n        uint256 number;\r\n        uint256 pot;\r\n        uint256 parentId;\r\n        uint256 childId;\r\n        uint256 winNumber;\r\n        uint256 blockNumberForRandom;\r\n        uint256 winningsCount;\r\n        uint256 remainder;\r\n        uint256 alreadyPayedCount;\r\n        bytes32 blockHashForRandom;\r\n        address owner;\r\n        LotteryStatus status;\r\n        LotteryPrizeType prizeType;\r\n        bool withDiscount;\r\n        bool isContinued;\r\n        bool isPayedOut;\r\n    }\r\n    struct Order {\r\n        uint256 id;\r\n        uint256 part;\r\n        uint256 sum;\r\n        uint256 expiredDate;\r\n        address admin;\r\n        address recipient;\r\n        OrderStatus status;\r\n    }\r\n    address private _owner;\r\n    uint256 private _totalFee;\r\n    address[] private _admins;\r\n    mapping (address => uint256) private _adminsParts;\r\n    mapping (uint256 => Lottery) private _lotteries;\r\n    uint256 _lastLotteryId;\r\n    mapping (uint256 => Player[]) private _players;\r\n    mapping (uint256 => uint256) private _uniquePlayersCount;\r\n    uint256[] _openLotteries;\r\n    uint256[] _unpayedLotteries;\r\n    mapping (uint256 => uint256) private _reservedFee;\r\n    mapping (uint256 => Order) private _orders;\r\n    uint256 _lastOrderId;\r\n    event BuyTicketEvent(\r\n        address indexed from,\r\n        uint256 indexed lotteryId\r\n    );\r\n    event NewLotteryEvent(\r\n        uint256 indexed lotteryId\r\n    );\r\n    event FinishedLotteryEvent(\r\n        uint256 indexed lotteryId\r\n    );\r\n    event PayOutEvent(\r\n        uint256 indexed lotteryId,\r\n        uint256 indexed leftToPay\r\n    );\r\n    event DeleteLotteryEvent(\r\n        uint256 indexed lotteryId\r\n    );\r\n    event WinPrizeEvent(\r\n        address indexed player,\r\n        uint256 indexed prize,\r\n        uint256 indexed lotteryId\r\n    );\r\n    event TransferAdminPartEvent(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed part\r\n    );\r\n    event TransferOwnershipEvent(\r\n        address indexed from,\r\n        address indexed to\r\n    );\r\n    event DividendEvent(\r\n        address indexed admin,\r\n        uint256 indexed sum\r\n    );\r\n    event NewOrderEvent(\r\n        uint256 indexed orderId,\r\n        address indexed admin,\r\n        address indexed recipient\r\n    );\r\n    event ConfirmOrderEvent(\r\n        uint256 indexed orderId\r\n    );\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner);\r\n        _;\r\n    }\r\n    modifier onlyAdmin() {\r\n        require(checkIsAdmin(msg.sender));\r\n        _;\r\n    }\r\n    constructor() public {\r\n        _owner = msg.sender;\r\n        _admins.push(_owner);\r\n        _adminsParts[_owner] = FULL_PART;\r\n    }\r\n    function transferOwnership(address addr) public onlyOwner {\r\n        _owner = addr;\r\n        emit TransferOwnershipEvent(msg.sender, addr);\r\n    }\r\n    function transferAdminPart(address addr, uint256 part)\r\n        public\r\n        onlyAdmin\r\n    {\r\n        require(part <= _adminsParts[msg.sender]);\r\n        distributeDividend();\r\n        if (!checkIsAdmin(addr)) {\r\n            _admins.push(addr);\r\n        }\r\n        _adminsParts[msg.sender] = _adminsParts[msg.sender].sub(part);\r\n        _adminsParts[addr] = _adminsParts[addr].add(part);\r\n        if (_adminsParts[msg.sender] == 0) {\r\n            removeAdmin(msg.sender);\r\n        }\r\n        emit TransferAdminPartEvent(msg.sender, addr, part);\r\n    }\r\n    function distributeDividend() public onlyAdmin {\r\n        if (_totalFee == 0)\r\n            return;\r\n        uint256 totalSum = _totalFee;\r\n        for (uint256 i = 0; i < _admins.length; i++) {\r\n            address payable addr = address(uint160(_admins[i]));\r\n            uint256 sum = totalSum.mul(_adminsParts[addr]).div(FULL_PART);\r\n            if (sum > 0) {\r\n                _totalFee = _totalFee.sub(sum);\r\n                addr.transfer(sum);\r\n                emit DividendEvent(addr, sum);\r\n            }\r\n        }\r\n    }\r\n    function createLottery(\r\n        string memory name,\r\n        uint256 price,\r\n        uint256 begin,\r\n        uint256 end,\r\n        LotteryPrizeType prizeType,\r\n        bool withDiscount\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(begin < end);\r\n        _lastLotteryId = _lastLotteryId.add(1);\r\n        _lotteries[_lastLotteryId] = Lottery({\r\n            id: _lastLotteryId,\r\n            name: name,\r\n            owner: msg.sender,\r\n            price: price,\r\n            begin: begin,\r\n            end: end,\r\n            number: 1,\r\n            pot: 0,\r\n            status: LotteryStatus.Open,\r\n            prizeType: prizeType,\r\n            parentId: None,\r\n            childId: None,\r\n            isContinued: true,\r\n            winNumber: 0,\r\n            blockNumberForRandom: 0,\r\n            blockHashForRandom: 0x0,\r\n            withDiscount: withDiscount,\r\n            winningsCount: None,\r\n            isPayedOut: false,\r\n            alreadyPayedCount: 0,\r\n            remainder: 0\r\n         });\r\n        _openLotteries.push(_lastLotteryId);\r\n        emit NewLotteryEvent(_lastLotteryId);\r\n    }\r\n    function buyTicket(uint256 lotteryId) public payable {\r\n        require(lotteryId <= _lastLotteryId);\r\n        finalizeLotteries();\r\n        uint256 actualLotteryId = getActualLotteryId(lotteryId);\r\n        require(actualLotteryId != None);\r\n        Lottery storage lottery = _lotteries[actualLotteryId];\r\n        uint256 actualPrice = getActualLotteryPrice(lottery);\r\n        require(msg.value >= actualPrice);\r\n        incUniquePlayersCount(lottery.id, msg.sender);\r\n        addPlayerToLottery(lottery, actualPrice);\r\n        uint256 feeSum = actualPrice.mul(FEE).div(MAX_PERCENTS);\r\n        lottery.pot = lottery.pot.add(actualPrice.sub(feeSum));\r\n        _reservedFee[lottery.id] = _reservedFee[lottery.id].add(feeSum);\r\n        uint256 remainder = msg.value.sub(actualPrice);\r\n        if (remainder > 0)\r\n            msg.sender.transfer(remainder);\r\n        emit BuyTicketEvent(msg.sender, actualLotteryId);\r\n    }\r\n    function finalizeLotteries() public {\r\n        for (uint256 i = 0; i < _openLotteries.length; i++) {\r\n            uint256 lotteryId = _openLotteries[i];\r\n            if (_lotteries[lotteryId].end < now) {\r\n                if (_players[lotteryId].length > 0) {\r\n                    uint256 lastIndex = _players[lotteryId].length.sub(1);\r\n                    uint256 blockNumber = _players[lotteryId][lastIndex].blockNumber;\r\n                    if (block.number.sub(blockNumber) == 1) {\r\n                        continue;\r\n                    }\r\n                }\r\n                finalizeLottery(_lotteries[lotteryId]);\r\n            }\r\n        }\r\n    }\r\n    function payOutLotteryPrizes(uint256 lotteryId) public {\r\n        Lottery storage lottery = _lotteries[lotteryId];\r\n        require(lottery.status == LotteryStatus.Finished && lottery.isPayedOut == false);\r\n        uint256[] memory shareOfWinnings;\r\n        if (lottery.prizeType == LotteryPrizeType.Three) {\r\n            shareOfWinnings = getShareOfWinningsForThree(lottery.winningsCount);\r\n        } else {\r\n            shareOfWinnings = getShareOfWinnings(lottery.winningsCount);\r\n        }\r\n        uint256 toPayCount = getToPayCount(lottery.winningsCount, lottery.alreadyPayedCount);\r\n        for (uint256 i = lottery.alreadyPayedCount; i < lottery.alreadyPayedCount.add(toPayCount); i++) {\r\n            uint256 playerIndex = lottery.winNumber.add(i);\r\n            if (playerIndex >= _players[lottery.id].length)\r\n                playerIndex = playerIndex.sub(_players[lottery.id].length);\r\n            uint256 prize = shareOfWinnings[i].mul(lottery.pot).div(MAX_PERCENTS);\r\n            if (prize > 0) {\r\n                lottery.remainder = lottery.remainder.sub(prize);\r\n                address payable addr = address(uint160(_players[lottery.id][playerIndex].addr));\r\n                _players[lottery.id][playerIndex].prize = prize;\r\n                addr.transfer(prize);\r\n                emit WinPrizeEvent(addr, prize, lottery.id);\r\n            }\r\n        }\r\n        lottery.alreadyPayedCount = lottery.alreadyPayedCount.add(toPayCount);\r\n        emit PayOutEvent(\r\n            lottery.id,\r\n            lottery.winningsCount.sub(lottery.alreadyPayedCount)\r\n        );\r\n        if (lottery.alreadyPayedCount == lottery.winningsCount) {\r\n            if (lottery.remainder > 0) {\r\n                _totalFee = _totalFee.add(lottery.remainder);\r\n            }\r\n            lottery.remainder = 0;\r\n            _totalFee = _totalFee.add(_reservedFee[lottery.id]);\r\n            _reservedFee[lottery.id] = 0;\r\n            lottery.isPayedOut = true;\r\n            removeLotteryIdFromArray(lottery.id, _unpayedLotteries);\r\n        }\r\n    }\r\n    function deleteLottery(uint256 lotteryId) public onlyOwner {\r\n        require(lotteryId <= _lastLotteryId);\r\n        Lottery storage lottery = _lotteries[lotteryId];\r\n        require(lottery.status == LotteryStatus.Open);\r\n        require(lottery.isContinued);\r\n        lottery.isContinued = false;\r\n        emit DeleteLotteryEvent(lotteryId);\r\n    }\r\n    function createOrder(\r\n        address recipient,\r\n        uint256 part,\r\n        uint256 sum,\r\n        uint256 expiredDate\r\n    )\r\n        public\r\n        onlyAdmin\r\n    {\r\n        require(_adminsParts[msg.sender] >= part);\r\n        require(expiredDate > now);\r\n        _lastOrderId = _lastOrderId.add(1);\r\n        _orders[_lastOrderId] = Order({\r\n            id: _lastOrderId,\r\n            admin: msg.sender,\r\n            recipient: recipient,\r\n            part: part,\r\n            sum: sum,\r\n            expiredDate: expiredDate,\r\n            status: OrderStatus.Open\r\n         });\r\n        emit NewOrderEvent(_lastOrderId, msg.sender, recipient);\r\n    }\r\n    function confirmOrder(uint256 orderId) public payable {\r\n        require(orderId <= _lastOrderId);\r\n        Order storage order = _orders[orderId];\r\n        require(msg.sender == order.recipient);\r\n        require(order.expiredDate > now);\r\n        require(order.status == OrderStatus.Open);\r\n        require(msg.value >= order.sum);\r\n        require(order.part <= _adminsParts[order.admin]);\r\n        if (!checkIsAdmin(msg.sender)) {\r\n            _admins.push(msg.sender);\r\n        }\r\n        distributeDividend();\r\n        _adminsParts[order.admin] = _adminsParts[order.admin].sub(order.part);\r\n        _adminsParts[msg.sender] = _adminsParts[msg.sender].add(order.part);\r\n        if (_adminsParts[order.admin] == 0) {\r\n            removeAdmin(order.admin);\r\n        }\r\n        address payable addr = address(uint160(order.admin));\r\n        addr.transfer(order.sum);\r\n        uint256 remainder = msg.value.sub(order.sum);\r\n        if (remainder > 0)\r\n            msg.sender.transfer(remainder);\r\n        order.status = OrderStatus.Closed;\r\n        emit ConfirmOrderEvent(order.id);\r\n    }\r\n    function() external payable {\r\n        uint256 lotteryId = None;\r\n        uint256 price = 0;\r\n        for (uint256 i = 0; i < _openLotteries.length; i++) {\r\n            uint256 openLotteryId = _openLotteries[i];\r\n            uint256 openLotteryPrice = _lotteries[openLotteryId].price;\r\n            if (msg.value >= openLotteryPrice && openLotteryPrice > price) {\r\n                lotteryId = openLotteryId;\r\n                price = openLotteryPrice;\r\n            }\r\n        }\r\n        if (lotteryId != None) {\r\n            buyTicket(lotteryId);\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n    function getOwner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    function getTotalFee() public view returns (uint256) {\r\n        return _totalFee;\r\n    }\r\n    function getAdmins() public view returns (address[] memory) {\r\n        return _admins;\r\n    }\r\n    function getAdminPartByAddress(address addr) public view returns (uint256) {\r\n        return _adminsParts[addr];\r\n    }\r\n    function getLotteryInfo(uint256 id)\r\n        public\r\n        view\r\n        returns (\r\n            uint256 price,\r\n            uint256 begin,\r\n            uint256 end,\r\n            uint256 number,\r\n            uint256 pot,\r\n            uint256 parentId,\r\n            uint256 childId,\r\n            string memory name,\r\n            LotteryStatus status,\r\n            LotteryPrizeType prizeType,\r\n            bool withDiscount,\r\n            bool isContinued\r\n        )\r\n    {\r\n        Lottery memory lottery = _lotteries[id];\r\n        return (\r\n            lottery.price,\r\n            lottery.begin,\r\n            lottery.end,\r\n            lottery.number,\r\n            lottery.pot,\r\n            lottery.parentId,\r\n            lottery.childId,\r\n            lottery.name,\r\n            lottery.status,\r\n            lottery.prizeType,\r\n            lottery.withDiscount,\r\n            lottery.isContinued\r\n        );\r\n    }\r\n    function getFinishedLotteryInfo(uint256 id)\r\n        public\r\n        view\r\n        returns (\r\n            uint256 winNumber,\r\n            uint256 blockNumberForRandom,\r\n            bytes32 blockHashForRandom,\r\n            uint256 totalPlayers,\r\n            uint256 alreadyPayedCount,\r\n            uint256 winningsCount,\r\n            bool isPayedOut\r\n        )\r\n    {\r\n        Lottery memory lottery = _lotteries[id];\r\n        require(lottery.status == LotteryStatus.Finished);\r\n        return (\r\n            lottery.winNumber,\r\n            lottery.blockNumberForRandom,\r\n            lottery.blockHashForRandom,\r\n            _players[id].length,\r\n            lottery.alreadyPayedCount,\r\n            lottery.winningsCount,\r\n            lottery.isPayedOut\r\n        );\r\n    }\r\n    function getLotteryPlayers(uint256 lotteryId)\r\n        public\r\n        view\r\n        returns (\r\n            address[] memory addresses,\r\n            uint256[] memory blockNumbers,\r\n            uint256[] memory sums\r\n        )\r\n    {\r\n        require(lotteryId <= _lastLotteryId);\r\n        Player[] memory players = _players[lotteryId];\r\n        addresses = new address[](players.length);\r\n        blockNumbers = new uint256[](players.length);\r\n        sums = new uint256[](players.length);\r\n        for (uint256 i = 0; i < players.length; i++) {\r\n            addresses[i] = players[i].addr;\r\n            blockNumbers[i] = players[i].blockNumber;\r\n            sums[i] = players[i].sum;\r\n        }\r\n        return (addresses, blockNumbers, sums);\r\n    }\r\n    function getWinPlayers(uint256 lotteryId)\r\n        public\r\n        view\r\n        returns (address[] memory addresses, uint256[] memory prizes)\r\n    {\r\n        Lottery memory lottery = _lotteries[lotteryId];\r\n        require(lottery.status == LotteryStatus.Finished && lottery.isPayedOut == true);\r\n        Player[] memory players = _players[lotteryId];\r\n        addresses = new address[](lottery.winningsCount);\r\n        prizes = new uint256[](lottery.winningsCount);\r\n        uint256 j = 0;\r\n        for (uint256 i = 0; i < players.length; i++) {\r\n            if (players[i].prize > 0) {\r\n                addresses[j] = players[i].addr;\r\n                prizes[j] = players[i].prize;\r\n                j++;\r\n            }\r\n        }\r\n        return (addresses, prizes);\r\n    }\r\n    function getActualLotteryId(uint256 lotteryId)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(lotteryId <= _lastLotteryId);\r\n        uint256 actualLotteryId = None;\r\n        bool isLotteryDeleted = false;\r\n        Lottery memory lottery = _lotteries[lotteryId];\r\n        while (lottery.status == LotteryStatus.Finished) {\r\n            if (lottery.childId == None) {\r\n                isLotteryDeleted = true;\r\n                break;\r\n            }\r\n            lottery = _lotteries[lottery.childId];\r\n        }\r\n        if (!isLotteryDeleted)\r\n            actualLotteryId = lottery.id;\r\n        return actualLotteryId;\r\n    }\r\n    function getOpenedLotteries() public view returns (uint256[] memory) {\r\n        uint256[] memory result = new uint256[](_openLotteries.length);\r\n        for (uint256 i = 0; i < _openLotteries.length; i++) {\r\n            result[i] = _openLotteries[i];\r\n        }\r\n        return result;\r\n    }\r\n    function getUnpayedLotteries() public view returns (uint256[] memory) {\r\n        uint256[] memory result = new uint256[](_unpayedLotteries.length);\r\n        for (uint256 i = 0; i < _unpayedLotteries.length; i++) {\r\n            result[i] = _unpayedLotteries[i];\r\n        }\r\n        return result;\r\n    }\r\n    function getUniquePlayersCount(\r\n        uint256 lotteryId\r\n    )\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _uniquePlayersCount[lotteryId];\r\n    }\r\n    function getOrderInfo(uint256 id)\r\n        public\r\n        view\r\n        returns (\r\n            address admin,\r\n            address recipient,\r\n            uint256 part,\r\n            uint256 sum,\r\n            uint256 expiredDate,\r\n            OrderStatus status\r\n        )\r\n    {\r\n        Order memory order = _orders[id];\r\n        return (\r\n            order.admin,\r\n            order.recipient,\r\n            order.part,\r\n            order.sum,\r\n            order.expiredDate,\r\n            order.status\r\n        );\r\n    }\r\n    function checkIsAdmin(address addr) private view returns (bool) {\r\n        bool isAdmin = false;\r\n        for (uint256 i = 0; i < _admins.length; i++) {\r\n            if (addr == _admins[i]) {\r\n                isAdmin = true;\r\n                break;\r\n            }\r\n        }\r\n        return isAdmin;\r\n    }\r\n    function removeAdmin(address addr) private {\r\n        require(checkIsAdmin(addr));\r\n        require(_adminsParts[addr] == 0);\r\n        uint256 index;\r\n        for (uint256 i = 0; i < _admins.length; i++) {\r\n            if (_admins[i] == addr) {\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n        for (uint256 i = index; i < _admins.length.sub(1); i++) {\r\n            _admins[i] = _admins[i.add(1)];\r\n        }\r\n        _admins.length--;\r\n    }\r\n    function addPlayerToLottery(Lottery memory lottery, uint256 sum) private {\r\n        require(lottery.begin <= now && lottery.end >= now);\r\n        require(lottery.status == LotteryStatus.Open);\r\n        Player memory player = Player({\r\n            addr: msg.sender,\r\n            blockNumber: block.number,\r\n            sum: sum,\r\n            prize: 0\r\n        });\r\n        _players[lottery.id].push(player);\r\n    }\r\n    function createChildLottery(Lottery storage parentLottery) private {\r\n        if (!parentLottery.isContinued)\r\n            return;\r\n        uint256 period = parentLottery.end.sub(parentLottery.begin);\r\n        uint256 begin = parentLottery.end;\r\n        uint256 end = begin.add(period);\r\n        if (end < now)\r\n            (begin, end) = getPeriodBorders(begin, end, now);\r\n        _lastLotteryId = _lastLotteryId.add(1);\r\n        _lotteries[_lastLotteryId] = Lottery({\r\n            id: _lastLotteryId,\r\n            name: parentLottery.name,\r\n            owner: msg.sender,\r\n            price: parentLottery.price,\r\n            begin: begin,\r\n            end: end,\r\n            number: parentLottery.number.add(1),\r\n            pot: 0,\r\n            status: LotteryStatus.Open,\r\n            prizeType: parentLottery.prizeType,\r\n            parentId: parentLottery.id,\r\n            childId: None,\r\n            isContinued: parentLottery.isContinued,\r\n            winNumber: 0,\r\n            blockNumberForRandom: 0,\r\n            blockHashForRandom: 0x0,\r\n            withDiscount: parentLottery.withDiscount,\r\n            winningsCount: None,\r\n            isPayedOut: false,\r\n            alreadyPayedCount: 0,\r\n            remainder: 0\r\n         });\r\n        parentLottery.childId = _lastLotteryId;\r\n        _openLotteries.push(_lastLotteryId);\r\n        emit NewLotteryEvent(_lastLotteryId);\r\n    }\r\n    function getPeriodBorders(uint256 begin, uint256 end, uint256 currentTime)\r\n        private\r\n        pure\r\n        returns (uint256, uint256)\r\n    {\r\n        if (end < currentTime) {\r\n            uint256 period = end.sub(begin);\r\n            uint256 n = currentTime.sub(end);\r\n            n = n.div(period);\r\n            n = n.add(1);\r\n            uint256 delta = n.mul(period);\r\n            begin = begin.add(delta);\r\n            end = end.add(delta);\r\n        }\r\n        return (begin, end);\r\n    }\r\n    function finalizeLottery(Lottery storage lottery) private {\r\n        beforeFinalizeLottery(lottery);\r\n        uint256 count = _uniquePlayersCount[lottery.id];\r\n        if (count == 0) {\r\n            finalizeEmptyLottery(lottery);\r\n        } else if (count == 1) {\r\n            finalizeOnePlayerLottery(lottery);\r\n        } else {\r\n            finalizeNotEmptyLottery(lottery);\r\n        }\r\n        afterFinalizeLottery(lottery);\r\n    }\r\n    function beforeFinalizeLottery(Lottery storage lottery) private {\r\n        lottery.status = LotteryStatus.Finished;\r\n        removeLotteryIdFromArray(lottery.id, _openLotteries);\r\n    }\r\n    function afterFinalizeLottery(Lottery storage lottery) private {\r\n        emit FinishedLotteryEvent(lottery.id);\r\n        if (lottery.isContinued)\r\n            createChildLottery(lottery);\r\n    }\r\n    function finalizeEmptyLottery(Lottery storage lottery) private {\r\n    }\r\n    function finalizeOnePlayerLottery(Lottery storage lottery) private {\r\n        require(_players[lottery.id].length > 0);\r\n        uint256 sum = 0;\r\n        sum = sum.add(lottery.pot);\r\n        sum = sum.add(_reservedFee[lottery.id]);\r\n        _reservedFee[lottery.id] = 0;\r\n        address payable addr = address(uint160(_players[lottery.id][0].addr));\r\n        addr.transfer(sum);\r\n    }\r\n    function finalizeNotEmptyLottery(Lottery storage lottery) private {\r\n        (\r\n            lottery.winNumber,\r\n            lottery.blockNumberForRandom,\r\n            lottery.blockHashForRandom\r\n        ) = getWinNumber(lottery);\r\n        if (lottery.prizeType == LotteryPrizeType.Three) {\r\n            lottery.winningsCount = getWinningsCountForThree(lottery);\r\n        } else {\r\n            lottery.winningsCount = getWinningsCount(lottery);\r\n        }\r\n        lottery.remainder = lottery.pot;\r\n        _unpayedLotteries.push(lottery.id);\r\n    }\r\n    function incUniquePlayersCount(uint256 lotteryId, address addr) private {\r\n        bool isUniq = true;\r\n        for (uint256 i = 0; i < _players[lotteryId].length; i++) {\r\n            if (addr == _players[lotteryId][i].addr) {\r\n                isUniq = false;\r\n                break;\r\n            }\r\n        }\r\n        if (isUniq)\r\n            _uniquePlayersCount[lotteryId] = _uniquePlayersCount[lotteryId].add(1);\r\n    }\r\n    function removeLotteryIdFromArray(uint256 lotteryId, uint256[] storage array) private {\r\n        bool exists = false;\r\n        uint256 index;\r\n        for (uint256 i = 0; i < array.length; i++) {\r\n            if (array[i] == lotteryId) {\r\n                index = i;\r\n                exists = true;\r\n                break;\r\n            }\r\n        }\r\n        require(exists);\r\n        for (uint256 i = index; i < array.length.sub(1); i++) {\r\n            array[i] = array[i.add(1)];\r\n        }\r\n        array.length--;\r\n    }\r\n    function getWinningsCount(Lottery memory lottery)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(_players[lottery.id].length > 0);\r\n        uint256 result;\r\n        uint256 remainder = 0;\r\n        uint256 playersCount = _players[lottery.id].length;\r\n        if (lottery.prizeType == LotteryPrizeType.First) {\r\n            result = 1;\r\n        } else if (lottery.prizeType == LotteryPrizeType.All) {\r\n            result = _players[lottery.id].length;\r\n        } else if (lottery.prizeType == LotteryPrizeType.T10) {\r\n            remainder = playersCount.mod(10);\r\n            result = playersCount.div(10);\r\n        } else if (lottery.prizeType == LotteryPrizeType.T30) {\r\n            result = playersCount.mul(30);\r\n            remainder = result.mod(100);\r\n            result = result.div(100);\r\n        } else if (lottery.prizeType == LotteryPrizeType.T50) {\r\n            result = playersCount.mul(50);\r\n            remainder = result.mod(100);\r\n            result = result.div(100);\r\n        } else {\r\n            revert();\r\n        }\r\n        if (remainder > 0 && result < playersCount) {\r\n            result = result.add(1);\r\n        }\r\n        return result;\r\n    }\r\n    function getWinningsCountForThree(Lottery memory lottery)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 result;\r\n        if (_players[lottery.id].length < 3)\r\n            result = 1;\r\n        else\r\n            result = 3;\r\n        return result;\r\n    }\r\n    function getWinNumber(Lottery memory lottery)\r\n        private\r\n        view\r\n        returns (uint256, uint256, bytes32)\r\n    {\r\n        require(lottery.end < now);\r\n        require(_players[lottery.id].length > 0);\r\n        uint256 lastIndex = _players[lottery.id].length.sub(1);\r\n        uint256 blockNumber = _players[lottery.id][lastIndex].blockNumber;\r\n        if (block.number.sub(blockNumber) > MAX_RECENT_BLOCK_NUMBER)\r\n            blockNumber = block.number.sub(MAX_RECENT_BLOCK_NUMBER);\r\n        else\r\n            blockNumber = blockNumber.add(1);\r\n        bytes32 hash = blockhash(blockNumber);\r\n        return (getRandomNumber(hash, _players[lottery.id].length), blockNumber, hash);\r\n    }\r\n    function getRandomNumber(bytes32 hash, uint256 n)\r\n        private\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return uint256(keccak256(abi.encodePacked(hash))).mod(n);\r\n    }\r\n    function getActualLotteryPrice(Lottery memory lottery)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (!lottery.withDiscount)\r\n            return lottery.price;\r\n        uint256 discount = 0;\r\n        uint256 percent = 0;\r\n        (uint256 b1, uint256 b2, uint256 b3) = splitPeriod(lottery.begin, lottery.end);\r\n        if (lottery.begin <= now && now < b1) {\r\n            percent = 300;\r\n        } else if (b1 <= now && now < b2) {\r\n            percent = 200;\r\n        } else if (b2 <= now && now < b3) {\r\n            percent = 100;\r\n        }\r\n        discount = lottery.price.mul(percent).div(MAX_PERCENTS);\r\n        return lottery.price.sub(discount);\r\n    }\r\n    function splitPeriod(uint256 begin, uint256 end)\r\n        private\r\n        pure\r\n        returns (uint256, uint256, uint256)\r\n    {\r\n        require(begin < end);\r\n        uint256 step = (end.sub(begin)).div(4);\r\n        uint256 b1 = begin.add(step);\r\n        uint256 b2 = b1.add(step);\r\n        uint256 b3 = b2.add(step);\r\n        return (b1, b2, b3);\r\n    }\r\n    function getShareOfWinnings(uint256 n)\r\n        private\r\n        pure\r\n        returns (uint256[] memory)\r\n    {\r\n        uint256[] memory result = new uint256[](n);\r\n        uint256 divider = n.mul(n.add(1));\r\n        for (uint256 k = 0; k < n; k++) {\r\n            uint256 p = (n.sub(k)).mul(20000);\r\n            p = p.div(divider);\r\n            result[k] = p;\r\n        }\r\n        return result;\r\n    }\r\n    function getShareOfWinningsForThree(uint256 n)\r\n        private\r\n        pure\r\n        returns (uint256[] memory)\r\n    {\r\n        require(n == 1 || n == 3);\r\n        uint256[] memory result = new uint256[](n);\r\n        if (n == 1) {\r\n            result[0] = 10000;\r\n        } else {\r\n            result[0] = 5000;\r\n            result[1] = 3500;\r\n            result[2] = 1500;\r\n        }\r\n        return result;\r\n    }\r\n    function getToPayCount(uint256 winningsCount, uint256 alreadyPayedCount)\r\n        private\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 toPayCount = 0;\r\n        if (winningsCount.sub(alreadyPayedCount) <= TRANSACTIONS_PER_PAYOUT) {\r\n            toPayCount = winningsCount.sub(alreadyPayedCount);\r\n        }\r\n        else {\r\n            toPayCount = TRANSACTIONS_PER_PAYOUT;\r\n        }\r\n        return toPayCount;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"lotteryId\",\"type\":\"uint256\"}],\"name\":\"deleteLottery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lotteryId\",\"type\":\"uint256\"}],\"name\":\"getActualLotteryId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOpenedLotteries\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdmins\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lotteryId\",\"type\":\"uint256\"}],\"name\":\"getWinPlayers\",\"outputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"prizes\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"part\",\"type\":\"uint256\"}],\"name\":\"transferAdminPart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lotteryId\",\"type\":\"uint256\"}],\"name\":\"buyTicket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lotteryId\",\"type\":\"uint256\"}],\"name\":\"payOutLotteryPrizes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getAdminPartByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"part\",\"type\":\"uint256\"},{\"name\":\"sum\",\"type\":\"uint256\"},{\"name\":\"expiredDate\",\"type\":\"uint256\"}],\"name\":\"createOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUnpayedLotteries\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lotteryId\",\"type\":\"uint256\"}],\"name\":\"getUniquePlayersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getLotteryInfo\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"begin\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"number\",\"type\":\"uint256\"},{\"name\":\"pot\",\"type\":\"uint256\"},{\"name\":\"parentId\",\"type\":\"uint256\"},{\"name\":\"childId\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"prizeType\",\"type\":\"uint8\"},{\"name\":\"withDiscount\",\"type\":\"bool\"},{\"name\":\"isContinued\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeLotteries\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"confirmOrder\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lotteryId\",\"type\":\"uint256\"}],\"name\":\"getLotteryPlayers\",\"outputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"blockNumbers\",\"type\":\"uint256[]\"},{\"name\":\"sums\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getFinishedLotteryInfo\",\"outputs\":[{\"name\":\"winNumber\",\"type\":\"uint256\"},{\"name\":\"blockNumberForRandom\",\"type\":\"uint256\"},{\"name\":\"blockHashForRandom\",\"type\":\"bytes32\"},{\"name\":\"totalPlayers\",\"type\":\"uint256\"},{\"name\":\"alreadyPayedCount\",\"type\":\"uint256\"},{\"name\":\"winningsCount\",\"type\":\"uint256\"},{\"name\":\"isPayedOut\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getOrderInfo\",\"outputs\":[{\"name\":\"admin\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"part\",\"type\":\"uint256\"},{\"name\":\"sum\",\"type\":\"uint256\"},{\"name\":\"expiredDate\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"begin\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"prizeType\",\"type\":\"uint8\"},{\"name\":\"withDiscount\",\"type\":\"bool\"}],\"name\":\"createLottery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"distributeDividend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"lotteryId\",\"type\":\"uint256\"}],\"name\":\"BuyTicketEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"lotteryId\",\"type\":\"uint256\"}],\"name\":\"NewLotteryEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"lotteryId\",\"type\":\"uint256\"}],\"name\":\"FinishedLotteryEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"leftToPay\",\"type\":\"uint256\"}],\"name\":\"PayOutEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"lotteryId\",\"type\":\"uint256\"}],\"name\":\"DeleteLotteryEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"prize\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"lotteryId\",\"type\":\"uint256\"}],\"name\":\"WinPrizeEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"part\",\"type\":\"uint256\"}],\"name\":\"TransferAdminPartEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TransferOwnershipEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"sum\",\"type\":\"uint256\"}],\"name\":\"DividendEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"NewOrderEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"ConfirmOrderEvent\",\"type\":\"event\"}]","ContractName":"Ethertime","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4b29e2956fb1471e9e0e9fdb98678fd9649e54a804ae5ed3d0700bbcca1b96f4"}]}