{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/utils/address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * IMPORTANT: It is unsafe to assume that an address for which this\r\n     * function returns false is an externally-owned account (EOA) and not a\r\n     * contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n      function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: contracts/SpiderPay.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract SpiderPay {\r\n  event Paid(bytes32 hash, bytes32 indexed no, address token, address from, uint256 value);\r\n  using Address for address;\r\n\r\n  mapping(bytes32 => bool) public paid;\r\n  address accountant = address(0xf2EBAbAeA9da140416793cbF348F14b650fe7329);\r\n  address signer;\r\n  address owner;\r\n\r\n  constructor(address _owner, address _signer) public {\r\n    owner = _owner;\r\n    signer = _signer;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(owner == msg.sender, \"The caller is not the Owner role\");\r\n    _;\r\n  }\r\n\r\n  function setOwner(address _owner) public onlyOwner {\r\n    owner = _owner;\r\n  }\r\n\r\n  function setSigner(address _signer) public onlyOwner {\r\n    signer = _signer;\r\n  }\r\n\r\n  function() external payable {\r\n    require(false, \"DISABLED_METHOD\");\r\n  }\r\n\r\n  function isValid(\r\n    bytes32 hash,\r\n    address signer,\r\n    bytes memory signature\r\n  )\r\n  public\r\n  pure\r\n  returns (bool)\r\n  {\r\n    require(\r\n      signature.length == 65,\r\n      \"LENGTH_65_REQUIRED\"\r\n    );\r\n\r\n    bytes32 r;\r\n    bytes32 s;\r\n    uint8 v;\r\n\r\n    assembly {\r\n    // first 32 bytes, after the length prefix\r\n      r := mload(add(signature, 32))\r\n    // second 32 bytes\r\n      s := mload(add(signature, 64))\r\n    // final byte (first byte of the next 32 bytes)\r\n      v := byte(0, mload(add(signature, 96)))\r\n    }\r\n\r\n    address recovered = ecrecover(\r\n      keccak256(abi.encodePacked(\r\n        \"\\x19Ethereum Signed Message:\\n32\",\r\n        hash\r\n      )),\r\n      v,\r\n      r,\r\n      s\r\n    );\r\n    return signer == recovered;\r\n  }\r\n\r\n  function payETH(bytes32 no, uint256 expiration, bytes memory signature) public payable {\r\n    require(expiration > block.timestamp, \"EXPIRED_PAY\");\r\n    require(!paid[no], \"PAID_NO\");\r\n\r\n    bytes32 hash = keccak256(abi.encodePacked(no, expiration));\r\n    require(isValid(hash, signer, signature), \"INVALID_SIGN\");\r\n\r\n    accountant.toPayable().transfer(msg.value);\r\n\r\n    emit Paid(hash, no, address(0x0000000000000000000000000000000000000001), msg.sender, msg.value);\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"no\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Paid\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"paid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"no\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"payETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SpiderPay","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000e402823203e5714eec86f8959fc26688c1e42142000000000000000000000000e402823203e5714eec86f8959fc26688c1e42142","Library":"","LicenseType":"None","SwarmSource":"bzzr://90211558af3d49228b3bb2f887c75e6a79ac7dd4c727f154183e38441930bbf5"}]}