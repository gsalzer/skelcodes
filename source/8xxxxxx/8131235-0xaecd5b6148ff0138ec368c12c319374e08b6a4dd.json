{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  function add(uint a, uint b) internal pure returns (uint c) {\r\n\r\n    c = a + b;\r\n\r\n    require(c >= a);\r\n\r\n  }\r\n\r\n  function sub(uint a, uint b) internal pure returns (uint c) {\r\n\r\n    require(b <= a);\r\n\r\n    c = a - b;\r\n\r\n  }\r\n\r\n  function mul(uint a, uint b) internal pure returns (uint c) {\r\n\r\n    c = a * b;\r\n\r\n    require(a == 0 || c / a == b);\r\n\r\n  }\r\n\r\n  function div(uint a, uint b) internal pure returns (uint c) {\r\n\r\n    require(b > 0);\r\n\r\n    c = a / b;\r\n\r\n  }\r\n\r\n}\r\n\r\ncontract caelumPublicSale {\r\n    using SafeMath for uint;\r\n    \r\n    \r\n    uint public ethPrice;\r\n    uint public lastPriceChange;\r\n    uint public maxCap = 750000000000000000000;\r\n    uint bought;\r\n    bool public isRunning = true;\r\n    uint public endDate;\r\n    \r\n    address[] candidates;\r\n    mapping(address => uint) public balances;\r\n    mapping(address => uint) public balances_clmp;\r\n    \r\n    address private owner;\r\n    \r\n    uint public promoUsers = 0;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    constructor() public {\r\n        ethPrice = 600000000000000;\r\n        lastPriceChange = now;\r\n        endDate = now + 180 days;\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    \r\n    /**\r\n     *  Minimal funding solution. The user get's added to our list, who will be inserted on mainnet genesis block.\r\n     *  A minimum of 250000000000000000 Wei is required (0.25 ETH) to participate.\r\n     */\r\n    function purchase() public payable returns (bool success) {\r\n        \r\n        require(isRunning, 'unning issie');\r\n        require(now < endDate, 'date isse');\r\n        require(bought.add(msg.value) <= maxCap, 'cap issue');\r\n        \r\n        require(msg.value > 0);\r\n        require(msg.value >= 250000000000000000);\r\n        \r\n        \r\n        if (balances_clmp[msg.sender] == 0) {\r\n            candidates.push(msg.sender);\r\n        }\r\n        \r\n        if (promoUsers < 5 ) {\r\n            if (getRatio(msg.value) == 50000) {\r\n                balances_clmp[msg.sender] += getRatio(msg.value).add(25000);\r\n                promoUsers++;\r\n            }\r\n        } else {\r\n            balances_clmp[msg.sender] += getRatio(msg.value);\r\n            \r\n        }\r\n        \r\n        balances[msg.sender] += msg.value;\r\n        bought = bought + msg.value;\r\n        \r\n        return true;\r\n    }\r\n    \r\n    \r\n    /**  \r\n     *  Allows the developer to change the USD ratio with limitations:\r\n     * \r\n     *  Limits: Max 10% up or down of current value \r\n     *  Limits: Can be executed once every 3 days to counteract price fluctuations\r\n     * \r\n     */\r\n    \r\n    function setEtherRatio(uint RatioInWei) onlyOwner public {\r\n        require (lastPriceChange < (now - 3 days));\r\n        \r\n        uint _min = getMinPrice();\r\n        uint _max = getMaxPrice();\r\n        \r\n        require (RatioInWei >= _min && RatioInWei <= _max);\r\n        ethPrice = RatioInWei;\r\n    }\r\n    \r\n    function closeContract() onlyOwner public {\r\n        require(isRunning);\r\n        isRunning = false;\r\n    }\r\n    \r\n    function getMaxPrice() public view returns(uint MaxWei) {\r\n        uint max = ethPrice.div(10);\r\n        return ethPrice.add(max);\r\n    }\r\n    \r\n    function getMinPrice() public view returns (uint MinWei) {\r\n        uint max = ethPrice.div(10);\r\n        return ethPrice.sub(max);\r\n    }\r\n    \r\n    function getCandidates() public view returns(address[]) {\r\n        return candidates;\r\n    }\r\n    \r\n    function getRatio(uint valInWei) public view returns(uint) {\r\n        return valInWei / ethPrice;\r\n    }\r\n    \r\n    function withdraw(uint amount) public onlyOwner returns(bool) {\r\n        require(amount <= address(this).balance);\r\n        owner.transfer(amount);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getCandidates\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isRunning\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"valInWei\",\"type\":\"uint256\"}],\"name\":\"getRatio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"purchase\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPriceChange\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxPrice\",\"outputs\":[{\"name\":\"MaxWei\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances_clmp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promoUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"RatioInWei\",\"type\":\"uint256\"}],\"name\":\"setEtherRatio\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMinPrice\",\"outputs\":[{\"name\":\"MinWei\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"caelumPublicSale","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e5636016a82de16f51de3ad4e79232bb512da85e7c036d299aa8d79a6e651394"}]}