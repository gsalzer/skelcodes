{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract  UtilEtherTest  {\r\n\r\n\r\n\r\n    function getRecommendScaleBylevelandTim(uint level,uint times) public view returns(uint);\r\n    function compareStr (string _str,string str) public view returns(bool);\r\n    function getLineLevel(uint value) public view returns(uint);\r\n    function getScBylevel(uint level) public view returns(uint);\r\n    function getFireScBylevel(uint level) public view returns(uint);\r\n    function getlevel(uint value) public view returns(uint);\r\n}\r\ncontract EtherTest {\r\n\r\n\r\n\r\n    uint ethWei = 0.001 ether;\r\n    uint allCount = 0;\r\n    uint oneDayCount = 0;\r\n    uint totalMoney = 0;\r\n    uint totalCount = 0;\r\n\tuint private beginTime = 1;\r\n    uint lineCountTimes = 1;\r\n\tuint private currentIndex = 0;\r\n\taddress private owner;\r\n\tuint private actStu = 0;\r\n\r\n\tconstructor () public {\r\n        owner = msg.sender;\r\n    }\r\n\tstruct User{\r\n\r\n        address ethAddress;//用户地址\r\n        uint freeAmount;\r\n        uint freezeAmount;//冻结金额\r\n        uint rechargeAmount;//充值金额\r\n        uint withdrawlsAmount;//提现金额\r\n        uint inviteAmonut;\r\n        uint bonusAmount;//奖金\r\n        uint dayInviteAmonut;\r\n        uint dayBonusAmount;\r\n        uint level;//级别\r\n        uint resTime;//恢复时间\r\n        uint lineAmount;//在线金额\r\n        uint lineLevel;//在线级别\r\n        string inviteCode;//邀请码\r\n        string beInvitedCode;\r\n\t\tuint isline;\r\n\t\tuint status; //状态\r\n\t\tbool isVaild;//是否有效\r\n    }\r\n\r\n    struct BonusGame{//投资\r\n\r\n        address ethAddress;//地址\r\n        uint inputAmount;//数量\r\n        uint resTime;//时间\r\n        string inviteCode;//邀请码\r\n        string beInvitedCode;//被邀请码\r\n\t\tuint isline;\r\n\t\tuint status;\r\n\t\tuint times;\r\n    }\r\n\r\n    mapping (address => User) userMapping;\r\n    mapping (string => address) addressMapping;\r\n    mapping (uint => address) indexMapping;\r\n\r\n    BonusGame[] game;\r\n    UtilEtherTest  util = UtilEtherTest(0x0ED5Cc0231dDc04545A57430152D1e9E91e111e4);\r\n\r\n    modifier onlyOwner {\r\n        require (msg.sender == owner, \"OnlyOwner methods called by non-owner.\");\r\n        _;\r\n    }\r\n\r\n    function () public payable {\r\n    }\r\n\r\n     function invest(address ethAddress ,uint inputAmount,string  inviteCode,string  beInvitedCode) public payable{\r\n\r\n        ethAddress = msg.sender;\r\n  \t\tinputAmount = msg.value;\r\n        uint lineAmount = inputAmount;\r\n\r\n        if(!getUserByinviteCode(beInvitedCode)){\r\n            ethAddress.transfer(msg.value);\r\n            require(getUserByinviteCode(beInvitedCode),\"Code must exit\");\r\n        }\r\n        if(inputAmount < 1 * ethWei || inputAmount > 15 * ethWei || util.compareStr(inviteCode,\"\")){\r\n             ethAddress.transfer(msg.value);\r\n                require(inputAmount >= 1* ethWei && inputAmount <= 15* ethWei && !util.compareStr(inviteCode,\"\"), \"between 1 and 15\");\r\n        }\r\n        User storage userTest = userMapping[ethAddress];\r\n        if(userTest.isVaild && userTest.status != 2){\r\n            if((userTest.lineAmount + userTest.freezeAmount + lineAmount)> (15 * ethWei)){\r\n                ethAddress.transfer(msg.value);\r\n                require((userTest.lineAmount + userTest.freezeAmount + lineAmount) <= 15 * ethWei,\"can not beyond 15 eth\");\r\n                return;\r\n            }\r\n        }\r\n       totalMoney = totalMoney + inputAmount;\r\n        totalCount = totalCount + 1;\r\n        bool isLine = false;\r\n\r\n        uint level =util.getlevel(inputAmount);\r\n        uint lineLevel = util.getLineLevel(lineAmount);\r\n        if(beginTime==1){\r\n            lineAmount = 0;\r\n            oneDayCount = oneDayCount + inputAmount;\r\n            BonusGame memory invest = BonusGame(ethAddress,inputAmount,now, inviteCode, beInvitedCode ,1,1,0);\r\n            game.push(invest);\r\n            sendFeetoAdmin(inputAmount);\r\n\t\t\tsendFeetoLuckdraw(inputAmount);\r\n        }else{\r\n            allCount = allCount + inputAmount;\r\n            isLine = true;\r\n            invest = BonusGame(ethAddress,inputAmount,now, inviteCode, beInvitedCode ,0,1,0);\r\n            inputAmount = 0;\r\n            game.push(invest);\r\n        }\r\n          User memory user = userMapping[ethAddress];\r\n            if(user.isVaild && user.status == 1){\r\n                user.freezeAmount = user.freezeAmount + inputAmount;\r\n                user.rechargeAmount = user.rechargeAmount + inputAmount;\r\n                user.lineAmount = user.lineAmount + lineAmount;\r\n                level =util.getlevel(user.freezeAmount);\r\n                lineLevel = util.getLineLevel(user.freezeAmount + user.freeAmount +user.lineAmount);\r\n                user.level = level;\r\n                user.lineLevel = lineLevel;\r\n                userMapping[ethAddress] = user;\r\n\r\n            }else{\r\n                if(isLine){\r\n                    level = 0;\r\n                }\r\n                if(user.isVaild){\r\n                   inviteCode = user.inviteCode;\r\n                   beInvitedCode = user.beInvitedCode;\r\n                }\r\n                user = User(ethAddress,0,inputAmount,inputAmount,0,0,0,0,0,level,now,lineAmount,lineLevel,inviteCode, beInvitedCode ,1,1,true);\r\n                userMapping[ethAddress] = user;\r\n\r\n                indexMapping[currentIndex] = ethAddress;\r\n                currentIndex = currentIndex + 1;\r\n            }\r\n            address  ethAddressCode = addressMapping[inviteCode];\r\n            if(ethAddressCode == 0x0000000000000000000000000000000000000000){\r\n                addressMapping[inviteCode] = ethAddress;\r\n            }\r\n\r\n    }\r\n\r\n      function remedy(address ethAddress ,uint freezeAmount,string  inviteCode,string  beInvitedCode ,uint freeAmount,uint times) public {\r\n        require(actStu == 0,\"this action was closed\");\r\n        freezeAmount = freezeAmount * ethWei;\r\n        freeAmount = freeAmount * ethWei;\r\n        uint level =util.getlevel(freezeAmount);\r\n        uint lineLevel = util.getLineLevel(freezeAmount + freeAmount);\r\n        if(beginTime==1 && freezeAmount > 0){\r\n            BonusGame memory invest = BonusGame(ethAddress,freezeAmount,now, inviteCode, beInvitedCode ,1,1,times);\r\n            game.push(invest);\r\n        }\r\n          User memory user = userMapping[ethAddress];\r\n            if(user.isVaild){\r\n                user.freeAmount = user.freeAmount + freeAmount;\r\n                user.freezeAmount = user.freezeAmount +  freezeAmount;\r\n                user.rechargeAmount = user.rechargeAmount + freezeAmount +freezeAmount;\r\n                user.level =util.getlevel(user.freezeAmount);\r\n                user.lineLevel = util.getLineLevel(user.freezeAmount + user.freeAmount +user.lineAmount);\r\n                userMapping[ethAddress] = user;\r\n            }else{\r\n                user = User(ethAddress,freeAmount,freezeAmount,freeAmount+freezeAmount,0,0,0,0,0,level,now,0,lineLevel,inviteCode, beInvitedCode ,1,1,true);\r\n                userMapping[ethAddress] = user;\r\n\r\n                indexMapping[currentIndex] = ethAddress;\r\n                currentIndex = currentIndex + 1;\r\n            }\r\n            address  ethAddressCode = addressMapping[inviteCode];\r\n            if(ethAddressCode == 0x0000000000000000000000000000000000000000){\r\n                addressMapping[inviteCode] = ethAddress;\r\n            }\r\n\r\n    }\r\n     //用户提币\r\n    function ethWithDraw(address ethAddress) public{\r\n        bool success = false;\r\n        require (msg.sender == ethAddress, \"account diffrent\");\r\n\r\n         User memory user = userMapping[ethAddress];\r\n         uint sendMoney  = user.freeAmount;\r\n\r\n        bool isEnough = false ;\r\n        uint resultMoney = 0;\r\n        (isEnough,resultMoney) = isEnoughBalance(sendMoney);\r\n\r\n            user.withdrawlsAmount =user.withdrawlsAmount + resultMoney;\r\n            user.freeAmount = user.freeAmount - resultMoney;\r\n            user.level = util.getlevel(user.freezeAmount);\r\n            user.lineLevel = util.getLineLevel(user.freezeAmount + user.freeAmount);\r\n            userMapping[ethAddress] = user;\r\n            if(resultMoney > 0 ){\r\n                ethAddress.transfer(resultMoney);\r\n            }\r\n    }\r\n\r\n    //计算数量和奖励\r\n    function countShareAndRecommendedAward(uint startLength ,uint endLength,uint times) external onlyOwner {\r\n\r\n        for(uint i = startLength; i < endLength; i++) {\r\n            BonusGame memory invest = game[i];\r\n             address  ethAddressCode = addressMapping[invest.inviteCode];\r\n            User memory user = userMapping[ethAddressCode];\r\n            if(invest.isline==1 && invest.status == 1 && now < (invest.resTime + 5 days) && invest.times <5){\r\n             game[i].times = invest.times + 1;\r\n               uint scale = util.getScBylevel(user.level);\r\n                user.dayBonusAmount =user.dayBonusAmount + scale*invest.inputAmount/1000;\r\n                user.bonusAmount = user.bonusAmount + scale*invest.inputAmount/1000;\r\n                userMapping[ethAddressCode] = user;\r\n\r\n            }else if(invest.isline==1 && invest.status == 1 && ( now >= (invest.resTime + 5 days) || invest.times >= 5 )){\r\n                game[i].status = 2;\r\n                user.freezeAmount = user.freezeAmount - invest.inputAmount;\r\n                user.freeAmount = user.freeAmount + invest.inputAmount;\r\n                user.level = util.getlevel(user.freezeAmount);\r\n                userMapping[ethAddressCode] = user;\r\n            }\r\n        }\r\n    }\r\n\r\n    function countRecommend(uint startLength ,uint endLength,uint times) public {//推荐数量计算\r\n        require ((msg.sender == owner), \"\");\r\n         for(uint i = startLength; i <= endLength; i++) {\r\n\r\n            address ethAddress = indexMapping[i];\r\n            if(ethAddress != 0x0000000000000000000000000000000000000000){\r\n\r\n                User memory user =  userMapping[ethAddress];\r\n                if(user.status == 1 && user.freezeAmount >= 1 * ethWei){\r\n                    uint scale = util.getScBylevel(user.level);\r\n                    execute(user.beInvitedCode,1,user.freezeAmount,scale);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function execute(string inviteCode,uint runtimes,uint money,uint shareSc) private  returns(string,uint,uint,uint) {\r\n\r\n        string memory codeOne = \"null\";\r\n\r\n        address  ethAddressCode = addressMapping[inviteCode];\r\n        User memory user = userMapping[ethAddressCode];\r\n\r\n        if (user.isVaild && runtimes <= 25){\r\n            codeOne = user.beInvitedCode;\r\n              if(user.status == 1){\r\n\r\n                  uint fireSc = util.getFireScBylevel(user.lineLevel);\r\n                  uint recommendSc = util.getRecommendScaleBylevelandTim(user.lineLevel,runtimes);\r\n                  uint moneyResult = 0;\r\n\r\n                  if(money <= (user.freezeAmount+user.lineAmount+user.freeAmount)){\r\n                      moneyResult = money;\r\n                  }else{\r\n                      moneyResult = user.freezeAmount+user.lineAmount+user.freeAmount;\r\n                  }\r\n\r\n                  if(recommendSc != 0){\r\n                      user.dayInviteAmonut =user.dayInviteAmonut + (moneyResult*shareSc*fireSc*recommendSc/1000/10/100);\r\n                      user.inviteAmonut = user.inviteAmonut + (moneyResult*shareSc*fireSc*recommendSc/1000/10/100);\r\n                      userMapping[ethAddressCode] = user;\r\n                  }\r\n              }\r\n              return execute(codeOne,runtimes+1,money,shareSc);\r\n        }\r\n        return (codeOne,0,0,0);\r\n\r\n    }\r\n\r\n    function sendMoneyToUser(address ethAddress, uint money) private {\r\n        address send_to_address = ethAddress;\r\n        uint256 _eth = money;\r\n        send_to_address.transfer(_eth);\r\n\r\n    }\r\n\r\n    function sendAward(uint startLength ,uint endLength,uint times)  external onlyOwner  {\r\n\r\n         for(uint i = startLength; i <= endLength; i++) {\r\n\r\n            address ethAddress = indexMapping[i];\r\n            if(ethAddress != 0x0000000000000000000000000000000000000000){\r\n\r\n                User memory user =  userMapping[ethAddress];\r\n                if(user.status == 1){\r\n                    uint sendMoney =user.dayInviteAmonut + user.dayBonusAmount;\r\n\r\n                    if(sendMoney >= (ethWei/10)){\r\n                         sendMoney = sendMoney - (ethWei/1000);\r\n                        bool isEnough = false ;\r\n                        uint resultMoney = 0;\r\n                        (isEnough,resultMoney) = isEnoughBalance(sendMoney);\r\n                        if(isEnough){\r\n                            sendMoneyToUser(user.ethAddress,resultMoney);\r\n                            //\r\n                            user.dayInviteAmonut = 0;\r\n                            user.dayBonusAmount = 0;\r\n                            userMapping[ethAddress] = user;\r\n                        }else{\r\n                            userMapping[ethAddress] = user;\r\n                            if(sendMoney > 0 ){\r\n                                sendMoneyToUser(user.ethAddress,resultMoney);\r\n                                user.dayInviteAmonut = 0;\r\n                                user.dayBonusAmount = 0;\r\n                                userMapping[ethAddress] = user;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function isEnoughBalance(uint sendMoney) private view returns (bool,uint){\r\n\r\n        if(this.balance > 0 ){\r\n             if(sendMoney >= this.balance){\r\n                if((this.balance ) > 0){\r\n                    return (false,this.balance);\r\n                }else{\r\n                    return (false,0);\r\n                }\r\n            }else{\r\n                 return (true,sendMoney);\r\n            }\r\n        }else{\r\n             return (false,0);\r\n        }\r\n    }\r\n\r\n    function getUserByAddress(address ethAddress) public view returns(uint,uint,uint,uint,uint,uint,uint,uint,uint,string,string,uint){\r\n\r\n            User memory user = userMapping[ethAddress];\r\n            return (user.lineAmount,user.freeAmount,user.freezeAmount,user.inviteAmonut,\r\n            user.bonusAmount,user.lineLevel,user.status,user.dayInviteAmonut,user.dayBonusAmount,user.inviteCode,user.beInvitedCode,user.level);\r\n    }\r\n    function getUserByinviteCode(string inviteCode) public view returns (bool){\r\n\r\n        address  ethAddressCode = addressMapping[inviteCode];\r\n        User memory user = userMapping[ethAddressCode];\r\n      if (user.isVaild){\r\n            return true;\r\n      }\r\n        return false;\r\n    }\r\n    function getSomeInfo() public view returns(uint,uint,uint){\r\n        return(totalMoney,totalCount,beginTime);\r\n    }\r\n    function test() public view returns(uint,uint,uint){\r\n        return (game.length,currentIndex,actStu);\r\n    }\r\n     function sendFeetoAdmin(uint amount) private {\r\n        address adminAddress = 0x0ED5Cc0231dDc04545A57430152D1e9E91e111e4;\r\n        adminAddress.transfer(amount/25);\r\n    }\r\n\t function sendFeetoLuckdraw(uint amount) private {\r\n\t        address LuckdrawAddress = 0xb6334EC4C7d77174d7d6405eB10D2f23DB94DD97;\r\n\t        LuckdrawAddress.transfer(amount/100);\r\n\t    }\r\n    function closeAct()  external onlyOwner {\r\n        actStu = 1;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"closeAct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ethAddress\",\"type\":\"address\"},{\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"name\":\"inviteCode\",\"type\":\"string\"},{\"name\":\"beInvitedCode\",\"type\":\"string\"}],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"startLength\",\"type\":\"uint256\"},{\"name\":\"endLength\",\"type\":\"uint256\"},{\"name\":\"times\",\"type\":\"uint256\"}],\"name\":\"sendAward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"startLength\",\"type\":\"uint256\"},{\"name\":\"endLength\",\"type\":\"uint256\"},{\"name\":\"times\",\"type\":\"uint256\"}],\"name\":\"countShareAndRecommendedAward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSomeInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ethAddress\",\"type\":\"address\"}],\"name\":\"ethWithDraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ethAddress\",\"type\":\"address\"},{\"name\":\"freezeAmount\",\"type\":\"uint256\"},{\"name\":\"inviteCode\",\"type\":\"string\"},{\"name\":\"beInvitedCode\",\"type\":\"string\"},{\"name\":\"freeAmount\",\"type\":\"uint256\"},{\"name\":\"times\",\"type\":\"uint256\"}],\"name\":\"remedy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ethAddress\",\"type\":\"address\"}],\"name\":\"getUserByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"inviteCode\",\"type\":\"string\"}],\"name\":\"getUserByinviteCode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"startLength\",\"type\":\"uint256\"},{\"name\":\"endLength\",\"type\":\"uint256\"},{\"name\":\"times\",\"type\":\"uint256\"}],\"name\":\"countRecommend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"test\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"EtherTest","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://3c215b0ba8371b6c746a44036a0b99d481070dc591ff77f33cc98365172a351f"}]}