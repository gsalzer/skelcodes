{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/interface/token/ERC20Interface.sol\r\n\r\n///////////////////////////////////////////////////////////////////////////////////\r\n////                     Standard ERC-20 token contract (EPK)                   ///\r\n///////////////////////////////////////////////////////////////////////////////////\r\n///                                                                             ///\r\n/// Standard ERC-20 token contract definition as mentioned above                ///\r\n///                                                                             ///\r\n///////////////////////////////////////////////////////////////////////////////////\r\n///                                                          Mr.K by 2019/08/01 ///\r\n///////////////////////////////////////////////////////////////////////////////////\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\ncontract ERC20Interface\r\n{\r\n    uint256 public totalSupply;\r\n    string  public name;\r\n    uint8   public decimals;\r\n    string  public symbol;\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    /// 只有合约可以调用的内部API\r\n    function API_MoveToken(address _from, address _to, uint256 _value) external;\r\n}\r\n\r\n// File: contracts/interface/ticket/TicketInterface.sol\r\n\r\n///////////////////////////////////////////////////////////////////////////////////\r\n////                           EPK record contract                              ///\r\n///////////////////////////////////////////////////////////////////////////////////\r\n///                                                                             ///\r\n/// Used to pay EPK to unlock accounts, record payment results, and provide a   ///\r\n/// query method for querying whether one account has been unlocked.            ///\r\n///                                                                             ///\r\n///////////////////////////////////////////////////////////////////////////////////\r\n///                                                          Mr.K by 2019/08/01 ///\r\n///////////////////////////////////////////////////////////////////////////////////\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\ninterface TicketInterface {\r\n\r\n    //One address needs to have enough EPK to unlock accounts. If one account has been unlocked before, the method will not take effect.\r\n    function PaymentTicket() external;\r\n\r\n    //Check if the one address has paid EPK to unlock the account.\r\n    function HasTicket( address ownerAddr ) external view returns (bool);\r\n}\r\n\r\n// File: contracts/InternalModule.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\ncontract InternalModule {\r\n\r\n    address[] _authAddress;\r\n\r\n    address _contractOwner;\r\n\r\n    address _managerAddress;\r\n\r\n    constructor() public {\r\n        _contractOwner = msg.sender;\r\n    }\r\n\r\n    modifier OwnerOnly() {\r\n        require( _contractOwner == msg.sender ); _;\r\n    }\r\n\r\n    modifier ManagerOnly() {\r\n        require(msg.sender == _managerAddress); _;\r\n    }\r\n\r\n    modifier APIMethod() {\r\n\r\n        bool exist = false;\r\n\r\n        for (uint i = 0; i < _authAddress.length; i++) {\r\n            if ( _authAddress[i] == msg.sender ) {\r\n                exist = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        require(exist); _;\r\n    }\r\n\r\n    function SetRoundManager(address rmaddr ) external OwnerOnly {\r\n        _managerAddress = rmaddr;\r\n    }\r\n\r\n    function AddAuthAddress(address _addr) external ManagerOnly {\r\n        _authAddress.push(_addr);\r\n    }\r\n\r\n    function DelAuthAddress(address _addr) external ManagerOnly {\r\n\r\n        for (uint i = 0; i < _authAddress.length; i++) {\r\n\r\n            if (_authAddress[i] == _addr) {\r\n\r\n                for (uint j = 0; j < _authAddress.length - 1; j++) {\r\n\r\n                    _authAddress[j] = _authAddress[j+1];\r\n\r\n                }\r\n\r\n                delete _authAddress[_authAddress.length - 1];\r\n                _authAddress.length--;\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n// File: contracts/ERC20Token.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n\r\n\r\ncontract ERC20Token is ERC20Interface, InternalModule {\r\n    string  public name                     = \"Name\";\r\n    string  public symbol                   = \"Symbol\";\r\n    uint8   public decimals                 = 18;\r\n    uint256 public totalSupply              = 1000000000 * 10 ** 18;\r\n    uint256 constant private MAX_UINT256    = 2 ** 256 - 1;\r\n    uint256 private constant brunMaxLimit = (1000000000 * 10 ** 18) - (10000000 * 10 ** 18);\r\n\r\n    mapping (address => uint256) public balances;\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    constructor(string memory tokenName, string memory tokenSymbol, uint256 tokenTotalSupply, uint256 mint) public {\r\n\r\n        name = tokenName;\r\n        symbol = tokenSymbol;\r\n        totalSupply = tokenTotalSupply;\r\n\r\n        balances[_contractOwner] = mint;\r\n        balances[address(this)] = tokenTotalSupply - mint;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public\r\n    returns (bool success) {\r\n        require(balances[msg.sender] >= _value);\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public\r\n    returns (bool success) {\r\n        uint256 allowance = allowed[_from][msg.sender];\r\n        require(balances[_from] >= _value && allowance >= _value);\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        if (allowance < MAX_UINT256) {\r\n            allowed[_from][msg.sender] -= _value;\r\n        }\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view\r\n    returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public\r\n    returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view\r\n    returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    uint256 private ticketPrice = 60000000000000000000;\r\n\r\n    mapping( address => bool ) private _paymentTicketAddrMapping;\r\n\r\n    function PaymentTicket() external {\r\n\r\n        require( _paymentTicketAddrMapping[msg.sender] == false, \"ERC20_ERR_001\");\r\n        require( balances[msg.sender] >= ticketPrice, \"ERC20_ERR_002\");\r\n\r\n        balances[msg.sender] -= ticketPrice;\r\n\r\n        if ( balances[address(0x0)] == brunMaxLimit ) {\r\n            balances[_contractOwner] += ticketPrice;\r\n        } else if ( balances[address(0x0)] + ticketPrice >= brunMaxLimit ) {\r\n            balances[_contractOwner] += (balances[address(0x0)] + ticketPrice) - brunMaxLimit;\r\n            balances[address(0x0)] = brunMaxLimit;\r\n        } else {\r\n            balances[address(0x0)] += ticketPrice;\r\n        }\r\n        _paymentTicketAddrMapping[msg.sender] = true;\r\n    }\r\n\r\n    function HasTicket( address ownerAddr ) external view returns (bool) {\r\n        return _paymentTicketAddrMapping[ownerAddr];\r\n    }\r\n    function API_MoveToken(address _from, address _to, uint256 _value) external APIMethod {\r\n\r\n        require( balances[_from] >= _value, \"ERC20_ERR_003\" );\r\n\r\n        balances[_from] -= _value;\r\n\r\n        if ( _to == address(0x0) ) {\r\n            if ( balances[address(0x0)] == brunMaxLimit ) {\r\n                balances[_contractOwner] += _value;\r\n            } else if ( balances[address(0x0)] + _value >= brunMaxLimit ) {\r\n                balances[_contractOwner] += (balances[address(0x0)] + _value) - brunMaxLimit;\r\n                balances[address(0x0)] = brunMaxLimit;\r\n            } else {\r\n                balances[address(0x0)] += _value;\r\n            }\r\n        } else {\r\n            balances[_to] += _value;\r\n        }\r\n\r\n        emit Transfer( _from, _to, _value );\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"ownerAddr\",\"type\":\"address\"}],\"name\":\"HasTicket\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"AddAuthAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rmaddr\",\"type\":\"address\"}],\"name\":\"SetRoundManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"API_MoveToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"PaymentTicket\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"DelAuthAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"tokenTotalSupply\",\"type\":\"uint256\"},{\"name\":\"mint\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ERC20Token","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000033b2e3c9fd0803ce800000000000000000000000000000000000000000000000052b7d2dcc80cd2e4000000000000000000000000000000000000000000000000000000000000000000000e45544820506c61796572204b6579000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000345504b0000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://7d6bb4e2b4703f6eab410ddc6807bdf26b4bd38500ecf29aba028ae33318d3e4"}]}