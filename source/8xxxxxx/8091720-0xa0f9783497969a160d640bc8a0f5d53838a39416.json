{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.8;\r\n\r\n/*\r\n    IdeaFeX Token crowdsale contract\r\n\r\n    Deployed to     : 0xa0f9783497969a160d640bc8a0f5d53838a39416\r\n    IFX token       : 0x2CF588136b15E47b555331d2f5258063AE6D01ed\r\n    Funds wallet    : 0x1bD99BA31f1056F962e017410c9514dD4d6da4c6\r\n    Supply for sale : 400,000,000.000000000000000000\r\n    Rate            : 2000 IFX = 1 ETH\r\n    Bonus           : 40% before 20% sold\r\n                      30% between 20% and 40% sold\r\n                      20% between 40% and 60% sold\r\n                      10% between 60% and 80% sold\r\n*/\r\n\r\n\r\n/* Safe maths */\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"Addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        require(b <= a, \"Subtraction overflow\");\r\n        uint c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a==0){\r\n            return 0;\r\n        }\r\n        uint c = a * b;\r\n        require(c / a == b, \"Multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        require(b > 0,\"Division by 0\");\r\n        uint c = a / b;\r\n        return c;\r\n    }\r\n    function mod(uint a, uint b) internal pure returns (uint) {\r\n        require(b != 0, \"Modulo by 0\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/* ERC20 standard interface */\r\n\r\ninterface ERC20Interface {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n\r\n    event Transfer(address indexed sender, address indexed recipient, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\n/* Safe ERC20 */\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint;\r\n\r\n    function safeTransferFrom(ERC20Interface token, address from, address recipient, uint value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, recipient, value));\r\n    }\r\n\r\n    function callOptionalReturn(ERC20Interface token, bytes memory data) private {\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) {\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/* No nested calls */\r\n\r\ncontract ReentrancyGuard {\r\n    uint private _guardCounter;\r\n\r\n    constructor () internal {\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n}\r\n\r\n\r\n/* IFX crowdsale */\r\n\r\ncontract IFXCrowdsale is ReentrancyGuard {\r\n    using SafeMath for uint;\r\n    using SafeERC20 for ERC20Interface;\r\n\r\n    // Addresses!!!\r\n    ERC20Interface private _IFX = ERC20Interface(0x2CF588136b15E47b555331d2f5258063AE6D01ed);\r\n    address payable private _fundingWallet = 0x1bD99BA31f1056F962e017410c9514dD4d6da4c6;\r\n    address payable private _tokenSaleWallet = 0x6924E015c192C0f1839a432B49e1e96e06571227;\r\n\r\n    uint private _rate = 2000;\r\n    uint private _weiRaised;\r\n    uint private _ifxSold;\r\n    uint private _bonus = 40;\r\n    uint private _rateCurrent = 2800;\r\n\r\n    event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint ethValue, uint ifxAmount);\r\n\r\n\r\n    // Basics\r\n\r\n    function () external payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    function token() public view returns (ERC20Interface) {\r\n        return _IFX;\r\n    }\r\n\r\n    function fundingWallet() public view returns (address payable) {\r\n        return _fundingWallet;\r\n    }\r\n\r\n    function rate() public view returns (uint) {\r\n        return _rate;\r\n    }\r\n\r\n    function rateWithBonus() public view returns (uint){\r\n        return _rateCurrent;\r\n    }\r\n\r\n    function bonus() public view returns (uint) {\r\n        return _bonus;\r\n    }\r\n\r\n    function weiRaised() public view returns (uint) {\r\n        return _weiRaised;\r\n    }\r\n\r\n    function ifxSold() public view returns (uint) {\r\n        return _ifxSold;\r\n    }\r\n\r\n\r\n    // Default when people send ETH to contract address\r\n\r\n    function buyTokens(address beneficiary) public nonReentrant payable {\r\n\r\n        // Ensures that the call is valid\r\n        require(beneficiary != address(0), \"Beneficiary is zero address\");\r\n        require(msg.value != 0, \"Value is 0\");\r\n\r\n        // Obtain token amount\r\n        uint tokenAmount = msg.value.mul(_rateCurrent);\r\n\r\n        // Ensures that the hard cap is not breached\r\n        require(_ifxSold + tokenAmount < 400000000 * 10**18, \"Hard cap reached\");\r\n\r\n        // Records the purchase internally\r\n        _weiRaised = _weiRaised.add(msg.value);\r\n        _ifxSold = _ifxSold.add(tokenAmount);\r\n\r\n        // Update the bonus after each purchase\r\n        _currentBonus();\r\n\r\n        // Process the purchase\r\n        _IFX.safeTransferFrom(_tokenSaleWallet, beneficiary, tokenAmount);\r\n        _fundingWallet.transfer(msg.value);\r\n\r\n        // Announce the purchase event\r\n        emit TokensPurchased(msg.sender, beneficiary, msg.value, tokenAmount);\r\n    }\r\n\r\n\r\n    // Bonus\r\n\r\n    function _currentBonus() internal {\r\n        if(_ifxSold < 80000000 * 10**18){\r\n            _bonus = 40;\r\n        } else if(_ifxSold >= 80000000 * 10**18 && _ifxSold < 160000000 * 10**18){\r\n            _bonus = 30;\r\n        } else if(_ifxSold >= 160000000 * 10**18 && _ifxSold < 240000000 * 10**18){\r\n            _bonus = 20;\r\n        } else if(_ifxSold >= 240000000 * 10**18 && _ifxSold < 320000000 * 10**18){\r\n            _bonus = 10;\r\n        } else if(_ifxSold >= 320000000 * 10**18){\r\n            _bonus = 0;\r\n        }\r\n\r\n        // _rate === 2000\r\n        // _rate / 100 === 20\r\n        // (_bonus + 100) * _rate / 100 === _bonus * 20 + _rate\r\n        _rateCurrent = _bonus * 20 + 2000;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateWithBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ifxSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ifxAmount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"}]","ContractName":"IFXCrowdsale","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3d012aa9c0150625f770b58c8a9182e05ba6bd5032e1f2d0a8dea6764579e67a"}]}