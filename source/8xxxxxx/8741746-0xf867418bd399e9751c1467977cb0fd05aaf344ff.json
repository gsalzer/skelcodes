{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.7;\r\n\r\ninterface CTokenInterface {\r\n    function borrow(uint borrowAmount) external returns (uint);\r\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint); // For ERC20\r\n    function borrowBalanceCurrent(address account) external returns (uint);\r\n    function exchangeRateCurrent() external returns (uint);\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n    function underlying() external view returns (address);\r\n}\r\n\r\ninterface CETHInterface {\r\n    function repayBorrowBehalf(address borrower) external payable; // For ETH\r\n}\r\n\r\ninterface ERC20Interface {\r\n    function allowance(address, address) external view returns (uint);\r\n    function balanceOf(address) external view returns (uint);\r\n    function approve(address, uint) external;\r\n    function transfer(address, uint) external returns (bool);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n}\r\n\r\ninterface ComptrollerInterface {\r\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\r\n    function getAssetsIn(address account) external view returns (address[] memory);\r\n}\r\n\r\ninterface PoolInterface {\r\n    function accessToken(address[] calldata ctknAddr, uint[] calldata tknAmt, bool isCompound) external;\r\n    function paybackToken(address[] calldata ctknAddr, bool isCompound) external payable;\r\n}\r\n\r\n\r\ncontract DSMath {\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        z = x - y <= x ? x - y : 0;\r\n    }\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Helpers is DSMath {\r\n\r\n    // address public comptrollerAddr = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\r\n\r\n    // address payable public liquidityAddr;\r\n    \r\n     function getCETHAddress() public pure returns (address cEthAddr) {\r\n        cEthAddr = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5; // main\r\n        //  troller = 0x142D11CB90a2b40f7d0C55ed1804988DfC316fAe;\r\n    }\r\n    // address public cEthAddr = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5; // main\r\n    // address public cEthAddr = 0xD83F707f003A1f0B1535028AB356FCE2667ab855; // kovan\r\n    // address public cUsdc = 0xDff375162cfE7D77473C1BEC4560dEDE974E138c;  // kovan\r\n        /**\r\n     * @dev get Compound Comptroller Address\r\n     */\r\n    function getComptrollerAddress() public pure returns (address troller) {\r\n        troller = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B; // main\r\n        //  troller = 0x142D11CB90a2b40f7d0C55ed1804988DfC316fAe;\r\n    }\r\n    \r\n    function getPoolAddress() public pure returns (address payable liqAddr){\r\n        liqAddr = 0x2b10e1970Ba95C27C6fe3d496DD5d624A1e68D56; // main\r\n        // liqAddr = 0x42688864aBceeF758E500571FB9df85EcD18b27b;\r\n    }\r\n\r\n    /**\r\n     * @dev check if the user has entered the market and enter if not\r\n     */\r\n    function enterMarket(address[] memory cErc20) internal {\r\n        ComptrollerInterface troller = ComptrollerInterface(getComptrollerAddress());\r\n        address[] memory markets = troller.getAssetsIn(address(this));\r\n        address[] memory toEnter = new address[](7);\r\n        uint count = 0;\r\n        for (uint j = 0; j < cErc20.length; j++) {\r\n            bool isEntered = false;\r\n            for (uint i = 0; i < markets.length; i++) {\r\n                if (markets[i] == cErc20[j]) {\r\n                    isEntered = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!isEntered) {\r\n                toEnter[count] = cErc20[j];\r\n                count += 1;\r\n            }\r\n        }\r\n        troller.enterMarkets(toEnter);\r\n    }\r\n\r\n    /**\r\n     * @dev get markets address owner has entered\r\n     */\r\n    function enteredMarkets(address owner) internal view returns (address[] memory) {\r\n        address[] memory markets = ComptrollerInterface(getComptrollerAddress()).getAssetsIn(owner);\r\n        return markets;\r\n    }\r\n\r\n    /**\r\n     * @dev setting allowance for the \"user proxy\" if required\r\n     */\r\n    function setApproval(address erc20, uint srcAmt, address to) internal {\r\n        ERC20Interface erc20Contract = ERC20Interface(erc20);\r\n        uint tokenAllowance = erc20Contract.allowance(address(this), to);\r\n        if (srcAmt > tokenAllowance) {\r\n            erc20Contract.approve(to, uint(-1));\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract ImportResolver is Helpers {\r\n    event LogCompoundImport(address owner, uint percentage, bool isCompound, address[] markets, address[] borrowAddr, uint[] borrowAmt);\r\n\r\n    function importAssets(uint toConvert, bool isCompound, uint borrowLenght) external {\r\n        uint initialBal = sub(getPoolAddress().balance, 10000000000); // subtracting 0.00000001 ETH from initial balance.\r\n        address[] memory markets = enteredMarkets(msg.sender);\r\n        address[] memory borrowAddr = new address[](borrowLenght);\r\n        uint[] memory borrowAmt = new uint[](borrowLenght);\r\n        uint borrowCount = 0;\r\n        // create an array of borrowed address and amount\r\n        for (uint i = 0; i < markets.length; i++) {\r\n            address cErc20 = markets[i];\r\n            uint toPayback = CTokenInterface(cErc20).borrowBalanceCurrent(msg.sender);\r\n            toPayback = wmul(toPayback, toConvert);\r\n            if (toPayback > 0) {\r\n                borrowAddr[borrowCount] = cErc20;\r\n                borrowAmt[borrowCount] = toPayback;\r\n                borrowCount += 1;\r\n            }\r\n        }\r\n        \r\n        assert(borrowCount == borrowLenght);\r\n        // Get liquidity assets to payback user wallet borrowed assets\r\n        PoolInterface(getPoolAddress()).accessToken(borrowAddr, borrowAmt, isCompound);\r\n\r\n        // // payback user wallet borrowed assets\r\n        for (uint i = 0; i < borrowAddr.length; i++) {\r\n            address cErc20 = borrowAddr[i];\r\n            uint toPayback = borrowAmt[i];\r\n            if (cErc20 == getCETHAddress()) {\r\n                CETHInterface(cErc20).repayBorrowBehalf.value(toPayback)(msg.sender);\r\n            } else {\r\n                CTokenInterface ctknContract = CTokenInterface(cErc20);\r\n                address erc20 = ctknContract.underlying();\r\n                setApproval(erc20, toPayback, cErc20);\r\n                require(ctknContract.repayBorrowBehalf(msg.sender, toPayback) == 0, \"transfer approved?\");\r\n            }\r\n        }\r\n\r\n        // transfer minted ctokens to InstaDApp smart wallet from user wallet\r\n        for (uint i = 0; i < markets.length; i++) {\r\n            address cErc20 = markets[i];\r\n            CTokenInterface ctknContract = CTokenInterface(cErc20);\r\n            uint supplyAmt = ctknContract.balanceOf(msg.sender);\r\n            supplyAmt = wmul(supplyAmt, toConvert);\r\n            if (supplyAmt > 0) {\r\n                require(ctknContract.transferFrom(msg.sender, address(this), supplyAmt), \"Allowance?\");\r\n            }\r\n        }\r\n\r\n        // // borrow and transfer assets to payback liquidity\r\n        enterMarket(markets);\r\n        for (uint i = 0; i < borrowAddr.length; i++) {\r\n            address cErc20 = borrowAddr[i];\r\n            uint toBorrow = borrowAmt[i];\r\n            CTokenInterface ctknContract = CTokenInterface(cErc20);\r\n            address erc20 = ctknContract.underlying();\r\n            require(ctknContract.borrow(toBorrow) == 0, \"got collateral?\");\r\n            if (cErc20 == getCETHAddress()) {\r\n                getPoolAddress().transfer(toBorrow);\r\n            } else {\r\n                require(ERC20Interface(erc20).transfer(getPoolAddress(), toBorrow), \"Not-enough-amt\");\r\n            }\r\n        }\r\n\r\n        //payback InstaDApp liquidity\r\n        PoolInterface(getPoolAddress()).paybackToken(borrowAddr, isCompound);\r\n        assert(getPoolAddress().balance >= initialBal);\r\n\r\n        emit LogCompoundImport(\r\n            msg.sender,\r\n            toConvert,\r\n            isCompound,\r\n            markets,\r\n            borrowAddr,\r\n            borrowAmt\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract CompImport is ImportResolver {\r\n    function() external payable {}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"toConvert\",\"type\":\"uint256\"},{\"name\":\"isCompound\",\"type\":\"bool\"},{\"name\":\"borrowLenght\",\"type\":\"uint256\"}],\"name\":\"importAssets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getComptrollerAddress\",\"outputs\":[{\"name\":\"troller\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCETHAddress\",\"outputs\":[{\"name\":\"cEthAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPoolAddress\",\"outputs\":[{\"name\":\"liqAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"percentage\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isCompound\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"markets\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"borrowAddr\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"borrowAmt\",\"type\":\"uint256[]\"}],\"name\":\"LogCompoundImport\",\"type\":\"event\"}]","ContractName":"CompImport","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://24d5ed6677a251f391fad0b1ffe6ca2c295af2dadca1a4b6e5dc21407f755d77"}]}