{"status":"1","message":"OK","result":[{"SourceCode":"{\"ERC20.sol\":{\"content\":\"pragma solidity ^0.4.25;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * https://eips.ethereum.org/EIPS/eip-20\\n * Originally based on code by FirstBlood:\\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n *\\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\\n * all accounts just by listening to said events. Note that this isn\\u0027t required by the specification, and other\\n * compliant implementations may not do it.\\n */\\ncontract ERC20 is IERC20, Ownable {\\n    using SafeMath for uint256;\\n\\n    mapping (address =\\u003e uint256) public _balances;\\n\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowed;\\n\\n    uint256 public _totalSupply;\\n\\n    /**\\n     * @dev Total number of tokens in existence\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev Gets the balance of the specified address.\\n     * @param owner The address to query the balance of.\\n     * @return A uint256 representing the amount owned by the passed address.\\n     */\\n    function balanceOf(address owner) public view returns (uint256) {\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n     * @param owner address The address which owns the funds.\\n     * @param spender address The address which will spend the funds.\\n     * @return A uint256 specifying the amount of tokens still available for the spender.\\n     */\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n        return _allowed[owner][spender];\\n    }\\n\\n    /**\\n     * @dev Transfer token to a specified address\\n     * @param to The address to transfer to.\\n     * @param value The amount to be transferred.\\n     */\\n    function transfer(address to, uint256 value) public returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n     * race condition is to first reduce the spender\\u0027s allowance to 0 and set the desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     */\\n    function approve(address spender, uint256 value) public returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Transfer tokens from one address to another.\\n     * Note that while this function emits an Approval event, this is not required as per the specification,\\n     * and other compliant implementations may not emit the event.\\n     * @param from address The address which you want to send tokens from\\n     * @param to address The address which you want to transfer to\\n     * @param value uint256 the amount of tokens to be transferred\\n     */\\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\\n        _transfer(from, to, value);\\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n     * the first transaction is mined)\\n     * From MonolithDAO Token.sol\\n     * Emits an Approval event.\\n     * @param spender The address which will spend the funds.\\n     * @param addedValue The amount of tokens to increase the allowance by.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n     * the first transaction is mined)\\n     * From MonolithDAO Token.sol\\n     * Emits an Approval event.\\n     * @param spender The address which will spend the funds.\\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Transfer token for a specified addresses\\n     * @param from The address to transfer from.\\n     * @param to The address to transfer to.\\n     * @param value The amount to be transferred.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        require(to != address(0));\\n\\n        _balances[from] = _balances[from].sub(value);\\n        _balances[to] = _balances[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Internal function that mints an amount of the token and assigns it to\\n     * an account. This encapsulates the modification of balances such that the\\n     * proper events are emitted.\\n     * @param account The account that will receive the created tokens.\\n     * @param value The amount that will be created.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        require(account != address(0));\\n\\n        _totalSupply = _totalSupply.add(value);\\n        _balances[account] = _balances[account].add(value);\\n        emit Transfer(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Internal function that burns an amount of the token of a given\\n     * account.\\n     * @param account The account whose tokens will be burnt.\\n     * @param value The amount that will be burnt.\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        require(account != address(0));\\n\\n        _totalSupply = _totalSupply.sub(value);\\n        _balances[account] = _balances[account].sub(value);\\n        emit Transfer(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Approve an address to spend another addresses\\u0027 tokens.\\n     * @param owner The address that owns the tokens.\\n     * @param spender The address that will spend the tokens.\\n     * @param value The number of tokens that can be spent.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        require(spender != address(0));\\n        require(owner != address(0));\\n\\n        _allowed[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev Internal function that burns an amount of the token of a given\\n     * account, deducting from the sender\\u0027s allowance for said account. Uses the\\n     * internal burn function.\\n     * Emits an Approval event (reflecting the reduced allowance).\\n     * @param account The account whose tokens will be burnt.\\n     * @param value The amount that will be burnt.\\n     */\\n    function _burnFrom(address account, uint256 value) internal {\\n        _burn(account, value);\\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\\n    }\\n}\\n\"},\"ERC20Detailed.sol\":{\"content\":\"pragma solidity ^0.4.25;\\n\\nimport \\\"./ERC20Mintable.sol\\\";\\n\\n/**\\n * @title ERC20Detailed token\\n * @dev The decimals are only for visualization purposes.\\n * All the operations are done using the smallest and indivisible token unit,\\n * just as on Ethereum all the operations are done in wei.\\n */\\n\\ncontract ERC20Detailed is ERC20Mintable {\\n  string private _name;\\n  string private _symbol;\\n  uint8 private _decimals;\\n  bool public mintable;\\n  bool public burnable;\\n\\n  constructor(string name, string symbol, uint8 decimals, uint256 initialSupply, bool _mintable, bool _burnable) public {\\n    _name = name;\\n    _symbol = symbol;\\n    _decimals = decimals;\\n    _totalSupply = initialSupply;\\n    _balances[msg.sender] = initialSupply;\\n    mintable = _mintable;\\n    burnable = _burnable;\\n  }\\n\\n  /**\\n   * @return the name of the token.\\n   */\\n  function name() public view returns(string) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @return the symbol of the token.\\n   */\\n  function symbol() public view returns(string) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @return the number of decimals of the token.\\n   */\\n  function decimals() public view returns(uint8) {\\n    return _decimals;\\n  }\\n\\n  /**\\n   * @dev mint function, checks if the contract is allowed to mint\\n   * @param _to the receiver of the tokens when mint funtion is successful\\n   * @param _value the amount of tokens to mint\\n   */\\n  function mint(address _to, uint256 _value) public returns (bool)  {\\n    require(mintable, \\\"Token is not mintable\\\");\\n    super.mint(_to, _value);\\n  }\\n\\n  /**\\n   * @dev burn function, checks if the contract is allowed to burn, then burns from sender\\u0027s account\\n   * @param _value the amount of tokens to burn\\n   */\\n  function burn(uint256 _value) public returns (bool)  {\\n    require(burnable, \\\"Token is not burnable\\\");\\n    super.burn(_value);\\n  }\\n}\\n\"},\"ERC20Mintable.sol\":{\"content\":\"pragma solidity ^0.4.25;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./MinterRole.sol\\\";\\n\\n/**\\n * @title ERC20Mintable\\n * @dev ERC20 minting logic\\n */\\ncontract ERC20Mintable is ERC20, MinterRole {\\n  /**\\n   * @dev Function to mint tokens\\n   * @param _to The address that will receive the minted tokens.\\n   * @param _value The amount of tokens to mint.\\n   * @return A boolean that indicates if the operation was successful.\\n   */\\n  function mint(address _to, uint256 _value) public onlyMinter returns (bool) {\\n    _mint(_to, _value);\\n    return true;\\n  }\\n\\n/**\\n   * @dev Function to burn tokens\\n   * @param _value The amount of tokens to burn from sender\\u0027s account.\\n   * @return A boolean that indicates if the operation was successful.\\n   */\\n  function burn(uint256 _value) public onlyMinter returns (bool) {\\n    _burn(msg.sender, _value);\\n    return true;\\n  }\\n}\\n\"},\"FactoryInterface.sol\":{\"content\":\"pragma solidity ^0.4.25;\\n\\nimport \\\"./FundsHolder.sol\\\";\\n\\n/**\\n * @title TokenReserve interface\\n */\\ncontract FactoryInterface {\\n\\n    address public metmToken;\\n    address[] issuers;\\n    address[] tokens;\\n\\n    uint256 public price;\\n\\n    FundsHolder internal fundsHolder;\\n\\n    struct TokenSettings {\\n        uint256 ts;\\n        uint256 price;\\n        string name;\\n        string symbol;\\n        address tokenAddress;\\n    }\\n\\n    /**\\n    * @dev array of tokens issued by the issuer\\n    */\\n    mapping(address =\\u003e address[]) issuerTokens;\\n\\n    /**\\n    * @dev in the form of issuerTokensData[userAddress][tokenAddress] = TokenSettings\\n    */\\n    mapping(address =\\u003e mapping(address =\\u003e TokenSettings)) issuerTokensData;\\n\\n    //implemented by the owner\\n    function setFundsHolderAddress(address _fundsHolder) external;\\n\\n    /**\\n    * @dev Function to set price of the token function, onlyowner\\n    * @param _price New price of the reserve.\\n    */\\n    function setPrice(uint256 _price) external;\\n\\n    /**\\n    * @dev Function to get info of all tokens created by the issuer\\n    * @param _issuer The address of the issuer.\\n    */\\n    function getAlltokens(address _issuer) public view returns (address[]);\\n\\n    /**\\n    * @dev num of tokens created on the platform\\n    */\\n    function getNumOfTokens() public view returns (uint256);\\n\\n    /**\\n    * @dev num of issuers who created tokens on the platform\\n    */\\n    function getNumOfIssuers() public view returns (uint256);\\n\\n    /**\\n    * @dev address of the funds holder, onlyOwner\\n    */\\n    function getFundsHolderAddress() public view returns (address);\\n}\\n\"},\"FundsHolder.sol\":{\"content\":\"pragma solidity ^0.4.25;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @title Contract to hold long term persistent data\\n */\\ncontract FundsHolder is Ownable {\\n    using SafeMath for uint256;\\n\\n    address public token;\\n    address[6] public owners = [\\n        0x535145e644d8d25E50DdA49Fb80c37D08C9862fE,\\n        0x4dc782F14bd27e63f1e0339B582a96d53df6C55f,\\n        0xa68358C42626f4e31820C30B09B27c4649670DE6,\\n        0x18f7e6B5A9b39895B7f38D696C702Cd290d5D77C,\\n        0x23C6599aAdF44Be7cbaD6D9051bb4C2255b2f713,\\n        0x1baCaE51d1AFf3B16E0392a31CbA07E1dF8eab95\\n    ];\\n    address community = 0x7A9dbEAd85731D7ec80D28e63aE6bACCA99F948E;\\n    address burnAddress = 0x000000000000000000000000000000000000dEaD;\\n\\n\\n    mapping (address =\\u003e uint256) public balance;\\n    mapping(address =\\u003e bool) isOwner; /** All involved on the project that will get revenue */\\n\\n\\n    modifier onlyOwners() {\\n        require(isOwner[msg.sender], \\\"Sender is not owner\\\");\\n        _;\\n    }\\n\\n    constructor(address _token) public {\\n        require(_token != address(0), \\\"Token address cannot be zero\\\");\\n        token = _token;\\n        isOwner[owners[0]] = true; //DAN\\n        isOwner[owners[1]] = true; //Soren\\n        isOwner[owners[2]] = true; //Mark\\n        isOwner[owners[3]] = true; //Marwan\\n        isOwner[owners[4]] = true; //Santiago\\n        isOwner[owners[5]] = true; //Tom\\n    }\\n\\n    function withdraw() external onlyOwners {\\n        require(ERC20(token).balanceOf(this) \\u003e 0, \\\"Contract does not have any balance\\\");\\n        uint256 half = ERC20(token).balanceOf(this)/2;\\n        uint256 amount = half/6;\\n        uint256 percent25 = half/2;\\n        ERC20(token).transfer(owners[0], amount);\\n        ERC20(token).transfer(owners[1], amount);\\n        ERC20(token).transfer(owners[2], amount);\\n        ERC20(token).transfer(owners[3], amount);\\n        ERC20(token).transfer(owners[4], amount);\\n        ERC20(token).transfer(owners[5], amount);\\n        ERC20(token).transfer(burnAddress, percent25); //burn 25%\\n        ERC20(token).transfer(community, percent25);\\n    }\\n\\n    function isAddressOwner(address _address) public view returns (bool) {\\n        return isOwner[_address];\\n    }\\n}\\n\"},\"IERC20.sol\":{\"content\":\"pragma solidity ^0.4.25;\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface IERC20 {\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address who) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"MinterRole.sol\":{\"content\":\"pragma solidity ^0.4.25;\\n\\nimport \\\"./Roles.sol\\\";\\n\\ncontract MinterRole {\\n  using Roles for Roles.Role;\\n\\n  event MinterAdded(address indexed account);\\n  event MinterRemoved(address indexed account);\\n\\n  Roles.Role private minters;\\n\\n  constructor() internal {\\n    _addMinter(msg.sender);\\n  }\\n\\n  modifier onlyMinter() {\\n    require(isMinter(msg.sender));\\n    _;\\n  }\\n\\n  function isMinter(address account) public view returns (bool) {\\n    return minters.has(account);\\n  }\\n\\n  function addMinter(address account) public onlyMinter {\\n    _addMinter(account);\\n  }\\n\\n  function renounceMinter() public {\\n    _removeMinter(msg.sender);\\n  }\\n\\n  function _addMinter(address account) internal {\\n    minters.add(account);\\n    emit MinterAdded(account);\\n  }\\n\\n  function _removeMinter(address account) internal {\\n    minters.remove(account);\\n    emit MinterRemoved(account);\\n  }\\n}\\n\"},\"Ownable.sol\":{\"content\":\"pragma solidity ^0.4.25;\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n    /**\\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n    * account.\\n    */\\n    constructor() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n    * @dev Throws if called by any account other than the owner.\\n    */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Sender is not contract owner\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        require(newOwner != address(0));\\n        emit OwnershipTransferred(owner, newOwner);\\n        owner = newOwner;\\n    }\\n\\n}\\n\"},\"Roles.sol\":{\"content\":\"pragma solidity ^0.4.25;\\n\\n/**\\n * @title Roles\\n * @dev Library for managing addresses assigned to a Role.\\n */\\nlibrary Roles {\\n    struct Role {\\n        mapping (address =\\u003e bool) bearer;\\n    }\\n\\n    /**\\n     * @dev give an account access to this role\\n     */\\n    function add(Role storage role, address account) internal {\\n        require(account != address(0), \\\"address cannot be 0x\\\");\\n        require(!has(role, account), \\\"account already in role\\\");\\n\\n        role.bearer[account] = true;\\n    }\\n\\n    /**\\n     * @dev remove an account\\u0027s access to this role\\n     */\\n    function remove(Role storage role, address account) internal {\\n        require(account != address(0), \\\"address cannot be 0x\\\");\\n        require(has(role, account), \\\"account not in role\\\");\\n\\n        role.bearer[account] = false;\\n    }\\n\\n    /**\\n     * @dev check if an account has this role\\n     * @return bool\\n     */\\n    function has(Role storage role, address account) internal view returns (bool) {\\n        require(account != address(0), \\\"address cannot be 0x\\\");\\n        return role.bearer[account];\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.4.25;\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n\\n  /**\\n  * @dev Multiplies two numbers, throws on overflow.\\n  */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n  /**\\n  * @dev Integer division of two numbers, truncating the quotient.\\n  */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b \\u003e 0); // Solidity automatically throws when dividing by 0\\n        // uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n        return a / b;\\n    }\\n\\n  /**\\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n  */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b \\u003c= a);\\n        return a - b;\\n    }\\n\\n  /**\\n  * @dev Adds two numbers, throws on overflow.\\n  */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        c = a + b;\\n        assert(c \\u003e= a);\\n        return c;\\n    }\\n}\\n\"},\"UtilityFactoryInterface.sol\":{\"content\":\"pragma solidity ^0.4.25;\\n\\nimport \\\"./FactoryInterface.sol\\\";\\n\\n/**\\n * @title TokenReserve interface\\n */\\ncontract UtilityFactoryInterface is FactoryInterface {\\n\\n    event Issued(address indexed _issuer, string _symbol, string _name, uint256 _initialSupply, uint8 _decimals);\\n\\n    /**\\n    * @dev Function to release token\\n    * @param _symbol Symbol of the new token.\\n    * @param _name Name of the new token.\\n    * @param _initialSupply Supply of the utility token.\\n    * @param _decimals number of decimals of the utility token.\\n    * @param _mintable sets the token as mintable\\n    * @param _burnable sets the token as burnable\\n    */\\n    function createToken(string _symbol, string _name, uint256 _initialSupply, uint8 _decimals, bool _mintable, bool _burnable) external;\\n}\"},\"UtilityTokenFactory.sol\":{\"content\":\"pragma solidity ^0.4.25;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./UtilityFactoryInterface.sol\\\";\\nimport \\\"./ERC20Detailed.sol\\\";\\n\\n\\n/**\\n * @title UtilityTokenFactory\\n */\\ncontract UtilityTokenFactory is UtilityFactoryInterface, Ownable {\\n\\n    constructor(address _token, uint256 _price, address _fundsHolder) public {\\n        require(_token != address(0), \\\"Token address cannot be 0\\\");\\n        require(_price \\u003e 0, \\\"price should be more than 0\\\");\\n        require(_fundsHolder != address(0), \\\"FundsHolder address cannot be zero\\\");\\n        metmToken = _token;\\n        price = _price;\\n        fundsHolder = FundsHolder(_fundsHolder);\\n    }\\n\\n    function setFundsHolderAddress(address _fundsHolder) external onlyOwner {\\n        require(_fundsHolder!=address(0), \\\"address cannot be 0x\\\");\\n        fundsHolder = FundsHolder(_fundsHolder);\\n    }\\n\\n    function setPrice(uint256 _price) external onlyOwner {\\n        require(_price \\u003e 0, \\\"Price cannot be 0\\\");\\n        price = _price;\\n    }\\n\\n    function createToken(string _symbol, string _name, uint256 _initialSupply, uint8 _decimals, bool _mintable, bool _burnable) external {\\n        require(bytes(_symbol).length \\u003e= 2, \\\"Symbol length should be more than 2\\\");\\n        require(bytes(_name).length \\u003e= 2, \\\"Name length should be more than 2\\\");\\n        require(_initialSupply \\u003e= 0, \\\"Supply has to be more or equal than 0\\\");\\n        require(_decimals \\u003e 0, \\\"Decimals has to be more than 0\\\");\\n        require(IERC20(metmToken).allowance(msg.sender, address(this)) \\u003e= price, \\\"Insufficent allowance\\\");\\n        require(IERC20(metmToken).transferFrom(msg.sender, address(fundsHolder), price), \\\"EVM Error\\\");\\n        ERC20Detailed uToken = new ERC20Detailed(_name, _symbol, _decimals, _initialSupply, _mintable, _burnable);\\n        TokenSettings memory settings = TokenSettings({\\n            ts: now,\\n            price: price,\\n            name: _name,\\n            symbol: _symbol,\\n            tokenAddress: address(uToken)\\n        });\\n        issuerTokens[msg.sender].push(address(uToken));\\n        issuerTokensData[msg.sender][address(uToken)] = settings;\\n        issuers.push(msg.sender);\\n        tokens.push(address(uToken));\\n        uToken.transfer(msg.sender, uToken.balanceOf(this));\\n        uToken.transferOwnership(msg.sender);\\n        emit Issued(msg.sender, _symbol, _name, _initialSupply, _decimals);\\n    }\\n\\n    function getAlltokens(address _issuer) public view returns (address[]) {\\n        return issuerTokens[_issuer];\\n    }\\n\\n    function getInfo(address _issuer, address _token) public view\\n    returns (uint256, string, string, uint8, uint256, uint256, bool, bool) {\\n        TokenSettings memory settings = issuerTokensData[_issuer][_token];\\n        ERC20Detailed uToken = ERC20Detailed(_token);\\n        return(\\n            settings.price,\\n            settings.name,\\n            settings.symbol,\\n            uToken.decimals(),\\n            uToken.totalSupply(),\\n            settings.ts,\\n            uToken.mintable(),\\n            uToken.burnable()\\n        );\\n    }\\n\\n    function getNumOfTokens() public view returns (uint256) {\\n        return tokens.length;\\n    }\\n\\n    function getNumOfIssuers() public view returns (uint256) {\\n        return issuers.length;\\n    }\\n\\n    function getFundsHolderAddress() public view returns (address) {\\n        return address(fundsHolder);\\n    }\\n}\\n\"}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getFundsHolderAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumOfTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"metmToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_issuer\",\"type\":\"address\"}],\"name\":\"getAlltokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fundsHolder\",\"type\":\"address\"}],\"name\":\"setFundsHolderAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_issuer\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_mintable\",\"type\":\"bool\"},{\"name\":\"_burnable\",\"type\":\"bool\"}],\"name\":\"createToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumOfIssuers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_fundsHolder\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_issuer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"Issued\",\"type\":\"event\"}]","ContractName":"UtilityTokenFactory","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000fef3884b603c33ef8ed4183346e093a173c94da600000000000000000000000000000000000000000000152d02c7e14af6800000000000000000000000000000c8723780ed6906e9830eb58f9e93c99b800ff962","Library":"","SwarmSource":"bzzr://7fad313234753c525dfaf5573e22284e41270a7f4511a8bdadfcc680acde2a41"}]}