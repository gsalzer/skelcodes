{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * CryptoDays\r\n *\r\n * Website: https://cryptodays.club\r\n * Email: admin@cryptodays.club\r\n */\r\n\r\npragma solidity ^0.5.11;\r\n\r\ncontract CryptoDaysMicro {\r\n  address public creator;\r\n  uint public currentUserID;\r\n\r\n  mapping (uint => uint) public levelPrice;\r\n  mapping (address => User) public users;\r\n  mapping (uint => address) public userAddresses;\r\n\r\n  uint MAX_LEVEL = 6;\r\n  uint REFERRALS_LIMIT = 2;\r\n  uint LEVEL_DURATION = 100 days;\r\n\r\n  struct User {\r\n    uint id;\r\n    uint referrerID;\r\n    address[] referrals;\r\n    mapping (uint => uint) levelExpiresAt;\r\n  }\r\n\r\n  event RegisterUserEvent(address indexed user, address indexed referrer, uint time, uint id, uint expires);\r\n  event BuyLevelEvent(address indexed user, uint indexed level, uint time, uint expires);\r\n  event GetLevelProfitEvent(address indexed user, address indexed referral, uint indexed level, uint time);\r\n  event LostLevelProfitEvent(address indexed user, address indexed referral, uint indexed level, uint time);\r\n\r\n  modifier userNotRegistered() {\r\n    require(users[msg.sender].id == 0, 'User is already registered');\r\n    _;\r\n  }\r\n\r\n  modifier userRegistered() {\r\n    require(users[msg.sender].id != 0, 'User does not exist');\r\n    _;\r\n  }\r\n\r\n  modifier validReferrerID(uint _referrerID) {\r\n    require(_referrerID > 0 && _referrerID <= currentUserID, 'Invalid referrer ID');\r\n    _;\r\n  }\r\n\r\n  modifier validLevel(uint _level) {\r\n    require(_level > 0 && _level <= MAX_LEVEL, 'Invalid level');\r\n    _;\r\n  }\r\n\r\n  modifier validLevelAmount(uint _level) {\r\n    require(msg.value == levelPrice[_level], 'Invalid level amount');\r\n    _;\r\n  }\r\n\r\n  constructor() public {\r\n    levelPrice[1] = 0.01 ether;\r\n    levelPrice[2] = 0.015 ether;\r\n    levelPrice[3] = 0.03 ether;\r\n    levelPrice[4] = 0.06 ether;\r\n    levelPrice[5] = 0.12 ether;\r\n    levelPrice[6] = 0.24 ether;\r\n\r\n    currentUserID++;\r\n\r\n    creator = msg.sender;\r\n\r\n    users[creator] = createNewUser(0);\r\n    userAddresses[currentUserID] = creator;\r\n\r\n    for (uint i = 1; i <= MAX_LEVEL; i++) {\r\n      users[creator].levelExpiresAt[i] = 1 << 37;\r\n    }\r\n  }\r\n\r\n  function () external payable {\r\n    uint level;\r\n\r\n    for (uint i = 1; i <= MAX_LEVEL; i++) {\r\n      if (msg.value == levelPrice[i]) {\r\n        level = i;\r\n        break;\r\n      }\r\n    }\r\n\r\n    require(level > 0, 'Invalid amount has sent');\r\n\r\n    if (users[msg.sender].id != 0) {\r\n      buyLevel(level);\r\n      return;\r\n    }\r\n\r\n    if (level != 1) {\r\n      revert('Buy first level for 0.1 ETH');\r\n    }\r\n\r\n    address referrer = bytesToAddress(msg.data);\r\n    registerUser(users[referrer].id);\r\n  }\r\n\r\n  function registerUser(uint _referrerID) public payable userNotRegistered() validReferrerID(_referrerID) validLevelAmount(1) {\r\n    if (users[userAddresses[_referrerID]].referrals.length >= REFERRALS_LIMIT) {\r\n      _referrerID = users[findReferrer(userAddresses[_referrerID])].id;\r\n    }\r\n\r\n    currentUserID++;\r\n\r\n    users[msg.sender] = createNewUser(_referrerID);\r\n    userAddresses[currentUserID] = msg.sender;\r\n    users[msg.sender].levelExpiresAt[1] = now + LEVEL_DURATION;\r\n\r\n    users[userAddresses[_referrerID]].referrals.push(msg.sender);\r\n\r\n    transferLevelPayment(1, msg.sender);\r\n    emit RegisterUserEvent(msg.sender, userAddresses[_referrerID], now, currentUserID, users[msg.sender].levelExpiresAt[1]);\r\n  }\r\n\r\n  function buyLevel(uint _level) public payable userRegistered() validLevel(_level) validLevelAmount(_level) {\r\n    for (uint l = _level - 1; l > 0; l--) {\r\n      require(getUserLevelExpiresAt(msg.sender, l) >= now, 'Buy the previous level');\r\n    }\r\n\r\n    if (getUserLevelExpiresAt(msg.sender, _level) == 0) {\r\n      users[msg.sender].levelExpiresAt[_level] = now + LEVEL_DURATION;\r\n    } else {\r\n      users[msg.sender].levelExpiresAt[_level] += LEVEL_DURATION;\r\n    }\r\n\r\n    transferLevelPayment(_level, msg.sender);\r\n    emit BuyLevelEvent(msg.sender, _level, now, users[msg.sender].levelExpiresAt[_level]);\r\n  }\r\n\r\n  function findReferrer(address _user) public view returns (address) {\r\n    if (users[_user].referrals.length < REFERRALS_LIMIT) {\r\n      return _user;\r\n    }\r\n\r\n    address[1024] memory referrals;\r\n    referrals[0] = users[_user].referrals[0];\r\n    referrals[1] = users[_user].referrals[1];\r\n\r\n    address referrer;\r\n\r\n    for (uint i = 0; i < 1024; i++) {\r\n      if (users[referrals[i]].referrals.length < REFERRALS_LIMIT) {\r\n        referrer = referrals[i];\r\n        break;\r\n      }\r\n\r\n      if (i >= 512) {\r\n        continue;\r\n      }\r\n\r\n      referrals[(i+1)*2] = users[referrals[i]].referrals[0];\r\n      referrals[(i+1)*2+1] = users[referrals[i]].referrals[1];\r\n    }\r\n\r\n    require(referrer != address(0), 'Referrer was not found');\r\n\r\n    return referrer;\r\n  }\r\n\r\n  function transferLevelPayment(uint _level, address _user) internal {\r\n    uint height = _level > 3 ? _level - 3 : _level;\r\n    address referrer = getUserUpline(_user, height);\r\n\r\n    if (referrer == address(0)) {\r\n      referrer = creator;\r\n    }\r\n\r\n    if (getUserLevelExpiresAt(referrer, _level) < now) {\r\n      emit LostLevelProfitEvent(referrer, msg.sender, _level, now);\r\n      transferLevelPayment(_level, referrer);\r\n      return;\r\n    }\r\n\r\n    if (addressToPayable(referrer).send(msg.value)) {\r\n      emit GetLevelProfitEvent(referrer, msg.sender, _level, now);\r\n    }\r\n  }\r\n\r\n\r\n  function getUserUpline(address _user, uint height) public view returns (address) {\r\n    if (height <= 0 || _user == address(0)) {\r\n      return _user;\r\n    }\r\n\r\n    return this.getUserUpline(userAddresses[users[_user].referrerID], height - 1);\r\n  }\r\n\r\n  function getUserReferrals(address _user) public view returns (address[] memory) {\r\n    return users[_user].referrals;\r\n  }\r\n\r\n  function getUserLevelExpiresAt(address _user, uint _level) public view returns (uint) {\r\n    return users[_user].levelExpiresAt[_level];\r\n  }\r\n\r\n\r\n  function createNewUser(uint _referrerID) private view returns (User memory) {\r\n    return User({ id: currentUserID, referrerID: _referrerID, referrals: new address[](0) });\r\n  }\r\n\r\n  function bytesToAddress(bytes memory _addr) private pure returns (address addr) {\r\n    assembly {\r\n      addr := mload(add(_addr, 20))\r\n    }\r\n  }\r\n\r\n  function addressToPayable(address _addr) private pure returns (address payable) {\r\n    return address(uint160(_addr));\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referrerID\",\"type\":\"uint256\"}],\"name\":\"registerUser\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getUserLevelExpiresAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserReferrals\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"findReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"}],\"name\":\"getUserUpline\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"buyLevel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"}],\"name\":\"RegisterUserEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"}],\"name\":\"BuyLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"GetLevelProfitEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"LostLevelProfitEvent\",\"type\":\"event\"}]","ContractName":"CryptoDaysMicro","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://2780926ccdec5b4f2ab4ca93e949b7b8ab31fe1710ca7c5372699541c0c49ca5"}]}