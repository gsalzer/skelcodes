{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.7;\r\n\r\n\r\n// Batch transfer Ether and Wesion\r\n\r\n/**\r\n * @title SafeMath for uint256\r\n * @dev Unsigned math operations with safety checks that revert on error.\r\n */\r\nlibrary SafeMath256 {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract\r\n     * to the sender account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @return The address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0));\r\n        address __previousOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(__previousOwner, newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Rescue compatible ERC20 Token\r\n     *\r\n     * @param tokenAddr ERC20 The address of the ERC20 token contract\r\n     * @param receiver The address of the receiver\r\n     * @param amount uint256\r\n     */\r\n    function rescueTokens(address tokenAddr, address receiver, uint256 amount) external onlyOwner {\r\n        IERC20 __token = IERC20(tokenAddr);\r\n        require(receiver != address(0));\r\n        uint256 __balance = __token.balanceOf(address(this));\r\n\r\n        require(__balance >= amount);\r\n        assert(__token.transfer(receiver, amount));\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20{\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title Batch Transfer Ether And Wesion\r\n */\r\ncontract BatchTransferEtherAndWesion is Ownable{\r\n    using SafeMath256 for uint256;\r\n\r\n    IERC20 Wesion = IERC20(0x2c1564A74F07757765642ACef62a583B38d5A213);\r\n\r\n    /**\r\n     * @dev Batch transfer both.\r\n     */\r\n    function batchTransfer(address payable[] memory accounts, uint256 etherValue, uint256 vokenValue) public payable {\r\n        uint256 __etherBalance = address(this).balance;\r\n        uint256 __vokenAllowance = Wesion.allowance(msg.sender, address(this));\r\n\r\n        require(__etherBalance >= etherValue.mul(accounts.length));\r\n        require(__vokenAllowance >= vokenValue.mul(accounts.length));\r\n\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            accounts[i].transfer(etherValue);\r\n            assert(Wesion.transferFrom(msg.sender, accounts[i], vokenValue));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Batch transfer Ether.\r\n     */\r\n    function batchTtransferEther(address payable[] memory accounts, uint256 etherValue) public payable {\r\n        uint256 __etherBalance = address(this).balance;\r\n\r\n        require(__etherBalance >= etherValue.mul(accounts.length));\r\n\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            accounts[i].transfer(etherValue);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Batch transfer Wesion.\r\n     */\r\n    function batchTransferWesion(address[] memory accounts, uint256 wesionValue) public {\r\n        uint256 _wesionAllowance = Wesion.allowance(msg.sender, address(this));\r\n\r\n        require(_wesionAllowance >= wesionValue.mul(accounts.length));\r\n\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            assert(Wesion.transferFrom(msg.sender, accounts[i], wesionValue));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev set Wesion Address\r\n     */\r\n    function setWesionAddress(address _WesionAddr) public onlyOwner {\r\n        Wesion = IERC20(_WesionAddr);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"accounts\",\"type\":\"address[]\"},{\"name\":\"etherValue\",\"type\":\"uint256\"},{\"name\":\"vokenValue\",\"type\":\"uint256\"}],\"name\":\"batchTransfer\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"accounts\",\"type\":\"address[]\"},{\"name\":\"etherValue\",\"type\":\"uint256\"}],\"name\":\"batchTtransferEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"accounts\",\"type\":\"address[]\"},{\"name\":\"wesionValue\",\"type\":\"uint256\"}],\"name\":\"batchTransferWesion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_WesionAddr\",\"type\":\"address\"}],\"name\":\"setWesionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddr\",\"type\":\"address\"},{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BatchTransferEtherAndWesion","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://38b4851f12fe895c0f5d1bb9cab4eab3d94951632a72870926b57fe2c3e28f05"}]}