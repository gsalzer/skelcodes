{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ncontract TokenInterface {\r\n    function allowance(address, address) public returns (uint);\r\n    function balanceOf(address) public returns (uint);\r\n    function approve(address, uint) public;\r\n    function transfer(address, uint) public returns (bool);\r\n    function transferFrom(address, address, uint) public returns (bool);\r\n    function deposit() public payable;\r\n    function withdraw(uint) public;\r\n}\r\n\r\ncontract PipInterface {\r\n    function read() public returns (bytes32);\r\n}\r\n\r\ncontract PepInterface {\r\n    function peek() public returns (bytes32, bool);\r\n}\r\n\r\ncontract VoxInterface {\r\n    function par() public returns (uint);\r\n}\r\n\r\ncontract TubInterface {\r\n    event LogNewCup(address indexed lad, bytes32 cup);\r\n\r\n    function open() public returns (bytes32);\r\n    function join(uint) public;\r\n    function exit(uint) public;\r\n    function lock(bytes32, uint) public;\r\n    function free(bytes32, uint) public;\r\n    function draw(bytes32, uint) public;\r\n    function wipe(bytes32, uint) public;\r\n    function give(bytes32, address) public;\r\n    function shut(bytes32) public;\r\n    function bite(bytes32) public;\r\n    function cups(bytes32) public returns (address, uint, uint, uint);\r\n    function gem() public returns (TokenInterface);\r\n    function gov() public returns (TokenInterface);\r\n    function skr() public returns (TokenInterface);\r\n    function sai() public returns (TokenInterface);\r\n    function vox() public returns (VoxInterface);\r\n    function ask(uint) public returns (uint);\r\n    function mat() public returns (uint);\r\n    function chi() public returns (uint);\r\n    function ink(bytes32) public returns (uint);\r\n    function tab(bytes32) public returns (uint);\r\n    function rap(bytes32) public returns (uint);\r\n    function per() public returns (uint);\r\n    function pip() public returns (PipInterface);\r\n    function pep() public returns (PepInterface);\r\n    function tag() public returns (uint);\r\n    function drip() public;\r\n    function lad(bytes32 cup) public view returns (address);\r\n    function bid(uint wad) public view returns (uint);\r\n}\r\n\r\ncontract DSProxyInterface {\r\n    function execute(bytes memory _code, bytes memory _data) public payable returns (address, bytes32);\r\n\r\n    function execute(address _target, bytes memory _data) public payable returns (bytes32);\r\n\r\n    function setCache(address _cacheAddr) public payable returns (bool);\r\n\r\n    function owner() public returns (address);\r\n}\r\n\r\ncontract ProxyRegistryInterface {\r\n    function proxies(address _owner) public view returns(DSProxyInterface);\r\n    function build(address) public returns (address);\r\n}\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint supply);\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    function decimals() external view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ncontract GasTokenInterface is ERC20 {\r\n    function free(uint256 value) public returns (bool success);\r\n    function freeUpTo(uint256 value) public returns (uint256 freed);\r\n    function freeFrom(address from, uint256 value) public returns (bool success);\r\n    function freeFromUpTo(address from, uint256 value) public returns (uint256 freed);\r\n}\r\n\r\ncontract DSMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function max(uint x, uint y) internal pure returns (uint z) {\r\n        return x >= y ? x : y;\r\n    }\r\n    function imin(int x, int y) internal pure returns (int z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function imax(int x, int y) internal pure returns (int z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n    //\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n    //\r\n    // These facts are why it works:\r\n    //\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n    //   and applying the equation for even x gives\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n    //\r\n    //  Also, EVM division is flooring and\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n    //\r\n    function rpow(uint x, uint n) internal pure returns (uint z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract ConstantAddressesMainnet {\r\n    address public constant MAKER_DAI_ADDRESS = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\r\n    address public constant IDAI_ADDRESS = 0x14094949152EDDBFcd073717200DA82fEd8dC960;\r\n    address public constant SOLO_MARGIN_ADDRESS = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\r\n    address public constant CDAI_ADDRESS = 0xF5DCe57282A584D2746FaF1593d3121Fcac444dC;\r\n    address public constant KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address public constant MKR_ADDRESS = 0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2;\r\n    address public constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address public constant VOX_ADDRESS = 0x9B0F70Df76165442ca6092939132bBAEA77f2d7A;\r\n    address public constant PETH_ADDRESS = 0xf53AD2c6851052A81B42133467480961B2321C09;\r\n    address public constant TUB_ADDRESS = 0x448a5065aeBB8E423F0896E6c5D525C040f59af3;\r\n    address public constant WALLET_ID = 0x322d58b9E75a6918f7e7849AEe0fF09369977e08;\r\n    address public constant LOGGER_ADDRESS = 0xeCf88e1ceC2D2894A0295DB3D86Fe7CE4991E6dF;\r\n    address public constant OTC_ADDRESS = 0x39755357759cE0d7f32dC8dC45414CCa409AE24e;\r\n\r\n    address public constant KYBER_WRAPPER = 0xAae7ba823679889b12f71D1f18BEeCBc69E62237;\r\n    address public constant UNISWAP_WRAPPER = 0x0aa70981311D60a9521C99cecFDD68C3E5a83B83;\r\n    address public constant ETH2DAI_WRAPPER = 0xd7BBB1777E13b6F535Dec414f575b858ed300baF;\r\n\r\n    address public constant KYBER_INTERFACE = 0x818E6FECD516Ecc3849DAf6845e3EC868087B755;\r\n    address public constant UNISWAP_FACTORY = 0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95;\r\n    address public constant FACTORY_ADDRESS = 0x5a15566417e6C1c9546523066500bDDBc53F88C7;\r\n    address public constant PIP_INTERFACE_ADDRESS = 0x729D19f657BD0614b4985Cf1D82531c67569197B;\r\n\r\n    // Kovan addresses, don't have mainnet\r\n    address public constant PROXY_REGISTRY_INTERFACE_ADDRESS = 0x64A436ae831C1672AE81F674CAb8B6775df3475C;\r\n    address public constant GAS_TOKEN_INTERFACE_ADDRESS = 0x0000000000170CcC93903185bE5A2094C870Df62;\r\n\r\n    // Kovan addresses, not used on mainnet\r\n    address public constant COMPOUND_DAI_ADDRESS = 0x25a01a05C188DaCBCf1D61Af55D4a5B4021F7eeD;\r\n    address public constant STUPID_EXCHANGE = 0x863E41FE88288ebf3fcd91d8Dbb679fb83fdfE17;\r\n}\r\n\r\ncontract ConstantAddressesKovan {\r\n    address public constant KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address public constant WETH_ADDRESS = 0xd0A1E359811322d97991E03f863a0C30C2cF029C;\r\n    address public constant MAKER_DAI_ADDRESS = 0xC4375B7De8af5a38a93548eb8453a498222C4fF2;\r\n    address public constant MKR_ADDRESS = 0xAaF64BFCC32d0F15873a02163e7E500671a4ffcD;\r\n    address public constant VOX_ADDRESS = 0xBb4339c0aB5B1d9f14Bd6e3426444A1e9d86A1d9;\r\n    address public constant PETH_ADDRESS = 0xf4d791139cE033Ad35DB2B2201435fAd668B1b64;\r\n    address public constant TUB_ADDRESS = 0xa71937147b55Deb8a530C7229C442Fd3F31b7db2;\r\n    address public constant LOGGER_ADDRESS = 0x32d0e18f988F952Eb3524aCE762042381a2c39E5;\r\n    address public constant WALLET_ID = 0x54b44C6B18fc0b4A1010B21d524c338D1f8065F6;\r\n    address public constant OTC_ADDRESS = 0x4A6bC4e803c62081ffEbCc8d227B5a87a58f1F8F;\r\n    address public constant COMPOUND_DAI_ADDRESS = 0x25a01a05C188DaCBCf1D61Af55D4a5B4021F7eeD;\r\n    address public constant SOLO_MARGIN_ADDRESS = 0x4EC3570cADaAEE08Ae384779B0f3A45EF85289DE;\r\n    address public constant IDAI_ADDRESS = 0xA1e58F3B1927743393b25f261471E1f2D3D9f0F6;\r\n    address public constant CDAI_ADDRESS = 0xb6b09fBffBa6A5C4631e5F7B2e3Ee183aC259c0d;\r\n    address public constant STUPID_EXCHANGE = 0x863E41FE88288ebf3fcd91d8Dbb679fb83fdfE17;\r\n\r\n    address public constant KYBER_WRAPPER = 0x5595930d576Aedf13945C83cE5aaD827529A1310;\r\n    address public constant UNISWAP_WRAPPER = 0x5595930d576Aedf13945C83cE5aaD827529A1310;\r\n    address public constant ETH2DAI_WRAPPER = 0x823cde416973a19f98Bb9C96d97F4FE6C9A7238B;\r\n\r\n    address public constant FACTORY_ADDRESS = 0xc72E74E474682680a414b506699bBcA44ab9a930;\r\n    //\r\n    address public constant PIP_INTERFACE_ADDRESS = 0xA944bd4b25C9F186A846fd5668941AA3d3B8425F;\r\n    address public constant PROXY_REGISTRY_INTERFACE_ADDRESS = 0x64A436ae831C1672AE81F674CAb8B6775df3475C;\r\n    address public constant GAS_TOKEN_INTERFACE_ADDRESS = 0x0000000000170CcC93903185bE5A2094C870Df62;\r\n    address public constant KYBER_INTERFACE = 0x692f391bCc85cefCe8C237C01e1f636BbD70EA4D;\r\n\r\n    // Rinkeby, when no Kovan\r\n    address public constant UNISWAP_FACTORY = 0xf5D915570BC477f9B8D6C0E980aA81757A3AaC36;\r\n}\r\n\r\ncontract ConstantAddresses is ConstantAddressesMainnet {\r\n}\r\n\r\ncontract Monitor is DSMath, ConstantAddresses {\r\n\r\n    // KOVAN\r\n    PipInterface pip = PipInterface(PIP_INTERFACE_ADDRESS);\r\n    TubInterface tub = TubInterface(TUB_ADDRESS);\r\n    ProxyRegistryInterface registry = ProxyRegistryInterface(PROXY_REGISTRY_INTERFACE_ADDRESS);\r\n    GasTokenInterface gasToken = GasTokenInterface(GAS_TOKEN_INTERFACE_ADDRESS);\r\n\r\n    uint constant public REPAY_GAS_TOKEN = 30;\r\n    uint constant public BOOST_GAS_TOKEN = 19;\r\n\r\n    uint constant public MAX_GAS_PRICE = 40000000000; // 40 gwei\r\n\r\n    uint constant public REPAY_GAS_COST = 1300000;\r\n    uint constant public BOOST_GAS_COST = 650000;\r\n\r\n    address public saverProxy;\r\n    address public owner;\r\n    uint public changeIndex;\r\n\r\n    struct CdpHolder {\r\n        uint minRatio;\r\n        uint maxRatio;\r\n        uint optimalRatioBoost;\r\n        uint optimalRatioRepay;\r\n        address owner;\r\n    }\r\n\r\n    mapping(bytes32 => CdpHolder) public holders;\r\n\r\n    /// @dev This will be Bot addresses which will trigger the calls\r\n    mapping(address => bool) public approvedCallers;\r\n\r\n    event Subscribed(address indexed owner, bytes32 cdpId);\r\n    event Unsubscribed(address indexed owner, bytes32 cdpId);\r\n    event Updated(address indexed owner, bytes32 cdpId);\r\n\r\n    event CdpRepay(bytes32 indexed cdpId, address caller, uint _amount, uint _ratioBefore, uint _ratioAfter);\r\n    event CdpBoost(bytes32 indexed cdpId, address caller, uint _amount, uint _ratioBefore, uint _ratioAfter);\r\n\r\n    modifier onlyApproved() {\r\n        require(approvedCallers[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    constructor(address _saverProxy) public {\r\n        approvedCallers[msg.sender] = true;\r\n        owner = msg.sender;\r\n\r\n        saverProxy = _saverProxy;\r\n        changeIndex = 0;\r\n    }\r\n\r\n    /// @notice Owners of Cdps subscribe through DSProxy for automatic saving\r\n    /// @param _cdpId Id of the cdp\r\n    /// @param _minRatio Minimum ratio that the Cdp can be\r\n    /// @param _maxRatio Maximum ratio that the Cdp can be\r\n    /// @param _optimalRatioBoost Optimal ratio for the user after boost is performed\r\n    /// @param _optimalRatioRepay Optimal ratio for the user after repay is performed\r\n    function subscribe(bytes32 _cdpId, uint _minRatio, uint _maxRatio, uint _optimalRatioBoost, uint _optimalRatioRepay) public {\r\n        require(isOwner(msg.sender, _cdpId));\r\n\r\n        bool isCreated = holders[_cdpId].owner == address(0) ? true : false;\r\n\r\n        holders[_cdpId] = CdpHolder({\r\n            minRatio: _minRatio,\r\n            maxRatio: _maxRatio,\r\n            optimalRatioBoost: _optimalRatioBoost,\r\n            optimalRatioRepay: _optimalRatioRepay,\r\n            owner: msg.sender\r\n        });\r\n\r\n        changeIndex++;\r\n\r\n        if (isCreated) {\r\n            emit Subscribed(msg.sender, _cdpId);\r\n        } else {\r\n            emit Updated(msg.sender, _cdpId);\r\n        }\r\n    }\r\n\r\n    /// @notice Users can unsubscribe from monitoring\r\n    /// @param _cdpId Id of the cdp\r\n    function unsubscribe(bytes32 _cdpId) public {\r\n        require(isOwner(msg.sender, _cdpId));\r\n\r\n        delete holders[_cdpId];\r\n\r\n        changeIndex++;\r\n\r\n        emit Unsubscribed(msg.sender, _cdpId);\r\n    }\r\n\r\n    /// @notice Bots call this method to repay for user when conditions are met\r\n    /// @dev If the contract ownes gas token it will try and use it for gas price reduction\r\n    /// @param _cdpId Id of the cdp\r\n    /// @param _amount Amount of Eth to convert to Dai\r\n    function repayFor(bytes32 _cdpId, uint _amount) public onlyApproved {\r\n        if (gasToken.balanceOf(address(this)) >= BOOST_GAS_TOKEN) {\r\n            gasToken.free(BOOST_GAS_TOKEN);\r\n        }\r\n\r\n        CdpHolder memory holder = holders[_cdpId];\r\n        uint ratioBefore = getRatio(_cdpId);\r\n\r\n        require(holder.owner != address(0));\r\n        require(ratioBefore <= holders[_cdpId].minRatio);\r\n\r\n        uint gasCost = calcGasCost(REPAY_GAS_COST);\r\n\r\n        DSProxyInterface(holder.owner).execute(saverProxy, abi.encodeWithSignature(\"repay(bytes32,uint256,uint256)\", _cdpId, _amount, gasCost));\r\n\r\n        uint ratioAfter = getRatio(_cdpId);\r\n\r\n        emit CdpRepay(_cdpId, msg.sender, _amount, ratioBefore, ratioAfter);\r\n    }\r\n\r\n    /// @notice Bots call this method to boost for user when conditions are met\r\n    /// @dev If the contract ownes gas token it will try and use it for gas price reduction\r\n    /// @param _cdpId Id of the cdp\r\n    /// @param _amount Amount of Dai to convert to Eth\r\n    function boostFor(bytes32 _cdpId, uint _amount) public onlyApproved {\r\n        if (gasToken.balanceOf(address(this)) >= REPAY_GAS_TOKEN) {\r\n            gasToken.free(REPAY_GAS_TOKEN);\r\n        }\r\n\r\n        CdpHolder memory holder = holders[_cdpId];\r\n        uint ratioBefore = getRatio(_cdpId);\r\n\r\n        require(holder.owner != address(0));\r\n\r\n        require(ratioBefore >= holders[_cdpId].maxRatio);\r\n\r\n        uint gasCost = calcGasCost(BOOST_GAS_COST);\r\n\r\n        DSProxyInterface(holder.owner).execute(saverProxy, abi.encodeWithSignature(\"boost(bytes32,uint256,uint256)\", _cdpId, _amount, gasCost));\r\n\r\n        uint ratioAfter = getRatio(_cdpId);\r\n\r\n        emit CdpBoost(_cdpId, msg.sender, _amount, ratioBefore, ratioAfter);\r\n    }\r\n\r\n\r\n    /// @notice Calculates the ratio of a given cdp\r\n    /// @param _cdpId The id od the cdp\r\n    function getRatio(bytes32 _cdpId) public returns(uint) {\r\n        return (rdiv(rmul(rmul(tub.ink(_cdpId), tub.tag()), WAD), tub.tab(_cdpId)));\r\n    }\r\n\r\n    /// @notice Check if the owner is the cup owner\r\n    /// @param _owner Address which is the owner of the cup\r\n    /// @param _cdpId Id of the cdp\r\n    function isOwner(address _owner, bytes32 _cdpId) internal view returns(bool) {\r\n        require(tub.lad(_cdpId) == _owner);\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @notice Calculates gas cost (in Eth) of tx\r\n    /// @dev Gas price is limited to MAX_GAS_PRICE to prevent attack of draining user CDP\r\n    /// @param _gasAmount Amount of gas used for the tx\r\n    function calcGasCost(uint _gasAmount) internal view returns (uint) {\r\n        uint gasPrice = tx.gasprice <= MAX_GAS_PRICE ? tx.gasprice : MAX_GAS_PRICE;\r\n\r\n        return mul(gasPrice, _gasAmount);\r\n    }\r\n\r\n\r\n    /******************* OWNER ONLY OPERATIONS ********************************/\r\n\r\n    /// @notice Adds a new bot address which can call repay/boost\r\n    /// @param _caller Bot address\r\n    function addCaller(address _caller) public onlyOwner {\r\n        approvedCallers[_caller] = true;\r\n    }\r\n\r\n    /// @notice Removed a bot address so it can't call repay/boost\r\n    /// @param _caller Bot address\r\n    function removeCaller(address _caller) public onlyOwner {\r\n        approvedCallers[_caller] = false;\r\n    }\r\n\r\n    /// @notice If any tokens gets stuck in the contract\r\n    /// @param _tokenAddress Address of the ERC20 token\r\n    /// @param _to Address of the receiver\r\n    /// @param _amount The amount to be sent\r\n    function transferERC20(address _tokenAddress, address _to, uint _amount) public onlyOwner {\r\n        ERC20(_tokenAddress).transfer(_to, _amount);\r\n    }\r\n\r\n    /// @notice If any Eth gets stuck in the contract\r\n    /// @param _to Address of the receiver\r\n    /// @param _amount The amount to be sent\r\n    function transferEth(address payable _to, uint _amount) public onlyOwner {\r\n        _to.transfer(_amount);\r\n    }\r\n }","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"WETH_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CDAI_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"changeIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BOOST_GAS_COST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PIP_INTERFACE_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KYBER_ETH_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OTC_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cdpId\",\"type\":\"bytes32\"}],\"name\":\"getRatio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IDAI_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GAS_TOKEN_INTERFACE_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cdpId\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"repayFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VOX_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REPAY_GAS_COST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cdpId\",\"type\":\"bytes32\"},{\"name\":\"_minRatio\",\"type\":\"uint256\"},{\"name\":\"_maxRatio\",\"type\":\"uint256\"},{\"name\":\"_optimalRatioBoost\",\"type\":\"uint256\"},{\"name\":\"_optimalRatioRepay\",\"type\":\"uint256\"}],\"name\":\"subscribe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH2DAI_WRAPPER\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cdpId\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"boostFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STUPID_EXCHANGE\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BOOST_GAS_TOKEN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROXY_REGISTRY_INTERFACE_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"addCaller\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MKR_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FACTORY_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LOGGER_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"holders\",\"outputs\":[{\"name\":\"minRatio\",\"type\":\"uint256\"},{\"name\":\"maxRatio\",\"type\":\"uint256\"},{\"name\":\"optimalRatioBoost\",\"type\":\"uint256\"},{\"name\":\"optimalRatioRepay\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAKER_DAI_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REPAY_GAS_TOKEN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedCallers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KYBER_WRAPPER\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMPOUND_DAI_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UNISWAP_FACTORY\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PETH_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KYBER_INTERFACE\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WALLET_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SOLO_MARGIN_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UNISWAP_WRAPPER\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_GAS_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saverProxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"removeCaller\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TUB_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cdpId\",\"type\":\"bytes32\"}],\"name\":\"unsubscribe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_saverProxy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cdpId\",\"type\":\"bytes32\"}],\"name\":\"Subscribed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cdpId\",\"type\":\"bytes32\"}],\"name\":\"Unsubscribed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cdpId\",\"type\":\"bytes32\"}],\"name\":\"Updated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"cdpId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_ratioBefore\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_ratioAfter\",\"type\":\"uint256\"}],\"name\":\"CdpRepay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"cdpId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_ratioBefore\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_ratioAfter\",\"type\":\"uint256\"}],\"name\":\"CdpBoost\",\"type\":\"event\"}]","ContractName":"Monitor","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c627dd7a92cd32b2ea6d0a0aa798908f6c3691af","Library":"","SwarmSource":"bzzr://4e012617a33f98744d4d078285fcb4a0d93bc4d6d47e1afbf10647b7caf01cd0"}]}