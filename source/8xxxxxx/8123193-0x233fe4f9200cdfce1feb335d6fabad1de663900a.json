{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IGST2 {\r\n\r\n    function freeUpTo(uint256 value) external returns (uint256 freed);\r\n\r\n    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n}\r\n\r\n// solhint-disable max-line-length\r\ncontract LibConstants {\r\n\r\n    // Asset data for ZRX token. Used for fee transfers.\r\n\r\n    // The proxyId for ZRX_ASSET_DATA is bytes4(keccak256(\"ERC20Token(address)\")) = 0xf47261b0\r\n\r\n    // Kovan ZRX address is 0x6ff6c0ff1d68b964901f986d4c9fa3ac68346570.\r\n    // The ABI encoded proxyId and address is 0xf47261b00000000000000000000000006ff6c0ff1d68b964901f986d4c9fa3ac68346570\r\n    // bytes constant public ZRX_ASSET_DATA = \"\\xf4\\x72\\x61\\xb0\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x6f\\xf6\\xc0\\xff\\x1d\\x68\\xb9\\x64\\x90\\x1f\\x98\\x6d\\x4c\\x9f\\xa3\\xac\\x68\\x34\\x65\\x70\";\r\n\r\n    // Mainnet ZRX address is 0xe41d2489571d322189246dafa5ebde1f4699f498.\r\n    // The ABI encoded proxyId and address is 0xf47261b0000000000000000000000000e41d2489571d322189246dafa5ebde1f4699f498\r\n    bytes constant public ZRX_ASSET_DATA = \"\\xf4\\x72\\x61\\xb0\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xe4\\x1d\\x24\\x89\\x57\\x1d\\x32\\x21\\x89\\x24\\x6d\\xaf\\xa5\\xeb\\xde\\x1f\\x46\\x99\\xf4\\x98\";\r\n}\r\n// solhint-enable max-line-length\r\n\r\ncontract LibFillResults\r\n{\r\n    struct FillResults {\r\n        uint256 makerAssetFilledAmount;  // Total amount of makerAsset(s) filled.\r\n        uint256 takerAssetFilledAmount;  // Total amount of takerAsset(s) filled.\r\n        uint256 makerFeePaid;            // Total amount of ZRX paid by maker(s) to feeRecipient(s).\r\n        uint256 takerFeePaid;            // Total amount of ZRX paid by taker to feeRecipients(s).\r\n    }\r\n\r\n    struct MatchedFillResults {\r\n        FillResults left;                    // Amounts filled and fees paid of left order.\r\n        FillResults right;                   // Amounts filled and fees paid of right order.\r\n        uint256 leftMakerAssetSpreadAmount;  // Spread between price of left and right order, denominated in the left order's makerAsset, paid to taker.\r\n    }\r\n}\r\n\r\ncontract LibOrder\r\n{\r\n    // Hash for the EIP712 Order Schema\r\n    bytes32 constant internal EIP712_ORDER_SCHEMA_HASH = keccak256(abi.encodePacked(\r\n        \"Order(\",\r\n        \"address makerAddress,\",\r\n        \"address takerAddress,\",\r\n        \"address feeRecipientAddress,\",\r\n        \"address senderAddress,\",\r\n        \"uint256 makerAssetAmount,\",\r\n        \"uint256 takerAssetAmount,\",\r\n        \"uint256 makerFee,\",\r\n        \"uint256 takerFee,\",\r\n        \"uint256 expirationTimeSeconds,\",\r\n        \"uint256 salt,\",\r\n        \"bytes makerAssetData,\",\r\n        \"bytes takerAssetData\",\r\n        \")\"\r\n    ));\r\n\r\n    // A valid order remains fillable until it is expired, fully filled, or cancelled.\r\n    // An order's state is unaffected by external factors, like account balances.\r\n    enum OrderStatus {\r\n        INVALID,                     // Default value\r\n        INVALID_MAKER_ASSET_AMOUNT,  // Order does not have a valid maker asset amount\r\n        INVALID_TAKER_ASSET_AMOUNT,  // Order does not have a valid taker asset amount\r\n        FILLABLE,                    // Order is fillable\r\n        EXPIRED,                     // Order has already expired\r\n        FULLY_FILLED,                // Order is fully filled\r\n        CANCELLED                    // Order has been cancelled\r\n    }\r\n\r\n    // solhint-disable max-line-length\r\n    struct Order {\r\n        address makerAddress;           // Address that created the order.\r\n        address takerAddress;           // Address that is allowed to fill the order. If set to 0, any address is allowed to fill the order.\r\n        address feeRecipientAddress;    // Address that will recieve fees when order is filled.\r\n        address senderAddress;          // Address that is allowed to call Exchange contract methods that affect this order. If set to 0, any address is allowed to call these methods.\r\n        uint256 makerAssetAmount;       // Amount of makerAsset being offered by maker. Must be greater than 0.\r\n        uint256 takerAssetAmount;       // Amount of takerAsset being bid on by maker. Must be greater than 0.\r\n        uint256 makerFee;               // Amount of ZRX paid to feeRecipient by maker when order is filled. If set to 0, no transfer of ZRX from maker to feeRecipient will be attempted.\r\n        uint256 takerFee;               // Amount of ZRX paid to feeRecipient by taker when order is filled. If set to 0, no transfer of ZRX from taker to feeRecipient will be attempted.\r\n        uint256 expirationTimeSeconds;  // Timestamp in seconds at which order expires.\r\n        uint256 salt;                   // Arbitrary number to facilitate uniqueness of the order's hash.\r\n        bytes makerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring makerAsset. The last byte references the id of this proxy.\r\n        bytes takerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring takerAsset. The last byte references the id of this proxy.\r\n    }\r\n    // solhint-enable max-line-length\r\n\r\n    struct OrderInfo {\r\n        uint8 orderStatus;                    // Status that describes order's validity and fillability.\r\n        bytes32 orderHash;                    // EIP712 hash of the order (see LibOrder.getOrderHash).\r\n        uint256 orderTakerAssetFilledAmount;  // Amount of order that has already been filled.\r\n    }\r\n}\r\n\r\ncontract IExchangeCore {\r\n\r\n    /// @dev Cancels all orders created by makerAddress with a salt less than or equal to the targetOrderEpoch\r\n    ///      and senderAddress equal to msg.sender (or null address if msg.sender == makerAddress).\r\n    /// @param targetOrderEpoch Orders created with a salt less or equal to this value will be cancelled.\r\n    function cancelOrdersUpTo(uint256 targetOrderEpoch)\r\n        external;\r\n\r\n    /// @dev Fills the input order.\r\n    /// @param order Order struct containing order specifications.\r\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\r\n    /// @param signature Proof that order has been created by maker.\r\n    /// @return Amounts filled and fees paid by maker and taker.\r\n    function fillOrder(\r\n        LibOrder.Order memory order,\r\n        uint256 takerAssetFillAmount,\r\n        bytes memory signature\r\n    )\r\n        public\r\n        returns (LibFillResults.FillResults memory fillResults);\r\n\r\n    /// @dev After calling, the order can not be filled anymore.\r\n    /// @param order Order struct containing order specifications.\r\n    function cancelOrder(LibOrder.Order memory order)\r\n        public;\r\n\r\n    /// @dev Gets information about an order: status, hash, and amount filled.\r\n    /// @param order Order to gather information on.\r\n    /// @return OrderInfo Information about the order and its state.\r\n    ///                   See LibOrder.OrderInfo for a complete description.\r\n    function getOrderInfo(LibOrder.Order memory order)\r\n        public\r\n        view\r\n        returns (LibOrder.OrderInfo memory orderInfo);\r\n}\r\n\r\ncontract IAssetProxyDispatcher {\r\n\r\n    /// @dev Registers an asset proxy to its asset proxy id.\r\n    ///      Once an asset proxy is registered, it cannot be unregistered.\r\n    /// @param assetProxy Address of new asset proxy to register.\r\n    function registerAssetProxy(address assetProxy)\r\n        external;\r\n\r\n    /// @dev Gets an asset proxy.\r\n    /// @param assetProxyId Id of the asset proxy.\r\n    /// @return The asset proxy registered to assetProxyId. Returns 0x0 if no proxy is registered.\r\n    function getAssetProxy(bytes4 assetProxyId)\r\n        external\r\n        view\r\n        returns (address);\r\n}\r\n\r\ncontract IMatchOrders {\r\n\r\n    /// @dev Match two complementary orders that have a profitable spread.\r\n    ///      Each order is filled at their respective price point. However, the calculations are\r\n    ///      carried out as though the orders are both being filled at the right order's price point.\r\n    ///      The profit made by the left order goes to the taker (who matched the two orders).\r\n    /// @param leftOrder First order to match.\r\n    /// @param rightOrder Second order to match.\r\n    /// @param leftSignature Proof that order was created by the left maker.\r\n    /// @param rightSignature Proof that order was created by the right maker.\r\n    /// @return matchedFillResults Amounts filled and fees paid by maker and taker of matched orders.\r\n    function matchOrders(\r\n        LibOrder.Order memory leftOrder,\r\n        LibOrder.Order memory rightOrder,\r\n        bytes memory leftSignature,\r\n        bytes memory rightSignature\r\n    )\r\n        public\r\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults);\r\n}\r\n\r\ncontract IWrapperFunctions {\r\n\r\n    /// @dev Fills the input order. Reverts if exact takerAssetFillAmount not filled.\r\n    /// @param order LibOrder.Order struct containing order specifications.\r\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\r\n    /// @param signature Proof that order has been created by maker.\r\n    function fillOrKillOrder(\r\n        LibOrder.Order memory order,\r\n        uint256 takerAssetFillAmount,\r\n        bytes memory signature\r\n    )\r\n        public\r\n        returns (LibFillResults.FillResults memory fillResults);\r\n\r\n    /// @dev Fills an order with specified parameters and ECDSA signature.\r\n    ///      Returns false if the transaction would otherwise revert.\r\n    /// @param order LibOrder.Order struct containing order specifications.\r\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\r\n    /// @param signature Proof that order has been created by maker.\r\n    /// @return Amounts filled and fees paid by maker and taker.\r\n    function fillOrderNoThrow(\r\n        LibOrder.Order memory order,\r\n        uint256 takerAssetFillAmount,\r\n        bytes memory signature\r\n    )\r\n        public\r\n        returns (LibFillResults.FillResults memory fillResults);\r\n\r\n    /// @dev Synchronously executes multiple calls of fillOrder.\r\n    /// @param orders Array of order specifications.\r\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\r\n    /// @param signatures Proofs that orders have been created by makers.\r\n    /// @return Amounts filled and fees paid by makers and taker.\r\n    function batchFillOrders(\r\n        LibOrder.Order[] memory orders,\r\n        uint256[] memory takerAssetFillAmounts,\r\n        bytes[] memory signatures\r\n    )\r\n        public\r\n        returns (LibFillResults.FillResults memory totalFillResults);\r\n\r\n    /// @dev Synchronously executes multiple calls of fillOrKill.\r\n    /// @param orders Array of order specifications.\r\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\r\n    /// @param signatures Proofs that orders have been created by makers.\r\n    /// @return Amounts filled and fees paid by makers and taker.\r\n    function batchFillOrKillOrders(\r\n        LibOrder.Order[] memory orders,\r\n        uint256[] memory takerAssetFillAmounts,\r\n        bytes[] memory signatures\r\n    )\r\n        public\r\n        returns (LibFillResults.FillResults memory totalFillResults);\r\n\r\n    /// @dev Fills an order with specified parameters and ECDSA signature.\r\n    ///      Returns false if the transaction would otherwise revert.\r\n    /// @param orders Array of order specifications.\r\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\r\n    /// @param signatures Proofs that orders have been created by makers.\r\n    /// @return Amounts filled and fees paid by makers and taker.\r\n    function batchFillOrdersNoThrow(\r\n        LibOrder.Order[] memory orders,\r\n        uint256[] memory takerAssetFillAmounts,\r\n        bytes[] memory signatures\r\n    )\r\n        public\r\n        returns (LibFillResults.FillResults memory totalFillResults);\r\n\r\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.\r\n    /// @param orders Array of order specifications.\r\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\r\n    /// @param signatures Proofs that orders have been created by makers.\r\n    /// @return Amounts filled and fees paid by makers and taker.\r\n    function marketSellOrders(\r\n        LibOrder.Order[] memory orders,\r\n        uint256 takerAssetFillAmount,\r\n        bytes[] memory signatures\r\n    )\r\n        public\r\n        returns (LibFillResults.FillResults memory totalFillResults);\r\n\r\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.\r\n    ///      Returns false if the transaction would otherwise revert.\r\n    /// @param orders Array of order specifications.\r\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\r\n    /// @param signatures Proofs that orders have been signed by makers.\r\n    /// @return Amounts filled and fees paid by makers and taker.\r\n    function marketSellOrdersNoThrow(\r\n        LibOrder.Order[] memory orders,\r\n        uint256 takerAssetFillAmount,\r\n        bytes[] memory signatures\r\n    )\r\n        public\r\n        returns (LibFillResults.FillResults memory totalFillResults);\r\n\r\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of makerAsset is bought by taker.\r\n    /// @param orders Array of order specifications.\r\n    /// @param makerAssetFillAmount Desired amount of makerAsset to buy.\r\n    /// @param signatures Proofs that orders have been signed by makers.\r\n    /// @return Amounts filled and fees paid by makers and taker.\r\n    function marketBuyOrders(\r\n        LibOrder.Order[] memory orders,\r\n        uint256 makerAssetFillAmount,\r\n        bytes[] memory signatures\r\n    )\r\n        public\r\n        returns (LibFillResults.FillResults memory totalFillResults);\r\n\r\n    /// @dev Synchronously executes multiple fill orders in a single transaction until total amount is bought by taker.\r\n    ///      Returns false if the transaction would otherwise revert.\r\n    /// @param orders Array of order specifications.\r\n    /// @param makerAssetFillAmount Desired amount of makerAsset to buy.\r\n    /// @param signatures Proofs that orders have been signed by makers.\r\n    /// @return Amounts filled and fees paid by makers and taker.\r\n    function marketBuyOrdersNoThrow(\r\n        LibOrder.Order[] memory orders,\r\n        uint256 makerAssetFillAmount,\r\n        bytes[] memory signatures\r\n    )\r\n        public\r\n        returns (LibFillResults.FillResults memory totalFillResults);\r\n\r\n    /// @dev Synchronously cancels multiple orders in a single transaction.\r\n    /// @param orders Array of order specifications.\r\n    function batchCancelOrders(LibOrder.Order[] memory orders)\r\n        public;\r\n\r\n    /// @dev Fetches information for all passed in orders\r\n    /// @param orders Array of order specifications.\r\n    /// @return Array of OrderInfo instances that correspond to each order.\r\n    function getOrdersInfo(LibOrder.Order[] memory orders)\r\n        public\r\n        view\r\n        returns (LibOrder.OrderInfo[] memory);\r\n}\r\n\r\n// solhint-disable no-empty-blocks\r\ncontract IZrxExchange is\r\n    IExchangeCore,\r\n    IMatchOrders,\r\n    IAssetProxyDispatcher,\r\n    IWrapperFunctions\r\n{}\r\n\r\n\r\n\r\nlibrary ExternalCall {\r\n    // Source: https://github.com/gnosis/MultiSigWallet/blob/master/contracts/MultiSigWallet.sol\r\n    // call has been separated into its own function in order to take advantage\r\n    // of the Solidity's code generator to produce a loop that copies tx.data into memory.\r\n    function externalCall(address destination, uint value, bytes memory data, uint dataOffset, uint dataLength) internal returns(bool result) {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let x := mload(0x40)   // \"Allocate\" memory for output (0x40 is where \"free memory\" pointer is stored by convention)\r\n            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that\r\n            result := call(\r\n                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting\r\n                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +\r\n                                   // callNewAccountGas (25000, in case the destination address does not exist and needs creating)\r\n                destination,\r\n                value,\r\n                add(d, dataOffset),\r\n                dataLength,        // Size of the input (in bytes) - this is what fixes the padding problem\r\n                x,\r\n                0                  // Output is ignored, therefore the output size is zero\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract CompressedCaller {\r\n\r\n    function compressedCall(\r\n        address target,\r\n        uint256 totalLength,\r\n        bytes memory zipped\r\n    )\r\n        public\r\n        payable\r\n        returns (bytes memory result)\r\n    {\r\n        (bytes memory data, uint decompressedLength) = decompress(totalLength, zipped);\r\n        require(decompressedLength == totalLength, \"Uncompress error\");\r\n\r\n        bool success;\r\n        (success, result) = target.call.value(msg.value)(data);\r\n        require(success, \"Decompressed call failed\");\r\n    }\r\n\r\n    function decompress(\r\n        uint256 totalLength,\r\n        bytes memory zipped\r\n    )\r\n        public\r\n        pure\r\n        returns (\r\n            bytes memory data,\r\n            uint256 index\r\n        )\r\n    {\r\n        data = new bytes(totalLength);\r\n\r\n        for (uint i = 0; i < zipped.length; i++) {\r\n\r\n            uint len = uint(uint8(zipped[i]) & 0x7F);\r\n\r\n            if ((zipped[i] & 0x80) == 0) {\r\n                memcpy(data, index, zipped, i + 1, len);\r\n                i += len;\r\n            }\r\n\r\n            index += len;\r\n        }\r\n    }\r\n\r\n    //\r\n    // Modified version of:\r\n    // https://github.com/Arachnid/solidity-stringutils/blob/master/src/strings.sol#L45\r\n    //\r\n    function memcpy(\r\n        bytes memory destMem,\r\n        uint dest,\r\n        bytes memory srcMem,\r\n        uint src,\r\n        uint len\r\n    )\r\n        private\r\n        pure\r\n    {\r\n        uint mask = 256 ** (32 - len % 32) - 1;\r\n\r\n        assembly {\r\n            dest := add(add(destMem, 32), dest)\r\n            src := add(add(srcMem, 32), src)\r\n\r\n            // Copy word-length chunks while possible\r\n            for { } gt(len, 31) { len := sub(len, 32) } { // (!<) is the same as (>=)\r\n                mstore(dest, mload(src))\r\n                dest := add(dest, 32)\r\n                src := add(src, 32)\r\n            }\r\n\r\n            // Copy remaining bytes\r\n            let srcPart := and(mload(src), not(mask))\r\n            let destPart := and(mload(dest), mask)\r\n            mstore(dest, or(destPart, srcPart))\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type,\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * > It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract IWETH is IERC20 {\r\n\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256 amount) external;\r\n}\r\n\r\n\r\n\r\ncontract TokenSpender is Ownable {\r\n\r\n    using SafeERC20 for IERC20;\r\n\r\n    function claimTokens(IERC20 token, address who, address dest, uint256 amount) external onlyOwner {\r\n        token.safeTransferFrom(who, dest, amount);\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\ncontract AggregatedTokenSwap is CompressedCaller {\r\n\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint;\r\n    using ExternalCall for address;\r\n\r\n    address constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n    TokenSpender public spender;\r\n    IGST2 gasToken;\r\n    address payable owner;\r\n    uint fee; // 10000 => 100%, 1 => 0.01%\r\n\r\n    event OneInchFeePaid(\r\n        IERC20 indexed toToken,\r\n        address indexed referrer,\r\n        uint256 fee\r\n    );\r\n\r\n    modifier onlyOwner {\r\n        require(\r\n            msg.sender == owner,\r\n            \"Only owner can call this function.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address payable _owner,\r\n        IGST2 _gasToken,\r\n        uint _fee\r\n    )\r\n    public\r\n    {\r\n        spender = new TokenSpender();\r\n        owner = _owner;\r\n        gasToken = _gasToken;\r\n        fee = _fee;\r\n    }\r\n\r\n    function setFee(uint _fee) public onlyOwner {\r\n\r\n        require(_fee <= 20, \"Fee should not exceed 0.2%\"); // <= 0.2%\r\n        fee = _fee;\r\n    }\r\n\r\n    function aggregate(\r\n        address payable msgSender,\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint tokensAmount,\r\n        address[] memory callAddresses,\r\n        bytes memory callDataConcat,\r\n        uint[] memory starts,\r\n        uint[] memory values,\r\n        uint mintGasPrice,\r\n        uint minTokensAmount,\r\n        address payable referrer\r\n    )\r\n    public\r\n    payable\r\n    returns (uint returnAmount)\r\n    {\r\n        returnAmount = gasleft();\r\n        uint gasTokenBalance = gasToken.balanceOf(address(this));\r\n\r\n        require(callAddresses.length + 1 == starts.length);\r\n\r\n        if (address(fromToken) != ETH_ADDRESS) {\r\n\r\n            spender.claimTokens(fromToken, msgSender, address(this), tokensAmount);\r\n        }\r\n\r\n        for (uint i = 0; i < starts.length - 1; i++) {\r\n\r\n            if (starts[i + 1] - starts[i] > 0) {\r\n\r\n                require(\r\n                    callDataConcat[starts[i] + 0] != spender.claimTokens.selector[0] ||\r\n                    callDataConcat[starts[i] + 1] != spender.claimTokens.selector[1] ||\r\n                    callDataConcat[starts[i] + 2] != spender.claimTokens.selector[2] ||\r\n                    callDataConcat[starts[i] + 3] != spender.claimTokens.selector[3]\r\n                );\r\n                require(callAddresses[i].externalCall(values[i], callDataConcat, starts[i], starts[i + 1] - starts[i]));\r\n            }\r\n        }\r\n\r\n        require(_balanceOf(toToken, address(this)) >= minTokensAmount);\r\n\r\n        //\r\n\r\n        require(gasTokenBalance == gasToken.balanceOf(address(this)));\r\n        if (mintGasPrice > 0) {\r\n            audoRefundGas(returnAmount, mintGasPrice);\r\n        }\r\n\r\n        //\r\n\r\n        returnAmount = _balanceOf(toToken, address(this)) * fee / 10000;\r\n        if (referrer != address(0)) {\r\n            returnAmount /= 2;\r\n            if (!_transfer(toToken, referrer, returnAmount, true)) {\r\n                returnAmount *= 2;\r\n                emit OneInchFeePaid(toToken, address(0), returnAmount);\r\n            } else {\r\n                emit OneInchFeePaid(toToken, referrer, returnAmount / 2);\r\n            }\r\n        }\r\n\r\n        _transfer(toToken, owner, returnAmount, false);\r\n\r\n        returnAmount = _balanceOf(toToken, address(this));\r\n        _transfer(toToken, msgSender, returnAmount, false);\r\n    }\r\n\r\n    function infiniteApproveIfNeeded(IERC20 token, address to) external {\r\n        if (\r\n            address(token) != ETH_ADDRESS &&\r\n            token.allowance(address(this), to) == 0\r\n        ) {\r\n            token.safeApprove(to, uint256(-1));\r\n        }\r\n    }\r\n\r\n    function withdrawAllToken(IWETH token) external {\r\n        uint256 amount = token.balanceOf(address(this));\r\n        token.withdraw(amount);\r\n    }\r\n\r\n    function marketSellOrdersProportion(\r\n        IERC20 tokenSell,\r\n        IERC20 tokenBuy,\r\n        IZrxExchange zrxExchange,\r\n        address zrxTokenProxy,\r\n        LibOrder.Order[] calldata orders,\r\n        bytes[] calldata signatures,\r\n        uint256 mul,\r\n        uint256 div\r\n    )\r\n    external\r\n    {\r\n        uint256 amount = tokenSell.balanceOf(address(this)).mul(mul).div(div);\r\n        this.marketSellOrders(tokenBuy, zrxExchange, zrxTokenProxy, amount, orders, signatures);\r\n    }\r\n\r\n    function _balanceOf(IERC20 token, address who) internal view returns(uint256) {\r\n        if (address(token) == ETH_ADDRESS || token == IERC20(0)) {\r\n            return who.balance;\r\n        } else {\r\n            return token.balanceOf(who);\r\n        }\r\n    }\r\n\r\n    function _transfer(IERC20 token, address payable to, uint256 amount, bool allowFail) internal returns(bool) {\r\n        if (address(token) == ETH_ADDRESS || token == IERC20(0)) {\r\n            if (allowFail) {\r\n                return to.send(amount);\r\n            } else {\r\n                to.transfer(amount);\r\n                return true;\r\n            }\r\n        } else {\r\n            token.safeTransfer(to, amount);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function audoRefundGas(\r\n        uint startGas,\r\n        uint mintGasPrice\r\n    )\r\n    private\r\n    returns (uint freed)\r\n    {\r\n        uint MINT_BASE = 32254;\r\n        uint MINT_TOKEN = 36543;\r\n        uint FREE_BASE = 14154;\r\n        uint FREE_TOKEN = 6870;\r\n        uint REIMBURSE = 24000;\r\n\r\n        uint tokensAmount = ((startGas - gasleft()) + FREE_BASE) / (2 * REIMBURSE - FREE_TOKEN);\r\n        uint maxReimburse = tokensAmount * REIMBURSE;\r\n\r\n        uint mintCost = MINT_BASE + (tokensAmount * MINT_TOKEN);\r\n        uint freeCost = FREE_BASE + (tokensAmount * FREE_TOKEN);\r\n\r\n        uint efficiency = (maxReimburse * 100 * tx.gasprice) / (mintCost * mintGasPrice + freeCost * tx.gasprice);\r\n\r\n        if (efficiency > 100) {\r\n\r\n            return refundGas(\r\n                tokensAmount\r\n            );\r\n        } else {\r\n\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function refundGas(\r\n        uint tokensAmount\r\n    )\r\n    private\r\n    returns (uint freed)\r\n    {\r\n\r\n        if (tokensAmount > 0) {\r\n\r\n            uint safeNumTokens = 0;\r\n            uint gas = gasleft();\r\n\r\n            if (gas >= 27710) {\r\n                safeNumTokens = (gas - 27710) / (1148 + 5722 + 150);\r\n            }\r\n\r\n            if (tokensAmount > safeNumTokens) {\r\n                tokensAmount = safeNumTokens;\r\n            }\r\n\r\n            uint gasTokenBalance = IERC20(address(gasToken)).balanceOf(address(this));\r\n\r\n            if (tokensAmount > 0 && gasTokenBalance >= tokensAmount) {\r\n\r\n                return gasToken.freeUpTo(tokensAmount);\r\n            } else {\r\n\r\n                return 0;\r\n            }\r\n        } else {\r\n\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function() external payable {\r\n\r\n        if (msg.value == 0 && msg.sender == owner) {\r\n\r\n            IERC20 _gasToken = IERC20(address(gasToken));\r\n\r\n            owner.transfer(address(this).balance);\r\n            _gasToken.safeTransfer(owner, _gasToken.balanceOf(address(this)));\r\n        }\r\n    }\r\n\r\n    function getOrdersInfoRespectingBalancesAndAllowances(\r\n        IERC20 token,\r\n        IZrxExchange zrx,\r\n        address zrxTokenProxy,\r\n        LibOrder.Order[] memory orders\r\n    )\r\n        public\r\n        view\r\n        returns (LibOrder.OrderInfo[] memory ordersInfo)\r\n    {\r\n        ordersInfo = zrx.getOrdersInfo(orders);\r\n\r\n        for (uint i = 0; i < ordersInfo.length; i++) {\r\n\r\n            uint256 balance = token.balanceOf(orders[i].makerAddress);\r\n            uint256 allowance = token.allowance(orders[i].makerAddress, zrxTokenProxy);\r\n            uint256 availableMakerAmount = (allowance < balance) ? allowance : balance;\r\n            uint256 availableTakerAmount = availableMakerAmount.mul(orders[i].takerAssetAmount).div(orders[i].makerAssetAmount);\r\n\r\n            for (uint j = 0; j < i; j++) {\r\n\r\n                if (orders[j].makerAddress == orders[i].makerAddress) {\r\n\r\n                    uint256 orderTakerAssetRemainigAmount = orders[j].takerAssetAmount.sub(\r\n                        ordersInfo[j].orderTakerAssetFilledAmount\r\n                    );\r\n\r\n                    if (availableTakerAmount > orderTakerAssetRemainigAmount) {\r\n                        availableTakerAmount = availableTakerAmount.sub(orderTakerAssetRemainigAmount);\r\n                    } else {\r\n                        availableTakerAmount = 0;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            uint256 remainingTakerAmount = orders[i].takerAssetAmount.sub(\r\n                ordersInfo[i].orderTakerAssetFilledAmount\r\n            );\r\n\r\n            if (availableTakerAmount < remainingTakerAmount) {\r\n\r\n                ordersInfo[i].orderTakerAssetFilledAmount = orders[i].takerAssetAmount.sub(availableTakerAmount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function marketSellOrders(\r\n        IERC20 token,\r\n        IZrxExchange zrx,\r\n        address zrxTokenProxy,\r\n        uint256 totalTakerAmount,\r\n        LibOrder.Order[] memory orders,\r\n        bytes[] memory signatures\r\n    )\r\n        public\r\n        returns (LibFillResults.FillResults memory totalFillResults)\r\n    {\r\n        for (uint i = 0; totalTakerAmount > 0 && i < orders.length; i++) {\r\n\r\n            LibOrder.OrderInfo memory orderInfo = zrx.getOrderInfo(orders[i]);\r\n            uint256 remainingTakerAmount = orders[i].takerAssetAmount.sub(orderInfo.orderTakerAssetFilledAmount);\r\n\r\n            // Check available balance and allowance\r\n            {\r\n                uint256 balance = token.balanceOf(orders[i].makerAddress);\r\n                uint256 allowance = token.allowance(orders[i].makerAddress, zrxTokenProxy);\r\n                uint256 availableMakerAmount = (allowance < balance) ? allowance : balance;\r\n                uint256 availableTakerAmount = availableMakerAmount.mul(orders[i].takerAssetAmount).div(orders[i].makerAssetAmount);\r\n\r\n                if (availableTakerAmount < remainingTakerAmount) {\r\n                    remainingTakerAmount = availableTakerAmount;\r\n                }\r\n            }\r\n\r\n            uint256 takerAmount = (remainingTakerAmount < totalTakerAmount) ? remainingTakerAmount : totalTakerAmount;\r\n\r\n            LibFillResults.FillResults memory fillResults = zrx.fillOrder(\r\n                orders[i],\r\n                takerAmount,\r\n                signatures[i]\r\n            );\r\n\r\n            totalTakerAmount = totalTakerAmount.sub(fillResults.takerAssetFilledAmount);\r\n        }\r\n\r\n        return totalFillResults;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"zrx\",\"type\":\"address\"},{\"name\":\"zrxTokenProxy\",\"type\":\"address\"},{\"components\":[{\"name\":\"makerAddress\",\"type\":\"address\"},{\"name\":\"takerAddress\",\"type\":\"address\"},{\"name\":\"feeRecipientAddress\",\"type\":\"address\"},{\"name\":\"senderAddress\",\"type\":\"address\"},{\"name\":\"makerAssetAmount\",\"type\":\"uint256\"},{\"name\":\"takerAssetAmount\",\"type\":\"uint256\"},{\"name\":\"makerFee\",\"type\":\"uint256\"},{\"name\":\"takerFee\",\"type\":\"uint256\"},{\"name\":\"expirationTimeSeconds\",\"type\":\"uint256\"},{\"name\":\"salt\",\"type\":\"uint256\"},{\"name\":\"makerAssetData\",\"type\":\"bytes\"},{\"name\":\"takerAssetData\",\"type\":\"bytes\"}],\"name\":\"orders\",\"type\":\"tuple[]\"}],\"name\":\"getOrdersInfoRespectingBalancesAndAllowances\",\"outputs\":[{\"components\":[{\"name\":\"orderStatus\",\"type\":\"uint8\"},{\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"name\":\"orderTakerAssetFilledAmount\",\"type\":\"uint256\"}],\"name\":\"ordersInfo\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"totalLength\",\"type\":\"uint256\"},{\"name\":\"zipped\",\"type\":\"bytes\"}],\"name\":\"compressedCall\",\"outputs\":[{\"name\":\"result\",\"type\":\"bytes\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"totalLength\",\"type\":\"uint256\"},{\"name\":\"zipped\",\"type\":\"bytes\"}],\"name\":\"decompress\",\"outputs\":[{\"name\":\"data\",\"type\":\"bytes\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenSell\",\"type\":\"address\"},{\"name\":\"tokenBuy\",\"type\":\"address\"},{\"name\":\"zrxExchange\",\"type\":\"address\"},{\"name\":\"zrxTokenProxy\",\"type\":\"address\"},{\"components\":[{\"name\":\"makerAddress\",\"type\":\"address\"},{\"name\":\"takerAddress\",\"type\":\"address\"},{\"name\":\"feeRecipientAddress\",\"type\":\"address\"},{\"name\":\"senderAddress\",\"type\":\"address\"},{\"name\":\"makerAssetAmount\",\"type\":\"uint256\"},{\"name\":\"takerAssetAmount\",\"type\":\"uint256\"},{\"name\":\"makerFee\",\"type\":\"uint256\"},{\"name\":\"takerFee\",\"type\":\"uint256\"},{\"name\":\"expirationTimeSeconds\",\"type\":\"uint256\"},{\"name\":\"salt\",\"type\":\"uint256\"},{\"name\":\"makerAssetData\",\"type\":\"bytes\"},{\"name\":\"takerAssetData\",\"type\":\"bytes\"}],\"name\":\"orders\",\"type\":\"tuple[]\"},{\"name\":\"signatures\",\"type\":\"bytes[]\"},{\"name\":\"mul\",\"type\":\"uint256\"},{\"name\":\"div\",\"type\":\"uint256\"}],\"name\":\"marketSellOrdersProportion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawAllToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"msgSender\",\"type\":\"address\"},{\"name\":\"fromToken\",\"type\":\"address\"},{\"name\":\"toToken\",\"type\":\"address\"},{\"name\":\"tokensAmount\",\"type\":\"uint256\"},{\"name\":\"callAddresses\",\"type\":\"address[]\"},{\"name\":\"callDataConcat\",\"type\":\"bytes\"},{\"name\":\"starts\",\"type\":\"uint256[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"},{\"name\":\"mintGasPrice\",\"type\":\"uint256\"},{\"name\":\"minTokensAmount\",\"type\":\"uint256\"},{\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"aggregate\",\"outputs\":[{\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"infiniteApproveIfNeeded\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"spender\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"zrx\",\"type\":\"address\"},{\"name\":\"zrxTokenProxy\",\"type\":\"address\"},{\"name\":\"totalTakerAmount\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"makerAddress\",\"type\":\"address\"},{\"name\":\"takerAddress\",\"type\":\"address\"},{\"name\":\"feeRecipientAddress\",\"type\":\"address\"},{\"name\":\"senderAddress\",\"type\":\"address\"},{\"name\":\"makerAssetAmount\",\"type\":\"uint256\"},{\"name\":\"takerAssetAmount\",\"type\":\"uint256\"},{\"name\":\"makerFee\",\"type\":\"uint256\"},{\"name\":\"takerFee\",\"type\":\"uint256\"},{\"name\":\"expirationTimeSeconds\",\"type\":\"uint256\"},{\"name\":\"salt\",\"type\":\"uint256\"},{\"name\":\"makerAssetData\",\"type\":\"bytes\"},{\"name\":\"takerAssetData\",\"type\":\"bytes\"}],\"name\":\"orders\",\"type\":\"tuple[]\"},{\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"marketSellOrders\",\"outputs\":[{\"components\":[{\"name\":\"makerAssetFilledAmount\",\"type\":\"uint256\"},{\"name\":\"takerAssetFilledAmount\",\"type\":\"uint256\"},{\"name\":\"makerFeePaid\",\"type\":\"uint256\"},{\"name\":\"takerFeePaid\",\"type\":\"uint256\"}],\"name\":\"totalFillResults\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_gasToken\",\"type\":\"address\"},{\"name\":\"_fee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"toToken\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"OneInchFeePaid\",\"type\":\"event\"}]","ContractName":"AggregatedTokenSwap","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004d37f28d2db99e8d35a6c725a5f1749a085850a30000000000000000000000000000000000b3f879cb30fe243b4dfee438691c040000000000000000000000000000000000000000000000000000000000000002","Library":"","SwarmSource":"bzzr://1ce138695fac15033a2ed44ae523aa812a486a0b7371d550149f18265f5f994d"}]}