{"status":"1","message":"OK","result":[{"SourceCode":"{\"Ownable.sol\":{\"content\":\"pragma solidity 0.5.0;\\n\\ncontract Ownable {\\n   address payable public owner;\\n\\n   event OwnershipTransferred(address indexed _from, address indexed _to);\\n\\n   constructor() public {\\n       owner = msg.sender;\\n   }\\n\\n   modifier onlyOwner {\\n       require(msg.sender == owner);\\n       _;\\n   }\\n\\n   function transferOwnership(address payable _newOwner) public onlyOwner {\\n       owner = _newOwner;\\n   }\\n}\\n\"},\"Referral.sol\":{\"content\":\"pragma solidity 0.5.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\ncontract Referral is Ownable {\\n    \\n    struct MasterWithSlave {\\n        address payable master;\\n        address payable slave;\\n        uint256 masterPercent;\\n        uint256 slavePercent;\\n        string investorCode;\\n        bool isMasterValid;\\n        bool isSlaveValid;\\n    }\\n    \\n    struct Master {\\n        address payable master;\\n        uint256 masterPercent;\\n        string investorCode;\\n        bool isMasterValid;\\n    }\\n    \\n    MasterWithSlave[] public masterWithSlaveData;\\n    Master[] public masterData;\\n    address payable zeroAddress = 0x0000000000000000000000000000000000000000;\\n    \\n    mapping(string =\\u003e uint256) private investorCodeToMasterWithSlaveIndex;\\n    mapping(string =\\u003e uint256) private investorCodeToMasterIndex;\\n    \\n   constructor () public {\\n       \\n       MasterWithSlave memory newData1 = MasterWithSlave(zeroAddress, zeroAddress,0, 0 ,\\\"null\\\",false ,false);\\n        masterWithSlaveData.push(newData1);\\n        investorCodeToMasterWithSlaveIndex[\\\"null\\\"] = masterWithSlaveData.length -1;\\n        \\n         Master memory newData2 = Master(zeroAddress, 0 , \\\"null\\\" , false );\\n        \\n        masterData.push(newData2);\\n        investorCodeToMasterWithSlaveIndex[\\\"null\\\"] = masterData.length -1 ;\\n    }\\n    \\n    // Get index by investor code\\n    \\n    function getMasterWithSlaveIndexByInvestorCode(string memory _investorCode) public view returns(uint256){\\n        return investorCodeToMasterWithSlaveIndex[_investorCode];\\n    }\\n       \\n    function getMasterIndexByInvestorCode(string memory _investorCode) public view returns(uint256){\\n        return investorCodeToMasterIndex[_investorCode];\\n    }\\n    \\n    // Valid functions\\n    \\n    \\n    function isMasterValid (string memory _investorCode) public view returns (bool){\\n        uint256 index = investorCodeToMasterIndex[_investorCode];\\n        return masterData[index].isMasterValid;\\n    }\\n    \\n    function isMasterWithSlaveValid(string memory _investorCode) public view returns(bool){\\n         uint256 index = investorCodeToMasterWithSlaveIndex[_investorCode];\\n         return masterWithSlaveData[index].isSlaveValid;\\n    }\\n    \\n    function isSlaveValid(string memory _investorCode) public view returns(bool) {\\n        uint256 index = investorCodeToMasterWithSlaveIndex[_investorCode];\\n        return masterWithSlaveData[index].isSlaveValid;\\n    }\\n    \\n    // Address functions\\n    function getMasterAddress(string memory _investorCode) public view returns(address payable) {\\n        uint256 index = investorCodeToMasterIndex[_investorCode];\\n        return masterData[index].master;\\n    }\\n    \\n    function getMasterWithSlaveAddress(string memory _investorCode) public view returns(address payable){\\n          uint256 index = investorCodeToMasterWithSlaveIndex[_investorCode];\\n        return masterWithSlaveData[index].master;\\n    }\\n    \\n    function getSlaveAddress(string memory _investorCode) public view returns(address payable) {\\n        uint256 index = investorCodeToMasterWithSlaveIndex[_investorCode];\\n        return masterWithSlaveData[index].slave;\\n    }\\n\\n    // Percentage Functions\\n       \\n    function getMasterPercent(string memory _investorCode) public view returns(uint256) {\\n        uint256 index = investorCodeToMasterIndex[_investorCode];\\n        return masterData[index].masterPercent;\\n    }\\n    \\n    function getMasterWithSlavePercent(string memory _investorCode) public view returns(uint256) {\\n        uint256 index = investorCodeToMasterWithSlaveIndex[_investorCode];\\n        return masterWithSlaveData[index].masterPercent;\\n    }\\n    \\n    function getSlavePercent(string memory _investorCode) public view returns(uint256) {\\n       uint256 index = investorCodeToMasterWithSlaveIndex[_investorCode];\\n        return masterWithSlaveData[index].slavePercent;\\n    }\\n    \\n    // Insert functions \\n    \\n    function addMasterWithSlave(address payable _master, address payable _slave, uint256 _masterPercent, uint256 _slavePercent , string memory _investorCode ) public onlyOwner {\\n        require(getMasterWithSlaveIndexByInvestorCode(_investorCode) == 0 \\u0026\\u0026 getMasterIndexByInvestorCode(_investorCode) == 0 );\\n        \\n        MasterWithSlave memory newData = MasterWithSlave(_master, _slave, _masterPercent, _slavePercent , _investorCode  ,true ,true);\\n        \\n        masterWithSlaveData.push(newData);\\n        investorCodeToMasterWithSlaveIndex[_investorCode] = masterWithSlaveData.length -1;\\n    }\\n    \\n    function addMaster(address payable _master , uint256 _masterPercent , string memory _investorCode ) public onlyOwner{\\n        require(getMasterIndexByInvestorCode(_investorCode) == 0 \\u0026\\u0026 getMasterWithSlaveIndexByInvestorCode(_investorCode) == 0);\\n        \\n        Master memory newData = Master(_master, _masterPercent , _investorCode , true );\\n        \\n        masterData.push(newData);\\n        investorCodeToMasterIndex[_investorCode] = masterData.length -1 ;\\n    }\\n    \\n    function invalidateMaster(string memory _investorCode) public onlyOwner{\\n        uint256 index1 = getMasterIndexByInvestorCode(_investorCode);\\n        uint256 index2 = getMasterWithSlaveIndexByInvestorCode(_investorCode);\\n        \\n        masterData[index1].isMasterValid = false;\\n        masterWithSlaveData[index2].isMasterValid = false;\\n        masterWithSlaveData[index2].isSlaveValid = false;\\n    }\\n    \\n     function validateMaster(string memory _investorCode) public onlyOwner{\\n        uint256 index1 = getMasterIndexByInvestorCode(_investorCode);\\n        uint256 index2 = getMasterWithSlaveIndexByInvestorCode(_investorCode);\\n        \\n        masterData[index1].isMasterValid = true;\\n        masterWithSlaveData[index2].isMasterValid = true;\\n        masterWithSlaveData[index2].isSlaveValid = true;\\n\\n    }\\n    \\n    \\n  \\n}\\n\\n\"}}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_investorCode\",\"type\":\"string\"}],\"name\":\"getMasterPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investorCode\",\"type\":\"string\"}],\"name\":\"isSlaveValid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investorCode\",\"type\":\"string\"}],\"name\":\"isMasterValid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"masterWithSlaveData\",\"outputs\":[{\"name\":\"master\",\"type\":\"address\"},{\"name\":\"slave\",\"type\":\"address\"},{\"name\":\"masterPercent\",\"type\":\"uint256\"},{\"name\":\"slavePercent\",\"type\":\"uint256\"},{\"name\":\"investorCode\",\"type\":\"string\"},{\"name\":\"isMasterValid\",\"type\":\"bool\"},{\"name\":\"isSlaveValid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investorCode\",\"type\":\"string\"}],\"name\":\"getSlavePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investorCode\",\"type\":\"string\"}],\"name\":\"validateMaster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investorCode\",\"type\":\"string\"}],\"name\":\"getSlaveAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investorCode\",\"type\":\"string\"}],\"name\":\"isMasterWithSlaveValid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_master\",\"type\":\"address\"},{\"name\":\"_masterPercent\",\"type\":\"uint256\"},{\"name\":\"_investorCode\",\"type\":\"string\"}],\"name\":\"addMaster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investorCode\",\"type\":\"string\"}],\"name\":\"getMasterAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investorCode\",\"type\":\"string\"}],\"name\":\"getMasterIndexByInvestorCode\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investorCode\",\"type\":\"string\"}],\"name\":\"invalidateMaster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"masterData\",\"outputs\":[{\"name\":\"master\",\"type\":\"address\"},{\"name\":\"masterPercent\",\"type\":\"uint256\"},{\"name\":\"investorCode\",\"type\":\"string\"},{\"name\":\"isMasterValid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investorCode\",\"type\":\"string\"}],\"name\":\"getMasterWithSlaveAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investorCode\",\"type\":\"string\"}],\"name\":\"getMasterWithSlavePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_master\",\"type\":\"address\"},{\"name\":\"_slave\",\"type\":\"address\"},{\"name\":\"_masterPercent\",\"type\":\"uint256\"},{\"name\":\"_slavePercent\",\"type\":\"uint256\"},{\"name\":\"_investorCode\",\"type\":\"string\"}],\"name\":\"addMasterWithSlave\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investorCode\",\"type\":\"string\"}],\"name\":\"getMasterWithSlaveIndexByInvestorCode\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Referral","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c0f6a1046f88baf4f2488c56f1afa3f9793a35611ffeade1c685d72f2dda4b42"}]}