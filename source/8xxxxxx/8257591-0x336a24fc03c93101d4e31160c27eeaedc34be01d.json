{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.24  <0.6.0;\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract IERC20Token{\r\n// these functions aren't abstract since the compiler emits automatically generated getter functions as external\r\nfunction name() public view returns(string memory);\r\nfunction symbol() public view returns(string memory);\r\nfunction decimals() public view returns(uint256);\r\nfunction totalSupply() public view returns (uint256);\r\nfunction balanceOf(address _owner) public view returns (uint256);\r\nfunction allowance(address _owner, address _spender) public view returns (uint256);\r\n\r\nfunction transfer(address _to, uint256 _value) public returns (bool success);\r\nfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\nfunction approve(address _spender, uint256 _value) public returns (bool success);\r\n event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n\r\n}\r\n\r\n\r\n/*\r\n    Library for basic math operations with overflow/underflow protection\r\n*/\r\nlibrary SafeMath {\r\n    /**\r\n        @dev returns the sum of _x and _y, reverts if the calculation overflows\r\n\r\n        @param _x   value 1\r\n        @param _y   value 2\r\n\r\n        @return sum\r\n    */\r\n    function add(uint256 _x, uint256 _y) internal pure returns (uint256) {\r\n        uint256 z = _x + _y;\r\n        require(z >= _x,\"SafeMath->mul got a exception\");\r\n        return z;\r\n    }\r\n\r\n    /**\r\n        @dev returns the difference of _x minus _y, reverts if the calculation underflows\r\n\r\n        @param _x   minuend\r\n        @param _y   subtrahend\r\n\r\n        @return difference\r\n    */\r\n    function sub(uint256 _x, uint256 _y) internal pure returns (uint256) {\r\n        require(_x >= _y,\"SafeMath->sub got a exception\");\r\n        return _x - _y;\r\n    }\r\n\r\n    /**\r\n        @dev returns the product of multiplying _x by _y, reverts if the calculation overflows\r\n\r\n        @param _x   factor 1\r\n        @param _y   factor 2\r\n\r\n        @return product\r\n    */\r\n    function mul(uint256 _x, uint256 _y) internal pure returns (uint256) {\r\n        // gas optimization\r\n        if (_x == 0)\r\n            return 0;\r\n\r\n        uint256 z = _x * _y;\r\n        require(z / _x == _y,\"SafeMath->mul got a exception\");\r\n        return z;\r\n    }\r\n\r\n      /**\r\n        @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n\r\n        @param _x   dividend\r\n        @param _y   divisor\r\n\r\n        @return quotient\r\n    */\r\n    function div(uint256 _x, uint256 _y) internal pure returns (uint256) {\r\n        require(_y > 0,\"SafeMath->div got a exception\");\r\n        uint256 c = _x / _y;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary ConvertLib {\r\n    function convert(uint amount,uint conversionRate) public pure returns (uint convertedAmount) {\r\n        return amount * conversionRate;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract ERC20Token is IERC20Token {\r\n  using SafeMath for uint256;\r\n\r\n  mapping (address => uint256) _balances;\r\n\r\n  mapping (address => mapping (address => uint256)) _allowed;\r\n\r\n  uint256 _totalSupply;\r\n  string private _name;\r\n  string private _symbol;\r\n  uint256 private _decimals;\r\n\r\n   event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n\r\n  constructor(string memory name, string memory symbol,uint256 total, uint256 decimals) public {\r\n    _name = name;\r\n    _symbol = symbol;\r\n    _decimals = decimals;\r\n    _totalSupply = total.mul(10**decimals);\r\n    _balances[msg.sender] = _totalSupply;\r\n  }\r\n\r\n  /**\r\n   * @return the name of the token.\r\n   */\r\n  function name() public view returns(string memory) {\r\n    return _name;\r\n  }\r\n\r\n  /**\r\n   * @return the symbol of the token.\r\n   */\r\n  function symbol() public view returns(string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  /**\r\n   * @return the number of decimals of the token.\r\n   */\r\n  function decimals() public view returns(uint) {\r\n    return _decimals;\r\n  }\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param owner The address to query the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n    return _balances[owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param owner address The address which owns the funds.\r\n   * @param spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address owner,\r\n    address spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return _allowed[owner][spender];\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param to The address to transfer to.\r\n  * @param value The amount to be transferred.\r\n  */\r\n  function transfer(address to, uint256 value) public returns (bool) {\r\n    require(value <= _balances[msg.sender],\"not enough balance!!\");\r\n    require(to != address(0),\"params can't be empty(0)\");\r\n\r\n    _balances[msg.sender] = _balances[msg.sender].sub(value);\r\n    _balances[to] = _balances[to].add(value);\r\n    emit Transfer(msg.sender, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param spender The address which will spend the funds.\r\n   * @param value The amount of tokens to be spent.\r\n   */\r\n  function approve(address spender, uint256 value) public returns (bool) {\r\n    require(spender != address(0),\"approve address can't be empty(0)!!!\");\r\n\r\n    _allowed[msg.sender][spender] = value;\r\n    emit Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param from address The address which you want to send tokens from\r\n   * @param to address The address which you want to transfer to\r\n   * @param value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(value <= _balances[from],\"balance not enough!!\");\r\n    require(value <= _allowed[from][msg.sender],\"allow not enough\");\r\n    require(to != address(0),\"target address can't be empty(0)\");\r\n\r\n    _balances[from] = _balances[from].sub(value);\r\n    _balances[to] = _balances[to].add(value);\r\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n    emit Transfer(from, to, value);\r\n    return true;\r\n  }\r\n}\r\n\r\n/*\r\n*lock/unlock tokens\r\n*/\r\ncontract LockXL{\r\n    using SafeMath for uint256;\r\n    uint256 constant UNLOCK_DURATION = 100 * 24 * 60 * 60; //100 days, 100 * 24 * 60 * 60\r\n    uint256 constant DAY_UINT = 1*24*60*60;//1day,24 * 60 * 60;\r\n    uint256 private _unlockStartTime;\r\n\r\n    struct LockBody{\r\n        address account;\r\n        uint256 lockXLs;\r\n        uint256 unlockXLs; //remainXLs = lockXLs - unlockXLs\r\n        bool unlockDone; //remainXLs == 0\r\n    }\r\n\r\n    mapping (address=>LockBody) _lockBodies;\r\n\r\n    event LockBodyInputLog(address indexed account,uint256 indexed lockXLs);\r\n\r\n    constructor(uint256 unlockDurationTime) public {\r\n        _unlockStartTime = now.add(unlockDurationTime);\r\n    }\r\n\r\n    function transferable(uint256 amount,uint256 balance) internal  returns(bool){\r\n        if(_lockBodies[msg.sender].account == address(0)) return true; //it is not lock sender\r\n        LockBody storage lb = _lockBodies[msg.sender];\r\n        //current unlock progress\r\n        uint256 curProgress = now.sub(_unlockStartTime);\r\n        uint256 timeStamp = curProgress.div(DAY_UINT); //turn to day\r\n        lb.unlockDone = timeStamp >= UNLOCK_DURATION;\r\n        if(lb.unlockDone) return true; //unlock finished\r\n\r\n        uint256 unlockXLsPart = lb.lockXLs.mul(timeStamp).div(UNLOCK_DURATION);\r\n        lb.unlockXLs = unlockXLsPart;\r\n        if(balance.add(unlockXLsPart).sub(lb.lockXLs) > amount) return true;\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     *get the current\r\n     */\r\n     function LockInfo(address _acc) public view returns(address account,uint256 unlockStartTime,\r\n      uint256 curUnlockProgess,uint256 unlockDuration,\r\n      uint256 lockXLs,uint256 unlockXLs,uint256 remainlockXLs){\r\n        account = _acc;\r\n        unlockStartTime = _unlockStartTime;\r\n        LockBody memory lb = _lockBodies[_acc];\r\n        //current unlock progress\r\n        uint256 curProgress = now.sub(_unlockStartTime);\r\n        curUnlockProgess = curProgress.div(DAY_UINT);\r\n        lockXLs = lb.lockXLs;\r\n        if(curUnlockProgess >= UNLOCK_DURATION){\r\n            curUnlockProgess = UNLOCK_DURATION;\r\n        }\r\n        unlockXLs = lb.lockXLs.mul(curUnlockProgess).div(UNLOCK_DURATION);\r\n        remainlockXLs = lb.lockXLs.sub(unlockXLs);\r\n        unlockDuration = UNLOCK_DURATION;\r\n     }\r\n\r\n\r\n    /*\r\n    *\r\n    *\r\n    */\r\n    function inputLockBody(uint256 _XLs) public {\r\n        require(_XLs > 0,\"xl amount == 0\");\r\n        address _account = address(tx.origin); //origin\r\n        LockBody storage lb = _lockBodies[_account];\r\n        if(lb.account != address(0)){\r\n            lb.lockXLs = lb.lockXLs.add(_XLs);\r\n        }else{\r\n            _lockBodies[_account] = LockBody({account:_account,lockXLs:_XLs,unlockXLs:0,unlockDone:false});\r\n        }\r\n        emit LockBodyInputLog(_account,_XLs);\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable{\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed prevOwner,address indexed newOwner);\r\n    event WithdrawEtherEvent(address indexed receiver,uint256 indexed amount,uint256 indexed atime);\r\n    //modifier\r\n    modifier onlyOwner{\r\n        require(msg.sender == _owner, \"sender not eq owner\");\r\n        _;\r\n    }\r\n    constructor() internal{\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"newOwner can't be empty!\");\r\n        address prevOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(prevOwner,newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Rescue compatible ERC20 Token\r\n     *\r\n     * @param tokenAddr ERC20 The address of the ERC20 token contract\r\n     * @param receiver The address of the receiver\r\n     * @param amount uint256\r\n     */\r\n    function rescueTokens(IERC20Token tokenAddr, address receiver, uint256 amount) external onlyOwner {\r\n        IERC20Token _token = IERC20Token(tokenAddr);\r\n        require(receiver != address(0),\"receiver can't be empty!\");\r\n        uint256 balance = _token.balanceOf(address(this));\r\n        require(balance >= amount,\"balance is not enough!\");\r\n        require(_token.transfer(receiver, amount),\"transfer failed!!\");\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw ether\r\n     */\r\n    function withdrawEther(address payable to, uint256 amount) external onlyOwner {\r\n        require(to != address(0),\"address can't be empty\");\r\n        uint256 balance = address(this).balance;\r\n        require(balance >= amount,\"this balance is not enough!\");\r\n        to.transfer(amount);\r\n       emit WithdrawEtherEvent(to,amount,now);\r\n    }\r\n\r\n\r\n}\r\n\r\n/*\r\n*紧急情况下暂停转账\r\n*\r\n*/\r\n\r\ncontract UrgencyPause is Ownable{\r\n    bool private _paused;\r\n    mapping (address=>bool) private _manager;\r\n    event Paused(address indexed account,bool indexed state);\r\n    event ChangeManagerState(address indexed account,bool indexed state);\r\n    //modifer\r\n    modifier isManager(){\r\n        require(_manager[msg.sender]==true,\"not manager!!\");\r\n        _;\r\n    }\r\n    \r\n    modifier notPaused(){\r\n        require(!_paused,\"the state is paused!\");\r\n        _;\r\n    }\r\n    constructor() public{\r\n        _paused = false;\r\n        _manager[msg.sender] = true;\r\n    }\r\n\r\n    function changeManagerState(address account,bool state) public onlyOwner {\r\n        require(account != address(0),\"null address!!\");\r\n        _manager[account] = state;\r\n        emit ChangeManagerState(account,state);\r\n    }\r\n\r\n    function paused() public view returns(bool) {\r\n        return _paused;\r\n    }\r\n\r\n    function setPaused(bool state) public isManager {\r\n            _paused = state;\r\n            emit Paused(msg.sender,_paused);\r\n    }\r\n\r\n}\r\n\r\ncontract XLand is ERC20Token,UrgencyPause,LockXL{\r\n    using SafeMath for uint256;\r\n    mapping(address=>bool) private _freezes;  //accounts were freezed\r\n    //events\r\n    event FreezeAccountStateChange(address indexed account, bool indexed isFreeze);\r\n    //modifier\r\n    modifier notFreeze(){\r\n      require(_freezes[msg.sender]==false,\"The account was freezed!!\");\r\n      _;\r\n    }\r\n\r\n    modifier transferableXLs(uint256 amount){\r\n      require(super.transferable(amount,_balances[msg.sender]),\"lock,can't be transfer!!\");\r\n      _;\r\n    }\r\n    \r\n    constructor(string memory name, string memory symbol,uint256 total, uint8 decimals,uint256 unLockStatTime)\r\n    public\r\n    ERC20Token(name,symbol,total,decimals)\r\n    LockXL(unLockStatTime){\r\n\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public notPaused notFreeze transferableXLs(value) returns (bool){\r\n        return super.transfer(to,value);\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public notPaused notFreeze transferableXLs(value) returns (bool){\r\n        return super.approve(spender,value);\r\n    }\r\n\r\n    function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    public notPaused notFreeze\r\n    returns (bool){\r\n        return super.transferFrom(from,to,value);\r\n    }\r\n\r\n    function inputLockBody(uint256 amount) public {\r\n        super.inputLockBody(amount);\r\n    }\r\n    /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed_[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param spender The address which will spend the funds.\r\n   * @param addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseAllowance(\r\n    address spender,\r\n    uint256 addedValue\r\n  )\r\n    public notPaused notFreeze\r\n    returns (bool)\r\n  {\r\n    require(spender != address(0),\"spender can't be empty(0)!!!\");\r\n\r\n    _allowed[msg.sender][spender] = (\r\n      _allowed[msg.sender][spender].add(addedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed_[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param spender The address which will spend the funds.\r\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseAllowance(\r\n    address spender,\r\n    uint256 subtractedValue\r\n  )\r\n    public notPaused notFreeze\r\n    returns (bool)\r\n  {\r\n    require(spender != address(0),\"spender can't be empty(0)!!!\");\r\n\r\n    _allowed[msg.sender][spender] = (\r\n      _allowed[msg.sender][spender].sub(subtractedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that mints an amount of the token and assigns it to\r\n   * an account. This encapsulates the modification of balances such that the\r\n   * proper events are emitted.\r\n   * @param amount The amount that will be created.\r\n   */\r\n   //can't mint\r\n  // function mint(uint256 amount) public onlyOwner {\r\n  //   _totalSupply = _totalSupply.add(amount);\r\n  //   _balances[msg.sender] = _balances[msg.sender].add(amount);\r\n  //   emit Transfer(address(0), msg.sender, amount);\r\n  // }\r\n\r\n  /**\r\n   * @dev Internal function that burns an amount of the token of a given\r\n   *\r\n   * @param amount The amount that will be burnt.\r\n   */\r\n  function burn(uint256 amount) public onlyOwner {\r\n    require(amount <= _balances[msg.sender],\"balance not enough!!!\");\r\n    _totalSupply = _totalSupply.sub(amount);\r\n    _balances[msg.sender] = _balances[msg.sender].sub(amount);\r\n    emit Transfer(msg.sender, address(0), amount);\r\n  }\r\n\r\n  /**\r\n  *add  freeze/unfreeze account\r\n  *account\r\n  */\r\n  function changeFreezeAccountState(address account,bool isFreeze) public onlyOwner{\r\n    require(account != address(0),\"account can't be empty!!\");\r\n    _freezes[account] = isFreeze;\r\n    emit FreezeAccountStateChange(account,isFreeze);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"isFreeze\",\"type\":\"bool\"}],\"name\":\"changeFreezeAccountState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddr\",\"type\":\"address\"},{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"inputLockBody\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_acc\",\"type\":\"address\"}],\"name\":\"LockInfo\",\"outputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"unlockStartTime\",\"type\":\"uint256\"},{\"name\":\"curUnlockProgess\",\"type\":\"uint256\"},{\"name\":\"unlockDuration\",\"type\":\"uint256\"},{\"name\":\"lockXLs\",\"type\":\"uint256\"},{\"name\":\"unlockXLs\",\"type\":\"uint256\"},{\"name\":\"remainlockXLs\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"changeManagerState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"total\",\"type\":\"uint256\"},{\"name\":\"decimals\",\"type\":\"uint8\"},{\"name\":\"unLockStatTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"isFreeze\",\"type\":\"bool\"}],\"name\":\"FreezeAccountStateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"lockXLs\",\"type\":\"uint256\"}],\"name\":\"LockBodyInputLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"ChangeManagerState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"atime\",\"type\":\"uint256\"}],\"name\":\"WithdrawEtherEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"XLand","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000002540be400000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000002a3000000000000000000000000000000000000000000000000000000000000000000658204c414e4400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002584c000000000000000000000000000000000000000000000000000000000000","Library":"","LicenseType":"None","SwarmSource":"bzzr://c229f2bdd2966b8cccb8ee470fac0f10be39e89b175d3c55540636674d64e56d"}]}