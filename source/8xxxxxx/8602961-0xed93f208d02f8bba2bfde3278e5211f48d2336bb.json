{"status":"1","message":"OK","result":[{"SourceCode":"{\"store.sol\":{\"content\":\"pragma solidity \\u003e=0.4.24;\\ncontract LUKTokenStore {\\n    /** 精度，推荐是 8 */\\n    uint8 public decimals = 8;\\n    /** 代币总量 */\\n    uint256 public totalSupply;\\n    /** 查看某一地址代币余额 */\\n    mapping (address =\\u003e uint256) private tokenAmount;\\n    /** 代币交易代理人授权列表 */\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private allowanceMapping;\\n    //合约所有者\\n    address private owner;\\n    //写授权\\n    mapping (address =\\u003e bool) private authorization;\\n    \\n    /**\\n     * Constructor function\\n     * \\n     * 初始合约\\n     * @param initialSupply 代币总量\\n     */\\n    constructor (uint256 initialSupply) public {\\n        //** 是幂运算\\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\\n        tokenAmount[msg.sender] = totalSupply;                // Give the creator all initial tokens\\n        owner = msg.sender;\\n    }\\n    \\n    //定义函数修饰符，判断消息发送者是否是合约所有者\\n    modifier onlyOwner() {\\n        require(msg.sender == owner,\\\"Illegal operation.\\\");\\n        _;\\n    }\\n    \\n    modifier checkWrite() {\\n        require(authorization[msg.sender] == true,\\\"Illegal operation.\\\");\\n        _;\\n    }\\n    \\n    //写授权，合约调用合约时调用者为父合约地址\\n    function writeGrant(address _address) public onlyOwner {\\n        authorization[_address] = true;\\n    }\\n    function writeRevoke(address _address) public onlyOwner {\\n        authorization[_address] = false;\\n    }\\n    \\n    /**\\n     * 设置代币消费代理人，代理人可以在最大可使用金额内消费代币\\n     *\\n     * @param _from 资金所有者地址\\n     * @param _spender 代理人地址\\n     * @param _value 最大可使用金额\\n     */\\n    function approve(address _from,address _spender, uint256 _value) public checkWrite returns (bool) {\\n        allowanceMapping[_from][_spender] = _value;\\n        return true;\\n    }\\n    \\n    function allowance(address _from, address _spender) public view returns (uint256) {\\n        return allowanceMapping[_from][_spender];\\n    }\\n    \\n    /**\\n     * Internal transfer, only can be called by this contract\\n     */\\n    function transfer(address _from, address _to, uint256 _value) public checkWrite returns (bool) {\\n        // Prevent transfer to 0x0 address. Use burn() instead\\n        require(_to != address(0x0),\\\"Invalid address\\\");\\n        // Check if the sender has enough\\n        require(tokenAmount[_from] \\u003e= _value,\\\"Not enough balance.\\\");\\n        // Check for overflows\\n        require(tokenAmount[_to] + _value \\u003e tokenAmount[_to],\\\"Target account cannot be received.\\\");\\n\\n        // 转账\\n        // Subtract from the sender\\n        tokenAmount[_from] -= _value;\\n        // Add the same to the recipient\\n        tokenAmount[_to] += _value;\\n\\n        return true;\\n    }\\n    \\n    function transferFrom(address _from,address _spender, address _to, uint256 _value) public checkWrite returns (bool) {\\n        // Prevent transfer to 0x0 address. Use burn() instead\\n        require(_from != address(0x0),\\\"Invalid address\\\");\\n        // Prevent transfer to 0x0 address. Use burn() instead\\n        require(_to != address(0x0),\\\"Invalid address\\\");\\n        \\n        // Check if the sender has enough\\n        require(allowanceMapping[_from][_spender] \\u003e= _value,\\\"Insufficient credit limit.\\\");\\n        // Check if the sender has enough\\n        require(tokenAmount[_from] \\u003e= _value,\\\"Not enough balance.\\\");\\n        // Check for overflows\\n        require(tokenAmount[_to] + _value \\u003e tokenAmount[_to],\\\"Target account cannot be received.\\\");\\n        \\n        // 转账\\n        // Subtract from the sender\\n        tokenAmount[_from] -= _value;\\n        // Add the same to the recipient\\n        tokenAmount[_to] += _value;\\n        \\n        allowanceMapping[_from][_spender] -= _value; \\n    }\\n    \\n    function balanceOf(address _owner) public view returns (uint256){\\n        require(_owner != address(0x0),\\\"Address can\\u0027t is zero.\\\");\\n        return tokenAmount[_owner] ;\\n    }\\n}\"},\"token.sol\":{\"content\":\"pragma solidity \\u003e=0.4.24;\\n//ERC20 标准代币 https://eips.ethereum.org/EIPS/eip-20\\nimport \\\"./store.sol\\\";\\n\\ncontract LUKToken {\\n    /** ERC20 代币名字 */\\n    string public name = \\\"Lucky Coin\\\";\\n    /** ERC20 代币符号 */\\n    string public symbol = \\\"LUK\\\";\\n    \\n    //MUST trigger when tokens are transferred, including zero value transfers.\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    //MUST trigger on any successful call to approve(address _spender, uint256 _value).\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\n\\n    //合约所有者\\n    address private owner;\\n    //代币仓库\\n    LUKTokenStore private tokenStore;\\n    /** 黑名单列表 */\\n    mapping (address =\\u003e bool) private blackList;\\n\\n    //定义函数修饰符，判断消息发送者是否是合约所有者\\n    modifier onlyOwner() {\\n        require(msg.sender == owner,\\\"Illegal operation.\\\");\\n        _;\\n    }\\n    \\n    /**\\n     * Constructor function\\n     * @param storeAddr HITokenStore 布署地址\\n     */\\n    constructor (address storeAddr) public {\\n        owner = msg.sender;\\n        tokenStore = LUKTokenStore(storeAddr);\\n    }\\n\\n    /**合约默认回退函数，当没配配的函数时会调用此函数，当发送没有附加数据的以太时会调用此函数 */\\n    function () external payable{\\n    }\\n    \\n    /** ERC20 精度，推荐是 8 */\\n    function decimals() public view returns (uint8){\\n        return tokenStore.decimals();\\n    }\\n    /** ERC20 代币总量 */\\n    function totalSupply() public view returns (uint256){\\n        return tokenStore.totalSupply();\\n    }\\n\\n    function balanceOf(address _owner) public view returns (uint256 balance) {\\n        balance = tokenStore.balanceOf(_owner);\\n    }\\n\\n    /**\\n     * Transfer tokens\\n     *\\n     * Send `_value` tokens to `_to` from your account\\n     *\\n     * @param _to The address of the recipient\\n     * @param _value the amount to send\\n     */\\n    function transfer(address _to, uint256 _value) public returns (bool success) {\\n        //被列入黑名单的不能交易\\n        require(!blackList[msg.sender],\\\"Prohibit trading.\\\");\\n        require(!blackList[_to],\\\"Prohibit trading.\\\");\\n\\n        tokenStore.transfer(msg.sender,_to,_value);\\n        emit Transfer(msg.sender, _to, _value);\\n        \\n        success = true;\\n    }\\n\\n    /**\\n     * Transfer tokens from other address\\n     *\\n     * Send `_value` tokens to `_to` on behalf of `_from`\\n     *\\n     * @param _from The address of the sender\\n     * @param _to The address of the recipient\\n     * @param _value the amount to send\\n     */\\n    function transferFrom (address _from, address _to, uint256 _value) public returns (bool success) {\\n        //被列入黑名单的不能交易\\n        require(!blackList[_from],\\\"Prohibit trading.\\\");\\n        require(!blackList[msg.sender],\\\"Prohibit trading.\\\");\\n        require(!blackList[_to],\\\"Prohibit trading.\\\");\\n\\n        tokenStore.transferFrom(_from,msg.sender,_to,_value);\\n        emit Transfer(_from, _to, _value);\\n\\n        success = true;\\n    }\\n\\n    /**\\n     * Set allowance for other address\\n     *\\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf\\n     *\\n     * @param _spender The address authorized to spend\\n     * @param _value the max amount they can spend\\n     */\\n    function approve(address _spender, uint256 _value) public returns (bool success) {\\n        if (tokenStore.approve(msg.sender,_spender,_value)){\\n            emit Approval(msg.sender,_spender,_value); \\n            success = true;\\n        } else {\\n            success = false;\\n        }\\n    }\\n\\n    function allowance(address _from, address _spender) public view returns (uint256 remaining) {\\n        remaining = tokenStore.allowance(_from,_spender);\\n    }\\n    \\n    /**\\n      * 将一个地址添加到黑名单，被添加到黑名单的地址将不能够转出\\n      * @param _addr 代币接收者.\\n      * @return success 是否交易成功\\n      */\\n    function addToBlackList(address _addr) public onlyOwner returns (bool success) {\\n        require(_addr != address(0x0),\\\"Invalid address\\\");\\n\\n        blackList[_addr] = true;\\n        success = true;\\n    }\\n\\n    /**\\n      * 从黑名单中移出一个地址\\n      * @param _addr 代币接收者.\\n      * @return success 是否交易成功\\n      */\\n    function removeFromBlackList(address _addr) public onlyOwner returns (bool success) {\\n        require(_addr != address(0x0),\\\"Invalid address\\\");\\n\\n        blackList[_addr] = false;\\n        success = true;\\n    }\\n}\"}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addToBlackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeFromBlackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"storeAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"LUKToken","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000005f4cf44ec4a514f3963309bf82505bc390d8dfce","Library":"","LicenseType":"BSD-3-Clause","SwarmSource":"bzzr://5c9b508b1f7338a987348e369d91f1eb5ee9477aaccae70234b78fffe591fcee"}]}