{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n/**\r\n * @notice Declares a contract that can have an owner.\r\n */\r\ncontract OwnedI {\r\n    event LogOwnerChanged(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function getOwner()\r\n        view public\r\n        returns (address);\r\n\r\n    function setOwner(address newOwner)\r\n        public\r\n        returns (bool success); \r\n}\r\n\r\n/**\r\n * @notice Defines a contract that can have an owner.\r\n */\r\ncontract Owned is OwnedI {\r\n    /**\r\n     * @dev Made private to protect against child contract setting it to 0 by mistake.\r\n     */\r\n    address private owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier fromOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function getOwner()\r\n        view public\r\n        returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    function setOwner(address newOwner)\r\n        fromOwner public\r\n        returns (bool success) {\r\n        require(newOwner != 0);\r\n        if (owner != newOwner) {\r\n            emit LogOwnerChanged(owner, newOwner);\r\n            owner = newOwner;\r\n        }\r\n        success = true;\r\n    }\r\n}\r\n\r\ncontract BalanceFixable is OwnedI {\r\n    function fixBalance()\r\n        public\r\n        returns (bool success) {\r\n        getOwner().transfer(address(this).balance);\r\n        return true;\r\n    }\r\n}\r\n\r\n// @notice Interface for a certifier database\r\ncontract CertifierDbI {\r\n    event LogCertifierAdded(address indexed certifier);\r\n\r\n    event LogCertifierRemoved(address indexed certifier);\r\n\r\n    function addCertifier(address certifier)\r\n        public\r\n        returns (bool success);\r\n\r\n    function removeCertifier(address certifier)\r\n        public\r\n        returns (bool success);\r\n\r\n    function getCertifiersCount()\r\n        view public\r\n        returns (uint count);\r\n\r\n    function getCertifierStatus(address certifierAddr)\r\n        view public \r\n        returns (bool authorised, uint256 index);\r\n\r\n    function getCertifierAtIndex(uint256 index)\r\n        view public\r\n        returns (address);\r\n\r\n    function isCertifier(address certifier)\r\n        view public\r\n        returns (bool isIndeed);\r\n}\r\n\r\ncontract CertifierDb is Owned, CertifierDbI, BalanceFixable {\r\n    struct Certifier {\r\n        bool authorised;\r\n        /**\r\n         * @notice The index in the table at which this certifier can be found.\r\n         */\r\n        uint256 index;\r\n    }\r\n\r\n    /**\r\n     * @notice Addresses of the account or contract that are entitled to certify students.\r\n     */\r\n    mapping(address => Certifier) private certifierStatuses;\r\n    \r\n    /**\r\n     * @notice The potentially long list of all certifiers.\r\n     */\r\n    address[] private certifiers;\r\n\r\n    modifier fromCertifier {\r\n        require(certifierStatuses[msg.sender].authorised);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n    }\r\n\r\n    function addCertifier(address certifier)\r\n        fromOwner public\r\n        returns (bool success) {\r\n        require(certifier != 0);\r\n        if (!certifierStatuses[certifier].authorised) {\r\n            certifierStatuses[certifier].authorised = true;\r\n            certifierStatuses[certifier].index = certifiers.length;\r\n            certifiers.push(certifier);\r\n            emit LogCertifierAdded(certifier);\r\n        }\r\n        success = true;\r\n    }\r\n\r\n    function removeCertifier(address certifier)\r\n        fromOwner public\r\n        returns (bool success) {\r\n        require(certifierStatuses[certifier].authorised);\r\n        // Let's move the last array item into the one we remove.\r\n        uint256 index = certifierStatuses[certifier].index;\r\n        certifiers[index] = certifiers[certifiers.length - 1];\r\n        certifierStatuses[certifiers[index]].index = index;\r\n        certifiers.length--;\r\n        delete certifierStatuses[certifier];\r\n        emit LogCertifierRemoved(certifier);\r\n        success = true;\r\n    }\r\n\r\n    function getCertifiersCount()\r\n        view public\r\n        returns (uint256 count) {\r\n        count = certifiers.length;\r\n    }\r\n\r\n    function getCertifierStatus(address certifierAddr)\r\n        view public \r\n        returns (bool authorised, uint256 index) {\r\n        Certifier storage certifier = certifierStatuses[certifierAddr];\r\n        return (certifier.authorised,\r\n            certifier.index);\r\n    }\r\n\r\n    function getCertifierAtIndex(uint256 index)\r\n        view public\r\n        returns (address) {\r\n        return certifiers[index];\r\n    }\r\n\r\n    function isCertifier(address certifier)\r\n        view public\r\n        returns (bool isIndeed) {\r\n        isIndeed = certifierStatuses[certifier].authorised;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"certifier\",\"type\":\"address\"}],\"name\":\"removeCertifier\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"certifierAddr\",\"type\":\"address\"}],\"name\":\"getCertifierStatus\",\"outputs\":[{\"name\":\"authorised\",\"type\":\"bool\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"certifier\",\"type\":\"address\"}],\"name\":\"isCertifier\",\"outputs\":[{\"name\":\"isIndeed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"certifier\",\"type\":\"address\"}],\"name\":\"addCertifier\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getCertifierAtIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCertifiersCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fixBalance\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"certifier\",\"type\":\"address\"}],\"name\":\"LogCertifierAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"certifier\",\"type\":\"address\"}],\"name\":\"LogCertifierRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"LogOwnerChanged\",\"type\":\"event\"}]","ContractName":"CertifierDb","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7be5449e6026d7ec486be78a304c15e229308e0c9baa6d9bfb30adce9c911545"}]}