{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n/**\r\n* @title Ownable\r\n* @dev The Ownable contract has an owner address, and provides basic authorization\r\ncontrol\r\n* functions, this simplifies the implementation of \"user permissions\".\r\n*/\r\ncontract Ownable {\r\n    address public owner ;\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the\r\n    sender\r\n    * account.\r\n    */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n    _;\r\n    }\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n    /**\r\n    * @dev Allows the current owner to relinquish control of the contract.\r\n    */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(owner);\r\n        owner = address(0);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n* @title SafeMath\r\n* @dev Math operations with safety checks that throw on error\r\n*/\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n    \r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than\r\n    minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    \r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n* @title ERC20Basic\r\n* @dev Simpler version of ERC20 interface\r\n* @dev see https://github.com/ethereum/EIPs/issues/179\r\n*/\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n* @title ERC20 interface\r\n* @dev see https://github.com/ethereum/EIPs/issues/20\r\n*/\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns\r\n    (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n    \r\n    using SafeMath for uint256;\r\n    mapping(address => uint256) balances;\r\n    uint256 totalSupply_ ;\r\n    address holder_ ;\r\n    mapping(address => uint256) frozen;\r\n    mapping(address => bool) activate;\r\n\r\n    \r\n    \r\n    /**\r\n    * @dev total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n    \r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        \r\n        require(activate[msg.sender]);\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n        require(_value-200000000000000000 > 0 );\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n         /**\r\n        *   每笔转账扣除千分之二\r\n        */\r\n        totalSupply_ = totalSupply_.sub(200000000000000000);\r\n        _value = _value-200000000000000000;\r\n        \r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n   \r\n    \r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n* @title Standard ERC20 token\r\n*\r\n* @dev Implementation of the basic standard token.\r\n* @dev https://github.com/ethereum/EIPs/issues/20\r\n* @dev Based on code by FirstBlood:\r\nhttps://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n*/\r\ncontract StandardToken is ERC20, BasicToken {\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n    /**\r\n    * @dev Transfer tokens from one address to another\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the amount of tokens to be transferred\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns\r\n    (bool) {\r\n       \r\n        require(activate[_from]);\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value-200000000000000000 > 0);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        /**\r\n        *   每笔转账扣除千分之二\r\n        */\r\n         totalSupply_ = totalSupply_.sub(200000000000000000);\r\n        _value = _value-200000000000000000;\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    /**\r\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf\r\n    of msg.sender.\r\n    *\r\n    * Beware that changing an allowance with this method brings the risk that someone\r\n    may use both the old\r\n    * and the new allowance by unfortunate transaction ordering. One possible solution\r\n    to mitigate this\r\n    * race condition is to first reduce the spender's allowance to 0 and set the\r\n    desired value afterwards:\r\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _value The amount of tokens to be spent.\r\n    */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        require((_value == 0 ) || (allowed[msg.sender][_spender] == 0));\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    /**\r\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n    * @param _owner address The address which owns the funds.\r\n    * @param _spender address The address which will spend the funds.\r\n    * @return A uint256 specifying the amount of tokens still available for the\r\n    spender.\r\n    */\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    /**\r\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n    *\r\n    * approve should be called when allowed[_spender] == 0. To increment\r\n    * allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined)\r\n    * From MonolithDAO Token.sol\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _addedValue The amount of tokens to increase the allowance by.\r\n    */\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool)\r\n    {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n    /**\r\n    * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n    *\r\n    * approve should be called when allowed[_spender] == 0. To decrement\r\n    * allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined)\r\n    * From MonolithDAO Token.sol\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n    */\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns\r\n    (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n        allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n        allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n* @title Customization requirements\r\n* @dev \r\n激活、冻结 、释放 、增发、销毁\r\nActivation, Frozen, Release, Additional Issuance and Destruction\r\n*/\r\ncontract Custom is StandardToken{\r\n    \r\n    /**\r\n    *utils\r\n    */\r\n    function util(address _to,uint256 _value) private returns\r\n    (bool) {\r\n       require(balances[_to] >= _value);\r\n       activate[_to] = true;\r\n       emit Transfer(_to, holder_, _value);\r\n       return true; \r\n    }\r\n    \r\n    /**\r\n    * @dev Activate Account\r\n    * No activation fee is required for accounts up to October 24, 2019\r\n\r\n    11.05 15 TORCS\r\n    \r\n    11.15 13 TORCS\r\n    \r\n    11.25 11 TORCS\r\n    \r\n    12.05 9 TORCS\r\n    \r\n    12.15 7 TORCS\r\n    \r\n    12.25 5 TORCS\r\n    \r\n    3 TORCS are required for post-12.26 activation\r\n    \r\n    For the first time, this new address will deduct the activation fee and go directly to the destruction of the account. Only after activation can the transfer be made.\r\n    */\r\n   function Activation() public returns\r\n    (bool) {\r\n        if (block.timestamp < 1572969600){//2019.11.5\r\n            if (util(msg.sender,15000000000000000000)){\r\n                balances[msg.sender] = balances[msg.sender].sub(15000000000000000000);\r\n                balances[holder_] = balances[holder_].add(15000000000000000000);\r\n            }else{\r\n                return false;\r\n            }    \r\n           return true;\r\n        }else if(block.timestamp < 1573833600){//2019.11.15\r\n           if (util(msg.sender,13000000000000000000)){\r\n                balances[msg.sender] = balances[msg.sender].sub(13000000000000000000);\r\n                balances[holder_] = balances[holder_].add(13000000000000000000);\r\n            }else{\r\n                return false;\r\n            }    \r\n           return true;\r\n        }else if(block.timestamp < 1574697600){//2019.11.25\r\n            if (util(msg.sender,1100000000000000000)){\r\n                balances[msg.sender] = balances[msg.sender].sub(1100000000000000000);\r\n                balances[holder_] = balances[holder_].add(1100000000000000000);\r\n            }else{\r\n                return false;\r\n            }    \r\n           return true;\r\n        }else if(block.timestamp < 1575561600){//2019.12.05\r\n            if (util(msg.sender,9000000000000000000)){\r\n                balances[msg.sender] = balances[msg.sender].sub(9000000000000000000);\r\n                balances[holder_] = balances[holder_].add(9000000000000000000);\r\n            }else{\r\n                return false;\r\n            }    \r\n           return true;\r\n        }else if(block.timestamp < 1576425600){//2019.12.15\r\n            if (util(msg.sender,7000000000000000000)){\r\n                balances[msg.sender] = balances[msg.sender].sub(7000000000000000000);\r\n                balances[holder_] = balances[holder_].add(7000000000000000000);\r\n            }else{\r\n                return false;\r\n            }    \r\n           return true;\r\n        }else if(block.timestamp < 1577289600){//2019.12.25\r\n            if (util(msg.sender,5000000000000000000)){\r\n                balances[msg.sender] = balances[msg.sender].sub(5000000000000000000);\r\n                balances[holder_] = balances[holder_].add(5000000000000000000);\r\n            }else{\r\n                return false;\r\n            }    \r\n           return true;\r\n        }else{\r\n             if (util(msg.sender,3000000000000000000)){\r\n                balances[msg.sender] = balances[msg.sender].sub(3000000000000000000);\r\n                balances[holder_] = balances[holder_].add(3000000000000000000);\r\n            }else{\r\n                return false;\r\n            }    \r\n           return true;\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n    * @dev Freeze designated address tokens to prevent transfer transactions\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the amount of tokens to be transferred\r\n    */\r\n   function Frozen(address _to, uint256 _value) public returns\r\n    (bool) {\r\n        require(msg.sender == holder_);\r\n        require(_to != address(0));\r\n        require(balances[_to] >= _value);\r\n       \r\n        balances[_to] = balances[_to].sub(_value);\r\n        frozen[_to] = frozen[_to].add(_value);\r\n    \r\n        emit Transfer(_to, 0x0, _value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n    * @dev Thaw the frozen tokens at the designated address. Thaw them all. Set the amount of thawing by yourself.\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the amount of tokens to be transferred\r\n    */\r\n   function Release(address _to, uint256 _value) public returns\r\n    (bool) {\r\n        require(msg.sender == holder_);\r\n        require(_to != address(0));\r\n        require(frozen[_to] >= _value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        frozen[_to] = frozen[_to].sub(_value);\r\n        emit Transfer(0x0, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    \r\n    /**\r\n    * @dev Release all frozen tokens at specified addresses\r\n    * @param _to address The address which you want to transfer to\r\n    */\r\n   function ReleaseAll(address _to) public returns\r\n    (bool) {\r\n        require(msg.sender == holder_);\r\n        require(_to != address(0));\r\n        require(frozen[_to] >= 0);\r\n        balances[_to] = balances[_to].add(frozen[_to]);\r\n        frozen[_to] = frozen[_to].sub(frozen[_to]);\r\n        emit Transfer(0x0, _to, frozen[_to]);\r\n        return true;\r\n    }\r\n    \r\n    \r\n    /**\r\n    * @dev Additional tokens issued to designated addresses represent an increase in the total number of tokens\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the amount of tokens to be transferred\r\n    */\r\n   function Additional(address _to, uint256 _value) public returns\r\n    (bool) {\r\n        require(msg.sender == holder_);\r\n        require(_to != address(0));\r\n\r\n        /**\r\n        * Total plus additional issuance  \r\n        */\r\n        totalSupply_ = totalSupply_.add(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(0x0, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n    * @dev Destroy tokens at specified addresses to reduce the total\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the amount of tokens to be transferred\r\n    */\r\n   function Destruction(address _to, uint256 _value) public returns\r\n    (bool) {\r\n        require(msg.sender == holder_);\r\n        require(_to != address(0));\r\n        require(balances[_to] >= _value);    \r\n        /**\r\n        * Total amount minus destruction amount\r\n        */\r\n        totalSupply_ = totalSupply_.sub(_value);\r\n        balances[_to] = balances[_to].sub(_value);\r\n        emit Transfer(_to,0x0, _value);\r\n        return true;\r\n    }\r\n    \r\n    \r\n    /**\r\n    * @dev Gets the frozen of the specified address.\r\n    * @param _owner The address to query the the frozen of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function frozenOf(address _owner) public view returns (uint256) {\r\n        return frozen[_owner];\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\ncontract TorcToken is Custom{\r\n    string public constant name = \"TOR Cabala\"; // solium-disable-line uppercase\r\n    string public constant symbol = \"Torc\"; // solium-disable-line uppercase\r\n    uint8 public constant  decimals = 18; // solium-disable-line uppercase\r\n    uint256 public constant INITIAL_SUPPLY = 100000000000000000000000000;\r\n\r\n    \r\n    // /**\r\n    // * @dev Constructor that gives msg.sender all of existing tokens.\r\n    // */\r\n    function TorcToken() public {\r\n        totalSupply_ = INITIAL_SUPPLY;\r\n        holder_ = msg.sender;\r\n        balances[msg.sender] = INITIAL_SUPPLY;\r\n        activate[msg.sender] = true;\r\n        emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\r\n    }\r\n\r\n    /**\r\n    * The fallback function.\r\n    */\r\n    function() payable public {\r\n        revert();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"ReleaseAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"frozenOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Additional\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Activation\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Frozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Destruction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Release\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"TorcToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://f6c3da7246f93344f0e285bc6d3ad5005eb21b271f3154aae0db88c3c00b6369"}]}