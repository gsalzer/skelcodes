{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2019-09-20\r\n*/\r\n\r\npragma solidity 0.4.25;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    constructor(address _owner) public {\r\n        owner = _owner;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\ncontract DetailedERC20 {\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n\r\n  constructor(string _name, string _symbol, uint8 _decimals) public {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    decimals = _decimals;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract Managed is Ownable {\r\n    mapping (address => bool) public managers;\r\n    \r\n    constructor(\r\n        address _owner\r\n    )\r\n        public\r\n        Ownable(_owner)\r\n    {\r\n\r\n    }\r\n\r\n    modifier onlyManager () {\r\n        require(isManager(), \"Only managers may perform this action\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyManagerOrOwner () {\r\n        require(\r\n            checkManagerStatus(msg.sender) || msg.sender == owner,\r\n            \"Only managers or owners may perform this action\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function checkManagerStatus (address managerAddress) public view returns (bool) {\r\n        return managers[managerAddress];\r\n    }\r\n\r\n    function isManager () public view returns (bool) {\r\n        return checkManagerStatus(msg.sender);\r\n    }\r\n\r\n    function addManager (address managerAddress) public onlyOwner {\r\n        managers[managerAddress] = true;\r\n    }\r\n\r\n    function removeManager (address managerAddress) public onlyOwner {\r\n        managers[managerAddress] = false;\r\n    }\r\n}\r\n\r\ncontract ManagedWhitelist is Managed {\r\n    mapping (address => bool) public sendAllowed;\r\n    mapping (address => bool) public receiveAllowed;\r\n    \r\n    constructor(\r\n        address _owner\r\n    )\r\n        public\r\n        Managed(_owner)\r\n    {\r\n\r\n    }\r\n\r\n    modifier onlySendAllowed {\r\n        require(sendAllowed[msg.sender], \"Sender is not whitelisted\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyReceiveAllowed {\r\n        require(receiveAllowed[msg.sender], \"Recipient is not whitelisted\");\r\n        _;\r\n    }\r\n\r\n    function addToSendAllowed (address operator) public onlyManagerOrOwner {\r\n        sendAllowed[operator] = true;\r\n    }\r\n\r\n    function addToReceiveAllowed (address operator) public onlyManagerOrOwner {\r\n        receiveAllowed[operator] = true;\r\n    }\r\n\r\n    function addToBothSendAndReceiveAllowed (address operator) public onlyManagerOrOwner {\r\n        addToSendAllowed(operator);\r\n        addToReceiveAllowed(operator);\r\n    }\r\n\r\n    function removeFromSendAllowed (address operator) public onlyManagerOrOwner {\r\n        sendAllowed[operator] = false;\r\n    }\r\n\r\n    function removeFromReceiveAllowed (address operator) public onlyManagerOrOwner {\r\n        receiveAllowed[operator] = false;\r\n    }\r\n\r\n    function removeFromBothSendAndReceiveAllowed (address operator) public onlyManagerOrOwner {\r\n        removeFromSendAllowed(operator);\r\n        removeFromReceiveAllowed(operator);\r\n    }\r\n}\r\n\r\n\r\n\r\nlibrary MessagesAndCodes {\r\n    string public constant EMPTY_MESSAGE_ERROR = \"Message cannot be empty string\";\r\n    string public constant CODE_RESERVED_ERROR = \"Given code is already pointing to a message\";\r\n    string public constant CODE_UNASSIGNED_ERROR = \"Given code does not point to a message\";\r\n\r\n    struct Data {\r\n        mapping (uint8 => string) messages;\r\n        uint8[] codes;\r\n    }\r\n\r\n    function messageIsEmpty (string _message)\r\n        internal\r\n        pure\r\n        returns (bool isEmpty)\r\n    {\r\n        isEmpty = bytes(_message).length == 0;\r\n    }\r\n\r\n    function messageExists (Data storage self, uint8 _code)\r\n        internal\r\n        view\r\n        returns (bool exists)\r\n    {\r\n        exists = bytes(self.messages[_code]).length > 0;\r\n    }\r\n\r\n    function addMessage (Data storage self, uint8 _code, string _message)\r\n        public\r\n        returns (uint8 code)\r\n    {\r\n        require(!messageIsEmpty(_message), EMPTY_MESSAGE_ERROR);\r\n        require(!messageExists(self, _code), CODE_RESERVED_ERROR);\r\n\r\n        // enter message at code and push code onto storage\r\n        self.messages[_code] = _message;\r\n        self.codes.push(_code);\r\n        code = _code;\r\n    }\r\n\r\n    function autoAddMessage (Data storage self, string _message)\r\n        public\r\n        returns (uint8 code)\r\n    {\r\n        require(!messageIsEmpty(_message), EMPTY_MESSAGE_ERROR);\r\n\r\n        // find next available code to store the message at\r\n        code = 0;\r\n        while (messageExists(self, code)) {\r\n            code++;\r\n        }\r\n\r\n        // add message at the auto-generated code\r\n        addMessage(self, code, _message);\r\n    }\r\n\r\n    function removeMessage (Data storage self, uint8 _code)\r\n        public\r\n        returns (uint8 code)\r\n    {\r\n        require(messageExists(self, _code), CODE_UNASSIGNED_ERROR);\r\n\r\n        // find index of code\r\n        uint8 indexOfCode = 0;\r\n        while (self.codes[indexOfCode] != _code) {\r\n            indexOfCode++;\r\n        }\r\n\r\n        // remove code from storage by shifting codes in array\r\n        for (uint8 i = indexOfCode; i < self.codes.length - 1; i++) {\r\n            self.codes[i] = self.codes[i + 1];\r\n        }\r\n        self.codes.length--;\r\n\r\n        // remove message from storage\r\n        self.messages[_code] = \"\";\r\n        code = _code;\r\n    }\r\n\r\n    function updateMessage (Data storage self, uint8 _code, string _message)\r\n        public\r\n        returns (uint8 code)\r\n    {\r\n        require(!messageIsEmpty(_message), EMPTY_MESSAGE_ERROR);\r\n        require(messageExists(self, _code), CODE_UNASSIGNED_ERROR);\r\n\r\n        // update message at code\r\n        self.messages[_code] = _message;\r\n        code = _code;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract ERC1404 is ERC20 {\r\n    /// @notice Detects if a transfer will be reverted and if so returns an appropriate reference code\r\n    /// @param from Sending address\r\n    /// @param to Receiving address\r\n    /// @param value Amount of tokens being transferred\r\n    /// @return Code by which to reference message for rejection reasoning\r\n    /// @dev Overwrite with your custom transfer restriction logic\r\n    function detectTransferRestriction (address from, address to, uint256 value) public view returns (uint8);\r\n\r\n    /// @notice Returns a human-readable message for a given restriction code\r\n    /// @param restrictionCode Identifier for looking up a message\r\n    /// @return Text showing the restriction's reasoning\r\n    /// @dev Overwrite with your custom message and restrictionCode handling\r\n    function messageForTransferRestriction (uint8 restrictionCode) public view returns (string);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n\r\n    bool public mintingFinished = false;\r\n\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n    constructor(address _owner) \r\n        public \r\n        Ownable(_owner) \r\n    {\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev Function to mint tokens\r\n    * @param _to The address that will receive the minted tokens.\r\n    * @param _amount The amount of tokens to mint.\r\n    * @return A boolean that indicates if the operation was successful.\r\n    */\r\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Mint(_to, _amount);\r\n        emit Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to stop minting new tokens.\r\n    * @return True if the operation was successful.\r\n    */\r\n    function finishMinting() onlyOwner canMint public returns (bool) {\r\n        mintingFinished = true;\r\n        emit MintFinished();\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/** @title Token */\r\ncontract Token is DetailedERC20, MintableToken {\r\n\r\n    /** @dev Constructor\r\n      * @param _owner Token contract owner\r\n      * @param _name Token name\r\n      * @param _symbol Token symbol\r\n      * @param _decimals number of decimals in the token(usually 18)\r\n      */\r\n    constructor(\r\n        address _owner,\r\n        string _name, \r\n        string _symbol, \r\n        uint8 _decimals\r\n    )\r\n        public\r\n        MintableToken(_owner)\r\n        DetailedERC20(_name, _symbol, _decimals)\r\n    {\r\n\r\n    }\r\n\r\n    /** @dev Updates token name\r\n      * @param _name New token name\r\n      */\r\n    function updateName(string _name) public onlyOwner {\r\n        require(bytes(_name).length != 0);\r\n        name = _name;\r\n    }\r\n\r\n    /** @dev Updates token symbol\r\n      * @param _symbol New token name\r\n      */\r\n    function updateSymbol(string _symbol) public onlyOwner {\r\n        require(bytes(_symbol).length != 0);\r\n        symbol = _symbol;\r\n    }\r\n}\r\n\r\n\r\n/// @title Extendable reference implementation for the ERC-1404 token\r\n/// @dev Inherit from this contract to implement your own ERC-1404 token\r\n/// Modified to use iComply's Detailed ERC20 Token\r\ncontract SimpleRestrictedToken is ERC1404, Token {\r\n    uint8 public constant SUCCESS_CODE = 0;\r\n    string public constant SUCCESS_MESSAGE = \"SUCCESS\";\r\n\r\n    modifier notRestricted (address from, address to, uint256 value) {\r\n        uint8 restrictionCode = detectTransferRestriction(from, to, value);\r\n        require(restrictionCode == SUCCESS_CODE, messageForTransferRestriction(restrictionCode));\r\n        _;\r\n    }\r\n    \r\n    function detectTransferRestriction (address, address, uint256)\r\n        public\r\n        view\r\n        returns (uint8 restrictionCode)\r\n    {\r\n        restrictionCode = SUCCESS_CODE;\r\n    }\r\n        \r\n    function messageForTransferRestriction (uint8 restrictionCode)\r\n        public\r\n        view\r\n        returns (string message)\r\n    {\r\n        if (restrictionCode == SUCCESS_CODE) {\r\n            message = SUCCESS_MESSAGE;\r\n        }\r\n    }\r\n    \r\n    function transfer (address to, uint256 value)\r\n        public\r\n        notRestricted(msg.sender, to, value)\r\n        returns (bool success)\r\n    {\r\n        success = super.transfer(to, value);\r\n    }\r\n\r\n    function transferFrom (address from, address to, uint256 value)\r\n        public\r\n        notRestricted(from, to, value)\r\n        returns (bool success)\r\n    {\r\n        success = super.transferFrom(from, to, value);\r\n    }\r\n    \r\n    constructor(\r\n        address _owner,\r\n        string _name, \r\n        string _symbol, \r\n        uint8 _decimals\r\n    )\r\n        public\r\n        Token(_owner, _name, _symbol, _decimals)\r\n    {\r\n\r\n    }\r\n}\r\n\r\n/// @title ERC-1404 implementation with built-in message and code management solution\r\n/// @dev Inherit from this contract to implement your own ERC-1404 token\r\ncontract MessagedERC1404 is SimpleRestrictedToken {\r\n    using MessagesAndCodes for MessagesAndCodes.Data;\r\n    MessagesAndCodes.Data internal messagesAndCodes;\r\n\r\n    constructor(\r\n        address _owner,\r\n        string _name, \r\n        string _symbol, \r\n        uint8 _decimals\r\n    )\r\n        public\r\n        SimpleRestrictedToken(_owner, _name, _symbol, _decimals)\r\n    {\r\n        messagesAndCodes.addMessage(SUCCESS_CODE, SUCCESS_MESSAGE);\r\n    }\r\n\r\n    function messageForTransferRestriction (uint8 restrictionCode)\r\n        public\r\n        view\r\n        returns (string message)\r\n    {\r\n        message = messagesAndCodes.messages[restrictionCode];\r\n    }\r\n}\r\n\r\n\r\ncontract ManagedWhitelistToken is MessagedERC1404, ManagedWhitelist {\r\n    uint8 public SEND_NOT_ALLOWED_CODE;\r\n    uint8 public RECEIVE_NOT_ALLOWED_CODE;\r\n    string public constant SEND_NOT_ALLOWED_ERROR = \"ILLEGAL_TRANSFER_SENDING_ACCOUNT_NOT_WHITELISTED\";\r\n    string public constant RECEIVE_NOT_ALLOWED_ERROR = \"ILLEGAL_TRANSFER_RECEIVING_ACCOUNT_NOT_WHITELISTED\";\r\n    \r\n   constructor(\r\n       address _owner,\r\n       string _name,\r\n       string _symbol,\r\n       uint8 _decimals\r\n   )\r\n       public\r\n       MessagedERC1404(_owner, _name, _symbol, _decimals)\r\n       ManagedWhitelist(_owner)\r\n   {\r\n       SEND_NOT_ALLOWED_CODE = messagesAndCodes.autoAddMessage(SEND_NOT_ALLOWED_ERROR);\r\n       RECEIVE_NOT_ALLOWED_CODE = messagesAndCodes.autoAddMessage(RECEIVE_NOT_ALLOWED_ERROR);\r\n   }\r\n\r\n    function detectTransferRestriction (address from, address to, uint value)\r\n        public\r\n        view\r\n        returns (uint8 restrictionCode)\r\n    {\r\n        if (!sendAllowed[from]) {\r\n            restrictionCode = SEND_NOT_ALLOWED_CODE; // sender address not whitelisted\r\n        } else if (!receiveAllowed[to]) {\r\n            restrictionCode = RECEIVE_NOT_ALLOWED_CODE; // receiver address not whitelisted\r\n        } else {\r\n            restrictionCode = SUCCESS_CODE; // successful transfer (required)\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SUCCESS_CODE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"removeFromBothSendAndReceiveAllowed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"removeFromReceiveAllowed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"addToReceiveAllowed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"managerAddress\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"sendAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"addToBothSendAndReceiveAllowed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"updateSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SEND_NOT_ALLOWED_CODE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"restrictionCode\",\"type\":\"uint8\"}],\"name\":\"messageForTransferRestriction\",\"outputs\":[{\"name\":\"message\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SEND_NOT_ALLOWED_ERROR\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"updateName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RECEIVE_NOT_ALLOWED_ERROR\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"managerAddress\",\"type\":\"address\"}],\"name\":\"removeManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RECEIVE_NOT_ALLOWED_CODE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isManager\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"detectTransferRestriction\",\"outputs\":[{\"name\":\"restrictionCode\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"addToSendAllowed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SUCCESS_MESSAGE\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiveAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"managerAddress\",\"type\":\"address\"}],\"name\":\"checkManagerStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"removeFromSendAllowed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"managers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"ManagedWhitelistToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000fb00ae9b269383fa3f011842e3c767118b60098d000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000e426974666f6c696f20546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034246540000000000000000000000000000000000000000000000000000000000","Library":"MessagesAndCodes:35c09a8f37f08a1b9f19331e169e730dca5298a6","LicenseType":"None","SwarmSource":"bzzr://0965a3cb450e8bff809393565b5b5aad67cc00058b8b23ef83b3b4a82db2b4cd"}]}