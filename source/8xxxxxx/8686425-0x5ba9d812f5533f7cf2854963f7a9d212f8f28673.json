{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.7;\r\n// produced by the Solididy File Flattener (c) David Appleton 2018\r\n// contact : dave@akomba.com\r\n// released under Apache 2.0 licence\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * IMPORTANT: It is unsafe to assume that an address for which this\r\n     * function returns false is an externally-owned account (EOA) and not a\r\n     * contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\r\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n}\r\n\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Basket {\r\n    address[] public tokens;\r\n    mapping(address => uint256) public weights; // unit: aqToken/RSV\r\n    mapping(address => bool) public has;\r\n    // INVARIANT: {addr | addr in tokens} == {addr | has[addr] == true}\r\n    \r\n    // SECURITY PROPERTY: The value of prev is always a Basket, and cannot be set by any user.\r\n    \r\n    // WARNING: A basket can be of size 0. It is the Manager's responsibility\r\n    //                    to ensure Issuance does not happen against an empty basket.\r\n\r\n    /// Construct a new basket from an old Basket `prev`, and a list of tokens and weights with\r\n    /// which to update `prev`. If `prev == address(0)`, act like it's an empty basket.\r\n    constructor(Basket trustedPrev, address[] memory _tokens, uint256[] memory _weights) public {\r\n        require(_tokens.length == _weights.length, \"Basket: unequal array lengths\");\r\n\r\n        // Initialize data from input arrays\r\n        tokens = new address[](_tokens.length);\r\n        for (uint256 i = 0; i < _tokens.length; i++) {\r\n            require(!has[_tokens[i]], \"duplicate token entries\");\r\n            weights[_tokens[i]] = _weights[i];\r\n            has[_tokens[i]] = true;\r\n            tokens[i] = _tokens[i];\r\n        }\r\n\r\n        // If there's a previous basket, copy those of its contents not already set.\r\n        if (trustedPrev != Basket(0)) {\r\n            for (uint256 i = 0; i < trustedPrev.size(); i++) {\r\n                address tok = trustedPrev.tokens(i);\r\n                if (!has[tok]) {\r\n                    weights[tok] = trustedPrev.weights(tok);\r\n                    has[tok] = true;\r\n                    tokens.push(tok);\r\n                }\r\n            }\r\n        }\r\n        require(tokens.length <= 10, \"Basket: bad length\");\r\n    }\r\n\r\n    function getTokens() external view returns(address[] memory) {\r\n        return tokens;\r\n    }\r\n\r\n    function size() external view returns(uint256) {\r\n        return tokens.length;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\r\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\r\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\r\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IRSV {\r\n    // Standard ERC20 functions\r\n    function transfer(address, uint256) external returns(bool);\r\n    function approve(address, uint256) external returns(bool);\r\n    function transferFrom(address, address, uint256) external returns(bool);\r\n    function totalSupply() external view returns(uint256);\r\n    function balanceOf(address) external view returns(uint256);\r\n    function allowance(address, address) external view returns(uint256);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    // RSV-specific functions\r\n    function decimals() external view returns(uint8);\r\n    function mint(address, uint256) external;\r\n    function burnFrom(address, uint256) external;\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _nominatedOwner;\r\n\r\n    event NewOwnerNominated(address indexed previousOwner, address indexed nominee);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current nominated owner.\r\n     */\r\n    function nominatedOwner() external view returns (address) {\r\n        return _nominatedOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _onlyOwner();\r\n        _;\r\n    }\r\n\r\n    function _onlyOwner() internal view {\r\n        require(_msgSender() == _owner, \"caller is not owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Nominates a new owner `newOwner`.\r\n     * Requires a follow-up `acceptOwnership`.\r\n     * Can only be called by the current owner.\r\n     */\r\n    function nominateNewOwner(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0), \"new owner is 0 address\");\r\n        emit NewOwnerNominated(_owner, newOwner);\r\n        _nominatedOwner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Accepts ownership of the contract.\r\n     */\r\n    function acceptOwnership() external {\r\n        require(_nominatedOwner == _msgSender(), \"unauthorized\");\r\n        emit OwnershipTransferred(_owner, _nominatedOwner);\r\n        _owner = _nominatedOwner;\r\n    }\r\n\r\n    /** Set `_owner` to the 0 address.\r\n     * Only do this to deliberately lock in the current permissions.\r\n     *\r\n     * THIS CANNOT BE UNDONE! Call this only if you know what you're doing and why you're doing it!\r\n     */\r\n    function renounceOwnership(string calldata declaration) external onlyOwner {\r\n        string memory requiredDeclaration = \"I hereby renounce ownership of this contract forever.\";\r\n        require(\r\n            keccak256(abi.encodePacked(declaration)) ==\r\n            keccak256(abi.encodePacked(requiredDeclaration)),\r\n            \"declaration incorrect\");\r\n\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface IProposal {\r\n    function proposer() external returns(address);\r\n    function accept(uint256 time) external;\r\n    function cancel() external;\r\n    function complete(IRSV rsv, Basket oldBasket) external returns(Basket);\r\n    function nominateNewOwner(address newOwner) external;\r\n    function acceptOwnership() external;\r\n}\r\n\r\ninterface IProposalFactory {\r\n    function createSwapProposal(address,\r\n        address[] calldata tokens,\r\n        uint256[] calldata amounts,\r\n        bool[] calldata toVault\r\n    ) external returns (IProposal);\r\n\r\n    function createWeightProposal(address proposer, Basket basket) external returns (IProposal);\r\n}\r\n\r\ncontract ProposalFactory is IProposalFactory {\r\n    function createSwapProposal(\r\n        address proposer,\r\n        address[] calldata tokens,\r\n        uint256[] calldata amounts,\r\n        bool[] calldata toVault\r\n    )\r\n        external returns (IProposal)\r\n    {\r\n        IProposal proposal = IProposal(new SwapProposal(proposer, tokens, amounts, toVault));\r\n        proposal.nominateNewOwner(msg.sender);\r\n        return proposal;\r\n    }\r\n\r\n    function createWeightProposal(address proposer, Basket basket) external returns (IProposal) {\r\n        IProposal proposal = IProposal(new WeightProposal(proposer, basket));\r\n        proposal.nominateNewOwner(msg.sender);\r\n        return proposal;\r\n    }\r\n}\r\n\r\ncontract Proposal is IProposal, Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    uint256 public time;\r\n    address public proposer;\r\n\r\n    enum State { Created, Accepted, Cancelled, Completed }\r\n    State public state;\r\n    \r\n    event ProposalCreated(address indexed proposer);\r\n    event ProposalAccepted(address indexed proposer, uint256 indexed time);\r\n    event ProposalCancelled(address indexed proposer);\r\n    event ProposalCompleted(address indexed proposer, address indexed basket);\r\n\r\n    constructor(address _proposer) public {\r\n        proposer = _proposer;\r\n        state = State.Created;\r\n        emit ProposalCreated(proposer);\r\n    }\r\n\r\n    /// Moves a proposal from the Created to Accepted state.\r\n    function accept(uint256 _time) external onlyOwner {\r\n        require(state == State.Created, \"proposal not created\");\r\n        time = _time;\r\n        state = State.Accepted;\r\n        emit ProposalAccepted(proposer, _time);\r\n    }\r\n\r\n    /// Cancels a proposal if it has not been completed.\r\n    function cancel() external onlyOwner {\r\n        require(state != State.Completed);\r\n        state = State.Cancelled;\r\n        emit ProposalCancelled(proposer);\r\n    }\r\n\r\n    /// Moves a proposal from the Accepted to Completed state.\r\n    /// Returns the tokens, quantitiesIn, and quantitiesOut, required to implement the proposal.\r\n    function complete(IRSV rsv, Basket oldBasket)\r\n        external onlyOwner returns(Basket)\r\n    {\r\n        require(state == State.Accepted, \"proposal must be accepted\");\r\n        require(now > time, \"wait to execute\");\r\n        state = State.Completed;\r\n\r\n        Basket b = _newBasket(rsv, oldBasket);\r\n        emit ProposalCompleted(proposer, address(b));\r\n        return b;\r\n    }\r\n\r\n    /// Returns the newly-proposed basket. This varies for different types of proposals,\r\n    /// so it's abstract here.\r\n    function _newBasket(IRSV trustedRSV, Basket oldBasket) internal returns(Basket);\r\n}\r\n\r\n/**\r\n * A WeightProposal represents a suggestion to change the backing for RSV to a new distribution\r\n * of tokens. You can think of it as designating what a _single RSV_ should be backed by, but\r\n * deferring on the precise quantities of tokens that will be need to be exchanged until a later\r\n * point in time.\r\n *\r\n * When this proposal is completed, it simply returns the target basket.\r\n */\r\ncontract WeightProposal is Proposal {\r\n    Basket public trustedBasket;\r\n\r\n    constructor(address _proposer, Basket _trustedBasket) Proposal(_proposer) public {\r\n        require(_trustedBasket.size() > 0, \"proposal cannot be empty\");\r\n        trustedBasket = _trustedBasket;\r\n    }\r\n\r\n    /// Returns the newly-proposed basket\r\n    function _newBasket(IRSV, Basket) internal returns(Basket) {\r\n        return trustedBasket;\r\n    }\r\n}\r\n\r\n/**\r\n * A SwapProposal represents a suggestion to transfer fixed amounts of tokens into and out of the\r\n * vault. Whereas a WeightProposal designates how much a _single RSV_ should be backed by,\r\n * a SwapProposal first designates what quantities of tokens to transfer in total and then\r\n * solves for the new resultant basket later.\r\n *\r\n * When this proposal is completed, it calculates what the weights for the new basket will be\r\n * and returns it. If RSV supply is 0, this kind of Proposal cannot be used. \r\n */\r\n\r\n// On \"unit\" comments, see comment at top of Manager.sol.\r\ncontract SwapProposal is Proposal {\r\n    address[] public tokens;\r\n    uint256[] public amounts; // unit: qToken\r\n    bool[] public toVault;\r\n\r\n    uint256 constant WEIGHT_SCALE = uint256(10)**18; // unit: aqToken / qToken\r\n\r\n    constructor(address _proposer,\r\n                address[] memory _tokens,\r\n                uint256[] memory _amounts, // unit: qToken\r\n                bool[] memory _toVault )\r\n        Proposal(_proposer) public\r\n    {\r\n        require(_tokens.length > 0, \"proposal cannot be empty\");\r\n        require(_tokens.length == _amounts.length && _amounts.length == _toVault.length,\r\n                \"unequal array lengths\");\r\n        tokens = _tokens;\r\n        amounts = _amounts;\r\n        toVault = _toVault;\r\n    }\r\n\r\n    /// Return the newly-proposed basket, based on the current vault and the old basket.\r\n    function _newBasket(IRSV trustedRSV, Basket trustedOldBasket) internal returns(Basket) {\r\n\r\n        uint256[] memory weights = new uint256[](tokens.length);\r\n        // unit: aqToken/RSV\r\n\r\n        uint256 scaleFactor = WEIGHT_SCALE.mul(uint256(10)**(trustedRSV.decimals()));\r\n        // unit: aqToken/qToken * qRSV/RSV\r\n\r\n        uint256 rsvSupply = trustedRSV.totalSupply();\r\n        // unit: qRSV\r\n\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            uint256 oldWeight = trustedOldBasket.weights(tokens[i]);\r\n            // unit: aqToken/RSV\r\n\r\n            if (toVault[i]) {\r\n                // We require that the execution of a SwapProposal takes in no more than the funds\r\n                // offered in its proposal -- that's part of the premise. It turns out that,\r\n                // because we're rounding down _here_ and rounding up in\r\n                // Manager._executeBasketShift(), it's possible for the naive implementation of\r\n                // this mechanism to overspend the proposer's tokens by 1 qToken. We avoid that,\r\n                // here, by making the effective proposal one less. Yeah, it's pretty fiddly.\r\n                \r\n                weights[i] = oldWeight.add( (amounts[i].sub(1)).mul(scaleFactor).div(rsvSupply) );\r\n                //unit: aqToken/RSV == aqToken/RSV == [qToken] * [aqToken/qToken*qRSV/RSV] / [qRSV]\r\n            } else {\r\n                weights[i] = oldWeight.sub( amounts[i].mul(scaleFactor).div(rsvSupply) );\r\n                //unit: aqToken/RSV\r\n            }\r\n        }\r\n\r\n        return new Basket(trustedOldBasket, tokens, weights);\r\n        // unit check for weights: aqToken/RSV\r\n    }\r\n}\r\n\r\n\r\n\r\ninterface IVault {\r\n    function withdrawTo(address, uint256, address) external;\r\n}\r\n\r\n/**\r\n * The Manager contract is the point of contact between the Reserve ecosystem and the\r\n * surrounding world. It manages the Issuance and Redemption of RSV, a decentralized stablecoin\r\n * backed by a basket of tokens.\r\n *\r\n * The Manager also implements a Proposal system to handle administration of changes to the\r\n * backing of RSV. Anyone can propose a change to the backing.  Once the `owner` approves the\r\n * proposal, then after a pre-determined delay the proposal is eligible for execution by\r\n * anyone. However, the funds to execute the proposal must come from the proposer.\r\n *\r\n * There are two different ways to propose changes to the backing of RSV:\r\n * - proposeSwap()\r\n * - proposeWeights()\r\n *\r\n * In both cases, tokens are exchanged with the Vault and a new RSV backing is set. You can\r\n * think of the first type of proposal as being useful when you don't want to rebalance the\r\n * Vault by exchanging absolute quantities of tokens; its downside is that you don't know\r\n * precisely what the resulting basket weights will be. The second type of proposal is more\r\n * useful when you want to fine-tune the Vault weights and accept the downside that it's\r\n * difficult to know what capital will be required when the proposal is executed.\r\n */\r\n\r\n/* On \"unit\" comments:\r\n *\r\n * The units in use around weight computations are fiddly, and it's pretty annoying to get them\r\n * properly into the Solidity type system. So, there are many comments of the form \"unit:\r\n * ...\". Where such a comment is describing a field, method, or return parameter, the comment means\r\n * that the data in that place is to be interpreted to have that type. Many places also have\r\n * comments with more complicated expressions; that's manually working out the dimensional analysis\r\n * to ensure that the given expression has correct units.\r\n *\r\n * Some dimensions used in this analysis:\r\n * - 1 RSV: 1 Reserve\r\n * - 1 qRSV: 1 quantum of Reserve.\r\n *      (RSV & qRSV are convertible by .mul(10**reserve.decimals() qRSV/RSV))\r\n * - 1 qToken: 1 quantum of an external Token.\r\n * - 1 aqToken: 1 atto-quantum of an external Token.\r\n *      (qToken and aqToken are convertible by .mul(10**18 aqToken/qToken)\r\n * - 1 BPS: 1 Basis Point. Effectively dimensionless; convertible with .mul(10000 BPS).\r\n *\r\n * Note that we _never_ reason in units of Tokens or attoTokens.\r\n */\r\ncontract Manager is Ownable {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    // ROLES\r\n\r\n    // Manager is already Ownable, but in addition it also has an `operator`.\r\n    address public operator;\r\n\r\n    // DATA\r\n\r\n    Basket public trustedBasket;\r\n    IVault public trustedVault;\r\n    IRSV public trustedRSV;\r\n    IProposalFactory public trustedProposalFactory;\r\n\r\n    // Proposals\r\n    mapping(uint256 => IProposal) public trustedProposals;\r\n    uint256 public proposalsLength;\r\n    uint256 public delay = 24 hours;\r\n\r\n    // Controls\r\n    bool public issuancePaused;\r\n    bool public emergency;\r\n\r\n    // The spread between issuance and redemption in basis points (BPS).\r\n    uint256 public seigniorage;              // 0.1% spread -> 10 BPS. unit: BPS\r\n    uint256 constant BPS_FACTOR = 10000;     // This is what 100% looks like in BPS. unit: BPS\r\n    uint256 constant WEIGHT_SCALE = 10**18; // unit: aqToken/qToken\r\n\r\n    event ProposalsCleared();\r\n\r\n    // RSV traded events\r\n    event Issuance(address indexed user, uint256 indexed amount);\r\n    event Redemption(address indexed user, uint256 indexed amount);\r\n\r\n    // Pause events\r\n    event IssuancePausedChanged(bool indexed oldVal, bool indexed newVal);\r\n    event EmergencyChanged(bool indexed oldVal, bool indexed newVal);\r\n    event OperatorChanged(address indexed oldAccount, address indexed newAccount);\r\n    event SeigniorageChanged(uint256 oldVal, uint256 newVal);\r\n    event VaultChanged(address indexed oldVaultAddr, address indexed newVaultAddr);\r\n    event DelayChanged(uint256 oldVal, uint256 newVal);\r\n\r\n    // Proposals\r\n    event WeightsProposed(uint256 indexed id,\r\n        address indexed proposer,\r\n        address[] tokens,\r\n        uint256[] weights);\r\n\r\n    event SwapProposed(uint256 indexed id,\r\n        address indexed proposer,\r\n        address[] tokens,\r\n        uint256[] amounts,\r\n        bool[] toVault);\r\n\r\n    event ProposalAccepted(uint256 indexed id, address indexed proposer);\r\n    event ProposalCanceled(uint256 indexed id, address indexed proposer, address indexed canceler);\r\n    event ProposalExecuted(uint256 indexed id,\r\n        address indexed proposer,\r\n        address indexed executor,\r\n        address oldBasket,\r\n        address newBasket);\r\n\r\n    // ============================ Constructor ===============================\r\n\r\n    /// Begins in `emergency` state.\r\n    constructor(\r\n        address vaultAddr,\r\n        address rsvAddr,\r\n        address proposalFactoryAddr,\r\n        address basketAddr,\r\n        address operatorAddr,\r\n        uint256 _seigniorage) public\r\n    {\r\n        require(_seigniorage <= 1000, \"max seigniorage 10%\");\r\n        trustedVault = IVault(vaultAddr);\r\n        trustedRSV = IRSV(rsvAddr);\r\n        trustedProposalFactory = IProposalFactory(proposalFactoryAddr);\r\n        trustedBasket = Basket(basketAddr);\r\n        operator = operatorAddr;\r\n        seigniorage = _seigniorage;\r\n        emergency = true; // it's not an emergency, but we want everything to start paused.\r\n    }\r\n\r\n    // ============================= Modifiers ================================\r\n\r\n    /// Modifies a function to run only when issuance is not paused.\r\n    modifier issuanceNotPaused() {\r\n        require(!issuancePaused, \"issuance is paused\");\r\n        _;\r\n    }\r\n\r\n    /// Modifies a function to run only when there is not some emergency that requires upgrades.\r\n    modifier notEmergency() {\r\n        require(!emergency, \"contract is paused\");\r\n        _;\r\n    }\r\n\r\n    /// Modifies a function to run only when the caller is the operator account.\r\n    modifier onlyOperator() {\r\n        require(_msgSender() == operator, \"operator only\");\r\n        _;\r\n    }\r\n\r\n    /// Modifies a function to run and complete only if the vault is collateralized.\r\n    modifier vaultCollateralized() {\r\n        require(isFullyCollateralized(), \"undercollateralized\");\r\n        _;\r\n        assert(isFullyCollateralized());\r\n    }\r\n\r\n    // ========================= Public + External ============================\r\n\r\n    /// Set if issuance should be paused.\r\n    function setIssuancePaused(bool val) external onlyOperator {\r\n        emit IssuancePausedChanged(issuancePaused, val);\r\n        issuancePaused = val;\r\n    }\r\n\r\n    /// Set if all contract actions should be paused.\r\n    function setEmergency(bool val) external onlyOperator {\r\n        emit EmergencyChanged(emergency, val);\r\n        emergency = val;\r\n    }\r\n\r\n    /// Set the vault.\r\n    function setVault(address newVaultAddress) external onlyOwner {\r\n        emit VaultChanged(address(trustedVault), newVaultAddress);\r\n        trustedVault = IVault(newVaultAddress);\r\n    }\r\n\r\n    /// Clear the list of proposals.\r\n    function clearProposals() external onlyOperator {\r\n        proposalsLength = 0;\r\n        emit ProposalsCleared();\r\n    }\r\n\r\n    /// Set the operator.\r\n    function setOperator(address _operator) external onlyOwner {\r\n        emit OperatorChanged(operator, _operator);\r\n        operator = _operator;\r\n    }\r\n\r\n    /// Set the seigniorage, in BPS.\r\n    function setSeigniorage(uint256 _seigniorage) external onlyOwner {\r\n        require(_seigniorage <= 1000, \"max seigniorage 10%\");\r\n        emit SeigniorageChanged(seigniorage, _seigniorage);\r\n        seigniorage = _seigniorage;\r\n    }\r\n\r\n    /// Set the Proposal delay in hours.\r\n    function setDelay(uint256 _delay) external onlyOwner {\r\n        emit DelayChanged(delay, _delay);\r\n        delay = _delay;\r\n    }\r\n\r\n    /// Ensure that the Vault is fully collateralized.  That this is true should be an\r\n    /// invariant of this contract: it's true before and after every txn.\r\n    function isFullyCollateralized() public view returns(bool) {\r\n        uint256 scaleFactor = WEIGHT_SCALE.mul(uint256(10) ** trustedRSV.decimals());\r\n        // scaleFactor unit: aqToken/qToken * qRSV/RSV\r\n\r\n        for (uint256 i = 0; i < trustedBasket.size(); i++) {\r\n\r\n            address trustedToken = trustedBasket.tokens(i);\r\n            uint256 weight = trustedBasket.weights(trustedToken); // unit: aqToken/RSV\r\n            uint256 balance = IERC20(trustedToken).balanceOf(address(trustedVault)); //unit: qToken\r\n\r\n            // Return false if this token is undercollateralized:\r\n            if (trustedRSV.totalSupply().mul(weight) > balance.mul(scaleFactor)) {\r\n                // checking units: [qRSV] * [aqToken/RSV] == [qToken] * [aqToken/qToken * qRSV/RSV]\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /// Get amounts of basket tokens required to issue an amount of RSV.\r\n    /// The returned array will be in the same order as the current basket.tokens.\r\n    /// return unit: qToken[]\r\n    function toIssue(uint256 rsvAmount) public view returns (uint256[] memory) {\r\n        // rsvAmount unit: qRSV.\r\n        uint256[] memory amounts = new uint256[](trustedBasket.size());\r\n\r\n        uint256 feeRate = uint256(seigniorage.add(BPS_FACTOR));\r\n        // feeRate unit: BPS\r\n        uint256 effectiveAmount = rsvAmount.mul(feeRate).div(BPS_FACTOR);\r\n        // effectiveAmount unit: qRSV == qRSV*BPS/BPS\r\n\r\n        // On issuance, amounts[i] of token i will enter the vault. To maintain full backing,\r\n        // we have to round _up_ each amounts[i].\r\n        for (uint256 i = 0; i < trustedBasket.size(); i++) {\r\n            address trustedToken = trustedBasket.tokens(i);\r\n            amounts[i] = _weighted(\r\n                effectiveAmount,\r\n                trustedBasket.weights(trustedToken),\r\n                RoundingMode.UP\r\n            );\r\n            // unit: qToken = _weighted(qRSV, aqToken/RSV, _)\r\n        }\r\n\r\n        return amounts; // unit: qToken[]\r\n    }\r\n\r\n    /// Get amounts of basket tokens that would be sent upon redeeming an amount of RSV.\r\n    /// The returned array will be in the same order as the current basket.tokens.\r\n    /// return unit: qToken[]\r\n    function toRedeem(uint256 rsvAmount) public view returns (uint256[] memory) {\r\n        // rsvAmount unit: qRSV\r\n        uint256[] memory amounts = new uint256[](trustedBasket.size());\r\n\r\n        // On redemption, amounts[i] of token i will leave the vault. To maintain full backing,\r\n        // we have to round _down_ each amounts[i].\r\n        for (uint256 i = 0; i < trustedBasket.size(); i++) {\r\n            address trustedToken = trustedBasket.tokens(i);\r\n            amounts[i] = _weighted(\r\n                rsvAmount,\r\n                trustedBasket.weights(trustedToken),\r\n                RoundingMode.DOWN\r\n            );\r\n            // unit: qToken = _weighted(qRSV, aqToken/RSV, _)\r\n        }\r\n\r\n        return amounts;\r\n    }\r\n\r\n    /// Handles issuance.\r\n    /// rsvAmount unit: qRSV\r\n    function issue(uint256 rsvAmount) external\r\n        issuanceNotPaused\r\n        notEmergency\r\n        vaultCollateralized\r\n    {\r\n        require(rsvAmount > 0, \"cannot issue zero RSV\");\r\n        require(trustedBasket.size() > 0, \"basket cannot be empty\");\r\n\r\n        // Accept collateral tokens.\r\n        uint256[] memory amounts = toIssue(rsvAmount); // unit: qToken[]\r\n        for (uint256 i = 0; i < trustedBasket.size(); i++) {\r\n            IERC20(trustedBasket.tokens(i)).safeTransferFrom(\r\n                _msgSender(),\r\n                address(trustedVault),\r\n                amounts[i]\r\n            );\r\n            // unit check for amounts[i]: qToken.\r\n        }\r\n\r\n        // Compensate with RSV.\r\n        trustedRSV.mint(_msgSender(), rsvAmount);\r\n        // unit check for rsvAmount: qRSV.\r\n\r\n        emit Issuance(_msgSender(), rsvAmount);\r\n    }\r\n\r\n    /// Handles redemption.\r\n    /// rsvAmount unit: qRSV\r\n    function redeem(uint256 rsvAmount) external notEmergency vaultCollateralized {\r\n        require(rsvAmount > 0, \"cannot redeem 0 RSV\");\r\n        require(trustedBasket.size() > 0, \"basket cannot be empty\");\r\n\r\n        // Burn RSV tokens.\r\n        trustedRSV.burnFrom(_msgSender(), rsvAmount);\r\n        // unit check: rsvAmount is qRSV.\r\n\r\n        // Compensate with collateral tokens.\r\n        uint256[] memory amounts = toRedeem(rsvAmount); // unit: qToken[]\r\n        for (uint256 i = 0; i < trustedBasket.size(); i++) {\r\n            trustedVault.withdrawTo(trustedBasket.tokens(i), amounts[i], _msgSender());\r\n            // unit check for amounts[i]: qToken.\r\n        }\r\n\r\n        emit Redemption(_msgSender(), rsvAmount);\r\n    }\r\n\r\n    /**\r\n     * Propose an exchange of current Vault tokens for new Vault tokens.\r\n     *\r\n     * These parameters are phyiscally a set of arrays because Solidity doesn't let you pass\r\n     * around arrays of structs as parameters of transactions. Semantically, read these three\r\n     * lists as a list of triples (token, amount, toVault), where:\r\n     *\r\n     * - token is the address of an ERC-20 token,\r\n     * - amount is the amount of the token that the proposer says they will trade with the vault,\r\n     * - toVault is the direction of that trade. If toVault is true, the proposer offers to send\r\n     *   `amount` of `token` to the vault. If toVault is false, the proposer expects to receive\r\n     *   `amount` of `token` from the vault.\r\n     *\r\n     * If and when this proposal is accepted and executed, then:\r\n     *\r\n     * 1. The Manager checks that the proposer has allowed adequate funds, for the proposed\r\n     *    transfers from the proposer to the vault.\r\n     * 2. The proposed set of token transfers occur between the Vault and the proposer.\r\n     * 3. The Vault's basket weights are raised and lowered, based on these token transfers and the\r\n     *    total supply of RSV **at the time when the proposal is executed**.\r\n     *\r\n     * Note that the set of token transfers will almost always be at very slightly lower volumes\r\n     * than requested, due to the rounding error involved in (a) adjusting the weights at execution\r\n     * time and (b) keeping the Vault fully collateralized. The contracts should never attempt to\r\n     * trade at higher volumes than requested.\r\n     *\r\n     * The intended behavior of proposers is that they will make proposals that shift the Vault\r\n     * composition towards some known target of Reserve's management while maintaining full\r\n     * backing; the expected behavior of Reserve's management is to accept only such proposals,\r\n     * excepting during dire emergencies.\r\n     *\r\n     * Note: This type of proposal does not reliably remove token addresses!\r\n     * If you want to remove token addresses entirely, use proposeWeights.\r\n     *\r\n     * Returns the new proposal's ID.\r\n     */\r\n    function proposeSwap(\r\n        address[] calldata tokens,\r\n        uint256[] calldata amounts, // unit: qToken\r\n        bool[] calldata toVault\r\n    )\r\n    external notEmergency vaultCollateralized returns(uint256)\r\n    {\r\n        require(tokens.length == amounts.length && amounts.length == toVault.length,\r\n            \"proposeSwap: unequal lengths\");\r\n        uint256 proposalID = proposalsLength++;\r\n\r\n        trustedProposals[proposalID] = trustedProposalFactory.createSwapProposal(\r\n            _msgSender(),\r\n            tokens,\r\n            amounts,\r\n            toVault\r\n        );\r\n        trustedProposals[proposalID].acceptOwnership();\r\n\r\n        emit SwapProposed(proposalID, _msgSender(), tokens, amounts, toVault);\r\n        return proposalID;\r\n    }\r\n\r\n\r\n    /**\r\n     * Propose a new basket, defined by a list of tokens address, and their basket weights.\r\n     *\r\n     * Note: With this type of proposal, the allowances of tokens that will be required of the\r\n     * proposer may change between proposition and execution. If the supply of RSV rises or falls,\r\n     * then more or fewer tokens will be required to execute the proposal.\r\n     *\r\n     * Returns the new proposal's ID.\r\n     */\r\n\r\n    function proposeWeights(address[] calldata tokens, uint256[] calldata weights)\r\n    external notEmergency vaultCollateralized returns(uint256)\r\n    {\r\n        require(tokens.length == weights.length, \"proposeWeights: unequal lengths\");\r\n        require(tokens.length > 0, \"proposeWeights: zero length\");\r\n\r\n        uint256 proposalID = proposalsLength++;\r\n\r\n        trustedProposals[proposalID] = trustedProposalFactory.createWeightProposal(\r\n            _msgSender(),\r\n            new Basket(Basket(0), tokens, weights)\r\n        );\r\n        trustedProposals[proposalID].acceptOwnership();\r\n\r\n        emit WeightsProposed(proposalID, _msgSender(), tokens, weights);\r\n        return proposalID;\r\n    }\r\n\r\n    /// Accepts a proposal for a new basket, beginning the required delay.\r\n    function acceptProposal(uint256 id) external onlyOperator notEmergency vaultCollateralized {\r\n        require(proposalsLength > id, \"proposals length <= id\");\r\n        trustedProposals[id].accept(now.add(delay));\r\n        emit ProposalAccepted(id, trustedProposals[id].proposer());\r\n    }\r\n\r\n    /// Cancels a proposal. This can be done anytime before it is enacted by any of:\r\n    /// 1. Proposer 2. Operator 3. Owner\r\n    function cancelProposal(uint256 id) external notEmergency vaultCollateralized {\r\n        require(\r\n            _msgSender() == trustedProposals[id].proposer() ||\r\n            _msgSender() == owner() ||\r\n            _msgSender() == operator,\r\n            \"cannot cancel\"\r\n        );\r\n        require(proposalsLength > id, \"proposals length <= id\");\r\n        trustedProposals[id].cancel();\r\n        emit ProposalCanceled(id, trustedProposals[id].proposer(), _msgSender());\r\n    }\r\n\r\n    /// Executes a proposal by exchanging collateral tokens with the proposer.\r\n    function executeProposal(uint256 id) external onlyOperator notEmergency vaultCollateralized {\r\n        require(proposalsLength > id, \"proposals length <= id\");\r\n        address proposer = trustedProposals[id].proposer();\r\n        Basket trustedOldBasket = trustedBasket;\r\n\r\n        // Complete proposal and compute new basket\r\n        trustedBasket = trustedProposals[id].complete(trustedRSV, trustedOldBasket);\r\n\r\n        // For each token in either basket, perform transfers between proposer and Vault\r\n        for (uint256 i = 0; i < trustedOldBasket.size(); i++) {\r\n            address trustedToken = trustedOldBasket.tokens(i);\r\n            _executeBasketShift(\r\n                trustedOldBasket.weights(trustedToken),\r\n                trustedBasket.weights(trustedToken),\r\n                trustedToken,\r\n                proposer\r\n            );\r\n        }\r\n        for (uint256 i = 0; i < trustedBasket.size(); i++) {\r\n            address trustedToken = trustedBasket.tokens(i);\r\n            if (!trustedOldBasket.has(trustedToken)) {\r\n                _executeBasketShift(\r\n                    trustedOldBasket.weights(trustedToken),\r\n                    trustedBasket.weights(trustedToken),\r\n                    trustedToken,\r\n                    proposer\r\n                );\r\n            }\r\n        }\r\n\r\n        emit ProposalExecuted(\r\n            id,\r\n            proposer,\r\n            _msgSender(),\r\n            address(trustedOldBasket),\r\n            address(trustedBasket)\r\n        );\r\n    }\r\n\r\n\r\n    // ============================= Internal ================================\r\n\r\n    /// _executeBasketShift transfers the necessary amount of `token` between vault and `proposer`\r\n    /// to rebalance the vault's balance of token, as it goes from oldBasket to newBasket.\r\n    /// @dev To carry out a proposal, this is executed once per relevant token.\r\n    function _executeBasketShift(\r\n        uint256 oldWeight, // unit: aqTokens/RSV\r\n        uint256 newWeight, // unit: aqTokens/RSV\r\n        address trustedToken,\r\n        address proposer\r\n    ) internal {\r\n        if (newWeight > oldWeight) {\r\n            // This token must increase in the vault, so transfer from proposer to vault.\r\n            // (Transfer into vault: round up)\r\n            uint256 transferAmount =_weighted(\r\n                trustedRSV.totalSupply(),\r\n                newWeight.sub(oldWeight),\r\n                RoundingMode.UP\r\n            );\r\n            // transferAmount unit: qTokens\r\n\r\n            if (transferAmount > 0) {\r\n                IERC20(trustedToken).safeTransferFrom(\r\n                    proposer,\r\n                    address(trustedVault),\r\n                    transferAmount\r\n                );\r\n            }\r\n\r\n        } else if (newWeight < oldWeight) {\r\n            // This token will decrease in the vault, so transfer from vault to proposer.\r\n            // (Transfer out of vault: round down)\r\n            uint256 transferAmount =_weighted(\r\n                trustedRSV.totalSupply(),\r\n                oldWeight.sub(newWeight),\r\n                RoundingMode.DOWN\r\n            );\r\n            // transferAmount unit: qTokens\r\n            if (transferAmount > 0) {\r\n                trustedVault.withdrawTo(trustedToken, transferAmount, proposer);\r\n            }\r\n        }\r\n    }\r\n\r\n    // When you perform a weighting of some amount of RSV, it will involve a division, and\r\n    // precision will be lost. When it rounds, do you want to round UP or DOWN? Be maximally\r\n    // conservative.\r\n    enum RoundingMode {UP, DOWN}\r\n\r\n    /// From a weighting of RSV (e.g., a basket weight) and an amount of RSV,\r\n    /// compute the amount of the weighted token that matches that amount of RSV.\r\n    function _weighted(\r\n        uint256 amount, // unit: qRSV\r\n        uint256 weight, // unit: aqToken/RSV\r\n        RoundingMode rnd\r\n    ) internal view returns(uint256) // return unit: qTokens\r\n    {\r\n        uint256 scaleFactor = WEIGHT_SCALE.mul(uint256(10)**(trustedRSV.decimals()));\r\n        // scaleFactor unit: aqTokens/qTokens * qRSV/RSV\r\n        uint256 shiftedWeight = amount.mul(weight);\r\n        // shiftedWeight unit: qRSV/RSV * aqTokens\r\n\r\n        // If the weighting is precise, or we're rounding down, then use normal division.\r\n        if (rnd == RoundingMode.DOWN || shiftedWeight.mod(scaleFactor) == 0) {\r\n            return shiftedWeight.div(scaleFactor);\r\n            // return unit: qTokens == qRSV/RSV * aqTokens * (qTokens/aqTokens * RSV/qRSV)\r\n        }\r\n        return shiftedWeight.div(scaleFactor).add(1); // return unit: qTokens\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"setEmergency\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFullyCollateralized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"executeProposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"rsvAmount\",\"type\":\"uint256\"}],\"name\":\"toIssue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"rsvAmount\",\"type\":\"uint256\"}],\"name\":\"toRedeem\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"trustedVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposalsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seigniorage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"declaration\",\"type\":\"string\"}],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearProposals\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"acceptProposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newVaultAddress\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"delay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"name\":\"toVault\",\"type\":\"bool[]\"}],\"name\":\"proposeSwap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"trustedBasket\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"trustedRSV\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"trustedProposals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issuancePaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"setIssuancePaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"address[]\"},{\"name\":\"weights\",\"type\":\"uint256[]\"}],\"name\":\"proposeWeights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"emergency\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rsvAmount\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_seigniorage\",\"type\":\"uint256\"}],\"name\":\"setSeigniorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rsvAmount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"cancelProposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_delay\",\"type\":\"uint256\"}],\"name\":\"setDelay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"trustedProposalFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"vaultAddr\",\"type\":\"address\"},{\"name\":\"rsvAddr\",\"type\":\"address\"},{\"name\":\"proposalFactoryAddr\",\"type\":\"address\"},{\"name\":\"basketAddr\",\"type\":\"address\"},{\"name\":\"operatorAddr\",\"type\":\"address\"},{\"name\":\"_seigniorage\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ProposalsCleared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Issuance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldVal\",\"type\":\"bool\"},{\"indexed\":true,\"name\":\"newVal\",\"type\":\"bool\"}],\"name\":\"IssuancePausedChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldVal\",\"type\":\"bool\"},{\"indexed\":true,\"name\":\"newVal\",\"type\":\"bool\"}],\"name\":\"EmergencyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldAccount\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newAccount\",\"type\":\"address\"}],\"name\":\"OperatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldVal\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newVal\",\"type\":\"uint256\"}],\"name\":\"SeigniorageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldVaultAddr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newVaultAddr\",\"type\":\"address\"}],\"name\":\"VaultChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldVal\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newVal\",\"type\":\"uint256\"}],\"name\":\"DelayChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"weights\",\"type\":\"uint256[]\"}],\"name\":\"WeightsProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"toVault\",\"type\":\"bool[]\"}],\"name\":\"SwapProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"proposer\",\"type\":\"address\"}],\"name\":\"ProposalAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"canceler\",\"type\":\"address\"}],\"name\":\"ProposalCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldBasket\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newBasket\",\"type\":\"address\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"nominee\",\"type\":\"address\"}],\"name\":\"NewOwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Manager","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"000000000000000000000000aedcfcdd80573c2a312d15d6bb9d921a01e4fb0f0000000000000000000000001c5857e110cd8411054660f60b5de6a6958cfae200000000000000000000000006fa956887524836c8ff54f2f57695762ff0a0370000000000000000000000007cc227729270426da6e9e3f51838cf5c7dbc1588000000000000000000000000b9d3f35a6344011ae9fbf4877851ef148409be470000000000000000000000000000000000000000000000000000000000000000","Library":"","LicenseType":"BSD-2-Clause","SwarmSource":"bzzr://83c87ca1fe5c4d0aa3907f0917139de71bd1cfd22e5d66e61da59b9f440c196c"}]}