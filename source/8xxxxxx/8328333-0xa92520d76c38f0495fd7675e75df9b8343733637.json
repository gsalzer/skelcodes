{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2019-08-09\r\n*/\r\n\r\npragma solidity 0.4.25;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping (address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev give an account access to this role\r\n   */\r\n  function add(Role storage role, address account) internal {\r\n    require(account != address(0));\r\n    require(!has(role, account));\r\n\r\n    role.bearer[account] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev remove an account's access to this role\r\n   */\r\n  function remove(Role storage role, address account) internal {\r\n    require(account != address(0));\r\n    require(has(role, account));\r\n\r\n    role.bearer[account] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev check if an account has this role\r\n   * @return bool\r\n   */\r\n  function has(Role storage role, address account)\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    require(account != address(0));\r\n    return role.bearer[account];\r\n  }\r\n}\r\n\r\n/**\r\n * @title owned\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract owned{\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() internal {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\ninterface ERC20Interface {\r\n   \r\n    function balanceOf(address who) constant external returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Interface{\r\n    function allowance(address owner, address spender) public constant returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    function burn(uint256 _value) public ;\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n\r\n\r\n  function safeTransfer(ERC20 token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\ncontract ConverterRole {\r\n  using Roles for Roles.Role;\r\n\r\n  event ConverterAdded(address indexed account);\r\n  event ConverterRemoved(address indexed account);\r\n\r\n  Roles.Role private converters;\r\n\r\n  constructor() internal {\r\n    _addConverter(msg.sender);\r\n  }\r\n\r\n  modifier onlyConverter() {\r\n    require(isConverter(msg.sender));\r\n    _;\r\n  }\r\n\r\n  function isConverter(address account) public view returns (bool) {\r\n    return converters.has(account);\r\n  }\r\n\r\n  function addConverter(address account) public onlyConverter {\r\n    _addConverter(account);\r\n  }\r\n\r\n  function renounceConverter() public {\r\n    _removeConverter(msg.sender);\r\n  }\r\n\r\n  function _addConverter(address account) internal {\r\n    converters.add(account);\r\n    emit ConverterAdded(account);\r\n  }\r\n\r\n  function _removeConverter(address account) internal {\r\n    converters.remove(account);\r\n    emit ConverterRemoved(account);\r\n  }\r\n}\r\ncontract CoinDumper is owned{\r\n    //In this contract the dumped ERC20 coins can not be accessable, they will be locked in this contract forever\r\n    function withdrawEtherFromcontract(uint _amountInwei) public onlyOwner{\r\n      require(address(this).balance > _amountInwei);\r\n      require(isOwner());\r\n      msg.sender.transfer(_amountInwei);\r\n      \r\n    }\r\n    \r\n}\r\ncontract ConvertButterCoinToEther is owned, ConverterRole{\r\n    \r\n    using SafeERC20 for ERC20;\r\n    using SafeMath for uint256;\r\n    uint256 private buttercoinToEth_conversion_rate;\r\n    ERC20 ButterCoin;\r\n    CoinDumper public dumpercontract;\r\n    \r\n    constructor() public\r\n     {\r\n         \r\n         ButterCoin = ERC20(0x0A45226f078Eb78bF8FCc95a6e2FFf55243A4CE6);\r\n         buttercoinToEth_conversion_rate = 1; // 1 smallest unit of BTTR = 1 wei OR 1 BTTR = 1 ETH (1:1)\r\n         dumpercontract = new CoinDumper(); // The coinDumper contract created\r\n     }\r\n    \r\n    function() public payable {\r\n         //not payable fallback function\r\n          \r\n    }\r\n    function close() public onlyOwner { //onlyOwner is custom modifier\r\n  selfdestruct(msg.sender);  // `owner` is the owners address\r\n}\r\n    function setConversionRate(uint256 _valueInWei) public onlyOwner returns (uint256){\r\n        //set value of the smallest unit of buttercoin in wei\r\n        require(_valueInWei >= 0);\r\n         buttercoinToEth_conversion_rate = _valueInWei;\r\n        return  buttercoinToEth_conversion_rate;\r\n    }\r\n    function getConversionRate() public view returns(uint256 _rate){\r\n        \r\n        return buttercoinToEth_conversion_rate;\r\n    }\r\n    function convertButterCointoEther(uint256 value) public onlyConverter{\r\n        require(value <= ButterCoin.balanceOf(address(this)), \"No ButterCoin in contract available for conversion\");\r\n        ButterCoin.safeTransfer(address(dumpercontract),value);\r\n        if(buttercoinToEth_conversion_rate > 0)\r\n        {\r\n            uint256 equivalent_wei = value.mul(getConversionRate());\r\n            require(address(this).balance >= equivalent_wei, \"There's no ETH in the contract\");\r\n            msg.sender.transfer(equivalent_wei);\r\n        }\r\n    }\r\n     \r\n    function withdrawEtherFromcontract(uint _amountInwei) public onlyOwner{\r\n      require(address(this).balance > _amountInwei);\r\n      require(isOwner());\r\n      msg.sender.transfer(_amountInwei);\r\n      \r\n    }\r\n    \r\n    function withdrawTokenFromcontract(ERC20 _token, uint256 _tamount) public onlyOwner{\r\n        require(_token.balanceOf(address(this)) > _tamount);\r\n         _token.safeTransfer(msg.sender, _tamount);\r\n     \r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountInwei\",\"type\":\"uint256\"}],\"name\":\"withdrawEtherFromcontract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CoinDumper","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5704737cd0bfd7e1f1a807bf83fa7ea8ae29ddc69055b350cf40bf38e3ecbe2f"}]}