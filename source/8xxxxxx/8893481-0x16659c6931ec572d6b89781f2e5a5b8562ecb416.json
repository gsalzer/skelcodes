{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.2;\n\n\ninterface ERC165Interface {\n    \n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\ncontract ERC721Interface is ERC165Interface {\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    function balanceOf(address owner) public view returns (uint256 balance);\n    function ownerOf(uint256 tokenId) public view returns (address owner);\n    function approve(address to, uint256 tokenId) public;\n    function getApproved(uint256 tokenId) public view returns (address operator);\n    function setApprovalForAll(address operator, bool _approved) public;\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\n    function transferFrom(address from, address to, uint256 tokenId) public;\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\n}\n\ncontract ERC721MetadataInterface is ERC721Interface {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n\ncontract ERC721EnumerableInterface is ERC721Interface {\n    function totalSupply() public view returns (uint256);\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256 tokenId);\n    function tokenByIndex(uint256 index) public view returns (uint256);\n}\n\ncontract ERC165 is ERC165Interface {\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n    \n\n    \n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    \n    constructor () internal {\n        _registerInterface(_INTERFACE_ID_ERC165);\n    }\n\n    \n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }\n\n    \n    function _registerInterface(bytes4 interfaceId) internal {\n        require(interfaceId != 0xffffffff);\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    \n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    \n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    \n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    \n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    \n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    \n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    \n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ncontract ERC721ReceiverInterface {\n    \n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\n    public returns (bytes4);\n}\n\nlibrary SafeMath {\n    \n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        \n        \n        \n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    \n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        \n        require(b > 0);\n        uint256 c = a / b;\n        \n\n        return c;\n    }\n\n    \n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    \n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    \n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\ncontract ERC721Extended is ERC721Interface, ERC721MetadataInterface, ERC721EnumerableInterface, ERC165, Ownable {\n    using SafeMath for uint256;\n\n    \n    mapping(uint256 => address) private _tokenOwner;\n\n    \n    mapping(uint256 => address) private _tokenApprovals;\n\n    \n    mapping(address => uint256) private _ownedTokensCount;\n\n    \n    mapping(address => mapping (address => bool)) private _operatorApprovals;\n\n    \n    string private _name;\n\n    \n    string private _symbol;\n\n    \n    mapping(uint256 => string) private _tokenURIs;\n\n    \n    mapping(address => uint256[]) private _ownedTokens;\n\n    \n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    \n    uint256[] private _allTokens;\n\n    \n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    \n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n\n    \n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\n\n    \n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n\n    \n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n    \n    constructor(string memory name, string memory symbol) public {\n        _name = name;\n        _symbol = symbol;\n        _registerInterface(_INTERFACE_ID_ERC721);\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\n    }\n\n    \n    function balanceOf(address owner) public view returns (uint256) {\n        require(owner != address(0));\n        return _current(owner);\n    }\n\n    \n    function ownerOf(uint256 tokenId) public view returns (address) {\n        address owner = _tokenOwner[tokenId];\n        require(owner != address(0));\n        return owner;\n    }\n\n    \n    function approve(address to, uint256 tokenId) public {\n        address owner = ownerOf(tokenId);\n        require(to != owner);\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n        _tokenApprovals[tokenId] = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    \n    function getApproved(uint256 tokenId) public view returns (address) {\n        require(_exists(tokenId));\n        return _tokenApprovals[tokenId];\n    }\n\n    \n    function setApprovalForAll(address to, bool approved) public {\n        require(to != msg.sender);\n        _operatorApprovals[msg.sender][to] = approved;\n        emit ApprovalForAll(msg.sender, to, approved);\n    }\n\n    \n    function isApprovedForAll(address owner, address operator) public view returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    \n    function transferFrom(address from, address to, uint256 tokenId) public {\n        require(_isApprovedOrOwner(msg.sender, tokenId));\n\n        _transferFrom(from, to, tokenId);\n    }\n\n    \n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    \n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\n        transferFrom(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data));\n    }\n\n    \n    function _exists(uint256 tokenId) internal view returns (bool) {\n        address owner = _tokenOwner[tokenId];\n        return owner != address(0);\n    }\n\n    \n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\n        require(_exists(tokenId));\n        address owner = ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    \n    function _mint(address to, uint256 tokenId) internal {\n        require(to != address(0));\n        require(!_exists(tokenId));\n\n        _tokenOwner[tokenId] = to;\n        _increment(to);\n\n        _addTokenToOwnerEnumeration(to, tokenId);\n        _addTokenToAllTokensEnumeration(tokenId);\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    \n    function _burn(address owner, uint256 tokenId) internal {\n        require(ownerOf(tokenId) == owner);\n\n        _clearApproval(tokenId);\n\n        _decrement(owner);\n        _tokenOwner[tokenId] = address(0);\n\n        \n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n\n        _removeTokenFromOwnerEnumeration(owner, tokenId);\n        \n        _ownedTokensIndex[tokenId] = 0;\n        _removeTokenFromAllTokensEnumeration(tokenId);\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    \n    function _burn(uint256 tokenId) internal {\n        _burn(ownerOf(tokenId), tokenId);\n    }\n\n    \n    function _transferFrom(address from, address to, uint256 tokenId) internal {\n        require(ownerOf(tokenId) == from);\n        require(to != address(0));\n\n        _clearApproval(tokenId);\n\n        _decrement(from);\n        _increment(to);\n\n        _tokenOwner[tokenId] = to;\n\n        _removeTokenFromOwnerEnumeration(from, tokenId);\n        _addTokenToOwnerEnumeration(to, tokenId);\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    \n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n        internal returns (bool)\n    {\n        if (!_isContract(to)) {\n            return true;\n        }\n\n        bytes4 retval = ERC721ReceiverInterface(to).onERC721Received(msg.sender, from, tokenId, _data);\n        return (retval == _ERC721_RECEIVED);\n    }\n\n    \n    function name() external view returns (string memory) {\n        return _name;\n    }\n\n    \n    function symbol() external view returns (string memory) {\n        return _symbol;\n    }\n\n    \n    function tokenURI(uint256 tokenId) external view returns (string memory) {\n        require(_exists(tokenId));\n        return _tokenURIs[tokenId];\n    }\n\n    \n    function setTokenURI(uint256 tokenId, string calldata uri) external onlyOwner {\n        _setTokenURI(tokenId, uri);\n    }\n\n    \n    function _setTokenURI(uint256 tokenId, string memory uri) internal {\n        require(_exists(tokenId));\n        _tokenURIs[tokenId] = uri;\n    }\n\n    \n    function totalSupply() public view returns (uint256) {\n        return _allTokens.length;\n    }\n\n    \n    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {\n        require(index < balanceOf(owner));\n        return _ownedTokens[owner][index];\n    }\n\n    \n    function tokenByIndex(uint256 index) public view returns (uint256) {\n        require(index < totalSupply());\n        return _allTokens[index];\n    }\n\n    \n    function _tokensOfOwner(address owner) internal view returns (uint256[] storage) {\n        return _ownedTokens[owner];\n    }\n\n    \n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        _ownedTokensIndex[tokenId] = _ownedTokens[to].length;\n        _ownedTokens[to].push(tokenId);\n    }\n\n    \n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    \n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        \n        \n\n        uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        \n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; \n            _ownedTokensIndex[lastTokenId] = tokenIndex; \n        }\n\n        \n        _ownedTokens[from].length--;\n\n        \n        \n    }\n\n    \n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        \n        \n\n        uint256 lastTokenIndex = _allTokens.length.sub(1);\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        \n        \n        \n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; \n        _allTokensIndex[lastTokenId] = tokenIndex; \n\n        \n        _allTokens.length--;\n        _allTokensIndex[tokenId] = 0;\n    }\n\n    \n    function _isContract(address account) private view returns (bool) {\n        uint256 size;\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    \n    function _current(address tokenAddress) private view returns (uint256) {\n        return _ownedTokensCount[tokenAddress];\n    }\n\n    \n    function _increment(address tokenAddress) private {\n        _ownedTokensCount[tokenAddress] = _ownedTokensCount[tokenAddress].add(1);\n    }\n\n    \n    function _decrement(address tokenAddress) private {\n        _ownedTokensCount[tokenAddress] = _ownedTokensCount[tokenAddress].sub(1);\n    }\n\n    \n    function _clearApproval(uint256 tokenId) private {\n        if (_tokenApprovals[tokenId] != address(0)) {\n            _tokenApprovals[tokenId] = address(0);\n        }\n    }\n  }\n\ncontract RoleManager {\n\n    mapping(address => bool) private admins;\n    mapping(address => bool) private controllers;\n\n    modifier onlyAdmins {\n        require(admins[msg.sender], 'only admins');\n        _;\n    }\n\n    modifier onlyControllers {\n        require(controllers[msg.sender], 'only controllers');\n        _;\n    } \n\n    constructor() public {\n        admins[msg.sender] = true;\n        controllers[msg.sender] = true;\n    }\n\n    function addController(address _newController) external onlyAdmins{\n        controllers[_newController] = true;\n    } \n\n    function addAdmin(address _newAdmin) external onlyAdmins{\n        admins[_newAdmin] = true;\n    } \n\n    function removeController(address _controller) external onlyAdmins{\n        controllers[_controller] = false;\n    } \n    \n    function removeAdmin(address _admin) external onlyAdmins{\n        require(_admin != msg.sender, 'unexecutable operation'); \n        admins[_admin] = false;\n    } \n\n    function isAdmin(address addr) external view returns (bool) {\n        return (admins[addr]);\n    }\n\n    function isController(address addr) external view returns (bool) {\n        return (controllers[addr]);\n    }\n\n}\n\ncontract AccessController {\n\n    address roleManagerAddr;\n\n    modifier onlyAdmins {\n        require(RoleManager(roleManagerAddr).isAdmin(msg.sender), 'only admins');\n        _;\n    }\n\n    modifier onlyControllers {\n        require(RoleManager(roleManagerAddr).isController(msg.sender), 'only controllers');\n        _;\n    }\n\n    constructor (address _roleManagerAddr) public {\n        require(_roleManagerAddr != address(0), '_roleManagerAddr: Invalid address (zero address)');\n        roleManagerAddr = _roleManagerAddr;\n    }\n\n}\n\ncontract GeneAidolsToken is ERC721Extended, AccessController {\n    constructor(address _roleManagerAddr)\n        public\n        ERC721Extended(\"GeneA.I.dols\", \"GAI\")\n        AccessController(_roleManagerAddr)\n    {\n    }\n\n    function generateToken(uint256 tokenId, address to) external onlyControllers {\n        _mint(to, tokenId);\n    }\n\n    function setTokenURI(uint256 tokenId, string calldata uri) external onlyAdmins {\n        _setTokenURI(tokenId, uri);\n    }\n\n    function tokenExists(uint256 tokenId) external view returns (bool exists) {\n        return _exists(tokenId);\n    }\n}\n\ncontract EntityDataInterface {\n\n    address public tokenAddr;\n\n    mapping(uint256 => Entity) public entityData;\n    mapping(uint256 => address) public siringApprovedTo;\n\n    event UpdateRootHash (\n        uint256 tokenId,\n        bytes rootHash\n    );\n\n    event Birth (\n        uint256 tokenId,\n        address owner,\n        uint256 matronId,\n        uint256 sireId\n    );\n\n    struct Entity {\n        bytes rootHash;\n        uint256 birthTime;\n        uint256 cooldownEndTime;\n        uint256 matronId;\n        uint256 sireId;\n        uint256 generation;\n    }\n\n    function updateRootHash(uint256 tokenId, bytes calldata rootHash) external;\n\n    function createEntity(address owner, uint256 tokenId, uint256 _generation, uint256 _matronId, uint256 _sireId, uint256 _birthTime) public;\n\n    function getEntity(uint256 tokenId)\n      external\n      view\n      returns(\n            uint256 birthTime,\n            uint256 cooldownEndTime,\n            uint256 matronId,\n            uint256 sireId,\n            uint256 generation\n        );\n\n    function setCooldownEndTime(uint256 tokenId, uint256 _cooldownEndTime) external;\n\n    function approveSiring(uint256 sireId, address approveTo) external;\n\n    function clearSiringApproval(uint256 sireId) external;\n\n    function isSiringApprovedTo(uint256 tokenId, address borrower)\n        external\n        view\n        returns(bool);\n\n    function isReadyForFusion(uint256 tokenId)\n        external\n        view\n        returns (bool ready);\n}\n\ncontract EntityData is EntityDataInterface, AccessController {\n    using SafeMath for uint256;\n\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n\n    modifier isValidToken(uint256 tokenId) {\n        require(GeneAidolsToken(tokenAddr).tokenExists(tokenId), 'Invalid tokenId');\n        _;\n    }\n\n    constructor(address _tokenAddr, address _roleManagerAddr)\n        public\n        AccessController(_roleManagerAddr)\n    {\n        require(ERC721Interface(_tokenAddr).supportsInterface(_INTERFACE_ID_ERC721), 'Given address doesn`t suuport ERC721');  \n        tokenAddr = _tokenAddr;\n    }\n\n    function updateRootHash(uint256 tokenId, bytes calldata rootHash)\n        external\n        onlyAdmins\n        isValidToken(tokenId)\n    {\n        entityData[tokenId].rootHash = rootHash;\n\n        emit UpdateRootHash(tokenId, rootHash);\n    }\n\n    function createEntity(\n        address owner,\n        uint256 tokenId,\n        uint256 _generation,\n        uint256 _matronId,\n        uint256 _sireId,\n        uint256 _birthTime\n    ) public onlyControllers {\n       GeneAidolsToken(tokenAddr).generateToken(tokenId, owner);\n\n       Entity memory newEntity = Entity({\n           rootHash: '',\n           birthTime: _birthTime,\n           matronId: _matronId,\n           sireId: _sireId,\n           cooldownEndTime: 0,\n           generation: _generation\n       });\n\n       entityData[tokenId] = newEntity;\n       emit Birth(tokenId, owner, _matronId, _sireId);\n    }\n\n    function getEntity(uint256 tokenId)\n        external\n        view\n        isValidToken(tokenId)\n        returns(\n            uint256 birthTime,\n            uint256 cooldownEndTime,\n            uint256 matronId,\n            uint256 sireId,\n            uint256 generation\n        )\n    {\n        birthTime = entityData[tokenId].birthTime;\n        cooldownEndTime = entityData[tokenId].cooldownEndTime;\n        matronId = entityData[tokenId].matronId;\n        sireId = entityData[tokenId].sireId;\n        generation = entityData[tokenId].generation;\n    }\n\n\n\n    function setCooldownEndTime(uint256 tokenId, uint256 _cooldownEndTime)\n        external\n        onlyControllers\n        isValidToken(tokenId)\n    {\n        entityData[tokenId].cooldownEndTime = _cooldownEndTime;\n    }\n\n    function isReadyForFusion(uint256 tokenId)\n        external\n        view\n        isValidToken(tokenId)\n        returns (bool ready)\n    {\n        if(entityData[tokenId].cooldownEndTime <= block.timestamp){\n            return true;\n        }\n        return false;\n    }\n\n    function approveSiring(uint256 sireId, address approveTo) external {\n        require(ERC721Interface(tokenAddr).ownerOf(sireId) == msg.sender, 'msg.sender is not the owner of the given sireId');\n        require(approveTo != address(0), 'Invalid address (zero address)');\n\n        siringApprovedTo[sireId] = approveTo;\n    }\n\n    function clearSiringApproval(uint256 sireId) external {\n        require(ERC721Interface(tokenAddr).ownerOf(sireId) == msg.sender, 'msg.sender is not the owner of the given sireId');\n\n        delete siringApprovedTo[sireId];\n    }\n\n    function isSiringApprovedTo(uint256 tokenId, address borrower)\n        external\n        view\n        isValidToken(tokenId)\n        returns(bool)\n    {\n        return (siringApprovedTo[tokenId] == borrower);\n    }\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"isSiringApprovedTo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"_generation\",\"type\":\"uint256\"},{\"name\":\"_matronId\",\"type\":\"uint256\"},{\"name\":\"_sireId\",\"type\":\"uint256\"},{\"name\":\"_birthTime\",\"type\":\"uint256\"}],\"name\":\"createEntity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"entityData\",\"outputs\":[{\"name\":\"rootHash\",\"type\":\"bytes\"},{\"name\":\"birthTime\",\"type\":\"uint256\"},{\"name\":\"cooldownEndTime\",\"type\":\"uint256\"},{\"name\":\"matronId\",\"type\":\"uint256\"},{\"name\":\"sireId\",\"type\":\"uint256\"},{\"name\":\"generation\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sireId\",\"type\":\"uint256\"},{\"name\":\"approveTo\",\"type\":\"address\"}],\"name\":\"approveSiring\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"rootHash\",\"type\":\"bytes\"}],\"name\":\"updateRootHash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isReadyForFusion\",\"outputs\":[{\"name\":\"ready\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getEntity\",\"outputs\":[{\"name\":\"birthTime\",\"type\":\"uint256\"},{\"name\":\"cooldownEndTime\",\"type\":\"uint256\"},{\"name\":\"matronId\",\"type\":\"uint256\"},{\"name\":\"sireId\",\"type\":\"uint256\"},{\"name\":\"generation\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"_cooldownEndTime\",\"type\":\"uint256\"}],\"name\":\"setCooldownEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sireId\",\"type\":\"uint256\"}],\"name\":\"clearSiringApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"siringApprovedTo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"name\":\"_roleManagerAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rootHash\",\"type\":\"bytes\"}],\"name\":\"UpdateRootHash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"matronId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sireId\",\"type\":\"uint256\"}],\"name\":\"Birth\",\"type\":\"event\"}]","ContractName":"EntityData","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000007def390d93645f51f9a1e47a839d55a9a7b52d6e000000000000000000000000d9e1ec33d63d6d73ec9418254261d0cb341eb646","Library":"","LicenseType":"","SwarmSource":"bzzr://57b171e5a55a721e767cd5a1bab7d2aabcbe20a03dc879490fb497c0e812c656"}]}