{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts\\token\\ERCToken.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\ncontract ERCToken {\r\n  uint256 internal _totalSupply;\r\n  function totalSupply() public view returns (uint256) {\r\n\treturn _totalSupply;\r\n  }\r\n\r\n  // Fix for the ERC20 short address attack\r\n  modifier onlyPayloadSize(uint size) {\r\n       require(msg.data.length >= size + 4);\r\n       _;\r\n  }\r\n}\r\n\r\n// File: contracts\\token\\ERC20\\ERC20Basic.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic is ERCToken {\r\n  function name() public view returns (string memory);\r\n  function symbol() public  view returns (string memory);\r\n  function decimals() public view returns (uint8 _decimals);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts\\SafeMath.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n    \r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n \r\n  function div(uint256 a, uint256 b) internal pure  returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n \r\n  function sub(uint256 a, uint256 b) internal pure  returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n \r\n  function add(uint256 a, uint256 b) internal pure  returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n \r\n}\r\n\r\n// File: contracts\\token\\ERC223\\ERC223Receiving.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n /**\r\n * @title Contract that will work with ERC223 tokens.\r\n */\r\n \r\ncontract ERC223Receiving { \r\n/**\r\n * @dev Standard ERC223 function that will handle incoming token transfers.\r\n *\r\n * @param _from  Token sender address.\r\n * @param _value Amount of tokens.\r\n * @param _data  Transaction metadata.\r\n */\r\n    function tokenFallback(address _from, uint _value, bytes memory _data) public;\r\n}\r\n\r\n// File: contracts\\utils\\Address.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   \r\n        return address(uint160(account));\r\n    }\r\n}\r\n\r\n// File: contracts\\DividendsSplitter.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n\r\n\r\n\r\n\r\ncontract DividendsSplitter {\r\n    using SafeMath for uint256;\r\n\r\n    event PaymentReleased(address to, uint256 amount);\r\n    event PaymentReceived(address from, uint256 amount);\r\n\r\n    uint256 \t\t\t\t\tprivate _totalReleased;\r\n    mapping(address => uint256) private _released;\r\n\r\n    uint public    dividend_start;\r\n\tERC20Basic \t   token_contract;\r\n\r\n\r\n\r\n    constructor ( address a_token_address ) public {\r\n\t\t_totalReleased     = 0;\r\n\t\ttoken_contract     = ERC20Basic( a_token_address );\r\n\t\tdividend_start     = 1585612800; /*03.31.2020*/\r\n    }\r\n\r\n    function () external payable {\r\n        emit PaymentReceived(msg.sender, msg.value);\r\n    }\r\n\r\n\r\n    function totalReleased() public view returns (uint256) {\r\n        return _totalReleased;\r\n    }\r\n\r\n    function released(address account) public view returns (uint256) {\r\n        return _released[account];\r\n    }\r\n\r\n\tfunction totalBalance() private view returns (uint256) {\r\n\t\treturn token_contract.totalSupply().sub( token_contract.balanceOf( address(token_contract) ) );\r\n\t}\r\n\r\n  \tfunction tokenFallback(address _from, uint _value, bytes memory _data) public {\r\n\t\trevert();\r\n  \t}\r\n\r\n    function release_from( address account ) public returns (uint256) {\r\n\t\tif( now > dividend_start )\r\n\t\t{\r\n\t\t\tif( token_contract.balanceOf(account) <= 0 )\r\n\t\t\t\treturn 0;\r\n        \tuint256 totalReceived = address(this).balance.add(_totalReleased);\r\n        \tuint256 payment = totalReceived.mul(token_contract.balanceOf(account)).div(totalBalance()).sub(_released[account]);\r\n\r\n\t\t\tif( payment > 0 )\r\n\t\t\t{\r\n        \t\t_released[account] = _released[account].add(payment);\r\n        \t\t_totalReleased     = _totalReleased.add(payment);\r\n\t\t       \tAddress.toPayable(account).transfer(payment);\r\n        \t\temit PaymentReleased(account, payment);\r\n\t\t\t}\r\n\t\t\treturn payment;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn 0;\r\n\t\t}\r\n    }\r\n\r\n    function release() public returns (uint256) {\r\n\t\treturn release_from( msg.sender );\r\n\t}\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividend_start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"release_from\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a_token_address\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReceived\",\"type\":\"event\"}]","ContractName":"DividendsSplitter","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000ba2de92fecc49815cfd969b77dca13d9a4fab52","Library":"","LicenseType":"None","SwarmSource":"bzzr://d4fb7d197fade0b6c99e3805435efc25a0086fb3a8dd58e8180802d44f565a99"}]}