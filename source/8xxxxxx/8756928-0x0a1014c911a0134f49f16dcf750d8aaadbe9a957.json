{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract WaRoll {\r\n\r\n    struct BetData {\r\n        uint gameId;\r\n        address player;\r\n        uint amount;\r\n        uint possiblePayout;\r\n        uint mode;\r\n        uint value;\r\n        uint blockNum;\r\n        bool triggerJackpot;\r\n        bytes betData;\r\n    }\r\n\r\n    uint constant private FEE_PERCENT = 1;\r\n    uint constant private MIN_FEE = 0.0003 ether;\r\n\r\n    uint constant private MIN_STAKE = 0.001 ether;\r\n    uint constant private MAX_STAKE = 10 ether;\r\n    \r\n    uint constant public JACKPOT_NUM = 777;\r\n    uint constant private JACKPOT_THRESHOLD = 0.1 ether;\r\n    uint constant private JACKPOT_FEE = 0.001 ether;\r\n    uint constant private JACKPOT_MOD = 1000;\r\n    \r\n    uint private jackpotAmount = 0;\r\n\r\n    uint constant private ROULETTE_BASE_STAKE = 0.01 ether;\r\n\r\n    uint constant private TYPE_ROLL = 0;\r\n    uint constant private TYPE_ROULETTE = 1;\r\n    uint constant private TYPE_SANGOKUSHI = 2;\r\n    uint constant private TYPE_BASKETBALL = 3;\r\n    uint constant private TYPE_SLOT_30 = 4;\r\n    uint constant private TYPE_GRID_10 = 5;\r\n    \r\n    \r\n    uint constant private ROLL_MAX_MOD = 100;\r\n    uint constant private ROULETTE_MAX_MOD = 37;\r\n\r\n    mapping(bytes32 => BetData) private bets;\r\n\r\n    address private owner;\r\n    address private signer;\r\n    address public croupier;\r\n\r\n    event BetEvent(uint gamdId, bytes32 commit, bytes data, bool triggerJackpot);\r\n    event RollPayment(address player, uint gameId, uint payAmount, uint value, uint result, uint betAmount, uint betValue, uint jackpotAmount, bytes32 betTx);\r\n    event RoulettePayment(address player, uint gameId, uint payAmount, uint value, uint result, uint betAmount, bytes32 betTx,bytes betData);\r\n    event SangokushiPayment(address player, uint gameId, uint mode, uint payAmount, uint value, uint result, uint betAmount, uint betValue, bytes32 betTx);\r\n    event BasketballPayment(address player, uint gameId, uint payAmount, uint value, uint data, uint betAmount, bytes32 betTx);\r\n    event Slot30Payment(address player, uint gameId, uint payAmount, uint value, uint data, uint betAmount, bytes32 betTx);\r\n    event Grid10Payment(address player, uint gameId, uint payAmount, uint value, uint data, uint betAmount, bytes32 betTx);\r\n    event PaymentFail(address player, uint amount);\r\n\r\n    constructor() public payable {\r\n        owner = msg.sender; \r\n        signer = msg.sender;\r\n        croupier = msg.sender;\r\n    }\r\n\r\n    modifier ownerOnly(){\r\n        require(msg.sender == owner, \"not owner\");\r\n        _;\r\n    }\r\n\r\n    modifier croupierOnly(){\r\n        require(msg.sender == croupier, \"not croupier\");\r\n        _;\r\n    }\r\n\r\n    modifier validSignAndBlock(uint blockNum, bytes32 commit, bytes32 r, bytes32 s){\r\n        require(blockNum >= block.number, \"commit has expired\");\r\n        bytes32 v1 = keccak256(abi.encodePacked(uint40(blockNum), commit));\r\n        require(signer == ecrecover(v1, 27, r, s) || signer == ecrecover(v1, 28, r, s), \"signer valid error\");\r\n        _;\r\n    }\r\n    \r\n    function getJackpotAmount() public view returns(uint){\r\n        return jackpotAmount;\r\n    }\r\n\r\n    function setCroupier(address c) public ownerOnly {\r\n        croupier = c;\r\n    }\r\n\r\n    function setSigner(address c) public ownerOnly {\r\n        signer = c;\r\n    }\r\n\r\n    function kill() public ownerOnly {\r\n        selfdestruct(owner);\r\n    }\r\n    \r\n     function doGrid10(uint stakePerLine, uint lineCount, uint expiredBlockNum, bytes32 commit, bytes32 r, bytes32 s) public payable validSignAndBlock(expiredBlockNum, commit, r, s) {\r\n        uint stake = msg.value;\r\n        require(stake >= MIN_STAKE && stake <= MAX_STAKE);\r\n        require(stake == stakePerLine * lineCount);\r\n        BetData storage bet = bets[commit];\r\n        require(bet.player == address(0));\r\n        bet.gameId = TYPE_GRID_10;\r\n        bet.amount = stake;\r\n        bet.player = msg.sender;\r\n        bet.blockNum = block.number;\r\n        bytes memory data = toBytes(stakePerLine, lineCount);\r\n        emit BetEvent(bet.gameId, commit, data, false);\r\n    }\r\n    \r\n    function doSlot30(uint stakePerLine, uint lineCount, uint expiredBlockNum, bytes32 commit, bytes32 r, bytes32 s) public payable validSignAndBlock(expiredBlockNum, commit, r, s) {\r\n        uint stake = msg.value;\r\n        require(stake >= MIN_STAKE && stake <= MAX_STAKE);\r\n        require(stake == stakePerLine * lineCount);\r\n        BetData storage bet = bets[commit];\r\n        require(bet.player == address(0));\r\n        bet.gameId = TYPE_SLOT_30;\r\n        bet.amount = stake;\r\n        bet.player = msg.sender;\r\n        bet.blockNum = block.number;\r\n        bytes memory data = toBytes(stakePerLine, lineCount);\r\n        emit BetEvent(bet.gameId, commit, data, false);\r\n    }\r\n    \r\n    \r\n     function doBasketball(uint expiredBlockNum, bytes32 commit, bytes32 r, bytes32 s) public payable validSignAndBlock(expiredBlockNum, commit, r, s) {\r\n        uint stake = msg.value;\r\n        require(stake >= MIN_STAKE && stake <= MAX_STAKE);\r\n        BetData storage bet = bets[commit];\r\n        require(bet.player == address(0));\r\n        bet.gameId = TYPE_BASKETBALL;\r\n        bet.amount = stake;\r\n        bet.player = msg.sender;\r\n        bet.blockNum = block.number;\r\n        bytes memory data = toBytes(stake);\r\n        emit BetEvent(bet.gameId, commit, data, false);\r\n    }\r\n    \r\n    function doSangokushiBet(uint mode, uint value, uint expiredBlockNum, bytes32 commit, bytes32 r, bytes32 s) public payable validSignAndBlock(expiredBlockNum, commit, r, s) {\r\n        require(mode == 0 || mode == 1, \"invalid mode\");\r\n        require(value >= 0 && value <= 2, \"invalid value\");\r\n        uint stake = msg.value;\r\n        require(stake >= MIN_STAKE && stake <= MAX_STAKE);\r\n        BetData storage bet = bets[commit];\r\n        require(bet.player == address(0));\r\n        bet.gameId = TYPE_SANGOKUSHI;\r\n        bet.value = value;\r\n        bet.amount = stake;\r\n        if(mode == 0){\r\n            bet.possiblePayout = stake * 138 / 100;\r\n        }else if(mode == 1){\r\n            bet.possiblePayout = stake * 276 / 100;\r\n        }\r\n        bet.mode = mode;\r\n        bet.player = msg.sender;\r\n        bet.blockNum = block.number;\r\n        bytes memory data = toBytes(mode, value, bet.possiblePayout);\r\n        emit BetEvent(bet.gameId, commit, data, false);\r\n    }\r\n\r\n    function doRollBet(uint value, uint expiredBlockNum, bytes32 commit, bytes32 r, bytes32 s) public payable validSignAndBlock(expiredBlockNum, commit, r, s) {\r\n        require(value >= 1 && value <= ROLL_MAX_MOD - 3, \"invalid value\");\r\n        uint stake = msg.value;\r\n        require(stake >= MIN_STAKE && stake <= MAX_STAKE);\r\n        BetData storage bet = bets[commit];\r\n        require(bet.player == address(0));\r\n        bet.gameId = TYPE_ROLL;\r\n        bet.value = value;\r\n        bet.amount = stake;\r\n        bet.player = msg.sender;\r\n        bet.blockNum = block.number;\r\n        uint fee = stake / 100 * FEE_PERCENT;\r\n        if (fee < MIN_FEE) {\r\n            fee = MIN_FEE;\r\n        }\r\n        uint jackpotFee = 0;\r\n        bet.triggerJackpot = stake >= JACKPOT_THRESHOLD;\r\n        if(bet.triggerJackpot){\r\n            jackpotFee = JACKPOT_FEE;\r\n            jackpotAmount += JACKPOT_FEE;\r\n        }\r\n        bet.possiblePayout = (stake - fee - jackpotFee) * ROLL_MAX_MOD / value;\r\n        bytes memory data = toBytes(value, bet.possiblePayout);\r\n        emit BetEvent(bet.gameId, commit, data, bet.triggerJackpot);\r\n    }\r\n    \r\n      function toBytes(uint v1) private pure returns (bytes){\r\n        bytes32 v1Bytes = bytes32(v1);\r\n        bytes memory data = new bytes(v1Bytes.length);\r\n        for(uint i = 0 ; i < v1Bytes.length; i ++){\r\n            data[i] = v1Bytes[i];\r\n        }\r\n        return data;\r\n    }\r\n\r\n    function toBytes(uint v1, uint v2) private pure returns (bytes){\r\n        bytes32 v1Bytes = bytes32(v1);\r\n        bytes32 v2Bytes = bytes32(v2);\r\n        bytes memory data = new bytes(v1Bytes.length + v2Bytes.length);\r\n        for(uint i = 0 ; i < v1Bytes.length; i ++){\r\n            data[i] = v1Bytes[i];\r\n        }\r\n        for(uint j = 0 ; j < v2Bytes.length; j ++){\r\n            data[j + v1Bytes.length] = v2Bytes[j];\r\n        }\r\n        return data;\r\n    }\r\n    \r\n      function toBytes(uint v1, uint v2, uint v3) private pure returns (bytes){\r\n        bytes32 v1Bytes = bytes32(v1);\r\n        bytes32 v2Bytes = bytes32(v2);\r\n        bytes32 v3Bytes = bytes32(v3);\r\n        bytes memory data = new bytes(v1Bytes.length + v2Bytes.length + v3Bytes.length);\r\n        for(uint i = 0 ; i < v1Bytes.length; i ++){\r\n            data[i] = v1Bytes[i];\r\n        }\r\n        for(uint j = 0 ; j < v2Bytes.length; j ++){\r\n            data[j + v1Bytes.length] = v2Bytes[j];\r\n        }\r\n         for(uint k = 0 ; k < v3Bytes.length; k ++){\r\n            data[k + v1Bytes.length + v2Bytes.length] = v3Bytes[k];\r\n        }\r\n        return data;\r\n    }\r\n\r\n    function doRouletteBet(bytes data, uint expiredBlockNum, bytes32 commit, bytes32 r, bytes32 s) public payable validSignAndBlock(expiredBlockNum, commit, r, s) {\r\n        uint stake = msg.value;\r\n        validRouletteBetData(data, stake);\r\n        BetData storage bet = bets[commit];\r\n        require(bet.player == address(0));\r\n        bet.gameId = TYPE_ROULETTE;\r\n        bet.betData = data;\r\n        bet.amount = stake;\r\n        bet.player = msg.sender;\r\n        bet.blockNum = block.number;\r\n        emit BetEvent(bet.gameId, commit, data,false);\r\n    }\r\n\r\n    function validRouletteBetData(bytes data, uint amount) pure private {\r\n        uint length = uint8(data[0]);\r\n        require(data.length == length * 2 + 1);\r\n        uint total = 0;\r\n        for (uint i = 0; i < length; i ++) {\r\n            total += uint8(data[2 + i * 2]);\r\n        }\r\n        require(total * ROULETTE_BASE_STAKE == amount);\r\n    }\r\n\r\n    function doResult(uint value, bytes32 blockHash, bytes32 betTx, uint payment, uint data) public croupierOnly payable {\r\n        bytes32 commit = keccak256(abi.encodePacked(value));\r\n        BetData storage bet = bets[commit];\r\n        require(blockhash(bet.blockNum) == blockHash);\r\n        if (bet.gameId == TYPE_ROLL) {\r\n            doRollResult(value, bet, betTx);\r\n        } else if (bet.gameId == TYPE_ROULETTE) {\r\n            doRouletteResult(value, bet, betTx, payment);\r\n        }else if (bet.gameId == TYPE_SANGOKUSHI) {\r\n            doSangokushiResult(value, bet, betTx);\r\n        }else if (bet.gameId == TYPE_BASKETBALL){\r\n            doBasketballResult(value, bet, betTx, payment, data);\r\n        }else if(bet.gameId == TYPE_SLOT_30){\r\n            doSlot30Result(value, bet, betTx, payment, data);\r\n        }else if(bet.gameId == TYPE_GRID_10){\r\n            doGrid10Result(value, bet, betTx, payment, data);\r\n        }\r\n    }\r\n    \r\n    function doGrid10Result(uint value, BetData bet, bytes32 betTx, uint payment, uint data) private croupierOnly {\r\n        if(bet.player.send(payment)){\r\n            emit Grid10Payment(bet.player, bet.gameId, payment, value, data, bet.amount, betTx);\r\n        } else {\r\n            emit PaymentFail(bet.player, payment);\r\n        }\r\n    }\r\n    \r\n     function doSlot30Result(uint value, BetData bet, bytes32 betTx, uint payment, uint data) private croupierOnly {\r\n        if(bet.player.send(payment)){\r\n            emit Slot30Payment(bet.player, bet.gameId, payment, value, data, bet.amount, betTx);\r\n        } else {\r\n            emit PaymentFail(bet.player, payment);\r\n        }\r\n    }\r\n\r\n    function doBasketballResult(uint value, BetData bet, bytes32 betTx, uint payment, uint data) private croupierOnly {\r\n        if(bet.player.send(payment)){\r\n            emit BasketballPayment(bet.player, bet.gameId, payment, value, data, bet.amount, betTx);\r\n        } else {\r\n            emit PaymentFail(bet.player, payment);\r\n        }\r\n    }\r\n\r\n    function doSangokushiResult(uint value, BetData bet, bytes32 betTx) private croupierOnly {\r\n        uint result = value % 3;\r\n        bool win = false;\r\n        uint betValue = bet.value;\r\n        uint tmp = 0;\r\n        if(bet.mode == 0){\r\n            tmp = (result + 1) % 3;\r\n            win = betValue != tmp;\r\n        }else if(bet.mode == 1){\r\n            tmp = (result + 2) % 3;\r\n            win = betValue == tmp;\r\n        }\r\n        uint payAmount = win ? bet.possiblePayout : 0;\r\n        if (bet.player.send(payAmount)) {\r\n            emit SangokushiPayment(bet.player, bet.gameId, bet.mode, payAmount, value, result, bet.amount, bet.value, betTx);\r\n        } else {\r\n            emit PaymentFail(bet.player, payAmount);\r\n        }\r\n    }\r\n\r\n    function doRollResult(uint value, BetData bet, bytes32 betTx) private croupierOnly {\r\n        uint result = (value % ROLL_MAX_MOD) + 1;\r\n        uint payAmount = result > bet.value ? 0 : bet.possiblePayout;\r\n        uint currentJackpotAmount = jackpotAmount;\r\n        bool hitJackpot =isHitJackpopot(bet, value);\r\n        if(hitJackpot){\r\n            payAmount += jackpotAmount;\r\n            jackpotAmount = 0;\r\n        }\r\n        if (bet.player.send(payAmount)) {\r\n            emit RollPayment(bet.player, bet.gameId, payAmount, value, result, bet.amount, bet.value, currentJackpotAmount, betTx);\r\n        } else {\r\n            emit PaymentFail(bet.player, payAmount);\r\n        }\r\n    }\r\n\r\n    function doRouletteResult(uint value, BetData bet, bytes32 betTx, uint paymentMutiplier) private croupierOnly {\r\n        uint result = value % ROULETTE_MAX_MOD;\r\n        uint payAmount = ROULETTE_BASE_STAKE * paymentMutiplier;\r\n        if (bet.player.send(payAmount)) {\r\n            emit RoulettePayment(bet.player, bet.gameId, payAmount, value, result, bet.amount, betTx, bet.betData);\r\n        } else {\r\n            emit PaymentFail(bet.player, payAmount);\r\n        }\r\n    }\r\n\r\n    function isHitJackpopot( BetData bet, uint value) private pure returns(bool){\r\n        return bet.triggerJackpot &&  value % JACKPOT_MOD == JACKPOT_NUM;\r\n    }\r\n\r\n    function() public payable {\r\n    }\r\n\r\n    function withdraw(address add, uint amount) ownerOnly payable public {\r\n        add.transfer(amount);\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"stakePerLine\",\"type\":\"uint256\"},{\"name\":\"lineCount\",\"type\":\"uint256\"},{\"name\":\"expiredBlockNum\",\"type\":\"uint256\"},{\"name\":\"commit\",\"type\":\"bytes32\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"doGrid10\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"JACKPOT_NUM\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"name\":\"betTx\",\"type\":\"bytes32\"},{\"name\":\"payment\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"doResult\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"croupier\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"c\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"data\",\"type\":\"bytes\"},{\"name\":\"expiredBlockNum\",\"type\":\"uint256\"},{\"name\":\"commit\",\"type\":\"bytes32\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"doRouletteBet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"expiredBlockNum\",\"type\":\"uint256\"},{\"name\":\"commit\",\"type\":\"bytes32\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"doRollBet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mode\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"expiredBlockNum\",\"type\":\"uint256\"},{\"name\":\"commit\",\"type\":\"bytes32\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"doSangokushiBet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"expiredBlockNum\",\"type\":\"uint256\"},{\"name\":\"commit\",\"type\":\"bytes32\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"doBasketball\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getJackpotAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stakePerLine\",\"type\":\"uint256\"},{\"name\":\"lineCount\",\"type\":\"uint256\"},{\"name\":\"expiredBlockNum\",\"type\":\"uint256\"},{\"name\":\"commit\",\"type\":\"bytes32\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"doSlot30\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"add\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"c\",\"type\":\"address\"}],\"name\":\"setCroupier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gamdId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"commit\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"triggerJackpot\",\"type\":\"bool\"}],\"name\":\"BetEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"payAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"betAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"betValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"jackpotAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"betTx\",\"type\":\"bytes32\"}],\"name\":\"RollPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"payAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"betAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"betTx\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"betData\",\"type\":\"bytes\"}],\"name\":\"RoulettePayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"mode\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"payAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"betAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"betValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"betTx\",\"type\":\"bytes32\"}],\"name\":\"SangokushiPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"payAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"betAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"betTx\",\"type\":\"bytes32\"}],\"name\":\"BasketballPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"payAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"betAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"betTx\",\"type\":\"bytes32\"}],\"name\":\"Slot30Payment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"payAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"betAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"betTx\",\"type\":\"bytes32\"}],\"name\":\"Grid10Payment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentFail\",\"type\":\"event\"}]","ContractName":"WaRoll","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://5c66a30a8f4c66a575d73a303ffbeb98b2261840e08e88f377807b26c07f9522"}]}