{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2019-09-18\r\n*/\r\n\r\npragma solidity 0.5.11;\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address payable public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address payable newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract ERC20BasicInterface {\r\n    function totalSupply() public view returns (uint256);\r\n\r\n    function balanceOf(address who) public view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    uint8 public decimals;\r\n}\r\n\r\ncontract WisePass is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n    \r\n    address[] arrToken;\r\n    \r\n    uint256 public Percen = 1000;\r\n    // Fee percent commission take\r\n    uint public commissionRatio = 100;\r\n    address public ethAddress = address(0x0000000000000000000000000000000000000000);\r\n    address payable public commissionAddress = address(0x326C12A55df2c4b1C2783D29F3B4f6Ab74c3A1be);\r\n    address payable public ceoAddress = address(0xD4a520a0448FC3FF493f115c6a369bACb46bE959);\r\n\r\n    struct Transaction {\r\n        address payable PayAddress;\r\n        address tokenAddress;\r\n        uint256 amount;\r\n        uint timeTrackBuy;\r\n        uint256 Percent_Comission;\r\n    }\r\n\r\n    struct Buyer {\r\n        string Email;\r\n        Transaction[] TxList;\r\n    }\r\n    \r\n    mapping(string => Buyer) Buyers;\r\n\r\n    constructor() public {\r\n         arrToken = [\r\n          0x039B5649A59967e3e936D7471f9c3700100Ee1ab,\r\n          0xb3104b4B9Da82025E8b9F8Fb28b3553ce2f67069,\r\n          0xA849EaaE994fb86Afa73382e9Bd88c2B6b18Dc71,\r\n          0x77761e63C05aeE6648FDaeaa9B94248351AF9bCd\r\n         ];\r\n    }\r\n    \r\n    modifier onlyCeoAddress() {\r\n        require(msg.sender == ceoAddress);\r\n        _;\r\n    }\r\n    \r\n    function listToken() public view returns(address[] memory _arrToken){\r\n        address[]memory tokenList = arrToken;\r\n        return tokenList;\r\n    }\r\n    \r\n    function getTxsInfo(string memory email,uint idxTxs) public view returns(address payAddress,\r\n        address tokenAddress,\r\n        uint256 amount,\r\n        uint timeTrackBuy,uint256 Percent_Commission){\r\n        Transaction memory _transaction = Buyers[email].TxList[idxTxs];\r\n            \r\n        return (_transaction.PayAddress,_transaction.tokenAddress,_transaction.amount,_transaction.timeTrackBuy,_transaction.Percent_Comission);\r\n    }\r\n    \r\n    function getCountTxs(string memory email) public view returns(uint countTxs){\r\n        return Buyers[email].TxList.length;\r\n    }\r\n    \r\n    function getLatest(string memory email) public view returns(address payAddress,\r\n        address tokenAddress,\r\n        uint256 amount,\r\n        uint timeTrackBuy,uint256 Percent_Commission){\r\n        Transaction memory _transaction = Buyers[email].TxList[Buyers[email].TxList.length-1];\r\n            \r\n        return (_transaction.PayAddress,_transaction.tokenAddress,_transaction.amount,_transaction.timeTrackBuy,_transaction.Percent_Comission);\r\n    }\r\n\r\n    function addToken(address tokenAddress) public{\r\n        bool flag = false;\r\n        for(uint i = 0; i< arrToken.length; i++) {\r\n            if(arrToken[i] == tokenAddress) flag = true;\r\n        }\r\n        if(!flag) arrToken.push(tokenAddress);\r\n    }\r\n    \r\n    function removeToken(address tokenAddress) public {\r\n        for(uint i = 0; i< arrToken.length; i++) {\r\n            if(arrToken[i] == tokenAddress){\r\n                delete arrToken[i];\r\n                arrToken.length--;\r\n            }\r\n        }\r\n    }\r\n\r\n    function buy(string memory email) payable public {\r\n        require(msg.value>0);\r\n        \r\n        // Send comission\r\n        uint256 comissionBalance = msg.value.mul(commissionRatio).div(Percen);\r\n        address payable _comissionAddress= commissionAddress;\r\n        \r\n        _comissionAddress.transfer(comissionBalance);\r\n        \r\n        Transaction memory txsData =Transaction(msg.sender,ethAddress,msg.value,block.timestamp,comissionBalance);\r\n        Buyers[email].TxList.push(txsData);\r\n    }\r\n    \r\n   function buyByToken(string memory email,address tokenAddress,uint256 price) public {\r\n        require(isValidToken(tokenAddress));\r\n        ERC20BasicInterface tokenPay = ERC20BasicInterface(tokenAddress);\r\n        require(tokenPay.transferFrom(msg.sender, address(this), price));\r\n        \r\n        // Send comission\r\n        uint256 comissionBalance = price.mul(commissionRatio).div(Percen);\r\n        tokenPay.transfer(commissionAddress, comissionBalance);\r\n        \r\n        Transaction memory txsData =Transaction(msg.sender,tokenAddress,price,block.timestamp,comissionBalance);\r\n        Buyers[email].TxList.push(txsData);\r\n    }\r\n    \r\n    function isValidToken(address tokenAddress) public view returns (bool){\r\n        bool flag = false;\r\n        for(uint i = 0; i< arrToken.length; i++) {\r\n            if(arrToken[i] == tokenAddress) flag = true;\r\n        }\r\n        return flag;\r\n    }\r\n    \r\n    function changeComissionAddress(address payable _address) public onlyCeoAddress {\r\n        require(_address != address(0));\r\n        commissionAddress = _address;\r\n    }\r\n    \r\n    function withdrawETH() public onlyCeoAddress{\r\n        owner.transfer(address(this).balance);\r\n    }\r\n    \r\n    function changeComissionRatio(uint _comissionRatio) onlyOwner public{\r\n        commissionRatio = _comissionRatio;\r\n    }\r\n\r\n    function withdraw(ERC20BasicInterface[] memory tokens, uint256[] memory amounts) public onlyCeoAddress{\r\n        for(uint i = 0; i< tokens.length; i++) {\r\n            tokens[i].transfer(owner, amounts[i]);\r\n        }\r\n    }\r\n\r\n    function changeCeo(address payable _address) public onlyCeoAddress {\r\n        require(_address != address(0));\r\n        ceoAddress = _address;\r\n    }\r\n    \r\n\t// can accept ether\r\n\tfunction() external payable {\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"listToken\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_arrToken\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"buyByToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"removeToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Percen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"idxTxs\",\"type\":\"uint256\"}],\"name\":\"getTxsInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"payAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeTrackBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Percent_Commission\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commissionAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"}],\"name\":\"getCountTxs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"countTxs\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commissionRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"changeComissionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"isValidToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_comissionRatio\",\"type\":\"uint256\"}],\"name\":\"changeComissionRatio\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"changeCeo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"}],\"name\":\"getLatest\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"payAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeTrackBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Percent_Commission\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ERC20BasicInterface[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"WisePass","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://92c2629047786519422b4258983c862f82a38cf8e039e0b1830e2545b83cf842"}]}