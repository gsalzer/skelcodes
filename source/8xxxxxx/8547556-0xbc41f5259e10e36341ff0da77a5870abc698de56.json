{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/SafeMath.sol\r\n\r\n/**\r\n* MIT License\r\n*\r\n* Copyright (c) 2016-2019 zOS Global Limited\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in all\r\n* copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\npragma solidity 0.5.10;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n// File: contracts/IERC20.sol\r\n\r\n/**\r\n* MIT License\r\n*\r\n* Copyright (c) 2016-2019 zOS Global Limited\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in all\r\n* copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\npragma solidity 0.5.10;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/ERC20.sol\r\n\r\n/**\r\n* MIT License\r\n*\r\n* Copyright (c) 2016-2019 zOS Global Limited\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in all\r\n* copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\npragma solidity 0.5.10;\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the `IERC20` interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using `_mint`.\r\n * For a generic mechanism see `ERC20Mintable`.\r\n *\r\n * *For a detailed writeup see our guide [How to implement supply\r\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See `IERC20.approve`.\r\n */\r\n\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See `IERC20.totalSupply`.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.balanceOf`.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transfer`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.allowance`.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.approve`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transferFrom`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of `ERC20`;\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `value`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to `transfer`, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a `Transfer` event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n     /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a `Transfer` event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an `Approval` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See `_burn` and `_approve`.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\r\n    }\r\n}\r\n\r\n// File: contracts/ERC20Claimable.sol\r\n\r\n/**\r\n* MIT License with Automated License Fee Payments\r\n*\r\n* Copyright (c) 2019 Equility AG (alethena.com)\r\n*\r\n* Permission is hereby granted to any person obtaining a copy of this software\r\n* and associated documentation files (the \"Software\"), to deal in the Software\r\n* without restriction, including without limitation the rights to use, copy,\r\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n* Software, and to permit persons to whom the Software is furnished to do so,\r\n* subject to the following conditions:\r\n*\r\n* - The above copyright notice and this permission notice shall be included in\r\n*   all copies or substantial portions of the Software.\r\n* - All automated license fee payments integrated into this and related Software\r\n*   are preserved.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\npragma solidity 0.5.10;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Claimable\r\n * In case of tokens that represent real-world assets such as shares of a company, one needs a way\r\n * to handle lost private keys. With physical certificates, courts can declare share certificates as\r\n * invalid so the company can issue replacements. Here, we want a solution that does not depend on\r\n * third parties to resolve such cases. Instead, when someone has lost a private key, he can use the\r\n * declareLost function to post a deposit and claim that the shares assigned to a specific address are\r\n * lost. To prevent front running, a commit reveal scheme is used. If he actually is the owner of the shares,\r\n * he needs to wait for a certain period and can then reclaim the lost shares as well as the deposit.\r\n * If he is an attacker trying to claim shares belonging to someone else, he risks losing the deposit\r\n * as it can be claimed at anytime by the rightful owner.\r\n * Furthermore, if \"getClaimDeleter\" is defined in the subclass, the returned address is allowed to\r\n * delete claims, returning the collateral. This can help to prevent obvious cases of abuse of the claim\r\n * function.\r\n */\r\n\r\ncontract ERC20Claimable is ERC20 {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeMath for uint32;\r\n\r\n    // A struct that represents a claim made\r\n    struct Claim {\r\n        address claimant; // the person who created the claim\r\n        uint256 collateral; // the amount of collateral deposited\r\n        uint32 timestamp;  // the timestamp of the block in which the claim was made\r\n        address currencyUsed; // The currency (XCHF) can be updated, we record the currency used for every request\r\n    }\r\n\r\n    // Every claim must be preceded by an obscured preclaim in order to prevent front-running\r\n    struct PreClaim {\r\n        bytes32 msghash; // the hash of nonce + address to be claimed\r\n        uint256 timestamp;  // the timestamp of the block in which the preclaim was made\r\n    }\r\n\r\n    uint256 public claimPeriod = 180 days; // Default of 180 days;\r\n    uint256 public preClaimPeriod = 1 days; // One day. Minimum waiting period between preClaim and Claim;\r\n    uint256 public preClaimPeriodEnd = 2 days; // Two days. Maximum waiting period between preClaim and Claim;\r\n\r\n    mapping(address => Claim) public claims; // there can be at most one claim per address, here address is claimed address\r\n    mapping(address => PreClaim) public preClaims; // there can be at most one preclaim per address, here address is claimer\r\n    mapping(address => bool) public claimingDisabled; // disable claimability (e.g. for long term storage)\r\n\r\n    // ERC-20 token that can be used as collateral or 0x0 if disabled\r\n    address public customCollateralAddress;\r\n    uint256 public customCollateralRate;\r\n\r\n    /**\r\n     * Returns the collateral rate for the given collateral type and 0 if that type\r\n     * of collateral is not accepted. By default, only the token itself is accepted at\r\n     * a rate of 1:1.\r\n     *\r\n     * Subclasses should override this method if they want to add additional types of\r\n     * collateral.\r\n     */\r\n    function getCollateralRate(address collateralType) public view returns (uint256) {\r\n        if (collateralType == address(this)) {\r\n            return 1;\r\n        } else if (collateralType == customCollateralAddress) {\r\n            return customCollateralRate;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Allows subclasses to set a custom collateral besides the token itself.\r\n     * The collateral must be an ERC-20 token that returns true on successful transfers and\r\n     * throws an exception or returns false on failure.\r\n     * Also, do not forget to multiply the rate in accordance with the number of decimals of the collateral.\r\n     * For example, rate should be 7*10**18 for 7 units of a collateral with 18 decimals.\r\n     */\r\n    function _setCustomClaimCollateral(address collateral, uint256 rate) internal {\r\n        customCollateralAddress = collateral;\r\n        if (customCollateralAddress == address(0)) {\r\n            customCollateralRate = 0; // disabled\r\n        } else {\r\n            require(rate > 0, \"Collateral rate can't be zero\");\r\n            customCollateralRate = rate;\r\n        }\r\n        emit CustomClaimCollateralChanged(collateral, rate);\r\n    }\r\n\r\n    function getClaimDeleter() public returns (address);\r\n\r\n    /**\r\n     * Allows subclasses to change the claim period, but not to fewer than 90 days.\r\n     */\r\n    function _setClaimPeriod(uint256 claimPeriodInDays) internal {\r\n        require(claimPeriodInDays > 90, \"Claim period must be at least 90 days\"); // must be at least 90 days\r\n        uint256 claimPeriodInSeconds = claimPeriodInDays.mul(1 days);\r\n        claimPeriod = claimPeriodInSeconds;\r\n        emit ClaimPeriodChanged(claimPeriod);\r\n    }\r\n\r\n    function setClaimable(bool enabled) public {\r\n        claimingDisabled[msg.sender] = !enabled;\r\n    }\r\n\r\n    /**\r\n     * Some users might want to disable claims for their address completely.\r\n     * For example if they use a deep cold storage solution or paper wallet.\r\n     */\r\n    function isClaimsEnabled(address target) public view returns (bool) {\r\n        return !claimingDisabled[target];\r\n    }\r\n\r\n    event ClaimMade(address indexed lostAddress, address indexed claimant, uint256 balance);\r\n    event ClaimPrepared(address indexed claimer);\r\n    event ClaimCleared(address indexed lostAddress, uint256 collateral);\r\n    event ClaimDeleted(address indexed lostAddress, address indexed claimant, uint256 collateral);\r\n    event ClaimResolved(address indexed lostAddress, address indexed claimant, uint256 collateral);\r\n    event ClaimPeriodChanged(uint256 newClaimPeriodInDays);\r\n    event CustomClaimCollateralChanged(address newCustomCollateralAddress, uint256 newCustomCollareralRate);\r\n\r\n  /** Anyone can declare that the private key to a certain address was lost by calling declareLost\r\n    * providing a deposit/collateral. There are three possibilities of what can happen with the claim:\r\n    * 1) The claim period expires and the claimant can get the deposit and the shares back by calling resolveClaim\r\n    * 2) The \"lost\" private key is used at any time to call clearClaim. In that case, the claim is deleted and\r\n    *    the deposit sent to the shareholder (the owner of the private key). It is recommended to call resolveClaim\r\n    *    whenever someone transfers funds to let claims be resolved automatically when the \"lost\" private key is\r\n    *    used again.\r\n    * 3) The owner deletes the claim and assigns the deposit to the claimant. This is intended to be used to resolve\r\n    *    disputes. Generally, using this function implies that you have to trust the issuer of the tokens to handle\r\n    *    the situation well. As a rule of thumb, the contract owner should assume the owner of the lost address to be the\r\n    *    rightful owner of the deposit.\r\n    * It is highly recommended that the owner observes the claims made and informs the owners of the claimed addresses\r\n    * whenever a claim is made for their address (this of course is only possible if they are known to the owner, e.g.\r\n    * through a shareholder register).\r\n    * To prevent frontrunning attacks, a claim can only be made if the information revealed when calling \"declareLost\"\r\n    * was previously commited using the \"prepareClaim\" function.\r\n    */\r\n    function prepareClaim(bytes32 hashedpackage) public {\r\n        preClaims[msg.sender] = PreClaim({\r\n            msghash: hashedpackage,\r\n            timestamp: block.timestamp\r\n        });\r\n        emit ClaimPrepared(msg.sender);\r\n    }\r\n\r\n    function validateClaim(address lostAddress, bytes32 nonce) private view {\r\n        PreClaim memory preClaim = preClaims[msg.sender];\r\n        require(preClaim.msghash != 0, \"Message hash can't be zero\");\r\n        require(preClaim.timestamp.add(preClaimPeriod) <= block.timestamp, \"Preclaim period violated. Claimed too early\");\r\n        require(preClaim.timestamp.add(preClaimPeriodEnd) >= block.timestamp, \"Preclaim period end. Claimed too late\");\r\n        require(preClaim.msghash == keccak256(abi.encodePacked(nonce, msg.sender, lostAddress)),\"Package could not be validated\");\r\n    }\r\n\r\n    function declareLost(address collateralType, address lostAddress, bytes32 nonce) public {\r\n        require(lostAddress != address(0), \"Can't claim zero address\");\r\n        require(isClaimsEnabled(lostAddress), \"Claims disabled for this address\");\r\n        uint256 collateralRate = getCollateralRate(collateralType);\r\n        require(collateralRate > 0, \"Unsupported collateral type\");\r\n        address claimant = msg.sender;\r\n        uint256 balance = balanceOf(lostAddress);\r\n        uint256 collateral = balance.mul(collateralRate);\r\n        IERC20 currency = IERC20(collateralType);\r\n        require(balance > 0, \"Claimed address holds no shares\");\r\n        require(currency.allowance(claimant, address(this)) >= collateral, \"Currency allowance insufficient\");\r\n        require(currency.balanceOf(claimant) >= collateral, \"Currency balance insufficient\");\r\n        require(claims[lostAddress].collateral == 0, \"Address already claimed\");\r\n        validateClaim(lostAddress, nonce);\r\n        require(currency.transferFrom(claimant, address(this), collateral), \"Collateral transfer failed\");\r\n\r\n        claims[lostAddress] = Claim({\r\n            claimant: claimant,\r\n            collateral: collateral,\r\n            timestamp: uint32(block.timestamp), // block timestamp is in seconds --> Should not overflow\r\n            currencyUsed: collateralType\r\n        });\r\n\r\n        delete preClaims[claimant];\r\n        emit ClaimMade(lostAddress, claimant, balance);\r\n    }\r\n\r\n    function getClaimant(address lostAddress) public view returns (address) {\r\n        return claims[lostAddress].claimant;\r\n    }\r\n\r\n    function getCollateral(address lostAddress) public view returns (uint256) {\r\n        return claims[lostAddress].collateral;\r\n    }\r\n\r\n    function getCollateralType(address lostAddress) public view returns (address) {\r\n        return claims[lostAddress].currencyUsed;\r\n    }\r\n\r\n    function getTimeStamp(address lostAddress) public view returns (uint256) {\r\n        return claims[lostAddress].timestamp;\r\n    }\r\n\r\n    function getPreClaimTimeStamp(address claimerAddress) public view returns (uint256) {\r\n        return preClaims[claimerAddress].timestamp;\r\n    }\r\n\r\n    function getMsgHash(address claimerAddress) public view returns (bytes32) {\r\n        return preClaims[claimerAddress].msghash;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        require(super.transfer(recipient, amount), \"Transfer failed\");\r\n        clearClaim();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Clears a claim after the key has been found again and assigns the collateral to the \"lost\" address.\r\n     * This is the price an adverse claimer pays for filing a false claim and makes it risky to do so.\r\n     */\r\n    function clearClaim() public {\r\n        if (claims[msg.sender].collateral != 0) {\r\n            uint256 collateral = claims[msg.sender].collateral;\r\n            IERC20 currency = IERC20(claims[msg.sender].currencyUsed);\r\n            delete claims[msg.sender];\r\n            require(currency.transfer(msg.sender, collateral), \"Collateral transfer failed\");\r\n            emit ClaimCleared(msg.sender, collateral);\r\n        }\r\n    }\r\n\r\n   /**\r\n    * After the claim period has passed, the claimant can call this function to send the\r\n    * tokens on the lost address as well as the collateral to himself.\r\n    */\r\n    function resolveClaim(address lostAddress) public {\r\n        Claim memory claim = claims[lostAddress];\r\n        uint256 collateral = claim.collateral;\r\n        IERC20 currency = IERC20(claim.currencyUsed);\r\n        require(collateral != 0, \"No claim found\");\r\n        require(claim.claimant == msg.sender, \"Only claimant can resolve claim\");\r\n        require(claim.timestamp.add(uint32(claimPeriod)) <= block.timestamp, \"Claim period not over yet\");\r\n        address claimant = claim.claimant;\r\n        delete claims[lostAddress];\r\n        require(currency.transfer(claimant, collateral), \"Collateral transfer failed\");\r\n        _transfer(lostAddress, claimant, balanceOf(lostAddress));\r\n        emit ClaimResolved(lostAddress, claimant, collateral);\r\n    }\r\n\r\n    /**\r\n     * This function is to be executed by the owner only in case a dispute needs to be resolved manually.\r\n     */\r\n    function deleteClaim(address lostAddress) public {\r\n        require(msg.sender == getClaimDeleter(), \"You cannot delete claims\");\r\n        Claim memory claim = claims[lostAddress];\r\n        IERC20 currency = IERC20(claim.currencyUsed);\r\n        require(claim.collateral != 0, \"No claim found\");\r\n        delete claims[lostAddress];\r\n        require(currency.transfer(claim.claimant, claim.collateral), \"Collateral transfer failed\");\r\n        emit ClaimDeleted(lostAddress, claim.claimant, claim.collateral);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/Ownable.sol\r\n\r\n/**\r\n* MIT License\r\n*\r\n* Copyright (c) 2016-2019 zOS Global Limited\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in all\r\n* copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\npragma solidity 0.5.10;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n * A special address 'master' can transfer ownership.\r\n */\r\n\r\ncontract Ownable {\r\n\r\n    address public owner;\r\n    address constant master = 0x1B5aeD8cC7B7b8f02De451f7Cda5292D629C045F;\r\n\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original 'owner' of the contract to the sender\r\n   * account.\r\n   */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"You are not the owner of this contract\");\r\n        _;\r\n    }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(owner);\r\n        owner = address(0);\r\n    }\r\n\r\n  /**\r\n   * @dev Allows the master to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n    function transferOwnership(address _newOwner) public {\r\n        require(msg.sender == master, \"You are not the master of this contract\");\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n    function _transferOwnership(address _newOwner) internal {\r\n        require(_newOwner != address(0), \"Zero address can't own the contract\");\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/Pausable.sol\r\n\r\n/**\r\n* MIT License\r\n*\r\n* Copyright (c) 2016-2019 zOS Global Limited\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in all\r\n* copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\npragma solidity 0.5.10;\r\n\r\n\r\ncontract Pausable is Ownable {\r\n\r\n    /** This contract is pausable.  */\r\n    bool public paused = false;\r\n\r\n    /** @dev Function to set pause.\r\n     * This could for example be used in case of a fork of the network, in which case all\r\n     * \"wrong\" forked contracts should be paused in their respective fork. Deciding which\r\n     * fork is the \"right\" one is up to the owner of the contract.\r\n     */\r\n    function pause(bool _pause, string calldata _message, address _newAddress, uint256 _fromBlock) external onlyOwner() {\r\n        paused = _pause;\r\n        emit Pause(_pause, _message, _newAddress, _fromBlock);\r\n    }\r\n\r\n    event Pause(bool paused, string message, address newAddress, uint256 fromBlock);\r\n}\r\n\r\n// File: contracts/ServiceHunterShares.sol\r\n\r\n/**\r\n* MIT License with Automated License Fee Payments\r\n*\r\n* Copyright (c) 2019 Equility AG (alethena.com)\r\n*\r\n* Permission is hereby granted to any person obtaining a copy of this software\r\n* and associated documentation files (the \"Software\"), to deal in the Software\r\n* without restriction, including without limitation the rights to use, copy,\r\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n* Software, and to permit persons to whom the Software is furnished to do so,\r\n* subject to the following conditions:\r\n*\r\n* - The above copyright notice and this permission notice shall be included in\r\n*   all copies or substantial portions of the Software.\r\n* - All automated license fee payments integrated into this and related Software\r\n*   are preserved.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\npragma solidity 0.5.10;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ServiceHunter AG Shares\r\n * @author Benjamin Rickenbacher, benjamin@alethena.com\r\n * @author Luzius Meisser, luzius@meissereconomics.com\r\n * @dev These tokens are based on the ERC20 standard and the open-zeppelin library.\r\n *\r\n * These tokens are uncertified shares (Wertrechte according to the Swiss code of obligations),\r\n * with this smart contract serving as onwership registry (Wertrechtebuch), but not as shareholder\r\n * registry, which is kept separate and run by the company. This is equivalent to the traditional system\r\n * of having physical share certificates kept at home by the shareholders and a shareholder registry run by\r\n * the company. Just like with physical certificates, the owners of the tokens are the owners of the shares.\r\n * However, in order to exercise their rights (for example receive a dividend), shareholders must register\r\n * with the company. For example, in case the company pays out a dividend to a previous shareholder because\r\n * the current shareholder did not register, the company cannot be held liable for paying the dividend to\r\n * the \"wrong\" shareholder. In relation to the company, only the registered shareholders count as such.\r\n * Registration requires setting up an account with ledgy.com providing your name and address and proving\r\n * ownership over your addresses.\r\n * @notice The main addition is a functionality that allows the user to claim that the key for a certain address is lost.\r\n * @notice In order to prevent malicious attempts, a collateral needs to be posted.\r\n * @notice The contract owner can delete claims in case of disputes.\r\n *\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\n\r\ncontract ServiceHunterShares is ERC20Claimable, Pausable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    string public constant symbol = \"SHS\";\r\n    string public constant name = \"ServiceHunter AG Shares\";\r\n    string public constant terms = \"quitt.ch/investoren\";\r\n\r\n    uint8 public constant decimals = 0; // legally, shares are not divisible\r\n\r\n    uint256 public totalShares = 15647; // total number of shares, maybe not all tokenized\r\n    uint256 public invalidTokens = 0;\r\n\r\n    address[] public subregisters;\r\n\r\n    event Announcement(string message);\r\n    event TokensDeclaredInvalid(address holder, uint256 amount, string message);\r\n    event ShareNumberingEvent(address holder, uint256 firstInclusive, uint256 lastInclusive);\r\n    event SubRegisterAdded(address contractAddress);\r\n    event SubRegisterRemoved(address contractAddress);\r\n\r\n    /**\r\n     * Declares the number of total shares, including those that have not been tokenized and those\r\n     * that are held by the company itself. This number can be substiantially higher than totalSupply()\r\n     * in case not all shares have been tokenized. Also, it can be lower than totalSupply() in case some\r\n     * tokens have become invalid.\r\n     */\r\n    function setTotalShares(uint256 _newTotalShares) public onlyOwner() {\r\n        require(_newTotalShares >= totalValidSupply(), \"There can't be fewer tokens than shares\");\r\n        totalShares = _newTotalShares;\r\n    }\r\n\r\n    /**\r\n     * Under some use-cases, tokens are held by smart contracts that are ERC20 contracts themselves.\r\n     * A popular example are Uniswap contracts that hold traded coins and that are owned by various\r\n     * liquidity providers. For such cases, having a list of recognized such subregisters might\r\n     * be helpful with the automated registration and tracking of shareholders.\r\n     * We assume that the number of sub registers stays limited, such that they are safe to iterate.\r\n     * Subregisters should always have the same number of decimals as the main register.\r\n     * To add subregisters with a different number of decimals, adapter contracts are needed.\r\n     */\r\n    function recognizeSubRegister(address contractAddress) public onlyOwner () {\r\n        subregisters.push(contractAddress);\r\n        emit SubRegisterAdded(contractAddress);\r\n    }\r\n\r\n    function removeSubRegister(address contractAddress) public onlyOwner() {\r\n        for (uint256 i = 0; i<subregisters.length; i++) {\r\n            if (subregisters[i] == contractAddress) {\r\n                subregisters[i] = subregisters[subregisters.length - 1];\r\n                subregisters.pop();\r\n                emit SubRegisterRemoved(contractAddress);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * A deep balanceOf operator that also considers indirectly held tokens in\r\n     * recognized sub registers.\r\n     */\r\n    function balanceOfDeep(address holder) public view returns (uint256) {\r\n        uint256 balance = balanceOf(holder);\r\n        for (uint256 i = 0; i<subregisters.length; i++) {\r\n            IERC20 subERC = IERC20(subregisters[i]);\r\n            balance = balance.add(subERC.balanceOf(holder));\r\n        }\r\n        return balance;\r\n    }\r\n\r\n    /**\r\n     * Allows the issuer to make public announcements that are visible on the blockchain.\r\n     */\r\n    function announcement(string calldata message) external onlyOwner() {\r\n        emit Announcement(message);\r\n    }\r\n\r\n    function setClaimPeriod(uint256 claimPeriodInDays) public onlyOwner() {\r\n        super._setClaimPeriod(claimPeriodInDays);\r\n    }\r\n\r\n    /**\r\n     * See parent method for collateral requirements.\r\n     */\r\n    function setCustomClaimCollateral(address collateral, uint256 rate) public onlyOwner() {\r\n        super._setCustomClaimCollateral(collateral, rate);\r\n    }\r\n\r\n    function getClaimDeleter() public returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * Signals that the indicated tokens have been declared invalid (e.g. by a court ruling in accordance\r\n     * with article 973g of the planned adjustments to the Swiss Code of Obligations) and got detached from\r\n     * the underlying shares. Invalid tokens do not carry any shareholder rights any more.\r\n     */\r\n    function declareInvalid(address holder, uint256 amount, string calldata message) external onlyOwner() {\r\n        uint256 holderBalance = balanceOf(holder);\r\n        require(amount <= holderBalance, \"Cannot invalidate more tokens than held by address\");\r\n        invalidTokens = invalidTokens.add(amount);\r\n        emit TokensDeclaredInvalid(holder, amount, message);\r\n    }\r\n\r\n    /**\r\n     * The total number of valid tokens in circulation. In case some tokens have been declared invalid, this\r\n     * number might be lower than totalSupply(). Also, it will always be lower than or equal to totalShares().\r\n     */\r\n    function totalValidSupply() public view returns (uint256) {\r\n        return totalSupply().sub(invalidTokens);\r\n    }\r\n\r\n    /**\r\n     * Allows the company to tokenize shares. If these shares are newly created, setTotalShares must be\r\n     * called first in order to adjust the total number of shares.\r\n     */\r\n    function mint(address shareholder, uint256 _amount) public onlyOwner() {\r\n        require(totalValidSupply().add(_amount) <= totalShares, \"There can't be fewer shares than valid tokens\");\r\n        _mint(shareholder, _amount);\r\n    }\r\n\r\n    /**\r\n     * Some companies like to number their shares so they can refer to them more explicitely in legal contracts.\r\n     * A minority of Swiss lawyers even believes that numbering shares is compulsory (which is not true).\r\n     * Nonetheless, this function allows to signal the numbers of freshly tokenized shares.\r\n     * In case the shares ever get de-tokenized again, this information might help in deducing their\r\n     * numbers again - although there might be some room for interpretation of what went where.\r\n     * By convention, transfers should be considered FIFO (first in, first out) and transactions in\r\n     * recognized subregisters be taken into account.\r\n     */\r\n    function mintNumbered(address shareholder, uint256 firstShareNumber, uint256 lastShareNumber) public onlyOwner() {\r\n        mint(shareholder, lastShareNumber.sub(firstShareNumber).add(1));\r\n        emit ShareNumberingEvent(shareholder, firstShareNumber, lastShareNumber);\r\n    }\r\n\r\n    /**\r\n     * Transfers _amount tokens to the company and burns them.\r\n     * The meaning of this operation depends on the circumstances and the fate of the shares does\r\n     * not necessarily follow the fate of the tokens. For example, the company itself might call\r\n     * this function to implement a formal decision to destroy some of the outstanding shares.\r\n     * Also, this function might be called by an owner to return the shares to the company and\r\n     * get them back in another form under an according agreement (e.g. printed certificates or\r\n     * tokens on a different blockchain). It is not recommended to call this function without\r\n     * having agreed with the company on the further fate of the shares in question.\r\n     */\r\n    function burn(uint256 _amount) public {\r\n        require(_amount <= balanceOf(msg.sender), \"Not enough shares available\");\r\n        _transfer(msg.sender, address(this), _amount);\r\n        _burn(address(this), _amount);\r\n    }\r\n\r\n    function _transfer(address from, address _to, uint256 _value) internal {\r\n        require(!paused, \"Contract is paused\");\r\n        super._transfer(from, _to, _value);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"customCollateralAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"removeSubRegister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lostAddress\",\"type\":\"address\"}],\"name\":\"getClaimant\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"message\",\"type\":\"string\"}],\"name\":\"announcement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"claimerAddress\",\"type\":\"address\"}],\"name\":\"getMsgHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getClaimDeleter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lostAddress\",\"type\":\"address\"}],\"name\":\"deleteClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setClaimable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"invalidTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"collateral\",\"type\":\"address\"},{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setCustomClaimCollateral\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lostAddress\",\"type\":\"address\"}],\"name\":\"getCollateralType\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"shareholder\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"preClaims\",\"outputs\":[{\"name\":\"msghash\",\"type\":\"bytes32\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"subregisters\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hashedpackage\",\"type\":\"bytes32\"}],\"name\":\"prepareClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"message\",\"type\":\"string\"}],\"name\":\"declareInvalid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"customCollateralRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"shareholder\",\"type\":\"address\"},{\"name\":\"firstShareNumber\",\"type\":\"uint256\"},{\"name\":\"lastShareNumber\",\"type\":\"uint256\"}],\"name\":\"mintNumbered\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"claimerAddress\",\"type\":\"address\"}],\"name\":\"getPreClaimTimeStamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"collateralType\",\"type\":\"address\"}],\"name\":\"getCollateralRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"claimPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preClaimPeriodEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimingDisabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lostAddress\",\"type\":\"address\"}],\"name\":\"resolveClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pause\",\"type\":\"bool\"},{\"name\":\"_message\",\"type\":\"string\"},{\"name\":\"_newAddress\",\"type\":\"address\"},{\"name\":\"_fromBlock\",\"type\":\"uint256\"}],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lostAddress\",\"type\":\"address\"}],\"name\":\"getCollateral\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"balanceOfDeep\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTotalShares\",\"type\":\"uint256\"}],\"name\":\"setTotalShares\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalValidSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claims\",\"outputs\":[{\"name\":\"claimant\",\"type\":\"address\"},{\"name\":\"collateral\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint32\"},{\"name\":\"currencyUsed\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"recognizeSubRegister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"claimPeriodInDays\",\"type\":\"uint256\"}],\"name\":\"setClaimPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"terms\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"collateralType\",\"type\":\"address\"},{\"name\":\"lostAddress\",\"type\":\"address\"},{\"name\":\"nonce\",\"type\":\"bytes32\"}],\"name\":\"declareLost\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lostAddress\",\"type\":\"address\"}],\"name\":\"getTimeStamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preClaimPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"isClaimsEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Announcement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"}],\"name\":\"TokensDeclaredInvalid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"firstInclusive\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lastInclusive\",\"type\":\"uint256\"}],\"name\":\"ShareNumberingEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"SubRegisterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"SubRegisterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"paused\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"fromBlock\",\"type\":\"uint256\"}],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"lostAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"claimant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"ClaimMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"ClaimPrepared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"lostAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"collateral\",\"type\":\"uint256\"}],\"name\":\"ClaimCleared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"lostAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"claimant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"collateral\",\"type\":\"uint256\"}],\"name\":\"ClaimDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"lostAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"claimant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"collateral\",\"type\":\"uint256\"}],\"name\":\"ClaimResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newClaimPeriodInDays\",\"type\":\"uint256\"}],\"name\":\"ClaimPeriodChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newCustomCollateralAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newCustomCollareralRate\",\"type\":\"uint256\"}],\"name\":\"CustomClaimCollateralChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ServiceHunterShares","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://fe518375150ed8aac66e2c7f5cf1e9ac74d9c7429fc8a12ed33458b056671b58"}]}