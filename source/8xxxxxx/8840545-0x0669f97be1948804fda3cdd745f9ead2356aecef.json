{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.12;\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public pendingOwner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        pendingOwner = newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == pendingOwner);\r\n        emit OwnershipTransferred(owner, pendingOwner);\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n}\r\n\r\n// Math operations with safety checks that throw on error\r\nlibrary SafeMath {\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    // Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    // Adds two numbers, throws on overflow.\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\n// ERC20 interface https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\r\ncontract TimeLib {\r\n    function getMonth(uint timestamp) public pure returns (uint month);\r\n}\r\n\r\ncontract ERC20 is IERC20, Owned {\r\n    using SafeMath for uint256;\r\n    \r\n    mapping (address => uint256) private balances;\r\n    mapping (address => mapping (address => uint256)) private allowances;\r\n    mapping (uint256 => bool) private fundF;\r\n\r\n    string public name = \"P2PGuru\";\r\n    string public symbol = \"P2PG\";\r\n    uint8 public decimals = 18;\r\n    uint256 private _totalSupply;\r\n    uint256 internal nextQuarter = 1;\r\n    \r\n    address internal A;\r\n    address internal B = 0xd85647bb4a3d9927d210E11cCB16198f676760E5;\r\n    address internal C = 0xa16989E1Da366cBD7dbA477d4d4bAE64FF5D2aC8;\r\n    address internal D = 0x0397C4cA1bA021150295A6FD211Ac5fAD4364207;\r\n    address internal E = 0x89cdae2AED91190aEFBe45F5e89D511de70Abdb4; // Guru fund\r\n    address internal F = 0x1474e84ffd20277d043eb5F71E11e20D0be9598D;\r\n    address internal G = 0xEC1558E2eEb5005e111dA667AD218b7f8De60029;\r\n    address internal H = 0x3093a574B833Bb0209cF7d3127EB2C0D529EC053;\r\n    address internal I = 0x90e20ac80483a81bbAA255a83E8eaaB08b3973Dc;\r\n    address internal J = 0x0c47528CD8dD2E1bfc87C537923DF9bEFcF5911c;\r\n    address internal K = 0x728b4e873A14c138d6632CB97d8224D941E5eA23;\r\n    address internal L = 0xf5682F93efA570236858B7Cfb6E412B916fc3A05;\r\n    address internal M = 0xAecF030FaB338950427A99Bf8639A6E286BcA8B2;\r\n\r\n    constructor() public {\r\n        _totalSupply = 268000000 * 1 ether;\r\n        balances[owner] = _totalSupply;\r\n        emit Transfer(address(0), owner, balances[owner]);\r\n        A = owner;\r\n        _transfer(A, B, 26800000 * 1 ether); // 10%\r\n        _transfer(A, C, 26800000 * 1 ether); // 10%\r\n        _transfer(A, D, 13400000 * 1 ether); // 5%\r\n        _transfer(A, E, 69680000 * 1 ether); // 26%\r\n    }\r\n    \r\n    modifier onlyGuruFund {\r\n        require(msg.sender == E);\r\n        _;\r\n    }\r\n    \r\n    modifier exceptGuruFund {\r\n        require(msg.sender != E);\r\n        _;\r\n    }\r\n    \r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return balances[account];\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint remaining) {\r\n        return allowances[owner][spender];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public exceptGuruFund returns (bool success) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n    \r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        balances[sender] = balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        balances[recipient] = balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool success) {\r\n        require(sender != address(0));\r\n        require(recipient != address(0));\r\n        require(balances[sender] >= amount);\r\n        require(allowances[sender][msg.sender] >= amount);\r\n\r\n        balances[sender] = balances[sender].sub(amount);\r\n        balances[recipient] = balances[recipient].add(amount);\r\n        allowances[sender][msg.sender] = allowances[sender][msg.sender].sub(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public exceptGuruFund returns (bool) {\r\n        require(_spender != address(0));\r\n\r\n        allowances[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    function tokensByPercentage(uint256 val, uint256 p) public pure returns (uint256) {\r\n        return val.div(100).mul(p);\r\n    }\r\n    \r\n    function getQuarter() internal view returns (uint256) {\r\n        TimeLib tl = TimeLib(0x23d23d8F243e57d0b924bff3A3191078Af325101);\r\n        return (tl.getMonth(now) - 1).div(3) + 1;\r\n    }\r\n        \r\n    function sendDividendsFromE() public onlyGuruFund {\r\n        uint256 currenQuarter = getQuarter();\r\n        if (currenQuarter == nextQuarter) {\r\n            if (nextQuarter == 4) {\r\n                nextQuarter = 1;\r\n            } else {\r\n                nextQuarter = nextQuarter.add(1);\r\n            }\r\n            uint256 tokensToBurn = tokensByPercentage(balances[E], 10); // 10%\r\n            _burn(E, tokensToBurn); // burn 10%\r\n            uint256 tokensToSend = balances[E].div(2); // 50%\r\n            if (now > 1585699200) { // sending tokens to this address will begin in the second quarter at 01.04.2020 till infinity\r\n                _transfer(E, G, tokensByPercentage(tokensToSend, 30)); // 30%\r\n            }\r\n            _transfer(E, H, tokensByPercentage(tokensToSend, 19)); // 19%\r\n            _transfer(E, I, tokensByPercentage(tokensToSend, 18)); // 18%\r\n            _transfer(E, J, tokensByPercentage(tokensToSend, 10)); // 10%\r\n            _transfer(E, K, tokensByPercentage(tokensToSend, 10)); // 10%\r\n            _transfer(E, L, tokensByPercentage(tokensToSend, 10)); // 10%\r\n            _transfer(E, M, tokensByPercentage(tokensToSend, 3)); // 3%\r\n        }\r\n    }\r\n    \r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        balances[account] = balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n    \r\n    function sendTokensToF() public onlyOwner {\r\n        uint256 tokensToSend;\r\n        if (now > 1575158400 && now < 1577836800 && fundF[1575158400] == false) { // 01.12.2019, 8%\r\n            tokensToSend = 10505600 * 1 ether;\r\n            fundF[1575158400] = true;\r\n        } else if (now > 1577836800 && now < 1580515200 && fundF[1577836800] == false) { // 01.01.2020, 7.5%\r\n            tokensToSend = 9849000 * 1 ether;\r\n            fundF[1577836800] = true;\r\n        } else if (now > 1580515200 && now < 1583020800 && fundF[1580515200] == false) { // 01.02.2020, 7%\r\n            tokensToSend = 9192400 * 1 ether;\r\n            fundF[1580515200] = true;\r\n        } else if (now > 1583020800 && now < 1585699200 && fundF[1583020800] == false) { // 01.03.2020, 6.5%\r\n            tokensToSend = 8535800 * 1 ether;\r\n            fundF[1583020800] = true;\r\n        } else if (now > 1585699200 && now < 1588291200 && fundF[1585699200] == false) { // 01.04.2020, 6%\r\n            tokensToSend = 7879200 * 1 ether;\r\n            fundF[1585699200] = true;\r\n        } else if (now > 1588291200 && now < 1590969600 && fundF[1588291200] == false) { // 01.05.2020, 5.5%\r\n            tokensToSend = 7222600 * 1 ether;\r\n            fundF[1588291200] = true;\r\n        } else if (now > 1590969600 && now < 1593561600 && fundF[1590969600] == false) { // 01.06.2020, 5%\r\n            tokensToSend = 6566000 * 1 ether;\r\n            fundF[1590969600] = true;\r\n        } else if (now > 1593561600 && now < 1596240000 && fundF[1593561600] == false) { // 01.07.2020, 4.5%\r\n            tokensToSend = 5909400 * 1 ether;\r\n            fundF[1593561600] = true;\r\n        } else if (now > 1596240000 && now < 1598918400 && fundF[1596240000] == false) { // 01.08.2020, 4%\r\n            tokensToSend = 5252800 * 1 ether;\r\n            fundF[1596240000] = true;\r\n        } else if (now > 1598918400 && now < 1601510400 && fundF[1598918400] == false) { // 01.09.2020, 4%\r\n            tokensToSend = 5252800 * 1 ether;\r\n            fundF[1598918400] = true;\r\n        } else if (now > 1601510400 && now < 1604188800 && fundF[1601510400] == false) { // 01.10.2020, 4%\r\n            tokensToSend = 5252800 * 1 ether;\r\n            fundF[1601510400] = true;\r\n        } else if (now > 1604188800 && now < 1606780800 && fundF[1604188800] == false) { // 01.11.2020, 4%\r\n            tokensToSend = 5252800 * 1 ether;\r\n            fundF[1604188800] = true;\r\n        } else if (now > 1606780800 && now < 1609459200 && fundF[1606780800] == false) { // 01.12.2020, 4%\r\n            tokensToSend = 5252800 * 1 ether;\r\n            fundF[1606780800] = true;\r\n        } else if (now > 1609459200 && now < 1612137600 && fundF[1609459200] == false) { // 01.01.2021, 4%\r\n            tokensToSend = 5252800 * 1 ether;\r\n            fundF[1609459200] = true;\r\n        } else if (now > 1612137600 && now < 1614556800 && fundF[1612137600] == false) { // 01.02.2021, 4%\r\n            tokensToSend = 5252800 * 1 ether;\r\n            fundF[1612137600] = true;\r\n        } else if (now > 1614556800 && now < 1617235200 && fundF[1614556800] == false) { // 01.03.2021, 4%\r\n            tokensToSend = 5252800 * 1 ether;\r\n            fundF[1614556800] = true;\r\n        } else if (now > 1617235200 && now < 1619827200 && fundF[1617235200] == false) { // 01.04.2021, 4%\r\n            tokensToSend = 5252800 * 1 ether;\r\n            fundF[1617235200] = true;\r\n        } else if (now > 1619827200 && now < 1622505600 && fundF[1619827200] == false) { // 01.05.2021, 4%\r\n            tokensToSend = 5252800 * 1 ether;\r\n            fundF[1619827200] = true;\r\n        } else if (now > 1622505600 && now < 1625097600 && fundF[1622505600] == false) { // 01.06.2021, 4%\r\n            tokensToSend = 5252800 * 1 ether;\r\n            fundF[1622505600] = true;\r\n        } else if (now > 1625097600 && now < 1627776000 && fundF[1625097600] == false) { // 01.07.2021, 4%\r\n            tokensToSend = 5252800 * 1 ether;\r\n            fundF[1625097600] = true;\r\n        } else if (now > 1627776000 && now < 1630454400 && fundF[1627776000] == false) { // 01.08.2021, 2%\r\n            tokensToSend = 2626400 * 1 ether;\r\n            fundF[1627776000] = true;\r\n        }\r\n        _transfer(A, F, tokensToSend);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendDividendsFromE\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendTokensToF\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p\",\"type\":\"uint256\"}],\"name\":\"tokensByPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ERC20","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://ede2e6144577306fca21a6b58194f0cca60d3f499a846062c9c911cc845085ce"}]}