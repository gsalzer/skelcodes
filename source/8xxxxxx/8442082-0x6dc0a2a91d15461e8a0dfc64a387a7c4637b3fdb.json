{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\n\n\n\n\n//import \"./IERC20.sol\";\n//////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////// import \"./IERC20.sol\";\n/////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see `ERC20Detailed`.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a `Transfer` event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\n     * zero by default.\n     *\n     * This value changes when `approve` or `transferFrom` are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * > Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an `Approval` event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a `Transfer` event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to `approve`. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n//import \"../../math/SafeMath.sol\";\n//////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////// import \"../../math/SafeMath.sol\";\n/////////////////////////////////////////////////////////////////////////////////\npragma solidity ^0.5.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n    \n    \n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n}\n\n\n\n//import \"./ERC20.sol\";\n//////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////// import \"./ERC20.sol\";\n/////////////////////////////////////////////////////////////////////////////////\n\n\n/**\n * @dev Implementation of the `IERC20` interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using `_mint`.\n * For a generic mechanism see `ERC20Mintable`.\n *\n * *For a detailed writeup see our guide [How to implement supply\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See `IERC20.approve`.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev See `IERC20.totalSupply`.\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See `IERC20.balanceOf`.\n     */\n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See `IERC20.transfer`.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See `IERC20.allowance`.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See `IERC20.approve`.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See `IERC20.transferFrom`.\n     *\n     * Emits an `Approval` event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of `ERC20`;\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `value`.\n     * - the caller must have allowance for `sender`'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to `approve` that can be used as a mitigation for\n     * problems described in `IERC20.approve`.\n     *\n     * Emits an `Approval` event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to `approve` that can be used as a mitigation for\n     * problems described in `IERC20.approve`.\n     *\n     * Emits an `Approval` event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to `transfer`, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a `Transfer` event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _balances[sender] = _balances[sender].sub(amount);\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a `Transfer` event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n     /**\n     * @dev Destoys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a `Transfer` event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an `Approval` event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    /**\n     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\n     * from the caller's allowance.\n     *\n     * See `_burn` and `_approve`.\n     */\n    function _burnFrom(address account, uint256 amount) internal {\n        _burn(account, amount);\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n    }\n}\n\n//import \"../Roles.sol\";\n//////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////// import \"../Roles.sol\";\n/////////////////////////////////////////////////////////////////////////////////\n\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev Give an account access to this role.\n     */\n    function add(Role storage role, address account) internal {\n        require(!has(role, account), \"Roles: account already has role\");\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev Remove an account's access to this role.\n     */\n    function remove(Role storage role, address account) internal {\n        require(has(role, account), \"Roles: account does not have role\");\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev Check if an account has this role.\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0), \"Roles: account is the zero address\");\n        return role.bearer[account];\n    }\n}\n\n\n\n//import \"../../access/roles/MinterRole.sol\";\n//////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////// import \"../../access/roles/MinterRole.sol\";\n/////////////////////////////////////////////////////////////////////////////////\npragma solidity ^0.5.0;\n\ncontract MinterRole {\n    using Roles for Roles.Role;\n\n    event MinterAdded(address indexed account);\n    event MinterRemoved(address indexed account);\n\n    Roles.Role private _minters;\n\n    constructor () internal {\n        _addMinter(msg.sender);\n    }\n\n    modifier onlyMinter() {\n        require(isMinter(msg.sender), \"MinterRole: caller does not have the Minter role\");\n        _;\n    }\n\n    function isMinter(address account) public view returns (bool) {\n        return _minters.has(account);\n    }\n\n    function addMinter(address account) public onlyMinter {\n        _addMinter(account);\n    }\n\n    function renounceMinter() public {\n        _removeMinter(msg.sender);\n    }\n\n    function _addMinter(address account) internal {\n        _minters.add(account);\n        emit MinterAdded(account);\n    }\n\n    function _removeMinter(address account) internal {\n        _minters.remove(account);\n        emit MinterRemoved(account);\n    }\n}\n\n\n//////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////// import \"../../access/roles/PauserRole.sol\";\n/////////////////////////////////////////////////////////////////////////////////\ncontract PauserRole {\n    using Roles for Roles.Role;\n\n    event PauserAdded(address indexed account);\n    event PauserRemoved(address indexed account);\n\n    Roles.Role private _pausers;\n\n    constructor () internal {\n        _addPauser(msg.sender);\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(msg.sender), \"PauserRole: caller does not have the Pauser role\");\n        _;\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n\n    function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }\n\n    function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n\n    function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n}\n\n\n//////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////// \n/////////////////////////////////////////////////////////////////////////////////\ncontract LockerRole {\n    using Roles for Roles.Role;\n\n    event LockerAdded(address indexed account);\n    event LockerRemoved(address indexed account);\n\n    Roles.Role private _lockers;\n\n    constructor () internal {\n        _addLocker(msg.sender);\n    }\n\n    modifier onlyLockers() {\n        require(isLocker(msg.sender), \"LockersRole: caller does not have the Locker role\");\n        _;\n    }\n\n    function isLocker(address account) public view returns (bool) {\n        return _lockers.has(account);\n    }\n\n    function addLocker(address account) public onlyLockers {\n        _addLocker(account);\n    }\n\n    function renounceLockers() public {\n        _removeLocker(msg.sender);\n    }\n\n    function _addLocker(address account) internal {\n        _lockers.add(account);\n        emit LockerAdded(account);\n    }\n\n    function _removeLocker(address account) internal {\n        _lockers.remove(account);\n        emit LockerRemoved(account);\n    }\n}\n\n\n//////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////// \n/////////////////////////////////////////////////////////////////////////////////\ncontract AdminRole{\n    using Roles for Roles.Role;\n\n    event AdminAdded(address indexed account);\n    event AdminRemoved(address indexed account);\n\n    Roles.Role private _admins;\n\n    constructor () internal {\n        _addAdmin(msg.sender);\n    }\n\n    modifier onlyAdmins() {\n        require(isAdmin(msg.sender), \"AdminRole: caller does not have the Admin role\");\n        _;\n    }\n\n    function isAdmin(address account) public view returns (bool) {\n        return _admins.has(account);\n    }\n\n    function addAdmin(address account) public onlyAdmins {\n        _addAdmin(account);\n    }\n\n    function renounceAdmin() public {\n        _removeAdmin(msg.sender);\n    }\n\n    function _addAdmin(address account) internal {\n        _admins.add(account);\n        emit AdminAdded(account);\n    }\n\n    function _removeAdmin(address account) internal {\n        _admins.remove(account);\n        emit AdminRemoved(account);\n    }\n}\n\n\n//////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////// import \"github.com/OpenZeppelin/zeppelin-solidity/contracts/lifecycle/Pausable.sol\";\n/////////////////////////////////////////////////////////////////////////////////\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\ncontract Pausable is PauserRole {\n    /**\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\n     * to the deployer.\n     */\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused, \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused, \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Called by a pauser to pause, triggers stopped state.\n     */\n    function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    /**\n     * @dev Called by a pauser to unpause, returns to normal state.\n     */\n    function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n}\n\n\n//////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotLocked` and `whenLocked`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\ncontract Lockable is LockerRole {\n    /**\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\n     */\n    event Locked(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\n     */\n    event Unlocked(address account);\n\n    mapping (uint64=>address) private _locked;    \n\n    /**\n     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\n     * to the deployer.\n     */\n    constructor () internal {\n        \n    }\n\n    /**\n     * @dev Returns true if the msg sender is locked, and false otherwise.\n     */\n    function locked() public view returns (bool) {\n        return (_locked[uint64(msg.sender)]==msg.sender);\n    }\n    \n     /**\n     * @dev Returns true if the addr is locked, and false otherwise.\n     */\n    function lockedByAddr(address _addr) public view returns (bool) {\n        return (_locked[uint64(_addr)]==_addr);\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not locked.\n     */\n    modifier whenNotLocked() {\n        require(_locked[uint64(msg.sender)]!=msg.sender, \"Lockable: locked\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is locked.\n     */\n    modifier whenLocked() {\n        require(_locked[uint64(msg.sender)]!=msg.sender, \"Lockable: not locked\");\n        _;\n    }\n\n    /**\n     * @dev Called by a locker to lock, triggers locked state.\n     */\n    function lock(address _addr) public onlyLockers {\n        _locked[uint64(_addr)] = _addr;\n        emit Locked(_addr);\n    }\n\n    /**\n     * @dev Called by a locker to lock, returns to normal state.\n     */\n    function unlock(address _addr) public onlyLockers {\n        _locked[uint64(_addr)] = address(0);\n        emit Unlocked(_addr);\n    }\n}\n\n\n\n//import \"github.com/OpenZeppelin/zeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol\";\n//////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////// import \"github.com/OpenZeppelin/zeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol\";\n/////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @dev Extension of `ERC20` that adds a set of accounts with the `MinterRole`,\n * which have permission to mint (create) new tokens as they see fit.\n *\n * At construction, the deployer of the contract is the only minter.\n */\ncontract ERC20Mintable is ERC20, MinterRole {\n    /**\n     * @dev See `ERC20._mint`.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `MinterRole`.\n     */\n    function mint(address account, uint256 amount) public onlyMinter returns (bool) {\n        _mint(account, amount);\n        return true;\n    }\n    \n    /**\n     * @dev See `IERC20.transferFromThisByMint`.\n     *\n     * Move from this contract free tokens \n     *\n     * Requirements:\n     * - `recipient` cannot be the zero address.\n     * - this contrat must have a balance of at least `value`.\n     * - the caller must have the `MinterRole`.\n     */\n    function transferFromThisByMint(address recipient, uint256 amount) public onlyMinter returns (bool) {\n        address sender = address (this);\n        _transfer(sender, recipient, amount);\n        return true;\n    }\n}\n\n\n//////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////// import \"github.com/OpenZeppelin/zeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\";\n/////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @title Pausable token\n * @dev ERC20 with pausable transfers and allowances.\n *\n * Useful if you want to stop trades until the end of a crowdsale, or have\n * an emergency switch for freezing all token transfers in the event of a large\n * bug.\n */\n//contract ERC20Pausable is ERC20, Pausable {\ncontract ERC20Pausable is ERC20Mintable, Pausable {\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transfer(to, value);\n    }\n\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transferFrom(from, to, value);\n    }\n\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n        return super.approve(spender, value);\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public whenNotPaused returns (bool) {\n        return super.increaseAllowance(spender, addedValue);\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public whenNotPaused returns (bool) {\n        return super.decreaseAllowance(spender, subtractedValue);\n    }\n    \n    function mint(address account, uint256 amount) public whenNotPaused returns (bool) {\n        return super.mint(account, amount);\n    }\n    \n    function transferFromThisByMint(address recipient, uint256 amount) public whenNotPaused returns (bool) {\n        return super.transferFromThisByMint(recipient, amount);\n    }\n}\n\n\n//////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////// \n/////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @title Lockable token\n * @dev ERC20 with locable transfers and allowances.\n *\n */\n//contract ERC20Pausable is ERC20, Pausable {\ncontract ERC20Lockable is ERC20Pausable, Lockable {\n    function transfer(address to, uint256 value) public whenNotLocked returns (bool) {\n        return super.transfer(to, value);\n    }\n\n    function transferFrom(address from, address to, uint256 value) public whenNotLocked returns (bool) {\n        require(!lockedByAddr(from), 'Locable: from locked');\n        return super.transferFrom(from, to, value);\n    }\n\n    function approve(address spender, uint256 value) public whenNotLocked returns (bool) {\n        return super.approve(spender, value);\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public whenNotLocked returns (bool) {\n        return super.increaseAllowance(spender, addedValue);\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public whenNotLocked returns (bool) {\n        return super.decreaseAllowance(spender, subtractedValue);\n    }\n    \n    function mint(address account, uint256 amount) public whenNotLocked returns (bool) {\n        return super.mint(account, amount);\n    }\n    \n    function transferFromThisByMint(address recipient, uint256 amount) public whenNotLocked returns (bool) {\n        return super.transferFromThisByMint(recipient, amount);\n    }\n}\n\n//import \"github.com/OpenZeppelin/zeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\";\n//////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////// import \"github.com/OpenZeppelin/zeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\";\n/////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @dev Optional functions from the ERC20 standard.\n */\n//contract ERC20Detailed is IERC20 {\ncontract ERC20Detailed{\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\n     * these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei.\n     *\n     * > Note that this information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * `IERC20.balanceOf` and `IERC20.transfer`.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\n\n\n//////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////// PiramidTemplate Interface\n/////////////////////////////////////////////////////////////////////////////////\ninterface IPiramid{\n    \n    function getFullSumPay() external view returns(uint retSum) ;\n    \n    function checkPresentAddr(address _addr) external view returns(bool _retPresent) ;\n    \n    function checkComplitePay(address _addr) external view returns(bool _retPresent) ;\n    \n    function checkCompliteGenerateTable(address _addr) external view returns(bool _retPresent) ;\n    \n    function getNeadPaymentCount(address _addr) external view returns (int _countNead) ;\n    \n    function getNeadPaymentAddr(address _addr, int _pos) external view returns (address _NeadAddr) ;\n    \n    function getNeadPaymentSum(address _addr, int _pos) external view returns (uint _NeadAddr) ;\n    \n    function setComlitePay(address _addr) external ;\n    \n    function addPayment(address _addrParent, address _addrPayer, int _idPartner) external payable returns(address _realposition) ;\n    \n}\n\n\n\n\n//////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////// PiramidTemplate\n/////////////////////////////////////////////////////////////////////////////////\n/**\n * \n * \n * \n */\n\n\n/**\n * @title HelpYouSelfToken\n * @dev Very simple ERC20 Token that can be minted.\n * It is meant to be used in a crowdsale contract.\n */\ncontract HelpYourSelfToken is ERC20Lockable, ERC20Detailed, AdminRole  {\n    \n    string private CONFIG_NAME = \"Help YourSelf Token\";\n    string private CONFIG_SYMBOL = \"HYST\";\n    uint8 private CONFIG_DECEMALS = 18;\n    address payable private OWNER;\n    \n    mapping (string=>IPiramid) Piramids;\n    \n    constructor () public ERC20Detailed(CONFIG_NAME, CONFIG_SYMBOL, CONFIG_DECEMALS) {\n        // solhint-disable-previous-line no-empty-blocks\n        OWNER = msg.sender;\n    }\n    \n    function () external payable {\n        \n        if(msg.value>0){\n            OWNER.transfer(address(this).balance);\n        }\n    }\n    \n    function setNewAddressPir(string memory _namepirm, address _account) public onlyAdmins {\n        \n        Piramids[_namepirm] = IPiramid(_account);\n    }\n    \n    function getAddreesPir(string memory _namepir) public view returns (address AddressPiramid){\n        \n        return address(Piramids[_namepir]);\n    }\n    \n    \n    function setOwner(address payable _addr) public payable onlyAdmins {\n        \n        OWNER = _addr;\n    }\n    \n    function getOwner() public view returns (address _owner){\n        \n        _owner = OWNER;\n    }\n    \n    function transferETH(uint amount) public onlyAdmins returns (bool success) {\n        \n        if(amount>0){\n            OWNER.transfer(amount);\n        }\n        success = true;\n    }\n    \n    function GameOver() public onlyAdmins payable {\n        selfdestruct(OWNER);\n    }\n        \n    \n    function transferAnyERC20Token(IERC20 tokenAddress, address toaddr, uint tokens) public onlyAdmins returns (bool success) {\n        return IERC20(tokenAddress).transfer(toaddr, tokens);\n    }\n    \n    \n    function pirGetFullSumPay(string memory _namepir) public returns(uint retSum){\n        \n        bytes memory data = abi.encodeWithSelector(Piramids[_namepir].getFullSumPay.selector);\n        (bool success, bytes memory returndata) = address(Piramids[_namepir]).call(data);\n        require(success, \"PiramidV3.getFullSumPay: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            return abi.decode(returndata, (uint));\n        }\n    }\n    \n    function pirCheckPresentAddr(string memory _namepir, address account) public returns (bool result){\n        \n        bytes memory data = abi.encodeWithSelector(Piramids[_namepir].checkPresentAddr.selector, account);\n        (bool success, bytes memory returndata) = address(Piramids[_namepir]).call(data);\n        require(success, \"PiramidV3.checkPresentAddr: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            return abi.decode(returndata, (bool));\n        }\n    }\n    \n    function pirCheckComplitePay(string memory _namepir, address Pretendent) public returns (bool result){\n        \n        bytes memory data = abi.encodeWithSelector(Piramids[_namepir].checkComplitePay.selector, Pretendent);\n        (bool success, bytes memory returndata) = address(Piramids[_namepir]).call(data);\n        require(success, \"PiramidV3.checkComplitePay: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            return abi.decode(returndata, (bool));\n        }\n    }\n    \n    function pirCheckCompliteGenerateTable(string memory _namepir, address Pretendent) public returns (bool result){\n        \n        bytes memory data = abi.encodeWithSelector(Piramids[_namepir].checkCompliteGenerateTable.selector, Pretendent);\n        (bool success, bytes memory returndata) = address(Piramids[_namepir]).call(data);\n        require(success, \"PiramidV3.checkCompliteGenerateTable: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            return abi.decode(returndata, (bool));\n        }\n    }\n    \n    function pirGetNeadPaymentCount(string memory _namepir, address Pretendent) public returns (int countpos){\n        \n        bytes memory data = abi.encodeWithSelector(Piramids[_namepir].getNeadPaymentCount.selector, Pretendent);\n        (bool success, bytes memory returndata) = address(Piramids[_namepir]).call(data);\n        require(success, \"PiramidV3.getNeadPaymentCount: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            return abi.decode(returndata, (int));\n        }\n    }\n    \n    function pirGetNeadPaymentAddr(string memory _namepir, address Pretendent, int pos) public returns (address account){\n        \n        bytes memory data = abi.encodeWithSelector(Piramids[_namepir].getNeadPaymentAddr.selector, Pretendent, pos);\n        (bool success, bytes memory returndata) = address(Piramids[_namepir]).call(data);\n        require(success, \"PiramidV3.getNeadPaymentAddr: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            return abi.decode(returndata, (address));\n        }\n    }\n    \n    function pirGetNeadPaymentSum(string memory _namepir, address Pretendent, int pos) public returns (uint sum){\n        \n        bytes memory data = abi.encodeWithSelector(Piramids[_namepir].getNeadPaymentSum.selector, Pretendent, pos);\n        (bool success, bytes memory returndata) = address(Piramids[_namepir]).call(data);\n        require(success, \"PiramidV3.getNeadPaymentSum: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            return abi.decode(returndata, (uint));\n        }\n    }\n    \n    function pirSetComlitePay(string memory _namepir, address Pretendent) public {\n        \n        bytes memory data = abi.encodeWithSelector(Piramids[_namepir].setComlitePay.selector, Pretendent);\n        (bool success, bytes memory returndata) = address(Piramids[_namepir]).call(data);\n        require(success, \"PiramidV3.setComlitePay: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            //////\n        }\n    }\n    \n    function pirEndPayRescue(string memory _namepir, address Pretendent) public payable {\n        require(pirGetFullSumPay(_namepir)<=balanceOf(msg.sender), 'You have small balance.');\n        require(pirCheckCompliteGenerateTable(_namepir, Pretendent), 'Table not generated at this address');\n        require(!pirCheckComplitePay(_namepir, Pretendent), 'Already complite pay');\n        int PosPay = pirGetNeadPaymentCount(_namepir, Pretendent);\n        for(int i=1; i<=PosPay; i++){\n            address PayAddr = pirGetNeadPaymentAddr(_namepir, Pretendent, i);\n            uint PaySum = pirGetNeadPaymentSum(_namepir, Pretendent, i);\n            transfer(PayAddr, PaySum);\n        }\n        pirSetComlitePay(_namepir, Pretendent);\n    }\n    \n    function pirStart(string memory _namepir, address Parent, address Pretendent, int Partner) public payable returns(address _realposition){\n        \n        require(pirGetFullSumPay(_namepir)<=balanceOf(msg.sender), 'You have small balance.');\n        require(!pirCheckPresentAddr(_namepir, Pretendent), 'Pretendent address already added');\n        require(pirCheckComplitePay(_namepir, Parent), 'Parent address not complite');\n        \n        bytes memory data = abi.encodeWithSelector(Piramids[_namepir].addPayment.selector, Parent, Pretendent, Partner);\n        (bool success, bytes memory returndata) = address(Piramids[_namepir]).call(data);\n        require(success, \"PiramidV3.addPayment: low-level call failed\");\n        if (returndata.length > 0) {\n            _realposition = abi.decode(returndata, (address));\n        }\n        pirEndPayRescue(_namepir, Pretendent);\n    }\n    \n    function pirStartMe(string memory _namepir, address Parent, int Partner) public payable returns(address _realposition){\n        \n        _realposition = pirStart(_namepir, Parent, msg.sender, Partner);\n    }\n    \n    \n}\n","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFromThisByMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_namepir\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"Pretendent\",\"type\":\"address\"}],\"name\":\"pirGetNeadPaymentCount\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"countpos\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isLocker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_namepirm\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"setNewAddressPir\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_namepir\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"Pretendent\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"pos\",\"type\":\"int256\"}],\"name\":\"pirGetNeadPaymentSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_namepir\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"Pretendent\",\"type\":\"address\"}],\"name\":\"pirCheckCompliteGenerateTable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addLocker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_namepir\",\"type\":\"string\"}],\"name\":\"pirGetFullSumPay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"retSum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_namepir\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"Parent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"Pretendent\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"Partner\",\"type\":\"int256\"}],\"name\":\"pirStart\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_realposition\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_namepir\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"Pretendent\",\"type\":\"address\"}],\"name\":\"pirCheckComplitePay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"lockedByAddr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_namepir\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"pirCheckPresentAddr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_namepir\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"Pretendent\",\"type\":\"address\"}],\"name\":\"pirEndPayRescue\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_namepir\",\"type\":\"string\"}],\"name\":\"getAddreesPir\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"AddressPiramid\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_namepir\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"Pretendent\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"pos\",\"type\":\"int256\"}],\"name\":\"pirGetNeadPaymentAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toaddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_namepir\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"Parent\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"Partner\",\"type\":\"int256\"}],\"name\":\"pirStartMe\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_realposition\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"GameOver\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_namepir\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"Pretendent\",\"type\":\"address\"}],\"name\":\"pirSetComlitePay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceLockers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"LockerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"LockerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"HelpYourSelfToken","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://73134ea5e7a026ff5559c5a6f6c2d80d7bf2ecc435ecb54b316fc70b3fd25ece"}]}