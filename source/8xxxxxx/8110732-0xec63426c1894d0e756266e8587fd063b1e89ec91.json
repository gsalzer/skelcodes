{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract BasicERC20\r\n{\r\n    /* Public variables of the token */\r\n    string public standard = 'ERC20';\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n    bool public isTokenTransferable = true;\r\n\r\n    /* This creates an array with all balances */\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /* Send coins */\r\n    function transfer(address _to, uint256 _value) public {\r\n        assert(isTokenTransferable);\r\n        assert(balanceOf[msg.sender] >= _value);             // Check if the sender has enough\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\r\n        balanceOf[msg.sender] -= _value;                     // Subtract from the sender\r\n        balanceOf[_to] += _value;                            // Add the same to the recipient\r\n        emit Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\r\n    }\r\n\r\n    /* Allow another contract to spend some tokens in your behalf */\r\n    function approve(address _spender, uint256 _value) public\r\n    returns (bool success)  {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    /* A contract attempts to get the coins */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        assert(isTokenTransferable || _from == address(0x0)); // allow to transfer for crowdsale\r\n        if (balanceOf[_from] < _value) throw;                 // Check if the sender has enough\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  // Check for overflows\r\n        if (_value > allowance[_from][msg.sender]) throw;   // Check allowance\r\n        balanceOf[_from] -= _value;                          // Subtract from the sender\r\n        balanceOf[_to] += _value;                            // Add the same to the recipient\r\n        allowance[_from][msg.sender] -= _value;\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract BasicCrowdsale is Ownable\r\n{\r\n    using SafeMath for uint256;\r\n    BasicERC20 token;\r\n\r\n    address public ownerWallet;\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n    uint256 public totalEtherRaised = 0;\r\n    uint256 public totalTokensSold = 0;\r\n\r\n    uint256 public softCapEther;\r\n    uint256 public hardCapEther;\r\n\r\n    mapping(address => uint256) private deposits;\r\n    mapping(address => uint256) public amounts;\r\n\r\n    constructor () public {\r\n\r\n    }\r\n\r\n    function () external payable {\r\n        buy(msg.sender);\r\n    }\r\n\r\n    function getSettings () view public returns(uint256 _startTime,\r\n        uint256 _endTime,\r\n        uint256 _rate,\r\n        uint256 _totalEtherRaised,\r\n        uint256 _maxAmount,\r\n        uint256 _tokensLeft ) {\r\n\r\n        _startTime = startTime;\r\n        _endTime = endTime;\r\n        _rate = getRate();\r\n        _totalEtherRaised = totalEtherRaised;\r\n        _maxAmount = getMaxAmount();\r\n        _tokensLeft = tokensLeft();\r\n    }\r\n\r\n    function tokensLeft() view public returns (uint256)\r\n    {\r\n        return token.balanceOf(address(0x0));\r\n    }\r\n\r\n    function getRate() view public returns (uint256) {\r\n        assert(false);\r\n    }\r\n\r\n    function getMinAmount(address userAddress) view public returns (uint256) {\r\n        assert(false);\r\n    }\r\n\r\n    function getMaxAmount() view public returns (uint256) {\r\n        assert(false);\r\n    }\r\n\r\n    function getTokenAmount(uint256 weiAmount) public view returns(uint256) {\r\n        return weiAmount.mul(getRate());\r\n    }\r\n\r\n    function checkCorrectPurchase() view internal {\r\n        require(startTime < now && now < endTime);\r\n        require(totalEtherRaised + msg.value < hardCapEther);\r\n    }\r\n\r\n    function isCrowdsaleFinished() view public returns(bool)\r\n    {\r\n        return totalEtherRaised >= hardCapEther || now > endTime;\r\n    }\r\n\r\n    function buy(address userAddress) public payable {\r\n        require(userAddress != address(0));\r\n        checkCorrectPurchase();\r\n\r\n        // calculate token amount to be created\r\n        uint256 tokens = getTokenAmount(msg.value);\r\n\r\n        assert(tokens >= getMinAmount(userAddress));\r\n        assert(tokens.add(totalTokensSold) <= getMaxAmount());\r\n\r\n        // update state\r\n        totalEtherRaised = totalEtherRaised.add(msg.value);\r\n        totalTokensSold = totalTokensSold.add(tokens);\r\n\r\n        token.transferFrom(address(0x0), userAddress, tokens);\r\n        amounts[userAddress] = amounts[userAddress].add(tokens);\r\n\r\n        if (totalEtherRaised >= softCapEther)\r\n        {\r\n            ownerWallet.transfer(this.balance);\r\n        }\r\n        else\r\n        {\r\n            deposits[userAddress] = deposits[userAddress].add(msg.value);\r\n        }\r\n    }\r\n\r\n    function getRefundAmount(address userAddress) view public returns (uint256)\r\n    {\r\n        if (totalEtherRaised >= softCapEther) return 0;\r\n        return deposits[userAddress];\r\n    }\r\n\r\n    function refund(address userAddress) public\r\n    {\r\n        assert(totalEtherRaised < softCapEther && now > endTime);\r\n        uint256 amount = deposits[userAddress];\r\n        deposits[userAddress] = 0;\r\n        amounts[userAddress] = 0;\r\n        userAddress.transfer(amount);\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract Crowdsale is BasicCrowdsale\r\n{\r\n    constructor () public {\r\n        ownerWallet = 0xb02ea41cf7e8c47d5958defda88e46b9786e12ae;\r\n        startTime = 1564617600;\r\n        endTime = 1609459199;\r\n        token = BasicERC20(0x2a629aac0a49c7f51f23a6ff92deecf27b554aa0);\r\n        softCapEther = 1000000000000000000;\r\n        hardCapEther = 125000000000000000000000000;\r\n\r\n        transferOwnership(0xb02ea41cf7e8c47d5958defda88e46b9786e12ae);\r\n    }\r\n\r\n    function getRate() view public returns (uint256) {\r\n        // you can convert unix timestamp to human date here https://www.epochconverter.com\r\n        // 2019-08-01T00:00:00\r\n        if (block.timestamp <= 1567296000) return 9;\r\n        // 2019-10-30T00:00:00\r\n        if (block.timestamp <= 1575158400) return 7;\r\n        return 5;\r\n\r\n    }\r\n\r\n    function getMinAmount(address userAddress) view public returns (uint256) {\r\n        // you can convert unix timestamp to human date here https://www.epochconverter.com\r\n        // 2019-08-01T00:00:00\r\n        if (block.timestamp <= 1567296000){\r\n            if(amounts[userAddress] < 10000000000000000000000){\r\n                return uint256(10000000000000000000000).sub(amounts[userAddress]);\r\n            }\r\n            else{\r\n                return 1000000000000000000;\r\n            }\r\n        }\r\n        // 2019-10-30T00:00:00\r\n        if (block.timestamp <= 1575158400){\r\n            if(amounts[userAddress] < 10000000000000000000000){\r\n                return uint256(10000000000000000000000).sub(amounts[userAddress]);\r\n            }\r\n            else{\r\n                return 1000000000000000000;\r\n            }\r\n        }\r\n        return 1;\r\n    }\r\n\r\n    function getMaxAmount() view public returns (uint256) {\r\n        // you can convert unix timestamp to human date here https://www.epochconverter.com\r\n        // 2019-08-01T00:00:00\r\n        if (block.timestamp <= 1567296000) return 100000000000000000000000000;\r\n        // 2019-10-30T00:00:00\r\n        if (block.timestamp <= 1575158400) return 100000000000000000000000000;\r\n        return 750000000000000000000000000;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getMaxAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCapEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"amounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getRefundAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getMinAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEtherRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSettings\",\"outputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_totalEtherRaised\",\"type\":\"uint256\"},{\"name\":\"_maxAmount\",\"type\":\"uint256\"},{\"name\":\"_tokensLeft\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isCrowdsaleFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"getTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCapEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2a98ece446fc19a099ba808041108c928eac38ff9f8116ddee97afe898378b59"}]}