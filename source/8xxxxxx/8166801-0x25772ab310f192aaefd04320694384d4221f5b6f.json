{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.6;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a / b;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Erc20Token {\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n }\r\n\r\ncontract TokenBatch { \r\n    using   SafeMath for uint256;\r\n\r\n    address public owner;\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function setOwner(address _newOwner)  external  onlyOwner {\r\n        require(_newOwner != address(0x0));\r\n        owner = _newOwner;\r\n    }\r\n\r\n    constructor()  public {\r\n        owner = msg.sender;\r\n    }\r\n  \r\n    event OnTransfer(uint256 indexed _batchId, address indexed _to, bool indexed _done, uint256 _amount, address _sender);\r\n\r\n    function batchTransfer1(address payable[] calldata _tos, uint256 _amount, uint256 _batchId, bool _isShowSuccess) external payable {\r\n        require(_amount > 0);\r\n        require(_tos.length > 0);\r\n        uint RemAmount = msg.value.sub(_amount.mul(_tos.length));\r\n        for(uint i = 0; i < _tos.length; i++){\r\n            address payable to = _tos[i];\r\n            if(to != address(0x0)){\r\n                to.transfer(_amount);\r\n                if (_isShowSuccess){\r\n                    emit OnTransfer(_batchId, to, true, _amount, msg.sender);\r\n                }\r\n            }\r\n            else\r\n            {\r\n                emit OnTransfer(_batchId, to, false, _amount, msg.sender);\r\n            }     \r\n        }\r\n        if(RemAmount > 0)\r\n        {\r\n            msg.sender.transfer(RemAmount);  \r\n        }\r\n    }\r\n\r\n    function batchTransfer2(address payable[] calldata _tos, uint256[] calldata _amounts, uint256 _batchId, bool _isShowSuccess) external payable {\r\n        require(_amounts.length > 0);\r\n        require(_tos.length > 0);\r\n        require(_amounts.length == _tos.length );\r\n        uint RemAmount = msg.value;\r\n        for(uint i = 0; i < _tos.length; i++){\r\n            address payable to = _tos[i];\r\n            uint amount = _amounts[i];\r\n            if(to != address(0x0) && amount > 0){\r\n                RemAmount = RemAmount.sub(amount);\r\n                to.transfer(amount);\r\n                if (_isShowSuccess){\r\n                    emit OnTransfer(_batchId, to, true, amount, msg.sender);\r\n                }\r\n            }\r\n            else\r\n            {\r\n                emit OnTransfer(_batchId, to, false, amount, msg.sender);\r\n            }     \r\n        }\r\n        if(RemAmount > 0)\r\n        {\r\n            msg.sender.transfer(RemAmount);  \r\n        }\r\n    }\r\n    \r\n    event OnTokenTransfer(uint256 indexed _batchId, address indexed _to, bool indexed _done, uint256 _amount, address _sender, address _erc20Token);\r\n    \r\n    function batchTokenTransfer1(address _erc20Token, address[] calldata _tos, uint256 _amount, uint256 _batchId, bool _isShowSuccess) external  {\r\n        require(_amount > 0);\r\n        require(_tos.length > 0);\r\n        Erc20Token token = Erc20Token(_erc20Token);\r\n        for(uint i = 0; i < _tos.length; i++){\r\n            address to = _tos[i];\r\n            if(to != address(0x0)){\r\n                token.transferFrom(msg.sender, to, _amount);\r\n                if (_isShowSuccess){\r\n                    emit OnTokenTransfer(_batchId, to, true, _amount, msg.sender, _erc20Token);\r\n                }\r\n            }\r\n            else\r\n            {\r\n                emit OnTokenTransfer(_batchId, to, false, _amount, msg.sender, _erc20Token);\r\n            }     \r\n        }\r\n    }\r\n\r\n    function batchTokenTransfer2(address _erc20Token, address [] calldata _tos, uint256[] calldata _amounts, uint256 _batchId, bool _isShowSuccess) external  {\r\n        require(_amounts.length > 0);\r\n        require(_tos.length > 0);\r\n        require(_amounts.length == _tos.length );\r\n        Erc20Token token = Erc20Token(_erc20Token);\r\n        for(uint i = 0; i < _tos.length; i++){\r\n            if(_tos[i] != address(0x0) && _amounts[i] > 0){\r\n                token.transferFrom(msg.sender, _tos[i], _amounts[i]);\r\n                if (_isShowSuccess){\r\n                    emit OnTokenTransfer(_batchId, _tos[i], true, _amounts[i], msg.sender, _erc20Token);\r\n                }\r\n            }\r\n            else\r\n            {\r\n                emit OnTokenTransfer(_batchId, _tos[i], false, _amounts[i], msg.sender, _erc20Token);\r\n            }\r\n        }\r\n    }\r\n    \r\n\r\n    function () external payable {\r\n        //selfdestruct(_to);\r\n    }\r\n    \r\n    function disToken(address _token) external onlyOwner {\r\n        if (_token != address(0x0)){\r\n            Erc20Token token = Erc20Token(_token);\r\n            uint amount = token.balanceOf(address(this));\r\n            if (amount > 0) {\r\n                token.transfer(msg.sender, amount);\r\n            }\r\n        }\r\n        else{\r\n            msg.sender.transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tos\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"name\":\"_batchId\",\"type\":\"uint256\"},{\"name\":\"_isShowSuccess\",\"type\":\"bool\"}],\"name\":\"batchTransfer2\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"disToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_erc20Token\",\"type\":\"address\"},{\"name\":\"_tos\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"name\":\"_batchId\",\"type\":\"uint256\"},{\"name\":\"_isShowSuccess\",\"type\":\"bool\"}],\"name\":\"batchTokenTransfer2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_erc20Token\",\"type\":\"address\"},{\"name\":\"_tos\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_batchId\",\"type\":\"uint256\"},{\"name\":\"_isShowSuccess\",\"type\":\"bool\"}],\"name\":\"batchTokenTransfer1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tos\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_batchId\",\"type\":\"uint256\"},{\"name\":\"_isShowSuccess\",\"type\":\"bool\"}],\"name\":\"batchTransfer1\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_batchId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_done\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"OnTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_batchId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_done\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_erc20Token\",\"type\":\"address\"}],\"name\":\"OnTokenTransfer\",\"type\":\"event\"}]","ContractName":"TokenBatch","CompilerVersion":"v0.5.6+commit.b259423e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://66cf20c85622b14ea12c5463da40d4663e32b61a08a809d19f515a96bcbe1126"}]}