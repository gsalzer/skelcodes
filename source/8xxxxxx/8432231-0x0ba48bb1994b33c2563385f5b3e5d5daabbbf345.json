{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type,\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * > It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n     * @dev Multiplies two numbers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two numbers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function mint(address to, uint256 value) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Multiownable smart contract\r\n * which allows to many ETH wallets to manage main smart contract.\r\n */\r\ncontract Multiownable {\r\n    // VARIABLES\r\n\r\n    uint256 internal _ownersGeneration;\r\n    uint256 internal _howManyOwnersDecide;\r\n    address[] internal _owners;\r\n    bytes32[] internal _allOperations;\r\n    address internal _insideCallSender;\r\n    uint256 internal _insideCallCount;\r\n\r\n    // Reverse lookup tables for owners and allOperations\r\n    mapping(address => uint256) public ownersIndices; // Starts from 1\r\n    mapping(bytes32 => uint256) public allOperationsIndicies;\r\n\r\n    // Owners voting mask per operations\r\n    mapping(bytes32 => uint256) public votesMaskByOperation;\r\n    mapping(bytes32 => uint256) public votesCountByOperation;\r\n\r\n    // EVENTS\r\n\r\n    event OwnershipTransferred(address[] previousOwners, uint256 howManyOwnersDecide, address[] newOwners, uint256 newHowManyOwnersDecide);\r\n    event OperationCreated(bytes32 operation, uint256 howMany, uint256 ownersCount, address proposer);\r\n    event OperationUpvoted(bytes32 operation, uint256 votes, uint256 howMany, uint256 ownersCount, address upvoter);\r\n    event OperationPerformed(bytes32 operation, uint256 howMany, uint256 ownersCount, address performer);\r\n    event OperationDownvoted(bytes32 operation, uint256 votes, uint256 ownersCount,  address downvoter);\r\n    event OperationCancelled(bytes32 operation, address lastCanceller);\r\n    \r\n    // ACCESSORS\r\n\r\n    function isOwner(address wallet) external view returns (bool) {\r\n        return ownersIndices[wallet] > 0;\r\n    }\r\n\r\n    function ownersCount() external view returns (uint256) {\r\n        return _owners.length;\r\n    }\r\n\r\n    function allOperationsCount() external view returns (uint256) {\r\n        return _allOperations.length;\r\n    }\r\n\r\n    // MODIFIERS\r\n\r\n    /**\r\n     * @dev Allows to perform method by any of the owners\r\n     */\r\n    modifier onlyAnyOwner {\r\n        if (checkHowManyOwners(1)) {\r\n            bool update = (_insideCallSender == address(0));\r\n            if (update) {\r\n                _insideCallSender = msg.sender;\r\n                _insideCallCount = 1;\r\n            }\r\n            _;\r\n            if (update) {\r\n                _insideCallSender = address(0);\r\n                _insideCallCount = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Allows to perform method only after many owners call it with the same arguments\r\n     */\r\n    modifier onlyManyOwners {\r\n        if (checkHowManyOwners(_howManyOwnersDecide)) {\r\n            bool update = (_insideCallSender == address(0));\r\n            if (update) {\r\n                _insideCallSender = msg.sender;\r\n                _insideCallCount = _howManyOwnersDecide;\r\n            }\r\n            _;\r\n            if (update) {\r\n                _insideCallSender = address(0);\r\n                _insideCallCount = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Allows to perform method only after all owners call it with the same arguments\r\n     */\r\n    modifier onlyAllOwners {\r\n        if (checkHowManyOwners(_owners.length)) {\r\n            bool update = (_insideCallSender == address(0));\r\n            if (update) {\r\n                _insideCallSender = msg.sender;\r\n                _insideCallCount = _owners.length;\r\n            }\r\n            _;\r\n            if (update) {\r\n                _insideCallSender = address(0);\r\n                _insideCallCount = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Allows to perform method only after some owners call it with the same arguments\r\n     */\r\n    modifier onlySomeOwners(uint256 howMany) {\r\n        require(howMany > 0, \"onlySomeOwners: howMany argument is zero\");\r\n        require(howMany <= _owners.length, \"onlySomeOwners: howMany argument exceeds the number of owners\");\r\n        \r\n        if (checkHowManyOwners(howMany)) {\r\n            bool update = (_insideCallSender == address(0));\r\n            if (update) {\r\n                _insideCallSender = msg.sender;\r\n                _insideCallCount = howMany;\r\n            }\r\n            _;\r\n            if (update) {\r\n                _insideCallSender = address(0);\r\n                _insideCallCount = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    // CONSTRUCTOR\r\n\r\n    constructor() public {\r\n        _owners.push(msg.sender);\r\n        ownersIndices[msg.sender] = 1;\r\n        _howManyOwnersDecide = 1;\r\n    }\r\n\r\n    // INTERNAL METHODS\r\n\r\n    /**\r\n     * @dev onlyManyOwners modifier helper\r\n     */\r\n    function checkHowManyOwners(uint256 howMany) internal returns (bool) {\r\n        if (_insideCallSender == msg.sender) {\r\n            require(howMany <= _insideCallCount, \"checkHowManyOwners: nested owners modifier check require more owners\");\r\n            return true;\r\n        }\r\n\r\n        uint256 ownerIndex = ownersIndices[msg.sender] - 1;\r\n        require(ownerIndex < _owners.length, \"checkHowManyOwners: msg.sender is not an owner\");\r\n\r\n        bytes32 operation = keccak256(abi.encodePacked(msg.data, _ownersGeneration));\r\n        require((votesMaskByOperation[operation] & (2 ** ownerIndex)) == 0, \"checkHowManyOwners: owner already voted for the operation\");\r\n\r\n        votesMaskByOperation[operation] |= (2 ** ownerIndex);\r\n        uint256 operationVotesCount = votesCountByOperation[operation] + 1;\r\n        votesCountByOperation[operation] = operationVotesCount;\r\n\r\n        if (operationVotesCount == 1) {\r\n            allOperationsIndicies[operation] = _allOperations.length;\r\n            _allOperations.push(operation);\r\n            emit OperationCreated(operation, howMany, _owners.length, msg.sender);\r\n        }\r\n\r\n        emit OperationUpvoted(operation, operationVotesCount, howMany, _owners.length, msg.sender);\r\n\r\n        // If enough owners confirmed the same operation\r\n        if (votesCountByOperation[operation] == howMany) {\r\n            deleteOperation(operation);\r\n            emit OperationPerformed(operation, howMany, _owners.length, msg.sender);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev Used to delete cancelled or performed operation\r\n     * @param operation defines which operation to delete\r\n     */\r\n    function deleteOperation(bytes32 operation) internal {\r\n        uint256 index = allOperationsIndicies[operation];\r\n\r\n        if (index < _allOperations.length - 1) { // Not last\r\n            _allOperations[index] = _allOperations[_allOperations.length - 1];\r\n            allOperationsIndicies[_allOperations[index]] = index;\r\n        }\r\n\r\n        _allOperations.length--;\r\n\r\n        delete votesMaskByOperation[operation];\r\n        delete votesCountByOperation[operation];\r\n        delete allOperationsIndicies[operation];\r\n    }\r\n\r\n    // PUBLIC METHODS\r\n\r\n    /**\r\n     * @dev Allows owners to change their mind by cacnelling votesMaskByOperation operations\r\n     * @param operation defines which operation to delete\r\n     */\r\n    function cancelPending(bytes32 operation) external onlyAnyOwner {\r\n        uint256 ownerIndex = ownersIndices[msg.sender] - 1;\r\n        require((votesMaskByOperation[operation] & (2 ** ownerIndex)) != 0, \"cancelPending: operation not found for this user\");\r\n\r\n        votesMaskByOperation[operation] &= ~(2 ** ownerIndex);\r\n        uint256 operationVotesCount = votesCountByOperation[operation] - 1;\r\n        votesCountByOperation[operation] = operationVotesCount;\r\n\r\n        emit OperationDownvoted(operation, operationVotesCount, _owners.length, msg.sender);\r\n\r\n        if (operationVotesCount == 0) {\r\n            deleteOperation(operation);\r\n            emit OperationCancelled(operation, msg.sender);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Allows owners to change ownership\r\n     * @param newOwners defines array of addresses of new owners\r\n     */\r\n    function transferOwnership(address[] calldata newOwners) external {\r\n        transferOwnershipWithHowMany(newOwners, newOwners.length);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows owners to change ownership\r\n     * @param newOwners defines array of addresses of new owners\r\n     * @param newHowManyOwnersDecide defines how many owners can decide\r\n     */\r\n    function transferOwnershipWithHowMany(address[] memory newOwners, uint256 newHowManyOwnersDecide) public onlyManyOwners {\r\n        require(newOwners.length > 0, \"transferOwnershipWithHowMany: owners array is empty\");\r\n        require(newOwners.length <= 256, \"transferOwnershipWithHowMany: owners count is greater then 256\");\r\n        require(newHowManyOwnersDecide > 0, \"transferOwnershipWithHowMany: newHowManyOwnersDecide equal to 0\");\r\n        require(newHowManyOwnersDecide <= newOwners.length, \"transferOwnershipWithHowMany: newHowManyOwnersDecide exceeds the number of owners\");\r\n\r\n        // Reset owners reverse lookup table\r\n        for (uint256 j = 0; j < _owners.length; j++) {\r\n            delete ownersIndices[_owners[j]];\r\n        }\r\n\r\n        for (uint256 i = 0; i < newOwners.length; i++) {\r\n            require(newOwners[i] != address(0), \"transferOwnershipWithHowMany: owners array contains zero\");\r\n            require(ownersIndices[newOwners[i]] == 0, \"transferOwnershipWithHowMany: owners array contains duplicates\");\r\n            ownersIndices[newOwners[i]] = i + 1;\r\n        }\r\n        \r\n        emit OwnershipTransferred(_owners, _howManyOwnersDecide, newOwners, newHowManyOwnersDecide);\r\n\r\n        _owners = newOwners;\r\n        _howManyOwnersDecide = newHowManyOwnersDecide;\r\n        _allOperations.length = 0;\r\n        _ownersGeneration++;\r\n    }\r\n\r\n    // GETTERS\r\n\r\n    function getOwnersGeneration() external view returns (uint256) {\r\n        return _ownersGeneration;\r\n    }\r\n    \r\n    function getHowManyOwnersDecide() external view returns (uint256) {\r\n        return _howManyOwnersDecide;\r\n    }\r\n\r\n    function getInsideCallSender() external view returns (address) {\r\n        return _insideCallSender;\r\n    }\r\n\r\n    function getInsideCallCount() external view returns (uint256) {\r\n        return _insideCallCount;\r\n    }\r\n\r\n    function getOwners() external view returns(address [] memory) {\r\n        return _owners;\r\n    }\r\n\r\n    function getAllOperations() external view returns (bytes32 [] memory) {\r\n        return _allOperations;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n/**\r\n * @title WhitelistedRole\r\n * @dev Whitelisted accounts have been approved by a WhitelistAdmin to perform certain actions (e.g. participate in a\r\n * crowdsale). This role is special in that the only accounts that can add it are WhitelistAdmins (who can also remove\r\n * it), and not Whitelisteds themselves.\r\n */\r\ncontract WhitelistedRole is Multiownable {\r\n    using Roles for Roles.Role;\r\n\r\n    event WhitelistedAdded(address indexed account);\r\n    event WhitelistedRemoved(address indexed account);\r\n\r\n    Roles.Role private _whitelisteds;\r\n\r\n    modifier onlyWhitelisted() {\r\n        require(isWhitelisted(msg.sender), \"WhitelistedRole: caller does not have the Whitelisted role\");\r\n        _;\r\n    }\r\n\r\n    function isWhitelisted(address account) public view returns (bool) {\r\n        return _whitelisteds.has(account);\r\n    }\r\n\r\n    function addWhitelisted(address account) public onlyManyOwners {\r\n        _addWhitelisted(account);\r\n    }\r\n\r\n    function removeWhitelisted(address account) public onlyManyOwners {\r\n        _removeWhitelisted(account);\r\n    }\r\n\r\n    function _addWhitelisted(address account) internal {\r\n        _whitelisteds.add(account);\r\n        emit WhitelistedAdded(account);\r\n    }\r\n\r\n    function _removeWhitelisted(address account) internal {\r\n        _whitelisteds.remove(account);\r\n        emit WhitelistedRemoved(account);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Staking smart contract\r\n */\r\ncontract Staking is WhitelistedRole {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // whitelisted users amount\r\n    uint256 private _usersAmount;\r\n\r\n    // timestamp when last time deposit was deposited tokens\r\n    uint256 private _lastDepositDone;\r\n\r\n    // only once per 30 days depositor can deposit tokens\r\n    uint256 private constant _depositDelay = 30 days;\r\n\r\n    // the address of depositor\r\n    address private _depositor;\r\n\r\n    // how much deposits depositor done\r\n    uint256 private _depositsAmount;\r\n\r\n    struct DepositData {\r\n        uint256 tokens;\r\n        uint256 usersLength;\r\n    }\r\n\r\n    // here we store the history of deposits amount per each delay\r\n    mapping(uint256 => DepositData) private _depositedPerDelay;\r\n\r\n    // here we store user address => last deposit amount for withdraw calculation\r\n    // if user missed withdrawal of few months he can withdraw all tokens once\r\n    mapping(address => uint256) private _userWithdraws;\r\n\r\n    // interface of ERC20 Yazom\r\n    IERC20 private _yazom;\r\n\r\n    // events for watching\r\n    event Deposited(uint256 amount);\r\n    event Withdrawen(address indexed user, uint256 amount);\r\n\r\n    // -----------------------------------------\r\n    // CONSTRUCTOR\r\n    // -----------------------------------------\r\n\r\n    constructor (address depositor, IERC20 yazom) public {\r\n        _depositor = depositor;\r\n        _yazom = yazom;\r\n    }\r\n\r\n    // -----------------------------------------\r\n    // EXTERNAL\r\n    // -----------------------------------------\r\n\r\n    function () external payable {\r\n        // revert fallback methods\r\n        revert();\r\n    }\r\n\r\n    function deposit() external {\r\n        require(msg.sender == _depositor, \"deposit: only the depositor can deposit tokens\");\r\n        require(block.timestamp >= _lastDepositDone.add(_depositDelay), \"deposit: can not deposit now\");\r\n\r\n        uint256 tokensAmount = _yazom.allowance(_depositor, address(this));\r\n        _yazom.safeTransferFrom(_depositor, address(this), tokensAmount);\r\n\r\n        _lastDepositDone = block.timestamp;\r\n        _depositedPerDelay[_depositsAmount] = DepositData(tokensAmount, _usersAmount);\r\n        _depositsAmount += 1;\r\n    \r\n        emit Deposited(tokensAmount);\r\n    }\r\n\r\n    function withdrawn() external onlyWhitelisted {\r\n        address user = msg.sender;\r\n        uint256 userLastWithdrawal = _userWithdraws[user];\r\n        require(userLastWithdrawal < _depositsAmount, \"withdrawn: this user already withdraw all available funds\");\r\n\r\n        uint256 tokensAmount;\r\n\r\n        for (uint256 i = userLastWithdrawal; i < _depositsAmount; i++) {\r\n            uint256 tokensPerDelay = _depositedPerDelay[i].tokens.div(_depositedPerDelay[i].usersLength);\r\n            tokensAmount = tokensPerDelay;\r\n        }\r\n\r\n        _userWithdraws[user] = _depositsAmount;\r\n        _yazom.safeTransfer(user, tokensAmount);\r\n\r\n        emit Withdrawen(user, tokensAmount);\r\n    }\r\n\r\n    // -----------------------------------------\r\n    // INTERNAL\r\n    // -----------------------------------------\r\n\r\n    function _addWhitelisted(address account) internal {\r\n        _usersAmount++;\r\n        super._addWhitelisted(account);\r\n    }\r\n\r\n    function _removeWhitelisted(address account) internal {\r\n        _usersAmount--;\r\n        super._removeWhitelisted(account);\r\n    }\r\n\r\n    // -----------------------------------------\r\n    // GETTERS\r\n    // -----------------------------------------\r\n\r\n    function getCurrentUsersAmount() external view returns (uint256) {\r\n        return _usersAmount;\r\n    }\r\n\r\n    function getLastDepositDoneDate() external view returns (uint256) {\r\n        return _lastDepositDone;\r\n    }\r\n\r\n    function getDepositDelay() external pure returns (uint256) {\r\n        return _depositDelay;\r\n    }\r\n\r\n    function getDepositorAddress() external view returns (address) {\r\n        return _depositor;\r\n    }\r\n\r\n    function getDepositsAmount() external view returns (uint256) {\r\n        return _depositsAmount;\r\n    }\r\n\r\n    function getDepositData(uint256 depositId) external view returns (uint256 tokens, uint256 usersLength) {\r\n        return (\r\n            _depositedPerDelay[depositId].tokens,\r\n            _depositedPerDelay[depositId].usersLength\r\n        );\r\n    }\r\n\r\n    function getUserLastWithdraw(address user) external view returns (uint256) {\r\n        return _userWithdraws[user];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getAllOperations\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserLastWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwners\",\"type\":\"address[]\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDepositDelay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allOperationsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentUsersAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwnersGeneration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDepositorAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"votesMaskByOperation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastDepositDoneDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInsideCallSender\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operation\",\"type\":\"bytes32\"}],\"name\":\"cancelPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"votesCountByOperation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"depositId\",\"type\":\"uint256\"}],\"name\":\"getDepositData\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"usersLength\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInsideCallCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownersIndices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDepositsAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwners\",\"type\":\"address[]\"},{\"name\":\"newHowManyOwnersDecide\",\"type\":\"uint256\"}],\"name\":\"transferOwnershipWithHowMany\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"allOperationsIndicies\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHowManyOwnersDecide\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"depositor\",\"type\":\"address\"},{\"name\":\"yazom\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistedAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistedRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousOwners\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"howManyOwnersDecide\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newOwners\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"newHowManyOwnersDecide\",\"type\":\"uint256\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"howMany\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ownersCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"proposer\",\"type\":\"address\"}],\"name\":\"OperationCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"votes\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"howMany\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ownersCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"upvoter\",\"type\":\"address\"}],\"name\":\"OperationUpvoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"howMany\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ownersCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"performer\",\"type\":\"address\"}],\"name\":\"OperationPerformed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"votes\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ownersCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"downvoter\",\"type\":\"address\"}],\"name\":\"OperationDownvoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"lastCanceller\",\"type\":\"address\"}],\"name\":\"OperationCancelled\",\"type\":\"event\"}]","ContractName":"Staking","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000018e08f333e7fef11ebe2c4a4fabffc1ffcb6ab4d00000000000000000000000042382f39e7c9f1add5fa5f0c6e24aa62f50be3b3","Library":"","SwarmSource":"bzzr://b5075d5f078ba7bb0936b9126924f68573e085741d84aa540fcb46129b3a19df"}]}