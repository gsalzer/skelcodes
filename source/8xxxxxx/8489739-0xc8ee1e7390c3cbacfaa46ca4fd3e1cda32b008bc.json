{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/wallet_trading_limiter/interfaces/ITradingClasses.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n/**\r\n * @title Trading Classes Interface.\r\n */\r\ninterface ITradingClasses {\r\n    /**\r\n     * @dev Get the limit of a class.\r\n     * @param _id The id of the class.\r\n     * @return The limit of the class.\r\n     */\r\n    function getLimit(uint256 _id) external view returns (uint256);\r\n}\r\n\r\n// File: openzeppelin-solidity-v1.12.0/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity-v1.12.0/contracts/ownership/Claimable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to set the pendingOwner address.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() public onlyPendingOwner {\r\n    emit OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n}\r\n\r\n// File: contracts/wallet_trading_limiter/TradingClasses.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n\r\n\r\n/**\r\n * Details of usage of licenced software see here: https://www.saga.org/software/readme_v1\r\n */\r\n\r\n/**\r\n * @title Trading Classes.\r\n */\r\ncontract TradingClasses is ITradingClasses, Claimable {\r\n    string public constant VERSION = \"1.0.0\";\r\n\r\n    uint256[] public array;\r\n\r\n    struct Info {\r\n        uint256 limit;\r\n        uint256 index;\r\n    }\r\n\r\n    mapping(uint256 => Info) public table;\r\n\r\n    enum Action {None, Insert, Update, Remove}\r\n\r\n    event ActionCompleted(uint256 _id, uint256 _limit, Action _action);\r\n\r\n    /**\r\n     * @dev Get the limit of a class.\r\n     * @param _id The id of the class.\r\n     * @return The limit of the class.\r\n     */\r\n    function getLimit(uint256 _id) external view returns (uint256) {\r\n        return table[_id].limit;\r\n    }\r\n\r\n    /**\r\n     * @dev Set the limit of a class.\r\n     * @param _id The id of the class.\r\n     * @param _limit The limit of the class.\r\n     */\r\n    function setLimit(uint256 _id, uint256 _limit) external onlyOwner {\r\n        Info storage info = table[_id];\r\n        Action action = getAction(info.limit, _limit);\r\n        if (action == Action.Insert) {\r\n            info.index = array.length;\r\n            info.limit = _limit;\r\n            array.push(_id);\r\n        }\r\n        else if (action == Action.Update) {\r\n            info.limit = _limit;\r\n        }\r\n        else if (action == Action.Remove) {\r\n            // at this point we know that array.length > info.index >= 0\r\n            uint256 last = array[array.length - 1]; // will never underflow\r\n            table[last].index = info.index;\r\n            array[info.index] = last;\r\n            array.length -= 1; // will never underflow\r\n            delete table[_id];\r\n        }\r\n        emit ActionCompleted(_id, _limit, action);\r\n    }\r\n\r\n    /**\r\n     * @dev Get an array of all the classes.\r\n     * @return An array of all the classes.\r\n     */\r\n    function getArray() external view returns (uint256[] memory) {\r\n        return array;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the total number of classes.\r\n     * @return The total number of classes.\r\n     */\r\n    function getCount() external view returns (uint256) {\r\n        return array.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the required action.\r\n     * @param _prev The old limit.\r\n     * @param _next The new limit.\r\n     * @return The required action.\r\n     */\r\n    function getAction(uint256 _prev, uint256 _next) private pure returns (Action) {\r\n        if (_prev == 0 && _next != 0)\r\n            return Action.Insert;\r\n        if (_prev != 0 && _next == 0)\r\n            return Action.Remove;\r\n        if (_prev != _next)\r\n            return Action.Update;\r\n        return Action.None;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"setLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"array\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"table\",\"outputs\":[{\"name\":\"limit\",\"type\":\"uint256\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getArray\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_limit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_action\",\"type\":\"uint8\"}],\"name\":\"ActionCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TradingClasses","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"6000","ConstructorArguments":"","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://a4abafbe946fb93bc84221d4d3cd5d609499327db4019d43069616f110a0ead9"}]}