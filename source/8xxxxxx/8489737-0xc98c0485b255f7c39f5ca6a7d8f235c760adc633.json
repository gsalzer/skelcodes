{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/saga-genesis/interfaces/ISGNAuthorizationManager.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n/**\r\n * @title SGN Authorization Manager Interface.\r\n */\r\ninterface ISGNAuthorizationManager {\r\n    /**\r\n     * @dev Determine whether or not a user is authorized to sell SGN.\r\n     * @param _sender The address of the user.\r\n     * @return Authorization status.\r\n     */\r\n    function isAuthorizedToSell(address _sender) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Determine whether or not a user is authorized to transfer SGN to another user.\r\n     * @param _sender The address of the source user.\r\n     * @param _target The address of the target user.\r\n     * @return Authorization status.\r\n     */\r\n    function isAuthorizedToTransfer(address _sender, address _target) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Determine whether or not a user is authorized to transfer SGN from one user to another user.\r\n     * @param _sender The address of the custodian user.\r\n     * @param _source The address of the source user.\r\n     * @param _target The address of the target user.\r\n     * @return Authorization status.\r\n     */\r\n    function isAuthorizedToTransferFrom(address _sender, address _source, address _target) external view returns (bool);\r\n}\r\n\r\n// File: contracts/contract_address_locator/interfaces/IContractAddressLocator.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n/**\r\n * @title Contract Address Locator Interface.\r\n */\r\ninterface IContractAddressLocator {\r\n    /**\r\n     * @dev Get the contract address mapped to a given identifier.\r\n     * @param _identifier The identifier.\r\n     * @return The contract address.\r\n     */\r\n    function getContractAddress(bytes32 _identifier) external view returns (address);\r\n\r\n    /**\r\n     * @dev Determine whether or not a contract address is relates to one of the given identifiers.\r\n     * @param _contractAddress The contract address to look for.\r\n     * @param _identifiers The identifiers.\r\n     * @return Is the contract address relates to one of the identifiers.\r\n     */\r\n    function isContractAddressRelates(address _contractAddress, bytes32[] _identifiers) external view returns (bool);\r\n}\r\n\r\n// File: contracts/contract_address_locator/ContractAddressLocatorHolder.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n\r\n/**\r\n * @title Contract Address Locator Holder.\r\n * @dev Hold a contract address locator, which maps a unique identifier to every contract address in the system.\r\n * @dev Any contract which inherits from this contract can retrieve the address of any contract in the system.\r\n * @dev Thus, any contract can remain \"oblivious\" to the replacement of any other contract in the system.\r\n * @dev In addition to that, any function in any contract can be restricted to a specific caller.\r\n */\r\ncontract ContractAddressLocatorHolder {\r\n    bytes32 internal constant _IAuthorizationDataSource_ = \"IAuthorizationDataSource\";\r\n    bytes32 internal constant _ISGNConversionManager_    = \"ISGNConversionManager\"      ;\r\n    bytes32 internal constant _IModelDataSource_         = \"IModelDataSource\"        ;\r\n    bytes32 internal constant _IPaymentHandler_          = \"IPaymentHandler\"            ;\r\n    bytes32 internal constant _IPaymentManager_          = \"IPaymentManager\"            ;\r\n    bytes32 internal constant _IPaymentQueue_            = \"IPaymentQueue\"              ;\r\n    bytes32 internal constant _IReconciliationAdjuster_  = \"IReconciliationAdjuster\"      ;\r\n    bytes32 internal constant _IIntervalIterator_        = \"IIntervalIterator\"       ;\r\n    bytes32 internal constant _IMintHandler_             = \"IMintHandler\"            ;\r\n    bytes32 internal constant _IMintListener_            = \"IMintListener\"           ;\r\n    bytes32 internal constant _IMintManager_             = \"IMintManager\"            ;\r\n    bytes32 internal constant _IPriceBandCalculator_     = \"IPriceBandCalculator\"       ;\r\n    bytes32 internal constant _IModelCalculator_         = \"IModelCalculator\"        ;\r\n    bytes32 internal constant _IRedButton_               = \"IRedButton\"              ;\r\n    bytes32 internal constant _IReserveManager_          = \"IReserveManager\"         ;\r\n    bytes32 internal constant _ISagaExchanger_           = \"ISagaExchanger\"          ;\r\n    bytes32 internal constant _IMonetaryModel_               = \"IMonetaryModel\"              ;\r\n    bytes32 internal constant _IMonetaryModelState_          = \"IMonetaryModelState\"         ;\r\n    bytes32 internal constant _ISGAAuthorizationManager_ = \"ISGAAuthorizationManager\";\r\n    bytes32 internal constant _ISGAToken_                = \"ISGAToken\"               ;\r\n    bytes32 internal constant _ISGATokenManager_         = \"ISGATokenManager\"        ;\r\n    bytes32 internal constant _ISGNAuthorizationManager_ = \"ISGNAuthorizationManager\";\r\n    bytes32 internal constant _ISGNToken_                = \"ISGNToken\"               ;\r\n    bytes32 internal constant _ISGNTokenManager_         = \"ISGNTokenManager\"        ;\r\n    bytes32 internal constant _IMintingPointTimersManager_             = \"IMintingPointTimersManager\"            ;\r\n    bytes32 internal constant _ITradingClasses_          = \"ITradingClasses\"         ;\r\n    bytes32 internal constant _IWalletsTradingLimiterValueConverter_        = \"IWalletsTLValueConverter\"       ;\r\n    bytes32 internal constant _IWalletsTradingDataSource_       = \"IWalletsTradingDataSource\"      ;\r\n    bytes32 internal constant _WalletsTradingLimiter_SGNTokenManager_          = \"WalletsTLSGNTokenManager\"         ;\r\n    bytes32 internal constant _WalletsTradingLimiter_SGATokenManager_          = \"WalletsTLSGATokenManager\"         ;\r\n    bytes32 internal constant _IETHConverter_             = \"IETHConverter\"   ;\r\n    bytes32 internal constant _ITransactionLimiter_      = \"ITransactionLimiter\"     ;\r\n    bytes32 internal constant _ITransactionManager_      = \"ITransactionManager\"     ;\r\n    bytes32 internal constant _IRateApprover_      = \"IRateApprover\"     ;\r\n\r\n    IContractAddressLocator private contractAddressLocator;\r\n\r\n    /**\r\n     * @dev Create the contract.\r\n     * @param _contractAddressLocator The contract address locator.\r\n     */\r\n    constructor(IContractAddressLocator _contractAddressLocator) internal {\r\n        require(_contractAddressLocator != address(0), \"locator is illegal\");\r\n        contractAddressLocator = _contractAddressLocator;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the contract address locator.\r\n     * @return The contract address locator.\r\n     */\r\n    function getContractAddressLocator() external view returns (IContractAddressLocator) {\r\n        return contractAddressLocator;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the contract address mapped to a given identifier.\r\n     * @param _identifier The identifier.\r\n     * @return The contract address.\r\n     */\r\n    function getContractAddress(bytes32 _identifier) internal view returns (address) {\r\n        return contractAddressLocator.getContractAddress(_identifier);\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @dev Determine whether or not the sender is relates to one of the identifiers.\r\n     * @param _identifiers The identifiers.\r\n     * @return Is the sender relates to one of the identifiers.\r\n     */\r\n    function isSenderAddressRelates(bytes32[] _identifiers) internal view returns (bool) {\r\n        return contractAddressLocator.isContractAddressRelates(msg.sender, _identifiers);\r\n    }\r\n\r\n    /**\r\n     * @dev Verify that the caller is mapped to a given identifier.\r\n     * @param _identifier The identifier.\r\n     */\r\n    modifier only(bytes32 _identifier) {\r\n        require(msg.sender == getContractAddress(_identifier), \"caller is illegal\");\r\n        _;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/authorization/AuthorizationActionRoles.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n/**\r\n * @title Authorization Action Roles.\r\n */\r\nlibrary AuthorizationActionRoles {\r\n    string public constant VERSION = \"1.0.0\";\r\n\r\n    enum Flag {\r\n        BuySga         ,\r\n        SellSga        ,\r\n        SellSgn        ,\r\n        ReceiveSga     ,\r\n        ReceiveSgn     ,\r\n        TransferSga    ,\r\n        TransferSgn    ,\r\n        TransferFromSga,\r\n        TransferFromSgn\r\n    }\r\n\r\n    function isAuthorizedToBuySga         (uint256 _flags) internal pure returns (bool) {return isAuthorized(_flags, Flag.BuySga         );}\r\n    function isAuthorizedToSellSga        (uint256 _flags) internal pure returns (bool) {return isAuthorized(_flags, Flag.SellSga        );}\r\n    function isAuthorizedToSellSgn        (uint256 _flags) internal pure returns (bool) {return isAuthorized(_flags, Flag.SellSgn        );}\r\n    function isAuthorizedToReceiveSga     (uint256 _flags) internal pure returns (bool) {return isAuthorized(_flags, Flag.ReceiveSga     );}\r\n    function isAuthorizedToReceiveSgn     (uint256 _flags) internal pure returns (bool) {return isAuthorized(_flags, Flag.ReceiveSgn     );}\r\n    function isAuthorizedToTransferSga    (uint256 _flags) internal pure returns (bool) {return isAuthorized(_flags, Flag.TransferSga    );}\r\n    function isAuthorizedToTransferSgn    (uint256 _flags) internal pure returns (bool) {return isAuthorized(_flags, Flag.TransferSgn    );}\r\n    function isAuthorizedToTransferFromSga(uint256 _flags) internal pure returns (bool) {return isAuthorized(_flags, Flag.TransferFromSga);}\r\n    function isAuthorizedToTransferFromSgn(uint256 _flags) internal pure returns (bool) {return isAuthorized(_flags, Flag.TransferFromSgn);}\r\n    function isAuthorized(uint256 _flags, Flag _flag) private pure returns (bool) {return ((_flags >> uint256(_flag)) & 1) == 1;}\r\n}\r\n\r\n// File: contracts/authorization/interfaces/IAuthorizationDataSource.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n/**\r\n * @title Authorization Data Source Interface.\r\n */\r\ninterface IAuthorizationDataSource {\r\n    /**\r\n     * @dev Get the authorized action-role of a wallet.\r\n     * @param _wallet The address of the wallet.\r\n     * @return The authorized action-role of the wallet.\r\n     */\r\n    function getAuthorizedActionRole(address _wallet) external view returns (bool, uint256);\r\n\r\n    /**\r\n     * @dev Get the trade-limit and trade-class of a wallet.\r\n     * @param _wallet The address of the wallet.\r\n     * @return The trade-limit and trade-class of the wallet.\r\n     */\r\n    function getTradeLimitAndClass(address _wallet) external view returns (uint256, uint256);\r\n}\r\n\r\n// File: contracts/saga-genesis/SGNAuthorizationManager.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Details of usage of licenced software see here: https://www.saga.org/software/readme_v1\r\n */\r\n\r\n/**\r\n * @title SGN Authorization Manager.\r\n */\r\ncontract SGNAuthorizationManager is ISGNAuthorizationManager, ContractAddressLocatorHolder {\r\n    string public constant VERSION = \"1.0.0\";\r\n\r\n    using AuthorizationActionRoles for uint256;\r\n\r\n    /**\r\n     * @dev Create the contract.\r\n     * @param _contractAddressLocator The contract address locator.\r\n     */\r\n    constructor(IContractAddressLocator _contractAddressLocator) ContractAddressLocatorHolder(_contractAddressLocator) public {}\r\n\r\n    /**\r\n     * @dev Return the contract which implements the IAuthorizationDataSource interface.\r\n     */\r\n    function getAuthorizationDataSource() public view returns (IAuthorizationDataSource) {\r\n        return IAuthorizationDataSource(getContractAddress(_IAuthorizationDataSource_));\r\n    }\r\n\r\n    /**\r\n     * @dev Determine whether or not a wallet is authorized to sell SGN.\r\n     * @param _sender The address of the wallet.\r\n     * @return Authorization status.\r\n     */\r\n    function isAuthorizedToSell(address _sender) external view returns (bool) {\r\n        IAuthorizationDataSource authorizationDataSource = getAuthorizationDataSource();\r\n        (bool senderIsWhitelisted, uint256 senderActionRole) = authorizationDataSource.getAuthorizedActionRole(_sender);\r\n        return senderIsWhitelisted && senderActionRole.isAuthorizedToSellSgn();\r\n    }\r\n\r\n    /**\r\n     * @dev Determine whether or not a wallet is authorized to transfer SGN to another wallet.\r\n     * @param _sender The address of the source wallet.\r\n     * @param _target The address of the target wallet.\r\n     * @return Authorization status.\r\n     */\r\n    function isAuthorizedToTransfer(address _sender, address _target) external view returns (bool) {\r\n        IAuthorizationDataSource authorizationDataSource = getAuthorizationDataSource();\r\n        (bool senderIsWhitelisted, uint256 senderActionRole) = authorizationDataSource.getAuthorizedActionRole(_sender);\r\n        (bool targetIsWhitelisted, uint256 targetActionRole) = authorizationDataSource.getAuthorizedActionRole(_target);\r\n        return senderIsWhitelisted && senderActionRole.isAuthorizedToTransferSgn()\r\n            && targetIsWhitelisted && targetActionRole.isAuthorizedToReceiveSgn();\r\n    }\r\n\r\n    /**\r\n     * @dev Determine whether or not a wallet is authorized to transfer SGN from one wallet to another wallet.\r\n     * @param _sender The address of the wallet initiating the transaction.\r\n     * @param _source The address of the source wallet.\r\n     * @param _target The address of the target wallet.\r\n     * @return Authorization status.\r\n     */\r\n    function isAuthorizedToTransferFrom(address _sender, address _source, address _target) external view returns (bool) {\r\n        IAuthorizationDataSource authorizationDataSource = getAuthorizationDataSource();\r\n        (bool senderIsWhitelisted, uint256 senderActionRole) = authorizationDataSource.getAuthorizedActionRole(_sender);\r\n        (bool sourceIsWhitelisted, uint256 sourceActionRole) = authorizationDataSource.getAuthorizedActionRole(_source);\r\n        (bool targetIsWhitelisted, uint256 targetActionRole) = authorizationDataSource.getAuthorizedActionRole(_target);\r\n        return senderIsWhitelisted && senderActionRole.isAuthorizedToTransferFromSgn()\r\n            && sourceIsWhitelisted && sourceActionRole.isAuthorizedToTransferSgn()\r\n            && targetIsWhitelisted && targetActionRole.isAuthorizedToReceiveSgn();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"isAuthorizedToTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_source\",\"type\":\"address\"},{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"isAuthorizedToTransferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractAddressLocator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"isAuthorizedToSell\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAuthorizationDataSource\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_contractAddressLocator\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"SGNAuthorizationManager","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"6000","ConstructorArguments":"000000000000000000000000aabcd54faf94925adbe0df117c62961acecbacdb","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://d0a153fa86bb0ab4a1f93eed5bfd3da3a23f028835b86eab578d121e34ffd516"}]}