{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/saga/interfaces/IModelDataSource.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n/**\r\n * @title Model Data Source Interface.\r\n */\r\ninterface IModelDataSource {\r\n    /**\r\n     * @dev Get interval parameters.\r\n     * @param _rowNum Interval row index.\r\n     * @param _colNum Interval column index.\r\n     * @return Interval minimum amount of SGA.\r\n     * @return Interval maximum amount of SGA.\r\n     * @return Interval minimum amount of SDR.\r\n     * @return Interval maximum amount of SDR.\r\n     * @return Interval alpha value (scaled up).\r\n     * @return Interval beta  value (scaled up).\r\n     */\r\n    function getInterval(uint256 _rowNum, uint256 _colNum) external view returns (uint256, uint256, uint256, uint256, uint256, uint256);\r\n\r\n    /**\r\n     * @dev Get interval alpha and beta.\r\n     * @param _rowNum Interval row index.\r\n     * @param _colNum Interval column index.\r\n     * @return Interval alpha value (scaled up).\r\n     * @return Interval beta  value (scaled up).\r\n     */\r\n    function getIntervalCoefs(uint256 _rowNum, uint256 _colNum) external view returns (uint256, uint256);\r\n\r\n    /**\r\n     * @dev Get the amount of SGA required for moving to the next minting-point.\r\n     * @param _rowNum Interval row index.\r\n     * @return Required amount of SGA.\r\n     */\r\n    function getRequiredMintAmount(uint256 _rowNum) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/saga/interfaces/IMintingPointTimersManager.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n/**\r\n * @title Minting Point Timers Manager Interface.\r\n */\r\ninterface IMintingPointTimersManager {\r\n    /**\r\n     * @dev Start a given timestamp.\r\n     * @param _id The ID of the timestamp.\r\n     * @notice When tested, this timestamp will be either 'running' or 'expired'.\r\n     */\r\n    function start(uint256 _id) external;\r\n\r\n    /**\r\n     * @dev Reset a given timestamp.\r\n     * @param _id The ID of the timestamp.\r\n     * @notice When tested, this timestamp will be neither 'running' nor 'expired'.\r\n     */\r\n    function reset(uint256 _id) external;\r\n\r\n    /**\r\n     * @dev Get an indication of whether or not a given timestamp is 'running'.\r\n     * @param _id The ID of the timestamp.\r\n     * @return An indication of whether or not a given timestamp is 'running'.\r\n     * @notice Even if this timestamp is not 'running', it is not necessarily 'expired'.\r\n     */\r\n    function running(uint256 _id) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Get an indication of whether or not a given timestamp is 'expired'.\r\n     * @param _id The ID of the timestamp.\r\n     * @return An indication of whether or not a given timestamp is 'expired'.\r\n     * @notice Even if this timestamp is not 'expired', it is not necessarily 'running'.\r\n     */\r\n    function expired(uint256 _id) external view returns (bool);\r\n}\r\n\r\n// File: contracts/saga/interfaces/ISGAAuthorizationManager.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n/**\r\n * @title SGA Authorization Manager Interface.\r\n */\r\ninterface ISGAAuthorizationManager {\r\n    /**\r\n     * @dev Determine whether or not a user is authorized to buy SGA.\r\n     * @param _sender The address of the user.\r\n     * @return Authorization status.\r\n     */\r\n    function isAuthorizedToBuy(address _sender) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Determine whether or not a user is authorized to sell SGA.\r\n     * @param _sender The address of the user.\r\n     * @return Authorization status.\r\n     */\r\n    function isAuthorizedToSell(address _sender) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Determine whether or not a user is authorized to transfer SGA to another user.\r\n     * @param _sender The address of the source user.\r\n     * @param _target The address of the target user.\r\n     * @return Authorization status.\r\n     */\r\n    function isAuthorizedToTransfer(address _sender, address _target) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Determine whether or not a user is authorized to transfer SGA from one user to another user.\r\n     * @param _sender The address of the custodian user.\r\n     * @param _source The address of the source user.\r\n     * @param _target The address of the target user.\r\n     * @return Authorization status.\r\n     */\r\n    function isAuthorizedToTransferFrom(address _sender, address _source, address _target) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Determine whether or not a user is authorized for public operation.\r\n     * @param _sender The address of the user.\r\n     * @return Authorization status.\r\n     */\r\n    function isAuthorizedForPublicOperation(address _sender) external view returns (bool);\r\n}\r\n\r\n// File: contracts/saga/interfaces/IMintListener.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n/**\r\n * @title Mint Listener Interface.\r\n */\r\ninterface IMintListener {\r\n    /**\r\n     * @dev Mint SGA for SGN holders.\r\n     * @param _value The amount of SGA to mint.\r\n     */\r\n    function mintSgaForSgnHolders(uint256 _value) external;\r\n}\r\n\r\n// File: contracts/saga-genesis/interfaces/IMintHandler.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n/**\r\n * @title Mint Handler Interface.\r\n */\r\ninterface IMintHandler {\r\n    /**\r\n     * @dev Upon minting of SGN vested in delay.\r\n     * @param _index The minting-point index.\r\n     */\r\n    function mintSgnVestedInDelay(uint256 _index) external;\r\n}\r\n\r\n// File: contracts/saga-genesis/interfaces/IMintManager.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n/**\r\n * @title Mint Manager Interface.\r\n */\r\ninterface IMintManager {\r\n    /**\r\n     * @dev Return the current minting-point index.\r\n     */\r\n    function getIndex() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/contract_address_locator/interfaces/IContractAddressLocator.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n/**\r\n * @title Contract Address Locator Interface.\r\n */\r\ninterface IContractAddressLocator {\r\n    /**\r\n     * @dev Get the contract address mapped to a given identifier.\r\n     * @param _identifier The identifier.\r\n     * @return The contract address.\r\n     */\r\n    function getContractAddress(bytes32 _identifier) external view returns (address);\r\n\r\n    /**\r\n     * @dev Determine whether or not a contract address is relates to one of the given identifiers.\r\n     * @param _contractAddress The contract address to look for.\r\n     * @param _identifiers The identifiers.\r\n     * @return Is the contract address relates to one of the identifiers.\r\n     */\r\n    function isContractAddressRelates(address _contractAddress, bytes32[] _identifiers) external view returns (bool);\r\n}\r\n\r\n// File: contracts/contract_address_locator/ContractAddressLocatorHolder.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n\r\n/**\r\n * @title Contract Address Locator Holder.\r\n * @dev Hold a contract address locator, which maps a unique identifier to every contract address in the system.\r\n * @dev Any contract which inherits from this contract can retrieve the address of any contract in the system.\r\n * @dev Thus, any contract can remain \"oblivious\" to the replacement of any other contract in the system.\r\n * @dev In addition to that, any function in any contract can be restricted to a specific caller.\r\n */\r\ncontract ContractAddressLocatorHolder {\r\n    bytes32 internal constant _IAuthorizationDataSource_ = \"IAuthorizationDataSource\";\r\n    bytes32 internal constant _ISGNConversionManager_    = \"ISGNConversionManager\"      ;\r\n    bytes32 internal constant _IModelDataSource_         = \"IModelDataSource\"        ;\r\n    bytes32 internal constant _IPaymentHandler_          = \"IPaymentHandler\"            ;\r\n    bytes32 internal constant _IPaymentManager_          = \"IPaymentManager\"            ;\r\n    bytes32 internal constant _IPaymentQueue_            = \"IPaymentQueue\"              ;\r\n    bytes32 internal constant _IReconciliationAdjuster_  = \"IReconciliationAdjuster\"      ;\r\n    bytes32 internal constant _IIntervalIterator_        = \"IIntervalIterator\"       ;\r\n    bytes32 internal constant _IMintHandler_             = \"IMintHandler\"            ;\r\n    bytes32 internal constant _IMintListener_            = \"IMintListener\"           ;\r\n    bytes32 internal constant _IMintManager_             = \"IMintManager\"            ;\r\n    bytes32 internal constant _IPriceBandCalculator_     = \"IPriceBandCalculator\"       ;\r\n    bytes32 internal constant _IModelCalculator_         = \"IModelCalculator\"        ;\r\n    bytes32 internal constant _IRedButton_               = \"IRedButton\"              ;\r\n    bytes32 internal constant _IReserveManager_          = \"IReserveManager\"         ;\r\n    bytes32 internal constant _ISagaExchanger_           = \"ISagaExchanger\"          ;\r\n    bytes32 internal constant _IMonetaryModel_               = \"IMonetaryModel\"              ;\r\n    bytes32 internal constant _IMonetaryModelState_          = \"IMonetaryModelState\"         ;\r\n    bytes32 internal constant _ISGAAuthorizationManager_ = \"ISGAAuthorizationManager\";\r\n    bytes32 internal constant _ISGAToken_                = \"ISGAToken\"               ;\r\n    bytes32 internal constant _ISGATokenManager_         = \"ISGATokenManager\"        ;\r\n    bytes32 internal constant _ISGNAuthorizationManager_ = \"ISGNAuthorizationManager\";\r\n    bytes32 internal constant _ISGNToken_                = \"ISGNToken\"               ;\r\n    bytes32 internal constant _ISGNTokenManager_         = \"ISGNTokenManager\"        ;\r\n    bytes32 internal constant _IMintingPointTimersManager_             = \"IMintingPointTimersManager\"            ;\r\n    bytes32 internal constant _ITradingClasses_          = \"ITradingClasses\"         ;\r\n    bytes32 internal constant _IWalletsTradingLimiterValueConverter_        = \"IWalletsTLValueConverter\"       ;\r\n    bytes32 internal constant _IWalletsTradingDataSource_       = \"IWalletsTradingDataSource\"      ;\r\n    bytes32 internal constant _WalletsTradingLimiter_SGNTokenManager_          = \"WalletsTLSGNTokenManager\"         ;\r\n    bytes32 internal constant _WalletsTradingLimiter_SGATokenManager_          = \"WalletsTLSGATokenManager\"         ;\r\n    bytes32 internal constant _IETHConverter_             = \"IETHConverter\"   ;\r\n    bytes32 internal constant _ITransactionLimiter_      = \"ITransactionLimiter\"     ;\r\n    bytes32 internal constant _ITransactionManager_      = \"ITransactionManager\"     ;\r\n    bytes32 internal constant _IRateApprover_      = \"IRateApprover\"     ;\r\n\r\n    IContractAddressLocator private contractAddressLocator;\r\n\r\n    /**\r\n     * @dev Create the contract.\r\n     * @param _contractAddressLocator The contract address locator.\r\n     */\r\n    constructor(IContractAddressLocator _contractAddressLocator) internal {\r\n        require(_contractAddressLocator != address(0), \"locator is illegal\");\r\n        contractAddressLocator = _contractAddressLocator;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the contract address locator.\r\n     * @return The contract address locator.\r\n     */\r\n    function getContractAddressLocator() external view returns (IContractAddressLocator) {\r\n        return contractAddressLocator;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the contract address mapped to a given identifier.\r\n     * @param _identifier The identifier.\r\n     * @return The contract address.\r\n     */\r\n    function getContractAddress(bytes32 _identifier) internal view returns (address) {\r\n        return contractAddressLocator.getContractAddress(_identifier);\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @dev Determine whether or not the sender is relates to one of the identifiers.\r\n     * @param _identifiers The identifiers.\r\n     * @return Is the sender relates to one of the identifiers.\r\n     */\r\n    function isSenderAddressRelates(bytes32[] _identifiers) internal view returns (bool) {\r\n        return contractAddressLocator.isContractAddressRelates(msg.sender, _identifiers);\r\n    }\r\n\r\n    /**\r\n     * @dev Verify that the caller is mapped to a given identifier.\r\n     * @param _identifier The identifier.\r\n     */\r\n    modifier only(bytes32 _identifier) {\r\n        require(msg.sender == getContractAddress(_identifier), \"caller is illegal\");\r\n        _;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/saga/MintManager.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Details of usage of licenced software see here: https://www.saga.org/software/readme_v1\r\n */\r\n\r\n/**\r\n * @title Mint Manager.\r\n */\r\ncontract MintManager is IMintManager, ContractAddressLocatorHolder {\r\n    string public constant VERSION = \"1.0.0\";\r\n\r\n    uint256 public index;\r\n\r\n    /**\r\n     * @dev Create the contract.\r\n     * @param _contractAddressLocator The contract address locator.\r\n     */\r\n    constructor(IContractAddressLocator _contractAddressLocator) ContractAddressLocatorHolder(_contractAddressLocator) public {}\r\n\r\n    /**\r\n     * @dev Return the contract which implements the IModelDataSource interface.\r\n     */\r\n    function getModelDataSource() public view returns (IModelDataSource) {\r\n        return IModelDataSource(getContractAddress(_IModelDataSource_));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the contract which implements the IMintingPointTimersManager interface.\r\n     */\r\n    function getMintingPointTimersManager() public view returns (IMintingPointTimersManager) {\r\n        return IMintingPointTimersManager(getContractAddress(_IMintingPointTimersManager_));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the contract which implements the ISGAAuthorizationManager interface.\r\n     */\r\n    function getSGAAuthorizationManager() public view returns (ISGAAuthorizationManager) {\r\n        return ISGAAuthorizationManager(getContractAddress(_ISGAAuthorizationManager_));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the contract which implements the IMintHandler interface.\r\n     */\r\n    function getMintHandler() public view returns (IMintHandler) {\r\n        return IMintHandler(getContractAddress(_IMintHandler_));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the contract which implements the IMintListener interface.\r\n     */\r\n    function getMintListener() public view returns (IMintListener) {\r\n        return IMintListener(getContractAddress(_IMintListener_));\r\n    }\r\n\r\n    /**\r\n     * @dev Return whether or not the minting-state should be updated.\r\n     */\r\n    function isMintingStateOutdated() public view returns (bool) {\r\n        return getMintingPointTimersManager().expired(index + 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Update the minting-state if it is outdated.\r\n     */\r\n    function updateMintingState() external {\r\n        require(getSGAAuthorizationManager().isAuthorizedForPublicOperation(msg.sender), \"update minting state is not authorized\");\r\n        if (isMintingStateOutdated()) {\r\n            uint256 amount = getModelDataSource().getRequiredMintAmount(index);\r\n            getMintListener().mintSgaForSgnHolders(amount);\r\n            getMintHandler().mintSgnVestedInDelay(index + 1);\r\n            index += 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the current minting-point index.\r\n     */\r\n    function getIndex() external view returns (uint256) {\r\n        return index;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getSGAAuthorizationManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"index\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMintingStateOutdated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateMintingState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getModelDataSource\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractAddressLocator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMintHandler\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMintListener\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMintingPointTimersManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_contractAddressLocator\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"MintManager","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"6000","ConstructorArguments":"000000000000000000000000aabcd54faf94925adbe0df117c62961acecbacdb","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://20727e18dda68ad87dbfc84b4bdc7d6b749f45612188a6ab0c5e5cdec5cd0c38"}]}