{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/Ownable.sol\r\n\r\npragma solidity >0.4.0 <0.6.0;\r\n\r\ncontract Ownable {\r\n\r\n  address payable public owner;\r\n\r\n  constructor () public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n  \r\n  \r\n  function transferOwnership(address payable newOwner) external onlyOwner {\r\n    require(newOwner != address(0));      \r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/ReentrancyGuard.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ncontract ReentrancyGuard {\r\n    // counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private _guardCounter;\r\n\r\n    constructor () internal {\r\n        // The counter starts at one to prevent changing it from zero to a non-zero\r\n        // value, which is a more expensive operation.\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n}\r\n\r\n// File: contracts/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\nlibrary SafeMath {\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n   \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/DoubleBullZap.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\ninterface Invest2Fulcrum2xLongBTC {\r\n    function LetsInvest2Fulcrum2xLongBTC(address _towhomtoissue) external payable;\r\n}\r\n\r\n// this is the underlying contract that invests in 2xLongETH on Fulcrum\r\ninterface Invest2Fulcrum2xLongETH {\r\n    function LetsInvest2Fulcrum(address _towhomtoissue) external payable;\r\n}\r\n\r\n\r\n// through this contract we are putting 50% allocation to 2xLongETH and 50% to 2xLongBTC\r\ncontract DoubleBullZap is Ownable {\r\n    using SafeMath for uint;\r\n    // state variables\r\n    \r\n    \r\n    // - variables in relation to the percentages\r\n    uint public BTC2xLongPercentage = 50;\r\n    Invest2Fulcrum2xLongETH public Invest2Fulcrum2xLong_ETHContract = Invest2Fulcrum2xLongETH(0xAB58BBF6B6ca1B064aa59113AeA204F554E8fBAe);\r\n    Invest2Fulcrum2xLongBTC public Invest2Fulcrum2xLong_BTCContract = Invest2Fulcrum2xLongBTC(0xd455e7368BcaB144C2944aD679E4Aa10bB3766c1);\r\n\r\n    \r\n    // - in relation to the ETH held by this contract\r\n    uint public balance = address(this).balance;\r\n    \r\n    // - in relation to the emergency functioning of this contract\r\n    bool private stopped = false;\r\n\r\n    \r\n    // circuit breaker modifiers\r\n    modifier stopInEmergency {if (!stopped) _;}\r\n    modifier onlyInEmergency {if (stopped) _;}\r\n    \r\n \r\n\r\n    // this function should be called should we ever want to change the underlying Fulcrum Long ETHContract address\r\n    function set_Invest2Fulcrum2xLong_ETHContract (Invest2Fulcrum2xLongETH _Invest2Fulcrum2xLong_ETHContract) onlyOwner public {\r\n        Invest2Fulcrum2xLong_ETHContract = _Invest2Fulcrum2xLong_ETHContract;\r\n    }\r\n    \r\n    // this function should be called should we ever want to change the underlying Fulcrum Long ETHContract address\r\n    function set_Invest2Fulcrum2xLong_BTCContract (Invest2Fulcrum2xLongBTC _Invest2Fulcrum2xLong_BTCContract) onlyOwner public {\r\n        Invest2Fulcrum2xLong_BTCContract = _Invest2Fulcrum2xLong_BTCContract;\r\n    }\r\n    \r\n    // this function should be called should we ever want to change the portion to be invested in 2xLongBTC\r\n    function set_BTC2xLongPercentage (uint32 _BTC2xLongPercentage) onlyOwner public {\r\n        BTC2xLongPercentage = _BTC2xLongPercentage;\r\n    }\r\n    \r\n    // main function which will make the investments\r\n    function LetsInvest() public payable returns(uint) {\r\n        require (msg.value > 100000000000000);\r\n        require (msg.sender != address(0));\r\n        uint invest_amt = msg.value;\r\n        address payable investor = address(msg.sender);\r\n        uint BTC2xLongPortion = SafeMath.div(SafeMath.mul(invest_amt,BTC2xLongPercentage),100);\r\n        uint ETH2xLongPortion = SafeMath.sub(invest_amt, BTC2xLongPortion);\r\n        require (SafeMath.sub(invest_amt, SafeMath.add(BTC2xLongPortion, ETH2xLongPortion)) ==0 );\r\n        Invest2Fulcrum2xLong_BTCContract.LetsInvest2Fulcrum2xLongBTC.value(BTC2xLongPortion)(investor);\r\n        Invest2Fulcrum2xLong_ETHContract.LetsInvest2Fulcrum.value(ETH2xLongPortion)(investor);\r\n    }\r\n    \r\n    \r\n    \r\n    // fx in relation to ETH held by the contract sent by the owner\r\n    \r\n    // - this function lets you deposit ETH into this wallet\r\n    function depositETH() payable public onlyOwner returns (uint) {\r\n        balance += msg.value;\r\n    }\r\n    \r\n    // - fallback function let you / anyone send ETH to this wallet without the need to call any function\r\n    function() external payable {\r\n        if (msg.sender == owner) {\r\n            depositETH();\r\n        } else {\r\n            LetsInvest();\r\n        }\r\n    }\r\n    \r\n    // - to withdraw any ETH balance sitting in the contract\r\n    function withdraw() onlyOwner public{\r\n        owner.transfer(address(this).balance);\r\n    }\r\n    \r\n}","ABI":"[{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"BTC2xLongPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Invest2Fulcrum2xLong_BTCContract\",\"outputs\":[{\"internalType\":\"contract Invest2Fulcrum2xLongBTC\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Invest2Fulcrum2xLong_ETHContract\",\"outputs\":[{\"internalType\":\"contract Invest2Fulcrum2xLongETH\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"LetsInvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_BTC2xLongPercentage\",\"type\":\"uint32\"}],\"name\":\"set_BTC2xLongPercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract Invest2Fulcrum2xLongBTC\",\"name\":\"_Invest2Fulcrum2xLong_BTCContract\",\"type\":\"address\"}],\"name\":\"set_Invest2Fulcrum2xLong_BTCContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract Invest2Fulcrum2xLongETH\",\"name\":\"_Invest2Fulcrum2xLong_ETHContract\",\"type\":\"address\"}],\"name\":\"set_Invest2Fulcrum2xLong_ETHContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DoubleBullZap","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU GPLv2","SwarmSource":"bzzr://566bf420f8b3eb2f548e5977d792f0f5790b789574eb2e1e07db80a0438ea272"}]}