{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n\r\n        if (a == 0) {\r\n            return 0;\r\n\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n     \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n        \r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    //function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    //function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\ncontract JKLToken is IERC20 {\r\n\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => TimeLock[]) private _timeLocks;\r\n    mapping (address => uint256[]) private _locks;\r\n    \r\n    uint256 private _totalSupply;\r\n    address private _owner;\r\n    \r\n    uint256 _releaseTime;\r\n    \r\n    string public constant name = \"Bit JacKpot Lottery\";\r\n    string public constant symbol = \"JKL\";\r\n    uint8 public constant decimals = 18; \r\n    \r\n    \r\n\r\n    uint constant DAY_IN_SECONDS = 86400;\r\n    uint constant YEAR_IN_SECONDS = 31536000;\r\n    uint constant LEAP_YEAR_IN_SECONDS = 31622400;\r\n\r\n    uint constant HOUR_IN_SECONDS = 3600;\r\n    uint constant MINUTE_IN_SECONDS = 60;\r\n\r\n    uint16 constant ORIGIN_YEAR = 1970;\r\n\r\n     \r\n    \r\n    \r\n    struct TimeLock{\r\n        uint256 blockTime;\r\n        uint256 blockAmount;\r\n    }\r\n    \r\n    constructor(uint256 totalSupply) public{\r\n        _totalSupply = totalSupply;\r\n        _owner = msg.sender;\r\n        _balances[_owner] = _totalSupply;\r\n        _releaseTime =  block.timestamp + 86400 * 30 * 12 * 10; \r\n    }\r\n    \r\n    function getTimeStamp() public view returns(uint256) {\r\n        return block.timestamp;\r\n    }\r\n    \r\n    \r\n    function setReleaseTime(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minitue) public returns(bool){\r\n        require(msg.sender == _owner);\r\n        \r\n        uint256 timestamp = toTimestamp(year, month, day, hour, minitue, 0);\r\n         \r\n        require(block.timestamp < timestamp);\r\n        \r\n        _releaseTime = timestamp;\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function getReleaseTime() public view returns(uint256) {\r\n        return _releaseTime;\r\n    }\r\n    \r\n    \r\n    \r\n    function getPriveLockRatio() public view returns(uint256){\r\n        if(_releaseTime > block.timestamp){\r\n            return 100;\r\n        }\r\n        uint256 diff = block.timestamp - _releaseTime;\r\n        diff = (diff / (86400 * 30)) + 1;\r\n        //diff = (diff / 60) + 1;\r\n        if(diff > 10){\r\n            return 0;\r\n        }\r\n        \r\n        return (10 - diff) * 10;\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    function timeLock(address addr, uint256 amount , uint16 lockMonth) public returns(bool){\r\n        require(msg.sender == _owner);\r\n        require(lockMonth > 0);\r\n        require(amount <= getFreeAmount(addr));\r\n    \r\n        TimeLock memory timeLockTemp;\r\n        timeLockTemp.blockTime = block.timestamp + 86400 * 30 * lockMonth;\r\n        //timeLockTemp.blockTime = block.timestamp + 60 * lockMonth;\r\n        timeLockTemp.blockAmount = amount;\r\n        _timeLocks[addr].push(timeLockTemp);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function privateLock(address addr, uint256 amount) public returns(bool){\r\n        require(msg.sender == _owner);\r\n        require(amount <= getFreeAmount(addr));\r\n    \r\n        _locks[addr].push(amount);\r\n        \r\n        return true;\r\n    }\r\n\r\n    function privateSale(address to, uint256 amount) public returns(bool){\r\n        require(msg.sender == _owner);\r\n        \r\n        _transfer(_owner, to, amount);\r\n        \r\n        privateLock(to, amount);\r\n        \r\n        \r\n        return true;\r\n    }\r\n\r\n    \r\n\r\n    \r\n    function crowdSale(address to, uint256 amount,  uint16 lockMonth) public returns(bool){\r\n        require(msg.sender == _owner);\r\n        \r\n        _transfer(_owner, to, amount);\r\n        \r\n        if(lockMonth > 0){\r\n            timeLock(to, amount, lockMonth);\r\n        }\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function releaseLock(address owner, uint256 amount) public returns(bool){\r\n        require(msg.sender == _owner);    \r\n        \r\n        uint minIdx = 0;\r\n        uint256 minTime = 0;\r\n        uint arrayLength = _timeLocks[owner].length;\r\n        for (uint i=0; i<arrayLength; i++) {\r\n            if(block.timestamp < _timeLocks[owner][i].blockTime && _timeLocks[owner][i].blockAmount > 0){\r\n                if(minTime == 0 || minTime > _timeLocks[owner][i].blockTime){\r\n                    minIdx = i;\r\n                    minTime = _timeLocks[owner][i].blockTime;\r\n                }\r\n            }\r\n        }\r\n        \r\n        if(minTime >= 0){\r\n            if(amount > _timeLocks[owner][minIdx].blockAmount){\r\n                uint256 remain = amount - _timeLocks[owner][minIdx].blockAmount;\r\n                _timeLocks[owner][minIdx].blockAmount = 0;\r\n                releaseLock(owner, remain);\r\n            }else{\r\n                _timeLocks[owner][minIdx].blockAmount -= amount;\r\n            }\r\n            \r\n        }\r\n        \r\n        return true;\r\n    }\r\n    \r\n    \r\n    function getFreeAmount(address owner) public view returns(uint256){\r\n        return(balanceOf(owner) - getLockAmount(owner) - getPriveLockAmount(owner));\r\n    }\r\n    \r\n    function getLockAmount(address owner) public view returns(uint256){\r\n        uint256 result = 0;\r\n        uint arrayLength = _timeLocks[owner].length;\r\n        for (uint i=0; i<arrayLength; i++) {\r\n            if(block.timestamp < _timeLocks[owner][i].blockTime){\r\n                result += _timeLocks[owner][i].blockAmount;\r\n            }\r\n        }\r\n            \r\n        return(result);\r\n    }\r\n    \r\n    \r\n    function getPriveLockAmount(address owner) public view returns(uint256){\r\n        uint256 result = 0;\r\n        uint arrayLength = _locks[owner].length;\r\n        for (uint i=0; i<arrayLength; i++) {\r\n            result += _locks[owner][i];\r\n        }\r\n        \r\n        result = result * getPriveLockRatio() / 100;\r\n            \r\n        return(result);\r\n    }\r\n    \r\n\r\n    /**\r\n     * @dev Total number of tokens in existence\r\n     */\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param owner The address to query the balance of.\r\n     * @return A uint256 representing the amount owned by the passed address.\r\n     */\r\n\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token to a specified address\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Transfer token for a specified addresses\r\n     * @param from The address to transfer from.\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n        require(from == msg.sender);\r\n        \r\n        uint256 available = getFreeAmount(from);\r\n        require(available >= value, \"not enough token\");\r\n        \r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n\r\n\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n        require(account == msg.sender);\r\n        \r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account, deducting from the sender's allowance for said account. Uses the\r\n     * internal burn function.\r\n     * Emits an Approval event (reflecting the reduced allowance).\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n\r\n    function _burnFrom(address account, uint256 value) internal {\r\n        _burn(account, value);\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute, uint8 second) public pure returns (uint timestamp) {\r\n        uint16 i;\r\n\r\n        // Year\r\n        for (i = ORIGIN_YEAR; i < year; i++) {\r\n                if (isLeapYear(i)) {\r\n                        timestamp += LEAP_YEAR_IN_SECONDS;\r\n                }\r\n                else {\r\n                        timestamp += YEAR_IN_SECONDS;\r\n                }\r\n        }\r\n\r\n        // Month\r\n        uint8[12] memory monthDayCounts;\r\n        monthDayCounts[0] = 31;\r\n        if (isLeapYear(year)) {\r\n                monthDayCounts[1] = 29;\r\n        }\r\n        else {\r\n                monthDayCounts[1] = 28;\r\n        }\r\n        monthDayCounts[2] = 31;\r\n        monthDayCounts[3] = 30;\r\n        monthDayCounts[4] = 31;\r\n        monthDayCounts[5] = 30;\r\n        monthDayCounts[6] = 31;\r\n        monthDayCounts[7] = 31;\r\n        monthDayCounts[8] = 30;\r\n        monthDayCounts[9] = 31;\r\n        monthDayCounts[10] = 30;\r\n        monthDayCounts[11] = 31;\r\n\r\n        for (i = 1; i < month; i++) {\r\n                timestamp += DAY_IN_SECONDS * monthDayCounts[i - 1];\r\n        }\r\n\r\n        // Day\r\n        timestamp += DAY_IN_SECONDS * (day - 1);\r\n\r\n        // Hour\r\n        timestamp += HOUR_IN_SECONDS * (hour);\r\n\r\n        // Minute\r\n        timestamp += MINUTE_IN_SECONDS * (minute);\r\n\r\n        // Second\r\n        timestamp += second;\r\n\r\n        return timestamp;\r\n    }\r\n    \r\n    \r\n   function isLeapYear(uint16 year) public pure returns (bool) {\r\n            if (year % 4 != 0) {\r\n                    return false;\r\n            }\r\n            if (year % 100 != 0) {\r\n                    return true;\r\n            }\r\n            if (year % 400 != 0) {\r\n                    return false;\r\n            }\r\n            return true;\r\n    }\r\n\r\n    function leapYearsBefore(uint year) public pure returns (uint) {\r\n            year -= 1;\r\n            return year / 4 - year / 100 + year / 400;\r\n    }\r\n\r\n    function getDaysInMonth(uint8 month, uint16 year) public pure returns (uint8) {\r\n            if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\r\n                    return 31;\r\n            }\r\n            else if (month == 4 || month == 6 || month == 9 || month == 11) {\r\n                    return 30;\r\n            }\r\n            else if (isLeapYear(year)) {\r\n                    return 29;\r\n            }\r\n            else {\r\n                    return 28;\r\n            }\r\n    }\r\n\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"year\",\"type\":\"uint16\"},{\"name\":\"month\",\"type\":\"uint8\"},{\"name\":\"day\",\"type\":\"uint8\"},{\"name\":\"hour\",\"type\":\"uint8\"},{\"name\":\"minitue\",\"type\":\"uint8\"}],\"name\":\"setReleaseTime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getLockAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"privateLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPriveLockRatio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getReleaseTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"releaseLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"year\",\"type\":\"uint16\"},{\"name\":\"month\",\"type\":\"uint8\"},{\"name\":\"day\",\"type\":\"uint8\"},{\"name\":\"hour\",\"type\":\"uint8\"},{\"name\":\"minute\",\"type\":\"uint8\"},{\"name\":\"second\",\"type\":\"uint8\"}],\"name\":\"toTimestamp\",\"outputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"year\",\"type\":\"uint16\"}],\"name\":\"isLeapYear\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"lockMonth\",\"type\":\"uint16\"}],\"name\":\"crowdSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"lockMonth\",\"type\":\"uint16\"}],\"name\":\"timeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getPriveLockAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"year\",\"type\":\"uint256\"}],\"name\":\"leapYearsBefore\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"month\",\"type\":\"uint8\"},{\"name\":\"year\",\"type\":\"uint16\"}],\"name\":\"getDaysInMonth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"privateSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTimeStamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getFreeAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"JKLToken","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000009b18ab5df7180b6b8000000","Library":"","SwarmSource":"bzzr://f678bdc0e39e394c064fdad8e8555b568b9c6313a0fbc7b5bbd8daa77f9c13dd"}]}