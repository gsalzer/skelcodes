{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * Copyright 2017-2019, bZeroX, LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0.\r\n */\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, rounding up and truncating the quotient\r\n  */\r\n  function divCeil(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    return ((_a - 1) / _b) + 1;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\ncontract UserContract {\r\n    address public owner;\r\n    mapping (address => bool) public controllers;\r\n\r\n    constructor(\r\n        address _owner,\r\n        address[] memory _controllerList)\r\n        public\r\n    {\r\n        owner = _owner;\r\n\r\n        for(uint256 i=0; i < _controllerList.length; i++) {\r\n            controllers[_controllerList[i]] = true;\r\n        }\r\n    }\r\n\r\n    function transferAsset(\r\n        address asset,\r\n        address payable to,\r\n        uint256 amount)\r\n        public\r\n        returns (uint256 transferAmount)\r\n    {\r\n        require(controllers[msg.sender] || msg.sender == owner);\r\n\r\n        bool success;\r\n        if (asset == address(0)) {\r\n            transferAmount = amount == 0 ?\r\n                address(this).balance :\r\n                amount;\r\n            (success, ) = to.call.value(transferAmount)(\"\");\r\n            require(success);\r\n        } else {\r\n            bytes memory data;\r\n            if (amount == 0) {\r\n                (,data) = asset.call(\r\n                    abi.encodeWithSignature(\r\n                        \"balanceOf(address)\",\r\n                        address(this)\r\n                    )\r\n                );\r\n                assembly {\r\n                    transferAmount := mload(add(data, 32))\r\n                }\r\n            } else {\r\n                transferAmount = amount;\r\n            }\r\n            (success,) = asset.call(\r\n                abi.encodeWithSignature(\r\n                    \"transfer(address,uint256)\",\r\n                    to,\r\n                    transferAmount\r\n                )\r\n            );\r\n            require(success);\r\n        }\r\n    }\r\n\r\n    function setControllers(\r\n        address[] memory _controllerList,\r\n        bool[] memory _toggle)\r\n        public\r\n    {\r\n        require(msg.sender == owner && _controllerList.length == _toggle.length);\r\n\r\n        for (uint256 i=0; i < _controllerList.length; i++) {\r\n            controllers[_controllerList[i]] = _toggle[i];\r\n        }\r\n    }\r\n}\r\n\r\ncontract UserContractRegistry is Ownable {\r\n\r\n    mapping (address => bool) public controllers;\r\n    mapping (address => UserContract) public userContracts;\r\n\r\n    function setControllers(\r\n        address[] memory controller,\r\n        bool[] memory toggle)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(controller.length == toggle.length, \"count mismatch\");\r\n\r\n        for (uint256 i=0; i < controller.length; i++) {\r\n            controllers[controller[i]] = toggle[i];\r\n        }\r\n    }\r\n\r\n    function setContract(\r\n        address user,\r\n        UserContract userContract)\r\n        public\r\n    {\r\n        require(controllers[msg.sender], \"unauthorized\");\r\n        userContracts[user] = userContract;\r\n    }\r\n}\r\n\r\ninterface ENSSimple {\r\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external;\r\n    function setResolver(bytes32 node, address resolver) external;\r\n    function setOwner(bytes32 node, address owner) external;\r\n    function setTTL(bytes32 node, uint64 ttl) external;\r\n    function owner(bytes32 node) external view returns (address);\r\n    function resolver(bytes32 node) external view returns (address);\r\n    function ttl(bytes32 node) external view returns (uint64);\r\n}\r\n\r\ninterface ResolverSimple {\r\n    function setAddr(bytes32 node, address addr) external;\r\n    function addr(bytes32 node) external view returns (address);\r\n}\r\n\r\ncontract ENSLoanOpenerStorage is Ownable {\r\n    // tokenloan.eth\r\n    bytes32 internal constant tokenloanHash = 0x412c2f8803a30232df76357316f10634835ba4cd288f6002d1d70cb72fac904b;\r\n\r\n    address public bZxContract;\r\n    address public bZxVault;\r\n    address public loanTokenLender;\r\n    address public loanTokenAddress;\r\n    address public wethContract;\r\n\r\n    UserContractRegistry public userContractRegistry;\r\n\r\n    address[] public controllerList;\r\n\r\n    uint256 public initialLoanDuration = 7884000; // approximately 3 months\r\n\r\n    // ENS\r\n    ENSSimple public ENSContract;\r\n    ResolverSimple public ResolverContract;\r\n}\r\n\r\ncontract ENSLoanOpenerProxy is ENSLoanOpenerStorage {\r\n\r\n    address internal target_;\r\n\r\n    constructor(\r\n        address _newTarget)\r\n        public\r\n    {\r\n        _setTarget(_newTarget);\r\n    }\r\n\r\n    function()\r\n        external\r\n        payable\r\n    {\r\n        address target = target_;\r\n        bytes memory data = msg.data;\r\n        assembly {\r\n            let result := delegatecall(gas, target, add(data, 0x20), mload(data), 0, 0)\r\n            let size := returndatasize\r\n            let ptr := mload(0x40)\r\n            returndatacopy(ptr, 0, size)\r\n            switch result\r\n            case 0 { revert(ptr, size) }\r\n            default { return(ptr, size) }\r\n        }\r\n    }\r\n\r\n    function setTarget(\r\n        address _newTarget)\r\n        public\r\n        onlyOwner\r\n    {\r\n        _setTarget(_newTarget);\r\n    }\r\n\r\n    function _setTarget(\r\n        address _newTarget)\r\n        internal\r\n    {\r\n        require(_isContract(_newTarget), \"target not a contract\");\r\n        target_ = _newTarget;\r\n    }\r\n\r\n    function _isContract(\r\n        address addr)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        uint256 size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"initialLoanDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ENSContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wethContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"loanTokenLender\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ResolverContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTarget\",\"type\":\"address\"}],\"name\":\"setTarget\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"loanTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bZxVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bZxContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"userContractRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"controllerList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_newTarget\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ENSLoanOpenerProxy","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000017e23008ab10a8acf086b27eeca523c292f75cc","Library":"","LicenseType":"None","SwarmSource":"bzzr://d43b5d1d30936bc60a248ad2944329df0a7a4b260446b57f2a104c7cc66a7dcd"}]}