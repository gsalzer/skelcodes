{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/utils/LoggingErrors.sol\r\n\r\npragma solidity ^0.4.11;\r\n\r\n/**\r\n * @title Log Various Error Types\r\n * @author Adam Lemmon <adam@oraclize.it>\r\n * @dev Inherit this contract and your may now log errors easily\r\n * To support various error types, params, etc.\r\n */\r\ncontract LoggingErrors {\r\n  /**\r\n  * Events\r\n  */\r\n  event LogErrorString(string errorString);\r\n\r\n  /**\r\n  * Error cases\r\n  */\r\n\r\n  /**\r\n   * @dev Default error to simply log the error message and return\r\n   * @param _errorMessage The error message to log\r\n   * @return ALWAYS false\r\n   */\r\n  function error(string _errorMessage) internal returns(bool) {\r\n    emit LogErrorString(_errorMessage);\r\n    return false;\r\n  }\r\n}\r\n\r\n// File: contracts/wallet/WalletConnector.sol\r\n\r\npragma solidity ^0.4.15;\r\n\r\n\r\n/**\r\n * @title Wallet Connector\r\n * @dev Connect the wallet contract to the correct Wallet Logic version\r\n */\r\ncontract WalletConnector is LoggingErrors {\r\n  /**\r\n   * Storage\r\n   */\r\n  address public owner_;\r\n  address public latestLogic_;\r\n  uint256 public latestVersion_;\r\n  mapping(uint256 => address) public logicVersions_;\r\n  uint256 public birthBlock_;\r\n\r\n  /**\r\n   * Events\r\n   */\r\n  event LogLogicVersionAdded(uint256 version);\r\n  event LogLogicVersionRemoved(uint256 version);\r\n\r\n  /**\r\n   * @dev Constructor to set the latest logic address\r\n   * @param _latestVersion Latest version of the wallet logic\r\n   * @param _latestLogic Latest address of the wallet logic contract\r\n   */\r\n  function WalletConnector (\r\n    uint256 _latestVersion,\r\n    address _latestLogic\r\n  ) public {\r\n    owner_ = msg.sender;\r\n    latestLogic_ = _latestLogic;\r\n    latestVersion_ = _latestVersion;\r\n    logicVersions_[_latestVersion] = _latestLogic;\r\n    birthBlock_ = block.number;\r\n  }\r\n\r\n  /**\r\n   * Add a new version of the logic contract\r\n   * @param _version The version to be associated with the new contract.\r\n   * @param _logic New logic contract.\r\n   * @return Success of the transaction.\r\n   */\r\n  function addLogicVersion (\r\n    uint256 _version,\r\n    address _logic\r\n  ) external\r\n    returns(bool)\r\n  {\r\n    if (msg.sender != owner_)\r\n      return error('msg.sender != owner, WalletConnector.addLogicVersion()');\r\n\r\n    if (logicVersions_[_version] != 0)\r\n      return error('Version already exists, WalletConnector.addLogicVersion()');\r\n\r\n    // Update latest if this is the latest version\r\n    if (_version > latestVersion_) {\r\n      latestLogic_ = _logic;\r\n      latestVersion_ = _version;\r\n    }\r\n\r\n    logicVersions_[_version] = _logic;\r\n    LogLogicVersionAdded(_version);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Remove a version. Cannot remove the latest version.\r\n   * @param  _version The version to remove.\r\n   */\r\n  function removeLogicVersion(uint256 _version) external {\r\n    require(msg.sender == owner_);\r\n    require(_version != latestVersion_);\r\n    delete logicVersions_[_version];\r\n    LogLogicVersionRemoved(_version);\r\n  }\r\n\r\n  /**\r\n   * Constants\r\n   */\r\n\r\n  /**\r\n   * Called from user wallets in order to upgrade their logic.\r\n   * @param _version The version to upgrade to. NOTE pass in 0 to upgrade to latest.\r\n   * @return The address of the logic contract to upgrade to.\r\n   */\r\n  function getLogic(uint256 _version)\r\n    external\r\n    constant\r\n    returns(address)\r\n  {\r\n    if (_version == 0)\r\n      return latestLogic_;\r\n    else\r\n      return logicVersions_[_version];\r\n  }\r\n}\r\n\r\n// File: contracts/wallet/WalletBuilderInterface.sol\r\n\r\npragma solidity ^0.4.15;\r\n\r\n\r\n\r\n/**\r\n * @title Wallet to hold and trade ERC20 tokens and ether\r\n */\r\ninterface WalletBuilderInterface {\r\n\r\n  /**\r\n   * @dev build a new trading wallet and returns its address\r\n   * @param _owner user EOA of the created trading wallet\r\n   * @param _exchange exchange address\r\n   */\r\n  function buildWallet(address _owner, address _exchange) external returns(address);\r\n}\r\n\r\n// File: contracts/token/ERC20Interface.sol\r\n\r\npragma solidity ^0.4.11;\r\n\r\ninterface Token {\r\n  /// @return total amount of tokens\r\n  function totalSupply() external constant returns (uint256 supply);\r\n\r\n  /// @param _owner The address from which the balance will be retrieved\r\n  /// @return The balance\r\n  function balanceOf(address _owner) external constant returns (uint256 balance);\r\n\r\n  /// @notice send `_value` token to `_to` from `msg.sender`\r\n  /// @param _to The address of the recipient\r\n  /// @param _value The amount of token to be transferred\r\n  /// @return Whether the transfer was successful or not\r\n  function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n  /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n  /// @param _from The address of the sender\r\n  /// @param _to The address of the recipient\r\n  /// @param _value The amount of token to be transferred\r\n  /// @return Whether the transfer was successful or not\r\n  function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n\r\n  /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n  /// @param _spender The address of the account able to transfer the tokens\r\n  /// @param _value The amount of wei to be approved for transfer\r\n  /// @return Whether the approval was successful or not\r\n  function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n  /// @param _owner The address of the account owning tokens\r\n  /// @param _spender The address of the account able to transfer the tokens\r\n  /// @return Amount of remaining tokens allowed to spent\r\n  function allowance(address _owner, address _spender) external constant returns (uint256 remaining);\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n  function decimals() external constant returns(uint);\r\n  function name() external constant returns(string);\r\n}\r\n\r\n// File: contracts/wallet/WalletV3.sol\r\n\r\npragma solidity ^0.4.15;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Wallet to hold and trade ERC20 tokens and ether\r\n * @dev User wallet to interact with the exchange.\r\n * all tokens and ether held in this wallet, 1 to 1 mapping to user EOAs.\r\n */\r\ncontract WalletV3 is LoggingErrors {\r\n  /**\r\n   * Storage\r\n   */\r\n  // Vars included in wallet logic \"lib\", the order must match between Wallet and Logic\r\n  address public owner_;\r\n  address public exchange_;\r\n  mapping(address => uint256) public tokenBalances_;\r\n\r\n  address public logic_; // storage location 0x3 loaded for delegatecalls so this var must remain at index 3\r\n  uint256 public birthBlock_;\r\n\r\n  WalletConnector private connector_;\r\n\r\n  /**\r\n   * Events\r\n   */\r\n  event LogDeposit(address token, uint256 amount, uint256 balance);\r\n  event LogWithdrawal(address token, uint256 amount, uint256 balance);\r\n\r\n  /**\r\n   * @dev Contract constructor. Set user as owner and connector address.\r\n   * @param _owner The address of the user's EOA, wallets created from the exchange\r\n   * so must past in the owner address, msg.sender == exchange.\r\n   * @param _connector The wallet connector to be used to retrieve the wallet logic\r\n   */\r\n  constructor(address _owner, address _connector, address _exchange) public {\r\n    owner_ = _owner;\r\n    connector_ = WalletConnector(_connector);\r\n    exchange_ = _exchange;\r\n    logic_ = connector_.latestLogic_();\r\n    birthBlock_ = block.number;\r\n  }\r\n\r\n  function () external payable {}\r\n\r\n  /**\r\n  * External\r\n  */\r\n\r\n  /**\r\n   * @dev Deposit ether into this wallet, default to address 0 for consistent token lookup.\r\n   */\r\n  function depositEther()\r\n    external\r\n    payable\r\n  {\r\n    require(\r\n      logic_.delegatecall(abi.encodeWithSignature('deposit(address,uint256)', 0, msg.value)),\r\n      \"depositEther() failed\"\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Deposit any ERC20 token into this wallet.\r\n   * @param _token The address of the existing token contract.\r\n   * @param _amount The amount of tokens to deposit.\r\n   * @return Bool if the deposit was successful.\r\n   */\r\n  function depositERC20Token (\r\n    address _token,\r\n    uint256 _amount\r\n  ) external\r\n    returns(bool)\r\n  {\r\n    // ether\r\n    if (_token == 0)\r\n      return error('Cannot deposit ether via depositERC20, Wallet.depositERC20Token()');\r\n\r\n    require(\r\n      logic_.delegatecall(abi.encodeWithSignature('deposit(address,uint256)', _token, _amount)),\r\n      \"depositERC20Token() failed\"\r\n    );\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev The result of an order, update the balance of this wallet.\r\n   * param _token The address of the token balance to update.\r\n   * param _amount The amount to update the balance by.\r\n   * param _subtractionFlag If true then subtract the token amount else add.\r\n   * @return Bool if the update was successful.\r\n   */\r\n  function updateBalance (\r\n    address /*_token*/,\r\n    uint256 /*_amount*/,\r\n    bool /*_subtractionFlag*/\r\n  ) external\r\n    returns(bool)\r\n  {\r\n    assembly {\r\n      calldatacopy(0x40, 0, calldatasize)\r\n      delegatecall(gas, sload(0x3), 0x40, calldatasize, 0, 32)\r\n      return(0, 32)\r\n      pop\r\n    }\r\n  }\r\n\r\n  /**\r\n   * User may update to the latest version of the exchange contract.\r\n   * Note that multiple versions are NOT supported at this time and therefore if a\r\n   * user does not wish to update they will no longer be able to use the exchange.\r\n   * @param _exchange The new exchange.\r\n   * @return Success of this transaction.\r\n   */\r\n  function updateExchange(address _exchange)\r\n    external\r\n    returns(bool)\r\n  {\r\n    if (msg.sender != owner_)\r\n      return error('msg.sender != owner_, Wallet.updateExchange()');\r\n\r\n    // If subsequent messages are not sent from this address all orders will fail\r\n    exchange_ = _exchange;\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * User may update to a new or older version of the logic contract.\r\n   * @param _version The versin to update to.\r\n   * @return Success of this transaction.\r\n   */\r\n  function updateLogic(uint256 _version)\r\n    external\r\n    returns(bool)\r\n  {\r\n    if (msg.sender != owner_)\r\n      return error('msg.sender != owner_, Wallet.updateLogic()');\r\n\r\n    address newVersion = connector_.getLogic(_version);\r\n\r\n    // Invalid version as defined by connector\r\n    if (newVersion == 0)\r\n      return error('Invalid version, Wallet.updateLogic()');\r\n\r\n    logic_ = newVersion;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Verify an order that the Exchange has received involving this wallet.\r\n   * Internal checks and then authorize the exchange to move the tokens.\r\n   * If sending ether will transfer to the exchange to broker the trade.\r\n   * param _token The address of the token contract being sold.\r\n   * param _amount The amount of tokens the order is for.\r\n   * param _fee The fee for the current trade.\r\n   * param _feeToken The token of which the fee is to be paid in.\r\n   * @return If the order was verified or not.\r\n   */\r\n  function verifyOrder (\r\n    address /*_token*/,\r\n    uint256 /*_amount*/,\r\n    uint256 /*_fee*/,\r\n    address /*_feeToken*/\r\n  ) external\r\n    returns(bool)\r\n  {\r\n    assembly {\r\n      calldatacopy(0x40, 0, calldatasize)\r\n      delegatecall(gas, sload(0x3), 0x40, calldatasize, 0, 32)\r\n      return(0, 32)\r\n      pop\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Withdraw any token, including ether from this wallet to an EOA.\r\n   * param _token The address of the token to withdraw.\r\n   * param _amount The amount to withdraw.\r\n   * @return Success of the withdrawal.\r\n   */\r\n  function withdraw(address /*_token*/, uint256 /*_amount*/)\r\n    external\r\n    returns(bool)\r\n  {\r\n    if(msg.sender != owner_)\r\n      return error('msg.sender != owner, Wallet.withdraw()');\r\n\r\n    assembly {\r\n      calldatacopy(0x40, 0, calldatasize)\r\n      delegatecall(gas, sload(0x3), 0x40, calldatasize, 0, 32)\r\n      return(0, 32)\r\n      pop\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Constants\r\n   */\r\n\r\n  /**\r\n   * @dev Get the balance for a specific token.\r\n   * @param _token The address of the token contract to retrieve the balance of.\r\n   * @return The current balance within this contract.\r\n   */\r\n  function balanceOf(address _token)\r\n    public\r\n    view\r\n    returns(uint)\r\n  {\r\n    if (_token == address(0)) {\r\n      return address(this).balance;\r\n    } else {\r\n      return Token(_token).balanceOf(this);\r\n    }\r\n  }\r\n\r\n  function walletVersion() external pure returns(uint){\r\n    return 3;\r\n  }\r\n}\r\n\r\n// File: contracts/wallet/WalletV3Builder.sol\r\n\r\npragma solidity ^0.4.15;\r\n\r\n\r\n\r\n/**\r\n * @title Wallet to hold and trade ERC20 tokens and ether\r\n * @dev User wallet to interact with the exchange.\r\n * all tokens and ether held in this wallet, 1 to 1 mapping to user EOAs.\r\n */\r\ncontract WalletV3Builder is WalletBuilderInterface {\r\n\r\n  address public connector;\r\n\r\n  /**\r\n   * @dev Contract constructor. Set user as owner and connector address.\r\n   * @param _connector The wallet connector to be used to retrieve the wallet logic\r\n   */\r\n  constructor (address _connector) public {\r\n    connector = _connector;\r\n  }\r\n\r\n  /**\r\n   * @dev build a new trading wallet and returns its address\r\n   * @param _owner user EOA of the created trading wallet\r\n   * @param _exchange exchange address\r\n   */\r\n  function buildWallet(address _owner, address _exchange) external returns(address) {\r\n    return new WalletV3(_owner, connector, _exchange);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"connector\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_exchange\",\"type\":\"address\"}],\"name\":\"buildWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_connector\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"WalletV3Builder","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000003d6e7b2f48120fd57a89ff0bbd56e9ec39af21c","Library":"","SwarmSource":"bzzr://640bf6e34785d1969582b939c005a3a6aad93f6e3fb484113c5c22d510e1fa6f"}]}