{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Governance {\r\n    using SafeMath for uint256;\r\n    mapping(bytes32 => Proposal) public proposals;\r\n    bytes32[] public allProposals;\r\n    mapping(address => bool) public isVoter;\r\n    uint256 public voters;\r\n\r\n    struct Proposal {\r\n        bool finished;\r\n        uint256 yesVotes;\r\n        uint256 noVotes;\r\n        mapping(address => bool) voted;\r\n        address targetContract;\r\n        bytes transaction;\r\n    }\r\n\r\n    event ProposalStarted(bytes32 proposalHash);\r\n    event ProposalFinished(bytes32 proposalHash);\r\n    event ProposalExecuted(bytes32 proposalHash);\r\n    event Vote(bytes32 proposalHash, bool vote, uint256 yesVotes, uint256 noVotes, uint256 voters);\r\n    event VoterAdded(address voter);\r\n    event VoterDeleted(address voter);\r\n\r\n    constructor() public {\r\n        isVoter[msg.sender] = true;\r\n        voters = 1;\r\n    }\r\n\r\n    modifier onlyVoter() {\r\n        require(isVoter[msg.sender], \"Should be voter\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyMe() {\r\n        require(msg.sender == address(this), \"Call via Governance\");\r\n        _;\r\n    }\r\n\r\n    function newProposal( address _targetContract, bytes memory _transaction ) public onlyVoter {\r\n        require(_targetContract != address(0), \"Address must be non-zero\");\r\n        require(_transaction.length >= 4, \"Tx must be 4+ bytes\");\r\n        bytes32 _proposalHash = keccak256(abi.encodePacked(_targetContract, _transaction, now));\r\n        require(proposals[_proposalHash].transaction.length == 0, \"The poll has already been initiated\");\r\n        proposals[_proposalHash].targetContract = _targetContract;\r\n        proposals[_proposalHash].transaction = _transaction;\r\n        allProposals.push(_proposalHash);\r\n        emit ProposalStarted(_proposalHash);\r\n    }\r\n\r\n    function vote(bytes32 _proposalHash, bool _yes) public onlyVoter { // solhint-disable code-complexity\r\n        require(!proposals[_proposalHash].voted[msg.sender], \"Already voted\");\r\n        require(!proposals[_proposalHash].finished, \"Already finished\");\r\n        require(voters > 0, \"Should have one or more voters\");\r\n        if (_yes) {\r\n            proposals[_proposalHash].yesVotes = proposals[_proposalHash].yesVotes.add(1);\r\n        } else {\r\n            proposals[_proposalHash].noVotes = proposals[_proposalHash].noVotes.add(1);\r\n        }\r\n        emit Vote(_proposalHash, _yes, proposals[_proposalHash].yesVotes, proposals[_proposalHash].noVotes, voters);\r\n        proposals[_proposalHash].voted[msg.sender] = true;\r\n        if (voters == 1) {\r\n            if (proposals[_proposalHash].yesVotes > 0) {\r\n                executeProposal(_proposalHash);\r\n            }\r\n            finishProposal(_proposalHash);\r\n            return();\r\n        }\r\n        if (voters == 2) {\r\n            if (proposals[_proposalHash].yesVotes == 2) {\r\n                executeProposal(_proposalHash);\r\n                finishProposal(_proposalHash);\r\n            } else if (proposals[_proposalHash].noVotes == 1) {\r\n                finishProposal(_proposalHash);\r\n            }\r\n            return();\r\n        }\r\n        if (proposals[_proposalHash].yesVotes > voters.div(2)) {\r\n            executeProposal(_proposalHash);\r\n            finishProposal(_proposalHash);\r\n            return();\r\n        } else if (proposals[_proposalHash].noVotes > voters.div(2)) {\r\n            finishProposal(_proposalHash);\r\n            return();\r\n        }\r\n    }\r\n\r\n    function addVoter(address _address) public onlyMe {\r\n        require(_address != address(0), \"Need non-zero address\");\r\n        require(!isVoter[_address], \"Already in voters list\");\r\n        isVoter[_address] = true;\r\n        voters = voters.add(1);\r\n        emit VoterAdded(_address);\r\n    }\r\n\r\n    function delVoter(address _address) public onlyMe {\r\n        require(msg.sender == address(this), \"Call via Governance procedure\");\r\n        require(isVoter[_address], \"Not in voters list\");\r\n        isVoter[_address] = false;\r\n        voters = voters.sub(1);\r\n        emit VoterDeleted(_address);\r\n    }\r\n\r\n    function executeProposal(bytes32 _proposalHash) internal {\r\n        require(!proposals[_proposalHash].finished, \"Already finished\");\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returnData) = address(\r\n            proposals[_proposalHash].targetContract).call(proposals[_proposalHash].transaction\r\n        );\r\n        require(success, string(returnData));\r\n        emit ProposalExecuted(_proposalHash);\r\n    }\r\n\r\n    function finishProposal(bytes32 _proposalHash) internal {\r\n        require(!proposals[_proposalHash].finished, \"Already finished\");\r\n        proposals[_proposalHash].finished = true;\r\n        emit ProposalFinished(_proposalHash);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_targetContract\",\"type\":\"address\"},{\"name\":\"_transaction\",\"type\":\"bytes\"}],\"name\":\"newProposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"proposals\",\"outputs\":[{\"name\":\"finished\",\"type\":\"bool\"},{\"name\":\"yesVotes\",\"type\":\"uint256\"},{\"name\":\"noVotes\",\"type\":\"uint256\"},{\"name\":\"targetContract\",\"type\":\"address\"},{\"name\":\"transaction\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"voters\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allProposals\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposalHash\",\"type\":\"bytes32\"},{\"name\":\"_yes\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isVoter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"delVoter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addVoter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposalHash\",\"type\":\"bytes32\"}],\"name\":\"ProposalStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposalHash\",\"type\":\"bytes32\"}],\"name\":\"ProposalFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposalHash\",\"type\":\"bytes32\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"vote\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"yesVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"noVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"voters\",\"type\":\"uint256\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"VoterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"VoterDeleted\",\"type\":\"event\"}]","ContractName":"Governance","CompilerVersion":"v0.5.9+commit.e560f70d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ce17a7342315951c7fd8c21598fe25311b3e056f8c6df07fed77ef917992f75e"}]}