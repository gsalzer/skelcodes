{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.11;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Math\r\n * @dev Assorted math operations\r\n */\r\nlibrary Math {\r\n    /**\r\n    * @dev Returns the largest of two numbers.\r\n    */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the smallest of two numbers.\r\n    */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n    * @dev Calculates the average of two numbers. Since these are integers,\r\n    * averages of an even and odd number cannot be represented, and will be\r\n    * rounded down.\r\n    */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping (address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev give an account access to this role\r\n   */\r\n  function add(Role storage role, address account) internal {\r\n    require(account != address(0));\r\n    require(!has(role, account));\r\n\r\n    role.bearer[account] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev remove an account's access to this role\r\n   */\r\n  function remove(Role storage role, address account) internal {\r\n    require(account != address(0));\r\n    require(has(role, account));\r\n\r\n    role.bearer[account] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev check if an account has this role\r\n   * @return bool\r\n   */\r\n  function has(Role storage role, address account)\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    require(account != address(0));\r\n    return role.bearer[account];\r\n  }\r\n}\r\n\r\n\r\ncontract DepositorRole {\r\n  using Roles for Roles.Role;\r\n\r\n  event DepositorAdded(address indexed account);\r\n  event DepositorRemoved(address indexed account);\r\n\r\n  Roles.Role private depositors;\r\n\r\n  constructor() internal {\r\n    _addDepositor(msg.sender);\r\n  }\r\n\r\n  modifier onlyDepositor() {\r\n    require(isDepositor(msg.sender));\r\n    _;\r\n  }\r\n\r\n  function isDepositor(address account) public view returns (bool) {\r\n    return depositors.has(account);\r\n  }\r\n\r\n  function addDepositor(address account) public onlyDepositor {\r\n    _addDepositor(account);\r\n  }\r\n\r\n  function renounceDepositor() public {\r\n    _removeDepositor(msg.sender);\r\n  }\r\n\r\n  function _addDepositor(address account) internal {\r\n    depositors.add(account);\r\n    emit DepositorAdded(account);\r\n  }\r\n\r\n  function _removeDepositor(address account) internal {\r\n    depositors.remove(account);\r\n    emit DepositorRemoved(account);\r\n  }\r\n}\r\n\r\n\r\ncontract TraderRole {\r\n  using Roles for Roles.Role;\r\n\r\n  event TraderAdded(address indexed account);\r\n  event TraderRemoved(address indexed account);\r\n\r\n  Roles.Role private traders;\r\n\r\n  constructor() internal {\r\n    _addTrader(msg.sender);\r\n  }\r\n\r\n  modifier onlyTrader() {\r\n    require(isTrader(msg.sender));\r\n    _;\r\n  }\r\n\r\n  function isTrader(address account) public view returns (bool) {\r\n    return traders.has(account);\r\n  }\r\n\r\n  function addTrader(address account) public onlyTrader {\r\n    _addTrader(account);\r\n  }\r\n\r\n  function renounceTrader() public {\r\n    _removeTrader(msg.sender);\r\n  }\r\n\r\n  function _addTrader(address account) internal {\r\n    traders.add(account);\r\n    emit TraderAdded(account);\r\n  }\r\n\r\n  function _removeTrader(address account) internal {\r\n    traders.remove(account);\r\n    emit TraderRemoved(account);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        require(token.transfer(to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        require(token.transferFrom(from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require((value == 0) || (token.allowance(msg.sender, spender) == 0));\r\n        require(token.approve(spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        require(token.approve(spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        require(token.approve(spender, newAllowance));\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @notice Token bank contract\r\n * @dev To use Token Bank, mint ERC20 tokens for this contract\r\n */\r\ncontract TokenBank is Ownable, DepositorRole, TraderRole {\r\n    using Math for uint256;\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // this token bank contract will use this binded ERC20 token\r\n    IERC20 public bindedToken;\r\n\r\n    // use deposited[user] to get the deposited ERC20 tokens\r\n    mapping(address => uint256) public deposited;\r\n\r\n    // address of fee collector\r\n    address public feeCollector;\r\n   \r\n    event TokenBinded(\r\n        address indexed binder,\r\n        address indexed previousToken,\r\n        address indexed newToken\r\n    );\r\n\r\n    event FeeCollectorSet(\r\n        address indexed setter,\r\n        address indexed previousFeeCollector,\r\n        address indexed newFeeCollector\r\n    );\r\n\r\n    event FeeCollected(\r\n        address indexed collector,\r\n        address indexed collectTo,\r\n        uint256 amount\r\n    );\r\n\r\n    event Deposited(\r\n        address indexed depositor,\r\n        address indexed receiver,\r\n        uint256 amount,\r\n        uint256 balance\r\n    );\r\n\r\n    event BulkDeposited(\r\n        address indexed trader,\r\n        uint256 totalAmount,\r\n        uint256 requestNum\r\n    );\r\n\r\n    event Withdrawn(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 amount,\r\n        uint256 fee,\r\n        uint256 balance\r\n    );\r\n\r\n    event BulkWithdrawn(\r\n        address indexed trader,\r\n        uint256 requestNum\r\n    );\r\n\r\n    event Transferred(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 amount,\r\n        uint256 fee,\r\n        uint256 balance\r\n    );\r\n\r\n    event BulkTransferred(\r\n        address indexed trader,\r\n        uint256 requestNum\r\n    );\r\n\r\n    /**\r\n     * @param addrs addrs[0]: ERC20; addrs[1]: fee collector\r\n     */\r\n    constructor(\r\n        address[] memory addrs\r\n    )\r\n        public\r\n    {\r\n        bindedToken = IERC20(addrs[0]);\r\n        feeCollector = addrs[1];\r\n    }\r\n\r\n    /**\r\n     * @param token Address of ERC20 token to bind for bank\r\n     */\r\n    function bindToken(address token) external onlyOwner {\r\n        emit TokenBinded(msg.sender, address(bindedToken), token);\r\n        bindedToken = IERC20(token);\r\n    }\r\n\r\n    /**\r\n     * @param collector New fee collector\r\n     */\r\n    function setFeeCollector(address collector) external onlyOwner {\r\n        emit FeeCollectorSet(msg.sender, feeCollector, collector);\r\n        feeCollector = collector;\r\n    }\r\n\r\n    /**\r\n     * @dev Collect fee from Token Bank to ERC20 token\r\n     */\r\n    function collectFee() external onlyOwner {\r\n        uint256 amount = deposited[feeCollector];\r\n        deposited[feeCollector] = 0;\r\n        emit FeeCollected(msg.sender, feeCollector, amount);\r\n        bindedToken.safeTransfer(feeCollector, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Deposit ERC20 token to receiver address\r\n     * @param receiver Address of who will receive the deposited tokens\r\n     * @param amount Amount of ERC20 token to deposit\r\n     */\r\n    function depositTo(address receiver, uint256 amount) external onlyDepositor {\r\n        deposited[receiver] = deposited[receiver].add(amount);\r\n        emit Deposited(msg.sender, receiver, amount, deposited[receiver]);\r\n        bindedToken.safeTransferFrom(msg.sender, address(this), amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Bulk deposit tokens to multiple receivers\r\n     * @param receivers Addresses of receivers\r\n     * @param amounts Individual amounts to deposit for receivers\r\n     */\r\n    function bulkDeposit(\r\n        address[] calldata receivers,\r\n        uint256[] calldata amounts\r\n    )\r\n        external\r\n        onlyDepositor\r\n    {\r\n        require(\r\n            receivers.length == amounts.length,\r\n            \"Failed to bulk deposit due to illegal arguments.\"\r\n        );\r\n\r\n        uint256 totalAmount = 0;\r\n        for (uint256 i = 0; i < amounts.length; i = i.add(1)) {\r\n            // accumulate total amount of tokens to transfer in token bank\r\n            totalAmount = totalAmount.add(amounts[i]);\r\n            // deposit tokens to token bank accounts\r\n            deposited[receivers[i]] = deposited[receivers[i]].add(amounts[i]);\r\n            emit Deposited(\r\n                msg.sender, \r\n                receivers[i], \r\n                amounts[i],\r\n                deposited[receivers[i]]\r\n            );\r\n        }\r\n        emit BulkDeposited(msg.sender, totalAmount, receivers.length);\r\n\r\n        // if transfer fails, deposits will revert accordingly \r\n        bindedToken.safeTransferFrom(msg.sender, address(this), totalAmount);  \r\n    }\r\n\r\n    /**\r\n     * @notice withdraw tokens from token bank to specific receiver\r\n     * @param from Token will withdraw from this address\r\n     * @param to Withdrawn token transfer to this address\r\n     * @param amount Amount of ERC20 token to withdraw\r\n     * @param fee Withdraw fee\r\n     */\r\n    function _withdraw(address from, address to, uint256 amount, uint256 fee) private {\r\n        deposited[feeCollector] = deposited[feeCollector].add(fee);\r\n        uint256 total = amount.add(fee);\r\n        deposited[from] = deposited[from].sub(total);\r\n        emit Withdrawn(from, to, amount, fee, deposited[from]);\r\n        bindedToken.safeTransfer(to, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Bulk withdraw tokens from token bank\r\n     * @dev Withdraw request will handle by off-chain API\r\n     * @dev Arguments must merge into arrays due to \"Stack too deep\" error\r\n     * @param nums See ./docs/nums.bulkWithdraw.param\r\n     * @param addrs See ./docs/addrs.bulkWithdraw.param\r\n     * @param rsSigParams See ./docs/rsSigParams.bulkWithdraw.param\r\n     */\r\n    function bulkWithdraw(\r\n        uint256[] calldata nums,\r\n        address[] calldata addrs,\r\n        bytes32[] calldata rsSigParams\r\n    )\r\n        external\r\n        onlyTrader\r\n    {\r\n        // length of nums = 4 * withdraw requests\r\n        uint256 total = nums.length.div(4);\r\n        require(\r\n            (total > 0) \r\n            && (total.mul(4) == nums.length)\r\n            && (total.mul(2) == addrs.length)\r\n            && (total.mul(2) == rsSigParams.length),\r\n            \"Failed to bulk withdraw due to illegal arguments.\"\r\n        );\r\n\r\n        // handle withdraw requests one after another\r\n        for (uint256 i = 0; i < total; i = i.add(1)) {\r\n            _verifyWithdrawSigner(\r\n                addrs[i.mul(2)],               // withdraw from (also signder)\r\n                addrs[(i.mul(2)).add(1)],      // withdraw to\r\n                nums[i.mul(4)],                // withdraw amount\r\n                nums[(i.mul(4)).add(1)],       // withdraw fee\r\n                nums[(i.mul(4)).add(2)],       // withdraw timestamp\r\n                nums[(i.mul(4)).add(3)],       // signature param: v\r\n                rsSigParams[i.mul(2)],         // signature param: r\r\n                rsSigParams[(i.mul(2)).add(1)] // signature param: s\r\n            );\r\n\r\n            _withdraw(\r\n                addrs[i.mul(2)],          // withdraw from\r\n                addrs[(i.mul(2)).add(1)], // withdraw to\r\n                nums[i.mul(4)],           // withdraw amount\r\n                nums[(i.mul(4)).add(1)]   // withdraw fee\r\n            );\r\n        }\r\n        emit BulkWithdrawn(msg.sender, total);\r\n    }\r\n\r\n    /**\r\n     * @notice Verify withdraw request signer\r\n     * @dev Request signer must be owner of deposit account\r\n     * @param from Token will withdraw from this address\r\n     * @param to Token will withdraw into this address\r\n     * @param amount Amount of token to withdraw\r\n     * @param fee Withdraw fee\r\n     * @param timestamp Withdraw request timestamp\r\n     * @param v Signature parameter: v\r\n     * @param r Signature parameter: r\r\n     * @param s Signature parameter: s\r\n     */\r\n    function _verifyWithdrawSigner(\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 fee,\r\n        uint256 timestamp,\r\n        uint256 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    )\r\n        private\r\n        view\r\n    {\r\n        bytes32 hashed = keccak256(\r\n            abi.encodePacked(\r\n                \"\\x19Ethereum Signed Message:\\n32\", \r\n                keccak256(\r\n                    abi.encodePacked(\r\n                        address(this), \r\n                        from, \r\n                        to, \r\n                        amount,\r\n                        fee,\r\n                        timestamp\r\n                    )\r\n                )\r\n            )\r\n        );\r\n\r\n        require(\r\n            ecrecover(hashed, uint8(v), r, s) == from,\r\n            \"Failed to withdraw due to request was not signed by singer.\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Bulk transfer tokens in token bank\r\n     * @dev Transfer request will handle by off-chain API\r\n     * @dev Arguments must merge into arrays due to \"Stack too deep\" error\r\n     * @param nums See ./docs/nums.bulkTransfer.param\r\n     * @param addrs See ./docs/addrs.bulkTransfer.param\r\n     * @param rsSigParams See ./docs/rsSigParams.bulkTransfer.param\r\n     */\r\n    function bulkTransfer(\r\n        uint256[] calldata nums,\r\n        address[] calldata addrs,\r\n        bytes32[] calldata rsSigParams\r\n    )\r\n        external\r\n        onlyTrader\r\n    {\r\n        // length of nums = 4 * transfer requests\r\n        uint256 total = nums.length.div(4);\r\n        require(\r\n            (total > 0) \r\n            && (total.mul(4) == nums.length)\r\n            && (total.mul(2) == addrs.length)\r\n            && (total.mul(2) == rsSigParams.length),\r\n            \"Failed to bulk transfer due to illegal arguments.\"\r\n        );\r\n\r\n        // handle transfer requests one after another\r\n        for (uint256 i = 0; i < total; i = i.add(1)) {\r\n            _verifyTransferSigner(\r\n                addrs[i.mul(2)],               // transfer from (also signder)\r\n                addrs[(i.mul(2)).add(1)],      // transfer to\r\n                nums[i.mul(4)],                // transfer amount\r\n                nums[(i.mul(4)).add(1)],       // transfer fee\r\n                nums[(i.mul(4)).add(2)],       // transfer timestamp\r\n                nums[(i.mul(4)).add(3)],       // signature param: v\r\n                rsSigParams[i.mul(2)],         // signature param: r\r\n                rsSigParams[(i.mul(2)).add(1)] // signature param: s\r\n            );\r\n\r\n            _transfer(\r\n                addrs[i.mul(2)],          // transfer from\r\n                addrs[(i.mul(2)).add(1)], // transfer to\r\n                nums[i.mul(4)],           // transfer amount\r\n                nums[(i.mul(4)).add(1)]   // transfer fee\r\n            );\r\n        }\r\n        emit BulkTransferred(msg.sender, total);\r\n    }\r\n\r\n    /**\r\n     * @dev Admin function: Transfer token in token bank\r\n     * @param from Token transfer from this address\r\n     * @param to Token transfer to this address\r\n     * @param amount Amount of token to transfer\r\n     * @param fee Transfer fee\r\n     */\r\n    function transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 fee\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        _transfer(from, to, amount, fee);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token in token bank\r\n     * @param from Token transfer from this address\r\n     * @param to Token transfer to this address\r\n     * @param amount Amount of token to transfer\r\n     * @param fee Transfer fee\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 fee\r\n    )\r\n        private\r\n    {\r\n        require(to != address(0));\r\n        uint256 total = amount.add(fee);\r\n        require(total <= deposited[from]);\r\n        deposited[from] = deposited[from].sub(total);\r\n        deposited[feeCollector] = deposited[feeCollector].add(fee);\r\n        deposited[to] = deposited[to].add(amount);\r\n        emit Transferred(from, to, amount, fee, deposited[from]);\r\n    }\r\n\r\n    /**\r\n     * @notice Verify transfer request signer\r\n     * @dev Request signer must be owner of deposit account\r\n     * @param from Token will transfer from this address\r\n     * @param to Token will transfer into this address\r\n     * @param amount Amount of token to transfer\r\n     * @param fee Transfer fee\r\n     * @param timestamp Transfer request timestamp\r\n     * @param v Signature parameter: v\r\n     * @param r Signature parameter: r\r\n     * @param s Signature parameter: s\r\n     */\r\n    function _verifyTransferSigner(\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 fee,\r\n        uint256 timestamp,\r\n        uint256 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    )\r\n        private\r\n        view\r\n    {\r\n        bytes32 hashed = keccak256(\r\n            abi.encodePacked(\r\n                \"\\x19Ethereum Signed Message:\\n32\", \r\n                keccak256(\r\n                    abi.encodePacked(\r\n                        address(this), \r\n                        from, \r\n                        to, \r\n                        amount,\r\n                        fee,\r\n                        timestamp\r\n                    )\r\n                )\r\n            )\r\n        );\r\n\r\n        require(\r\n            ecrecover(hashed, uint8(v), r, s) == from,\r\n            \"Failed to transfer due to request was not signed by singer.\"\r\n        );\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isDepositor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"nums\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"rsSigParams\",\"type\":\"bytes32[]\"}],\"name\":\"bulkTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"bindToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isTrader\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"bulkDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addTrader\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceDepositor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"}],\"name\":\"setFeeCollector\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"nums\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"rsSigParams\",\"type\":\"bytes32[]\"}],\"name\":\"bulkWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"collectFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bindedToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceTrader\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addDepositor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"binder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"TokenBinded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousFeeCollector\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"FeeCollectorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collectTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestNum\",\"type\":\"uint256\"}],\"name\":\"BulkDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestNum\",\"type\":\"uint256\"}],\"name\":\"BulkWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Transferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestNum\",\"type\":\"uint256\"}],\"name\":\"BulkTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"TraderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"TraderRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"DepositorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"DepositorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TokenBank","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020000000000000000000000004800f49f1574394df0939ca78776bc898432851c000000000000000000000000d33df2bfdc0f087ac7c29b5fd773abf5ba960b61","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://2ebe54c05fad744eff4d0f4d326f8cd4bf2d3da53b0f3a1e1e4b32ee446571a1"}]}