{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/saga-genesis/interfaces/IMintHandler.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n/**\r\n * @title Mint Handler Interface.\r\n */\r\ninterface IMintHandler {\r\n    /**\r\n     * @dev Upon minting of SGN vested in delay.\r\n     * @param _index The minting-point index.\r\n     */\r\n    function mintSgnVestedInDelay(uint256 _index) external;\r\n}\r\n\r\n// File: contracts/saga-genesis/interfaces/ISagaExchanger.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n/**\r\n * @title Saga Exchanger Interface.\r\n */\r\ninterface ISagaExchanger {\r\n    /**\r\n     * @dev Transfer SGA to an SGN holder.\r\n     * @param _to The address of the SGN holder.\r\n     * @param _value The amount of SGA to transfer.\r\n     */\r\n    function transferSgaToSgnHolder(address _to, uint256 _value) external;\r\n}\r\n\r\n// File: contracts/saga-genesis/interfaces/ISGNTokenManager.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n/**\r\n * @title SGN Token Manager Interface.\r\n */\r\ninterface ISGNTokenManager {\r\n    /**\r\n     * @dev Get the current SGA worth of a given SGN amount.\r\n     * @param _sgnAmount The amount of SGN to convert.\r\n     * @return The equivalent amount of SGA.\r\n     */\r\n    function convertSgnToSga(uint256 _sgnAmount) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Exchange SGN for SGA.\r\n     * @param _sender The address of the sender.\r\n     * @param _sgnAmount The amount of SGN received.\r\n     * @return The amount of SGA that the sender is entitled to.\r\n     */\r\n    function exchangeSgnForSga(address _sender, uint256 _sgnAmount) external returns (uint256);\r\n\r\n    /**\r\n     * @dev Handle direct SGN transfer.\r\n     * @param _sender The address of the sender.\r\n     * @param _to The address of the destination account.\r\n     * @param _value The amount of SGN to be transferred.\r\n     */\r\n    function uponTransfer(address _sender, address _to, uint256 _value) external;\r\n\r\n    /**\r\n     * @dev Handle custodian SGN transfer.\r\n     * @param _sender The address of the sender.\r\n     * @param _from The address of the source account.\r\n     * @param _to The address of the destination account.\r\n     * @param _value The amount of SGN to be transferred.\r\n     */\r\n    function uponTransferFrom(address _sender, address _from, address _to, uint256 _value) external;\r\n\r\n    /** \r\n     * @dev Upon minting of SGN vested in delay.\r\n     * @param _value The amount of SGN to mint.\r\n     */\r\n    function uponMintSgnVestedInDelay(uint256 _value) external;\r\n}\r\n\r\n// File: contracts/contract_address_locator/interfaces/IContractAddressLocator.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n/**\r\n * @title Contract Address Locator Interface.\r\n */\r\ninterface IContractAddressLocator {\r\n    /**\r\n     * @dev Get the contract address mapped to a given identifier.\r\n     * @param _identifier The identifier.\r\n     * @return The contract address.\r\n     */\r\n    function getContractAddress(bytes32 _identifier) external view returns (address);\r\n\r\n    /**\r\n     * @dev Determine whether or not a contract address is relates to one of the given identifiers.\r\n     * @param _contractAddress The contract address to look for.\r\n     * @param _identifiers The identifiers.\r\n     * @return Is the contract address relates to one of the identifiers.\r\n     */\r\n    function isContractAddressRelates(address _contractAddress, bytes32[] _identifiers) external view returns (bool);\r\n}\r\n\r\n// File: contracts/contract_address_locator/ContractAddressLocatorHolder.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n\r\n/**\r\n * @title Contract Address Locator Holder.\r\n * @dev Hold a contract address locator, which maps a unique identifier to every contract address in the system.\r\n * @dev Any contract which inherits from this contract can retrieve the address of any contract in the system.\r\n * @dev Thus, any contract can remain \"oblivious\" to the replacement of any other contract in the system.\r\n * @dev In addition to that, any function in any contract can be restricted to a specific caller.\r\n */\r\ncontract ContractAddressLocatorHolder {\r\n    bytes32 internal constant _IAuthorizationDataSource_ = \"IAuthorizationDataSource\";\r\n    bytes32 internal constant _ISGNConversionManager_    = \"ISGNConversionManager\"      ;\r\n    bytes32 internal constant _IModelDataSource_         = \"IModelDataSource\"        ;\r\n    bytes32 internal constant _IPaymentHandler_          = \"IPaymentHandler\"            ;\r\n    bytes32 internal constant _IPaymentManager_          = \"IPaymentManager\"            ;\r\n    bytes32 internal constant _IPaymentQueue_            = \"IPaymentQueue\"              ;\r\n    bytes32 internal constant _IReconciliationAdjuster_  = \"IReconciliationAdjuster\"      ;\r\n    bytes32 internal constant _IIntervalIterator_        = \"IIntervalIterator\"       ;\r\n    bytes32 internal constant _IMintHandler_             = \"IMintHandler\"            ;\r\n    bytes32 internal constant _IMintListener_            = \"IMintListener\"           ;\r\n    bytes32 internal constant _IMintManager_             = \"IMintManager\"            ;\r\n    bytes32 internal constant _IPriceBandCalculator_     = \"IPriceBandCalculator\"       ;\r\n    bytes32 internal constant _IModelCalculator_         = \"IModelCalculator\"        ;\r\n    bytes32 internal constant _IRedButton_               = \"IRedButton\"              ;\r\n    bytes32 internal constant _IReserveManager_          = \"IReserveManager\"         ;\r\n    bytes32 internal constant _ISagaExchanger_           = \"ISagaExchanger\"          ;\r\n    bytes32 internal constant _IMonetaryModel_               = \"IMonetaryModel\"              ;\r\n    bytes32 internal constant _IMonetaryModelState_          = \"IMonetaryModelState\"         ;\r\n    bytes32 internal constant _ISGAAuthorizationManager_ = \"ISGAAuthorizationManager\";\r\n    bytes32 internal constant _ISGAToken_                = \"ISGAToken\"               ;\r\n    bytes32 internal constant _ISGATokenManager_         = \"ISGATokenManager\"        ;\r\n    bytes32 internal constant _ISGNAuthorizationManager_ = \"ISGNAuthorizationManager\";\r\n    bytes32 internal constant _ISGNToken_                = \"ISGNToken\"               ;\r\n    bytes32 internal constant _ISGNTokenManager_         = \"ISGNTokenManager\"        ;\r\n    bytes32 internal constant _IMintingPointTimersManager_             = \"IMintingPointTimersManager\"            ;\r\n    bytes32 internal constant _ITradingClasses_          = \"ITradingClasses\"         ;\r\n    bytes32 internal constant _IWalletsTradingLimiterValueConverter_        = \"IWalletsTLValueConverter\"       ;\r\n    bytes32 internal constant _IWalletsTradingDataSource_       = \"IWalletsTradingDataSource\"      ;\r\n    bytes32 internal constant _WalletsTradingLimiter_SGNTokenManager_          = \"WalletsTLSGNTokenManager\"         ;\r\n    bytes32 internal constant _WalletsTradingLimiter_SGATokenManager_          = \"WalletsTLSGATokenManager\"         ;\r\n    bytes32 internal constant _IETHConverter_             = \"IETHConverter\"   ;\r\n    bytes32 internal constant _ITransactionLimiter_      = \"ITransactionLimiter\"     ;\r\n    bytes32 internal constant _ITransactionManager_      = \"ITransactionManager\"     ;\r\n    bytes32 internal constant _IRateApprover_      = \"IRateApprover\"     ;\r\n\r\n    IContractAddressLocator private contractAddressLocator;\r\n\r\n    /**\r\n     * @dev Create the contract.\r\n     * @param _contractAddressLocator The contract address locator.\r\n     */\r\n    constructor(IContractAddressLocator _contractAddressLocator) internal {\r\n        require(_contractAddressLocator != address(0), \"locator is illegal\");\r\n        contractAddressLocator = _contractAddressLocator;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the contract address locator.\r\n     * @return The contract address locator.\r\n     */\r\n    function getContractAddressLocator() external view returns (IContractAddressLocator) {\r\n        return contractAddressLocator;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the contract address mapped to a given identifier.\r\n     * @param _identifier The identifier.\r\n     * @return The contract address.\r\n     */\r\n    function getContractAddress(bytes32 _identifier) internal view returns (address) {\r\n        return contractAddressLocator.getContractAddress(_identifier);\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @dev Determine whether or not the sender is relates to one of the identifiers.\r\n     * @param _identifiers The identifiers.\r\n     * @return Is the sender relates to one of the identifiers.\r\n     */\r\n    function isSenderAddressRelates(bytes32[] _identifiers) internal view returns (bool) {\r\n        return contractAddressLocator.isContractAddressRelates(msg.sender, _identifiers);\r\n    }\r\n\r\n    /**\r\n     * @dev Verify that the caller is mapped to a given identifier.\r\n     * @param _identifier The identifier.\r\n     */\r\n    modifier only(bytes32 _identifier) {\r\n        require(msg.sender == getContractAddress(_identifier), \"caller is illegal\");\r\n        _;\r\n    }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract ERC20 is IERC20 {\r\n  using SafeMath for uint256;\r\n\r\n  mapping (address => uint256) private _balances;\r\n\r\n  mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n  uint256 private _totalSupply;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param owner The address to query the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n    return _balances[owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param owner address The address which owns the funds.\r\n   * @param spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address owner,\r\n    address spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return _allowed[owner][spender];\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param to The address to transfer to.\r\n  * @param value The amount to be transferred.\r\n  */\r\n  function transfer(address to, uint256 value) public returns (bool) {\r\n    _transfer(msg.sender, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param spender The address which will spend the funds.\r\n   * @param value The amount of tokens to be spent.\r\n   */\r\n  function approve(address spender, uint256 value) public returns (bool) {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = value;\r\n    emit Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param from address The address which you want to send tokens from\r\n   * @param to address The address which you want to transfer to\r\n   * @param value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(value <= _allowed[from][msg.sender]);\r\n\r\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n    _transfer(from, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed_[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param spender The address which will spend the funds.\r\n   * @param addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseAllowance(\r\n    address spender,\r\n    uint256 addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = (\r\n      _allowed[msg.sender][spender].add(addedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed_[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param spender The address which will spend the funds.\r\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseAllowance(\r\n    address spender,\r\n    uint256 subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = (\r\n      _allowed[msg.sender][spender].sub(subtractedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified addresses\r\n  * @param from The address to transfer from.\r\n  * @param to The address to transfer to.\r\n  * @param value The amount to be transferred.\r\n  */\r\n  function _transfer(address from, address to, uint256 value) internal {\r\n    require(value <= _balances[from]);\r\n    require(to != address(0));\r\n\r\n    _balances[from] = _balances[from].sub(value);\r\n    _balances[to] = _balances[to].add(value);\r\n    emit Transfer(from, to, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that mints an amount of the token and assigns it to\r\n   * an account. This encapsulates the modification of balances such that the\r\n   * proper events are emitted.\r\n   * @param account The account that will receive the created tokens.\r\n   * @param value The amount that will be created.\r\n   */\r\n  function _mint(address account, uint256 value) internal {\r\n    require(account != 0);\r\n    _totalSupply = _totalSupply.add(value);\r\n    _balances[account] = _balances[account].add(value);\r\n    emit Transfer(address(0), account, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that burns an amount of the token of a given\r\n   * account.\r\n   * @param account The account whose tokens will be burnt.\r\n   * @param value The amount that will be burnt.\r\n   */\r\n  function _burn(address account, uint256 value) internal {\r\n    require(account != 0);\r\n    require(value <= _balances[account]);\r\n\r\n    _totalSupply = _totalSupply.sub(value);\r\n    _balances[account] = _balances[account].sub(value);\r\n    emit Transfer(account, address(0), value);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that burns an amount of the token of a given\r\n   * account, deducting from the sender's allowance for said account. Uses the\r\n   * internal burn function.\r\n   * @param account The account whose tokens will be burnt.\r\n   * @param value The amount that will be burnt.\r\n   */\r\n  function _burnFrom(address account, uint256 value) internal {\r\n    require(value <= _allowed[account][msg.sender]);\r\n\r\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\r\n    // this function needs to emit an event with the updated approval.\r\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\r\n      value);\r\n    _burn(account, value);\r\n  }\r\n}\r\n\r\n// File: contracts/saga-genesis/SGNToken.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Details of usage of licenced software see here: https://www.saga.org/software/readme_v1\r\n */\r\n\r\n/**\r\n * @title Saga Genesis Token.\r\n * @dev ERC20 compatible.\r\n * @dev Exchange SGN for SGA.\r\n * @notice Some of the code has been auto-generated via 'PrintSGNToken.py',\r\n * in compliance with 'Saga Monetary Model.pdf' / APPENDIX D: SAGA MODEL POINTS.\r\n */\r\ncontract SGNToken is ERC20, ContractAddressLocatorHolder, IMintHandler {\r\n    string public constant VERSION = \"1.0.0\";\r\n\r\n    string public constant name = \"Saga Genesis\";\r\n    string public constant symbol = \"SGN\";\r\n    uint8  public constant decimals = 18;\r\n\r\n    address public initialOwner;\r\n    mapping(uint256 => uint256) public valueMintedAt;\r\n\r\n    /**\r\n     * @dev Create the contract.\r\n     * @param _contractAddressLocator The contract address locator.\r\n     * @param _initialOwner The initial owner of SGN minted by the model.\r\n     */\r\n    constructor(IContractAddressLocator _contractAddressLocator, address _initialOwner) ContractAddressLocatorHolder(_contractAddressLocator) public {\r\n        initialOwner = _initialOwner;\r\n        uint256 oneToken = uint256(10) ** decimals;\r\n        _mint(initialOwner, 74900000 * oneToken);\r\n        valueMintedAt[16] = 10700000 * oneToken;\r\n        valueMintedAt[26] = 10700000 * oneToken;\r\n        valueMintedAt[36] = 10700000 * oneToken;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the contract which implements the ISGNTokenManager interface.\r\n     */\r\n    function getSGNTokenManager() public view returns (ISGNTokenManager) {\r\n        return ISGNTokenManager(getContractAddress(_ISGNTokenManager_));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the contract which implements the ISagaExchanger interface.\r\n     */\r\n    function getSagaExchanger() public view returns (ISagaExchanger) {\r\n        return ISagaExchanger(getContractAddress(_ISagaExchanger_));\r\n    }\r\n\r\n    /**\r\n     * @dev Get the amount of SGA received upon conversion of a given SGN amount.\r\n     * @param _value The amount of SGN to convert.\r\n     * @return The amount of SGA received upon conversion.\r\n     */\r\n    function convert(uint256 _value) external view returns (uint256) {\r\n        return getSGNTokenManager().convertSgnToSga(_value);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer SGN to another account.\r\n     * @param _to The address of the destination account.\r\n     * @param _value The amount of SGN to be transferred.\r\n     * @return Status (true if completed successfully, false otherwise).\r\n     * @notice If the destination account is this contract, then convert SGN to SGA.\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        if (_to == address(this)) {\r\n            uint256 amount = getSGNTokenManager().exchangeSgnForSga(msg.sender, _value);\r\n            _burn(msg.sender, _value);\r\n            getSagaExchanger().transferSgaToSgnHolder(msg.sender, amount);\r\n            return true;\r\n        }\r\n        getSGNTokenManager().uponTransfer(msg.sender, _to, _value);\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer SGN from one account to another.\r\n     * @param _from The address of the source account.\r\n     * @param _to The address of the destination account.\r\n     * @param _value The amount of SGN to be transferred.\r\n     * @return Status (true if completed successfully, false otherwise).\r\n     * @notice If the destination account is this contract, then the operation is illegal.\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(this), \"custodian-transfer of SGN into this contract is illegal\");\r\n        getSGNTokenManager().uponTransferFrom(msg.sender, _from, _to, _value);\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Upon minting of SGN vested in delay.\r\n     * @param _index The minting-point index.\r\n     */\r\n    function mintSgnVestedInDelay(uint256 _index) external only(_IMintManager_) {\r\n        uint256 value = valueMintedAt[_index];\r\n        valueMintedAt[_index] = 0;\r\n        getSGNTokenManager().uponMintSgnVestedInDelay(value);\r\n        _mint(initialOwner, value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"valueMintedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractAddressLocator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSagaExchanger\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"convert\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"mintSgnVestedInDelay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSGNTokenManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_contractAddressLocator\",\"type\":\"address\"},{\"name\":\"_initialOwner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"SGNToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"6000","ConstructorArguments":"000000000000000000000000aabcd54faf94925adbe0df117c62961acecbacdb0000000000000000000000002a4de6bf9c62f59fdfee0d76f65de7c1657187e7","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://8ed556bca7a38db478491ac46400919220518282d2336fc72cdadf1e9f20bb0c"}]}