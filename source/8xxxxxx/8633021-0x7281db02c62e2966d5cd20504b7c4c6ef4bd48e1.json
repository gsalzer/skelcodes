{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.7;\r\n\r\ninterface RegistryInterface {\r\n    function proxies(address) external view returns (address);\r\n}\r\n\r\ninterface UserWalletInterface {\r\n    function owner() external view returns (address);\r\n}\r\n\r\ninterface ERC20Interface {\r\n    function allowance(address, address) external view returns (uint);\r\n    function balanceOf(address) external view returns (uint);\r\n    function approve(address, uint) external;\r\n    function transfer(address, uint) external returns (bool);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n}\r\n\r\ninterface CTokenInterface {\r\n    function mint(uint mintAmount) external returns (uint); // For ERC20\r\n    function redeem(uint redeemTokens) external returns (uint);\r\n    function borrow(uint borrowAmount) external returns (uint);\r\n    function transfer(address, uint) external returns (bool);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n    function repayBorrow(uint repayAmount) external returns (uint); // For ERC20\r\n    function underlying() external view returns (address);\r\n}\r\n\r\ninterface CETHInterface {\r\n    function mint() external payable; // For ETH\r\n    function repayBorrow() external payable; // For ETH\r\n    function transfer(address, uint) external returns (bool);\r\n}\r\n\r\ninterface ComptrollerInterface {\r\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\r\n    function exitMarket(address cTokenAddress) external returns (uint);\r\n}\r\n\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        c = a - b;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Helper is DSMath {\r\n\r\n    address public ethAddr = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address public daiAddr = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\r\n    address public usdcAddr = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n    address public registry = 0x498b3BfaBE9F73db90D252bCD4Fa9548Cd0Fd981;\r\n    address public comptrollerAddr = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\r\n\r\n    address payable public adminOne = 0xd8db02A498E9AFbf4A32BC006DC1940495b4e592;\r\n    address payable public adminTwo = 0x0f0EBD0d7672362D11e0b6d219abA30b0588954E;\r\n\r\n    address public cEth = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\r\n    address public cDai = 0xF5DCe57282A584D2746FaF1593d3121Fcac444dC;\r\n    address public cUsdc = 0x39AA39c021dfbaE8faC545936693aC917d5E7563;\r\n\r\n}\r\n\r\n\r\ncontract ProvideLiquidity is Helper {\r\n\r\n    /**\r\n     * @dev user's address => CToken Address => CToken Amount Deposited\r\n     */\r\n    mapping (address => mapping (address => uint)) public deposits;\r\n\r\n    event LogDepositCToken(address user, address ctknAddr, uint amt);\r\n    event LogWithdrawCToken(address user, address ctknAddr, uint amt);\r\n\r\n    /**\r\n     * @dev Deposit CToken for liquidity\r\n     */\r\n    function depositCTkn(address ctknAddr, uint amt) public {\r\n        require(CTokenInterface(ctknAddr).transferFrom(msg.sender, address(this), amt), \"Nothing to deposit\");\r\n        deposits[msg.sender][ctknAddr] += amt;\r\n        emit LogDepositCToken(msg.sender, ctknAddr, amt);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw CToken from liquidity\r\n     */\r\n    function withdrawCTkn(address ctknAddr, uint amt) public returns(uint withdrawAmt) {\r\n        require(deposits[msg.sender][ctknAddr] != 0, \"Nothing to Withdraw\");\r\n        withdrawAmt = amt < deposits[msg.sender][ctknAddr] ? amt : deposits[msg.sender][ctknAddr];\r\n        assert(CTokenInterface(ctknAddr).transfer(msg.sender, withdrawAmt));\r\n        deposits[msg.sender][ctknAddr] -= withdrawAmt;\r\n        emit LogWithdrawCToken(msg.sender, ctknAddr, withdrawAmt);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract AccessLiquidity is ProvideLiquidity {\r\n\r\n    event LogBorrowTknAndTransfer(address tknAddr, address ctknAddr, uint amt);\r\n    event LogPayBorrowBack(address tknAddr, address ctknAddr, uint amt);\r\n\r\n    /**\r\n     * FOR SECURITY PURPOSE\r\n     * checks if only InstaDApp contract wallets can access the bridge\r\n     */\r\n    modifier isUserWallet {\r\n        address userAdd = UserWalletInterface(msg.sender).owner();\r\n        address walletAdd = RegistryInterface(registry).proxies(userAdd);\r\n        require(walletAdd != address(0), \"not-user-wallet\");\r\n        require(walletAdd == msg.sender, \"not-wallet-owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Borrow token and use them on InstaDApp's contract wallets\r\n     */\r\n    function borrowTknAndTransfer(address ctknAddr, uint tknAmt) public isUserWallet {\r\n        if (tknAmt > 0) {\r\n            CTokenInterface ctknContract = CTokenInterface(ctknAddr);\r\n            if (ctknAddr != cEth) {\r\n                address tknAddr = ctknContract.underlying();\r\n                assert(ctknContract.borrow(tknAmt) == 0);\r\n                assert(ERC20Interface(tknAddr).transfer(msg.sender, tknAmt));\r\n                emit LogBorrowTknAndTransfer(tknAddr, ctknAddr, tknAmt);\r\n            } else {\r\n                assert(ctknContract.borrow(tknAmt) == 0);\r\n                msg.sender.transfer(tknAmt);\r\n                emit LogBorrowTknAndTransfer(ethAddr, ctknAddr, tknAmt);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Payback borrowed token and from InstaDApp's contract wallets\r\n     */\r\n    function payBorrowBack(address ctknAddr, uint tknAmt) public payable isUserWallet {\r\n        if (tknAmt > 0) {\r\n            if (ctknAddr != cEth) {\r\n                CTokenInterface ctknContract = CTokenInterface(ctknAddr);\r\n                address tknAddr = ctknContract.underlying();\r\n                assert(ctknContract.repayBorrow(tknAmt) == 0);\r\n                emit LogPayBorrowBack(tknAddr, ctknAddr, tknAmt);\r\n            } else {\r\n                CETHInterface cEthContract = CETHInterface(ctknAddr);\r\n                cEthContract.repayBorrow.value(tknAmt);\r\n                emit LogPayBorrowBack(ethAddr, ctknAddr, tknAmt);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract AdminStuff is AccessLiquidity {\r\n\r\n    modifier isAdmin {\r\n        require(msg.sender == adminOne || msg.sender == adminTwo, \"Not admin address\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Give approval to other addresses\r\n     */\r\n    function setApproval(address erc20, address to) public isAdmin {\r\n        ERC20Interface(erc20).approve(to, uint(-1));\r\n    }\r\n\r\n    /**\r\n     * (HIGHLY UNLIKELY TO HAPPEN)\r\n     * collecting ETH if this contract has it\r\n     */\r\n    function collectEth() public isAdmin {\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n\r\n    /**\r\n     * Enter Compound Market to enable borrowing\r\n     */\r\n    function enterMarket(address[] memory cTknAddrArr) public isAdmin {\r\n        ComptrollerInterface troller = ComptrollerInterface(comptrollerAddr);\r\n        troller.enterMarkets(cTknAddrArr);\r\n    }\r\n\r\n    /**\r\n     * Enter Compound Market to disable borrowing\r\n     */\r\n    function exitMarket(address cErc20) public isAdmin {\r\n        ComptrollerInterface troller = ComptrollerInterface(comptrollerAddr);\r\n        troller.exitMarket(cErc20);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Liquidity is AdminStuff {\r\n\r\n    /**\r\n     * @dev setting up all required token approvals\r\n     */\r\n    constructor() public {\r\n        ERC20Interface(daiAddr).approve(cDai, uint(-1));\r\n        ERC20Interface(usdcAddr).approve(cUsdc, uint(-1));\r\n        ERC20Interface(cDai).approve(cDai, uint(-1));\r\n        ERC20Interface(cUsdc).approve(cUsdc, uint(-1));\r\n        ERC20Interface(cEth).approve(cEth, uint(-1));\r\n    }\r\n\r\n    function() external payable {}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"adminTwo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"comptrollerAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ctknAddr\",\"type\":\"address\"},{\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"depositCTkn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ctknAddr\",\"type\":\"address\"},{\"name\":\"tknAmt\",\"type\":\"uint256\"}],\"name\":\"borrowTknAndTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"daiAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cTknAddrArr\",\"type\":\"address[]\"}],\"name\":\"enterMarket\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ctknAddr\",\"type\":\"address\"},{\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"withdrawCTkn\",\"outputs\":[{\"name\":\"withdrawAmt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdcAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cDai\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cEth\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"erc20\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"setApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ctknAddr\",\"type\":\"address\"},{\"name\":\"tknAmt\",\"type\":\"uint256\"}],\"name\":\"payBorrowBack\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cUsdc\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminOne\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cErc20\",\"type\":\"address\"}],\"name\":\"exitMarket\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"collectEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tknAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ctknAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"LogBorrowTknAndTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tknAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ctknAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"LogPayBorrowBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ctknAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"LogDepositCToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ctknAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawCToken\",\"type\":\"event\"}]","ContractName":"Liquidity","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://e4a95023e4a0d3927fedad3126ea8b2c528343f123d02c0b81d6ee6b6ed66b34"}]}