{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.8;\r\n\r\n/*\r\n    IdeaFeX Token token contract\r\n\r\n    Deployed to     : 0x2CF588136b15E47b555331d2f5258063AE6D01ed\r\n    Symbol          : IFX\r\n    Name            : IdeaFeX Token\r\n    Total supply    : 1,000,000,000.000000000000000000\r\n    Decimals        : 18\r\n    Distribution    : 40% to tokenSale      0x6924E015c192C0f1839a432B49e1e96e06571227 (to be managed)\r\n                    : 30% to escrow         0xf9BF5e274323c5b9E23D3489f551F7525D8af1fa (cold storage)\r\n                    : 15% to communityFund  0x2f70F492d3734d8b747141b4b961301d68C12F62 (to be managed)\r\n                    : 15% to teamReserve    0xd0ceaB60dfbAc16afF8ebefbfDc1cD2AF53cE47e (cold storage)\r\n*/\r\n\r\n\r\n/* Safe maths */\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"Addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        require(b <= a, \"Subtraction overflow\");\r\n        uint c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a==0){\r\n            return 0;\r\n        }\r\n        uint c = a * b;\r\n        require(c / a == b, \"Multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        require(b > 0,\"Division by 0\");\r\n        uint c = a / b;\r\n        return c;\r\n    }\r\n    function mod(uint a, uint b) internal pure returns (uint) {\r\n        require(b != 0, \"Modulo by 0\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/* ERC20 standard interface */\r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n\r\n    event Transfer(address indexed sender, address indexed recipient, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\n/* IdeaFeX Token */\r\n\r\ncontract IdeaFeXToken is ERC20Interface {\r\n    using SafeMath for uint;\r\n\r\n    string private _symbol;\r\n    string private _name;\r\n    uint8 private _decimals;\r\n    uint private _totalSupply;\r\n\r\n    mapping(address => uint) private _balances;\r\n    mapping(address => mapping(address => uint)) private _allowances;\r\n\r\n    address payable private tokenSale;\r\n    address payable private escrow;\r\n    address payable private communityFund;\r\n    address payable private teamReserve;\r\n\r\n\r\n    // Constructor\r\n\r\n    constructor() public {\r\n        _symbol = \"IFX\";\r\n        _name = \"IdeaFeX Token\";\r\n        _decimals = 18;\r\n        _totalSupply = 1000000000 * 10**uint(_decimals);\r\n\r\n        //IdeaFeX Token addresses (initial)\r\n        tokenSale = 0x6924E015c192C0f1839a432B49e1e96e06571227;\r\n        escrow = 0xf9BF5e274323c5b9E23D3489f551F7525D8af1fa;\r\n        communityFund = 0x2f70F492d3734d8b747141b4b961301d68C12F62;\r\n        teamReserve = 0xd0ceaB60dfbAc16afF8ebefbfDc1cD2AF53cE47e;\r\n\r\n        //Token sale = 40%\r\n        _balances[tokenSale] = _totalSupply*4/10;\r\n        emit Transfer(address(0), tokenSale, _totalSupply*4/10);\r\n\r\n        //Escrow = 30%\r\n        _balances[escrow] = _totalSupply*3/10;\r\n        emit Transfer(address(0), escrow, _totalSupply*3/10);\r\n\r\n        //Community = 15%\r\n        _balances[communityFund] = _totalSupply*15/100;\r\n        emit Transfer(address(0), communityFund, _totalSupply*15/100);\r\n\r\n        //Team = 15%\r\n        _balances[teamReserve] = _totalSupply*15/100;\r\n        emit Transfer(address(0), teamReserve, _totalSupply*15/100);\r\n    }\r\n\r\n\r\n    // Basics\r\n\r\n    function name() public view returns (string memory){\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory){\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint amount) public returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n\r\n    // Basics II\r\n\r\n    function _transfer(address sender, address recipient, uint amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint value) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n\r\n    // Burn Function\r\n\r\n    function burn(uint amount) public {\r\n        _burn(msg.sender, amount);\r\n    }\r\n\r\n    function burnFrom(address account, uint amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\r\n    }\r\n\r\n    function _burn(address account, uint value) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n\r\n    // Fallback\r\n\r\n    function () external payable {\r\n        communityFund.transfer(msg.value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"IdeaFeXToken","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7cb8675a8ff531a2d4b784b28955bb1e6c289157ba6ed5536c7a0039e9819003"}]}