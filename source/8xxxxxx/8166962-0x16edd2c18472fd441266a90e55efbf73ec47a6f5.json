{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n        return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Erc20Token {\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n }\r\n\r\ncontract Base  {\r\n    using SafeMath for uint;\r\n    uint64 public currentEventId = 1;                            \r\n    function getEventId() internal returns(uint64 _result) {      \r\n        _result = currentEventId;\r\n        currentEventId ++;\r\n    }\r\n\r\n    mapping (address => mapping (address => uint)) public tokenUserAmountOf;      //mapping of token addresses to mapping of account balances (token=0 means Ether)\r\n    event OnDeposit(address indexed _token, address indexed _user, uint _amount, uint _balance, uint64 _eventId);\r\n    event OnWithdraw(address indexed _token, address indexed _user, uint _amount, uint _balance, uint64 _eventId);\r\n\r\n    function deposit() payable external {\r\n        _deposit();\r\n    }\r\n\r\n    function _deposit() internal {\r\n        tokenUserAmountOf[address(0x0)][msg.sender] = tokenUserAmountOf[address(0x0)][msg.sender].add(msg.value);\r\n        emit OnDeposit(address(0x0), msg.sender, msg.value, tokenUserAmountOf[address(0x0)][msg.sender], getEventId());\r\n    }\r\n\r\n    function withdraw(uint _amount) external {\r\n        require(tokenUserAmountOf[address(0x0)][msg.sender] >= _amount);\r\n        tokenUserAmountOf[address(0x0)][msg.sender] = tokenUserAmountOf[address(0x0)][msg.sender].sub(_amount);\r\n        msg.sender.transfer(_amount);\r\n        emit OnWithdraw(address(0x0), msg.sender, _amount, tokenUserAmountOf[address(0x0)][msg.sender], getEventId());\r\n    }\r\n\r\n    function depositToken(address _token, uint _amount) external {\r\n        //remember to call Token(address).approve(this, amount) or this contract will not be able to do the transfer on your behalf.\r\n        require(_token != address(0x0));\r\n        // require(Erc20Token(_token).transferFrom(msg.sender, address(this), _amount));\r\n        Erc20Token(_token).transferFrom(msg.sender, address(this), _amount);\r\n        tokenUserAmountOf[_token][msg.sender] = tokenUserAmountOf[_token][msg.sender].add(_amount);\r\n        emit OnDeposit(_token, msg.sender, _amount, tokenUserAmountOf[_token][msg.sender], getEventId());\r\n    }\r\n       \r\n    function testDepositToken(address _token, address _user, uint _amount) external view returns (bool _result) {\r\n        require(_token != address(0x0));\r\n        require(_user != address(0x0));\r\n        require(_amount > 0);\r\n        _result = Erc20Token(_token).allowance(_user, address(this)) >= _amount;\r\n    }\r\n\r\n    function testAllowance(address _token, address _user) external view returns (uint _result) {\r\n        _result = Erc20Token(_token).allowance(_user, address(this));\r\n    }\r\n    \r\n    function withdrawToken(address _token, uint _amount) external {\r\n        require(_token != address(0x0));\r\n        require (tokenUserAmountOf[_token][msg.sender] >= _amount);\r\n        tokenUserAmountOf[_token][msg.sender] = tokenUserAmountOf[_token][msg.sender].sub(_amount);\r\n        // require(Erc20Token(_token).transfer(msg.sender, _amount));\r\n        Erc20Token(_token).transfer(msg.sender, _amount);\r\n        emit OnWithdraw(_token, msg.sender, _amount, tokenUserAmountOf[_token][msg.sender], getEventId());\r\n    }\r\n}\r\n\r\ncontract Gamma is Base {    \r\n\r\n    mapping (address => mapping (bytes32 => bool)) public orders;         //User=>Hash(OrderId)=>Bool\r\n    mapping (address => mapping (bytes32 => uint)) public orderFills;     //User=>Hash(OrderId)=>Uint\r\n\r\n    event OnSell  (address _tokenGet, uint _amountGet, address _tokenGive, uint _amountGive, uint _expires, string _clientNonce, address _seller, uint64 _eventId);\r\n    event OnBuy   (address _tokenGet, uint _okAmountGet, address _tokenGive, uint _okAmountGive, address _seller, address _buyer, bytes32 _sellHash, uint64 _eventId);\r\n    event OnCancel(address _tokenGet, uint _amountGet, address _tokenGive, uint _amountGive, uint _expires, string _clientNonce, address _seller, uint64 _eventId);\r\n\r\n    function balanceOf(address token, address user) view external returns (uint _result) {\r\n        _result = tokenUserAmountOf[token][user];\r\n    }\r\n    \r\n    function getSellHash(address _tokenGet, uint _amountGet, address _tokenGive, uint _amountGive, uint _expires, string memory _clientNonce) \r\n        public view returns (bytes32 _result)  \r\n    {\r\n        _result =  keccak256(this, _tokenGet, _amountGet, _tokenGive, _amountGive, _expires, _clientNonce);\r\n    }\r\n   \r\n    function sell(address _tokenGet, uint _amountGet, address _tokenGive, uint _amountGive, uint _expires, string  _clientNonce) external {\r\n        require(_amountGet > 0 && _amountGive > 0);\r\n        require(_tokenGet != _tokenGive);\r\n        require(bytes(_clientNonce).length <= 32);\r\n        require(_expires > block.number);\r\n\r\n        bytes32 sellHash = getSellHash(_tokenGet, _amountGet, _tokenGive, _amountGive, _expires, _clientNonce);\r\n        orders[msg.sender][sellHash] = true;\r\n        emit OnSell(_tokenGet, _amountGet, _tokenGive, _amountGive, _expires, _clientNonce, msg.sender, getEventId());\r\n    }\r\n\r\n    function buy1(address _tokenGet, uint _amountGet, address _tokenGive, uint _amountGive, uint _expires, string  _clientNonce, address _seller, uint _amount)\r\n        external \r\n    {\r\n        bytes32 sellHash = getSellHash(_tokenGet, _amountGet, _tokenGive, _amountGive, _expires, _clientNonce);\r\n        if (orders[_seller][sellHash] && block.number <= _expires && orderFills[_seller][sellHash].add(_amount) <= _amountGet)\r\n        {\r\n            tradeBalance(_tokenGet, _amountGet, _tokenGive, _amountGive, _seller, _amount);\r\n            orderFills[_seller][sellHash] = orderFills[_seller][sellHash].add(_amount);\r\n            emit OnBuy(_tokenGet, _amount, _tokenGive, _amountGive.mul(_amount).div(_amountGet), _seller, msg.sender, sellHash, getEventId());\r\n            return;\r\n        }\r\n        emit OnBuy(_tokenGet, 0, _tokenGive, 0, _seller, msg.sender, 0x0, getEventId());     //delete\r\n        return;\r\n    }\r\n  \r\n    function buy2(address _tokenGet, uint _amountGet, address _tokenGive, uint _amountGive, uint _expires, string memory _clientNonce, address _seller, uint _amount, \r\n        uint8 v, bytes32 r, bytes32 s) public\r\n    {\r\n        bytes32 sellHash = getSellHash(_tokenGet, _amountGet, _tokenGive, _amountGive, _expires, _clientNonce);\r\n        if (block.number <= _expires && orderFills[_seller][sellHash].add(_amount) <= _amountGet)        \r\n        {\r\n            if (orders[_seller][sellHash]) \r\n            {\r\n                tradeBalance(_tokenGet, _amountGet, _tokenGive, _amountGive, _seller, _amount);\r\n                orderFills[_seller][sellHash] = orderFills[_seller][sellHash].add(_amount);\r\n                emit OnBuy(_tokenGet, _amount, _tokenGive, _amountGive.mul(_amount) / _amountGet, _seller, msg.sender, sellHash, getEventId());\r\n                return;\r\n            }\r\n            else \r\n            if (ecrecover(sellHash,v,r,s) == _seller) \r\n            {\r\n                tradeBalance(_tokenGet, _amountGet, _tokenGive, _amountGive, _seller, _amount);\r\n                orderFills[_seller][sellHash] = orderFills[_seller][sellHash].add(_amount);\r\n                emit OnBuy(_tokenGet, _amount, _tokenGive, _amountGive.mul(_amount) / _amountGet, _seller, msg.sender, sellHash, getEventId());\r\n                return;\r\n            }\r\n            else\r\n            {\r\n                emit OnBuy(_tokenGet, 0, _tokenGive, 0, _seller, msg.sender, sellHash, getEventId());     //delete\r\n                return;\r\n            }\r\n        }\r\n        emit OnBuy(_tokenGet, 0, _tokenGive, 0, _seller, msg.sender, 0x0, getEventId());     //delete\r\n        return;\r\n    }\r\n\r\n    function buy3(address _tokenGet, uint _amountGet, address _tokenGive, uint _amountGive, uint _expires, string memory _clientNonce, address _seller, uint _amount, \r\n        bytes memory _sig) public\r\n    {\r\n        bytes32 sellHash = getSellHash(_tokenGet, _amountGet, _tokenGive, _amountGive, _expires, _clientNonce);\r\n        if (block.number <= _expires && orderFills[_seller][sellHash].add(_amount) <= _amountGet)        \r\n        {\r\n            if (orders[_seller][sellHash]) \r\n            {\r\n                tradeBalance(_tokenGet, _amountGet, _tokenGive, _amountGive, _seller, _amount);\r\n                orderFills[_seller][sellHash] = orderFills[_seller][sellHash].add(_amount);\r\n                emit OnBuy(_tokenGet, _amount, _tokenGive, _amountGive.mul(_amount) / _amountGet, _seller, msg.sender, sellHash, getEventId());\r\n                return;\r\n            }\r\n            else if (getAddress(sellHash, _sig) == _seller) \r\n            {\r\n                tradeBalance(_tokenGet, _amountGet, _tokenGive, _amountGive, _seller, _amount);\r\n                orderFills[_seller][sellHash] = orderFills[_seller][sellHash].add(_amount);\r\n                emit OnBuy(_tokenGet, _amount, _tokenGive, _amountGive.mul(_amount) / _amountGet, _seller, msg.sender, sellHash, getEventId());\r\n                return;\r\n            }\r\n            else\r\n            {\r\n                emit OnBuy(_tokenGet, 0, _tokenGive, 0, _seller, msg.sender, sellHash, getEventId());     //delete\r\n                return;\r\n            }\r\n        }\r\n        emit OnBuy(_tokenGet, 0, _tokenGive, 0, _seller, msg.sender, 0x0, getEventId());     //delete\r\n        return;\r\n    }\r\n\r\n    function tradeBalance(address _tokenGet, uint _amountGet, address _tokenGive, uint _amountGive, address _seller, uint _amount) private {\r\n        // require(_seller != msg.sender);\r\n        // return(_amount > 0);\r\n        tokenUserAmountOf[_tokenGet][msg.sender]  = tokenUserAmountOf[_tokenGet][msg.sender].sub(_amount);\r\n        tokenUserAmountOf[_tokenGet][_seller]     = tokenUserAmountOf[_tokenGet][_seller].add(_amount);\r\n        uint t1Amount = _amountGive.mul(_amount).div(_amountGet);\r\n        // return(t1Amount > 0);\r\n        tokenUserAmountOf[_tokenGive][msg.sender] = tokenUserAmountOf[_tokenGive][msg.sender].add(t1Amount);\r\n        tokenUserAmountOf[_tokenGive][_seller]    = tokenUserAmountOf[_tokenGive][_seller].sub(t1Amount);\r\n    }\r\n\r\n    function testBuy1(address _tokenGet, uint _amountGet, address _tokenGive, uint _amountGive, uint _expires, string memory _clientNonce, address _seller, \r\n        uint _amount, address _buyer) view public returns(bool _result) \r\n    {\r\n        _result = tokenUserAmountOf[_tokenGet][_buyer] >= _amount && availableVolume1(_tokenGet, _amountGet, _tokenGive, _amountGive, _expires, _clientNonce, _seller) >= _amount;   \r\n    }\r\n\r\n    function testBuy2(address _tokenGet, uint _amountGet, address _tokenGive, uint _amountGive, uint _expires, string memory _clientNonce, address _seller, \r\n        uint _amount, address _buyer, uint8 v, bytes32 r, bytes32 s) view public returns(bool _result) \r\n    {\r\n        _result = tokenUserAmountOf[_tokenGet][_buyer] >= _amount && availableVolume2(_tokenGet, _amountGet, _tokenGive, _amountGive, _expires, _clientNonce, _seller,  v,  r,  s) >= _amount;   \r\n    }\r\n\r\n    function testBuy3(address _tokenGet, uint _amountGet, address _tokenGive, uint _amountGive, uint _expires, string memory _clientNonce, address _seller, \r\n        uint _amount, address _buyer, bytes memory _sig) view public returns(bool _result) \r\n    {\r\n        _result = tokenUserAmountOf[_tokenGet][_buyer] >= _amount && availableVolume3(_tokenGet, _amountGet, _tokenGive, _amountGive, _expires, _clientNonce, _seller,  _sig) >= _amount;   \r\n    }\r\n\r\n    function availableVolume1(address _tokenGet, uint _amountGet, address _tokenGive, uint _amountGive, uint _expires, string memory _clientNonce, address _seller) \r\n        view public returns(uint _result) \r\n    {\r\n        bytes32 sellHash = getSellHash(_tokenGet, _amountGet, _tokenGive, _amountGive, _expires, _clientNonce);\r\n        if (orders[_seller][sellHash] && block.number <= _expires){\r\n            uint a2 = tokenUserAmountOf[_tokenGive][_seller].mul(_amountGet).div(_amountGive);\r\n            uint a1 = _amountGet.sub(orderFills[_seller][sellHash]);\r\n            if (a1 < a2) return a1;\r\n            return a2;\r\n        }\r\n        return 0;\r\n    }\r\n      \r\n    function availableVolume2(address _tokenGet, uint _amountGet, address _tokenGive, uint _amountGive, uint _expires, string memory _clientNonce, address _seller, \r\n        uint8 v, bytes32 r, bytes32 s)  public view returns(uint _result) \r\n    {\r\n        bytes32 sellHash = getSellHash(_tokenGet, _amountGet, _tokenGive, _amountGive, _expires, _clientNonce);\r\n        if ((orders[_seller][sellHash] || ecrecover(sellHash, v, r, s) == _seller) \r\n            && block.number <= _expires)\r\n        {\r\n            // uint a2 = tokenUserAmountOf[_tokenGive][_seller].mul( _amountGet) / _amountGive;\r\n            // uint a1 = _amountGet.sub(orderFills[_seller][sellHash]);\r\n            uint a2 = tokenUserAmountOf[_tokenGive][_seller].mul( _amountGet);\r\n            a2 = a2 / _amountGive;\r\n            uint a1 = _amountGet.sub(orderFills[_seller][sellHash]);\r\n            if (a1 < a2) return a1;\r\n            return a2;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function availableVolume3(address _tokenGet, uint _amountGet, address _tokenGive, uint _amountGive, uint _expires, string memory _clientNonce, address _seller, \r\n        bytes memory _sig)  public view returns(uint _result) \r\n    {\r\n        bytes32 sellHash = getSellHash(_tokenGet, _amountGet, _tokenGive, _amountGive, _expires, _clientNonce);\r\n        if ((orders[_seller][sellHash] || getAddress(sellHash, _sig) == _seller) \r\n            && block.number <= _expires)\r\n        {\r\n            // uint a2 = tokenUserAmountOf[_tokenGive][_seller].mul( _amountGet) / _amountGive;\r\n            // uint a1 = _amountGet.sub(orderFills[_seller][sellHash]);\r\n            uint a2 = tokenUserAmountOf[_tokenGive][_seller].mul( _amountGet);\r\n            a2 = a2 / _amountGive;\r\n            uint a1 = _amountGet.sub(orderFills[_seller][sellHash]);\r\n            if (a1 < a2) return a1;\r\n            return a2;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function amountFilled(address _tokenGet, uint _amountGet, address _tokenGive, uint _amountGive, uint _expires, string  _clientNonce, address _seller) \r\n        view external returns(uint) \r\n    {\r\n        bytes32 sellHash = getSellHash(_tokenGet, _amountGet, _tokenGive, _amountGive, _expires, _clientNonce);\r\n        return orderFills[_seller][sellHash];\r\n    }\r\n\r\n    function cancelOrder1(address _tokenGet, uint _amountGet, address _tokenGive, uint _amountGive, uint _expires, string  _clientNonce) external \r\n    {\r\n        bytes32 sellHash = getSellHash(_tokenGet, _amountGet, _tokenGive, _amountGive, _expires, _clientNonce);\r\n        if (orders[msg.sender][sellHash]){\r\n            orderFills[msg.sender][sellHash] = _amountGet;\r\n            emit OnCancel(_tokenGet, _amountGet, _tokenGive, _amountGive, _expires, _clientNonce, msg.sender, getEventId());\r\n        }\r\n        emit OnCancel(_tokenGet, 0, _tokenGive, 0, _expires, _clientNonce, msg.sender, getEventId());\r\n        return;\r\n    }\r\n\r\n    function cancelOrder2(address _tokenGet, uint _amountGet, address _tokenGive, uint _amountGive, uint _expires, string  _clientNonce,\r\n        uint8 v, bytes32 r, bytes32 s) external \r\n    {\r\n        bytes32 sellHash = getSellHash(_tokenGet, _amountGet, _tokenGive, _amountGive, _expires, _clientNonce);\r\n        if (orders[msg.sender][sellHash]){\r\n            orderFills[msg.sender][sellHash] = _amountGet;\r\n            emit OnCancel(_tokenGet, _amountGet, _tokenGive, _amountGive, _expires, _clientNonce, msg.sender, getEventId());\r\n            return;\r\n        }\r\n        else if (ecrecover(sellHash, v, r, s) ==  msg.sender){\r\n            orderFills[msg.sender][sellHash] = _amountGet;\r\n            emit OnCancel(_tokenGet, _amountGet, _tokenGive, _amountGive, _expires, _clientNonce, msg.sender, getEventId());\r\n            return;\r\n        }\r\n        emit OnCancel(_tokenGet, 0, _tokenGive, 0, _expires, _clientNonce, msg.sender, getEventId());\r\n        return;\r\n    }\r\n\r\n    function cancelOrder3(address _tokenGet, uint _amountGet, address _tokenGive, uint _amountGive, uint _expires, string  _clientNonce,\r\n        bytes  _sig) external \r\n    {\r\n        bytes32 sellHash = getSellHash(_tokenGet, _amountGet, _tokenGive, _amountGive, _expires, _clientNonce);\r\n        if (orders[msg.sender][sellHash]){\r\n            orderFills[msg.sender][sellHash] = _amountGet;\r\n            emit OnCancel(_tokenGet, _amountGet, _tokenGive, _amountGive, _expires, _clientNonce, msg.sender, getEventId());\r\n            return;\r\n        }\r\n        else if (getAddress(sellHash, _sig) ==  msg.sender){\r\n            orderFills[msg.sender][sellHash] = _amountGet;\r\n            emit OnCancel(_tokenGet, _amountGet, _tokenGive, _amountGive, _expires, _clientNonce, msg.sender, getEventId());\r\n            return;\r\n        }\r\n        emit OnCancel(_tokenGet, 0, _tokenGive, 0, _expires, _clientNonce, msg.sender, getEventId());\r\n        return;\r\n    }\r\n\r\n    function getAddress(bytes32 h, bytes memory sig) public pure returns (address _address) \r\n    {\r\n        bytes32 _r;\r\n        bytes32 _s;\r\n        uint8 _v;\r\n        if (sig.length == 65) {\r\n            assembly {\r\n                _r := mload(add(sig, 32))\r\n                _s := mload(add(sig, 64))\r\n                _v := and(mload(add(sig, 65)), 255)\r\n            }\r\n            if (_v < 27) {\r\n                _v += 27;\r\n            }\r\n            if (_v == 27 || _v == 28) {\r\n                _address = ecrecover(h, _v, _r, _s);\r\n            }\r\n        }\r\n    }\r\n\r\n    function() payable external {\r\n        // require(1 == 2); //selfdestruct(_to);\r\n        if(msg.value > 0){\r\n            _deposit();\r\n        }\r\n    }\r\n\r\n    \r\n    function testGetRSV(bytes32 h, bytes memory sig) public pure returns (address _address,  bytes32 _r, bytes32 _s, uint8 _v) \r\n    {\r\n        if (sig.length == 65) {\r\n            assembly {\r\n                _r := mload(add(sig, 32))\r\n                _s := mload(add(sig, 64))\r\n                _v := and(mload(add(sig, 65)), 255)\r\n            }\r\n            if (_v < 27) {\r\n                _v += 27;\r\n            }\r\n            if (_v == 27 || _v == 28) {\r\n                _address = ecrecover(h, _v, _r, _s);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"currentEventId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenGet\",\"type\":\"address\"},{\"name\":\"_amountGet\",\"type\":\"uint256\"},{\"name\":\"_tokenGive\",\"type\":\"address\"},{\"name\":\"_amountGive\",\"type\":\"uint256\"},{\"name\":\"_expires\",\"type\":\"uint256\"},{\"name\":\"_clientNonce\",\"type\":\"string\"},{\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"availableVolume1\",\"outputs\":[{\"name\":\"_result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orderFills\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenGet\",\"type\":\"address\"},{\"name\":\"_amountGet\",\"type\":\"uint256\"},{\"name\":\"_tokenGive\",\"type\":\"address\"},{\"name\":\"_amountGive\",\"type\":\"uint256\"},{\"name\":\"_expires\",\"type\":\"uint256\"},{\"name\":\"_clientNonce\",\"type\":\"string\"},{\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"amountFilled\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenGet\",\"type\":\"address\"},{\"name\":\"_amountGet\",\"type\":\"uint256\"},{\"name\":\"_tokenGive\",\"type\":\"address\"},{\"name\":\"_amountGive\",\"type\":\"uint256\"},{\"name\":\"_expires\",\"type\":\"uint256\"},{\"name\":\"_clientNonce\",\"type\":\"string\"},{\"name\":\"_seller\",\"type\":\"address\"},{\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"availableVolume3\",\"outputs\":[{\"name\":\"_result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"h\",\"type\":\"bytes32\"},{\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"testGetRSV\",\"outputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"},{\"name\":\"_v\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenGet\",\"type\":\"address\"},{\"name\":\"_amountGet\",\"type\":\"uint256\"},{\"name\":\"_tokenGive\",\"type\":\"address\"},{\"name\":\"_amountGive\",\"type\":\"uint256\"},{\"name\":\"_expires\",\"type\":\"uint256\"},{\"name\":\"_clientNonce\",\"type\":\"string\"}],\"name\":\"getSellHash\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenGet\",\"type\":\"address\"},{\"name\":\"_amountGet\",\"type\":\"uint256\"},{\"name\":\"_tokenGive\",\"type\":\"address\"},{\"name\":\"_amountGive\",\"type\":\"uint256\"},{\"name\":\"_expires\",\"type\":\"uint256\"},{\"name\":\"_clientNonce\",\"type\":\"string\"},{\"name\":\"_seller\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"buy2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenGet\",\"type\":\"address\"},{\"name\":\"_amountGet\",\"type\":\"uint256\"},{\"name\":\"_tokenGive\",\"type\":\"address\"},{\"name\":\"_amountGive\",\"type\":\"uint256\"},{\"name\":\"_expires\",\"type\":\"uint256\"},{\"name\":\"_clientNonce\",\"type\":\"string\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"testAllowance\",\"outputs\":[{\"name\":\"_result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenGet\",\"type\":\"address\"},{\"name\":\"_amountGet\",\"type\":\"uint256\"},{\"name\":\"_tokenGive\",\"type\":\"address\"},{\"name\":\"_amountGive\",\"type\":\"uint256\"},{\"name\":\"_expires\",\"type\":\"uint256\"},{\"name\":\"_clientNonce\",\"type\":\"string\"},{\"name\":\"_seller\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"buy3\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenUserAmountOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenGet\",\"type\":\"address\"},{\"name\":\"_amountGet\",\"type\":\"uint256\"},{\"name\":\"_tokenGive\",\"type\":\"address\"},{\"name\":\"_amountGive\",\"type\":\"uint256\"},{\"name\":\"_expires\",\"type\":\"uint256\"},{\"name\":\"_clientNonce\",\"type\":\"string\"},{\"name\":\"_seller\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"testBuy1\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenGet\",\"type\":\"address\"},{\"name\":\"_amountGet\",\"type\":\"uint256\"},{\"name\":\"_tokenGive\",\"type\":\"address\"},{\"name\":\"_amountGive\",\"type\":\"uint256\"},{\"name\":\"_expires\",\"type\":\"uint256\"},{\"name\":\"_clientNonce\",\"type\":\"string\"},{\"name\":\"_seller\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_buyer\",\"type\":\"address\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"testBuy2\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenGet\",\"type\":\"address\"},{\"name\":\"_amountGet\",\"type\":\"uint256\"},{\"name\":\"_tokenGive\",\"type\":\"address\"},{\"name\":\"_amountGive\",\"type\":\"uint256\"},{\"name\":\"_expires\",\"type\":\"uint256\"},{\"name\":\"_clientNonce\",\"type\":\"string\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"cancelOrder2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orders\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenGet\",\"type\":\"address\"},{\"name\":\"_amountGet\",\"type\":\"uint256\"},{\"name\":\"_tokenGive\",\"type\":\"address\"},{\"name\":\"_amountGive\",\"type\":\"uint256\"},{\"name\":\"_expires\",\"type\":\"uint256\"},{\"name\":\"_clientNonce\",\"type\":\"string\"},{\"name\":\"_seller\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_buyer\",\"type\":\"address\"},{\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"testBuy3\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"h\",\"type\":\"bytes32\"},{\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"getAddress\",\"outputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenGet\",\"type\":\"address\"},{\"name\":\"_amountGet\",\"type\":\"uint256\"},{\"name\":\"_tokenGive\",\"type\":\"address\"},{\"name\":\"_amountGive\",\"type\":\"uint256\"},{\"name\":\"_expires\",\"type\":\"uint256\"},{\"name\":\"_clientNonce\",\"type\":\"string\"}],\"name\":\"cancelOrder1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenGet\",\"type\":\"address\"},{\"name\":\"_amountGet\",\"type\":\"uint256\"},{\"name\":\"_tokenGive\",\"type\":\"address\"},{\"name\":\"_amountGive\",\"type\":\"uint256\"},{\"name\":\"_expires\",\"type\":\"uint256\"},{\"name\":\"_clientNonce\",\"type\":\"string\"},{\"name\":\"_seller\",\"type\":\"address\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"availableVolume2\",\"outputs\":[{\"name\":\"_result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenGet\",\"type\":\"address\"},{\"name\":\"_amountGet\",\"type\":\"uint256\"},{\"name\":\"_tokenGive\",\"type\":\"address\"},{\"name\":\"_amountGive\",\"type\":\"uint256\"},{\"name\":\"_expires\",\"type\":\"uint256\"},{\"name\":\"_clientNonce\",\"type\":\"string\"},{\"name\":\"_seller\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buy1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"testDepositToken\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"_result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenGet\",\"type\":\"address\"},{\"name\":\"_amountGet\",\"type\":\"uint256\"},{\"name\":\"_tokenGive\",\"type\":\"address\"},{\"name\":\"_amountGive\",\"type\":\"uint256\"},{\"name\":\"_expires\",\"type\":\"uint256\"},{\"name\":\"_clientNonce\",\"type\":\"string\"},{\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"cancelOrder3\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tokenGet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amountGet\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tokenGive\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amountGive\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_expires\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_clientNonce\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_eventId\",\"type\":\"uint64\"}],\"name\":\"OnSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tokenGet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_okAmountGet\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tokenGive\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_okAmountGive\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_sellHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_eventId\",\"type\":\"uint64\"}],\"name\":\"OnBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tokenGet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amountGet\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tokenGive\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amountGive\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_expires\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_clientNonce\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_eventId\",\"type\":\"uint64\"}],\"name\":\"OnCancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventId\",\"type\":\"uint64\"}],\"name\":\"OnDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventId\",\"type\":\"uint64\"}],\"name\":\"OnWithdraw\",\"type\":\"event\"}]","ContractName":"Gamma","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4416f603a4c8e8f0518274450a79f9149e4c70fb7796d6a21775b9411e530d8b"}]}