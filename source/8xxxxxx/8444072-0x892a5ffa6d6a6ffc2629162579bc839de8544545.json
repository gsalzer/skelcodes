{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.26;\r\n\r\n//这个接口，是用于对接 其它合约的--对接  常用的 如锁仓合约\r\ninterface tokenRecipient {\r\n  function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external;\r\n}\r\n\r\n/**  函数库\r\n * @title SafeMath --安全的数学运算\r\n * @dev  Math operations with safety checks that throw on error//数学运算与安全检查发生错误\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.//将两个数字相乘，在溢出时抛出。\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.//两个数的整数除法，截断商。\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0);   // Solidity automatically throws when dividing by 0  //分母为0时，自动抛出\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b);   // There is no case in which this doesn't hold //没有这种情况不成立。\r\n    return a / b;\r\n  }\r\n\r\n\r\n\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  //减去两个数字，在溢出时抛出（即如果减数大于被减数）。\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.//添加两个数字，在溢出时抛出。\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\ncontract Ownable {\r\n\r\n  address public owner;//合约拥有者的地址变量\r\n  address public COO; //设立首席运营官\r\n  address public CTO; //设立首席技术官\r\n\r\n//更换新的合约拥有者--事件通知\r\n  event OwnershipTransferred(address indexed _owner, address indexed _newAddress);\r\n//更换首席运营官--事件通知\r\n  event COOTransferred(address indexed _COO, address indexed _newAddress);\r\n//更换首席技术官--事件通知\r\n  event CTOTransferred(address indexed _CTO, address indexed _newAddress);\r\n\r\n  //永久取消合约拥有者的权限--事件通知\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\r\n   *\r\n   * 可拥有的构造函数将合同的原始“所有者”设置为发送方帐户。\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;  //把合约创建者的地址赋给 合约拥有者变量 owner\r\n    COO = msg.sender;    //把合约创建者的地址赋给 首席运营官变量 COO\r\n    CTO = msg.sender;    //把合约创建者的地址赋给 首席技术官变量 CTO\r\n  }\r\n\r\n\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   * // 如果由所有者以外的任何帐户调用，则抛出。\r\n   */\r\n      modifier onlyOwner() {\r\n        require(msg.sender == owner);  //判断当前消息发送者，是否为合约拥有者\r\n        _;  //替换符，发起者的函数代码，是放在这的\r\n      }\r\n\r\n\r\n      modifier onlyCOO() {\r\n        //判断当前消息发送者，是否为首席运营官\r\n        require(msg.sender == COO);\r\n        _;  //替换符，发起者的函数代码，是放在这的\r\n      }\r\n\r\n\r\n      modifier onlyCTO() {\r\n        //判断当前消息发送者，是否为首席技术官\r\n        require(msg.sender == CTO);\r\n        _;  //替换符，发起者的函数代码，是放在这的\r\n      }\r\n\r\n\r\n  /**\r\n   //允许当前所有者将合同的控制转移给新所有者。\r\n   */\r\n\r\n   function transferAddress(address _newAddress,uint _type) public onlyOwner returns (bool) {\r\n     require(_newAddress != address(0) && _type > 0  && _type < 4);                //判断是否为以太坊地址\r\n         if( _type == 1 ){\r\n               owner = _newAddress;                              //新的合约拥有者\r\n               emit OwnershipTransferred(owner, _newAddress);    //事件通知\r\n         }\r\n         if ( _type == 2 ){\r\n              COO = _newAddress;                              //新的首席运营官\r\n              emit COOTransferred(COO, _newAddress);          //事件通知\r\n         }\r\n         if( _type == 3 ){\r\n              CTO = _newAddress;                              //新的 首席技术官\r\n              emit CTOTransferred(CTO, _newAddress);           //事件通知\r\n         }\r\n         return true;\r\n   }\r\n\r\n\r\n\r\n//永久取消合约拥有者的权限--不可逆的\r\n  function renounceOwnership() public onlyOwner returns (bool){\r\n    owner = address(0);   //把合约拥有者的地址变为 0x000000000格式的\r\n    emit OwnershipRenounced(owner);   //事件通知\r\n\r\n    return true;\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract TokenERC20 is Ownable {\r\n\r\n  // 变量集\r\n  using SafeMath for uint256;   //把函数库附加到 SafeMath变量中\r\n\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals = 1;   // 表示，可以显示小数点后多少位数,上线时，改为18\r\n  uint256 public totalSupply;  // 合约代币总量数\r\n\r\n  mapping (address => uint256) public balanceOf;  //用户的代币余额\r\n  mapping (address => mapping (address => uint256)) public allowance;  //储存某地址授权某地址多少代币\r\n  mapping (address => bool) public frozenAccount;  // 保存冻结账户的冻结状态 ，默认为：false\r\n\r\n\r\n// 事件集\r\n    event Transfer(address indexed from, address indexed to, uint256 value);  //交易事件通知\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);  //授权某地址多少个代币-事件通知\r\n    event Burn(address indexed from, uint256 value);  // 事件，用来通知客户端代币被消毁\r\n    event FrozenFunds(address target, bool frozen);  // 冻结账户事件通知\r\n\r\n\r\n\r\n\r\n\r\n\r\n// 构造函数\r\n  constructor(uint256 _totalSupply,string _name,string tokenSymbol) public {\r\n      totalSupply = _totalSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\r\n      balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\r\n      name = _name;                                   // Set the name for display purposes\r\n      symbol = tokenSymbol;                               // Set the symbol for display purposes\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//主要方法开始\r\n/**代币转账功能--开始 **/\r\n   function _transfer(address _from, address _to, uint _value) internal  returns (bool) {\r\n         require(_to != address(0));                    //是否为以太坊地址\r\n         require(_value <= balanceOf[_from]);            //要转出的代币数，必须要少于当前代币余额数\r\n\r\n         balanceOf[_from] = balanceOf[_from].sub(_value); //扣减代币\r\n         balanceOf[_to] = balanceOf[_to].add(_value);     //增加代币\r\n\r\n         emit Transfer(_from, _to, _value);             //调用event事件，类似于log，web3可以回掉.\r\n         return true;\r\n       }\r\n\r\n//代币转账功能\r\n    function transfer(address _to, uint256 _value) public returns (bool){\r\n           //require(_filters(0,msg.sender,_to,_value)); //函数开关要在关闭状态 + 发送者地址为非冻结状态 + 接收者地址为非冻结状态\r\n           require( _transfer(msg.sender, _to, _value) );\r\n           return true;\r\n         }\r\n\r\n/**代币转账功能--结束 **/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/** 代币授权功能--开始**/\r\n//授权后的被接收方的余额是不会显示的，只能通过授权查询来显示\r\n    function _approve(address _spender, uint256 _value) internal returns (bool) {\r\n           allowance[msg.sender][_spender] = _value;\r\n           emit Approval(msg.sender, _spender, _value);\r\n           return true;\r\n         }\r\n\r\n//1--approve()-- 我授权某个地址可以用我多少个代币 --必须接口\r\n    function approve(address _to, uint256 _value) public returns (bool){\r\n           //require(_filters(1,msg.sender,_to,_value));\r\n           require( _approve(_to, _value) );\r\n           return true;\r\n        }\r\n\r\n\r\n/** 代币授权功能---结束 **/\r\n\r\n\r\n\r\n/**代币授权转账功能---开始**/\r\n        function _transferFrom(address _from, address _to, uint256 _value) internal returns (bool) {\r\n           //从以下的代码，可以看出这个方法的意思是，我 从某人授权给我的代币账户中，转到多少代币给别人\r\n            require(_to != address(0)  && _value <= balanceOf[_from] && _value <= allowance[_from][msg.sender]);\r\n\r\n            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);  //在 allowance[_from][msg.sender] 中扣减\r\n            require( _transfer(_from, _to, _value) ); //在 _from 中扣减，在 _to 中增加\r\n\r\n            emit Transfer(_from, _to, _value);\r\n            return true;\r\n          }\r\n\r\n          function transferFrom(address _from, address _to, uint256 _value) public returns (bool){\r\n                //require(_filters2(2,_from,_to,_value,msg.sender));  //过滤器\r\n                require( _transferFrom(_from,_to,_value) );\r\n                return true;\r\n             }\r\n\r\n/**代币授权转账功能---结束**/\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**追加扣减代币授权功能---开始**/\r\n//3--increaseApproval()-- 我对某个地址追加授权的代币\r\n      function _increaseApproval(address _spender, uint _addedValue) internal returns (bool) {\r\n         allowance[msg.sender][_spender] = allowance[msg.sender][_spender].add(_addedValue);//在原来的余额基础上追加\r\n\r\n         emit Approval(msg.sender, _spender, allowance[msg.sender][_spender]);\r\n         return true;\r\n         }\r\n\r\n      function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n            //require(_filters(3,msg.sender,_spender,_addedValue));\r\n            require( _increaseApproval(_spender,_addedValue) );\r\n            return true;\r\n         }\r\n\r\n\r\n//4--decreaseApproval()-- 我对某个地址扣减授权的代币\r\n      function _decreaseApproval(address _spender, uint _subtractedValue) internal returns (bool) {\r\n\r\n          uint oldValue = allowance[msg.sender][_spender]; //获得当前旧授权账户的余额\r\n\r\n          if (_subtractedValue > oldValue) {      //如果授权账户的余额不够 扣减\r\n                 allowance[msg.sender][_spender] = 0;     //清0\r\n           } else {\r\n                 allowance[msg.sender][_spender] = oldValue.sub(_subtractedValue);  //在余额的基础上扣减\r\n           }\r\n\r\n           emit Approval(msg.sender, _spender, allowance[msg.sender][_spender]);//事件通知\r\n           return true;\r\n         }\r\n\r\n       function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n             //require(_filters(4,msg.sender,_spender,_subtractedValue));\r\n             require( _decreaseApproval(_spender,_subtractedValue) );\r\n             return true;\r\n         }\r\n/**追加扣减代币授权功能---结束**/\r\n\r\n\r\n\r\n\r\n\r\n/**销毁代币功能---开始**/\r\n/**销毁某个地址的代币--内部方法(用户自已销毁)**/\r\n         function _burn(address _who, uint256 _value) internal returns (bool){\r\n              require(_value <= balanceOf[_who]);  //检查源账户是否额足够的代币\r\n\r\n              balanceOf[_who] = balanceOf[_who].sub(_value);   //从源账户(刘德华的账户)中减去\r\n              totalSupply = totalSupply.sub(_value);       //从合约总账户中减去\r\n\r\n              emit Burn(_who, _value);                       //销毁事件通知\r\n              emit Transfer(_who, address(0), _value);       //交易事件通知\r\n              return true;\r\n             }\r\n//5--burn() -- 用户自已销毁自已的代币\r\n        function burn(uint256 _value) public returns (bool) {\r\n              //require(_filters0(5,msg.sender,_value));\r\n              require( _burn(msg.sender, _value) );\r\n              return true;\r\n             }\r\n\r\n\r\n\r\n\r\n/**被授权的用户，销毁 指定授权给自已的代币-并销毁代币**/\r\n//举例：我   销毁 刘德华  授权 给我的代币\r\n         function _burnFrom(address _from, uint256 _value) internal returns (bool){\r\n               require(_value <= allowance[_from][msg.sender]);  //刘德华  授权 给我的代币数量，要大于 销毁 的数量\r\n               //从刘德华 授权 给我的账户中扣减\r\n               allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n               //1. 判断刘德华的账户足够 ； 2. 销毁代币  3. 事件通知\r\n               require( _burn(_from, _value) );  //调用销毁代币的内部方法\r\n               return true;\r\n           }\r\n\r\n//6--burnFrom()-- 我销毁某人（如：刘德华）  授权 给我的代币\r\n          function burnFrom(address _from, uint256 _value) public returns (bool) {\r\n               //require(_filters(6,msg.sender,_from,_value));\r\n               require( _burnFrom(_from,_value) );\r\n               return true;\r\n           }\r\n\r\n\r\n/**销毁代币功能---结束**/\r\n\r\n\r\n\r\n\r\n\r\n/**空投代币功能---开始**/\r\n//无中生有--空投代币\r\n     function _mintToken(address target, uint256 mintedAmount) onlyOwner internal returns (bool) {\r\n         //注：totalSupply 是 代币的总数；  balanceOf[this] -- 是合约当前的代币余额，两者是不同的\r\n            totalSupply = totalSupply.add(mintedAmount);       //合约总账户增加代币\r\n            balanceOf[target] = balanceOf[target].add(mintedAmount);  //某地址增加代币\r\n\r\n            emit Transfer(0, this, mintedAmount);       //合约总账户增加代币---事件通知\r\n            emit Transfer(this, target, mintedAmount);  //某地址增加代币--事件通知\r\n            return true;\r\n         }\r\n\r\n//7--mintToken()--对某个地址空投代币\r\n    function mintToken(address _target, uint256 _mintedAmount) onlyOwner public returns (bool) {\r\n            //require(_filters0(7,_target,_mintedAmount));\r\n            require( _mintToken(_target,_mintedAmount) );\r\n            return true;\r\n         }\r\n\r\n\r\n\r\n\r\n/**空投代币功能---结束**/\r\n\r\n\r\n\r\n\r\n\r\n/**冻结账户功能---开始**/\r\n/**冻结账户的方法**/\r\n     function _freezeAccount(address target, bool freeze) onlyCTO internal  returns (bool) {\r\n           frozenAccount[target] = freeze;     //值进来的参数是真或假\r\n           emit  FrozenFunds(target, freeze);\r\n           return true;\r\n        }\r\n\r\n//8--freezeAccount() --对某地址进行冻结或解冻\r\n     function freezeAccount(address _target, bool _freeze) onlyCTO public returns (bool) {\r\n           //require(values[8]==0 && frozenAccount[_target] != _freeze);\r\n           require( _freezeAccount(_target,_freeze) );\r\n           return true;\r\n        }\r\n\r\n\r\n\r\n/**冻结账户功能---结束**/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**高级功能---开始**/\r\n//15--意思是：发送者  授权某地址（是合约地址） ，可以使用自已多少代币，并传送数据--注：带数据，但不可接收ETH\r\n//approve方法的升级版--传入的是一个别的合约地址--必须接口\r\n//用法举例：比如，我先授权 A合约  1000个代币，接下来，调用 A合约 里的 receiveApproval() 方法，把这1000个代币转给 B\r\n   function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool) {\r\n           //require(_filters(15,msg.sender,_spender,_value));\r\n           require(_spender != address(this));   //排除传进来的是当前合约地址\r\n\r\n           tokenRecipient spender = tokenRecipient(_spender); //获得合约对像\r\n           if (approve(_spender, _value)) {  //我对前面定义的合约对像授权多少代币\r\n               spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n               return true;\r\n           }\r\n       }\r\n\r\n\r\n\r\n\r\n/**高级功能---开始**/\r\n\r\n\r\n\r\n\r\n\r\n\r\n  }","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CTO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"},{\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"transferAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_COO\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"COOTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_CTO\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"CTOTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"}]","ContractName":"TokenERC20","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000006fc23ac00000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000778696e78696e670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000037878620000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://1baa88dd5257c770e774ff37284c256e299f0c0afa1a9b453dc7549c118c7e6e"}]}