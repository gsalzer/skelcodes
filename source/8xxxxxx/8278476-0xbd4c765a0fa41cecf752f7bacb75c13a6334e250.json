{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * > Note that this information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * `IERC20.balanceOf` and `IERC20.transfer`.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @dev Implementation of the `IERC20` interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using `_mint`.\r\n * For a generic mechanism see `ERC20Mintable`.\r\n *\r\n * *For a detailed writeup see our guide [How to implement supply\r\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See `IERC20.approve`.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See `IERC20.totalSupply`.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.balanceOf`.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transfer`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.allowance`.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.approve`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transferFrom`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of `ERC20`;\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `value`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to `transfer`, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a `Transfer` event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n     /**\r\n     * @dev Destoys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a `Transfer` event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an `Approval` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See `_burn` and `_approve`.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: compound-pooling/contracts/interface/ICompoundERC20.sol\r\n\r\n// Compound finance ERC20 market interface\r\ninterface ICompoundERC20 {\r\n  function mint(uint mintAmount) external returns (uint);\r\n  function redeemUnderlying(uint redeemAmount) external returns (uint);\r\n  function borrow(uint borrowAmount) external returns (uint);\r\n  function repayBorrow(uint repayAmount) external returns (uint);\r\n  function borrowBalanceCurrent(address account) external returns (uint);\r\n  function exchangeRateCurrent() external returns (uint);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  function balanceOf(address account) external view returns (uint);\r\n  function decimals() external view returns (uint);\r\n  function underlying() external view returns (address);\r\n  function exchangeRateStored() external view returns (uint);\r\n}\r\n\r\n// File: compound-pooling/contracts/interface/IComptroller.sol\r\n\r\n// Compound finance comptroller\r\ninterface IComptroller {\r\n  function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\r\n}\r\n\r\n// File: compound-pooling/contracts/CompoundPool.sol\r\n\r\n/**\r\n * @title CompoundPool\r\n * @author Nate Welch <github.com/flyging>\r\n * @notice Based on Zefram Lou's implementation https://github.com/ZeframLou/pooled-cdai\r\n * @dev A bank that will pool compound tokens and allows the beneficiary to withdraw\r\n */\r\ncontract CompoundPool is ERC20, ERC20Detailed, Ownable {\r\n    using SafeMath for uint;\r\n\r\n    uint256 internal constant PRECISION = 10 ** 18;\r\n\r\n    ICompoundERC20 public compoundToken;\r\n    IERC20 public depositToken;\r\n    address public governance;\r\n    address public beneficiary;\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _name name of the pool share token\r\n     * @param _symbol symbol of the pool share token\r\n     * @param _comptroller the Compound Comptroller contract used to enter the compoundToken's market\r\n     * @param _compoundToken the Compound Token contract (e.g. cDAI)\r\n     * @param _depositToken the Deposit Token contract (e.g. DAI)\r\n     * @param _beneficiary the address that can withdraw excess deposit tokens (interest/donations)\r\n     */\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        IComptroller _comptroller,\r\n        ICompoundERC20 _compoundToken,\r\n        IERC20 _depositToken,\r\n        address _beneficiary\r\n    )\r\n        ERC20Detailed(_name, _symbol, 18)\r\n        public\r\n    {\r\n        compoundToken = _compoundToken;\r\n        depositToken = _depositToken;\r\n        beneficiary = _beneficiary;\r\n\r\n        _approveDepositToken(1);\r\n\r\n        // Enter compound token market\r\n        address[] memory markets = new address[](1);\r\n        markets[0] = address(compoundToken);\r\n        uint[] memory errors = _comptroller.enterMarkets(markets);\r\n        require(errors[0] == 0, \"Failed to enter compound token market\");\r\n    }\r\n\r\n    /**\r\n     * @dev used to restrict access of functions to the current beneficiary\r\n     */\r\n    modifier onlyBeneficiary() {\r\n        require(msg.sender == beneficiary, \"CompoundPool::onlyBeneficiary: Only callable by beneficiary\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Called by the `owner` to set a new beneficiary\r\n     * @dev This function will fail if called by a non-owner address\r\n     * @param _newBeneficiary The address that will become the new beneficiary\r\n     */\r\n    function updateBeneficiary(address _newBeneficiary) public onlyOwner {\r\n        beneficiary = _newBeneficiary;\r\n    }\r\n\r\n    /**\r\n     * @notice The beneficiary calls this function to withdraw excess deposit tokens\r\n     * @dev This function will fail if called by a non-beneficiary or if _amount is higher than the excess deposit tokens\r\n     * @param _to The address that the deposit tokens will be sent to\r\n     * @param _amount The amount of deposit tokens to send to the `_to` address\r\n     */\r\n    function withdrawInterest(address _to, uint256 _amount) public onlyBeneficiary returns (uint256) {\r\n        require(compoundToken.redeemUnderlying(_amount) == 0, \"CompoundPool::withdrawInterest: Compound redeem failed\");\r\n\r\n        //Doing this *after* `redeemUnderlying` so I don't have compoundToken do `exchangeRateCurrent` twice, it's not cheap\r\n        require(depositTokenStoredBalance() >= totalSupply(), \"CompoundPool::withdrawInterest: Not enough excess deposit token\");\r\n\r\n        depositToken.transfer(_to, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Called by someone wishing to deposit to the bank. This amount, plus previous user's balance, will always be withdrawable\r\n     * @dev Allowance for CompoundPool to transferFrom the msg.sender's balance must be set on the deposit token\r\n     * @param _amount The amount of deposit tokens to deposit\r\n     */\r\n    function deposit(uint256 _amount) public {\r\n        require(depositToken.transferFrom(msg.sender, address(this), _amount), \"CompoundPool::deposit: Transfer failed\");\r\n\r\n        _approveDepositToken(_amount);\r\n\r\n        require(compoundToken.mint(_amount) == 0, \"CompoundPool::deposit: Compound mint failed\");\r\n    \r\n        _mint(msg.sender, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Called by someone wishing to withdraw from the bank\r\n     * @dev This will fail if msg.sender doesn't have at least _amount pool share tokens\r\n     * @param _amount The amount of deposit tokens to withdraw\r\n     */\r\n    function withdraw(uint256 _amount) public {\r\n        _burn(msg.sender, _amount);\r\n\r\n        require(compoundToken.redeemUnderlying(_amount) == 0, \"CompoundPool::withdraw: Compound redeem failed\");\r\n\r\n        require(depositToken.transfer(msg.sender, _amount), \"CompoundPool::withdraw: Transfer failed\");\r\n    }\r\n\r\n    /**\r\n     * @notice Called by someone wishing to donate to the bank. This amount will *not* be added to users balance, and will be usable by the beneficiary.\r\n     * @dev Allowance for CompoundPool to transferFrom the msg.sender's balance must be set on the deposit token\r\n     * @param _amount The amount of deposit tokens to donate\r\n     */\r\n    function donate(uint256 _amount) public {\r\n        require(depositToken.transferFrom(msg.sender, address(this), _amount), \"CompoundPool::donate: Transfer failed\");\r\n\r\n        _approveDepositToken(_amount);\r\n\r\n        require(compoundToken.mint(_amount) == 0, \"CompoundPool::donate: Compound mint failed\");\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the amount of deposit tokens that are usable by the beneficiary. Basically, interestEarned+donations\r\n     * @dev Allowance for CompoundPool to transferFrom the msg.sender's balance must be set on the deposit token\r\n     */\r\n    function excessDepositTokens() public returns (uint256) {\r\n        return compoundToken.exchangeRateCurrent().mul(compoundToken.balanceOf(address(this))).div(PRECISION).sub(totalSupply());\r\n    }\r\n\r\n    function depositTokenStoredBalance() internal returns (uint256) {\r\n        return compoundToken.exchangeRateStored().mul(compoundToken.balanceOf(address(this))).div(PRECISION);\r\n    }\r\n\r\n    function _approveDepositToken(uint256 _minimum) internal {\r\n        if(depositToken.allowance(address(this), address(compoundToken)) < _minimum){\r\n            depositToken.approve(address(compoundToken),uint256(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff));\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/interface/IHumanityRegistry.sol\r\n\r\ncontract IHumanityRegistry {\r\n    function isHuman(address who) public view returns (bool);\r\n}\r\n\r\n// File: contracts/UniversalBasicIncome.sol\r\n\r\n/**\r\n * @title UniversalBasicIncome\r\n * @dev Dai that can be claimed by humans on the Human Registry.\r\n */\r\ncontract UniversalBasicIncome {\r\n    using SafeMath for uint;\r\n\r\n    IHumanityRegistry public registry;\r\n    IERC20 public dai;\r\n    CompoundPool public bank;\r\n\r\n    uint public constant MONTHLY_INCOME = 1e18; // 1 Dai\r\n    uint public constant INCOME_PER_SECOND = MONTHLY_INCOME / 30 days;\r\n\r\n    mapping (address => uint) public claimTimes;\r\n\r\n    constructor(IHumanityRegistry _registry, IERC20 _dai, CompoundPool _bank) public {\r\n        registry = _registry;\r\n        dai = _dai;\r\n        bank = _bank;\r\n    }\r\n\r\n    function claim() public {\r\n        require(registry.isHuman(msg.sender), \"UniversalBasicIncome::claim: You must be on the Humanity registry to claim income\");\r\n\r\n        uint income;\r\n        uint time = block.timestamp;\r\n\r\n        // If claiming for the first time, send 1 month of UBI\r\n        if (claimTimes[msg.sender] == 0) {\r\n            income = MONTHLY_INCOME;\r\n        } else {\r\n            income = time.sub(claimTimes[msg.sender]).mul(INCOME_PER_SECOND);\r\n        }\r\n\r\n        uint balance = bank.excessDepositTokens();\r\n        // If not enough Dai reserves, send the remaining balance\r\n        uint actualIncome = balance < income ? balance : income;\r\n\r\n        bank.withdrawInterest(msg.sender, actualIncome);\r\n        claimTimes[msg.sender] = time;\r\n    }\r\n\r\n    function claimableBalance(address human) public returns (uint256) {\r\n        if(!registry.isHuman(human)){\r\n            return 0;\r\n        }\r\n        uint income;\r\n        uint time = block.timestamp;\r\n\r\n        // If claiming for the first time, send 1 month of UBI\r\n        if (claimTimes[msg.sender] == 0) {\r\n            income = MONTHLY_INCOME;\r\n        } else {\r\n            income = time.sub(claimTimes[msg.sender]).mul(INCOME_PER_SECOND);\r\n        }\r\n\r\n        uint balance = bank.excessDepositTokens();\r\n        // If not enough Dai reserves, send the remaining balance\r\n        return balance < income ? balance : income;\r\n\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"human\",\"type\":\"address\"}],\"name\":\"claimableBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bank\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INCOME_PER_SECOND\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimTimes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MONTHLY_INCOME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"},{\"name\":\"_dai\",\"type\":\"address\"},{\"name\":\"_bank\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"UniversalBasicIncome","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"999","ConstructorArguments":"0000000000000000000000004ee46dc4962c2c2f6bcd4c098a0e2b28f66a5e9000000000000000000000000089d24a6b4ccb1b6faa2625fe562bdd9a23260359000000000000000000000000607d2dd18c9782dd0c387b2fe8a69bbcfe0e3eb3","Library":"","SwarmSource":"bzzr://d73d636467bce6a41bfefe06b0568e488afd0913c48f4e8eae4b7bd1a5d284ee"}]}