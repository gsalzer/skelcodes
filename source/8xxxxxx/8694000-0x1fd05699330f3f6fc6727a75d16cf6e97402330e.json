{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.26;\r\n\r\ncontract LuckyDaily {\r\n\r\n    mapping (address => uint256) public investedETH;\r\n    mapping (address => uint256) public lastInvest;\r\n\r\n    address public dev;\r\n    uint256 public totalInvestor = 0;\r\n\r\n    uint256 DAILY_RATE = 345600;\r\n    uint256 DEV_TAX = 5;\r\n\r\n    constructor() public {\r\n      dev = address(0x72bEe2Cf43f658F3EdF5f4E08bAB03b5F777FA0A);\r\n    }\r\n\r\n    function() payable public {\r\n\r\n    }\r\n\r\n    function investETH() public payable {\r\n\r\n        require(msg.value >= 0.01 ether);\r\n\r\n        if (getInvested() == 0) {\r\n          totalInvestor = SafeMath.add(totalInvestor, 1);\r\n        }\r\n\r\n        if (getProfit(msg.sender) > 0) {\r\n            uint256 profit = getProfit(msg.sender);\r\n            lastInvest[msg.sender] = now;\r\n            msg.sender.transfer(profit);\r\n        }\r\n\r\n        uint256 amount = msg.value;\r\n\r\n        uint256 devTax = SafeMath.div(SafeMath.mul(amount, DEV_TAX), 100);\r\n        dev.transfer(devTax);\r\n\r\n        investedETH[msg.sender] = SafeMath.add(investedETH[msg.sender], amount);\r\n        lastInvest[msg.sender] = now;\r\n    }\r\n\r\n    function withdraw() public{\r\n\r\n        uint256 profit = getProfit(msg.sender);\r\n\r\n        require(profit > 0);\r\n        lastInvest[msg.sender] = now;\r\n        msg.sender.transfer(profit);\r\n\r\n    }\r\n\r\n    function reinvestProfit() public {\r\n\r\n        uint256 profit = getProfit(msg.sender);\r\n\r\n        require(profit > 0);\r\n        lastInvest[msg.sender] = now;\r\n        investedETH[msg.sender] = SafeMath.add(investedETH[msg.sender], profit);\r\n\r\n    }\r\n\r\n    function getProfitFromSender() public view returns(uint256){\r\n        return getProfit(msg.sender);\r\n    }\r\n\r\n    function getProfit(address customer) public view returns(uint256){\r\n        uint256 secondsPassed = SafeMath.sub(now, lastInvest[customer]);\r\n        return SafeMath.div(SafeMath.mul(secondsPassed, investedETH[customer]), DAILY_RATE);\r\n    }\r\n\r\n    function getInvested() public view returns(uint256){\r\n        return investedETH[msg.sender];\r\n    }\r\n\r\n    function getStatistics() public view returns(uint256,uint256){\r\n        return (address(this).balance, totalInvestor);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getStatistics\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getProfitFromSender\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastInvest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"investETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"customer\",\"type\":\"address\"}],\"name\":\"getProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investedETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvestProfit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"LuckyDaily","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://3a30dccfaa66c76ee0f08cb02812ab6c250d6503a0ff5d04d4f423694d328125"}]}