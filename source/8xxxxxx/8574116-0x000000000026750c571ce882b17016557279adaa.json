{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.11; // optimization runs: 200, evm version: petersburg\r\n\r\n\r\n/**\r\n * @title DharmaUpgradeBeacon\r\n * @author 0age\r\n * @notice This contract holds the address of the current implementation for\r\n * Dharma smart wallets and lets a controller update that address in storage.\r\n */\r\ncontract DharmaUpgradeBeacon {\r\n  // The implementation address is held in storage slot zero.\r\n  address private _implementation;\r\n\r\n  // The controller that can update the implementation is set as a constant.\r\n  address private constant _CONTROLLER = address(\r\n    0x00000000002226C940b74d674B85E4bE05539663\r\n  );\r\n\r\n  /**\r\n   * @notice In the fallback function, allow only the controller to update the\r\n   * implementation address - for all other callers, return the current address.\r\n   * Note that this requires inline assembly, as Solidity fallback functions do\r\n   * not natively take arguments or return values.\r\n   */\r\n  function () external {\r\n    // Return implementation address for all callers other than the controller.\r\n    if (msg.sender != _CONTROLLER) {\r\n      // Load implementation from storage slot zero into memory and return it.\r\n      assembly {\r\n        mstore(0, sload(0))\r\n        return(0, 32)\r\n      }\r\n    } else {\r\n      // Set implementation - put first word in calldata in storage slot zero.\r\n      assembly { sstore(0, calldataload(0)) }\r\n    }\r\n  }\r\n}","ABI":"[{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"}]","ContractName":"DharmaUpgradeBeacon","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://202020202020446861726d6155706772616465426561636f6e20202020202020"}]}