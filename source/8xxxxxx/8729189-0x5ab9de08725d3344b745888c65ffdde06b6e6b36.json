{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.7;\r\n\r\ninterface RegistryInterface {\r\n    function proxies(address) external view returns (address);\r\n}\r\n\r\ninterface UserWalletInterface {\r\n    function owner() external view returns (address);\r\n}\r\n\r\ninterface CTokenInterface {\r\n    function borrow(uint borrowAmount) external returns (uint);\r\n    function transfer(address, uint) external returns (bool);\r\n    function repayBorrow(uint repayAmount) external returns (uint);\r\n    function underlying() external view returns (address);\r\n    function borrowBalanceCurrent(address account) external returns (uint);\r\n}\r\n\r\ninterface CETHInterface {\r\n    function balanceOf(address) external view returns (uint);\r\n    function mint() external payable; // For ETH\r\n    function repayBorrow() external payable; // For ETH\r\n    function borrowBalanceCurrent(address account) external returns (uint);\r\n    function redeem(uint redeemAmount) external returns (uint);\r\n}\r\n\r\ninterface ComptrollerInterface {\r\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\r\n    function exitMarket(address cTokenAddress) external returns (uint);\r\n}\r\n\r\ninterface TubInterface {\r\n    function open() external returns (bytes32);\r\n    function join(uint) external;\r\n    function exit(uint) external;\r\n    function lock(bytes32, uint) external;\r\n    function free(bytes32, uint) external;\r\n    function draw(bytes32, uint) external;\r\n    function wipe(bytes32, uint) external;\r\n    function give(bytes32, address) external;\r\n    function shut(bytes32) external;\r\n    function cups(bytes32) external view returns (address, uint, uint, uint);\r\n    function gem() external view returns (TokenInterface);\r\n    function gov() external view returns (TokenInterface);\r\n    function skr() external view returns (TokenInterface);\r\n    function sai() external view returns (TokenInterface);\r\n    function ink(bytes32) external view returns (uint);\r\n    function tab(bytes32) external returns (uint);\r\n    function rap(bytes32) external returns (uint);\r\n    function per() external view returns (uint);\r\n    function pep() external view returns (PepInterface);\r\n}\r\n\r\ninterface TokenInterface {\r\n    function allowance(address, address) external view returns (uint);\r\n    function balanceOf(address) external view returns (uint);\r\n    function approve(address, uint) external;\r\n    function transfer(address, uint) external returns (bool);\r\n    function deposit() external payable;\r\n    function withdraw(uint) external;\r\n}\r\n\r\ninterface PepInterface {\r\n    function peek() external returns (bytes32, bool);\r\n}\r\n\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Helpers is DSMath {\r\n\r\n    address public registry = 0x498b3BfaBE9F73db90D252bCD4Fa9548Cd0Fd981;\r\n    address public comptrollerAddr = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\r\n    address public saiTubAddress = 0x448a5065aeBB8E423F0896E6c5D525C040f59af3;\r\n\r\n    address payable public controllerOne = 0xf4B9aaae3AB39325D12EA62fCcD3c05266e07e21;\r\n    address payable public controllerTwo = 0xe866ecE4bbD0Ac75577225Ee2C464ef16DC8b1F3;\r\n\r\n    address public usdcAddr = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n    address public cEth = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\r\n    address public cDai = 0xF5DCe57282A584D2746FaF1593d3121Fcac444dC;\r\n    address public cUsdc = 0x39AA39c021dfbaE8faC545936693aC917d5E7563;\r\n\r\n    bytes32 public CDPID;\r\n\r\n    // /**\r\n    //  * FOR SECURITY PURPOSE\r\n    //  * only InstaDApp smart wallets can access the liquidity pool contract\r\n    //  */\r\n    // modifier isUserWallet {\r\n    //     address userAdd = UserWalletInterface(msg.sender).owner();\r\n    //     address walletAdd = RegistryInterface(registry).proxies(userAdd);\r\n    //     require(walletAdd != address(0), \"not-user-wallet\");\r\n    //     require(walletAdd == msg.sender, \"not-wallet-owner\");\r\n    //     _;\r\n    // }\r\n\r\n}\r\n\r\n\r\ncontract CompoundResolver is Helpers {\r\n\r\n    function mintAndBorrow(address[] memory cErc20, uint[] memory tknAmt) internal {\r\n        CETHInterface(cEth).mint.value(address(this).balance)();\r\n        for (uint i = 0; i < cErc20.length; i++) {\r\n            if (tknAmt[i] > 0) {\r\n                CTokenInterface ctknContract = CTokenInterface(cErc20[i]);\r\n                if (cErc20[i] != cEth) {\r\n                    address tknAddr = ctknContract.underlying();\r\n                    assert(ctknContract.borrow(tknAmt[i]) == 0);\r\n                    assert(TokenInterface(tknAddr).transfer(msg.sender, tknAmt[i]));\r\n                } else {\r\n                    assert(ctknContract.borrow(tknAmt[i]) == 0);\r\n                    msg.sender.transfer(tknAmt[i]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function paybackAndWithdraw(address[] memory cErc20) internal {\r\n        CETHInterface cethContract = CETHInterface(cEth);\r\n        for (uint i = 0; i < cErc20.length; i++) {\r\n            CTokenInterface ctknContract = CTokenInterface(cErc20[i]);\r\n            uint tknBorrowed = ctknContract.borrowBalanceCurrent(address(this));\r\n            if (tknBorrowed > 0) {\r\n                if (cErc20[i] != cEth) {\r\n                    assert(ctknContract.repayBorrow(tknBorrowed) == 0);\r\n                } else {\r\n                    cethContract.repayBorrow.value(tknBorrowed);\r\n                }\r\n            }\r\n        }\r\n        uint ethSupplied = cethContract.balanceOf(address(this));\r\n        assert(cethContract.redeem(ethSupplied) == 0);\r\n    }\r\n}\r\n\r\n\r\ncontract MakerResolver is CompoundResolver {\r\n\r\n    function lockAndDraw(uint _wad) internal {\r\n        uint ethToSupply = address(this).balance;\r\n        bytes32 cup = CDPID;\r\n        address tubAddr = saiTubAddress;\r\n\r\n        TubInterface tub = TubInterface(tubAddr);\r\n        TokenInterface weth = tub.gem();\r\n\r\n        (address lad,,,) = tub.cups(cup);\r\n        require(lad == address(this), \"cup-not-owned\");\r\n\r\n        weth.deposit.value(ethToSupply)();\r\n\r\n        uint ink = rdiv(ethToSupply, tub.per());\r\n        ink = rmul(ink, tub.per()) <= ethToSupply ? ink : ink - 1;\r\n\r\n        tub.join(ink);\r\n        tub.lock(cup, ink);\r\n\r\n\r\n        if (_wad > 0) {\r\n            tub.draw(cup, _wad);\r\n            tub.sai().transfer(msg.sender, _wad);\r\n        }\r\n    }\r\n\r\n    function wipeAndFree() internal {\r\n        TubInterface tub = TubInterface(saiTubAddress);\r\n        TokenInterface weth = tub.gem();\r\n\r\n        bytes32 cup = CDPID;\r\n        uint _wad = tub.tab(cup);\r\n\r\n        if (_wad > 0) {\r\n            (address lad,,,) = tub.cups(cup);\r\n            require(lad == address(this), \"cup-not-owned\");\r\n\r\n            tub.wipe(cup, _wad);\r\n        }\r\n\r\n        // free ETH\r\n        uint _jam = rmul(tub.ink(cup), tub.per());\r\n        uint ink = rdiv(_jam, tub.per());\r\n        ink = rmul(ink, tub.per()) <= _jam ? ink : ink - 1;\r\n        if (ink > 0) {\r\n            tub.free(cup, ink);\r\n\r\n            tub.exit(ink);\r\n            uint freeJam = weth.balanceOf(address(this)); // withdraw possible previous stuck WETH as well\r\n            weth.withdraw(freeJam);\r\n        }\r\n    }\r\n}\r\n\r\ncontract ProvideLiquidity is MakerResolver {\r\n\r\n    /**\r\n     * @dev user => ETH deposits\r\n     */\r\n    mapping (address => uint) public deposits;\r\n\r\n    event LogDepositETH(address user, uint amt);\r\n    event LogWithdrawETH(address user, uint amt);\r\n\r\n    /**\r\n     * @dev deposit ETH\r\n     */\r\n    function() external payable {\r\n        deposits[msg.sender] += msg.value;\r\n        emit LogDepositETH(msg.sender, msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev withdraw ETH\r\n     */\r\n    function withdrawETH(uint amount) external returns (uint withdrawAmt) {\r\n        require(deposits[msg.sender] > 0, \"no-balance\");\r\n        withdrawAmt = amount < deposits[msg.sender] ? amount : deposits[msg.sender];\r\n        msg.sender.transfer(withdrawAmt);\r\n        deposits[msg.sender] -= withdrawAmt;\r\n        emit LogWithdrawETH(msg.sender, withdrawAmt);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Access is ProvideLiquidity {\r\n\r\n    event LogLiquidityBorrow(address user, address[] ctknAddr, uint[] amount , bool isCompound);\r\n    event LogLiquidityPayback(address user, address[] ctknAddr, bool isCompound);\r\n\r\n    /**\r\n     * @dev borrow token and use them on InstaDApp's contract wallets\r\n     */\r\n    function accessToken(address[] calldata ctknAddr, uint[] calldata tknAmt, bool isCompound) external  {\r\n        if (tknAmt[0] > 0) {\r\n            if (isCompound) {\r\n                mintAndBorrow(ctknAddr, tknAmt);\r\n            } else {\r\n                lockAndDraw(tknAmt[0]);\r\n            }\r\n        }\r\n        emit LogLiquidityBorrow(msg.sender, ctknAddr, tknAmt, isCompound);\r\n    }\r\n\r\n    /**\r\n     * @dev Payback borrowed token and from InstaDApp's contract wallets\r\n     */\r\n    function paybackToken(address[] calldata ctknAddr, bool isCompound) external payable {\r\n        if (isCompound) {\r\n            paybackAndWithdraw(ctknAddr);\r\n        } else {\r\n            wipeAndFree();\r\n        }\r\n        emit LogLiquidityPayback(msg.sender, ctknAddr, isCompound);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Controllers is Access {\r\n\r\n    modifier isController {\r\n        require(msg.sender == controllerOne || msg.sender == controllerTwo, \"not-controller\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * give approval to other addresses\r\n     */\r\n    function setApproval(address erc20, address to) external isController {\r\n        TokenInterface(erc20).approve(to, uint(-1));\r\n    }\r\n\r\n\r\n    /**\r\n     * enter compound market to enable borrowing\r\n     */\r\n    function enterMarket(address[] calldata cTknAddrArr) external isController {\r\n        ComptrollerInterface troller = ComptrollerInterface(comptrollerAddr);\r\n        troller.enterMarkets(cTknAddrArr);\r\n    }\r\n\r\n    /**\r\n     * enter compound market to disable borrowing\r\n     */\r\n    function exitMarket(address cErc20) external isController {\r\n        ComptrollerInterface troller = ComptrollerInterface(comptrollerAddr);\r\n        troller.exitMarket(cErc20);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract InstaPool is Controllers {\r\n\r\n    constructor() public {\r\n        TubInterface tub = TubInterface(saiTubAddress);\r\n        CDPID = tub.open(); // new SCD CDP\r\n        TokenInterface weth = tub.gem();\r\n        TokenInterface peth = tub.skr();\r\n        TokenInterface dai = tub.sai();\r\n        TokenInterface mkr = tub.gov();\r\n        weth.approve(saiTubAddress, uint(-1));\r\n        peth.approve(saiTubAddress, uint(-1));\r\n        dai.approve(saiTubAddress, uint(-1));\r\n        mkr.approve(saiTubAddress, uint(-1));\r\n        dai.approve(cDai, uint(-1));\r\n        TokenInterface(usdcAddr).approve(cUsdc, uint(-1));\r\n        TokenInterface(cDai).approve(cDai, uint(-1));\r\n        TokenInterface(cUsdc).approve(cUsdc, uint(-1));\r\n        TokenInterface(cEth).approve(cEth, uint(-1));\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"controllerOne\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"comptrollerAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ctknAddr\",\"type\":\"address[]\"},{\"name\":\"isCompound\",\"type\":\"bool\"}],\"name\":\"paybackToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CDPID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cTknAddrArr\",\"type\":\"address[]\"}],\"name\":\"enterMarket\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saiTubAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controllerTwo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ctknAddr\",\"type\":\"address[]\"},{\"name\":\"tknAmt\",\"type\":\"uint256[]\"},{\"name\":\"isCompound\",\"type\":\"bool\"}],\"name\":\"accessToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdcAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cDai\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cEth\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"erc20\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"setApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cUsdc\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cErc20\",\"type\":\"address\"}],\"name\":\"exitMarket\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[{\"name\":\"withdrawAmt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ctknAddr\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"isCompound\",\"type\":\"bool\"}],\"name\":\"LogLiquidityBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ctknAddr\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"isCompound\",\"type\":\"bool\"}],\"name\":\"LogLiquidityPayback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"LogDepositETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawETH\",\"type\":\"event\"}]","ContractName":"InstaPool","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://90ee7300e4387cfece4808e76a872b55cf194361c3a7a9549c896fb02e8544c8"}]}