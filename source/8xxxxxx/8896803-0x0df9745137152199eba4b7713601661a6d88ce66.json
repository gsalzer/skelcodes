{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.1;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract ERC20Interface {\r\n\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n\r\n}\r\n\r\n\r\ncontract FiatContract {\r\n  function ETH(uint _id) public view returns (uint256);\r\n  function USD(uint _id) public view returns (uint256);\r\n  function updatedAt(uint _id) public view returns (uint);\r\n}\r\n\r\n\r\ncontract TopUp is ERC20Interface {\r\n\r\n    using SafeMath for uint;\r\n\r\n\r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals;\r\n    uint _totalSupply;\r\n    uint public saleTime;\r\n    uint public endTime;\r\n    uint public ethCent;\r\n    uint public ethPrice;\r\n    uint investCounter = 0;\r\n    uint public totalRemaining = 0;\r\n    address payable owner;\r\n    address sender;\r\n    uint public investorComission;\r\n    uint public tokenPriceCents;\r\n\r\n    struct InvestTransaction {\r\n        address investorAddress;\r\n        uint boughtAmount;\r\n        uint filledAmount;\r\n    }\r\n\r\n\r\n    mapping(uint => InvestTransaction) investTransactions;\r\n    mapping(address => uint[]) investIndexes;\r\n    mapping(address => uint) balances;\r\n    mapping(address => uint) credits;\r\n    mapping(address => uint) totalSold;\r\n    mapping(address => uint) soldAmount;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n    \r\n    modifier isInvestable(){\r\n        require(now < saleTime, \"invest time is over\");\r\n        _;\r\n    }\r\n    \r\n    modifier isBuyable(){\r\n        require(now > saleTime && now < endTime, \"buy time is over\");\r\n        _;\r\n    }\r\n\r\n\r\n    modifier isOver(){\r\n        require(now > endTime, \"buy time not over yet\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    modifier onlySender {\r\n        require(msg.sender == sender);\r\n        _;\r\n    }\r\n\r\n    event Invest(address indexed from, uint tokens);\r\n\r\n\r\n    constructor() public {\r\n    \r\n        symbol = 'PESTE'; //changable\r\n        name = 'Pistachio'; //changable\r\n        decimals = 2; //changable\r\n        uint total = 10000000000; //changable\r\n        saleTime = now + (1051200 * 1 minutes); //changable\r\n        endTime = now + (2628000 * 1 minutes); //changable\r\n        investorComission = 10; //changable\r\n        tokenPriceCents = 1; //changable\r\n        ethCent = 52548607461902; //changable\r\n        \r\n        /******* DO NOT CHANGE ANYTHING BELLOW ***********/\r\n        owner = msg.sender;\r\n        sender = msg.sender;\r\n        _totalSupply = total * 10**uint(decimals);\r\n        balances[owner] = _totalSupply;\r\n\r\n    }\r\n\r\n    function setComission(uint _comissionPercentage) public onlyOwner{\r\n        investorComission = _comissionPercentage;\r\n    }\r\n    \r\n    \r\n    function setSender(address _sender) public onlyOwner returns (bool){\r\n        sender = _sender;\r\n        return true;\r\n    }\r\n    \r\n    function setEthPrice(uint _ethCent, uint _ethPrice) public onlySender returns (bool) {\r\n        ethCent = _ethCent;\r\n        ethPrice = _ethPrice;\r\n        return true;\r\n    }\r\n    \r\n    function calcPrice(uint qty) public view returns (uint256) {\r\n        return ethCent.mul(tokenPriceCents).mul(qty).div(100);\r\n    }\r\n    \r\n    function getStage() public view returns (uint){\r\n        if(now < saleTime){\r\n            return 0;\r\n        }\r\n        if(now > saleTime && now < endTime){\r\n            return 1;\r\n        }\r\n        return 2;    \r\n    }\r\n    \r\n    function calcPriceInvest(uint qty) public view returns (uint256) {\r\n        uint rawPrice = ethCent.mul(tokenPriceCents).mul(qty).div(100);\r\n        uint discount = rawPrice.mul(investorComission).div(100);\r\n        return rawPrice.sub(discount);\r\n    }\r\n    \r\n    \r\n    function invest(uint qty) public payable isInvestable returns(bool){\r\n        require(msg.value >= calcPriceInvest(qty));\r\n        credits[msg.sender] = credits[msg.sender].add(qty);\r\n        InvestTransaction storage iTx = investTransactions[investCounter];\r\n        iTx.investorAddress = msg.sender;\r\n        iTx.boughtAmount = qty;\r\n        iTx.filledAmount = 0;\r\n        investIndexes[msg.sender].push(investCounter);\r\n        investCounter++;\r\n        totalRemaining = totalRemaining.add(qty);\r\n        emit Invest(msg.sender, qty);\r\n        return true;\r\n    }\r\n    \r\n    function getInvestByAddress(address _addr) public view returns (uint[] memory){\r\n        uint[] memory invInx = investIndexes[_addr];\r\n        return invInx;\r\n    }\r\n    \r\n    function investAndRecieve(uint qty) public payable isInvestable returns(bool){\r\n        require(msg.value >= calcPriceInvest(qty));\r\n        transferFromOwner(msg.sender, qty);\r\n        return true;\r\n    }\r\n    \r\n\r\n    function getInvesorCount() public view returns (uint){\r\n        return investCounter;\r\n    }\r\n    \r\n    function getInvestorAdressAtIndex(uint indx) public view returns (address, uint, uint){\r\n        InvestTransaction memory iTx = investTransactions[indx];\r\n        return (iTx.investorAddress,iTx.boughtAmount, iTx.filledAmount);\r\n    }\r\n\r\n\r\n    function buy(uint qty) public payable isBuyable returns(bool){\r\n        require(qty > 0);\r\n        require(msg.value >= calcPrice(qty));\r\n        require(totalRemaining >= qty);\r\n\r\n        uint i = 0;\r\n        uint remaining = qty;\r\n        for(i; i < investCounter ; i++){\r\n                if(remaining <= 0){\r\n                 break;   \r\n                }\r\n                if(investTransactions[i].boughtAmount > investTransactions[i].filledAmount){\r\n                    uint txRem = investTransactions[i].boughtAmount.sub(investTransactions[i].filledAmount);\r\n\r\n                    if(txRem < remaining){\r\n                        investTransactions[i].filledAmount = investTransactions[i].boughtAmount;\r\n                        totalSold[investTransactions[i].investorAddress] = totalSold[investTransactions[i].investorAddress].add(txRem);\r\n                        remaining = remaining.sub(txRem);\r\n                    }else if(txRem == remaining){\r\n                        investTransactions[i].filledAmount = investTransactions[i].boughtAmount;\r\n                        totalSold[investTransactions[i].investorAddress] = totalSold[investTransactions[i].investorAddress].add(remaining);\r\n                        remaining = 0;\r\n                        break;\r\n                    }else{\r\n                        investTransactions[i].filledAmount = investTransactions[i].filledAmount.add(remaining);\r\n                        totalSold[investTransactions[i].investorAddress] = totalSold[investTransactions[i].investorAddress].add(remaining);\r\n                        remaining = 0;\r\n                        break;\r\n                    }\r\n                }\r\n        }\r\n        totalRemaining = totalRemaining.sub(qty);\r\n        transferFromOwner(msg.sender, qty);\r\n        return true;\r\n    }\r\n    \r\n    \r\n    function claimEther(uint tokenCount) public isOver{\r\n        require(credits[msg.sender] > 0, \"you don't have any credits\");\r\n        require(totalSold[msg.sender] >= tokenCount, \"req amount is greater than sold\");\r\n        uint reqAmount = calcPrice(tokenCount);\r\n        require( reqAmount > getEtherBalance(),\"not enough ether in countract\");\r\n        credits[msg.sender] = credits[msg.sender].sub(reqAmount);\r\n        msg.sender.transfer(reqAmount);\r\n    }\r\n    \r\n    \r\n    function claimTokens(uint tokenCount) public isOver{\r\n        require(credits[msg.sender] > tokenCount, \"requested tokens is greater than credit\");\r\n        credits[msg.sender] = credits[msg.sender].sub(tokenCount);\r\n        transferFromOwner(msg.sender,tokenCount);\r\n         emit Transfer(owner, msg.sender, tokenCount);\r\n    }\r\n\r\n    function getSoldByAddress(address _addr) public view returns(uint){\r\n        return totalSold[_addr];\r\n    }\r\n\r\n    function nowTime() public view returns(uint){\r\n        return block.timestamp;\r\n    }\r\n\r\n    function getEtherBalance() public view returns(uint){\r\n        return address(this).balance;\r\n    }\r\n    \r\n    \r\n    function withdrawEther() public onlyOwner returns(bool){\r\n        owner.transfer(getEtherBalance());\r\n        return true;\r\n    }\r\n    \r\n    \r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Total supply\r\n    // ------------------------------------------------------------------------\r\n    function totalSupply() public view returns (uint) {\r\n        return _totalSupply.sub(balances[address(0)]);\r\n    }\r\n    \r\n\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Get the token balance for account `tokenOwner`\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from token owner's account to `to` account\r\n    // - Owner's account must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n\r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n\r\n    function transferFromOwner(address to, uint tokens) private returns (bool success) {\r\n        require(tokens <= balances[owner]);\r\n        balances[owner] = balances[owner].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(owner, to, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account\r\n    //\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n    // recommends that there are no checks for the approval double-spend attack\r\n    // as this should be implemented in user interfaces\r\n    // ------------------------------------------------------------------------\r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer `tokens` from the `from` account to the `to` account\r\n    //\r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n    // for spending from the `from` account and\r\n    // - From account must have sufficient balance to transfer\r\n    // - Spender must have sufficient allowance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        balances[from] = balances[from].sub(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ------------------------------------------------------------------------\r\n\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Don't accept ETH\r\n    // ------------------------------------------------------------------------\r\n    function () external payable {\r\n        \r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Invest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"qty\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"qty\",\"type\":\"uint256\"}],\"name\":\"calcPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"qty\",\"type\":\"uint256\"}],\"name\":\"calcPriceInvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenCount\",\"type\":\"uint256\"}],\"name\":\"claimEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenCount\",\"type\":\"uint256\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethCent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEtherBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInvesorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getInvestByAddress\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"indx\",\"type\":\"uint256\"}],\"name\":\"getInvestorAdressAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getSoldByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"qty\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"qty\",\"type\":\"uint256\"}],\"name\":\"investAndRecieve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorComission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nowTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_comissionPercentage\",\"type\":\"uint256\"}],\"name\":\"setComission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethCent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ethPrice\",\"type\":\"uint256\"}],\"name\":\"setEthPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"setSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPriceCents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TopUp","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://2ea622c2f348bcab69bc69779891e84d0349263368a9771cb9f03358a568b71c"}]}