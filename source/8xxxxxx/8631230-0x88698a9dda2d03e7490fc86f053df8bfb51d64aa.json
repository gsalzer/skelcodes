{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.11;\r\n\r\n/**\r\n* @title BCT ERC20 token\r\n*\r\n*\r\n*/\r\n\r\ncontract Ownable {\r\n  address private _owner;\r\n  \r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  \r\n  /**\r\n  * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n  * account.\r\n  */\r\n  constructor () internal {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n  \r\n  /**\r\n  * @return the address of the owner.\r\n  */\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n  \r\n  /**\r\n  * @dev Throws if called by any account other than the owner.\r\n  */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n  \r\n  /**\r\n  * @return true if `msg.sender` is the owner of the contract.\r\n  */\r\n  function isOwner() public view returns (bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n  \r\n  /**\r\n  * @dev Allows the current owner to relinquish control of the contract.\r\n  * It will not be possible to call the functions with the `onlyOwner`\r\n  * modifier anymore.\r\n  * @notice Renouncing ownership will leave the contract without an owner,\r\n  * thereby removing any functionality that is only available to the owner.\r\n  */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n  \r\n  /**\r\n  * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n  * @param newOwner The address to transfer ownership to.\r\n  */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n  \r\n  /**\r\n  * @dev Transfers control of the contract to a newOwner.\r\n  * @param newOwner The address to transfer ownership to.\r\n  */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n  \r\n  bool public paused = false;\r\n  \r\n  \r\n  /**\r\n  * @dev Modifier to make a function callable only when the contract is not paused.\r\n  */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n  \r\n  /**\r\n  * @dev Modifier to make a function callable only when the contract is paused.\r\n  */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n  \r\n  /**\r\n  * @dev called by the owner to pause, triggers stopped state\r\n  */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n  \r\n  /**\r\n  * @dev called by the owner to unpause, returns to normal state\r\n  */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n\r\ncontract IERC20 {\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  \r\n  function transfer2(address to, uint256 value) external returns (bool);\r\n  \r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  \r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n  \r\n  function totalSupply() external view returns (uint256);\r\n  \r\n  function balanceOf(address who) external view returns (uint256);\r\n  \r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  \r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  \r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ERC20 is IERC20 {\r\n  using SafeMath for uint256;\r\n  \r\n  mapping (address => uint256) public _balances;\r\n  \r\n  mapping (address => mapping (address => uint256)) private _allowed;\r\n  \r\n  uint256 public totalSupply;\r\n  \r\n  \r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param owner The address to query the balance of.\r\n  * @return A uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n    return _balances[owner];\r\n  }\r\n  \r\n  /**\r\n  * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n  * @param owner address The address which owns the funds.\r\n  * @param spender address The address which will spend the funds.\r\n  * @return A uint256 specifying the amount of tokens still available for the spender.\r\n  */\r\n  function allowance(address owner, address spender) public view returns (uint256) {\r\n    return _allowed[owner][spender];\r\n  }\r\n  \r\n  /**\r\n  * @dev Transfer token to a specified address\r\n  * @param to The address to transfer to.\r\n  * @param value The amount to be transferred.\r\n  */\r\n  function transfer(address to, uint256 value) public returns (bool) {\r\n    _transfer(msg.sender, to, value);\r\n    return true;\r\n  }\r\n  \r\n  function transfer2(address to, uint256 value) public returns (bool) {\r\n    _transfer2(msg.sender, to, value);\r\n    return true;\r\n  }\r\n  \r\n  /**\r\n  * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n  * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n  * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n  * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n  * @param spender The address which will spend the funds.\r\n  * @param value The amount of tokens to be spent.\r\n  */\r\n  \r\n  function approve(address spender, uint256 value) public returns (bool) {\r\n    _approve(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n  \r\n  /**\r\n  * @dev Transfer tokens from one address to another.\r\n  * Note that while this function emits an Approval event, this is not required as per the specification,\r\n  * and other compliant implementations may not emit the event.\r\n  * @param from address The address which you want to send tokens from\r\n  * @param to address The address which you want to transfer to\r\n  * @param value uint256 the amount of tokens to be transferred\r\n  */\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n    _transfer(from, to, value);\r\n    _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\r\n    return true;\r\n  }\r\n  \r\n  /**\r\n  * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n  * approve should be called when _allowed[msg.sender][spender] == 0. To increment\r\n  * allowed value is better to use this function to avoid 2 calls (and wait until\r\n  * the first transaction is mined)\r\n  * Emits an Approval event.\r\n  * @param spender The address which will spend the funds.\r\n  * @param addedValue The amount of tokens to increase the allowance by.\r\n  */\r\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n    _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\r\n    return true;\r\n  }\r\n  \r\n  /**\r\n  * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n  * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\r\n  * allowed value is better to use this function to avoid 2 calls (and wait until\r\n  * the first transaction is mined)\r\n  * Emits an Approval event.\r\n  * @param spender The address which will spend the funds.\r\n  * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n  */\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n    _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\r\n    return true;\r\n  }\r\n  \r\n  /**\r\n  * @dev Transfer token for a specified addresses\r\n  * @param from The address to transfer from.\r\n  * @param to The address to transfer to.\r\n  * @param value The amount to be transferred.\r\n  */\r\n  function _transfer(address from, address to, uint256 value) internal {\r\n    require(to != address(0));\r\n    \r\n    _balances[from] = _balances[from].sub(value);\r\n    _balances[to] = _balances[to].add(value);\r\n    emit Transfer(from, to, value);\r\n  }\r\n  \r\n  function _transfer2(address from, address to, uint256 value) internal {\r\n    \r\n    \r\n    _balances[from] = _balances[from].sub(value);\r\n    _balances[to] = _balances[to].add(value);\r\n    emit Transfer(from, to, value);\r\n  }\r\n  \r\n  \r\n  \r\n  /**\r\n  * @dev Approve an address to spend another addresses' tokens.\r\n  * @param owner The address that owns the tokens.\r\n  * @param spender The address that will spend the tokens.\r\n  * @param value The number of tokens that can be spent.\r\n  */\r\n  function _approve(address owner, address spender, uint256 value) internal {\r\n    require(spender != address(0));\r\n    require(owner != address(0));\r\n    \r\n    _allowed[owner][spender] = value;\r\n    emit Approval(owner, spender, value);\r\n  }\r\n  \r\n  \r\n}\r\n\r\n\r\n\r\n\r\ncontract ERC20Pausable is ERC20, Pausable {\r\n  \r\n  function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\r\n    return super.transfer(to, value);\r\n  }\r\n  \r\n  function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\r\n    return super.transferFrom(from, to, value);\r\n  }\r\n  \r\n  function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\r\n    return super.approve(spender, value);\r\n  }\r\n  \r\n  function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool success) {\r\n    return super.increaseAllowance(spender, addedValue);\r\n  }\r\n  \r\n  function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool success) {\r\n    return super.decreaseAllowance(spender, subtractedValue);\r\n  }\r\n}\r\n\r\n\r\ncontract ReentrancyGuard {\r\n  // counter to allow mutex lock with only one SSTORE operation\r\n  uint256 private _guardCounter;\r\n  \r\n  constructor () internal {\r\n    // The counter starts at one to prevent changing it from zero to a non-zero\r\n    // value, which is a more expensive operation.\r\n    _guardCounter = 1;\r\n  }\r\n  \r\n  /**\r\n  * @dev Prevents a contract from calling itself, directly or indirectly.\r\n  * Calling a `nonReentrant` function from another `nonReentrant`\r\n  * function is not supported. It is possible to prevent this from happening\r\n  * by making the `nonReentrant` function external, and make it call a\r\n  * `private` function that does the actual work.\r\n  */\r\n  modifier nonReentrant() {\r\n    _guardCounter += 1;\r\n    uint256 localCounter = _guardCounter;\r\n    _;\r\n    require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\ncontract BCTcontract is Pausable, ReentrancyGuard {\r\n  using SafeMath for uint256;\r\n  \r\n  // the token being sold\r\n  BCTToken public token;\r\n  \r\n  mapping(address => uint256) balances;\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n  \r\n  uint256 constant public tokenDecimals = 18;\r\n  \r\n  // totalSupply\r\n  uint256 public totalSupply = 1000000000 * (10 ** uint256(tokenDecimals));\r\n  \r\n  // minimum contribution \r\n  uint256 public investorMinCap = 1 ether; \r\n  \r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n  \r\n  //ICO tokens\r\n  uint256 public contractCap;\r\n  uint256 public soldTokens;\r\n  bool public contractEnabled = false;\r\n  \r\n  address payable private walletOne = 0xafe8B6022896B41E18b74Fa22e09240e1F375508;\r\n  \r\n  //Sale rates\r\n  uint256 public STANDARD_RATE = 560;\r\n  \r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n  \r\n  \r\n  constructor () public {\r\n    token = createTokenContract();\r\n    \r\n  }\r\n  \r\n  \r\n  //\r\n  // Token related operations\r\n  //\r\n  // creates the token to be sold.\r\n  // override this method to have crowdsale of a specific mintable token.\r\n  function createTokenContract() internal returns (BCTToken) {\r\n    return new BCTToken();\r\n  }\r\n  \r\n  // enable token transferability\r\n  function enableTokenTransferability() external onlyOwner {\r\n    token.unpause();\r\n  }\r\n  \r\n  // disable token transferability\r\n  function disableTokenTransferability() external onlyOwner {\r\n    token.pause();\r\n  }\r\n  \r\n  // transfer token to designated address\r\n  function transfer(address to, uint256 value) external onlyOwner returns (bool ok)  {\r\n    uint256 converterdValue = value * (10 ** uint256(tokenDecimals));\r\n    return token.transfer(to, converterdValue);\r\n  }\r\n  \r\n  \r\n  \r\n  // enable contract, need to be true to actually start ico\r\n  \r\n  function enableOperation() external onlyOwner{\r\n    contractEnabled = true;\r\n    contractCap = totalSupply;\r\n  }\r\n  \r\n  // fallback function can be used to buy tokens\r\n  function () external payable whenNotPaused  {\r\n    buyTokens(msg.sender);\r\n  }\r\n  \r\n  // Purchase tokens\r\n  function buyTokens(address beneficiary) public nonReentrant payable whenNotPaused {\r\n    require(beneficiary != address(0));\r\n    require(validPurchase());\r\n    \r\n    \r\n    uint256 weiAmount = msg.value;\r\n    uint256 returnWeiAmount;\r\n    \r\n    // calculate token amount to be created\r\n    uint rate = getRate();\r\n    assert(rate > 0);\r\n    uint256 tokens = weiAmount.mul(rate);\r\n    \r\n    uint256 newsoldTokens = soldTokens.add(tokens);\r\n    \r\n    if (newsoldTokens > contractCap) {\r\n      newsoldTokens = contractCap;\r\n      tokens = contractCap.sub(soldTokens);\r\n      uint256 newWeiAmount = tokens.div(rate);\r\n      returnWeiAmount = weiAmount.sub(newWeiAmount);\r\n      weiAmount = newWeiAmount;\r\n    }\r\n    \r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n    \r\n    token.transfer(beneficiary, tokens);\r\n    soldTokens = newsoldTokens;\r\n    if (returnWeiAmount > 0){\r\n      msg.sender.transfer(returnWeiAmount);\r\n    }\r\n    \r\n    emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n    \r\n    forwardFunds();\r\n  }\r\n  \r\n  // send ether to the fund collection wallet\r\n  // override to create custom fund forwarding mechanisms\r\n  function forwardFunds() internal {\r\n    walletOne.transfer(address(this).balance);\r\n  }\r\n  \r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal view returns (bool) {\r\n    \r\n    bool nonMinimumPurchase;\r\n    \r\n    nonMinimumPurchase = msg.value >= investorMinCap;\r\n    \r\n    return nonMinimumPurchase;\r\n  }\r\n  \r\n  \r\n  \r\n  // end ico by owner, not really needed in normal situation\r\n  function endIco(uint256 value) external onlyOwner {\r\n    uint256 converterdValue = value * (10 ** uint256(tokenDecimals));\r\n    token.transfer2(0x0000000000000000000000000000000000000000, converterdValue);\r\n    \r\n    \r\n  }\r\n  \r\n  \r\n  function setRate(uint256 value) external onlyOwner()  {\r\n    uint256 converterdValue = value;\r\n    STANDARD_RATE = converterdValue * 10;\r\n  }\r\n  \r\n  \r\n  function getRate() public view returns(uint)  {\r\n    return STANDARD_RATE;\r\n  }\r\n  \r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract BCTToken is ERC20Pausable {\r\n  string constant public name = \"Best Cash Token\";\r\n  string constant public symbol = \"BCT\";\r\n  uint8 constant public decimals = 18;\r\n  uint256 constant TOKEN_UNIT = 10 ** uint256(decimals);\r\n  uint256 constant INITIAL_SUPPLY = 1000000000 * TOKEN_UNIT;\r\n  \r\n  \r\n  constructor () public {\r\n    // Set untransferable by default to the token\r\n    paused = true;\r\n    // asign all tokens to the contract creator\r\n    totalSupply = INITIAL_SUPPLY;\r\n    \r\n    _balances[msg.sender] = INITIAL_SUPPLY;\r\n  }\r\n  \r\n}\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n  /**\r\n  * @dev Multiplies two unsigned integers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    \r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n    \r\n    return c;\r\n  }\r\n  \r\n  /**\r\n  * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    \r\n    return c;\r\n  }\r\n  \r\n  /**\r\n  * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n    \r\n    return c;\r\n  }\r\n  \r\n  /**\r\n  * @dev Adds two unsigned integers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n    \r\n    return c;\r\n  }\r\n  \r\n  /**\r\n  * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"BCTToken","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://d5f4c8be2b4881b1daa554a7a75919ca875bdd84bbdf978bebc699ef126fa686"}]}