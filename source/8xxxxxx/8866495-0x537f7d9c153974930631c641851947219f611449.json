{"status":"1","message":"OK","result":[{"SourceCode":"{\"AuthorizedInvestor.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\ncontract AuthorizedInvestor is Ownable{\\r\\n\\r\\n  event AuthorizedInvestorAdded(address indexed account);\\r\\n  event AuthorizedInvestorRemoved(address indexed account);\\r\\n\\r\\n  mapping (address =\\u003e bool) authorizedinvestors;\\r\\n\\r\\n  constructor() public Ownable(){\\r\\n    authorizedinvestors[msg.sender] = true;\\r\\n  }\\r\\n\\r\\n  modifier onlyAuthorizedInvestor() {\\r\\n    require(isAuthorizedInvestor(msg.sender), \\\"Not authorized investor\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function isAuthorizedInvestor(address account) public view returns (bool) {\\r\\n  //  require(account != address(0), \\\"Roles: account is the zero address\\\");\\r\\n    return authorizedinvestors[account];\\r\\n  }\\r\\n\\r\\n  function addAuthorizedInvestor(address account) public onlyOwner {\\r\\n //   require(!isAuthorizedInvestor(account), \\\"Roles: account already has role\\\");\\r\\n    authorizedinvestors[account] = true;\\r\\n    emit AuthorizedInvestorAdded(account);\\r\\n  }\\r\\n\\r\\n  function removeAuthorizedInvestor(address account) public onlyOwner {\\r\\n  //  require(isAuthorizedInvestor(account), \\\"Roles: account does not have role\\\");\\r\\n    authorizedinvestors[account] = false;\\r\\n    emit AuthorizedInvestorRemoved(account);\\r\\n  }\\r\\n}\\r\\n\"},\"DateTime.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\ncontract DateTime {\\r\\n        using SafeMath for uint256;\\r\\n        using SafeMath for uint16;\\r\\n        using SafeMath for uint8;\\r\\n        using SafeMath for uint;\\r\\n\\r\\n        /*\\r\\n         *  Date and Time utilities for ethereum contracts\\r\\n         *\\r\\n         */\\r\\n        struct _DateTime {\\r\\n                uint16 year;\\r\\n                uint8 month;\\r\\n                uint8 day;\\r\\n                uint8 hour;\\r\\n                uint8 minute;\\r\\n                uint8 second;\\r\\n                uint8 weekday;\\r\\n        }\\r\\n\\r\\n        uint constant DAY_IN_SECONDS = 86400;\\r\\n        uint constant YEAR_IN_SECONDS = 31536000;\\r\\n        uint constant LEAP_YEAR_IN_SECONDS = 31622400;\\r\\n\\r\\n        uint constant HOUR_IN_SECONDS = 3600;\\r\\n        uint constant MINUTE_IN_SECONDS = 60;\\r\\n\\r\\n        uint16 constant ORIGIN_YEAR = 1970;\\r\\n\\r\\n        function isLeapYear(uint16 year) public pure returns (bool) {\\r\\n                if (year.mod(4) != 0) {\\r\\n                        return false;\\r\\n                }\\r\\n                if (year.mod(100) != 0) {\\r\\n                        return true;\\r\\n                }\\r\\n                if (year.mod(400) != 0) {\\r\\n                        return false;\\r\\n                }\\r\\n                return true;\\r\\n        }\\r\\n\\r\\n        function leapYearsBefore(uint year) public pure returns (uint) {\\r\\n                uint y = year.sub(1);\\r\\n                return (y.div(4)).sub(y.div(100)).add(y.div(400));\\r\\n        }\\r\\n\\r\\n        function getDaysInMonth(uint8 month, uint16 year) public pure returns (uint8) {\\r\\n                if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\\r\\n                        return 31;\\r\\n                }\\r\\n                else if (month == 4 || month == 6 || month == 9 || month == 11) {\\r\\n                        return 30;\\r\\n                }\\r\\n                else if (isLeapYear(year)) {\\r\\n                        return 29;\\r\\n                }\\r\\n                else {\\r\\n                        return 28;\\r\\n                }\\r\\n        }\\r\\n\\r\\n        function parseTimestamp(uint timestamp) internal pure returns (_DateTime memory dt) {\\r\\n                uint secondsAccountedFor = 0;\\r\\n                uint buf;\\r\\n                uint8 i;\\r\\n\\r\\n                // Year\\r\\n                dt.year = getYear(timestamp);\\r\\n                buf = leapYearsBefore(dt.year).sub(leapYearsBefore(ORIGIN_YEAR));\\r\\n\\r\\n                secondsAccountedFor = secondsAccountedFor.add(LEAP_YEAR_IN_SECONDS.mul(buf));\\r\\n                secondsAccountedFor = secondsAccountedFor.add(YEAR_IN_SECONDS.mul(dt.year.sub(ORIGIN_YEAR.sub(buf))));\\r\\n\\r\\n                // Month\\r\\n                uint secondsInMonth;\\r\\n                for (i = 1; i \\u003c= 12; i++) {\\r\\n                        secondsInMonth = DAY_IN_SECONDS.mul(getDaysInMonth(i, dt.year));\\r\\n                        if (secondsInMonth.add(secondsAccountedFor) \\u003e timestamp) {\\r\\n                                dt.month = i;\\r\\n                                break;\\r\\n                        }\\r\\n                        secondsAccountedFor = secondsAccountedFor.add(secondsInMonth);\\r\\n                }\\r\\n\\r\\n                // Day\\r\\n                for (i = 1; i \\u003c= getDaysInMonth(dt.month, dt.year); i++) {\\r\\n                        if (DAY_IN_SECONDS.add(secondsAccountedFor) \\u003e timestamp) {\\r\\n                                dt.day = i;\\r\\n                                break;\\r\\n                        }\\r\\n                        secondsAccountedFor = secondsAccountedFor.add(DAY_IN_SECONDS);\\r\\n                }\\r\\n\\r\\n                // Hour\\r\\n                dt.hour = getHour(timestamp);\\r\\n\\r\\n                // Minute\\r\\n                dt.minute = getMinute(timestamp);\\r\\n\\r\\n                // Second\\r\\n                dt.second = getSecond(timestamp);\\r\\n\\r\\n                // Day of week.\\r\\n                dt.weekday = getWeekday(timestamp);\\r\\n        }\\r\\n\\r\\n        function getYear(uint timestamp) public pure returns (uint16) {\\r\\n                uint secondsAccountedFor = 0;\\r\\n                uint16 year;\\r\\n                uint numLeapYears;\\r\\n\\r\\n                // Year\\r\\n                year = uint16(ORIGIN_YEAR.add(timestamp.div(YEAR_IN_SECONDS)));\\r\\n                numLeapYears = leapYearsBefore(year).sub(leapYearsBefore(ORIGIN_YEAR));\\r\\n\\r\\n                secondsAccountedFor = secondsAccountedFor.add(LEAP_YEAR_IN_SECONDS.mul(numLeapYears));\\r\\n                secondsAccountedFor = secondsAccountedFor.add(YEAR_IN_SECONDS.mul(year.sub(ORIGIN_YEAR.sub(numLeapYears))));\\r\\n\\r\\n                while (secondsAccountedFor \\u003e timestamp) {\\r\\n                        if (isLeapYear(uint16(year.add(1)))) {\\r\\n                                secondsAccountedFor = secondsAccountedFor.sub(LEAP_YEAR_IN_SECONDS);\\r\\n                        }\\r\\n                        else {\\r\\n                                secondsAccountedFor = secondsAccountedFor.sub(YEAR_IN_SECONDS);\\r\\n                        }\\r\\n                        year = year - 1;\\r\\n                }\\r\\n                return year;\\r\\n        }\\r\\n\\r\\n        function getMonth(uint timestamp) public pure returns (uint8) {\\r\\n                return parseTimestamp(timestamp).month;\\r\\n        }\\r\\n\\r\\n        function getDay(uint timestamp) public pure returns (uint8) {\\r\\n                return parseTimestamp(timestamp).day;\\r\\n        }\\r\\n\\r\\n        function getHour(uint timestamp) public pure returns (uint8) {\\r\\n                return uint8((timestamp.div(60).div(60)).mod(24));\\r\\n        }\\r\\n\\r\\n        function getMinute(uint timestamp) public pure returns (uint8) {\\r\\n                return uint8((timestamp.div(60)).mod(60));\\r\\n        }\\r\\n\\r\\n        function getSecond(uint timestamp) public pure returns (uint8) {\\r\\n                return uint8(timestamp.mod(60));\\r\\n        }\\r\\n\\r\\n        function getWeekday(uint timestamp) public pure returns (uint8) {\\r\\n                return uint8((timestamp.div(DAY_IN_SECONDS).add(4)).mod(7));\\r\\n        }\\r\\n\\r\\n        function toTimestamp(uint16 year, uint8 month, uint8 day) public pure returns (uint timestamp) {\\r\\n                return toTimestamp(year, month, day, 0, 0, 0);\\r\\n        }\\r\\n\\r\\n        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour) public pure returns (uint timestamp) {\\r\\n                return toTimestamp(year, month, day, hour, 0, 0);\\r\\n        }\\r\\n\\r\\n        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute) public pure returns (uint timestamp) {\\r\\n                return toTimestamp(year, month, day, hour, minute, 0);\\r\\n        }\\r\\n\\r\\n        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute, uint8 second) public pure returns (uint timestamp) {\\r\\n                uint16 i;\\r\\n\\r\\n                // Year\\r\\n                for (i = ORIGIN_YEAR; i \\u003c year; i++) {\\r\\n                        if (isLeapYear(i)) {\\r\\n                                timestamp = timestamp.add(LEAP_YEAR_IN_SECONDS);\\r\\n                        }\\r\\n                        else {\\r\\n                                timestamp = timestamp.add(YEAR_IN_SECONDS);\\r\\n                        }\\r\\n                }\\r\\n\\r\\n                // Month\\r\\n                uint8[12] memory monthDayCounts;\\r\\n                monthDayCounts[0] = 31;\\r\\n                if (isLeapYear(year)) {\\r\\n                        monthDayCounts[1] = 29;\\r\\n                }\\r\\n                else {\\r\\n                        monthDayCounts[1] = 28;\\r\\n                }\\r\\n                monthDayCounts[2] = 31;\\r\\n                monthDayCounts[3] = 30;\\r\\n                monthDayCounts[4] = 31;\\r\\n                monthDayCounts[5] = 30;\\r\\n                monthDayCounts[6] = 31;\\r\\n                monthDayCounts[7] = 31;\\r\\n                monthDayCounts[8] = 30;\\r\\n                monthDayCounts[9] = 31;\\r\\n                monthDayCounts[10] = 30;\\r\\n                monthDayCounts[11] = 31;\\r\\n\\r\\n                for (i = 1; i \\u003c month; i++) {\\r\\n                        timestamp = timestamp.add(DAY_IN_SECONDS.mul(monthDayCounts[i - 1]));\\r\\n                }\\r\\n\\r\\n                // Day\\r\\n                timestamp = timestamp.add(DAY_IN_SECONDS.mul((day.sub(1))));\\r\\n\\r\\n                // Hour\\r\\n                timestamp = timestamp.add(HOUR_IN_SECONDS.mul(hour));\\r\\n\\r\\n                // Minute\\r\\n                timestamp = timestamp.add(MINUTE_IN_SECONDS.mul(minute));\\r\\n\\r\\n                // Second\\r\\n                timestamp = timestamp.add(second);\\r\\n\\r\\n                return timestamp;\\r\\n        }\\r\\n}\\r\\n\"},\"ERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Standard ERC20 token\\r\\n *\\r\\n * @dev Implementation of the basic standard token.\\r\\n * https://eips.ethereum.org/EIPS/eip-20\\r\\n * Originally based on code by FirstBlood:\\r\\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\r\\n *\\r\\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\\r\\n * all accounts just by listening to said events. Note that this isn\\u0027t required by the specification, and other\\r\\n * compliant implementations may not do it.\\r\\n */\\r\\ncontract ERC20 {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping (address =\\u003e uint256) private _balances;\\r\\n\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowed;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string public name;\\r\\n    string public symbol;\\r\\n    uint8 public decimals;\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    constructor(string memory _name, string memory _symbol, uint8 _decimals) public {\\r\\n        name = _name;\\r\\n        symbol = _symbol;\\r\\n        decimals = _decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Total number of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the balance of the specified address.\\r\\n     * @param owner The address to query the balance of.\\r\\n     * @return A uint256 representing the amount owned by the passed address.\\r\\n     */\\r\\n    function balanceOf(address owner) public view returns (uint256) {\\r\\n        return _balances[owner];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\r\\n     * @param owner address The address which owns the funds.\\r\\n     * @param spender address The address which will spend the funds.\\r\\n     * @return A uint256 specifying the amount of tokens still available for the spender.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view returns (uint256) {\\r\\n        return _allowed[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfer token to a specified address.\\r\\n     * @param to The address to transfer to.\\r\\n     * @param value The amount to be transferred.\\r\\n     */\\r\\n    function transfer(address to, uint256 value) public returns (bool) {\\r\\n        _transfer(msg.sender, to, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\r\\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\\r\\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\r\\n     * race condition is to first reduce the spender\\u0027s allowance to 0 and set the desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     * @param spender The address which will spend the funds.\\r\\n     * @param value The amount of tokens to be spent.\\r\\n     */\\r\\n    function approve(address spender, uint256 value) public returns (bool) {\\r\\n        _approve(msg.sender, spender, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfer tokens from one address to another.\\r\\n     * Note that while this function emits an Approval event, this is not required as per the specification,\\r\\n     * and other compliant implementations may not emit the event.\\r\\n     * @param from address The address which you want to send tokens from\\r\\n     * @param to address The address which you want to transfer to\\r\\n     * @param value uint256 the amount of tokens to be transferred\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\\r\\n        _transfer(from, to, value);\\r\\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\\r\\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\\r\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\r\\n     * the first transaction is mined)\\r\\n     * From MonolithDAO Token.sol\\r\\n     * Emits an Approval event.\\r\\n     * @param spender The address which will spend the funds.\\r\\n     * @param addedValue The amount of tokens to increase the allowance by.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\r\\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\\r\\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\\r\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\r\\n     * the first transaction is mined)\\r\\n     * From MonolithDAO Token.sol\\r\\n     * Emits an Approval event.\\r\\n     * @param spender The address which will spend the funds.\\r\\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\r\\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfer token for a specified addresses.\\r\\n     * @param from The address to transfer from.\\r\\n     * @param to The address to transfer to.\\r\\n     * @param value The amount to be transferred.\\r\\n     */\\r\\n    function _transfer(address from, address to, uint256 value) internal {\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _balances[from] = _balances[from].sub(value);\\r\\n        _balances[to] = _balances[to].add(value);\\r\\n        emit Transfer(from, to, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function that mints an amount of the token and assigns it to\\r\\n     * an account. This encapsulates the modification of balances such that the\\r\\n     * proper events are emitted.\\r\\n     * @param account The account that will receive the created tokens.\\r\\n     * @param value The amount that will be created.\\r\\n     */\\r\\n    function _mint(address account, uint256 value) internal {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _totalSupply = _totalSupply.add(value);\\r\\n        _balances[account] = _balances[account].add(value);\\r\\n        emit Transfer(address(0), account, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function that burns an amount of the token of a given\\r\\n     * account.\\r\\n     * @param account The account whose tokens will be burnt.\\r\\n     * @param value The amount that will be burnt.\\r\\n     */\\r\\n    function _burn(address account, uint256 value) internal {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _totalSupply = _totalSupply.sub(value);\\r\\n        _balances[account] = _balances[account].sub(value);\\r\\n        emit Transfer(account, address(0), value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve an address to spend another addresses\\u0027 tokens.\\r\\n     * @param owner The address that owns the tokens.\\r\\n     * @param spender The address that will spend the tokens.\\r\\n     * @param value The number of tokens that can be spent.\\r\\n     */\\r\\n    function _approve(address owner, address spender, uint256 value) internal {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowed[owner][spender] = value;\\r\\n        emit Approval(owner, spender, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function that burns an amount of the token of a given\\r\\n     * account, deducting from the sender\\u0027s allowance for said account. Uses the\\r\\n     * internal burn function.\\r\\n     * Emits an Approval event (reflecting the reduced allowance).\\r\\n     * @param account The account whose tokens will be burnt.\\r\\n     * @param value The amount that will be burnt.\\r\\n     */\\r\\n    function _burnFrom(address account, uint256 value) internal {\\r\\n        _burn(account, value);\\r\\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\\r\\n    }\\r\\n}\\r\\n\\r\\n\"},\"Ownable.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\n/**\\r\\n * @title Ownable\\r\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\r\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\r\\n */\\r\\ncontract Ownable {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\r\\n     * account.\\r\\n     */\\r\\n    constructor () internal {\\r\\n        _owner = msg.sender;\\r\\n        emit OwnershipTransferred(address(0), _owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return the address of the owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return true if `msg.sender` is the owner of the contract.\\r\\n     */\\r\\n    function isOwner() public view returns (bool) {\\r\\n        return msg.sender == _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows the current owner to relinquish control of the contract.\\r\\n     * It will not be possible to call the functions with the `onlyOwner`\\r\\n     * modifier anymore.\\r\\n     * @notice Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\r\\n     * @param newOwner The address to transfer ownership to.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers control of the contract to a newOwner.\\r\\n     * @param newOwner The address to transfer ownership to.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\n/**\\r\\n * @title SafeMath\\r\\n * @dev Unsigned math operations with safety checks that revert on error.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Multiplies two unsigned integers, reverts on overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b \\u003e 0, \\\"SafeMath: division by zero\\\");\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, \\\"SafeMath: subtraction overflow\\\");\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Adds two unsigned integers, reverts on overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\r\\n     * reverts when dividing by zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b != 0, \\\"SafeMath: modulo by zero\\\");\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\"},\"StableCoin.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\nimport \\\"./Tradable.sol\\\";\\r\\nimport \\\"./DateTime.sol\\\";\\r\\n\\r\\ncontract StableCoin is Tradable, DateTime{\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint8 _dec = uint8(Tradable.decimals_t);\\r\\n\\r\\n    event oxydated(address holder, uint amount);\\r\\n    event timestampComparaison0(uint256 t1, uint256 t2);\\r\\n\\r\\n    constructor(string memory _tokenName, string memory _tokenSymbol, uint8 _decimals) payable\\r\\n        ERC20(_tokenName, _tokenSymbol, _decimals)\\r\\n        public {\\r\\n           // require(msg.value \\u003e 0.009 ether, \\\"Need more than 0.01 Ether to deploy\\\");\\r\\n    }\\r\\n\\r\\n    function transfer(address _to, uint256 _value) public returns (bool){\\r\\n        ERC20.transfer(_to, _value);\\r\\n        Tradable.storeNewHolder(msg.sender, _to);\\r\\n    }\\r\\n\\r\\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool){\\r\\n        ERC20.transferFrom(_from,_to,_value);\\r\\n        Tradable.storeNewHolder(_from, _to);\\r\\n    }\\r\\n\\r\\n    function approve(address _spender, uint256 _value) public returns  (bool){\\r\\n        ERC20.approve(_spender, _value);\\r\\n    }\\r\\n\\r\\n    function mint(address _to, uint _tokenAmount) public onlyOwner {\\r\\n        _mint(_to,_tokenAmount);\\r\\n        Tradable.storeNewHolder(address(0), _to);\\r\\n    }\\r\\n\\r\\n    function burn(address _account, uint256 _value) public onlyOwner {\\r\\n        _burn(_account, _value);\\r\\n        Tradable.storeNewHolder(address(0), _account);\\r\\n    }\\r\\n\\r\\n    function getBalanceEthSmartContract() public view returns (uint256) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n    function retrieveEth(uint amount) public onlyOwner returns (bool){\\r\\n        msg.sender.transfer(amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function oxydation() public {\\r\\n        for(uint i = 0 ; i \\u003c currentHolders.length ; i++) {\\r\\n            emit timestampComparaison0(lastUsed[currentHolders[i]] + 21600, now);\\r\\n            if(lastUsed[currentHolders[i]] + 21600 \\u003c now){   // more than 6 hours\\r\\n                emit timestampComparaison0(lastOxydation[currentHolders[i]] + 86400, now);\\r\\n                if(lastOxydation[currentHolders[i]] + 86400 \\u003c now) {  // more than 1 day\\r\\n                    uint balanceCurrent = balanceOf(currentHolders[i]);\\r\\n                    lastOxydation[currentHolders[i]] = now;\\r\\n                    _burn(currentHolders[i], balanceCurrent/5000);  // 0.02%\\r\\n                    _mint(Ownable.owner(), balanceCurrent/5000);\\r\\n                    emit oxydated(currentHolders[i], balanceCurrent/5000);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"},\"Tradable.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\nimport \\\"./ERC20.sol\\\";\\r\\nimport \\\"./AuthorizedInvestor.sol\\\";\\r\\n\\r\\ncontract Tradable is ERC20, AuthorizedInvestor {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint256 public decimals_t = 8;\\r\\n\\r\\n    address[] public currentHolders;\\r\\n    mapping (address =\\u003e uint256) public lastUsed;\\r\\n    mapping (address =\\u003e uint256) public lastOxydation;\\r\\n    event newHolder(address holder);\\r\\n\\r\\n    enum ExchangeType { getToken, getEther }\\r\\n\\r\\n    constructor() public {}\\r\\n\\r\\n    function storeNewHolder(address _from, address _to) internal {\\r\\n        bool foundFrom = false;\\r\\n        bool foundTo = false;\\r\\n\\r\\n        for(uint i = 0 ; i \\u003c currentHolders.length ; i++) {\\r\\n            if(currentHolders[i] == _from) {\\r\\n                foundFrom = true;\\r\\n                if(ERC20.balanceOf(_from) == 0) {\\r\\n                    remove(i);\\r\\n                }\\r\\n            }\\r\\n            if(currentHolders[i] == _to) {\\r\\n                foundTo = true;\\r\\n                if(ERC20.balanceOf(_to) == 0) {\\r\\n                    remove(i);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        if(!foundFrom \\u0026\\u0026 ERC20.balanceOf(_from) \\u003e 0) {\\r\\n            currentHolders.push(_from);\\r\\n            emit newHolder(_from);\\r\\n        }\\r\\n        if(!foundTo \\u0026\\u0026 ERC20.balanceOf(_to) \\u003e 0) {\\r\\n            currentHolders.push(_to);\\r\\n            emit newHolder(_to);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function storeLastUsed(address _from, address _to) internal {\\r\\n        lastUsed[_from] = now;\\r\\n        lastUsed[_to] = now;\\r\\n        lastOxydation[_from] = 0;\\r\\n        lastOxydation[_to] = 0;\\r\\n\\r\\n    }\\r\\n\\r\\n    function remove(uint index) private returns(address[] memory) {\\r\\n        if (index \\u003e= currentHolders.length) return currentHolders;\\r\\n\\r\\n        for (uint i = index; i\\u003ccurrentHolders.length-1; i++){\\r\\n            currentHolders[i] = currentHolders[i+1];\\r\\n        }\\r\\n        delete currentHolders[currentHolders.length-1];\\r\\n        currentHolders.length = currentHolders.length.sub(1);\\r\\n        return currentHolders;\\r\\n    }\\r\\n}\\r\\n\"}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals_t\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastOxydation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getHour\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getWeekday\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastUsed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAuthorizedInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalanceEthSmartContract\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"year\",\"type\":\"uint16\"},{\"name\":\"month\",\"type\":\"uint8\"},{\"name\":\"day\",\"type\":\"uint8\"},{\"name\":\"hour\",\"type\":\"uint8\"},{\"name\":\"minute\",\"type\":\"uint8\"}],\"name\":\"toTimestamp\",\"outputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"year\",\"type\":\"uint16\"},{\"name\":\"month\",\"type\":\"uint8\"},{\"name\":\"day\",\"type\":\"uint8\"},{\"name\":\"hour\",\"type\":\"uint8\"}],\"name\":\"toTimestamp\",\"outputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getSecond\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"year\",\"type\":\"uint16\"},{\"name\":\"month\",\"type\":\"uint8\"},{\"name\":\"day\",\"type\":\"uint8\"}],\"name\":\"toTimestamp\",\"outputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"year\",\"type\":\"uint16\"},{\"name\":\"month\",\"type\":\"uint8\"},{\"name\":\"day\",\"type\":\"uint8\"},{\"name\":\"hour\",\"type\":\"uint8\"},{\"name\":\"minute\",\"type\":\"uint8\"},{\"name\":\"second\",\"type\":\"uint8\"}],\"name\":\"toTimestamp\",\"outputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getYear\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"currentHolders\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getMonth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"year\",\"type\":\"uint16\"}],\"name\":\"isLeapYear\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"year\",\"type\":\"uint256\"}],\"name\":\"leapYearsBefore\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"month\",\"type\":\"uint8\"},{\"name\":\"year\",\"type\":\"uint16\"}],\"name\":\"getDaysInMonth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"oxydation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAuthorizedInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"retrieveEth\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAuthorizedInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getMinute\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"oxydated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"t1\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"t2\",\"type\":\"uint256\"}],\"name\":\"timestampComparaison0\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"newHolder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AuthorizedInvestorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AuthorizedInvestorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"StableCoin","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000007566572616f6e6500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000356524f0000000000000000000000000000000000000000000000000000000000","Library":"","LicenseType":"None","SwarmSource":"bzzr://6be45e5490ef6995284106c8df907d0b4ab025e54e03d86d55ec2f9e2ab0dff5"}]}