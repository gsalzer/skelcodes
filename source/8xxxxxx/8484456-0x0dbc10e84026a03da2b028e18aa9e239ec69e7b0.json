{"status":"1","message":"OK","result":[{"SourceCode":"// File: zos-lib/contracts/Initializable.sol\r\n\r\npragma solidity >=0.4.24 <0.6.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool wasInitializing = initializing;\r\n    initializing = true;\r\n    initialized = true;\r\n\r\n    _;\r\n\r\n    initializing = wasInitializing;\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(address) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: openzeppelin-eth/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: openzeppelin-eth/contracts/token/ERC20/ERC20Detailed.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Detailed token\r\n * @dev The decimals are only for visualization purposes.\r\n * All the operations are done using the smallest and indivisible token unit,\r\n * just as on Ethereum all the operations are done in wei.\r\n */\r\ncontract ERC20Detailed is Initializable, IERC20 {\r\n  string private _name;\r\n  string private _symbol;\r\n  uint8 private _decimals;\r\n\r\n  function initialize(string name, string symbol, uint8 decimals) public initializer {\r\n    _name = name;\r\n    _symbol = symbol;\r\n    _decimals = decimals;\r\n  }\r\n\r\n  /**\r\n   * @return the name of the token.\r\n   */\r\n  function name() public view returns(string) {\r\n    return _name;\r\n  }\r\n\r\n  /**\r\n   * @return the symbol of the token.\r\n   */\r\n  function symbol() public view returns(string) {\r\n    return _symbol;\r\n  }\r\n\r\n  /**\r\n   * @return the number of decimals of the token.\r\n   */\r\n  function decimals() public view returns(uint8) {\r\n    return _decimals;\r\n  }\r\n\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts/elizabeth/Administrators.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\ncontract Administrators {\r\n    mapping (address => bool) public isAdministrator;\r\n\r\n    event AdministratorChanged(address user, bool isAdministrator);\r\n\r\n    constructor() public {\r\n        isAdministrator[msg.sender] = true;\r\n    }\r\n\r\n    modifier onlyAdministrators() {\r\n        require(isAdministrator[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function setAdministrator(address user, bool _isAdministrator) public onlyAdministrators {\r\n        require(user != msg.sender);\r\n        require(isAdministrator[user] != _isAdministrator);\r\n        isAdministrator[user] = _isAdministrator;\r\n        emit AdministratorChanged(user, _isAdministrator);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-eth/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-eth/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract ERC20 is Initializable, IERC20 {\r\n  using SafeMath for uint256;\r\n\r\n  mapping (address => uint256) private _balances;\r\n\r\n  mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n  uint256 private _totalSupply;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n    return _balances[owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param owner address The address which owns the funds.\r\n   * @param spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address owner,\r\n    address spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return _allowed[owner][spender];\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param to The address to transfer to.\r\n  * @param value The amount to be transferred.\r\n  */\r\n  function transfer(address to, uint256 value) public returns (bool) {\r\n    _transfer(msg.sender, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param spender The address which will spend the funds.\r\n   * @param value The amount of tokens to be spent.\r\n   */\r\n  function approve(address spender, uint256 value) public returns (bool) {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = value;\r\n    emit Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param from address The address which you want to send tokens from\r\n   * @param to address The address which you want to transfer to\r\n   * @param value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(value <= _allowed[from][msg.sender]);\r\n\r\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n    _transfer(from, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed_[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param spender The address which will spend the funds.\r\n   * @param addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseAllowance(\r\n    address spender,\r\n    uint256 addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = (\r\n      _allowed[msg.sender][spender].add(addedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed_[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param spender The address which will spend the funds.\r\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseAllowance(\r\n    address spender,\r\n    uint256 subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = (\r\n      _allowed[msg.sender][spender].sub(subtractedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified addresses\r\n  * @param from The address to transfer from.\r\n  * @param to The address to transfer to.\r\n  * @param value The amount to be transferred.\r\n  */\r\n  function _transfer(address from, address to, uint256 value) internal {\r\n    require(value <= _balances[from]);\r\n    require(to != address(0));\r\n\r\n    _balances[from] = _balances[from].sub(value);\r\n    _balances[to] = _balances[to].add(value);\r\n    emit Transfer(from, to, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that mints an amount of the token and assigns it to\r\n   * an account. This encapsulates the modification of balances such that the\r\n   * proper events are emitted.\r\n   * @param account The account that will receive the created tokens.\r\n   * @param amount The amount that will be created.\r\n   */\r\n  function _mint(address account, uint256 amount) internal {\r\n    require(account != 0);\r\n    _totalSupply = _totalSupply.add(amount);\r\n    _balances[account] = _balances[account].add(amount);\r\n    emit Transfer(address(0), account, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that burns an amount of the token of a given\r\n   * account.\r\n   * @param account The account whose tokens will be burnt.\r\n   * @param amount The amount that will be burnt.\r\n   */\r\n  function _burn(address account, uint256 amount) internal {\r\n    require(account != 0);\r\n    require(amount <= _balances[account]);\r\n\r\n    _totalSupply = _totalSupply.sub(amount);\r\n    _balances[account] = _balances[account].sub(amount);\r\n    emit Transfer(account, address(0), amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that burns an amount of the token of a given\r\n   * account, deducting from the sender's allowance for said account. Uses the\r\n   * internal burn function.\r\n   * @param account The account whose tokens will be burnt.\r\n   * @param amount The amount that will be burnt.\r\n   */\r\n  function _burnFrom(address account, uint256 amount) internal {\r\n    require(amount <= _allowed[account][msg.sender]);\r\n\r\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\r\n    // this function needs to emit an event with the updated approval.\r\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\r\n      amount);\r\n    _burn(account, amount);\r\n  }\r\n\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts/lib/IERC1594.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Standard Interface of ERC1594\r\n */\r\ninterface IERC1594 {\r\n\r\n    // Transfers\r\n    function transferWithData(address _to, uint256 _value, bytes _data) public;\r\n    function transferFromWithData(address _from, address _to, uint256 _value, bytes _data) public;\r\n\r\n    // Token Issuance\r\n    function isIssuable() external view returns (bool);\r\n    function issue(address _tokenHolder, uint256 _value, bytes _data) external;\r\n\r\n    // Token Redemption\r\n    function redeem(uint256 _value, bytes _data) external;\r\n    function redeemFrom(address _tokenHolder, uint256 _value, bytes _data) external;\r\n\r\n    // Transfer Validity\r\n    function canTransfer(address _to, uint256 _value, bytes _data) external view returns (byte, bytes32);\r\n    function canTransferFrom(address _from, address _to, uint256 _value, bytes _data) external view returns (byte, bytes32);\r\n\r\n    // Issuance / Redemption Events\r\n    event Issued(address indexed _operator, address indexed _to, uint256 _value, bytes _data);\r\n    event Redeemed(address indexed _operator, address indexed _from, uint256 _value, bytes _data);\r\n}\r\n\r\n// File: contracts/lib/IERC1644.sol\r\n\r\n/// @title IERC1644 Controller Token Operation (part of the ERC1400 Security Token Standards)\r\n/// @dev See https://github.com/SecurityTokenStandard/EIP-Spec\r\n\r\ninterface IERC1644 {\r\n\r\n    // Controller Operation\r\n    function isControllable() external view returns (bool);\r\n    function controllerTransfer(address _from, address _to, uint256 _value, bytes _data, bytes _operatorData) external;\r\n    function controllerRedeem(address _tokenHolder, uint256 _value, bytes _data, bytes _operatorData) external;\r\n\r\n    // Controller Events\r\n    event ControllerTransfer(\r\n        address _controller,\r\n        address indexed _from,\r\n        address indexed _to,\r\n        uint256 _value,\r\n        bytes _data,\r\n        bytes _operatorData\r\n    );\r\n\r\n    event ControllerRedemption(\r\n        address _controller,\r\n        address indexed _tokenHolder,\r\n        uint256 _value,\r\n        bytes _data,\r\n        bytes _operatorData\r\n    );\r\n}\r\n\r\n// File: openzeppelin-eth/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable is Initializable {\r\n  address private _owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function initialize(address sender) public initializer {\r\n    _owner = sender;\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(_owner);\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts/Whitelist.sol\r\n\r\npragma solidity ^0.4.25;\r\n\r\n\r\n\r\ncontract Whitelist is Initializable, Ownable {\r\n\r\n  mapping(address => bool) private whitelist;\r\n  bool public debugMode;\r\n\r\n  function initialize() initializer public {\r\n    Ownable.initialize(msg.sender);\r\n    debugMode = true;\r\n  }\r\n\r\n  function isWhitelisted(address user) public view returns (bool) {\r\n    return debugMode || whitelist[user];\r\n  }\r\n\r\n  function setWhitelisted(address user, bool _isWhitelisted) onlyOwner public {\r\n    whitelist[user] = _isWhitelisted;\r\n  }\r\n\r\n  function toggleDebugMode() public onlyOwner {\r\n    debugMode = !debugMode;\r\n  }\r\n}\r\n\r\n// File: contracts/elizabeth/SecurityToken.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract SecurityToken is IERC1594, IERC1644, ERC20, Administrators {\r\n    // Uses status codes from ERC-1066\r\n    byte private constant STATUS_DISALLOWED = 0x10;\r\n    byte private constant STATUS_ALLOWED = 0x11;\r\n\r\n    Whitelist public whitelist;\r\n\r\n    constructor(address _whitelist) internal {\r\n        whitelist = Whitelist(_whitelist);\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        require(whitelist.isWhitelisted(to), \"transfer must be allowed\");\r\n        return ERC20.transfer(to, value);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        require(whitelist.isWhitelisted(to), \"transfer must be allowed\");\r\n        return ERC20.transferFrom(from, to, value);\r\n    }\r\n\r\n    function transferWithData(address _to, uint256 _value, bytes) public {\r\n        transfer(_to, _value);\r\n    }\r\n\r\n    function transferFromWithData(address _from, address _to, uint256 _value, bytes _data) public {\r\n        transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function isControllable() external view returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    function controllerTransfer(address _from, address _to, uint256 _value, bytes _data, bytes _operatorData) onlyAdministrators external {\r\n        ERC20._transfer(_from, _to, _value);\r\n        emit ControllerTransfer(msg.sender, _from, _to, _value, _data, _operatorData);\r\n    }\r\n\r\n    function controllerRedeem(address _tokenHolder, uint256 _value, bytes _data, bytes _operatorData) onlyAdministrators external {\r\n        revert(\"Redeeming is not enabled\");\r\n    }\r\n\r\n\r\n    // Token Issuance\r\n    function isIssuable() external view returns (bool) {\r\n        return false;\r\n    }\r\n    function issue(address _tokenHolder, uint256 _value, bytes _data) external {\r\n        revert(\"Issuing is not enabled\");\r\n    }\r\n\r\n    // Token Redemption\r\n    function redeem(uint256 _value, bytes _data) external {\r\n        revert(\"Redeeming is not enabled\");\r\n    }\r\n    function redeemFrom(address _tokenHolder, uint256 _value, bytes _data) external {\r\n        revert(\"Redeeming is not enabled\");\r\n    }\r\n\r\n    // Transfer Validity\r\n    function canTransfer(address _to, uint256 _value, bytes) external view returns (byte, bytes32) {\r\n        byte status = whitelist.isWhitelisted(_to) ? STATUS_ALLOWED : STATUS_DISALLOWED;\r\n        return (status, 0x0);\r\n    }\r\n    function canTransferFrom(address _from, address _to, uint256 _value, bytes) external view returns (byte, bytes32) {\r\n        byte status = whitelist.isWhitelisted(_to)  ? STATUS_ALLOWED : STATUS_DISALLOWED;\r\n        return (status, 0x0);\r\n    }\r\n}\r\n\r\n// File: contracts/elizabeth/Dividends.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\ncontract Dividends is SecurityToken {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 private scaledDividendPerToken = 0;\r\n    uint256 private scaledRemainder = 0;\r\n    mapping(address => uint256) private scaledDividendBalanceOf;\r\n    mapping(address => uint256) private scaledDividendCreditedTo;\r\n    mapping(address => uint256) public userLastActive;\r\n\r\n    uint256 constant RECOVERY_TIMEOUT = 180 days;\r\n    uint256 constant SCALING = uint256(10) ** 8;\r\n\r\n    IERC20 private _dividendToken;\r\n\r\n    event DividendDistributed(uint totalAmount, address depositor);\r\n    event DividendWithdrawl(address holder, uint amount);\r\n    event DividendTokenChanged(address newToken);\r\n    event DividendRecovered(address holder, address administrator, uint amountRecovered, uint inactivityPeriod);\r\n\r\n    constructor(address newDividendToken) public {\r\n        _dividendToken = IERC20(newDividendToken);\r\n        require(_dividendToken.balanceOf(address(this)) == 0, \"Requires valid ERC20 dividend token\");\r\n        emit DividendTokenChanged(_dividendToken);\r\n    }\r\n\r\n    function dividendToken() public view returns (address) {\r\n        return _dividendToken;\r\n    }\r\n\r\n    function dividendPerToken() public view returns (uint) {\r\n        return scaledDividendPerToken / SCALING;\r\n    }\r\n\r\n    function dividendBalanceOf(address account) public view returns (uint) {\r\n        uint owed = scaledDividendPerToken.sub(scaledDividendCreditedTo[account]);\r\n        uint scaledBalance = scaledDividendBalanceOf[account].add(balanceOf(account).mul(owed));\r\n        return scaledBalance.div(SCALING);\r\n    }\r\n\r\n    function minimumDeposit() public view returns (uint256) {\r\n        return totalSupply().div(SCALING);\r\n    }\r\n\r\n    function deposit(uint amount) public {\r\n        require(amount >= minimumDeposit(), \"Deposit is less than minimum deposit\");\r\n        require(_dividendToken.allowance(msg.sender, address(this)) >= amount);\r\n        _dividendToken.transferFrom(msg.sender, address(this), amount);\r\n        uint256 available = amount.mul(SCALING).add(scaledRemainder);\r\n        scaledDividendPerToken = scaledDividendPerToken.add(available.div(totalSupply()));\r\n        scaledRemainder = available % totalSupply();\r\n        emit DividendDistributed(amount, msg.sender);\r\n    }\r\n\r\n    function depositPartial(uint amount) public {\r\n        require(amount >= minimumDeposit(), \"Deposit is less than minimum deposit\");\r\n        require(_dividendToken.allowance(msg.sender, address(this)) >= amount);\r\n        _dividendToken.transferFrom(msg.sender, address(this), amount);\r\n\r\n        // Calculate new balances, omitting sender's share\r\n        uint totalSupplyWithoutSender = totalSupply().sub(balanceOf(msg.sender));\r\n        uint256 available = amount.mul(SCALING).add(scaledRemainder);\r\n        uint scaledDividendIncrease = available.div(totalSupplyWithoutSender);\r\n        scaledDividendPerToken = scaledDividendPerToken.add(scaledDividendIncrease);\r\n        scaledRemainder = available.mod(totalSupplyWithoutSender);\r\n\r\n        // Update for sender\r\n        scaledDividendCreditedTo[msg.sender] = scaledDividendCreditedTo[msg.sender].add(scaledDividendIncrease);\r\n        userLastActive[msg.sender] = now;\r\n\r\n        // Emit event with simulated amount\r\n        uint totalAmount = amount.add(scaledDividendIncrease.mul(balanceOf(msg.sender)) / SCALING);\r\n        emit DividendDistributed(totalAmount, msg.sender);\r\n    }\r\n\r\n    function withdraw() public {\r\n        update(msg.sender);\r\n        uint256 amount = scaledDividendBalanceOf[msg.sender] / SCALING;\r\n        scaledDividendBalanceOf[msg.sender] %= SCALING;\r\n        _dividendToken.transfer(msg.sender, amount);\r\n        emit DividendWithdrawl(msg.sender, amount);\r\n    }\r\n\r\n\r\n    function changeDividendToken(address newToken) public onlyAdministrators {\r\n        IERC20 _oldToken = _dividendToken;\r\n        IERC20 _newToken = IERC20(newToken);\r\n        uint dividendBalance = _oldToken.balanceOf(address(this));\r\n\r\n        _dividendToken = _newToken;\r\n        if (dividendBalance > 0) {\r\n            require(_newToken.allowance(msg.sender, address(this)) >= dividendBalance);\r\n\r\n            _newToken.transferFrom(msg.sender, address(this), dividendBalance);\r\n            _oldToken.transfer(msg.sender, dividendBalance);\r\n        }\r\n\r\n        emit DividendTokenChanged(newToken);\r\n    }\r\n\r\n    function recoverDividend(address user) public onlyAdministrators {\r\n        uint inactivityPeriod = now - userLastActive[user];\r\n        require(inactivityPeriod > RECOVERY_TIMEOUT, \"User is active\");\r\n        uint amount = scaledDividendBalanceOf[user] / SCALING;\r\n        scaledDividendBalanceOf[user] %= SCALING;\r\n        _dividendToken.transfer(msg.sender, amount);\r\n        emit DividendRecovered(user, msg.sender, amount, inactivityPeriod);\r\n    }\r\n\r\n\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        update(msg.sender);\r\n        update(to);\r\n\r\n        return SecurityToken.transfer(to, value);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        update(from);\r\n        update(to);\r\n\r\n        return SecurityToken.transferFrom(from, to, value);\r\n    }\r\n\r\n    function transferWithData(address _to, uint256 _value, bytes _data) public {\r\n        update(msg.sender);\r\n        update(_to);\r\n\r\n        SecurityToken.transferWithData(_to, _value, _data);\r\n    }\r\n\r\n    function transferFromWithData(address _from, address _to, uint256 _value, bytes _data) public {\r\n        update(_from);\r\n        update(_to);\r\n\r\n        SecurityToken.transferFromWithData(_from, _to, _value, _data);\r\n    }\r\n\r\n    function update(address account) internal {\r\n        uint256 owed = scaledDividendPerToken - scaledDividendCreditedTo[account];\r\n        scaledDividendBalanceOf[account] = scaledDividendBalanceOf[account].add(balanceOf(account).mul(owed));\r\n        scaledDividendCreditedTo[account] = scaledDividendPerToken;\r\n        userLastActive[account] = now;\r\n    }\r\n}\r\n\r\n// File: contracts/lib/IERC1643.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/1643\r\n */\r\ninterface IERC1643 {\r\n    event DocumentRemoved(bytes32 indexed _name, string _uri, bytes32 _documentHash);\r\n    event DocumentUpdated(bytes32 indexed _name, string _uri, bytes32 _documentHash);\r\n\r\n    function getDocument(bytes32 _name) external view returns (string, bytes32, uint256);\r\n    function setDocument(bytes32 _name, string _uri, bytes32 _documentHash) external;\r\n    function removeDocument(bytes32 _name) external;\r\n    function getAllDocuments() external view returns (bytes32[]);\r\n}\r\n\r\n// File: contracts/elizabeth/Utils.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\nlibrary Utils {\r\n    function removeElement(bytes32[] storage list, bytes32 element) internal {\r\n        for (uint i = 0; i < list.length; i++) {\r\n            if (list[i] == element) {\r\n                list[i] = list[list.length - 1];\r\n                delete list[list.length - 1];\r\n                list.length--;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/elizabeth/Documents.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\ncontract Documents is Administrators, IERC1643 {\r\n\r\n    struct Document {\r\n        string uri;\r\n        bytes32 documentHash;\r\n        uint256 lastModified;\r\n    }\r\n\r\n    mapping (bytes32 => Document) private documents;\r\n    bytes32[] private names;\r\n\r\n    function getDocument(bytes32 _name) external view returns (string, bytes32, uint256) {\r\n        return (documents[_name].uri, documents[_name].documentHash, documents[_name].lastModified);\r\n    }\r\n\r\n    function setDocument(bytes32 _name, string _uri, bytes32 _documentHash) external onlyAdministrators {\r\n        require(_name.length > 0, \"name of the document must not be empty\");\r\n        require(bytes(_uri).length > 0, \"external URI to the document must not be empty\");\r\n        require(_documentHash.length > 0, \"content hash is required, use SHA-256 when in doubt\");\r\n\r\n        if (documents[_name].lastModified == 0) {\r\n            names.push(_name);\r\n        }\r\n        documents[_name] = Document(_uri, _documentHash, now);\r\n        emit DocumentUpdated(_name, _uri, _documentHash);\r\n    }\r\n\r\n    function removeDocument(bytes32 _name) external onlyAdministrators {\r\n        string memory uri = documents[_name].uri;\r\n        bytes32 documentHash = documents[_name].documentHash;\r\n\r\n        Utils.removeElement(names, _name);\r\n        delete documents[_name];\r\n\r\n        emit DocumentRemoved(_name, uri, documentHash);\r\n    }\r\n\r\n    function getAllDocuments() external view returns (bytes32[]) {\r\n        return names;\r\n    }\r\n}\r\n\r\n// File: contracts/elizabeth/Metadata.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract Metadata is Administrators {\r\n    mapping (bytes32 => string) private metadata;\r\n    bytes32[] private names;\r\n\r\n    event MetadataChanged(bytes32 name, string value);\r\n\r\n    function getMetadata(bytes32 name) external view returns (string) {\r\n        return metadata[name];\r\n    }\r\n\r\n    function setMetadata(bytes32 name, string value) external onlyAdministrators {\r\n        if (bytes(metadata[name]).length == 0) {\r\n            names.push(name);\r\n        }\r\n        if (bytes(value).length == 0) {\r\n            Utils.removeElement(names, name);\r\n        }\r\n\r\n        metadata[name] = value;\r\n        emit MetadataChanged(name, value);\r\n    }\r\n\r\n    function getAllMetadata() external view returns (bytes32[]) {\r\n        return names;\r\n    }\r\n}\r\n\r\n// File: contracts/elizabeth/IPropertyToken.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ncontract IPropertyToken is IERC20 {\r\n    function canTransfer(address _to, uint256 _value, bytes) external view returns (byte, bytes32);\r\n    function canTransferFrom(address _from, address _to, uint256 _value, bytes) external view returns (byte, bytes32);\r\n\r\n    function dividendToken() public view returns (address);\r\n    function dividendPerToken() public view returns (uint);\r\n    function dividendBalanceOf(address account) public view returns (uint);\r\n    function deposit(uint amount) public;\r\n    function depositPartial(uint amount) public;\r\n    function withdraw() public;\r\n    function changeDividendToken(address newToken) public;\r\n    function recoverDividend(address user) public;\r\n\r\n    function getDocument(bytes32 _name) external view returns (string, bytes32, uint256);\r\n    function setDocument(bytes32 _name, string _uri, bytes32 _documentHash) external;\r\n    function removeDocument(bytes32 _name) external;\r\n    function getAllDocuments() external view returns (bytes32[]);\r\n\r\n    function getMetadata(bytes32 name) external view returns (string);\r\n    function setMetadata(bytes32 name, string value) external;\r\n    function getAllMetadata() external view returns (bytes32[]);\r\n}\r\n\r\n// File: contracts/elizabeth/PropertyToken.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title PropertyTOken\r\n * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.\r\n * Note they can later distribute these tokens as they wish using `transfer` and other\r\n * `ERC20` functions.\r\n */\r\ncontract PropertyToken is IPropertyToken, ERC20Detailed, SecurityToken, Dividends, Documents, Metadata {\r\n    /**\r\n     * @dev Constructor that gives msg.sender all of existing tokens.\r\n     */\r\n    constructor (string name, string symbol, uint supply, address whitelist, address dividendToken)\r\n            public SecurityToken(whitelist) Dividends(dividendToken) {\r\n        ERC20Detailed.initialize(name, symbol, 18);\r\n        _mint(msg.sender, supply);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_uri\",\"type\":\"string\"},{\"name\":\"_documentHash\",\"type\":\"bytes32\"}],\"name\":\"setDocument\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdministrator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"value\",\"type\":\"string\"}],\"name\":\"setMetadata\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"canTransferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes1\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"changeDividendToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"canTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes1\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferWithData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenHolder\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_operatorData\",\"type\":\"bytes\"}],\"name\":\"controllerRedeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isIssuable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isControllable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLastActive\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendPerToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"_isAdministrator\",\"type\":\"bool\"}],\"name\":\"setAdministrator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenHolder\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"redeemFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllDocuments\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"getMetadata\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"getDocument\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenHolder\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"issue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"removeDocument\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"recoverDividend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllMetadata\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"dividendBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferFromWithData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_operatorData\",\"type\":\"bytes\"}],\"name\":\"controllerTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositPartial\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"supply\",\"type\":\"uint256\"},{\"name\":\"whitelist\",\"type\":\"address\"},{\"name\":\"dividendToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"string\"}],\"name\":\"MetadataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_name\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_uri\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_documentHash\",\"type\":\"bytes32\"}],\"name\":\"DocumentRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_name\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_uri\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_documentHash\",\"type\":\"bytes32\"}],\"name\":\"DocumentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"DividendDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DividendWithdrawl\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"DividendTokenChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"administrator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountRecovered\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"inactivityPeriod\",\"type\":\"uint256\"}],\"name\":\"DividendRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isAdministrator\",\"type\":\"bool\"}],\"name\":\"AdministratorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_controller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_data\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"_operatorData\",\"type\":\"bytes\"}],\"name\":\"ControllerTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_controller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenHolder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_data\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"_operatorData\",\"type\":\"bytes\"}],\"name\":\"ControllerRedemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"Issued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"Redeemed\",\"type\":\"event\"}]","ContractName":"PropertyToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000152d02c7e14af6800000000000000000000000000000820f232173e7c22cc2213e91c1a147e6b7459c62000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000000000000000000000123230393232204176616c6f6e204472697665000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044156445200000000000000000000000000000000000000000000000000000000","Library":"","LicenseType":"None","SwarmSource":"bzzr://93232d63a2af7a32e42577f963792ed2582133113e636b8f705750498edc3bc3"}]}