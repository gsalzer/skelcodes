{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.8;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * > Note: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the `nonReentrant` modifier\n * available, which can be aplied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n */\ncontract ReentrancyGuard {\n    /// @dev counter to allow mutex lock with only one SSTORE operation\n    uint256 private _guardCounter;\n\n    constructor () internal {\n        // The counter starts at one to prevent changing it from zero to a non-zero\n        // value, which is a more expensive operation.\n        _guardCounter = 1;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _guardCounter += 1;\n        uint256 localCounter = _guardCounter;\n        _;\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\n    }\n}\n\ninterface IMiniMeToken {\n    function balanceOf(address _owner) external view returns (uint256 balance);\n    function totalSupply() external view returns(uint);\n    function generateTokens(address _owner, uint _amount) external returns (bool);\n    function destroyTokens(address _owner, uint _amount) external returns (bool);\n    function totalSupplyAt(uint _blockNumber) external view returns(uint);\n    function balanceOfAt(address _holder, uint _blockNumber) external view returns (uint);\n    function transferOwnership(address newOwner) external;\n}\n\n/// @dev The token controller contract must implement these functions\ncontract TokenController {\n  /// @notice Called when `_owner` sends ether to the MiniMe Token contract\n  /// @param _owner The address that sent the ether to create tokens\n  /// @return True if the ether is accepted, false if it throws\n  function proxyPayment(address _owner) public payable returns(bool);\n\n  /// @notice Notifies the controller about a token transfer allowing the\n  ///  controller to react if desired\n  /// @param _from The origin of the transfer\n  /// @param _to The destination of the transfer\n  /// @param _amount The amount of the transfer\n  /// @return False if the controller does not authorize the transfer\n  function onTransfer(address _from, address _to, uint _amount) public returns(bool);\n\n  /// @notice Notifies the controller about an approval allowing the\n  ///  controller to react if desired\n  /// @param _owner The address that calls `approve()`\n  /// @param _spender The spender in the `approve()` call\n  /// @param _amount The amount in the `approve()` call\n  /// @return False if the controller does not authorize the approval\n  function onApprove(address _owner, address _spender, uint _amount) public\n    returns(bool);\n}\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see `ERC20Detailed`.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a `Transfer` event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\n     * zero by default.\n     *\n     * This value changes when `approve` or `transferFrom` are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * > Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an `Approval` event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a `Transfer` event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to `approve`. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @dev Optional functions from the ERC20 standard.\n */\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\n     * these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei.\n     *\n     * > Note that this information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * `IERC20.balanceOf` and `IERC20.transfer`.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\n/**\n * @dev Collection of functions related to the address type,\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * This test is non-exhaustive, and there may be false-negatives: during the\n     * execution of a contract's constructor, its address will be reported as\n     * not containing a contract.\n     *\n     * > It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n        // solhint-disable-next-line max-line-length\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n/**\n * @title The interface for the Kyber Network smart contract\n * @author Zefram Lou (Zebang Liu)\n */\ninterface KyberNetwork {\n  function getExpectedRate(ERC20Detailed src, ERC20Detailed dest, uint srcQty) external view\n      returns (uint expectedRate, uint slippageRate);\n\n  function tradeWithHint(\n    ERC20Detailed src, uint srcAmount, ERC20Detailed dest, address payable destAddress, uint maxDestAmount,\n    uint minConversionRate, address walletId, bytes calldata hint) external payable returns(uint);\n}\n\n/**\n * @title The smart contract for useful utility functions and constants.\n * @author Zefram Lou (Zebang Liu)\n */\ncontract Utils {\n  using SafeMath for uint256;\n  using SafeERC20 for ERC20Detailed;\n\n  /**\n   * @notice Checks if `_token` is a valid token.\n   * @param _token the token's address\n   */\n  modifier isValidToken(address _token) {\n    require(_token != address(0));\n    if (_token != address(ETH_TOKEN_ADDRESS)) {\n      require(isContract(_token));\n    }\n    _;\n  }\n\n  address public DAI_ADDR;\n  address payable public KYBER_ADDR;\n  \n  bytes public constant PERM_HINT = \"PERM\";\n\n  ERC20Detailed internal constant ETH_TOKEN_ADDRESS = ERC20Detailed(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\n  ERC20Detailed internal dai;\n  KyberNetwork internal kyber;\n\n  uint constant internal PRECISION = (10**18);\n  uint constant internal MAX_QTY   = (10**28); // 10B tokens\n  uint constant internal ETH_DECIMALS = 18;\n  uint constant internal MAX_DECIMALS = 18;\n\n  constructor(\n    address _daiAddr,\n    address payable _kyberAddr\n  ) public {\n    DAI_ADDR = _daiAddr;\n    KYBER_ADDR = _kyberAddr;\n\n    dai = ERC20Detailed(_daiAddr);\n    kyber = KyberNetwork(_kyberAddr);\n  }\n\n  /**\n   * @notice Get the number of decimals of a token\n   * @param _token the token to be queried\n   * @return number of decimals\n   */\n  function getDecimals(ERC20Detailed _token) internal view returns(uint256) {\n    if (address(_token) == address(ETH_TOKEN_ADDRESS)) {\n      return uint256(ETH_DECIMALS);\n    }\n    return uint256(_token.decimals());\n  }\n\n  /**\n   * @notice Get the token balance of an account\n   * @param _token the token to be queried\n   * @param _addr the account whose balance will be returned\n   * @return token balance of the account\n   */\n  function getBalance(ERC20Detailed _token, address _addr) internal view returns(uint256) {\n    if (address(_token) == address(ETH_TOKEN_ADDRESS)) {\n      return uint256(_addr.balance);\n    }\n    return uint256(_token.balanceOf(_addr));\n  }\n\n  /**\n   * @notice Calculates the rate of a trade. The rate is the price of the source token in the dest token, in 18 decimals.\n   *         Note: the rate is on the token level, not the wei level, so for example if 1 Atoken = 10 Btoken, then the rate\n   *         from A to B is 10 * 10**18, regardless of how many decimals each token uses.\n   * @param srcAmount amount of source token\n   * @param destAmount amount of dest token\n   * @param srcDecimals decimals used by source token\n   * @param dstDecimals decimals used by dest token\n   */\n  function calcRateFromQty(uint srcAmount, uint destAmount, uint srcDecimals, uint dstDecimals)\n        internal pure returns(uint)\n  {\n    require(srcAmount <= MAX_QTY);\n    require(destAmount <= MAX_QTY);\n\n    if (dstDecimals >= srcDecimals) {\n      require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\n      return (destAmount * PRECISION / ((10 ** (dstDecimals - srcDecimals)) * srcAmount));\n    } else {\n      require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\n      return (destAmount * PRECISION * (10 ** (srcDecimals - dstDecimals)) / srcAmount);\n    }\n  }\n\n  /**\n   * @notice Wrapper function for doing token conversion on Kyber Network\n   * @param _srcToken the token to convert from\n   * @param _srcAmount the amount of tokens to be converted\n   * @param _destToken the destination token\n   * @return _destPriceInSrc the price of the dest token, in terms of source tokens\n   *         _srcPriceInDest the price of the source token, in terms of dest tokens\n   *         _actualDestAmount actual amount of dest token traded\n   *         _actualSrcAmount actual amount of src token traded\n   */\n  function __kyberTrade(ERC20Detailed _srcToken, uint256 _srcAmount, ERC20Detailed _destToken)\n    internal\n    returns(\n      uint256 _destPriceInSrc,\n      uint256 _srcPriceInDest,\n      uint256 _actualDestAmount,\n      uint256 _actualSrcAmount\n    )\n  {\n    require(_srcToken != _destToken);\n\n    // Get current rate & ensure token is listed on Kyber\n    (, uint256 rate) = kyber.getExpectedRate(_srcToken, _destToken, _srcAmount);\n    require(rate > 0);\n\n    uint256 beforeSrcBalance = getBalance(_srcToken, address(this));\n    uint256 msgValue;\n    if (_srcToken != ETH_TOKEN_ADDRESS) {\n      msgValue = 0;\n      _srcToken.safeApprove(KYBER_ADDR, 0);\n      _srcToken.safeApprove(KYBER_ADDR, _srcAmount);\n    } else {\n      msgValue = _srcAmount;\n    }\n    _actualDestAmount = kyber.tradeWithHint.value(msgValue)(\n      _srcToken,\n      _srcAmount,\n      _destToken,\n      toPayableAddr(address(this)),\n      MAX_QTY,\n      rate,\n      0x332D87209f7c8296389C307eAe170c2440830A47,\n      PERM_HINT\n    );\n    require(_actualDestAmount > 0);\n    if (_srcToken != ETH_TOKEN_ADDRESS) {\n      _srcToken.safeApprove(KYBER_ADDR, 0);\n    }\n\n    _actualSrcAmount = beforeSrcBalance.sub(getBalance(_srcToken, address(this)));\n    _destPriceInSrc = calcRateFromQty(_actualDestAmount, _actualSrcAmount, getDecimals(_destToken), getDecimals(_srcToken));\n    _srcPriceInDest = calcRateFromQty(_actualSrcAmount, _actualDestAmount, getDecimals(_srcToken), getDecimals(_destToken));\n  }\n\n  /**\n   * @notice Checks if an Ethereum account is a smart contract\n   * @param _addr the account to be checked\n   * @return True if the account is a smart contract, false otherwise\n   */\n  function isContract(address _addr) view internal returns(bool) {\n    uint size;\n    if (_addr == address(0)) return false;\n    assembly {\n        size := extcodesize(_addr)\n    }\n    return size>0;\n  }\n\n  function toPayableAddr(address _addr) pure internal returns (address payable) {\n    return address(uint160(_addr));\n  }\n}\n\ninterface BetokenProxyInterface {\n  function betokenFundAddress() external view returns (address payable);\n  function updateBetokenFundAddress() external;\n}\n\n/**\n * @title The storage layout of BetokenFund\n * @author Zefram Lou (Zebang Liu)\n */\ncontract BetokenStorage is Ownable, ReentrancyGuard {\n  using SafeMath for uint256;\n\n  enum CyclePhase { Intermission, Manage }\n  enum VoteDirection { Empty, For, Against }\n  enum Subchunk { Propose, Vote }\n\n  struct Investment {\n    address tokenAddress;\n    uint256 cycleNumber;\n    uint256 stake;\n    uint256 tokenAmount;\n    uint256 buyPrice; // token buy price in 18 decimals in DAI\n    uint256 sellPrice; // token sell price in 18 decimals in DAI\n    uint256 buyTime;\n    uint256 buyCostInDAI;\n    bool isSold;\n  }\n\n  // Fund parameters\n  uint256 public constant COMMISSION_RATE = 20 * (10 ** 16); // The proportion of profits that gets distributed to Kairo holders every cycle.\n  uint256 public constant ASSET_FEE_RATE = 1 * (10 ** 15); // The proportion of fund balance that gets distributed to Kairo holders every cycle.\n  uint256 public constant NEXT_PHASE_REWARD = 1 * (10 ** 18); // Amount of Kairo rewarded to the user who calls nextPhase().\n  uint256 public constant MAX_BUY_KRO_PROP = 1 * (10 ** 16); // max Kairo you can buy is 1% of total supply\n  uint256 public constant FALLBACK_MAX_DONATION = 100 * (10 ** 18); // If payment cap for registration is below 100 DAI, use 100 DAI instead\n  uint256 public constant MIN_KRO_PRICE = 25 * (10 ** 17); // 1 KRO >= 2.5 DAI\n  uint256 public constant COLLATERAL_RATIO_MODIFIER = 75 * (10 ** 16); // Modifies Compound's collateral ratio, gets 2:1 ratio from current 1.5:1 ratio\n  uint256 public constant MIN_RISK_TIME = 3 days; // Mininum risk taken to get full commissions is 9 days * kairoBalance\n  uint256 public constant INACTIVE_THRESHOLD = 6; // Number of inactive cycles after which a manager's Kairo balance can be burned\n  // Upgrade constants\n  uint256 public constant CHUNK_SIZE = 3 days;\n  uint256 public constant PROPOSE_SUBCHUNK_SIZE = 1 days;\n  uint256 public constant CYCLES_TILL_MATURITY = 3;\n  uint256 public constant QUORUM = 10 * (10 ** 16); // 10% quorum\n  uint256 public constant VOTE_SUCCESS_THRESHOLD = 75 * (10 ** 16); // Votes on upgrade candidates need >75% voting weight to pass\n\n  // Instance variables\n\n  // Checks if the token listing initialization has been completed.\n  bool public hasInitializedTokenListings;\n\n  // Address of the Kairo token contract.\n  address public controlTokenAddr;\n\n  // Address of the share token contract.\n  address public shareTokenAddr;\n\n  // Address of the BetokenProxy contract.\n  address payable public proxyAddr;\n\n  // Address of the CompoundOrderFactory contract.\n  address public compoundFactoryAddr;\n\n  // Address of the BetokenLogic contract.\n  address public betokenLogic;\n\n  // Address to which the development team funding will be sent.\n  address payable public devFundingAccount;\n\n  // Address of the previous version of BetokenFund.\n  address payable public previousVersion;\n\n  // The number of the current investment cycle.\n  uint256 public cycleNumber;\n\n  // The amount of funds held by the fund.\n  uint256 public totalFundsInDAI;\n\n  // The start time for the current investment cycle phase, in seconds since Unix epoch.\n  uint256 public startTimeOfCyclePhase;\n\n  // The proportion of Betoken Shares total supply to mint and use for funding the development team. Fixed point decimal.\n  uint256 public devFundingRate;\n\n  // Total amount of commission unclaimed by managers\n  uint256 public totalCommissionLeft;\n\n  // Stores the lengths of each cycle phase in seconds.\n  uint256[2] public phaseLengths;\n\n  // The last cycle where a user redeemed all of their remaining commission.\n  mapping(address => uint256) public lastCommissionRedemption;\n\n  // Marks whether a manager has redeemed their commission for a certain cycle\n  mapping(address => mapping(uint256 => bool)) public hasRedeemedCommissionForCycle;\n\n  // The stake-time measured risk that a manager has taken in a cycle\n  mapping(address => mapping(uint256 => uint256)) public riskTakenInCycle;\n\n  // In case a manager joined the fund during the current cycle, set the fallback base stake for risk threshold calculation\n  mapping(address => uint256) public baseRiskStakeFallback;\n\n  // List of investments of a manager in the current cycle.\n  mapping(address => Investment[]) public userInvestments;\n\n  // List of short/long orders of a manager in the current cycle.\n  mapping(address => address payable[]) public userCompoundOrders;\n\n  // Total commission to be paid for work done in a certain cycle (will be redeemed in the next cycle's Intermission)\n  mapping(uint256 => uint256) public totalCommissionOfCycle;\n\n  // The block number at which the Manage phase ended for a given cycle\n  mapping(uint256 => uint256) public managePhaseEndBlock;\n\n  // The last cycle where a manager made an investment\n  mapping(address => uint256) public lastActiveCycle;\n\n  // Checks if an address points to a whitelisted Kyber token.\n  mapping(address => bool) public isKyberToken;\n\n  // Checks if an address points to a whitelisted Compound token. Returns false for cDAI and other stablecoin CompoundTokens.\n  mapping(address => bool) public isCompoundToken;\n\n  // Check if an address points to a whitelisted Fulcrum position token.\n  mapping(address => bool) public isPositionToken;\n\n  // The current cycle phase.\n  CyclePhase public cyclePhase;\n\n  // Upgrade governance related variables\n  bool public hasFinalizedNextVersion; // Denotes if the address of the next smart contract version has been finalized\n  bool public upgradeVotingActive; // Denotes if the vote for which contract to upgrade to is active\n  address payable public nextVersion; // Address of the next version of BetokenFund.\n  address[5] public proposers; // Manager who proposed the upgrade candidate in a chunk\n  address payable[5] public candidates; // Candidates for a chunk\n  uint256[5] public forVotes; // For votes for a chunk\n  uint256[5] public againstVotes; // Against votes for a chunk\n  uint256 public proposersVotingWeight; // Total voting weight of previous and current proposers. This is used for excluding the voting weight of proposers.\n  mapping(uint256 => mapping(address => VoteDirection[5])) public managerVotes; // Records each manager's vote\n  mapping(uint256 => uint256) public upgradeSignalStrength; // Denotes the amount of Kairo that's signalling in support of beginning the upgrade process during a cycle\n  mapping(uint256 => mapping(address => bool)) public upgradeSignal; // Maps manager address to whether they support initiating an upgrade\n\n  // Contract instances\n  IMiniMeToken internal cToken;\n  IMiniMeToken internal sToken;\n  BetokenProxyInterface internal proxy;\n\n  // Events\n\n  event ChangedPhase(uint256 indexed _cycleNumber, uint256 indexed _newPhase, uint256 _timestamp, uint256 _totalFundsInDAI);\n\n  event Deposit(uint256 indexed _cycleNumber, address indexed _sender, address _tokenAddress, uint256 _tokenAmount, uint256 _daiAmount, uint256 _timestamp);\n  event Withdraw(uint256 indexed _cycleNumber, address indexed _sender, address _tokenAddress, uint256 _tokenAmount, uint256 _daiAmount, uint256 _timestamp);\n\n  event CreatedInvestment(uint256 indexed _cycleNumber, address indexed _sender, uint256 _id, address _tokenAddress, uint256 _stakeInWeis, uint256 _buyPrice, uint256 _costDAIAmount, uint256 _tokenAmount);\n  event SoldInvestment(uint256 indexed _cycleNumber, address indexed _sender, uint256 _id, address _tokenAddress, uint256 _receivedKairo, uint256 _sellPrice, uint256 _earnedDAIAmount);\n\n  event CreatedCompoundOrder(uint256 indexed _cycleNumber, address indexed _sender, uint256 _id, address _order, bool _orderType, address _tokenAddress, uint256 _stakeInWeis, uint256 _costDAIAmount);\n  event SoldCompoundOrder(uint256 indexed _cycleNumber, address indexed _sender, uint256 _id, address _order,  bool _orderType, address _tokenAddress, uint256 _receivedKairo, uint256 _earnedDAIAmount);\n  event RepaidCompoundOrder(uint256 indexed _cycleNumber, address indexed _sender, uint256 _id, address _order, uint256 _repaidDAIAmount);\n\n  event CommissionPaid(uint256 indexed _cycleNumber, address indexed _sender, uint256 _commission);\n  event TotalCommissionPaid(uint256 indexed _cycleNumber, uint256 _totalCommissionInDAI);\n\n  event Register(address indexed _manager, uint256 _donationInDAI, uint256 _kairoReceived);\n  \n  event SignaledUpgrade(uint256 indexed _cycleNumber, address indexed _sender, bool indexed _inSupport);\n  event DeveloperInitiatedUpgrade(uint256 indexed _cycleNumber, address _candidate);\n  event InitiatedUpgrade(uint256 indexed _cycleNumber);\n  event ProposedCandidate(uint256 indexed _cycleNumber, uint256 indexed _voteID, address indexed _sender, address _candidate);\n  event Voted(uint256 indexed _cycleNumber, uint256 indexed _voteID, address indexed _sender, bool _inSupport, uint256 _weight);\n  event FinalizedNextVersion(uint256 indexed _cycleNumber, address _nextVersion);\n\n  /*\n  Helper functions shared by both BetokenLogic & BetokenFund\n  */\n\n  /**\n   * @notice The manage phase is divided into 9 3-day chunks. Determines which chunk the fund's in right now.\n   * @return The index of the current chunk (starts from 0). Returns 0 if not in Manage phase.\n   */\n  function currentChunk() public view returns (uint) {\n    if (cyclePhase != CyclePhase.Manage) {\n      return 0;\n    }\n    return (now - startTimeOfCyclePhase) / CHUNK_SIZE;\n  }\n\n  /**\n   * @notice There are two subchunks in each chunk: propose (1 day) and vote (2 days).\n   *         Determines which subchunk the fund is in right now.\n   * @return The Subchunk the fund is in right now\n   */\n  function currentSubchunk() public view returns (Subchunk _subchunk) {\n    if (cyclePhase != CyclePhase.Manage) {\n      return Subchunk.Vote;\n    }\n    uint256 timeIntoCurrChunk = (now - startTimeOfCyclePhase) % CHUNK_SIZE;\n    return timeIntoCurrChunk < PROPOSE_SUBCHUNK_SIZE ? Subchunk.Propose : Subchunk.Vote;\n  }\n\n  /**\n   * @notice Calculates an account's voting weight based on their Kairo balance\n   *         3 cycles ago\n   * @param _of the account to be queried\n   * @return The account's voting weight\n   */\n  function getVotingWeight(address _of) public view returns (uint256 _weight) {\n    if (cycleNumber <= CYCLES_TILL_MATURITY || _of == address(0)) {\n      return 0;\n    }\n    return cToken.balanceOfAt(_of, managePhaseEndBlock[cycleNumber.sub(CYCLES_TILL_MATURITY)]);\n  }\n\n  /**\n   * @notice Calculates the total voting weight based on the total Kairo supply\n   *         3 cycles ago. The weights of proposers are deducted.\n   * @return The total voting weight right now\n   */\n  function getTotalVotingWeight() public view returns (uint256 _weight) {\n    if (cycleNumber <= CYCLES_TILL_MATURITY) {\n      return 0;\n    }\n    return cToken.totalSupplyAt(managePhaseEndBlock[cycleNumber.sub(CYCLES_TILL_MATURITY)]).sub(proposersVotingWeight);\n  }\n\n  /**\n   * @notice Calculates the current price of Kairo. The price is equal to the amount of DAI each Kairo\n   *         can control, and it's kept above MIN_KRO_PRICE.\n   * @return Kairo's current price\n   */\n  function kairoPrice() public view returns (uint256 _kairoPrice) {\n    if (cToken.totalSupply() == 0) { return MIN_KRO_PRICE; }\n    uint256 controlPerKairo = totalFundsInDAI.mul(10 ** 18).div(cToken.totalSupply());\n    if (controlPerKairo < MIN_KRO_PRICE) {\n      // keep price above minimum price\n      return MIN_KRO_PRICE;\n    }\n    return controlPerKairo;\n  }\n}\n\n// Compound finance comptroller\ninterface Comptroller {\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\n    function markets(address cToken) external view returns (bool isListed, uint256 collateralFactorMantissa);\n}\n\n// Compound finance's price oracle\ninterface PriceOracle {\n  function getPrice(address asset) external view returns (uint);\n}\n\n// Compound finance ERC20 market interface\ninterface CERC20 {\n  function mint(uint mintAmount) external returns (uint);\n  function redeemUnderlying(uint redeemAmount) external returns (uint);\n  function borrow(uint borrowAmount) external returns (uint);\n  function repayBorrow(uint repayAmount) external returns (uint);\n  function borrowBalanceCurrent(address account) external returns (uint);\n  function exchangeRateCurrent() external returns (uint);\n\n  function balanceOf(address account) external view returns (uint);\n  function decimals() external view returns (uint);\n  function underlying() external view returns (address);\n}\n\ncontract CompoundOrderStorage is Ownable {\n  // Constants\n  uint256 internal constant NEGLIGIBLE_DEBT = 10 ** 14; // we don't care about debts below 10^-4 DAI (0.1 cent)\n  uint256 internal constant MAX_REPAY_STEPS = 3; // Max number of times we attempt to repay remaining debt\n\n  // Contract instances\n  Comptroller public COMPTROLLER; // The Compound comptroller\n  PriceOracle public ORACLE; // The Compound price oracle\n  CERC20 public CDAI; // The Compound DAI market token\n  address public CETH_ADDR;\n\n  // Instance variables\n  uint256 public stake;\n  uint256 public collateralAmountInDAI;\n  uint256 public loanAmountInDAI;\n  uint256 public cycleNumber;\n  uint256 public buyTime; // Timestamp for order execution\n  uint256 public outputAmount; // Records the total output DAI after order is sold\n  address public compoundTokenAddr;\n  bool public isSold;\n  bool public orderType; // True for shorting, false for longing\n\n  // The contract containing the code to be executed\n  address public logicContract;\n}\n\ncontract CompoundOrder is CompoundOrderStorage, Utils {\n  constructor(\n    address _compoundTokenAddr,\n    uint256 _cycleNumber,\n    uint256 _stake,\n    uint256 _collateralAmountInDAI,\n    uint256 _loanAmountInDAI,\n    bool _orderType,\n    address _logicContract,\n    address _daiAddr,\n    address payable _kyberAddr,\n    address _comptrollerAddr,\n    address _priceOracleAddr,\n    address _cDAIAddr,\n    address _cETHAddr\n  ) public Utils(_daiAddr, _kyberAddr)  {\n    // Initialize details of short order\n    require(_compoundTokenAddr != _cDAIAddr);\n    require(_stake > 0 && _collateralAmountInDAI > 0 && _loanAmountInDAI > 0); // Validate inputs\n    stake = _stake;\n    collateralAmountInDAI = _collateralAmountInDAI;\n    loanAmountInDAI = _loanAmountInDAI;\n    cycleNumber = _cycleNumber;\n    compoundTokenAddr = _compoundTokenAddr;\n    orderType = _orderType;\n    logicContract = _logicContract;\n\n    COMPTROLLER = Comptroller(_comptrollerAddr);\n    ORACLE = PriceOracle(_priceOracleAddr);\n    CDAI = CERC20(_cDAIAddr);\n    CETH_ADDR = _cETHAddr;\n  }\n  \n  /**\n   * @notice Executes the Compound order\n   * @param _minPrice the minimum token price\n   * @param _maxPrice the maximum token price\n   */\n  function executeOrder(uint256 _minPrice, uint256 _maxPrice) public {\n    (bool success,) = logicContract.delegatecall(abi.encodeWithSelector(this.executeOrder.selector, _minPrice, _maxPrice));\n    if (!success) { revert(); }\n  }\n\n  /**\n   * @notice Sells the Compound order and returns assets to BetokenFund\n   * @param _minPrice the minimum token price\n   * @param _maxPrice the maximum token price\n   */\n  function sellOrder(uint256 _minPrice, uint256 _maxPrice) public returns (uint256 _inputAmount, uint256 _outputAmount) {\n    (bool success, bytes memory result) = logicContract.delegatecall(abi.encodeWithSelector(this.sellOrder.selector, _minPrice, _maxPrice));\n    if (!success) { revert(); }\n    return abi.decode(result, (uint256, uint256));\n  }\n\n  /**\n   * @notice Repays the loans taken out to prevent the collateral ratio from dropping below threshold\n   * @param _repayAmountInDAI the amount to repay, in DAI\n   */\n  function repayLoan(uint256 _repayAmountInDAI) public {\n    (bool success,) = logicContract.delegatecall(abi.encodeWithSelector(this.repayLoan.selector, _repayAmountInDAI));\n    if (!success) { revert(); }\n  }\n\n  /**\n   * @notice Calculates the current liquidity (supply - collateral) on the Compound platform\n   * @return the liquidity\n   */\n  function getCurrentLiquidityInDAI() public returns (bool _isNegative, uint256 _amount) {\n    (bool success, bytes memory result) = logicContract.delegatecall(abi.encodeWithSelector(this.getCurrentLiquidityInDAI.selector));\n    if (!success) { revert(); }\n    return abi.decode(result, (bool, uint256));\n  }\n\n  /**\n   * @notice Calculates the current collateral ratio on Compound, using 18 decimals\n   * @return the collateral ratio\n   */\n  function getCurrentCollateralRatioInDAI() public returns (uint256 _amount) {\n    (bool success, bytes memory result) = logicContract.delegatecall(abi.encodeWithSelector(this.getCurrentCollateralRatioInDAI.selector));\n    if (!success) { revert(); }\n    return abi.decode(result, (uint256));\n  }\n\n  /**\n   * @notice Calculates the current profit in DAI\n   * @return the profit amount\n   */\n  function getCurrentProfitInDAI() public returns (bool _isNegative, uint256 _amount) {\n    (bool success, bytes memory result) = logicContract.delegatecall(abi.encodeWithSelector(this.getCurrentProfitInDAI.selector));\n    if (!success) { revert(); }\n    return abi.decode(result, (bool, uint256));\n  }\n\n  function getMarketCollateralFactor() public returns (uint256) {\n    (bool success, bytes memory result) = logicContract.delegatecall(abi.encodeWithSelector(this.getMarketCollateralFactor.selector));\n    if (!success) { revert(); }\n    return abi.decode(result, (uint256));\n  }\n\n  function getCurrentCollateralInDAI() public returns (uint256 _amount) {\n    (bool success, bytes memory result) = logicContract.delegatecall(abi.encodeWithSelector(this.getCurrentCollateralInDAI.selector));\n    if (!success) { revert(); }\n    return abi.decode(result, (uint256));\n  }\n\n  function getCurrentBorrowInDAI() public returns (uint256 _amount) {\n    (bool success, bytes memory result) = logicContract.delegatecall(abi.encodeWithSelector(this.getCurrentBorrowInDAI.selector));\n    if (!success) { revert(); }\n    return abi.decode(result, (uint256));\n  }\n\n  function getCurrentCashInDAI() public returns (uint256 _amount) {\n    (bool success, bytes memory result) = logicContract.delegatecall(abi.encodeWithSelector(this.getCurrentCashInDAI.selector));\n    if (!success) { revert(); }\n    return abi.decode(result, (uint256));\n  }\n\n  function() external payable {}\n}\n\ncontract CompoundOrderFactory {\n  address public SHORT_CERC20_LOGIC_CONTRACT;\n  address public SHORT_CEther_LOGIC_CONTRACT;\n  address public LONG_CERC20_LOGIC_CONTRACT;\n  address public LONG_CEther_LOGIC_CONTRACT;\n\n  address public DAI_ADDR;\n  address payable public KYBER_ADDR;\n  address public COMPTROLLER_ADDR;\n  address public ORACLE_ADDR;\n  address public CDAI_ADDR;\n  address public CETH_ADDR;\n\n  constructor(\n    address _shortCERC20LogicContract,\n    address _shortCEtherLogicContract,\n    address _longCERC20LogicContract,\n    address _longCEtherLogicContract,\n    address _daiAddr,\n    address payable _kyberAddr,\n    address _comptrollerAddr,\n    address _priceOracleAddr,\n    address _cDAIAddr,\n    address _cETHAddr\n  ) public {\n    SHORT_CERC20_LOGIC_CONTRACT = _shortCERC20LogicContract;\n    SHORT_CEther_LOGIC_CONTRACT = _shortCEtherLogicContract;\n    LONG_CERC20_LOGIC_CONTRACT = _longCERC20LogicContract;\n    LONG_CEther_LOGIC_CONTRACT = _longCEtherLogicContract;\n\n    DAI_ADDR = _daiAddr;\n    KYBER_ADDR = _kyberAddr;\n    COMPTROLLER_ADDR = _comptrollerAddr;\n    ORACLE_ADDR = _priceOracleAddr;\n    CDAI_ADDR = _cDAIAddr;\n    CETH_ADDR = _cETHAddr;\n  }\n\n  function createOrder(\n    address _compoundTokenAddr,\n    uint256 _cycleNumber,\n    uint256 _stake,\n    uint256 _collateralAmountInDAI,\n    uint256 _loanAmountInDAI,\n    bool _orderType\n  ) public returns (CompoundOrder) {\n    require(_compoundTokenAddr != address(0));\n\n    CompoundOrder order;\n    address logicContract;\n\n    if (_compoundTokenAddr != CETH_ADDR) {\n      logicContract = _orderType ? SHORT_CERC20_LOGIC_CONTRACT : LONG_CERC20_LOGIC_CONTRACT;\n    } else {\n      logicContract = _orderType ? SHORT_CEther_LOGIC_CONTRACT : LONG_CEther_LOGIC_CONTRACT;\n    }\n    order = new CompoundOrder(_compoundTokenAddr, _cycleNumber, _stake, _collateralAmountInDAI, _loanAmountInDAI, _orderType, logicContract, DAI_ADDR, KYBER_ADDR, COMPTROLLER_ADDR, ORACLE_ADDR, CDAI_ADDR, CETH_ADDR);\n    order.transferOwnership(msg.sender);\n    return order;\n  }\n\n  function getMarketCollateralFactor(address _compoundTokenAddr) public view returns (uint256) {\n    Comptroller troll = Comptroller(COMPTROLLER_ADDR);\n    (, uint256 factor) = troll.markets(_compoundTokenAddr);\n    return factor;\n  }\n}\n\n/**\n * @title The main smart contract of the Betoken hedge fund.\n * @author Zefram Lou (Zebang Liu)\n */\ncontract BetokenFund is BetokenStorage, Utils, TokenController {\n  /**\n   * @notice Executes function only during the given cycle phase.\n   * @param phase the cycle phase during which the function may be called\n   */\n  modifier during(CyclePhase phase) {\n    require(cyclePhase == phase);\n    _;\n  }\n\n  /**\n   * @notice Passes if the fund is ready for migrating to the next version\n   */\n  modifier readyForUpgradeMigration {\n    require(hasFinalizedNextVersion == true);\n    require(now > startTimeOfCyclePhase.add(phaseLengths[uint(CyclePhase.Intermission)]));\n    _;\n  }\n\n  /**\n   * @notice Passes if the fund has not finalized the next smart contract to upgrade to\n   */\n  modifier notReadyForUpgrade {\n    require(hasFinalizedNextVersion == false);\n    _;\n  }\n\n  /**\n   * Meta functions\n   */\n\n  constructor(\n    address payable _kroAddr,\n    address payable _sTokenAddr,\n    address payable _devFundingAccount,\n    uint256[2] memory _phaseLengths,\n    uint256 _devFundingRate,\n    address payable _previousVersion,\n    address _daiAddr,\n    address payable _kyberAddr,\n    address _compoundFactoryAddr,\n    address _betokenLogic\n  )\n    public\n    Utils(_daiAddr, _kyberAddr)\n  {\n    controlTokenAddr = _kroAddr;\n    shareTokenAddr = _sTokenAddr;\n    devFundingAccount = _devFundingAccount;\n    phaseLengths = _phaseLengths;\n    devFundingRate = _devFundingRate;\n    cyclePhase = CyclePhase.Manage;\n    compoundFactoryAddr = _compoundFactoryAddr;\n    betokenLogic = _betokenLogic;\n    previousVersion = _previousVersion;\n\n    cToken = IMiniMeToken(_kroAddr);\n    sToken = IMiniMeToken(_sTokenAddr);\n  }\n\n  function initTokenListings(\n    address[] memory _kyberTokens,\n    address[] memory _compoundTokens,\n    address[] memory _positionTokens\n  )\n    public\n    onlyOwner\n  {\n    // May only initialize once\n    require(!hasInitializedTokenListings);\n    hasInitializedTokenListings = true;\n\n    uint256 i;\n    for (i = 0; i < _kyberTokens.length; i = i.add(1)) {\n      isKyberToken[_kyberTokens[i]] = true;\n    }\n\n    for (i = 0; i < _compoundTokens.length; i = i.add(1)) {\n      isCompoundToken[_compoundTokens[i]] = true;\n    }\n\n    for (i = 0; i < _positionTokens.length; i = i.add(1)) {\n      isPositionToken[_positionTokens[i]] = true;\n    }\n  }\n\n  /**\n   * @notice Used during deployment to set the BetokenProxy contract address.\n   * @param _proxyAddr the proxy's address\n   */\n  function setProxy(address payable _proxyAddr) public onlyOwner {\n    require(_proxyAddr != address(0));\n    require(proxyAddr == address(0));\n    proxyAddr = _proxyAddr;\n    proxy = BetokenProxyInterface(_proxyAddr);\n  }\n\n  /**\n   * Upgrading functions\n   */\n\n  /**\n   * @notice Allows the developer to propose a candidate smart contract for the fund to upgrade to.\n   *          The developer may change the candidate during the Intermission phase.\n   * @param _candidate the address of the candidate smart contract\n   * @return True if successfully changed candidate, false otherwise.\n   */\n  function developerInitiateUpgrade(address payable _candidate) public during(CyclePhase.Intermission) onlyOwner notReadyForUpgrade returns (bool _success) {\n    (bool success, bytes memory result) = betokenLogic.delegatecall(abi.encodeWithSelector(this.developerInitiateUpgrade.selector, _candidate));\n    if (!success) { return false; }\n    return abi.decode(result, (bool));\n  }\n\n  /**\n   * @notice Allows a manager to signal their support of initiating an upgrade. They can change their signal before the end of the Intermission phase.\n   *          Managers who oppose initiating an upgrade don't need to call this function, unless they origianlly signalled in support.\n   *          Signals are reset every cycle.\n   * @param _inSupport True if the manager supports initiating upgrade, false if the manager opposes it.\n   * @return True if successfully changed signal, false if no changes were made.\n   */\n  function signalUpgrade(bool _inSupport) public during(CyclePhase.Intermission) notReadyForUpgrade returns (bool _success) {\n    (bool success, bytes memory result) = betokenLogic.delegatecall(abi.encodeWithSelector(this.signalUpgrade.selector, _inSupport));\n    if (!success) { return false; }\n    return abi.decode(result, (bool));\n  }\n\n  /**\n   * @notice Allows manager to propose a candidate smart contract for the fund to upgrade to. Among the managers who have proposed a candidate,\n   *          the manager with the most voting weight's candidate will be used in the vote. Ties are broken in favor of the larger address.\n   *          The proposer may change the candidate they support during the Propose subchunk in their chunk.\n   * @param _chunkNumber the chunk for which the sender is proposing the candidate\n   * @param _candidate the address of the candidate smart contract\n   * @return True if successfully proposed/changed candidate, false otherwise.\n   */\n  function proposeCandidate(uint256 _chunkNumber, address payable _candidate) public during(CyclePhase.Manage) notReadyForUpgrade returns (bool _success) {\n    (bool success, bytes memory result) = betokenLogic.delegatecall(abi.encodeWithSelector(this.proposeCandidate.selector, _chunkNumber, _candidate));\n    if (!success) { return false; }\n    return abi.decode(result, (bool));\n  }\n\n  /**\n   * @notice Allows a manager to vote for or against a candidate smart contract the fund will upgrade to. The manager may change their vote during\n   *          the Vote subchunk. A manager who has been a proposer may not vote.\n   * @param _inSupport True if the manager supports initiating upgrade, false if the manager opposes it.\n   * @return True if successfully changed vote, false otherwise.\n   */\n  function voteOnCandidate(uint256 _chunkNumber, bool _inSupport) public during(CyclePhase.Manage) notReadyForUpgrade returns (bool _success) {\n    (bool success, bytes memory result) = betokenLogic.delegatecall(abi.encodeWithSelector(this.voteOnCandidate.selector, _chunkNumber, _inSupport));\n    if (!success) { return false; }\n    return abi.decode(result, (bool));\n  }\n\n  /**\n   * @notice Performs the necessary state changes after a successful vote\n   * @param _chunkNumber the chunk number of the successful vote\n   * @return True if successful, false otherwise\n   */\n  function finalizeSuccessfulVote(uint256 _chunkNumber) public during(CyclePhase.Manage) notReadyForUpgrade returns (bool _success) {\n    (bool success, bytes memory result) = betokenLogic.delegatecall(abi.encodeWithSelector(this.finalizeSuccessfulVote.selector, _chunkNumber));\n    if (!success) { return false; }\n    return abi.decode(result, (bool));\n  }\n\n  /**\n   * @notice Transfers ownership of Kairo & Share token contracts to the next version. Also updates BetokenFund's\n   *         address in BetokenProxy.\n   */\n  function migrateOwnedContractsToNextVersion() public nonReentrant readyForUpgradeMigration {\n    cToken.transferOwnership(nextVersion);\n    sToken.transferOwnership(nextVersion);\n    proxy.updateBetokenFundAddress();\n  }\n\n  /**\n   * @notice Transfers assets to the next version.\n   * @param _assetAddress the address of the asset to be transferred. Use ETH_TOKEN_ADDRESS to transfer Ether.\n   */\n  function transferAssetToNextVersion(address _assetAddress) public nonReentrant readyForUpgradeMigration isValidToken(_assetAddress) {\n    if (_assetAddress == address(ETH_TOKEN_ADDRESS)) {\n      nextVersion.transfer(address(this).balance);\n    } else {\n      ERC20Detailed token = ERC20Detailed(_assetAddress);\n      token.safeTransfer(nextVersion, token.balanceOf(address(this)));\n    }\n  }\n\n  /**\n   * Getters\n   */\n\n  /**\n   * @notice Returns the length of the user's investments array.\n   * @return length of the user's investments array\n   */\n  function investmentsCount(address _userAddr) public view returns(uint256 _count) {\n    return userInvestments[_userAddr].length;\n  }\n\n  /**\n   * @notice Returns the length of the user's compound orders array.\n   * @return length of the user's compound orders array\n   */\n  function compoundOrdersCount(address _userAddr) public view returns(uint256 _count) {\n    return userCompoundOrders[_userAddr].length;\n  }\n\n  /**\n   * @notice Returns the phaseLengths array.\n   * @return the phaseLengths array\n   */\n  function getPhaseLengths() public view returns(uint256[2] memory _phaseLengths) {\n    return phaseLengths;\n  }\n\n  /**\n   * @notice Returns the commission balance of `_manager`\n   * @return the commission balance and the received penalty, denoted in DAI\n   */\n  function commissionBalanceOf(address _manager) public view returns (uint256 _commission, uint256 _penalty) {\n    if (lastCommissionRedemption[_manager] >= cycleNumber) { return (0, 0); }\n    uint256 cycle = lastCommissionRedemption[_manager] > 0 ? lastCommissionRedemption[_manager] : 1;\n    uint256 cycleCommission;\n    uint256 cyclePenalty;\n    for (; cycle < cycleNumber; cycle = cycle.add(1)) {\n      (cycleCommission, cyclePenalty) = commissionOfAt(_manager, cycle);\n      _commission = _commission.add(cycleCommission);\n      _penalty = _penalty.add(cyclePenalty);\n    }\n  }\n\n  /**\n   * @notice Returns the commission amount received by `_manager` in the `_cycle`th cycle\n   * @return the commission amount and the received penalty, denoted in DAI\n   */\n  function commissionOfAt(address _manager, uint256 _cycle) public view returns (uint256 _commission, uint256 _penalty) {\n    if (hasRedeemedCommissionForCycle[_manager][_cycle]) { return (0, 0); }\n    // take risk into account\n    uint256 baseKairoBalance = cToken.balanceOfAt(_manager, managePhaseEndBlock[_cycle.sub(1)]);\n    uint256 baseStake = baseKairoBalance == 0 ? baseRiskStakeFallback[_manager] : baseKairoBalance;\n    if (baseKairoBalance == 0 && baseRiskStakeFallback[_manager] == 0) { return (0, 0); }\n    uint256 riskTakenProportion = riskTakenInCycle[_manager][_cycle].mul(PRECISION).div(baseStake.mul(MIN_RISK_TIME)); // risk / threshold\n    riskTakenProportion = riskTakenProportion > PRECISION ? PRECISION : riskTakenProportion; // max proportion is 1\n\n    uint256 fullCommission = totalCommissionOfCycle[_cycle].mul(cToken.balanceOfAt(_manager, managePhaseEndBlock[_cycle]))\n      .div(cToken.totalSupplyAt(managePhaseEndBlock[_cycle]));\n\n    _commission = fullCommission.mul(riskTakenProportion).div(PRECISION);\n    _penalty = fullCommission.sub(_commission);\n  }\n\n  /**\n   * Parameter setters\n   */\n\n  /**\n   * @notice Changes the address to which the developer fees will be sent. Only callable by owner.\n   * @param _newAddr the new developer fee address\n   */\n  function changeDeveloperFeeAccount(address payable _newAddr) public onlyOwner {\n    require(_newAddr != address(0) && _newAddr != address(this));\n    devFundingAccount = _newAddr;\n  }\n\n  /**\n   * @notice Changes the proportion of fund balance sent to the developers each cycle. May only decrease. Only callable by owner.\n   * @param _newProp the new proportion, fixed point decimal\n   */\n  function changeDeveloperFeeRate(uint256 _newProp) public onlyOwner {\n    require(_newProp < PRECISION);\n    require(_newProp < devFundingRate);\n    devFundingRate = _newProp;\n  }\n\n  /**\n   * @notice Allows managers to invest in a token. Only callable by owner.\n   * @param _token address of the token to be listed\n   */\n  function listKyberToken(address _token) public onlyOwner {\n    isKyberToken[_token] = true;\n  }\n\n  /**\n   * @notice Moves the fund to the next phase in the investment cycle.\n   */\n  function nextPhase()\n    public\n  {\n    (bool success,) = betokenLogic.delegatecall(abi.encodeWithSelector(this.nextPhase.selector));\n    if (!success) { revert(); }\n  }\n\n\n  /**\n   * Manager registration\n   */\n\n  /**\n   * @notice Registers `msg.sender` as a manager, using DAI as payment. The more one pays, the more Kairo one gets.\n   *         There's a max Kairo amount that can be bought, and excess payment will be sent back to sender.\n   * @param _donationInDAI the amount of DAI to be used for registration\n   */\n  function registerWithDAI(uint256 _donationInDAI) public nonReentrant {\n    (bool success,) = betokenLogic.delegatecall(abi.encodeWithSelector(this.registerWithDAI.selector, _donationInDAI));\n    if (!success) { revert(); }\n  }\n\n  /**\n   * @notice Registers `msg.sender` as a manager, using ETH as payment. The more one pays, the more Kairo one gets.\n   *         There's a max Kairo amount that can be bought, and excess payment will be sent back to sender.\n   */\n  function registerWithETH() public payable nonReentrant {\n    (bool success,) = betokenLogic.delegatecall(abi.encodeWithSelector(this.registerWithETH.selector));\n    if (!success) { revert(); }\n  }\n\n  /**\n   * @notice Registers `msg.sender` as a manager, using tokens as payment. The more one pays, the more Kairo one gets.\n   *         There's a max Kairo amount that can be bought, and excess payment will be sent back to sender.\n   * @param _token the token to be used for payment\n   * @param _donationInTokens the amount of tokens to be used for registration, should use the token's native decimals\n   */\n  function registerWithToken(address _token, uint256 _donationInTokens) public nonReentrant {\n    (bool success,) = betokenLogic.delegatecall(abi.encodeWithSelector(this.registerWithToken.selector, _token, _donationInTokens));\n    if (!success) { revert(); }\n  }\n\n\n  /**\n   * Intermission phase functions\n   */\n\n   /**\n   * @notice Deposit Ether into the fund. Ether will be converted into DAI.\n   */\n  function depositEther()\n    public\n    payable\n    during(CyclePhase.Intermission)\n    nonReentrant\n    notReadyForUpgrade\n  {\n    // Buy DAI with ETH\n    uint256 actualDAIDeposited;\n    uint256 actualETHDeposited;\n    (,, actualDAIDeposited, actualETHDeposited) = __kyberTrade(ETH_TOKEN_ADDRESS, msg.value, dai);\n\n    // Send back leftover ETH\n    uint256 leftOverETH = msg.value.sub(actualETHDeposited);\n    if (leftOverETH > 0) {\n      msg.sender.transfer(leftOverETH);\n    }\n\n    // Register investment\n    __deposit(actualDAIDeposited);\n\n    // Emit event\n    emit Deposit(cycleNumber, msg.sender, address(ETH_TOKEN_ADDRESS), actualETHDeposited, actualDAIDeposited, now);\n  }\n\n  /**\n   * @notice Deposit DAI Stablecoin into the fund.\n   * @param _daiAmount The amount of DAI to be deposited. May be different from actual deposited amount.\n   */\n  function depositDAI(uint256 _daiAmount)\n    public\n    during(CyclePhase.Intermission)\n    nonReentrant\n    notReadyForUpgrade\n  {\n    dai.safeTransferFrom(msg.sender, address(this), _daiAmount);\n\n    // Register investment\n    __deposit(_daiAmount);\n\n    // Emit event\n    emit Deposit(cycleNumber, msg.sender, DAI_ADDR, _daiAmount, _daiAmount, now);\n  }\n\n  /**\n   * @notice Deposit ERC20 tokens into the fund. Tokens will be converted into DAI.\n   * @param _tokenAddr the address of the token to be deposited\n   * @param _tokenAmount The amount of tokens to be deposited. May be different from actual deposited amount.\n   */\n  function depositToken(address _tokenAddr, uint256 _tokenAmount)\n    public\n    nonReentrant\n    during(CyclePhase.Intermission)\n    isValidToken(_tokenAddr)  \n    notReadyForUpgrade\n  {\n    require(_tokenAddr != DAI_ADDR && _tokenAddr != address(ETH_TOKEN_ADDRESS));\n\n    ERC20Detailed token = ERC20Detailed(_tokenAddr);\n\n    token.safeTransferFrom(msg.sender, address(this), _tokenAmount);\n\n    // Convert token into DAI\n    uint256 actualDAIDeposited;\n    uint256 actualTokenDeposited;\n    (,, actualDAIDeposited, actualTokenDeposited) = __kyberTrade(token, _tokenAmount, dai);\n\n    // Give back leftover tokens\n    uint256 leftOverTokens = _tokenAmount.sub(actualTokenDeposited);\n    if (leftOverTokens > 0) {\n      token.safeTransfer(msg.sender, leftOverTokens);\n    }\n\n    // Register investment\n    __deposit(actualDAIDeposited);\n\n    // Emit event\n    emit Deposit(cycleNumber, msg.sender, _tokenAddr, actualTokenDeposited, actualDAIDeposited, now);\n  }\n\n\n  /**\n   * @notice Withdraws Ether by burning Shares.\n   * @param _amountInDAI Amount of funds to be withdrawn expressed in DAI. Fixed-point decimal. May be different from actual amount.\n   */\n  function withdrawEther(uint256 _amountInDAI)\n    public\n    during(CyclePhase.Intermission)\n    nonReentrant\n  {\n    // Buy ETH\n    uint256 actualETHWithdrawn;\n    uint256 actualDAIWithdrawn;\n    (,, actualETHWithdrawn, actualDAIWithdrawn) = __kyberTrade(dai, _amountInDAI, ETH_TOKEN_ADDRESS);\n\n    __withdraw(actualDAIWithdrawn);\n\n    // Transfer Ether to user\n    msg.sender.transfer(actualETHWithdrawn);\n\n    // Emit event\n    emit Withdraw(cycleNumber, msg.sender, address(ETH_TOKEN_ADDRESS), actualETHWithdrawn, actualDAIWithdrawn, now);\n  }\n\n  /**\n   * @notice Withdraws Ether by burning Shares.\n   * @param _amountInDAI Amount of funds to be withdrawn expressed in DAI. Fixed-point decimal. May be different from actual amount.\n   */\n  function withdrawDAI(uint256 _amountInDAI)\n    public\n    during(CyclePhase.Intermission)\n    nonReentrant\n  {\n    __withdraw(_amountInDAI);\n\n    // Transfer DAI to user\n    dai.safeTransfer(msg.sender, _amountInDAI);\n\n    // Emit event\n    emit Withdraw(cycleNumber, msg.sender, DAI_ADDR, _amountInDAI, _amountInDAI, now);\n  }\n\n  /**\n   * @notice Withdraws funds by burning Shares, and converts the funds into the specified token using Kyber Network.\n   * @param _tokenAddr the address of the token to be withdrawn into the caller's account\n   * @param _amountInDAI The amount of funds to be withdrawn expressed in DAI. Fixed-point decimal. May be different from actual amount.\n   */\n  function withdrawToken(address _tokenAddr, uint256 _amountInDAI)\n    public\n    nonReentrant\n    during(CyclePhase.Intermission)\n    isValidToken(_tokenAddr)\n  {\n    require(_tokenAddr != DAI_ADDR && _tokenAddr != address(ETH_TOKEN_ADDRESS));\n\n    ERC20Detailed token = ERC20Detailed(_tokenAddr);\n\n    // Convert DAI into desired tokens\n    uint256 actualTokenWithdrawn;\n    uint256 actualDAIWithdrawn;\n    (,, actualTokenWithdrawn, actualDAIWithdrawn) = __kyberTrade(dai, _amountInDAI, token);\n\n    __withdraw(actualDAIWithdrawn);\n\n    // Transfer tokens to user\n    token.safeTransfer(msg.sender, actualTokenWithdrawn);\n\n    // Emit event\n    emit Withdraw(cycleNumber, msg.sender, _tokenAddr, actualTokenWithdrawn, actualDAIWithdrawn, now);\n  }\n\n  /**\n   * @notice Redeems commission.\n   */\n  function redeemCommission(bool _inShares)\n    public\n    during(CyclePhase.Intermission)\n    nonReentrant\n  {\n    uint256 commission = __redeemCommission();\n\n    if (_inShares) {\n      // Deposit commission into fund\n      __deposit(commission);\n\n      // Emit deposit event\n      emit Deposit(cycleNumber, msg.sender, DAI_ADDR, commission, commission, now);\n    } else {\n      // Transfer the commission in DAI\n      dai.safeTransfer(msg.sender, commission);\n    }\n  }\n\n  /**\n   * @notice Redeems commission for a particular cycle.\n   * @param _inShares true to redeem in Betoken Shares, false to redeem in DAI\n   * @param _cycle the cycle for which the commission will be redeemed.\n   *        Commissions for a cycle will be redeemed during the Intermission phase of the next cycle, so _cycle must < cycleNumber.\n   */\n  function redeemCommissionForCycle(bool _inShares, uint256 _cycle)\n    public\n    during(CyclePhase.Intermission)\n    nonReentrant\n  {\n    require(_cycle < cycleNumber);\n\n    uint256 commission = __redeemCommissionForCycle(_cycle);\n\n    if (_inShares) {\n      // Deposit commission into fund\n      __deposit(commission);\n\n      // Emit deposit event\n      emit Deposit(cycleNumber, msg.sender, DAI_ADDR, commission, commission, now);\n    } else {\n      // Transfer the commission in DAI\n      dai.safeTransfer(msg.sender, commission);\n    }\n  }\n\n  /**\n   * @notice Sells tokens left over due to manager not selling or KyberNetwork not having enough volume. Callable by anyone. Money goes to developer.\n   * @param _tokenAddr address of the token to be sold\n   */\n  function sellLeftoverToken(address _tokenAddr)\n    public\n    nonReentrant\n    during(CyclePhase.Intermission)\n    isValidToken(_tokenAddr)\n  {\n    ERC20Detailed token = ERC20Detailed(_tokenAddr);\n    (,,uint256 actualDAIReceived,) = __kyberTrade(token, getBalance(token, address(this)), dai);\n    totalFundsInDAI = totalFundsInDAI.add(actualDAIReceived);\n  }\n\n  /**\n   * @notice Sells CompoundOrder left over due to manager not selling or KyberNetwork not having enough volume. Callable by anyone. Money goes to developer.\n   * @param _orderAddress address of the CompoundOrder to be sold\n   */\n  function sellLeftoverCompoundOrder(address payable _orderAddress)\n    public\n    nonReentrant\n    during(CyclePhase.Intermission)\n  {\n    // Load order info\n    require(_orderAddress != address(0));\n    CompoundOrder order = CompoundOrder(_orderAddress);\n    require(order.isSold() == false && order.cycleNumber() < cycleNumber);\n\n    // Sell short order\n    // Not using outputAmount returned by order.sellOrder() because _orderAddress could point to a malicious contract\n    uint256 beforeDAIBalance = dai.balanceOf(address(this));\n    order.sellOrder(0, MAX_QTY);\n    uint256 actualDAIReceived = dai.balanceOf(address(this)).sub(beforeDAIBalance);\n\n    totalFundsInDAI = totalFundsInDAI.add(actualDAIReceived);\n  }\n\n  /**\n   * @notice Burns the Kairo balance of a manager who has been inactive for a certain number of cycles\n   * @param _deadman the manager whose Kairo balance will be burned\n   */\n  function burnDeadman(address _deadman)\n    public\n    nonReentrant\n    during(CyclePhase.Intermission)\n  {\n    require(_deadman != address(this));\n    require(cycleNumber.sub(lastActiveCycle[_deadman]) >= INACTIVE_THRESHOLD);\n    require(cToken.destroyTokens(_deadman, cToken.balanceOf(_deadman)));\n  }\n\n  /**\n   * Manage phase functions\n   */\n\n  /**\n   * @notice Creates a new investment for an ERC20 token.\n   * @param _tokenAddress address of the ERC20 token contract\n   * @param _stake amount of Kairos to be staked in support of the investment\n   * @param _minPrice the minimum price for the trade\n   * @param _maxPrice the maximum price for the trade\n   */\n  function createInvestment(\n    address _tokenAddress,\n    uint256 _stake,\n    uint256 _minPrice,\n    uint256 _maxPrice\n  )\n    public\n    nonReentrant\n    isValidToken(_tokenAddress)\n    during(CyclePhase.Manage)\n  {\n    (bool success,) = betokenLogic.delegatecall(abi.encodeWithSelector(this.createInvestment.selector, _tokenAddress, _stake, _minPrice, _maxPrice));\n    if (!success) { revert(); }\n  }\n\n  /**\n   * @notice Called by user to sell the assets an investment invested in. Returns the staked Kairo plus rewards/penalties to the user.\n   *         The user can sell only part of the investment by changing _tokenAmount.\n   * @dev When selling only part of an investment, the old investment would be \"fully\" sold and a new investment would be created with\n   *   the original buy price and however much tokens that are not sold.\n   * @param _investmentId the ID of the investment\n   * @param _tokenAmount the amount of tokens to be sold.\n   * @param _minPrice the minimum price for the trade\n   * @param _maxPrice the maximum price for the trade\n   */\n  function sellInvestmentAsset(\n    uint256 _investmentId,\n    uint256 _tokenAmount,\n    uint256 _minPrice,\n    uint256 _maxPrice\n  )\n    public\n    during(CyclePhase.Manage)\n    nonReentrant\n  {\n    (bool success,) = betokenLogic.delegatecall(abi.encodeWithSelector(this.sellInvestmentAsset.selector, _investmentId, _tokenAmount, _minPrice, _maxPrice));\n    if (!success) { revert(); }\n  }\n\n  /**\n   * @notice Creates a new Compound order to either short or leverage long a token.\n   * @param _orderType true for a short order, false for a levarage long order\n   * @param _tokenAddress address of the Compound token to be traded\n   * @param _stake amount of Kairos to be staked\n   * @param _minPrice the minimum token price for the trade\n   * @param _maxPrice the maximum token price for the trade\n   */\n  function createCompoundOrder(\n    bool _orderType,\n    address _tokenAddress,\n    uint256 _stake,\n    uint256 _minPrice,\n    uint256 _maxPrice\n  )\n    public\n    nonReentrant\n    during(CyclePhase.Manage)\n    isValidToken(_tokenAddress)\n  {\n    (bool success,) = betokenLogic.delegatecall(abi.encodeWithSelector(this.createCompoundOrder.selector, _orderType, _tokenAddress, _stake, _minPrice, _maxPrice));\n    if (!success) { revert(); }\n  }\n\n  /**\n   * @notice Sells a compound order\n   * @param _orderId the ID of the order to be sold (index in userCompoundOrders[msg.sender])\n   * @param _minPrice the minimum token price for the trade\n   * @param _maxPrice the maximum token price for the trade\n   */\n  function sellCompoundOrder(\n    uint256 _orderId,\n    uint256 _minPrice,\n    uint256 _maxPrice\n  )\n    public\n    during(CyclePhase.Manage)\n    nonReentrant\n  {\n    (bool success,) = betokenLogic.delegatecall(abi.encodeWithSelector(this.sellCompoundOrder.selector, _orderId, _minPrice, _maxPrice));\n    if (!success) { revert(); }\n  }\n\n  /**\n   * @notice Repys debt for a Compound order to prevent the collateral ratio from dropping below threshold.\n   * @param _orderId the ID of the Compound order\n   * @param _repayAmountInDAI amount of DAI to use for repaying debt\n   */\n  function repayCompoundOrder(uint256 _orderId, uint256 _repayAmountInDAI) public during(CyclePhase.Manage) nonReentrant {\n    (bool success,) = betokenLogic.delegatecall(abi.encodeWithSelector(this.repayCompoundOrder.selector, _orderId, _repayAmountInDAI));\n    if (!success) { revert(); }\n  }\n\n  /**\n   * Internal use functions\n   */\n\n  // MiniMe TokenController functions, not used right now\n  /**\n   * @notice Called when `_owner` sends ether to the MiniMe Token contract\n   * @param _owner The address that sent the ether to create tokens\n   * @return True if the ether is accepted, false if it throws\n   */\n  function proxyPayment(address _owner) public payable returns(bool) {\n    return false;\n  }\n\n  /**\n   * @notice Notifies the controller about a token transfer allowing the\n   *  controller to react if desired\n   * @param _from The origin of the transfer\n   * @param _to The destination of the transfer\n   * @param _amount The amount of the transfer\n   * @return False if the controller does not authorize the transfer\n   */\n  function onTransfer(address _from, address _to, uint _amount) public returns(bool) {\n    return true;\n  }\n\n  /**\n   * @notice Notifies the controller about an approval allowing the\n   *  controller to react if desired\n   * @param _owner The address that calls `approve()`\n   * @param _spender The spender in the `approve()` call\n   * @param _amount The amount in the `approve()` call\n   * @return False if the controller does not authorize the approval\n   */\n  function onApprove(address _owner, address _spender, uint _amount) public\n      returns(bool) {\n    return true;\n  }\n\n  /**\n   * @notice Handles deposits by minting Betoken Shares & updating total funds.\n   * @param _depositDAIAmount The amount of the deposit in DAI\n   */\n  function __deposit(uint256 _depositDAIAmount) internal {\n    // Register investment and give shares\n    if (sToken.totalSupply() == 0 || totalFundsInDAI == 0) {\n      require(sToken.generateTokens(msg.sender, _depositDAIAmount));\n    } else {\n      require(sToken.generateTokens(msg.sender, _depositDAIAmount.mul(sToken.totalSupply()).div(totalFundsInDAI)));\n    }\n    totalFundsInDAI = totalFundsInDAI.add(_depositDAIAmount);\n  }\n\n  /**\n   * @notice Handles deposits by burning Betoken Shares & updating total funds.\n   * @param _withdrawDAIAmount The amount of the withdrawal in DAI\n   */\n  function __withdraw(uint256 _withdrawDAIAmount) internal {\n    // Burn Shares\n    require(sToken.destroyTokens(msg.sender, _withdrawDAIAmount.mul(sToken.totalSupply()).div(totalFundsInDAI)));\n    totalFundsInDAI = totalFundsInDAI.sub(_withdrawDAIAmount);\n  }\n\n  /**\n   * @notice Redeems the commission for all previous cycles. Updates the related variables.\n   * @return the amount of commission to be redeemed\n   */\n  function __redeemCommission() internal returns (uint256 _commission) {\n    require(lastCommissionRedemption[msg.sender] < cycleNumber);\n\n    uint256 penalty; // penalty received for not taking enough risk\n    (_commission, penalty) = commissionBalanceOf(msg.sender);\n\n    // record the redemption to prevent double-redemption\n    for (uint256 i = lastCommissionRedemption[msg.sender]; i < cycleNumber; i = i.add(1)) {\n      hasRedeemedCommissionForCycle[msg.sender][i] = true;\n    }\n    lastCommissionRedemption[msg.sender] = cycleNumber;\n\n    // record the decrease in commission pool\n    totalCommissionLeft = totalCommissionLeft.sub(_commission);\n    // include commission penalty to this cycle's total commission pool\n    totalCommissionOfCycle[cycleNumber] = totalCommissionOfCycle[cycleNumber].add(penalty);\n    // clear investment arrays to save space\n    delete userInvestments[msg.sender];\n    delete userCompoundOrders[msg.sender];\n\n    emit CommissionPaid(cycleNumber, msg.sender, _commission);\n  }\n\n  /**\n   * @notice Redeems commission for a particular cycle. Updates the related variables.\n   * @param _cycle the cycle for which the commission will be redeemed\n   * @return the amount of commission to be redeemed\n   */\n  function __redeemCommissionForCycle(uint256 _cycle) internal returns (uint256 _commission) {\n    require(!hasRedeemedCommissionForCycle[msg.sender][_cycle]);\n\n    uint256 penalty; // penalty received for not taking enough risk\n    (_commission, penalty) = commissionOfAt(msg.sender, _cycle);\n\n    hasRedeemedCommissionForCycle[msg.sender][_cycle] = true;\n\n    // record the decrease in commission pool\n    totalCommissionLeft = totalCommissionLeft.sub(_commission);\n    // include commission penalty to this cycle's total commission pool\n    totalCommissionOfCycle[cycleNumber] = totalCommissionOfCycle[cycleNumber].add(penalty);\n    // clear investment arrays to save space\n    delete userInvestments[msg.sender];\n    delete userCompoundOrders[msg.sender];\n\n    emit CommissionPaid(_cycle, msg.sender, _commission);\n  }\n\n  function() external payable {}\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"migrateOwnedContractsToNextVersion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"uint256\"},{\"name\":\"_repayAmountInDAI\",\"type\":\"uint256\"}],\"name\":\"repayCompoundOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_inSupport\",\"type\":\"bool\"}],\"name\":\"signalUpgrade\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFundsInDAI\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderAddress\",\"type\":\"address\"}],\"name\":\"sellLeftoverCompoundOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isKyberToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devFundingRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"sellLeftoverToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMMISSION_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"uint256\"},{\"name\":\"_minPrice\",\"type\":\"uint256\"},{\"name\":\"_maxPrice\",\"type\":\"uint256\"}],\"name\":\"sellCompoundOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderType\",\"type\":\"bool\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_stake\",\"type\":\"uint256\"},{\"name\":\"_minPrice\",\"type\":\"uint256\"},{\"name\":\"_maxPrice\",\"type\":\"uint256\"}],\"name\":\"createCompoundOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTimeOfCyclePhase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isCompoundToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalVotingWeight\",\"outputs\":[{\"name\":\"_weight\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"betokenLogic\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newProp\",\"type\":\"uint256\"}],\"name\":\"changeDeveloperFeeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_stake\",\"type\":\"uint256\"},{\"name\":\"_minPrice\",\"type\":\"uint256\"},{\"name\":\"_maxPrice\",\"type\":\"uint256\"}],\"name\":\"createInvestment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"upgradeSignal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_donationInTokens\",\"type\":\"uint256\"}],\"name\":\"registerWithToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"QUORUM\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cycleNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_BUY_KRO_PROP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_inShares\",\"type\":\"bool\"},{\"name\":\"_cycle\",\"type\":\"uint256\"}],\"name\":\"redeemCommissionForCycle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_deadman\",\"type\":\"address\"}],\"name\":\"burnDeadman\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"candidates\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_daiAmount\",\"type\":\"uint256\"}],\"name\":\"depositDAI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_chunkNumber\",\"type\":\"uint256\"},{\"name\":\"_inSupport\",\"type\":\"bool\"}],\"name\":\"voteOnCandidate\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountInDAI\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"commissionBalanceOf\",\"outputs\":[{\"name\":\"_commission\",\"type\":\"uint256\"},{\"name\":\"_penalty\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"nextPhase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"developerInitiateUpgrade\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userCompoundOrders\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPhaseLengths\",\"outputs\":[{\"name\":\"_phaseLengths\",\"type\":\"uint256[2]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"onTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_donationInDAI\",\"type\":\"uint256\"}],\"name\":\"registerWithDAI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CYCLES_TILL_MATURITY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_RISK_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"phaseLengths\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"baseRiskStakeFallback\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"againstVotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasFinalizedNextVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposersVotingWeight\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COLLATERAL_RATIO_MODIFIER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"investmentsCount\",\"outputs\":[{\"name\":\"_count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investmentId\",\"type\":\"uint256\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"name\":\"_minPrice\",\"type\":\"uint256\"},{\"name\":\"_maxPrice\",\"type\":\"uint256\"}],\"name\":\"sellInvestmentAsset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalCommissionOfCycle\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastCommissionRedemption\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"},{\"name\":\"_cycle\",\"type\":\"uint256\"}],\"name\":\"commissionOfAt\",\"outputs\":[{\"name\":\"_commission\",\"type\":\"uint256\"},{\"name\":\"_penalty\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROPOSE_SUBCHUNK_SIZE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kyberTokens\",\"type\":\"address[]\"},{\"name\":\"_compoundTokens\",\"type\":\"address[]\"},{\"name\":\"_positionTokens\",\"type\":\"address[]\"}],\"name\":\"initTokenListings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERM_HINT\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kairoPrice\",\"outputs\":[{\"name\":\"_kairoPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userInvestments\",\"outputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"cycleNumber\",\"type\":\"uint256\"},{\"name\":\"stake\",\"type\":\"uint256\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"name\":\"buyPrice\",\"type\":\"uint256\"},{\"name\":\"sellPrice\",\"type\":\"uint256\"},{\"name\":\"buyTime\",\"type\":\"uint256\"},{\"name\":\"buyCostInDAI\",\"type\":\"uint256\"},{\"name\":\"isSold\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"upgradeSignalStrength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPositionToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proxyAddr\",\"type\":\"address\"}],\"name\":\"setProxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"compoundFactoryAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountInDAI\",\"type\":\"uint256\"}],\"name\":\"withdrawDAI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_chunkNumber\",\"type\":\"uint256\"},{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"proposeCandidate\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentSubchunk\",\"outputs\":[{\"name\":\"_subchunk\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"name\":\"_amountInDAI\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxyAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_inShares\",\"type\":\"bool\"}],\"name\":\"redeemCommission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NEXT_PHASE_REWARD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"managePhaseEndBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCommissionLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddr\",\"type\":\"address\"}],\"name\":\"changeDeveloperFeeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ASSET_FEE_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_KRO_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"compoundOrdersCount\",\"outputs\":[{\"name\":\"_count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INACTIVE_THRESHOLD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasInitializedTokenListings\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_assetAddress\",\"type\":\"address\"}],\"name\":\"transferAssetToNextVersion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"riskTakenInCycle\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"registerWithETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KYBER_ADDR\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FALLBACK_MAX_DONATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hasRedeemedCommissionForCycle\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_chunkNumber\",\"type\":\"uint256\"}],\"name\":\"finalizeSuccessfulVote\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"}],\"name\":\"getVotingWeight\",\"outputs\":[{\"name\":\"_weight\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"shareTokenAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAI_ADDR\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"onApprove\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"previousVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeVotingActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controlTokenAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"listKyberToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CHUNK_SIZE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"forVotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentChunk\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"managerVotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"proxyPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VOTE_SUCCESS_THRESHOLD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cyclePhase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastActiveCycle\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devFundingAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_kroAddr\",\"type\":\"address\"},{\"name\":\"_sTokenAddr\",\"type\":\"address\"},{\"name\":\"_devFundingAccount\",\"type\":\"address\"},{\"name\":\"_phaseLengths\",\"type\":\"uint256[2]\"},{\"name\":\"_devFundingRate\",\"type\":\"uint256\"},{\"name\":\"_previousVersion\",\"type\":\"address\"},{\"name\":\"_daiAddr\",\"type\":\"address\"},{\"name\":\"_kyberAddr\",\"type\":\"address\"},{\"name\":\"_compoundFactoryAddr\",\"type\":\"address\"},{\"name\":\"_betokenLogic\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_cycleNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_newPhase\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_totalFundsInDAI\",\"type\":\"uint256\"}],\"name\":\"ChangedPhase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_cycleNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_daiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_cycleNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_daiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_cycleNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_stakeInWeis\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_buyPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_costDAIAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"CreatedInvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_cycleNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_receivedKairo\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_sellPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_earnedDAIAmount\",\"type\":\"uint256\"}],\"name\":\"SoldInvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_cycleNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_order\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_orderType\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_stakeInWeis\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_costDAIAmount\",\"type\":\"uint256\"}],\"name\":\"CreatedCompoundOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_cycleNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_order\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_orderType\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_receivedKairo\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_earnedDAIAmount\",\"type\":\"uint256\"}],\"name\":\"SoldCompoundOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_cycleNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_order\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_repaidDAIAmount\",\"type\":\"uint256\"}],\"name\":\"RepaidCompoundOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_cycleNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_commission\",\"type\":\"uint256\"}],\"name\":\"CommissionPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_cycleNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_totalCommissionInDAI\",\"type\":\"uint256\"}],\"name\":\"TotalCommissionPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_manager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_donationInDAI\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_kairoReceived\",\"type\":\"uint256\"}],\"name\":\"Register\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_cycleNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_inSupport\",\"type\":\"bool\"}],\"name\":\"SignaledUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_cycleNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"DeveloperInitiatedUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_cycleNumber\",\"type\":\"uint256\"}],\"name\":\"InitiatedUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_cycleNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_voteID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"ProposedCandidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_cycleNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_voteID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_inSupport\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_weight\",\"type\":\"uint256\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_cycleNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_nextVersion\",\"type\":\"address\"}],\"name\":\"FinalizedNextVersion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BetokenFund","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000952bbd5344ca0a898a1b8b2ffcfe3acb1351ebd50000000000000000000000001689dcfef3e695ac4cc1e5b7e77f9135f1d58a50000000000000000000000000332d87209f7c8296389c307eae170c2440830a47000000000000000000000000000000000000000000000000000000000003f480000000000000000000000000000000000000000000000000000000000023988000000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000089d24a6b4ccb1b6faa2625fe562bdd9a23260359000000000000000000000000818e6fecd516ecc3849daf6845e3ec868087b755000000000000000000000000f9b8d8137de64de61cd582518ebc5345d01d5039000000000000000000000000d176ff3d44fdae552bdc5b566fa1f0066e81fe0b","Library":"","SwarmSource":"bzzr://4e1bbf357632776bcdcb838d2032d64c5b23cdecf17f5064fa39948000106951"}]}