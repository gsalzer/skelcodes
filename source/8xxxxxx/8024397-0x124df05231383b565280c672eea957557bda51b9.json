{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n\tinterface IERC20 {\r\n\t  function totalSupply() external view returns (uint256);\r\n\t  function balanceOf(address who) external view returns (uint256);\r\n\t  function allowance(address owner, address spender) external view returns (uint256);\r\n\t  function transfer(address to, uint256 value) external returns (bool);\r\n\t  function approve(address spender, uint256 value) external returns (bool);\r\n\t  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n\t  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\t  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\t}\r\n\r\n\tlibrary SafeMath {\r\n\t  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t    if (a == 0) {\r\n\t      return 0;\r\n\t    }\r\n\t    uint256 c = a * b;\r\n\t    assert(c / a == b);\r\n\t    return c;\r\n\t  }\r\n\r\n\t  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t    uint256 c = a / b;\r\n\t    return c;\r\n\t  }\r\n\r\n\t  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t    assert(b <= a);\r\n\t    return a - b;\r\n\t  }\r\n\r\n\t  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t    uint256 c = a + b;\r\n\t    assert(c >= a);\r\n\t    return c;\r\n\t  }\r\n\r\n\t  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\r\n\t    uint256 c = add(a,m);\r\n\t    uint256 d = sub(c,1);\r\n\t    return mul(div(d,m),m);\r\n\t  }\r\n\t}\r\n\r\n\tcontract ERC20Detailed is IERC20 {\r\n\r\n\t  string private _name;\r\n\t  string private _symbol;\r\n\t  uint8 private _decimals;\r\n\r\n\t  constructor(string memory name, string memory symbol, uint8 decimals) public {\r\n\t    _name = name;\r\n\t    _symbol = symbol;\r\n\t    _decimals = decimals;\r\n\t  }\r\n\r\n\t  function name() public view returns(string memory) {\r\n\t    return _name;\r\n\t  }\r\n\r\n\t  function symbol() public view returns(string memory) {\r\n\t    return _symbol;\r\n\t  }\r\n\r\n\t  function decimals() public view returns(uint8) {\r\n\t    return _decimals;\r\n\t  }\r\n\t}\r\n\r\n\tcontract SHIT is ERC20Detailed {\r\n\r\n\t  using SafeMath for uint256;\r\n\t  mapping (address => uint256) private _balances;\r\n\t  mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n\t  string constant tokenName = \"Stupendously High Income Taxes\";\r\n\t  string constant tokenSymbol = \"SHIT\";\r\n\t  uint8  constant tokenDecimals = 18;\r\n\t  uint256 _totalSupply = 4200069133700000000000000;\r\n\t  uint256 public basePercent = 100;\r\n\r\n\t  constructor() public payable ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) {\r\n\t    _mint(msg.sender, _totalSupply);\r\n\t  }\r\n\r\n\t  function totalSupply() public view returns (uint256) {\r\n\t    return _totalSupply;\r\n\t  }\r\n\r\n\t  function balanceOf(address owner) public view returns (uint256) {\r\n\t    return _balances[owner];\r\n\t  }\r\n\r\n\t  function allowance(address owner, address spender) public view returns (uint256) {\r\n\t    return _allowed[owner][spender];\r\n\t  }\r\n\r\n\t  function findTenPercent(uint256 value) public view returns (uint256)  {\r\n\t    uint256 roundValue = value.ceil(basePercent);\r\n\t    uint256 tenPercent = roundValue.mul(basePercent).div(800);\r\n\t    return tenPercent;\r\n\t  }\r\n\r\n\t  function transfer(address to, uint256 value) public returns (bool) {\r\n\t    require(value <= _balances[msg.sender]);\r\n\t    require(to != address(0));\r\n\r\n\t    uint256 tokensToBurn = findTenPercent(value);\r\n\t    uint256 tokensToTransfer = value.sub(tokensToBurn);\r\n\r\n\t    _balances[msg.sender] = _balances[msg.sender].sub(value);\r\n\t    _balances[to] = _balances[to].add(tokensToTransfer);\r\n\r\n\t    _totalSupply = _totalSupply.sub(tokensToBurn);\r\n\r\n\t    emit Transfer(msg.sender, to, tokensToTransfer);\r\n\t    emit Transfer(msg.sender, address(0), tokensToBurn);\r\n\t    return true;\r\n\t  }\r\n\r\n\t  function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {\r\n\t    for (uint256 i = 0; i < receivers.length; i++) {\r\n\t      transfer(receivers[i], amounts[i]);\r\n\t    }\r\n\t  }\r\n\r\n\t  function approve(address spender, uint256 value) public returns (bool) {\r\n\t    require(spender != address(0));\r\n\t    _allowed[msg.sender][spender] = value;\r\n\t    emit Approval(msg.sender, spender, value);\r\n\t    return true;\r\n\t  }\r\n\r\n\t  function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n\t    require(value <= _balances[from]);\r\n\t    require(value <= _allowed[from][msg.sender]);\r\n\t    require(to != address(0));\r\n\r\n\t    _balances[from] = _balances[from].sub(value);\r\n\r\n\t    uint256 tokensToBurn = findTenPercent(value);\r\n\t    uint256 tokensToTransfer = value.sub(tokensToBurn);\r\n\r\n\t    _balances[to] = _balances[to].add(tokensToTransfer);\r\n\t    _totalSupply = _totalSupply.sub(tokensToBurn);\r\n\r\n\t    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n\r\n\t    emit Transfer(from, to, tokensToTransfer);\r\n\t    emit Transfer(from, address(0), tokensToBurn);\r\n\r\n\t    return true;\r\n\t  }\r\n\r\n\t  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n\t    require(spender != address(0));\r\n\t    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\r\n\t    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n\t    return true;\r\n\t  }\r\n\r\n\t  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n\t    require(spender != address(0));\r\n\t    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\r\n\t    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n\t    return true;\r\n\t  }\r\n\r\n\t  function _mint(address account, uint256 amount) internal {\r\n\t    require(amount != 0);\r\n\t    _balances[account] = _balances[account].add(amount);\r\n\t    emit Transfer(address(0), account, amount);\r\n\t  }\r\n\r\n\t  function burn(uint256 amount) external {\r\n\t    _burn(msg.sender, amount);\r\n\t  }\r\n\r\n\t  function _burn(address account, uint256 amount) internal {\r\n\t    require(amount != 0);\r\n\t    require(amount <= _balances[account]);\r\n\t    _totalSupply = _totalSupply.sub(amount);\r\n\t    _balances[account] = _balances[account].sub(amount);\r\n\t    emit Transfer(account, address(0), amount);\r\n\t  }\r\n\r\n\t  function burnFrom(address account, uint256 amount) external {\r\n\t    require(amount <= _allowed[account][msg.sender]);\r\n\t    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);\r\n\t    _burn(account, amount);\r\n\t  }\r\n\t}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receivers\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"findTenPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"SHIT","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://58671b9019d1f002619d18433de5017e5ed28bd82638c06c3db3d14d79230fd3"}]}