{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     * @notice Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: ../smart-contracts/contracts/ERC20Interface.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n// https://github.com/ethereum/EIPs/issues/20\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint supply);\r\n\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n\r\n    function decimals() external view returns (uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n// File: ../smart-contracts/contracts/KyberNetworkProxyInterface.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n\r\n/// @title Kyber Network interface\r\ninterface KyberNetworkProxyInterface {\r\n    function maxGasPrice() external view returns (uint);\r\n\r\n    function getUserCapInWei(address user) external view returns (uint);\r\n\r\n    function getUserCapInTokenWei(address user, ERC20 token) external view returns (uint);\r\n\r\n    function enabled() external view returns (bool);\r\n\r\n    function info(bytes32 id) external view returns (uint);\r\n\r\n    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty) external view\r\n        returns (uint expectedRate, uint slippageRate);\r\n\r\n    function tradeWithHint(ERC20 src, uint srcAmount, ERC20 dest, address destAddress, uint maxDestAmount,\r\n        uint minConversionRate, address walletId, bytes calldata hint) external payable returns (uint);\r\n}\r\n\r\n// File: contracts/KyberConverter.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n\r\n\r\n\r\ncontract KyberConverter is Ownable {\r\n    using SafeMath for uint256;\r\n    ERC20 constant internal ETH_TOKEN_ADDRESS = ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\r\n\r\n    KyberNetworkProxyInterface public kyberNetworkProxyContract;\r\n    address public walletId;\r\n\r\n    ERC20 public stableToken;\r\n\r\n    // Events\r\n    event Swap(address indexed sender, ERC20 srcToken, ERC20 destToken);\r\n\r\n    /**\r\n     * @dev Payable fallback to receive ETH while converting\r\n     **/\r\n    function() external payable {\r\n    }\r\n\r\n    constructor (KyberNetworkProxyInterface _kyberNetworkProxyContract, address _walletId, address _stableAddress) public {\r\n        kyberNetworkProxyContract = _kyberNetworkProxyContract;\r\n        walletId = _walletId;\r\n        stableToken = ERC20(_stableAddress);\r\n    }\r\n\r\n    function setStableToken(address _stableAddress) public onlyOwner {\r\n        stableToken = ERC20(_stableAddress);\r\n    }\r\n\r\n    function getStableToken() public view returns (address) {\r\n        return address(stableToken);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the conversion rate for the destToken given the srcQty.\r\n     * @param srcToken source token contract address\r\n     * @param srcQty amount of source tokens\r\n     * @param destToken destination token contract address\r\n     */\r\n    function getConversionRates(\r\n        ERC20 srcToken,\r\n        uint srcQty,\r\n        ERC20 destToken\r\n    ) public\r\n    view\r\n    returns (uint, uint)\r\n    {\r\n        return kyberNetworkProxyContract.getExpectedRate(srcToken, destToken, srcQty);\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Swap the user's ERC20 token to ETH and donates to the community.\r\n     * Note: requires 'approve' srcToken first!\r\n     * @param srcToken source token contract address\r\n     * @param srcQty amount of source tokens\r\n     * @param maxDestAmount address to send swapped tokens to\r\n     * @param community address of the donation community\r\n     */\r\n    function executeSwapAndDonate(\r\n        ERC20 srcToken,\r\n        uint srcQty,\r\n        uint maxDestAmount,\r\n        IDonationCommunity community\r\n    ) public {\r\n        uint minConversionRate;\r\n\r\n        // Save prev src token balance\r\n        uint256 prevSrcBalance = srcToken.balanceOf(address(this));\r\n\r\n        // Check that the token transferFrom has succeeded\r\n        require(srcToken.transferFrom(msg.sender, address(this), srcQty));\r\n\r\n        // Mitigate ERC20 Approve front-running attack, by initially setting\r\n        // allowance to 0\r\n        require(srcToken.approve(address(kyberNetworkProxyContract), 0));\r\n\r\n        // Set the spender's token allowance to tokenQty\r\n        require(srcToken.approve(address(kyberNetworkProxyContract), srcQty));\r\n\r\n        // Get the minimum conversion rate\r\n        (minConversionRate,) = kyberNetworkProxyContract.getExpectedRate(srcToken, ETH_TOKEN_ADDRESS, srcQty);\r\n\r\n        // Swap the ERC20 token and send to 'this' contract address\r\n        bytes memory hint;\r\n        uint256 amount = kyberNetworkProxyContract.tradeWithHint(\r\n            srcToken,\r\n            srcQty,\r\n            ETH_TOKEN_ADDRESS,\r\n            address(this),\r\n            maxDestAmount,\r\n            minConversionRate,\r\n            walletId,\r\n            hint\r\n        );\r\n\r\n        // Clean kyber to use _srcTokens on belhalf of this contract\r\n        require(\r\n            srcToken.approve(address(kyberNetworkProxyContract), 0),\r\n            \"Could not clear approval of kyber to use srcToken on behalf of this contract\"\r\n        );\r\n\r\n        // Return the change of src token\r\n        uint256 change = srcToken.balanceOf(address(this)).sub(prevSrcBalance);\r\n\r\n        if (change > 0) {\r\n            require(\r\n                srcToken.transfer(msg.sender, change),\r\n                \"Could not transfer change to sender\"\r\n            );\r\n        }\r\n\r\n        // donate ETH to the community\r\n        community.donateDelegated.value(amount)(msg.sender);\r\n\r\n\r\n        // Log the event\r\n        emit Swap(msg.sender, srcToken, ETH_TOKEN_ADDRESS);\r\n    }\r\n\r\n    function executeSwapMyETHToStable(\r\n    ) public payable returns (uint256) {\r\n        uint minConversionRate;\r\n        uint srcQty = msg.value;\r\n        address destAddress = msg.sender;\r\n\r\n        // Get the minimum conversion rate\r\n        (minConversionRate,) = kyberNetworkProxyContract.getExpectedRate(ETH_TOKEN_ADDRESS, stableToken, srcQty);\r\n\r\n        uint maxDestAmount = srcQty.mul(minConversionRate).mul(105).div(100);\r\n        // 5%\r\n\r\n        // Swap the ERC20 token and send to destAddress\r\n        bytes memory hint;\r\n        uint256 amount = kyberNetworkProxyContract.tradeWithHint.value(srcQty)(\r\n            ETH_TOKEN_ADDRESS,\r\n            srcQty,\r\n            stableToken,\r\n            destAddress,\r\n            maxDestAmount,\r\n            minConversionRate,\r\n            walletId,\r\n            hint\r\n        );\r\n        // Log the event\r\n        emit Swap(msg.sender, ETH_TOKEN_ADDRESS, stableToken);\r\n\r\n        return amount;\r\n    }\r\n\r\n    /**\r\n     * @dev Recovery for the remaining change\r\n     */\r\n    function withdraw() public onlyOwner {\r\n        require(address(this).balance > 0, \"Insufficient funds to withdraw\");\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n\r\n}\r\n\r\ninterface IDonationCommunity {\r\n\r\n    function donateDelegated(address payable _donator) external payable;\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"srcToken\",\"type\":\"address\"},{\"name\":\"srcQty\",\"type\":\"uint256\"},{\"name\":\"destToken\",\"type\":\"address\"}],\"name\":\"getConversionRates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"executeSwapMyETHToStable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStableToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kyberNetworkProxyContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stableToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"srcToken\",\"type\":\"address\"},{\"name\":\"srcQty\",\"type\":\"uint256\"},{\"name\":\"maxDestAmount\",\"type\":\"uint256\"},{\"name\":\"community\",\"type\":\"address\"}],\"name\":\"executeSwapAndDonate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletId\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stableAddress\",\"type\":\"address\"}],\"name\":\"setStableToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_kyberNetworkProxyContract\",\"type\":\"address\"},{\"name\":\"_walletId\",\"type\":\"address\"},{\"name\":\"_stableAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"srcToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"destToken\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"KyberConverter","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000818e6fecd516ecc3849daf6845e3ec868087b755000000000000000000000000ddc0e4931936d9f590ccb29f7f4758751479d0a800000000000000000000000089d24a6b4ccb1b6faa2625fe562bdd9a23260359","Library":"","LicenseType":"None","SwarmSource":"bzzr://8dcad3ae0b14cc302aeaebb7133070e02482ae96fd77ff198717628db2a62aaa"}]}