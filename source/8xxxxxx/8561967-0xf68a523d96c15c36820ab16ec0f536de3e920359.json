{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2019-09-10\r\n*/\r\n\r\npragma solidity ^0.5.8;\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface Token {\r\n    function transferFrom(address _from, address _to, uint256 _amount) external returns (bool);\r\n    function transfer(address _to, uint256 _amount) external returns (bool);\r\n    function approve(address _spender, uint256 _value) external returns(bool);\r\n}\r\n\r\n\r\ncontract Auction {\r\n    address public usdxAddr;\r\n    address public topBidder;\r\n    address public wallet;\r\n    uint256 public highestBid;\r\n    uint256 public expireTime;\r\n    mapping (address => uint256) public balances;\r\n    \r\n    constructor(address _usdxAddr, uint256 _expireTimeInMinutes) public {\r\n        usdxAddr = _usdxAddr;\r\n        expireTime = now + _expireTimeInMinutes * 1 minutes;\r\n        wallet = msg.sender;\r\n    }\r\n    \r\n    function deposit (uint256 _amount) external {\r\n        require(now <= expireTime);\r\n        require(Token(usdxAddr).transferFrom(msg.sender, address(this), _amount));\r\n        balances[msg.sender] += _amount;\r\n        if (balances[msg.sender] > highestBid) {\r\n            highestBid = balances[msg.sender];\r\n            topBidder = msg.sender;\r\n        }\r\n    }\r\n    \r\n    function withdraw (uint256 _amount) external {\r\n        require(msg.sender != topBidder);\r\n        require(_amount <= balances[msg.sender]);\r\n        balances[msg.sender] -= _amount;\r\n        require(Token(usdxAddr).transfer(msg.sender, _amount));\r\n    }\r\n    \r\n    function closing () external {\r\n        require(now > expireTime);\r\n        require(Token(usdxAddr).transfer(wallet, highestBid));\r\n    }\r\n    \r\n    function setExpireTime (uint256 _expireTime) external {\r\n        require (msg.sender == wallet);\r\n        expireTime = _expireTime;\r\n    }\r\n}\r\n\r\ncontract bidder is Ownable {\r\n    Auction Hyatt = Auction(0xcFD5096A1eD092a60C8aC76336Bb5Ac19b1BC53A);\r\n\r\n    function bid() public {\r\n        if(Hyatt.topBidder() != address(this)){\r\n            uint256 amount = Hyatt.highestBid() + 1 - Hyatt.balances(address(this));\r\n            Hyatt.deposit( amount );\r\n        }\r\n    }\r\n\r\n    constructor() public {\r\n        Token(0xeb269732ab75A6fD61Ea60b06fE994cD32a83549).approve(address(Hyatt), uint256(-1));\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        Hyatt.withdraw( Hyatt.balances(address(this)) );\r\n    }\r\n\r\n    function drain(uint256 _amount) public onlyOwner {\r\n        Token(0xeb269732ab75A6fD61Ea60b06fE994cD32a83549).transfer(owner, _amount);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"bid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"bidder","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://31bf3586fcf7203823a082874d6959d98463c8015b7471ed970633339adc2699"}]}