{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.4;\r\n\r\n/**\r\n  Multipliers contract: returns 111%-141% of each investment!\r\n  Automatic payouts!\r\n  No bugs, no backdoors, NO OWNER - fully automatic!\r\n  Made and checked by professionals!\r\n\r\n  1. Send any sum to smart contract address\r\n     - sum from 0.01 to 10 ETH\r\n     - min 250000 gas limit\r\n     - you are added to a queue\r\n  2. Wait a little bit\r\n  3. ...\r\n  4. PROFIT! You have got 111-141%\r\n\r\n  How is that?\r\n  1. The first investor in the queue (you will become the\r\n     first in some time) receives next investments until\r\n     it become 111-141% of his initial investment.\r\n  2. You will receive payments in several parts or all at once\r\n  3. Once you receive 111-141% of your initial investment you are\r\n     removed from the queue.\r\n  4. You can make multiple deposits\r\n  5. The balance of this contract should normally be 0 because\r\n     all the money are immediately go to payouts\r\n  6. The more deposits you make the more multiplier you get. See MULTIPLIERS var\r\n  7. If you are the last depositor (no deposits after you in 30 mins)\r\n     you get 5% of all the ether that were on the contract. Send 0 to withdraw it.\r\n     Do it BEFORE NEXT RESTART!\r\n\r\n\r\n     So the last pays to the first (or to several first ones\r\n     if the deposit big enough) and the investors paid 111-141% are removed from the queue\r\n\r\n                new investor --|               brand new investor --|\r\n                 investor5     |                 new investor       |\r\n                 investor4     |     =======>      investor5        |\r\n                 investor3     |                   investor4        |\r\n    (part. paid) investor2    <|                   investor3        |\r\n    (fully paid) investor1   <-|                   investor2   <----|  (pay until full %)\r\n\r\n\r\n  Контракт Умножитель: возвращает 111%-141% от вашего депозита!\r\n  Автоматические выплаты!\r\n  Без ошибок, дыр, автоматический - для выплат НЕ НУЖНА администрация!\r\n  Создан и проверен профессионалами!\r\n\r\n  1. Пошлите любую ненулевую сумму на адрес контракта\r\n     - сумма от 0.01 до 10 ETH\r\n     - gas limit минимум 250000\r\n     - вы встанете в очередь\r\n  2. Немного подождите\r\n  3. ...\r\n  4. PROFIT! Вам пришло 111%-141% от вашего депозита.\r\n\r\n  Как это возможно?\r\n  1. Первый инвестор в очереди (вы станете первым очень скоро) получает выплаты от\r\n     новых инвесторов до тех пор, пока не получит 111%-141% от своего депозита\r\n  2. Выплаты могут приходить несколькими частями или все сразу\r\n  3. Как только вы получаете 111%-141% от вашего депозита, вы удаляетесь из очереди\r\n  4. Вы можете делать несколько депозитов сразу\r\n  5. Баланс этого контракта должен обычно быть в районе 0, потому что все поступления\r\n     сразу же направляются на выплаты\r\n  6. Чем больше вы сделали депозитов, тем больший процент вы получаете на очередной депозит\r\n     Смотрите переменную MULTIPLIERS в контракте\r\n  7. Если вы последний вкладчик (после вас не сделан депозит в течение 30 минут), то вы можете\r\n     забрать призовой фонд - 5% от эфира, прошедшего через контракт. Пошлите 0 на контракт\r\n     с газом не менее 350000, чтобы его получить.\r\n\r\n\r\n     Таким образом, последние платят первым, и инвесторы, достигшие выплат 111%-141% от депозита,\r\n     удаляются из очереди, уступая место остальным\r\n\r\n              новый инвестор --|            совсем новый инвестор --|\r\n                 инвестор5     |                новый инвестор      |\r\n                 инвестор4     |     =======>      инвестор5        |\r\n                 инвестор3     |                   инвестор4        |\r\n (част. выплата) инвестор2    <|                   инвестор3        |\r\n(полная выплата) инвестор1   <-|                   инвестор2   <----|  (доплата до 111%-141%)\r\n\r\n*/\r\n\r\ncontract Multipliers {\r\n    uint constant public TECH_PERCENT = 5;\r\n    uint constant public PROMO_PERCENT = 5;\r\n    uint constant public PRIZE_PERCENT = 5;\r\n\r\n    uint public MAX_INVESTMENT = 10 ether;\r\n    uint public MIN_INVESTMENT = 0.01 ether;\r\n    uint public MIN_INVESTMENT_FOR_PRIZE = 0.03 ether; //Increases by this value per hour since start\r\n    uint public MAX_IDLE_TIME = 30 minutes; //Maximum time the deposit should remain the last to receive prize\r\n    uint public maxGasPrice = 1 ether; //Unlimited or limited\r\n\r\n    event Dep(int stage, uint sum, address addr);\r\n    event Refund(int stage, uint sum, address addr);\r\n    event Prize(int stage, uint sum, address addr);\r\n\r\n    //How many percent for your deposit to be multiplied\r\n    //Depends on number of deposits from specified address at this stage\r\n    //The more deposits the higher the multiplier\r\n    uint8[] MULTIPLIERS = [\r\n        111, //For first deposit made at this stage\r\n        113, //For second\r\n        117, //For third\r\n        121, //For forth\r\n        125, //For fifth\r\n        130, //For sixth\r\n        135, //For seventh\r\n        141  //For eighth and on\r\n    ];\r\n\r\n    //The deposit structure holds all the info about the deposit made\r\n    struct Deposit {\r\n        address payable depositor; //The depositor address\r\n        uint128 deposit;   //The deposit amount\r\n        uint128 expect;    //How much we should pay out (initially it is 111%-141% of deposit)\r\n    }\r\n\r\n    struct DepositCount {\r\n        int128 stage;\r\n        uint128 count;\r\n    }\r\n\r\n    struct LastDepositInfo {\r\n        uint128 index;\r\n        uint128 time;\r\n    }\r\n\r\n    Deposit[] private queue;  //The queue\r\n    //Address for tech expences\r\n    address payable private tech;\r\n    //Address for promo expences\r\n    address payable private promo;\r\n\r\n    uint public currentReceiverIndex = 0; //The index of the first depositor in the queue. The receiver of investments!\r\n    uint public currentQueueSize = 0; //The current size of queue (may be less than queue.length)\r\n    LastDepositInfo public lastDepositInfo; //The time last deposit made at\r\n\r\n    uint public prizeAmount = 0; //Prize amount accumulated for the last depositor\r\n    uint public startTime = 0; //Next start time. 0 - inactive, <> 0 - next start time\r\n    int public stage = 0; //Number of contract runs\r\n    mapping(address => DepositCount) public depositsMade; //The number of deposits of different depositors\r\n\r\n    constructor(address payable _tech, address payable _promo) public {\r\n        //Initialize array to save gas to first depositor\r\n        //Remember - actual queue length is stored in currentQueueSize!\r\n        queue.push(Deposit(address(0x1),0,1));\r\n        tech = _tech;\r\n        promo = _promo;\r\n    }\r\n\r\n    //This function receives all the deposits\r\n    //stores them and make immediate payouts\r\n    function () external payable {\r\n        deposit();\r\n    }\r\n\r\n    //This function receives all the deposits\r\n    //stores them and make immediate payouts\r\n    function deposit() public payable {\r\n        //Prevent cheating with high gas prices.\r\n        require(tx.gasprice <= maxGasPrice, \"Gas price is too high! Do not cheat!\");\r\n        require(startTime > 0 && now >= startTime, \"The race has not begun yet!\");\r\n\r\n        if(msg.value > 0 && lastDepositInfo.time > 0 && now > lastDepositInfo.time + MAX_IDLE_TIME){\r\n            //This is deposit after prize is drawn, so just return the money and withdraw the prize to the winner\r\n            msg.sender.transfer(msg.value);\r\n            withdrawPrize();\r\n        }else if(msg.value > 0){\r\n            require(gasleft() >= 220000, \"We require more gas!\"); //We need gas to process queue\r\n            require(msg.value >= MIN_INVESTMENT, \"The investment is too small!\");\r\n            require(msg.value <= MAX_INVESTMENT, \"The investment is too large!\"); //Do not allow too big investments to stabilize payouts\r\n\r\n            addDeposit(msg.sender, msg.value);\r\n\r\n            //Pay to first investors in line\r\n            pay();\r\n        }else if(msg.value == 0){\r\n            withdrawPrize();\r\n        }\r\n    }\r\n\r\n    //Used to pay to current investors\r\n    //Each new transaction processes 1 - 4+ investors in the head of queue\r\n    //depending on balance and gas left\r\n    function pay() private {\r\n        //Try to send all the money on contract to the first investors in line\r\n        uint balance = address(this).balance;\r\n        uint money = 0;\r\n        if(balance > prizeAmount) //The opposite is impossible, however the check will not do any harm\r\n            money = balance - prizeAmount;\r\n\r\n        //We will do cycle on the queue\r\n        uint i=currentReceiverIndex;\r\n        for(; i<currentQueueSize; i++){\r\n\r\n            Deposit storage dep = queue[i]; //get the info of the first investor\r\n\r\n            if(money >= dep.expect){  //If we have enough money on the contract to fully pay to investor\r\n                dep.depositor.send(dep.expect); //Send money to him\r\n                money -= dep.expect;            //update money left\r\n\r\n                emit Refund(stage, dep.expect, dep.depositor);\r\n\r\n                //this investor is fully paid, so remove him\r\n                delete queue[i];\r\n            }else{\r\n                //Here we don't have enough money so partially pay to investor\r\n                dep.depositor.send(money); //Send to him everything we have\r\n                dep.expect -= uint128(money);       //Update the expected amount\r\n\r\n                emit Refund(stage, money, dep.depositor);\r\n                break;                     //Exit cycle\r\n            }\r\n\r\n            if(gasleft() <= 50000)         //Check the gas left. If it is low, exit the cycle\r\n                break;                     //The next investor will process the line further\r\n        }\r\n\r\n        currentReceiverIndex = i; //Update the index of the current first investor\r\n    }\r\n\r\n    function addDeposit(address payable depositor, uint value) private {\r\n        //Count the number of the deposit at this stage\r\n        DepositCount storage c = depositsMade[depositor];\r\n        if(c.stage != stage){\r\n            c.stage = int128(stage);\r\n            c.count = 0;\r\n        }\r\n\r\n        //If you are applying for the prize you should invest more than minimal amount\r\n        //Otherwize it doesn't count\r\n        if(value >= getCurrentPrizeMinimalDeposit())\r\n            lastDepositInfo = LastDepositInfo(uint128(currentQueueSize), uint128(now));\r\n\r\n        //Compute the multiplier percent for this depositor\r\n        uint multiplier = getDepositorMultiplier(depositor);\r\n        //Add the investor into the queue. Mark that he expects to receive 111%-141% of deposit back\r\n        push(depositor, value, value*multiplier/100);\r\n\r\n        //Increment number of deposits the depositors made this round\r\n        c.count++;\r\n\r\n        //Save money for prize and father multiplier\r\n        prizeAmount += value*(PRIZE_PERCENT)/100;\r\n\r\n        //Send small part to tech support\r\n        uint support = value*TECH_PERCENT/100;\r\n        tech.send(support);\r\n        uint adv = value*PROMO_PERCENT/100;\r\n        promo.send(adv);\r\n\r\n        emit Dep(stage, msg.value, msg.sender);\r\n    }\r\n\r\n    function proceedToNewStage(int _stage) private {\r\n        //Clean queue info\r\n        //The prize amount on the balance is left the same if not withdrawn\r\n        stage = _stage;\r\n        startTime = 0;\r\n        currentQueueSize = 0; //Instead of deleting queue just reset its length (gas economy)\r\n        currentReceiverIndex = 0;\r\n        delete lastDepositInfo;\r\n    }\r\n\r\n    function withdrawPrize() private {\r\n        //You can withdraw prize only if the last deposit was more than MAX_IDLE_TIME ago\r\n        require(lastDepositInfo.time > 0 && lastDepositInfo.time <= now - MAX_IDLE_TIME, \"The last depositor is not confirmed yet\");\r\n        //Last depositor will receive prize only if it has not been fully paid\r\n        require(currentReceiverIndex <= lastDepositInfo.index, \"The last depositor should still be in queue\");\r\n\r\n        uint balance = address(this).balance;\r\n        uint prize = prizeAmount;\r\n        if(balance > prize){\r\n            //We should distribute funds to queue\r\n            pay();\r\n        }\r\n        if(balance > prize){\r\n            return; //Funds are still not distributed, so exit\r\n        }\r\n        if(prize > balance) //Impossible but better check it\r\n            prize = balance;\r\n\r\n        queue[lastDepositInfo.index].depositor.send(prize);\r\n\r\n        emit Prize(stage, prize, queue[lastDepositInfo.index].depositor);\r\n\r\n        prizeAmount = 0;\r\n        proceedToNewStage(stage + 1);\r\n    }\r\n\r\n    //Pushes investor to the queue\r\n    function push(address payable depositor, uint dep, uint expect) private {\r\n        //Add the investor into the queue\r\n        Deposit memory d = Deposit(depositor, uint128(dep), uint128(expect));\r\n        assert(currentQueueSize <= queue.length); //Assert queue size is not corrupted\r\n        if(queue.length == currentQueueSize)\r\n            queue.push(d);\r\n        else\r\n            queue[currentQueueSize] = d;\r\n\r\n        currentQueueSize++;\r\n    }\r\n\r\n    //Get the deposit info by its index\r\n    //You can get deposit index from\r\n    function getDeposit(uint idx) public view returns (address depositor, uint dep, uint expect){\r\n        Deposit storage d = queue[idx];\r\n        return (d.depositor, d.deposit, d.expect);\r\n    }\r\n\r\n    function getCurrentPrizeMinimalDeposit() public view returns(uint) {\r\n        uint st = startTime;\r\n        if(st == 0 || now < st)\r\n            return MIN_INVESTMENT_FOR_PRIZE;\r\n        uint dep = MIN_INVESTMENT_FOR_PRIZE + ((now - st)/1 hours)*MIN_INVESTMENT_FOR_PRIZE;\r\n        if(dep > MAX_INVESTMENT)\r\n            dep = MAX_INVESTMENT;\r\n        return dep;\r\n    }\r\n\r\n    //Get the count of deposits of specific investor\r\n    function getDepositsCount(address depositor) public view returns (uint) {\r\n        uint c = 0;\r\n        for(uint i=currentReceiverIndex; i<currentQueueSize; ++i){\r\n            if(queue[i].depositor == depositor)\r\n                c++;\r\n        }\r\n        return c;\r\n    }\r\n\r\n    //Get all deposits (index, deposit, expect) of a specific investor\r\n    function getDeposits(address depositor) public view returns (uint16[] memory idxs, uint128[] memory deposits, uint128[] memory expects) {\r\n        uint c = getDepositsCount(depositor);\r\n\r\n        idxs = new uint16[](c);\r\n        deposits = new uint128[](c);\r\n        expects = new uint128[](c);\r\n\r\n        if(c > 0) {\r\n            uint j = 0;\r\n            for(uint i=currentReceiverIndex; i<currentQueueSize; ++i){\r\n                Deposit storage dep = queue[i];\r\n                if(dep.depositor == depositor){\r\n                    idxs[j] = uint16(i - currentReceiverIndex);\r\n                    deposits[j] = dep.deposit;\r\n                    expects[j] = dep.expect;\r\n                    j++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //Get current queue size\r\n    function getQueueLength() public view returns (uint) {\r\n        return currentQueueSize - currentReceiverIndex;\r\n    }\r\n\r\n    //Get current depositors multiplier percent at this stage\r\n    function getDepositorMultiplier(address depositor) public view returns (uint) {\r\n        DepositCount storage c = depositsMade[depositor];\r\n        uint count = 0;\r\n        if(c.stage == stage)\r\n            count = c.count;\r\n        if(count < MULTIPLIERS.length)\r\n            return MULTIPLIERS[count];\r\n\r\n        return MULTIPLIERS[MULTIPLIERS.length - 1];\r\n    }\r\n\r\n    modifier onlyAuthorityAndStopped() {\r\n        require(startTime == 0 || now < startTime, \"You can set time only in stopped state\");\r\n        require(msg.sender == tech || msg.sender == promo, \"You are not authorized\");\r\n        _;\r\n    }\r\n\r\n    function setStartTimeAndMaxGasPrice(uint time, uint _gasprice) public onlyAuthorityAndStopped {\r\n        require(time == 0 || time >= now, \"Wrong start time\");\r\n        startTime = time;\r\n        if(_gasprice > 0)\r\n            maxGasPrice = _gasprice;\r\n    }\r\n\r\n    function setParameters(uint min, uint max, uint prize, uint idle) public onlyAuthorityAndStopped {\r\n        if(min > 0)\r\n            MIN_INVESTMENT = min;\r\n        if(max > 0)\r\n            MAX_INVESTMENT = max;\r\n        if(prize > 0)\r\n            MIN_INVESTMENT_FOR_PRIZE = prize;\r\n        if(idle > 0)\r\n            MAX_IDLE_TIME = idle;\r\n    }\r\n\r\n    function getCurrentCandidateForPrize() public view returns (address addr, uint prize, uint timeMade, int timeLeft){\r\n        //prevent exception, just return 0 for absent candidate\r\n        if(currentReceiverIndex <= lastDepositInfo.index && lastDepositInfo.index < currentQueueSize){\r\n            Deposit storage d = queue[lastDepositInfo.index];\r\n            addr = d.depositor;\r\n            prize = prizeAmount;\r\n            timeMade = lastDepositInfo.time;\r\n            timeLeft = int(timeMade + MAX_IDLE_TIME) - int(now);\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentPrizeMinimalDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentQueueSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentReceiverIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"getDepositorMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxGasPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_INVESTMENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_INVESTMENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prizeAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"_gasprice\",\"type\":\"uint256\"}],\"name\":\"setStartTimeAndMaxGasPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRIZE_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"getDeposits\",\"outputs\":[{\"name\":\"idxs\",\"type\":\"uint16[]\"},{\"name\":\"deposits\",\"type\":\"uint128[]\"},{\"name\":\"expects\",\"type\":\"uint128[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_INVESTMENT_FOR_PRIZE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"getDeposit\",\"outputs\":[{\"name\":\"depositor\",\"type\":\"address\"},{\"name\":\"dep\",\"type\":\"uint256\"},{\"name\":\"expect\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TECH_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositsMade\",\"outputs\":[{\"name\":\"stage\",\"type\":\"int128\"},{\"name\":\"count\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getQueueLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROMO_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"getDepositsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_IDLE_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastDepositInfo\",\"outputs\":[{\"name\":\"index\",\"type\":\"uint128\"},{\"name\":\"time\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentCandidateForPrize\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"prize\",\"type\":\"uint256\"},{\"name\":\"timeMade\",\"type\":\"uint256\"},{\"name\":\"timeLeft\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"min\",\"type\":\"uint256\"},{\"name\":\"max\",\"type\":\"uint256\"},{\"name\":\"prize\",\"type\":\"uint256\"},{\"name\":\"idle\",\"type\":\"uint256\"}],\"name\":\"setParameters\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tech\",\"type\":\"address\"},{\"name\":\"_promo\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"stage\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"sum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"Dep\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"stage\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"sum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"stage\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"sum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"Prize\",\"type\":\"event\"}]","ContractName":"Multipliers","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000db058d036768cfa9a94963f99161e3c94ad6f5da0000000000000000000000005858afd046ba60924d9706da3cbb4cdb7c2c1f60","Library":"","SwarmSource":"bzzr://dbefff89f5953ec5250e07b1a12d1b16b6b9b37366704a3c684b1d517386a668"}]}