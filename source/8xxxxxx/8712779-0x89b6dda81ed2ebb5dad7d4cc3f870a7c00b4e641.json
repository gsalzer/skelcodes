{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.12;\r\n\r\ncontract Log {\r\n  struct Message {\r\n    address Sender;\r\n    string Data;\r\n    uint Time;\r\n  }\r\n\r\n  Message[] public History;\r\n\r\n  Message LastMsg;\r\n\r\n  function addMessage(string memory _data) public {\r\n    LastMsg.Sender = msg.sender;\r\n    LastMsg.Time = now;\r\n    LastMsg.Data = _data;\r\n    History.push(LastMsg);\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    if (msg.sender != owner){\r\n      revert();\r\n    }\r\n    _;\r\n  }\r\n\r\n  modifier protected() {\r\n      if(msg.sender != address(this)){\r\n        revert();\r\n      }\r\n      _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    if (newOwner == address(0)) {\r\n      revert();\r\n    }\r\n    owner = newOwner;\r\n  }\r\n\r\n  function withdraw() public onlyOwner {\r\n    msg.sender.transfer(address(this).balance);\r\n  }\r\n}\r\n\r\ncontract CaptureTheFlag is Ownable {\r\n  address owner;\r\n  event WhereAmI(address, string);\r\n  Log TransferLog;\r\n  uint256 public jackpot = 0;\r\n  uint256 MinDeposit = 1 ether;\r\n  uint256 minInvestment = 1 ether;\r\n  uint public sumInvested;\r\n  uint public sumDividend;\r\n  bool inProgress = false;\r\n\r\n  mapping(address => uint256) public balances;\r\n  struct Osakako {\r\n    address me;\r\n  }\r\n  struct investor {\r\n    uint256 investment;\r\n    string username;\r\n  }\r\n  event Transfer(\r\n    uint amount,\r\n    bytes32 message,\r\n    address target,\r\n    address currentOwner\r\n  );\r\n\r\n  mapping(address => investor) public investors;\r\n\r\n  function CaptureTheFlag(address _log) public {\r\n    TransferLog = Log(_log);\r\n    owner = msg.sender;\r\n  }\r\n\r\n  // Payday!!\r\n  function() public payable {\r\n    if( msg.value >= jackpot ){\r\n      owner = msg.sender;\r\n    }\r\n    jackpot += msg.value; // add to our jackpot\r\n  }\r\n\r\n  modifier onlyUsers() {\r\n    require(users[msg.sender] != false);\r\n    _;\r\n  }\r\n\r\n  mapping(address => bool) users;\r\n\r\n  function registerAllPlayers(address[] players) public onlyOwner {\r\n    require(inProgress == false);\r\n\r\n    for (uint32 i = 0; i < players.length; i++) {\r\n      users[players[i]] = true;\r\n    }\r\n    inProgress = true;\r\n  }\r\n\r\n  function takeAll() external onlyOwner {\r\n    msg.sender.transfer(this.balance); // payout\r\n    jackpot = 0; // reset the jackpot\r\n  }\r\n  // Payday!!\r\n\r\n  // Bank\r\n  function Deposit() public payable {\r\n    if ( msg.value >= MinDeposit ){\r\n      balances[msg.sender] += msg.value;\r\n      TransferLog.addMessage(\" Deposit \");\r\n    }\r\n  }\r\n\r\n  function CashOut(uint amount) public onlyUsers {\r\n    if( amount <= balances[msg.sender] ){\r\n      if(msg.sender.call.value(amount)()){\r\n        balances[msg.sender] -= amount;\r\n        TransferLog.addMessage(\" CashOut \");\r\n      }\r\n    }\r\n  }\r\n  // Bank\r\n\r\n  //--- Hmmm\r\n  function invest() public payable {\r\n    if ( msg.value >= minInvestment ){\r\n      investors[msg.sender].investment += msg.value;\r\n    }\r\n  }\r\n\r\n  function divest(uint amount) public onlyUsers {\r\n    if ( investors[msg.sender].investment == 0 || amount == 0) {\r\n      revert();\r\n    }\r\n    // no need to test, this will throw if amount > investment\r\n    investors[msg.sender].investment -= amount;\r\n    sumInvested -= amount;\r\n    this.loggedTransfer(amount, \"\", msg.sender, owner);\r\n  }\r\n\r\n  function loggedTransfer(uint amount, bytes32 message, address target, address currentOwner) public protected onlyUsers {\r\n    if(!target.call.value(amount)()){\r\n      revert();\r\n    }\r\n\r\n    Transfer(amount, message, target, currentOwner);\r\n  }\r\n  //--- Empty String Literal\r\n\r\n  function osaka(string message) public onlyUsers {\r\n    Osakako osakako;\r\n    osakako.me = msg.sender;\r\n    WhereAmI(osakako.me, message);\r\n  }\r\n\r\n  function tryMeLast() public payable onlyUsers {\r\n    if ( msg.value >= 0.1 ether ) {\r\n      uint256 multi = 0;\r\n      uint256 amountToTransfer = 0;\r\n      for (var i = 0; i < 2 * msg.value; i++) {\r\n        multi = i * 2;\r\n        if (multi < amountToTransfer) {\r\n          break;\r\n        }\r\n        amountToTransfer = multi;\r\n      }\r\n      msg.sender.transfer(amountToTransfer);\r\n    }\r\n  }\r\n\r\n  function easyMode( address addr ) external payable onlyUsers {\r\n    if ( msg.value >= this.balance ){\r\n      addr.transfer(this.balance + msg.value);\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"easyMode\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sumDividend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"players\",\"type\":\"address[]\"}],\"name\":\"registerAllPlayers\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"message\",\"type\":\"bytes32\"},{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"currentOwner\",\"type\":\"address\"}],\"name\":\"loggedTransfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"investment\",\"type\":\"uint256\"},{\"name\":\"username\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"tryMeLast\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"message\",\"type\":\"string\"}],\"name\":\"osaka\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"divest\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CashOut\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sumInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"takeAll\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Deposit\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_log\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"string\"}],\"name\":\"WhereAmI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"message\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"currentOwner\",\"type\":\"address\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"CaptureTheFlag","CompilerVersion":"v0.4.12+commit.194ff033","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c7762a3bed2afd8f823694b5c5ec3f17e98e66f8","Library":"","LicenseType":"Unlicense","SwarmSource":"bzzr://9b8db614363f971c49440d4d498b8c0b653688f10fdeacb9a9d722b11172bc63"}]}