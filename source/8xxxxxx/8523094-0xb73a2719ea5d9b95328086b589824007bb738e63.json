{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/*\r\n\r\nORACLIZE_API\r\n\r\nCopyright (c) 2015-2016 Oraclize SRL\r\nCopyright (c) 2016 Oraclize LTD\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n\r\n*/\r\n // Incompatible compiler version - please select a compiler within the stated pragma range, or use a different version of the oraclizeAPI!\r\n\r\n// Dummy contract only used to emit to end-user they are using wrong solc\r\ncontract solcChecker {\r\n/* INCOMPATIBLE SOLC: import the following instead: \"github.com/oraclize/ethereum-api/oraclizeAPI_0.4.sol\" */ function f(bytes calldata x) external;\r\n}\r\n\r\ncontract OraclizeI {\r\n\r\n    address public cbAddress;\r\n\r\n    function setProofType(byte _proofType) external;\r\n    function setCustomGasPrice(uint _gasPrice) external;\r\n    function getPrice(string memory _datasource) public view returns (uint _dsprice);\r\n    function randomDS_getSessionPubKeyHash() external view returns (bytes32 _sessionKeyHash);\r\n    function getPrice(string memory _datasource, uint _gasLimit) public view returns (uint _dsprice);\r\n    function queryN(uint _timestamp, string memory _datasource, bytes memory _argN) public payable returns (bytes32 _id);\r\n    function query(uint _timestamp, string calldata _datasource, string calldata _arg) external payable returns (bytes32 _id);\r\n    function query2(uint _timestamp, string memory _datasource, string memory _arg1, string memory _arg2) public payable returns (bytes32 _id);\r\n    function query_withGasLimit(uint _timestamp, string calldata _datasource, string calldata _arg, uint _gasLimit) external payable returns (bytes32 _id);\r\n    function queryN_withGasLimit(uint _timestamp, string calldata _datasource, bytes calldata _argN, uint _gasLimit) external payable returns (bytes32 _id);\r\n    function query2_withGasLimit(uint _timestamp, string calldata _datasource, string calldata _arg1, string calldata _arg2, uint _gasLimit) external payable returns (bytes32 _id);\r\n}\r\n\r\ncontract OraclizeAddrResolverI {\r\n    function getAddress() public returns (address _address);\r\n}\r\n/*\r\n\r\nBegin solidity-cborutils\r\n\r\nhttps://github.com/smartcontractkit/solidity-cborutils\r\n\r\nMIT License\r\n\r\nCopyright (c) 2018 SmartContract ChainLink, Ltd.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n\r\n*/\r\nlibrary Buffer {\r\n\r\n    struct buffer {\r\n        bytes buf;\r\n        uint capacity;\r\n    }\r\n\r\n    function init(buffer memory _buf, uint _capacity) internal pure {\r\n        uint capacity = _capacity;\r\n        if (capacity % 32 != 0) {\r\n            capacity += 32 - (capacity % 32);\r\n        }\r\n        _buf.capacity = capacity; // Allocate space for the buffer data\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(_buf, ptr)\r\n            mstore(ptr, 0)\r\n            mstore(0x40, add(ptr, capacity))\r\n        }\r\n    }\r\n\r\n    function resize(buffer memory _buf, uint _capacity) private pure {\r\n        bytes memory oldbuf = _buf.buf;\r\n        init(_buf, _capacity);\r\n        append(_buf, oldbuf);\r\n    }\r\n\r\n    function max(uint _a, uint _b) private pure returns (uint _max) {\r\n        if (_a > _b) {\r\n            return _a;\r\n        }\r\n        return _b;\r\n    }\r\n    /**\r\n      * @dev Appends a byte array to the end of the buffer. Resizes if doing so\r\n      *      would exceed the capacity of the buffer.\r\n      * @param _buf The buffer to append to.\r\n      * @param _data The data to append.\r\n      * @return The original buffer.\r\n      *\r\n      */\r\n    function append(buffer memory _buf, bytes memory _data) internal pure returns (buffer memory _buffer) {\r\n        if (_data.length + _buf.buf.length > _buf.capacity) {\r\n            resize(_buf, max(_buf.capacity, _data.length) * 2);\r\n        }\r\n        uint dest;\r\n        uint src;\r\n        uint len = _data.length;\r\n        assembly {\r\n            let bufptr := mload(_buf) // Memory address of the buffer data\r\n            let buflen := mload(bufptr) // Length of existing buffer data\r\n            dest := add(add(bufptr, buflen), 32) // Start address = buffer address + buffer length + sizeof(buffer length)\r\n            mstore(bufptr, add(buflen, mload(_data))) // Update buffer length\r\n            src := add(_data, 32)\r\n        }\r\n        for(; len >= 32; len -= 32) { // Copy word-length chunks while possible\r\n            assembly {\r\n                mstore(dest, mload(src))\r\n            }\r\n            dest += 32;\r\n            src += 32;\r\n        }\r\n        uint mask = 256 ** (32 - len) - 1; // Copy remaining bytes\r\n        assembly {\r\n            let srcpart := and(mload(src), not(mask))\r\n            let destpart := and(mload(dest), mask)\r\n            mstore(dest, or(destpart, srcpart))\r\n        }\r\n        return _buf;\r\n    }\r\n    /**\r\n      *\r\n      * @dev Appends a byte to the end of the buffer. Resizes if doing so would\r\n      * exceed the capacity of the buffer.\r\n      * @param _buf The buffer to append to.\r\n      * @param _data The data to append.\r\n      * @return The original buffer.\r\n      *\r\n      */\r\n    function append(buffer memory _buf, uint8 _data) internal pure {\r\n        if (_buf.buf.length + 1 > _buf.capacity) {\r\n            resize(_buf, _buf.capacity * 2);\r\n        }\r\n        assembly {\r\n            let bufptr := mload(_buf) // Memory address of the buffer data\r\n            let buflen := mload(bufptr) // Length of existing buffer data\r\n            let dest := add(add(bufptr, buflen), 32) // Address = buffer address + buffer length + sizeof(buffer length)\r\n            mstore8(dest, _data)\r\n            mstore(bufptr, add(buflen, 1)) // Update buffer length\r\n        }\r\n    }\r\n    /**\r\n      *\r\n      * @dev Appends a byte to the end of the buffer. Resizes if doing so would\r\n      * exceed the capacity of the buffer.\r\n      * @param _buf The buffer to append to.\r\n      * @param _data The data to append.\r\n      * @return The original buffer.\r\n      *\r\n      */\r\n    function appendInt(buffer memory _buf, uint _data, uint _len) internal pure returns (buffer memory _buffer) {\r\n        if (_len + _buf.buf.length > _buf.capacity) {\r\n            resize(_buf, max(_buf.capacity, _len) * 2);\r\n        }\r\n        uint mask = 256 ** _len - 1;\r\n        assembly {\r\n            let bufptr := mload(_buf) // Memory address of the buffer data\r\n            let buflen := mload(bufptr) // Length of existing buffer data\r\n            let dest := add(add(bufptr, buflen), _len) // Address = buffer address + buffer length + sizeof(buffer length) + len\r\n            mstore(dest, or(and(mload(dest), not(mask)), _data))\r\n            mstore(bufptr, add(buflen, _len)) // Update buffer length\r\n        }\r\n        return _buf;\r\n    }\r\n}\r\n\r\nlibrary CBOR {\r\n\r\n    using Buffer for Buffer.buffer;\r\n\r\n    uint8 private constant MAJOR_TYPE_INT = 0;\r\n    uint8 private constant MAJOR_TYPE_MAP = 5;\r\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\r\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\r\n    uint8 private constant MAJOR_TYPE_STRING = 3;\r\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\r\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\r\n\r\n    function encodeType(Buffer.buffer memory _buf, uint8 _major, uint _value) private pure {\r\n        if (_value <= 23) {\r\n            _buf.append(uint8((_major << 5) | _value));\r\n        } else if (_value <= 0xFF) {\r\n            _buf.append(uint8((_major << 5) | 24));\r\n            _buf.appendInt(_value, 1);\r\n        } else if (_value <= 0xFFFF) {\r\n            _buf.append(uint8((_major << 5) | 25));\r\n            _buf.appendInt(_value, 2);\r\n        } else if (_value <= 0xFFFFFFFF) {\r\n            _buf.append(uint8((_major << 5) | 26));\r\n            _buf.appendInt(_value, 4);\r\n        } else if (_value <= 0xFFFFFFFFFFFFFFFF) {\r\n            _buf.append(uint8((_major << 5) | 27));\r\n            _buf.appendInt(_value, 8);\r\n        }\r\n    }\r\n\r\n    function encodeIndefiniteLengthType(Buffer.buffer memory _buf, uint8 _major) private pure {\r\n        _buf.append(uint8((_major << 5) | 31));\r\n    }\r\n\r\n    function encodeUInt(Buffer.buffer memory _buf, uint _value) internal pure {\r\n        encodeType(_buf, MAJOR_TYPE_INT, _value);\r\n    }\r\n\r\n    function encodeInt(Buffer.buffer memory _buf, int _value) internal pure {\r\n        if (_value >= 0) {\r\n            encodeType(_buf, MAJOR_TYPE_INT, uint(_value));\r\n        } else {\r\n            encodeType(_buf, MAJOR_TYPE_NEGATIVE_INT, uint(-1 - _value));\r\n        }\r\n    }\r\n\r\n    function encodeBytes(Buffer.buffer memory _buf, bytes memory _value) internal pure {\r\n        encodeType(_buf, MAJOR_TYPE_BYTES, _value.length);\r\n        _buf.append(_value);\r\n    }\r\n\r\n    function encodeString(Buffer.buffer memory _buf, string memory _value) internal pure {\r\n        encodeType(_buf, MAJOR_TYPE_STRING, bytes(_value).length);\r\n        _buf.append(bytes(_value));\r\n    }\r\n\r\n    function startArray(Buffer.buffer memory _buf) internal pure {\r\n        encodeIndefiniteLengthType(_buf, MAJOR_TYPE_ARRAY);\r\n    }\r\n\r\n    function startMap(Buffer.buffer memory _buf) internal pure {\r\n        encodeIndefiniteLengthType(_buf, MAJOR_TYPE_MAP);\r\n    }\r\n\r\n    function endSequence(Buffer.buffer memory _buf) internal pure {\r\n        encodeIndefiniteLengthType(_buf, MAJOR_TYPE_CONTENT_FREE);\r\n    }\r\n}\r\n/*\r\n\r\nEnd solidity-cborutils\r\n\r\n*/\r\ncontract usingOraclize {\r\n\r\n    using CBOR for Buffer.buffer;\r\n\r\n    OraclizeI oraclize;\r\n    OraclizeAddrResolverI OAR;\r\n\r\n    uint constant day = 60 * 60 * 24;\r\n    uint constant week = 60 * 60 * 24 * 7;\r\n    uint constant month = 60 * 60 * 24 * 30;\r\n\r\n    byte constant proofType_NONE = 0x00;\r\n    byte constant proofType_Ledger = 0x30;\r\n    byte constant proofType_Native = 0xF0;\r\n    byte constant proofStorage_IPFS = 0x01;\r\n    byte constant proofType_Android = 0x40;\r\n    byte constant proofType_TLSNotary = 0x10;\r\n\r\n    string oraclize_network_name;\r\n    uint8 constant networkID_auto = 0;\r\n    uint8 constant networkID_morden = 2;\r\n    uint8 constant networkID_mainnet = 1;\r\n    uint8 constant networkID_testnet = 2;\r\n    uint8 constant networkID_consensys = 161;\r\n\r\n    mapping(bytes32 => bytes32) oraclize_randomDS_args;\r\n    mapping(bytes32 => bool) oraclize_randomDS_sessionKeysHashVerified;\r\n\r\n    modifier oraclizeAPI {\r\n        if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {\r\n            oraclize_setNetwork(networkID_auto);\r\n        }\r\n        if (address(oraclize) != OAR.getAddress()) {\r\n            oraclize = OraclizeI(OAR.getAddress());\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier oraclize_randomDS_proofVerify(bytes32 _queryId, string memory _result, bytes memory _proof) {\r\n        // RandomDS Proof Step 1: The prefix has to match 'LP\\x01' (Ledger Proof version 1)\r\n        require((_proof[0] == \"L\") && (_proof[1] == \"P\") && (uint8(_proof[2]) == uint8(1)));\r\n        bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());\r\n        require(proofVerified);\r\n        _;\r\n    }\r\n\r\n    function oraclize_setNetwork(uint8 _networkID) internal returns (bool _networkSet) {\r\n      return oraclize_setNetwork();\r\n      _networkID; // silence the warning and remain backwards compatible\r\n    }\r\n\r\n    function oraclize_setNetworkName(string memory _network_name) internal {\r\n        oraclize_network_name = _network_name;\r\n    }\r\n\r\n    function oraclize_getNetworkName() internal view returns (string memory _networkName) {\r\n        return oraclize_network_name;\r\n    }\r\n\r\n    function oraclize_setNetwork() internal returns (bool _networkSet) {\r\n        if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) > 0) { //mainnet\r\n            OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed);\r\n            oraclize_setNetworkName(\"eth_mainnet\");\r\n            return true;\r\n        }\r\n        if (getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e) > 0) { //kovan testnet\r\n            OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e);\r\n            oraclize_setNetworkName(\"eth_kovan\");\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function __callback(bytes32 _myid, string memory _result) public {\r\n        __callback(_myid, _result, new bytes(0));\r\n    }\r\n\r\n    function __callback(bytes32 _myid, string memory _result, bytes memory _proof) public {\r\n      return;\r\n      _myid; _result; _proof; // Silence compiler warnings\r\n    }\r\n\r\n    function oraclize_getPrice(string memory _datasource, uint _gasLimit) oraclizeAPI internal returns (uint _queryPrice) {\r\n        return oraclize.getPrice(_datasource, _gasLimit);\r\n    }\r\n\r\n    function oraclize_query(uint _timestamp, string memory _datasource, string memory _arg, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\r\n        uint price = oraclize.getPrice(_datasource,_gasLimit);\r\n        if (price > 1 ether + tx.gasprice * _gasLimit) {\r\n            return 0; // Unexpectedly high price\r\n        }\r\n        return oraclize.query_withGasLimit.value(price)(_timestamp, _datasource, _arg, _gasLimit);\r\n    }\r\n\r\n    function oraclize_query(string memory _datasource, bytes[] memory _argN, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\r\n        uint price = oraclize.getPrice(_datasource, _gasLimit);\r\n        if (price > 1 ether + tx.gasprice * _gasLimit) {\r\n            return 0; // Unexpectedly high price\r\n        }\r\n        bytes memory args = ba2cbor(_argN);\r\n        return oraclize.queryN_withGasLimit.value(price)(0, _datasource, args, _gasLimit);\r\n    }\r\n\r\n\r\n    function oraclize_query(string memory _datasource, bytes[4] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\r\n        bytes[] memory dynargs = new bytes[](4);\r\n        dynargs[0] = _args[0];\r\n        dynargs[1] = _args[1];\r\n        dynargs[2] = _args[2];\r\n        dynargs[3] = _args[3];\r\n        return oraclize_query(_datasource, dynargs, _gasLimit);\r\n    }\r\n\r\n    function oraclize_cbAddress() oraclizeAPI internal returns (address _callbackAddress) {\r\n        return oraclize.cbAddress();\r\n    }\r\n\r\n    function getCodeSize(address _addr) view internal returns (uint _size) {\r\n        assembly {\r\n            _size := extcodesize(_addr)\r\n        }\r\n    }\r\n\r\n    function oraclize_setCustomGasPrice(uint _gasPrice) oraclizeAPI internal {\r\n        return oraclize.setCustomGasPrice(_gasPrice);\r\n    }\r\n\r\n    function oraclize_randomDS_getSessionPubKeyHash() oraclizeAPI internal returns (bytes32 _sessionKeyHash) {\r\n        return oraclize.randomDS_getSessionPubKeyHash();\r\n    }\r\n\r\n    function ba2cbor(bytes[] memory _arr) internal pure returns (bytes memory _cborEncoding) {\r\n        safeMemoryCleaner();\r\n        Buffer.buffer memory buf;\r\n        Buffer.init(buf, 1024);\r\n        buf.startArray();\r\n        for (uint i = 0; i < _arr.length; i++) {\r\n            buf.encodeBytes(_arr[i]);\r\n        }\r\n        buf.endSequence();\r\n        return buf.buf;\r\n    }\r\n\r\n    function oraclize_newRandomDSQuery(uint _delay, uint _nbytes, uint _customGasLimit) internal returns (bytes32 _queryId) {\r\n        require((_nbytes > 0) && (_nbytes <= 32));\r\n        _delay *= 10; // Convert from seconds to ledger timer ticks\r\n        bytes memory nbytes = new bytes(1);\r\n        nbytes[0] = byte(uint8(_nbytes));\r\n        bytes memory unonce = new bytes(32);\r\n        bytes memory sessionKeyHash = new bytes(32);\r\n        bytes32 sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash();\r\n        assembly {\r\n            mstore(unonce, 0x20)\r\n            /*\r\n             The following variables can be relaxed.\r\n             Check the relaxed random contract at https://github.com/oraclize/ethereum-examples\r\n             for an idea on how to override and replace commit hash variables.\r\n            */\r\n            mstore(add(unonce, 0x20), xor(blockhash(sub(number, 1)), xor(coinbase, timestamp)))\r\n            mstore(sessionKeyHash, 0x20)\r\n            mstore(add(sessionKeyHash, 0x20), sessionKeyHash_bytes32)\r\n        }\r\n        bytes memory delay = new bytes(32);\r\n        assembly {\r\n            mstore(add(delay, 0x20), _delay)\r\n        }\r\n        bytes memory delay_bytes8 = new bytes(8);\r\n        copyBytes(delay, 24, 8, delay_bytes8, 0);\r\n        bytes[4] memory args = [unonce, nbytes, sessionKeyHash, delay];\r\n        bytes32 queryId = oraclize_query(\"random\", args, _customGasLimit);\r\n        bytes memory delay_bytes8_left = new bytes(8);\r\n        assembly {\r\n            let x := mload(add(delay_bytes8, 0x20))\r\n            mstore8(add(delay_bytes8_left, 0x27), div(x, 0x100000000000000000000000000000000000000000000000000000000000000))\r\n            mstore8(add(delay_bytes8_left, 0x26), div(x, 0x1000000000000000000000000000000000000000000000000000000000000))\r\n            mstore8(add(delay_bytes8_left, 0x25), div(x, 0x10000000000000000000000000000000000000000000000000000000000))\r\n            mstore8(add(delay_bytes8_left, 0x24), div(x, 0x100000000000000000000000000000000000000000000000000000000))\r\n            mstore8(add(delay_bytes8_left, 0x23), div(x, 0x1000000000000000000000000000000000000000000000000000000))\r\n            mstore8(add(delay_bytes8_left, 0x22), div(x, 0x10000000000000000000000000000000000000000000000000000))\r\n            mstore8(add(delay_bytes8_left, 0x21), div(x, 0x100000000000000000000000000000000000000000000000000))\r\n            mstore8(add(delay_bytes8_left, 0x20), div(x, 0x1000000000000000000000000000000000000000000000000))\r\n        }\r\n        oraclize_randomDS_setCommitment(queryId, keccak256(abi.encodePacked(delay_bytes8_left, args[1], sha256(args[0]), args[2])));\r\n        return queryId;\r\n    }\r\n\r\n    function oraclize_randomDS_setCommitment(bytes32 _queryId, bytes32 _commitment) internal {\r\n        oraclize_randomDS_args[_queryId] = _commitment;\r\n    }\r\n\r\n    function verifySig(bytes32 _tosignh, bytes memory _dersig, bytes memory _pubkey) internal returns (bool _sigVerified) {\r\n        bool sigok;\r\n        address signer;\r\n        bytes32 sigr;\r\n        bytes32 sigs;\r\n        bytes memory sigr_ = new bytes(32);\r\n        uint offset = 4 + (uint(uint8(_dersig[3])) - 0x20);\r\n        sigr_ = copyBytes(_dersig, offset, 32, sigr_, 0);\r\n        bytes memory sigs_ = new bytes(32);\r\n        offset += 32 + 2;\r\n        sigs_ = copyBytes(_dersig, offset + (uint(uint8(_dersig[offset - 1])) - 0x20), 32, sigs_, 0);\r\n        assembly {\r\n            sigr := mload(add(sigr_, 32))\r\n            sigs := mload(add(sigs_, 32))\r\n        }\r\n        (sigok, signer) = safer_ecrecover(_tosignh, 27, sigr, sigs);\r\n        if (address(uint160(uint256(keccak256(_pubkey)))) == signer) {\r\n            return true;\r\n        } else {\r\n            (sigok, signer) = safer_ecrecover(_tosignh, 28, sigr, sigs);\r\n            return (address(uint160(uint256(keccak256(_pubkey)))) == signer);\r\n        }\r\n    }\r\n\r\n    function oraclize_randomDS_proofVerify__sessionKeyValidity(bytes memory _proof, uint _sig2offset) internal returns (bool _proofVerified) {\r\n        bool sigok;\r\n        // Random DS Proof Step 6: Verify the attestation signature, APPKEY1 must sign the sessionKey from the correct ledger app (CODEHASH)\r\n        bytes memory sig2 = new bytes(uint(uint8(_proof[_sig2offset + 1])) + 2);\r\n        copyBytes(_proof, _sig2offset, sig2.length, sig2, 0);\r\n        bytes memory appkey1_pubkey = new bytes(64);\r\n        copyBytes(_proof, 3 + 1, 64, appkey1_pubkey, 0);\r\n        bytes memory tosign2 = new bytes(1 + 65 + 32);\r\n        tosign2[0] = byte(uint8(1)); //role\r\n        copyBytes(_proof, _sig2offset - 65, 65, tosign2, 1);\r\n        bytes memory CODEHASH = hex\"fd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c\";\r\n        copyBytes(CODEHASH, 0, 32, tosign2, 1 + 65);\r\n        sigok = verifySig(sha256(tosign2), sig2, appkey1_pubkey);\r\n        if (!sigok) {\r\n            return false;\r\n        }\r\n        // Random DS Proof Step 7: Verify the APPKEY1 provenance (must be signed by Ledger)\r\n        bytes memory LEDGERKEY = hex\"7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4\";\r\n        bytes memory tosign3 = new bytes(1 + 65);\r\n        tosign3[0] = 0xFE;\r\n        copyBytes(_proof, 3, 65, tosign3, 1);\r\n        bytes memory sig3 = new bytes(uint(uint8(_proof[3 + 65 + 1])) + 2);\r\n        copyBytes(_proof, 3 + 65, sig3.length, sig3, 0);\r\n        sigok = verifySig(sha256(tosign3), sig3, LEDGERKEY);\r\n        return sigok;\r\n    }\r\n\r\n    function oraclize_randomDS_proofVerify__returnCode(bytes32 _queryId, string memory _result, bytes memory _proof) internal returns (uint8 _returnCode) {\r\n        // Random DS Proof Step 1: The prefix has to match 'LP\\x01' (Ledger Proof version 1)\r\n        if ((_proof[0] != \"L\") || (_proof[1] != \"P\") || (uint8(_proof[2]) != uint8(1))) {\r\n            return 1;\r\n        }\r\n        bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());\r\n        if (!proofVerified) {\r\n            return 2;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function matchBytes32Prefix(bytes32 _content, bytes memory _prefix, uint _nRandomBytes) internal pure returns (bool _matchesPrefix) {\r\n        bool match_ = true;\r\n        require(_prefix.length == _nRandomBytes);\r\n        for (uint256 i = 0; i< _nRandomBytes; i++) {\r\n            if (_content[i] != _prefix[i]) {\r\n                match_ = false;\r\n            }\r\n        }\r\n        return match_;\r\n    }\r\n\r\n    function oraclize_randomDS_proofVerify__main(bytes memory _proof, bytes32 _queryId, bytes memory _result, string memory _contextName) internal returns (bool _proofVerified) {\r\n        // Random DS Proof Step 2: The unique keyhash has to match with the sha256 of (context name + _queryId)\r\n        uint ledgerProofLength = 3 + 65 + (uint(uint8(_proof[3 + 65 + 1])) + 2) + 32;\r\n        bytes memory keyhash = new bytes(32);\r\n        copyBytes(_proof, ledgerProofLength, 32, keyhash, 0);\r\n        if (!(keccak256(keyhash) == keccak256(abi.encodePacked(sha256(abi.encodePacked(_contextName, _queryId)))))) {\r\n            return false;\r\n        }\r\n        bytes memory sig1 = new bytes(uint(uint8(_proof[ledgerProofLength + (32 + 8 + 1 + 32) + 1])) + 2);\r\n        copyBytes(_proof, ledgerProofLength + (32 + 8 + 1 + 32), sig1.length, sig1, 0);\r\n        // Random DS Proof Step 3: We assume sig1 is valid (it will be verified during step 5) and we verify if '_result' is the _prefix of sha256(sig1)\r\n        if (!matchBytes32Prefix(sha256(sig1), _result, uint(uint8(_proof[ledgerProofLength + 32 + 8])))) {\r\n            return false;\r\n        }\r\n        // Random DS Proof Step 4: Commitment match verification, keccak256(delay, nbytes, unonce, sessionKeyHash) == commitment in storage.\r\n        // This is to verify that the computed args match with the ones specified in the query.\r\n        bytes memory commitmentSlice1 = new bytes(8 + 1 + 32);\r\n        copyBytes(_proof, ledgerProofLength + 32, 8 + 1 + 32, commitmentSlice1, 0);\r\n        bytes memory sessionPubkey = new bytes(64);\r\n        uint sig2offset = ledgerProofLength + 32 + (8 + 1 + 32) + sig1.length + 65;\r\n        copyBytes(_proof, sig2offset - 64, 64, sessionPubkey, 0);\r\n        bytes32 sessionPubkeyHash = sha256(sessionPubkey);\r\n        if (oraclize_randomDS_args[_queryId] == keccak256(abi.encodePacked(commitmentSlice1, sessionPubkeyHash))) { //unonce, nbytes and sessionKeyHash match\r\n            delete oraclize_randomDS_args[_queryId];\r\n        } else return false;\r\n        // Random DS Proof Step 5: Validity verification for sig1 (keyhash and args signed with the sessionKey)\r\n        bytes memory tosign1 = new bytes(32 + 8 + 1 + 32);\r\n        copyBytes(_proof, ledgerProofLength, 32 + 8 + 1 + 32, tosign1, 0);\r\n        if (!verifySig(sha256(tosign1), sig1, sessionPubkey)) {\r\n            return false;\r\n        }\r\n        // Verify if sessionPubkeyHash was verified already, if not.. let's do it!\r\n        if (!oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]) {\r\n            oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] = oraclize_randomDS_proofVerify__sessionKeyValidity(_proof, sig2offset);\r\n        }\r\n        return oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash];\r\n    }\r\n    /*\r\n     The following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\r\n    */\r\n    function copyBytes(bytes memory _from, uint _fromOffset, uint _length, bytes memory _to, uint _toOffset) internal pure returns (bytes memory _copiedBytes) {\r\n        uint minLength = _length + _toOffset;\r\n        require(_to.length >= minLength); // Buffer too small. Should be a better way?\r\n        uint i = 32 + _fromOffset; // NOTE: the offset 32 is added to skip the `size` field of both bytes variables\r\n        uint j = 32 + _toOffset;\r\n        while (i < (32 + _fromOffset + _length)) {\r\n            assembly {\r\n                let tmp := mload(add(_from, i))\r\n                mstore(add(_to, j), tmp)\r\n            }\r\n            i += 32;\r\n            j += 32;\r\n        }\r\n        return _to;\r\n    }\r\n    /*\r\n     The following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\r\n     Duplicate Solidity's ecrecover, but catching the CALL return value\r\n    */\r\n    function safer_ecrecover(bytes32 _hash, uint8 _v, bytes32 _r, bytes32 _s) internal returns (bool _success, address _recoveredAddress) {\r\n        /*\r\n         We do our own memory management here. Solidity uses memory offset\r\n         0x40 to store the current end of memory. We write past it (as\r\n         writes are memory extensions), but don't update the offset so\r\n         Solidity will reuse it. The memory used here is only needed for\r\n         this context.\r\n         FIXME: inline assembly can't access return values\r\n        */\r\n        bool ret;\r\n        address addr;\r\n        assembly {\r\n            let size := mload(0x40)\r\n            mstore(size, _hash)\r\n            mstore(add(size, 32), _v)\r\n            mstore(add(size, 64), _r)\r\n            mstore(add(size, 96), _s)\r\n            ret := call(3000, 1, 0, size, 128, size, 32) // NOTE: we can reuse the request memory because we deal with the return code.\r\n            addr := mload(size)\r\n        }\r\n        return (ret, addr);\r\n    }\r\n    /*\r\n     The following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\r\n    */\r\n    function ecrecovery(bytes32 _hash, bytes memory _sig) internal returns (bool _success, address _recoveredAddress) {\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n        if (_sig.length != 65) {\r\n            return (false, address(0));\r\n        }\r\n        /*\r\n         The signature format is a compact form of:\r\n           {bytes32 r}{bytes32 s}{uint8 v}\r\n         Compact means, uint8 is not padded to 32 bytes.\r\n        */\r\n        assembly {\r\n            r := mload(add(_sig, 32))\r\n            s := mload(add(_sig, 64))\r\n            /*\r\n             Here we are loading the last 32 bytes. We exploit the fact that\r\n             'mload' will pad with zeroes if we overread.\r\n             There is no 'mload8' to do this, but that would be nicer.\r\n            */\r\n            v := byte(0, mload(add(_sig, 96)))\r\n            /*\r\n              Alternative solution:\r\n              'byte' is not working due to the Solidity parser, so lets\r\n              use the second best option, 'and'\r\n              v := and(mload(add(_sig, 65)), 255)\r\n            */\r\n        }\r\n        /*\r\n         albeit non-transactional signatures are not specified by the YP, one would expect it\r\n         to match the YP range of [27, 28]\r\n         geth uses [0, 1] and some clients have followed. This might change, see:\r\n         https://github.com/ethereum/go-ethereum/issues/2053\r\n        */\r\n        if (v < 27) {\r\n            v += 27;\r\n        }\r\n        if (v != 27 && v != 28) {\r\n            return (false, address(0));\r\n        }\r\n        return safer_ecrecover(_hash, v, r, s);\r\n    }\r\n\r\n    function safeMemoryCleaner() internal pure {\r\n        assembly {\r\n            let fmem := mload(0x40)\r\n            codecopy(fmem, codesize, sub(msize, fmem))\r\n        }\r\n    }\r\n}\r\n/*\r\n\r\nEND ORACLIZE_API\r\n\r\n*/\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract GameInterface {\r\n\r\n    uint public commissionEarned;\r\n    uint public totalFundsLostByPlayers;\r\n\r\n    function finalizeBet(address _user, uint _betId) public returns(uint profit, uint totalWon);\r\n    function canFinalizeBet(address _user, uint _betId) public view returns (bool success);\r\n    function getUserProfitForFinishedBet(address _user, uint _betId) public view returns(uint);\r\n    function getTotalBets(address _user) public view returns(uint);\r\n    function getPossibleWinnings(uint _chance, uint _amount) public view returns(uint);\r\n    function getBetInfo(address _user, uint _betId) public view returns(uint amount, bool finalized, bool won, bool bonus);\r\n    function getParamsForTokenCaluclation(uint _chance) public view returns(uint minB, uint maxB, uint gbs, uint gwp);\r\n    function emergencyWithdraw(address payable _sender) public;\r\n}\r\n\r\ncontract BadBitSettings {\r\n\r\n    uint public constant GWEI_TO_WEI = 1000000000;\r\n    uint public constant ETH_TO_WEI = 1000000000000000000;\r\n    uint public ORACLIZE_GAS_LIMIT = 220000;\r\n    uint public MAX_GAS_PRICE = 30000000000; // in wei\r\n    uint public MIN_GAS_PRICE = 1000000000; // in wei\r\n    uint public BIG_WIN_THRESHOLD = 3 ether;\r\n    uint public MAX_CHANCE_FOR_BONUS_BETTING = 25;\r\n    uint public MAX_DON_IN_ROW = 3;\r\n    uint public HOUSE_EDGE = 2000;\r\n    uint public MAX_WP = 9500;\r\n    uint public MIN_WP = 476;\r\n    uint public REVENUE_TO_INITIAL_DEPOSIT_RATIO = 2;\r\n    bool public BETS_ALLOWED = true;\r\n    bool public USE_BLOCKHASH_RANDOM_SEED = false;\r\n\r\n    /**\r\n    * @dev mapping holding game addresses\r\n    */\r\n    mapping(address => bool) public isGameAddress;\r\n    /**\r\n    * @dev mapping holding operator addresses\r\n    */\r\n    mapping(address => bool) public isOperatorAddress;\r\n    /**\r\n    * @dev keeps track of all games\r\n    */\r\n    address[] public gameContractAddresses;\r\n    /**\r\n    * @dev keeps track of all operators\r\n    */\r\n    address[] public operators;\r\n    /**\r\n    * @dev keep token win chance reward for each level, stored as percentage times 100\r\n    */\r\n    uint[] public tokenWinChanceRewardForLevel;\r\n    /**\r\n    * @dev keep bonus balance reward for each level\r\n    */\r\n    uint[] public bonusBalanceRewardForLevel;\r\n\r\n    event GamePaused(bool indexed yes);\r\n    event MaxGasPriceSet(uint amount);\r\n    event MinGasPriceSet(uint amount);\r\n    event BigWinThresholdSet(uint amount);\r\n    event MaxChanceForBonusBetSet(uint amount);\r\n    event MaxDonInRowSet(uint count);\r\n    event HouseEdgeSet(uint houseEdge);\r\n    event MaxWPSet(uint maxWp);\r\n    event MinWPSet(uint minWp);\r\n\r\n    modifier onlyOperators() {\r\n        require (isOperatorAddress[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        operators.push(msg.sender);\r\n        isOperatorAddress[msg.sender] = true;\r\n\r\n        bonusBalanceRewardForLevel = [0, 0, 0.01 ether, 0.02 ether, 0,\r\n            0.03 ether, 0.04 ether, 0.05 ether, 0, 0.06 ether, 0.07 ether,\r\n            0.08 ether, 0, 0.09 ether, 0.10 ether, 0.11 ether, 0, 0.12 ether,\r\n            0.13 ether, 0.14 ether, 0, 0.15 ether, 0.16 ether, 0.17 ether, 0,\r\n            0.18 ether, 0.19 ether, 0.20 ether, 0, 0.21 ether, 0.22 ether,\r\n            0.23 ether, 0, 0.24 ether, 0.25 ether, 0.26 ether, 0, 0.27 ether,\r\n            0.28 ether, 0.29 ether, 0, 0.30 ether, 0.31 ether, 0.32 ether, 0,\r\n            0.33 ether, 0.34 ether, 0.35 ether, 0, 0.36 ether, 0.37 ether,\r\n            0.38 ether, 0, 0.39 ether, 0.40 ether, 0.41 ether, 0, 0.42 ether,\r\n            0.43 ether, 0.44 ether, 0, 0.45 ether, 0.46 ether, 0.47 ether, 0,\r\n            0.48 ether, 0.49 ether, 0.50 ether, 0, 0.51 ether, 0.52 ether,\r\n            0.53 ether, 0, 0.54 ether, 0.55 ether, 0.56 ether, 0, 0.57 ether,\r\n            0.58 ether, 0.59 ether, 0, 0.60 ether, 0.61 ether, 0.62 ether, 0,\r\n            0.63 ether, 0.64 ether, 0.65 ether, 0, 0.66 ether, 0.67 ether,\r\n            0.68 ether, 0, 0.69 ether, 0.70 ether, 0.71 ether, 0, 0.72 ether,\r\n            0.73 ether, 0.74 ether, 0];\r\n\r\n\r\n        tokenWinChanceRewardForLevel = [0, 0, 0, 0, 40, 40, 40, 40, 80, 80, 80, 80,\r\n            120, 120, 120, 120, 160, 160, 160, 160, 200, 200, 200, 200, 250, 250, 250, 250, 300, 300, 300, 300,\r\n            350, 350, 350, 350, 400, 400, 400, 400, 450, 450, 450, 450, 510, 510, 510, 510, 570, 570, 570, 570,\r\n            630, 630, 630, 630, 690, 690, 690, 690, 750, 750, 750, 750, 820, 820, 820, 820, 890, 890, 890, 890,\r\n            960, 960, 960, 960, 1030, 1030, 1030, 1030, 1100, 1100, 1100, 1100, 1180, 1180, 1180, 1180, 1260, 1260, 1260, 1260,\r\n            1340, 1340, 1340, 1340, 1420, 1420, 1420, 1420, 1500];\r\n    }\r\n\r\n    /**\r\n    * @dev Method that allows operators to add allowed address\r\n    * @param _address represents address that should be added\r\n    */\r\n    function addGame(address _address) public onlyOperators {\r\n        require(!isGameAddress[_address]);\r\n\r\n        gameContractAddresses.push(_address);\r\n        isGameAddress[_address] = true;\r\n    }\r\n\r\n    /**\r\n    * @dev Method that allows operators to remove allowed address\r\n    * @param _address represents address that should be removed\r\n    */\r\n    function removeGame(address _address) public onlyOperators {\r\n        require(isGameAddress[_address]);\r\n\r\n        uint len = gameContractAddresses.length;\r\n\r\n        for (uint i=0; i<len; i++) {\r\n            if (gameContractAddresses[i] == _address) {\r\n                // move last game to i-th position\r\n                gameContractAddresses[i] = gameContractAddresses[len-1];\r\n                // delete last game in array (its already moved so its duplicate)\r\n                delete gameContractAddresses[len-1];\r\n                // resize gameContractAddresses array\r\n                gameContractAddresses.length--;\r\n                // remove allowed address\r\n                isGameAddress[_address] = false;\r\n                break;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev Method that allows operators to add allowed address\r\n    * @param _address represents address that should be added\r\n    */\r\n    function addOperator(address _address) public onlyOperators {\r\n        require(!isOperatorAddress[_address]);\r\n\r\n        operators.push(_address);\r\n        isOperatorAddress[_address] = true;\r\n    }\r\n\r\n    /**\r\n    * @dev Method that allows operators to remove allowed address\r\n    * @param _address represents address that should be removed\r\n    */\r\n    function removeOperator(address _address) public onlyOperators {\r\n        require(isOperatorAddress[_address]);\r\n\r\n        uint len = operators.length;\r\n\r\n        for (uint i=0; i<len; i++) {\r\n            if (operators[i] == _address) {\r\n                // move last game to i-th position\r\n                operators[i] = operators[len-1];\r\n                // delete last game in array (its already moved so its duplicate)\r\n                delete operators[len-1];\r\n                // resize operators array\r\n                operators.length--;\r\n                // remove allowed address\r\n                isOperatorAddress[_address] = false;\r\n                break;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    function setMaxGasPriceInGwei(uint _maxGasPrice) public onlyOperators {\r\n        MAX_GAS_PRICE = _maxGasPrice * GWEI_TO_WEI;\r\n\r\n        emit MaxGasPriceSet(MAX_GAS_PRICE);\r\n    }\r\n\r\n    function setMinGasPriceInGwei(uint _minGasPrice) public onlyOperators {\r\n        MIN_GAS_PRICE = _minGasPrice * GWEI_TO_WEI;\r\n\r\n        emit MinGasPriceSet(MIN_GAS_PRICE);\r\n    }\r\n\r\n    function setBetsAllowed(bool _betsAllowed) public onlyOperators {\r\n        BETS_ALLOWED = _betsAllowed;\r\n\r\n        emit GamePaused(!_betsAllowed);\r\n    }\r\n\r\n    function setBigWin(uint _bigWin) public onlyOperators {\r\n        BIG_WIN_THRESHOLD = _bigWin;\r\n\r\n        emit BigWinThresholdSet(BIG_WIN_THRESHOLD);\r\n    }\r\n\r\n    function setMaxChanceForBonus(uint _chance) public onlyOperators {\r\n        MAX_CHANCE_FOR_BONUS_BETTING = _chance;\r\n\r\n        emit MaxChanceForBonusBetSet(MAX_CHANCE_FOR_BONUS_BETTING);\r\n    }\r\n\r\n    function setMaxDonInRow(uint _count) public onlyOperators {\r\n        MAX_DON_IN_ROW = _count;\r\n\r\n        emit MaxDonInRowSet(MAX_DON_IN_ROW);\r\n    }\r\n\r\n    function setHouseEdge(uint _edge) public onlyOperators {\r\n        // we allow three decimal places, so it is 100 * 1000\r\n        require(_edge < 100000);\r\n\r\n        HOUSE_EDGE = _edge;\r\n\r\n        emit HouseEdgeSet(HOUSE_EDGE);\r\n    }\r\n\r\n    function setOraclizeGasLimit(uint _gas) public onlyOperators {\r\n        ORACLIZE_GAS_LIMIT = _gas;\r\n    }\r\n\r\n    function setMaxWp(uint _wp) public onlyOperators {\r\n        MAX_WP = _wp;\r\n\r\n        emit MaxWPSet(_wp);\r\n    }\r\n\r\n    function setMinWp(uint _wp) public onlyOperators {\r\n        MIN_WP = _wp;\r\n\r\n        emit MinWPSet(_wp);\r\n    }\r\n\r\n    function setUseBlockhashRandomSeed(bool _use) public onlyOperators {\r\n        USE_BLOCKHASH_RANDOM_SEED = _use;\r\n    }\r\n\r\n    function setRevenueToInitialDepositRatio(uint _ratio) public onlyOperators {\r\n        require(_ratio >= 2);\r\n\r\n        REVENUE_TO_INITIAL_DEPOSIT_RATIO = _ratio;\r\n    }\r\n\r\n    function getOperators() public view returns(address[] memory) {\r\n        return operators;\r\n    }\r\n\r\n    function getGames() public view returns(address[] memory) {\r\n        return gameContractAddresses;\r\n    }\r\n\r\n    function getNumberOfGames() public view returns(uint) {\r\n        return gameContractAddresses.length;\r\n    }\r\n}\r\n\r\ncontract IBadBitDistributor{\r\n\tfunction sendTokens(address _user, uint _amount) public;\r\n\tfunction getStandardLot() public view returns(uint);\r\n\tfunction shouldWinTokens(address _contract, bytes32 _hash, address _user, uint[] memory _betSizes, uint[] memory _chances, uint _maxNumOfBets) public view returns (bool);\r\n\tfunction winTokens(address _user) public;\r\n\r\n}\r\n\r\ncontract BadBitWallet {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    struct Withdrawal {\r\n        uint withdrawalTimestamp;\r\n        uint amount;\r\n    }\r\n\r\n    /**\r\n    * @dev All user addresses that have had at least one bet in any of the games\r\n    */\r\n    address[] public users;\r\n    /**\r\n    * @dev Balances for each user address\r\n    */\r\n    mapping(address => uint) public userBalances;\r\n    /**\r\n    * @dev Bonus balances for each user address\r\n    */\r\n    mapping(address => uint) public userBonusBalances;\r\n    /**\r\n    * @dev All user withdrawals\r\n    */\r\n    mapping(address => Withdrawal[]) public userWithdrawals;\r\n    /**\r\n    * @dev Total contract balance belonging to the users\r\n    */\r\n    uint public totalPlayerBalances;\r\n    /**\r\n    * @dev All funds sent directly to the wallet contract\r\n    */\r\n    uint public totalFundsSentByOwner;\r\n\r\n    BadBitSettings public settings;\r\n    address public distributorAddress;\r\n    IBadBitDistributor public distributor;\r\n\r\n    event UserWithdrawal(address indexed user, uint indexed timestamp);\r\n\r\n    modifier onlyGames() {\r\n        require (settings.isGameAddress(msg.sender));\r\n        _;\r\n    }\r\n\r\n    modifier onlyOperators() {\r\n        require (settings.isOperatorAddress(msg.sender));\r\n        _;\r\n    }\r\n\r\n    constructor(address _settings) public {\r\n        settings = BadBitSettings(_settings);\r\n    }\r\n\r\n    function setDistributor(address _distributorAddress) public onlyOperators {\r\n        distributorAddress = _distributorAddress;\r\n        distributor = IBadBitDistributor(_distributorAddress);\r\n    }\r\n\r\n    /**\r\n    * @dev Allows users to add balance to their account\r\n    */\r\n    function topUp() public payable {\r\n        userBalances[msg.sender] = userBalances[msg.sender].add(msg.value);\r\n        totalPlayerBalances = totalPlayerBalances.add(msg.value);\r\n    }\r\n\r\n    /**\r\n    * @dev Subtract amount from user's balance\r\n    * @param _user address of user\r\n    * @param _amount uint representing value in Wei to be subtracted\r\n    */\r\n    function _subtract(address _user, uint _amount) internal returns(bool) {\r\n        require(tx.origin == _user);\r\n\r\n        if (userBalances[_user] < _amount) return false;\r\n\r\n        userBalances[_user] = userBalances[_user].sub(_amount);\r\n        totalPlayerBalances = totalPlayerBalances.sub(_amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Add given amount to the user's balance\r\n    * @param _user address of user\r\n    * @param _amount uint representing value in Wei to be added\r\n    */\r\n    function add(address _user, uint _amount) public payable onlyGames returns(bool) {\r\n        return _add(_user, _amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Add given amount to the user's balance\r\n    * @param _user address of user\r\n    * @param _amount uint representing value in Wei to be added\r\n    */\r\n    function _add(address _user, uint _amount) internal returns(bool) {\r\n        if (_amount == 0) return false;\r\n\r\n        userBalances[_user] = userBalances[_user].add(_amount);\r\n        totalPlayerBalances = totalPlayerBalances.add(_amount);\r\n\r\n        require(totalPlayerBalances <= address(this).balance);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Add given bonus amount to the user's balance\r\n    * @dev Only operators can add bonus amount\r\n    * @param _user address of user\r\n    * @param _amount uint representing value in Wei to be added\r\n    */\r\n    function addBonus(address _user, uint _amount) public onlyOperators payable returns(bool) {\r\n        return _addBonus(_user, _amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Add given bonus amount to the user's balance\r\n    * @dev Only operators can add bonus amount\r\n    * @param _user address of user\r\n    * @param _amount uint representing value in Wei to be added\r\n    */\r\n    function _addBonus(address _user, uint _amount) internal returns(bool) {\r\n        if (_amount == 0) return false;\r\n\r\n        userBonusBalances[_user] = userBonusBalances[_user].add(_amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtract bonus amount from user's balance\r\n    * @param _user address of user\r\n    * @param _amount uint representing value in Wei to be subtracted\r\n    */\r\n    function subtractBonus(address _user, uint _amount) public onlyGames returns(bool) {\r\n        return _subtractBonus(_user, _amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Subtract bonus amount from user's balance\r\n    * @param _user address of user\r\n    * @param _amount uint representing value in Wei to be subtracted\r\n    */\r\n    function _subtractBonus(address _user, uint _amount) internal returns(bool) {\r\n        require(tx.origin == _user);\r\n\r\n        if (userBonusBalances[_user] < _amount) return false;\r\n\r\n        userBonusBalances[_user] = userBonusBalances[_user].sub(_amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows users to make withdrawals\r\n    * @param _user address of user which ETH should be sent to\r\n    * @param _amount Amount to be withdrawn\r\n    */\r\n    function withdraw(address payable _user, uint _amount) public {\r\n        // Any game can implement its own withdrawal method\r\n        require(_user == msg.sender);\r\n\r\n        BadBitCasino(address(this))._finalizeLastBets(_user);\r\n\r\n        // @dev This will not pass if _amount is bigger than available balance\r\n        userBalances[_user] = userBalances[_user].sub(_amount);\r\n        totalPlayerBalances = totalPlayerBalances.sub(_amount);\r\n\r\n        uint _timestamp = now;\r\n        userWithdrawals[_user].push(Withdrawal({\r\n            withdrawalTimestamp: _timestamp,\r\n            amount: _amount\r\n        }));\r\n\r\n        _user.transfer(_amount);\r\n\r\n        emit UserWithdrawal(_user, _timestamp);\r\n    }\r\n\r\n    function getNumberOfUserWithdrawals(address _user) public view returns(uint) {\r\n        return userWithdrawals[_user].length;\r\n    }\r\n\r\n    function addAmountByDistributor(address _user, uint _amount) public {\r\n        require(msg.sender == distributorAddress);\r\n\r\n        _add(_user, _amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Allows anyone to just send ether to the contract\r\n    */\r\n    function() external payable {\r\n        totalFundsSentByOwner += msg.value;\r\n    }\r\n}\r\n\r\ncontract BadBitCasino is usingOraclize, BadBitWallet {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    struct Bet {\r\n        address game;\r\n        uint betId;\r\n    }\r\n\r\n    struct DonBet {\r\n        address game;\r\n        address sender;\r\n        uint amount;\r\n        bool won;\r\n        bool finalized;\r\n    }\r\n\r\n    /**\r\n    * @dev keep total funds spent on oraclize\r\n    */\r\n    uint public totalFundsSpentOnOraclize;\r\n    /**\r\n    * @dev keep total commission earned for DoN games\r\n    */\r\n    uint public commissionEarned;\r\n\r\n    /**\r\n    * @dev keep how many ether has been paid out as profit to all players\r\n    */\r\n    uint public totalPlayerProfits;\r\n\r\n    /**\r\n    * @dev keep how many ethers is lost by all players\r\n    */\r\n    uint public totalFundsLostByPlayers;\r\n    /**\r\n    * @dev keep track of all funds sent directly to contract\r\n    */\r\n    uint public totalFundsSentByOwner;\r\n\r\n    /**\r\n    * @dev keep track of all funds that have been transfered from revenue pool to initial deposit pool\r\n    */\r\n    uint public totalFundsTransferredToDepositPool;\r\n\r\n    /**\r\n    * @dev keep how much ether has been won by each player (this includes the original bet amount)\r\n    */\r\n    mapping(address => uint) public totalWinningsForPlayer;\r\n    /**\r\n    * @dev keep current level for each player\r\n    */\r\n    mapping(address => uint) public playerLevel;\r\n    /**\r\n    * @dev keep amount of cumulative ETH won required for each level\r\n    */\r\n    uint[] public amountRequiredForLevel;\r\n    /**\r\n    * @dev Holds all bets of user with specific address\r\n    */\r\n    mapping(address => Bet[]) public bets;\r\n    /**\r\n    * @dev Keeps track of sender for queryId when playing doubleOrNothing\r\n    */\r\n    mapping(bytes32 => DonBet) public donBets;\r\n    /**\r\n    * @dev All users that played game\r\n    */\r\n    address[] public users;\r\n    /**\r\n    * @dev Mapping that keep first unfinalized bet for user\r\n    */\r\n    mapping(address => uint) public firstUnfinalizedBet;\r\n    /**\r\n    * @dev Tracks last won amount per games for each user\r\n    */\r\n    mapping(address => mapping(address => uint)) public lastWonAmountPerGame;\r\n\r\n    event BigWin(address indexed user, address indexed game, uint amount);\r\n    event DoubleOrNothingPlayed(bytes32 queryId, address indexed user, uint indexed betId, address indexed game);\r\n    event DoubleOrNothingFinished(bytes32 indexed queryId, address indexed user, bool won, uint tokensWon);\r\n\r\n    modifier onlyGames() {\r\n        require (settings.isGameAddress(msg.sender));\r\n        _;\r\n    }\r\n\r\n    modifier onlyOperators() {\r\n        require (settings.isOperatorAddress(msg.sender));\r\n        _;\r\n    }\r\n\r\n    constructor(address _settings) BadBitWallet(_settings) public {\r\n\r\n        oraclize_setNetwork();\r\n        // set gas price to 1 gwei\r\n        oraclize_setCustomGasPrice(10000000000);\r\n    }\r\n\r\n    function fillAmountRequiredForLevel() public {\r\n        amountRequiredForLevel = [0, 3 ether, 9 ether, 18 ether, 30 ether,\r\n            45 ether, 63 ether, 84 ether, 108 ether, 135 ether, 165 ether,\r\n            198 ether, 234 ether, 273 ether, 315 ether, 360 ether, 408 ether,\r\n            459 ether, 513 ether, 570 ether, 630 ether, 693 ether, 759 ether,\r\n            828 ether, 900 ether, 975 ether, 1053 ether, 1134 ether, 1218 ether,\r\n            1305 ether, 1395 ether, 1488 ether, 1584 ether, 1683 ether, 1785 ether,\r\n            1890 ether, 1998 ether, 2109 ether, 2223 ether, 2340 ether, 2460 ether,\r\n            2583 ether, 2709 ether, 2838 ether, 2970 ether, 3105 ether, 3243 ether,\r\n            3384 ether, 3528 ether, 3675 ether, 3825 ether, 3978 ether, 4134 ether,\r\n            4293 ether, 4455 ether, 4620 ether, 4788 ether, 4959 ether, 5133 ether,\r\n            5310 ether, 5490 ether, 5673 ether, 5859 ether, 6048 ether, 6240 ether,\r\n            6435 ether, 6633 ether, 6834 ether, 7038 ether, 7245 ether, 7455 ether,\r\n            7668 ether, 7884 ether, 8103 ether, 8325 ether, 8550 ether, 8778 ether,\r\n            9009 ether, 9243 ether, 9480 ether, 9720 ether, 9963 ether, 10209 ether,\r\n            10458 ether, 10710 ether, 10965 ether, 11223 ether, 11484 ether,\r\n            11748 ether, 12015 ether, 12285 ether, 12558 ether, 12834 ether,\r\n            13113 ether, 13395 ether, 13680 ether, 13968 ether, 14259 ether,\r\n            14553 ether, 14850 ether, 15150 ether];\r\n    }\r\n\r\n    function placeBet(address _user, uint _betId, uint _amount, bool bonus) public onlyGames {\r\n        require(settings.BETS_ALLOWED());\r\n\r\n        if (bets[_user].length == 0) {\r\n            users.push(_user);\r\n        }\r\n\r\n        _finalizeLastBets(_user);\r\n\r\n        if (bonus) {\r\n            require(_subtractBonus(_user, _amount));\r\n        } else {\r\n            require(_subtract(_user, _amount));\r\n        }\r\n\r\n        bets[_user].push(Bet({\r\n                game: msg.sender,\r\n                betId: _betId\r\n            }));\r\n\r\n        // if bets needs to be finalzied, we don't do anything, but if all bets are finalized, we move pointer to new bet\r\n        // check firstUnfinalizedBet[_user] != bets[_user].length - 1 because if that is the case we can't get state of bet from the game contract\r\n        // as it still hasn't been written there\r\n        if (firstUnfinalizedBet[_user] != bets[_user].length - 1 && !needToUpdateBetsForUser(_user)) {\r\n            firstUnfinalizedBet[_user] = bets[_user].length - 1;\r\n        }\r\n    }\r\n\r\n    function _finalizeLastBets(address _user) public {\r\n        uint count = bets[_user].length;\r\n\r\n        if (count > 0 && needToUpdateBetsForUser(_user)) {\r\n            uint starting = firstUnfinalizedBet[_user];\r\n\r\n            for (uint i=starting; i<count; i++) {\r\n\r\n                Bet memory betObject = bets[_user][i];\r\n                bool finalized;\r\n                bool isBonus;\r\n                (, finalized, , isBonus) = GameInterface(betObject.game).getBetInfo(_user, betObject.betId);\r\n\r\n                if (!finalized) {\r\n                    if (GameInterface(betObject.game).canFinalizeBet(_user, betObject.betId)) {\r\n                        (uint profit, uint totalWon) = GameInterface(betObject.game).finalizeBet(_user, betObject.betId);\r\n\r\n                        if (totalWon > 0) {\r\n                            require(_add(_user, totalWon));\r\n                            totalPlayerProfits += isBonus ? totalWon : profit;\r\n                            totalWinningsForPlayer[_user] += totalWon;\r\n                            updatePlayerLevelIfNeeded(_user);\r\n                            lastWonAmountPerGame[betObject.game][_user] = totalWon;\r\n\r\n                            if (totalWon > settings.BIG_WIN_THRESHOLD()) {\r\n                                emit BigWin(_user, betObject.game, totalWon);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (starting == firstUnfinalizedBet[_user]) {\r\n                            bool isFirstFinalized;\r\n                            // inside this if so we don't call this all the time if not needed\r\n                            (, isFirstFinalized, ,) = GameInterface(bets[_user][starting].game).getBetInfo(_user, bets[_user][starting].betId);\r\n\r\n                            if (isFirstFinalized) {\r\n                                firstUnfinalizedBet[_user] = i;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Allows owner to finalizeLastBets for array of addresses\r\n    * @dev This is added because owner can't withdraw ether without all bets updated\r\n    */\r\n    function finalizeLastBetsForAddresses(address[] memory _addresses) public onlyOperators {\r\n        for (uint i=0; i<_addresses.length; i++) {\r\n            _finalizeLastBets(_addresses[i]);\r\n        }\r\n    }\r\n\r\n    function placeBetForDoubleOrNothing(address _game, uint _amount) public {\r\n        require(settings.BETS_ALLOWED());\r\n\r\n        _finalizeLastBets(msg.sender);\r\n\r\n        // needs to be after finalizeLastBets is executed\r\n        require(lastWonAmountPerGame[_game][msg.sender] >= _amount);\r\n\r\n        uint _gasPrice = tx.gasprice;\r\n        // @dev we don't want to revert if gasPrice is not valid, we just set it to MIN or MAX\r\n        if (_gasPrice < settings.MIN_GAS_PRICE()) {\r\n            _gasPrice = settings.MIN_GAS_PRICE();\r\n        } else if (_gasPrice > settings.MAX_GAS_PRICE()) {\r\n            _gasPrice = settings.MAX_GAS_PRICE();\r\n        }\r\n\r\n        oraclize_setCustomGasPrice(_gasPrice);\r\n        uint gasLimit = settings.ORACLIZE_GAS_LIMIT();\r\n\r\n        bytes32 queryId = settings.USE_BLOCKHASH_RANDOM_SEED() ? oraclize_query(0, \"URL\", \"\", gasLimit) : oraclize_newRandomDSQuery(0, 8, gasLimit);\r\n\r\n        totalFundsSpentOnOraclize += settings.USE_BLOCKHASH_RANDOM_SEED() ? oraclize_getPrice(\"url\", gasLimit) : oraclize_getPrice(\"random\", gasLimit);\r\n\r\n        donBets[queryId] = DonBet({\r\n            game: _game,\r\n            sender: msg.sender,\r\n            amount: _amount,\r\n            won: false,\r\n            finalized: false\r\n        });\r\n\r\n        require(_subtract(msg.sender, _amount));\r\n\r\n        emit DoubleOrNothingPlayed(queryId, msg.sender, GameInterface(_game).getTotalBets(msg.sender) - 1, _game);\r\n    }\r\n\r\n    function __callback(bytes32 myid, string memory result) public {\r\n        if (msg.sender != oraclize_cbAddress() && !settings.isOperatorAddress(msg.sender)) revert();\r\n\r\n        // @dev Oraclize sometimes rebroadcast transactions, so we need to make sure thats not the case\r\n        require(!donBets[myid].finalized);\r\n        require(settings.USE_BLOCKHASH_RANDOM_SEED() || bytes(result)[0] != 0);\r\n\r\n        uint randomNumber;\r\n\r\n        if(settings.isOperatorAddress(msg.sender) || settings.USE_BLOCKHASH_RANDOM_SEED()) {\r\n            randomNumber = uint224(uint(blockhash(block.number - 1)).mod(100));\r\n        } else {\r\n            randomNumber = uint224(uint(keccak256(abi.encodePacked(result))).mod(100));\r\n        }\r\n\r\n        // @dev this means user won\r\n        if (randomNumber < 50) {\r\n            commissionEarned += getCommission(donBets[myid].amount);\r\n            uint winnings = getPossibleWinnings(donBets[myid].amount);\r\n            uint wonAmount = donBets[myid].amount + winnings;\r\n\r\n            totalWinningsForPlayer[donBets[myid].sender] += winnings;\r\n            updatePlayerLevelIfNeeded(donBets[myid].sender);\r\n\r\n            require(_add(donBets[myid].sender, wonAmount));\r\n            lastWonAmountPerGame[donBets[myid].game][donBets[myid].sender] = wonAmount;\r\n            donBets[myid].won = true;\r\n        } else {\r\n            totalFundsLostByPlayers += donBets[myid].amount;\r\n        }\r\n\r\n        uint tokensWon = 0;\r\n\r\n        uint[] memory betSizes = new uint[](1);\r\n        betSizes[0] = donBets[myid].amount;\r\n        uint[] memory chances = new uint[](1);\r\n        chances[0] = 50;\r\n\r\n        if (distributor.shouldWinTokens(donBets[myid].game, keccak256(abi.encodePacked(result)), donBets[myid].sender, betSizes, chances, 1)) {\r\n            distributor.winTokens(donBets[myid].sender);\r\n            tokensWon = distributor.getStandardLot();\r\n        }\r\n\r\n        emit DoubleOrNothingFinished(myid, donBets[myid].sender, randomNumber < 50, tokensWon);\r\n\r\n        donBets[myid].finalized = true;\r\n    }\r\n\r\n    /**\r\n    * @dev Calculate current user balance, taking into account unfinalized bets\r\n    * @param _user address of the user\r\n    * @return returns uint representing user balance in wei\r\n    */\r\n    function getCurrentBalance(address _user) public view returns(uint) {\r\n        uint balance = userBalances[_user];\r\n        uint count = bets[_user].length;\r\n\r\n        if (count == 0) {\r\n            return balance;\r\n        }\r\n\r\n        if (needToUpdateBetsForUser(_user)) {\r\n            uint starting = firstUnfinalizedBet[_user];\r\n\r\n            for (uint i=starting; i<count; i++) {\r\n                Bet memory betObject = bets[_user][i];\r\n                (uint amount, bool finalized, ,) = GameInterface(betObject.game).getBetInfo(_user, betObject.betId);\r\n\r\n                if (!finalized) {\r\n                    uint winnings = GameInterface(betObject.game).getUserProfitForFinishedBet(_user, betObject.betId);\r\n\r\n                    if(winnings > 0) {\r\n                        balance = balance + amount + winnings;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return balance;\r\n    }\r\n\r\n    /**\r\n    * @dev Calculate house commission for the double or nothing bet\r\n    * @param _amount represents amount that is played for bet\r\n    * @return returns uint of house commission\r\n    */\r\n    function getCommission(uint _amount) public view returns(uint) {\r\n        uint commission = settings.HOUSE_EDGE().mul(2);\r\n\r\n       // divide by 100000 because of decimal places\r\n        return commission < 100000 ? (_amount).mul(commission).div(100000) : _amount;\r\n    }\r\n\r\n    /**\r\n    * @dev Calculate possible winning with specific chance and amount\r\n    * @param _amount represents amount that is played for bet\r\n    * @return returns uint of players profit with specific chance and amount\r\n    */\r\n    function getPossibleWinnings(uint _amount) public view returns(uint) {\r\n        uint commission = settings.HOUSE_EDGE().mul(2);\r\n        // using 100000 because we keep house edge with three decimals, and that is 100 * 1000\r\n        return commission < 100000 ? _amount.mul(100000-commission).div(100000) : 0;\r\n    }\r\n\r\n    function getExtraTokenWinChanceForPlayer(address _user) public view returns (uint){\r\n        return settings.tokenWinChanceRewardForLevel(playerLevel[_user]);\r\n    }\r\n\r\n    function needToUpdateBetsForUser(address _user) public view returns(bool) {\r\n        Bet memory betObject = bets[_user][firstUnfinalizedBet[_user]];\r\n        (, bool finalized, ,) = GameInterface(betObject.game).getBetInfo(_user, betObject.betId);\r\n\r\n        return (!finalized);\r\n    }\r\n\r\n    function updatePlayerLevelIfNeeded(address _user) public {\r\n        uint currentPlayerLevel = playerLevel[_user];\r\n\r\n        while(currentPlayerLevel < amountRequiredForLevel.length - 1 && totalWinningsForPlayer[_user] >= amountRequiredForLevel[currentPlayerLevel+1]) {\r\n            currentPlayerLevel++;\r\n\r\n            // Add player reward for the current level\r\n            _addBonus(_user, settings.bonusBalanceRewardForLevel(currentPlayerLevel));\r\n        }\r\n\r\n        playerLevel[_user] = currentPlayerLevel;\r\n    }\r\n\r\n    function sendEthToGame(uint _amount) public onlyGames {\r\n        totalFundsSpentOnOraclize += _amount;\r\n        msg.sender.transfer(_amount);\r\n    }\r\n\r\n\r\n    function emergencyShutdown(address payable[] memory _addresses, bool transferToOperator) public onlyOperators {\r\n        for (uint i=0; i<_addresses.length; i++) {\r\n            _finalizeLastBets(_addresses[i]);\r\n            _addresses[i].transfer(userBalances[_addresses[i]]);\r\n        }\r\n\r\n        if(transferToOperator) {\r\n            msg.sender.transfer(address(this).balance);\r\n\r\n            address[] memory games = settings.getGames();\r\n\r\n            for(uint i = 0; i < games.length; i++) {\r\n                if(games[i] != address(this)) {\r\n                    GameInterface(games[i]).emergencyWithdraw(msg.sender);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function setTotalFundsTransferredToDepositPool(uint _value) public {\r\n        require(msg.sender == distributorAddress);\r\n\r\n        totalFundsTransferredToDepositPool = _value;\r\n    }\r\n\r\n    /**\r\n    * @dev Checks for number of bets user played\r\n    * @param _user address of user\r\n    * @return returns uint representing number of total bets played by user\r\n    */\r\n    function getTotalBets(address _user) public view returns(uint) {\r\n        return bets[_user].length;\r\n    }\r\n\r\n    function getUsers() public view returns(address[] memory) {\r\n        return users;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows anyone to just send ether to contract\r\n    */\r\n    function() external payable {\r\n        require(totalFundsTransferredToDepositPool == 0);\r\n\r\n        totalFundsSentByOwner += msg.value;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBonusBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addAmountByDistributor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commissionEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"donBets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"game\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"won\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"finalized\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_game\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"placeBetForDoubleOrNothing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fillAmountRequiredForLevel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"amountRequiredForLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFundsSpentOnOraclize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"finalizeLastBetsForAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalBets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"myid\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"result\",\"type\":\"string\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastWonAmountPerGame\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_myid\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_result\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFundsTransferredToDepositPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getCommission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getCurrentBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userWithdrawals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawalTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"game\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getNumberOfUserWithdrawals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addBonus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPlayerProfits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"firstUnfinalizedBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_distributorAddress\",\"type\":\"address\"}],\"name\":\"setDistributor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFundsLostByPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPlayerBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendEthToGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalWinningsForPlayer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"_finalizeLastBets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getPossibleWinnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"bonus\",\"type\":\"bool\"}],\"name\":\"placeBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"updatePlayerLevelIfNeeded\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"transferToOperator\",\"type\":\"bool\"}],\"name\":\"emergencyShutdown\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"needToUpdateBetsForUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFundsSentByOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"contract IBadBitDistributor\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getExtraTokenWinChanceForPlayer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setTotalFundsTransferredToDepositPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"topUp\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"settings\",\"outputs\":[{\"internalType\":\"contract BadBitSettings\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"subtractBonus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_settings\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"game\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BigWin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"queryId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"game\",\"type\":\"address\"}],\"name\":\"DoubleOrNothingPlayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"queryId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"won\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensWon\",\"type\":\"uint256\"}],\"name\":\"DoubleOrNothingFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawal\",\"type\":\"event\"}]","ContractName":"BadBitCasino","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000003c1be9d01180ecd520338e47b8a435e1ae3e6a49","Library":"","LicenseType":"None","SwarmSource":"bzzr://1cd078f0b4ebaaae5d7df36bbc057b5de4ccf9db1723351a113b640043c04d85"}]}