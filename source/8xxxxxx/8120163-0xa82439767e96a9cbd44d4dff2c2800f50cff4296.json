{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n\r\n██╗    ██╗██████╗ ███████╗███╗   ███╗ █████╗ ██████╗ ████████╗ ██████╗ ██████╗ ███╗   ██╗████████╗██████╗  █████╗  ██████╗████████╗███████╗    ██████╗ ██████╗ ███╗   ███╗\r\n██║    ██║██╔══██╗██╔════╝████╗ ████║██╔══██╗██╔══██╗╚══██╔══╝██╔════╝██╔═══██╗████╗  ██║╚══██╔══╝██╔══██╗██╔══██╗██╔════╝╚══██╔══╝██╔════╝   ██╔════╝██╔═══██╗████╗ ████║\r\n██║ █╗ ██║██████╔╝███████╗██╔████╔██║███████║██████╔╝   ██║   ██║     ██║   ██║██╔██╗ ██║   ██║   ██████╔╝███████║██║        ██║   ███████╗   ██║     ██║   ██║██╔████╔██║\r\n██║███╗██║██╔═══╝ ╚════██║██║╚██╔╝██║██╔══██║██╔══██╗   ██║   ██║     ██║   ██║██║╚██╗██║   ██║   ██╔══██╗██╔══██║██║        ██║   ╚════██║   ██║     ██║   ██║██║╚██╔╝██║\r\n╚███╔███╔╝██║     ███████║██║ ╚═╝ ██║██║  ██║██║  ██║   ██║   ╚██████╗╚██████╔╝██║ ╚████║   ██║   ██║  ██║██║  ██║╚██████╗   ██║   ███████║██╗╚██████╗╚██████╔╝██║ ╚═╝ ██║\r\n ╚══╝╚══╝ ╚═╝     ╚══════╝╚═╝     ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝    ╚═════╝ ╚═════╝ ╚═╝  ╚═══╝   ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝   ╚═╝   ╚══════╝╚═╝ ╚═════╝ ╚═════╝ ╚═╝     ╚═╝\r\n\r\nBlockhain Made Easy\r\n\r\nhttps://wpsmartcontracts.com/\r\n\r\n*/\r\n\r\npragma solidity ^0.5.7;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    \r\n    int256 constant private INT256_MIN = -2**255;\r\n\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Multiplies two signed integers, reverts on overflow.\r\n    */\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        require(!(a == -1 && b == INT256_MIN)); // This is the only case of overflow not detected by the check below\r\n\r\n        int256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        require(b != 0); // Solidity only automatically asserts when dividing by 0\r\n        require(!(b == -1 && a == INT256_MIN)); // This is the only case of overflow\r\n\r\n        int256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two signed integers, reverts on overflow.\r\n    */\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two signed integers, reverts on overflow.\r\n    */\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * WPSmartContracts / Campaign Contract\r\n *\r\n * Contribution campaigns including the ability to approve the transfer of funds per request\r\n *\r\n */\r\n\r\ncontract CampaignMango {\r\n\r\n    using SafeMath for uint256;\r\n    \r\n    // this is a struct definition, that needs to be instantiated to be used... like classes.\r\n    struct Request {\r\n        string description;\r\n        uint256 value;\r\n        address payable recipient;\r\n        bool complete;\r\n        uint256 approvalCount;\r\n        mapping(address => bool) approvals;\r\n    }\r\n    \r\n    Request[] public requests; // this is the instance of the struct, like an array of Request\r\n    address public manager; // the owner\r\n    uint256 minimumContribution; // the... minimum contribution\r\n\r\n    /*\r\n        a factor to calculate minimum number of approvers by 100/factor\r\n        the factor values are 2 and 10, factors that makes sense:\r\n            2: meaning that the number or approvers required will be 50%\r\n            3: 33.3%\r\n            4: 25%\r\n            5: 20%\r\n            10: 10%\r\n    */\r\n    uint8 approversFactor; \r\n    \r\n    mapping(address => bool) public approvers;\r\n    uint256 public approversCount;\r\n\r\n    // a modifier of functions to add validation of the manager to run any function\r\n    modifier restricted() {\r\n        require(msg.sender == manager);\r\n        _;\r\n    }\r\n\r\n    // Constructor function to create a Campaign\r\n    constructor(address creator, uint256 minimum, uint8 factor) public {\r\n        // validate factor number betweeb 2 and 10\r\n        require(factor >= 2);\r\n        require(factor <= 10);\r\n        manager = creator;\r\n        approversFactor = factor;\r\n        minimumContribution = minimum;\r\n    }\r\n    \r\n    // allows a contributor to contribute\r\n    function contribute() public payable {\r\n        // validate minimun contribution\r\n        require(msg.value >= minimumContribution);\r\n        \r\n        // approvers.push(msg.sender); // array was changed to mappings\r\n        approvers[msg.sender] = true; // this maps this address with true\r\n        \r\n        // increment the number of approvers\r\n        approversCount++; \r\n    }\r\n\r\n    // create a request... \r\n    function createRequest(string memory description, uint256 value, address payable recipient) public restricted {\r\n    \r\n        // create the struct, specifying memory as a holder\r\n        Request memory newRequest = Request({ \r\n           description: description, \r\n           value: value, \r\n           recipient: recipient,\r\n           complete: false,\r\n           approvalCount: 0\r\n        });\r\n        \r\n        requests.push(newRequest);\r\n        \r\n    }\r\n    \r\n    // contributors has the right to approve request\r\n    function approveRequest(uint256 index) public {\r\n        \r\n        // this is to store in a local variable \"request\" the request[index] and avoid using it all the time\r\n        // storage means that we want the same copy inside of storage?, WTF?\r\n        // Request means to a Request struct defined at the beginning\r\n        Request storage request = requests[index];\r\n        \r\n        // if will require that the sender address is in the mapping of approvers\r\n        // if not will exit the function inmediatly\r\n        require(approvers[msg.sender]);\r\n        \r\n        // it will require the contributor not to vote twice for the same request\r\n        require(!request.approvals[msg.sender]);\r\n        \r\n        // add the voter to the approvals map\r\n        request.approvals[msg.sender] = true;\r\n        \r\n        // increment the number of YES votes for the request\r\n        request.approvalCount++;\r\n        \r\n    }\r\n    \r\n    // send the money to the vendor y there are enough votes\r\n    // restricted means that only the creator is allowed to run this function\r\n    function finalizeRequest(uint256 index) public restricted {\r\n        \r\n        // this is to store in a local variable \"request\" the request[index] and avoid using it all the time\r\n        // storage means that we want the same copy inside of storage?, WTF?\r\n        // Request means to a Request struct defined at the beginning\r\n        Request storage request = requests[index];\r\n\r\n        // transfer the money if it has more than X% of approvals\r\n        require(request.approvalCount >= approversCount.div(approversFactor)); \r\n        \r\n        // we will require that the request in process is not completed yet\r\n        require(!request.complete);\r\n        \r\n        // mark the request as completed\r\n        request.complete = true;\r\n        \r\n        // transfer the money requested (value) from the contract to the vendor that created the request\r\n        request.recipient.transfer(request.value);\r\n        \r\n    }\r\n\r\n    // helper function to show basic info of a contract in the interface\r\n    function getSummary() public view returns (\r\n      uint256, uint256, uint256, uint256, address\r\n      ) {\r\n        return (\r\n          minimumContribution,\r\n          address(this).balance,\r\n          requests.length,\r\n          approversCount,\r\n          manager\r\n        );\r\n    }\r\n\r\n    // for looping?\r\n    function getRequestsCount() public view returns (uint256) {\r\n        return requests.length;\r\n    }   \r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"finalizeRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRequestsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSummary\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requests\",\"outputs\":[{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"complete\",\"type\":\"bool\"},{\"name\":\"approvalCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"approversCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"createRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"contribute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"approveRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"minimum\",\"type\":\"uint256\"},{\"name\":\"factor\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"CampaignMango","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000bf112617bf6de09aa276249356a74e456226fe4e0000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000000000000a","Library":"","SwarmSource":"bzzr://9e71e51bc4d9c3e71c03eca85170a933da756af6c26df5aa02ad8e69881e4a03"}]}