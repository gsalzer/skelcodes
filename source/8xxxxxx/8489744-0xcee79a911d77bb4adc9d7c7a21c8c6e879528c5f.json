{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/wallet_trading_limiter/interfaces/IWalletsTradingLimiter.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n/**\r\n * @title Wallets Trading Limiter Interface.\r\n */\r\ninterface IWalletsTradingLimiter {\r\n    /**\r\n     * @dev Increment the limiter value of a wallet.\r\n     * @param _wallet The address of the wallet.\r\n     * @param _value The amount to be updated.\r\n     */\r\n    function updateWallet(address _wallet, uint256 _value) external;\r\n}\r\n\r\n// File: contracts/wallet_trading_limiter/interfaces/IWalletsTradingDataSource.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n/**\r\n * @title Wallets Trading Data Source Interface.\r\n */\r\ninterface IWalletsTradingDataSource {\r\n    /**\r\n     * @dev Increment the value of a given wallet.\r\n     * @param _wallet The address of the wallet.\r\n     * @param _value The value to increment by.\r\n     * @param _limit The limit of the wallet.\r\n     */\r\n    function updateWallet(address _wallet, uint256 _value, uint256 _limit) external;\r\n}\r\n\r\n// File: contracts/wallet_trading_limiter/interfaces/IWalletsTradingLimiterValueConverter.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n/**\r\n * @title Wallets Trading Limiter Value Converter Interface.\r\n */\r\ninterface IWalletsTradingLimiterValueConverter {\r\n    /**\r\n     * @dev Get the current limiter currency worth of a given SGA amount.\r\n     * @param _sgaAmount The amount of SGA to convert.\r\n     * @return The equivalent amount of the limiter currency.\r\n     */\r\n    function toLimiterValue(uint256 _sgaAmount) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/wallet_trading_limiter/interfaces/ITradingClasses.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n/**\r\n * @title Trading Classes Interface.\r\n */\r\ninterface ITradingClasses {\r\n    /**\r\n     * @dev Get the limit of a class.\r\n     * @param _id The id of the class.\r\n     * @return The limit of the class.\r\n     */\r\n    function getLimit(uint256 _id) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/contract_address_locator/interfaces/IContractAddressLocator.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n/**\r\n * @title Contract Address Locator Interface.\r\n */\r\ninterface IContractAddressLocator {\r\n    /**\r\n     * @dev Get the contract address mapped to a given identifier.\r\n     * @param _identifier The identifier.\r\n     * @return The contract address.\r\n     */\r\n    function getContractAddress(bytes32 _identifier) external view returns (address);\r\n\r\n    /**\r\n     * @dev Determine whether or not a contract address is relates to one of the given identifiers.\r\n     * @param _contractAddress The contract address to look for.\r\n     * @param _identifiers The identifiers.\r\n     * @return Is the contract address relates to one of the identifiers.\r\n     */\r\n    function isContractAddressRelates(address _contractAddress, bytes32[] _identifiers) external view returns (bool);\r\n}\r\n\r\n// File: contracts/contract_address_locator/ContractAddressLocatorHolder.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n\r\n/**\r\n * @title Contract Address Locator Holder.\r\n * @dev Hold a contract address locator, which maps a unique identifier to every contract address in the system.\r\n * @dev Any contract which inherits from this contract can retrieve the address of any contract in the system.\r\n * @dev Thus, any contract can remain \"oblivious\" to the replacement of any other contract in the system.\r\n * @dev In addition to that, any function in any contract can be restricted to a specific caller.\r\n */\r\ncontract ContractAddressLocatorHolder {\r\n    bytes32 internal constant _IAuthorizationDataSource_ = \"IAuthorizationDataSource\";\r\n    bytes32 internal constant _ISGNConversionManager_    = \"ISGNConversionManager\"      ;\r\n    bytes32 internal constant _IModelDataSource_         = \"IModelDataSource\"        ;\r\n    bytes32 internal constant _IPaymentHandler_          = \"IPaymentHandler\"            ;\r\n    bytes32 internal constant _IPaymentManager_          = \"IPaymentManager\"            ;\r\n    bytes32 internal constant _IPaymentQueue_            = \"IPaymentQueue\"              ;\r\n    bytes32 internal constant _IReconciliationAdjuster_  = \"IReconciliationAdjuster\"      ;\r\n    bytes32 internal constant _IIntervalIterator_        = \"IIntervalIterator\"       ;\r\n    bytes32 internal constant _IMintHandler_             = \"IMintHandler\"            ;\r\n    bytes32 internal constant _IMintListener_            = \"IMintListener\"           ;\r\n    bytes32 internal constant _IMintManager_             = \"IMintManager\"            ;\r\n    bytes32 internal constant _IPriceBandCalculator_     = \"IPriceBandCalculator\"       ;\r\n    bytes32 internal constant _IModelCalculator_         = \"IModelCalculator\"        ;\r\n    bytes32 internal constant _IRedButton_               = \"IRedButton\"              ;\r\n    bytes32 internal constant _IReserveManager_          = \"IReserveManager\"         ;\r\n    bytes32 internal constant _ISagaExchanger_           = \"ISagaExchanger\"          ;\r\n    bytes32 internal constant _IMonetaryModel_               = \"IMonetaryModel\"              ;\r\n    bytes32 internal constant _IMonetaryModelState_          = \"IMonetaryModelState\"         ;\r\n    bytes32 internal constant _ISGAAuthorizationManager_ = \"ISGAAuthorizationManager\";\r\n    bytes32 internal constant _ISGAToken_                = \"ISGAToken\"               ;\r\n    bytes32 internal constant _ISGATokenManager_         = \"ISGATokenManager\"        ;\r\n    bytes32 internal constant _ISGNAuthorizationManager_ = \"ISGNAuthorizationManager\";\r\n    bytes32 internal constant _ISGNToken_                = \"ISGNToken\"               ;\r\n    bytes32 internal constant _ISGNTokenManager_         = \"ISGNTokenManager\"        ;\r\n    bytes32 internal constant _IMintingPointTimersManager_             = \"IMintingPointTimersManager\"            ;\r\n    bytes32 internal constant _ITradingClasses_          = \"ITradingClasses\"         ;\r\n    bytes32 internal constant _IWalletsTradingLimiterValueConverter_        = \"IWalletsTLValueConverter\"       ;\r\n    bytes32 internal constant _IWalletsTradingDataSource_       = \"IWalletsTradingDataSource\"      ;\r\n    bytes32 internal constant _WalletsTradingLimiter_SGNTokenManager_          = \"WalletsTLSGNTokenManager\"         ;\r\n    bytes32 internal constant _WalletsTradingLimiter_SGATokenManager_          = \"WalletsTLSGATokenManager\"         ;\r\n    bytes32 internal constant _IETHConverter_             = \"IETHConverter\"   ;\r\n    bytes32 internal constant _ITransactionLimiter_      = \"ITransactionLimiter\"     ;\r\n    bytes32 internal constant _ITransactionManager_      = \"ITransactionManager\"     ;\r\n    bytes32 internal constant _IRateApprover_      = \"IRateApprover\"     ;\r\n\r\n    IContractAddressLocator private contractAddressLocator;\r\n\r\n    /**\r\n     * @dev Create the contract.\r\n     * @param _contractAddressLocator The contract address locator.\r\n     */\r\n    constructor(IContractAddressLocator _contractAddressLocator) internal {\r\n        require(_contractAddressLocator != address(0), \"locator is illegal\");\r\n        contractAddressLocator = _contractAddressLocator;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the contract address locator.\r\n     * @return The contract address locator.\r\n     */\r\n    function getContractAddressLocator() external view returns (IContractAddressLocator) {\r\n        return contractAddressLocator;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the contract address mapped to a given identifier.\r\n     * @param _identifier The identifier.\r\n     * @return The contract address.\r\n     */\r\n    function getContractAddress(bytes32 _identifier) internal view returns (address) {\r\n        return contractAddressLocator.getContractAddress(_identifier);\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @dev Determine whether or not the sender is relates to one of the identifiers.\r\n     * @param _identifiers The identifiers.\r\n     * @return Is the sender relates to one of the identifiers.\r\n     */\r\n    function isSenderAddressRelates(bytes32[] _identifiers) internal view returns (bool) {\r\n        return contractAddressLocator.isContractAddressRelates(msg.sender, _identifiers);\r\n    }\r\n\r\n    /**\r\n     * @dev Verify that the caller is mapped to a given identifier.\r\n     * @param _identifier The identifier.\r\n     */\r\n    modifier only(bytes32 _identifier) {\r\n        require(msg.sender == getContractAddress(_identifier), \"caller is illegal\");\r\n        _;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/authorization/interfaces/IAuthorizationDataSource.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n/**\r\n * @title Authorization Data Source Interface.\r\n */\r\ninterface IAuthorizationDataSource {\r\n    /**\r\n     * @dev Get the authorized action-role of a wallet.\r\n     * @param _wallet The address of the wallet.\r\n     * @return The authorized action-role of the wallet.\r\n     */\r\n    function getAuthorizedActionRole(address _wallet) external view returns (bool, uint256);\r\n\r\n    /**\r\n     * @dev Get the trade-limit and trade-class of a wallet.\r\n     * @param _wallet The address of the wallet.\r\n     * @return The trade-limit and trade-class of the wallet.\r\n     */\r\n    function getTradeLimitAndClass(address _wallet) external view returns (uint256, uint256);\r\n}\r\n\r\n// File: openzeppelin-solidity-v1.12.0/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity-v1.12.0/contracts/ownership/Claimable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to set the pendingOwner address.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() public onlyPendingOwner {\r\n    emit OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n}\r\n\r\n// File: contracts/wallet_trading_limiter/WalletsTradingLimiterBase.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Wallets Trading Limiter Base.\r\n */\r\ncontract WalletsTradingLimiterBase is IWalletsTradingLimiter, ContractAddressLocatorHolder, Claimable {\r\n    string public constant VERSION = \"1.0.0\";\r\n\r\n    /**\r\n     * @dev Create the contract.\r\n     * @param _contractAddressLocator The contract address locator.\r\n     */\r\n    constructor(IContractAddressLocator _contractAddressLocator) ContractAddressLocatorHolder(_contractAddressLocator) public {}\r\n\r\n    /**\r\n     * @dev Return the contract which implements the IAuthorizationDataSource interface.\r\n     */\r\n    function getAuthorizationDataSource() public view returns (IAuthorizationDataSource) {\r\n        return IAuthorizationDataSource(getContractAddress(_IAuthorizationDataSource_));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the contract which implements the IWalletsTradingDataSource interface.\r\n     */\r\n    function getWalletsTradingDataSource() public view returns (IWalletsTradingDataSource) {\r\n        return IWalletsTradingDataSource(getContractAddress(_IWalletsTradingDataSource_));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the contract which implements the IWalletsTradingLimiterValueConverter interface.\r\n     */\r\n    function getWalletsTradingLimiterValueConverter() public view returns (IWalletsTradingLimiterValueConverter) {\r\n        return IWalletsTradingLimiterValueConverter(getContractAddress(_IWalletsTradingLimiterValueConverter_));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the contract which implements the ITradingClasses interface.\r\n     */\r\n    function getTradingClasses() public view returns (ITradingClasses) {\r\n        return ITradingClasses(getContractAddress(_ITradingClasses_));\r\n    }\r\n\r\n    /**\r\n     * @dev Get the limiter value.\r\n     * @param _value The amount to be converted to the limiter value.\r\n     * @return The limiter value worth of the given amount.\r\n     */\r\n    function getLimiterValue(uint256 _value) public view returns (uint256);\r\n\r\n    /**\r\n     * @dev Get the contract locator identifier that is permitted to perform update wallet.\r\n     * @return The contract locator identifier.\r\n     */\r\n    function getUpdateWalletPermittedContractLocatorIdentifier() public pure returns (bytes32);\r\n\r\n    /**\r\n     * @dev Increment the limiter value of a wallet.\r\n     * @param _wallet The address of the wallet.\r\n     * @param _value The amount to be updated.\r\n     */\r\n    function updateWallet(address _wallet, uint256 _value) external only(getUpdateWalletPermittedContractLocatorIdentifier()) {\r\n        uint256 limiterValue =  getLimiterValue(_value);\r\n        (uint256 tradeLimit, uint256 tradeClass) = getAuthorizationDataSource().getTradeLimitAndClass(_wallet);\r\n        uint256 actualLimit = tradeLimit > 0 ? tradeLimit : getTradingClasses().getLimit(tradeClass);\r\n        getWalletsTradingDataSource().updateWallet(_wallet, limiterValue, actualLimit);\r\n    }\r\n}\r\n\r\n// File: contracts/saga-genesis/interfaces/IMintManager.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n/**\r\n * @title Mint Manager Interface.\r\n */\r\ninterface IMintManager {\r\n    /**\r\n     * @dev Return the current minting-point index.\r\n     */\r\n    function getIndex() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/saga-genesis/interfaces/ISGNConversionManager.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n/**\r\n * @title SGN Conversion Manager Interface.\r\n */\r\ninterface ISGNConversionManager {\r\n    /**\r\n     * @dev Compute the SGA worth of a given SGN amount at a given minting-point.\r\n     * @param _amount The amount of SGN.\r\n     * @param _index The minting-point index.\r\n     * @return The equivalent amount of SGA.\r\n     */\r\n    function sgn2sga(uint256 _amount, uint256 _index) external view returns (uint256);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/Math.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Math\r\n * @dev Assorted math operations\r\n */\r\nlibrary Math {\r\n  /**\r\n  * @dev Returns the largest of two numbers.\r\n  */\r\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  /**\r\n  * @dev Returns the smallest of two numbers.\r\n  */\r\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  /**\r\n  * @dev Calculates the average of two numbers. Since these are integers,\r\n  * averages of an even and odd number cannot be represented, and will be\r\n  * rounded down.\r\n  */\r\n  function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // (a + b) / 2 can overflow, so we distribute\r\n    return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: contracts/saga-genesis/SGNWalletsTradingLimiter.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Details of usage of licenced software see here: https://www.saga.org/software/readme_v1\r\n */\r\n\r\n/**\r\n * @title SGN Wallets Trading Limiter.\r\n */\r\ncontract SGNWalletsTradingLimiter is WalletsTradingLimiterBase {\r\n    string public constant VERSION = \"1.0.0\";\r\n\r\n    using SafeMath for uint256;\r\n    using Math for uint256;\r\n\r\n    /**\r\n     * @dev SGN minimum limiter value maximum resolution.\r\n     * @notice Allow for sufficiently-high resolution.\r\n     * @notice Prevents multiplication-overflow.\r\n     */\r\n    uint256 public constant MAX_RESOLUTION = 0x10000000000000000;\r\n\r\n    uint256 public sequenceNum = 0;\r\n    uint256 public sgnMinimumLimiterValueN = 0;\r\n    uint256 public sgnMinimumLimiterValueD = 0;\r\n\r\n    event SGNMinimumLimiterValueSaved(uint256 _sgnMinimumLimiterValueN, uint256 _sgnMinimumLimiterValueD);\r\n    event SGNMinimumLimiterValueNotSaved(uint256 _sgnMinimumLimiterValueN, uint256 _sgnMinimumLimiterValueD);\r\n\r\n    /**\r\n     * @dev Create the contract.\r\n     * @param _contractAddressLocator The contract address locator.\r\n     */\r\n    constructor(IContractAddressLocator _contractAddressLocator) WalletsTradingLimiterBase(_contractAddressLocator) public {}\r\n\r\n    /**\r\n     * @dev Return the contract which implements the ISGNConversionManager interface.\r\n     */\r\n    function getSGNConversionManager() public view returns (ISGNConversionManager) {\r\n        return ISGNConversionManager(getContractAddress(_ISGNConversionManager_));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the contract which implements the IMintManager interface.\r\n     */\r\n    function getMintManager() public view returns (IMintManager) {\r\n        return IMintManager(getContractAddress(_IMintManager_));\r\n    }\r\n\r\n    /**\r\n     * @dev Get the limiter value.\r\n     * @param _value The SGN amount to convert to limiter value.\r\n     * @return The limiter value worth of the given SGN amount.\r\n     */\r\n    function getLimiterValue(uint256 _value) public view returns (uint256){\r\n        uint256 sgnMinimumLimiterValue = calcSGNMinimumLimiterValue(_value);\r\n        uint256 sgnConversionValue = calcSGNConversionValue(_value);\r\n\r\n        return sgnConversionValue.max(sgnMinimumLimiterValue);\r\n    }\r\n\r\n    /**\r\n     * @dev Get the contract locator identifier that is permitted to perform update wallet.\r\n     * @return The contract locator identifier.\r\n     */\r\n    function getUpdateWalletPermittedContractLocatorIdentifier() public pure returns (bytes32){\r\n        return _ISGNTokenManager_;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate SGN minimum limiter value.\r\n     * @param _sgnAmount The given SGN amount.\r\n     * @return The calculated SGN minimum limiter value.\r\n     */\r\n    function calcSGNMinimumLimiterValue(uint256 _sgnAmount) public view returns (uint256) {\r\n        assert(sgnMinimumLimiterValueN > 0 && sgnMinimumLimiterValueD > 0);\r\n        return _sgnAmount.mul(sgnMinimumLimiterValueN) / sgnMinimumLimiterValueD;\r\n    }\r\n\r\n    /**\r\n     * @dev Set SGN minimum value.\r\n     * @param _sequenceNum The sequence-number of the operation.\r\n     * @param _sgnMinimumLimiterValueN The numerator of the SGN minimum limiter value.\r\n     * @param _sgnMinimumLimiterValueD The denominator of the SGN minimum limiter value.\r\n     */\r\n    function setSGNMinimumLimiterValue(uint256 _sequenceNum, uint256 _sgnMinimumLimiterValueN, uint256 _sgnMinimumLimiterValueD) external onlyOwner {\r\n        require(1 <= _sgnMinimumLimiterValueN && _sgnMinimumLimiterValueN <= MAX_RESOLUTION, \"SGN minimum limiter value numerator is out of range\");\r\n        require(1 <= _sgnMinimumLimiterValueD && _sgnMinimumLimiterValueD <= MAX_RESOLUTION, \"SGN minimum limiter value denominator is out of range\");\r\n\r\n        if (sequenceNum < _sequenceNum) {\r\n            sequenceNum = _sequenceNum;\r\n            sgnMinimumLimiterValueN = _sgnMinimumLimiterValueN;\r\n            sgnMinimumLimiterValueD = _sgnMinimumLimiterValueD;\r\n            emit SGNMinimumLimiterValueSaved(_sgnMinimumLimiterValueN, _sgnMinimumLimiterValueD);\r\n        }\r\n        else {\r\n            emit SGNMinimumLimiterValueNotSaved(_sgnMinimumLimiterValueN, _sgnMinimumLimiterValueD);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate SGN conversion value.\r\n     * @param _sgnAmount The SGN amount to convert to limiter value.\r\n     * @return The limiter value worth of the given SGN.\r\n     */\r\n    function calcSGNConversionValue(uint256 _sgnAmount) private view returns (uint256) {\r\n        uint256 sgaAmount = getSGNConversionManager().sgn2sga(_sgnAmount, getMintManager().getIndex());\r\n        return getWalletsTradingLimiterValueConverter().toLimiterValue(sgaAmount);\r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getSGNConversionManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sequenceNum\",\"type\":\"uint256\"},{\"name\":\"_sgnMinimumLimiterValueN\",\"type\":\"uint256\"},{\"name\":\"_sgnMinimumLimiterValueD\",\"type\":\"uint256\"}],\"name\":\"setSGNMinimumLimiterValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMintManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sequenceNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sgnAmount\",\"type\":\"uint256\"}],\"name\":\"calcSGNMinimumLimiterValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractAddressLocator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sgnMinimumLimiterValueD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUpdateWalletPermittedContractLocatorIdentifier\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTradingClasses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWalletsTradingDataSource\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWalletsTradingLimiterValueConverter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"getLimiterValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"updateWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sgnMinimumLimiterValueN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAuthorizationDataSource\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_RESOLUTION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_contractAddressLocator\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sgnMinimumLimiterValueN\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_sgnMinimumLimiterValueD\",\"type\":\"uint256\"}],\"name\":\"SGNMinimumLimiterValueSaved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sgnMinimumLimiterValueN\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_sgnMinimumLimiterValueD\",\"type\":\"uint256\"}],\"name\":\"SGNMinimumLimiterValueNotSaved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SGNWalletsTradingLimiter","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"6000","ConstructorArguments":"000000000000000000000000aabcd54faf94925adbe0df117c62961acecbacdb","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://71cd7bb6227c1af6d7d1cd06cf7cc1943a6ad85078560e230d8f272b89ee3d43"}]}