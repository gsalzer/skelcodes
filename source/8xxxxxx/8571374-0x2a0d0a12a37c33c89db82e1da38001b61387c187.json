{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.21 <0.6.0;\r\n\r\n//import \"./DataContract.sol\";\r\n// 彩票合约\r\ncontract LotteryShop{\r\n    //数据合约\r\n    //DataContract dataContract;\r\n    //购买彩票事件，在购买彩票方法中调用\r\n    event BuyLottery(address indexed buyer,uint money,uint16 luckNum);\r\n    //开奖事件，在开奖方法中调用\r\n    event DrawLottery(address winner,uint money,uint16 luckNum);\r\n\r\n    //购买记录（购买者的address, 彩票号码）\r\n    mapping(address=>uint) buyMapping;\r\n    //购买用户的地址\r\n    address payable[]  usrAdrList;\r\n\r\n    //管理员地址\r\n    address  manageAdr;\r\n    //合约地址\r\n    address payable contractAdr;\r\n    //数据合约地址\r\n    address payable dataContractAdr;\r\n    constructor() public {//address _dataContractAddr\r\n        //将合约部署人的地址保存起来作为管理员地址\r\n        manageAdr=msg.sender;\r\n        //将当前合约对象的地址保存\r\n        // contractAdr = address(this);\r\n        contractAdr = address(uint160(address(this)));// address(this);\r\n        //contractAdr = msg.sender;\r\n        //初始化构造数据合约\r\n        //dataContract = DataContract(_dataContractAddr);\r\n        //dataContractAdr = address(uint160(_dataContractAddr));\r\n\r\n    }\r\n\r\n    //0.1 显示管理员地址\r\n    /*function ShowManageAdr() constant returns(address){\r\n        return manageAdr;\r\n    }*/\r\n\r\n    //0.2 显示调用者的彩票数据\r\n    /*function ShowInvokerCaiPiao() constant returns(uint){\r\n        return buyMapping[msg.sender];\r\n    }*/\r\n    function ShowInvokerCaiPiao()  public view returns(uint){\r\n        return buyMapping[msg.sender];\r\n    }\r\n    function ShowInvokerBalance()  public view returns(uint){\r\n        return msg.sender.balance;\r\n    }\r\n\r\n    //0.3 显示管理员余额\r\n    /*function ShowManageBalance() constant returns(uint){\r\n        return manageAdr.balance;\r\n    }*/\r\n    function ShowManageBalance()  public view  returns(uint){\r\n        return manageAdr.balance;\r\n    }\r\n\r\n    //0.4 显示合约余额\r\n    /*function ShowContractMoney() constant returns(uint){\r\n        return contractAdr.balance;\r\n    }*/\r\n    function ShowContractMoney() public view returns(uint){\r\n        return contractAdr.balance;\r\n    }\r\n    function ShowContractAdr() public view returns(address payable){\r\n         return contractAdr;\r\n    }\r\n    function ShowManageAdr() public view returns(address){\r\n        return manageAdr;\r\n    }\r\n    //0.5 获取买家地址列表\r\n    function getAllUsrAddress() public view returns(address payable[] memory){\r\n        return usrAdrList;\r\n    }\r\n    //0.5 买彩票方法\r\n    function BuyCaiPiao(uint16 haoMa) payable public {\r\n        //0. 判断用户账户是否有1 eth\r\n        //require(msg.value == 1 ether);\r\n        //1. 判断彩票购买列表里是否已经存在当前用户\r\n        require(buyMapping[msg.sender]==0);\r\n\r\n        //2. 将用户的钱转到合约账户\r\n        //contractAdr.send(msg.value);\r\n        //dataContractAdr.transfer(msg.value);\r\n        //dataContract.setBlance2(msg.sender,msg.value);\r\n\r\n        //3.1 调用事件日志\r\n        emit BuyLottery(msg.sender,msg.value,haoMa);\r\n\r\n        //3.2 添加到mapping\r\n        buyMapping[msg.sender] = haoMa;\r\n        //3.3 将地址存入买家数组\r\n        usrAdrList.push(msg.sender);\r\n    }\r\n    //0.5 买彩票方法\r\n    /*function BuyCaiPiao(uint16 haoMa,uint etherValue) public {\r\n        //0. 判断用户账户是否有1 eth\r\n        require(etherValue == 1 ether);\r\n        //1. 判断彩票购买列表里是否已经存在当前用户\r\n        require(buyMapping[msg.sender]==0);\r\n        //2. 将用户的钱转到合约账户\r\n        //dataContract.setBlance(etherValue);\r\n        dataContract.setBlance2(msg.sender,etherValue);\r\n        //3.1 调用事件日志\r\n        emit BuyLottery(msg.sender,etherValue,haoMa);\r\n\r\n        //3.2 添加到mapping\r\n        buyMapping[msg.sender] = haoMa;\r\n        //3.3 将地址存入买家数组\r\n        usrAdrList.push(msg.sender);\r\n    }*/\r\n    //0.5 买彩票方法\r\n   /* function BuyCaiPiao(uint16 haoMa) payable public {\r\n        //0. 判断用户账户是否有1 eth\r\n        require(msg.value == 1 ether);\r\n        //1. 判断彩票购买列表里是否已经存在当前用户\r\n        require(buyMapping[msg.sender]==0);\r\n\r\n        //2. 将用户的钱转到合约账户\r\n        //contractAdr.send(msg.value);\r\n        // contractAdr.transfer(msg.value);\r\n\r\n        //3.1 调用事件日志\r\n        emit BuyLottery(msg.sender,msg.value,haoMa);\r\n\r\n        //3.2 添加到mapping\r\n        buyMapping[msg.sender] = haoMa;\r\n        //3.3 将地址存入买家数组\r\n        usrAdrList.push(msg.sender);\r\n    }*/\r\n\r\n    function KaiJiangTest()  public view returns(uint){\r\n        //1.生成一个随机的开奖号码\r\n        uint256 luckNum = uint256(keccak256(abi.encodePacked(block.difficulty,now)));\r\n        //1.1 取模10，保证奖号在10以内\r\n        luckNum = luckNum % 3;\r\n        return luckNum;\r\n    }\r\n\r\n\r\n    //1. 开奖 - 必须是管理员才能操作\r\n    function KaiJiang() adminOnly public returns(uint){\r\n\r\n        //1.生成一个随机的开奖号码\r\n        uint256 luckNum = uint256(keccak256(abi.encodePacked(block.difficulty,now)));\r\n        //1.1 取模10，保证奖号在10以内\r\n        luckNum = luckNum % 3;\r\n\r\n        //开场费\r\n        //emit DrawLottery( msg.sender,contractAdr.balance*0.001,uint16(luckNum));\r\n        //msg.sender.transfer(contractAdr.balance*0.001);\r\n\r\n        address payable tempAdr;\r\n        //2.循环用户地址数组\r\n        for(uint32 i=0; i< usrAdrList.length;i++){\r\n            tempAdr = usrAdrList[i];\r\n            //2.1 判断用户地址 在 mapping中 对应的 CaiPiao.hao 的数字是否一样\r\n            if(buyMapping[tempAdr] == luckNum){\r\n                //2.2 记录日志\r\n                emit DrawLottery(tempAdr,(contractAdr.balance),uint16(luckNum));\r\n                //2.3 将合约里所有的钱转给 中奖账户地址\r\n               // tempAdr.send(contractAdr.balance);\r\n                tempAdr.transfer((contractAdr.balance));\r\n                //2.4 提手续费\r\n                //emit DrawLottery(msg.sender,1 ether,uint16(luckNum));\r\n                //msg.sender.transfer(1 ether);\r\n\r\n                //emit DrawLottery(tempAdr,msg.value,uint16(luckNum));\r\n                //tempAdr.transfer(msg.value);\r\n                break;\r\n            }\r\n        }\r\n        //3.返回 中奖号码\r\n        return luckNum;\r\n    }\r\n\r\n    //2. 重置数据\r\n    function resetData() adminOnly public{\r\n        //2.1 循环 买家数组，删除 购买记录mapping中对应的记录\r\n        for(uint16 i = 0;i<usrAdrList.length;i++){\r\n            delete buyMapping[usrAdrList[i]];\r\n        }\r\n        //2.2 删除 买家数组\r\n        delete usrAdrList;\r\n    }\r\n\r\n    //3. 销毁合约\r\n    function kill() adminOnly public{\r\n        //3.1 调用合约自毁函数，把合约账户余额转给当前调用者（管理员）\r\n        selfdestruct(msg.sender);\r\n    }\r\n\r\n    //4. 管理员修饰符，只允许管理员操作\r\n    modifier adminOnly() {\r\n        require(msg.sender == manageAdr);\r\n        //代码修饰器所修饰函数的代码\r\n        _;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ShowManageAdr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ShowManageBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"haoMa\",\"type\":\"uint16\"}],\"name\":\"BuyCaiPiao\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resetData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ShowInvokerCaiPiao\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ShowContractMoney\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KaiJiangTest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"KaiJiang\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllUsrAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ShowContractAdr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ShowInvokerBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"money\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"luckNum\",\"type\":\"uint16\"}],\"name\":\"BuyLottery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"money\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"luckNum\",\"type\":\"uint16\"}],\"name\":\"DrawLottery\",\"type\":\"event\"}]","ContractName":"LotteryShop","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://28bb9743d890f66169629eb9fb3fa432b1bf90959a6c1ee1ed3f2d3004a8714b"}]}