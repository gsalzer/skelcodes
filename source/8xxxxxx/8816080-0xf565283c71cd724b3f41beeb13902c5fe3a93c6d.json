{"status":"1","message":"OK","result":[{"SourceCode":"\n// File: contracts/openzeppelin-contracts/contracts/GSN/Context.sol\n\npragma solidity ^0.5.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// File: contracts/openzeppelin-contracts/contracts/access/Roles.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev Give an account access to this role.\n     */\n    function add(Role storage role, address account) internal {\n        require(!has(role, account), \"Roles: account already has role\");\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev Remove an account's access to this role.\n     */\n    function remove(Role storage role, address account) internal {\n        require(has(role, account), \"Roles: account does not have role\");\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev Check if an account has this role.\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0), \"Roles: account is the zero address\");\n        return role.bearer[account];\n    }\n}\n\n// File: contracts/openzeppelin-contracts/contracts/access/roles/PauserRole.sol\n\npragma solidity ^0.5.0;\n\n\n\ncontract PauserRole is Context {\n    using Roles for Roles.Role;\n\n    event PauserAdded(address indexed account);\n    event PauserRemoved(address indexed account);\n\n    Roles.Role private _pausers;\n\n    constructor () internal {\n        _addPauser(_msgSender());\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(_msgSender()), \"PauserRole: caller does not have the Pauser role\");\n        _;\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n\n    function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }\n\n    function renouncePauser() public {\n        _removePauser(_msgSender());\n    }\n\n    function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n}\n\n// File: contracts/openzeppelin-contracts/contracts/lifecycle/Pausable.sol\n\npragma solidity ^0.5.0;\n\n\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\ncontract Pausable is Context, PauserRole {\n    /**\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\n     * to the deployer.\n     */\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused, \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused, \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Called by a pauser to pause, triggers stopped state.\n     */\n    function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Called by a pauser to unpause, returns to normal state.\n     */\n    function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n\n// File: contracts/openzeppelin-contracts/contracts/access/roles/WhitelistAdminRole.sol\n\npragma solidity ^0.5.0;\n\n\n\n/**\n * @title WhitelistAdminRole\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\n */\ncontract WhitelistAdminRole is Context {\n    using Roles for Roles.Role;\n\n    event WhitelistAdminAdded(address indexed account);\n    event WhitelistAdminRemoved(address indexed account);\n\n    Roles.Role private _whitelistAdmins;\n\n    constructor () internal {\n        _addWhitelistAdmin(_msgSender());\n    }\n\n    modifier onlyWhitelistAdmin() {\n        require(isWhitelistAdmin(_msgSender()), \"WhitelistAdminRole: caller does not have the WhitelistAdmin role\");\n        _;\n    }\n\n    function isWhitelistAdmin(address account) public view returns (bool) {\n        return _whitelistAdmins.has(account);\n    }\n\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\n        _addWhitelistAdmin(account);\n    }\n\n    function renounceWhitelistAdmin() public {\n        _removeWhitelistAdmin(_msgSender());\n    }\n\n    function _addWhitelistAdmin(address account) internal {\n        _whitelistAdmins.add(account);\n        emit WhitelistAdminAdded(account);\n    }\n\n    function _removeWhitelistAdmin(address account) internal {\n        _whitelistAdmins.remove(account);\n        emit WhitelistAdminRemoved(account);\n    }\n}\n\n// File: contracts/SmartFly.sol\n\npragma solidity ^0.5.0;\n\n\n\ncontract SmartFly is WhitelistAdminRole, Pausable {\n\n  mapping(bytes32 => Insurance[]) private insuranceList;\n\n  enum InsuranceStatus {\n    NONE,\n    Active,\n    FlightOnTime,\n    CustomerCompensationPaid,\n    CustomerCompensationWaiting\n  }\n\n\n  struct Insurance {\n    bytes32          insuranceId;\n    uint256          customerId;\n    uint256          plannedDepartureTime;\n    uint256          actualDepartureTime;\n    InsuranceStatus  status;\n  }\n\n\n  event InsuranceCreation(\n    bytes32         indexed flightId,\n    bytes32         indexed insuranceId,\n    uint256         indexed customerId,\n    uint256                 plannedDepartureTime,\n    uint256                 actualDepartureTime,\n    InsuranceStatus         status\n  );\n\n\n  event InsuranceUpdate(\n    bytes32         indexed flightId,\n    bytes32                 insuranceId,\n    uint256         indexed customerId,\n    uint256                 plannedDepartureTime,\n    uint256                 actualDepartureTime,\n    InsuranceStatus indexed status\n  );\n\n  function getInsurancesCount (bytes32 flightId) public view onlyWhitelistAdmin whenNotPaused\n    returns (uint256)\n  {\n    return insuranceList[flightId].length;\n  }\n\n\n  function addNewInsurance(\n    bytes32          flightId,\n    bytes32          insuranceId,\n    uint256          customerId,\n    uint256          plannedDepartureTime,\n    uint256          actualDepartureTime\n  ) public onlyWhitelistAdmin whenNotPaused {\n\n    _addNewInsurance(flightId, insuranceId, customerId, plannedDepartureTime, actualDepartureTime, InsuranceStatus.Active);\n  }\n\n\n  function _addNewInsurance (\n    bytes32          flightId,\n    bytes32          insuranceId,\n    uint256          customerId,\n    uint256          plannedDepartureTime,\n    uint256          actualDepartureTime,\n    InsuranceStatus  status\n  ) internal onlyWhitelistAdmin whenNotPaused {\n\n    Insurance memory newInsurance;\n    newInsurance.insuranceId = insuranceId;\n    newInsurance.customerId = customerId;\n    newInsurance.plannedDepartureTime = plannedDepartureTime;\n    newInsurance.actualDepartureTime = actualDepartureTime;\n    newInsurance.status = status;\n\n    insuranceList[flightId].push(newInsurance);\n    emit InsuranceCreation(flightId, insuranceId, customerId, plannedDepartureTime, actualDepartureTime, status);\n  }\n\n\n  function getInsuranceDetails(bytes32 flightId, uint index) public view onlyWhitelistAdmin whenNotPaused\n    returns(\n      bytes32          insuranceId,\n      uint256          customerId,\n      uint256          plannedDepartureTime,\n      uint256          actualDepartureTime,\n      InsuranceStatus  status)\n  {\n\n    require(insuranceList[flightId].length > 0 && (insuranceList[flightId].length - 1) >= index, \"There's no Insurance on this flightId.\");\n\n    insuranceId = insuranceList[flightId][index].insuranceId;\n    customerId = insuranceList[flightId][index].customerId;\n    plannedDepartureTime = insuranceList[flightId][index].plannedDepartureTime;\n    actualDepartureTime = insuranceList[flightId][index].actualDepartureTime;\n    status = insuranceList[flightId][index].status;\n  }\n\n\n  function updateInsurance(\n    bytes32 flightId,\n    uint    index,\n    bytes32 insuranceId,\n    uint256 customerId,\n    uint256 plannedDepartureTime,\n    uint256 actualDepartureTime,\n    InsuranceStatus status\n  ) public onlyWhitelistAdmin whenNotPaused\n    returns (bool)\n  {\n    require(insuranceList[flightId].length > 0 && (insuranceList[flightId].length - 1) >= index, \"There's no Insurance on this flightId.\");\n\n    insuranceList[flightId][index].insuranceId = insuranceId;\n    insuranceList[flightId][index].customerId = customerId;\n    insuranceList[flightId][index].plannedDepartureTime = plannedDepartureTime;\n    insuranceList[flightId][index].actualDepartureTime = actualDepartureTime;\n    insuranceList[flightId][index].status = status;\n\n    emit InsuranceUpdate(flightId, insuranceId, customerId, plannedDepartureTime, actualDepartureTime, status);\n\n    return true;\n  }\n\n}\n","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"flightId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"insuranceId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"customerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"plannedDepartureTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualDepartureTime\",\"type\":\"uint256\"}],\"name\":\"addNewInsurance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"flightId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"insuranceId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"customerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"plannedDepartureTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualDepartureTime\",\"type\":\"uint256\"},{\"internalType\":\"enum SmartFly.InsuranceStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"updateInsurance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"flightId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getInsuranceDetails\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"insuranceId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"customerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"plannedDepartureTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualDepartureTime\",\"type\":\"uint256\"},{\"internalType\":\"enum SmartFly.InsuranceStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelistAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"flightId\",\"type\":\"bytes32\"}],\"name\":\"getInsurancesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"flightId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"insuranceId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"customerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"plannedDepartureTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualDepartureTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum SmartFly.InsuranceStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"InsuranceCreation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"flightId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"insuranceId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"customerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"plannedDepartureTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualDepartureTime\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum SmartFly.InsuranceStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"InsuranceUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminRemoved\",\"type\":\"event\"}]","ContractName":"SmartFly","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"","SwarmSource":"bzzr://83199dbd9bbb1325b90c75fa4113fa63c3a7bbfe7ceb5c68fb1ad0b5ec82b6d2"}]}