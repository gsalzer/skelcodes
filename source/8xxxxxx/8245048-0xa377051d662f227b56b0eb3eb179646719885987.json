{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.5;\r\n \r\n \r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = tx.origin;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n \r\ninterface ERC20 {  \r\n    function balanceOf(address _owner) external view returns (uint256 balance); \r\n    function transfer(address _to, uint256 _value) external returns (bool success) ; \r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success); \r\n    function approve(address _spender, uint256 _value) external returns (bool success); \r\n    function allowance(address _owner, address _spender) view external returns (uint256 remaining); \r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IDex { \r\n    function airdrop(address to,address token,uint256 amount) external;  \r\n    function depositToken(address token, uint256 amount)    external;  \r\n    function deposit() payable external;  \r\n    function withdraw(address token) external;\r\n    function authorizedWithdraw(address to,address token,uint256 amount,uint256 nonce,uint expiredTime,address relayer,uint8 v, bytes32 r,bytes32 s) external;\r\n    function submitWithdrawApplication()  external;\r\n    function cancelWithdrawApplication()  external;\r\n    function balanceOf(address token, address user) view external returns(uint256);\r\n }\r\n\r\n/** \r\n*  @dev   a lite version airdrop for dex \r\n*/ \r\ncontract LiteAirdrop is Ownable {  \r\n\r\n    using SafeMath for uint256;\r\n    \r\n    address public _dex;   \r\n \r\n    mapping( bytes32=> bool)  _claims;\r\n    mapping (address=> bool)  _relayers;\r\n \r\n    event DepositDex(address indexed token, address indexed user, uint256 amount, uint256 beforeBalance,uint256 balance);\r\n    event WithdrawDex(address indexed token,address indexed user, uint256 amount, uint256 beforeBalance,uint256 balance); \r\n    event Drop(address indexed token,address sender,address recipient,uint256 amount);\r\n    event Claim(address indexed user,address indexed token,uint256 amount,uint256 nonce); \r\n\r\n\r\n    modifier onlyDEXisSet() {\r\n        require( _dex != address(0));\r\n        _;\r\n    }  \r\n\r\n    constructor(address dex) public {\r\n        _dex = dex;\r\n    }\r\n\r\n\r\n    /** \r\n    *  @dev set dex \r\n    */ \r\n    function setDex(address dex) public \r\n        onlyOwner \r\n    {\r\n        _dex = dex;\r\n    }   \r\n\r\n    /** \r\n    *  @dev set a relayer\r\n    */ \r\n    function setRelayer(address relayer, bool isRelayer) public \r\n        onlyOwner \r\n    {\r\n        _relayers[relayer] = isRelayer;\r\n    }  \r\n    \r\n    /** \r\n    *  @dev withdraw \r\n    */ \r\n    function withdraw(address token) public \r\n        onlyOwner  \r\n   {    \r\n       if(token == address(0))\r\n       {\r\n            msg.sender.transfer(address(this).balance); \r\n       }else{\r\n            uint256 amount = ERC20(token).balanceOf(address(this));\r\n            ERC20(token).transfer(msg.sender,amount);  \r\n       }  \r\n    } \r\n\r\n    /** \r\n    *  @dev withdraw from dex\r\n    */ \r\n    function withdrawFromDex(address token) public \r\n        onlyOwner \r\n        onlyDEXisSet\r\n   {  \r\n       uint256 balance = _balanceOfDex(token);\r\n     \r\n       require(balance != 0);\r\n\r\n       IDex(_dex).withdraw(token);  \r\n\r\n       if(token == address(0))\r\n       {\r\n            msg.sender.transfer(balance); \r\n       }else{\r\n            ERC20(token).transfer(msg.sender,balance);  \r\n       } \r\n\r\n       emit WithdrawDex(token,msg.sender,balance,balance,0); \r\n    }  \r\n\r\n    /** \r\n    *  @dev withdraw from dex\r\n    */ \r\n    function authorizedWithdraw(address token,uint256 amount,uint256 nonce,uint expiredTime,address relayer,uint8 v, bytes32 r,bytes32 s) \r\n        public       \r\n        onlyOwner \r\n        onlyDEXisSet\r\n    {\r\n        uint256 beforeBalance = _balanceOfDex(token);\r\n\r\n        require(beforeBalance >= amount);\r\n\r\n        IDex(_dex).authorizedWithdraw(address(this),token,amount,nonce,expiredTime,relayer,v, r,s );  \r\n\r\n        if(token == address(0))\r\n        {\r\n            msg.sender.transfer(amount); \r\n        }else{\r\n            ERC20(token).transfer(msg.sender,amount);  \r\n        } \r\n\r\n        uint256 balance = _balanceOfDex(token);\r\n\r\n        emit WithdrawDex(token,msg.sender,amount,beforeBalance,balance);   \r\n    }\r\n\r\n    /** \r\n    *  @dev deposit eth to dex\r\n    */ \r\n    function() payable external \r\n        onlyDEXisSet\r\n    {\r\n        uint256 beforeBalance = _balanceOfDex(address(0));\r\n\r\n        IDex(_dex).deposit.value(msg.value); \r\n        emit DepositDex(address(0), msg.sender, msg.value,beforeBalance,_balanceOfDex(address(0)));  \r\n    } \r\n\r\n    /** \r\n    *  @dev depositToDex,call approve before this call\r\n    */ \r\n    function depositToDex(address token,uint256 amount) public  \r\n        onlyDEXisSet\r\n   { \r\n        uint256 beforeBalance = _balanceOfDex(token);\r\n\r\n        require(token != address(0));\r\n        \r\n        require(ERC20(token).transferFrom(msg.sender,address(this),amount)); \r\n\r\n        require(ERC20(token).approve(address(_dex),amount));\r\n\r\n        IDex(_dex).depositToken(token,amount); \r\n \r\n        uint256 balance = _balanceOfDex(token);\r\n\r\n        emit DepositDex(token, msg.sender, amount,beforeBalance,balance); \r\n    }  \r\n\r\n    /** \r\n    *  @dev _balanceOfDex\r\n    */ \r\n    function _balanceOfDex(address token) view internal \r\n        returns(uint256) \r\n    { \r\n        return IDex(_dex).balanceOf(token,address(this));\r\n    }\r\n\r\n    /** \r\n    *  @dev _airdrop\r\n    */ \r\n    function _airdrop(address to,address token,uint256 amount) internal \r\n        returns(uint256) \r\n    { \r\n        IDex(_dex).airdrop(to,token,amount);\r\n    }\r\n  \r\n     /** \r\n    *  @dev multi drop\r\n    */ \r\n    function drops(address token,address[] memory recipients,uint256[] memory amounts) public \r\n        onlyOwner\r\n        onlyDEXisSet\r\n    { \r\n        uint256 total = 0;\r\n        for(uint256 i =0; i < recipients.length; i++){ \r\n           total = total.add(amounts[i]);\r\n        } \r\n\r\n       require(_balanceOfDex(token) >= total);\r\n\r\n       for(uint256 i =0; i < recipients.length; i++){  \r\n\r\n           _airdrop(recipients[i],token,amounts[i]);\r\n \r\n           emit Drop(token,msg.sender,recipients[i],amounts[i]);\r\n       } \r\n    } \r\n\r\n     /** \r\n    *  @dev drop\r\n    */ \r\n    function drop(address token,address recipient,uint256 amount)       public \r\n        onlyOwner\r\n        onlyDEXisSet \r\n    {  \r\n        require(_balanceOfDex(token) >= amount);\r\n\r\n        _airdrop(recipient,token,amount);  \r\n\r\n        emit Drop(token,msg.sender,recipient,amount); \r\n    }   \r\n\r\n     /** \r\n    *  @dev submitWithdrawApplication\r\n    */ \r\n    function submitWithdrawApplication() public \r\n        onlyOwner \r\n    {\r\n        IDex(_dex).submitWithdrawApplication(); \r\n    } \r\n\r\n     /** \r\n    *  @dev cancelWithdrawApplication\r\n    */ \r\n    function cancelWithdrawApplication() public \r\n    onlyOwner\r\n    {\r\n        IDex(_dex).cancelWithdrawApplication(); \r\n    }\r\n\r\n     /** \r\n    *  @dev user claim the token to dex account\r\n    */  \r\n    function claim(address user,address token,uint256 amount,uint256 nonce,uint expiredTime,address relayer,uint8 v, bytes32 r,bytes32 s) public \r\n    {\r\n        require(_relayers[relayer] == true);\r\n        require(expiredTime >= block.timestamp);\r\n\r\n        bytes32 hash = keccak256(abi.encodePacked(this,user, token, amount, nonce, expiredTime));\r\n        \r\n        if (_claims[hash]) {\r\n            revert(\"The task have been canceled or executed!\");    \r\n        }    \r\n\r\n        if (ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)), v, r, s) != relayer) {\r\n            revert(\"Wrong sign!\");\r\n        } \r\n \r\n        _claims[hash] = true; \r\n\r\n        _airdrop(user,token,amount); \r\n \r\n        emit Claim(user,token,amount,nonce); \r\n    }\r\n\r\n     /** \r\n    *  @dev user cancel claim\r\n    */ \r\n    function cancelClaim(address user,address token,uint256 amount,uint256 nonce,uint expiredTime,address relayer,uint8 v, bytes32 r,bytes32 s) public \r\n    {\r\n        require(_relayers[relayer] == true);\r\n        require(expiredTime >= block.timestamp); \r\n\r\n        bytes32 hash = keccak256(abi.encodePacked(this,user, token, amount, nonce, expiredTime));\r\n        \r\n        if (_claims[hash]) {\r\n            revert(\"The task have been canceled or executed!\");    \r\n        }    \r\n\r\n        if (ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)), v, r, s) != relayer) {\r\n            revert(\"Wrong sign!\");\r\n        } \r\n \r\n        _claims[hash] = true; \r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"cancelWithdrawApplication\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dex\",\"type\":\"address\"}],\"name\":\"setDex\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"expiredTime\",\"type\":\"uint256\"},{\"name\":\"relayer\",\"type\":\"address\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"cancelClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"drop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"recipients\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"drops\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"submitWithdrawApplication\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"expiredTime\",\"type\":\"uint256\"},{\"name\":\"relayer\",\"type\":\"address\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"expiredTime\",\"type\":\"uint256\"},{\"name\":\"relayer\",\"type\":\"address\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"authorizedWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToDex\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_dex\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"relayer\",\"type\":\"address\"},{\"name\":\"isRelayer\",\"type\":\"bool\"}],\"name\":\"setRelayer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawFromDex\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"dex\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"beforeBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"DepositDex\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"beforeBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"WithdrawDex\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Drop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"LiteAirdrop","CompilerVersion":"v0.5.5+commit.47a71e8f","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"000000000000000000000000ababb61a9f837aad53ed4320221737fc6e9dc84b","Library":"","SwarmSource":"bzzr://693f0268cb104303e14d07b8e63ae264d24c048b8e2914e0a3f08993ce5125f1"}]}