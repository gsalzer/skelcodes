{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.11;\r\n\r\n\r\ninterface DharmaSmartWalletFactoryV1Interface {\r\n  function getNextSmartWallet(\r\n    address userSigningKey\r\n  ) external view returns (address wallet);\r\n}\r\n\r\n\r\ninterface DharmaKeyRingFactoryV1Interface {\r\n   function getNextKeyRing(\r\n    address userSigningKey\r\n  ) external view returns (address keyRing);\r\n}\r\n\r\n\r\ninterface DharmaSmartWalletImplementationV0Interface {\r\n  function getUserSigningKey() external view returns (address userSigningKey);\r\n}\r\n\r\n\r\n/**\r\n * @title FactoryFactFinder\r\n * @author 0age\r\n * @notice This contract facilitates determining information on counterfactual\r\n * deployment addresses, as well as current deployment statuses, of Dharma Smart\r\n * Wallet + Dharma Key Ring pairs.\r\n */\r\ncontract FactoryFactFinder {\r\n  DharmaSmartWalletFactoryV1Interface private constant _smartWalletFactory = (\r\n    DharmaSmartWalletFactoryV1Interface(\r\n      0xfc00C80b0000007F73004edB00094caD80626d8D\r\n    )\r\n  );\r\n\r\n  DharmaKeyRingFactoryV1Interface private constant _keyRingFactory = (\r\n    DharmaKeyRingFactoryV1Interface(\r\n      0x00DD005247B300f700cFdfF89C00e2aCC94c7b00\r\n    )\r\n  );\r\n\r\n  /**\r\n   * @notice View function to find the address of the next key ring address that\r\n   * will be deployed when supplying a given initial user signing key. Note that\r\n   * a new value will be returned if a particular user signing key has been used\r\n   * before.\r\n   * @param userSigningKey address The user signing key, supplied as a\r\n   * constructor argument.\r\n   * @return The future address of the next key ring (with the user signing key\r\n   * as its input) and of the next smart wallet (with the key ring address as\r\n   * its input).\r\n   */\r\n  function getNextKeyRingAndSmartWallet(\r\n    address userSigningKey\r\n  ) external view returns (address keyRing, address smartWallet) {\r\n    // Ensure that a user signing key has been provided.\r\n    require(userSigningKey != address(0), \"No user signing key supplied.\");\r\n\r\n    // Get the next key ring address based on the signing key.\r\n    keyRing = _keyRingFactory.getNextKeyRing(userSigningKey);\r\n    \r\n    // Determine the next smart wallet address based on the key ring address.\r\n    smartWallet = _smartWalletFactory.getNextSmartWallet(keyRing);\r\n  }\r\n\r\n  /**\r\n   * @notice View function to determine whether a given smart wallet has been\r\n   * deployed as well as whether the corresponding keyring contract still needs\r\n   * to be deployed for the smart wallet.\r\n   * @return Two booleans, indicating if the smart wallet and/or the keyring are\r\n   * deployed or not, and the address of the keyring. Note that keyRing and\r\n   * keyRingDeployed will always return the null address and false in the event\r\n   * that the smart wallet has not been deployed yet.\r\n   */\r\n  function getDeploymentStatuses(\r\n    address smartWallet\r\n  ) external view returns (\r\n    bool smartWalletDeployed,\r\n    bool keyRingDeployed,\r\n    address keyRing\r\n  ) {\r\n    // Ensure that a smart wallet address has been provided.\r\n    require(smartWallet != address(0), \"No smart wallet supplied.\");\r\n\r\n    // Determine if the smart wallet has been deployed.\r\n    smartWalletDeployed = _hasContractCode(smartWallet);\r\n    \r\n    // Get keyring address and deployment status if smart wallet is deployed.\r\n    if (smartWalletDeployed) {\r\n      keyRing = DharmaSmartWalletImplementationV0Interface(\r\n        smartWallet\r\n      ).getUserSigningKey();\r\n\r\n      keyRingDeployed = _hasContractCode(keyRing);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice View function to determine if a given account contains contract\r\n   * code.\r\n   * @return True if a contract is deployed at the address with code.\r\n   */\r\n  function hasContractCode(address target) external view returns (bool) {\r\n    return _hasContractCode(target);\r\n  }\r\n\r\n  /**\r\n   * @notice Internal view function to determine if a given account contains\r\n   * contract code.\r\n   * @return True if a contract is deployed at the address with code.\r\n   */\r\n  function _hasContractCode(address target) internal view returns (bool) {\r\n    uint256 size;\r\n    assembly { size := extcodesize(target) }\r\n    return size > 0;\r\n  }  \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"smartWallet\",\"type\":\"address\"}],\"name\":\"getDeploymentStatuses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"smartWalletDeployed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"keyRingDeployed\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"keyRing\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"hasContractCode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userSigningKey\",\"type\":\"address\"}],\"name\":\"getNextKeyRingAndSmartWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"keyRing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"smartWallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"FactoryFactFinder","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://ec6b243b3dab988833794a77e8151a6d25023097a2388c5ba0407b09a53bd9ea"}]}