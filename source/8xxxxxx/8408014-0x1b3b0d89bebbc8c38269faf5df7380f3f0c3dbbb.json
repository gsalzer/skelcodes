{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/meta-oracles/lib/TimeSeriesStateLibrary.sol\r\n\r\n/*\r\n    Copyright 2019 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\n\r\npragma solidity 0.5.7;\r\n\r\n\r\n/**\r\n * @title TimeSeriesStateLibrary\r\n * @author Set Protocol\r\n *\r\n * Library defining TimeSeries state struct\r\n */\r\nlibrary TimeSeriesStateLibrary {\r\n    struct State {\r\n        uint256 nextEarliestUpdate;\r\n        uint256 updateInterval;\r\n        uint256[] timeSeriesDataArray;\r\n    }\r\n}\r\n\r\n// File: contracts/meta-oracles/interfaces/ITimeSeriesFeed.sol\r\n\r\n/*\r\n    Copyright 2019 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\n\r\npragma solidity 0.5.7;\r\n\r\n\r\n/**\r\n * @title ITimeSeriesFeed\r\n * @author Set Protocol\r\n *\r\n * Interface for interacting with TimeSeriesFeed contract\r\n */\r\ninterface ITimeSeriesFeed {\r\n\r\n    /*\r\n     * Query linked list for specified days of data. Will revert if number of days\r\n     * passed exceeds amount of days collected.\r\n     *\r\n     * @param  _dataDays            Number of dats of data being queried\r\n     */\r\n    function read(\r\n        uint256 _dataDays\r\n    )\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    function nextEarliestUpdate()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function updateInterval()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getTimeSeriesFeedState()\r\n        external\r\n        view\r\n        returns (TimeSeriesStateLibrary.State memory);\r\n}\r\n\r\n// File: contracts/meta-oracles/MovingAverageOracleV2.sol\r\n\r\n/*\r\n    Copyright 2019 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\n\r\npragma solidity 0.5.7;\r\npragma experimental \"ABIEncoderV2\";\r\n\r\n\r\n\r\n\r\n/**\r\n * @title MovingAverageOracleV2\r\n * @author Set Protocol\r\n *\r\n * Contract used calculate moving average of data points provided by other on-chain\r\n * price feed and return to querying contract.\r\n * CHANGELOG:\r\n *  - Updated from version one to read from ITimeSeriesFeed\r\n *  - Outputs uint256 instead of bytes\r\n *  - getSourceMedianizer() function removed.\r\n */\r\ncontract MovingAverageOracleV2 {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /* ============ State Variables ============ */\r\n    string public dataDescription;\r\n    ITimeSeriesFeed public timeSeriesFeedInstance;\r\n\r\n    /* ============ Constructor ============ */\r\n\r\n    /*\r\n     * MovingAverageOracleV2 constructor.\r\n     * Contract used calculate moving average of data points provided by other on-chain\r\n     * price feed and return to querying contract\r\n     *\r\n     * @param  _timeSeriesFeed          TimeSeriesFeed to get list of data from\r\n     * @param  _dataDescription         Description of data\r\n     */\r\n    constructor(\r\n        ITimeSeriesFeed _timeSeriesFeed,\r\n        string memory _dataDescription\r\n    )\r\n        public\r\n    {\r\n        timeSeriesFeedInstance = _timeSeriesFeed;\r\n\r\n        dataDescription = _dataDescription;\r\n    }\r\n\r\n    /*\r\n     * Get moving average over defined amount of data points by querying price feed and\r\n     * averaging returned data. Returns uint256.\r\n     *\r\n     * @param  _dataPoints       Number of data points to create average from\r\n     * @returns                  Moving average for passed number of _dataPoints\r\n     */\r\n    function read(\r\n        uint256 _dataPoints\r\n    )\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        // Get data from price feed\r\n        uint256[] memory dataArray = timeSeriesFeedInstance.read(_dataPoints);\r\n\r\n        // Sum data retrieved from daily price feed\r\n        uint256 dataSum = 0;\r\n        for (uint256 i = 0; i < dataArray.length; i++) {\r\n            dataSum = dataSum.add(dataArray[i]);\r\n        }\r\n\r\n        // Return average price\r\n        return dataSum.div(_dataPoints);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"dataDescription\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeSeriesFeedInstance\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_dataPoints\",\"type\":\"uint256\"}],\"name\":\"read\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_timeSeriesFeed\",\"type\":\"address\"},{\"name\":\"_dataDescription\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"MovingAverageOracleV2","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004c1b936cc1ffcb073495cc9503b6f0448b76f2380000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000a4554484461696c794d4100000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://8ac3d5d9ca2d49c46115d22fb45d34c4f9963ab6921411358beac4cdfd66012c"}]}