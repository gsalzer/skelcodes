{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public constant returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public constant returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    \r\n}\r\n\r\ncontract IPFSNETS is ERC20 {\r\n    \r\n    using SafeMath for uint256; \r\n    address owner = msg.sender; \r\n    bool public key;\r\n\t\r\n    mapping (address => uint256) balances; \r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    \r\n    mapping (address => bool) public frozenAccount;\r\n    \r\n    \r\n    mapping (address => uint256) times;\r\n    mapping (address => mapping (uint256 => uint256)) locknum;\r\n    mapping (address => mapping (uint256 => uint256)) locktime;\r\n    mapping (address => mapping (uint256 => uint256)) lockdays;\r\n    mapping (address => mapping (uint256 => uint256)) releasepoint;\r\n\r\n    string public constant name = \"IPFSNETS\";\r\n    string public constant symbol = \"NETS\";\r\n    uint public constant decimals = 18;\r\n    uint256 _Rate = 10 ** decimals; \r\n    uint256 public totalSupply = 100000000 * _Rate;\r\n\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event FrozenFunds(address target, bool frozen);\r\n\r\n\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyPayloadSize(uint size) {\r\n        require(key);\r\n        assert(msg.data.length >= size + 4);\r\n        _;\r\n    }\r\n\r\n     function IPFSNETS(bytes32 _key) public {\r\n        key = keccak256(name,symbol)==_key;\r\n        owner = msg.sender;\r\n        balances[owner] = totalSupply;\r\n    }\r\n    \r\n     function nowInSeconds() public view returns (uint256){\r\n        return now;\r\n    }\r\n    \r\n    //基础功能\r\n     function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {\r\n        \r\n        require( frozenAccount[_to] == false && frozenAccount[msg.sender] == false);\r\n        require(_to != address(0));\r\n        require(_amount <= (balances[msg.sender].sub(lockOf(msg.sender))));\r\n                      \r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n\t\t\r\n        Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    } \r\n    \r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    } \r\n    \r\n    function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {\r\n        \r\n        require( frozenAccount[_to] == false && frozenAccount[ _from] == false);\r\n        require(_to != address(0));\r\n        require(_amount <= balances[_from]);\r\n        require(_amount <= balances[_from].sub(lockOf(msg.sender)));\r\n        require(_amount <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_amount);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Transfer(_from, _to, _amount);\r\n        return true;\r\n    }  \r\n    \r\n    function allowance(address _owner, address _spender) constant public returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }    \r\n    \r\n    function balanceOf(address _owner) constant public returns (uint256) {\r\n\t    return balances[_owner];\r\n    } \r\n    \r\n //高级功能   \r\n    \r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        if (newOwner != address(0) && newOwner != owner) {          \r\n             owner = newOwner;   \r\n        }\r\n    }\r\n    \r\n    function freeze(address target, bool B) onlyOwner public {\r\n        frozenAccount[target] = B;\r\n        FrozenFunds(target, B);\r\n    } \r\n    \r\n //定制功能\r\n    \r\n    function locktransfer(address _to, uint256 _amount, uint256 _lockdays, uint256 _releasepoint) onlyOwner onlyPayloadSize(4 * 32) public returns (bool success) {\r\n        require( frozenAccount[_to] == false);\r\n        require( _releasepoint>= 0 && _releasepoint<= 10000);\r\n        require(_to != address(0));\r\n        require(_amount <= (balances[msg.sender].sub(lockOf(msg.sender))));\r\n\r\n        locked(_to , _amount , _lockdays, _releasepoint);\r\n        \r\n        Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n    \r\n    function lockOf(address _owner) constant public returns (uint256) {\r\n    uint locknums = 0;\r\n    for (uint8 i = 1; i < times[_owner] + 1; i++){\r\n      if(now < locktime[_owner][i] + lockdays[_owner][i] + 1* 1 days){\r\n            locknums += locknum[_owner][i];\r\n        }\r\n       else{\r\n            if(now <locktime[_owner][i] + lockdays[_owner][i] + 10000/releasepoint[_owner][i]* 1 days){\r\n               locknums += ((now - locktime[_owner][i] - lockdays[_owner][i] )/(1 * 1 days)*locknum[_owner][i]*releasepoint[_owner][i]/10000);\r\n              }\r\n              else{\r\n                 locknums += 0;\r\n              }\r\n        }\r\n    }\r\n\t    return locknums;\r\n    }\r\n    \r\n    function locked(address _to, uint256 _amount, uint256 _lockdays, uint256 _releasepoint) private returns (bool) {\r\n        \r\n        if (_lockdays>0) {\r\n            times[_to] += 1;\r\n            locktime[_to][times[_to]] = now;\r\n            lockdays[_to][times[_to]] = _lockdays * 1 days;\r\n            locknum[_to][times[_to]] = _amount;\r\n            releasepoint[_to][times[_to]] = _amount;\r\n        }\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_lockdays\",\"type\":\"uint256\"},{\"name\":\"_releasepoint\",\"type\":\"uint256\"}],\"name\":\"locktransfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"key\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"lockOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nowInSeconds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"B\",\"type\":\"bool\"}],\"name\":\"freeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"}]","ContractName":"IPFSNETS","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"47150644d4e8aaf5b82db32518b9ba7e0b94a8bd46f6c989582441a6b33e8636","Library":"","LicenseType":"None","SwarmSource":"bzzr://f72c69df35f897fc67cc71f2d7019bf8158a9de2df750fc8ae7ae6187596bace"}]}