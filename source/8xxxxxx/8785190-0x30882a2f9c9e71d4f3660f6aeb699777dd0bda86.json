{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/SafeMath.sol\r\n\r\n/**\t\r\n* MIT License\t\r\n*\t\r\n* Copyright (c) 2016-2019 zOS Global Limited\t\r\n*\t\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\t\r\n* of this software and associated documentation files (the \"Software\"), to deal\t\r\n* in the Software without restriction, including without limitation the rights\t\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\t\r\n* copies of the Software, and to permit persons to whom the Software is\t\r\n* furnished to do so, subject to the following conditions:\t\r\n*\t\r\n* The above copyright notice and this permission notice shall be included in all\t\r\n* copies or substantial portions of the Software.\t\r\n*\t\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\t\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\t\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\t\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\t\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\t\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\t\r\n* SOFTWARE.\t\r\n*/\r\n\r\npragma solidity 0.5.10;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n// File: contracts/IERC20.sol\r\n\r\n/**\t\r\n* MIT License\t\r\n*\t\r\n* Copyright (c) 2016-2019 zOS Global Limited\t\r\n*\t\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\t\r\n* of this software and associated documentation files (the \"Software\"), to deal\t\r\n* in the Software without restriction, including without limitation the rights\t\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\t\r\n* copies of the Software, and to permit persons to whom the Software is\t\r\n* furnished to do so, subject to the following conditions:\t\r\n*\t\r\n* The above copyright notice and this permission notice shall be included in all\t\r\n* copies or substantial portions of the Software.\t\r\n*\t\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\t\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\t\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\t\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\t\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\t\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\t\r\n* SOFTWARE.\t\r\n*/\r\n\r\npragma solidity 0.5.10;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/ERC20.sol\r\n\r\n/**\t\r\n* MIT License\t\r\n*\t\r\n* Copyright (c) 2016-2019 zOS Global Limited\t\r\n*\t\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\t\r\n* of this software and associated documentation files (the \"Software\"), to deal\t\r\n* in the Software without restriction, including without limitation the rights\t\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\t\r\n* copies of the Software, and to permit persons to whom the Software is\t\r\n* furnished to do so, subject to the following conditions:\t\r\n*\t\r\n* The above copyright notice and this permission notice shall be included in all\t\r\n* copies or substantial portions of the Software.\t\r\n*\t\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\t\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\t\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\t\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\t\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\t\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\t\r\n* SOFTWARE.\t\r\n*/\r\n\r\npragma solidity 0.5.10;\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the `IERC20` interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using `_mint`.\r\n * For a generic mechanism see `ERC20Mintable`.\r\n *\r\n * *For a detailed writeup see our guide [How to implement supply\r\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See `IERC20.approve`.\r\n */\r\n\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See `IERC20.totalSupply`.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.balanceOf`.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transfer`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.allowance`.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.approve`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transferFrom`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of `ERC20`;\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `value`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to `transfer`, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a `Transfer` event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n     /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a `Transfer` event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an `Approval` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See `_burn` and `_approve`.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\r\n    }\r\n}\r\n\r\n// File: contracts/ERC20Claimable.sol\r\n\r\n/**\r\n* MIT License with Automated License Fee Payments\r\n*\r\n* Copyright (c) 2019 Equility AG (alethena.com)\r\n*\r\n* Permission is hereby granted to any person obtaining a copy of this software\r\n* and associated documentation files (the \"Software\"), to deal in the Software\r\n* without restriction, including without limitation the rights to use, copy,\r\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n* Software, and to permit persons to whom the Software is furnished to do so,\r\n* subject to the following conditions:\r\n*\r\n* - The above copyright notice and this permission notice shall be included in\r\n*   all copies or substantial portions of the Software.\r\n* - All automated license fee payments integrated into this and related Software\r\n*   are preserved.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\npragma solidity 0.5.10;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Claimable\r\n * In case of tokens that represent real-world assets such as shares of a company, one needs a way\r\n * to handle lost private keys. With physical certificates, courts can declare share certificates as\r\n * invalid so the company can issue replacements. Here, we want a solution that does not depend on\r\n * third parties to resolve such cases. Instead, when someone has lost a private key, he can use the\r\n * declareLost function to post a deposit and claim that the shares assigned to a specific address are\r\n * lost. To prevent front running, a commit reveal scheme is used. If he actually is the owner of the shares,\r\n * he needs to wait for a certain period and can then reclaim the lost shares as well as the deposit.\r\n * If he is an attacker trying to claim shares belonging to someone else, he risks losing the deposit\r\n * as it can be claimed at anytime by the rightful owner.\r\n * Furthermore, if \"getClaimDeleter\" is defined in the subclass, the returned address is allowed to\r\n * delete claims, returning the collateral. This can help to prevent obvious cases of abuse of the claim\r\n * function.\r\n */\r\n\r\ncontract ERC20Claimable is ERC20 {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeMath for uint32;\r\n\r\n    // A struct that represents a claim made\r\n    struct Claim {\r\n        address claimant; // the person who created the claim\r\n        uint256 collateral; // the amount of collateral deposited\r\n        uint32 timestamp;  // the timestamp of the block in which the claim was made\r\n        address currencyUsed; // The currency (XCHF) can be updated, we record the currency used for every request\r\n    }\r\n\r\n    // Every claim must be preceded by an obscured preclaim in order to prevent front-running\r\n    struct PreClaim {\r\n        bytes32 msghash; // the hash of nonce + address to be claimed\r\n        uint256 timestamp;  // the timestamp of the block in which the preclaim was made\r\n    }\r\n\r\n    uint256 public claimPeriod = 180 days; // Default of 180 days;\r\n    uint256 public preClaimPeriod = 1 days; // One day. Minimum waiting period between preClaim and Claim;\r\n    uint256 public preClaimPeriodEnd = 2 days; // Two days. Maximum waiting period between preClaim and Claim;\r\n\r\n    mapping(address => Claim) public claims; // there can be at most one claim per address, here address is claimed address\r\n    mapping(address => PreClaim) public preClaims; // there can be at most one preclaim per address, here address is claimer\r\n    mapping(address => bool) public claimingDisabled; // disable claimability (e.g. for long term storage)\r\n\r\n    // ERC-20 token that can be used as collateral or 0x0 if disabled\r\n    address public customCollateralAddress;\r\n    uint256 public customCollateralRate;\r\n\r\n    /**\r\n     * Returns the collateral rate for the given collateral type and 0 if that type\r\n     * of collateral is not accepted. By default, only the token itself is accepted at\r\n     * a rate of 1:1.\r\n     *\r\n     * Subclasses should override this method if they want to add additional types of\r\n     * collateral.\r\n     */\r\n    function getCollateralRate(address collateralType) public view returns (uint256) {\r\n        if (collateralType == address(this)) {\r\n            return 1;\r\n        } else if (collateralType == customCollateralAddress) {\r\n            return customCollateralRate;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Allows subclasses to set a custom collateral besides the token itself.\r\n     * The collateral must be an ERC-20 token that returns true on successful transfers and\r\n     * throws an exception or returns false on failure.\r\n     * Also, do not forget to multiply the rate in accordance with the number of decimals of the collateral.\r\n     * For example, rate should be 7*10**18 for 7 units of a collateral with 18 decimals.\r\n     */\r\n    function _setCustomClaimCollateral(address collateral, uint256 rate) internal {\r\n        customCollateralAddress = collateral;\r\n        if (customCollateralAddress == address(0)) {\r\n            customCollateralRate = 0; // disabled\r\n        } else {\r\n            require(rate > 0, \"Collateral rate can't be zero\");\r\n            customCollateralRate = rate;\r\n        }\r\n        emit CustomClaimCollateralChanged(collateral, rate);\r\n    }\r\n\r\n    function getClaimDeleter() public returns (address);\r\n\r\n    /**\r\n     * Allows subclasses to change the claim period, but not to fewer than 90 days.\r\n     */\r\n    function _setClaimPeriod(uint256 claimPeriodInDays) internal {\r\n        require(claimPeriodInDays > 90, \"Claim period must be at least 90 days\"); // must be at least 90 days\r\n        uint256 claimPeriodInSeconds = claimPeriodInDays.mul(1 days);\r\n        claimPeriod = claimPeriodInSeconds;\r\n        emit ClaimPeriodChanged(claimPeriod);\r\n    }\r\n\r\n    function setClaimable(bool enabled) public {\r\n        claimingDisabled[msg.sender] = !enabled;\r\n    }\r\n\r\n    /**\r\n     * Some users might want to disable claims for their address completely.\r\n     * For example if they use a deep cold storage solution or paper wallet.\r\n     */\r\n    function isClaimsEnabled(address target) public view returns (bool) {\r\n        return !claimingDisabled[target];\r\n    }\r\n\r\n    event ClaimMade(address indexed lostAddress, address indexed claimant, uint256 balance);\r\n    event ClaimPrepared(address indexed claimer);\r\n    event ClaimCleared(address indexed lostAddress, uint256 collateral);\r\n    event ClaimDeleted(address indexed lostAddress, address indexed claimant, uint256 collateral);\r\n    event ClaimResolved(address indexed lostAddress, address indexed claimant, uint256 collateral);\r\n    event ClaimPeriodChanged(uint256 newClaimPeriodInDays);\r\n    event CustomClaimCollateralChanged(address newCustomCollateralAddress, uint256 newCustomCollareralRate);\r\n\r\n  /** Anyone can declare that the private key to a certain address was lost by calling declareLost\r\n    * providing a deposit/collateral. There are three possibilities of what can happen with the claim:\r\n    * 1) The claim period expires and the claimant can get the deposit and the shares back by calling resolveClaim\r\n    * 2) The \"lost\" private key is used at any time to call clearClaim. In that case, the claim is deleted and\r\n    *    the deposit sent to the shareholder (the owner of the private key). It is recommended to call resolveClaim\r\n    *    whenever someone transfers funds to let claims be resolved automatically when the \"lost\" private key is\r\n    *    used again.\r\n    * 3) The owner deletes the claim and assigns the deposit to the claimant. This is intended to be used to resolve\r\n    *    disputes. Generally, using this function implies that you have to trust the issuer of the tokens to handle\r\n    *    the situation well. As a rule of thumb, the contract owner should assume the owner of the lost address to be the\r\n    *    rightful owner of the deposit.\r\n    * It is highly recommended that the owner observes the claims made and informs the owners of the claimed addresses\r\n    * whenever a claim is made for their address (this of course is only possible if they are known to the owner, e.g.\r\n    * through a shareholder register).\r\n    * To prevent frontrunning attacks, a claim can only be made if the information revealed when calling \"declareLost\"\r\n    * was previously commited using the \"prepareClaim\" function.\r\n    */\r\n    function prepareClaim(bytes32 hashedpackage) public {\r\n        preClaims[msg.sender] = PreClaim({\r\n            msghash: hashedpackage,\r\n            timestamp: block.timestamp\r\n        });\r\n        emit ClaimPrepared(msg.sender);\r\n    }\r\n\r\n    function validateClaim(address lostAddress, bytes32 nonce) private view {\r\n        PreClaim memory preClaim = preClaims[msg.sender];\r\n        require(preClaim.msghash != 0, \"Message hash can't be zero\");\r\n        require(preClaim.timestamp.add(preClaimPeriod) <= block.timestamp, \"Preclaim period violated. Claimed too early\");\r\n        require(preClaim.timestamp.add(preClaimPeriodEnd) >= block.timestamp, \"Preclaim period end. Claimed too late\");\r\n        require(preClaim.msghash == keccak256(abi.encodePacked(nonce, msg.sender, lostAddress)),\"Package could not be validated\");\r\n    }\r\n\r\n    function declareLost(address collateralType, address lostAddress, bytes32 nonce) public {\r\n        require(lostAddress != address(0), \"Can't claim zero address\");\r\n        require(isClaimsEnabled(lostAddress), \"Claims disabled for this address\");\r\n        uint256 collateralRate = getCollateralRate(collateralType);\r\n        require(collateralRate > 0, \"Unsupported collateral type\");\r\n        address claimant = msg.sender;\r\n        uint256 balance = balanceOf(lostAddress);\r\n        uint256 collateral = balance.mul(collateralRate);\r\n        IERC20 currency = IERC20(collateralType);\r\n        require(balance > 0, \"Claimed address holds no shares\");\r\n        require(currency.allowance(claimant, address(this)) >= collateral, \"Currency allowance insufficient\");\r\n        require(currency.balanceOf(claimant) >= collateral, \"Currency balance insufficient\");\r\n        require(claims[lostAddress].collateral == 0, \"Address already claimed\");\r\n        validateClaim(lostAddress, nonce);\r\n        require(currency.transferFrom(claimant, address(this), collateral), \"Collateral transfer failed\");\r\n\r\n        claims[lostAddress] = Claim({\r\n            claimant: claimant,\r\n            collateral: collateral,\r\n            timestamp: uint32(block.timestamp), // block timestamp is in seconds --> Should not overflow\r\n            currencyUsed: collateralType\r\n        });\r\n\r\n        delete preClaims[claimant];\r\n        emit ClaimMade(lostAddress, claimant, balance);\r\n    }\r\n\r\n    function getClaimant(address lostAddress) public view returns (address) {\r\n        return claims[lostAddress].claimant;\r\n    }\r\n\r\n    function getCollateral(address lostAddress) public view returns (uint256) {\r\n        return claims[lostAddress].collateral;\r\n    }\r\n\r\n    function getCollateralType(address lostAddress) public view returns (address) {\r\n        return claims[lostAddress].currencyUsed;\r\n    }\r\n\r\n    function getTimeStamp(address lostAddress) public view returns (uint256) {\r\n        return claims[lostAddress].timestamp;\r\n    }\r\n\r\n    function getPreClaimTimeStamp(address claimerAddress) public view returns (uint256) {\r\n        return preClaims[claimerAddress].timestamp;\r\n    }\r\n\r\n    function getMsgHash(address claimerAddress) public view returns (bytes32) {\r\n        return preClaims[claimerAddress].msghash;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        require(super.transfer(recipient, amount), \"Transfer failed\");\r\n        clearClaim();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Clears a claim after the key has been found again and assigns the collateral to the \"lost\" address.\r\n     * This is the price an adverse claimer pays for filing a false claim and makes it risky to do so.\r\n     */\r\n    function clearClaim() public {\r\n        if (claims[msg.sender].collateral != 0) {\r\n            uint256 collateral = claims[msg.sender].collateral;\r\n            IERC20 currency = IERC20(claims[msg.sender].currencyUsed);\r\n            delete claims[msg.sender];\r\n            require(currency.transfer(msg.sender, collateral), \"Collateral transfer failed\");\r\n            emit ClaimCleared(msg.sender, collateral);\r\n        }\r\n    }\r\n\r\n   /**\r\n    * After the claim period has passed, the claimant can call this function to send the\r\n    * tokens on the lost address as well as the collateral to himself.\r\n    */\r\n    function resolveClaim(address lostAddress) public {\r\n        Claim memory claim = claims[lostAddress];\r\n        uint256 collateral = claim.collateral;\r\n        IERC20 currency = IERC20(claim.currencyUsed);\r\n        require(collateral != 0, \"No claim found\");\r\n        require(claim.claimant == msg.sender, \"Only claimant can resolve claim\");\r\n        require(claim.timestamp.add(uint32(claimPeriod)) <= block.timestamp, \"Claim period not over yet\");\r\n        address claimant = claim.claimant;\r\n        delete claims[lostAddress];\r\n        require(currency.transfer(claimant, collateral), \"Collateral transfer failed\");\r\n        _transfer(lostAddress, claimant, balanceOf(lostAddress));\r\n        emit ClaimResolved(lostAddress, claimant, collateral);\r\n    }\r\n\r\n    /**\r\n     * This function is to be executed by the owner only in case a dispute needs to be resolved manually.\r\n     */\r\n    function deleteClaim(address lostAddress) public {\r\n        require(msg.sender == getClaimDeleter(), \"You cannot delete claims\");\r\n        Claim memory claim = claims[lostAddress];\r\n        IERC20 currency = IERC20(claim.currencyUsed);\r\n        require(claim.collateral != 0, \"No claim found\");\r\n        delete claims[lostAddress];\r\n        require(currency.transfer(claim.claimant, claim.collateral), \"Collateral transfer failed\");\r\n        emit ClaimDeleted(lostAddress, claim.claimant, claim.collateral);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/Acquisition.sol\r\n\r\n/**\r\n* MIT License with Automated License Fee Payments\r\n*\r\n* Copyright (c) 2019 Equility AG (alethena.com)\r\n*\r\n* Permission is hereby granted to any person obtaining a copy of this software\r\n* and associated documentation files (the \"Software\"), to deal in the Software\r\n* without restriction, including without limitation the rights to use, copy,\r\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n* Software, and to permit persons to whom the Software is furnished to do so,\r\n* subject to the following conditions:\r\n*\r\n* - The above copyright notice and this permission notice shall be included in\r\n*   all copies or substantial portions of the Software.\r\n* - All automated license fee payments integrated into this and related Software\r\n*   are preserved.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\npragma solidity 0.5.10;\r\n\r\n\r\n\r\n/**\r\n * @title Acquisition Attempt\r\n * @author Benjamin Rickenbacher, benjamin@alethena.com\r\n * @author Luzius Meisser, luzius@meissereconomics.com\r\n *\r\n */\r\n\r\ncontract Acquisition {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public constant VOTING_PERIOD = 60 days;    // 2months/60days\r\n    uint256 public constant VALIDITY_PERIOD = 90 days;  // 3months/90days\r\n\r\n    uint256 public quorum;                              // Percentage of votes needed to start drag-along process\r\n\r\n    address private parent;                             // the parent contract\r\n    address payable public buyer;                       // the person who made the offer\r\n    uint256 public price;                               // the price offered per share (in XCHF base units, so 10**18 is 1 XCHF)\r\n    uint256 public timestamp;                           // the timestamp of the block in which the acquisition was created\r\n\r\n    uint256 public noVotes;                             // number of tokens voting for no\r\n    uint256 public yesVotes;                            // number of tokens voting for yes\r\n\r\n    enum Vote { NONE, YES, NO }                         // Used internally, represents not voted yet or yes/no vote.\r\n    mapping (address => Vote) private votes;            // Who votes what\r\n\r\n    event VotesChanged(uint256 newYesVotes, uint256 newNoVotes);\r\n\r\n    constructor (address payable buyer_, uint256 price_, uint256 quorum_) public {\r\n        require(price_ > 0, \"Price cannot be zero\");\r\n        parent = msg.sender;\r\n        buyer = buyer_;\r\n        price = price_;\r\n        quorum = quorum_;\r\n        timestamp = block.timestamp;\r\n    }\r\n\r\n    function isWellFunded(address currency_, uint256 sharesToAcquire) public view returns (bool) {\r\n        IERC20 currency = IERC20(currency_);\r\n        uint256 buyerXCHFBalance = currency.balanceOf(buyer);\r\n        uint256 buyerXCHFAllowance = currency.allowance(buyer, parent);\r\n        uint256 xchfNeeded = sharesToAcquire.mul(price);\r\n        return xchfNeeded <= buyerXCHFBalance && xchfNeeded <= buyerXCHFAllowance;\r\n    }\r\n\r\n    function isQuorumReached() public view returns (bool) {\r\n        if (isVotingOpen()) {\r\n            // is it already clear that 75% will vote yes even though the vote is not over yet?\r\n            return yesVotes.mul(10000).div(IERC20(parent).totalSupply()) >= quorum;\r\n        } else {\r\n            // did 75% of all cast votes say 'yes'?\r\n            return yesVotes.mul(10000).div(yesVotes.add(noVotes)) >= quorum;\r\n        }\r\n    }\r\n\r\n    function quorumHasFailed() public view returns (bool) {\r\n        if (isVotingOpen()) {\r\n            // is it already clear that 25% will vote no even though the vote is not over yet?\r\n            return (IERC20(parent).totalSupply().sub(noVotes)).mul(10000).div(IERC20(parent).totalSupply()) < quorum;\r\n        } else {\r\n            // did 25% of all cast votes say 'no'?\r\n            return yesVotes.mul(10000).div(yesVotes.add(noVotes)) < quorum;\r\n        }\r\n    }\r\n\r\n    function adjustVotes(address from, address to, uint256 value) public parentOnly() {\r\n        if (isVotingOpen()) {\r\n            Vote fromVoting = votes[from];\r\n            Vote toVoting = votes[to];\r\n            update(fromVoting, toVoting, value);\r\n        }\r\n    }\r\n\r\n    function update(Vote previousVote, Vote newVote, uint256 votes_) internal {\r\n        if (previousVote != newVote) {\r\n            if (previousVote == Vote.NO) {\r\n                noVotes = noVotes.sub(votes_);\r\n            } else if (previousVote == Vote.YES) {\r\n                yesVotes = yesVotes.sub(votes_);\r\n            }\r\n            if (newVote == Vote.NO) {\r\n                noVotes = noVotes.add(votes_);\r\n            } else if (newVote == Vote.YES) {\r\n                yesVotes = yesVotes.add(votes_);\r\n            }\r\n            emit VotesChanged(yesVotes, noVotes);\r\n        }\r\n    }\r\n\r\n    function isVotingOpen() public view returns (bool) {\r\n        uint256 age = block.timestamp.sub(timestamp);\r\n        return age <= VOTING_PERIOD;\r\n    }\r\n\r\n    function hasExpired() public view returns (bool) {\r\n        uint256 age = block.timestamp.sub(timestamp);\r\n        return age > VALIDITY_PERIOD;\r\n    }\r\n\r\n    modifier votingOpen() {\r\n        require(isVotingOpen(), \"The vote has ended.\");\r\n        _;\r\n    }\r\n\r\n    function voteYes(address sender, uint256 votes_) public parentOnly() votingOpen() {\r\n        vote(Vote.YES, votes_, sender);\r\n    }\r\n\r\n    function voteNo(address sender, uint256 votes_) public parentOnly() votingOpen() {\r\n        vote(Vote.NO, votes_, sender);\r\n    }\r\n\r\n    function vote(Vote yesOrNo, uint256 votes_, address voter) internal {\r\n        Vote previousVote = votes[voter];\r\n        Vote newVote = yesOrNo;\r\n        votes[voter] = newVote;\r\n        update(previousVote, newVote, votes_);\r\n    }\r\n\r\n    function hasVotedYes(address voter) public view returns (bool) {\r\n        return votes[voter] == Vote.YES;\r\n    }\r\n\r\n    function hasVotedNo(address voter) public view returns (bool) {\r\n        return votes[voter] == Vote.NO;\r\n    }\r\n\r\n    function kill() public parentOnly() {\r\n        // destroy the contract and send leftovers to the buyer.\r\n        selfdestruct(buyer);\r\n    }\r\n\r\n    modifier parentOnly () {\r\n        require(msg.sender == parent, \"Can only be called by parent contract\");\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts/IMigratable.sol\r\n\r\npragma solidity 0.5.10;\r\n\r\ncontract IMigratable {\r\n    function migrationToContract() public returns (address);\r\n}\r\n\r\n// File: contracts/ERC20Draggable.sol\r\n\r\n/**\r\n* MIT License with Automated License Fee Payments\r\n*\r\n* Copyright (c) 2019 Equility AG (alethena.com)\r\n*\r\n* Permission is hereby granted to any person obtaining a copy of this software\r\n* and associated documentation files (the \"Software\"), to deal in the Software\r\n* without restriction, including without limitation the rights to use, copy,\r\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n* Software, and to permit persons to whom the Software is furnished to do so,\r\n* subject to the following conditions:\r\n*\r\n* - The above copyright notice and this permission notice shall be included in\r\n*   all copies or substantial portions of the Software.\r\n* - All automated license fee payments integrated into this and related Software\r\n*   are preserved.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\npragma solidity 0.5.10;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Alethena SHA\r\n * @author Benjamin Rickenbacher, benjamin@alethena.com\r\n * @author Luzius Meisser, luzius@meissereconomics.com\r\n * @dev These tokens are based on the ERC20 standard and the open-zeppelin library.\r\n *\r\n * This is an ERC-20 token representing shares that are bound to\r\n * a shareholder agreement that can be found at the URL defined in the constant 'terms'\r\n * of the 'DraggableAlethenaShares' contract. The agreement is partially enforced\r\n * through the Swiss legal system, and partially enforced through this smart contract.\r\n * In particular, this smart contract implements a drag-along clause which allows the\r\n * majority of token holders to force the minority sell their shares along with them in\r\n * case of an acquisition.\r\n */\r\n\r\ncontract ERC20Draggable is ERC20 {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    IERC20 private wrapped;                        // The wrapped contract\r\n\r\n    // If the wrapped tokens got replaced in an acquisition, unwrapping might yield many currency tokens\r\n    uint256 public unwrapConversionFactor = 1;\r\n\r\n    // The current acquisition attempt, if any. See initiateAcquisition to see the requirements to make a public offer.\r\n    Acquisition public offer;\r\n\r\n    IERC20 private currency;\r\n\r\n    address public offerFeeRecipient;              // Recipient of the fee. Fee makes sure the offer is serious.\r\n\r\n    uint256 public offerFee;             // Fee of 5000 XCHF\r\n    uint256 public migrationQuorum;      // Number of tokens that need to be migrated to complete migration\r\n    uint256 public acquisitionQuorum;\r\n\r\n    uint256 constant MIN_OFFER_INCREMENT = 10500;  // New offer must be at least 105% of old offer\r\n    uint256 constant MIN_HOLDING = 500;            // Need at least 5% of all drag along tokens to make an offer\r\n    uint256 constant MIN_DRAG_ALONG_QUOTA = 3000;  // 30% of the equity needs to be represented by drag along tokens for an offer to be made\r\n\r\n    bool public active = true;                     // True as long as this contract is legally binding and the wrapped tokens are locked.\r\n\r\n    event OfferCreated(address indexed buyer, uint256 pricePerShare);\r\n    event OfferEnded(address indexed buyer, address sender, bool success, string message);\r\n    event MigrationSucceeded(address newContractAddress);\r\n\r\n    /**\r\n     * CurrencyAddress specifies the currency used in acquisitions. The currency must be\r\n     * an ERC-20 token that returns true on successful transfers and throws an exception or\r\n     * returns false on failure. It can only be updated later if the currency supports the\r\n     * IMigratable interface.\r\n     */\r\n    constructor(\r\n        address wrappedToken,\r\n        uint256 migrationQuorumInBIPS_,\r\n        uint256 acquisitionQuorum_,\r\n        address currencyAddress,\r\n        address offerFeeRecipient_,\r\n        uint offerFee_\r\n    ) public {\r\n        wrapped = IERC20(wrappedToken);\r\n        offerFeeRecipient = offerFeeRecipient_;\r\n        offerFee = offerFee_;\r\n        migrationQuorum = migrationQuorumInBIPS_;\r\n        acquisitionQuorum = acquisitionQuorum_;\r\n        currency = IERC20(currencyAddress);\r\n        IShares(wrappedToken).totalShares();\r\n    }\r\n\r\n    function getWrappedContract() public view returns (address) {\r\n        return address(wrapped);\r\n    }\r\n\r\n    function getCurrencyContract() public view returns (address) {\r\n        return address(currency);\r\n    }\r\n\r\n    function updateCurrency(address newCurrency) public noOfferPending () {\r\n        require(active, \"Contract is not active\");\r\n        require(IMigratable(getCurrencyContract()).migrationToContract() == newCurrency, \"Invalid currency update\");\r\n        currency = IERC20(newCurrency);\r\n    }\r\n\r\n    /** Increases the number of drag-along tokens. Requires minter to deposit an equal amount of share tokens */\r\n    function wrap(address shareholder, uint256 amount) public noOfferPending() {\r\n        require(active, \"Contract not active any more.\");\r\n        require(wrapped.balanceOf(msg.sender) >= amount, \"Share balance not sufficient\");\r\n        require(wrapped.allowance(msg.sender, address(this)) >= amount, \"Share allowance not sufficient\");\r\n        require(wrapped.transferFrom(msg.sender, address(this), amount), \"Share transfer failed\");\r\n        _mint(shareholder, amount);\r\n    }\r\n\r\n    /** Decrease the number of drag-along tokens. The user gets back their shares in return */\r\n    function unwrap(uint256 amount) public {\r\n        require(!active, \"As long as the contract is active, you are bound to it\");\r\n        _burn(msg.sender, amount);\r\n        require(wrapped.transfer(msg.sender, amount.mul(unwrapConversionFactor)), \"Share transfer failed\");\r\n    }\r\n\r\n    /**\r\n     * Burns both the token itself as well as the wrapped token!\r\n     * If you want to get out of the shareholder agreement, use unwrap after it has been\r\n     * deactivated by a majority vote or acquisition.\r\n     *\r\n     * Burning only works if wrapped token supports burning. Also, the exact meaning of this\r\n     * operation might depend on the circumstances. Burning and reussing the wrapped token\r\n     * does not free the sender from the legal obligations of the shareholder agreement.\r\n     */\r\n    function burn(uint256 amount) public {\r\n        _burn(msg.sender, amount);\r\n        IBurnable(getWrappedContract()).burn(amount.mul(unwrapConversionFactor));\r\n    }\r\n\r\n  /** @dev Function to start drag-along procedure\r\n   *  This can be called by anyone, but there is an upfront payment.\r\n   */\r\n    function initiateAcquisition(uint256 pricePerShare) public {\r\n        require(active, \"An accepted offer exists\");\r\n        uint256 totalEquity = IShares(getWrappedContract()).totalShares();\r\n        address buyer = msg.sender;\r\n\r\n        require(totalSupply() >= totalEquity.mul(MIN_DRAG_ALONG_QUOTA).div(10000), \"This contract does not represent enough equity\");\r\n        require(balanceOf(buyer) >= totalEquity.mul(MIN_HOLDING).div(10000), \"You need to hold at least 5% of the firm to make an offer\");\r\n\r\n        require(currency.transferFrom(buyer, offerFeeRecipient, offerFee), \"Currency transfer failed\");\r\n\r\n        Acquisition newOffer = new Acquisition(msg.sender, pricePerShare, acquisitionQuorum);\r\n        require(newOffer.isWellFunded(getCurrencyContract(), totalSupply() - balanceOf(buyer)), \"Insufficient funding\");\r\n        if (offerExists()) {\r\n            require(pricePerShare >= offer.price().mul(MIN_OFFER_INCREMENT).div(10000), \"New offers must be at least 5% higher than the pending offer\");\r\n            killAcquisition(\"Offer was replaced by a higher bid\");\r\n        }\r\n        offer = newOffer;\r\n\r\n        emit OfferCreated(buyer, pricePerShare);\r\n    }\r\n\r\n    function voteYes() public offerPending() {\r\n        address voter = msg.sender;\r\n        offer.voteYes(voter, balanceOf(voter));\r\n    }\r\n\r\n    function voteNo() public offerPending() {\r\n        address voter = msg.sender;\r\n        offer.voteNo(voter, balanceOf(voter));\r\n    }\r\n\r\n    function cancelAcquisition() public offerPending() {\r\n        require(msg.sender == offer.buyer(), \"You are not authorized to cancel this acquisition offer\");\r\n        killAcquisition(\"Cancelled by buyer\");\r\n    }\r\n\r\n    function contestAcquisition() public offerPending() {\r\n        if (offer.hasExpired()) {\r\n            killAcquisition(\"Offer expired\");\r\n        } else if (offer.quorumHasFailed()) {\r\n            killAcquisition(\"Not enough support\");\r\n        } else if (\r\n            !offer.isWellFunded(\r\n                getCurrencyContract(),\r\n                totalSupply().sub(balanceOf(offer.buyer()))\r\n                )\r\n            ) {\r\n            killAcquisition(\"Offer was not sufficiently funded\");\r\n        } else {\r\n            revert(\"Acquisition contest unsuccessful\");\r\n        }\r\n    }\r\n\r\n    function killAcquisition(string memory message) internal {\r\n        address buyer = offer.buyer();\r\n        offer.kill();\r\n        offer = Acquisition(address(0));\r\n        emit OfferEnded(\r\n            buyer,\r\n            msg.sender,\r\n            false,\r\n            message\r\n        );\r\n    }\r\n\r\n    function completeAcquisition() public offerPending() {\r\n        address buyer = offer.buyer();\r\n        require(msg.sender == buyer, \"You are not authorized to complete this acquisition offer\");\r\n        require(offer.isQuorumReached(), \"Insufficient number of yes votes\");\r\n        require(\r\n            offer.isWellFunded(\r\n            getCurrencyContract(),\r\n            totalSupply().sub(balanceOf(buyer))),\r\n            \"Offer insufficiently funded\"\r\n            );\r\n        invertHoldings(buyer, currency, offer.price());\r\n        emit OfferEnded(\r\n            buyer,\r\n            msg.sender,\r\n            true,\r\n            \"Completed successfully\"\r\n        );\r\n    }\r\n\r\n    function wasAcquired() public view returns (bool) {\r\n        return offerExists() ? !active : false;\r\n    }\r\n\r\n    function invertHoldings(address newOwner, IERC20 newBacking, uint256 conversionRate) internal {\r\n        uint256 buyerBalance = balanceOf(newOwner);\r\n        uint256 initialSupply = totalSupply();\r\n        active = false;\r\n        unwrap(buyerBalance);\r\n        uint256 remaining = initialSupply.sub(buyerBalance);\r\n        require(wrapped.transfer(newOwner, remaining), \"Wrapped token transfer failed\");\r\n        require(newBacking.transferFrom(newOwner, address(this), conversionRate.mul(remaining)), \"Backing transfer failed\");\r\n\r\n        wrapped = newBacking;\r\n        unwrapConversionFactor = conversionRate;\r\n    }\r\n\r\n    function migrate() public {\r\n        require(active, \"Contract is not active\");\r\n        address successor = msg.sender;\r\n        require(balanceOf(successor) >= totalSupply().mul(migrationQuorum).div(10000), \"Quorum not reached\");\r\n\r\n        if (offerExists()) {\r\n            if (!offer.quorumHasFailed()) {\r\n                voteNo(); // should shut down the offer\r\n                require(offer.quorumHasFailed(), \"Quorum has not failed\");\r\n            }\r\n            contestAcquisition();\r\n            assert (!offerExists());\r\n        }\r\n\r\n        invertHoldings(successor, IERC20(successor), 1);\r\n        emit MigrationSucceeded(successor);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal {\r\n        super._mint(account, amount);\r\n        if (offerExists() && active) {\r\n            // never executed in the default implementation as wrap requires no offer\r\n            offer.adjustVotes(address(0), account, amount);\r\n        }\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        super._transfer(from, to, value);\r\n        if (offerExists() && active) {\r\n            offer.adjustVotes(from, to, value);\r\n        }\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(balanceOf(msg.sender) >= amount, \"Balance insufficient\");\r\n        super._burn(account, amount);\r\n        if (offerExists() && active) {\r\n            offer.adjustVotes(account, address(0), amount);\r\n        }\r\n    }\r\n\r\n    function getPendingOffer() public view returns (address) {\r\n        return address(offer);\r\n    }\r\n\r\n    function offerExists() public view returns (bool) {\r\n        return getPendingOffer() != address(0);\r\n    }\r\n\r\n    modifier offerPending() {\r\n        require(offerExists() && active, \"There is no pending offer\");\r\n        _;\r\n    }\r\n\r\n    modifier noOfferPending() {\r\n        require(!offerExists(), \"There is a pending offer\");\r\n        _;\r\n    }\r\n\r\n}\r\n\r\ncontract IShares {\r\n    function totalShares() public returns (uint256);\r\n}\r\n\r\ncontract IBurnable {\r\n    function burn(uint256) public;\r\n}\r\n\r\n// File: contracts/DraggableAlethenaShares.sol\r\n\r\n/**\r\n* MIT License with Automated License Fee Payments\r\n*\r\n* Copyright (c) 2019 Equility AG (alethena.com)\r\n*\r\n* Permission is hereby granted to any person obtaining a copy of this software\r\n* and associated documentation files (the \"Software\"), to deal in the Software\r\n* without restriction, including without limitation the rights to use, copy,\r\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n* Software, and to permit persons to whom the Software is furnished to do so,\r\n* subject to the following conditions:\r\n*\r\n* - The above copyright notice and this permission notice shall be included in\r\n*   all copies or substantial portions of the Software.\r\n* - All automated license fee payments integrated into this and related Software\r\n*   are preserved.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\npragma solidity 0.5.10;\r\n\r\n\r\n\r\n/**\r\n * @title Draggable LEXR Shares\r\n * @author Benjamin Rickenbacher, benjamin@alethena.com\r\n * @author Luzius Meisser, luzius@meissereconomics.com\r\n *\r\n * This is an ERC-20 token representing shares of LEXR that are bound to\r\n * a shareholder agreement that can be found at the URL defined in the constant 'terms'.\r\n * The shareholder agreement is partially enforced through this smart contract. The agreement\r\n * is designed to facilitate a complete acquisition of the firm even if a minority of shareholders\r\n * disagree with the acquisition, to protect the interest of the minority shareholders by requiring\r\n * the acquirer to offer the same conditions to everyone when acquiring the company, and to\r\n * facilitate an update of the shareholder agreement even if a minority of the shareholders that\r\n * are bound to this agreement disagree. The name \"draggable\" stems from the convention of calling\r\n * the right to drag a minority along with a sale of the company \"drag-along\" rights. The name is\r\n * chosen to ensure that token holders are aware that they are bound to such an agreement.\r\n *\r\n * The percentage of token holders that must agree with an update of the terms is defined by the\r\n * constant UPDATE_QUORUM. The precentage of yes-votes that is needed to successfully complete an\r\n * acquisition is defined in the constant ACQUISITION_QUORUM. Note that the update quorum is based\r\n * on the total number of tokens in circulation. In contrast, the acquisition quorum is based on the\r\n * number of votes cast during the voting period, not taking into account those who did not bother\r\n * to vote.\r\n */\r\n\r\ncontract DraggableAlethenaShares is ERC20Claimable, ERC20Draggable {\r\n\r\n    string public constant symbol = \"LXD\";\r\n    string public constant name = \"LEXR Draggable Equity\";\r\n    string public constant terms = \"shares.lexr.ch\";\r\n\r\n    uint8 public constant decimals = 0;                  // shares are not divisible\r\n\r\n    uint256 public constant UPDATE_QUORUM = 7500;        // 7500 basis points = 75%\r\n    uint256 public constant ACQUISITION_QUORUM = 7500;   // 7500 basis points = 75%\r\n    uint256 public constant OFFER_FEE = 5000 * 10 ** 18; // 5000 XCHF\r\n\r\n    /**\r\n     * Designed to be used with the Crypto Franc as currency token. See also parent constructor.\r\n     */\r\n    constructor(address wrappedToken, address xchfAddress, address offerFeeRecipient)\r\n        ERC20Draggable(wrappedToken, UPDATE_QUORUM, ACQUISITION_QUORUM, xchfAddress, offerFeeRecipient, OFFER_FEE) public {\r\n        IClaimable(wrappedToken).setClaimable(false);\r\n    }\r\n\r\n    function getClaimDeleter() public returns (address) {\r\n        return IClaimable(getWrappedContract()).getClaimDeleter();\r\n    }\r\n\r\n    function getCollateralRate(address collateralType) public view returns (uint256) {\r\n        uint256 rate = super.getCollateralRate(collateralType);\r\n        if (rate > 0) {\r\n            return rate;\r\n        } else if (collateralType == getWrappedContract()) {\r\n            return unwrapConversionFactor;\r\n        } else {\r\n            // If the wrapped contract allows for a specific collateral, we should too.\r\n            // If the wrapped contract is not IClaimable, we will fail here, but would fail anyway.\r\n            return IClaimable(getWrappedContract()).getCollateralRate(collateralType).mul(unwrapConversionFactor);\r\n        }\r\n    }\r\n\r\n}\r\n\r\ncontract IClaimable {\r\n    function setClaimable(bool) public;\r\n    function getCollateralRate(address) public view returns (uint256);\r\n    function getClaimDeleter() public returns (address);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"active\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unwrapConversionFactor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"customCollateralAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"completeAcquisition\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACQUISITION_QUORUM\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lostAddress\",\"type\":\"address\"}],\"name\":\"getClaimant\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"claimerAddress\",\"type\":\"address\"}],\"name\":\"getMsgHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getClaimDeleter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lostAddress\",\"type\":\"address\"}],\"name\":\"deleteClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OFFER_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"acquisitionQuorum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setClaimable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lostAddress\",\"type\":\"address\"}],\"name\":\"getCollateralType\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"voteNo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pricePerShare\",\"type\":\"uint256\"}],\"name\":\"initiateAcquisition\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"preClaims\",\"outputs\":[{\"name\":\"msghash\",\"type\":\"bytes32\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWrappedContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hashedpackage\",\"type\":\"bytes32\"}],\"name\":\"prepareClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCurrency\",\"type\":\"address\"}],\"name\":\"updateCurrency\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"customCollateralRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPendingOffer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"contestAcquisition\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"claimerAddress\",\"type\":\"address\"}],\"name\":\"getPreClaimTimeStamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"collateralType\",\"type\":\"address\"}],\"name\":\"getCollateralRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"claimPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preClaimPeriodEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"offerFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimingDisabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"voteYes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UPDATE_QUORUM\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lostAddress\",\"type\":\"address\"}],\"name\":\"resolveClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lostAddress\",\"type\":\"address\"}],\"name\":\"getCollateral\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationQuorum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"offerExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"shareholder\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"wrap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"offer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claims\",\"outputs\":[{\"name\":\"claimant\",\"type\":\"address\"},{\"name\":\"collateral\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint32\"},{\"name\":\"currencyUsed\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"terms\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unwrap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrencyContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelAcquisition\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"collateralType\",\"type\":\"address\"},{\"name\":\"lostAddress\",\"type\":\"address\"},{\"name\":\"nonce\",\"type\":\"bytes32\"}],\"name\":\"declareLost\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lostAddress\",\"type\":\"address\"}],\"name\":\"getTimeStamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wasAcquired\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preClaimPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"isClaimsEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"offerFeeRecipient\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"wrappedToken\",\"type\":\"address\"},{\"name\":\"xchfAddress\",\"type\":\"address\"},{\"name\":\"offerFeeRecipient\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pricePerShare\",\"type\":\"uint256\"}],\"name\":\"OfferCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"}],\"name\":\"OfferEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newContractAddress\",\"type\":\"address\"}],\"name\":\"MigrationSucceeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"lostAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"claimant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"ClaimMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"ClaimPrepared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"lostAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"collateral\",\"type\":\"uint256\"}],\"name\":\"ClaimCleared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"lostAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"claimant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"collateral\",\"type\":\"uint256\"}],\"name\":\"ClaimDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"lostAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"claimant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"collateral\",\"type\":\"uint256\"}],\"name\":\"ClaimResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newClaimPeriodInDays\",\"type\":\"uint256\"}],\"name\":\"ClaimPeriodChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newCustomCollateralAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newCustomCollareralRate\",\"type\":\"uint256\"}],\"name\":\"CustomClaimCollateralChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"DraggableAlethenaShares","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ae006c796095f09dce55293486d57579bdd207c8000000000000000000000000b4272071ecadd69d933adcd19ca99fe80664fc08000000000000000000000000025a554f1b6ffbcb323c916328c55e64f6ad5af7","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://5bc48159ef238fdd899a07285cad963b3373e945e59ba9cbdd4fd93cefd63acd"}]}