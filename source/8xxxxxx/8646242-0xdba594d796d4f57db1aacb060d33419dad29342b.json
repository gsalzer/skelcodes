{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * Copyright 2017-2019, bZeroX, LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0.\r\n */\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, rounding up and truncating the quotient\r\n  */\r\n  function divCeil(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    return ((_a - 1) / _b) + 1;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\ncontract ENSLoanExtendStorage is Ownable {\r\n    uint256 internal constant MAX_UINT = 2**256 - 1;\r\n\r\n    address public bZxContract;\r\n    address public bZxVault;\r\n    address public loanTokenLender;\r\n    address public loanTokenAddress;\r\n    address public wethContract;\r\n\r\n    address public ensLoanOwner;\r\n\r\n    address public userContractRegistry;\r\n}\r\n\r\ninterface IBZx {\r\n    function extendLoanByInterest(\r\n        bytes32 loanOrderHash,\r\n        address borrower,\r\n        address payer,\r\n        uint256 depositAmount,\r\n        bool useCollateral)\r\n        external\r\n        returns (uint256 secondsExtended);\r\n}\r\n\r\ninterface ILoanToken {\r\n    function loanOrderHashes(\r\n        uint256 leverageAmount)\r\n        external\r\n        view\r\n        returns (bytes32 loanOrderHash);\r\n}\r\n\r\ninterface iBasicToken {\r\n    function transfer(\r\n        address to,\r\n        uint256 value)\r\n        external\r\n        returns (bool);\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 value)\r\n        external\r\n        returns (bool);\r\n\r\n    function balanceOf(\r\n        address user)\r\n        external\r\n        view\r\n        returns (uint256 balance);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender)\r\n        external\r\n        view\r\n        returns (uint256 value);\r\n}\r\n\r\ninterface iWETH {\r\n    function deposit() external payable;\r\n    function withdraw(uint256 wad) external;\r\n}\r\n\r\ninterface iUserContract {\r\n    function transferAsset(\r\n        address asset,\r\n        address payable to,\r\n        uint256 amount)\r\n        external\r\n        returns (uint256 transferAmount);\r\n}\r\n\r\ninterface iUserContractRegistry {\r\n    function userContracts(\r\n        address user)\r\n        external\r\n        view\r\n        returns (iUserContract);\r\n}\r\n\r\ncontract ENSLoanExtendLogic is ENSLoanExtendStorage {\r\n    using SafeMath for uint256;\r\n\r\n    function()\r\n        external\r\n        payable\r\n    {\r\n        if (msg.sender == wethContract) {\r\n            return;\r\n        }\r\n        require(msg.value == 0, \"no eth allowed\");\r\n\r\n        iUserContract userContract = iUserContractRegistry(userContractRegistry).userContracts(msg.sender);\r\n        require(address(userContract) != address(0), \"contract not found\");\r\n\r\n        uint256 beforeBalance = iBasicToken(loanTokenAddress).balanceOf(address(this));\r\n\r\n        uint256 transferAmount = userContract.transferAsset(\r\n            loanTokenAddress,\r\n            address(uint256(address(this))),\r\n            0\r\n        );\r\n        require(transferAmount != 0, \"no deposit\");\r\n\r\n        bytes32 loanOrderHash = ILoanToken(loanTokenLender).loanOrderHashes(\r\n            4 ether // leverageAmount\r\n        );\r\n        require(loanOrderHash != 0, \"invalid hash\");\r\n\r\n        uint256 secondsExtended = IBZx(bZxContract).extendLoanByInterest(\r\n            loanOrderHash,\r\n            msg.sender,        // borrower\r\n            address(this),     // payer\r\n            transferAmount,    // depositAmount\r\n            false              // useCollateral\r\n        );\r\n        require(secondsExtended != 0, \"loan not extended\");\r\n\r\n        uint256 afterBalance = iBasicToken(loanTokenAddress).balanceOf(address(this));\r\n\r\n        if (afterBalance > beforeBalance) {\r\n            iBasicToken(loanTokenAddress).transfer(\r\n                msg.sender,\r\n                afterBalance - beforeBalance\r\n            );\r\n        } else if (afterBalance < beforeBalance) {\r\n            revert(\"too much spent\");\r\n        }\r\n\r\n        assembly {\r\n            mstore(0, secondsExtended)\r\n            return(0, 32)\r\n        }\r\n    }\r\n\r\n    function initialize(\r\n        address _bZxContract,\r\n        address _bZxVault,\r\n        address _loanTokenLender,\r\n        address _loanTokenAddress,\r\n        address _userContractRegistry,\r\n        address _wethContract,\r\n        address _ensLoanOwner)\r\n        public\r\n        onlyOwner\r\n    {\r\n        bZxContract = _bZxContract;\r\n        bZxVault = _bZxVault;\r\n        loanTokenLender = _loanTokenLender;\r\n        loanTokenAddress = _loanTokenAddress;\r\n        userContractRegistry = _userContractRegistry;\r\n        wethContract = _wethContract;\r\n        ensLoanOwner = _ensLoanOwner;\r\n\r\n        iBasicToken token = iBasicToken(loanTokenAddress);\r\n        uint256 tempAllowance = token.allowance(address(this), bZxVault);\r\n        if (tempAllowance != MAX_UINT) {\r\n            if (tempAllowance != 0) {\r\n                // reset approval to 0\r\n                require(token.approve(bZxVault, 0), \"token approval reset failed\");\r\n            }\r\n\r\n            require(token.approve(bZxVault, MAX_UINT), \"token approval failed\");\r\n        }\r\n    }\r\n\r\n    function recoverEther(\r\n        address receiver,\r\n        uint256 amount)\r\n        public\r\n        onlyOwner\r\n    {\r\n        uint256 balance = address(this).balance;\r\n        if (balance < amount)\r\n            amount = balance;\r\n\r\n        (bool success, ) = receiver.call.value(amount)(\"\");\r\n        require(success, \"transfer failed\");\r\n    }\r\n\r\n    function recoverToken(\r\n        address tokenAddress,\r\n        address receiver,\r\n        uint256 amount)\r\n        public\r\n        onlyOwner\r\n    {\r\n        iBasicToken token = iBasicToken(tokenAddress);\r\n\r\n        uint256 balance = token.balanceOf(address(this));\r\n        if (balance < amount)\r\n            amount = balance;\r\n\r\n        require(token.transfer(\r\n            receiver,\r\n            amount),\r\n            \"transfer failed\"\r\n        );\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_bZxContract\",\"type\":\"address\"},{\"name\":\"_bZxVault\",\"type\":\"address\"},{\"name\":\"_loanTokenLender\",\"type\":\"address\"},{\"name\":\"_loanTokenAddress\",\"type\":\"address\"},{\"name\":\"_userContractRegistry\",\"type\":\"address\"},{\"name\":\"_wethContract\",\"type\":\"address\"},{\"name\":\"_ensLoanOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wethContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"loanTokenLender\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"loanTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bZxVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bZxContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"userContractRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ensLoanOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ENSLoanExtendLogic","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://6231d3aed355e41a388c9c5fdf01c67925cee7f0f04089a0243e0e20184dfddb"}]}