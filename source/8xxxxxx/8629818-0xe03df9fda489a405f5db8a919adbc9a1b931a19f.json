{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type,\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * > It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/property/Reclaimable.sol\r\n\r\n/**\r\n * @title Reclaimable\r\n * @dev This contract gives owner right to recover any ERC20 tokens accidentally sent to \r\n * the token contract. The recovered token will be sent to the owner of token. \r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_5\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract Reclaimable is Ownable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    /**\r\n     * @notice Let the owner to retrieve other tokens accidentally sent to this contract.\r\n     * @dev This function is suitable when no token of any kind shall be stored under\r\n     * the address of the inherited contract.\r\n     * @param tokenToBeRecovered address of the token to be recovered.\r\n     */\r\n    function reclaimToken(IERC20 tokenToBeRecovered) external onlyOwner {\r\n        uint256 balance = tokenToBeRecovered.balanceOf(address(this));\r\n        tokenToBeRecovered.safeTransfer(owner(), balance);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * > Note that this information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * `IERC20.balanceOf` and `IERC20.transfer`.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the `IERC20` interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using `_mint`.\r\n * For a generic mechanism see `ERC20Mintable`.\r\n *\r\n * *For a detailed writeup see our guide [How to implement supply\r\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See `IERC20.approve`.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See `IERC20.totalSupply`.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.balanceOf`.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transfer`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.allowance`.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.approve`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transferFrom`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of `ERC20`;\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `value`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to `transfer`, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a `Transfer` event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n     /**\r\n     * @dev Destoys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a `Transfer` event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an `Approval` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See `_burn` and `_approve`.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/Roles.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/roles/MinterRole.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract MinterRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n\r\n    Roles.Role private _minters;\r\n\r\n    constructor () internal {\r\n        _addMinter(msg.sender);\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(isMinter(msg.sender), \"MinterRole: caller does not have the Minter role\");\r\n        _;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minters.has(account);\r\n    }\r\n\r\n    function addMinter(address account) public onlyMinter {\r\n        _addMinter(account);\r\n    }\r\n\r\n    function renounceMinter() public {\r\n        _removeMinter(msg.sender);\r\n    }\r\n\r\n    function _addMinter(address account) internal {\r\n        _minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    function _removeMinter(address account) internal {\r\n        _minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Extension of `ERC20` that adds a set of accounts with the `MinterRole`,\r\n * which have permission to mint (create) new tokens as they see fit.\r\n *\r\n * At construction, the deployer of the contract is the only minter.\r\n */\r\ncontract ERC20Mintable is ERC20, MinterRole {\r\n    /**\r\n     * @dev See `ERC20._mint`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have the `MinterRole`.\r\n     */\r\n    function mint(address account, uint256 amount) public onlyMinter returns (bool) {\r\n        _mint(account, amount);\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Capped.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Extension of `ERC20Mintable` that adds a cap to the supply of tokens.\r\n */\r\ncontract ERC20Capped is ERC20Mintable {\r\n    uint256 private _cap;\r\n\r\n    /**\r\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\r\n     * set once during construction.\r\n     */\r\n    constructor (uint256 cap) public {\r\n        require(cap > 0, \"ERC20Capped: cap is 0\");\r\n        _cap = cap;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the cap on the token's total supply.\r\n     */\r\n    function cap() public view returns (uint256) {\r\n        return _cap;\r\n    }\r\n\r\n    /**\r\n     * @dev See `ERC20Mintable.mint`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `value` must not cause the total supply to go over the cap.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(totalSupply().add(value) <= _cap, \"ERC20Capped: cap exceeded\");\r\n        super._mint(account, value);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Extension of `ERC20` that allows token holders to destroy both their own\r\n * tokens and those that they have an allowance for, in a way that can be\r\n * recognized off-chain (via event analysis).\r\n */\r\ncontract ERC20Burnable is ERC20 {\r\n    /**\r\n     * @dev Destoys `amount` tokens from the caller.\r\n     *\r\n     * See `ERC20._burn`.\r\n     */\r\n    function burn(uint256 amount) public {\r\n        _burn(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev See `ERC20._burnFrom`.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public {\r\n        _burnFrom(account, amount);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/Math.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// File: contracts/token/Snapshots.sol\r\n\r\n/**\r\n * @title Snapshot\r\n * @dev Utility library of the Snapshot structure, including getting value.\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_5\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\nlibrary Snapshots {\r\n    using Math for uint256;\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * @notice This structure stores the historical value associate at a particular blocknumber\r\n     * @param fromBlock The blocknumber of the creation of the snapshot\r\n     * @param value The value to be recorded\r\n     */\r\n    struct Snapshot {\r\n        uint256 fromBlock;\r\n        uint256 value;\r\n    }\r\n\r\n    struct SnapshotList {\r\n        Snapshot[] history;\r\n    }\r\n\r\n    /**\r\n     * @notice This function creates snapshots for certain value...\r\n     * @dev To avoid having two Snapshots with the same block.number, we check if the last\r\n     * existing one is the current block.number, we update the last Snapshot\r\n     * @param item The SnapshotList to be operated\r\n     * @param _value The value associated the the item that is going to have a snapshot\r\n     */\r\n    function createSnapshot(SnapshotList storage item, uint256 _value) internal {\r\n        uint256 length = item.history.length;\r\n        if (length == 0 || (item.history[length.sub(1)].fromBlock < block.number)) {\r\n            item.history.push(Snapshot(block.number, _value));\r\n        } else {\r\n            // When the last existing snapshot is ready to be updated\r\n            item.history[length.sub(1)].value = _value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Find the index of the item in the SnapshotList that contains information\r\n     * corresponding to the blockNumber. (FindLowerBond of the array)\r\n     * @dev The binary search logic is inspired by the Arrays.sol from Openzeppelin\r\n     * @param item The list of Snapshots to be queried\r\n     * @param blockNumber The block number of the queried moment\r\n     * @return The index of the Snapshot array\r\n     */\r\n    function findBlockIndex(\r\n        SnapshotList storage item, \r\n        uint256 blockNumber\r\n    ) \r\n        internal\r\n        view \r\n        returns (uint256)\r\n    {\r\n        // Find lower bound of the array\r\n        uint256 length = item.history.length;\r\n\r\n        // Return value for extreme cases: If no snapshot exists and/or the last snapshot\r\n        if (item.history[length.sub(1)].fromBlock <= blockNumber) {\r\n            return length.sub(1);\r\n        } else {\r\n            // Need binary search for the value\r\n            uint256 low = 0;\r\n            uint256 high = length.sub(1);\r\n\r\n            while (low < high.sub(1)) {\r\n                uint256 mid = Math.average(low, high);\r\n                // mid will always be strictly less than high and it rounds down\r\n                if (item.history[mid].fromBlock <= blockNumber) {\r\n                    low = mid;\r\n                } else {\r\n                    high = mid;\r\n                }\r\n            }\r\n            return low;\r\n        }   \r\n    }\r\n\r\n    /**\r\n     * @notice This function returns the value of the corresponding Snapshot\r\n     * @param item The list of Snapshots to be queried\r\n     * @param blockNumber The block number of the queried moment\r\n     * @return The value of the queried moment\r\n     */\r\n    function getValueAt(\r\n        SnapshotList storage item, \r\n        uint256 blockNumber\r\n    )\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (item.history.length == 0 || blockNumber < item.history[0].fromBlock) {\r\n            return 0;\r\n        } else {\r\n            uint256 index = findBlockIndex(item, blockNumber);\r\n            return item.history[index].value;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/token/IERC20Snapshot.sol\r\n\r\n/**\r\n * @title Snapshot Token Interface\r\n * @dev This is the interface of the ERC20Snapshot\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_5\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract IERC20Snapshot {\r\n    /**\r\n     * @notice Return the historical supply of the token at a certain time\r\n     * @param blockNumber The block number of the moment when token supply is queried\r\n     * @return The total supply at \"blockNumber\"\r\n     */\r\n    function totalSupplyAt(uint256 blockNumber) public view returns (uint256);\r\n\r\n    /**\r\n     * @notice Return the historical balance of an account at a certain time\r\n     * @param owner The address of the token holder\r\n     * @param blockNumber The block number of the moment when token supply is queried\r\n     * @return The balance of the queried token holder at \"blockNumber\"\r\n     */\r\n    function balanceOfAt(address owner, uint256 blockNumber) public view returns (uint256);\r\n}\r\n\r\n// File: contracts/token/ERC20Snapshot.sol\r\n\r\n/**\r\n * @title Snapshot Token\r\n * @dev This is an ERC20 compatible token that takes snapshots of account balances.\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_5\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract ERC20Snapshot is ERC20, IERC20Snapshot {\r\n    using Snapshots for Snapshots.SnapshotList;\r\n\r\n    mapping(address => Snapshots.SnapshotList) private _snapshotBalances; \r\n    Snapshots.SnapshotList private _snapshotTotalSupply;   \r\n\r\n    event AccountSnapshotCreated(address indexed account, uint256 indexed blockNumber, uint256 value);\r\n    event TotalSupplySnapshotCreated(uint256 indexed blockNumber, uint256 value);\r\n\r\n    /**\r\n     * @notice Return the historical supply of the token at a certain time\r\n     * @param blockNumber The block number of the moment when token supply is queried\r\n     * @return The total supply at \"blockNumber\"\r\n     */\r\n    function totalSupplyAt(uint256 blockNumber) public view returns (uint256) {\r\n        return _snapshotTotalSupply.getValueAt(blockNumber);\r\n    }\r\n\r\n    /**\r\n     * @notice Return the historical balance of an account at a certain time\r\n     * @param owner The address of the token holder\r\n     * @param blockNumber The block number of the moment when token supply is queried\r\n     * @return The balance of the queried token holder at \"blockNumber\"\r\n     */\r\n    function balanceOfAt(address owner, uint256 blockNumber) \r\n        public \r\n        view \r\n        returns (uint256) \r\n    {\r\n        return _snapshotBalances[owner].getValueAt(blockNumber);\r\n    }\r\n\r\n    /** OVERRIDE\r\n     * @notice Transfer tokens between two accounts while enforcing the update of Snapshots\r\n     * @param from The address to transfer from\r\n     * @param to The address to transfer to\r\n     * @param value The amount to be transferred\r\n     */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        super._transfer(from, to, value);\r\n        _snapshotBalances[from].createSnapshot(balanceOf(from));\r\n        _snapshotBalances[to].createSnapshot(balanceOf(to));\r\n        emit AccountSnapshotCreated(from, block.number, balanceOf(from));\r\n        emit AccountSnapshotCreated(to, block.number, balanceOf(to));\r\n    }\r\n\r\n    /** OVERRIDE\r\n     * @notice Mint tokens to one account while enforcing the update of Snapshots\r\n     * @param account The address that receives tokens\r\n     * @param value The amount of tokens to be created\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        super._mint(account, value);\r\n        _snapshotBalances[account].createSnapshot(balanceOf(account));\r\n        _snapshotTotalSupply.createSnapshot(totalSupply());\r\n        emit AccountSnapshotCreated(account, block.number, balanceOf(account));\r\n        emit TotalSupplySnapshotCreated(block.number, totalSupply());\r\n    }\r\n\r\n    /** OVERRIDE\r\n     * @notice Burn tokens of one account\r\n     * @param account The address whose tokens will be burnt\r\n     * @param value The amount of tokens to be burnt\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        super._burn(account, value);\r\n        _snapshotBalances[account].createSnapshot(balanceOf(account));\r\n        _snapshotTotalSupply.createSnapshot(totalSupply());\r\n        emit AccountSnapshotCreated(account, block.number, balanceOf(account));\r\n        emit TotalSupplySnapshotCreated(block.number, totalSupply());\r\n    }\r\n}\r\n\r\n// File: contracts/membership/ManagerRole.sol\r\n\r\n/**\r\n * @title Manager Role\r\n * @dev This contract is developed based on the Manager contract of OpenZeppelin.\r\n * The key difference is the management of the manager roles is restricted to one owner\r\n * account. At least one manager should exist in any situation.\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_5\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract ManagerRole is Ownable {\r\n    using Roles for Roles.Role;\r\n    using SafeMath for uint256;\r\n\r\n    event ManagerAdded(address indexed account);\r\n    event ManagerRemoved(address indexed account);\r\n\r\n    Roles.Role private managers;\r\n    uint256 private _numManager;\r\n\r\n    constructor() internal {\r\n        _addManager(msg.sender);\r\n        _numManager = 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager can take action\r\n     */\r\n    modifier onlyManager() {\r\n        require(isManager(msg.sender), \"The account is not a manager\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice This function allows to add managers in batch with control of the number of \r\n     * interations\r\n     * @param accounts The accounts to be added in batch\r\n     */\r\n    // solhint-disable-next-line\r\n    function addManagers(address[] calldata accounts) external onlyOwner {\r\n        uint256 length = accounts.length;\r\n        require(length <= 256, \"too many accounts\");\r\n        for (uint256 i = 0; i < length; i++) {\r\n            _addManager(accounts[i]);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @notice Add an account to the list of managers,\r\n     * @param account The account address whose manager role needs to be removed.\r\n     */\r\n    function removeManager(address account) external onlyOwner {\r\n        _removeManager(account);\r\n    }\r\n\r\n    /**\r\n     * @notice Check if an account is a manager\r\n     * @param account The account to be checked if it has a manager role\r\n     * @return true if the account is a manager. Otherwise, false\r\n     */\r\n    function isManager(address account) public view returns (bool) {\r\n        return managers.has(account);\r\n    }\r\n\r\n    /**\r\n     *@notice Get the number of the current managers\r\n     */\r\n    function numManager() public view returns (uint256) {\r\n        return _numManager;\r\n    }\r\n\r\n    /**\r\n     * @notice Add an account to the list of managers,\r\n     * @param account The account that needs to tbe added as a manager\r\n     */\r\n    function addManager(address account) public onlyOwner {\r\n        require(account != address(0), \"account is zero\");\r\n        _addManager(account);\r\n    }\r\n\r\n    /**\r\n     * @notice Renounce the manager role\r\n     * @dev This function was not explicitly required in the specs. There should be at\r\n     * least one manager at any time. Therefore, at least two when one manage renounces\r\n     * themselves.\r\n     */\r\n    function renounceManager() public {\r\n        require(_numManager >= 2, \"Managers are fewer than 2\");\r\n        _removeManager(msg.sender);\r\n    }\r\n\r\n    /** OVERRIDE \r\n    * @notice Allows the current owner to relinquish control of the contract.\r\n    * @dev Renouncing to ownership will leave the contract without an owner.\r\n    * It will not be possible to call the functions with the `onlyOwner`\r\n    * modifier anymore.\r\n    */\r\n    function renounceOwnership() public onlyOwner {\r\n        revert(\"Cannot renounce ownership\");\r\n    }\r\n\r\n    /**\r\n     * @notice Internal function to be called when adding a manager\r\n     * @param account The address of the manager-to-be\r\n     */\r\n    function _addManager(address account) internal {\r\n        _numManager = _numManager.add(1);\r\n        managers.add(account);\r\n        emit ManagerAdded(account);\r\n    }\r\n\r\n    /**\r\n     * @notice Internal function to remove one account from the manager list\r\n     * @param account The address of the to-be-removed manager\r\n     */\r\n    function _removeManager(address account) internal {\r\n        _numManager = _numManager.sub(1);\r\n        managers.remove(account);\r\n        emit ManagerRemoved(account);\r\n    }\r\n}\r\n\r\n// File: contracts/membership/PausableManager.sol\r\n\r\n/**\r\n * @title Pausable Manager Role\r\n * @dev This manager can also pause a contract. This contract is developed based on the \r\n * Pause contract of OpenZeppelin.\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_5\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract PausableManager is ManagerRole {\r\n\r\n    event BePaused(address manager);\r\n    event BeUnpaused(address manager);\r\n\r\n    bool private _paused;   // If the crowdsale contract is paused, controled by the manager...\r\n\r\n    constructor() internal {\r\n        _paused = false;\r\n    }\r\n\r\n   /**\r\n    * @notice Modifier to make a function callable only when the contract is not paused.\r\n    */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @notice Modifier to make a function callable only when the contract is paused.\r\n    */\r\n    modifier whenPaused() {\r\n        require(_paused, \"paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @return true if the contract is paused, false otherwise.\r\n    */\r\n    function paused() public view returns(bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n    * @notice called by the owner to pause, triggers stopped state\r\n    */\r\n    function pause() public onlyManager whenNotPaused {\r\n        _paused = true;\r\n        emit BePaused(msg.sender);\r\n    }\r\n\r\n    /**\r\n    * @notice called by the owner to unpause, returns to normal state\r\n    */\r\n    function unpause() public onlyManager whenPaused {\r\n        _paused = false;\r\n        emit BeUnpaused(msg.sender);\r\n    }\r\n}\r\n\r\n// File: contracts/vault/IVault.sol\r\n\r\n/*\r\n * @title Interface for basic vaults\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_5\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract IVault {\r\n    /**\r\n     * @notice Adding beneficiary to the vault\r\n     * @param beneficiary The account that receives token\r\n     * @param value The amount of token allocated\r\n     */\r\n    function receiveFor(address beneficiary, uint256 value) public;\r\n\r\n    /**\r\n     * @notice Update the releaseTime for vaults\r\n     * @param roundEndTime The new releaseTime\r\n     */\r\n    function updateReleaseTime(uint256 roundEndTime) public;\r\n}\r\n\r\n// File: contracts/property/CounterGuard.sol\r\n\r\n/**\r\n * @title modifier contract that guards certain properties only triggered once\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_5\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract CounterGuard {\r\n    /**\r\n     * @notice Controle if a boolean attribute (false by default) was updated to true.\r\n     * @dev This attribute is designed specifically for recording an action.\r\n     * @param criterion The boolean attribute that records if an action has taken place\r\n     */\r\n    modifier onlyOnce(bool criterion) {\r\n        require(criterion == false, \"Already been set\");\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts/token/IvoToken.sol\r\n\r\n/**\r\n * @title IVO token\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_5\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract IvoToken is CounterGuard, Reclaimable, ERC20Detailed,\r\n    ERC20Snapshot, ERC20Capped, ERC20Burnable, PausableManager {\r\n    // /* solhint-disable */\r\n    uint256 private constant SAFT_ALLOCATION = 22500000 ether;\r\n    uint256 private constant RESERVE_ALLOCATION = 10000000 ether;\r\n    uint256 private constant ADVISOR_ALLOCATION = 1500000 ether;\r\n    uint256 private constant TEAM_ALLOCATION = 13500000 ether;\r\n\r\n    address private _saftVaultAddress;\r\n    address private _reserveVaultAddress;\r\n    address private _advisorVestingAddress;\r\n    address private _teamVestingAddress;\r\n    mapping(address=>bool) private _listOfVaults;\r\n    bool private _setRole;\r\n\r\n    /**\r\n     * @notice Constructor of the token contract\r\n     * @param name The complete name of the token: \"INVAO token\"\r\n     * @param symbol The abbreviation of the token, to be searched for on exchange: \"IVO\"\r\n     * @param decimals The decimals of the token: 18\r\n     * @param cap The max cap of the token supply: 100000000000000000000000000\r\n     */\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint8 decimals,\r\n        uint256 cap\r\n    )\r\n        public\r\n        ERC20Detailed(name, symbol, decimals)\r\n        ERC20Capped(cap) {\r\n            pause();\r\n        }\r\n\r\n    /**\r\n     * @notice Pausable transfer function, with exception of letting vaults/vesting\r\n     * contracts transfer tokens to beneficiaries, when beneficiaries claim their token\r\n     * from vaults or vesting contracts.\r\n     * @param to The recipient address\r\n     * @param value The amount of token to be transferred\r\n     */\r\n    function transfer(address to, uint256 value)\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(!this.paused() || _listOfVaults[msg.sender], \"The token is paused and you are not a valid vault/vesting contract\");\r\n        return super.transfer(to, value);\r\n    }\r\n\r\n    /**\r\n     * @notice Pausable transferFrom function\r\n     * @param from The address from which tokens are sent\r\n     * @param to The recipient address\r\n     * @param value The amount of token to be transferred.\r\n     * @return If the transaction was successful in bool.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @notice Pausable approve function\r\n     * @param spender The authorized account to spend a certain amount of token on behalf of the holder\r\n     * @param value The amount of token that is allowed to spent\r\n     * @return If the transaction was successful in bool.\r\n     */\r\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.approve(spender, value);\r\n    }\r\n\r\n    /**\r\n     * @notice Pausable increaseAllowance function\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     * @return If the action was successful in bool.\r\n     */\r\n    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool success) {\r\n        return super.increaseAllowance(spender, addedValue);\r\n    }\r\n\r\n    /**\r\n     * @notice Pausable decreaseAllowance function\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     * @return If the action was successful in bool.\r\n     */\r\n    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool success) {\r\n        return super.decreaseAllowance(spender, subtractedValue);\r\n    }\r\n\r\n    /**\r\n    * @notice setup roles and contract addresses for the new token\r\n    * @param newOwner Address of the owner who is also a manager\r\n    * @param crowdsaleContractAddress crowdsal address: can mint and pause token\r\n    * @param saftVaultAddress Address of the SAFT vault contract.\r\n    * @param privateVaultAddress Address of the private sale vault contract\r\n    * @param presaleVaultAddress Address of the presale vault contract\r\n    * @param advisorVestingAddress Address of the advisor vesting contract.\r\n    * @param teamVestingAddress Address of the team vesting contract.\r\n    * @param reserveVaultAddress Address of the reserve vault contract.\r\n    */\r\n    function roleSetup(\r\n        address newOwner,\r\n        address crowdsaleContractAddress,\r\n        IVault saftVaultAddress,\r\n        IVault privateVaultAddress,\r\n        IVault presaleVaultAddress,\r\n        IVault advisorVestingAddress,\r\n        IVault teamVestingAddress,\r\n        IVault reserveVaultAddress\r\n    )\r\n        public\r\n        onlyOwner\r\n        onlyOnce(_setRole)\r\n    {\r\n        _setRole = true;\r\n\r\n        // set vault and vesting contract addresses\r\n        _saftVaultAddress = address(saftVaultAddress);\r\n        _reserveVaultAddress = address(reserveVaultAddress);\r\n        _advisorVestingAddress = address(advisorVestingAddress);\r\n        _teamVestingAddress = address(teamVestingAddress);\r\n        _listOfVaults[_saftVaultAddress] = true;\r\n        _listOfVaults[address(privateVaultAddress)] = true;\r\n        _listOfVaults[address(presaleVaultAddress)] = true;\r\n        _listOfVaults[_advisorVestingAddress] = true;\r\n        _listOfVaults[_teamVestingAddress] = true;\r\n\r\n        //After setting adresses of vaults, manager can trigger the allocation of tokens\r\n        // to vaults. No need to mint to the private vault nor the presale vault  because\r\n        // it's been minted dynamicly.\r\n        mint(_saftVaultAddress, SAFT_ALLOCATION);\r\n        mint(_reserveVaultAddress, RESERVE_ALLOCATION);\r\n        mint(_advisorVestingAddress, ADVISOR_ALLOCATION);\r\n        mint(_teamVestingAddress, TEAM_ALLOCATION);\r\n\r\n        addManager(newOwner);\r\n        addManager(crowdsaleContractAddress);\r\n        addMinter(crowdsaleContractAddress);\r\n        _removeManager(msg.sender);\r\n        _removeMinter(msg.sender);\r\n        transferOwnership(newOwner);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenToBeRecovered\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numManager\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"addManagers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"crowdsaleContractAddress\",\"type\":\"address\"},{\"internalType\":\"contract IVault\",\"name\":\"saftVaultAddress\",\"type\":\"address\"},{\"internalType\":\"contract IVault\",\"name\":\"privateVaultAddress\",\"type\":\"address\"},{\"internalType\":\"contract IVault\",\"name\":\"presaleVaultAddress\",\"type\":\"address\"},{\"internalType\":\"contract IVault\",\"name\":\"advisorVestingAddress\",\"type\":\"address\"},{\"internalType\":\"contract IVault\",\"name\":\"teamVestingAddress\",\"type\":\"address\"},{\"internalType\":\"contract IVault\",\"name\":\"reserveVaultAddress\",\"type\":\"address\"}],\"name\":\"roleSetup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"BePaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"BeUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ManagerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ManagerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"AccountSnapshotCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TotalSupplySnapshotCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"IvoToken","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000052b7d2dcc80cd2e4000000000000000000000000000000000000000000000000000000000000000000000b494e56414f20746f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000349564f0000000000000000000000000000000000000000000000000000000000","Library":"","LicenseType":"GNU LGPLv3","SwarmSource":"bzzr://ada81a597374e58f638a71971a2b74cfc5bb15b1a0ddf6a1776d79c99ce28d6c"}]}