{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\npragma solidity ^0.4.23;\r\n\r\npragma solidity ^0.4.23;\r\n\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20 {\r\n\r\n    // ERC Token Standard #223 Interface\r\n    // https://github.com/ethereum/EIPs/issues/223\r\n\r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals;\r\n\r\n    function transfer(address _to, uint _value, bytes _data) external returns (bool success);\r\n\r\n    // approveAndCall\r\n    function approveAndCall(address spender, uint tokens, bytes data) external returns (bool success);\r\n\r\n    // ERC Token Standard #20 Interface\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n\r\n\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n\r\n    // bulk operations\r\n    function transferBulk(address[] to, uint[] tokens) public;\r\n    function approveBulk(address[] spender, uint[] tokens) public;\r\n}\r\n\r\npragma solidity ^0.4.23;\r\n\r\n/// @title ERC-721 Non-Fungible Token Standard\r\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n///  Note: the ERC-165 identifier for this interface is 0x6466353c\r\ninterface ERC721 /*is ERC165*/ {\r\n\r\n    /// @notice Query if a contract implements an interface\r\n    /// @param interfaceID The interface identifier, as specified in ERC-165\r\n    /// @dev Interface identification is specified in ERC-165. This function\r\n    ///  uses less than 30,000 gas.\r\n    /// @return `true` if the contract implements `interfaceID` and\r\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\r\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n\r\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\r\n    ///  This event emits when NFTs are created (`from` == 0) and destroyed\r\n    ///  (`to` == 0). Exception: during contract creation, any number of NFTs\r\n    ///  may be created and assigned without emitting Transfer. At the time of\r\n    ///  any transfer, the approved address for that NFT (if any) is reset to none.\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n\r\n    /// @dev This emits when the approved address for an NFT is changed or\r\n    ///  reaffirmed. The zero address indicates there is no approved address.\r\n    ///  When a Transfer event emits, this also indicates that the approved\r\n    ///  address for that NFT (if any) is reset to none.\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n\r\n    /// @dev This emits when an operator is enabled or disabled for an owner.\r\n    ///  The operator can manage all NFTs of the owner.\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n    /// @notice Count all NFTs assigned to an owner\r\n    /// @dev NFTs assigned to the zero address are considered invalid, and this\r\n    ///  function throws for queries about the zero address.\r\n    /// @param _owner An address for whom to query the balance\r\n    /// @return The number of NFTs owned by `_owner`, possibly zero\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n\r\n    /// @notice Find the owner of an NFT\r\n    /// @param _tokenId The identifier for an NFT\r\n    /// @dev NFTs assigned to zero address are considered invalid, and queries\r\n    ///  about them do throw.\r\n    /// @return The address of the owner of the NFT\r\n    function ownerOf(uint256 _tokenId) external view returns (address);\r\n\r\n    /// @notice Transfers the ownership of an NFT from one address to another address\r\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\r\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\r\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\r\n    ///  `_tokenId` is not a valid NFT. When transfer is complete, this function\r\n    ///  checks if `_to` is a smart contract (code size > 0). If so, it calls\r\n    ///  `onERC721Received` on `_to` and throws if the return value is not\r\n    ///  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`.\r\n    /// @param _from The current owner of the NFT\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The NFT to transfer\r\n    /// @param data Additional data with no specified format, sent in call to `_to`\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) external;\r\n    \r\n    /// @notice Transfers the ownership of an NFT from one address to another address\r\n    /// @dev This works identically to the other function with an extra data parameter,\r\n    ///  except this function just sets data to \"\"\r\n    /// @param _from The current owner of the NFT\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The NFT to transfer\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\r\n\r\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\r\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\r\n    ///  THEY MAY BE PERMANENTLY LOST\r\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\r\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\r\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\r\n    ///  `_tokenId` is not a valid NFT.\r\n    /// @param _from The current owner of the NFT\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The NFT to transfer\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n\r\n    /// @notice Set or reaffirm the approved address for an NFT\r\n    /// @dev The zero address indicates there is no approved address.\r\n    /// @dev Throws unless `msg.sender` is the current NFT owner, or an authorized\r\n    ///  operator of the current owner.\r\n    /// @param _approved The new approved NFT controller\r\n    /// @param _tokenId The NFT to approve\r\n    function approve(address _approved, uint256 _tokenId) external;\r\n\r\n    /// @notice Enable or disable approval for a third party (\"operator\") to manage\r\n    ///  all your asset.\r\n    /// @dev Emits the ApprovalForAll event\r\n    /// @param _operator Address to add to the set of authorized operators.\r\n    /// @param _approved True if the operators is approved, false to revoke approval\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n\r\n    /// @notice Get the approved address for a single NFT\r\n    /// @dev Throws if `_tokenId` is not a valid NFT\r\n    /// @param _tokenId The NFT to find the approved address for\r\n    /// @return The approved address for this NFT, or the zero address if there is none\r\n    function getApproved(uint256 _tokenId) external view returns (address);\r\n\r\n    /// @notice Query if an address is an authorized operator for another address\r\n    /// @param _owner The address that owns the NFTs\r\n    /// @param _operator The address that acts on behalf of the owner\r\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n\r\n\r\n   /// @notice A descriptive name for a collection of NFTs in this contract\r\n    function name() external pure returns (string _name);\r\n\r\n    /// @notice An abbreviated name for NFTs in this contract\r\n    function symbol() external pure returns (string _symbol);\r\n\r\n    \r\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\r\n    /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\r\n    ///  3986. The URI may point to a JSON file that conforms to the \"ERC721\r\n    ///  Metadata JSON Schema\".\r\n    function tokenURI(uint256 _tokenId) external view returns (string);\r\n\r\n     /// @notice Count NFTs tracked by this contract\r\n    /// @return A count of valid NFTs tracked by this contract, where each one of\r\n    ///  them has an assigned and queryable owner not equal to the zero address\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /// @notice Enumerate valid NFTs\r\n    /// @dev Throws if `_index` >= `totalSupply()`.\r\n    /// @param _index A counter less than `totalSupply()`\r\n    /// @return The token identifier for the `_index`th NFT,\r\n    ///  (sort order not specified)\r\n    function tokenByIndex(uint256 _index) external view returns (uint256);\r\n\r\n    /// @notice Enumerate NFTs assigned to an owner\r\n    /// @dev Throws if `_index` >= `balanceOf(_owner)` or if\r\n    ///  `_owner` is the zero address, representing invalid NFTs.\r\n    /// @param _owner An address where we are interested in NFTs owned by them\r\n    /// @param _index A counter less than `balanceOf(_owner)`\r\n    /// @return The token identifier for the `_index`th NFT assigned to `_owner`,\r\n    ///   (sort order not specified)\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);\r\n\r\n    /// @notice Transfers a Cutie to another address. When transferring to a smart\r\n    ///  contract, ensure that it is aware of ERC-721 (or\r\n    ///  BlockchainCuties specifically), otherwise the Cutie may be lost forever.\r\n    /// @param _to The address of the recipient, can be a user or contract.\r\n    /// @param _cutieId The ID of the Cutie to transfer.\r\n    function transfer(address _to, uint256 _cutieId) external;\r\n}\r\n\r\npragma solidity ^0.4.23;\r\n\r\npragma solidity ^0.4.23;\r\n\r\n\r\n/**\r\n * @title ERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface ERC165 {\r\n\r\n    /**\r\n     * @notice Query if a contract implements an interface\r\n     * @param _interfaceId The interface identifier, as specified in ERC-165\r\n     * @dev Interface identification is specified in ERC-165. This function\r\n     * uses less than 30,000 gas.\r\n     */\r\n    function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\n\r\n/**\r\n    @title ERC-1155 Multi Token Standard\r\n    @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1155.md\r\n    Note: The ERC-165 identifier for this interface is 0xd9b67a26.\r\n */\r\ninterface IERC1155 /* is ERC165 */ {\r\n    /**\r\n        @dev Either `TransferSingle` or `TransferBatch` MUST emit when tokens are transferred, including zero value transfers as well as minting or burning (see \"Safe Transfer Rules\" section of the standard).\r\n        The `_operator` argument MUST be msg.sender.\r\n        The `_from` argument MUST be the address of the holder whose balance is decreased.\r\n        The `_to` argument MUST be the address of the recipient whose balance is increased.\r\n        The `_id` argument MUST be the token type being transferred.\r\n        The `_value` argument MUST be the number of tokens the holder balance is decreased by and match what the recipient balance is increased by.\r\n        When minting/creating tokens, the `_from` argument MUST be set to `0x0` (i.e. zero address).\r\n        When burning/destroying tokens, the `_to` argument MUST be set to `0x0` (i.e. zero address).\r\n    */\r\n    event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _value);\r\n\r\n    /**\r\n        @dev Either `TransferSingle` or `TransferBatch` MUST emit when tokens are transferred, including zero value transfers as well as minting or burning (see \"Safe Transfer Rules\" section of the standard).\r\n        The `_operator` argument MUST be msg.sender.\r\n        The `_from` argument MUST be the address of the holder whose balance is decreased.\r\n        The `_to` argument MUST be the address of the recipient whose balance is increased.\r\n        The `_ids` argument MUST be the list of tokens being transferred.\r\n        The `_values` argument MUST be the list of number of tokens (matching the list and order of tokens specified in _ids) the holder balance is decreased by and match what the recipient balance is increased by.\r\n        When minting/creating tokens, the `_from` argument MUST be set to `0x0` (i.e. zero address).\r\n        When burning/destroying tokens, the `_to` argument MUST be set to `0x0` (i.e. zero address).\r\n    */\r\n    event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _values);\r\n\r\n    /**\r\n        @dev MUST emit when approval for a second party/operator address to manage all tokens for an owner address is enabled or disabled (absense of an event assumes disabled).\r\n    */\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n    /**\r\n        @dev MUST emit when the URI is updated for a token ID.\r\n        URIs are defined in RFC 3986.\r\n        The URI MUST point a JSON file that conforms to the \"ERC-1155 Metadata URI JSON Schema\".\r\n\r\n        The URI value allows for ID substitution by clients. If the string {id} exists in any URI,\r\n        clients MUST replace this with the actual token ID in hexadecimal form.\r\n    */\r\n    event URI(string _value, uint256 indexed _id);\r\n\r\n    /**\r\n        @notice Transfers `_value` amount of an `_id` from the `_from` address to the `_to` address specified (with safety call).\r\n        @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see \"Approval\" section of the standard).\r\n        MUST revert if `_to` is the zero address.\r\n        MUST revert if balance of holder for token `_id` is lower than the `_value` sent.\r\n        MUST revert on any other error.\r\n        MUST emit the `TransferSingle` event to reflect the balance change (see \"Safe Transfer Rules\" section of the standard).\r\n        After the above conditions are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call `onERC1155Received` on `_to` and act appropriately (see \"Safe Transfer Rules\" section of the standard).\r\n        @param _from    Source address\r\n        @param _to      Target address\r\n        @param _id      ID of the token type\r\n        @param _value   Transfer amount\r\n        @param _data    Additional data with no specified format, MUST be sent unaltered in call to `onERC1155Received` on `_to`\r\n    */\r\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes _data) external;\r\n\r\n    /**\r\n        @notice Transfers `_values` amount(s) of `_ids` from the `_from` address to the `_to` address specified (with safety call).\r\n        @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see \"Approval\" section of the standard).\r\n        MUST revert if `_to` is the zero address.\r\n        MUST revert if length of `_ids` is not the same as length of `_values`.\r\n        MUST revert if any of the balance(s) of the holder(s) for token(s) in `_ids` is lower than the respective amount(s) in `_values` sent to the recipient.\r\n        MUST revert on any other error.\r\n        MUST emit `TransferSingle` or `TransferBatch` event(s) such that all the balance changes are reflected (see \"Safe Transfer Rules\" section of the standard).\r\n        Balance changes and events MUST follow the ordering of the arrays (_ids[0]/_values[0] before _ids[1]/_values[1], etc).\r\n        After the above conditions for the transfer(s) in the batch are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call the relevant `ERC1155TokenReceiver` hook(s) on `_to` and act appropriately (see \"Safe Transfer Rules\" section of the standard).\r\n        @param _from    Source address\r\n        @param _to      Target address\r\n        @param _ids     IDs of each token type (order and length must match _values array)\r\n        @param _values  Transfer amounts per token type (order and length must match _ids array)\r\n        @param _data    Additional data with no specified format, MUST be sent unaltered in call to the `ERC1155TokenReceiver` hook(s) on `_to`\r\n    */\r\n    function safeBatchTransferFrom(address _from, address _to, uint256[] _ids, uint256[] _values, bytes _data) external;\r\n\r\n    /**\r\n        @notice Get the balance of an account's Tokens.\r\n        @param _owner  The address of the token holder\r\n        @param _id     ID of the Token\r\n        @return        The _owner's balance of the Token type requested\r\n     */\r\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\r\n\r\n    /**\r\n        @notice Get the balance of multiple account/token pairs\r\n        @param _owners The addresses of the token holders\r\n        @param _ids    ID of the Tokens\r\n        @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\r\n     */\r\n    function balanceOfBatch(address[] _owners, uint256[] _ids) external view returns (uint256[] memory);\r\n\r\n    /**\r\n        @notice Enable or disable approval for a third party (\"operator\") to manage all of the caller's tokens.\r\n        @dev MUST emit the ApprovalForAll event on success.\r\n        @param _operator  Address to add to the set of authorized operators\r\n        @param _approved  True if the operator is approved, false to revoke approval\r\n    */\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n\r\n    /**\r\n        @notice Queries the approval status of an operator for a given owner.\r\n        @param _owner     The owner of the Tokens\r\n        @param _operator  Address of authorized operator\r\n        @return           True if the operator is approved, false if not\r\n    */\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n}\r\n\r\n\r\ncontract Operators\r\n{\r\n    mapping (address=>bool) ownerAddress;\r\n    mapping (address=>bool) operatorAddress;\r\n\r\n    constructor() public\r\n    {\r\n        ownerAddress[msg.sender] = true;\r\n    }\r\n\r\n    modifier onlyOwner()\r\n    {\r\n        require(ownerAddress[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function isOwner(address _addr) public view returns (bool) {\r\n        return ownerAddress[_addr];\r\n    }\r\n\r\n    function addOwner(address _newOwner) external onlyOwner {\r\n        require(_newOwner != address(0));\r\n\r\n        ownerAddress[_newOwner] = true;\r\n    }\r\n\r\n    function removeOwner(address _oldOwner) external onlyOwner {\r\n        delete(ownerAddress[_oldOwner]);\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(isOperator(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isOperator(address _addr) public view returns (bool) {\r\n        return operatorAddress[_addr] || ownerAddress[_addr];\r\n    }\r\n\r\n    function addOperator(address _newOperator) external onlyOwner {\r\n        require(_newOperator != address(0));\r\n\r\n        operatorAddress[_newOperator] = true;\r\n    }\r\n\r\n    function removeOperator(address _oldOperator) external onlyOwner {\r\n        delete(operatorAddress[_oldOperator]);\r\n    }\r\n\r\n    function withdrawERC20(ERC20 _tokenContract) external onlyOwner\r\n    {\r\n        uint256 balance = _tokenContract.balanceOf(address(this));\r\n        _tokenContract.transfer(msg.sender, balance);\r\n    }\r\n\r\n    function approveERC721(ERC721 _tokenContract) external onlyOwner\r\n    {\r\n        _tokenContract.setApprovalForAll(msg.sender, true);\r\n    }\r\n\r\n    function approveERC1155(IERC1155 _tokenContract) external onlyOwner\r\n    {\r\n        _tokenContract.setApprovalForAll(msg.sender, true);\r\n    }\r\n\r\n    function withdrawEth() external onlyOwner\r\n    {\r\n        if (address(this).balance > 0)\r\n        {\r\n            msg.sender.transfer(address(this).balance);\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity ^0.4.23;\r\n\r\n/// @title Auction Market for Blockchain Cuties.\r\n/// @author https://BlockChainArchitect.io\r\ncontract MarketInterface \r\n{\r\n    function withdrawEthFromBalance() external;\r\n\r\n    function createAuction(uint40 _cutieId, uint128 _startPrice, uint128 _endPrice, uint40 _duration, address _seller) external payable;\r\n    function createAuctionWithTokens(uint40 _cutieId, uint128 _startPrice, uint128 _endPrice, uint40 _duration, address _seller, address[] allowedTokens) external payable;\r\n\r\n    function bid(uint40 _cutieId) external payable;\r\n\r\n    function cancelActiveAuctionWhenPaused(uint40 _cutieId) external;\r\n\r\n\tfunction getAuctionInfo(uint40 _cutieId)\r\n        external\r\n        view\r\n        returns\r\n    (\r\n        address seller,\r\n        uint128 startPrice,\r\n        uint128 endPrice,\r\n        uint40 duration,\r\n        uint40 startedAt,\r\n        uint128 featuringFee,\r\n        address[] allowedTokens\r\n    );\r\n}\r\n\r\npragma solidity ^0.4.23;\r\n\r\npragma solidity ^0.4.23;\r\n\r\n/// @title BlockchainCuties: Collectible and breedable cuties on the Ethereum blockchain.\r\n/// @author https://BlockChainArchitect.io\r\n/// @dev This is the BlockchainCuties configuration. It can be changed redeploying another version.\r\ninterface ConfigInterface\r\n{\r\n    function isConfig() external pure returns (bool);\r\n\r\n    function getCooldownIndexFromGeneration(uint16 _generation, uint40 _cutieId) external view returns (uint16);\r\n    function getCooldownEndTimeFromIndex(uint16 _cooldownIndex, uint40 _cutieId) external view returns (uint40);\r\n    function getCooldownIndexFromGeneration(uint16 _generation) external view returns (uint16);\r\n    function getCooldownEndTimeFromIndex(uint16 _cooldownIndex) external view returns (uint40);\r\n\r\n    function getCooldownIndexCount() external view returns (uint256);\r\n\r\n    function getBabyGenFromId(uint40 _momId, uint40 _dadId) external view returns (uint16);\r\n    function getBabyGen(uint16 _momGen, uint16 _dadGen) external pure returns (uint16);\r\n\r\n    function getTutorialBabyGen(uint16 _dadGen) external pure returns (uint16);\r\n\r\n    function getBreedingFee(uint40 _momId, uint40 _dadId) external view returns (uint256);\r\n}\r\n\r\n\r\ncontract CutieCoreInterface\r\n{\r\n    function isCutieCore() pure public returns (bool);\r\n\r\n    ConfigInterface public config;\r\n\r\n    function transferFrom(address _from, address _to, uint256 _cutieId) external;\r\n    function transfer(address _to, uint256 _cutieId) external;\r\n\r\n    function ownerOf(uint256 _cutieId)\r\n        external\r\n        view\r\n        returns (address owner);\r\n\r\n    function getCutie(uint40 _id)\r\n        external\r\n        view\r\n        returns (\r\n        uint256 genes,\r\n        uint40 birthTime,\r\n        uint40 cooldownEndTime,\r\n        uint40 momId,\r\n        uint40 dadId,\r\n        uint16 cooldownIndex,\r\n        uint16 generation\r\n    );\r\n\r\n    function getGenes(uint40 _id)\r\n        public\r\n        view\r\n        returns (\r\n        uint256 genes\r\n    );\r\n\r\n\r\n    function getCooldownEndTime(uint40 _id)\r\n        public\r\n        view\r\n        returns (\r\n        uint40 cooldownEndTime\r\n    );\r\n\r\n    function getCooldownIndex(uint40 _id)\r\n        public\r\n        view\r\n        returns (\r\n        uint16 cooldownIndex\r\n    );\r\n\r\n\r\n    function getGeneration(uint40 _id)\r\n        public\r\n        view\r\n        returns (\r\n        uint16 generation\r\n    );\r\n\r\n    function getOptional(uint40 _id)\r\n        public\r\n        view\r\n        returns (\r\n        uint64 optional\r\n    );\r\n\r\n\r\n    function changeGenes(\r\n        uint40 _cutieId,\r\n        uint256 _genes)\r\n        public;\r\n\r\n    function changeCooldownEndTime(\r\n        uint40 _cutieId,\r\n        uint40 _cooldownEndTime)\r\n        public;\r\n\r\n    function changeCooldownIndex(\r\n        uint40 _cutieId,\r\n        uint16 _cooldownIndex)\r\n        public;\r\n\r\n    function changeOptional(\r\n        uint40 _cutieId,\r\n        uint64 _optional)\r\n        public;\r\n\r\n    function changeGeneration(\r\n        uint40 _cutieId,\r\n        uint16 _generation)\r\n        public;\r\n\r\n    function createSaleAuction(\r\n        uint40 _cutieId,\r\n        uint128 _startPrice,\r\n        uint128 _endPrice,\r\n        uint40 _duration\r\n    )\r\n    public;\r\n\r\n    function getApproved(uint256 _tokenId) external returns (address);\r\n    function totalSupply() view external returns (uint256);\r\n    function createPromoCutie(uint256 _genes, address _owner) external;\r\n    function checkOwnerAndApprove(address _claimant, uint40 _cutieId, address _pluginsContract) external view;\r\n    function breedWith(uint40 _momId, uint40 _dadId) public payable returns (uint40);\r\n    function getBreedingFee(uint40 _momId, uint40 _dadId) public view returns (uint256);\r\n    function restoreCutieToAddress(uint40 _cutieId, address _recipient) external;\r\n    function createGen0Auction(uint256 _genes, uint128 startPrice, uint128 endPrice, uint40 duration) external;\r\n    function createGen0AuctionWithTokens(uint256 _genes, uint128 startPrice, uint128 endPrice, uint40 duration, address[] allowedTokens) external;\r\n    function createPromoCutieWithGeneration(uint256 _genes, address _owner, uint16 _generation) external;\r\n    function createPromoCutieBulk(uint256[] _genes, address _owner, uint16 _generation) external;\r\n}\r\n\r\npragma solidity ^0.4.23;\r\n\r\n/// @title BlockchainCuties Presale Contract\r\n/// @author https://BlockChainArchitect.io\r\ninterface PresaleInterface\r\n{\r\n    function bidWithPlugin(uint32 lotId, address purchaser, uint valueForEvent, address tokenForEvent) external payable;\r\n    function bidWithPluginReferrer(uint32 lotId, address purchaser, uint valueForEvent, address tokenForEvent, address referrer) external payable;\r\n\r\n    function getLotNftFixedRewards(uint32 lotId) external view returns (\r\n        uint256 rewardsNFTFixedKind,\r\n        uint256 rewardsNFTFixedIndex\r\n    );\r\n    function getLotToken1155Rewards(uint32 lotId) external view returns (\r\n        uint256[10] memory rewardsToken1155tokenId,\r\n        uint256[10] memory rewardsToken1155count\r\n    );\r\n    function getLotCutieRewards(uint32 lotId) external view returns (\r\n        uint256[10] memory rewardsCutieGenome,\r\n        uint256[10] memory rewardsCutieGeneration\r\n    );\r\n    function getLotNftMintRewards(uint32 lotId) external view returns (\r\n        uint256[10] memory rewardsNFTMintNftKind\r\n    );\r\n\r\n    function getLotToken1155RewardByIndex(uint32 lotId, uint index) external view returns (\r\n        uint256 rewardsToken1155tokenId,\r\n        uint256 rewardsToken1155count\r\n    );\r\n    function getLotCutieRewardByIndex(uint32 lotId, uint index) external view returns (\r\n        uint256 rewardsCutieGenome,\r\n        uint256 rewardsCutieGeneration\r\n    );\r\n    function getLotNftMintRewardByIndex(uint32 lotId, uint index) external view returns (\r\n        uint256 rewardsNFTMintNftKind\r\n    );\r\n\r\n    function getLotToken1155RewardCount(uint32 lotId) external view returns (uint);\r\n    function getLotCutieRewardCount(uint32 lotId) external view returns (uint);\r\n    function getLotNftMintRewardCount(uint32 lotId) external view returns (uint);\r\n\r\n    function getLotRewards(uint32 lotId) external view returns (\r\n        uint256[5] memory rewardsToken1155tokenId,\r\n        uint256[5] memory rewardsToken1155count,\r\n        uint256[5] memory rewardsNFTMintNftKind,\r\n        uint256[5] memory rewardsNFTFixedKind,\r\n        uint256[5] memory rewardsNFTFixedIndex,\r\n        uint256[5] memory rewardsCutieGenome,\r\n        uint256[5] memory rewardsCutieGeneration\r\n    );\r\n}\r\n\r\npragma solidity ^0.4.23;\r\n\r\ninterface BlockchainCutiesERC1155Interface\r\n{\r\n    function mintNonFungibleSingleShort(uint128 _type, address _to) external;\r\n    function mintNonFungibleSingle(uint256 _type, address _to) external;\r\n    function mintNonFungibleShort(uint128 _type, address[] _to) external;\r\n    function mintNonFungible(uint256 _type, address[] _to) external;\r\n    function mintFungibleSingle(uint256 _id, address _to, uint256 _quantity) external;\r\n    function mintFungible(uint256 _id, address[] _to, uint256[] _quantities) external;\r\n    function isNonFungible(uint256 _id) external pure returns(bool);\r\n    function ownerOf(uint256 _id) external view returns (address);\r\n    function totalSupplyNonFungible(uint256 _type) view external returns (uint256);\r\n    function totalSupplyNonFungibleShort(uint128 _type) view external returns (uint256);\r\n\r\n    /**\r\n        @notice A distinct Uniform Resource Identifier (URI) for a given token.\r\n        @dev URIs are defined in RFC 3986.\r\n        The URI may point to a JSON file that conforms to the \"ERC-1155 Metadata URI JSON Schema\".\r\n        @return URI string\r\n    */\r\n    function uri(uint256 _id) external view returns (string memory);\r\n    function proxyTransfer721(address _from, address _to, uint256 _tokenId, bytes _data) external;\r\n    function proxyTransfer20(address _from, address _to, uint256 _tokenId, uint256 _value) external;\r\n    /**\r\n        @notice Get the balance of an account's Tokens.\r\n        @param _owner  The address of the token holder\r\n        @param _id     ID of the Token\r\n        @return        The _owner's balance of the Token type requested\r\n     */\r\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\r\n    /**\r\n        @notice Transfers `_value` amount of an `_id` from the `_from` address to the `_to` address specified (with safety call).\r\n        @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see \"Approval\" section of the standard).\r\n        MUST revert if `_to` is the zero address.\r\n        MUST revert if balance of holder for token `_id` is lower than the `_value` sent.\r\n        MUST revert on any other error.\r\n        MUST emit the `TransferSingle` event to reflect the balance change (see \"Safe Transfer Rules\" section of the standard).\r\n        After the above conditions are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call `onERC1155Received` on `_to` and act appropriately (see \"Safe Transfer Rules\" section of the standard).\r\n        @param _from    Source address\r\n        @param _to      Target address\r\n        @param _id      ID of the token type\r\n        @param _value   Transfer amount\r\n        @param _data    Additional data with no specified format, MUST be sent unaltered in call to `onERC1155Received` on `_to`\r\n    */\r\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes _data) external;\r\n}\r\n\r\npragma solidity ^0.4.23;\r\n\r\ninterface PluginsInterface\r\n{\r\n    function isPlugin(address contractAddress) external view returns(bool);\r\n    function withdraw() external;\r\n    function setMinSign(uint40 _newMinSignId) external;\r\n\r\n    function runPluginOperator(\r\n        address _pluginAddress,\r\n        uint40 _signId,\r\n        uint40 _cutieId,\r\n        uint128 _value,\r\n        uint256 _parameter,\r\n        address _sender) external payable;\r\n}\r\n\r\npragma solidity ^0.4.23;\r\n\r\n/**\r\n    Note: The ERC-165 identifier for this interface is 0x43b236a2.\r\n*/\r\ninterface IERC1155TokenReceiver {\r\n\r\n    /**\r\n        @notice Handle the receipt of a single ERC1155 token type.\r\n        @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated.\r\n        This function MUST return `bytes4(keccak256(\"accept_erc1155_tokens()\"))` (i.e. 0x4dc21a2f) if it accepts the transfer.\r\n        This function MUST revert if it rejects the transfer.\r\n        Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\r\n        @param _operator  The address which initiated the transfer (i.e. msg.sender)\r\n        @param _from      The address which previously owned the token\r\n        @param _id        The id of the token being transferred\r\n        @param _value     The amount of tokens being transferred\r\n        @param _data      Additional data with no specified format\r\n        @return           `bytes4(keccak256(\"accept_erc1155_tokens()\"))`\r\n    */\r\n    function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _value, bytes _data) external returns(bytes4);\r\n\r\n    /**\r\n        @notice Handle the receipt of multiple ERC1155 token types.\r\n        @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated.\r\n        This function MUST return `bytes4(keccak256(\"accept_batch_erc1155_tokens()\"))` (i.e. 0xac007889) if it accepts the transfer(s).\r\n        This function MUST revert if it rejects the transfer(s).\r\n        Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\r\n        @param _operator  The address which initiated the batch transfer (i.e. msg.sender)\r\n        @param _from      The address which previously owned the token\r\n        @param _ids       An array containing ids of each token being transferred (order and length must match _values array)\r\n        @param _values    An array containing amounts of each token being transferred (order and length must match _ids array)\r\n        @param _data      Additional data with no specified format\r\n        @return           `bytes4(keccak256(\"accept_batch_erc1155_tokens()\"))`\r\n    */\r\n    function onERC1155BatchReceived(address _operator, address _from, uint256[] _ids, uint256[] _values, bytes _data) external returns(bytes4);\r\n\r\n    /**\r\n        @notice Indicates whether a contract implements the `ERC1155TokenReceiver` functions and so can accept ERC1155 token types.\r\n        @dev This function MUST return `bytes4(keccak256(\"isERC1155TokenReceiver()\"))` (i.e. 0x0d912442).\r\n        This function MUST NOT consume more than 5,000 gas.\r\n        @return           `bytes4(keccak256(\"isERC1155TokenReceiver()\"))`\r\n    */\r\n    function isERC1155TokenReceiver() external view returns (bytes4);\r\n}\r\n\r\n\r\n/// @title BlockchainCuties: Collectible and breedable cuties on the Ethereum blockchain.\r\n/// @dev This contract allows players to buy cutie for fiat currency.\r\n///      Server accepts fiat payment and call proxy contract bo buy cutie on market and\r\n///      transfer it to purchaser.\r\n/// @author https://BlockChainArchitect.io\r\ncontract FiatProxy is Operators, IERC1155TokenReceiver {\r\n\r\n    CutieCoreInterface public core;\r\n    PluginsInterface public plugins;\r\n    PresaleInterface public sale;\r\n\r\n    event OrderSuccess(uint orderId, uint value, address purchaser);\r\n\r\n    function setup(CutieCoreInterface _core, PluginsInterface _plugins, PresaleInterface _sale) external onlyOwner\r\n    {\r\n        core = _core;\r\n        plugins = _plugins;\r\n        sale = _sale;\r\n    }\r\n\r\n    function deposit() external payable\r\n    {\r\n        // accept money\r\n    }\r\n\r\n    function () external payable\r\n    {\r\n        // accept money\r\n    }\r\n\r\n    function buyCutie(uint40 _orderId, uint40 _cutieId, uint _value, address _saleMarketAddress, address _purchaser) external onlyOperator\r\n    {\r\n        MarketInterface market = MarketInterface(_saleMarketAddress);\r\n        market.bid.value(_value)(_cutieId);\r\n\r\n        core.transfer(_purchaser, _cutieId);\r\n\r\n        emit OrderSuccess(_orderId, _value, _purchaser);\r\n    }\r\n\r\n    function buySaleLot(uint40 _orderId, uint32 _lotId, uint _value, address _purchaser) external onlyOperator\r\n    {\r\n        sale.bidWithPlugin(_lotId, _purchaser, _value, address(0x0));\r\n\r\n        emit OrderSuccess(_orderId, _value, _purchaser);\r\n    }\r\n\r\n    function runPlugin(\r\n        uint40 _orderId,\r\n        address _pluginAddress,\r\n        uint40 _signId,\r\n        uint40 _cutieId,\r\n        uint128 _value,\r\n        uint256 _parameter,\r\n        address _purchaser) external onlyOperator\r\n    {\r\n        plugins.runPluginOperator.value(_value)(_pluginAddress, _signId, _cutieId, _value, _parameter, _purchaser);\r\n\r\n        emit OrderSuccess(_orderId, _value, _purchaser);\r\n    }\r\n\r\n    function isERC1155TokenReceiver() external view returns (bytes4)\r\n    {\r\n        return bytes4(keccak256(\"isERC1155TokenReceiver()\"));\r\n    }\r\n\r\n    function onERC1155BatchReceived(address, address, uint256[], uint256[], bytes) external returns(bytes4)\r\n    {\r\n        return bytes4(keccak256(\"accept_batch_erc1155_tokens()\"));\r\n    }\r\n\r\n    function onERC1155Received(address, address, uint256, uint256, bytes) external returns(bytes4)\r\n    {\r\n        return bytes4(keccak256(\"accept_erc1155_tokens()\"));\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"isERC1155TokenReceiver\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"uint40\"},{\"name\":\"_pluginAddress\",\"type\":\"address\"},{\"name\":\"_signId\",\"type\":\"uint40\"},{\"name\":\"_cutieId\",\"type\":\"uint40\"},{\"name\":\"_value\",\"type\":\"uint128\"},{\"name\":\"_parameter\",\"type\":\"uint256\"},{\"name\":\"_purchaser\",\"type\":\"address\"}],\"name\":\"runPlugin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldOwner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"approveERC721\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"plugins\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_core\",\"type\":\"address\"},{\"name\":\"_plugins\",\"type\":\"address\"},{\"name\":\"_sale\",\"type\":\"address\"}],\"name\":\"setup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"uint40\"},{\"name\":\"_lotId\",\"type\":\"uint32\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_purchaser\",\"type\":\"address\"}],\"name\":\"buySaleLot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOperator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"uint40\"},{\"name\":\"_cutieId\",\"type\":\"uint40\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_saleMarketAddress\",\"type\":\"address\"},{\"name\":\"_purchaser\",\"type\":\"address\"}],\"name\":\"buyCutie\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldOperator\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"approveERC1155\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"core\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"purchaser\",\"type\":\"address\"}],\"name\":\"OrderSuccess\",\"type\":\"event\"}]","ContractName":"FiatProxy","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6b4fb33d57791ceccc94803852b6aa41948bbc1bb5dc2b4c339278a2c12c816b"}]}