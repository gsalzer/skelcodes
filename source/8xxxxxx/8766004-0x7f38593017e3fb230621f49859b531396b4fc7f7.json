{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ncontract MesDataPlatform {\r\n\r\n    // Variable holding the smart contract owner address\r\n    address public owner = msg.sender;\r\n    \r\n    //struct to store surveys\r\n    struct Survey {\r\n        uint256 studyId;\r\n        uint256 surveyId;\r\n        string surveyName;\r\n        uint256 surveyJsonHash; // SHA256 of the survey json\r\n        bool isDeleted;\r\n        uint256[] exportedHash; // SHA256 of the exported answers of the survey\r\n        mapping(address => uint256) answersJsonHash; // SHA256 of the answers json\r\n    }\r\n    \r\n    //struct to store study consents\r\n    struct Consent {\r\n        uint256 signedByParticipantAt; // Timestamp of the participant consent\r\n        uint256 signedByStudyCreatorAt; // Timestamp of the creator consent\r\n        uint256 signedByStudySupervisorAt; // Timestamp of the supervisor consent        \r\n    }\r\n    \r\n    //struct to store study \r\n    struct Study {\r\n        uint256 studyId;\r\n        string studyName;\r\n        address creatorId;\r\n        address supervisorId;\r\n        bool isDeleted;\r\n        address[] participants; // List of participants address\r\n        uint256[] surveyIds; // List of surveys IDs\r\n        mapping(uint256 => Survey) surveys; // Mapping of the surveys data\r\n        mapping(address => Consent) consents; // Mapping of the consents data\r\n    }\r\n    \r\n    uint256[] public studiesIDs; // List of the studies IDs\r\n    mapping(uint256 => Study) public studies; // Mapping of the studies data\r\n    \r\n    \r\n    constructor() public\r\n    {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    /**\r\n    * This function is used to create a new study on blockchain\r\n    */\r\n    function addStudy(uint256 studyId, string memory studyName, address supervisorId) public payable \r\n    {\r\n        require(\r\n            studies[studyId].studyId == 0,\r\n            \"Study already exists\"\r\n        );\r\n        Study memory studyObject = Study(studyId, studyName, msg.sender, supervisorId, false, new address[](0), new uint256[](0));\r\n        studies[studyId] = studyObject;\r\n        studiesIDs.push(studyId);\r\n    }\r\n    \r\n    /**\r\n    * This function is used to update a study on blockchain\r\n    */\r\n    function updateStudy(uint256 studyId, string memory studyName, address supervisorId) public payable \r\n    {\r\n        require(\r\n            studies[studyId].studyId > 0 && studies[studyId].isDeleted == false,\r\n            \"Study does not exist or deleted\"\r\n        );\r\n        require(\r\n            studies[studyId].creatorId == msg.sender,\r\n            \"Study creator does not match the caller\"\r\n        );\r\n        studies[studyId].studyName = studyName;\r\n        studies[studyId].supervisorId = supervisorId;\r\n    }\r\n    \r\n    /**\r\n    * This function is used to insert/update a study on blockchain\r\n    */\r\n    function upsertStudy(uint256 studyId, string memory studyName, address supervisorId) public payable \r\n    {\r\n        if (studies[studyId].studyId > 0) {\r\n            updateStudy(studyId,studyName,supervisorId);\r\n        } else {\r\n            addStudy(studyId,studyName,supervisorId);\r\n        }\r\n    }\r\n    \r\n    /**\r\n    * This function is used to delete study on blockchain\r\n    */\r\n    function deleteStudy(uint256 studyId) public payable \r\n    {\r\n        require(\r\n            studies[studyId].studyId > 0 && studies[studyId].isDeleted == false,\r\n            \"Study does not exist or deleted\"\r\n        );\r\n        require(\r\n            studies[studyId].creatorId == msg.sender,\r\n            \"Study creator does not match the caller\"\r\n        );\r\n        studies[studyId].isDeleted = true;\r\n    }\r\n    \r\n    /**\r\n    * This function is used to add survey for a particular study\r\n    */\r\n    function addSurvey(string memory surveyName, uint256 studyId, uint256 surveyId, uint256 surveyJsonHash) public payable \r\n    {\r\n        require(\r\n            studies[studyId].studyId > 0 && studies[studyId].isDeleted == false,\r\n            \"Study does not exist or deleted\"\r\n        );\r\n        require(\r\n            studies[studyId].creatorId == msg.sender,\r\n            \"Study creator does not match the caller\"\r\n        );\r\n        require(\r\n            studies[studyId].surveys[surveyId].surveyId == 0,\r\n            \"Survey already exists or deleted\"\r\n        );\r\n        Survey memory surveyObject = Survey(studyId, surveyId, surveyName, surveyJsonHash, false, new uint256[](0)); \r\n        studies[studyId].surveys[surveyId] = surveyObject;\r\n        studies[studyId].surveyIds.push(surveyId);\r\n    }\r\n    \r\n    /**\r\n    * This function is used to edit survey for a particular study\r\n    */\r\n    function updateSurvey(string memory surveyName, uint256 studyId, uint256 surveyId, uint256 surveyJsonHash) public payable \r\n    {\r\n        require(\r\n            studies[studyId].studyId > 0 && studies[studyId].isDeleted == false,\r\n            \"Study does not exist or deleted\"\r\n        );\r\n        require(\r\n            studies[studyId].creatorId == msg.sender,\r\n            \"Study creator does not match the caller\"\r\n        );\r\n        require(\r\n            studies[studyId].surveys[surveyId].surveyId > 0 && studies[studyId].surveys[surveyId].isDeleted == false,\r\n            \"Survey does not exist or deleted\"\r\n        );\r\n        Survey memory surveyObject = Survey(studyId, surveyId, surveyName, surveyJsonHash, false, new uint256[](0));\r\n        studies[studyId].surveys[surveyId] = surveyObject;\r\n    }\r\n    \r\n    /**\r\n    * This function is used to add/edit a survey for a particular study\r\n    */\r\n    function upsertSurvey(string memory surveyName, uint256 studyId, uint256 surveyId, uint256 surveyJsonHash) public payable \r\n    {\r\n        if (studies[studyId].surveys[surveyId].surveyId > 0) {\r\n            updateSurvey(surveyName,studyId,surveyId,surveyJsonHash);\r\n        } else {\r\n            addSurvey(surveyName,studyId,surveyId,surveyJsonHash);\r\n        }\r\n    }\r\n    \r\n    /**\r\n    * This function is used to delete survey for a particular study\r\n    */\r\n    function deleteSurvey(uint256 studyId, uint256 surveyId) public payable \r\n    {\r\n        require(\r\n            studies[studyId].studyId > 0 && studies[studyId].isDeleted == false,\r\n            \"Study does not exist or deleted\"\r\n        );\r\n        require(\r\n            studies[studyId].creatorId == msg.sender,\r\n            \"Study creator does not match the caller\"\r\n        );\r\n        require(\r\n            studies[studyId].surveys[surveyId].surveyId > 0 && studies[studyId].surveys[surveyId].isDeleted == false,\r\n            \"Survey does not exist or deleted\"\r\n        );      \r\n        studies[studyId].surveys[surveyId].isDeleted = true;\r\n    }\r\n    \r\n    /**\r\n    * This function is used to add study consent of a participant \r\n    */  \r\n    function addParticipantConsent(uint256 studyId, uint256 timestamp) public payable \r\n    {\r\n        require(\r\n            studies[studyId].studyId > 0 && studies[studyId].isDeleted == false,\r\n            \"Study does not exist or deleted\"\r\n        );\r\n        require(\r\n            studies[studyId].consents[msg.sender].signedByParticipantAt == 0,\r\n            \"Consent already done\"\r\n        );\r\n        Consent memory studyconsent = Consent(timestamp, 0, 0);\r\n        studies[studyId].consents[msg.sender] = studyconsent;\r\n        studies[studyId].participants.push(msg.sender);\r\n    }\r\n    \r\n    /**\r\n    * This function is used to add the answers hash to the consent of a participant \r\n    */  \r\n    function notarizeParticipationAnswersHash(uint256 studyId, uint256 surveyId, uint256 answersJsonHash) public payable \r\n    {\r\n        require(\r\n            studies[studyId].studyId > 0 && studies[studyId].isDeleted == false,\r\n            \"Study does not exist or deleted\"\r\n        );\r\n        require(\r\n            studies[studyId].surveys[surveyId].surveyId > 0 && studies[studyId].surveys[surveyId].isDeleted == false,\r\n            \"Survey does not exist or deleted\"\r\n        );\r\n        require(\r\n            studies[studyId].consents[msg.sender].signedByParticipantAt > 0,\r\n            \"Consent not done yet\"\r\n        );\r\n        studies[studyId].surveys[surveyId].answersJsonHash[msg.sender] = answersJsonHash;\r\n    }\r\n    \r\n    /**\r\n    * This function is used to add study consent of the study creator \r\n    */  \r\n    function addStudyCreatorConsent(uint256 studyId, address participantId, uint256 timestamp) public payable \r\n    {\r\n        require(\r\n            studies[studyId].studyId > 0 && studies[studyId].isDeleted == false,\r\n            \"Study does not exist or deleted\"\r\n        );\r\n        require(\r\n            studies[studyId].creatorId == msg.sender,\r\n            \"Study creator does not match the caller\"\r\n        );\r\n        require(\r\n            studies[studyId].consents[participantId].signedByParticipantAt > 0,\r\n            \"Consent does not exist\"\r\n        );\r\n        require(\r\n            studies[studyId].consents[participantId].signedByStudyCreatorAt == 0,\r\n            \"Consent already signed\"\r\n        );\r\n        studies[studyId].consents[participantId].signedByStudyCreatorAt = timestamp;\r\n    }\r\n    \r\n    /**\r\n    * This function is used to add study consent of the study creator for all unsigned consents\r\n    */  \r\n    function addStudyCreatorConsentToUnsignedConsents(uint256 studyId, uint256 timestamp, uint256 limit) public payable \r\n    {\r\n        require(\r\n            studies[studyId].studyId > 0 && studies[studyId].isDeleted == false,\r\n            \"Study does not exist or deleted\"\r\n        );\r\n        require(\r\n            studies[studyId].creatorId == msg.sender,\r\n            \"Study creator does not match the caller\"\r\n        );\r\n        for(uint i = 0; i < studies[studyId].participants.length; i++)\r\n        {\r\n            address participantId = studies[studyId].participants[i];\r\n            if (studies[studyId].consents[participantId].signedByStudyCreatorAt == 0) \r\n            {\r\n                studies[studyId].consents[participantId].signedByStudyCreatorAt = timestamp;\r\n            }\r\n            if (i>limit) break;\r\n        }\r\n    }\r\n    \r\n    /**\r\n    * This function is used to add study consent of the study supervisor\r\n    */  \r\n    function addStudySupervisorConsent(uint256 studyId, address participantId, uint256 timestamp) public payable \r\n    {\r\n        require(\r\n            studies[studyId].studyId > 0 && studies[studyId].isDeleted == false,\r\n            \"Study does not exist or deleted\"\r\n        );\r\n        require(\r\n            studies[studyId].supervisorId == msg.sender,\r\n            \"Study supervisor does not match the caller\"\r\n        );\r\n        require(\r\n            studies[studyId].consents[participantId].signedByParticipantAt > 0,\r\n            \"Consent does not exists\"\r\n        );\r\n        require(\r\n            studies[studyId].consents[participantId].signedByStudySupervisorAt == 0,\r\n            \"Consent already signed\"\r\n        );\r\n        studies[studyId].consents[participantId].signedByStudySupervisorAt = timestamp;\r\n    }\r\n    \r\n    /**\r\n    * This function is used to add study consent of the study supervisor for all unsigned consents \r\n    */  \r\n    function addStudySupervisorConsentToUnsignedConsents(uint256 studyId, uint256 timestamp, uint256 limit) public payable \r\n    {\r\n        require(\r\n            studies[studyId].studyId > 0 && studies[studyId].isDeleted == false,\r\n            \"Study does not exist or deleted\"\r\n        );\r\n        require(\r\n            studies[studyId].supervisorId == msg.sender,\r\n            \"Study supervisor does not match the caller\"\r\n        );\r\n        for(uint i = 0; i < studies[studyId].participants.length; i++)\r\n        {\r\n            address participantId = studies[studyId].participants[i];\r\n            if (studies[studyId].consents[participantId].signedByStudySupervisorAt == 0) \r\n            {\r\n                studies[studyId].consents[participantId].signedByStudySupervisorAt = timestamp;\r\n            }\r\n            if (i>limit) break;\r\n        }\r\n    }\r\n    \r\n    /**\r\n    * This function is used to notarize survey export on the blockchain\r\n    */\r\n    function notarizeSurveyExport(uint256 studyId, uint256 surveyId, uint256 hashResult) public payable \r\n    {\r\n        require(\r\n            studies[studyId].studyId > 0 && studies[studyId].isDeleted == false,\r\n            \"Study does not exist or deleted\"\r\n        );\r\n        require(\r\n            studies[studyId].creatorId == msg.sender,\r\n            \"Study creator does not match the caller\"\r\n        );\r\n         require(\r\n            studies[studyId].surveys[surveyId].surveyId > 0 && studies[studyId].surveys[surveyId].isDeleted == false,\r\n            \"Survey does not exist or deleted\"\r\n        );\r\n        studies[studyId].surveys[surveyId].exportedHash.push(hashResult);\r\n    }\r\n   \r\n    /**\r\n    * This function is used to get all the studies\r\n    */\r\n    function getStudies() public view returns (uint256[] memory)\r\n    {\r\n        return studiesIDs;\r\n    }\r\n    \r\n    /**\r\n    * This function is used to get a study infos\r\n    */\r\n    function getStudyInfos(uint256 studyId) public view returns (uint256, string memory, address, address, bool, uint256, uint256[] memory)\r\n    {\r\n        return (\r\n            studies[studyId].studyId,\r\n            studies[studyId].studyName,\r\n            studies[studyId].creatorId,\r\n            studies[studyId].supervisorId,\r\n            studies[studyId].isDeleted,\r\n            studies[studyId].participants.length,\r\n            studies[studyId].surveyIds\r\n        );\r\n    }\r\n    \r\n    /**\r\n    * This function is used to get a survey answersJsonHash for a participant\r\n    */\r\n    function getSurveyAnswersHash(uint256 studyId, uint256 surveyId, address participantId) public view returns (uint256)\r\n    {\r\n        return (\r\n            studies[studyId].surveys[surveyId].answersJsonHash[participantId]\r\n        );\r\n    }\r\n    \r\n    /**\r\n    * This function is used to get a study participants\r\n    */\r\n    function getStudyParticipants(uint256 studyId) public view returns (address[] memory)\r\n    {\r\n        return studies[studyId].participants;\r\n    }\r\n    \r\n    /**\r\n    * This function is used to get a study consents\r\n    */\r\n    function getStudyConsents(uint256 studyId) public view returns (uint256[] memory, uint256[] memory, uint256[] memory)\r\n    {\r\n        uint participantsCount = studies[studyId].participants.length;\r\n        uint256[] memory signedByParticipantAt = new uint256[](participantsCount);\r\n        uint256[] memory signedByStudyCreatorAt = new uint256[](participantsCount);\r\n        uint256[] memory signedByStudySupervisorAt = new uint256[](participantsCount);\r\n        \r\n        for(uint i = 0; i < participantsCount; i++)\r\n        {\r\n            address participantId = studies[studyId].participants[i];\r\n            signedByParticipantAt[i] = studies[studyId].consents[participantId].signedByParticipantAt;\r\n            signedByStudyCreatorAt [i] = studies[studyId].consents[participantId].signedByStudyCreatorAt;\r\n            signedByStudySupervisorAt[i] = studies[studyId].consents[participantId].signedByStudySupervisorAt;\r\n        }\r\n        return (\r\n            signedByParticipantAt,\r\n            signedByStudyCreatorAt,\r\n            signedByStudySupervisorAt\r\n        );\r\n    }\r\n    \r\n    /**\r\n    * This function is used to get a study infos\r\n    */\r\n    function getSurveyInfos(uint256 studyId, uint256 surveyId) public view returns (uint256, uint256, string memory, uint256, bool, uint256[] memory)\r\n    {\r\n        return (\r\n            studies[studyId].surveys[surveyId].studyId,\r\n            studies[studyId].surveys[surveyId].surveyId,\r\n            studies[studyId].surveys[surveyId].surveyName,\r\n            studies[studyId].surveys[surveyId].surveyJsonHash,\r\n            studies[studyId].surveys[surveyId].isDeleted,\r\n            studies[studyId].surveys[surveyId].exportedHash\r\n        );\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"studyId\",\"type\":\"uint256\"},{\"name\":\"studyName\",\"type\":\"string\"},{\"name\":\"supervisorId\",\"type\":\"address\"}],\"name\":\"upsertStudy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"studyId\",\"type\":\"uint256\"},{\"name\":\"participantId\",\"type\":\"address\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"addStudyCreatorConsent\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"surveyName\",\"type\":\"string\"},{\"name\":\"studyId\",\"type\":\"uint256\"},{\"name\":\"surveyId\",\"type\":\"uint256\"},{\"name\":\"surveyJsonHash\",\"type\":\"uint256\"}],\"name\":\"addSurvey\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"studyId\",\"type\":\"uint256\"}],\"name\":\"getStudyInfos\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"studyId\",\"type\":\"uint256\"},{\"name\":\"surveyId\",\"type\":\"uint256\"}],\"name\":\"getSurveyInfos\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"surveyName\",\"type\":\"string\"},{\"name\":\"studyId\",\"type\":\"uint256\"},{\"name\":\"surveyId\",\"type\":\"uint256\"},{\"name\":\"surveyJsonHash\",\"type\":\"uint256\"}],\"name\":\"upsertSurvey\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"studyId\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"addStudyCreatorConsentToUnsignedConsents\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"studyId\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"addParticipantConsent\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"studyId\",\"type\":\"uint256\"}],\"name\":\"getStudyConsents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"studyId\",\"type\":\"uint256\"},{\"name\":\"surveyId\",\"type\":\"uint256\"},{\"name\":\"answersJsonHash\",\"type\":\"uint256\"}],\"name\":\"notarizeParticipationAnswersHash\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"studies\",\"outputs\":[{\"name\":\"studyId\",\"type\":\"uint256\"},{\"name\":\"studyName\",\"type\":\"string\"},{\"name\":\"creatorId\",\"type\":\"address\"},{\"name\":\"supervisorId\",\"type\":\"address\"},{\"name\":\"isDeleted\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"studyId\",\"type\":\"uint256\"},{\"name\":\"surveyId\",\"type\":\"uint256\"}],\"name\":\"deleteSurvey\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"studyId\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"addStudySupervisorConsentToUnsignedConsents\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"surveyName\",\"type\":\"string\"},{\"name\":\"studyId\",\"type\":\"uint256\"},{\"name\":\"surveyId\",\"type\":\"uint256\"},{\"name\":\"surveyJsonHash\",\"type\":\"uint256\"}],\"name\":\"updateSurvey\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"studyId\",\"type\":\"uint256\"},{\"name\":\"studyName\",\"type\":\"string\"},{\"name\":\"supervisorId\",\"type\":\"address\"}],\"name\":\"addStudy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"studyId\",\"type\":\"uint256\"},{\"name\":\"surveyId\",\"type\":\"uint256\"},{\"name\":\"participantId\",\"type\":\"address\"}],\"name\":\"getSurveyAnswersHash\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStudies\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"studyId\",\"type\":\"uint256\"}],\"name\":\"getStudyParticipants\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"studyId\",\"type\":\"uint256\"},{\"name\":\"participantId\",\"type\":\"address\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"addStudySupervisorConsent\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"studyId\",\"type\":\"uint256\"},{\"name\":\"surveyId\",\"type\":\"uint256\"},{\"name\":\"hashResult\",\"type\":\"uint256\"}],\"name\":\"notarizeSurveyExport\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"studyId\",\"type\":\"uint256\"}],\"name\":\"deleteStudy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"studiesIDs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"studyId\",\"type\":\"uint256\"},{\"name\":\"studyName\",\"type\":\"string\"},{\"name\":\"supervisorId\",\"type\":\"address\"}],\"name\":\"updateStudy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"MesDataPlatform","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://454238f4c5d0d25c0de57822e61c0f11f75cfcfcbaf2d5ad2741e31f51ec423a"}]}