{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.10;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error.\r\n */\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor(address initialOwner) internal {\r\n        require(initialOwner != address(0));\r\n        _owner = initialOwner;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"New owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external;\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @title RefStorage interface\r\n */\r\ninterface RefStorage {\r\n    function referrerOf(address player) external view returns(address);\r\n}\r\n\r\n/**\r\n * @title Exchange contract\r\n */\r\n contract Exchange is Ownable {\r\n     using SafeMath for uint256;\r\n\r\n     IERC20 public GRUB;\r\n     IERC20 public GRSHA;\r\n\r\n     RefStorage RS;\r\n\r\n     address[] private buyQueue;\r\n     uint256 currentBuyIndex;\r\n     uint256 reservedGRSHA;\r\n\r\n     address[] private sellQueue;\r\n     uint256 currentSellIndex;\r\n     uint256 reservedGRUB;\r\n\r\n     uint256 public limitGRSHA;\r\n     mapping (uint256 => uint256) soldGRSHA;\r\n\r\n     uint256 checkpoint;\r\n     uint256 public period;\r\n\r\n     uint256 public price = 1000000000000000;\r\n     uint256 public unitGRSHA = 1000000000000000000;\r\n\r\n     enum State {Usual, Paused, RefMode}\r\n     State public state = State.Usual;\r\n\r\n     modifier checkState() {\r\n         require(state != State.Paused);\r\n         if (state == State.RefMode) {\r\n             require(RS.referrerOf(msg.sender) != address(0));\r\n         }\r\n         _;\r\n     }\r\n\r\n     modifier notPaused() {\r\n         require(state != State.Paused);\r\n         _;\r\n     }\r\n\r\n     event Accepted(address indexed user, address indexed token, uint256 amount);\r\n     event Payed(address indexed user, address indexed token, uint256 amount);\r\n     event AddedToQueue(address indexed user, address indexed token);\r\n     event PayedFromQueue(address indexed user, address indexed token, uint256 amount);\r\n\r\n     constructor(address GRUBAddr, address GRSHAAddr, address refStorageAddr, address initialOwner, uint256 initialPeriod, uint256 initialLimit) public Ownable(initialOwner) {\r\n         require(isContract(GRUBAddr) && isContract(GRSHAAddr) && isContract(refStorageAddr));\r\n         require(initialPeriod != 0);\r\n\r\n         GRUB = IERC20(GRUBAddr);\r\n         GRSHA = IERC20(GRSHAAddr);\r\n         RS = RefStorage(refStorageAddr);\r\n         period = initialPeriod;\r\n         limitGRSHA = initialLimit;\r\n\r\n         checkpoint = block.timestamp;\r\n     }\r\n\r\n     function() external payable {\r\n         require(msg.value == 0);\r\n\r\n         if (GRUB.allowance(msg.sender, address(this)) >= price) {\r\n             buyGRSHA(msg.sender);\r\n         }\r\n\r\n         if (GRSHA.allowance(msg.sender, address(this)) >= unitGRSHA) {\r\n             sellGRSHA(msg.sender);\r\n         }\r\n\r\n         if (currentBuyIndex < buyQueue.length && GRSHA.balanceOf(address(this)) > 0) {\r\n             payGRSHA();\r\n         }\r\n\r\n         if (currentSellIndex < sellQueue.length && GRUB.balanceOf(address(this)) > 0) {\r\n             payGRUB();\r\n         }\r\n\r\n     }\r\n\r\n     function receiveApproval(address from, uint256 amount, address token, bytes calldata extraData) external {\r\n\r\n         if (token == address(GRSHA)) {\r\n             sellGRSHA(from);\r\n         }\r\n\r\n     }\r\n\r\n     function buyGRSHA(address from) public checkState {\r\n         GRUB.transferFrom(from, address(this), price);\r\n         emit Accepted(from, address(GRUB), price);\r\n\r\n         uint256 available = availableGRSHA();\r\n         if (available < unitGRSHA) {\r\n             buyQueue.push(from);\r\n             emit AddedToQueue(from, address(GRSHA));\r\n             reservedGRSHA = reservedGRSHA.add(unitGRSHA);\r\n         } else {\r\n             GRSHA.transfer(from, unitGRSHA);\r\n             emit Payed(from, address(GRSHA), unitGRSHA);\r\n         }\r\n\r\n         if (currentBuyIndex < buyQueue.length && GRSHA.balanceOf(address(this)) > 0) {\r\n             payGRSHA();\r\n         }\r\n\r\n     }\r\n\r\n     function sellGRSHA(address from) public checkState {\r\n         uint256 time = currPeriod();\r\n         require(soldGRSHA[time].add(unitGRSHA) <= limitGRSHA);\r\n\r\n         GRSHA.transferFrom(from, address(this), unitGRSHA);\r\n         emit Accepted(from, address(GRSHA), unitGRSHA);\r\n         soldGRSHA[time] = soldGRSHA[time].add(unitGRSHA);\r\n\r\n         uint256 available = availableGRUB();\r\n         if (available < price) {\r\n             sellQueue.push(from);\r\n             emit AddedToQueue(from, address(GRUB));\r\n             reservedGRUB = reservedGRUB.add(price);\r\n         } else {\r\n             GRUB.transfer(from, price);\r\n             emit Payed(from, address(GRUB), price);\r\n         }\r\n\r\n         if (currentSellIndex < sellQueue.length && GRUB.balanceOf(address(this)) > 0) {\r\n             payGRUB();\r\n         }\r\n\r\n     }\r\n\r\n     function payGRSHA() public notPaused {\r\n         if (gasleft() <= 50000) {\r\n             return;\r\n         }\r\n         uint256 available = GRSHA.balanceOf(address(this));\r\n\r\n         uint256 i;\r\n         for (i = 0; i < getBuyQueueLength(); i++) {\r\n             uint256 idx = currentBuyIndex + i;\r\n\r\n             address account = buyQueue[idx];\r\n\r\n             if (available >= unitGRSHA) {\r\n                 GRSHA.transfer(account, unitGRSHA);\r\n                 emit PayedFromQueue(account, address(GRSHA), unitGRSHA);\r\n                 available = available.sub(unitGRSHA);\r\n                 reservedGRSHA = reservedGRSHA.sub(unitGRSHA);\r\n\r\n                 delete buyQueue[idx];\r\n             } else {\r\n                 break;\r\n             }\r\n\r\n             if (gasleft() <= 50000) {\r\n                 break;\r\n             }\r\n         }\r\n\r\n         currentBuyIndex += i;\r\n     }\r\n\r\n     function payGRUB() public notPaused {\r\n         if (gasleft() <= 50000) {\r\n             return;\r\n         }\r\n         uint256 available = GRUB.balanceOf(address(this));\r\n\r\n         uint256 i;\r\n         for (i = 0; i < getSellQueueLength(); i++) {\r\n             uint256 idx = currentSellIndex + i;\r\n\r\n             address account = sellQueue[idx];\r\n\r\n             if (available >= price) {\r\n                 GRUB.transfer(account, price);\r\n                 emit PayedFromQueue(account, address(GRUB), price);\r\n                 available = available.sub(price);\r\n                 reservedGRUB = reservedGRUB.sub(price);\r\n\r\n                 delete sellQueue[idx];\r\n             } else {\r\n                 break;\r\n             }\r\n\r\n             if (gasleft() <= 50000) {\r\n                 break;\r\n             }\r\n         }\r\n\r\n         currentSellIndex += i;\r\n     }\r\n\r\n     function switchUsual() external onlyOwner {\r\n         require(state != State.Usual);\r\n         state = State.Usual;\r\n     }\r\n\r\n     function switchPaused() external onlyOwner {\r\n         require(state != State.Paused);\r\n         state = State.Paused;\r\n     }\r\n\r\n     function switchRefMode() external onlyOwner {\r\n         require(state != State.RefMode);\r\n         state = State.RefMode;\r\n     }\r\n\r\n     function setLimitGRSHA(uint256 newValue) external onlyOwner {\r\n         limitGRSHA = newValue;\r\n     }\r\n\r\n     function setPeriod(uint256 newValue) external onlyOwner {\r\n         require(newValue != 0);\r\n\r\n         uint n = currPeriod();\r\n         for (uint i = 0; i <= n; i++) {\r\n             soldGRSHA[i] = 0;\r\n         }\r\n         checkpoint = block.timestamp;\r\n\r\n         period = newValue;\r\n     }\r\n\r\n     function setRS(address newRS) external onlyOwner {\r\n         require(isContract(newRS));\r\n         RS = RefStorage(newRS);\r\n     }\r\n\r\n     function withdrawERC20(address ERC20Token, address recipient, uint256 amount) external onlyOwner {\r\n         require(ERC20Token != address(GRSHA) && ERC20Token != address(GRUB));\r\n         IERC20(ERC20Token).transfer(recipient, amount);\r\n     }\r\n\r\n     function availableGRUB() public view returns(uint256) {\r\n         uint256 bal = GRUB.balanceOf(address(this));\r\n         if (reservedGRUB > bal) {\r\n             return 0;\r\n         } else {\r\n             return bal.sub(reservedGRUB);\r\n         }\r\n     }\r\n\r\n     function availableGRSHA() public view returns(uint256) {\r\n         uint256 bal = GRSHA.balanceOf(address(this));\r\n         if (reservedGRSHA > bal) {\r\n             return 0;\r\n         } else {\r\n             return bal.sub(reservedGRSHA);\r\n         }\r\n     }\r\n\r\n     function currPeriod() internal view returns(uint256) {\r\n         return (block.timestamp.sub(checkpoint)) / period;\r\n     }\r\n\r\n     function getBuyQueueCount(address account) public view returns(uint256) {\r\n         uint256 c = 0;\r\n         for (uint256 i = currentBuyIndex; i < buyQueue.length; i++) {\r\n             if (buyQueue[i] == account)\r\n                 c++;\r\n         }\r\n         return c;\r\n     }\r\n\r\n     function getSellQueueCount(address account) public view returns(uint256) {\r\n         uint256 c = 0;\r\n         for (uint256 i = currentSellIndex; i < sellQueue.length; i++) {\r\n             if (sellQueue[i] == account)\r\n                 c++;\r\n         }\r\n         return c;\r\n     }\r\n\r\n     function getBuyQueueLength() public view returns(uint256) {\r\n         return buyQueue.length.sub(currentBuyIndex);\r\n     }\r\n\r\n     function getSellQueueLength() public view returns(uint256) {\r\n         return sellQueue.length.sub(currentSellIndex);\r\n     }\r\n\r\n     function periodEndUnix() public view returns(uint256) {\r\n         return checkpoint.add(period);\r\n     }\r\n\r\n     function GRSHAToAccept() public view returns(uint256) {\r\n         uint256 result = limitGRSHA - soldGRSHA[currPeriod()];\r\n         if (result <= limitGRSHA) {\r\n             return result;\r\n         } else {\r\n             return 0;\r\n         }\r\n     }\r\n\r\n     function isContract(address addr) internal view returns (bool) {\r\n         uint size;\r\n         assembly { size := extcodesize(addr) }\r\n         return size > 0;\r\n     }\r\n\r\n }","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setLimitGRSHA\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBuyQueueCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GRSHAToAccept\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"limitGRSHA\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"availableGRUB\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getSellQueueCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GRSHA\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ERC20Token\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unitGRSHA\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBuyQueueLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"periodEndUnix\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GRUB\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"switchUsual\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payGRSHA\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSellQueueLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"availableGRSHA\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payGRUB\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"switchRefMode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"}],\"name\":\"sellGRSHA\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"switchPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newRS\",\"type\":\"address\"}],\"name\":\"setRS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"}],\"name\":\"buyGRSHA\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"GRUBAddr\",\"type\":\"address\"},{\"name\":\"GRSHAAddr\",\"type\":\"address\"},{\"name\":\"refStorageAddr\",\"type\":\"address\"},{\"name\":\"initialOwner\",\"type\":\"address\"},{\"name\":\"initialPeriod\",\"type\":\"uint256\"},{\"name\":\"initialLimit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Accepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Payed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"AddedToQueue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PayedFromQueue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Exchange","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000009f9efdd09e915c1950c5ca7252fa5c4f65ab049b0000000000000000000000008e281164daed2293342a18be495918db77ada1e3000000000000000000000000978275d7652a35dc8df9ce6b62822aea6a97589d000000000000000000000000446b9bc432efe4f4b5dc318b9cc353b6dd815db00000000000000000000000000000000000000000000000000000000000278d00000000000000000000000000000000000000000000000000000000000000000a","Library":"","LicenseType":"None","SwarmSource":"bzzr://126057429505c2de1d8f63bc7d1c5d52dc166339925cabeca55187ffd61c4392"}]}