{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.5.1;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    _transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified addresses\r\n  * @param _from The address to transfer from.\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function _transfer(address _from, address _to, uint256 _value) internal {\r\n      require(_to != address(0));\r\n      require(_value <= balances[_from]);\r\n  \r\n      balances[_from] = balances[_from].sub(_value);\r\n      balances[_to] = balances[_to].add(_value);\r\n      emit Transfer(_from, _to, _value);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  modifier hasMintPermission() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(\r\n    address _to,\r\n    uint256 _amount\r\n  )\r\n    hasMintPermission\r\n    canMint\r\n    public\r\n    returns (bool)\r\n  {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\ncontract FreezableToken is StandardToken {\r\n    // freezing chains\r\n    mapping (bytes32 => uint64) internal chains;\r\n    // freezing amounts for each chain\r\n    mapping (bytes32 => uint) internal freezings;\r\n    // total freezing balance per address\r\n    mapping (address => uint) internal freezingBalance;\r\n\r\n    // reducible freezing chains\r\n    mapping (bytes32 => uint64) internal reducibleChains;\r\n    // reducible freezing amounts for each chain\r\n    mapping (bytes32 => uint) internal reducibleFreezings;\r\n    // total reducible freezing balance per address\r\n    mapping (address => uint) internal reducibleFreezingBalance;\r\n\r\n    event Freezed(address indexed to, uint64 release, uint amount);\r\n    event Released(address indexed owner, uint amount);\r\n    event FreezeReduced(address indexed owner, uint64 release, uint amount);\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address include freezing tokens.\r\n     * @param _owner The address to query the the balance of.\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return super.balanceOf(_owner) + freezingBalance[_owner] + reducibleFreezingBalance[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address without freezing tokens.\r\n     * @param _owner The address to query the the balance of.\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n     */\r\n    function actualBalanceOf(address _owner) public view returns (uint256 balance) {\r\n        return super.balanceOf(_owner);\r\n    }\r\n\r\n    function freezingBalanceOf(address _owner) public view returns (uint256 balance) {\r\n        return freezingBalance[_owner];\r\n    }\r\n\r\n    function reducibleFreezingBalanceOf(address _owner) public view returns (uint256 balance) {\r\n        return reducibleFreezingBalance[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev gets freezing count\r\n     * @param _addr Address of freeze tokens owner.\r\n     */\r\n    function freezingCount(address _addr) public view returns (uint count) {\r\n        uint64 release = chains[toKey(_addr, 0)];\r\n        while (release != 0) {\r\n            count++;\r\n            release = chains[toKey(_addr, release)];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev gets reducible freezing count\r\n     * @param _addr Address of freeze tokens owner.\r\n     * @param _sender Address of frozen tokens sender.\r\n     */\r\n    function reducibleFreezingCount(address _addr, address _sender) public view returns (uint count) {\r\n        uint64 release = reducibleChains[toKey2(_addr, _sender, 0)];\r\n        while (release != 0) {\r\n            count++;\r\n            release = reducibleChains[toKey2(_addr, _sender, release)];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev gets freezing end date and freezing balance for the freezing portion specified by index.\r\n     * @param _addr Address of freeze tokens owner.\r\n     * @param _index Freezing portion index. It ordered by release date descending.\r\n     */\r\n    function getFreezing(address _addr, uint _index) public view returns (uint64 _release, uint _balance) {\r\n        for (uint i = 0; i < _index + 1; i++) {\r\n            _release = chains[toKey(_addr, _release)];\r\n            if (_release == 0) {\r\n                return (0, 0);\r\n            }\r\n        }\r\n        _balance = freezings[toKey(_addr, _release)];\r\n    }\r\n\r\n    /**\r\n     * @dev gets reducible freezing end date and reducible freezing balance for the freezing portion specified by index.\r\n     * @param _addr Address of freeze tokens owner.\r\n     * @param _sender Address of frozen tokens sender.\r\n     * @param _index Freezing portion index. It ordered by release date descending.\r\n     */\r\n    function getReducibleFreezing(address _addr, address _sender, uint _index) public view returns (uint64 _release, uint _balance) {\r\n        for (uint i = 0; i < _index + 1; i++) {\r\n            _release = reducibleChains[toKey2(_addr, _sender, _release)];\r\n            if (_release == 0) {\r\n                return (0, 0);\r\n            }\r\n        }\r\n        _balance = reducibleFreezings[toKey2(_addr, _sender, _release)];\r\n    }\r\n\r\n    /**\r\n     * @dev freeze your tokens to the specified address.\r\n     *      Be careful, gas usage is not deterministic,\r\n     *      and depends on how many freezes _to address already has.\r\n     * @param _to Address to which token will be freeze.\r\n     * @param _amount Amount of token to freeze.\r\n     * @param _until Release date, must be in future.\r\n     */\r\n    function freezeTo(address _to, uint _amount, uint64 _until) public {\r\n        _freezeTo(msg.sender, _to, _amount, _until);\r\n    }\r\n\r\n    /**\r\n     * @dev freeze your tokens to the specified address.\r\n     *      Be careful, gas usage is not deterministic,\r\n     *      and depends on how many freezes _to address already has.\r\n     * @param _to Address to which token will be freeze.\r\n     * @param _amount Amount of token to freeze.\r\n     * @param _until Release date, must be in future.\r\n     */\r\n    function _freezeTo(address _from, address _to, uint _amount, uint64 _until) internal {\r\n        require(_to != address(0));\r\n        require(_amount <= balances[_from]);\r\n\r\n        balances[_from] = balances[_from].sub(_amount);\r\n\r\n        bytes32 currentKey = toKey(_to, _until);\r\n        freezings[currentKey] = freezings[currentKey].add(_amount);\r\n        freezingBalance[_to] = freezingBalance[_to].add(_amount);\r\n\r\n        freeze(_to, _until);\r\n        emit Transfer(_from, _to, _amount);\r\n        emit Freezed(_to, _until, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev freeze your tokens to the specified address with posibility to reduce freezing.\r\n     *      Be careful, gas usage is not deterministic,\r\n     *      and depends on how many freezes _to address already has.\r\n     * @param _to Address to which token will be freeze.\r\n     * @param _amount Amount of token to freeze.\r\n     * @param _until Release date, must be in future.\r\n     */\r\n    function reducibleFreezeTo(address _to, uint _amount, uint64 _until) public {\r\n        require(_to != address(0));\r\n        require(_amount <= balances[msg.sender]);\r\n        require(_until > block.timestamp);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n\r\n        bytes32 currentKey = toKey2(_to, msg.sender, _until);\r\n        reducibleFreezings[currentKey] = reducibleFreezings[currentKey].add(_amount);\r\n        reducibleFreezingBalance[_to] = reducibleFreezingBalance[_to].add(_amount);\r\n\r\n        reducibleFreeze(_to, _until);\r\n        emit Transfer(msg.sender, _to, _amount);\r\n        emit Freezed(_to, _until, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev reduce freeze time for _amount of tokens for reducible freezing of address _to by frozen tokens sender.\r\n     *      Removes reducible freezing for _amount of tokens if _newUntil in the past\r\n     *      Be careful, gas usage is not deterministic,\r\n     *      and depends on how many freezes _to address already has.\r\n     * @param _to Address to which token will be freeze.\r\n     * @param _amount Amount of token to freeze.\r\n     * @param _until Release date, must be in future.\r\n     */\r\n    function reduceFreezingTo(address _to, uint _amount, uint64 _until, uint64 _newUntil) public {\r\n        require(_to != address(0));\r\n\r\n        // Don't allow to move reducible freezing to the future\r\n        require(_newUntil < _until);\r\n\r\n        bytes32 currentKey = toKey2(_to, msg.sender, _until);\r\n        uint amount = reducibleFreezings[currentKey];\r\n        require(amount > 0);\r\n\r\n        if (_amount >= amount) {\r\n            // use amount\r\n\r\n            // удаляем блокировку\r\n            delete reducibleFreezings[currentKey];\r\n\r\n            uint64 next = reducibleChains[currentKey];\r\n            bytes32 parent = toKey2(_to, msg.sender, uint64(0));\r\n            while (reducibleChains[parent] != _until) {\r\n                parent = toKey2(_to, msg.sender, reducibleChains[parent]);\r\n            }\r\n\r\n            // если после текущей блокировки есть элементы, то нужно паренту дать ссылку на следующую блокировку\r\n            if (next == 0) {\r\n                delete reducibleChains[parent];\r\n            }\r\n            else {\r\n                reducibleChains[parent] = next;\r\n            }\r\n\r\n            // если новая дата текущая или в прошлом, то зачисляем токены на баланс и вычитаем из блокировок\r\n            if (_newUntil <= block.timestamp) {\r\n                balances[_to] = balances[_to].add(amount);\r\n                reducibleFreezingBalance[_to] = reducibleFreezingBalance[_to].sub(amount);\r\n\r\n                emit Released(_to, amount);\r\n            }\r\n            else {\r\n                // делаем новую блокировку с новой датой и суммой _amount\r\n                bytes32 newKey = toKey2(_to, msg.sender, _newUntil);\r\n                reducibleFreezings[newKey] = reducibleFreezings[newKey].add(amount);\r\n\r\n                reducibleFreeze(_to, _newUntil);\r\n\r\n                emit FreezeReduced(_to, _newUntil, amount);\r\n            }\r\n        }\r\n        else {\r\n            reducibleFreezings[currentKey] = reducibleFreezings[currentKey].sub(_amount);\r\n            if (_newUntil <= block.timestamp) {\r\n                // записываем сумму на баланс получателя\r\n                balances[_to] = balances[_to].add(_amount);\r\n                // убираем баланс из баланса заморозок\r\n                reducibleFreezingBalance[_to] = reducibleFreezingBalance[_to].sub(_amount);\r\n\r\n                emit Released(_to, _amount);\r\n            }\r\n            else {\r\n                // создаем новую блокировку с _amount и _untilNew\r\n                bytes32 newKey = toKey2(_to, msg.sender, _newUntil);\r\n                reducibleFreezings[newKey] = reducibleFreezings[newKey].add(_amount);\r\n\r\n                reducibleFreeze(_to, _newUntil);\r\n\r\n                emit FreezeReduced(_to, _newUntil, _amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev release first available freezing tokens.\r\n     */\r\n    function releaseOnce() public {\r\n        bytes32 headKey = toKey(msg.sender, 0);\r\n        uint64 head = chains[headKey];\r\n        require(head != 0);\r\n        require(uint64(block.timestamp) > head);\r\n        bytes32 currentKey = toKey(msg.sender, head);\r\n\r\n        uint64 next = chains[currentKey];\r\n\r\n        uint amount = freezings[currentKey];\r\n        delete freezings[currentKey];\r\n\r\n        balances[msg.sender] = balances[msg.sender].add(amount);\r\n        freezingBalance[msg.sender] = freezingBalance[msg.sender].sub(amount);\r\n\r\n        if (next == 0) {\r\n            delete chains[headKey];\r\n        } else {\r\n            chains[headKey] = next;\r\n            delete chains[currentKey];\r\n        }\r\n        emit Released(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev release first available reducible freezing tokens.\r\n     * @param _sender Address of frozen tokens sender.\r\n     */\r\n    function releaseReducibleFreezingOnce(address _sender) public {\r\n        bytes32 headKey = toKey2(msg.sender, _sender, 0);\r\n        uint64 head = reducibleChains[headKey];\r\n        require(head != 0);\r\n        require(uint64(block.timestamp) > head);\r\n        bytes32 currentKey = toKey2(msg.sender, _sender, head);\r\n\r\n        uint64 next = reducibleChains[currentKey];\r\n\r\n        uint amount = reducibleFreezings[currentKey];\r\n        delete reducibleFreezings[currentKey];\r\n\r\n        balances[msg.sender] = balances[msg.sender].add(amount);\r\n        reducibleFreezingBalance[msg.sender] = reducibleFreezingBalance[msg.sender].sub(amount);\r\n\r\n        if (next == 0) {\r\n            delete reducibleChains[headKey];\r\n        } else {\r\n            reducibleChains[headKey] = next;\r\n            delete reducibleChains[currentKey];\r\n        }\r\n        emit Released(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev release all available for release freezing tokens. Gas usage is not deterministic!\r\n     * @return how many tokens was released\r\n     */\r\n    function releaseAll() public returns (uint tokens) {\r\n        uint release;\r\n        uint balance;\r\n        (release, balance) = getFreezing(msg.sender, 0);\r\n        while (release != 0 && block.timestamp > release) {\r\n            releaseOnce();\r\n            tokens += balance;\r\n            (release, balance) = getFreezing(msg.sender, 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev release all available for release reducible freezing tokens sent by _sender. Gas usage is not deterministic!\r\n     * @param _sender Address of frozen tokens sender.\r\n     * @return how many tokens was released\r\n     */\r\n    function reducibleReleaseAll(address _sender) public returns (uint tokens) {\r\n        uint release;\r\n        uint balance;\r\n        (release, balance) = getReducibleFreezing(msg.sender, _sender, 0);\r\n        while (release != 0 && block.timestamp > release) {\r\n            releaseReducibleFreezingOnce(_sender);\r\n            tokens += balance;\r\n            (release, balance) = getReducibleFreezing(msg.sender, _sender, 0);\r\n        }\r\n    }\r\n\r\n    function toKey(address _addr, uint _release) internal pure returns (bytes32 result) {\r\n        result = 0x5749534800000000000000000000000000000000000000000000000000000000;\r\n        assembly {\r\n            result := or(result, mul(_addr, 0x10000000000000000))\r\n            result := or(result, _release)\r\n        }\r\n    }\r\n\r\n    function toKey2(address _addr1, address _addr2, uint _release) internal pure returns (bytes32 result) {\r\n        bytes32 key1 = 0x5749534800000000000000000000000000000000000000000000000000000000;\r\n        bytes32 key2 = 0x8926457892347780720546870000000000000000000000000000000000000000;\r\n        assembly {\r\n            key1 := or(key1, mul(_addr1, 0x10000000000000000))\r\n            key1 := or(key1, _release)\r\n            key2 := or(key2, _addr2)\r\n        }\r\n        result = keccak256(abi.encodePacked(key1, key2));\r\n    }\r\n\r\n    function freeze(address _to, uint64 _until) internal {\r\n        require(_until > block.timestamp);\r\n        bytes32 key = toKey(_to, _until);\r\n        bytes32 parentKey = toKey(_to, uint64(0));\r\n        uint64 next = chains[parentKey];\r\n\r\n        if (next == 0) {\r\n            chains[parentKey] = _until;\r\n            return;\r\n        }\r\n\r\n        bytes32 nextKey = toKey(_to, next);\r\n        uint parent;\r\n\r\n        while (next != 0 && _until > next) {\r\n            parent = next;\r\n            parentKey = nextKey;\r\n\r\n            next = chains[nextKey];\r\n            nextKey = toKey(_to, next);\r\n        }\r\n\r\n        if (_until == next) {\r\n            return;\r\n        }\r\n\r\n        if (next != 0) {\r\n            chains[key] = next;\r\n        }\r\n\r\n        chains[parentKey] = _until;\r\n    }\r\n\r\n    function reducibleFreeze(address _to, uint64 _until) internal {\r\n        require(_until > block.timestamp);\r\n        bytes32 key = toKey2(_to, msg.sender, _until);\r\n        bytes32 parentKey = toKey2(_to, msg.sender, uint64(0));\r\n        uint64 next = reducibleChains[parentKey];\r\n\r\n        if (next == 0) {\r\n            reducibleChains[parentKey] = _until;\r\n            return;\r\n        }\r\n\r\n        bytes32 nextKey = toKey2(_to, msg.sender, next);\r\n        uint parent;\r\n\r\n        while (next != 0 && _until > next) {\r\n            parent = next;\r\n            parentKey = nextKey;\r\n\r\n            next = reducibleChains[nextKey];\r\n            nextKey = toKey2(_to, msg.sender, next);\r\n        }\r\n\r\n        if (_until == next) {\r\n            return;\r\n        }\r\n\r\n        if (next != 0) {\r\n            reducibleChains[key] = next;\r\n        }\r\n\r\n        reducibleChains[parentKey] = _until;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is BasicToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    _burn(msg.sender, _value);\r\n  }\r\n\r\n  function _burn(address _who, uint256 _value) internal {\r\n    require(_value <= balances[_who]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    balances[_who] = balances[_who].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    emit Burn(_who, _value);\r\n    emit Transfer(_who, address(0), _value);\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n\r\ncontract FreezableMintableToken is FreezableToken, MintableToken {\r\n    /**\r\n     * @dev Mint the specified amount of token to the specified address and freeze it until the specified date.\r\n     *      Be careful, gas usage is not deterministic,\r\n     *      and depends on how many freezes _to address already has.\r\n     * @param _to Address to which token will be freeze.\r\n     * @param _amount Amount of token to mint and freeze.\r\n     * @param _until Release date, must be in future.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mintAndFreeze(address _to, uint _amount, uint64 _until) public onlyOwner canMint returns (bool) {\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n\r\n        bytes32 currentKey = toKey(_to, _until);\r\n        freezings[currentKey] = freezings[currentKey].add(_amount);\r\n        freezingBalance[_to] = freezingBalance[_to].add(_amount);\r\n\r\n        freeze(_to, _until);\r\n        emit Mint(_to, _amount);\r\n        emit Freezed(_to, _until, _amount);\r\n        emit Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract Consts {\r\n    uint public constant TOKEN_DECIMALS = 18;\r\n    uint8 public constant TOKEN_DECIMALS_UINT8 = 18;\r\n    uint public constant TOKEN_DECIMAL_MULTIPLIER = 10 ** TOKEN_DECIMALS;\r\n    string public constant TOKEN_NAME = \"MindsyncAI\";\r\n    string public constant TOKEN_SYMBOL = \"MAI\";\r\n    uint public constant INITIAL_SUPPLY = 150000000 * TOKEN_DECIMAL_MULTIPLIER;\r\n}\r\n\r\n\r\ncontract MindsyncToken is Consts, FreezableMintableToken, BurnableToken, Pausable\r\n{\r\n    uint256 startdate;\r\n\r\n    address beneficiary1;\r\n    address beneficiary2;\r\n    address beneficiary3;\r\n    address beneficiary4;\r\n    address beneficiary5;\r\n    address beneficiary6;\r\n\r\n    event Initialized();\r\n    bool public initialized = false;\r\n\r\n    constructor() public {\r\n        init();\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return TOKEN_NAME;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return TOKEN_SYMBOL;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return TOKEN_DECIMALS_UINT8;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool _success) {\r\n        require(!paused);\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool _success) {\r\n        require(!paused);\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function init() private {\r\n        require(!initialized);\r\n        initialized = true;\r\n\r\n\r\n        // Total Supply\r\n        uint256 amount = INITIAL_SUPPLY;\r\n\r\n        // Mint all tokens\r\n        mint(address(this), amount);\r\n        finishMinting();\r\n\r\n        // Start date is October 01, 2019\r\n        startdate = 1569888000;\r\n\r\n        beneficiary1 = 0x52e3d3FDaed694B36E938748B689bbC16fd8a2FC; // Public sale\r\n        beneficiary2 = 0xD520445Db9CdEb0B8c2e964832Db38e25E3D90ED; // Team \r\n        beneficiary3 = 0xaC7585745623595DD66Cdb7019AeA540BaE2EB8E; // Advisors\r\n        beneficiary4 = 0xB5E880ECCCDCaf9e0AC485D0165d7B3700fbFB3d; // Bounty\r\n        beneficiary5 = 0x8c6C39302F09e478d5Fa13E486355a64047F3765; // Reward pool\r\n        beneficiary6 = 0x8c6C39302F09e478d5Fa13E486355a64047F3765; // Foundation\r\n\r\n        // Public sale (50%)\r\n        _transfer(address(this), beneficiary1, totalSupply().mul(50).div(100));\r\n\r\n        // Team tokens (15%) are frozen and will be unlocked every three months after half a year within 1 year.\r\n        _freezeTo(address(this), beneficiary2, totalSupply().mul(15).div(100).div(4), uint64(startdate + 183 days));\r\n        _freezeTo(address(this), beneficiary2, totalSupply().mul(15).div(100).div(4), uint64(startdate + 274 days));\r\n        _freezeTo(address(this), beneficiary2, totalSupply().mul(15).div(100).div(4), uint64(startdate + 366 days));\r\n        _freezeTo(address(this), beneficiary2, totalSupply().mul(15).div(100).div(4), uint64(startdate + 458 days));\r\n\r\n        // Advisors tokens (5%) are frozen and will be unlocked every three months after half a year within 1 year.\r\n        _freezeTo(address(this), beneficiary3, totalSupply().mul(5).div(100).div(4), uint64(startdate + 183 days));\r\n        _freezeTo(address(this), beneficiary3, totalSupply().mul(5).div(100).div(4), uint64(startdate + 274 days));\r\n        _freezeTo(address(this), beneficiary3, totalSupply().mul(5).div(100).div(4), uint64(startdate + 366 days));\r\n        _freezeTo(address(this), beneficiary3, totalSupply().mul(5).div(100).div(4), uint64(startdate + 458 days));\r\n\r\n        // Bounty tokens (2%) will be frozen during the distribution process.\r\n        _transfer(address(this), beneficiary4, totalSupply().mul(2).div(100));\r\n\r\n        // Competitions prize pool tokens (20%) will be stored on Mindsync Platform Voting smart-contract and frozen for 3 month.\r\n        // Voting will be used to allocate funds from the prize fund. Please refer to Whitepaper for more info.\r\n        _freezeTo(address(this), beneficiary5, totalSupply().mul(20).div(100).div(4), uint64(startdate + 91 days));\r\n\r\n        // Foundation tokens (8%) will be frozen on Mindsync Platform smart-contract for 1 year.\r\n        _freezeTo(address(this), beneficiary6, totalSupply().mul(8).div(100).div(4), uint64(startdate + 365 days));\r\n\r\n        emit Initialized();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getFreezing\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"_release\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_until\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_newUntil\",\"type\":\"uint64\"}],\"name\":\"reduceFreezingTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_until\",\"type\":\"uint64\"}],\"name\":\"mintAndFreeze\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"reducibleFreezingBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"actualBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"reducibleReleaseAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_SYMBOL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_until\",\"type\":\"uint64\"}],\"name\":\"freezeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getReducibleFreezing\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"_release\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_DECIMAL_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseOnce\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"releaseReducibleFreezingOnce\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"freezingCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_DECIMALS_UINT8\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_until\",\"type\":\"uint64\"}],\"name\":\"reducibleFreezeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"reducibleFreezingCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"freezingBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"release\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Freezed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"release\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FreezeReduced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"MindsyncToken","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"Apache-2.0","SwarmSource":"bzzr://4d473b45f5765936296119733ada651d9a603b7c8520c33626d71bb0bb81f893"}]}