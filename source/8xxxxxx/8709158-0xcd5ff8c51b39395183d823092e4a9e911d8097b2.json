{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.11;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error.\r\n */\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title token interface\r\n */\r\ninterface IBTALToken {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function mint(address account, uint256 amount) external returns (bool);\r\n    function lock(address account, uint256 amount, uint256 time) external;\r\n    function release() external;\r\n    function hardcap() external view returns(uint256);\r\n    function isAdmin(address account) external view returns (bool);\r\n    function isOwner(address account) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @title Exchange interface\r\n */\r\n interface IExchange {\r\n     function acceptETH() external payable;\r\n     function finish() external;\r\n     function reserveAddress() external view returns(address payable);\r\n }\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n */\r\ncontract ReentrancyGuard {\r\n    uint256 private _guardCounter;\r\n\r\n    constructor () internal {\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n}\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n/**\r\n * @title WhitelistedRole\r\n * @dev Whitelisted accounts have been approved by to perform certain actions (e.g. participate in a\r\n * crowdsale).\r\n */\r\ncontract WhitelistedRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event WhitelistedAdded(address indexed account);\r\n    event WhitelistedRemoved(address indexed account);\r\n\r\n    Roles.Role private _whitelisteds;\r\n\r\n    IBTALToken private _token;\r\n\r\n    modifier onlyAdmin() {\r\n        require(_token.isAdmin(msg.sender), \"Caller has no permission\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyWhitelisted() {\r\n        require(isWhitelisted(msg.sender), \"Sender is not whitelisted\");\r\n        _;\r\n    }\r\n\r\n    function isWhitelisted(address account) public view returns (bool) {\r\n        return _whitelisteds.has(account);\r\n    }\r\n\r\n    function addWhitelisted(address account) public onlyAdmin {\r\n        _whitelisteds.add(account);\r\n        emit WhitelistedAdded(account);\r\n    }\r\n\r\n    function addListToWhitelisted(address[] memory accounts) public {\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            addWhitelisted(accounts[i]);\r\n        }\r\n    }\r\n\r\n    function removeWhitelisted(address account) public onlyAdmin {\r\n        _whitelisteds.remove(account);\r\n        emit WhitelistedRemoved(account);\r\n    }\r\n\r\n    function removeListWhitelisted(address[] memory accounts) public {\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            removeWhitelisted(accounts[i]);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title EnlistedRole\r\n * @dev enlisted accounts have been approved to perform certain actions (e.g. participate in a\r\n * crowdsale).\r\n */\r\ncontract EnlistedRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event EnlistedAdded(address indexed account);\r\n    event EnlistedRemoved(address indexed account);\r\n\r\n    Roles.Role private _enlisted;\r\n\r\n    IBTALToken private _token;\r\n\r\n    modifier onlyAdmin() {\r\n        require(_token.isAdmin(msg.sender));\r\n        _;\r\n    }\r\n\r\n    modifier onlyEnlisted() {\r\n        require(isEnlisted(msg.sender), \"Sender is not Enlisted\");\r\n        _;\r\n    }\r\n\r\n    function isEnlisted(address account) public view returns (bool) {\r\n        return _enlisted.has(account);\r\n    }\r\n\r\n    function addEnlisted(address account) public onlyAdmin {\r\n        _enlisted.add(account);\r\n        emit EnlistedAdded(account);\r\n    }\r\n\r\n    function addListToEnlisted(address[] memory accounts) public {\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            addEnlisted(accounts[i]);\r\n        }\r\n    }\r\n\r\n    function removeEnlisted(address account) public onlyAdmin {\r\n        _enlisted.remove(account);\r\n        emit EnlistedRemoved(account);\r\n    }\r\n    \r\n    function removeListEnlisted(address[] memory accounts) public {\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            removeEnlisted(accounts[i]);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title Crowdsale contract\r\n */\r\ncontract Crowdsale is ReentrancyGuard, WhitelistedRole, EnlistedRole {\r\n    using SafeMath for uint256;\r\n\r\n    // deployer\r\n    address internal _initAddress;\r\n\r\n    // The token being sold\r\n    IBTALToken private _token;\r\n\r\n    // Address where funds are collected\r\n    address payable private _wallet;\r\n    address payable private _exchangeAddr;\r\n    address private _bonusAddr;\r\n    address private _teamAddr;\r\n    address private _priceProvider;\r\n\r\n    // stats\r\n    uint256 private _weiRaised; // (ETH)\r\n    uint256 private _tokensPurchased; // (Tokens)\r\n    uint256 private _reserved; // (USD)\r\n\r\n    // reserve variables\r\n    uint256 private _reserveTrigger = 210000000 * (10**18); // (Tokens)\r\n    uint256 private _reserveLimit = 150000; // (USD)\r\n\r\n    // Price of 1 ether in USD Cents\r\n    uint256 private _currentETHPrice;\r\n    uint256 private _decimals;\r\n\r\n    // How many token units a buyer gets per 1 USD\r\n    uint256 private _rate;\r\n\r\n    // Bonus percent (5% = 500)\r\n    uint256 private _bonusPercent = 500;\r\n\r\n    // Minimum amount of wei to invest\r\n    uint256 private _minimum = 26 ether; // (ETH)\r\n\r\n    // Limit of emission of crowdsale\r\n    uint256 private _hardcap; // (Tokens)\r\n\r\n    // ending time\r\n    uint256 private _endTime; // (UNIX)\r\n\r\n    // states\r\n    enum Reserving {OFF, ON}\r\n    Reserving private _reserve = Reserving.OFF;\r\n\r\n    enum State {Usual, Whitelist, PrivateSale, Closed}\r\n    State public state = State.Usual;\r\n\r\n    // events\r\n    event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n    event TokensSent(address indexed sender, address indexed beneficiary, uint256 amount);\r\n    event NewETHPrice(uint256 oldValue, uint256 newValue, uint256 decimals);\r\n    event Payout(address indexed recipient, uint256 weiAmount, uint256 usdAmount);\r\n    event BonusPayed(address indexed beneficiary, uint256 amount);\r\n    event ReserveState(bool isActive);\r\n    event StateChanged(string currentState);\r\n\r\n    // time controller\r\n    modifier active() {\r\n        require(\r\n            block.timestamp <= _endTime\r\n            && _tokensPurchased < _hardcap\r\n            && state != State.Closed\r\n            );\r\n        _;\r\n    }\r\n\r\n    // token admin checker\r\n    modifier onlyAdmin() {\r\n        require(isAdmin(msg.sender));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev constructor function, sets address of deployer.\r\n     */\r\n    constructor() public {\r\n        _initAddress = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev iniialize start variables.\r\n     * Can be called once only by address who comitted deploy.\r\n     */\r\n    function init(\r\n        uint256 rate,\r\n        uint256 initialETHPrice,\r\n        uint256 decimals,\r\n        address payable wallet,\r\n        address bonusAddr,\r\n        address teamAddr,\r\n        address payable exchange,\r\n        IBTALToken token,\r\n        uint256 endTime,\r\n        uint256 hardcap\r\n        ) public {\r\n\r\n        require(msg.sender == _initAddress);\r\n        require(address(_token) == address(0));\r\n\r\n        require(rate != 0, \"Rate is 0\");\r\n        require(initialETHPrice != 0, \"Initial ETH price is 0\");\r\n        require(wallet != address(0), \"Wallet is the zero address\");\r\n        require(bonusAddr != address(0), \"BonusAddr is the zero address\");\r\n        require(teamAddr != address(0), \"TeamAddr is the zero address\");\r\n        require(isContract(address(token)), \"Token is not a contract\");\r\n        require(isContract(exchange), \"Exchange is not a contract\");\r\n        require(endTime != 0, \"EndTime is 0\");\r\n        require(hardcap != 0, \"HardCap is 0\");\r\n\r\n\r\n        _rate = rate;\r\n        _currentETHPrice = initialETHPrice;\r\n        _decimals = decimals;\r\n        _wallet = wallet;\r\n        _bonusAddr = bonusAddr;\r\n        _teamAddr = teamAddr;\r\n        _exchangeAddr = exchange;\r\n        _token = token;\r\n        _endTime = endTime;\r\n        _hardcap = hardcap;\r\n    }\r\n\r\n    /**\r\n     * @dev fallback function\r\n     */\r\n    function() external payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev token purchase\r\n     * This function has a non-reentrancy guard\r\n     * Can be called only before end time\r\n     * @param beneficiary Recipient of the token purchase\r\n     */\r\n    function buyTokens(address beneficiary) public payable nonReentrant active {\r\n        require(beneficiary != address(0), \"New parameter value is the zero address\");\r\n        require(msg.value >= _minimum, \"Wei amount is less than minimum\");\r\n\r\n        if (state == State.Whitelist) {\r\n            require(isWhitelisted(beneficiary), \"Beneficiary is not whitelisted\");\r\n        }\r\n\r\n        if (state == State.PrivateSale) {\r\n            require(isEnlisted(beneficiary), \"Beneficiary is not enlisted\");\r\n        }\r\n\r\n        uint256 weiAmount = msg.value;\r\n\r\n        uint256 tokens = weiToTokens(weiAmount);\r\n\r\n        uint256 bonusAmount = tokens.mul(_bonusPercent).div(10000);\r\n\r\n        if (_tokensPurchased.add(tokens).add(bonusAmount) > _hardcap) {\r\n            tokens = (_hardcap.sub(_tokensPurchased)).mul(10000).div(_bonusPercent.add(10000));\r\n            bonusAmount = _hardcap.sub(_tokensPurchased).sub(tokens);\r\n            weiAmount = tokensToWei(tokens);\r\n            _sendETH(msg.sender, msg.value.sub(weiAmount));\r\n        }\r\n\r\n        if (bonusAmount > 0) {\r\n            _token.mint(_bonusAddr, bonusAmount);\r\n            emit BonusPayed(beneficiary, bonusAmount);\r\n        }\r\n\r\n        if (\r\n            _tokensPurchased <= _reserveTrigger\r\n            && _tokensPurchased.add(tokens) > _reserveTrigger\r\n            && reserved() < _reserveLimit\r\n            ) {\r\n            _reserve = Reserving.ON;\r\n            emit ReserveState(true);\r\n            uint256 unreservedWei = tokensToWei(_reserveTrigger.sub(_tokensPurchased));\r\n            _sendETH(_wallet, unreservedWei);\r\n            refund(weiAmount.sub(unreservedWei));\r\n        } else {\r\n            refund(weiAmount);\r\n        }\r\n\r\n        _token.mint(beneficiary, tokens);\r\n\r\n        _tokensPurchased = _tokensPurchased.add(tokens);\r\n        _weiRaised = _weiRaised.add(weiAmount);\r\n\r\n        emit TokensPurchased(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev internal Send tokens function.\r\n     * @param recipient address to send tokens to.\r\n     * @param amount amount of tokens.\r\n     */\r\n    function _sendTokens(address recipient, uint256 amount) internal {\r\n        require(recipient != address(0), \"Recipient is the zero address\");\r\n        _token.mint(recipient, amount);\r\n        emit TokensSent(msg.sender, recipient, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Send tokens to recipient.\r\n     * Available only to the admin.\r\n     * @param recipient address to send tokens to.\r\n     * @param amount amount of tokens.\r\n     */\r\n    function sendTokens(address recipient, uint256 amount) public onlyAdmin {\r\n        _sendTokens(recipient, amount);\r\n        _tokensPurchased = _tokensPurchased.add(amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Send fixed amount of tokens to list of recipients.\r\n     * Available only to the admin.\r\n     * @param recipients addresses to send tokens to.\r\n     * @param amount amount of tokens.\r\n     */\r\n    function sendTokensToList(address[] memory recipients, uint256 amount) public onlyAdmin {\r\n        require(recipients.length > 0);\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            _sendTokens(recipients[i], amount);\r\n        }\r\n        _tokensPurchased = _tokensPurchased.add(amount.mul(recipients.length));\r\n    }\r\n\r\n    /**\r\n     * @dev Send tokens to recipient per specified wei amount.\r\n     * Available only to the admin.\r\n     * @param recipient address to send tokens to.\r\n     * @param weiAmount amount of wei.\r\n     */\r\n     function sendTokensPerWei(address recipient, uint256 weiAmount) public onlyAdmin {\r\n         _sendTokens(recipient, weiToTokens(weiAmount));\r\n         _tokensPurchased = _tokensPurchased.add(weiToTokens(weiAmount));\r\n     }\r\n\r\n     /**\r\n      * @dev Send fixed amount of tokens per wei to list of recipients.\r\n      * Available only to the admin.\r\n      * @param recipients addresses to send tokens to.\r\n      * @param weiAmount amount of wei.\r\n      */\r\n     function sendTokensPerWeiToList(address[] memory recipients, uint256 weiAmount) public onlyAdmin {\r\n         require(recipients.length > 0);\r\n         for (uint256 i = 0; i < recipients.length; i++) {\r\n             _sendTokens(recipients[i], weiToTokens(weiAmount));\r\n         }\r\n         _tokensPurchased = _tokensPurchased.add(weiToTokens(weiAmount).mul(recipients.length));\r\n     }\r\n\r\n    /**\r\n     * @dev internal function to allocate funds.\r\n     */\r\n     function refund(uint256 weiAmount) internal {\r\n         if (_reserve == Reserving.OFF) {\r\n             _sendETH(_wallet, weiAmount);\r\n         } else {\r\n             if (USDToWei(_reserveLimit) >= _reserved) {\r\n                 if (weiToUSD(_reserved.add(weiAmount)) >= _reserveLimit) {\r\n\r\n                     uint256 reservedWei = USDToWei(_reserveLimit).sub(_reserved);\r\n                     _sendETH(_exchangeAddr, reservedWei);\r\n                     uint256 unreservedWei = weiAmount.sub(reservedWei);\r\n                     _sendETH(_wallet, unreservedWei);\r\n\r\n                     _reserved = USDToWei(_reserveLimit);\r\n                     _reserve = Reserving.OFF;\r\n                     emit ReserveState(false);\r\n                } else {\r\n                     _reserved = _reserved.add(weiAmount);\r\n                     _sendETH(_exchangeAddr, weiAmount);\r\n                }\r\n             } else {\r\n                 _sendETH(_wallet, weiAmount);\r\n                 _reserve = Reserving.OFF;\r\n                 emit ReserveState(false);\r\n             }\r\n         }\r\n     }\r\n\r\n     function _sendETH(address payable recipient, uint256 weiAmount) internal {\r\n         require(recipient != address(0));\r\n\r\n         if (recipient == _exchangeAddr) {\r\n             IExchange(_exchangeAddr).acceptETH.value(weiAmount)();\r\n         } else {\r\n             recipient.transfer(weiAmount);\r\n         }\r\n\r\n         emit Payout(recipient, weiAmount, weiToUSD(weiAmount));\r\n     }\r\n\r\n    /**\r\n     * @dev finish crowdsale.\r\n     * Available only to the admin.\r\n     * Can be called only if hardcap is reached or ending time has passed.\r\n     */\r\n    function finishSale() public onlyAdmin {\r\n        require(isEnded());\r\n\r\n        _token.mint(IExchange(_exchangeAddr).reserveAddress(), _token.hardcap().sub(_token.totalSupply()));\r\n        _token.lock(_teamAddr, _token.balanceOf(_teamAddr), 31536000);\r\n        _token.release();\r\n        IExchange(_exchangeAddr).finish();\r\n\r\n        emit StateChanged(\"Usual\");\r\n        state = State.Usual;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate amount of tokens to recieve for a given amount of wei\r\n     * @param weiAmount Value in wei to be converted into tokens\r\n     * @return Number of tokens that can be purchased with the specified weiAmount\r\n     */\r\n    function weiToTokens(uint256 weiAmount) internal view returns(uint256) {\r\n        return weiAmount.mul(_currentETHPrice).mul(_rate).div(10**_decimals).div(1 ether);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate amount of wei needed to buy given amount of tokens\r\n     * @param tokenAmount amount of tokens\r\n     * @return wei amount that one need to send to buy the specified tokenAmount\r\n     */\r\n    function tokensToWei(uint256 tokenAmount) internal view returns(uint256) {\r\n        return tokenAmount.mul(1 ether).mul(10**_decimals).div(_rate).div(_currentETHPrice);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate amount of USD for a given amount of wei\r\n     * @param weiAmount amount of tokens\r\n     * @return USD amount\r\n     */\r\n    function weiToUSD(uint256 weiAmount) internal view returns(uint256) {\r\n        return weiAmount.mul(_currentETHPrice).div(10**_decimals).div(1 ether);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate amount of wei for given amount of USD\r\n     * @param USDAmount amount of USD\r\n     * @return wei amount\r\n     */\r\n    function USDToWei(uint256 USDAmount) internal view returns(uint256) {\r\n        return USDAmount.mul(1 ether).mul(10**_decimals).div(_currentETHPrice);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate amount of USD needed to buy given amount of tokens\r\n     * @param tokenAmount amount of tokens\r\n     * @return USD amount that one need to send to buy the specified tokenAmount\r\n     */\r\n    function tokensToUSD(uint256 tokenAmount) internal view returns(uint256) {\r\n        return weiToUSD(tokensToWei(tokenAmount));\r\n    }\r\n\r\n    /**\r\n     * @dev Function to change the rate.\r\n     * Available only to the admin.\r\n     * @param newRate new value.\r\n     */\r\n    function setRate(uint256 newRate) external onlyAdmin {\r\n        require(newRate != 0, \"New parameter value is 0\");\r\n\r\n        _rate = newRate;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to change the PriceProvider address.\r\n     * Available only to the admin.\r\n     * @param provider new address.\r\n     */\r\n    function setEthPriceProvider(address provider) external onlyAdmin {\r\n        require(provider != address(0), \"New parameter value is the zero address\");\r\n        require(isContract(provider));\r\n\r\n        _priceProvider = provider;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to change the address to receive ether.\r\n     * Available only to the admin.\r\n     * @param newWallet new address.\r\n     */\r\n    function setWallet(address payable newWallet) external onlyAdmin {\r\n        require(newWallet != address(0), \"New parameter value is the zero address\");\r\n\r\n        _wallet = newWallet;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to change the BonusAddr address.\r\n     * Available only to the admin.\r\n     * @param newBonusAddr new address.\r\n     */\r\n    function setBonusAddr(address newBonusAddr) external onlyAdmin {\r\n        require(newBonusAddr != address(0), \"New parameter value is the zero address\");\r\n\r\n        _bonusAddr = newBonusAddr;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Function to change the address of team.\r\n     * Available only to the admin.\r\n     * @param newTeamAddr new address.\r\n     */\r\n    function setTeamAddr(address payable newTeamAddr) external onlyAdmin {\r\n        require(newTeamAddr != address(0), \"New parameter value is the zero address\");\r\n\r\n        _teamAddr = newTeamAddr;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to change the Exchange address.\r\n     * Available only to the admin.\r\n     * @param newExchange new address.\r\n     */\r\n    function setExchangeAddr(address payable newExchange) external onlyAdmin {\r\n        require(newExchange != address(0), \"New parameter value is the zero address\");\r\n        require(isContract(newExchange), \"Exchange is not a contract\");\r\n\r\n        _exchangeAddr = newExchange;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to change the ETH Price.\r\n     * Available only to the admin and to the PriceProvider.\r\n     * @param newPrice amount of USD Cents for 1 ether.\r\n     */\r\n    function setETHPrice(uint256 newPrice) external {\r\n        require(newPrice != 0, \"New parameter value is 0\");\r\n        require(msg.sender == _priceProvider || isAdmin(msg.sender), \"Sender has no permission\");\r\n\r\n        emit NewETHPrice(_currentETHPrice, newPrice, _decimals);\r\n        _currentETHPrice = newPrice;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to change the USD decimals.\r\n     * Available only to the admin and to the PriceProvider.\r\n     * @param newDecimals amount of numbers after decimal point.\r\n     */\r\n    function setDecimals(uint256 newDecimals) external {\r\n        require(msg.sender == _priceProvider || isAdmin(msg.sender), \"Sender has no permission\");\r\n\r\n        _decimals = newDecimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to change the end time.\r\n     * Available only to the admin.\r\n     * @param newTime UNIX time of ending of crowdsale.\r\n     */\r\n    function setEndTime(uint256 newTime) external onlyAdmin {\r\n        require(newTime != 0, \"New parameter value is 0\");\r\n\r\n        _endTime = newTime;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to change the bonus percent.\r\n     * Available only to the admin.\r\n     * @param newPercent new bonus percent.\r\n     */\r\n    function setBonusPercent(uint256 newPercent) external onlyAdmin {\r\n\r\n        _bonusPercent = newPercent;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to change the hardcap.\r\n     * Available only to the admin.\r\n     * @param newCap new hardcap value.\r\n     */\r\n    function setHardCap(uint256 newCap) external onlyAdmin {\r\n        require(newCap != 0, \"New parameter value is 0\");\r\n\r\n        _hardcap = newCap;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to change the minimum amount (wei).\r\n     * Available only to the admin.\r\n     * @param newMinimum new minimum value (wei).\r\n     */\r\n    function setMinimum(uint256 newMinimum) external onlyAdmin {\r\n        require(newMinimum != 0, \"New parameter value is 0\");\r\n\r\n        _minimum = newMinimum;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to change the reserve Limit (USD).\r\n     * Available only to the admin.\r\n     * @param newResLimitUSD new value (USD).\r\n     */\r\n    function setReserveLimit(uint256 newResLimitUSD) external onlyAdmin {\r\n        require(newResLimitUSD != 0, \"New parameter value is 0\");\r\n\r\n        _reserveLimit = newResLimitUSD;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to change the reserve trigger value (tokens).\r\n     * Available only to the admin.\r\n     * @param newReserveTrigger new value (tokens).\r\n     */\r\n    function setReserveTrigger(uint256 newReserveTrigger) external onlyAdmin {\r\n        require(newReserveTrigger != 0, \"New parameter value is 0\");\r\n\r\n        _reserveTrigger = newReserveTrigger;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to change activate whitelist state.\r\n     * Available only to the admin.\r\n     */\r\n    function switchWhitelist() external onlyAdmin {\r\n        require(state != State.Whitelist);\r\n        emit StateChanged(\"Whitelist\");\r\n        state = State.Whitelist;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to change activate private sale state.\r\n     * Available only to the admin.\r\n     */\r\n    function switchPrivateSale() external onlyAdmin {\r\n        require(state != State.PrivateSale);\r\n        emit StateChanged(\"PrivateSale\");\r\n        state = State.PrivateSale;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to change activate closed state.\r\n     * Available only to the admin.\r\n     */\r\n    function switchClosed() external onlyAdmin {\r\n        require(state != State.Closed);\r\n        emit StateChanged(\"Closed\");\r\n        state = State.Closed;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to change activate usual state.\r\n     * Available only to the admin.\r\n     */\r\n    function switchUsual() external onlyAdmin {\r\n        require(state != State.Usual);\r\n        emit StateChanged(\"Usual\");\r\n        state = State.Usual;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows to any owner of the contract withdraw needed ERC20 token from this contract (promo or bounties for example).\r\n    * @param ERC20Token Address of ERC20 token.\r\n    * @param recipient Account to receive tokens.\r\n    */\r\n    function withdrawERC20(address ERC20Token, address recipient) external onlyAdmin {\r\n\r\n        uint256 amount = IBTALToken(ERC20Token).balanceOf(address(this));\r\n        require(amount > 0);\r\n        IBTALToken(ERC20Token).transfer(recipient, amount);\r\n\r\n    }\r\n\r\n    /**\r\n     * @return the token being sold.\r\n     */\r\n    function token() public view returns (IBTALToken) {\r\n        return _token;\r\n    }\r\n\r\n    /**\r\n     * @return the address where funds are collected.\r\n     */\r\n    function wallet() public view returns (address payable) {\r\n        return _wallet;\r\n    }\r\n\r\n    /**\r\n     * @return the bonus address where bonuses are collected.\r\n     */\r\n    function bonusAddr() public view returns (address) {\r\n        return _bonusAddr;\r\n    }\r\n\r\n    /**\r\n     * @return the address where funds are collected.\r\n     */\r\n    function teamAddr() public view returns (address) {\r\n        return _teamAddr;\r\n    }\r\n\r\n    /**\r\n     * @return the address of exchange contract.\r\n     */\r\n    function exchange() public view returns (address payable) {\r\n        return _exchangeAddr;\r\n    }\r\n\r\n    /**\r\n     * @return the priceProvider address.\r\n     */\r\n    function priceProvider() public view returns (address) {\r\n        return _priceProvider;\r\n    }\r\n\r\n    /**\r\n     * @return the number of token units a buyer gets per wei.\r\n     */\r\n    function rate() public view returns (uint256) {\r\n        return _rate;\r\n    }\r\n\r\n    /**\r\n     * @return the price of 1 ether in USD Cents.\r\n     */\r\n    function currentETHPrice() public view returns (uint256 price) {\r\n        return(_currentETHPrice);\r\n    }\r\n\r\n    /**\r\n     * @return the the number of decimals of ETH Price.\r\n     */\r\n    function currentETHPriceDecimals() public view returns (uint256 decimals) {\r\n        return(_decimals);\r\n    }\r\n\r\n    /**\r\n     * @return bonusPercent.\r\n     */\r\n    function bonusPercent() public view returns (uint256) {\r\n        return _bonusPercent;\r\n    }\r\n\r\n    /**\r\n     * @return minimum amount of wei to invest.\r\n     */\r\n    function minimum() public view returns (uint256) {\r\n        return _minimum;\r\n    }\r\n\r\n    /**\r\n     * @return the amount of wei raised.\r\n     */\r\n    function weiRaised() public view returns (uint256) {\r\n        return _weiRaised;\r\n    }\r\n\r\n    /**\r\n     * @return the reserved amount of ETH in USD.\r\n     */\r\n    function reserved() public view returns (uint256) {\r\n        return weiToUSD(_reserved);\r\n    }\r\n\r\n    /**\r\n     * @return the reserved limit in USD.\r\n     */\r\n    function reserveLimit() public view returns (uint256) {\r\n        return _reserveLimit;\r\n    }\r\n\r\n    /**\r\n     * @return the reserved limit in USD.\r\n     */\r\n    function reserveTrigger() public view returns (uint256) {\r\n        return _reserveTrigger;\r\n    }\r\n\r\n    /**\r\n     * @return the hardcap.\r\n     */\r\n    function hardcap() public view returns (uint256) {\r\n        return _hardcap;\r\n    }\r\n\r\n    /**\r\n     * @return the ending UNIX time.\r\n     */\r\n    function endTime() public view returns (uint256) {\r\n        return _endTime;\r\n    }\r\n\r\n    /**\r\n     * @return the amount of purchased tokens.\r\n     */\r\n    function tokensPurchased() public view returns (uint256) {\r\n        return _tokensPurchased;\r\n    }\r\n\r\n    /**\r\n     * @return true if caller is owner.\r\n     */\r\n    function isOwner(address account) internal view returns (bool) {\r\n        return _token.isOwner(account);\r\n    }\r\n\r\n    /**\r\n     * @return true if caller is admin.\r\n     */\r\n    function isAdmin(address account) internal view returns (bool) {\r\n        return _token.isAdmin(account);\r\n    }\r\n\r\n    /**\r\n     * @return true if the address is a сontract.\r\n     */\r\n    function isContract(address addr) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @return true if hardcap is reached or endtime has passed.\r\n     */\r\n    function isEnded() public view returns (bool) {\r\n        return (_tokensPurchased >= _hardcap || block.timestamp >= _endTime);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialETHPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bonusAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamAddr\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"exchange\",\"type\":\"address\"},{\"internalType\":\"contract IBTALToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardcap\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"sendTokensPerWeiToList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeEnlisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"addListToWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinimum\",\"type\":\"uint256\"}],\"name\":\"setMinimum\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveTrigger\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"removeListEnlisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"removeListWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPercent\",\"type\":\"uint256\"}],\"name\":\"setBonusPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBonusAddr\",\"type\":\"address\"}],\"name\":\"setBonusAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newResLimitUSD\",\"type\":\"uint256\"}],\"name\":\"setReserveLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"sendTokensPerWei\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"switchWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newExchange\",\"type\":\"address\"}],\"name\":\"setExchangeAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDecimals\",\"type\":\"uint256\"}],\"name\":\"setDecimals\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"ERC20Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addEnlisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"switchUsual\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"addListToEnlisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardcap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setETHPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"switchPrivateSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum Crowdsale.State\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newTeamAddr\",\"type\":\"address\"}],\"name\":\"setTeamAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPurchased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"setEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"}],\"name\":\"setHardCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"switchClosed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchange\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendTokensToList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isEnlisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentETHPriceDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"setEthPriceProvider\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newReserveTrigger\",\"type\":\"uint256\"}],\"name\":\"setReserveTrigger\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentETHPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IBTALToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserved\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"NewETHPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"}],\"name\":\"Payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BonusPayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"ReserveState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"currentState\",\"type\":\"string\"}],\"name\":\"StateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"EnlistedAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"EnlistedRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistedAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistedRemoved\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://e444302cd36b9e9b3cbd2c0c59d6631413a2c2558904ef315e6f0e7b2f780a88"}]}