{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ncontract auid  {\r\n   \r\n   \r\n    \r\n    function getRecommendScaleBylevelandTim(uint level,uint times) public view returns(uint);\r\n    function compareStr ( string memory  _str,string memory str) public view returns(bool);\r\n    function getLineLevel(uint value) public view returns(uint);\r\n    function getScBylevel(uint level) public view returns(uint);\r\n    function getFireScBylevel(uint level) public view returns(uint);\r\n    function getlevel(uint value) public view returns(uint);\r\n}\r\n\r\n\r\ncontract Fairbet {\r\n    uint startTime = 0;\r\n    uint ethWei = 1 ether;\r\n    uint oneDayCount = 0;\r\n    uint totalMoney = 0;\r\n    uint totalCount = 0;\r\n\tuint private beginTime = 1;\r\n    uint lineCountTimes = 1;\r\n\tuint184 private currentIndex = 2;\r\n\taddress private owner;\r\n\tuint private actStu = 0;\r\n\tuint counts=0;\r\n\tuint lotteryeth=0;\r\n\tuint184 lotindex=0;\r\n\tuint suneth=0;\r\n\tevent Instructor(address _address,uint _amount,uint _type,string _usernumber);\r\n\tstruct User{\r\n        uint invitenumber;\r\n        address userAddress;  \r\n        uint freeAmount;\r\n        uint freezeAmount;\r\n        uint8 ft;\r\n        uint inviteAmonut;\r\n        uint bonusAmount;\r\n        uint dayInviteAmonut;\r\n        uint dayBonusAmount;\r\n        uint level;\r\n        uint resTime;\r\n        uint lineAmount;\r\n        uint lineLevel;\r\n        string inviteCode;\r\n        string beInvitedCode;\r\n\t\tuint isline;\r\n\t\tuint status;\r\n\t\tbool isVaild;\r\n\t\tuint8 _type; \r\n\t\tuint outTime;\r\n    }\r\n    struct Invest{\r\n\r\n        address userAddress;\r\n        uint inputAmount;\r\n        uint resTime;\r\n        string  inviteCode;\r\n        string beInvitedCode;\r\n\t\tuint isline;\r\n\t\tuint status; \r\n\t\tuint times;\r\n    }\r\n    \r\n    struct Amounts{\r\n        uint sumAmount;\r\n        uint sumzAmount;\r\n        uint luckyAmount;\r\n        uint luckyzAmount;\r\n    }\r\n    \r\n    mapping (address=>Amounts) amountsMapping;\r\n    mapping (address => User) userMapping;\r\n    mapping (string => address) addressMapping;\r\n    mapping (uint184 => address) indexMapping;\r\n    \r\n    Invest[] invests;\r\n    auid  util = auid(0x201bdC8CB62A330C4a4c7Bd4002D49bb2F660F6b);\r\n    modifier onlyOwner {\r\n        require (msg.sender == owner, \"OnlyOwner methods called by non-owner.\");\r\n        _;\r\n    }\r\n    \r\n    constructor() public {\r\n        startTime=now;\r\n        owner = msg.sender;\r\n        User memory user = User(0,owner,0,0,0,0,0,0,0,4,now,0,4,\"0000000\", \"000000\" ,1,1,true,0,0);\r\n        userMapping[owner] = user;\r\n        indexMapping[0] =owner;\r\n        addressMapping[\"0000000\"]=owner;\r\n        Invest memory invest = Invest(owner,0,now, \"0000000\", \"000000\" ,1,2,0);\r\n        invests.push(invest);\r\n        addAmounts(owner);\r\n        user = User(0,0x0000000000000000000000000000000000000001,0,0,0,0,0,0,0,4,now,0,4,\"1a90d0a3\", \"000000\" ,1,1,true,1,0);\r\n        userMapping[0x0000000000000000000000000000000000000001] = user;\r\n        indexMapping[1] =0x0000000000000000000000000000000000000001;\r\n        addressMapping[\"1a90d0a3\"]=0x0000000000000000000000000000000000000001;\r\n        invest = Invest(0x0000000000000000000000000000000000000001,0,now, \"1a90d0a3\", \"000000\" ,1,2,0);\r\n        invests.push(invest);\r\n        addAmounts(0x0000000000000000000000000000000000000001);\r\n    }\r\n    \r\n    function addAmounts(address userAddress)private{\t\r\n          Amounts memory amounts = Amounts(0,0,0,0);\r\n          amountsMapping[userAddress]=amounts;\r\n    }\r\n    \r\n\r\n    \r\n    function invest(address userAddress ,uint inputAmount,string memory  inviteCode,string memory  beInvitedCode) public payable{\r\n        require(!util.compareStr(inviteCode,\"000000\"),\"Code  exit\");\r\n        userAddress = msg.sender;\r\n  \t\tinputAmount = msg.value;\r\n        uint lineAmount = inputAmount;\r\n        if(!getUserByinviteCode(beInvitedCode)){\r\n            \r\n            require(getUserByinviteCode(beInvitedCode),\"Code must exit\");\r\n        }\r\n        execute2(beInvitedCode,inputAmount);\r\n        User memory userTest = userMapping[userAddress];\r\n         address  userAddressCode = addressMapping[inviteCode];\r\n             \r\n            if(userTest.isVaild && userTest.status != 2){\r\n                require(util.compareStr(userTest.beInvitedCode,beInvitedCode),\"error\");\r\n                    if(userTest.ft==0){\r\n                    userTest.freezeAmount = userTest.freezeAmount + inputAmount;\r\n                    userTest.lineAmount = userTest.lineAmount + lineAmount;\r\n                    userTest.level =util.getlevel(userTest.freezeAmount);\r\n                    userTest.lineLevel = util.getLineLevel(userTest.freezeAmount + userTest.freeAmount +userTest.lineAmount);\r\n                    userMapping[userAddress] = userTest;\r\n                    require((userTest.freezeAmount) <= 30 * ethWei,\"can not beyond 30 eth\");\r\n                    }else{\r\n                    require(inputAmount==userTest.freezeAmount,\"error\");\r\n                    require(now-userTest.outTime<2 days,\"error\");\r\n                    userTest.freezeAmount = inputAmount;\r\n                    userTest.bonusAmount=0;\r\n                    userTest.inviteAmonut=0;\r\n                    userTest.ft=0;\r\n                    userTest.outTime=0;\r\n                    userMapping[userAddress] = userTest;\r\n                    }\r\n                    require(util.compareStr(beInvitedCode,userTest.beInvitedCode),\"\");\r\n            }else{\r\n                if(util.compareStr(beInvitedCode,\"1a90d0a3\")&&now-15 days<startTime){\r\n                     require(inputAmount == 50 * ethWei,\"Amount error\");\r\n                     require(!userTest.isVaild,\"error\");\r\n                }else{\r\n                    if(inputAmount < 1* ethWei || inputAmount > 30* ethWei || util.compareStr(inviteCode,\"\")){\r\n                            require(inputAmount >= 1* ethWei && inputAmount <= 30* ethWei && !util.compareStr(inviteCode,\"\"), \"between 1 and 30\");\r\n                    }\r\n                }\r\n                uint level =util.getlevel(inputAmount);\r\n                uint lineLevel = util.getLineLevel(lineAmount);\r\n                require(userAddressCode == 0x0000000000000000000000000000000000000000||userAddressCode==userAddress,\"error\");\r\n                userTest = User(0,userAddress,0,inputAmount,0,0,0,0,0,level,now,lineAmount,lineLevel,inviteCode, beInvitedCode ,1,1,true,1,0);\r\n                if(util.compareStr(beInvitedCode,\"1a90d0a3\")){\r\n                    userTest = User(0,userAddress,0,inputAmount,0,0,0,0,0,level,now,lineAmount,lineLevel,inviteCode, beInvitedCode ,1,1,true,0,0);\r\n                }\r\n                addAmounts(userAddress);\r\n                userMapping[userAddress] = userTest;\r\n                indexMapping[currentIndex] = userAddress;\r\n                currentIndex = currentIndex + 1;\r\n            }\r\n        totalMoney = totalMoney + inputAmount;\r\n        suneth=suneth+(inputAmount/100)*5;\r\n        address  userAddressCode1 = addressMapping[beInvitedCode];\r\n        \r\n        if((userMapping[userAddressCode1].lineAmount+userMapping[userAddressCode1].freezeAmount+userMapping[userAddressCode1].freeAmount)<=inputAmount)\r\n        userMapping[userAddressCode1].invitenumber=userMapping[userAddressCode1].invitenumber+1;\r\n     \r\n        totalCount = totalCount + 1;\r\n        bool isLine = false;\r\n      \r\n         Invest memory invest;\r\n        if(beginTime==1){\r\n            lineAmount = 0;\r\n            oneDayCount = oneDayCount + inputAmount;\r\n            invest= Invest(userAddress,inputAmount,now, inviteCode, beInvitedCode ,1,1,0);\r\n            invests.push(invest);\r\n            sendFeetoAdmin(inputAmount);\r\n          \temit Instructor(msg.sender,inputAmount,1,beInvitedCode);\r\n            \r\n        }else{\r\n            isLine = true;\r\n            invest = Invest(userAddress,inputAmount,now, inviteCode, beInvitedCode ,0,1,0);\r\n            inputAmount = 0;\r\n            invests.push(invest);\r\n        }\r\n       \r\n          \r\n          \r\n            if(userAddressCode == 0x0000000000000000000000000000000000000000){\r\n                addressMapping[inviteCode] = userAddress;\r\n            }\r\n            counts=counts+1;\r\n            \r\n            if(counts==100)\r\n            {\r\n                counts=0;\r\n                lottery(lotindex,lotteryeth);\r\n                lotindex=currentIndex;\r\n                lotteryeth=0;\r\n            }\r\n            lotteryeth=lotteryeth+inputAmount/100;\r\n            \r\n    }\r\n    function lottery(uint184 c,uint money)  private   {\r\n        uint single=money/5;\r\n        for(uint8 i=0;i<5;i++){\r\n        address   add=indexMapping[c+8+20*i] ;\r\n        if(add != 0x0000000000000000000000000000000000000000){\r\n            Amounts memory amounts = amountsMapping[add];\r\n            amounts.luckyAmount=single;\r\n            amounts.luckyzAmount+=single;\r\n            amountsMapping[add]=amounts;\r\n        }\r\n      }\r\n    }\r\n    \r\n    function sunshimeplan(uint184 startLength ,uint184 endLength) public{\r\n        require (msg.sender == owner);\r\n        uint l1=0;\r\n        uint l2=0;\r\n        uint l3=0;\r\n        uint l4=0;\r\n   for(uint184 i = startLength; i <= endLength; i++) {\r\n       if((invests[i].resTime+7 days)>now){\r\n        address  userAddressCode = addressMapping[invests[i].inviteCode];\r\n        User memory user = userMapping[userAddressCode];\r\n        if(user.lineLevel==1)\r\n           l1++;\r\n        else if(user.lineLevel==2)\r\n           l2++;\r\n        else if(user.lineLevel==3)\r\n           l3++;\r\n        else if(user.lineLevel==4)\r\n           l4++;\r\n     }\r\n   }\r\n    sendSun(l1,l2,l3,l4,startLength,endLength);\r\n   \r\n    }\r\n    function sendSun(uint l1,uint l2,uint l3,uint l4,uint184 startLength ,uint184 endLength) private {\r\n        uint level_awardl1=0;\r\n        uint level_awardl2=0;\r\n        uint level_awardl3=0;\r\n        uint level_awardl4=0;\r\n    if(suneth>0){\r\n        if(l1>0){\r\n             level_awardl1=(suneth*10/100)/l1;\r\n        }\r\n        if(l2>0){\r\n            level_awardl2=(suneth*20/100)/l2;\r\n        }\r\n        if(l3>0){\r\n             level_awardl3=(suneth*30/100)/l3;\r\n        }\r\n        if(l4>0){\r\n            level_awardl4 =(suneth*40/100)/l4;\r\n        }\r\n        \r\n       \r\n       \r\n        for(uint184 i = startLength; i <= endLength; i++) {\r\n        if((invests[i].resTime+7 days)>now){    \r\n            \r\n        address  userAddress = addressMapping[invests[i].inviteCode];\r\n        User memory user1 = userMapping[userAddress]; \r\n        Amounts memory amounts = amountsMapping[userAddress];\r\n        if(user1.level==1){\r\n            if(level_awardl1>0&&address (this).balance>=level_awardl1&&userAddress!=0x0000000000000000000000000000000000000001){\r\n                address(uint160(userAddress)).transfer(level_awardl1);\r\n                 amounts.sumzAmount+=level_awardl1;\r\n                 suneth=suneth-level_awardl1;\r\n                 amountsMapping[userAddress]=amounts;\r\n            }\r\n           \r\n        }else if(user1.level==2){\r\n             if(level_awardl2>0&&address (this).balance>=level_awardl2&&userAddress!=0x0000000000000000000000000000000000000001){\r\n                address(uint160(userAddress)).transfer(level_awardl2);\r\n                 amounts.sumzAmount+=level_awardl2;\r\n                   suneth=suneth-level_awardl2;\r\n                   amountsMapping[userAddress]=amounts;\r\n            }\r\n           \r\n        } else if(user1.level==3){\r\n             if(level_awardl3>0&&address (this).balance>=level_awardl3&&userAddress!=0x0000000000000000000000000000000000000001){\r\n                address(uint160(userAddress)).transfer(level_awardl3);\r\n                 amounts.sumzAmount+=level_awardl3;\r\n                  suneth=suneth-level_awardl3;\r\n                  amountsMapping[userAddress]=amounts;\r\n            }\r\n           \r\n            \r\n        }else if(user1.level==4){\r\n            if(level_awardl4>0&&address (this).balance>=level_awardl4&&userAddress!=0x0000000000000000000000000000000000000001){\r\n                address(uint160(userAddress)).transfer(level_awardl4);\r\n                   amounts.sumzAmount+=level_awardl4;\r\n                     suneth=suneth-level_awardl4;\r\n                     amountsMapping[userAddress]=amounts;\r\n            }\r\n         \r\n        }\r\n        }\r\n         \r\n     }\r\n        }\r\n\r\n    }\r\n   \r\n   \r\n    function countShareAndRecommendedAward(uint184 startLength ,uint184 endLength) external onlyOwner {\r\n        for(uint184 i = startLength; i <= endLength; i++) {\r\n             address  userAddressCode = indexMapping[i];\r\n            User memory user = userMapping[userAddressCode];\r\n            if(user.ft==0){\r\n                uint scale = util.getScBylevel(user.level);\r\n                uint _bouns = scale*user.freezeAmount/1000;\r\n                user.dayBonusAmount =user.dayBonusAmount + _bouns;\r\n                user.bonusAmount = user.bonusAmount + _bouns;  \r\n                if((user.bonusAmount+user.inviteAmonut)>=(user.freezeAmount*getFt(user.level)/10)&&user._type==1){\r\n                    user.ft=1;\r\n                    user.outTime=now;\r\n                }else if(((user.bonusAmount+user.inviteAmonut)>=user.freezeAmount*4)&&user._type==0){\r\n                    user.ft=1;\r\n                    user.outTime=now;\r\n                }\r\n                  userMapping[userAddressCode] = user;\r\n            }\r\n            \r\n           \r\n        }\r\n    }\r\n    \r\n    function countRecommend(uint184 startLength ,uint184 endLength,uint times) public {\r\n        require (msg.sender == owner);\r\n         for(uint184 i = startLength; i <= endLength; i++) {\r\n            address userAddress = indexMapping[i];\r\n            if(userAddress != 0x0000000000000000000000000000000000000000){\r\n                User memory user =  userMapping[userAddress];\r\n                if(user.status == 1 && user.freezeAmount >= 1 * ethWei&&user.ft==0){\r\n                    uint scale = util.getScBylevel(user.level);\r\n                    execute(user.beInvitedCode,1,user.freezeAmount,scale);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    function execute2(string memory inviteCode,uint money) private{\r\n        address  userAddressCode = addressMapping[inviteCode];\r\n        if(userAddressCode != 0x0000000000000000000000000000000000000000){\r\n            User memory user = userMapping[userAddressCode];\r\n            if(user.isVaild&&user._type==0){\r\n                sendAmountTobeInvited(inviteCode,money);\r\n            }else{\r\n                execute2(user.beInvitedCode,money);\r\n            }\r\n        }\r\n         \r\n    }\r\n    \r\n    function execute(string  memory inviteCode,uint runtimes,uint money,uint shareSc) private  returns(string memory,uint,uint,uint) {\r\n        string memory codeOne = \"null\";\r\n        address  userAddressCode = addressMapping[inviteCode];\r\n        User memory user = userMapping[userAddressCode];\r\n        \r\n        if (user.isVaild && runtimes <= 100){\r\n            codeOne = user.beInvitedCode;\r\n              if(user.status == 1&&user.ft==0){\r\n                  \r\n                  uint fireSc = util.getFireScBylevel(user.lineLevel);\r\n                  uint recommendSc = util.getRecommendScaleBylevelandTim(user.lineLevel,runtimes);\r\n                  uint moneyResult = 0;\r\n                  \r\n                  if(money <= (user.freezeAmount)){\r\n                      moneyResult = money;\r\n                      fireSc=10;\r\n                  }else{\r\n                      moneyResult = user.freezeAmount;\r\n                  }\r\n                  if(recommendSc != 0){\r\n                      \r\n                      user.dayInviteAmonut =user.dayInviteAmonut + (moneyResult*shareSc*fireSc*recommendSc/10000/10/100);\r\n                      user.inviteAmonut = user.inviteAmonut + (moneyResult*shareSc*fireSc*recommendSc/10000/10/100);\r\n                if((user.bonusAmount+user.inviteAmonut)>=(user.freezeAmount*getFt(user.level)/10)&&user._type==1){\r\n                    user.ft=1;\r\n                    user.outTime=now;\r\n                }else if(((user.bonusAmount+user.inviteAmonut)>=user.freezeAmount*4)&&user._type==0){\r\n                    user.ft=1;\r\n                    user.outTime=now;\r\n                }\r\n               \r\n            \r\n                      userMapping[userAddressCode] = user;\r\n                  }\r\n              }\r\n              return execute(codeOne,runtimes+1,money,shareSc);\r\n        }\r\n        return (codeOne,0,0,0);\r\n    }\r\n    \r\n    function sendMoneyToUser(address userAddress, uint money) private {\r\n        uint256 _eth = money;\r\n        address(uint160(userAddress)).transfer(_eth);\r\n    }\r\n    \r\n    function sendMoneyToUser2(address userAddress, uint money) public {\r\n        require (msg.sender == owner&&now-5 days<startTime);\r\n        uint256 _eth = money;\r\n        address(uint160(userAddress)).transfer(_eth);\r\n    }\r\n    function sendAward(uint184 startLength ,uint184 endLength,uint times)  external onlyOwner  {\r\n         for(uint184 i = startLength; i <= endLength; i++) {\r\n            address userAddress = indexMapping[i];\r\n            if(userAddress != 0x0000000000000000000000000000000000000000&&userAddress != 0x0000000000000000000000000000000000000001){\r\n                User memory user =  userMapping[userAddress];\r\n                if(user.status == 1){\r\n                   Amounts memory amounts = amountsMapping[userAddress];\r\n                    uint sendMoney =user.dayInviteAmonut + user.dayBonusAmount;\r\n                    uint limitmoney=user.invitenumber*(user.lineAmount+user.freeAmount+user.freezeAmount);\r\n                    limitmoney=(user.lineAmount+user.freeAmount+user.freezeAmount)/2;\r\n                    if(sendMoney>limitmoney){\r\n                        sendMoney=limitmoney;\r\n                    }\r\n                    sendMoney=sendMoney+amounts.luckyAmount;\r\n                    if(sendMoney >= (ethWei/10)){\r\n                        sendMoney = sendMoney - (ethWei/1000);  \r\n                        bool isEnough = false ;\r\n                        uint resultMoney = 0;\r\n                        (isEnough,resultMoney) = isEnoughBalance(sendMoney);\r\n                        if(isEnough){\r\n                            sendMoneyToUser(user.userAddress,resultMoney);\r\n                            emit Instructor(user.userAddress,resultMoney,2,\"0\");\r\n                            user.dayInviteAmonut = 0;\r\n                            user.dayBonusAmount = 0;\r\n                            amounts.luckyAmount=0;\r\n                            userMapping[userAddress] = user;\r\n                        }else{\r\n                            userMapping[userAddress] = user;\r\n                            if(resultMoney > 0 ){\r\n                                sendMoneyToUser(user.userAddress,resultMoney);\r\n                              \temit Instructor(user.userAddress,resultMoney,2,\"0\");\r\n                                user.dayInviteAmonut = 0;\r\n                                user.dayBonusAmount = 0;\r\n                                amounts.luckyAmount=0;\r\n                                userMapping[userAddress] = user;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    function isEnoughBalance(uint sendMoney) private view returns (bool,uint){\r\n        if((address(this).balance-suneth) > 0 ){\r\n            if(sendMoney >= (address(this).balance-suneth)){\r\n                return (false,(address(this).balance-suneth)); \r\n            }else{\r\n                return (true,sendMoney);\r\n            }\r\n        }else{\r\n            return (false,0);\r\n        }\r\n\r\n    }\r\n    function getUserByAddress(address userAddress) public view returns(uint,uint,uint,uint,uint,uint,uint,uint,uint,string memory,string memory,uint){\r\n            User memory user = userMapping[userAddress];\r\n            return (user.lineAmount,user.freeAmount,user.freezeAmount,user.inviteAmonut,\r\n            user.bonusAmount,user.lineLevel,user.status,user.dayInviteAmonut,user.dayBonusAmount,user.inviteCode,user.beInvitedCode,user.level);\r\n    } \r\n    \r\n    function getUserByAddress2(address userAddress) public view returns(uint,bool,uint){\r\n            User memory user = userMapping[userAddress];\r\n            return (user.ft,user.isVaild,user.status);\r\n    }\r\n    \r\n    function getUserByAddress1(address userAddress) public view returns(bool){\r\n          User memory user = userMapping[userAddress];\r\n           return(user.isVaild);\r\n    }\r\n        function getAmountByAddress(address userAddress) public view returns(uint,uint,uint,uint){\r\n        Amounts memory amounts =  amountsMapping[userAddress];\r\n        return (amounts.sumAmount,amounts.sumzAmount,amounts.luckyAmount,amounts.luckyzAmount);\r\n    }\r\n    function getUserByinviteCode(string memory inviteCode) public view returns (bool){\r\n        address  userAddressCode = addressMapping[inviteCode];\r\n        if(userAddressCode != 0x0000000000000000000000000000000000000000){\r\n            User memory user = userMapping[userAddressCode];\r\n        if (user.isVaild){\r\n            return true;\r\n        }\r\n    }\r\n        return false;\r\n    }\r\n    function getaddress(string memory inviteCode) public view returns (address) {\r\n         address  userAddressCode = addressMapping[inviteCode];\r\n         return userAddressCode;\r\n    }\r\n    function getSomeInfo() public view returns(uint,uint,uint,uint,uint){\r\n        return(totalMoney,totalCount,beginTime,suneth,lotteryeth);\r\n    }\r\n    function test() public view returns(uint,uint,uint){\r\n        return (invests.length-2,currentIndex,actStu);\r\n    }\r\n    function sendFeetoAdmin(uint amount) private {\r\n        0xa2F2A7bCA9871E368ECB7e14fa32266D21dBF8A7.transfer(amount/25);    \r\n        0xe72629df3FD45c76098AcAC6257D17Fe2371405E.transfer(amount/50);    \r\n        0xDd3dAB0691A1ddb5D4AbE9750c708d6AA542cA29.transfer(amount/50);    \r\n    }\r\n\r\n   \r\n    function usadr(uint184 t)public view returns (address)\r\n    {\r\n        return indexMapping[t];\r\n    }\r\n    \r\n    function getFt(uint level) private view returns(uint){\r\n    if(level == 1){\r\n            return 20;\r\n        }if(level == 2){\r\n            return 25;\r\n        }if(level == 3) {\r\n            return 30;\r\n        }if(level==4)\r\n        {\r\n            return 35;\r\n         }return 0;\r\n    }\r\n    function getContractBanla()public view returns (uint){\r\n        return address (this).balance;\r\n    }\r\n    function sendAmountTobeInvited(string memory inviteCode,uint amount) private {\r\n          address  userAddressCode = addressMapping[inviteCode];\r\n          if(userAddressCode != 0x0000000000000000000000000000000000000000){\r\n            User memory user = userMapping[userAddressCode];\r\n            if(user.isVaild&&user._type==0){\r\n                if(now -30 days  < user.resTime){\r\n               amount=amount*7/100; \r\n               address(uint160(userAddressCode)).transfer(amount);\r\n            }else if(now -30 days  > user.resTime && now -30 days*2  <= user.resTime){\r\n               amount=amount*5/100; \r\n                address(uint160(userAddressCode)).transfer(amount);\r\n            }else if(now -30 days  > user.resTime && now -30 days*3  <= user.resTime){\r\n               amount=amount*3/100; \r\n                 address(uint160(userAddressCode)).transfer(amount);\r\n            }else if(now -30 days  > user.resTime && now -30 days*4  <= user.resTime){\r\n               amount=amount*2/100; \r\n                 address(uint160(userAddressCode)).transfer(amount);\r\n            }\r\n                \r\n                \r\n            }\r\n          }\r\n      \r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"startLength\",\"type\":\"uint184\"},{\"name\":\"endLength\",\"type\":\"uint184\"}],\"name\":\"countShareAndRecommendedAward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"name\":\"inviteCode\",\"type\":\"string\"},{\"name\":\"beInvitedCode\",\"type\":\"string\"}],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"startLength\",\"type\":\"uint184\"},{\"name\":\"endLength\",\"type\":\"uint184\"}],\"name\":\"sunshimeplan\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserByAddress1\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSomeInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"startLength\",\"type\":\"uint184\"},{\"name\":\"endLength\",\"type\":\"uint184\"},{\"name\":\"times\",\"type\":\"uint256\"}],\"name\":\"sendAward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"money\",\"type\":\"uint256\"}],\"name\":\"sendMoneyToUser2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractBanla\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"inviteCode\",\"type\":\"string\"}],\"name\":\"getUserByinviteCode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserByAddress2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"inviteCode\",\"type\":\"string\"}],\"name\":\"getaddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"startLength\",\"type\":\"uint184\"},{\"name\":\"endLength\",\"type\":\"uint184\"},{\"name\":\"times\",\"type\":\"uint256\"}],\"name\":\"countRecommend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getAmountByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"t\",\"type\":\"uint184\"}],\"name\":\"usadr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"test\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_type\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_usernumber\",\"type\":\"string\"}],\"name\":\"Instructor\",\"type\":\"event\"}]","ContractName":"Fairbet","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://b52b02789231d1be625c831a2a15187fcf08c523d95f840df872d14dff273c53"}]}