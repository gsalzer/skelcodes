{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.7;\r\n\r\ninterface ERC20Interface {\r\n    function transfer(address, uint) external returns (bool);\r\n    function deposit() external payable;\r\n    function withdraw(uint) external;\r\n    function balanceOf(address) external view returns (uint);\r\n    function approve(address, uint) external;\r\n}\r\n\r\n\r\ncontract mint {\r\n    \r\n    address public ethAddr = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    \r\n    function getAddressWETH() public pure returns (address eth) {\r\n        eth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    }\r\n    \r\n    function getAddressZRXExchange() public pure returns (address zrxExchange) {\r\n        zrxExchange = 0x080bf510FCbF18b91105470639e9561022937712;\r\n    }\r\n    \r\n    function mintWeth(bytes memory calldataHexString, address dest) public payable {\r\n        ERC20Interface wethContract = ERC20Interface(getAddressWETH());\r\n        wethContract.deposit.value(msg.value)();\r\n        wethContract.approve(getAddressZRXExchange(), msg.value);\r\n        getAddressZRXExchange().call(calldataHexString);\r\n        ERC20Interface tokenContract = ERC20Interface(dest);\r\n        uint tokenBal = tokenContract.balanceOf(address(this));\r\n        assert(tokenContract.transfer(msg.sender, tokenBal));\r\n    }\r\n    \r\n    function collectTokens(address token) public {\r\n        if (token == ethAddr) {\r\n            msg.sender.transfer(address(this).balance);\r\n        } else {\r\n            ERC20Interface tokenContract = ERC20Interface(token);\r\n            uint tokenBal = tokenContract.balanceOf(address(this));\r\n            require(tokenContract.transfer(msg.sender, tokenBal), \"Transfer failed\");\r\n        }\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getAddressWETH\",\"outputs\":[{\"name\":\"eth\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"collectTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAddressZRXExchange\",\"outputs\":[{\"name\":\"zrxExchange\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"calldataHexString\",\"type\":\"bytes\"},{\"name\":\"dest\",\"type\":\"address\"}],\"name\":\"mintWeth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"mint","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://817a68e7aaf3021adb915fd98fc2e32d92ab0234dd5e02a8019424ce80beb249"}]}