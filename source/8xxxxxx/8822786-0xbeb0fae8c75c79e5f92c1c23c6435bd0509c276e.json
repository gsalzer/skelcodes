{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.21 <0.6.0;\r\n\r\nlibrary AddressArray{\r\n  function exists(address[] storage self, address addr) public view returns(bool){\r\n    for (uint i = 0; i< self.length;i++){\r\n      if (self[i]==addr){\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function index_of(address[] storage self, address addr) public view returns(uint){\r\n    for (uint i = 0; i< self.length;i++){\r\n      if (self[i]==addr){\r\n        return i;\r\n      }\r\n    }\r\n    require(false, \"AddressArray:index_of, not exist\");\r\n  }\r\n\r\n  function remove(address[] storage self, address addr) public returns(bool){\r\n    uint index = index_of(self, addr);\r\n    self[index] = self[self.length - 1];\r\n\r\n    delete self[self.length-1];\r\n    self.length--;\r\n  }\r\n\r\n  function replace(address[] storage self, address old_addr, address new_addr) public returns(bool){\r\n    uint index = index_of(self, old_addr);\r\n    self[index] = new_addr;\r\n  }\r\n}\r\n\r\ncontract MultiSigInterface{\r\n  function update_and_check_reach_majority(uint64 id, string memory name, bytes32 hash, address sender) public returns (bool);\r\n  function is_signer(address addr) public view returns(bool);\r\n}\r\n\r\ncontract MultiSigTools{\r\n  MultiSigInterface public multisig_contract;\r\n  constructor(address _contract) public{\r\n    require(_contract!= address(0x0));\r\n    multisig_contract = MultiSigInterface(_contract);\r\n  }\r\n\r\n  modifier only_signer{\r\n    require(multisig_contract.is_signer(msg.sender), \"only a signer can call in MultiSigTools\");\r\n    _;\r\n  }\r\n\r\n  modifier is_majority_sig(uint64 id, string memory name) {\r\n    bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));\r\n    if(multisig_contract.update_and_check_reach_majority(id, name, hash, msg.sender)){\r\n      _;\r\n    }\r\n  }\r\n\r\n  event TransferMultiSig(address _old, address _new);\r\n\r\n  function transfer_multisig(uint64 id, address _contract) public only_signer\r\n  is_majority_sig(id, \"transfer_multisig\"){\r\n    require(_contract != address(0x0));\r\n    address old = address(multisig_contract);\r\n    multisig_contract = MultiSigInterface(_contract);\r\n    emit TransferMultiSig(old, _contract);\r\n  }\r\n}\r\n\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\n\r\n\r\ncontract AddressList{\r\n  using AddressArray for address[];\r\n  mapping(address => bool) private address_status;\r\n  address[] public addresses;\r\n\r\n  constructor() public{}\r\n\r\n  function get_all_addresses() public view returns(address[] memory){\r\n    return addresses;\r\n  }\r\n\r\n  function get_address(uint i) public view returns(address){\r\n    require(i < addresses.length, \"AddressList:get_address, out of range\");\r\n    return addresses[i];\r\n  }\r\n\r\n  function get_address_num() public view returns(uint){\r\n    return addresses.length;\r\n  }\r\n\r\n  function is_address_exist(address addr) public view returns(bool){\r\n    return address_status[addr];\r\n  }\r\n\r\n  function _add_address(address addr) internal{\r\n    if(address_status[addr]) return;\r\n    address_status[addr] = true;\r\n    addresses.push(addr);\r\n  }\r\n\r\n  function _remove_address(address addr) internal{\r\n    if(!address_status[addr]) return;\r\n    address_status[addr] = false;\r\n    addresses.remove(addr);\r\n  }\r\n\r\n  function _reset() internal{\r\n    for(uint i = 0; i < addresses.length; i++){\r\n      address_status[addresses[i]] = false;\r\n    }\r\n    delete addresses;\r\n  }\r\n}\r\n\r\ncontract TrustList is AddressList, MultiSigTools{\r\n\r\n  event AddTrust(address addr);\r\n  event RemoveTrust(address addr);\r\n\r\n  constructor(address[] memory _list, address _multisig) public MultiSigTools(_multisig){\r\n    for(uint i = 0; i < _list.length; i++){\r\n      _add_address(_list[i]);\r\n    }\r\n  }\r\n\r\n  function is_trusted(address addr) public view returns(bool){\r\n    return is_address_exist(addr);\r\n  }\r\n\r\n  function get_trusted(uint i) public view returns(address){\r\n    return get_address(i);\r\n  }\r\n\r\n  function get_trusted_num() public view returns(uint){\r\n    return get_address_num();\r\n  }\r\n\r\n  function add_trusted(uint64 id, address addr) public\r\n    only_signer is_majority_sig(id, \"add_trusted\"){\r\n    _add_address(addr);\r\n    emit AddTrust(addr);\r\n  }\r\n  function add_multi_trusted(uint64 id, address[] memory _list) public\r\n    only_signer is_majority_sig(id, \"add_multi_trusted\"){\r\n    for(uint i = 0; i < _list.length; i++){\r\n      _add_address(_list[i]);\r\n      emit AddTrust(_list[i]);\r\n    }\r\n  }\r\n\r\n  function remove_trusted(uint64 id, address addr) public\r\n    only_signer is_majority_sig(id, \"remove_trusted\"){\r\n    _remove_address(addr);\r\n    emit RemoveTrust(addr);\r\n  }\r\n\r\n  function remove_multi_trusted(uint64 id, address[] memory _list) public\r\n  only_signer is_majority_sig(id, \"remove_multi_trusted\"){\r\n    for(uint i = 0; i < _list.length; i++){\r\n      _remove_address(_list[i]);\r\n      emit RemoveTrust(_list[i]);\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint64\"},{\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"transfer_multisig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"is_address_exist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_all_addresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"is_trusted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"get_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"get_trusted\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisig_contract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint64\"},{\"name\":\"_list\",\"type\":\"address[]\"}],\"name\":\"add_multi_trusted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_address_num\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_trusted_num\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint64\"},{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"remove_trusted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint64\"},{\"name\":\"_list\",\"type\":\"address[]\"}],\"name\":\"remove_multi_trusted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint64\"},{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"add_trusted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_list\",\"type\":\"address[]\"},{\"name\":\"_multisig\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AddTrust\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"RemoveTrust\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_old\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"TransferMultiSig\",\"type\":\"event\"}]","ContractName":"TrustList","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000400000000000000000000000009fdb24df185b4e6c42846c2f1355ca0a2bb7e0430000000000000000000000000000000000000000000000000000000000000000","Library":"AddressArray:0493163ff05664a1add5f87374ef78940ae33bc4","LicenseType":"MIT","SwarmSource":"bzzr://038e919df4e9057ae56a2188c30e16b2a30e4cd9f637a572f07f6c5809659740"}]}