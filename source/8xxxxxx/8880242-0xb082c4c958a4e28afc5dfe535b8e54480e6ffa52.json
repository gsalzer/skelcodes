{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/EtherMiners/interfaces/IEmPool.sol\r\n\r\npragma solidity >=0.4.22 <0.6.0;\r\n\r\ncontract IEmPool {\r\n   function deposit() public payable;\r\n   function withdraw(uint256 _value) external;\r\n   function withdrawTo(address _to, uint256 _value) public;\r\n}\r\n\r\n// File: contracts/EtherMiners/interfaces/IDebug.sol\r\n\r\npragma solidity >=0.4.22 <0.6.0;\r\n\r\ncontract IDebug {\r\n    // this function isn't abstract since the compiler emits automatically generated getter functions as external\r\n    function debugger() public pure returns (address){}\r\n    \r\n    function disableDebug() external;\r\n}\r\n\r\n// File: contracts/EtherMiners/interfaces/ICaller.sol\r\n\r\npragma solidity >=0.4.22 <0.6.0;\r\n/*\r\n    ICaller is the interface for contract which call other contract(like a data contract).\r\n\tThe Caller contract *must* implements the calledUpdate function to change its calling contract reference.\r\n*/\r\n\r\ncontract ICaller {\r\n\tfunction calledUpdate(address _oldCalled, address _newCalled) external;  // debugOnly\r\n\t\r\n\tevent CalledUpdate(address _oldCalled, address _newCalled);\r\n}\r\n\r\n// File: contracts/EtherMiners/interfaces/ICalled.sol\r\n\r\npragma solidity >=0.4.22 <0.6.0;\r\n\r\n\r\n\r\n/*\r\n    Called contract interface\r\n*/\r\ncontract ICalled {\r\n    // this function isn't abstract since the compiler emits automatically generated getter functions as external\r\n    function callers(address) public pure returns (bool){}\r\n\r\n    function appendCaller(address _caller) external;                        // debugOnly\r\n    function removeCaller(address _caller) external;                        // debugOnly\r\n    function modifyCallers(address[] _remove, address[] _append) external;  // debugOnly\r\n    \r\n    event AppendCaller(ICaller _caller);\r\n    event RemoveCaller(ICaller _caller);\r\n}\r\n\r\n// File: contracts/EtherMiners/base/Debug.sol\r\n\r\npragma solidity >=0.4.22 <0.6.0;\r\n\r\n\r\ncontract Debug is IDebug {\r\n    address public debugger;\r\n\r\n    constructor() public {\r\n        debugger = msg.sender;\r\n    }\r\n\r\n    modifier debugOnly {\r\n        assert(msg.sender == debugger);\r\n        _;\r\n    }\r\n\r\n    function disableDebug() external debugOnly {\r\n        debugger = address(0);\r\n    }\r\n}\r\n\r\ncontract Disable is Debug {\r\n\tbool public disabled;\r\n\t\r\n\tmodifier enabled {\r\n\t\trequire(!disabled);\r\n\t\t_;\r\n\t}\r\n\t\r\n\tfunction disable(bool _disable) external debugOnly {\r\n\t\tdisabled = _disable;\r\n\t}\r\n}\r\n\r\n// File: contracts/EtherMiners/base/Called.sol\r\n\r\npragma solidity >=0.4.22 <0.6.0;\r\n\r\n\r\n\r\n/*\r\n    Provides support and utilities for contract calling relationship\r\n*/\r\ncontract Called is ICalled, Debug {\r\n    mapping(address => bool) public callers;\r\n    \r\n    // allows calling by the callers only\r\n    modifier callerOnly {\r\n        assert(callers[msg.sender] || msg.sender == debugger);\r\n        _;\r\n    }\r\n\r\n    function appendCaller(address _caller) external debugOnly {\r\n        callers[_caller] = true;\r\n        emit AppendCaller(ICaller(_caller));\r\n    }\r\n    \r\n    function removeCaller(address _caller) external debugOnly {\r\n        delete callers[_caller];\r\n        emit RemoveCaller(ICaller(_caller));\r\n    }\r\n\r\n    function modifyCallers(address[] _remove, address[] _append) external debugOnly {\r\n        uint i;\r\n        for(i=0; i<_remove.length; i++){\r\n            delete callers[_remove[i]];\r\n            emit RemoveCaller(ICaller(_remove[i]));\r\n        }\r\n        \r\n        for(i=0; i<_append.length; i++){\r\n            callers[_append[i]] = true;\r\n            emit AppendCaller(ICaller(_append[i]));\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/EtherMiners/interfaces/IData.sol\r\n\r\npragma solidity >=0.4.22 <0.6.0;\r\n\r\ncontract IData\r\n{\r\n    // these function isn't abstract since the compiler emits automatically generated getter functions as external\r\n    function bu(bytes32) public pure returns(uint256){}\r\n    function ba(bytes32) public pure returns(address){}\r\n    //function bi(bytes32) public pure returns(int256){}\r\n    //function bs(bytes32) public pure returns(string){}\r\n    //function bb(bytes32) public pure returns(bytes){}\r\n    \r\n    function bau(bytes32, address) public pure returns(uint256){}\r\n    //function baa(bytes32, address) public pure returns(address){}\r\n    //function bai(bytes32, address) public pure returns(int256){}\r\n    //function bas(bytes32, address) public pure returns(string){}\r\n    //function bab(bytes32, address) public pure returns(bytes){}\r\n    \r\n    function bbu(bytes32, bytes32) public pure returns(uint256){}\r\n    //function bbs(bytes32, bytes32) public pure returns(string memory){}\r\n\r\n    function buu(bytes32, uint256) public pure returns(uint256){}\r\n    function bua(bytes32, uint256) public pure returns(address){}\r\n\t//function bus(bytes32, uint256) public pure returns(string memory){}\r\n    //function bas(bytes32, address) public pure returns(string memory){}\r\n    //function bui(bytes32, uint256) public pure returns(int256){}\r\n    //function bus(bytes32, uint256) public pure returns(string){}\r\n    //function bub(bytes32, uint256) public pure returns(bytes){}\r\n    \r\n    function bauu(bytes32, address, uint256) public pure returns(uint256){}\r\n\t//function baau(bytes32, address, address) public pure returns(uint256){}\r\n    function bbau(bytes32, bytes32, address) public pure returns(uint256){}\r\n    function buuu(bytes32, uint256, uint256) public pure returns(uint256){}\r\n    //function bbaau(bytes32, bytes32, address, address) public pure returns(uint256){}\r\n    \r\n    function setBU(bytes32 _key, uint256 _value) external;\r\n    function setBA(bytes32 _key, address _value) external;\r\n    //function setBI(bytes32 _key, int256 _value) external;\r\n    //function setBS(bytes32 _key, string _value) external;\r\n    //function setBB(bytes32 _key, bytes _value) external;\r\n    \r\n    function setBAU(bytes32 _key, address _addr, uint256 _value) external;\r\n    //function setBAA(bytes32 _key, address _addr, address _value) external;\r\n    //function setBAI(bytes32 _key, address _addr, int256 _value) external;\r\n    //function setBAS(bytes32 _key, address _addr, string _value) external;\r\n    //function setBAB(bytes32 _key, address _addr, bytes _value) external;\r\n    \r\n    function setBBU(bytes32 _key, bytes32 _id, uint256 _value) external;\r\n    //function setBBS(bytes32 _key, bytes32 _id, string calldata _value) external;\r\n\r\n    function setBUU(bytes32 _key, uint256 _index, uint256 _value) external;\r\n    function setBUA(bytes32 _key, uint256 _index, address _addr) external;\r\n\t//function setBUS(bytes32 _key, uint256 _index, string calldata _str) external;\r\n    //function setBUI(bytes32 _key, uint256 _index, int256 _value) external;\r\n    //function setBUB(bytes32 _key, uint256 _index, bytes _value) external;\r\n\r\n\t//function setBAAU(bytes32 _key, address _token, address _addr, uint256 _value) external;\r\n\tfunction setBAUU(bytes32 _key, address _addr, uint256 _index, uint256 _value) external;\r\n    function setBBAU(bytes32 _key, bytes32 _id, address _holder, uint256 _value) external;\r\n\tfunction setBUUU(bytes32 _key, uint256 _index,  uint256 _index2, uint256 _value) external;\r\n    //function setBBAAU(bytes32 _key, bytes32 _id, address _from, address _to, uint256 _value) external;\r\n}\r\n\r\n// File: contracts/EtherMiners/base/DataCaller.sol\r\n\r\npragma solidity >=0.4.22 <0.6.0;\r\n\r\n\r\n\r\n\r\n/*\r\n    DataCaller is the wrapper to visit the IEmData.\r\n*/\r\n\r\ncontract DataCaller is Debug, ICaller {\r\n    IData public data;\r\n    \r\n    constructor(IData _data) public {\r\n        data = IData(_data);\r\n    }\r\n    \r\n    function calledUpdate(address _oldCalled, address _newCalled) external debugOnly {\r\n        if(data == _oldCalled) {\r\n            data = IData(_newCalled);\r\n            emit CalledUpdate(_oldCalled, _newCalled);\r\n        }\r\n    }\r\n}\r\n\r\ncontract GetBU is DataCaller {\r\n    function getBU(bytes32 _key) internal view returns(uint256) {\r\n        return data.bu(_key);        \r\n    }\r\n}\r\ncontract SetBU is DataCaller {\r\n    function setBU(bytes32 _key, uint256 _value) internal {\r\n        data.setBU(_key, _value);    \r\n    }\r\n}\r\n\r\ncontract Enabled is Disable, GetBU {\r\n\tmodifier enabled2 {\r\n        require(!disabled && getBU(\"dappEnabled\") != 0);\r\n        _;\r\n    }\r\n}\r\ncontract DisableDapp is SetBU {\r\n\tfunction disableDapp(bool _disable) public debugOnly {\r\n\t\tsetBU(\"dappEnabled\", _disable ? 0 : 1);\r\n\t}\r\n}\r\n    \r\ncontract GetBA is DataCaller {\r\n    function getBA(bytes32 _key) internal view returns(address) {\r\n        return data.ba(_key);        \r\n    }\r\n}\r\ncontract SetBA is DataCaller {\r\n    function setBA(bytes32 _key, address _value) internal {\r\n        data.setBA(_key, _value);    \r\n    }\r\n}\r\n\r\ncontract GetBAU is DataCaller {\r\n    function getBAU(bytes32 _key, address _addr) internal view returns(uint256) {\r\n        return data.bau(_key, _addr);        \r\n    }\r\n}\r\ncontract SetBAU is DataCaller {\r\n    function setBAU(bytes32 _key, address _addr, uint256 _value) internal {\r\n        data.setBAU(_key, _addr, _value);    \r\n    }\r\n}\r\n\r\ncontract GetBBU is DataCaller {\r\n    function getBBU(bytes32 _key, bytes32 _id) internal view returns(uint256) {\r\n        return data.bbu(_key, _id);\r\n    }\r\n}\r\ncontract SetBBU is DataCaller {\r\n    function setBBU(bytes32 _key, bytes32 _id, uint256 _value) internal {\r\n        data.setBBU(_key, _id, _value);    \r\n    }\r\n}\r\n\r\n//contract GetBBS is DataCaller {\r\n//    function getBBS(bytes32 _key, bytes32 _id) internal view returns(string) {\r\n//        return data.bbs(_key, _id);\r\n//    }\r\n//}\r\n//contract SetBBS is DataCaller {\r\n//    function setBBS(bytes32 _key, bytes32 _id, string _value) internal {\r\n//        data.setBBS(_key, _id, _value);    \r\n//    }\r\n//}\r\n\r\ncontract GetBUU is DataCaller {\r\n    function getBUU(bytes32 _key, uint256 _index) internal view returns(uint256) {\r\n        return data.buu(_key, _index);        \r\n    }\r\n}\r\ncontract SetBUU is DataCaller {\r\n    function setBUU(bytes32 _key, uint256 _index, uint256 _value) internal {\r\n        data.setBUU(_key, _index, _value);    \r\n    }\r\n}\r\n\r\ncontract GetBUA is DataCaller {\r\n\tfunction getBUA(bytes32 _key, uint256 _index) internal view returns(address) {\r\n        return data.bua(_key, _index);        \r\n    }\r\n}\r\ncontract SetBUA is DataCaller {\r\n\tfunction setBUA(bytes32 _key, uint256 _index, address _addr) internal {\r\n        data.setBUA(_key, _index, _addr);        \r\n    }\r\n}\r\n//contract GetBUS is DataCaller {\r\n//\tfunction getBUS(bytes32 _key, uint256 _index) internal view returns(string) {\r\n//        return data.bus(_key, _index);        \r\n//    }\r\n//}\r\n//contract SetBUS is DataCaller {\r\n//\tfunction setBUS(bytes32 _key, uint256 _index, string _str) internal {\r\n//        data.setBUS(_key, _index, _str);        \r\n//    }\r\n//}\r\n\r\ncontract GetBAUU is DataCaller {\r\n\tfunction getBAUU(bytes32 _key, address _addr, uint256 _index) internal view returns(uint256) {\r\n        return data.bauu(_key, _addr, _index);        \r\n    }\r\n}\r\ncontract SetBAUU is DataCaller {\r\n\tfunction setBAUU(bytes32 _key, address _addr, uint256 _index, uint256 _value) internal {\r\n        data.setBAUU(_key, _addr, _index, _value);    \r\n    }\r\n}\r\n\r\n//contract GetBAAU is DataCaller {\r\n//\tfunction getBAAU(bytes32 _key, address _addr, address _addr2) internal view returns(uint256) {\r\n//        return data.baau(_key, _addr, _addr2);        \r\n//    }\r\n//}\r\n//contract SetBAAU is DataCaller {\r\n//\tfunction setBAAU(bytes32 _key, address _addr, address _addr2, uint256 _value) internal {\r\n//        data.setBAAU(_key, _addr, _addr2, _value);    \r\n//    }\r\n//}\r\n\r\ncontract GetBBAU is DataCaller {\r\n    function getBBAU(bytes32 _key, bytes32 _id, address _holder) internal view returns(uint256) {\r\n        return data.bbau(_key, _id, _holder);\r\n    }\r\n}\r\ncontract SetBBAU is DataCaller {\r\n    function setBBAU(bytes32 _key, bytes32 _id, address _holder, uint256 _value) internal {\r\n        data.setBBAU(_key, _id, _holder, _value);    \r\n    }\r\n}\r\n\r\ncontract GetBUUU is DataCaller {\r\n\tfunction getBUUU(bytes32 _key, uint256 _index, uint256 _index2) internal view returns(uint256) {\r\n        return data.buuu(_key, _index, _index2);        \r\n    }\r\n}\r\ncontract SetBUUU is DataCaller {\r\n\tfunction setBUUU(bytes32 _key, uint256 _index, uint256 _index2, uint256 _value) internal {\r\n        data.setBUUU(_key, _index, _index2, _value);    \r\n    }\r\n}\r\n\r\n//contract GetBBAAU is DataCaller {\r\n//    function getBBAAU(bytes32 _key, bytes32 _id, address _from, address _to) internal view returns(uint256) {\r\n//        return data.bbaau(_key, _id, _from, _to);        \r\n//    }\r\n//}\r\n//contract SetBBAAU is DataCaller {\r\n//    function setBBAAU(bytes32 _key, bytes32 _id, address _from, address _to, uint256 _value) internal {\r\n//        data.setBBAAU(_key, _id, _from, _to, _value);\r\n//    }\r\n//}\r\n\r\ncontract BalanceAlign is DataCaller, GetBU {\r\n    //uint256 public constant MAX_UINT = uint256(-1);       // defined in Utils.sol\r\n    function balanceAlign(uint256 _value, uint256 _balance) internal view returns(uint256) {\r\n        if(_value == uint256(-1) || _value * 1 ether < _balance * getBU(\"balanceAlignHi\") && _value * 1 ether > _balance * getBU(\"balanceAlignLo\"))\r\n            return _balance;\r\n        else\r\n            return _value;\r\n    }\r\n}\r\n\r\n// File: contracts/EtherMiners/EmPool.sol\r\n\r\npragma solidity >=0.4.22 <0.6.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract EmPool is IEmPool, Disable, Called, GetBA {\r\n   \r\n   event Deposit(address indexed _from, uint256 _value);\r\n   event Withdraw(address indexed _to, uint256 _value);\r\n   \r\n   constructor(IData _data) DataCaller(_data) public {\r\n   \r\n   }\r\n   \r\n   function deposit() public payable {\r\n       emit Deposit(msg.sender, msg.value);\r\n   }\r\n   \r\n   function withdraw(uint256 _value) external {\r\n       withdrawTo(msg.sender, _value);\r\n   }\r\n   function withdrawTo(address _to, uint256 _value) enabled callerOnly public {\r\n       _to.transfer(_value);\r\n       emit Withdraw(_to, _value);\r\n   }\r\n   \r\n   function () external payable {\r\n       deposit();\r\n   }\r\n}\r\n\r\n// File: contracts/EtherMiners/EmStaticPool.sol\r\n\r\npragma solidity >=0.4.22 <0.6.0;\r\n\r\n\r\ncontract EmStaticPool is EmPool{\r\n   \r\n   constructor(IData _data) EmPool(_data) public {\r\n   \r\n   }\r\n   function withdrawTo(address _to, uint256 _value) enabled public {\r\n        require(msg.sender == getBA(\"EmStatic\") || msg.sender == getBA(\"EmLuck\") || msg.sender == getBA(\"EmQueue\"));\r\n        _to.transfer(_value);\r\n        emit Withdraw(_to, _value);\r\n   }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"appendCaller\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldCalled\",\"type\":\"address\"},{\"name\":\"_newCalled\",\"type\":\"address\"}],\"name\":\"calledUpdate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"data\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"callers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disable\",\"type\":\"bool\"}],\"name\":\"disable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"debugger\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableDebug\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"disabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"removeCaller\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_remove\",\"type\":\"address[]\"},{\"name\":\"_append\",\"type\":\"address[]\"}],\"name\":\"modifyCallers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_data\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldCalled\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newCalled\",\"type\":\"address\"}],\"name\":\"CalledUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"AppendCaller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"RemoveCaller\",\"type\":\"event\"}]","ContractName":"EmStaticPool","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e28935a693e1bc63057b40dfb642524d0e2a509e","Library":"","LicenseType":"None","SwarmSource":"bzzr://3c702dc858b6d4001662e7ad2069300a9e9291e1cb14a640b864a09dfc33c5cb"}]}