{"status":"1","message":"OK","result":[{"SourceCode":"{\"BasicToken.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\nimport \\\"./ERC20Basic.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is ERC20Basic {\\n  using SafeMath for uint256;\\n\\n  mapping(address =\\u003e uint256) balances;\\n\\n  uint256 totalSupply_;\\n\\n  /**\\n  * @dev total number of tokens in existence\\n  */\\n  function totalSupply() public view returns (uint256) {\\n    return totalSupply_;\\n  }\\n\\n  /**\\n  * @dev transfer token for a specified address\\n  * @param _to The address to transfer to.\\n  * @param _value The amount to be transferred.\\n  */\\n  function transfer(address _to, uint256 _value) public returns (bool) {\\n    require(_to != address(0));\\n    require(_value \\u003c= balances[msg.sender]);\\n\\n    // SafeMath.sub will throw if there is not enough balance.\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    Transfer(msg.sender, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n  * @dev Gets the balance of the specified address.\\n  * @param _owner The address to query the the balance of.\\n  * @return An uint256 representing the amount owned by the passed address.\\n  */\\n  function balanceOf(address _owner) public view returns (uint256 balance) {\\n    return balances[_owner];\\n  }\\n\\n}\\n\"},\"CoinWord.sol\":{\"content\":\"pragma solidity ^0.4.24;\\r\\nimport \\u0027./StandardToken.sol\\u0027;\\r\\n\\r\\n// ERC20 standard token\\r\\ncontract CoinWord is StandardToken {\\r\\n    address public admin; \\r\\n    string public name = \\\"CoinWord Token\\\"; \\r\\n    string public symbol = \\\"CWT\\\"; \\r\\n    uint8 public decimals = 18; \\r\\n    uint256 public INITIAL_SUPPLY = 500000000000000000000000000; \\r\\n    \\r\\n    mapping (address =\\u003e bool) public frozenAccount; \\r\\n    mapping (address =\\u003e uint256) public frozenTimestamp; \\r\\n    \\r\\n    event Pause();\\r\\n    event Unpause();\\r\\n\\r\\n    bool public paused = false;\\r\\n\\r\\n    bool public exchangeFlag = false; \\r\\n\\r\\n    // The excess eth returned to the original account if the conditions were not met or the fund was raised.\\r\\n    uint256 public minWei = 1000;  //Minimum hit 1 wei  1eth = 1*10^18 wei\\r\\n    uint256 public maxWei = 20000000000000000000000; \\r\\n    uint256 public maxRaiseAmount = 2000000000000000000000000; \\r\\n    uint256 public raisedAmount = 0; \\r\\n    uint256 public raiseRatio = 200000; // Exchange ratio 1 eth = 200,000 token\\r\\n    // event\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    \\r\\n    constructor() public {\\r\\n        totalSupply_ = INITIAL_SUPPLY;\\r\\n        admin = msg.sender;\\r\\n        balances[msg.sender] = INITIAL_SUPPLY;\\r\\n    }\\r\\n\\r\\n    // Triggered by fallback calling a non-contractual function to the contractual address transferor\\r\\n    // Token automatic exchange eth\\r\\n    function()\\r\\n    public whenNotPaused payable {\\r\\n        require(msg.value \\u003e 0);\\r\\n        if (exchangeFlag) {\\r\\n            if (msg.value \\u003e= minWei \\u0026\\u0026 msg.value \\u003c= maxWei){\\r\\n                if (raisedAmount \\u003c maxRaiseAmount) {\\r\\n                    uint256 valueNeed = msg.value;\\r\\n                    raisedAmount = raisedAmount.add(msg.value);\\r\\n                    if (raisedAmount \\u003e maxRaiseAmount) {\\r\\n                        uint256 valueLeft = raisedAmount.sub(maxRaiseAmount);\\r\\n                        valueNeed = msg.value.sub(valueLeft);\\r\\n                        msg.sender.transfer(valueLeft);\\r\\n                        raisedAmount = maxRaiseAmount;\\r\\n                    }\\r\\n                    if (raisedAmount \\u003e= maxRaiseAmount) {\\r\\n                        exchangeFlag = false;\\r\\n                    }\\r\\n                    \\r\\n                    uint256 _value = valueNeed.mul(raiseRatio);\\r\\n\\r\\n                    require(_value \\u003c= balances[admin]);\\r\\n                    balances[admin] = balances[admin].sub(_value);\\r\\n                    balances[msg.sender] = balances[msg.sender].add(_value);\\r\\n\\r\\n                    emit Transfer(admin, msg.sender, _value);\\r\\n\\r\\n                }\\r\\n            } else {\\r\\n                msg.sender.transfer(msg.value);\\r\\n            }\\r\\n        } else {\\r\\n            msg.sender.transfer(msg.value);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == admin);\\r\\n    _;\\r\\n    }\\r\\n\\r\\n    \\r\\n    function changeAdmin(\\r\\n        address _newAdmin\\r\\n    )\\r\\n    public whenNotPaused\\r\\n    returns (bool)  {\\r\\n        require(msg.sender == admin);\\r\\n        require(_newAdmin != address(0));\\r\\n        balances[_newAdmin] = balances[_newAdmin].add(balances[admin]);\\r\\n        balances[admin] = 0;\\r\\n        admin = _newAdmin;\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function generateToken(\\r\\n        address _target,\\r\\n        uint256 _amount\\r\\n    )\\r\\n    public whenNotPaused\\r\\n    returns (bool)  {\\r\\n        require(msg.sender == admin);\\r\\n        require(_target != address(0));\\r\\n        balances[_target] = balances[_target].add(_amount);\\r\\n        totalSupply_ = totalSupply_.add(_amount);\\r\\n        INITIAL_SUPPLY = totalSupply_;\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n   \\r\\n    function distroyToken(\\r\\n        uint256 _values\\r\\n    )\\r\\n    public whenNotPaused\\r\\n    returns (bool)  {\\r\\n        require(msg.sender == admin);\\r\\n        require(_values \\u003c= balances[msg.sender]);\\r\\n        address _to = address(0);\\r\\n        balances[_to] = balances[_to].add(_values);\\r\\n        balances[msg.sender] = balances[msg.sender].sub(_values);\\r\\n        emit Transfer(msg.sender, _to, _values);\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n\\r\\n    \\r\\n    function withdraw (\\r\\n        uint256 _amount\\r\\n    )\\r\\n    public whenNotPaused\\r\\n    returns (bool) {\\r\\n        require(msg.sender == admin);\\r\\n        msg.sender.transfer(_amount);\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function freeze(\\r\\n        address _target,\\r\\n        bool _freeze\\r\\n    )\\r\\n    public whenNotPaused\\r\\n    returns (bool) {\\r\\n        require(msg.sender == admin);\\r\\n        require(_target != address(0));\\r\\n        frozenAccount[_target] = _freeze;\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function freezeWithTimestamp(\\r\\n        address _target,\\r\\n        uint256 _timestamp\\r\\n    )\\r\\n    public whenNotPaused\\r\\n    returns (bool) {\\r\\n        require(msg.sender == admin);\\r\\n        require(_target != address(0));\\r\\n        frozenTimestamp[_target] = _timestamp;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    \\r\\n    function multiFreeze(\\r\\n        address[] _targets,\\r\\n        bool[] _freezes\\r\\n    )\\r\\n    public whenNotPaused\\r\\n    returns (bool) {\\r\\n        require(msg.sender == admin);\\r\\n        require(_targets.length == _freezes.length);\\r\\n        uint256 len = _targets.length;\\r\\n        require(len \\u003e 0);\\r\\n        for (uint256 i = 0; i \\u003c len; i = i.add(1)) {\\r\\n            address _target = _targets[i];\\r\\n            require(_target != address(0));\\r\\n            bool _freeze = _freezes[i];\\r\\n            frozenAccount[_target] = _freeze;\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function multiFreezeWithTimestamp(\\r\\n        address[] _targets,\\r\\n        uint256[] _timestamps\\r\\n    )\\r\\n    public whenNotPaused\\r\\n    returns (bool) {\\r\\n        require(msg.sender == admin);\\r\\n        require(_targets.length == _timestamps.length);\\r\\n        uint256 len = _targets.length;\\r\\n        require(len \\u003e 0);\\r\\n        for (uint256 i = 0; i \\u003c len; i = i.add(1)) {\\r\\n            address _target = _targets[i];\\r\\n            require(_target != address(0));\\r\\n            uint256 _timestamp = _timestamps[i];\\r\\n            frozenTimestamp[_target] = _timestamp;\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n   \\r\\n    function multiTransfer(\\r\\n        address[] _tos,\\r\\n        uint256[] _values\\r\\n    )\\r\\n    public whenNotPaused\\r\\n    returns (bool) {\\r\\n        require(!frozenAccount[msg.sender]);\\r\\n        require(now \\u003e frozenTimestamp[msg.sender]);\\r\\n        require(_tos.length == _values.length);\\r\\n        uint256 len = _tos.length;\\r\\n        require(len \\u003e 0);\\r\\n        uint256 amount = 0;\\r\\n        for (uint256 i = 0; i \\u003c len; i = i.add(1)) {\\r\\n            amount = amount.add(_values[i]);\\r\\n        }\\r\\n        require(amount \\u003c= balances[msg.sender]);\\r\\n        for (uint256 j = 0; j \\u003c len; j = j.add(1)) {\\r\\n            address _to = _tos[j];\\r\\n            require(_to != address(0));\\r\\n            balances[_to] = balances[_to].add(_values[j]);\\r\\n            balances[msg.sender] = balances[msg.sender].sub(_values[j]);\\r\\n            emit Transfer(msg.sender, _to, _values[j]);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n   \\r\\n    function transfer(\\r\\n        address _to,\\r\\n        uint256 _value\\r\\n    )\\r\\n    public whenNotPaused\\r\\n    returns (bool) {\\r\\n        require(!frozenAccount[msg.sender]);\\r\\n        require(now \\u003e frozenTimestamp[msg.sender]);\\r\\n        require(_to != address(0));\\r\\n        require(_value \\u003c= balances[msg.sender]);\\r\\n\\r\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\r\\n        balances[_to] = balances[_to].add(_value);\\r\\n\\r\\n        emit Transfer(msg.sender, _to, _value);\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function transferFrom(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _value\\r\\n    )\\r\\n    public whenNotPaused\\r\\n    returns (bool)\\r\\n    {\\r\\n        require(!frozenAccount[_from]);\\r\\n        require(now \\u003e frozenTimestamp[msg.sender]);\\r\\n        require(_to != address(0));\\r\\n        require(_value \\u003c= balances[_from]);\\r\\n        require(_value \\u003c= allowed[_from][msg.sender]);\\r\\n\\r\\n        balances[_from] = balances[_from].sub(_value);\\r\\n        balances[_to] = balances[_to].add(_value);\\r\\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\r\\n\\r\\n        emit Transfer(_from, _to, _value);\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function approve(\\r\\n        address _spender,\\r\\n        uint256 _value\\r\\n    ) public whenNotPaused\\r\\n    returns (bool) {\\r\\n        \\r\\n        // require(_value \\u003c= balances[msg.sender]);\\r\\n\\r\\n        allowed[msg.sender][_spender] = _value;\\r\\n\\r\\n        emit Approval(msg.sender, _spender, _value);\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    \\r\\n    function getFrozenTimestamp(\\r\\n        address _target\\r\\n    )\\r\\n    public view\\r\\n    returns (uint256) {\\r\\n        require(_target != address(0));\\r\\n        return frozenTimestamp[_target];\\r\\n    }\\r\\n    \\r\\n    function getFrozenAccount(\\r\\n        address _target\\r\\n    )\\r\\n    public view\\r\\n    returns (bool) {\\r\\n        require(_target != address(0));\\r\\n        return frozenAccount[_target];\\r\\n    }\\r\\n    \\r\\n    function getBalance()\\r\\n    public view\\r\\n    returns (uint256) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n    \\r\\n    function setName (\\r\\n        string _value\\r\\n    )\\r\\n    public whenNotPaused\\r\\n    returns (bool) {\\r\\n        require(msg.sender == admin);\\r\\n        name = _value;\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function setSymbol (\\r\\n        string _value\\r\\n    )\\r\\n    public whenNotPaused\\r\\n    returns (bool) {\\r\\n        require(msg.sender == admin);\\r\\n        symbol = _value;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    \\r\\n    function setExchangeFlag (\\r\\n        bool _flag\\r\\n    )\\r\\n    public whenNotPaused\\r\\n    returns (bool) {\\r\\n        require(msg.sender == admin);\\r\\n        exchangeFlag = _flag;\\r\\n        return true;\\r\\n\\r\\n    }\\r\\n   \\r\\n    function setMinWei (\\r\\n        uint256 _value\\r\\n    )\\r\\n    public whenNotPaused\\r\\n    returns (bool) {\\r\\n        require(msg.sender == admin);\\r\\n        minWei = _value;\\r\\n        return true;\\r\\n\\r\\n    }\\r\\n    \\r\\n    function setMaxWei (\\r\\n        uint256 _value\\r\\n    )\\r\\n    public whenNotPaused\\r\\n    returns (bool) {\\r\\n        require(msg.sender == admin);\\r\\n        maxWei = _value;\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function setMaxRaiseAmount (\\r\\n        uint256 _value\\r\\n    )\\r\\n    public whenNotPaused\\r\\n    returns (bool) {\\r\\n        require(msg.sender == admin);\\r\\n        maxRaiseAmount = _value;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    \\r\\n    function setRaisedAmount (\\r\\n        uint256 _value\\r\\n    )\\r\\n    public whenNotPaused\\r\\n    returns (bool) {\\r\\n        require(msg.sender == admin);\\r\\n        raisedAmount = _value;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n   \\r\\n    function setRaiseRatio (\\r\\n        uint256 _value\\r\\n    )\\r\\n    public whenNotPaused\\r\\n    returns (bool) {\\r\\n        require(msg.sender == admin);\\r\\n        raiseRatio = _value;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n  /**\\r\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\r\\n   */\\r\\n  modifier whenNotPaused() {\\r\\n    require(!paused);\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Modifier to make a function callable only when the contract is paused.\\r\\n   */\\r\\n  modifier whenPaused() {\\r\\n    require(paused);\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev called by the owner to pause, triggers stopped state\\r\\n   */\\r\\n  function pause() onlyOwner whenNotPaused public {\\r\\n    paused = true;\\r\\n    emit Pause();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev called by the owner to unpause, returns to normal state\\r\\n   */\\r\\n  function unpause() onlyOwner whenPaused public {\\r\\n    paused = false;\\r\\n    emit Unpause();\\r\\n  }\\r\\n}\\r\\n\\r\\n\\r\\n\"},\"ERC20.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"./ERC20Basic.sol\\\";\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n  function allowance(address owner, address spender) public view returns (uint256);\\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\\n  function approve(address spender, uint256 value) public returns (bool);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"ERC20Basic.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/179\\n */\\ncontract ERC20Basic {\\n  function totalSupply() public view returns (uint256);\\n  function balanceOf(address who) public view returns (uint256);\\n  function transfer(address to, uint256 value) public returns (bool);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.4.18;\\r\\n\\r\\n\\r\\n/**\\r\\n * @title SafeMath\\r\\n * @dev Math operations with safety checks that throw on error\\r\\n */\\r\\nlibrary SafeMath {\\r\\n\\r\\n  /**\\r\\n  * @dev Multiplies two numbers, throws on overflow.\\r\\n  */\\r\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    if (a == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n    uint256 c = a * b;\\r\\n    assert(c / a == b);\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev Integer division of two numbers, truncating the quotient.\\r\\n  */\\r\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    // assert(b \\u003e 0); // Solidity automatically throws when dividing by 0\\r\\n    uint256 c = a / b;\\r\\n    // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\r\\n  */\\r\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    assert(b \\u003c= a);\\r\\n    return a - b;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev Adds two numbers, throws on overflow.\\r\\n  */\\r\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    uint256 c = a + b;\\r\\n    assert(c \\u003e= a);\\r\\n    return c;\\r\\n  }\\r\\n}\\r\\n\"},\"StandardToken.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"./BasicToken.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is ERC20, BasicToken {\\n\\n  mapping (address =\\u003e mapping (address =\\u003e uint256)) internal allowed;\\n\\n\\n  /**\\n   * @dev Transfer tokens from one address to another\\n   * @param _from address The address which you want to send tokens from\\n   * @param _to address The address which you want to transfer to\\n   * @param _value uint256 the amount of tokens to be transferred\\n   */\\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\\n    require(_to != address(0));\\n    require(_value \\u003c= balances[_from]);\\n    require(_value \\u003c= allowed[_from][msg.sender]);\\n\\n    balances[_from] = balances[_from].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n    Transfer(_from, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n   *\\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n   * race condition is to first reduce the spender\\u0027s allowance to 0 and set the desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   * @param _spender The address which will spend the funds.\\n   * @param _value The amount of tokens to be spent.\\n   */\\n  function approve(address _spender, uint256 _value) public returns (bool) {\\n    allowed[msg.sender][_spender] = _value;\\n    Approval(msg.sender, _spender, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n   * @param _owner address The address which owns the funds.\\n   * @param _spender address The address which will spend the funds.\\n   * @return A uint256 specifying the amount of tokens still available for the spender.\\n   */\\n  function allowance(address _owner, address _spender) public view returns (uint256) {\\n    return allowed[_owner][_spender];\\n  }\\n\\n  /**\\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\\n   *\\n   * approve should be called when allowed[_spender] == 0. To increment\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n   * the first transaction is mined)\\n   * From MonolithDAO Token.sol\\n   * @param _spender The address which will spend the funds.\\n   * @param _addedValue The amount of tokens to increase the allowance by.\\n   */\\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n   *\\n   * approve should be called when allowed[_spender] == 0. To decrement\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n   * the first transaction is mined)\\n   * From MonolithDAO Token.sol\\n   * @param _spender The address which will spend the funds.\\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\\n   */\\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\\n    uint oldValue = allowed[msg.sender][_spender];\\n    if (_subtractedValue \\u003e oldValue) {\\n      allowed[msg.sender][_spender] = 0;\\n    } else {\\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n    }\\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n    return true;\\n  }\\n\\n}\\n\"}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"maxWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setRaisedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMinWei\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"generateToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tos\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_values\",\"type\":\"uint256\"}],\"name\":\"distroyToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxRaiseAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setExchangeFlag\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeFlag\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raiseRatio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_freeze\",\"type\":\"bool\"}],\"name\":\"freeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"getFrozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raisedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targets\",\"type\":\"address[]\"},{\"name\":\"_freezes\",\"type\":\"bool[]\"}],\"name\":\"multiFreeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMaxRaiseAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"freezeWithTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targets\",\"type\":\"address[]\"},{\"name\":\"_timestamps\",\"type\":\"uint256[]\"}],\"name\":\"multiFreezeWithTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setRaiseRatio\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"getFrozenTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMaxWei\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"CoinWord","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://51ffcd66c26edff2473aaefb5f59cdd00bccf0376d32f8f39b1bd596d513f214"}]}