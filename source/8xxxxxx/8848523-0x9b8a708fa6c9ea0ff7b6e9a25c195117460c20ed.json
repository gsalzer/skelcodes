{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\nlibrary SafeMath256 {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function pow(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        if (b == 0) return 1;\r\n\r\n        uint256 c = a ** b;\r\n        assert(c / (a ** (b - 1)) == a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function _validateAddress(address _addr) internal pure {\r\n        require(_addr != address(0), \"invalid address\");\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"not a contract owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _validateAddress(newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract Controllable is Ownable {\r\n    mapping(address => bool) controllers;\r\n\r\n    modifier onlyController {\r\n        require(_isController(msg.sender), \"no controller rights\");\r\n        _;\r\n    }\r\n\r\n    function _isController(address _controller) internal view returns (bool) {\r\n        return controllers[_controller];\r\n    }\r\n\r\n    function _setControllers(address[] _controllers) internal {\r\n        for (uint256 i = 0; i < _controllers.length; i++) {\r\n            _validateAddress(_controllers[i]);\r\n            controllers[_controllers[i]] = true;\r\n        }\r\n    }\r\n}\r\n\r\ncontract Upgradable is Controllable {\r\n    address[] internalDependencies;\r\n    address[] externalDependencies;\r\n\r\n    function getInternalDependencies() public view returns(address[]) {\r\n        return internalDependencies;\r\n    }\r\n\r\n    function getExternalDependencies() public view returns(address[]) {\r\n        return externalDependencies;\r\n    }\r\n\r\n    function setInternalDependencies(address[] _newDependencies) public onlyOwner {\r\n        for (uint256 i = 0; i < _newDependencies.length; i++) {\r\n            _validateAddress(_newDependencies[i]);\r\n        }\r\n        internalDependencies = _newDependencies;\r\n    }\r\n\r\n    function setExternalDependencies(address[] _newDependencies) public onlyOwner {\r\n        externalDependencies = _newDependencies;\r\n        _setControllers(_newDependencies);\r\n    }\r\n}\r\n\r\ncontract Core {\r\n    function isEggOwner(address, uint256) external view returns (bool);\r\n    function createEgg(address, uint8) external returns (uint256);\r\n    function sendToNest(uint256) external returns (bool, uint256, uint256, address);\r\n    function openEgg(address, uint256, uint256) internal returns (uint256);\r\n    function breed(address, uint256, uint256) external returns (uint256);\r\n    function setDragonRemainingHealthAndMana(uint256, uint32, uint32) external;\r\n    function increaseDragonExperience(uint256, uint256) external;\r\n    function upgradeDragonGenes(uint256, uint16[10]) external;\r\n    function increaseDragonWins(uint256) external;\r\n    function increaseDragonDefeats(uint256) external;\r\n    function setDragonTactics(uint256, uint8, uint8) external;\r\n    function setDragonName(uint256, string) external returns (bytes32);\r\n    function setDragonSpecialPeacefulSkill(uint256, uint8) external;\r\n    function useDragonSpecialPeacefulSkill(address, uint256, uint256) external;\r\n    function updateLeaderboardRewardTime() external;\r\n    function getDragonsFromLeaderboard() external view returns (uint256[10]);\r\n    function getLeaderboardRewards(uint256) external view returns (uint256[10]);\r\n}\r\n\r\ncontract Treasury {\r\n    uint256 public hatchingPrice;\r\n    function giveGold(address, uint256) external;\r\n    function takeGold(uint256) external;\r\n    function burnGold(uint256) external;\r\n    function remainingGold() external view returns (uint256);\r\n}\r\n\r\ncontract Getter {\r\n    function getDragonsAmount() external view returns (uint256);\r\n    function isDragonBreedingAllowed(uint256) external view returns (bool);\r\n    function getDragonNamePriceByLength(uint256) external view returns (uint256);\r\n    function isEggOnSale(uint256) external view returns (bool);\r\n    function isDragonOnSale(uint256) public view returns (bool);\r\n    function isBreedingOnSale(uint256) public view returns (bool);\r\n    function isDragonOwner(address, uint256) external view returns (bool);\r\n    function ownerOfDragon(uint256) public view returns (address);\r\n    function isDragonInGladiatorBattle(uint256) public view returns (bool);\r\n}\r\n\r\ncontract Distribution {\r\n    function claim(uint8) external returns (uint256, uint256, uint256);\r\n}\r\n\r\n\r\n\r\n\r\n//////////////CONTRACT//////////////\r\n\r\n\r\n\r\n\r\ncontract CoreController is Upgradable {\r\n    using SafeMath256 for uint256;\r\n\r\n    Core core;\r\n    Treasury treasury;\r\n    Getter getter;\r\n    Distribution distribution;\r\n\r\n    function _isDragonOwner(address _user, uint256 _id) internal view returns (bool) {\r\n        return getter.isDragonOwner(_user, _id);\r\n    }\r\n\r\n    function _checkTheDragonIsNotInGladiatorBattle(uint256 _id) internal view {\r\n        require(!getter.isDragonInGladiatorBattle(_id), \"dragon participates in gladiator battle\");\r\n    }\r\n\r\n    function _checkTheDragonIsNotOnSale(uint256 _id) internal view {\r\n        require(!getter.isDragonOnSale(_id), \"dragon is on sale\");\r\n    }\r\n\r\n    function _checkTheDragonIsNotOnBreeding(uint256 _id) internal view {\r\n        require(!getter.isBreedingOnSale(_id), \"dragon is on breeding sale\");\r\n    }\r\n\r\n    function _checkThatEnoughDNAPoints(uint256 _id) internal view {\r\n        require(getter.isDragonBreedingAllowed(_id), \"dragon has no enough DNA points for breeding\");\r\n    }\r\n\r\n    function _checkDragonOwner(address _user, uint256 _id) internal view {\r\n        require(_isDragonOwner(_user, _id), \"not an owner\");\r\n    }\r\n\r\n    function claimEgg(\r\n        address _sender,\r\n        uint8 _dragonType\r\n    ) external onlyController returns (\r\n        uint256 eggId,\r\n        uint256 restAmount,\r\n        uint256 lastBlock,\r\n        uint256 interval\r\n    ) {\r\n        (restAmount, lastBlock, interval) = distribution.claim(_dragonType);\r\n        eggId = core.createEgg(_sender, _dragonType);\r\n\r\n        uint256 _goldReward = treasury.hatchingPrice();\r\n        uint256 _goldAmount = treasury.remainingGold();\r\n        if (_goldReward > _goldAmount) _goldReward = _goldAmount;\r\n        treasury.giveGold(_sender, _goldReward);\r\n    }\r\n\r\n    // ACTIONS WITH OWN TOKEN\r\n\r\n    function sendToNest(\r\n        address _sender,\r\n        uint256 _eggId\r\n    ) external onlyController returns (bool, uint256, uint256, address) {\r\n        require(!getter.isEggOnSale(_eggId), \"egg is on sale\");\r\n        require(core.isEggOwner(_sender, _eggId), \"not an egg owner\");\r\n\r\n        uint256 _hatchingPrice = treasury.hatchingPrice();\r\n        treasury.takeGold(_hatchingPrice);\r\n        if (getter.getDragonsAmount() > 2997) { // 2997 + 2 (in the nest) + 1 (just sent) = 3000 dragons without gold burning\r\n            treasury.burnGold(_hatchingPrice.div(2));\r\n        }\r\n\r\n        return core.sendToNest(_eggId);\r\n    }\r\n\r\n    function breed(\r\n        address _sender,\r\n        uint256 _momId,\r\n        uint256 _dadId\r\n    ) external onlyController returns (uint256 eggId) {\r\n        _checkThatEnoughDNAPoints(_momId);\r\n        _checkThatEnoughDNAPoints(_dadId);\r\n        _checkTheDragonIsNotOnBreeding(_momId);\r\n        _checkTheDragonIsNotOnBreeding(_dadId);\r\n        _checkTheDragonIsNotOnSale(_momId);\r\n        _checkTheDragonIsNotOnSale(_dadId);\r\n        _checkTheDragonIsNotInGladiatorBattle(_momId);\r\n        _checkTheDragonIsNotInGladiatorBattle(_dadId);\r\n        _checkDragonOwner(_sender, _momId);\r\n        _checkDragonOwner(_sender, _dadId);\r\n        require(_momId != _dadId, \"the same dragon\");\r\n\r\n        return core.breed(_sender, _momId, _dadId);\r\n    }\r\n\r\n    function upgradeDragonGenes(\r\n        address _sender,\r\n        uint256 _id,\r\n        uint16[10] _dnaPoints\r\n    ) external onlyController {\r\n        _checkTheDragonIsNotOnBreeding(_id);\r\n        _checkTheDragonIsNotOnSale(_id);\r\n        _checkTheDragonIsNotInGladiatorBattle(_id);\r\n        _checkDragonOwner(_sender, _id);\r\n        core.upgradeDragonGenes(_id, _dnaPoints);\r\n    }\r\n\r\n    function setDragonTactics(\r\n        address _sender,\r\n        uint256 _id,\r\n        uint8 _melee,\r\n        uint8 _attack\r\n    ) external onlyController {\r\n        _checkDragonOwner(_sender, _id);\r\n        core.setDragonTactics(_id, _melee, _attack);\r\n    }\r\n\r\n    function setDragonName(\r\n        address _sender,\r\n        uint256 _id,\r\n        string _name\r\n    ) external onlyController returns (bytes32) {\r\n        _checkDragonOwner(_sender, _id);\r\n\r\n        uint256 _length = bytes(_name).length;\r\n        uint256 _price = getter.getDragonNamePriceByLength(_length);\r\n\r\n        if (_price > 0) {\r\n            treasury.takeGold(_price);\r\n        }\r\n\r\n        return core.setDragonName(_id, _name);\r\n    }\r\n\r\n    function setDragonSpecialPeacefulSkill(address _sender, uint256 _id, uint8 _class) external onlyController {\r\n        _checkDragonOwner(_sender, _id);\r\n        core.setDragonSpecialPeacefulSkill(_id, _class);\r\n    }\r\n\r\n    function useDragonSpecialPeacefulSkill(address _sender, uint256 _id, uint256 _target) external onlyController {\r\n        _checkDragonOwner(_sender, _id);\r\n        _checkTheDragonIsNotInGladiatorBattle(_id);\r\n        _checkTheDragonIsNotInGladiatorBattle(_target);\r\n        core.useDragonSpecialPeacefulSkill(_sender, _id, _target);\r\n    }\r\n\r\n    function distributeLeaderboardRewards() external onlyController returns (\r\n        uint256[10] dragons,\r\n        address[10] users\r\n    ) {\r\n        core.updateLeaderboardRewardTime();\r\n        uint256 _remainingGold = treasury.remainingGold();\r\n        uint256[10] memory _rewards = core.getLeaderboardRewards(_remainingGold);\r\n\r\n        dragons = core.getDragonsFromLeaderboard();\r\n        uint8 i;\r\n        for (i = 0; i < dragons.length; i++) {\r\n            if (dragons[i] == 0) continue;\r\n            users[i] = getter.ownerOfDragon(dragons[i]);\r\n        }\r\n\r\n        uint256 _reward;\r\n        for (i = 0; i < users.length; i++) {\r\n            if (_remainingGold == 0) break;\r\n            if (users[i] == address(0)) continue;\r\n\r\n            _reward = _rewards[i];\r\n            if (_reward > _remainingGold) {\r\n                _reward = _remainingGold;\r\n            }\r\n            treasury.giveGold(users[i], _reward);\r\n            _remainingGold = _remainingGold.sub(_reward);\r\n        }\r\n    }\r\n\r\n    // UPDATE CONTRACT\r\n\r\n    function setInternalDependencies(address[] _newDependencies) public onlyOwner {\r\n        super.setInternalDependencies(_newDependencies);\r\n\r\n        core = Core(_newDependencies[0]);\r\n        treasury = Treasury(_newDependencies[1]);\r\n        getter = Getter(_newDependencies[2]);\r\n        distribution = Distribution(_newDependencies[3]);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_momId\",\"type\":\"uint256\"},{\"name\":\"_dadId\",\"type\":\"uint256\"}],\"name\":\"breed\",\"outputs\":[{\"name\":\"eggId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setDragonName\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_melee\",\"type\":\"uint8\"},{\"name\":\"_attack\",\"type\":\"uint8\"}],\"name\":\"setDragonTactics\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_dragonType\",\"type\":\"uint8\"}],\"name\":\"claimEgg\",\"outputs\":[{\"name\":\"eggId\",\"type\":\"uint256\"},{\"name\":\"restAmount\",\"type\":\"uint256\"},{\"name\":\"lastBlock\",\"type\":\"uint256\"},{\"name\":\"interval\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_eggId\",\"type\":\"uint256\"}],\"name\":\"sendToNest\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"distributeLeaderboardRewards\",\"outputs\":[{\"name\":\"dragons\",\"type\":\"uint256[10]\"},{\"name\":\"users\",\"type\":\"address[10]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_class\",\"type\":\"uint8\"}],\"name\":\"setDragonSpecialPeacefulSkill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDependencies\",\"type\":\"address[]\"}],\"name\":\"setExternalDependencies\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDependencies\",\"type\":\"address[]\"}],\"name\":\"setInternalDependencies\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_target\",\"type\":\"uint256\"}],\"name\":\"useDragonSpecialPeacefulSkill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInternalDependencies\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_dnaPoints\",\"type\":\"uint16[10]\"}],\"name\":\"upgradeDragonGenes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getExternalDependencies\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CoreController","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://812dc4b952277cd553983c7e4d0f26faf35dd35110f88cb1460bf54d66b7b541"}]}