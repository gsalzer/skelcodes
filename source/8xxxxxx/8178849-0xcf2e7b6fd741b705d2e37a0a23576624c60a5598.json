{"status":"1","message":"OK","result":[{"SourceCode":"{\"NestreeDropTest.sol\":{\"content\":\"pragma solidity ^0.5.10;\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\ncontract ERC20\\n{\\n    function balanceOf(address _who) view public returns (uint256) {}\\n    function transfer(address _to, uint256 _value) public returns (bool) {}\\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {}\\n    function allowance(address _owner, address _spender) view external returns (uint256) {}\\n}\\n\\n// 이 컨트랙트 주소에 approve를 먼저 해두고\\ncontract NestreeDropTest\\n{\\n    using SafeMath for uint256;\\n\\n    address public _self;\\n    address public _owner;\\n\\n    mapping (address =\\u003e ERC20) public tokens;\\n\\n    event Drop(address _tokenAddress, address[] _toList, uint256[] _amountList);\\n\\n    constructor() public\\n    {\\n        _self = address(this);\\n        _owner = msg.sender;\\n    }\\n\\n    function balanceOf(address _tokenAddress) public view returns (uint256)\\n    {\\n        ERC20 token = ERC20(_tokenAddress);\\n        return token.allowance(msg.sender, _self);\\n    }\\n\\n    function drop(address _tokenAddress, address[] calldata _toList, uint256[] calldata _amountList) external returns (bool)\\n    {\\n        require(_tokenAddress != address(0), \\u0027Token address is not valid\\u0027);\\n        require(msg.sender == _owner, \\u0027Not Owner\\u0027);\\n        require(_toList.length == _amountList.length, \\u0027Not valid list length\\u0027);\\n\\n        ERC20 token = ERC20(_tokenAddress);\\n\\n        uint256 sumOfBalances = 0;\\n        for(uint256 i=0; i\\u003c_amountList.length; i++)\\n        {\\n            sumOfBalances = sumOfBalances.add(_amountList[i]);\\n        }\\n\\n        // 합계가 발란스보다 많은지 체크\\n        uint256 balance = balanceOf(_tokenAddress);\\n\\n        require(balance \\u003e= sumOfBalances);\\n\\n        for(uint256 i=0; i\\u003c_toList.length; i++)\\n        {\\n            token.transferFrom(msg.sender, _toList[i], _amountList[i]);\\n        }\\n\\n        emit Drop(_tokenAddress, _toList, _amountList);\\n\\n        return true;\\n    }\\n}\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.10;\\n\\n/**\\n * @title SafeMath\\n * @dev Unsigned math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n    /**\\n    * @dev Multiplies two unsigned integers, reverts on overflow.\\n    */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\n    */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b \\u003e 0);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003c= a);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Adds two unsigned integers, reverts on overflow.\\n    */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\n    * reverts when dividing by zero.\\n    */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0);\\n        return a % b;\\n    }\\n}\"}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"_self\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_toList\",\"type\":\"address[]\"},{\"name\":\"_amountList\",\"type\":\"uint256[]\"}],\"name\":\"drop\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_toList\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"_amountList\",\"type\":\"uint256[]\"}],\"name\":\"Drop\",\"type\":\"event\"}]","ContractName":"NestreeDropTest","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://288a77f44301ee7c2ad1301b950e2494cb326b100e4376dac927e74bae5a39f0"}]}