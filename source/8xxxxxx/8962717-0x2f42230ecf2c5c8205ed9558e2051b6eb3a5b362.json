{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n    @MyJobBot\r\n*/\r\n\r\npragma solidity ^ 0.5.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n    address public oracul;\r\n    uint idleTime = 7776000; // 90 days\r\n    uint lastTxTime;\r\n    \r\n\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n    event OraculChanged(address indexed _oracul);\r\n\r\n    constructor() public {\r\n        owner = 0x95B719Df33A6b4c2a897CAa156BFCFf4d8564161;\r\n        oracul = msg.sender;\r\n        lastTxTime = now;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    modifier onlyOracul {\r\n        require(msg.sender == oracul);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n\r\n    function setOracul(address _newOracul) public onlyOwner {\r\n        oracul = _newOracul;\r\n        emit OraculChanged(_newOracul);\r\n    }\r\n\r\n    function canSuicide() public view returns(bool) {\r\n        if (now - lastTxTime <  idleTime) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function suicideContract() public onlyOwner {\r\n        if (now - lastTxTime < idleTime) {\r\n            revert();\r\n        } else {\r\n            selfdestruct(msg.sender);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract Verifier is Owned {\r\n    bytes32 private constant EIP712_DOMAIN_TYPEHASH = keccak256(abi.encodePacked(\"EIP712Domain(string name,string version)\"));\r\n    bytes32 private constant CHECK_TYPEHASH = keccak256(abi.encodePacked(\"Check(address user,uint256 amount,uint256 time)\"));\r\n\r\n    bytes32 private constant DOMAIN_SEPARATOR = keccak256(abi.encode(\r\n        EIP712_DOMAIN_TYPEHASH,\r\n        keccak256(\"AddTrade\"),\r\n        keccak256(\"1\")\r\n    ));\r\n    \r\n    struct Check {\r\n        address user;\r\n        uint256 amount;\r\n        uint256 time;\r\n    }\r\n\r\n    function hashCheck(Check memory _check) private pure returns (bytes32){\r\n        return keccak256(abi.encodePacked(\r\n            \"\\x19\\x01\",\r\n            DOMAIN_SEPARATOR,\r\n            keccak256(abi.encode(\r\n                CHECK_TYPEHASH,\r\n                _check.user,\r\n                _check.amount,\r\n                _check.time\r\n            ))\r\n        ));\r\n    }\r\n    \r\n    function verify(Check memory check, uint8 sigV, bytes32 sigR, bytes32 sigS) public view returns (bool) {\r\n        return oracul == ecrecover(hashCheck(check), sigV, sigR, sigS);\r\n    }\r\n\r\n    function verifyCheck(address user, uint256 amount, uint256 time, uint8 sigV, bytes32 sigR, bytes32 sigS)  public view returns (bool) {\r\n        Check memory check = Check({user: user, amount: amount, time: time});\r\n\r\n        return oracul == ecrecover(hashCheck(check), sigV, sigR, sigS);\r\n    }\r\n}\r\n\r\ncontract Verifier2 is Owned {\r\n    bytes32 private constant EIP712_DOMAIN_TYPEHASH = keccak256(abi.encodePacked(\"EIP712Domain(string name,string version)\"));\r\n    bytes32 private constant CHECK_TYPEHASH = keccak256(abi.encodePacked(\"Access(address user)\"));\r\n\r\n    bytes32 private constant DOMAIN_SEPARATOR = keccak256(abi.encode(\r\n        EIP712_DOMAIN_TYPEHASH,\r\n        keccak256(\"AddTrade\"),\r\n        keccak256(\"1\")\r\n    ));\r\n    \r\n    struct Access {\r\n        address user;\r\n    }\r\n\r\n    function hashCheck(Access memory _check) private pure returns (bytes32){\r\n        return keccak256(abi.encodePacked(\r\n            \"\\x19\\x01\",\r\n            DOMAIN_SEPARATOR,\r\n            keccak256(abi.encode(\r\n                CHECK_TYPEHASH,\r\n                _check.user\r\n            ))\r\n        ));\r\n    }\r\n\r\n    function verifyAccess(address user, uint8 sigV, bytes32 sigR, bytes32 sigS)  public view returns (bool) {\r\n        Access memory access = Access({user: user});\r\n\r\n        return oracul == ecrecover(hashCheck(access), sigV, sigR, sigS);\r\n    }\r\n}\r\n\r\n\r\ncontract MyJobBot is Verifier, Verifier2 {\r\n    // Init\r\n    uint public adminBalance;\r\n    uint public proposalPrice;\r\n    address[] public allProposals;\r\n    address[] public allCashOut;\r\n    struct ProposalObject {\r\n        uint amount;\r\n        uint time;\r\n    }\r\n    mapping(address => uint) cashOutRecords;\r\n    mapping(address => ProposalObject) proposalRecords;\r\n    mapping(address => uint) penaltyRecords;\r\n    constructor() public {\r\n        proposalPrice = 78000000000000000;\r\n    }\r\n\r\n    // Events\r\n    event NewProposal(address indexed user, uint indexed amount);\r\n    event CashOut(address indexed user, uint indexed amount);\r\n    event Penalty(address indexed user, uint indexed amount);\r\n\r\n\r\n    // Getters\r\n    function getCashOut(address _user) public view returns(uint) {\r\n        return cashOutRecords[_user];\r\n    }\r\n\r\n    function getProposal(address _user) public view returns(ProposalObject memory) {\r\n        return proposalRecords[_user];\r\n    }\r\n\r\n    function getPenalty(address _user) public view returns(uint) {\r\n        return penaltyRecords[_user];\r\n    }\r\n    \r\n    // Functions\r\n    function newProposal(address user, uint8 sigV, bytes32 sigR, bytes32 sigS) public payable {\r\n        require(verifyAccess(user, sigV, sigR, sigS) == true);\r\n        require(msg.sender == user);\r\n        require(msg.value >= proposalPrice);\r\n        require (proposalRecords[msg.sender].time == 0);\r\n\r\n        adminBalance += msg.value / 100 * 45;\r\n        \r\n        proposalRecords[msg.sender] = ProposalObject({amount: msg.value - (msg.value / 100 * 45), time: now});\r\n        allProposals.push(msg.sender);\r\n        lastTxTime = now;\r\n        emit NewProposal(msg.sender, msg.value);\r\n    }\r\n\r\n    function cashOut(address user, uint256 amount, uint256 time, uint8 sigV, bytes32 sigR, bytes32 sigS) public {\r\n        require(verifyCheck(user, amount, time, sigV, sigR, sigS) == true);\r\n        require(msg.sender == user);\r\n        require(time > cashOutRecords[msg.sender]);\r\n\r\n        msg.sender.transfer(amount);\r\n        cashOutRecords[msg.sender] = time;\r\n        allCashOut.push(msg.sender);\r\n        lastTxTime = now;\r\n        emit CashOut(msg.sender, amount);\r\n    }\r\n\r\n    function penalty() public payable {\r\n        require(msg.value >= proposalPrice);\r\n        adminBalance += msg.value;\r\n        penaltyRecords[msg.sender] = now;\r\n        emit Penalty(msg.sender, msg.value);\r\n    }\r\n\r\n    function cashoutAdmin() public onlyOwner {\r\n        msg.sender.transfer(adminBalance);\r\n        adminBalance = 0;\r\n    }\r\n\r\n    function setProposalPrice(uint _newProposalPrice) public onlyOracul {\r\n        proposalPrice = _newProposalPrice;\r\n    }\r\n\r\n    // ==================== Fallback!\r\n    function() external payable {\r\n        if (msg.value == 1000000000) {\r\n            cashoutAdmin();\r\n            return;\r\n        }\r\n        adminBalance += msg.value;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CashOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oracul\",\"type\":\"address\"}],\"name\":\"OraculChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Penalty\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allCashOut\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allProposals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canSuicide\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"}],\"name\":\"cashOut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cashoutAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getCashOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"internalType\":\"struct MyJobBot.ProposalObject\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"}],\"name\":\"newProposal\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracul\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"penalty\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposalPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOracul\",\"type\":\"address\"}],\"name\":\"setOracul\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newProposalPrice\",\"type\":\"uint256\"}],\"name\":\"setProposalPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"suicideContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"internalType\":\"struct Verifier.Check\",\"name\":\"check\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"}],\"name\":\"verifyAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"}],\"name\":\"verifyCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MyJobBot","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://0576cbc75998977874f0d852bbf710f7d6d86e654e28a09946db04c79b6bfc04"}]}