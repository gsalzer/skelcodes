{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.2;\r\n\r\ninterface IERC20 {\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\ncontract ERC20PaymentSplitter {\r\n\r\n  address public payerAddr;\r\n\r\n  constructor(address _payerAddr) public {\r\n    payerAddr = _payerAddr;\r\n  }\r\n\r\n  modifier onlyPayer() {\r\n    require(msg.sender == payerAddr, \"Only payer can call\");\r\n    _;\r\n  }\r\n\r\n /**\r\n  * Transfers given token to multiple recipients as specified by _recepients and _splits arrays\r\n  *\r\n  * @dev This contract should have enough allowance of _tokenAddr from _payerAddr\r\n  * @param _recipients Array of payment recipients\r\n  * @param _splits Array of amounts for _tokenAddr ERC20 to transfer to corresponding recipient.\r\n  * @param _tokenAddr ERC20 token used for payment unit\r\n  */\r\n  function split(\r\n    address[] memory _recipients,\r\n    uint256[] memory _splits,\r\n    address _tokenAddr\r\n  ) public onlyPayer {\r\n    require(_recipients.length == _splits.length, \"splits and recipients should be of the same length\");\r\n    IERC20 token = IERC20(_tokenAddr);\r\n    for (uint i = 0; i < _recipients.length; i++) {\r\n      token.transferFrom(payerAddr, _recipients[i], _splits[i]);\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"},{\"name\":\"_splits\",\"type\":\"uint256[]\"},{\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"split\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payerAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_payerAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"ERC20PaymentSplitter","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c5cdcd5470aef35fc33bddff3f8ecec027f95b1d","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://3ec59db5171a9ef87051339c671dfe28517c6f26f91e63aee3f0b0585a64f9d2"}]}