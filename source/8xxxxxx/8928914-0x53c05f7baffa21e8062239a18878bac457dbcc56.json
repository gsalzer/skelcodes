{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.10;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error.\r\n */\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == _owner;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"New owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n/**\r\n * @title BlackListedRole.\r\n */\r\ncontract BlackListedRole is Ownable {\r\n    using Roles for Roles.Role;\r\n\r\n    event BlackListedAdded(address indexed account);\r\n    event BlackListedRemoved(address indexed account);\r\n\r\n    Roles.Role private _blackListeds;\r\n\r\n    modifier onlyBlackListed() {\r\n        require(isBlackListed(msg.sender), \"Caller has no permission\");\r\n        _;\r\n    }\r\n\r\n    function isBlackListed(address account) public view returns (bool) {\r\n        return(_blackListeds.has(account) || isOwner(account));\r\n    }\r\n\r\n    function addBlackListed(address account) public onlyOwner {\r\n        _blackListeds.add(account);\r\n        emit BlackListedAdded(account);\r\n    }\r\n\r\n    function removeBlackListed(address account) public onlyOwner {\r\n        _blackListeds.remove(account);\r\n        emit BlackListedRemoved(account);\r\n    }\r\n}\r\n\r\n/**\r\n * @title GRSHAToken Interface\r\n */\r\ninterface IGRSHAToken {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function amountOfHolders() external view returns (uint256);\r\n    function holders() external view returns (address payable[] memory);\r\n\r\n    function pause() external;\r\n    function unpause() external;\r\n}\r\n\r\n/**\r\n * @title Distribution contract.\r\n */\r\ncontract Distribution is BlackListedRole {\r\n    using SafeMath for uint256;\r\n\r\n    IGRSHAToken token;\r\n\r\n    uint256 index;\r\n    uint256 sendingAmount;\r\n\r\n    event Payed(address recipient, uint256 amount);\r\n    event Error(address recipient);\r\n    event Success();\r\n    event Suspended();\r\n\r\n    constructor(address tokenAddr) public {\r\n        token = IGRSHAToken(tokenAddr);\r\n    }\r\n\r\n    function() external payable {\r\n        if (msg.value == 0) {\r\n            if (sendingAmount == 0) {\r\n                sendingAmount = address(this).balance;\r\n            }\r\n            massSending(sendingAmount);\r\n        }\r\n    }\r\n\r\n    function massSending(uint256 weiAmount) public onlyOwner {\r\n        require(weiAmount != 0);\r\n        address payable[] memory addresses = token.holders();\r\n\r\n        for (uint i = index; i < addresses.length; i++) {\r\n            uint256 amount = getShare(addresses[i], weiAmount);\r\n            if (!isBlackListed(addresses[i]) && amount > 0 && addresses[i].send(amount)) {\r\n                emit Payed(addresses[i], amount);\r\n            } else {\r\n                emit Error(addresses[i]);\r\n            }\r\n\r\n            if (i == addresses.length - 1) {\r\n                token.unpause();\r\n                index = 0;\r\n                sendingAmount = 0;\r\n                emit Success();\r\n                break;\r\n            }\r\n\r\n            if (gasleft() <= 50000) {\r\n                token.pause();\r\n                index = i + 1;\r\n                emit Suspended();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function setIndex(uint256 newIndex) public onlyOwner {\r\n        index = newIndex;\r\n    }\r\n\r\n    function withdrawBalance() external onlyOwner {\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n\r\n    function withdrawERC20(address ERC20Token, address recipient) external onlyOwner {\r\n        uint256 amount = IGRSHAToken(ERC20Token).balanceOf(address(this));\r\n        IGRSHAToken(ERC20Token).transfer(recipient, amount);\r\n    }\r\n\r\n    function getShare(address account, uint256 weiAmount) public view returns(uint256) {\r\n        return (token.balanceOf(account)).div(1e15).mul(weiAmount).div(token.totalSupply().div(1e15));\r\n    }\r\n\r\n    function getBalance() external view returns(uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addBlackListed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newIndex\",\"type\":\"uint256\"}],\"name\":\"setIndex\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"getShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ERC20Token\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"massSending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBlackListed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeBlackListed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Payed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"Error\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Success\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Suspended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"BlackListedAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"BlackListedRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Distribution","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000008e281164daed2293342a18be495918db77ada1e3","Library":"","LicenseType":"None","SwarmSource":"bzzr://ad377a876e223bbb66765db32b410f40f75222188c7fdfc5fc5d4af21c2db123"}]}