{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.11;\r\n\r\ninterface GemLike {\r\n    function approve(address, uint) external;\r\n    function transfer(address, uint) external;\r\n    function transferFrom(address, address, uint) external;\r\n    function deposit() external payable;\r\n    function withdraw(uint) external;\r\n}\r\n\r\ninterface ManagerLike {\r\n    function cdpCan(address, uint, address) external view returns (uint);\r\n    function ilks(uint) external view returns (bytes32);\r\n    function owns(uint) external view returns (address);\r\n    function urns(uint) external view returns (address);\r\n    function vat() external view returns (address);\r\n    function open(bytes32, address) external returns (uint);\r\n    function give(uint, address) external;\r\n    function cdpAllow(uint, address, uint) external;\r\n    function urnAllow(address, uint) external;\r\n    function frob(uint, int, int) external;\r\n    function flux(uint, address, uint) external;\r\n    function move(uint, address, uint) external;\r\n    function exit(\r\n        address,\r\n        uint,\r\n        address,\r\n        uint\r\n    ) external;\r\n    function quit(uint, address) external;\r\n    function enter(address, uint) external;\r\n    function shift(uint, uint) external;\r\n}\r\n\r\ninterface VatLike {\r\n    function can(address, address) external view returns (uint);\r\n    function ilks(bytes32) external view returns (uint, uint, uint, uint, uint);\r\n    function dai(address) external view returns (uint);\r\n    function urns(bytes32, address) external view returns (uint, uint);\r\n    function frob(\r\n        bytes32,\r\n        address,\r\n        address,\r\n        address,\r\n        int,\r\n        int\r\n    ) external;\r\n    function hope(address) external;\r\n    function move(address, address, uint) external;\r\n}\r\n\r\ninterface GemJoinLike {\r\n    function dec() external returns (uint);\r\n    function gem() external returns (GemLike);\r\n    function join(address, uint) external payable;\r\n    function exit(address, uint) external;\r\n}\r\n\r\ninterface DaiJoinLike {\r\n    function vat() external returns (VatLike);\r\n    function dai() external returns (GemLike);\r\n    function join(address, uint) external payable;\r\n    function exit(address, uint) external;\r\n}\r\n\r\ninterface HopeLike {\r\n    function hope(address) external;\r\n    function nope(address) external;\r\n}\r\n\r\ninterface JugLike {\r\n    function drip(bytes32) external returns (uint);\r\n}\r\n\r\ninterface ProxyRegistryLike {\r\n    function proxies(address) external view returns (address);\r\n    function build(address) external returns (address);\r\n}\r\n\r\ninterface ProxyLike {\r\n    function owner() external view returns (address);\r\n}\r\n\r\ninterface InstaMcdAddress {\r\n    function manager() external returns (address);\r\n    function dai() external returns (address);\r\n    function daiJoin() external returns (address);\r\n    function jug() external returns (address);\r\n    function proxyRegistry() external returns (address);\r\n    function ethAJoin() external returns (address);\r\n}\r\n\r\n\r\ncontract Common {\r\n    uint256 constant RAY = 10 ** 27;\r\n\r\n    /**\r\n     * @dev get MakerDAO MCD Address contract\r\n     */\r\n    function getMcdAddresses() public pure returns (address mcd) {\r\n        mcd = 0xF23196DF1C440345DE07feFbe556a5eF0dcD29F0; // Check Thrilok - add addr at time of deploy\r\n    }\r\n\r\n    /**\r\n     * @dev get InstaDApp CDP's Address\r\n     */\r\n    function getGiveAddress() public pure returns (address addr) {\r\n        addr = 0xc679857761beE860f5Ec4B3368dFE9752580B096;\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"mul-overflow\");\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"sub-overflow\");\r\n    }\r\n\r\n    function toInt(uint x) internal pure returns (int y) {\r\n        y = int(x);\r\n        require(y >= 0, \"int-overflow\");\r\n    }\r\n\r\n    function toRad(uint wad) internal pure returns (uint rad) {\r\n        rad = mul(wad, 10 ** 27);\r\n    }\r\n\r\n    function convertTo18(address gemJoin, uint256 amt) internal returns (uint256 wad) {\r\n        // For those collaterals that have less than 18 decimals precision we need to do the conversion before passing to frob function\r\n        // Adapters will automatically handle the difference of precision\r\n        wad = mul(\r\n            amt,\r\n            10 ** (18 - GemJoinLike(gemJoin).dec())\r\n        );\r\n    }\r\n}\r\n\r\n\r\ncontract DssProxyHelpers is Common {\r\n    // Internal functions\r\n    function joinDaiJoin(address urn, uint wad) public {\r\n        address daiJoin = InstaMcdAddress(getMcdAddresses()).daiJoin();\r\n        // Gets DAI from the user's wallet\r\n        DaiJoinLike(daiJoin).dai().transferFrom(msg.sender, address(this), wad);\r\n        // Approves adapter to take the DAI amount\r\n        DaiJoinLike(daiJoin).dai().approve(daiJoin, wad);\r\n        // Joins DAI into the vat\r\n        DaiJoinLike(daiJoin).join(urn, wad);\r\n    }\r\n\r\n    function _getDrawDart(\r\n        address vat,\r\n        address jug,\r\n        address urn,\r\n        bytes32 ilk,\r\n        uint wad\r\n    ) internal returns (int dart)\r\n    {\r\n        // Updates stability fee rate\r\n        uint rate = JugLike(jug).drip(ilk);\r\n\r\n        // Gets DAI balance of the urn in the vat\r\n        uint dai = VatLike(vat).dai(urn);\r\n\r\n        // If there was already enough DAI in the vat balance, just exits it without adding more debt\r\n        if (dai < mul(wad, RAY)) {\r\n            // Calculates the needed dart so together with the existing dai in the vat is enough to exit wad amount of DAI tokens\r\n            dart = toInt(sub(mul(wad, RAY), dai) / rate);\r\n            // This is neeeded due lack of precision. It might need to sum an extra dart wei (for the given DAI wad amount)\r\n            dart = mul(uint(dart), rate) < mul(wad, RAY) ? dart + 1 : dart;\r\n        }\r\n    }\r\n\r\n    function _getWipeAllWad(\r\n        address vat,\r\n        address usr,\r\n        address urn,\r\n        bytes32 ilk\r\n    ) internal view returns (uint wad)\r\n    {\r\n        // Gets actual rate from the vat\r\n        (, uint rate,,,) = VatLike(vat).ilks(ilk);\r\n        // Gets actual art value of the urn\r\n        (, uint art) = VatLike(vat).urns(ilk, urn);\r\n        // Gets actual dai amount in the urn\r\n        uint dai = VatLike(vat).dai(usr);\r\n\r\n        uint rad = sub(mul(art, rate), dai);\r\n        wad = rad / RAY;\r\n\r\n        // If the rad precision has some dust, it will need to request for 1 extra wad wei\r\n        wad = mul(wad, RAY) < rad ? wad + 1 : wad;\r\n    }\r\n}\r\n\r\n\r\ncontract DssProxyActionsAdv is DssProxyHelpers {\r\n    // Public functions\r\n\r\n    function transfer(address gem, address dst, uint wad) public {\r\n        GemLike(gem).transfer(dst, wad);\r\n    }\r\n\r\n    function joinEthJoin(address urn) public payable {\r\n        address ethJoin = InstaMcdAddress(getMcdAddresses()).ethAJoin();\r\n        // Wraps ETH in WETH\r\n        GemJoinLike(ethJoin).gem().deposit.value(msg.value)();\r\n        // Approves adapter to take the WETH amount\r\n        GemJoinLike(ethJoin).gem().approve(address(ethJoin), msg.value);\r\n        // Joins WETH collateral into the vat\r\n        GemJoinLike(ethJoin).join(urn, msg.value);\r\n    }\r\n\r\n    function joinGemJoin(\r\n        address apt,\r\n        address urn,\r\n        uint wad,\r\n        bool transferFrom\r\n    ) public\r\n    {\r\n        // Only executes for tokens that have approval/transferFrom implementation\r\n        if (transferFrom) {\r\n            // Gets token from the user's wallet\r\n            GemJoinLike(apt).gem().transferFrom(msg.sender, address(this), wad);\r\n            // Approves adapter to take the token amount\r\n            GemJoinLike(apt).gem().approve(apt, wad);\r\n        }\r\n        // Joins token collateral into the vat\r\n        GemJoinLike(apt).join(urn, wad);\r\n    }\r\n\r\n    function open(bytes32 ilk, address usr) public returns (uint cdp) {\r\n        address manager = InstaMcdAddress(getMcdAddresses()).manager();\r\n        cdp = ManagerLike(manager).open(ilk, usr);\r\n    }\r\n\r\n    function give(uint cdp, address usr) public {\r\n        address manager = InstaMcdAddress(getMcdAddresses()).manager();\r\n        ManagerLike(manager).give(cdp, usr);\r\n    }\r\n\r\n    function shut(uint cdp) public {\r\n        give(cdp, getGiveAddress());\r\n    }\r\n\r\n    function flux(uint cdp, address dst, uint wad) public {\r\n        address manager = InstaMcdAddress(getMcdAddresses()).manager();\r\n        ManagerLike(manager).flux(cdp, dst, wad);\r\n    }\r\n\r\n    function move(uint cdp, address dst, uint rad) public {\r\n        address manager = InstaMcdAddress(getMcdAddresses()).manager();\r\n        ManagerLike(manager).move(cdp, dst, rad);\r\n    }\r\n\r\n    function frob(uint cdp, int dink, int dart) public {\r\n        address manager = InstaMcdAddress(getMcdAddresses()).manager();\r\n        ManagerLike(manager).frob(cdp, dink, dart);\r\n    }\r\n\r\n    function drawAndSend(uint cdp, uint wad, address to) public {\r\n        address manager = InstaMcdAddress(getMcdAddresses()).manager();\r\n        address jug = InstaMcdAddress(getMcdAddresses()).jug();\r\n        address daiJoin = InstaMcdAddress(getMcdAddresses()).daiJoin();\r\n        address urn = ManagerLike(manager).urns(cdp);\r\n        address vat = ManagerLike(manager).vat();\r\n        bytes32 ilk = ManagerLike(manager).ilks(cdp);\r\n        // Generates debt in the CDP\r\n        frob(\r\n            cdp,\r\n            0,\r\n            _getDrawDart(\r\n                vat,\r\n                jug,\r\n                urn,\r\n                ilk,\r\n                wad\r\n            )\r\n        );\r\n        // Moves the DAI amount (balance in the vat in rad) to proxy's address\r\n        move(\r\n            cdp,\r\n            address(this),\r\n            toRad(wad)\r\n        );\r\n        // Allows adapter to access to proxy's DAI balance in the vat\r\n        if (VatLike(vat).can(address(this), address(daiJoin)) == 0) {\r\n            VatLike(vat).hope(daiJoin);\r\n        }\r\n        // Exits DAI to the user's wallet as a token\r\n        DaiJoinLike(daiJoin).exit(to, wad);\r\n    }\r\n\r\n    function lockETHAndDraw(uint cdp, uint wadD) public payable {\r\n        address manager = InstaMcdAddress(getMcdAddresses()).manager();\r\n        address jug = InstaMcdAddress(getMcdAddresses()).jug();\r\n        address daiJoin = InstaMcdAddress(getMcdAddresses()).daiJoin();\r\n        address urn = ManagerLike(manager).urns(cdp);\r\n        address vat = ManagerLike(manager).vat();\r\n        bytes32 ilk = ManagerLike(manager).ilks(cdp);\r\n        // Receives ETH amount, converts it to WETH and joins it into the vat\r\n        joinEthJoin(urn);\r\n        // Locks WETH amount into the CDP and generates debt\r\n        frob(\r\n            cdp,\r\n            toInt(msg.value),\r\n            _getDrawDart(\r\n                vat,\r\n                jug,\r\n                urn,\r\n                ilk,\r\n                wadD\r\n            )\r\n        );\r\n        // Moves the DAI amount (balance in the vat in rad) to proxy's address\r\n        move(\r\n            cdp,\r\n            address(this),\r\n            toRad(wadD)\r\n        );\r\n        // Allows adapter to access to proxy's DAI balance in the vat\r\n        if (VatLike(vat).can(address(this), address(daiJoin)) == 0) {\r\n            VatLike(vat).hope(daiJoin);\r\n        }\r\n        // Exits DAI to the user's wallet as a token\r\n        DaiJoinLike(daiJoin).exit(msg.sender, wadD);\r\n    }\r\n\r\n    function openLockETHAndDraw(bytes32 ilk, uint wadD) public payable returns (uint cdp) {\r\n        cdp = open(ilk, address(this));\r\n        lockETHAndDraw(cdp, wadD);\r\n    }\r\n\r\n    function lockGemAndDraw(\r\n        address gemJoin,\r\n        uint cdp,\r\n        uint wadC,\r\n        uint wadD,\r\n        bool transferFrom\r\n    ) public\r\n    {\r\n        address manager = InstaMcdAddress(getMcdAddresses()).manager();\r\n        address jug = InstaMcdAddress(getMcdAddresses()).jug();\r\n        address daiJoin = InstaMcdAddress(getMcdAddresses()).daiJoin();\r\n        address urn = ManagerLike(manager).urns(cdp);\r\n        address vat = ManagerLike(manager).vat();\r\n        bytes32 ilk = ManagerLike(manager).ilks(cdp);\r\n        // Takes token amount from user's wallet and joins into the vat\r\n        joinGemJoin(\r\n            gemJoin,\r\n            urn,\r\n            wadC,\r\n            transferFrom\r\n        );\r\n        // Locks token amount into the CDP and generates debt\r\n        frob(\r\n            cdp,\r\n            toInt(convertTo18(gemJoin, wadC)),\r\n            _getDrawDart(\r\n                vat,\r\n                jug,\r\n                urn,\r\n                ilk,\r\n                wadD\r\n            )\r\n        );\r\n        // Moves the DAI amount (balance in the vat in rad) to proxy's address\r\n        move(\r\n            cdp,\r\n            address(this),\r\n            toRad(wadD)\r\n        );\r\n        // Allows adapter to access to proxy's DAI balance in the vat\r\n        if (VatLike(vat).can(address(this), address(daiJoin)) == 0) {\r\n            VatLike(vat).hope(daiJoin);\r\n        }\r\n        // Exits DAI to the user's wallet as a token\r\n        DaiJoinLike(daiJoin).exit(msg.sender, wadD);\r\n    }\r\n\r\n    function openLockGemAndDraw( // check Thrilok - refactor\r\n        address gemJoin,\r\n        bytes32 ilk,\r\n        uint wadC,\r\n        uint wadD,\r\n        bool transferFrom\r\n    ) public returns (uint cdp)\r\n    {\r\n        cdp = open(ilk, address(this));\r\n        lockGemAndDraw(\r\n            gemJoin,\r\n            cdp,\r\n            wadC,\r\n            wadD,\r\n            transferFrom\r\n        );\r\n    }\r\n\r\n    function wipeAllAndFreeEth(uint cdp) public {\r\n        address manager = InstaMcdAddress(getMcdAddresses()).manager();\r\n        address ethJoin = InstaMcdAddress(getMcdAddresses()).ethAJoin();\r\n        address vat = ManagerLike(manager).vat();\r\n        address urn = ManagerLike(manager).urns(cdp);\r\n        bytes32 ilk = ManagerLike(manager).ilks(cdp);\r\n        (uint wadC, uint art) = VatLike(vat).urns(ilk, urn); //Check Thrilok - wadC\r\n\r\n        // Joins DAI amount into the vat\r\n        joinDaiJoin(\r\n            urn,\r\n            _getWipeAllWad(\r\n                vat,\r\n                urn,\r\n                urn,\r\n                ilk\r\n            )\r\n        );\r\n        // Paybacks debt to the CDP and unlocks WETH amount from it\r\n        frob(\r\n            cdp,\r\n            -toInt(wadC),\r\n            -int(art)\r\n        );\r\n        // Moves the amount from the CDP urn to proxy's address\r\n        flux(cdp, address(this), wadC);\r\n        // Exits WETH amount to proxy address as a token\r\n        GemJoinLike(ethJoin).exit(address(this), wadC);\r\n        // Converts WETH to ETH\r\n        GemJoinLike(ethJoin).gem().withdraw(wadC);\r\n        // Sends ETH back to the user's wallet\r\n        msg.sender.transfer(wadC);\r\n    }\r\n\r\n    function wipeAllAndFreeGem(uint cdp, address gemJoin) public {\r\n        address manager = InstaMcdAddress(getMcdAddresses()).manager();\r\n        address vat = ManagerLike(manager).vat();\r\n        address urn = ManagerLike(manager).urns(cdp);\r\n        bytes32 ilk = ManagerLike(manager).ilks(cdp);\r\n        (uint wadC, uint art) = VatLike(vat).urns(ilk, urn); //Check Thrilok - wadC\r\n\r\n        // Joins DAI amount into the vat\r\n        joinDaiJoin(\r\n            urn,\r\n            _getWipeAllWad(\r\n                vat,\r\n                urn,\r\n                urn,\r\n                ilk\r\n            )\r\n        );\r\n        uint wad18 = convertTo18(gemJoin, wadC);\r\n        // Paybacks debt to the CDP and unlocks token amount from it\r\n        frob(\r\n            cdp,\r\n            -toInt(wad18),\r\n            -int(art)\r\n        );\r\n        // Moves the amount from the CDP urn to proxy's address\r\n        flux(cdp, address(this), wad18);\r\n        // Exits token amount to the user's wallet as a token\r\n        GemJoinLike(gemJoin).exit(msg.sender, wadC);\r\n    }\r\n\r\n    function wipeFreeGemAndShut(uint cdp, address gemJoin) public {\r\n        wipeAllAndFreeGem(cdp, gemJoin);\r\n        shut(cdp);\r\n    }\r\n\r\n    function wipeFreeEthAndShut(uint cdp) public {\r\n        wipeAllAndFreeEth(cdp);\r\n        shut(cdp);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"wadD\",\"type\":\"uint256\"}],\"name\":\"openLockETHAndDraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGiveAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"gemJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wadC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wadD\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"transferFrom\",\"type\":\"bool\"}],\"name\":\"lockGemAndDraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"dink\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"dart\",\"type\":\"int256\"}],\"name\":\"frob\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gemJoin\",\"type\":\"address\"}],\"name\":\"wipeFreeGemAndShut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"}],\"name\":\"wipeFreeEthAndShut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"urn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"joinDaiJoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"open\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gemJoin\",\"type\":\"address\"}],\"name\":\"wipeAllAndFreeGem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"urn\",\"type\":\"address\"}],\"name\":\"joinEthJoin\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"apt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"urn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"transferFrom\",\"type\":\"bool\"}],\"name\":\"joinGemJoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"flux\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"}],\"name\":\"wipeAllAndFreeEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wadD\",\"type\":\"uint256\"}],\"name\":\"lockETHAndDraw\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"drawAndSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"gem\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMcdAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"mcd\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"}],\"name\":\"shut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"gemJoin\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"wadC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wadD\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"transferFrom\",\"type\":\"bool\"}],\"name\":\"openLockGemAndDraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rad\",\"type\":\"uint256\"}],\"name\":\"move\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"give\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DssProxyActionsAdv","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://d07c66f477c485a403d5921ce72cd1249fc76c5755f472c56270f6feb5cb347b"}]}