{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title BulkSender, support ETH and ERC20 Tokens\r\n * @dev To Use this Dapp: https://bulksender.app\r\n*/\r\n\r\n\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal pure  returns (uint) {\r\n    uint c = a * b;\r\n    require(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint a, uint b) internal pure returns (uint) {\r\n    require(b > 0);\r\n    uint c = a / b;\r\n    require(a == b * c + a % b);\r\n    return c;\r\n  }\r\n  function sub(uint a, uint b) internal pure returns (uint) {\r\n    require(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a + b;\r\n    require(c >= a);\r\n    return c;\r\n  }\r\n  function max64(uint64 a, uint64 b) internal  pure returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n  function min64(uint64 a, uint64 b) internal  pure returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n  function max256(uint256 a, uint256 b) internal  pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n  function min256(uint256 a, uint256 b) internal  pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external;\r\n    function transferFrom(address from, address to, uint256 value) external;\r\n    function balanceOf(address tokenOwner)  external returns (uint balance);\r\n\r\n}\r\n\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    function Ownable() public{\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    function transferOwnership(address newOwner) onlyOwner public{\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title BulkSender, support ETH and ERC20 Tokens\r\n * @dev To Use this Dapp: https://bulksender.app\r\n*/\r\n\r\ncontract Bulksender is Ownable{\r\n\r\n    using SafeMath for uint;\r\n\r\n    event LogTokenBulkSent(address token,uint256 total);\r\n    event LogGetToken(address token, address receiver, uint256 balance);\r\n\r\n    address public receiverAddress;\r\n    uint public txFee = 0.02 ether;\r\n    uint public VIPFee = 2 ether;\r\n\r\n    /* VIP List */\r\n    mapping(address => bool) public vipList;\r\n\r\n    /* tx List */\r\n    mapping(bytes32 => bool) public txRecords;\r\n\r\n\r\n    /*\r\n  *  get balance\r\n  */\r\n  function getBalance(IERC20 token) onlyOwner public {\r\n      address _receiverAddress = getReceiverAddress();\r\n      if(token == address(0)){\r\n          require(_receiverAddress.send(address(this).balance));\r\n          return;\r\n      }\r\n      uint256 balance = token.balanceOf(this);\r\n      token.transfer(_receiverAddress, balance);\r\n      emit LogGetToken(token,_receiverAddress,balance);\r\n  }\r\n\r\n   /*\r\n  *  Register VIP\r\n  */\r\n  function registerVIP() payable public {\r\n      require(msg.value >= VIPFee);\r\n      address _receiverAddress = getReceiverAddress();\r\n      require(_receiverAddress.send(msg.value));\r\n      vipList[msg.sender] = true;\r\n  }\r\n\r\n\r\n\r\n  /*\r\n  *  VIP list\r\n  */\r\n  function addToVIPList(address[] _vipList) onlyOwner public {\r\n    for (uint i =0;i<_vipList.length;i++){\r\n      vipList[_vipList[i]] = true;\r\n\r\n    }\r\n  }\r\n\r\n  /*\r\n    * Remove address from VIP List by Owner\r\n  */\r\n  function removeFromVIPList(address[] _vipList) onlyOwner public {\r\n    for (uint i =0;i<_vipList.length;i++){\r\n      vipList[_vipList[i]] = false;\r\n    }\r\n   }\r\n\r\n    /*\r\n        * Check isVIP\r\n    */\r\n    function isVIP(address _addr) public view returns (bool) {\r\n        return _addr == owner || vipList[_addr];\r\n    }\r\n\r\n    /*\r\n        * set receiver address\r\n    */\r\n    function setReceiverAddress(address _addr) onlyOwner public {\r\n        require(_addr != address(0));\r\n        receiverAddress = _addr;\r\n    }\r\n\r\n    /*\r\n        * get receiver address\r\n    */\r\n    function getReceiverAddress() public view returns  (address){\r\n        if(receiverAddress == address(0)){\r\n            return owner;\r\n        }\r\n\r\n        return receiverAddress;\r\n    }\r\n\r\n     /*\r\n        * set vip fee\r\n    */\r\n    function setVIPFee(uint _fee) onlyOwner public {\r\n        VIPFee = _fee;\r\n    }\r\n\r\n    /*\r\n        * set tx fee\r\n    */\r\n    function setTxFee(uint _fee) onlyOwner public {\r\n        txFee = _fee;\r\n    }\r\n\r\n    function checkTxExist(bytes32 _txRecordId)  public view returns  (bool){\r\n        return txRecords[_txRecordId];\r\n    }\r\n\r\n    function addTxRecord(bytes32 _txRecordId) internal{\r\n        txRecords[_txRecordId] = true;\r\n    }\r\n\r\n    function _bulksendEther(address[] _to, uint256[] _values) internal {\r\n\r\n        uint sendAmount = _values[0];\r\n\t\tuint remainingValue = msg.value;\r\n\r\n\t    bool vip = isVIP(msg.sender);\r\n        if(vip){\r\n            require(remainingValue >= sendAmount);\r\n        }else{\r\n            require(remainingValue >= sendAmount.add(txFee)) ;\r\n        }\r\n\t\trequire(_to.length == _values.length);\r\n\r\n\t\tfor (uint256 i = 1; i < _to.length; i++) {\r\n\t\t\tremainingValue = remainingValue.sub(_values[i]);\r\n\t\t\trequire(_to[i].send(_values[i]));\r\n\t\t}\r\n\t    emit LogTokenBulkSent(0x000000000000000000000000000000000000bEEF,msg.value);\r\n\r\n    }\r\n\r\n     function _bulksendTokenSimple(IERC20 _token, address[] _to, uint[] _values) internal {\r\n       \tuint sendValue = msg.value;\r\n\t    bool vip = isVIP(msg.sender);\r\n        if(!vip){\r\n\t\t    require(sendValue >= txFee);\r\n        }\r\n\t\trequire(_to.length == _values.length);\r\n\r\n        uint256 sendAmount = _values[0];\r\n\t\tfor (uint256 i = 1; i < _to.length; i++) {\r\n\t\t    _token.transferFrom(msg.sender, _to[i], _values[i]);\r\n\t\t}\r\n        emit LogTokenBulkSent(_token,sendAmount);\r\n    }\r\n\r\n    function _bulksendToken(IERC20 _token, address[] _to, uint256[] _values)  internal  {\r\n\t\tuint sendValue = msg.value;\r\n\t    bool vip = isVIP(msg.sender);\r\n        if(!vip){\r\n\t\t    require(sendValue >= txFee);\r\n        }\r\n\t\trequire(_to.length == _values.length);\r\n\r\n        uint256 sendAmount = _values[0];\r\n        _token.transferFrom(msg.sender,address(this), sendAmount);\r\n\r\n\t\tfor (uint256 i = 1; i < _to.length; i++) {\r\n\t\t    _token.transfer(_to[i], _values[i]);\r\n\t\t}\r\n        emit LogTokenBulkSent(_token,sendAmount);\r\n\r\n    }\r\n\r\n\r\n    function bulksendTokenSimple(IERC20 _token, address[] _to, uint256[] _values, bytes32 _uniqueId) payable public {\r\n        if(checkTxExist(_uniqueId)){\r\n            if (msg.value > 0)\r\n                require(msg.sender.send(msg.value));//refund the tx fee to msg send if the tx already exists\r\n        }else{\r\n            addTxRecord(_uniqueId);\r\n\t        _bulksendTokenSimple(_token, _to, _values);\r\n        }\r\n    }\r\n\r\n    function bulksendToken(IERC20 _token, address[] _to, uint256[] _values, bytes32 _uniqueId) payable public {\r\n        if(checkTxExist(_uniqueId)){\r\n            if (msg.value > 0)\r\n                require(msg.sender.send(msg.value));//refund the tx fee to msg send if the tx already exists\r\n        }else{\r\n            addTxRecord(_uniqueId);\r\n\t        _bulksendToken(_token, _to, _values);\r\n        }\r\n    }\r\n\r\n    function bulksendEther(address[] _to, uint256[] _values,bytes32 _uniqueId) payable public {\r\n        if(checkTxExist(_uniqueId)){\r\n            if (msg.value > 0)\r\n                require(msg.sender.send(msg.value));//refund the tx fee to msg send if the tx already exists\r\n        }else{\r\n            addTxRecord(_uniqueId);\r\n\t        _bulksendEther(_to, _values);\r\n        }\r\n\t}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"receiverAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setVIPFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getReceiverAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setReceiverAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"},{\"name\":\"_uniqueId\",\"type\":\"bytes32\"}],\"name\":\"bulksendEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_txRecordId\",\"type\":\"bytes32\"}],\"name\":\"checkTxExist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"registerVIP\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"vipList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"},{\"name\":\"_uniqueId\",\"type\":\"bytes32\"}],\"name\":\"bulksendTokenSimple\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"txRecords\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vipList\",\"type\":\"address[]\"}],\"name\":\"addToVIPList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"txFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setTxFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VIPFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isVIP\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vipList\",\"type\":\"address[]\"}],\"name\":\"removeFromVIPList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"},{\"name\":\"_uniqueId\",\"type\":\"bytes32\"}],\"name\":\"bulksendToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"LogTokenBulkSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"LogGetToken\",\"type\":\"event\"}]","ContractName":"Bulksender","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e98e4f2ec1c54ad2a0022c80323d47b432d3fb72167c7884a764c18847e5b515"}]}