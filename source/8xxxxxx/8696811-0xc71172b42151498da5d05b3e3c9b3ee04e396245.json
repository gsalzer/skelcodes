{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\ncontract AcceptsHodlFund {\r\n    HodlFund public tokenContract;\r\n\r\n    constructor(address _tokenContract) public {\r\n        tokenContract = HodlFund(_tokenContract);\r\n    }\r\n\r\n    modifier onlyTokenContract {\r\n        require(msg.sender == address(tokenContract));\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Standard ERC677 function that will handle incoming token transfers.\r\n    *\r\n    * @param _from  Token sender address.\r\n    * @param _value Amount of tokens.\r\n    * @param _data  Transaction metadata.\r\n    */\r\n    function tokenFallback(address _from, uint256 _value, bytes _data) external returns (bool);\r\n}\r\n\r\ncontract HodlFund {\r\n    /*=================================\r\n    =            MODIFIERS            =\r\n    =================================*/\r\n    // only people with tokens\r\n    modifier onlyBagholders() {\r\n        require(myTokens() > 0);\r\n        _;\r\n    }\r\n    \r\n    // only people with profits\r\n    modifier onlyStronghands() {\r\n        require(myDividends(true) > 0);\r\n        _;\r\n    }\r\n    \r\n    // administrators can:\r\n    // -> change the name of the contract\r\n    // -> change the name of the token\r\n    // -> change the PoS difficulty (How many tokens it costs to hold a masternode, in case it gets crazy high later)\r\n    // they CANNOT:\r\n    // -> take funds, except the funding contract\r\n    // -> disable withdrawals\r\n    // -> kill the contract\r\n    // -> change the price of tokens\r\n    modifier onlyAdministrator(){\r\n        address _customerAddress = msg.sender;\r\n        require(administrator == _customerAddress);\r\n        _;\r\n    }\r\n    \r\n    // ensures that the first tokens in the contract will be equally distributed\r\n    // meaning, no divine dump will be ever possible\r\n    // result: healthy longevity.\r\n    modifier antiEarlyWhale(uint256 _amountOfEthereum){\r\n        address _customerAddress = msg.sender;\r\n        \r\n        // are we still in the vulnerable phase?\r\n        // if so, enact anti early whale protocol \r\n        if( onlyAmbassadors && \r\n\t\t\t((totalEthereumBalance() - _amountOfEthereum) <= ambassadorQuota_ ) &&\r\n\t\t\tnow < ACTIVATION_TIME)\r\n\t\t{\r\n            require(\r\n                // is the customer in the ambassador list?\r\n                ambassadors_[_customerAddress] == true &&\r\n                \r\n                // does the customer purchase exceed the max ambassador quota?\r\n                (ambassadorAccumulatedQuota_[_customerAddress] + _amountOfEthereum) <= ambassadorMaxPurchase_\r\n                \r\n            );\r\n            \r\n            // updated the accumulated quota    \r\n            ambassadorAccumulatedQuota_[_customerAddress] = SafeMath.add(ambassadorAccumulatedQuota_[_customerAddress], _amountOfEthereum);\r\n        \r\n        } else {\r\n            // in case the ether count drops low, the ambassador phase won't reinitiate\r\n\t\t\t// only write state variable once\r\n\t\t\tif (onlyAmbassadors) {\r\n\t\t\t\tonlyAmbassadors = false;\r\n\t\t\t}\r\n        }\r\n\t\t\r\n\t\t_;\r\n    }\r\n\t\r\n\t// ambassadors are not allowed to sell their tokens within the anti-pump-and-dump phase\r\n\t// @Sordren\r\n\t// hopefully many devs will use this as a standard\r\n\tmodifier ambassAntiPumpAndDump() {\r\n\t\t\r\n\t\t// we are still in ambassadors antiPumpAndDump phase\r\n\t\tif (now <= antiPumpAndDumpEnd_) {\r\n\t\t\taddress _customerAddress = msg.sender;\r\n\t\t\t\r\n\t\t\t// require sender is not an ambassador\r\n\t\t\trequire(!ambassadors_[_customerAddress]);\r\n\t\t}\r\n\t\r\n\t\t// execute\r\n\t\t_;\r\n\t}\r\n\t\r\n\t// ambassadors are not allowed to transfer tokens to non-amassador accounts within the anti-pump-and-dump phase\r\n\t// @Sordren\r\n\tmodifier ambassOnlyToAmbass(address _to) {\r\n\t\t\r\n\t\t// we are still in ambassadors antiPumpAndDump phase\r\n\t\tif (now <= antiPumpAndDumpEnd_){\r\n\t\t\taddress _from = msg.sender;\r\n\t\t\t\r\n\t\t\t// sender is ambassador\r\n\t\t\tif (ambassadors_[_from]) {\r\n\t\t\t\t\r\n\t\t\t\t// sender is not the lending\r\n\t\t\t\t// this is required for withdrawing capital from lending\r\n\t\t\t\tif (_from != lendingAddress_) {\r\n\t\t\t\t\t// require receiver is ambassador\r\n\t\t\t\t\trequire(ambassadors_[_to], \"As ambassador you should know better :P\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// execute\r\n\t\t_;\r\n\t}\r\n    \r\n    \r\n    /*==============================\r\n    =            EVENTS            =\r\n    ==============================*/\r\n    event onTokenPurchase(\r\n        address indexed customerAddress,\r\n        uint256 incomingEthereum,\r\n        uint256 tokensMinted,\r\n        address indexed referredBy\r\n    );\r\n    \r\n    event onTokenSell(\r\n        address indexed customerAddress,\r\n        uint256 tokensBurned,\r\n        uint256 ethereumEarned\r\n    );\r\n    \r\n    event onReinvestment(\r\n        address indexed customerAddress,\r\n        uint256 ethereumReinvested,\r\n        uint256 tokensMinted\r\n    );\r\n    \r\n    event onWithdraw(\r\n        address indexed customerAddress,\r\n        uint256 ethereumWithdrawn\r\n    );\r\n    \r\n    // ERC20\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 tokens\r\n    );\r\n    \r\n    \r\n    /*=====================================\r\n    =            CONFIGURABLES            =\r\n    =====================================*/\r\n    string public name = \"Crypto Hodl Fund\";\r\n    string public symbol = \"HODL\";\r\n    uint8 constant public decimals = 18;\r\n    uint8 constant internal dividendFee_ = 15;\t// 1% divvies\r\n\tuint8 constant internal fundFee_ = 1; \t\t// 1% investment fund fee on each buy/sell\r\n\tuint8 constant internal referralBonus_ = 5;\r\n    uint256 constant internal tokenPriceInitial_ =     0.000000001 ether;\r\n    uint256 constant internal tokenPriceIncremental_ = 0.000000008 ether;\r\n    uint256 constant internal magnitude = 2**64;\t\r\n    \r\n    // proof of stake (defaults at 100 tokens)\r\n    uint256 public stakingRequirement = 20e18;\r\n    \r\n    // ambassador program\r\n    uint256 constant internal ambassadorMaxPurchase_ = 2 ether;\r\n    uint256 constant internal ambassadorQuota_ = 20 ether;\r\n\t\r\n\t// anti pump and dump phase time (default 30 days)\r\n\tuint256 constant internal antiPumpAndDumpTime_ = 90 days;\t\t\t\t\t\t\t\t// remember it is constant, so it cannot be changed after deployment\r\n\tuint256 constant public antiPumpAndDumpEnd_ = ACTIVATION_TIME + antiPumpAndDumpTime_;\t// set anti-pump-and-dump time to 30 days after deploying\r\n\tuint256 constant internal ACTIVATION_TIME = 1541966400;\r\n\t\r\n\t// when this is set to true, only ambassadors can purchase tokens (this prevents a whale premine, it ensures a fairly distributed upper pyramid)\r\n    bool public onlyAmbassadors = true;\r\n    \r\n    \r\n   /*================================\r\n    =            DATASETS            =\r\n    ================================*/\r\n    // amount of shares for each address (scaled number)\r\n    mapping(address => uint256) internal tokenBalanceLedger_;\r\n    mapping(address => uint256) internal referralBalance_;\r\n    mapping(address => int256) internal payoutsTo_;\r\n\tmapping(address => address) internal lastRef_;\r\n    mapping(address => uint256) internal ambassadorAccumulatedQuota_;\r\n    uint256 internal tokenSupply_ = 0;\r\n    uint256 internal profitPerShare_;\r\n    \r\n    // administrator (see above on what they can do)\r\n    address internal administrator;\r\n\t\r\n\t// lending address\r\n\taddress internal lendingAddress_;\r\n\t\r\n\t// Address to send the 3% fee\r\n    address public fundAddress_;\r\n    uint256 internal totalEthFundReceived; \t\t// total ETH received from this contract\r\n    uint256 internal totalEthFundCollected; \t// total ETH collected in this contract\r\n\t\r\n\t// ambassador program\r\n\tmapping(address => bool) internal ambassadors_;\r\n\t\r\n\t// Special HODL Platform control from scam game contracts on HODL platform\r\n    mapping(address => bool) public canAcceptTokens_; // contracts, which can accept HODL tokens\r\n\r\n\r\n    /*=======================================\r\n    =            PUBLIC FUNCTIONS            =\r\n    =======================================*/\r\n    /*\r\n    * -- APPLICATION ENTRY POINTS --  \r\n    */\r\n    constructor()\r\n        public\r\n    {\r\n        // add administrators here\r\n        administrator = 0xA38B4C3377F476c04B338A34Ab0AEff9b1Bc8F31;\r\n\t\tfundAddress_ = 0x58fe62D4ccD4339B32Ea49879DC48BdEa87eD6bF;\r\n\t\tlendingAddress_ = 0xa7a4b8a7eb3f92fa8e9f4bbad1bd63fc105e9e29;\r\n        \r\n\t\tambassadors_[lendingAddress_] \t\t\t\t\t\t\t = true;\t// lending, to be the first to buy tokens\r\n\t\tambassadors_[fundAddress_]\t\t\t\t\t\t\t\t = true;\t// fund, to be able to be masternode\r\n\t\t\r\n\t\t// set lending ref\r\n\t\tlastRef_[lendingAddress_] = fundAddress_;\r\n    }\r\n    \r\n     \r\n    /**\r\n     * Converts all incoming ethereum to tokens for the caller, and passes down the referral\r\n     */\r\n    function buy(address _referredBy)\r\n        public\r\n        payable\r\n        returns(uint256)\r\n    {\r\n\t\trequire(tx.gasprice <= 0.05 szabo);\r\n\t\taddress _lastRef = handleLastRef(_referredBy);\r\n\t\tpurchaseInternal(msg.value, _lastRef);\r\n    }\r\n    \r\n    /**\r\n     * Fallback function to handle ethereum that was send straight to the contract\r\n     * Unfortunately we cannot use a referral address this way.\r\n     */\r\n    function()\r\n        payable\r\n        external\r\n    {\r\n\t\trequire(tx.gasprice <= 0.05 szabo);\r\n\t\taddress lastRef = handleLastRef(address(0));\t// hopefully (for you) you used a referral somewhere in the past\r\n\t\tpurchaseInternal(msg.value, lastRef);\r\n    }\r\n    \r\n    /**\r\n     * Converts all of caller's dividends to tokens.\r\n     */\r\n    function reinvest()\r\n        onlyStronghands()\r\n        public\r\n    {\r\n        // fetch dividends\r\n        uint256 _dividends = myDividends(false); // retrieve ref. bonus later in the code\r\n        \r\n        // pay out the dividends virtually\r\n        address _customerAddress = msg.sender;\r\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\r\n        \r\n        // retrieve ref. bonus\r\n        _dividends += referralBalance_[_customerAddress];\r\n        referralBalance_[_customerAddress] = 0;\r\n        \r\n        // dispatch a buy order with the virtualized \"withdrawn dividends\"\r\n\t\taddress _lastRef = handleLastRef(address(0));\t// hopefully you used a referral somewhere in the past\r\n        uint256 _tokens = purchaseInternal(_dividends, _lastRef);\r\n        \r\n        // fire event\r\n        emit onReinvestment(_customerAddress, _dividends, _tokens);\r\n    }\r\n    \r\n    /**\r\n     * Alias of sell() and withdraw().\r\n     */\r\n    function exit()\r\n        public\r\n    {\r\n        // get token count for caller & sell them all\r\n        address _customerAddress = msg.sender;\r\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\r\n        if(_tokens > 0) sell(_tokens);\r\n        \r\n        // lambo delivery service\r\n        withdraw();\r\n    }\r\n\r\n    /**\r\n     * Withdraws all of the callers earnings.\r\n     */\r\n    function withdraw()\r\n        onlyStronghands()\r\n        public\r\n    {\r\n        // setup data\r\n        address _customerAddress = msg.sender;\r\n        uint256 _dividends = myDividends(false); // get ref. bonus later in the code\r\n        \r\n        // update dividend tracker\r\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\r\n        \r\n        // add ref. bonus\r\n        _dividends += referralBalance_[_customerAddress];\r\n        referralBalance_[_customerAddress] = 0;\r\n        \r\n        // lambo delivery service\r\n        _customerAddress.transfer(_dividends);\r\n        \r\n        // fire event\r\n        emit onWithdraw(_customerAddress, _dividends);\r\n    }\r\n    \r\n    /**\r\n     * Liquifies tokens to ethereum.\r\n     */\r\n    function sell(uint256 _amountOfTokens)\r\n        onlyBagholders()\r\n\t\tambassAntiPumpAndDump()\r\n        public\r\n    {\r\n        // setup data\r\n        address _customerAddress = msg.sender;\r\n        // russian hackers BTFO\r\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n        uint256 _tokens = _amountOfTokens;\r\n        uint256 _ethereum = tokensToEthereum_(_tokens);\r\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_), 100);\t\t\t\t// 15%\r\n\t\tuint256 _fundPayout = SafeMath.div(SafeMath.mul(_ethereum, fundFee_), 100);\t\t\t\t\t// 1%\r\n        uint256 _taxedEthereum =  SafeMath.sub(SafeMath.sub(_ethereum, _dividends), _fundPayout);\t// Take out dividends and then _fundPayout\r\n\t\t\r\n\t\t// Add ethereum for fund\r\n        totalEthFundCollected = SafeMath.add(totalEthFundCollected, _fundPayout);\r\n        \r\n        // burn the sold tokens\r\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\r\n        \r\n        // update dividends tracker\r\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\r\n        payoutsTo_[_customerAddress] -= _updatedPayouts;\r\n        \r\n        // dividing by zero is a bad idea\r\n        if (tokenSupply_ > 0) {\r\n            // update the amount of dividends per token\r\n            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\r\n        }\r\n        \r\n        // fire event\r\n        emit onTokenSell(_customerAddress, _tokens, _taxedEthereum);\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Transfer tokens from the caller to a new holder.\r\n     * Remember, there's 0% fee here.\r\n     */\r\n    function transfer(address _toAddress, uint256 _amountOfTokens)\r\n        onlyBagholders()\r\n\t\tambassOnlyToAmbass(_toAddress)\r\n        public\r\n        returns(bool)\r\n    {\r\n        // setup\r\n        address _customerAddress = msg.sender;\r\n        \r\n        // make sure we have the requested tokens\r\n        // also disables transfers until ambassador phase is over\r\n        // ( we dont want whale premines )\r\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n        \r\n        // withdraw all outstanding dividends first\r\n        if(myDividends(true) > 0) withdraw();\r\n\r\n        // exchange tokens\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _amountOfTokens);\r\n\t\t\r\n\t\t// update dividend trackers\r\n        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\r\n        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _amountOfTokens);\r\n        \r\n        // fire event\r\n        emit Transfer(_customerAddress, _toAddress, _amountOfTokens);\r\n        \r\n        // ERC20\r\n        return true;\r\n    }\r\n\t\r\n\t/**\r\n    * Transfer token to a specified address and forward the data to recipient\r\n    * ERC-677 standard\r\n    * https://github.com/ethereum/EIPs/issues/677\r\n    * @param _to    Receiver address.\r\n    * @param _value Amount of tokens that will be transferred.\r\n    * @param _data  Transaction metadata.\r\n    */\r\n    function transferAndCall(address _to, uint256 _value, bytes _data)\r\n\t\texternal\r\n\t\treturns (bool) \r\n\t{\r\n\t\trequire(_to != address(0));\r\n\t\trequire(canAcceptTokens_[_to] == true); \t// security check that contract approved by HODL platform\r\n\t\trequire(transfer(_to, _value)); \t\t\t// do a normal token transfer to the contract\r\n\r\n\t\tif (isContract(_to)) {\r\n\t\t\tAcceptsHodlFund receiver = AcceptsHodlFund(_to);\r\n\t\t\trequire(receiver.tokenFallback(msg.sender, _value, _data));\r\n\t\t}\r\n\r\n\t\treturn true;\r\n    }\r\n\r\n    /**\r\n     * Additional check that the game address we are sending tokens to is a contract\r\n     * assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n     */\r\n     function isContract(address _addr) \r\n\t\tprivate \r\n\t\tconstant \r\n\t\treturns (bool is_contract) \r\n\t{\r\n\t\t// retrieve the size of the code on target address, this needs assembly\r\n\t\tuint length;\r\n\t\tassembly { length := extcodesize(_addr) }\r\n\t\treturn length > 0;\r\n     }\r\n\t \r\n    \r\n    /*----------  ADMINISTRATOR ONLY FUNCTIONS  ----------*/\t\r\n    /**\r\n     * In case the amassador quota is not met, the administrator can manually disable the ambassador phase.\r\n     */\r\n    function disableInitialStage()\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        onlyAmbassadors = false;\r\n    }\r\n\t\r\n\t/**\r\n     * Sends FUND money to the Fund Contract\r\n     */\r\n    function payFund()\r\n\t\tpublic \r\n\t{\r\n\t\tuint256 ethToPay = SafeMath.sub(totalEthFundCollected, totalEthFundReceived);\r\n\t\trequire(ethToPay > 0);\r\n\t\ttotalEthFundReceived = SafeMath.add(totalEthFundReceived, ethToPay);\r\n      \r\n\t\tif(!fundAddress_.call.value(ethToPay).gas(400000)()) {\r\n\t\t\ttotalEthFundReceived = SafeMath.sub(totalEthFundReceived, ethToPay);\r\n\t\t}\r\n    }\r\n    \r\n    /**\r\n     * In case one of us dies, we need to replace ourselves.\r\n     */\r\n    function setAdministrator(address _identifier)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        administrator = _identifier;\r\n    }\r\n\t\r\n\t/**\r\n     * Only Add game contract, which can accept HODLtokens.\r\n\t * Disabling a contract is not possible after activating\r\n     */\r\n    function setCanAcceptTokens(address _address)\r\n      onlyAdministrator()\r\n      public\r\n    {\r\n      canAcceptTokens_[_address] = true;\r\n    }\r\n    \r\n    /**\r\n     * Precautionary measures in case we need to adjust the masternode rate.\r\n     */\r\n    function setStakingRequirement(uint256 _amountOfTokens)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        stakingRequirement = _amountOfTokens;\r\n    }\r\n    \r\n    /**\r\n     * If we want to rebrand, we can.\r\n     */\r\n    function setName(string _name)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        name = _name;\r\n    }\r\n    \r\n    /**\r\n     * If we want to rebrand, we can.\r\n     */\r\n    function setSymbol(string _symbol)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        symbol = _symbol;\r\n    }\r\n\r\n    \r\n    /*----------  HELPERS AND CALCULATORS  ----------*/\r\n    /**\r\n     * Method to view the current Ethereum stored in the contract\r\n     * Example: totalEthereumBalance()\r\n     */\r\n    function totalEthereumBalance()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return address(this).balance;\r\n    }\r\n    \r\n    /**\r\n     * Retrieve the total token supply.\r\n     */\r\n    function totalSupply()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return tokenSupply_;\r\n    }\r\n    \r\n    /**\r\n     * Retrieve the tokens owned by the caller.\r\n     */\r\n    function myTokens()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        return balanceOf(_customerAddress);\r\n    }\r\n    \r\n    /**\r\n     * Retrieve the dividends owned by the caller.\r\n     * If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\r\n     * The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\r\n     * But in the internal calculations, we want them separate. \r\n     */ \r\n    function myDividends(bool _includeReferralBonus) \r\n        public \r\n        view \r\n        returns(uint256)\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\r\n    }\r\n\t\r\n\t/**\r\n\t * Retrieve the last used referral address of the given address\r\n\t */\r\n\tfunction myLastRef(address _addr)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns(address)\r\n\t{\r\n\t\treturn lastRef_[_addr];\r\n\t}\r\n    \r\n    /**\r\n     * Retrieve the token balance of any single address.\r\n     */\r\n    function balanceOf(address _customerAddress)\r\n        view\r\n        public\r\n        returns(uint256)\r\n    {\r\n        return tokenBalanceLedger_[_customerAddress];\r\n    }\r\n    \r\n    /**\r\n     * Retrieve the dividend balance of any single address.\r\n     */\r\n    function dividendsOf(address _customerAddress)\r\n        view\r\n        public\r\n        returns(uint256)\r\n    {\r\n        return (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\r\n    }\r\n    \r\n    /**\r\n     * Return the buy price of 1 individual token.\r\n     */\r\n    function sellPrice() \r\n        public \r\n        view \r\n        returns(uint256)\r\n    {\r\n        // our calculation relies on the token supply, so we need supply. Doh.\r\n        if(tokenSupply_ == 0){\r\n            return tokenPriceInitial_ - tokenPriceIncremental_;\r\n        } else {\r\n            uint256 _ethereum = tokensToEthereum_(1e18);\r\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_), 100);\r\n\t\t\tuint256 _fundPayout = SafeMath.div(SafeMath.mul(_ethereum, fundFee_), 100);\r\n            uint256 _taxedEthereum = SafeMath.sub(_ethereum, SafeMath.add(_dividends, _fundPayout));    // 84%\r\n            return _taxedEthereum;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Return the sell price of 1 individual token.\r\n     */\r\n    function buyPrice() \r\n        public \r\n        view \r\n        returns(uint256)\r\n    {\r\n        // our calculation relies on the token supply, so we need supply. Doh.\r\n        if(tokenSupply_ == 0){\r\n            return tokenPriceInitial_ + tokenPriceIncremental_;\r\n        } else {\r\n            uint256 _ethereum = tokensToEthereum_(1e18);\r\n            uint256 _taxedEthereum = SafeMath.div(SafeMath.mul(_ethereum, 100), 80); // 125% => 100/80\r\n            return _taxedEthereum;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Function for the frontend to dynamically retrieve the price scaling of buy orders.\r\n     */\r\n    function calculateTokensReceived(uint256 _weiToSpend)\r\n        public \r\n        view \r\n        returns(uint256)\r\n    {\r\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_weiToSpend, dividendFee_), 100);\t\t\t// 15%\r\n\t\tuint256 _fundPayout = SafeMath.div(SafeMath.mul(_weiToSpend, fundFee_), 100);\t\t\t\t// 1%\r\n        uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_weiToSpend, _dividends), _fundPayout); // 84%\r\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\r\n        return SafeMath.div(_amountOfTokens, 1e18);\r\n    }\r\n    \r\n    /**\r\n     * Function for the frontend to dynamically retrieve the price scaling of sell orders.\r\n     */\r\n    function calculateEthereumReceived(uint256 _tokensToSell) \r\n        public \r\n        view \r\n        returns(uint256)\r\n    {\r\n        require(_tokensToSell <= tokenSupply_);\r\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\r\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_), 100);\t\t\t\t// 15%\r\n\t\tuint256 _fundPayout = SafeMath.div(SafeMath.mul(_ethereum, fundFee_), 100);\t\t\t\t\t// 1%\r\n        uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_ethereum, _dividends), _fundPayout);\t// 84%\r\n        return _taxedEthereum;\r\n    }\r\n\t\r\n\t/**\r\n     * Function for the frontend to show ether waiting to be send to fund in contract\r\n     */\r\n    function etherToSendFund()\r\n        public\r\n        view\r\n        returns(uint256)\r\n\t{\r\n        return SafeMath.sub(totalEthFundCollected, totalEthFundReceived);\r\n    }\r\n    \r\n    \r\n    /*==========================================\r\n    =            INTERNAL FUNCTIONS            =\r\n    ==========================================*/\r\n\tfunction handleLastRef(address _ref)\r\n\t\tinternal \r\n\t\treturns(address)\r\n\t{\r\n\t\taddress _customerAddress = msg.sender;\t\t\t// sender\r\n\t\taddress _lastRef = lastRef_[_customerAddress];\t// last saved ref\r\n\t\t\r\n\t\t// no cheating by referring yourself\r\n\t\tif (_ref == _customerAddress) {\r\n\t\t\treturn _lastRef;\r\n\t\t}\r\n\t\t\r\n\t\t// try to use last ref of customer\r\n\t\tif (_ref == address(0)) {\r\n\t\t\treturn _lastRef;\r\n\t\t} else {\r\n\t\t\t// new ref is another address, replace \r\n\t\t\tif (_ref != _lastRef) {\r\n\t\t\t\tlastRef_[_customerAddress] = _ref;\t// save new ref for next time\r\n\t\t\t\treturn _ref;\t\t\t\t\t\t// return new ref\r\n\t\t\t} else {\r\n\t\t\t\treturn _lastRef;\t\t\t\t\t// return last used ref\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t// Make sure we will send back excess if user sends more then 2 ether before 100 ETH in contract\r\n    function purchaseInternal(uint256 _incomingEthereum, address _referredBy)\r\n\t\tinternal\r\n\t\treturns(uint256)\r\n\t{\r\n\t\taddress _customerAddress = msg.sender;\r\n\t\tuint256 _purchaseEthereum = _incomingEthereum;\r\n\t\tuint256 _excess = 0;\r\n\r\n\t\t// limit customers value if needed\r\n\t\tif(_purchaseEthereum > 2 ether) { // check if the transaction is over 2 ether\r\n\t\t\tif (SafeMath.sub(totalEthereumBalance(), _purchaseEthereum) < 100 ether) { // if so check the contract is less then 100 ether\r\n\t\t\t\t_purchaseEthereum = 2 ether;\r\n\t\t\t\t_excess = SafeMath.sub(_incomingEthereum, _purchaseEthereum);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// purchase tokens\r\n\t\tpurchaseTokens(_purchaseEthereum, _referredBy);\r\n\r\n\t\t// payback\r\n\t\tif (_excess > 0) {\r\n\t\t\t_customerAddress.transfer(_excess);\r\n\t\t}\r\n    }\r\n\t\r\n    function purchaseTokens(uint256 _incomingEthereum, address _referredBy)\r\n        antiEarlyWhale(_incomingEthereum)\r\n        internal\r\n        returns(uint256)\r\n    {\r\n        // data setup\r\n        address _customerAddress = msg.sender;\r\n        uint256 _undividedDividends = SafeMath.div(SafeMath.mul(_incomingEthereum, dividendFee_), 100);\t\t\t\t// 15%\r\n\t\tuint256 _fundPayout = SafeMath.div(SafeMath.mul(_incomingEthereum, fundFee_), 100);\t\t\t\t\t\t\t// 1%\r\n\t\tuint256 _referralPayout = SafeMath.div(SafeMath.mul(_incomingEthereum, referralBonus_), 100);\t\t\t\t// 5%\r\n        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralPayout);\t\t\t\t\t\t\t\t\t// 12% => 15% - 1%\r\n        //uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_incomingEthereum, _undividedDividends), _fundPayout);\t// 84%\r\n        totalEthFundCollected = SafeMath.add(totalEthFundCollected, _fundPayout);\r\n\t\t\r\n\t\t// _taxedEthereum should be used, but stack is too deep here\r\n        uint256 _amountOfTokens = ethereumToTokens_(SafeMath.sub(SafeMath.sub(_incomingEthereum, _undividedDividends), _fundPayout));\r\n        uint256 _fee = _dividends * magnitude;\r\n \r\n        // no point in continuing execution if OP is a poorfag russian hacker\r\n        // prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\r\n        // (or hackers)\r\n        // and yes we know that the safemath function automatically rules out the \"greater then\" equasion.\r\n        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_));\r\n        \r\n        // is the user referred by a masternode?\r\n        if(\r\n            // is this a referred purchase?\r\n            _referredBy != 0x0000000000000000000000000000000000000000 &&\r\n\r\n            // no cheating!\r\n            _referredBy != _customerAddress &&\r\n            \r\n            // does the referrer have at least X whole tokens?\r\n            // i.e is the referrer a godly chad masternode\r\n            tokenBalanceLedger_[_referredBy] >= stakingRequirement\r\n        ){\r\n            // wealth redistribution\r\n            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralPayout);\r\n        } else {\r\n            // no ref purchase\r\n            // add the referral bonus back to the global dividends cake\r\n            _dividends = SafeMath.add(_dividends, _referralPayout);\r\n            _fee = _dividends * magnitude;\r\n        }\r\n        \r\n        // we can't give people infinite ethereum\r\n        if(tokenSupply_ > 0){\r\n            \r\n            // add tokens to the pool\r\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\r\n \r\n            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\r\n            profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\r\n            \r\n            // calculate the amount of tokens the customer receives over his purchase \r\n            _fee = _fee - (_fee-(_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\r\n        \r\n        } else {\r\n            // add tokens to the pool\r\n            tokenSupply_ = _amountOfTokens;\r\n        }\r\n        \r\n        // update circulating supply & the ledger address for the customer\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n        \r\n        // Tells the contract that the buyer doesn't deserve dividends for the tokens before they owned them;\r\n        // really i know you think you do but you don't\r\n        int256 _updatedPayouts = (int256) ((profitPerShare_ * _amountOfTokens) - _fee);\r\n        payoutsTo_[_customerAddress] += _updatedPayouts;\r\n        \r\n        // fire event\r\n        emit onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, _referredBy);\r\n        \r\n        return _amountOfTokens;\r\n    }\r\n\r\n    /**\r\n     * Calculate Token price based on an amount of incoming ethereum\r\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\r\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\r\n     */\r\n    function ethereumToTokens_(uint256 _ethereum)\r\n        internal\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 _tokensReceived = \r\n\t\t(\r\n\t\t\t// underflow attempts BTFO\r\n\t\t\tSafeMath.sub(\r\n\t\t\t\t(sqrt\r\n\t\t\t\t\t(\r\n\t\t\t\t\t\t(tokenPriceInitial_)**2 * 10**36\r\n\t\t\t\t\t\t+\r\n\t\t\t\t\t\t(tokenPriceInitial_) * (tokenPriceIncremental_) * 10**36\r\n\t\t\t\t\t\t+\r\n\t\t\t\t\t\t25 * (tokenPriceIncremental_)**2 * 10**34\r\n\t\t\t\t\t\t+\r\n\t\t\t\t\t\t(tokenPriceIncremental_)**2 * (tokenSupply_)**2\r\n\t\t\t\t\t\t+\r\n\t\t\t\t\t\t2 * (tokenPriceIncremental_) * (tokenPriceInitial_) * (tokenSupply_) * 10**18\r\n\t\t\t\t\t\t+\r\n\t\t\t\t\t\t(tokenPriceIncremental_)**2 * (tokenSupply_) * 10**18\r\n\t\t\t\t\t\t+\r\n\t\t\t\t\t\t2 * (tokenPriceIncremental_) * (_ethereum) * 10**36\r\n\t\t\t\t\t)\r\n\t\t\t\t), ((tokenPriceInitial_)* 10**18 + 5 * (tokenPriceIncremental_) * 10**17)\r\n\t\t\t) / (tokenPriceIncremental_)\r\n        ) - (tokenSupply_)\r\n        ;\r\n  \r\n        return _tokensReceived;\r\n    }\r\n    \r\n    /**\r\n     * Calculate token sell value.\r\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\r\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\r\n     */\r\n     function tokensToEthereum_(uint256 _tokens)\r\n        internal\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 _etherReceived =\r\n        (\r\n            // underflow attempts BTFO\r\n            SafeMath.sub(\r\n                (\r\n\t\t\t\t\t((tokenPriceIncremental_) * (_tokens) * (tokenSupply_)) / 1e18\r\n                    +\r\n                    (tokenPriceInitial_) * (_tokens)\r\n                    +\r\n                    ((tokenPriceIncremental_) * (_tokens)) / 2        \r\n                ), (\r\n\t\t\t\t\t((tokenPriceIncremental_) * (_tokens**2)) / 2\r\n\t\t\t\t) / 1e18\r\n\t\t\t)\r\n        ) / 1e18\r\n\t\t;\r\n        \r\n\t\treturn _etherReceived;\r\n    }\r\n    \r\n    \r\n    //This is where all your gas goes, sorry\r\n    //Not sorry, you probably only paid 1 gwei\r\n    function sqrt(uint x) internal pure returns (uint y) {\r\n        uint z = (x + 1) / 2;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"canAcceptTokens_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_weiToSpend\",\"type\":\"uint256\"}],\"name\":\"calculateTokensReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokensToSell\",\"type\":\"uint256\"}],\"name\":\"calculateEthereumReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"onlyAmbassadors\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"antiPumpAndDumpEnd_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"myLastRef\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingRequirement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherToSendFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_includeReferralBonus\",\"type\":\"bool\"}],\"name\":\"myDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthereumBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"setStakingRequirement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableInitialStage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toAddress\",\"type\":\"address\"},{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setCanAcceptTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundAddress_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_identifier\",\"type\":\"address\"}],\"name\":\"setAdministrator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referredBy\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"incomingEthereum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"referredBy\",\"type\":\"address\"}],\"name\":\"onTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethereumEarned\",\"type\":\"uint256\"}],\"name\":\"onTokenSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumReinvested\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"}],\"name\":\"onReinvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"HodlFund","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://2e89346cd1d13139cf905bc979fc36bf39c971c106004367c4f39b0b7fae2c93"}]}