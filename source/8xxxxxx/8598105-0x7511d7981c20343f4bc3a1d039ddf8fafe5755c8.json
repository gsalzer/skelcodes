{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity =0.5.11;\r\n\r\n// * Gods Unchained Raffle Token Exchange\r\n//\r\n// * Version 1.0\r\n//\r\n// * A dedicated contract for listing (selling) and buying raffle tokens.\r\n//\r\n// * https://gu.cards\r\n\r\ncontract ERC20Interface {\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n}\r\n\r\ncontract IERC20Interface {\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ncontract RaffleToken is ERC20Interface, IERC20Interface {}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract RaffleTokenExchange {\r\n    using SafeMath for uint256;\r\n\r\n    //////// V A R I A B L E S\r\n    //\r\n    // The raffle token contract\r\n    //\r\n    RaffleToken constant public raffleContract = RaffleToken(0x0C8cDC16973E88FAb31DD0FCB844DdF0e1056dE2);\r\n    //\r\n    // In case the exchange is paused.\r\n    //\r\n    bool public paused;\r\n    //\r\n    // Standard contract ownership.\r\n    //\r\n    address payable public owner;\r\n    //\r\n    // Next id for the next listing\r\n    //\r\n    uint256 public nextListingId;\r\n    //\r\n    // All raffle token listings mapped by id\r\n    //\r\n    mapping (uint256 => Listing) public listingsById;\r\n    //\r\n    // All purchases\r\n    //\r\n    mapping (uint256 => Purchase) public purchasesById;\r\n    //\r\n    // Next id for the next purche\r\n    //\r\n    uint256 public nextPurchaseId;\r\n\r\n    //////// S T R U C T S\r\n    //\r\n    //  A listing of raffle tokens\r\n    //\r\n    struct Listing {\r\n        //\r\n        // price per token (in wei).\r\n        //\r\n        uint256 pricePerToken;\r\n        //\r\n        //\r\n        // How many tokens? (Original Amount)\r\n        //\r\n        uint256 initialAmount;\r\n        //\r\n        // How many tokens left? (Maybe altered due to partial sales)\r\n        //\r\n        uint256 amountLeft;\r\n        //\r\n        // Listed by whom?\r\n        //\r\n        address payable seller;\r\n        //\r\n        // Active/Inactive listing?\r\n        //\r\n        bool active;\r\n    }\r\n    //\r\n    //  A purchase of raffle tokens\r\n    //\r\n    struct Purchase {\r\n        //\r\n        // How many tokens?\r\n        //\r\n        uint256 totalAmount;\r\n        //\r\n        // total price payed\r\n        //\r\n        uint256 totalAmountPayed;\r\n        //\r\n        // When did the purchase happen?\r\n        //\r\n        uint256 timestamp;\r\n    }\r\n\r\n    //////// EVENTS\r\n    //\r\n    //\r\n    //\r\n    event Listed(uint256 id, uint256 pricePerToken, uint256 initialAmount, address seller);\r\n    event Canceled(uint256 id);\r\n    event Purchased(uint256 id, uint256 totalAmount, uint256 totalAmountPayed, uint256 timestamp);\r\n\r\n    //////// M O D I F I E R S\r\n    //\r\n    // Invokable only by contract owner.\r\n    //\r\n    modifier onlyContractOwner {\r\n        require(msg.sender == owner, \"Function called by non-owner.\");\r\n        _;\r\n    }\r\n    //\r\n    // Invokable only if exchange is not paused.\r\n    //\r\n    modifier onlyUnpaused {\r\n        require(paused == false, \"Exchange is paused.\");\r\n        _;\r\n    }\r\n\r\n    //////// C O N S T R U C T O R\r\n    //\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        nextListingId = 916;\r\n        nextPurchaseId = 344;\r\n    }\r\n\r\n    //////// F U N C T I O N S\r\n    //\r\n    // buyRaffle\r\n    //\r\n    function buyRaffle(uint256[] calldata amounts, uint256[] calldata listingIds) payable external onlyUnpaused {\r\n        require(amounts.length == listingIds.length, \"You have to provide amounts for every single listing!\");\r\n        uint256 totalAmount;\r\n        uint256 totalAmountPayed;\r\n        for (uint256 i = 0; i < listingIds.length; i++) {\r\n            uint256 id = listingIds[i];\r\n            uint256 amount = amounts[i];\r\n            Listing storage listing = listingsById[id];\r\n            require(listing.active, \"Listing is not active anymore!\");\r\n            listing.amountLeft = listing.amountLeft.sub(amount);\r\n            require(listing.amountLeft >= 0, \"Amount left needs to be higher than 0.\");\r\n            if(listing.amountLeft == 0) { listing.active = false; }\r\n            uint256 amountToPay = listing.pricePerToken * amount;\r\n            listing.seller.transfer(amountToPay);\r\n            totalAmountPayed = totalAmountPayed.add(amountToPay);\r\n            totalAmount = totalAmount.add(amount);\r\n            require(raffleContract.transferFrom(listing.seller, msg.sender, amount), 'Token transfer failed!');\r\n        }\r\n        require(totalAmountPayed <= msg.value, 'Overpayed!');\r\n        uint256 id = nextPurchaseId++;\r\n        Purchase storage purchase = purchasesById[id];\r\n        purchase.totalAmount = totalAmount;\r\n        purchase.totalAmountPayed = totalAmountPayed;\r\n        purchase.timestamp = now;\r\n        emit Purchased(id, totalAmount, totalAmountPayed, now);\r\n    }\r\n    //\r\n    // Add listing\r\n    //\r\n    function addListing(uint256 initialAmount, uint256 pricePerToken) external onlyUnpaused {\r\n        require(raffleContract.balanceOf(msg.sender) >= initialAmount, \"Amount to sell is higher than balance!\");\r\n        require(raffleContract.allowance(msg.sender, address(this)) >= initialAmount, \"Allowance is to small (increase allowance)!\");\r\n        uint256 id = nextListingId++;\r\n        Listing storage listing = listingsById[id];\r\n        listing.initialAmount = initialAmount;\r\n        listing.amountLeft = initialAmount;\r\n        listing.pricePerToken = pricePerToken;\r\n        listing.seller = msg.sender;\r\n        listing.active = true;\r\n        emit Listed(id, listing.pricePerToken, listing.initialAmount, listing.seller);\r\n    }\r\n    //\r\n    // Cancel listing\r\n    //\r\n    function cancelListing(uint256 id) external {\r\n        Listing storage listing = listingsById[id];\r\n        require(listing.active, \"This listing was turned inactive already!\");\r\n        require(listing.seller == msg.sender || owner == msg.sender, \"Only the listing owner or the contract owner can cancel the listing!\");\r\n        listing.active = false;\r\n        emit Canceled(id);\r\n    }\r\n    //\r\n    // Set paused\r\n    //\r\n    function setPaused(bool value) external onlyContractOwner {\r\n        paused = value;\r\n    }\r\n    //\r\n    // Funds withdrawal to cover operational costs\r\n    //\r\n    function withdrawFunds(uint256 withdrawAmount) external onlyContractOwner {\r\n        owner.transfer(withdrawAmount);\r\n    }\r\n    //\r\n    // Contract may be destroyed only when there is nothing else going on. \r\n    // All funds are transferred to contract owner.\r\n    //\r\n    function kill() external onlyContractOwner {\r\n        selfdestruct(owner);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listingsById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountLeft\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextPurchaseId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"cancelListing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"listingIds\",\"type\":\"uint256[]\"}],\"name\":\"buyRaffle\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raffleContract\",\"outputs\":[{\"internalType\":\"contract RaffleToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"}],\"name\":\"addListing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextListingId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"purchasesById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountPayed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"Listed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Canceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmountPayed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Purchased\",\"type\":\"event\"}]","ContractName":"RaffleTokenExchange","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://97573ef32e4b299ca2ba39de4b050b159470d8ae0e2e7e736eec63d04f8615f7"}]}