{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2019-10-13\r\n*/\r\n\r\npragma solidity 0.5.12; /*\r\n\r\n\r\n___________________________________________________________________\r\n  _      _                                        ______           \r\n  |  |  /          /                                /              \r\n--|-/|-/-----__---/----__----__---_--_----__-------/-------__------\r\n  |/ |/    /___) /   /   ' /   ) / /  ) /___)     /      /   )     \r\n__/__|____(___ _/___(___ _(___/_/_/__/_(___ _____/______(___/__o_o_\r\n\r\n\r\n\r\n███╗   ██╗███████╗██╗  ██╗██╗  ██╗██╗   ██╗███████╗     ██████╗ ██████╗ ██╗███╗   ██╗\r\n████╗  ██║██╔════╝╚██╗██╔╝╚██╗██╔╝██║   ██║██╔════╝    ██╔════╝██╔═══██╗██║████╗  ██║\r\n██╔██╗ ██║█████╗   ╚███╔╝  ╚███╔╝ ██║   ██║███████╗    ██║     ██║   ██║██║██╔██╗ ██║\r\n██║╚██╗██║██╔══╝   ██╔██╗  ██╔██╗ ██║   ██║╚════██║    ██║     ██║   ██║██║██║╚██╗██║\r\n██║ ╚████║███████╗██╔╝ ██╗██╔╝ ██╗╚██████╔╝███████║    ╚██████╗╚██████╔╝██║██║ ╚████║\r\n╚═╝  ╚═══╝╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝ ╚══════╝     ╚═════╝ ╚═════╝ ╚═╝╚═╝  ╚═══╝\r\n                                                                                     \r\n\r\n\r\n=== 'NEXXUS COIN' Token contract with following features ===\r\n    => ERC20 Compliance\r\n    => Higher degree of control by owner - safeguard functionality\r\n    => SafeMath implementation \r\n    => Burnable and minting \r\n    => approve and call\r\n    => Increase and decrease allowance\r\n    => air drop (active)\r\n\r\n\r\n======================= Quick Stats ===================\r\n    => Name        : Nexxus\r\n    => Symbol      : NXR\r\n    => Total supply: 375,000,000 (375 Million)\r\n    => Decimals    : 8\r\n\r\n\r\n============= Independant Audit of the code ============\r\n    => Multiple Freelancers Auditors\r\n    => Community Audit by Bug Bounty program\r\n    => Scanned code with MythX, Oyente, smartdec tool, chain security tool\r\n\r\n\r\n-------------------------------------------------------------------\r\n Copyright (c) 2019 onwards Nexxus Inc. ( https://Nexxuscoin.com )\r\n Contract designed with ❤ by EtherAuthority ( https://EtherAuthority.io )\r\n-------------------------------------------------------------------\r\n*/ \r\n\r\n\r\n\r\n\r\n\r\n//*******************************************************************//\r\n//------------------------ SafeMath Library -------------------------//\r\n//*******************************************************************//\r\n/**\r\n    * @title SafeMath\r\n    * @dev Math operations with safety checks that throw on error\r\n    */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n        return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b, 'SafeMath mul failed');\r\n    return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a, 'SafeMath sub failed');\r\n    return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, 'SafeMath add failed');\r\n    return c;\r\n    }\r\n}\r\n\r\n\r\n//*******************************************************************//\r\n//------------------ Contract to Manage Ownership -------------------//\r\n//*******************************************************************//\r\n    \r\ncontract owned {\r\n    address payable public owner;\r\n    address payable internal newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address payable _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0), 'Invalid address');\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    //this flow is to prevent transferring ownership to wrong wallet by mistake\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n \r\n\r\n    \r\n//****************************************************************************//\r\n//---------------------        MAIN CODE STARTS HERE     ---------------------//\r\n//****************************************************************************//\r\n    \r\ncontract NexxusCoin is owned {\r\n    \r\n\r\n    /*===============================\r\n    =         DATA STORAGE          =\r\n    ===============================*/\r\n\r\n    // Public variables of the token\r\n    using SafeMath for uint256;\r\n    string constant public name = \"Nexxus\";\r\n    string constant public symbol = \"NXR\";\r\n    uint256 constant public decimals = 8;\r\n    uint256 public totalSupply = 375000000 * (10**decimals);   //375 million tokens\r\n\tuint256 constant public maxSupply = 375000000 * (10**decimals);   //375 million tokens\r\n    bool public safeguard;  //putting safeguard on will halt all non-owner functions\r\n\r\n    // This creates a mapping with all data storage\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    mapping (address => bool) public frozenAccount;\r\n\r\n\r\n    /*===============================\r\n    =         PUBLIC EVENTS         =\r\n    ===============================*/\r\n\r\n    // This generates a public event of token transfer\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value);\r\n        \r\n    // This generates a public event for frozen (blacklisting) accounts\r\n    event FrozenAccounts(address target, bool frozen);\r\n    \r\n    // This will log approval of token Transfer\r\n    event Approval(address indexed from, address indexed spender, uint256 value);\r\n\r\n\r\n    /*======================================\r\n    =       STANDARD ERC20 FUNCTIONS       =\r\n    ======================================*/\r\n\r\n    /* Internal transfer, only can be called by this contract */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        \r\n        //checking conditions\r\n        require(!safeguard, 'Safeguard is placed');\r\n        require(!frozenAccount[_from], 'Frozen Account');                     // Check if sender is frozen\r\n        require(!frozenAccount[_to], 'Frozen Account');                       // Check if recipient is frozen\r\n        require(_to != address(0), 'Invalid address');\r\n        // overflow and undeflow checked by SafeMath Library\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the sender\r\n        balanceOf[_to] = balanceOf[_to].add(_value);        // Add the same to the recipient\r\n        \r\n        // emit Transfer event\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n        * Transfer tokens\r\n        *\r\n        * Send `_value` tokens to `_to` from your account\r\n        *\r\n        * @param _to The address of the recipient\r\n        * @param _value the amount to send\r\n        */\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        //no need to check for input validations, as that is ruled by SafeMath\r\n        _transfer(msg.sender, _to, _value);\r\n        \r\n        return true;\r\n    }\r\n\r\n    /**\r\n        * Transfer tokens from other address\r\n        *\r\n        * Send `_value` tokens to `_to` in behalf of `_from`\r\n        *\r\n        * @param _from The address of the sender\r\n        * @param _to The address of the recipient\r\n        * @param _value the amount to send\r\n        */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        //checking of allowance and token value is done by SafeMath\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        * Set allowance for other address\r\n        *\r\n        * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n        *\r\n        * @param _spender The address authorized to spend\r\n        * @param _value the max amount they can spend\r\n        */\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        require(!safeguard, 'Safeguard is placed');\r\n        require(balanceOf[msg.sender] >= _value, 'Balance does not have enough tokens');\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    /*=====================================\r\n    =       CUSTOM PUBLIC FUNCTIONS       =\r\n    ======================================*/\r\n    \r\n    constructor() public{\r\n        //sending all the tokens to Owner\r\n        balanceOf[owner] = totalSupply;\r\n        \r\n        //firing event which logs this transaction\r\n        emit Transfer(address(0), owner, totalSupply);\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Increase allowance of spender\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        require(allowance[msg.sender][spender] > 0 ,\"no amount is approved\" );\r\n        uint256 newAmount = allowance[msg.sender][spender].add(addedValue);\r\n        approve(spender, newAmount);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Decrease allowance of spender\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        require(allowance[msg.sender][spender] >= subtractedValue,\"subtractedValue is not correct\" );\r\n        uint256 newAmount = allowance[msg.sender][spender].sub(subtractedValue);\r\n        approve(spender, newAmount);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Approve and make call to any _spender smart contract.\r\n     */\r\n    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool success)  {\r\n        approve(_spender, _value);\r\n        (bool result,) = _spender.call(abi.encodeWithSignature(\"receiveApproval(address,uint256,address,bytes)\", msg.sender, _value, address(this), _extraData));\r\n        if(!result){\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        * Destroy tokens\r\n        *\r\n        * Remove `_value` tokens from the system irreversibly\r\n        *\r\n        * @param _value the amount of money to burn\r\n        */\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(!safeguard, 'Safeguard is placed');\r\n        //checking of enough token balance is done by SafeMath\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);  // Subtract from the sender\r\n        totalSupply = totalSupply.sub(_value);                      // Updates totalSupply\r\n        emit Burn(msg.sender, _value);\r\n        emit Transfer(msg.sender, address(0), _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        * Destroy tokens from other account\r\n        *\r\n        * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n        *\r\n        * @param _from the address of the sender\r\n        * @param _value the amount of money to burn\r\n        */\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(!safeguard, 'Safeguard is placed');\r\n        //checking of allowance and token value is done by SafeMath\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);                         // Subtract from the targeted balance\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value); // Subtract from the sender's allowance\r\n        totalSupply = totalSupply.sub(_value);                                   // Update totalSupply\r\n        emit  Burn(_from, _value);\r\n        emit Transfer(_from, address(0), _value);\r\n        return true;\r\n    }\r\n        \r\n    \r\n    /** \r\n        * @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\r\n        * @param target Address to be frozen\r\n        * @param freeze either to freeze it or not\r\n        */\r\n    function freezeAccount(address target, bool freeze) onlyOwner public {\r\n        frozenAccount[target] = freeze;\r\n        emit  FrozenAccounts(target, freeze);\r\n    }\r\n    \r\n    /** \r\n        * @notice Create `mintedAmount` tokens and send it to `target`\r\n        * @param target Address to receive the tokens\r\n        * @param mintedAmount the amount of tokens it will receive\r\n        */\r\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\r\n\t\trequire(totalSupply.add(mintedAmount) <= maxSupply, 'Cannot Mint more than maximum supply');\r\n        balanceOf[target] = balanceOf[target].add(mintedAmount);\r\n        totalSupply = totalSupply.add(mintedAmount);\r\n        emit Transfer(address(0), target, mintedAmount);\r\n    }\r\n\r\n        \r\n\r\n    /**\r\n        * Owner can transfer tokens from contract to owner address\r\n        *\r\n        * When safeguard is true, then all the non-owner functions will stop working.\r\n        * When safeguard is false, then all the functions will resume working back again!\r\n        */\r\n    \r\n    function manualWithdrawTokens(uint256 tokenAmount) public onlyOwner{\r\n        // no need for overflow checking as that will be done in transfer function\r\n        _transfer(address(this), owner, tokenAmount);\r\n    }\r\n    \r\n    \r\n    /**\r\n        * Change safeguard status on or off\r\n        *\r\n        * When safeguard is true, then all the non-owner functions will stop working.\r\n        * When safeguard is false, then all the functions will resume working back again!\r\n        */\r\n    function changeSafeguardStatus() onlyOwner public{\r\n        if (safeguard == false){\r\n            safeguard = true;\r\n        }\r\n        else{\r\n            safeguard = false;    \r\n        }\r\n    }\r\n    \r\n\r\n    /*************************************/\r\n    /*    Section for User Air drop      */\r\n    /*************************************/\r\n    \r\n    \r\n    /**\r\n     * Run an Air-Drop\r\n     *\r\n     * It requires an array of all the addresses and amount of tokens to distribute\r\n     * It will only process first 150 recipients. That limit is fixed to prevent gas limit\r\n     */\r\n    function airdrop(address[] memory recipients,uint256[] memory tokenAmount) public  {\r\n        uint256 totalAddresses = recipients.length;\r\n        require(totalAddresses <= 150,\"Too many recipients\");\r\n        for(uint i = 0; i < totalAddresses; i++)\r\n        {\r\n          //This will loop through all the recipients and send them the specified tokens\r\n          //Input data validation is unncessary, as that is done by SafeMath and which also saves some gas.\r\n          transfer(recipients[i], tokenAmount[i]);\r\n        }\r\n    }\r\n    \r\n \r\n\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenAccounts\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenAmount\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"changeSafeguardStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"manualWithdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"safeguard\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NexxusCoin","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://c691d62b97840de6a95e20532c7b522fa920abf8a73786bf9b36ccf0bbc20897"}]}