{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.26;\r\n\r\n/***************\r\nDDR CONTRACT\r\n***************/\r\n\r\ncontract DigitalDollarRetainer {\r\n\r\n// **terms governing DDR**\r\nstring public terms = \"|| Establishing a retainer and acknowledging the mutual consideration and agreement hereby, Client, indentified as ethereum address '0x[[Client]]', commits a digital payment transactional script capped at '$[[Payment Cap in Dollars]]' for the benefit of Provider, identified as ethereum address '0x[[Provider]]', in exchange for the prompt satisfaction of the following deliverables, '[[Deliverable]]', to Client by Provider upon scripted payments set at the rate of '$[[Deliverable Rate]]' per deliverable, with such retainer relationship not to exceed '[[Retainer Duration in Days]]' days and to be governed by the choice of [[Choice of Law and Arbitration Forum]] law and 'either/or' arbitration rules in [[Choice of Law and Arbitration Forum]]. ||\";\r\n\r\n// **ERC-20 Token References**\r\naddress public daiToken = 0x8ad3aA5d5ff084307d28C8f514D7a193B2Bfe725; // **designated ERC-20 token for payments - DAI 'digital dollar'**\r\naddress public usdcToken = 0x8ad3aA5d5ff084307d28C8f514D7a193B2Bfe725; // **designated ERC-20 token for payments - USDC 'digital dollar'**\r\n\r\n// **Retainer References**\r\naddress public client; // **client ethereum address**\r\naddress public provider; // **ethereum address that receives payments in exchange for goods or services**\r\nstring public deliverable; // **goods or services (deliverable) retained for benefit of ethereum payments**\r\nstring public governingLawForum; // **choice of law and forum for retainer relationship**\r\nuint256 public retainerDurationDays; // **duration of retainer in days**\r\nuint256 public deliverableRate; // **rate for retained deliverables in digital dollars**\r\nuint256 public paid; // **amount paid thus far under retainer in digital dollars**\r\nuint256 public payCap; // **retainer payment cap in digital dollars**\r\n\r\nevent Paid(uint256 amount, address indexed); // **triggered on successful payments**\r\n\r\nconstructor(address _client, address _provider, string _deliverable, string _governingLawForum, uint256 _retainerDurationDays, uint256 _deliverableRate, uint256 _payCap) public {\r\nclient = _client;\r\nprovider = _provider;\r\ndeliverable = _deliverable;\r\ngoverningLawForum = _governingLawForum;\r\nretainerDurationDays = _retainerDurationDays;\r\ndeliverableRate = _deliverableRate;\r\npayCap = _payCap;\r\nrequire(deliverableRate <= payCap, \"constructor: deliverableRate cannot exceed payCap\"); // program safety check / economics\r\n}\r\n\r\nfunction payDAI() public { // **forwards approved DAI token amount to provider ethereum address**\r\nrequire(msg.sender == client); // program safety check / authorization\r\nrequire(paid + deliverableRate <= payCap, \"payDAI: payCap exceeded\"); // program safety check / economics\r\nERC20 dai = ERC20(daiToken);\r\ndai.transferFrom(msg.sender, provider, deliverableRate);\r\npaid = paid + deliverableRate;\r\nemit Paid(deliverableRate, msg.sender);\r\n}\r\n\r\nfunction payUSDC() public { // **forwards approved USDC token amount to provider ethereum address**\r\nrequire(msg.sender == client); // program safety check / authorization\r\nrequire(paid + deliverableRate <= payCap, \"payUSDC: payCap exceeded\"); // program safety check / economics\r\nERC20 usdc = ERC20(usdcToken);\r\nusdc.transferFrom(msg.sender, provider, deliverableRate);\r\npaid = paid + deliverableRate;\r\nemit Paid(deliverableRate, msg.sender);\r\n}\r\n}\r\n\r\n/***************\r\nERC20 CONTRACT\r\n***************/\r\n\r\n/**\r\n* @title ERC20\r\n* @dev see https://github.com/ethereum/EIPs/issues/20\r\n*/\r\ncontract ERC20 {\r\nuint256 public totalSupply;\r\n\r\nfunction balanceOf(address who) public view returns (uint256);\r\nfunction transfer(address to, uint256 value) public returns (bool);\r\nfunction allowance(address owner, address spender) public view returns (uint256);\r\nfunction transferFrom(address from, address to, uint256 value) public returns (bool);\r\nfunction approve(address spender, uint256 value) public returns (bool);\r\n\r\nevent Approval(address indexed owner, address indexed spender, uint256 value);\r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/***************\r\nFACTORY CONTRACT\r\n***************/\r\n\r\ncontract DigitalDollarRetainerFactory {\r\n\r\n// **index of created contracts**\r\nmapping (address => bool) public validContracts;\r\naddress[] public contracts;\r\n\r\n// **useful to know the row count in contracts index**\r\nfunction getContractCount()\r\npublic\r\nview\r\nreturns(uint contractCount)\r\n{\r\nreturn contracts.length;\r\n}\r\n\r\n// **get all contracts**\r\nfunction getDeployedContracts() public view returns (address[])\r\n{\r\nreturn contracts;\r\n}\r\n\r\n// **deploy a new contract**\r\nfunction newDigitalDollarRetainer(address _client, address _provider, string _deliverable, string _governingLawForum, uint256 _retainerDurationDays, uint256 _deliverableRate, uint256 _payCap)\r\npublic\r\nreturns(address)\r\n{\r\nDigitalDollarRetainer c = new DigitalDollarRetainer(_client, _provider, _deliverable, _governingLawForum, _retainerDurationDays, _deliverableRate, _payCap);\r\nvalidContracts[c] = true;\r\ncontracts.push(c);\r\nreturn c;\r\n}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_client\",\"type\":\"address\"},{\"name\":\"_provider\",\"type\":\"address\"},{\"name\":\"_deliverable\",\"type\":\"string\"},{\"name\":\"_governingLawForum\",\"type\":\"string\"},{\"name\":\"_retainerDurationDays\",\"type\":\"uint256\"},{\"name\":\"_deliverableRate\",\"type\":\"uint256\"},{\"name\":\"_payCap\",\"type\":\"uint256\"}],\"name\":\"newDigitalDollarRetainer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contracts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"validContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractCount\",\"outputs\":[{\"name\":\"contractCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDeployedContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DigitalDollarRetainerFactory","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://76e1ace8d41392a5036ee28ca204dbc1a3f393e5530133405b339158e8a66b41"}]}