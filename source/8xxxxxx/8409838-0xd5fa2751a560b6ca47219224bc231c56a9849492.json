{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\n\n\nlibrary HitchensUnorderedAddressSetLib {\n\n    struct Set {\n        mapping(address => uint) keyPointers;\n        address[] keyList;\n    }\n\n    function insert(Set storage self, address key) internal {\n        require(key != address(0), \"UnorderedKeySet(100) - Key cannot be 0x0\");\n        require(!exists(self, key), \"UnorderedAddressSet(101) - Address (key) already exists in the set.\");\n        self.keyPointers[key] = self.keyList.push(key)-1;\n    }\n\n    function remove(Set storage self, address key) internal {\n        require(exists(self, key), \"UnorderedKeySet(102) - Address (key) does not exist in the set.\");\n        address keyToMove = self.keyList[count(self)-1];\n        uint rowToReplace = self.keyPointers[key];\n        self.keyPointers[keyToMove] = rowToReplace;\n        self.keyList[rowToReplace] = keyToMove;\n        delete self.keyPointers[key];\n        self.keyList.length--;\n    }\n\n    function count(Set storage self) internal view returns(uint) {\n        return(self.keyList.length);\n    }\n\n    function exists(Set storage self, address key) internal view returns(bool) {\n        if(self.keyList.length == 0) return false;\n        return self.keyList[self.keyPointers[key]] == key;\n    }\n\n    function keyAtIndex(Set storage self, uint index) internal view returns(address) {\n        return self.keyList[index];\n    }\n\n    function nukeSet(Set storage self) internal {\n        delete self.keyList;\n    }\n}\n\n\n\ncontract Erasure_Users {\n\n    using HitchensUnorderedAddressSetLib for HitchensUnorderedAddressSetLib.Set;\n    HitchensUnorderedAddressSetLib.Set private _users;\n\n    mapping (address => bytes) private _metadata;\n\n    event UserRegistered(address indexed user, bytes data);\n    event UserRemoved(address indexed user);\n\n    // state functions\n\n    function registerUser(bytes memory data) public {\n        require(!_users.exists(msg.sender), \"user already exists\");\n\n        // add user\n        _users.insert(msg.sender);\n\n        // set metadata\n        _metadata[msg.sender] = data;\n\n        // emit event\n        emit UserRegistered(msg.sender, data);\n    }\n\n    function removeUser() public {\n        // require user is registered\n        require(_users.exists(msg.sender), \"user does not exist\");\n\n        // remove user\n        _users.remove(msg.sender);\n\n        // delete metadata\n        delete _metadata[msg.sender];\n\n        // emit event\n        emit UserRemoved(msg.sender);\n    }\n\n    // view functions\n\n    function getUserData(address user) public view returns (bytes memory data) {\n        data = _metadata[user];\n    }\n\n    function getUsers() public view returns (address[] memory users) {\n        users = _users.keyList;\n    }\n\n    function getUserCount() public view returns (uint256 count) {\n        count = _users.count();\n    }\n\n    // Note: startIndex is inclusive, endIndex exclusive\n    function getPaginatedUsers(uint256 startIndex, uint256 endIndex) public view returns (address[] memory users) {\n        require(startIndex < endIndex, \"startIndex must be less than endIndex\");\n        require(endIndex <= _users.count(), \"end index out of range\");\n\n        // initialize fixed size memory array\n        address[] memory range = new address[](endIndex - startIndex);\n\n        // Populate array with addresses in range\n        for (uint256 i = startIndex; i < endIndex; i++) {\n            range[i - startIndex] = _users.keyAtIndex(i);\n        }\n\n        // return array of addresses\n        users = range;\n    }\n}\n","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getUsers\",\"outputs\":[{\"name\":\"users\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"registerUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUserCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"startIndex\",\"type\":\"uint256\"},{\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"getPaginatedUsers\",\"outputs\":[{\"name\":\"users\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"removeUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserData\",\"outputs\":[{\"name\":\"data\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"UserRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"UserRemoved\",\"type\":\"event\"}]","ContractName":"Erasure_Users","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1f6285e24136e209510819b06f6b46ab0c5872149848f606e342bf219279bc3f"}]}