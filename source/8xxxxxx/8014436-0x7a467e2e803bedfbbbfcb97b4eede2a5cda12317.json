{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\nlibrary SafeERC20Detailed {\r\n\r\n    function safeDecimals(address token) internal returns (uint256 decimals) {\r\n\r\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSignature(\"decimals()\"));\r\n\r\n        if (!success) {\r\n            (success, data) = address(token).call(abi.encodeWithSignature(\"Decimals()\"));\r\n        }\r\n\r\n        if (!success) {\r\n            (success, data) = address(token).call(abi.encodeWithSignature(\"DECIMALS()\"));\r\n        }\r\n\r\n        if (!success) {\r\n            return 18;\r\n        }\r\n\r\n        assembly {\r\n            decimals := mload(add(data, 32))\r\n        }\r\n    }\r\n\r\n    function safeSymbol(address token) internal returns(bytes32 symbol) {\r\n\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSignature(\"symbol()\"));\r\n\r\n        if (!success) {\r\n            (success, data) = token.call(abi.encodeWithSignature(\"Symbol()\"));\r\n        }\r\n\r\n        if (!success) {\r\n            (success, data) = token.call(abi.encodeWithSignature(\"SYMBOL()\"));\r\n        }\r\n\r\n        if (!success) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 dataLength = data.length;\r\n        assembly {\r\n            symbol := mload(add(data, dataLength))\r\n        }\r\n    }\r\n}\r\n\r\ncontract SafeAllowanceIERC20 {\r\n    function allowance(address spender, address who) public returns(uint256);\r\n}\r\n\r\ncontract Approved {\r\n\r\n    using SafeERC20Detailed for address;\r\n\r\n    function allowances(\r\n        address source,\r\n        address[] calldata tokens,\r\n        address[] calldata spenders\r\n    )\r\n        external\r\n        returns(\r\n            uint256[] memory results,\r\n            uint256[] memory decimals,\r\n            bytes32[] memory symbols\r\n        )\r\n    {\r\n        require(tokens.length == spenders.length, \"Invalid argument array lengths\");\r\n\r\n        results = new uint256[](tokens.length);\r\n        decimals = new uint256[](tokens.length);\r\n        symbols = new bytes32[](tokens.length);\r\n\r\n        for (uint i = 0; i < tokens.length; i++) {\r\n\r\n            results[i] = SafeAllowanceIERC20(tokens[i]).allowance(source, spenders[i]);\r\n            decimals[i] = tokens[i].safeDecimals();\r\n            symbols[i] = tokens[i].safeSymbol();\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"source\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"address[]\"},{\"name\":\"spenders\",\"type\":\"address[]\"}],\"name\":\"allowances\",\"outputs\":[{\"name\":\"results\",\"type\":\"uint256[]\"},{\"name\":\"decimals\",\"type\":\"uint256[]\"},{\"name\":\"symbols\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Approved","CompilerVersion":"v0.5.9+commit.e560f70d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://56b92a65df9d9ec1cd8ddbefe2f3f16c0daf194bdacebab66d46f312ded888b5"}]}