{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n    owner.sol v1.0.0\r\n    Owner\r\n    \r\n    This file is part of Screenist [NIS] token project.\r\n    \r\n    Author: Andor 'iFA' Rajci, Fusion Solutions KFT @ contact@fusionsolutions.io\r\n*/\r\npragma solidity 0.4.26;\r\n\r\ncontract Owned {\r\n    /* Variables */\r\n    address public owner = msg.sender;\r\n    /* Constructor */\r\n    constructor(address _owner) public {\r\n        if ( _owner == address(0x00000000000000000000000000000000000000) ) {\r\n            _owner = msg.sender;\r\n        }\r\n        owner = _owner;\r\n    }\r\n    /* Externals */\r\n    function replaceOwner(address _owner) external returns(bool) {\r\n        require( isOwner() );\r\n        owner = _owner;\r\n        return true;\r\n    }\r\n    /* Internals */\r\n    function isOwner() internal view returns(bool) {\r\n        return owner == msg.sender;\r\n    }\r\n    /* Modifiers */\r\n    modifier forOwner {\r\n        require( isOwner() );\r\n        _;\r\n    }\r\n}\r\n/*\r\n    safeMath.sol v1.0.0\r\n    Safe mathematical operations\r\n    \r\n    This file is part of Screenist [NIS] token project.\r\n    \r\n    Author: Andor 'iFA' Rajci, Fusion Solutions KFT @ contact@fusionsolutions.io\r\n*/\r\npragma solidity 0.4.26;\r\n\r\nlibrary SafeMath {\r\n    /* Internals */\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256 c) {\r\n        c = a + b;\r\n        assert( c >= a );\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256 c) {\r\n        c = a - b;\r\n        assert( c <= a );\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256 c) {\r\n        c = a * b;\r\n        assert( c == 0 || c / a == b );\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        return a / b;\r\n    }\r\n    function pow(uint256 a, uint256 b) internal pure returns(uint256 c) {\r\n        c = a ** b;\r\n        assert( c % a == 0 );\r\n        return a ** b;\r\n    }\r\n}\r\n/*\r\n    tokenDB.sol v1.0.0\r\n    Token Database\r\n    \r\n    This file is part of Screenist [NIS] token project.\r\n    \r\n    Author: Andor 'iFA' Rajci, Fusion Solutions KFT @ contact@fusionsolutions.io\r\n*/\r\npragma solidity 0.4.26;\r\n\r\ncontract TokenDB is Owned {\r\n    /* Declarations */\r\n    using SafeMath for uint256;\r\n    /* Structures */\r\n    struct balances_s {\r\n        uint256 amount;\r\n        bool valid;\r\n    }\r\n    struct vesting_s {\r\n        uint256 amount;\r\n        uint256 startBlock;\r\n        uint256 endBlock;\r\n        uint256 claimedAmount;\r\n        bool    valid;\r\n    }\r\n    /* Variables */\r\n    mapping(address => mapping(address => uint256)) private allowance;\r\n    mapping(address => balances_s) private balances;\r\n    mapping(address => vesting_s) public vesting;\r\n    uint256 public totalSupply;\r\n    address public tokenAddress;\r\n    address public oldDBAddress;\r\n    uint256 public totalVesting;\r\n    /* Constructor */\r\n    constructor(address _owner, address _tokenAddress, address _oldDBAddress) Owned(_owner) public {\r\n        oldDBAddress = _oldDBAddress;\r\n        tokenAddress = _tokenAddress;\r\n    }\r\n    /* Externals */\r\n    function changeTokenAddress(address _tokenAddress) external forOwner {\r\n        tokenAddress = _tokenAddress;\r\n    }\r\n    function mint(address _to, uint256 _amount) external forToken returns(bool _success) {\r\n        uint256 _receiverBalance = _getBalance(_to);\r\n        totalSupply = _getTotalSupply().add(_amount);\r\n        balances[_to].amount = _receiverBalance.add(_amount);\r\n        balances[_to].valid = true;\r\n        return true;\r\n    }\r\n    function transfer(address _from, address _to, uint256 _amount) external forToken returns(bool _success) {\r\n        uint256 _senderBalance = _getBalance(_from);\r\n        uint256 _receiverBalance = _getBalance(_to);\r\n        balances[_from].amount = _senderBalance.sub(_amount);\r\n        balances[_from].valid = true;\r\n        balances[_to].amount = _receiverBalance.add(_amount);\r\n        balances[_to].valid = true;\r\n        return true;\r\n    }\r\n    function bulkTransfer(address _from, address[] memory _to, uint256[] memory _amount) public forToken returns(bool _success) {\r\n        uint256 _senderBalance = _getBalance(_from);\r\n        uint256 _receiverBalance;\r\n        uint256 i;\r\n        for ( i=0 ; i<_to.length ; i++ ) {\r\n            _receiverBalance = _getBalance(_to[i]);\r\n            _senderBalance = _senderBalance.sub(_amount[i]);\r\n            balances[_to[i]].amount = _receiverBalance.add(_amount[i]);\r\n            balances[_to[i]].valid = true;\r\n        }\r\n        balances[_from].amount = _senderBalance;\r\n        balances[_from].valid = true;\r\n        return true;\r\n    }\r\n    function setAllowance(address _owner, address _spender, uint256 _amount) external forToken returns(bool _success) {\r\n        allowance[_owner][_spender] = _amount;\r\n        return true;\r\n    }\r\n    function setVesting(address _owner, uint256 _amount, uint256 _startBlock, uint256 _endBlock, uint256 _claimedAmount) external forToken returns(bool _success) {\r\n        uint256 _tv = _getTotalVesting();\r\n        if ( vesting[_owner].valid ) {\r\n            _tv = _tv.sub( vesting[_owner].amount.sub( vesting[_owner].claimedAmount ) );\r\n        }\r\n        if ( _amount > 0 ) {\r\n            _tv = _tv.add( _amount );\r\n        }\r\n        vesting[_owner].amount = _amount;\r\n        vesting[_owner].startBlock = _startBlock;\r\n        vesting[_owner].endBlock = _endBlock;\r\n        vesting[_owner].claimedAmount = _claimedAmount;\r\n        vesting[_owner].valid = true;\r\n        totalVesting = _tv;\r\n        return true;\r\n    }\r\n    /* Constants */\r\n    function getAllowance(address _owner, address _spender) public view returns(bool _success, uint256 _remaining) {\r\n        return ( true, allowance[_owner][_spender] );\r\n    }\r\n    function getBalance(address _owner) public view returns(bool _success, uint256 _balance) {\r\n        return ( true, _getBalance(_owner) );\r\n    }\r\n    function getTotalSupply() public view returns(bool _success, uint256 _totalSupply) {\r\n        return ( true, _getTotalSupply() );\r\n    }\r\n    function getTotalVesting() public view returns(bool _success, uint256 _totalVesting) {\r\n        return ( true, _getTotalVesting() );\r\n    }\r\n    function getVesting(address _owner) public view returns(bool _success, uint256 _amount, uint256 _startBlock, uint256 _endBlock, uint256 _claimedAmount, bool _valid) {\r\n        bool _subResult;\r\n        if ( ( ! vesting[_owner].valid ) && oldDBAddress != address(0x00000000000000000000000000000000000000) ) {\r\n            ( _subResult, _amount, _startBlock, _endBlock, _claimedAmount, _valid ) = TokenDB(oldDBAddress).getVesting(_owner);\r\n            require( _subResult );\r\n        } else {\r\n            _amount = vesting[_owner].amount;\r\n            _startBlock = vesting[_owner].startBlock;\r\n            _endBlock = vesting[_owner].endBlock;\r\n            _claimedAmount = vesting[_owner].claimedAmount;\r\n            _valid = vesting[_owner].valid;\r\n        }\r\n        _success = true;\r\n    }\r\n    /* Internals */\r\n    function _getBalance(address _owner) internal view returns(uint256 _balance) {\r\n        bool _subResult;\r\n        if ( ( ! balances[_owner].valid ) && oldDBAddress != address(0x00000000000000000000000000000000000000) ) {\r\n            ( _subResult, _balance ) = TokenDB(oldDBAddress).getBalance(_owner);\r\n            require( _subResult );\r\n        } else {\r\n            _balance = balances[_owner].amount;\r\n        }\r\n    }\r\n    function _getTotalSupply() internal view returns(uint256 _totalSupply) {\r\n        bool _subResult;\r\n        if ( totalSupply == 0x00 && oldDBAddress != address(0x00000000000000000000000000000000000000) ) {\r\n            ( _subResult, _totalSupply ) = TokenDB(oldDBAddress).getTotalSupply();\r\n            require( _subResult );\r\n        } else {\r\n            _totalSupply = totalSupply;\r\n        }\r\n    }\r\n    function _getTotalVesting() internal view returns(uint256 _totalVesting) {\r\n        bool _subResult;\r\n        if ( totalVesting == 0x00 && oldDBAddress != address(0x00000000000000000000000000000000000000) ) {\r\n            ( _subResult, _totalVesting ) = TokenDB(oldDBAddress).getTotalVesting();\r\n            require( _subResult );\r\n        } else {\r\n            _totalVesting = totalVesting;\r\n        }\r\n    }\r\n    /* Modifiers */\r\n    modifier forToken {\r\n        require( msg.sender == tokenAddress );\r\n        _;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"getAllowance\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"},{\"name\":\"_remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"name\":\"_endBlock\",\"type\":\"uint256\"},{\"name\":\"_claimedAmount\",\"type\":\"uint256\"}],\"name\":\"setVesting\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalVesting\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oldDBAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"replaceOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalSupply\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"changeTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getVesting\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"name\":\"_endBlock\",\"type\":\"uint256\"},{\"name\":\"_claimedAmount\",\"type\":\"uint256\"},{\"name\":\"_valid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setAllowance\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"vesting\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"startBlock\",\"type\":\"uint256\"},{\"name\":\"endBlock\",\"type\":\"uint256\"},{\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"name\":\"valid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"bulkTransfer\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalVesting\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"},{\"name\":\"_totalVesting\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"},{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_oldDBAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"TokenDB","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a0f4a8d71e0631e6441463b12645936e9548d91b000000000000000000000000b316c4057202cfa2c94d01f06a2a930a4b0cd83b0000000000000000000000000000000000000000000000000000000000000000","Library":"","LicenseType":"None","SwarmSource":"bzzr://adf24dfd3b21702e4becf29aa03d545e6211de1a6002936c416037d703bb4a8b"}]}