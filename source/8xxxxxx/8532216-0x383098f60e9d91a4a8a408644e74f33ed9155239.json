{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2019-09-09\r\n * BEB dapp for www.betbeb.com or www.bitbeb.com\r\n*/\r\npragma solidity^0.4.24;  \r\n\r\ninterface tokenTransfer {\r\n    function transfer(address receiver, uint amount);\r\n    function transferFrom(address _from, address _to, uint256 _value)returns (bool success);\r\n    function balanceOf(address receiver) returns(uint256);\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n \r\n    function Ownable () public {\r\n        owner = msg.sender;\r\n    }\r\n \r\n    modifier onlyOwner {\r\n        require (msg.sender == owner, \"OnlyOwner methods called by non-owner.\");\r\n        _;\r\n    }\r\n \r\n    /**\r\n     * @param  newOwner address \r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        if (newOwner != address(0)) {\r\n        owner = newOwner;\r\n      }\r\n    }\r\n  \r\n}\r\ncontract BebTreasure is Ownable{\r\n    \r\n    uint256 totalFraction;\r\n    uint256 fractionAmount;\r\n    uint256 totalNumber;\r\n    uint256 numberOfPeriods=201900000; \r\n    address winAddress;\r\n    uint256 position;\r\n    address minter;\r\n    tokenTransfer public bebTokenTransfer; \r\n    function BebTreasure(address _tokenAddress){\r\n         bebTokenTransfer = tokenTransfer(_tokenAddress);\r\n         //minter=_minter;\r\n     }\r\n     struct UserTreasure{\r\n         address addr;\r\n     }\r\n    mapping (address => UserTreasure) public UserTreasures;\r\n    address[] public minersArray;\r\n    //buy Treasure\r\n    function treasure(uint256 _amount,uint256 _fraction)public{\r\n        require(totalFraction >= _fraction+totalNumber);\r\n        require(_amount == fractionAmount);\r\n        uint256 sumAmount=_amount*_fraction;\r\n        address _addr = msg.sender;\r\n        UserTreasure storage user=UserTreasures[_addr];\r\n        bebTokenTransfer.transferFrom(_addr,address(this),sumAmount);\r\n        if(_fraction >1){\r\n            for(uint i=0;i<_fraction;i++){\r\n            minersArray.push(_addr);\r\n            }\r\n        }else{\r\n            minersArray.push(_addr);\r\n        }\r\n        user.addr=_addr;\r\n        totalNumber +=_fraction;\r\n    }\r\n    //new Treasure\r\n    function startTreasure(uint256 _totalFraction,uint256 _fractionAmount)onlyOwner {\r\n        //require(msg.sender ==minter,\"Insufficient\"); \r\n        numberOfPeriods+=1;\r\n        totalFraction=_totalFraction;\r\n        fractionAmount=_fractionAmount* 10 ** 18;\r\n        totalNumber=0;\r\n        delete minersArray;\r\n    }\r\n    //openTreasure \r\n    function openTreasure(uint256 _gamesmul)onlyOwner{\r\n       // require(msg.sender ==minter,\"Insufficient\");\r\n        require(totalNumber==totalFraction);\r\n        uint256 random2 = random(block.difficulty+_gamesmul*99/100);\r\n        winAddress = UserTreasures[minersArray[random2]].addr;\r\n        position = random2;\r\n        winAddress.transfer(1 ether);\r\n    }\r\n     function random(uint256 randomyType)   internal returns(uint256 num){\r\n        uint256 random = uint256(keccak256(randomyType,now));\r\n        uint256 randomNum = random%totalNumber;\r\n        return randomNum;\r\n    }\r\n     function getPlayersCount() public view returns(uint256){\r\n        return totalNumber;\r\n    }\r\n     function getWinInfo() public view returns(address,uint256){\r\n        return (winAddress,position);\r\n    }\r\n    function getPeriods() public view returns(uint256){\r\n        return numberOfPeriods;\r\n    }\r\n    function withdrawAmount(uint256 _amount) payable onlyOwner {\r\n        uint256 _amounteth=_amount* 10 ** 18;\r\n       require(this.balance>_amounteth,\"Insufficient contract balance\"); \r\n      owner.transfer(_amounteth);\r\n    } \r\n   function withdrawAmountBeb(uint256 amount) onlyOwner {\r\n        uint256 _amountbeb=amount* 10 ** 18;\r\n        require(getTokenBalance()>_amountbeb,\"Insufficient contract balance\");\r\n       bebTokenTransfer.transfer(owner,_amountbeb);\r\n    }\r\n    function getTokenBalance() public view returns(uint256){\r\n         return bebTokenTransfer.balanceOf(address(this));\r\n    }\r\n    function()payable{\r\n        \r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAmount\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"minersArray\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bebTokenTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gamesmul\",\"type\":\"uint256\"}],\"name\":\"openTreasure\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_totalFraction\",\"type\":\"uint256\"},{\"name\":\"_fractionAmount\",\"type\":\"uint256\"}],\"name\":\"startTreasure\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPeriods\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWinInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_fraction\",\"type\":\"uint256\"}],\"name\":\"treasure\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPlayersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"UserTreasures\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAmountBeb\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"BebTreasure","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000006798cc8ad079a7e663536f83ee26d63aabe03da9","Library":"","LicenseType":"None","SwarmSource":"bzzr://6b5ce2c33c12b73d36db5843cb211439c00166f53621e762b004e249d39f1154"}]}