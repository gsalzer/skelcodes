{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2019-08-13\r\n*/\r\n\r\npragma solidity ^0.4.25;\r\n\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20Interface {\r\n    uint256 public totalSupply;\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n \r\ncontract RLToken is ERC20Interface {\r\n    using SafeMath for uint256;\r\n\t\t\t\r\n\tstring public constant name = \"Ruling数位链\";\r\n    string public constant symbol = \"RL链\";\r\n    uint8 public constant decimals = 18;\r\n    uint256 public constant INITIAL_SUPPLY = 2 * 100000000 * (10**uint256(decimals));\r\n\t\r\n\tuint256 public oneETHtokens = 4200;\r\n\r\n    address public owner;\r\n\tbool public transfersEnabled; \r\n    bool public saleToken = true;\r\n\r\n\t \r\n\tuint256 public currentAirdrop = 0;\r\n\tuint256 public totalAirdrop = 10000000 * (10**uint256(decimals));\r\n    uint256 public airdrop = 1 * (10**uint256(decimals));\r\n    \r\n    mapping(address => bool) touched;\r\n    mapping(address => uint256) balances;\r\n\t\r\n\tevent OwnerChanged(address indexed previousOwner, address indexed newOwner);\r\n    event BuyTokens(address indexed beneficiary, uint256 value, uint256 amount);\r\n \r\n\r\n    constructor() public {\r\n        totalSupply = INITIAL_SUPPLY;\r\n        owner = msg.sender; \r\n        balances[owner] = INITIAL_SUPPLY;\r\n        transfersEnabled = true;\r\n    }\r\n\t\r\n\t\r\n\tfunction getBalance(address _addr) internal constant returns(uint256)\r\n    {\r\n        if(currentAirdrop.add(airdrop) <= totalAirdrop){\r\n            if(touched[_addr])\r\n                return balances[_addr];\r\n            else\r\n                return balances[_addr].add(airdrop);\r\n        } else {\r\n            return balances[_addr];\r\n        }\r\n    }\r\n\t\r\n\t\r\n\tfunction balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return getBalance(_owner);\r\n    }\r\n\r\n\t\r\n    /**\r\n    * @dev protection against short address attack\r\n    */\r\n    modifier onlyPayloadSize(uint numwords) {\r\n        assert(msg.data.length == numwords * 32 + 4);\r\n        _;\r\n    }\r\n\t\r\n \r\n    function transfer(address _to, uint256 _value) public onlyPayloadSize(2) returns (bool) {\r\n        require(_to != address(0));\r\n\t\trequire(transfersEnabled);\r\n\t\trequire(_value >= 0);\r\n\t\tif(!touched[msg.sender] && currentAirdrop.add(airdrop) <= totalAirdrop){\r\n\t\t\trequire(balances[owner] >= airdrop);\r\n\t\t\tbalances[owner] = balances[owner].sub(airdrop);\r\n            balances[msg.sender] = balances[msg.sender].add(airdrop);\r\n            currentAirdrop = currentAirdrop.add(airdrop);\r\n\t\t\ttouched[msg.sender] = true;\r\n\t\t\t\r\n\t\t\temit Transfer(owner, _to, airdrop);\r\n        }\r\n\t\t\r\n        \r\n        require(_value <= balances[msg.sender]);\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\t\r\n\r\n\tmapping(address => mapping(address => uint256)) internal allowed;\r\n\t\r\n\t\r\n    function transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3) returns (bool) {\r\n        require(_to != address(0));\r\n\t\trequire(_value >= 0);\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        require(transfersEnabled);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\t\r\n \r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n \r\n \r\n    function allowance(address _owner, address _spender) public onlyPayloadSize(2) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n  \r\n\r\n    function() payable public {\r\n       buyTokens();\r\n    }\r\n\r\n\t\r\n    function buyTokens() public payable returns (uint256){\r\n        require(msg.sender != address(0));\r\n        require(saleToken);\r\n\t\t\r\n        uint256 weiAmount = msg.value;\r\n        uint256 tokens = weiAmount.mul(oneETHtokens);\r\n\t\t\r\n        if (tokens == 0) {revert();}\r\n        _buy(msg.sender, tokens, owner);\r\n        emit BuyTokens(msg.sender, weiAmount, tokens);\r\n\t\t\r\n\t\t// transfer ETH to owner\r\n        owner.transfer(weiAmount);\r\n        return tokens;\r\n    }\r\n\r\n\t\r\n    function _buy(address _to, uint256 _amount, address _owner) internal returns (bool) {\r\n        require(_to != address(0));\r\n        require(_amount <= balances[_owner]);\r\n\t\t\r\n\t\tbalances[_owner] = balances[_owner].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        \r\n        emit Transfer(_owner, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n\t\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\t\r\n\t//设置每个ETH可兑换成的代币个数\r\n\tfunction setPrice(uint256 newoneETHtokens) public onlyOwner{\r\n\t\trequire(newoneETHtokens >= 0);\r\n        oneETHtokens = newoneETHtokens;\r\n    }\r\n\t\r\n\t//设置给每个地址的空投数量\r\n\tfunction setAirdrop(uint256 newAirdrop) public onlyOwner{\r\n\t\trequire(newAirdrop >= 0);\r\n        airdrop = newAirdrop;\r\n    }\r\n\r\n\t//设置空投总量\r\n\tfunction setTotalAirdrop(uint256 newTotalAirdrop) public onlyOwner{\r\n\t\trequire(newTotalAirdrop >= 0);\r\n\t\t\r\n        totalAirdrop = newTotalAirdrop;\r\n    }\r\n\t\r\n\t//增发代币\r\n\tfunction mintToken(address target, uint256 mintedAmount) public onlyOwner{\r\n\t\trequire(transfersEnabled);\r\n\t\trequire(mintedAmount > 0);\r\n        totalSupply = totalSupply.add(mintedAmount);\r\n\t\t\r\n\t\tbalances[target] = balances[target].add(mintedAmount);\r\n        emit Transfer(0, target, mintedAmount);\r\n    }\r\n\t\r\n\t//销毁代币\r\n\tfunction burn(uint256 _value) public onlyOwner returns (bool) {\r\n        require(balances[msg.sender] >= _value);  \r\n\t\trequire(_value > 0);\r\n\t\t\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n\t\temit Transfer(msg.sender, 0, _value);\r\n\r\n        return true;\r\n    }\r\n\t\r\n\t//改变合约拥有者\r\n    function changeOwner(address _newOwner) public onlyOwner returns (bool){\r\n        require(_newOwner != address(0));\r\n\t\t\r\n\t\towner = _newOwner;\r\n        emit OwnerChanged(owner, _newOwner);\r\n        \r\n        return true;\r\n    }\r\n\r\n\t//开启发售\r\n    function startSale() public onlyOwner {\r\n        saleToken = true;\r\n    }\r\n\r\n\t//关闭发售\r\n    function stopSale() public onlyOwner {\r\n        saleToken = false;\r\n    }\r\n\r\n\t//开启转账功能\r\n    function enableTransfers(bool _transfersEnabled) public onlyOwner{\r\n        transfersEnabled = _transfersEnabled;\r\n    }\r\n\t\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"currentAirdrop\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oneETHtokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airdrop\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAirdrop\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAirdrop\",\"type\":\"uint256\"}],\"name\":\"setAirdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newoneETHtokens\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTotalAirdrop\",\"type\":\"uint256\"}],\"name\":\"setTotalAirdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transfersEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transfersEnabled\",\"type\":\"bool\"}],\"name\":\"enableTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BuyTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"RLToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://1da1a1346edfa6ea1c069da5d9cea0724a5d7757ebc660951c5a9b66d985eb47"}]}