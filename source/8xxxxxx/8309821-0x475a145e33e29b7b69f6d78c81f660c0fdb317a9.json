{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.10;\r\n\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Governance\r\n * @dev The Governance contract allows to execute certain actions via majority of votes.\r\n */\r\ncontract Governance {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(bytes32 => Proposal) public proposals;\r\n    bytes32[] public proposalsHashes;\r\n    uint256 public proposalsCount;\r\n\r\n    mapping(address => bool) public isVoter;\r\n    address[] public voters;\r\n    uint256 public votersCount;\r\n\r\n    struct Proposal {\r\n        bool finished;\r\n        uint256 yesVotes;\r\n        uint256 noVotes;\r\n        mapping(address => bool) votedFor;\r\n        mapping(address => bool) votedAgainst;\r\n        address targetContract;\r\n        bytes transaction;\r\n    }\r\n\r\n    event ProposalStarted(bytes32 proposalHash);\r\n    event ProposalFinished(bytes32 proposalHash);\r\n    event ProposalExecuted(bytes32 proposalHash);\r\n    event Vote(bytes32 proposalHash, bool vote, uint256 yesVotes, uint256 noVotes, uint256 votersCount);\r\n    event VoterAdded(address voter);\r\n    event VoterDeleted(address voter);\r\n\r\n    /**\r\n    * @dev The Governance constructor adds sender to voters list.\r\n    */\r\n    constructor() public {\r\n        voters.push(msg.sender);\r\n        isVoter[msg.sender] = true;\r\n        proposalsCount = 0;\r\n        votersCount = 1;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the voter.\r\n    */\r\n    modifier onlyVoter() {\r\n        require(isVoter[msg.sender], \"Should be voter\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the Governance contract.\r\n    */\r\n    modifier onlyMe() {\r\n        require(msg.sender == address(this), \"Call only via Governance\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Creates a new voting proposal for the execution `_transaction` of `_targetContract`.\r\n    * Only voter can create a new proposal.\r\n    *\r\n    * Emits a `ProposalStarted` event.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `_targetContract` cannot be the zero address.\r\n    * - `_transaction` length must not be less than 4 bytes.\r\n    *\r\n    * @notice Create a new voting proposal for the execution `_transaction` of `_targetContract`. You must be voter.\r\n    * @param _targetContract Target contract address that can execute target `_transaction`\r\n    * @param _transaction Target transaction to execute\r\n    */\r\n    function newProposal( address _targetContract, bytes memory _transaction ) public onlyVoter {\r\n        require(_targetContract != address(0), \"Address must be non-zero\");\r\n        require(_transaction.length >= 4, \"Tx must be 4+ bytes\");\r\n        // solhint-disable not-rely-on-time\r\n        bytes32 _proposalHash = keccak256(abi.encodePacked(_targetContract, _transaction, now));\r\n        require(proposals[_proposalHash].transaction.length == 0, \"The poll has already been initiated\");\r\n        proposals[_proposalHash].targetContract = _targetContract;\r\n        proposals[_proposalHash].transaction = _transaction;\r\n        proposalsHashes.push(_proposalHash);\r\n        proposalsCount = proposalsCount.add(1);\r\n        emit ProposalStarted(_proposalHash);\r\n    }\r\n\r\n    /**\r\n    * @dev Adds sender's vote to the proposal and then follows the majority voting algoritm.\r\n    *\r\n    * Emits a `Vote` event.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - proposal with `_proposalHash` must not be finished.\r\n    * - sender must not be already voted.\r\n    *\r\n    * @notice Vote \"for\" or \"against\" in proposal with `_proposalHash` hash.\r\n    * @param _proposalHash Unique mapping key of proposal\r\n    * @param _yes 1 is vote \"for\" and 0 is \"against\"\r\n    */\r\n    function vote(bytes32 _proposalHash, bool _yes) public onlyVoter { // solhint-disable code-complexity\r\n        require(!proposals[_proposalHash].finished, \"Already finished\");\r\n        require(!proposals[_proposalHash].votedFor[msg.sender], \"Already voted\");\r\n        require(!proposals[_proposalHash].votedAgainst[msg.sender], \"Already voted\");\r\n        if (_yes) {\r\n            proposals[_proposalHash].yesVotes = proposals[_proposalHash].yesVotes.add(1);\r\n            proposals[_proposalHash].votedFor[msg.sender] = true;\r\n        } else {\r\n            proposals[_proposalHash].noVotes = proposals[_proposalHash].noVotes.add(1);\r\n            proposals[_proposalHash].votedAgainst[msg.sender] = true;\r\n        }\r\n        emit Vote(\r\n            _proposalHash,\r\n            _yes,\r\n            proposals[_proposalHash].yesVotes,\r\n            proposals[_proposalHash].noVotes,\r\n            votersCount\r\n        );\r\n        if (proposals[_proposalHash].yesVotes > votersCount.div(2)) {\r\n            executeProposal(_proposalHash);\r\n            finishProposal(_proposalHash);\r\n        } else if (proposals[_proposalHash].noVotes >= (votersCount + 1).div(2)) {\r\n            finishProposal(_proposalHash);\r\n        }\r\n    }\r\n\r\n/**\r\n    * @dev Returns true in first output if `_address` is already voted in\r\n    * proposal with `_proposalHash` hash.\r\n    * Second output shows, if voter is voted for (true) or against (false).\r\n    *\r\n    * @param _proposalHash Unique mapping key of proposal\r\n    * @param _address Address of the one who is checked\r\n    */\r\n    function getVoted(bytes32 _proposalHash, address _address) public view returns (bool, bool) {\r\n        bool isVoted = proposals[_proposalHash].votedFor[_address] ||\r\n            proposals[_proposalHash].votedAgainst[_address];\r\n        bool side = proposals[_proposalHash].votedFor[_address];\r\n        return (isVoted, side);\r\n    }\r\n\r\n    /**\r\n    * @dev Adds `_address` to the voters list.\r\n    * This method can be executed only via proposal of this Governance contract.\r\n    *\r\n    * Emits a `VoterAdded` event.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `_address` cannot be the zero address.\r\n    * - `_address` cannot be already in voters list.\r\n    *\r\n    * @param _address Address of voter to add\r\n    */\r\n    function addVoter(address _address) public onlyMe {\r\n        require(_address != address(0), \"Need non-zero address\");\r\n        require(!isVoter[_address], \"Already in voters list\");\r\n        voters.push(_address);\r\n        isVoter[_address] = true;\r\n        votersCount = votersCount.add(1);\r\n        emit VoterAdded(_address);\r\n    }\r\n\r\n    /**\r\n    * @dev Removes `_address` from the voters list.\r\n    * This method can be executed only via proposal of this Governance contract.\r\n    *\r\n    * Emits a `delVoter` event.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `_address` must be in voters list.\r\n    * - Num of voters must be more than one.\r\n    *\r\n    * @param _address Address of voter to delete\r\n    */\r\n    function delVoter(address _address) public onlyMe {\r\n        require(isVoter[_address], \"Not in voters list\");\r\n        require(votersCount > 1, \"Can not delete single voter\");\r\n        for (uint256 i = 0; i < voters.length; i++) {\r\n            if (voters[i] == _address) {\r\n                if (voters.length > 1) {\r\n                    voters[i] = voters[voters.length - 1];\r\n                }\r\n                voters.length--; // Implicitly recovers gas from last element storage\r\n                isVoter[_address] = false;\r\n                votersCount = votersCount.sub(1);\r\n                emit VoterDeleted(_address);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Executes transaction in proposal with `_proposalHash` hash.\r\n    * This method can be executed only from vote() method.\r\n    */\r\n    function executeProposal(bytes32 _proposalHash) internal {\r\n        require(!proposals[_proposalHash].finished, \"Already finished\");\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returnData) = address(\r\n            proposals[_proposalHash].targetContract).call(proposals[_proposalHash].transaction\r\n        );\r\n        require(success, string(returnData));\r\n        emit ProposalExecuted(_proposalHash);\r\n    }\r\n\r\n    /**\r\n    * @dev Finishes proposal with `_proposalHash` hash.\r\n    * This method can be executed only from vote() method.\r\n    */\r\n    function finishProposal(bytes32 _proposalHash) internal {\r\n        require(!proposals[_proposalHash].finished, \"Already finished\");\r\n        proposals[_proposalHash].finished = true;\r\n        emit ProposalFinished(_proposalHash);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"proposalsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targetContract\",\"type\":\"address\"},{\"name\":\"_transaction\",\"type\":\"bytes\"}],\"name\":\"newProposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"proposals\",\"outputs\":[{\"name\":\"finished\",\"type\":\"bool\"},{\"name\":\"yesVotes\",\"type\":\"uint256\"},{\"name\":\"noVotes\",\"type\":\"uint256\"},{\"name\":\"targetContract\",\"type\":\"address\"},{\"name\":\"transaction\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"votersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposalHash\",\"type\":\"bytes32\"},{\"name\":\"_yes\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isVoter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposalsHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_proposalHash\",\"type\":\"bytes32\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getVoted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voters\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"delVoter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addVoter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposalHash\",\"type\":\"bytes32\"}],\"name\":\"ProposalStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposalHash\",\"type\":\"bytes32\"}],\"name\":\"ProposalFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposalHash\",\"type\":\"bytes32\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"vote\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"yesVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"noVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"votersCount\",\"type\":\"uint256\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"VoterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"VoterDeleted\",\"type\":\"event\"}]","ContractName":"Governance","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://473574af9b987cc6586d7f4e556609a659e8aaa261b47e8460708e4c3ea27a11"}]}