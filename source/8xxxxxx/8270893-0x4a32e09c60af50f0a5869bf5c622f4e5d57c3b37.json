{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.5;\r\n/*Math operations with safety checks */\r\ncontract SafeMath { \r\n  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;  \r\n    }\r\n  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a/b;    \r\n    }\r\n  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;  \r\n    }\r\n  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c>=a && c>=b);\r\n    return c;  \r\n    }  \r\n  function safePower(uint a, uint b) internal pure returns (uint256) {\r\n      uint256 c = a**b;\r\n      return c;  \r\n    }\r\n}\r\n\r\ncontract Token {  function transfer(address _to, uint256 _value) public returns (bool success) {} }\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; }\r\n\r\ncontract UniondaoToken is SafeMath{\r\n    string public name;    string public symbol;    uint8 public decimals;    uint256 public totalSupply;  address payable public owner;\r\n    mapping (address => uint256) public balanceOf;/* This creates an array with all balances */\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    mapping (address => address) public gather;\r\n    address public issueContract;/*issue Contract*/    \r\n    address public manager;\r\n    uint256 public totalSupplyLimit;\r\n    bool    public pauseMint;\r\n    mapping (address => uint256) public addressToAccounts;\r\n    mapping (uint256 => address) public accountsToAddress;\r\n    uint256 public accountsNumber;\r\n    uint256 private accountBin;\r\n    event Transfer(address indexed from, address indexed to, uint256 value);/* This generates a public event on the blockchain that will notify clients */\r\n    event Burn(address indexed from, uint256 value);  /* This notifies clients about the amount burnt */\r\n    event TransferAndSendMsg(address indexed _from, address indexed _to, uint256 _value, string _msg);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);  \r\n    event SetPauseMint(bool pause);\r\n    event SetManager(address add);\r\n    event SetOwner(address add);\r\n    event SetIssueContract(address add);\r\n    event SetAccountBin(uint256 accountBin);\r\n    \r\n    constructor (/* Initializes contract with initial supply tokens to the creator of the contract */\r\n        uint256 initialSupply,string memory tokenName,string memory tokenSymbol) public{\r\n        balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens\r\n        totalSupply = initialSupply;                        // Update total supply\r\n        name = tokenName;                                   // Set the name for display purposes\r\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\r\n        decimals = 18;                                      // Amount of decimals for display purposes\r\n        owner = msg.sender;\r\n        manager = msg.sender;\r\n        totalSupplyLimit = 100000000 * (10 ** uint256(decimals));\r\n        accountBin = 888888;\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) public  returns (bool success){/* Send coins */\r\n        require (_to != address(0x0));                        // Prevent transfer to 0x0 address. \r\n        require (_value >= 0) ;\t\t\t\t\r\n        require (balanceOf[msg.sender] >= _value) ;           // Check if the sender has enough\r\n        require (safeAdd(balanceOf[_to] , _value) >= balanceOf[_to]) ; // Check for overflows\r\n        balanceOf[msg.sender] = safeSub(balanceOf[msg.sender], _value); // Subtract from the sender\r\n        balanceOf[_to] = safeAdd(balanceOf[_to], _value);               // Add the same to the recipient\r\n        emit Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\r\n        if(gather[_to] != address(0x0) && gather[_to] != _to){\t\t\t\r\n          balanceOf[_to] = safeSub(balanceOf[_to], _value); // Subtract from the sender\r\n          balanceOf[gather[_to]] = safeAdd(balanceOf[gather[_to]], _value); // Add the same to the recipient\r\n          emit Transfer( _to,gather[_to], _value);}                    // Notify anyone listening that this transfer took place\r\n        return true;\r\n    }\r\n    \r\n    function transferAndSendMsg(address _to, uint256 _value, string memory _msg) public returns (bool success){/* Send coins */\t\t\r\n        emit TransferAndSendMsg(msg.sender, _to, _value,_msg);\r\n        return transfer( _to,  _value);    \r\n    }\r\n    \r\n    function approve(address _spender, uint256 _value) public returns (bool success) {/* Allow another contract to spend some tokens in your behalf */\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;    \r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value)public returns (bool success) {/* A contract attempts to get the coins */\r\n        require (_to != address(0x0)) ;                                // Prevent transfer to 0x0 address. Use burn() instead\r\n        require (_value >= 0) ;\t\t\r\n        require (balanceOf[_from] >= _value) ;                 // Check if the sender has enough\r\n        require (safeAdd(balanceOf[_to] , _value) >= balanceOf[_to]) ;  // Check for overflows\r\n        require (_value <= allowance[_from][msg.sender]) ;     // Check allowance\r\n        balanceOf[_from] = safeSub(balanceOf[_from], _value);                           // Subtract from the sender\r\n        balanceOf[_to] = safeAdd(balanceOf[_to], _value);                             // Add the same to the recipient\r\n        allowance[_from][msg.sender] = safeSub(allowance[_from][msg.sender], _value);\r\n        emit Transfer(_from, _to, _value);\r\n        if(gather[_to] != address(0x0) && gather[_to] != _to)        {\r\n          balanceOf[_to] = safeSub(balanceOf[_to], _value);                     // Subtract from the sender\r\n          balanceOf[gather[_to]] = safeAdd(balanceOf[gather[_to]], _value);                            // Add the same to the recipient\r\n          emit Transfer( _to,gather[_to], _value);   }                  // Notify anyone listening that this transfer took place\r\n          return true; \r\n      }\r\n      \r\n    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, address(this), _extraData);\r\n            return true;}\r\n    }\r\n\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require (balanceOf[msg.sender] >= _value ) ;            // Check if the sender has enough\r\n        require (_value > 0) ; \r\n        balanceOf[msg.sender] = safeSub(balanceOf[msg.sender], _value);            // Subtract from the sender\r\n        totalSupply = safeSub(totalSupply,_value);                                // Updates totalSupply\r\n        emit Burn(msg.sender, _value);\t\t\t\t\r\n        emit Transfer(msg.sender, address(0x0), _value);\r\n        return true;\r\n    } \r\n\r\n    function mintToken(address _target, uint256 _mintedAmount) public returns (bool success) {\r\n        require(msg.sender == issueContract && !pauseMint && safeAdd(totalSupply,_mintedAmount) <= totalSupplyLimit);\r\n        balanceOf[_target] = safeAdd(balanceOf[_target],_mintedAmount);\r\n        totalSupply = safeAdd(totalSupply,_mintedAmount);\r\n        emit Transfer(address(0x0), _target, _mintedAmount);\r\n        return true;\r\n    }  \r\n    \r\n    function setSymbol(string memory _symbol)public   {        \r\n        require (msg.sender == owner) ; \r\n        symbol = _symbol;    \r\n    } \r\n\r\n    function setName(string memory _name)public {        \r\n        require (msg.sender == owner) ; \r\n        name = _name;    \r\n    } \r\n    \r\n    function setGather(address _add)public{  /*Set summary address to facilitate exchange summary balance*/      \r\n        require (_add != address(0x0) && isContract(_add) == false) ;\t\t\r\n        gather[msg.sender] = _add;    } \r\n    \r\n    function isContract(address _addr) private view returns (bool is_contract) {//Assemble the address bytecode. If there is a bytecode, then _addr is a contract.\r\n      uint length;\r\n      assembly { length := extcodesize(_addr) }    \r\n      return (length>0);\r\n    }  \r\n\r\n    function setPauseMint(bool _pause)public     {   \r\n        require (msg.sender == manager) ; \r\n        pauseMint = _pause; \r\n        emit SetPauseMint(_pause);\r\n    }\t\t\r\n\r\n    function setManager(address _add)public{\r\n        require (msg.sender == owner && _add != address(0x0)) ;\r\n        manager = _add ;    \r\n        emit SetManager(_add);\r\n    }    \r\n\r\n    function setOwner(address payable _add)public{\r\n        require (msg.sender == owner && _add != address(0x0)) ;\r\n        owner = _add ;     \r\n        emit SetOwner(_add);\r\n    } \r\n\r\n    function setIssueContract(address _add)public{\r\n        require (msg.sender == owner) ;\r\n        issueContract = _add ;    \r\n        emit SetIssueContract(_add);\r\n    }\r\n\r\n    function setAccountBin(uint256 _accountBin)public{\r\n        require (msg.sender == owner && _accountBin >= 100000 && _accountBin < 1000000) ;\r\n        accountBin = _accountBin ;\t\r\n        emit SetAccountBin(_accountBin);\r\n    }\r\n    \r\n    function() external payable  {}/* can accept ether */\r\n    \r\n    function withdrawToken(address token, uint amount) public{// transfer balance to owner\r\n      require(msg.sender == owner);\r\n      if (token == address(0x0)) owner.transfer(amount); \r\n      else require (Token(token).transfer(owner, amount));\r\n    }\r\n\r\n    function createAccount(address _add)public returns(uint256){\t\t\r\n        require (_add != address(0x0));\r\n        require (addressToAccounts[_add] == 0) ;\t\t\t\t\r\n        uint256 _account = getAccountByLuhn(accountBin,accountsNumber+1);\t\r\n        require (accountsToAddress[_account] == address(0x0)) ;\t\r\n        if (accountsNumber > 10000000) {require (burn(10000000000000000));}    \r\n        addressToAccounts[_add] = _account ;\t\r\n        accountsToAddress[_account] = _add ;\t\r\n        accountsNumber = accountsNumber + 1 ;\r\n        return accountsNumber;\r\n    }    \r\n\r\n    function getAccountByLuhn(uint256 _bin,uint256 _accountNumber) public pure returns(uint256){\t\r\n        uint256 _sum = 0;\r\n        uint256 _tempAccount;\r\n        uint256 _temp;\r\n        _tempAccount = _bin * safePower(10,12) + _accountNumber;\r\n        for (uint8 i = 0; i < 18; i++) {\r\n            if (i % 2 == 1){\r\n                _temp = 2 * ((_tempAccount / safePower(10,18-i-1)) % 10);\r\n                _sum = _sum + (_temp >= 10 ? _temp - 9 : _temp);\r\n            }\r\n            else{\r\n                _sum = _sum + ((_tempAccount / safePower(10,18-i-1)) % 10);\r\n            }\r\n        }\r\n        _temp = (10 - _sum % 10) % 10;\r\n        return _tempAccount * 10 + _temp;\r\n    }\r\n\r\n    function transferAndSendMsgByAccount(uint256 _to, uint256 _value, string memory _msg) public returns (bool success){/* Send coins */\r\n        require(accountsToAddress[_to] != address(0x0));\r\n        emit TransferAndSendMsg(msg.sender, accountsToAddress[_to], _value,_msg);\r\n        return transfer(accountsToAddress[_to],  _value);    \r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_bin\",\"type\":\"uint256\"},{\"name\":\"_accountNumber\",\"type\":\"uint256\"}],\"name\":\"getAccountByLuhn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accountsToAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accountsNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_msg\",\"type\":\"string\"}],\"name\":\"transferAndSendMsg\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"createAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"gather\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"setGather\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_accountBin\",\"type\":\"uint256\"}],\"name\":\"setAccountBin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"setIssueContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupplyLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issueContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pauseMint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_msg\",\"type\":\"string\"}],\"name\":\"transferAndSendMsgByAccount\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pause\",\"type\":\"bool\"}],\"name\":\"setPauseMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_msg\",\"type\":\"string\"}],\"name\":\"TransferAndSendMsg\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"pause\",\"type\":\"bool\"}],\"name\":\"SetPauseMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"add\",\"type\":\"address\"}],\"name\":\"SetManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"add\",\"type\":\"address\"}],\"name\":\"SetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"add\",\"type\":\"address\"}],\"name\":\"SetIssueContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"accountBin\",\"type\":\"uint256\"}],\"name\":\"SetAccountBin\",\"type\":\"event\"}]","ContractName":"UniondaoToken","CompilerVersion":"v0.5.5+commit.47a71e8f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000115eec47f6cf7e35000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000008556e696f6e44414f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045544414f00000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://0dd447dd7af807f2dc7384defa6cc0f814b37bbd4e5dd090fb468cf68fc74156"}]}