{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.3;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, rounding up and truncating the quotient\r\n  */\r\n  function divCeil(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    return ((_a - 1) / _b) + 1;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\ncontract BZRxOTCSale is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    struct Sales {\r\n        address payable tokenBuyer;\r\n        address payable tokenSeller;\r\n        uint256 ethAmountFromBuyer;\r\n        uint256 tokenAmountFromSeller;\r\n        uint256 createDate;\r\n        uint256 completeDate;\r\n        uint256 cancelDate;\r\n        bool active;\r\n    }\r\n\r\n    ERC20 public token;\r\n\r\n    uint256 internal saleCounter;\r\n\r\n    mapping (uint256 => Sales) public sales;\r\n    mapping (address => uint256[]) internal salesList;\r\n    mapping (address => uint256) public ethDeposit;\r\n    mapping (address => uint256) public tokenDeposit;\r\n\r\n    bool public salesDisabled = false;\r\n\r\n    modifier saleIsAllowed() {\r\n        require(!salesDisabled,\r\n        \"sales not allowed\");\r\n        _;\r\n    }\r\n    modifier saleIsActive(uint256 saleId) {\r\n        require(sales[saleId].active,\r\n        \"sales is not active\");\r\n        _;\r\n    }\r\n    modifier isCounterparty(uint256 saleId) {\r\n        require(msg.sender == sales[saleId].tokenBuyer ||\r\n            msg.sender == sales[saleId].tokenSeller,\r\n            \"unauthorized\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address tokenAddress)\r\n        public\r\n    {\r\n        token = ERC20(tokenAddress);\r\n    }\r\n\r\n    function()\r\n        external\r\n    {\r\n        revert(\"invalid\");\r\n    }\r\n\r\n    function initSale(\r\n        address payable tokenBuyer,\r\n        address payable tokenSeller,\r\n        uint256 ethAmountFromBuyer,\r\n        uint256 tokenAmountFromSeller)\r\n        public\r\n        saleIsAllowed\r\n        returns (uint256 saleId)\r\n    {\r\n        require(tokenBuyer != address(0) &&\r\n            tokenBuyer != tokenSeller,\r\n            \"seller or buyer invalid\");\r\n        require(tokenAmountFromSeller != 0, \"tokenAmountFromSeller can't be 0\");\r\n\r\n        saleId = saleCounter;\r\n        saleCounter++;\r\n\r\n        Sales storage sale = sales[saleId];\r\n        sale.tokenBuyer = tokenBuyer;\r\n        sale.tokenSeller = tokenSeller;\r\n        sale.ethAmountFromBuyer = ethAmountFromBuyer;\r\n        sale.tokenAmountFromSeller = tokenAmountFromSeller;\r\n        sale.createDate = block.timestamp;\r\n        sale.active = true;\r\n        salesList[tokenBuyer].push(saleId);\r\n        salesList[tokenSeller].push(saleId);\r\n    }\r\n\r\n    function cancelSale(\r\n        uint256 saleId)\r\n        public\r\n        saleIsActive(saleId)\r\n        isCounterparty(saleId)\r\n    {\r\n        sales[saleId].cancelDate = block.timestamp;\r\n        sales[saleId].active = false;\r\n    }\r\n\r\n    function completeSale(\r\n        uint256 saleId)\r\n        public\r\n        saleIsAllowed\r\n        saleIsActive(saleId)\r\n        isCounterparty(saleId)\r\n    {\r\n        Sales storage sale = sales[saleId];\r\n\r\n        ethDeposit[sale.tokenBuyer] = ethDeposit[sale.tokenBuyer].sub(sale.ethAmountFromBuyer);\r\n        tokenDeposit[sale.tokenSeller] = tokenDeposit[sale.tokenSeller].sub(sale.tokenAmountFromSeller);\r\n        sale.completeDate = block.timestamp;\r\n        sale.active = false;\r\n\r\n        sale.tokenSeller.transfer(sale.ethAmountFromBuyer);\r\n        require(token.transfer(\r\n            sale.tokenBuyer,\r\n            sale.tokenAmountFromSeller),\r\n            \"transfer failed\"\r\n        );\r\n    }\r\n\r\n    function depositEther()\r\n        public\r\n        payable\r\n        saleIsAllowed\r\n    {\r\n        ethDeposit[msg.sender] = ethDeposit[msg.sender].add(msg.value);\r\n    }\r\n\r\n    function withdrawEther(\r\n        uint256 amount)\r\n        public\r\n    {\r\n        if (amount > ethDeposit[msg.sender]) {\r\n            amount = ethDeposit[msg.sender];\r\n        }\r\n\r\n        require(amount != 0, \"no ether\");\r\n        ethDeposit[msg.sender] = ethDeposit[msg.sender].sub(amount);\r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n    function depositToken(\r\n        uint256 amount)\r\n        public\r\n        saleIsAllowed\r\n    {\r\n        require(token.transferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            amount),\r\n            \"transfer failed\"\r\n        );\r\n        tokenDeposit[msg.sender] = tokenDeposit[msg.sender].add(amount);\r\n    }\r\n\r\n    function withdrawToken(\r\n        uint256 amount)\r\n        public\r\n    {\r\n        if (amount > tokenDeposit[msg.sender]) {\r\n            amount = tokenDeposit[msg.sender];\r\n        }\r\n\r\n        require(amount != 0, \"no token\");\r\n        tokenDeposit[msg.sender] = tokenDeposit[msg.sender].sub(amount);\r\n        require(token.transfer(\r\n            msg.sender,\r\n            amount),\r\n            \"transfer failed\"\r\n        );\r\n    }\r\n\r\n    function toggleSaleAllowed(\r\n        bool isAllowed)\r\n        public\r\n        onlyOwner\r\n    {\r\n        salesDisabled = !isAllowed;\r\n    }\r\n\r\n    function getSalesListByAddress(\r\n        address user)\r\n        public\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        return salesList[user];\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"tokenBuyer\",\"type\":\"address\"},{\"name\":\"tokenSeller\",\"type\":\"address\"},{\"name\":\"ethAmountFromBuyer\",\"type\":\"uint256\"},{\"name\":\"tokenAmountFromSeller\",\"type\":\"uint256\"}],\"name\":\"initSale\",\"outputs\":[{\"name\":\"saleId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"isAllowed\",\"type\":\"bool\"}],\"name\":\"toggleSaleAllowed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"saleId\",\"type\":\"uint256\"}],\"name\":\"completeSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getSalesListByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sales\",\"outputs\":[{\"name\":\"tokenBuyer\",\"type\":\"address\"},{\"name\":\"tokenSeller\",\"type\":\"address\"},{\"name\":\"ethAmountFromBuyer\",\"type\":\"uint256\"},{\"name\":\"tokenAmountFromSeller\",\"type\":\"uint256\"},{\"name\":\"createDate\",\"type\":\"uint256\"},{\"name\":\"completeDate\",\"type\":\"uint256\"},{\"name\":\"cancelDate\",\"type\":\"uint256\"},{\"name\":\"active\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"saleId\",\"type\":\"uint256\"}],\"name\":\"cancelSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"salesDisabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BZRxOTCSale","CompilerVersion":"v0.5.3+commit.10d17f24","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001c74cff0376fb4031cd7492cd6db2d66c3f2c6b9","Library":"","SwarmSource":"bzzr://b151a59544c6eab423abbc33a2f0bdce6fdbea07f9147bbad3b0124235f840d1"}]}