{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n                                             ,╓╦╦#▒▒▒▒ÅÅ▀╝╝╝╝Φê#╦╗╓\r\n                                        ,╦▒▒▀╙`                       `\r\n                                      ╔╣╜                  `\"─q╖\r\n                                    ╔╝     ,╔∩                    \"%╗,\r\n                                   ╬     ╔╣╬                          \"Φ╦\r\n                                 ,╩    ,▒╬╬                              ╙╦\r\n                                 ╩     ╬╬╬▌                                ╙⌐\r\n                                ║     ▐╬╬╬Γ                                 ╙\r\n                           ┌    ╬     ║╬╬╬Γ                                          ⌐\r\n                           Γ    ╬     ▐╬╬╬▌                                          ▐\r\n                           ⌐    ╚▒     ╬╬╬╬                                          ]\r\n                           ⌐     ╣▒    `▒╬╬▒                                         ]\r\n                           ╕      ▒╬╦    \"▀╬╬▒,                                      ║\r\n                           ╬       ╟╬╬▒╖      `╙╚▒╦╗,                                ╬\r\n                           ╫        `╫╬╬╬╬▒▒#╦╖    `╙▀▒▒╗,            ,╔#▒▒╩         ╬\r\n                           ▐           \"╙▀╣╬╬╬╬╬╬▒╗,              ╓@▒╬▒▀╜^           Γ\r\n                                             `╙▒╬╬╬╬╬▒,        ╦╣▒╜\r\n                               ,╖╦»-.            ╙╣╬╬╬╬▒╗, ,╓╣▒\"            .-«╗╖\r\n                              ▒╬  ╓╗╗╦╓             ╚╬╬╬╬╬╬╬╩            .╓╗╦╗,  ╬▒\r\n                              ╬╬ ╣╬╬╬╬╬╬▒╩            ╙╬╬╬╜            ║╣╬╬╬╬╬╬▌ ╬╬\r\n                              ╟╬▒ ╬╬╬╬╬╬Γ ║▒╬▒╦,                 ╓#▒╬▒╦ ]╬╬╬╬╬▒ ▒╬▌\r\n                               ╬╬╕ ╬╬╬╬╬ ]╬╬╬╬╬╬╬▒╗,   ╓▒╖  ,╓╦╣╬╬╬╬╬╬╬  ╬╬╬╬╬ ╣╬╬\r\n                               ╬╬Σ ╬╬╬╬╬⌐║╬╬╬╬╬╬╬╬╬╬╬╬╬▌\"╣╬╬╬╬╬╬╬╬╬╬╬╬╬▒]╬╬╬╬╬ ╬╬╬\r\n                               ╬╬∩]╬╬╬╬╬b╬╬╬╬╬╬╬╬╬╬▀╬╬▒   ▒▀╬▀╬╬╬╬╬╬╬╬╬╬║╬╬╬╬╬ ║╬╬\r\n                               ╬╬╦ ╚╬╬╬╬╬╬╬╬╬╬╬▀╙╓@╬ `     `└▒╗⌠╙▀╬╬╬╬╬╬╬╬╬╬╬╩ ╣╬╬\r\n                               ╬╬╬╦  `\"\"\"`` ,╓╦▒▀╠▀           ╚╬╢▒╦,  `\"\"\"\"   ╣╬╬╬\r\n                                ╣╬╬╬▒###▒▒▒╬▀╙ ',╓ê▒╣▀╜╙\"``\"\"ⁿ─ `¬ ╙▀╬▒▒▒##▒╣╬╬╬▀\r\n                                  `\"╙╙╙\"`     ╔╣▀\",╦≈┘\"\"\"\"╙≈╗,          `\"╙╙╙\"\r\n                                        ,╓╗⌐╔▒╩╓∩`  ,╓╦  ╗╖,  `%╖ ╬╦.╗╖,\r\n                                    ,╦╣╬╬╬ #╬,╩  ╔╣╬╬╬╬  ╬╬╬╬▒╗  ╚⌐╣▒ ╣╬╬▒╦,\r\n                           ╓╦⌐╣╦ ╓@▒╬╬╬╬▀ ╔╬]╩ é╬╬╬╬╬╬╬  ╬╬╬╬╬╬╬╗ ╙∩╬╦ ╚╬╬╬╬╬▒╦ ╔╬ ╦╓\r\n                      ,╓ê▒╬╬▒╩⌐  ╙╬╬╬╬╩   ╬▌╬ ╣╬╬╠╬╬╬╫╬  ╬╬╬╠╬╬╬╬▒ ╟║╬   ╙╬╬╬╬╩  ,╜╣╬╬▒▒╦\r\n                  ,╦▒▒╬▒▀\"              ╬ ╬╬Σ╒╬╬╬╬╬╬╬Ö#▒▒╦╙╬╬╬╬╬╬╬b╞╬╬ ╠              \"╚▒╬╬▒╗,\r\n                @╦ ▀╙                 ╔▒╬ ╟╬▌▐╬╬╬╬╬╬╩▐╬╬╬╬▌╙▒╬╬╬╬╬▌║╬╬ ╣╬╦                 ╙▀ ╔▒\r\n                                    ╙╬╬╬╬╦ ╬╬∩╬╬▀\"  ,╔╬╬╬╬╦,  `╚╬╬½╬╬ ╔╬╬╬╬╩\r\n                                    ╔╙╬╬╬╬╗ ╣╬▄ ,╔@▒╬╬╬╬╬╬╠╬╬▒╦  ╓▒╬ é╬╬╬╬Γ╦\r\n                              ,╓╦▒╬▒╙▒└╬╬▀`  ╙▒╬╬╬╬╬╬╬╬╬╬╬╬╬╬╠╬╬╬╬╜  `▀╬╬Γ╣╩#╬▒╦╦        ,\r\n                       .  ╓╦▒╬╬╬╬╬╬╬▒╙▒        `╚╬╬╬╬╬╬╬╬╬╬╬╬╬╬▀`       `╣Γ╣╬╬╬╬╬╬╬▒╦╖  /\r\n                      ╫ ╚╬╬╬╬╬╬╬╬╬╬╬╬▒└▒            \"╙╨╨╨╨╙\"            ╣Γ╣╬╬╬╬╬╬╬╬╬╬╬╬▀ ▒\r\n                    `╦ ╬⌐╙╬╬╬╬╬╬╬╬╬╬╬╬▒⌐▒                              ╣Γ╣╬╬╬╬╬╬╬╬╬╬╬╬▀,▒ ╓`\r\n                      % ╣╕╙╬╬╬╬╬╬╬╬╬╬╬╬▒∩▒                            ▒\\╣╬╬╬╬╬╬╬╬╬╬╬╬╩,▒ #\r\n                       ╙⌐╫╦└╬╬╬╬╬╬╬╬╬╬╬╬╬µ╣⌐                         ▒,▒╬╬╬╬╬╬╬╬╬╬╬╬Γ╓▒ ╩\r\n                          ╟╦ ╬╬╬╬╬╬╬╬╬╬╬╬╬⌐                           ▒╬╬╬╬╬╬╬╬╬╬╬╬Γ╔▌\r\n                           ╚╦ ▒╬╬╬╬╬╬▒╜`                                `╙╣╬╬╬╬╬╬╬ ╔▀\r\n                            ╙▒ ╣╬▀╙                                          ╙▀╬╬ á▀\r\n\r\n\r\n                    ███╗   ███╗██╗   ██╗██╗  ████████╗██╗███████╗██╗    ██╗ █████╗ ██████╗\r\n                    ████╗ ████║██║   ██║██║  ╚══██╔══╝██║██╔════╝██║    ██║██╔══██╗██╔══██╗\r\n                    ██╔████╔██║██║   ██║██║     ██║   ██║███████╗██║ █╗ ██║███████║██████╔╝\r\n                    ██║╚██╔╝██║██║   ██║██║     ██║   ██║╚════██║██║███╗██║██╔══██║██╔═══╝\r\n                    ██║ ╚═╝ ██║╚██████╔╝███████╗██║   ██║███████║╚███╔███╔╝██║  ██║██║\r\n                    ╚═╝     ╚═╝ ╚═════╝ ╚══════╝╚═╝   ╚═╝╚══════╝ ╚══╝╚══╝ ╚═╝  ╚═╝╚═╝\r\n\r\n         ██████╗ ██████╗ ██████╗ ██╗   ██╗██████╗ ██╗ ██████╗ ██╗  ██╗████████╗    ██████╗ ██╗   ██╗\r\n        ██╔════╝██╔═══██╗██╔══██╗╚██╗ ██╔╝██╔══██╗██║██╔════╝ ██║  ██║╚══██╔══╝    ██╔══██╗╚██╗ ██╔╝\r\n        ██║     ██║   ██║██████╔╝ ╚████╔╝ ██████╔╝██║██║  ███╗███████║   ██║       ██████╔╝ ╚████╔╝\r\n        ██║     ██║   ██║██╔═══╝   ╚██╔╝  ██╔══██╗██║██║   ██║██╔══██║   ██║       ██╔══██╗  ╚██╔╝\r\n        ╚██████╗╚██████╔╝██║        ██║   ██║  ██║██║╚██████╔╝██║  ██║   ██║       ██████╔╝   ██║\r\n         ╚═════╝ ╚═════╝ ╚═╝        ╚═╝   ╚═╝  ╚═╝╚═╝ ╚═════╝ ╚═╝  ╚═╝   ╚═╝       ╚═════╝    ╚═╝\r\n\r\n ██████╗██████╗ ██╗   ██╗██████╗ ████████╗ ██████╗     ███╗   ███╗ █████╗ ███╗   ██╗██╗ █████╗  ██████╗███████╗\r\n██╔════╝██╔══██╗╚██╗ ██╔╝██╔══██╗╚══██╔══╝██╔═══██╗    ████╗ ████║██╔══██╗████╗  ██║██║██╔══██╗██╔════╝██╔════╝\r\n██║     ██████╔╝ ╚████╔╝ ██████╔╝   ██║   ██║   ██║    ██╔████╔██║███████║██╔██╗ ██║██║███████║██║     ███████╗\r\n██║     ██╔══██╗  ╚██╔╝  ██╔═══╝    ██║   ██║   ██║    ██║╚██╔╝██║██╔══██║██║╚██╗██║██║██╔══██║██║     ╚════██║\r\n╚██████╗██║  ██║   ██║   ██║        ██║   ╚██████╔╝    ██║ ╚═╝ ██║██║  ██║██║ ╚████║██║██║  ██║╚██████╗███████║\r\n ╚═════╝╚═╝  ╚═╝   ╚═╝   ╚═╝        ╚═╝    ╚═════╝     ╚═╝     ╚═╝╚═╝  ╚═╝╚═╝  ╚═══╝╚═╝╚═╝  ╚═╝ ╚═════╝╚══════╝\r\n*/\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n     /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * IMPORTANT: It is unsafe to assume that an address for which this\r\n     * function returns false is an externally-owned account (EOA) and not a\r\n     * contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/helpers/UniversalERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\nlibrary UniversalERC20 {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 private constant ZERO_ADDRESS = IERC20(0x0000000000000000000000000000000000000000);\r\n    IERC20 private constant ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n\r\n    function universalTransfer(IERC20 token, address to, uint256 amount) internal {\r\n        universalTransfer(token, to, amount, false);\r\n    }\r\n\r\n    function universalTransfer(IERC20 token, address to, uint256 amount, bool mayFail) internal returns(bool) {\r\n        if (amount == 0) {\r\n            return true;\r\n        }\r\n\r\n        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\r\n            if (mayFail) {\r\n                return address(uint160(to)).send(amount);\r\n            } else {\r\n                address(uint160(to)).transfer(amount);\r\n                return true;\r\n            }\r\n        } else {\r\n            token.safeTransfer(to, amount);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function universalApprove(IERC20 token, address to, uint256 amount) internal {\r\n        if (token != ZERO_ADDRESS && token != ETH_ADDRESS) {\r\n            token.safeApprove(to, amount);\r\n        }\r\n    }\r\n\r\n    function universalTransferFrom(IERC20 token, address from, address to, uint256 amount) internal {\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\r\n            require(from == msg.sender && msg.value >= amount, \"msg.value is zero\");\r\n            if (to != address(this)) {\r\n                address(uint160(to)).transfer(amount);\r\n            }\r\n            if (msg.value > amount) {\r\n                msg.sender.transfer(msg.value.sub(amount));\r\n            }\r\n        } else {\r\n            token.safeTransferFrom(from, to, amount);\r\n        }\r\n    }\r\n\r\n    function universalBalanceOf(IERC20 token, address who) internal view returns (uint256) {\r\n        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\r\n            return who.balance;\r\n        } else {\r\n            return token.balanceOf(who);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/IMultiTokenArbitraryCallReceiver.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ninterface IMultiTokenArbitraryCallReceiver {\r\n\r\n    function handleFlashLoan(\r\n        IERC20[] calldata tokens,\r\n        uint256[] calldata amounts,\r\n        uint256[] calldata fees,\r\n        bytes calldata data\r\n    ) external payable;\r\n}\r\n\r\n// File: contracts/MultiToken.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract MultiToken is ERC20, ERC20Detailed {\r\n\r\n    using SafeMath for uint256;\r\n    using UniversalERC20 for IERC20;\r\n\r\n    IERC20[] public tokens;\r\n    mapping(address => bool) public isSubToken;\r\n\r\n    uint256 flashLoanIndex;\r\n\r\n    bool public initialized = false;\r\n    bool public isShutdown = false;\r\n    address public feeReceiver;\r\n    address public owner;\r\n\r\n    event Initialized(\r\n        uint256 indexed mintAmount,\r\n        uint256[] tokenAmounts\r\n    );\r\n\r\n    event Swapped(\r\n        address indexed fromToken,\r\n        address indexed toToken,\r\n        address indexed who,\r\n        uint256 amount,\r\n        uint256 returnAmount\r\n    );\r\n\r\n    event FlashLoaned(\r\n        uint256 indexed index,\r\n        address indexed to,\r\n        address indexed target\r\n    );\r\n\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint8 decimals,\r\n        IERC20[] memory _tokens,\r\n        address _owner,\r\n        address _feeReceiver\r\n    )\r\n    public ERC20Detailed(name, symbol, decimals)\r\n    {\r\n\r\n        require(bytes(name).length > 0, \"constructor: name should not be empty\");\r\n        require(bytes(symbol).length > 0, \"constructor: symbol should not be empty\");\r\n        require(_tokens.length >= 2, \"Contract does not support less than 2 inner tokens\");\r\n\r\n        tokens = _tokens;\r\n        owner = _owner;\r\n        feeReceiver = _feeReceiver;\r\n\r\n        for (uint i = 0; i < tokens.length; i++) {\r\n\r\n            isSubToken[address(tokens[i])] = true;\r\n\r\n            for (uint j = 0; j < i; j++) {\r\n\r\n                require(tokens[i] != tokens[j], \"Only unique tokens are allowed\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function setFeeReceiver(address _feeReceiver) public {\r\n\r\n        require(msg.sender == owner, \"Only owner is allowed\");\r\n        feeReceiver = _feeReceiver;\r\n    }\r\n\r\n    function setOwner(address _owner) public {\r\n\r\n        require(msg.sender == owner, \"Only owner is allowed\");\r\n        owner = _owner;\r\n    }\r\n\r\n    function shutdown() public {\r\n\r\n        require(msg.sender == owner, \"Only owner is allowed\");\r\n        isShutdown = true;\r\n    }\r\n\r\n    function init(\r\n        uint256 mintAmount,\r\n        uint256[] memory tokenAmounts\r\n    ) public payable {\r\n\r\n        require(isShutdown == false, \"Contract is shutdown\");\r\n        require(initialized == false, \"Already initialized\");\r\n\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n\r\n            require(tokenAmounts[i] != 0, \"Token amount should be non-zero\");\r\n\r\n            tokens[i].universalTransferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                tokenAmounts[i]\r\n            );\r\n        }\r\n\r\n        _mint(msg.sender, mintAmount);\r\n\r\n        initialized = true;\r\n\r\n        emit Initialized(\r\n            mintAmount,\r\n            tokenAmounts\r\n        );\r\n    }\r\n\r\n    function tokensLength() public view returns (uint256) {\r\n\r\n        return tokens.length;\r\n    }\r\n\r\n    function getSubTokens() public view returns (IERC20[] memory) {\r\n\r\n        return tokens;\r\n    }\r\n\r\n    function mint(uint256 amount) public payable returns (bool) {\r\n\r\n        require(amount < 1e27, \"Max mint amount is 1e27\");\r\n        require(initialized == true, \"Is not yet initialized\");\r\n\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n\r\n            tokens[i].universalTransferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                tokens[i].universalBalanceOf(address(this)).mul(amount).div(totalSupply())\r\n            );\r\n        }\r\n\r\n        _mint(msg.sender, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function getTokenValues(uint256 amount) view public returns (uint256[] memory values) {\r\n\r\n        values = new uint[](tokens.length);\r\n\r\n        for (uint i = 0; i < tokens.length; i++) {\r\n\r\n            values[i] = tokens[i].universalBalanceOf(address(this)).mul(amount).div(totalSupply());\r\n        }\r\n    }\r\n\r\n    function burn(uint256 amount) public {\r\n\r\n        for (uint i = 0; i < tokens.length; i++) {\r\n\r\n            tokens[i].universalTransfer(\r\n                msg.sender,\r\n                tokens[i].universalBalanceOf(address(this)).mul(amount).div(totalSupply())\r\n            );\r\n        }\r\n\r\n        _burn(msg.sender, amount);\r\n\r\n        if (\r\n            totalSupply() == 0 &&\r\n            !isShutdown\r\n        ) {\r\n\r\n            initialized = false;\r\n        }\r\n    }\r\n\r\n    function getReturn(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount\r\n    ) public view returns (uint256 returnAmount) {\r\n\r\n        require(isSubToken[address(fromToken)], \"From token is not a sub token\");\r\n        require(isSubToken[address(toToken)], \"To token is not a sub token\");\r\n\r\n        uint256 inputAmountWithFee = amount.mul(990);\r\n        // 0.1% fee\r\n        uint256 numerator = inputAmountWithFee.mul(toToken.universalBalanceOf(address(this)));\r\n        uint256 denominator = fromToken.universalBalanceOf(address(this)).mul(1000).add(inputAmountWithFee);\r\n\r\n        return numerator.div(denominator);\r\n    }\r\n\r\n    function swap(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 minReturn\r\n    ) public payable returns (uint256 returnAmount) {\r\n\r\n        return swap(\r\n            fromToken,\r\n            toToken,\r\n            amount,\r\n            minReturn,\r\n            address(0x0)\r\n        );\r\n    }\r\n\r\n    function swap(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        address referrer\r\n    ) public payable returns (uint256 returnAmount) {\r\n\r\n        returnAmount = getReturn(fromToken, toToken, amount);\r\n        require(isShutdown == false, \"Contract is shutdown\");\r\n        require(initialized == true, \"Is not yet initialized\");\r\n        require(returnAmount > 0, \"The return amount is zero\");\r\n        require(returnAmount >= minReturn, \"The return amount is less than minReturn value\");\r\n\r\n        fromToken.universalTransferFrom(msg.sender, address(this), amount);\r\n        toToken.universalTransfer(msg.sender, returnAmount);\r\n\r\n        uint256 fee;\r\n\r\n        if (referrer != address(0x0)) {\r\n\r\n            fee = amount.mul(5).div(1000).div(2);\r\n            fromToken.universalTransfer(referrer, fee, true);\r\n        } else {\r\n\r\n            fee = amount.mul(5).div(1000);\r\n        }\r\n\r\n        if (feeReceiver != address(this)) {\r\n\r\n            fromToken.universalTransfer(feeReceiver, fee, true);\r\n        }\r\n\r\n        emit Swapped(\r\n            address(fromToken),\r\n            address(toToken),\r\n            msg.sender,\r\n            amount,\r\n            returnAmount\r\n        );\r\n    }\r\n\r\n    function flashLoan(\r\n        IERC20[] memory loanTokens,\r\n        uint256[] memory amounts,\r\n        address target,\r\n        bytes memory data\r\n    ) public {\r\n\r\n        require(initialized == true, \"Is not yet initialized\");\r\n        require(isShutdown == false, \"Contract is shutdown\");\r\n\r\n        flashLoanIndex++;\r\n\r\n        uint256 lastFlashLoanIndex = flashLoanIndex;\r\n\r\n        // Backup original balances and lend tokens\r\n        uint256[] memory prevAmounts = new uint[](loanTokens.length);\r\n        uint256[] memory fees = new uint[](loanTokens.length);\r\n\r\n        for (uint i = 0; i < loanTokens.length; i++) {\r\n\r\n            prevAmounts[i] = loanTokens[i].universalBalanceOf(address(this));\r\n            fees[i] = amounts[i].mul(1).div(100000);\r\n\r\n            require(loanTokens[i].universalTransfer(target, amounts[i], true));\r\n        }\r\n\r\n        // Perform arbitrary call\r\n        IMultiTokenArbitraryCallReceiver(target).handleFlashLoan(\r\n            loanTokens,\r\n            amounts,\r\n            fees,\r\n            data\r\n        );\r\n\r\n        // Ensure original balances were restored\r\n        for (uint i = 0; i < loanTokens.length; i++) {\r\n\r\n            require(loanTokens[i].universalBalanceOf(address(this)) >= prevAmounts[i].add(fees[i]));\r\n\r\n            if (feeReceiver != address(this)) {\r\n\r\n                require(loanTokens[i].universalTransfer(feeReceiver, fees[i].div(2), true));\r\n                // send half of the tokens to the fee receiver\r\n            }\r\n        }\r\n\r\n        require(lastFlashLoanIndex == flashLoanIndex, \"Reentrancy is not allowed\");\r\n\r\n        emit FlashLoaned(\r\n            flashLoanIndex,\r\n            msg.sender,\r\n            target\r\n        );\r\n    }\r\n\r\n    function() external payable {\r\n\r\n        require(msg.sender != tx.origin);\r\n    }\r\n}\r\n\r\n// File: contracts/MultiSwap.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract MultiSwap {\r\n\r\n    event MultiTokenCreated(\r\n        address indexed creator,\r\n        uint256 indexed id,\r\n        address indexed multiTokenAddress\r\n    );\r\n\r\n    address public owner;\r\n    address public feeReceiver;\r\n    MultiToken[] public multiTokens;\r\n\r\n    constructor(\r\n        address _owner,\r\n        address _feeReceiver\r\n    ) public {\r\n\r\n        owner = _owner;\r\n        feeReceiver = _feeReceiver;\r\n    }\r\n\r\n    function setFeeReceiver(address _feeReceiver) public {\r\n\r\n        require(msg.sender == owner, \"Only owner is allowed\");\r\n        feeReceiver = _feeReceiver;\r\n    }\r\n\r\n    function setOwner(address _owner) public {\r\n\r\n        require(msg.sender == owner, \"Only owner is allowed\");\r\n        owner = _owner;\r\n    }\r\n\r\n    function multiTokensLength() public view returns (uint256) {\r\n\r\n        return multiTokens.length;\r\n    }\r\n\r\n    function deployMultiToken(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint8 decimals,\r\n        IERC20[] memory tokens\r\n    ) public {\r\n\r\n        multiTokens.push(\r\n            new MultiToken(\r\n                name,\r\n                symbol,\r\n                decimals,\r\n                tokens,\r\n                owner,\r\n                feeReceiver\r\n            )\r\n        );\r\n\r\n        emit MultiTokenCreated(\r\n            msg.sender,\r\n            multiTokens.length - 1,\r\n            address(multiTokens[multiTokens.length - 1])\r\n        );\r\n    }\r\n\r\n    function findByToken(IERC20 token) public view returns (address[] memory result) {\r\n\r\n        uint256 counter = 0;\r\n        address[] memory tempResult = new address[](multiTokens.length);\r\n\r\n        for (uint256 i = 0; i < multiTokens.length; i++) {\r\n\r\n            if (multiTokens[i].isSubToken(address(token))) {\r\n\r\n                counter++;\r\n                tempResult[i] = address(multiTokens[i]);\r\n            }\r\n        }\r\n\r\n        result = new address[](counter);\r\n\r\n        for (uint256 i = 0; i < tempResult.length; i++) {\r\n\r\n            if (tempResult[i] != address(0)) {\r\n\r\n                result[--counter] = address(tempResult[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function findByTokenPair(\r\n        IERC20 fromToken,\r\n        IERC20 toToken\r\n    ) public view returns (address[] memory result) {\r\n\r\n        uint256 counter = 0;\r\n        address[] memory tempResult = new address[](multiTokens.length);\r\n\r\n        for (uint256 i = 0; i < multiTokens.length; i++) {\r\n\r\n            if (\r\n                multiTokens[i].isSubToken(address(fromToken)) &&\r\n                multiTokens[i].isSubToken(address(toToken))\r\n            ) {\r\n\r\n                counter++;\r\n                tempResult[i] = address(multiTokens[i]);\r\n            }\r\n        }\r\n\r\n        result = new address[](counter);\r\n\r\n        for (uint256 i = 0; i < tempResult.length; i++) {\r\n\r\n            if (tempResult[i] != address(0)) {\r\n\r\n                result[--counter] = address(tempResult[i]);\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"FlashLoaned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"loanTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flashLoan\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSubTokens\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getTokenValues\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"}],\"name\":\"init\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isShutdown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSubToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceiver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"shutdown\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MultiToken","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000001400000000000000000000000004d37f28d2db99e8d35a6c725a5f1749a085850a30000000000000000000000004d37f28d2db99e8d35a6c725a5f1749a085850a30000000000000000000000000000000000000000000000000000000000000013544f503133204d756c7469546f6b656e205631000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005544f503133000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000514910771af9ca656af840dff83e8264ecf986ca0000000000000000000000009f8f72aa9304c8b593d555f12ef6589cc3a579a20000000000000000000000000d8775f648430679a709e98d2b0cb6250d2887ef000000000000000000000000e41d2489571d322189246dafa5ebde1f4699f498000000000000000000000000c011a73ee8576fb46f5e1c5751ca3b9fe0af2a6f0000000000000000000000001985365e9f78359a9b6ad760e32412f4a445e8620000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c599000000000000000000000000dd974d5c2e2928dea5f71b9825b8b646686bd20000000000000000000000000089d24a6b4ccb1b6faa2625fe562bdd9a23260359000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000d26114cd6ee289accf82350c8d8487fedb8a0c07","Library":"","LicenseType":"None","SwarmSource":"bzzr://dbff3a045cd7c6b51f35faf2487741c37ec75576a38a7c6684ec25d1c2890ab2"}]}