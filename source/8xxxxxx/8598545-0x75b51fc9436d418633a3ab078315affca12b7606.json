{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/iface/IBrokerRegistry.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\npragma solidity 0.5.7;\r\npragma experimental ABIEncoderV2;\r\n\r\n/// @title IBrokerRegistry\r\n/// @dev A broker is an account that can submit orders on behalf of other\r\n///      accounts. When registering a broker, the owner can also specify a\r\n///      pre-deployed BrokerInterceptor to hook into the exchange smart contracts.\r\n/// @author Daniel Wang - <daniel@loopring.org>.\r\ncontract IBrokerRegistry {\r\n    event BrokerRegistered(\r\n        address owner,\r\n        address broker,\r\n        address interceptor\r\n    );\r\n\r\n    event BrokerUnregistered(\r\n        address owner,\r\n        address broker,\r\n        address interceptor\r\n    );\r\n\r\n    event AllBrokersUnregistered(\r\n        address owner\r\n    );\r\n\r\n    /// @dev   Validates if the broker was registered for the order owner and\r\n    ///        returns the possible BrokerInterceptor to be used.\r\n    /// @param owner The owner of the order\r\n    /// @param broker The broker of the order\r\n    /// @return True if the broker was registered for the owner\r\n    ///         and the BrokerInterceptor to use.\r\n    function getBroker(\r\n        address owner,\r\n        address broker\r\n        )\r\n        external\r\n        view\r\n        returns(\r\n            bool registered,\r\n            address interceptor\r\n        );\r\n\r\n    /// @dev   Gets all registered brokers for an owner.\r\n    /// @param owner The owner\r\n    /// @param start The start index of the list of brokers\r\n    /// @param count The number of brokers to return\r\n    /// @return The list of requested brokers and corresponding BrokerInterceptors\r\n    function getBrokers(\r\n        address owner,\r\n        uint    start,\r\n        uint    count\r\n        )\r\n        external\r\n        view\r\n        returns (\r\n            address[] memory brokers,\r\n            address[] memory interceptors\r\n        );\r\n\r\n    /// @dev   Registers a broker for msg.sender and an optional\r\n    ///        corresponding BrokerInterceptor.\r\n    /// @param broker The broker to register\r\n    /// @param interceptor The optional BrokerInterceptor to use (0x0 allowed)\r\n    function registerBroker(\r\n        address broker,\r\n        address interceptor\r\n        )\r\n        external;\r\n\r\n    /// @dev   Unregisters a broker for msg.sender\r\n    /// @param broker The broker to unregister\r\n    function unregisterBroker(\r\n        address broker\r\n        )\r\n        external;\r\n\r\n    /// @dev   Unregisters all brokers for msg.sender\r\n    function unregisterAllBrokers(\r\n        )\r\n        external;\r\n}\r\n\r\n// File: contracts/iface/IBurnRateTable.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\n\r\n\r\n\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\n/// @title IBurnRateTable - A contract for managing burn rates for tokens\r\ncontract IBurnRateTable {\r\n\r\n    struct TokenData {\r\n        uint    tier;\r\n        uint    validUntil;\r\n    }\r\n\r\n    mapping(address => TokenData) public tokens;\r\n\r\n    uint public constant YEAR_TO_SECONDS = 31556952;\r\n\r\n    // Tiers\r\n    uint8 public constant TIER_4 = 0;\r\n    uint8 public constant TIER_3 = 1;\r\n    uint8 public constant TIER_2 = 2;\r\n    uint8 public constant TIER_1 = 3;\r\n\r\n    uint16 public constant BURN_BASE_PERCENTAGE           =                 100 * 10; // 100%\r\n\r\n    // Cost of upgrading the tier level of a token in a percentage of the total LRC supply\r\n    uint16 public constant TIER_UPGRADE_COST_PERCENTAGE   =                        1; // 0.1%\r\n\r\n    // Burn rates\r\n    // Matching\r\n    uint16 public constant BURN_MATCHING_TIER1            =                       25; // 2.5%\r\n    uint16 public constant BURN_MATCHING_TIER2            =                  15 * 10; //  15%\r\n    uint16 public constant BURN_MATCHING_TIER3            =                  30 * 10; //  30%\r\n    uint16 public constant BURN_MATCHING_TIER4            =                  50 * 10; //  50%\r\n    // P2P\r\n    uint16 public constant BURN_P2P_TIER1                 =                       25; // 2.5%\r\n    uint16 public constant BURN_P2P_TIER2                 =                  15 * 10; //  15%\r\n    uint16 public constant BURN_P2P_TIER3                 =                  30 * 10; //  30%\r\n    uint16 public constant BURN_P2P_TIER4                 =                  50 * 10; //  50%\r\n\r\n    event TokenTierUpgraded(\r\n        address indexed addr,\r\n        uint            tier\r\n    );\r\n\r\n    /// @dev   Returns the P2P and matching burn rate for the token.\r\n    /// @param token The token to get the burn rate for.\r\n    /// @return The burn rate. The P2P burn rate and matching burn rate\r\n    ///         are packed together in the lowest 4 bytes.\r\n    ///         (2 bytes P2P, 2 bytes matching)\r\n    function getBurnRate(\r\n        address token\r\n        )\r\n        external\r\n        view\r\n        returns (uint32 burnRate);\r\n\r\n    /// @dev   Returns the tier of a token.\r\n    /// @param token The token to get the token tier for.\r\n    /// @return The tier of the token\r\n    function getTokenTier(\r\n        address token\r\n        )\r\n        public\r\n        view\r\n        returns (uint);\r\n\r\n    /// @dev   Upgrades the tier of a token. Before calling this function,\r\n    ///        msg.sender needs to approve this contract for the neccessary funds.\r\n    /// @param token The token to upgrade the tier for.\r\n    /// @return True if successful, false otherwise.\r\n    function upgradeTokenTier(\r\n        address token\r\n        )\r\n        external\r\n        returns (bool);\r\n\r\n}\r\n\r\n// File: contracts/iface/IFeeHolder.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\n\r\n\r\n\r\n/// @author Kongliang Zhong - <kongliang@loopring.org>\r\n/// @title IFeeHolder - A contract holding fees.\r\ncontract IFeeHolder {\r\n\r\n    event TokenWithdrawn(\r\n        address owner,\r\n        address token,\r\n        uint value\r\n    );\r\n\r\n    // A map of all fee balances\r\n    mapping(address => mapping(address => uint)) public feeBalances;\r\n\r\n    /// @dev   Allows withdrawing the tokens to be burned by\r\n    ///        authorized contracts.\r\n    /// @param token The token to be used to burn buy and burn LRC\r\n    /// @param value The amount of tokens to withdraw\r\n    function withdrawBurned(\r\n        address token,\r\n        uint value\r\n        )\r\n        external\r\n        returns (bool success);\r\n\r\n    /// @dev   Allows withdrawing the fee payments funds\r\n    ///        msg.sender is the recipient of the fee and the address\r\n    ///        to which the tokens will be sent.\r\n    /// @param token The token to withdraw\r\n    /// @param value The amount of tokens to withdraw\r\n    function withdrawToken(\r\n        address token,\r\n        uint value\r\n        )\r\n        external\r\n        returns (bool success);\r\n\r\n    function batchAddFeeBalances(\r\n        bytes32[] calldata batch\r\n        )\r\n        external;\r\n}\r\n\r\n// File: contracts/iface/IOrderBook.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\n\r\n\r\n\r\n/// @title IOrderBook\r\n/// @author Daniel Wang - <daniel@loopring.org>.\r\n/// @author Kongliang Zhong - <kongliang@loopring.org>.\r\ncontract IOrderBook {\r\n    // The map of registered order hashes\r\n    mapping(bytes32 => bool) public orderSubmitted;\r\n\r\n    /// @dev  Event emitted when an order was successfully submitted\r\n    ///        orderHash      The hash of the order\r\n    ///        orderData      The data of the order as passed to submitOrder()\r\n    event OrderSubmitted(\r\n        bytes32 orderHash,\r\n        bytes   orderData\r\n    );\r\n\r\n    /// @dev   Submits an order to the on-chain order book.\r\n    ///        No signature is needed. The order can only be sumbitted by its\r\n    ///        owner or its broker (the owner can be the address of a contract).\r\n    /// @param orderData The data of the order. Contains all fields that are used\r\n    ///        for the order hash calculation.\r\n    ///        See OrderHelper.updateHash() for detailed information.\r\n    function submitOrder(\r\n        bytes calldata orderData\r\n        )\r\n        external\r\n        returns (bytes32);\r\n}\r\n\r\n// File: contracts/iface/IOrderRegistry.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\n\r\n\r\n\r\n/// @title IOrderRegistry\r\n/// @author Daniel Wang - <daniel@loopring.org>.\r\ncontract IOrderRegistry {\r\n\r\n    /// @dev   Returns wether the order hash was registered in the registry.\r\n    /// @param broker The broker of the order\r\n    /// @param orderHash The hash of the order\r\n    /// @return True if the order hash was registered, else false.\r\n    function isOrderHashRegistered(\r\n        address broker,\r\n        bytes32 orderHash\r\n        )\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    /// @dev   Registers an order in the registry.\r\n    ///        msg.sender needs to be the broker of the order.\r\n    /// @param orderHash The hash of the order\r\n    function registerOrderHash(\r\n        bytes32 orderHash\r\n        )\r\n        external;\r\n}\r\n\r\n// File: contracts/iface/ITradeDelegate.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\n\r\n\r\n\r\n/// @title ITradeDelegate\r\n/// @dev Acts as a middle man to transfer ERC20 tokens on behalf of different\r\n/// versions of Loopring protocol to avoid ERC20 re-authorization.\r\n/// @author Daniel Wang - <daniel@loopring.org>.\r\ncontract ITradeDelegate {\r\n\r\n    function batchTransfer(\r\n        bytes32[] calldata batch\r\n        )\r\n        external;\r\n\r\n\r\n    /// @dev Add a Loopring protocol address.\r\n    /// @param addr A loopring protocol address.\r\n    function authorizeAddress(\r\n        address addr\r\n        )\r\n        external;\r\n\r\n    /// @dev Remove a Loopring protocol address.\r\n    /// @param addr A loopring protocol address.\r\n    function deauthorizeAddress(\r\n        address addr\r\n        )\r\n        external;\r\n\r\n    function isAddressAuthorized(\r\n        address addr\r\n        )\r\n        public\r\n        view\r\n        returns (bool);\r\n\r\n\r\n    function suspend()\r\n        external;\r\n\r\n    function resume()\r\n        external;\r\n\r\n    function kill()\r\n        external;\r\n}\r\n\r\n// File: contracts/iface/ITradeHistory.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\n\r\n\r\n\r\n/// @title ITradeHistory\r\n/// @dev Stores the trade history and cancelled data of orders\r\n/// @author Brecht Devos - <brecht@loopring.org>.\r\ncontract ITradeHistory {\r\n\r\n    // The following map is used to keep trace of order fill and cancellation\r\n    // history.\r\n    mapping (bytes32 => uint) public filled;\r\n\r\n    // This map is used to keep trace of order's cancellation history.\r\n    mapping (address => mapping (bytes32 => bool)) public cancelled;\r\n\r\n    // A map from a broker to its cutoff timestamp.\r\n    mapping (address => uint) public cutoffs;\r\n\r\n    // A map from a broker to its trading-pair cutoff timestamp.\r\n    mapping (address => mapping (bytes20 => uint)) public tradingPairCutoffs;\r\n\r\n    // A map from a broker to an order owner to its cutoff timestamp.\r\n    mapping (address => mapping (address => uint)) public cutoffsOwner;\r\n\r\n    // A map from a broker to an order owner to its trading-pair cutoff timestamp.\r\n    mapping (address => mapping (address => mapping (bytes20 => uint))) public tradingPairCutoffsOwner;\r\n\r\n\r\n    function batchUpdateFilled(\r\n        bytes32[] calldata filledInfo\r\n        )\r\n        external;\r\n\r\n    function setCancelled(\r\n        address broker,\r\n        bytes32 orderHash\r\n        )\r\n        external;\r\n\r\n    function setCutoffs(\r\n        address broker,\r\n        uint cutoff\r\n        )\r\n        external;\r\n\r\n    function setTradingPairCutoffs(\r\n        address broker,\r\n        bytes20 tokenPair,\r\n        uint cutoff\r\n        )\r\n        external;\r\n\r\n    function setCutoffsOfOwner(\r\n        address broker,\r\n        address owner,\r\n        uint cutoff\r\n        )\r\n        external;\r\n\r\n    function setTradingPairCutoffsOfOwner(\r\n        address broker,\r\n        address owner,\r\n        bytes20 tokenPair,\r\n        uint cutoff\r\n        )\r\n        external;\r\n\r\n    function batchGetFilledAndCheckCancelled(\r\n        bytes32[] calldata orderInfo\r\n        )\r\n        external\r\n        view\r\n        returns (uint[] memory fills);\r\n\r\n\r\n    /// @dev Add a Loopring protocol address.\r\n    /// @param addr A loopring protocol address.\r\n    function authorizeAddress(\r\n        address addr\r\n        )\r\n        external;\r\n\r\n    /// @dev Remove a Loopring protocol address.\r\n    /// @param addr A loopring protocol address.\r\n    function deauthorizeAddress(\r\n        address addr\r\n        )\r\n        external;\r\n\r\n    function isAddressAuthorized(\r\n        address addr\r\n        )\r\n        public\r\n        view\r\n        returns (bool);\r\n\r\n\r\n    function suspend()\r\n        external;\r\n\r\n    function resume()\r\n        external;\r\n\r\n    function kill()\r\n        external;\r\n}\r\n\r\n// File: contracts/impl/Data.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlibrary Data {\r\n\r\n    enum TokenType { ERC20 }\r\n\r\n    struct Header {\r\n        uint version;\r\n        uint numOrders;\r\n        uint numRings;\r\n        uint numSpendables;\r\n    }\r\n\r\n    struct BrokerAction {\r\n        bytes32 hash;\r\n        address broker;\r\n        uint[] orderIndices;\r\n        uint numOrders;\r\n        uint[] transferIndices;\r\n        uint numTransfers;\r\n        address tokenS;\r\n        address tokenB;\r\n        address feeToken;\r\n    }\r\n\r\n    struct BrokerTransfer {\r\n        bytes32 hash;\r\n        address token;\r\n        uint amount;\r\n        address recipient;\r\n    }\r\n\r\n    struct BrokerOrder {\r\n        address owner;\r\n        bytes32 orderHash;\r\n        uint fillAmountB;\r\n        uint requestedAmountS;\r\n        uint requestedFeeAmount;\r\n        address tokenRecipient;\r\n        bytes extraData;\r\n    }\r\n\r\n    struct BrokerApprovalRequest {\r\n        BrokerOrder[] orders;\r\n        address tokenS;\r\n        address tokenB;\r\n        address feeToken;\r\n        uint totalFillAmountB;\r\n        uint totalRequestedAmountS;\r\n        uint totalRequestedFeeAmount;\r\n    }\r\n\r\n    struct BrokerInterceptorReport {\r\n        address owner;\r\n        address broker;\r\n        bytes32 orderHash;\r\n        address tokenB;\r\n        address tokenS;\r\n        address feeToken;\r\n        uint fillAmountB;\r\n        uint spentAmountS;\r\n        uint spentFeeAmount;\r\n        address tokenRecipient;\r\n        bytes extraData;\r\n    }\r\n\r\n    struct Context {\r\n        address lrcTokenAddress;\r\n        ITradeDelegate  delegate;\r\n        ITradeHistory   tradeHistory;\r\n        IBrokerRegistry orderBrokerRegistry;\r\n        IOrderRegistry  orderRegistry;\r\n        IFeeHolder feeHolder;\r\n        IOrderBook orderBook;\r\n        IBurnRateTable burnRateTable;\r\n        uint64 ringIndex;\r\n        uint feePercentageBase;\r\n        bytes32[] tokenBurnRates;\r\n        uint feeData;\r\n        uint feePtr;\r\n        uint transferData;\r\n        uint transferPtr;\r\n        BrokerOrder[] brokerOrders;\r\n        BrokerAction[] brokerActions;\r\n        BrokerTransfer[] brokerTransfers;\r\n        uint numBrokerOrders;\r\n        uint numBrokerActions;\r\n        uint numBrokerTransfers;\r\n    }\r\n\r\n    struct Mining {\r\n        // required fields\r\n        address feeRecipient;\r\n\r\n        // optional fields\r\n        address miner;\r\n        bytes   sig;\r\n\r\n        // computed fields\r\n        bytes32 hash;\r\n        address interceptor;\r\n    }\r\n\r\n    struct Spendable {\r\n        bool initialized;\r\n        uint amount;\r\n        uint reserved;\r\n    }\r\n\r\n    struct Order {\r\n        uint      version;\r\n\r\n        // required fields\r\n        address   owner;\r\n        address   tokenS;\r\n        address   tokenB;\r\n        uint      amountS;\r\n        uint      amountB;\r\n        uint      validSince;\r\n        Spendable tokenSpendableS;\r\n        Spendable tokenSpendableFee;\r\n\r\n        // optional fields\r\n        address   dualAuthAddr;\r\n        address   broker;\r\n        Spendable brokerSpendableS;\r\n        Spendable brokerSpendableFee;\r\n        address   orderInterceptor;\r\n        address   wallet;\r\n        uint      validUntil;\r\n        bytes     sig;\r\n        bytes     dualAuthSig;\r\n        bool      allOrNone;\r\n        address   feeToken;\r\n        uint      feeAmount;\r\n        int16     waiveFeePercentage;\r\n        uint16    tokenSFeePercentage;    // Pre-trading\r\n        uint16    tokenBFeePercentage;   // Post-trading\r\n        address   tokenRecipient;\r\n        uint16    walletSplitPercentage;\r\n\r\n        // computed fields\r\n        bool    P2P;\r\n        bytes32 hash;\r\n        address brokerInterceptor;\r\n        uint    filledAmountS;\r\n        uint    initialFilledAmountS;\r\n        bool    valid;\r\n\r\n        TokenType tokenTypeS;\r\n        TokenType tokenTypeB;\r\n        TokenType tokenTypeFee;\r\n        bytes32 trancheS;\r\n        bytes32 trancheB;\r\n        bytes   transferDataS;\r\n    }\r\n\r\n    struct Participation {\r\n        // required fields\r\n        Order order;\r\n\r\n        // computed fields\r\n        uint splitS;\r\n        uint feeAmount;\r\n        uint feeAmountS;\r\n        uint feeAmountB;\r\n        uint rebateFee;\r\n        uint rebateS;\r\n        uint rebateB;\r\n        uint fillAmountS;\r\n        uint fillAmountB;\r\n    }\r\n\r\n    struct Ring {\r\n        uint size;\r\n        Participation[] participations;\r\n        bytes32 hash;\r\n        uint minerFeesToOrdersPercentage;\r\n        bool valid;\r\n    }\r\n\r\n    struct FeeContext {\r\n        Data.Ring ring;\r\n        Data.Context ctx;\r\n        address feeRecipient;\r\n        uint walletPercentage;\r\n        int16 waiveFeePercentage;\r\n        address owner;\r\n        address wallet;\r\n        bool P2P;\r\n    }\r\n}\r\n\r\n// File: contracts/lib/BytesUtil.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\n\r\n\r\n\r\n/// @title Utility Functions for bytes\r\n/// @author Daniel Wang - <daniel@loopring.org>\r\nlibrary BytesUtil {\r\n    function bytesToBytes32(\r\n        bytes memory b,\r\n        uint offset\r\n        )\r\n        internal\r\n        pure\r\n        returns (bytes32)\r\n    {\r\n        return bytes32(bytesToUintX(b, offset, 32));\r\n    }\r\n\r\n    function bytesToUint(\r\n        bytes memory b,\r\n        uint offset\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint)\r\n    {\r\n        return bytesToUintX(b, offset, 32);\r\n    }\r\n\r\n    function bytesToAddress(\r\n        bytes memory b,\r\n        uint offset\r\n        )\r\n        internal\r\n        pure\r\n        returns (address)\r\n    {\r\n        return address(bytesToUintX(b, offset, 20) & 0x00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n    }\r\n\r\n    function bytesToUint16(\r\n        bytes memory b,\r\n        uint offset\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint16)\r\n    {\r\n        return uint16(bytesToUintX(b, offset, 2) & 0xFFFF);\r\n    }\r\n\r\n    function bytesToUintX(\r\n        bytes memory b,\r\n        uint offset,\r\n        uint numBytes\r\n        )\r\n        private\r\n        pure\r\n        returns (uint data)\r\n    {\r\n        require(b.length >= offset + numBytes, \"INVALID_SIZE\");\r\n        assembly {\r\n            data := mload(add(add(b, numBytes), offset))\r\n        }\r\n    }\r\n\r\n    function subBytes(\r\n        bytes memory b,\r\n        uint offset\r\n        )\r\n        internal\r\n        pure\r\n        returns (bytes memory data)\r\n    {\r\n        require(b.length >= offset + 32, \"INVALID_SIZE\");\r\n        assembly {\r\n            data := add(add(b, 32), offset)\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/lib/MultihashUtil.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\n\r\n\r\n\r\n\r\n/// @title Utility Functions for Multihash signature verificaiton\r\n/// @author Daniel Wang - <daniel@loopring.org>\r\n/// For more information:\r\n///   - https://github.com/saurfang/ipfs-multihash-on-solidity\r\n///   - https://github.com/multiformats/multihash\r\n///   - https://github.com/multiformats/js-multihash\r\nlibrary MultihashUtil {\r\n\r\n    enum HashAlgorithm { Ethereum, EIP712 }\r\n\r\n    string public constant SIG_PREFIX = \"\\x19Ethereum Signed Message:\\n32\";\r\n\r\n    function verifySignature(\r\n        address signer,\r\n        bytes32 plaintext,\r\n        bytes memory multihash\r\n        )\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        uint length = multihash.length;\r\n        require(length >= 2, \"invalid multihash format\");\r\n        uint8 algorithm;\r\n        uint8 size;\r\n        assembly {\r\n            algorithm := mload(add(multihash, 1))\r\n            size := mload(add(multihash, 2))\r\n        }\r\n        require(length == (2 + size), \"bad multihash size\");\r\n\r\n        if (algorithm == uint8(HashAlgorithm.Ethereum)) {\r\n            require(signer != address(0x0), \"invalid signer address\");\r\n            require(size == 65, \"bad Ethereum multihash size\");\r\n            bytes32 hash;\r\n            uint8 v;\r\n            bytes32 r;\r\n            bytes32 s;\r\n            assembly {\r\n                let data := mload(0x40)\r\n                mstore(data, 0x19457468657265756d205369676e6564204d6573736167653a0a333200000000) // SIG_PREFIX\r\n                mstore(add(data, 28), plaintext)                                                 // plaintext\r\n                hash := keccak256(data, 60)                                                      // 28 + 32\r\n                // Extract v, r and s from the multihash data\r\n                v := mload(add(multihash, 3))\r\n                r := mload(add(multihash, 35))\r\n                s := mload(add(multihash, 67))\r\n            }\r\n            return signer == ecrecover(\r\n                hash,\r\n                v,\r\n                r,\r\n                s\r\n            );\r\n        } else if (algorithm == uint8(HashAlgorithm.EIP712)) {\r\n            require(signer != address(0x0), \"invalid signer address\");\r\n            require(size == 65, \"bad EIP712 multihash size\");\r\n            uint8 v;\r\n            bytes32 r;\r\n            bytes32 s;\r\n            assembly {\r\n                // Extract v, r and s from the multihash data\r\n                v := mload(add(multihash, 3))\r\n                r := mload(add(multihash, 35))\r\n                s := mload(add(multihash, 67))\r\n            }\r\n            return signer == ecrecover(\r\n                plaintext,\r\n                v,\r\n                r,\r\n                s\r\n            );\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/helper/MiningHelper.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n/// @title MiningHelper\r\n/// @author Daniel Wang - <daniel@loopring.org>.\r\nlibrary MiningHelper {\r\n\r\n    function updateMinerAndInterceptor(\r\n        Data.Mining memory mining\r\n        )\r\n        internal\r\n        pure\r\n    {\r\n\r\n        if (mining.miner == address(0x0)) {\r\n            mining.miner = mining.feeRecipient;\r\n        }\r\n\r\n        // We do not support any interceptors for now\r\n        /* else { */\r\n        /*     (bool registered, address interceptor) = ctx.minerBrokerRegistry.getBroker( */\r\n        /*         mining.feeRecipient, */\r\n        /*         mining.miner */\r\n        /*     ); */\r\n        /*     if (registered) { */\r\n        /*         mining.interceptor = interceptor; */\r\n        /*     } */\r\n        /* } */\r\n    }\r\n\r\n    function updateHash(\r\n        Data.Mining memory mining,\r\n        Data.Ring[] memory rings\r\n        )\r\n        internal\r\n        pure\r\n    {\r\n        bytes32 hash;\r\n        assembly {\r\n            let ring := mload(add(rings, 32))                               // rings[0]\r\n            let ringHashes := mload(add(ring, 64))                          // ring.hash\r\n            for { let i := 1 } lt(i, mload(rings)) { i := add(i, 1) } {\r\n                ring := mload(add(rings, mul(add(i, 1), 32)))               // rings[i]\r\n                ringHashes := xor(ringHashes, mload(add(ring, 64)))         // ring.hash\r\n            }\r\n            let data := mload(0x40)\r\n            data := add(data, 12)\r\n            // Store data back to front to allow overwriting data at the front because of padding\r\n            mstore(add(data, 40), ringHashes)                               // ringHashes\r\n            mstore(sub(add(data, 20), 12), mload(add(mining, 32)))          // mining.miner\r\n            mstore(sub(data, 12),          mload(add(mining,  0)))          // mining.feeRecipient\r\n            hash := keccak256(data, 72)                                     // 20 + 20 + 32\r\n        }\r\n        mining.hash = hash;\r\n    }\r\n\r\n    function checkMinerSignature(\r\n        Data.Mining memory mining\r\n        )\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        if (mining.sig.length == 0) {\r\n            return (msg.sender == mining.miner);\r\n        } else {\r\n            return MultihashUtil.verifySignature(\r\n                mining.miner,\r\n                mining.hash,\r\n                mining.sig\r\n            );\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/lib/ERC20.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\n\r\n\r\n\r\n/// @title ERC20 Token Interface\r\n/// @dev see https://github.com/ethereum/EIPs/issues/20\r\n/// @author Daniel Wang - <daniel@loopring.org>\r\ncontract ERC20 {\r\n    function totalSupply()\r\n        public\r\n        view\r\n        returns (uint256);\r\n\r\n    function balanceOf(\r\n        address who\r\n        )\r\n        public\r\n        view\r\n        returns (uint256);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n        )\r\n        public\r\n        view\r\n        returns (uint256);\r\n\r\n    function transfer(\r\n        address to,\r\n        uint256 value\r\n        )\r\n        public\r\n        returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n        )\r\n        public\r\n        returns (bool);\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 value\r\n        )\r\n        public\r\n        returns (bool);\r\n}\r\n\r\n// File: contracts/lib/MathUint.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\n\r\n\r\n\r\n/// @title Utility Functions for uint\r\n/// @author Daniel Wang - <daniel@loopring.org>\r\nlibrary MathUint {\r\n\r\n    function mul(\r\n        uint a,\r\n        uint b\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint c)\r\n    {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b, \"INVALID_VALUE\");\r\n    }\r\n\r\n    function sub(\r\n        uint a,\r\n        uint b\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint)\r\n    {\r\n        require(b <= a, \"INVALID_VALUE\");\r\n        return a - b;\r\n    }\r\n\r\n    function add(\r\n        uint a,\r\n        uint b\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint c)\r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"INVALID_VALUE\");\r\n    }\r\n\r\n    function hasRoundingError(\r\n        uint value,\r\n        uint numerator,\r\n        uint denominator\r\n        )\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        uint multiplied = mul(value, numerator);\r\n        uint remainder = multiplied % denominator;\r\n        // Return true if the rounding error is larger than 1%\r\n        return mul(remainder, 100) > multiplied;\r\n    }\r\n}\r\n\r\n// File: contracts/iface/IBrokerDelegate.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\n\r\n\r\n\r\n\r\n/**\r\n * @title IBrokerDelegate\r\n * @author Zack Rubenstein\r\n */\r\ninterface IBrokerDelegate {\r\n\r\n  /*\r\n   * Loopring requests an allowance be set on a given token for a specified amount. Order details\r\n   * are provided (tokenS, totalAmountS, tokenB, totalAmountB, orderTokenRecipient, extraOrderData)\r\n   * to aid in any calculations or on-chain exchange of assets that may be required. The last 4\r\n   * parameters concern the actual token approval being requested of the broker.\r\n   *\r\n   * @returns Whether or not onOrderFillReport should be called for orders using this broker\r\n   */\r\n  function brokerRequestAllowance(Data.BrokerApprovalRequest calldata request) external returns (bool);\r\n\r\n  /*\r\n   * After Loopring performs all of the transfers necessary to complete all the submitted\r\n   * rings it will call this function for every order's brokerInterceptor (if set) passing\r\n   * along the final fill counts for tokenB, tokenS and feeToken. This allows actions to be\r\n   * performed on a per-order basis after all tokenS/feeToken funds have left the order owner's\r\n   * possesion and the tokenB funds have been transfered to the order owner's intended recipient\r\n   */\r\n  function onOrderFillReport(Data.BrokerInterceptorReport calldata fillReport) external;\r\n\r\n  /*\r\n   * Get the available token balance controlled by the broker on behalf of an address (owner)\r\n   */\r\n  function brokerBalanceOf(address owner, address token) external view returns (uint);\r\n}\r\n\r\n// File: contracts/helper/OrderHelper.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title OrderHelper\r\n/// @author Daniel Wang - <daniel@loopring.org>.\r\nlibrary OrderHelper {\r\n    using MathUint      for uint;\r\n\r\n    string constant internal EIP191_HEADER = \"\\x19\\x01\";\r\n    string constant internal EIP712_DOMAIN_NAME = \"Loopring Protocol\";\r\n    string constant internal EIP712_DOMAIN_VERSION = \"2\";\r\n    bytes32 constant internal EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = keccak256(\r\n        abi.encodePacked(\r\n            \"EIP712Domain(\",\r\n            \"string name,\",\r\n            \"string version\",\r\n            \")\"\r\n        )\r\n    );\r\n    bytes32 constant internal EIP712_ORDER_SCHEMA_HASH = keccak256(\r\n        abi.encodePacked(\r\n            \"Order(\",\r\n            \"uint amountS,\",\r\n            \"uint amountB,\",\r\n            \"uint feeAmount,\",\r\n            \"uint validSince,\",\r\n            \"uint validUntil,\",\r\n            \"address owner,\",\r\n            \"address tokenS,\",\r\n            \"address tokenB,\",\r\n            \"address dualAuthAddr,\",\r\n            \"address broker,\",\r\n            \"address orderInterceptor,\",\r\n            \"address wallet,\",\r\n            \"address tokenRecipient,\",\r\n            \"address feeToken,\",\r\n            \"uint16 walletSplitPercentage,\",\r\n            \"uint16 tokenSFeePercentage,\",\r\n            \"uint16 tokenBFeePercentage,\",\r\n            \"bool allOrNone,\",\r\n            \"uint8 tokenTypeS,\",\r\n            \"uint8 tokenTypeB,\",\r\n            \"uint8 tokenTypeFee,\",\r\n            \"bytes32 trancheS,\",\r\n            \"bytes32 trancheB,\",\r\n            \"bytes transferDataS\",\r\n            \")\"\r\n        )\r\n    );\r\n    bytes32 constant internal EIP712_DOMAIN_HASH = keccak256(\r\n        abi.encodePacked(\r\n            EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH,\r\n            keccak256(bytes(EIP712_DOMAIN_NAME)),\r\n            keccak256(bytes(EIP712_DOMAIN_VERSION))\r\n        )\r\n    );\r\n\r\n    function updateHash(Data.Order memory order)\r\n        internal\r\n        pure\r\n    {\r\n        /* bytes32 message = keccak256( */\r\n        /*     abi.encode( */\r\n        /*         EIP712_ORDER_SCHEMA_HASH, */\r\n        /*         order.amountS, */\r\n        /*         order.amountB, */\r\n        /*         order.feeAmount, */\r\n        /*         order.validSince, */\r\n        /*         order.validUntil, */\r\n        /*         order.owner, */\r\n        /*         order.tokenS, */\r\n        /*         order.tokenB, */\r\n        /*         order.dualAuthAddr, */\r\n        /*         order.broker, */\r\n        /*         order.orderInterceptor, */\r\n        /*         order.wallet, */\r\n        /*         order.tokenRecipient */\r\n        /*         order.feeToken, */\r\n        /*         order.walletSplitPercentage, */\r\n        /*         order.tokenSFeePercentage, */\r\n        /*         order.tokenBFeePercentage, */\r\n        /*         order.allOrNone, */\r\n        /*         order.tokenTypeS, */\r\n        /*         order.tokenTypeB, */\r\n        /*         order.tokenTypeFee, */\r\n        /*         order.trancheS, */\r\n        /*         order.trancheB, */\r\n        /*         order.transferDataS */\r\n        /*     ) */\r\n        /* ); */\r\n        /* order.hash = keccak256( */\r\n        /*    abi.encodePacked( */\r\n        /*        EIP191_HEADER, */\r\n        /*        EIP712_DOMAIN_HASH, */\r\n        /*        message */\r\n        /*    ) */\r\n        /*); */\r\n\r\n        // Precalculated EIP712_ORDER_SCHEMA_HASH amd EIP712_DOMAIN_HASH because\r\n        // the solidity compiler doesn't correctly precalculate them for us.\r\n        bytes32 _EIP712_ORDER_SCHEMA_HASH = 0x40b942178d2a51f1f61934268590778feb8114db632db7d88537c98d2b05c5f2;\r\n        bytes32 _EIP712_DOMAIN_HASH = 0xaea25658c273c666156bd427f83a666135fcde6887a6c25fc1cd1562bc4f3f34;\r\n\r\n        bytes32 hash;\r\n        assembly {\r\n            // Calculate the hash for transferDataS separately\r\n            let transferDataS := mload(add(order, 1184))              // order.transferDataS\r\n            let transferDataSHash := keccak256(add(transferDataS, 32), mload(transferDataS))\r\n\r\n            let ptr := mload(64)\r\n            mstore(add(ptr,   0), _EIP712_ORDER_SCHEMA_HASH)     // EIP712_ORDER_SCHEMA_HASH\r\n            mstore(add(ptr,  32), mload(add(order, 128)))        // order.amountS\r\n            mstore(add(ptr,  64), mload(add(order, 160)))        // order.amountB\r\n            mstore(add(ptr,  96), mload(add(order, 640)))        // order.feeAmount\r\n            mstore(add(ptr, 128), mload(add(order, 192)))        // order.validSince\r\n            mstore(add(ptr, 160), mload(add(order, 480)))        // order.validUntil\r\n            mstore(add(ptr, 192), mload(add(order,  32)))        // order.owner\r\n            mstore(add(ptr, 224), mload(add(order,  64)))        // order.tokenS\r\n            mstore(add(ptr, 256), mload(add(order,  96)))        // order.tokenB\r\n            mstore(add(ptr, 288), mload(add(order, 288)))        // order.dualAuthAddr\r\n            mstore(add(ptr, 320), mload(add(order, 320)))        // order.broker\r\n            mstore(add(ptr, 352), mload(add(order, 416)))        // order.orderInterceptor\r\n            mstore(add(ptr, 384), mload(add(order, 448)))        // order.wallet\r\n            mstore(add(ptr, 416), mload(add(order, 768)))        // order.tokenRecipient\r\n            mstore(add(ptr, 448), mload(add(order, 608)))        // order.feeToken\r\n            mstore(add(ptr, 480), mload(add(order, 800)))        // order.walletSplitPercentage\r\n            mstore(add(ptr, 512), mload(add(order, 704)))        // order.tokenSFeePercentage\r\n            mstore(add(ptr, 544), mload(add(order, 736)))        // order.tokenBFeePercentage\r\n            mstore(add(ptr, 576), mload(add(order, 576)))        // order.allOrNone\r\n            mstore(add(ptr, 608), mload(add(order, 1024)))       // order.tokenTypeS\r\n            mstore(add(ptr, 640), mload(add(order, 1056)))       // order.tokenTypeB\r\n            mstore(add(ptr, 672), mload(add(order, 1088)))       // order.tokenTypeFee\r\n            mstore(add(ptr, 704), mload(add(order, 1120)))       // order.trancheS\r\n            mstore(add(ptr, 736), mload(add(order, 1152)))       // order.trancheB\r\n            mstore(add(ptr, 768), transferDataSHash)             // keccak256(order.transferDataS)\r\n            let message := keccak256(ptr, 800)                   // 25 * 32\r\n\r\n            mstore(add(ptr,  0), 0x1901)                         // EIP191_HEADER\r\n            mstore(add(ptr, 32), _EIP712_DOMAIN_HASH)            // EIP712_DOMAIN_HASH\r\n            mstore(add(ptr, 64), message)                        // message\r\n            hash := keccak256(add(ptr, 30), 66)                  // 2 + 32 + 32\r\n        }\r\n        order.hash = hash;\r\n    }\r\n\r\n    function check(\r\n        Data.Order memory order,\r\n        Data.Context memory ctx\r\n        )\r\n        internal\r\n        view\r\n    {\r\n        // If the order was already partially filled\r\n        // we don't have to check all of the infos and the signature again\r\n        if(order.filledAmountS == 0) {\r\n            validateAllInfo(order, ctx);\r\n            checkOwnerSignature(order, ctx);\r\n        } else {\r\n            validateUnstableInfo(order, ctx);\r\n        }\r\n\r\n        checkP2P(order);\r\n    }\r\n\r\n    function validateAllInfo(\r\n        Data.Order memory order,\r\n        Data.Context memory ctx\r\n        )\r\n        internal\r\n        view\r\n    {\r\n        bool valid = true;\r\n        valid = valid && (order.version == 0); // unsupported order version\r\n        valid = valid && (order.owner != address(0x0)); // invalid order owner\r\n        valid = valid && (order.tokenS != address(0x0)); // invalid order tokenS\r\n        valid = valid && (order.tokenB != address(0x0)); // invalid order tokenB\r\n        valid = valid && (order.amountS != 0); // invalid order amountS\r\n        valid = valid && (order.amountB != 0); // invalid order amountB\r\n        valid = valid && (order.feeToken != address(0x0)); // invalid fee token\r\n\r\n        valid = valid && (order.tokenSFeePercentage < ctx.feePercentageBase); // invalid tokenS percentage\r\n        valid = valid && (order.tokenBFeePercentage < ctx.feePercentageBase); // invalid tokenB percentage\r\n        valid = valid && (order.walletSplitPercentage <= 100); // invalid wallet split percentage\r\n\r\n        // We only support ERC20 for now\r\n        valid = valid && (order.tokenTypeS == Data.TokenType.ERC20 && order.trancheS == 0x0);\r\n        valid = valid && (order.tokenTypeFee == Data.TokenType.ERC20);\r\n\r\n        // NOTICE: replaced to allow orders to specify market's primary token (to denote order side)\r\n        // valid = valid && (order.tokenTypeB == Data.TokenType.ERC20 && order.trancheB == 0x0);\r\n        valid = valid && (order.tokenTypeB == Data.TokenType.ERC20) && (\r\n            bytes32ToAddress(order.trancheB) == order.tokenB ||\r\n            bytes32ToAddress(order.trancheB) == order.tokenS\r\n        );\r\n\r\n        // NOTICE: commented to allow order.transferDataS to be used for dApps building on Loopring\r\n        // valid = valid && (order.transferDataS.length == 0);\r\n\r\n        valid = valid && (order.validSince <= now); // order is too early to match\r\n\r\n        order.valid = order.valid && valid;\r\n\r\n        validateUnstableInfo(order, ctx);\r\n    }\r\n\r\n\r\n    function validateUnstableInfo(\r\n        Data.Order memory order,\r\n        Data.Context memory ctx\r\n        )\r\n        internal\r\n        view\r\n    {\r\n        bool valid = true;\r\n        valid = valid && (order.validUntil == 0 || order.validUntil > now);  // order is expired\r\n        valid = valid && (order.waiveFeePercentage <= int16(ctx.feePercentageBase)); // invalid waive percentage\r\n        valid = valid && (order.waiveFeePercentage >= -int16(ctx.feePercentageBase)); // invalid waive percentage\r\n        if (order.dualAuthAddr != address(0x0)) { // if dualAuthAddr exists, dualAuthSig must be exist.\r\n            valid = valid && (order.dualAuthSig.length > 0);\r\n        }\r\n        order.valid = order.valid && valid;\r\n    }\r\n\r\n\r\n    function checkP2P(\r\n        Data.Order memory order\r\n        )\r\n        internal\r\n        pure\r\n    {\r\n        order.P2P = (order.tokenSFeePercentage > 0 || order.tokenBFeePercentage > 0);\r\n    }\r\n\r\n    function isBuy(Data.Order memory order) internal pure returns (bool) {\r\n        return bytes32ToAddress(order.trancheB) == order.tokenB;\r\n    }\r\n\r\n    function checkOwnerSignature(\r\n        Data.Order memory order,\r\n        Data.Context memory ctx\r\n        )\r\n        internal\r\n        view\r\n    {\r\n        if (order.sig.length == 0) {\r\n            bool registered = ctx.orderRegistry.isOrderHashRegistered(\r\n                order.owner,\r\n                order.hash\r\n            );\r\n\r\n            if (!registered) {\r\n                order.valid = order.valid && ctx.orderBook.orderSubmitted(order.hash);\r\n            }\r\n        } else {\r\n            order.valid = order.valid && MultihashUtil.verifySignature(\r\n                order.owner,\r\n                order.hash,\r\n                order.sig\r\n            );\r\n            require(order.valid, 'INVALID_SIGNATURE');\r\n        }\r\n    }\r\n\r\n    function checkDualAuthSignature(\r\n        Data.Order memory order,\r\n        bytes32 miningHash\r\n        )\r\n        internal\r\n        pure\r\n    {\r\n        if (order.dualAuthSig.length != 0) {\r\n            order.valid = order.valid && MultihashUtil.verifySignature(\r\n                order.dualAuthAddr,\r\n                miningHash,\r\n                order.dualAuthSig\r\n            );\r\n            require(order.valid, 'INVALID_DUAL_AUTH_SIGNATURE');\r\n        }\r\n    }\r\n\r\n    function validateAllOrNone(\r\n        Data.Order memory order\r\n        )\r\n        internal\r\n        pure\r\n    {\r\n        // Check if this order needs to be completely filled\r\n        if(order.allOrNone) {\r\n            order.valid = order.valid && (order.filledAmountS == order.amountS);\r\n        }\r\n    }\r\n\r\n    function getBrokerHash(Data.Order memory order) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(order.broker, order.tokenS, order.tokenB, order.feeToken));\r\n    }\r\n\r\n    function getSpendableS(\r\n        Data.Order memory order,\r\n        Data.Context memory ctx\r\n        )\r\n        internal\r\n        view\r\n        returns (uint)\r\n    {\r\n        return getSpendable(\r\n            order,\r\n            ctx.delegate,\r\n            order.tokenS,\r\n            order.owner,\r\n            order.tokenSpendableS\r\n        );\r\n    }\r\n\r\n    function getSpendableFee(\r\n        Data.Order memory order,\r\n        Data.Context memory ctx\r\n        )\r\n        internal\r\n        view\r\n        returns (uint)\r\n    {\r\n        return getSpendable(\r\n            order,\r\n            ctx.delegate,\r\n            order.feeToken,\r\n            order.owner,\r\n            order.tokenSpendableFee\r\n        );\r\n    }\r\n\r\n    function reserveAmountS(\r\n        Data.Order memory order,\r\n        uint amount\r\n        )\r\n        internal\r\n        pure\r\n    {\r\n        order.tokenSpendableS.reserved += amount;\r\n    }\r\n\r\n    function reserveAmountFee(\r\n        Data.Order memory order,\r\n        uint amount\r\n        )\r\n        internal\r\n        pure\r\n    {\r\n        order.tokenSpendableFee.reserved += amount;\r\n    }\r\n\r\n    function resetReservations(\r\n        Data.Order memory order\r\n        )\r\n        internal\r\n        pure\r\n    {\r\n        order.tokenSpendableS.reserved = 0;\r\n        order.tokenSpendableFee.reserved = 0;\r\n    }\r\n\r\n    /// @return Amount of ERC20 token that can be spent by this contract.\r\n    function getERC20Spendable(\r\n        Data.Order memory order,\r\n        ITradeDelegate delegate,\r\n        address tokenAddress,\r\n        address owner\r\n        )\r\n        private\r\n        view\r\n        returns (uint spendable)\r\n    {\r\n        if (order.broker == address(0x0)) {\r\n            ERC20 token = ERC20(tokenAddress);\r\n            spendable = token.allowance(\r\n                owner,\r\n                address(delegate)\r\n            );\r\n            if (spendable != 0) {\r\n                uint balance = token.balanceOf(owner);\r\n                spendable = (balance < spendable) ? balance : spendable;\r\n            }\r\n        } else {\r\n            IBrokerDelegate broker = IBrokerDelegate(order.broker);\r\n            spendable = broker.brokerBalanceOf(owner, tokenAddress);\r\n        }\r\n    }\r\n\r\n    function getSpendable(\r\n        Data.Order memory order,\r\n        ITradeDelegate delegate,\r\n        address tokenAddress,\r\n        address owner,\r\n        Data.Spendable memory tokenSpendable\r\n        )\r\n        private\r\n        view\r\n        returns (uint spendable)\r\n    {\r\n        if (!tokenSpendable.initialized) {\r\n            tokenSpendable.amount = getERC20Spendable(\r\n                order,\r\n                delegate,\r\n                tokenAddress,\r\n                owner\r\n            );\r\n            tokenSpendable.initialized = true;\r\n        }\r\n        spendable = tokenSpendable.amount.sub(tokenSpendable.reserved);\r\n    }\r\n\r\n    function bytes32ToAddress(bytes32 data) private pure returns (address) {\r\n        return address(uint160(uint256(data)));\r\n    }\r\n}\r\n\r\n// File: contracts/iface/IRingSubmitter.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\n\r\n\r\n\r\n/// @title IRingSubmitter\r\n/// @author Daniel Wang - <daniel@loopring.org>\r\n/// @author Kongliang Zhong - <kongliang@loopring.org>\r\ncontract IRingSubmitter {\r\n    uint16  public constant FEE_PERCENTAGE_BASE = 1000;\r\n\r\n    /// @dev  Event emitted when a ring was successfully mined\r\n    ///        _ringIndex     The index of the ring\r\n    ///        _ringHash      The hash of the ring\r\n    ///        _feeRecipient  The recipient of the matching fee\r\n    ///        _fills         The info of the orders in the ring stored like:\r\n    ///                       [orderHash, owner, tokenS, amountS, split, feeAmount, feeAmountS, feeAmountB]\r\n    event RingMined(\r\n        uint            _ringIndex,\r\n        bytes32 indexed _ringHash,\r\n        address indexed _feeRecipient,\r\n        bytes           _fills\r\n    );\r\n\r\n    /// @dev   Event emitted when a ring was not successfully mined\r\n    ///         _ringHash  The hash of the ring\r\n    event InvalidRing(\r\n        bytes32 _ringHash\r\n    );\r\n\r\n    /// @dev   Event emitted when fee rebates are distributed (waiveFeePercentage < 0)\r\n    ///         _ringHash   The hash of the ring whose order(s) will receive the rebate\r\n    ///         _orderHash  The hash of the order that will receive the rebate\r\n    ///         _feeToken   The address of the token that will be paid to the _orderHash's owner\r\n    ///         _feeAmount  The amount to be paid to the owner\r\n    event DistributeFeeRebate(\r\n        bytes32 indexed _ringHash,\r\n        bytes32 indexed _orderHash,\r\n        address         _feeToken,\r\n        uint            _feeAmount\r\n    );\r\n\r\n    /// @dev   Submit order-rings for validation and settlement.\r\n    /// @param data Packed data of all rings.\r\n    function submitRings(\r\n        bytes calldata data\r\n        )\r\n        external;\r\n}\r\n\r\n// File: contracts/helper/ParticipationHelper.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title ParticipationHelper\r\n/// @author Daniel Wang - <daniel@loopring.org>.\r\nlibrary ParticipationHelper {\r\n    using MathUint for uint;\r\n    using OrderHelper for Data.Order;\r\n\r\n    function setMaxFillAmounts(\r\n        Data.Participation memory p,\r\n        Data.Context memory ctx\r\n        )\r\n        internal\r\n        view\r\n    {\r\n        uint spendableS = p.order.getSpendableS(ctx);\r\n        uint remainingS = p.order.amountS.sub(p.order.filledAmountS);\r\n        p.fillAmountS = (spendableS < remainingS) ? spendableS : remainingS;\r\n\r\n        if (!p.order.P2P) {\r\n            // No need to check the fee balance of the owner if feeToken == tokenB,\r\n            // fillAmountB will be used to pay the fee.\r\n            if (!(p.order.feeToken == p.order.tokenB &&\r\n                  // p.order.owner == p.order.tokenRecipient &&\r\n                  p.order.feeAmount <= p.order.amountB)) {\r\n                // Check how much fee needs to be paid. We limit fillAmountS to how much\r\n                // fee the order owner can pay.\r\n                uint feeAmount = p.order.feeAmount.mul(p.fillAmountS) / p.order.amountS;\r\n                if (feeAmount > 0) {\r\n                    uint spendableFee = p.order.getSpendableFee(ctx);\r\n                    if (p.order.feeToken == p.order.tokenS && p.fillAmountS + feeAmount > spendableS) {\r\n                        assert(spendableFee == spendableS);\r\n                        // Equally divide the available tokens between fillAmountS and feeAmount\r\n                        uint totalAmount = p.order.amountS.add(p.order.feeAmount);\r\n                        p.fillAmountS = spendableS.mul(p.order.amountS) / totalAmount;\r\n                        feeAmount = spendableS.mul(p.order.feeAmount) / totalAmount;\r\n                    } else if (feeAmount > spendableFee) {\r\n                        // Scale down fillAmountS so the available feeAmount is sufficient\r\n                        feeAmount = spendableFee;\r\n                        p.fillAmountS = feeAmount.mul(p.order.amountS) / p.order.feeAmount;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        p.fillAmountB = p.fillAmountS.mul(p.order.amountB) / p.order.amountS;\r\n    }\r\n\r\n    function calculateFees(\r\n        Data.Participation memory p,\r\n        Data.Participation memory prevP,\r\n        Data.Context memory ctx\r\n        )\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        if (p.order.P2P) {\r\n            // Calculate P2P fees\r\n            p.feeAmount = 0;\r\n            p.feeAmountS = p.fillAmountS.mul(p.order.tokenSFeePercentage) / ctx.feePercentageBase;\r\n            p.feeAmountB = p.fillAmountB.mul(p.order.tokenBFeePercentage) / ctx.feePercentageBase;\r\n        } else {\r\n            // Calculate matching fees\r\n            p.feeAmountS = 0;\r\n            p.feeAmountB = 0;\r\n\r\n            // Use primary token fill ratio to calculate fee\r\n            // if it's a BUY order, use the amount B (tokenB is the primary)\r\n            // if it's a SELL order, use the amount S (tokenS is the primary)\r\n            if (p.order.isBuy()) {\r\n                p.feeAmount = p.order.feeAmount.mul(p.fillAmountB) / p.order.amountB;\r\n            } else {\r\n                p.feeAmount = p.order.feeAmount.mul(p.fillAmountS) / p.order.amountS;\r\n            }\r\n\r\n            // If feeToken == tokenB AND owner == tokenRecipient, try to pay using fillAmountB\r\n\r\n            if (p.order.feeToken == p.order.tokenB &&\r\n                // p.order.owner == p.order.tokenRecipient &&\r\n                p.fillAmountB >= p.feeAmount) {\r\n                p.feeAmountB = p.feeAmount;\r\n                p.feeAmount = 0;\r\n            }\r\n\r\n            if (p.feeAmount > 0) {\r\n                // Make sure we can pay the feeAmount\r\n                uint spendableFee = p.order.getSpendableFee(ctx);\r\n                if (p.feeAmount > spendableFee) {\r\n                    // This normally should not happen, but this is possible when self-trading\r\n                    return false;\r\n                } else {\r\n                    p.order.reserveAmountFee(p.feeAmount);\r\n                }\r\n            }\r\n        }\r\n\r\n        if ((p.fillAmountS - p.feeAmountS) >= prevP.fillAmountB) {\r\n            // NOTICE: this line commented as order recipient should receive the margin\r\n            // p.splitS = (p.fillAmountS - p.feeAmountS) - prevP.fillAmountB;\r\n\r\n            p.fillAmountS = prevP.fillAmountB + p.feeAmountS;\r\n            return true;\r\n        } else {\r\n            revert('INVALID_FEES');\r\n            return false;\r\n        }\r\n        \r\n    }\r\n\r\n    function checkFills(\r\n        Data.Participation memory p\r\n        )\r\n        internal\r\n        pure\r\n        returns (bool valid)\r\n    {\r\n        // NOTICE: deprecated logic, order recipient can get better price as they receive margin\r\n        // Check if the rounding error of the calculated fillAmountB is larger than 1%.\r\n        // If that's the case, this partipation in invalid\r\n        // p.fillAmountB := p.fillAmountS.mul(p.order.amountB) / p.order.amountS\r\n        // valid = !MathUint.hasRoundingError(\r\n        //     p.fillAmountS,\r\n        //     p.order.amountB,\r\n        //     p.order.amountS\r\n        // );\r\n\r\n        // We at least need to buy and sell something\r\n        valid = p.fillAmountS > 0;\r\n        valid = valid && p.fillAmountB > 0;\r\n\r\n        require(valid, 'INVALID_FILLS');\r\n    }\r\n\r\n    function adjustOrderState(\r\n        Data.Participation memory p\r\n        )\r\n        internal\r\n        pure\r\n    {\r\n        // Update filled amount\r\n        p.order.filledAmountS += p.fillAmountS + p.splitS;\r\n\r\n        // Update spendables\r\n        uint totalAmountS = p.fillAmountS;\r\n        uint totalAmountFee = p.feeAmount;\r\n        p.order.tokenSpendableS.amount = p.order.tokenSpendableS.amount.sub(totalAmountS);\r\n        p.order.tokenSpendableFee.amount = p.order.tokenSpendableFee.amount.sub(totalAmountFee);\r\n    }\r\n\r\n    function revertOrderState(\r\n        Data.Participation memory p\r\n        )\r\n        internal\r\n        pure\r\n    {\r\n        // Revert filled amount\r\n        p.order.filledAmountS = p.order.filledAmountS.sub(p.fillAmountS + p.splitS);\r\n\r\n        // We do not revert any spendables. Rings will not get rebalanced so this doesn't matter.\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/helper/RingHelper.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title RingHelper\r\nlibrary RingHelper {\r\n    using MathUint for uint;\r\n    using OrderHelper for Data.Order;\r\n    using ParticipationHelper for Data.Participation;\r\n\r\n    /// @dev   Event emitted when fee rebates are distributed (waiveFeePercentage < 0)\r\n    ///         _ringHash   The hash of the ring whose order(s) will receive the rebate\r\n    ///         _orderHash  The hash of the order that will receive the rebate\r\n    ///         _feeToken   The address of the token that will be paid to the _orderHash's owner\r\n    ///         _feeAmount  The amount to be paid to the owner\r\n    event DistributeFeeRebate(\r\n        bytes32 indexed _ringHash,\r\n        bytes32 indexed _orderHash,\r\n        address         _feeToken,\r\n        uint            _feeAmount\r\n    );\r\n\r\n    function updateHash(\r\n        Data.Ring memory ring\r\n        )\r\n        internal\r\n        pure\r\n    {\r\n        uint ringSize = ring.size;\r\n        bytes32 hash;\r\n        assembly {\r\n            let data := mload(0x40)\r\n            let ptr := data\r\n            let participations := mload(add(ring, 32))                                  // ring.participations\r\n            for { let i := 0 } lt(i, ringSize) { i := add(i, 1) } {\r\n                let participation := mload(add(participations, add(32, mul(i, 32))))    // participations[i]\r\n                let order := mload(participation)                                       // participation.order\r\n\r\n                let waiveFeePercentage := and(mload(add(order, 672)), 0xFFFF)           // order.waiveFeePercentage\r\n                let orderHash := mload(add(order, 864))                                 // order.hash\r\n\r\n                mstore(add(ptr, 2), waiveFeePercentage)\r\n                mstore(ptr, orderHash)\r\n\r\n                ptr := add(ptr, 34)\r\n            }\r\n            hash := keccak256(data, sub(ptr, data))\r\n        }\r\n        ring.hash = hash;\r\n    }\r\n\r\n    function calculateFillAmountAndFee(\r\n        Data.Ring memory ring,\r\n        Data.Context memory ctx\r\n        )\r\n        internal\r\n        view\r\n    {\r\n        // Invalid order data could cause a divide by zero in the calculations\r\n        if (!ring.valid) {\r\n            return;\r\n        }\r\n\r\n        uint i;\r\n        uint prevIndex;\r\n\r\n        for (i = 0; i < ring.size; i++) {\r\n            ring.participations[i].setMaxFillAmounts(\r\n                ctx\r\n            );\r\n        }\r\n\r\n        // Match the orders\r\n        Data.Participation memory taker = ring.participations[0];\r\n        Data.Participation memory maker = ring.participations[1];\r\n\r\n        if (taker.order.isBuy()) {\r\n            uint spread = matchRing(taker, maker);\r\n            taker.fillAmountS = maker.fillAmountB; // For BUY orders owner can sell less to get what is wanted (keeps spread)\r\n            taker.splitS = spread;\r\n        } else {\r\n            matchRing(maker, taker);\r\n            taker.fillAmountB = maker.fillAmountS; // For SELL orders owner sells max and can get more than expected (spends spread)\r\n            taker.splitS = 0;\r\n        }\r\n\r\n        maker.splitS = 0;\r\n\r\n        // Validate matched orders\r\n        for (i = 0; i < ring.size; i++) {\r\n            // Check if the fill amounts of the participation are valid\r\n            ring.valid = ring.valid && ring.participations[i].checkFills();\r\n\r\n            // Reserve the total amount tokenS used for all the orders\r\n            // (e.g. the owner of order 0 could use LRC as feeToken in order 0, while\r\n            // the same owner can also sell LRC in order 2).\r\n            ring.participations[i].order.reserveAmountS(ring.participations[i].fillAmountS);\r\n        }\r\n\r\n        for (i = 0; i < ring.size; i++) {\r\n            prevIndex = (i + ring.size - 1) % ring.size;\r\n\r\n            bool valid = ring.participations[i].calculateFees(ring.participations[prevIndex], ctx);\r\n            if (!valid) {\r\n                ring.valid = false;\r\n                break;\r\n            }\r\n\r\n            int16 waiveFeePercentage = ring.participations[i].order.waiveFeePercentage;\r\n            if (waiveFeePercentage < 0) {\r\n                ring.minerFeesToOrdersPercentage += uint(-waiveFeePercentage);\r\n            }\r\n        }\r\n        // Miner can only distribute 100% of its fees to all orders combined\r\n        ring.valid = ring.valid && (ring.minerFeesToOrdersPercentage <= ctx.feePercentageBase);\r\n\r\n        // Ring calculations are done. Make sure te remove all spendable reservations for this ring\r\n        for (i = 0; i < ring.size; i++) {\r\n            ring.participations[i].order.resetReservations();\r\n        }\r\n    }\r\n\r\n    function matchRing(\r\n        Data.Participation memory buyer,\r\n        Data.Participation memory seller\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint)\r\n    {\r\n        if (buyer.fillAmountB < seller.fillAmountS) {\r\n            // Amount seller wants less than amount maker sells\r\n            seller.fillAmountS = buyer.fillAmountB;\r\n            seller.fillAmountB = seller.fillAmountS.mul(seller.order.amountB) / seller.order.amountS;\r\n        } else {\r\n            buyer.fillAmountB = seller.fillAmountS;\r\n            buyer.fillAmountS = buyer.fillAmountB.mul(buyer.order.amountS) / buyer.order.amountB;\r\n        }\r\n\r\n        require(buyer.fillAmountS >= seller.fillAmountB, \"NOT-MATCHABLE\");\r\n        return buyer.fillAmountS.sub(seller.fillAmountB); // Return spread\r\n    }\r\n\r\n    function calculateOrderFillAmounts(\r\n        Data.Context memory ctx,\r\n        Data.Participation memory p,\r\n        Data.Participation memory prevP,\r\n        uint i,\r\n        uint smallest\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint smallest_)\r\n    {\r\n        // Default to the same smallest index\r\n        smallest_ = smallest;\r\n\r\n        uint postFeeFillAmountS = p.fillAmountS;\r\n        uint tokenSFeePercentage = p.order.tokenSFeePercentage;\r\n        if (tokenSFeePercentage > 0) {\r\n            uint feeAmountS = p.fillAmountS.mul(tokenSFeePercentage) / ctx.feePercentageBase;\r\n            postFeeFillAmountS = p.fillAmountS - feeAmountS;\r\n        }\r\n\r\n        if (prevP.fillAmountB > postFeeFillAmountS) {\r\n            smallest_ = i;\r\n            prevP.fillAmountB = postFeeFillAmountS;\r\n            prevP.fillAmountS = postFeeFillAmountS.mul(prevP.order.amountS) / prevP.order.amountB;\r\n        }\r\n    }\r\n\r\n    function checkOrdersValid(\r\n        Data.Ring memory ring\r\n        )\r\n        internal\r\n        pure\r\n    {\r\n        // NOTICE: deprecated logic, rings must be of size 2 now\r\n        // ring.valid = ring.valid && (ring.size > 1 && ring.size <= 8); // invalid ring size\r\n        \r\n        ring.valid = ring.valid && ring.size == 2;\r\n\r\n        // Ring must consist of a buy and a sell\r\n        ring.valid = ring.valid && (\r\n            (ring.participations[0].order.isBuy() && !ring.participations[1].order.isBuy()) ||\r\n            (ring.participations[1].order.isBuy() && !ring.participations[0].order.isBuy())\r\n        );\r\n\r\n        for (uint i = 0; i < ring.size; i++) {\r\n            uint prev = (i + ring.size - 1) % ring.size;\r\n            ring.valid = ring.valid && ring.participations[i].order.valid;\r\n            ring.valid = ring.valid && ring.participations[i].order.tokenS == ring.participations[prev].order.tokenB;\r\n            ring.valid = ring.valid && !ring.participations[i].order.P2P; // No longer support P2P orders\r\n        }\r\n    }\r\n\r\n    function checkForSubRings(\r\n        Data.Ring memory ring\r\n        )\r\n        internal\r\n        pure\r\n    {\r\n        for (uint i = 0; i < ring.size - 1; i++) {\r\n            address tokenS = ring.participations[i].order.tokenS;\r\n            for (uint j = i + 1; j < ring.size; j++) {\r\n                ring.valid = ring.valid && (tokenS != ring.participations[j].order.tokenS);\r\n            }\r\n        }\r\n    }\r\n\r\n    function adjustOrderStates(\r\n        Data.Ring memory ring\r\n        )\r\n        internal\r\n        pure\r\n    {\r\n        // Adjust the orders\r\n        for (uint i = 0; i < ring.size; i++) {\r\n            ring.participations[i].adjustOrderState();\r\n        }\r\n    }\r\n\r\n\r\n    function revertOrderStats(\r\n        Data.Ring memory ring\r\n        )\r\n        internal\r\n        pure\r\n    {\r\n        for (uint i = 0; i < ring.size; i++) {\r\n            ring.participations[i].revertOrderState();\r\n        }\r\n    }\r\n\r\n    function doPayments(\r\n        Data.Ring memory ring,\r\n        Data.Context memory ctx,\r\n        Data.Mining memory mining\r\n        )\r\n        internal\r\n    {\r\n        payFees(ring, ctx, mining);\r\n        transferTokens(ring, ctx, mining.feeRecipient);\r\n    }\r\n\r\n    function generateFills(\r\n        Data.Ring memory ring,\r\n        uint destPtr\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint fill)\r\n    {\r\n        uint ringSize = ring.size;\r\n        uint fillSize = 8 * 32;\r\n        assembly {\r\n            fill := destPtr\r\n            let participations := mload(add(ring, 32))                                 // ring.participations\r\n\r\n            for { let i := 0 } lt(i, ringSize) { i := add(i, 1) } {\r\n                let participation := mload(add(participations, add(32, mul(i, 32))))   // participations[i]\r\n                let order := mload(participation)                                      // participation.order\r\n\r\n                // Calculate the actual fees paid after rebate\r\n                let feeAmount := sub(\r\n                    mload(add(participation, 64)),                                      // participation.feeAmount\r\n                    mload(add(participation, 160))                                      // participation.rebateFee\r\n                )\r\n                let feeAmountS := sub(\r\n                    mload(add(participation, 96)),                                      // participation.feeAmountS\r\n                    mload(add(participation, 192))                                      // participation.rebateFeeS\r\n                )\r\n                let feeAmountB := sub(\r\n                    mload(add(participation, 128)),                                     // participation.feeAmountB\r\n                    mload(add(participation, 224))                                      // participation.rebateFeeB\r\n                )\r\n\r\n                mstore(add(fill,   0), mload(add(order, 864)))                         // order.hash\r\n                mstore(add(fill,  32), mload(add(order,  32)))                         // order.owner\r\n                mstore(add(fill,  64), mload(add(order,  64)))                         // order.tokenS\r\n                mstore(add(fill,  96), mload(add(participation, 256)))                 // participation.fillAmountS\r\n                mstore(add(fill, 128), mload(add(participation,  32)))                 // participation.splitS\r\n                mstore(add(fill, 160), feeAmount)                                      // feeAmount\r\n                mstore(add(fill, 192), feeAmountS)                                     // feeAmountS\r\n                mstore(add(fill, 224), feeAmountB)                                     // feeAmountB\r\n\r\n                fill := add(fill, fillSize)\r\n            }\r\n        }\r\n    }\r\n\r\n    function transferTokens(\r\n        Data.Ring memory ring,\r\n        Data.Context memory ctx,\r\n        address feeRecipient\r\n        )\r\n        internal\r\n        pure\r\n    {\r\n        for (uint i = 0; i < ring.size; i++) {\r\n            transferTokensForParticipation(\r\n                ctx,\r\n                feeRecipient,\r\n                ring.participations[i],\r\n                ring.participations[(i + ring.size - 1) % ring.size]\r\n            );\r\n        }\r\n    }\r\n\r\n    function transferTokensForParticipation(\r\n        Data.Context memory ctx,\r\n        address feeRecipient,\r\n        Data.Participation memory p,\r\n        Data.Participation memory prevP\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint)\r\n    {\r\n        // If the buyer needs to pay fees in tokenB, the seller needs\r\n        // to send the tokenS amount to the fee holder contract\r\n        uint amountSToBuyer = p.fillAmountS\r\n            .sub(p.feeAmountS)\r\n            .sub(prevP.feeAmountB.sub(prevP.rebateB)); // buyer fee amount after rebate\r\n\r\n        uint amountSToFeeHolder = p.feeAmountS\r\n            .sub(p.rebateS)\r\n            .add(prevP.feeAmountB.sub(prevP.rebateB)); // buyer fee amount after rebate\r\n\r\n        uint amountFeeToFeeHolder = p.feeAmount\r\n            .sub(p.rebateFee);\r\n\r\n\r\n        if (p.order.tokenS == p.order.feeToken) {\r\n            amountSToFeeHolder = amountSToFeeHolder.add(amountFeeToFeeHolder);\r\n            amountFeeToFeeHolder = 0;\r\n        }\r\n\r\n        // Transfers\r\n        if (p.order.broker == address(0x0)) {\r\n            ctx.transferPtr = addTokenTransfer(\r\n                ctx.transferData,\r\n                ctx.transferPtr,\r\n                p.order.tokenS,\r\n                p.order.owner,\r\n                prevP.order.tokenRecipient,\r\n                amountSToBuyer\r\n            );\r\n\r\n            ctx.transferPtr = addTokenTransfer(\r\n                ctx.transferData,\r\n                ctx.transferPtr,\r\n                p.order.feeToken,\r\n                p.order.owner,\r\n                address(ctx.feeHolder),\r\n                amountFeeToFeeHolder\r\n            );\r\n\r\n            ctx.transferPtr = addTokenTransfer(\r\n                ctx.transferData,\r\n                ctx.transferPtr,\r\n                p.order.tokenS,\r\n                p.order.owner,\r\n                address(ctx.feeHolder),\r\n                amountSToFeeHolder\r\n            );\r\n        } else {\r\n            \r\n            // Calculates amount received from other participant\r\n            uint receivableAmountB = prevP.fillAmountS\r\n                .sub(prevP.feeAmountS)\r\n                .sub(p.feeAmountB.sub(p.rebateB)); // seller fee amount after rebate\r\n\r\n            addBrokerTokenTransfer(\r\n                ctx,\r\n                p,\r\n                receivableAmountB, // receivable amount incremented/set in called function for order\r\n                p.order.tokenS,\r\n                prevP.order.tokenRecipient,\r\n                amountSToBuyer,\r\n                false\r\n            );\r\n\r\n            addBrokerTokenTransfer(\r\n                ctx,\r\n                p,\r\n                0, // receivable amount set to 0 for fee transfers\r\n                p.order.feeToken,\r\n                address(ctx.feeHolder),\r\n                amountFeeToFeeHolder,\r\n                true // this transfer concerns the fee token\r\n            );\r\n\r\n            addBrokerTokenTransfer(\r\n                ctx,\r\n                p,\r\n                0, // receivable amount set to 0 for fee transfers\r\n                p.order.tokenS,\r\n                address(ctx.feeHolder),\r\n                amountSToFeeHolder,\r\n                false\r\n            );\r\n        }\r\n        \r\n\r\n        // NOTICE: Dolomite does not take the margin ever. We still track it for the order's history.\r\n        // ctx.transferPtr = addTokenTransfer(\r\n        //     ctx.transferData,\r\n        //     ctx.transferPtr,\r\n        //     p.order.tokenS,\r\n        //     p.order.owner,\r\n        //     feeRecipient,\r\n        //     p.splitS\r\n        // );\r\n    }\r\n\r\n    function addBrokerTokenTransfer(\r\n        Data.Context memory ctx,\r\n        Data.Participation memory participation,\r\n        uint receivableAmount,\r\n        address requestToken, \r\n        address recipient,\r\n        uint requestAmount,\r\n        bool isForFeeToken\r\n    )\r\n        internal\r\n        pure\r\n    {\r\n        if (requestAmount > 0) {\r\n            bytes32 actionHash = participation.order.getBrokerHash();\r\n            bytes32 transferHash = keccak256(abi.encodePacked(actionHash, requestToken, recipient));\r\n            \r\n            Data.BrokerAction memory action;\r\n            bool isActionNewlyCreated = false;\r\n\r\n            uint index = 0;\r\n            bool found = false;\r\n\r\n            // Find a preexisting BrokerAction\r\n            for (index = 0; index < ctx.numBrokerActions; index++) {\r\n                if (ctx.brokerActions[index].hash == actionHash) {\r\n                    action = ctx.brokerActions[index];\r\n                    found = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // If none exist, create a new BrokerAction\r\n            if (!found) {\r\n                action = Data.BrokerAction({\r\n                    hash: actionHash,\r\n                    broker: participation.order.broker,\r\n                    orderIndices: new uint[](ctx.brokerOrders.length),\r\n                    numOrders: 0,\r\n                    transferIndices: new uint[](ctx.brokerTransfers.length * 3),\r\n                    numTransfers: 0,\r\n                    tokenS: participation.order.tokenS,\r\n                    tokenB: participation.order.tokenB,\r\n                    feeToken: participation.order.feeToken\r\n                });\r\n                ctx.brokerActions[ctx.numBrokerActions] = action;\r\n                ctx.numBrokerActions += 1;\r\n                isActionNewlyCreated = true;\r\n            } else {\r\n                found = false;\r\n            }\r\n\r\n            // Find a preexisting BrokerOrder for the participant's order from those registered with the action\r\n            if (!isActionNewlyCreated) {\r\n                for (index = 0; index < action.numOrders; index++) {\r\n                    if (ctx.brokerOrders[action.orderIndices[index]].orderHash == participation.order.hash) {\r\n                        Data.BrokerOrder memory brokerOrder = ctx.brokerOrders[action.orderIndices[index]];\r\n                        brokerOrder.fillAmountB += receivableAmount;\r\n                        \r\n                        if (isForFeeToken) {\r\n                            brokerOrder.requestedFeeAmount += requestAmount;\r\n                        } else {\r\n                            brokerOrder.requestedAmountS += requestAmount;\r\n                        }\r\n\r\n                        found = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            \r\n            // If none exist, create a new BrokerOrder\r\n            if (!found) {\r\n                ctx.brokerOrders[ctx.numBrokerOrders] = Data.BrokerOrder({\r\n                    owner: participation.order.owner,\r\n                    orderHash: participation.order.hash,\r\n                    fillAmountB: receivableAmount,\r\n                    requestedAmountS: isForFeeToken ? 0 : requestAmount,\r\n                    requestedFeeAmount: isForFeeToken ? requestAmount : 0,\r\n                    tokenRecipient: participation.order.tokenRecipient,\r\n                    extraData: participation.order.transferDataS\r\n                });\r\n                action.orderIndices[action.numOrders] = ctx.numBrokerOrders;\r\n                action.numOrders += 1;\r\n                ctx.numBrokerOrders += 1;\r\n            } else {\r\n                found = false;\r\n            }\r\n\r\n            // Find a preexisting BrokerTransfer from those registered with the action\r\n            if (!isActionNewlyCreated) {\r\n                for (index = 0; index < action.numTransfers; index++) {\r\n                    if (ctx.brokerTransfers[action.transferIndices[index]].hash == transferHash) {\r\n                        Data.BrokerTransfer memory transfer = ctx.brokerTransfers[action.transferIndices[index]];\r\n                        transfer.amount += requestAmount;\r\n                        found = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // If none exist, create a new BrokerTransfer\r\n            if (!found) {\r\n                ctx.brokerTransfers[ctx.numBrokerTransfers] = Data.BrokerTransfer(transferHash, requestToken, requestAmount, recipient);\r\n                action.transferIndices[action.numTransfers] = ctx.numBrokerTransfers;\r\n                action.numTransfers += 1;\r\n                ctx.numBrokerTransfers += 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    function addTokenTransfer(\r\n        uint data,\r\n        uint ptr,\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint amount\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint)\r\n    {\r\n        if (amount > 0 && from != to) {\r\n            assembly {\r\n                // Try to find an existing fee payment of the same token to the same owner\r\n                let addNew := 1\r\n                for { let p := data } lt(p, ptr) { p := add(p, 128) } {\r\n                    let dataToken := mload(add(p,  0))\r\n                    let dataFrom := mload(add(p, 32))\r\n                    let dataTo := mload(add(p, 64))\r\n                    // if(token == dataToken && from == dataFrom && to == dataTo)\r\n                    if and(and(eq(token, dataToken), eq(from, dataFrom)), eq(to, dataTo)) {\r\n                        let dataAmount := mload(add(p, 96))\r\n                        // dataAmount = amount.add(dataAmount);\r\n                        dataAmount := add(amount, dataAmount)\r\n                        // require(dataAmount >= amount) (safe math)\r\n                        if lt(dataAmount, amount) {\r\n                            revert(0, 0)\r\n                        }\r\n                        mstore(add(p, 96), dataAmount)\r\n                        addNew := 0\r\n                        // End the loop\r\n                        p := ptr\r\n                    }\r\n                }\r\n                // Add a new transfer\r\n                if eq(addNew, 1) {\r\n                    mstore(add(ptr,  0), token)\r\n                    mstore(add(ptr, 32), from)\r\n                    mstore(add(ptr, 64), to)\r\n                    mstore(add(ptr, 96), amount)\r\n                    ptr := add(ptr, 128)\r\n                }\r\n            }\r\n            return ptr;\r\n        } else {\r\n            return ptr;\r\n        }\r\n    }\r\n\r\n    function payFees(\r\n        Data.Ring memory ring,\r\n        Data.Context memory ctx,\r\n        Data.Mining memory mining\r\n        )\r\n        internal\r\n    {\r\n        Data.FeeContext memory feeCtx;\r\n        feeCtx.ring = ring;\r\n        feeCtx.ctx = ctx;\r\n        feeCtx.feeRecipient = mining.feeRecipient;\r\n        for (uint i = 0; i < ring.size; i++) {\r\n            payFeesForParticipation(\r\n                feeCtx,\r\n                ring.participations[i]\r\n            );\r\n        }\r\n    }\r\n\r\n    function payFeesForParticipation(\r\n        Data.FeeContext memory feeCtx,\r\n        Data.Participation memory p\r\n        )\r\n        internal\r\n        returns (uint)\r\n    {\r\n        feeCtx.walletPercentage = p.order.P2P ? 100 : (\r\n            (p.order.wallet == address(0x0) ? 0 : p.order.walletSplitPercentage)\r\n        );\r\n        feeCtx.waiveFeePercentage = p.order.waiveFeePercentage;\r\n        feeCtx.owner = p.order.owner;\r\n        feeCtx.wallet = p.order.wallet;\r\n        feeCtx.P2P = p.order.P2P;\r\n\r\n        p.rebateFee = payFeesAndBurn(\r\n            feeCtx,\r\n            p.order.feeToken,\r\n            p.feeAmount\r\n        );\r\n        p.rebateS = payFeesAndBurn(\r\n            feeCtx,\r\n            p.order.tokenS,\r\n            p.feeAmountS\r\n        );\r\n        p.rebateB = payFeesAndBurn(\r\n            feeCtx,\r\n            p.order.tokenB,\r\n            p.feeAmountB\r\n        );\r\n    }\r\n\r\n    function payFeesAndBurn(\r\n        Data.FeeContext memory feeCtx,\r\n        address token,\r\n        uint totalAmount\r\n        )\r\n        internal\r\n        returns (uint)\r\n    {\r\n        if (totalAmount == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint amount = totalAmount;\r\n        // No need to pay any fees in a P2P order without a wallet\r\n        // (but the fee amount is a part of amountS of the order, so the fee amount is rebated).\r\n        if (feeCtx.P2P && feeCtx.wallet == address(0x0)) {\r\n            amount = 0;\r\n        }\r\n\r\n        uint feeToWallet = 0;\r\n        uint minerFee = 0;\r\n        uint minerFeeBurn = 0;\r\n        uint walletFeeBurn = 0;\r\n        if (amount > 0) {\r\n            feeToWallet = amount.mul(feeCtx.walletPercentage) / 100;\r\n            minerFee = amount - feeToWallet;\r\n\r\n            // Miner can waive fees for this order. If waiveFeePercentage > 0 this is a simple reduction in fees.\r\n            if (feeCtx.waiveFeePercentage > 0) {\r\n                minerFee = minerFee.mul(\r\n                    feeCtx.ctx.feePercentageBase - uint(feeCtx.waiveFeePercentage)) /\r\n                    feeCtx.ctx.feePercentageBase;\r\n            } else if (feeCtx.waiveFeePercentage < 0) {\r\n                // No fees need to be paid by this order\r\n                minerFee = 0;\r\n            }\r\n\r\n            uint32 burnRate = getBurnRate(feeCtx, token);\r\n            assert(burnRate <= feeCtx.ctx.feePercentageBase);\r\n\r\n            // Miner fee\r\n            minerFeeBurn = minerFee.mul(burnRate) / feeCtx.ctx.feePercentageBase;\r\n            minerFee = minerFee - minerFeeBurn;\r\n            // Wallet fee\r\n            walletFeeBurn = feeToWallet.mul(burnRate) / feeCtx.ctx.feePercentageBase;\r\n            feeToWallet = feeToWallet - walletFeeBurn;\r\n\r\n            // Pay the wallet\r\n            feeCtx.ctx.feePtr = addFeePayment(\r\n                feeCtx.ctx.feeData,\r\n                feeCtx.ctx.feePtr,\r\n                token,\r\n                feeCtx.wallet,\r\n                feeToWallet\r\n            );\r\n\r\n            // Pay the burn rate with the feeHolder as owner\r\n            feeCtx.ctx.feePtr = addFeePayment(\r\n                feeCtx.ctx.feeData,\r\n                feeCtx.ctx.feePtr,\r\n                token,\r\n                address(feeCtx.ctx.feeHolder),\r\n                minerFeeBurn + walletFeeBurn\r\n            );\r\n\r\n            // Fees can be paid out in different tokens so we can't easily accumulate the total fee\r\n            // that needs to be paid out to order owners. So we pay out each part out here to all\r\n            // orders that need it.\r\n            uint feeToMiner = minerFee;\r\n            if (feeCtx.ring.minerFeesToOrdersPercentage > 0 && minerFee > 0) {\r\n                // Pay out the fees to the orders\r\n                distributeMinerFeeToOwners(\r\n                    feeCtx,\r\n                    token,\r\n                    minerFee\r\n                );\r\n                // Subtract all fees the miner pays to the orders\r\n                feeToMiner = minerFee.mul(feeCtx.ctx.feePercentageBase -\r\n                    feeCtx.ring.minerFeesToOrdersPercentage) /\r\n                    feeCtx.ctx.feePercentageBase;\r\n            }\r\n\r\n            // Pay the miner\r\n            feeCtx.ctx.feePtr = addFeePayment(\r\n                feeCtx.ctx.feeData,\r\n                feeCtx.ctx.feePtr,\r\n                token,\r\n                feeCtx.feeRecipient,\r\n                feeToMiner\r\n            );\r\n        }\r\n\r\n        // Calculate the total fee payment after possible discounts (burn rebate + fee waiving)\r\n        // and return the total rebate\r\n        return totalAmount.sub((feeToWallet + minerFee) + (minerFeeBurn + walletFeeBurn));\r\n    }\r\n\r\n    function getBurnRate(\r\n        Data.FeeContext memory feeCtx,\r\n        address token\r\n        )\r\n        internal\r\n        view\r\n        returns (uint32)\r\n    {\r\n        bytes32[] memory tokenBurnRates = feeCtx.ctx.tokenBurnRates;\r\n        uint length = tokenBurnRates.length;\r\n        for (uint i = 0; i < length; i += 2) {\r\n            if (token == address(bytes20(tokenBurnRates[i]))) {\r\n                uint32 burnRate = uint32(bytes4(tokenBurnRates[i + 1]));\r\n                return feeCtx.P2P ? (burnRate / 0x10000) : (burnRate & 0xFFFF);\r\n            }\r\n        }\r\n        // Not found, add it to the list\r\n        uint32 burnRate = feeCtx.ctx.burnRateTable.getBurnRate(token);\r\n        assembly {\r\n            let ptr := add(tokenBurnRates, mul(add(1, length), 32))\r\n            mstore(ptr, token)                              // token\r\n            mstore(add(ptr, 32), burnRate)                  // burn rate\r\n            mstore(tokenBurnRates, add(length, 2))          // length\r\n        }\r\n        return feeCtx.P2P ? (burnRate / 0x10000) : (burnRate & 0xFFFF);\r\n    }\r\n\r\n    function distributeMinerFeeToOwners(\r\n        Data.FeeContext memory feeCtx,\r\n        address token,\r\n        uint minerFee\r\n        )\r\n        internal\r\n    {\r\n        for (uint i = 0; i < feeCtx.ring.size; i++) {\r\n            if (feeCtx.ring.participations[i].order.waiveFeePercentage < 0) {\r\n                uint feeToOwner = minerFee\r\n                    .mul(uint(-feeCtx.ring.participations[i].order.waiveFeePercentage)) / feeCtx.ctx.feePercentageBase;\r\n\r\n                emit DistributeFeeRebate(feeCtx.ring.hash, feeCtx.ring.participations[i].order.hash, token, feeToOwner);\r\n\r\n                feeCtx.ctx.feePtr = addFeePayment(\r\n                    feeCtx.ctx.feeData,\r\n                    feeCtx.ctx.feePtr,\r\n                    token,\r\n                    feeCtx.ring.participations[i].order.owner,\r\n                    feeToOwner);\r\n            }\r\n        }\r\n    }\r\n\r\n    function addFeePayment(\r\n        uint data,\r\n        uint ptr,\r\n        address token,\r\n        address owner,\r\n        uint amount\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint)\r\n    {\r\n        if (amount == 0) {\r\n            return ptr;\r\n        } else {\r\n            assembly {\r\n                // Try to find an existing fee payment of the same token to the same owner\r\n                let addNew := 1\r\n                for { let p := data } lt(p, ptr) { p := add(p, 96) } {\r\n                    let dataToken := mload(add(p,  0))\r\n                    let dataOwner := mload(add(p, 32))\r\n                    // if(token == dataToken && owner == dataOwner)\r\n                    if and(eq(token, dataToken), eq(owner, dataOwner)) {\r\n                        let dataAmount := mload(add(p, 64))\r\n                        // dataAmount = amount.add(dataAmount);\r\n                        dataAmount := add(amount, dataAmount)\r\n                        // require(dataAmount >= amount) (safe math)\r\n                        if lt(dataAmount, amount) {\r\n                            revert(0, 0)\r\n                        }\r\n                        mstore(add(p, 64), dataAmount)\r\n                        addNew := 0\r\n                        // End the loop\r\n                        p := ptr\r\n                    }\r\n                }\r\n                // Add a new fee payment\r\n                if eq(addNew, 1) {\r\n                    mstore(add(ptr,  0), token)\r\n                    mstore(add(ptr, 32), owner)\r\n                    mstore(add(ptr, 64), amount)\r\n                    ptr := add(ptr, 96)\r\n                }\r\n            }\r\n            return ptr;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/iface/Errors.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\n\r\n\r\n\r\n/// @title Errors\r\ncontract Errors {\r\n    string constant ZERO_VALUE                 = \"ZERO_VALUE\";\r\n    string constant ZERO_ADDRESS               = \"ZERO_ADDRESS\";\r\n    string constant INVALID_VALUE              = \"INVALID_VALUE\";\r\n    string constant INVALID_ADDRESS            = \"INVALID_ADDRESS\";\r\n    string constant INVALID_SIZE               = \"INVALID_SIZE\";\r\n    string constant INVALID_SIG                = \"INVALID_SIG\";\r\n    string constant INVALID_STATE              = \"INVALID_STATE\";\r\n    string constant NOT_FOUND                  = \"NOT_FOUND\";\r\n    string constant ALREADY_EXIST              = \"ALREADY_EXIST\";\r\n    string constant REENTRY                    = \"REENTRY\";\r\n    string constant UNAUTHORIZED               = \"UNAUTHORIZED\";\r\n    string constant UNIMPLEMENTED              = \"UNIMPLEMENTED\";\r\n    string constant UNSUPPORTED                = \"UNSUPPORTED\";\r\n    string constant TRANSFER_FAILURE           = \"TRANSFER_FAILURE\";\r\n    string constant WITHDRAWAL_FAILURE         = \"WITHDRAWAL_FAILURE\";\r\n    string constant BURN_FAILURE               = \"BURN_FAILURE\";\r\n    string constant BURN_RATE_FROZEN           = \"BURN_RATE_FROZEN\";\r\n    string constant BURN_RATE_MINIMIZED        = \"BURN_RATE_MINIMIZED\";\r\n    string constant UNAUTHORIZED_ONCHAIN_ORDER = \"UNAUTHORIZED_ONCHAIN_ORDER\";\r\n    string constant INVALID_CANDIDATE          = \"INVALID_CANDIDATE\";\r\n    string constant ALREADY_VOTED              = \"ALREADY_VOTED\";\r\n    string constant NOT_OWNER                  = \"NOT_OWNER\";\r\n}\r\n\r\n// File: contracts/lib/NoDefaultFunc.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\n\r\n\r\n\r\n\r\n/// @title NoDefaultFunc\r\n/// @dev Disable default functions.\r\ncontract NoDefaultFunc is Errors {\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        revert(UNSUPPORTED);\r\n    }\r\n}\r\n\r\n// File: contracts/lib/ERC20SafeTransfer.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\n\r\n\r\n\r\n/// @title ERC20 safe transfer\r\n/// @dev see https://github.com/sec-bit/badERC20Fix\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\nlibrary ERC20SafeTransfer {\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value)\r\n        internal\r\n        returns (bool success)\r\n    {\r\n        // A transfer is successful when 'call' is successful and depending on the token:\r\n        // - No value is returned: we assume a revert when the transfer failed (i.e. 'call' returns false)\r\n        // - A single boolean is returned: this boolean needs to be true (non-zero)\r\n\r\n        // bytes4(keccak256(\"transfer(address,uint256)\")) = 0xa9059cbb\r\n        bytes memory callData = abi.encodeWithSelector(\r\n            bytes4(0xa9059cbb),\r\n            to,\r\n            value\r\n        );\r\n        (success, ) = token.call(callData);\r\n        return checkReturnValue(success);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value)\r\n        internal\r\n        returns (bool success)\r\n    {\r\n        // A transferFrom is successful when 'call' is successful and depending on the token:\r\n        // - No value is returned: we assume a revert when the transfer failed (i.e. 'call' returns false)\r\n        // - A single boolean is returned: this boolean needs to be true (non-zero)\r\n\r\n        // bytes4(keccak256(\"transferFrom(address,address,uint256)\")) = 0x23b872dd\r\n        bytes memory callData = abi.encodeWithSelector(\r\n            bytes4(0x23b872dd),\r\n            from,\r\n            to,\r\n            value\r\n        );\r\n        (success, ) = token.call(callData);\r\n        return checkReturnValue(success);\r\n    }\r\n\r\n    function checkReturnValue(\r\n        bool success\r\n        )\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        // A transfer/transferFrom is successful when 'call' is successful and depending on the token:\r\n        // - No value is returned: we assume a revert when the transfer failed (i.e. 'call' returns false)\r\n        // - A single boolean is returned: this boolean needs to be true (non-zero)\r\n        if (success) {\r\n            assembly {\r\n                switch returndatasize()\r\n                // Non-standard ERC20: nothing is returned so if 'call' was successful we assume the transfer succeeded\r\n                case 0 {\r\n                    success := 1\r\n                }\r\n                // Standard ERC20: a single boolean value is returned which needs to be true\r\n                case 32 {\r\n                    returndatacopy(0, 0, 32)\r\n                    success := mload(0)\r\n                }\r\n                // None of the above: not successful\r\n                default {\r\n                    success := 0\r\n                }\r\n            }\r\n        }\r\n        return success;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/impl/ExchangeDeserializer.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n/// @title Deserializes the data passed to submitRings\r\n/// @author Daniel Wang - <daniel@loopring.org>,\r\nlibrary ExchangeDeserializer {\r\n    using BytesUtil     for bytes;\r\n\r\n    function deserialize(\r\n        address lrcTokenAddress,\r\n        bytes memory data\r\n        )\r\n        internal\r\n        view\r\n        returns (\r\n            Data.Mining memory mining,\r\n            Data.Order[] memory orders,\r\n            Data.Ring[] memory rings\r\n        )\r\n    {\r\n        // Read the header\r\n        Data.Header memory header;\r\n        header.version = data.bytesToUint16(0);\r\n        header.numOrders = data.bytesToUint16(2);\r\n        header.numRings = data.bytesToUint16(4);\r\n        header.numSpendables = data.bytesToUint16(6);\r\n\r\n        // Validation\r\n        require(header.version == 0, \"Unsupported serialization format\");\r\n        require(header.numOrders > 0, \"Invalid number of orders\");\r\n        require(header.numRings > 0, \"Invalid number of rings\");\r\n        require(header.numSpendables > 0, \"Invalid number of spendables\");\r\n\r\n        // Calculate data pointers\r\n        uint dataPtr;\r\n        assembly {\r\n            dataPtr := data\r\n        }\r\n        uint miningDataPtr = dataPtr + 8;\r\n        uint orderDataPtr = miningDataPtr + 3 * 2;\r\n        uint ringDataPtr = orderDataPtr + (30 * header.numOrders) * 2;\r\n        uint dataBlobPtr = ringDataPtr + (header.numRings * 9) + 32;\r\n\r\n        // The data stream needs to be at least large enough for the\r\n        // header/mining/orders/rings data + 64 bytes of zeros in the data blob.\r\n        require(data.length >= (dataBlobPtr - dataPtr) + 32, \"Invalid input data\");\r\n\r\n        // Setup the rings\r\n        mining = setupMiningData(dataBlobPtr, miningDataPtr + 2);\r\n        orders = setupOrders(dataBlobPtr, orderDataPtr + 2, header.numOrders, header.numSpendables, lrcTokenAddress);\r\n        rings = assembleRings(ringDataPtr + 1, header.numRings, orders);\r\n    }\r\n\r\n    function setupMiningData(\r\n        uint data,\r\n        uint tablesPtr\r\n        )\r\n        internal\r\n        view\r\n        returns (Data.Mining memory mining)\r\n    {\r\n        bytes memory emptyBytes = new bytes(0);\r\n        uint offset;\r\n\r\n        assembly {\r\n            // Default to transaction origin for feeRecipient\r\n            mstore(add(data, 20), origin)\r\n\r\n            // mining.feeRecipient\r\n            offset := mul(and(mload(add(tablesPtr,  0)), 0xFFFF), 4)\r\n            mstore(\r\n                add(mining,   0),\r\n                mload(add(add(data, 20), offset))\r\n            )\r\n\r\n            // Restore default to 0\r\n            mstore(add(data, 20), 0)\r\n\r\n            // mining.miner\r\n            offset := mul(and(mload(add(tablesPtr,  2)), 0xFFFF), 4)\r\n            mstore(\r\n                add(mining,  32),\r\n                mload(add(add(data, 20), offset))\r\n            )\r\n\r\n            // Default to empty bytes array\r\n            mstore(add(data, 32), emptyBytes)\r\n\r\n            // mining.sig\r\n            offset := mul(and(mload(add(tablesPtr,  4)), 0xFFFF), 4)\r\n            mstore(\r\n                add(mining, 64),\r\n                add(data, add(offset, 32))\r\n            )\r\n\r\n            // Restore default to 0\r\n            mstore(add(data, 32), 0)\r\n        }\r\n    }\r\n\r\n    function setupOrders(\r\n        uint data,\r\n        uint tablesPtr,\r\n        uint numOrders,\r\n        uint numSpendables,\r\n        address lrcTokenAddress\r\n        )\r\n        internal\r\n        pure\r\n        returns (Data.Order[] memory orders)\r\n    {\r\n        bytes memory emptyBytes = new bytes(0);\r\n        uint orderStructSize = 38 * 32;\r\n        // Memory for orders length + numOrders order pointers\r\n        uint arrayDataSize = (1 + numOrders) * 32;\r\n        Data.Spendable[] memory spendableList = new Data.Spendable[](numSpendables);\r\n        uint offset;\r\n\r\n        assembly {\r\n            // Allocate memory for all orders\r\n            orders := mload(0x40)\r\n            mstore(add(orders, 0), numOrders)                       // orders.length\r\n            // Reserve the memory for the orders array\r\n            mstore(0x40, add(orders, add(arrayDataSize, mul(orderStructSize, numOrders))))\r\n\r\n            for { let i := 0 } lt(i, numOrders) { i := add(i, 1) } {\r\n                let order := add(orders, add(arrayDataSize, mul(orderStructSize, i)))\r\n\r\n                // Store the memory location of this order in the orders array\r\n                mstore(add(orders, mul(add(1, i), 32)), order)\r\n\r\n                // order.version\r\n                offset := and(mload(add(tablesPtr,  0)), 0xFFFF)\r\n                mstore(\r\n                    add(order,   0),\r\n                    offset\r\n                )\r\n\r\n                // order.owner\r\n                offset := mul(and(mload(add(tablesPtr,  2)), 0xFFFF), 4)\r\n                mstore(\r\n                    add(order,  32),\r\n                    and(mload(add(add(data, 20), offset)), 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\r\n                )\r\n\r\n                // order.tokenS\r\n                offset := mul(and(mload(add(tablesPtr,  4)), 0xFFFF), 4)\r\n                mstore(\r\n                    add(order,  64),\r\n                    and(mload(add(add(data, 20), offset)), 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\r\n                )\r\n\r\n                // order.tokenB\r\n                offset := mul(and(mload(add(tablesPtr,  6)), 0xFFFF), 4)\r\n                mstore(\r\n                    add(order,  96),\r\n                    and(mload(add(add(data, 20), offset)), 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\r\n                )\r\n\r\n                // order.amountS\r\n                offset := mul(and(mload(add(tablesPtr,  8)), 0xFFFF), 4)\r\n                mstore(\r\n                    add(order, 128),\r\n                    mload(add(add(data, 32), offset))\r\n                )\r\n\r\n                // order.amountB\r\n                offset := mul(and(mload(add(tablesPtr, 10)), 0xFFFF), 4)\r\n                mstore(\r\n                    add(order, 160),\r\n                    mload(add(add(data, 32), offset))\r\n                )\r\n\r\n                // order.validSince\r\n                offset := mul(and(mload(add(tablesPtr, 12)), 0xFFFF), 4)\r\n                mstore(\r\n                    add(order, 192),\r\n                    and(mload(add(add(data, 4), offset)), 0xFFFFFFFF)\r\n                )\r\n\r\n                // order.tokenSpendableS\r\n                offset := and(mload(add(tablesPtr, 14)), 0xFFFF)\r\n                // Force the spendable index to 0 if it's invalid\r\n                offset := mul(offset, lt(offset, numSpendables))\r\n                mstore(\r\n                    add(order, 224),\r\n                    mload(add(spendableList, mul(add(offset, 1), 32)))\r\n                )\r\n\r\n                // order.tokenSpendableFee\r\n                offset := and(mload(add(tablesPtr, 16)), 0xFFFF)\r\n                // Force the spendable index to 0 if it's invalid\r\n                offset := mul(offset, lt(offset, numSpendables))\r\n                mstore(\r\n                    add(order, 256),\r\n                    mload(add(spendableList, mul(add(offset, 1), 32)))\r\n                )\r\n\r\n                // order.dualAuthAddr\r\n                offset := mul(and(mload(add(tablesPtr, 18)), 0xFFFF), 4)\r\n                mstore(\r\n                    add(order, 288),\r\n                    and(mload(add(add(data, 20), offset)), 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\r\n                )\r\n\r\n                // order.broker\r\n                offset := mul(and(mload(add(tablesPtr, 20)), 0xFFFF), 4)\r\n                mstore(\r\n                    add(order, 320),\r\n                    and(mload(add(add(data, 20), offset)), 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\r\n                )\r\n\r\n                // order.orderInterceptor\r\n                offset := mul(and(mload(add(tablesPtr, 22)), 0xFFFF), 4)\r\n                mstore(\r\n                    add(order, 416),\r\n                    and(mload(add(add(data, 20), offset)), 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\r\n                )\r\n\r\n                // order.wallet\r\n                offset := mul(and(mload(add(tablesPtr, 24)), 0xFFFF), 4)\r\n                mstore(\r\n                    add(order, 448),\r\n                    and(mload(add(add(data, 20), offset)), 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\r\n                )\r\n\r\n                // order.validUntil\r\n                offset := mul(and(mload(add(tablesPtr, 26)), 0xFFFF), 4)\r\n                mstore(\r\n                    add(order, 480),\r\n                    and(mload(add(add(data,  4), offset)), 0xFFFFFFFF)\r\n                )\r\n\r\n                // Default to empty bytes array for value sig and dualAuthSig\r\n                mstore(add(data, 32), emptyBytes)\r\n\r\n                // order.sig\r\n                offset := mul(and(mload(add(tablesPtr, 28)), 0xFFFF), 4)\r\n                mstore(\r\n                    add(order, 512),\r\n                    add(data, add(offset, 32))\r\n                )\r\n\r\n                // order.dualAuthSig\r\n                offset := mul(and(mload(add(tablesPtr, 30)), 0xFFFF), 4)\r\n                mstore(\r\n                    add(order, 544),\r\n                    add(data, add(offset, 32))\r\n                )\r\n\r\n                // Restore default to 0\r\n                mstore(add(data, 32), 0)\r\n\r\n                // order.allOrNone\r\n                offset := and(mload(add(tablesPtr, 32)), 0xFFFF)\r\n                mstore(\r\n                    add(order, 576),\r\n                    gt(offset, 0)\r\n                )\r\n\r\n                // lrcTokenAddress is the default value for feeToken\r\n                mstore(add(data, 20), lrcTokenAddress)\r\n\r\n                // order.feeToken\r\n                offset := mul(and(mload(add(tablesPtr, 34)), 0xFFFF), 4)\r\n                mstore(\r\n                    add(order, 608),\r\n                    and(mload(add(add(data, 20), offset)), 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\r\n                )\r\n\r\n                // Restore default to 0\r\n                mstore(add(data, 20), 0)\r\n\r\n                // order.feeAmount\r\n                offset := mul(and(mload(add(tablesPtr, 36)), 0xFFFF), 4)\r\n                mstore(\r\n                    add(order, 640),\r\n                    mload(add(add(data, 32), offset))\r\n                )\r\n\r\n                // order.waiveFeePercentage\r\n                offset := and(mload(add(tablesPtr, 38)), 0xFFFF)\r\n                mstore(\r\n                    add(order, 672),\r\n                    offset\r\n                )\r\n\r\n                // order.tokenSFeePercentage\r\n                offset := and(mload(add(tablesPtr, 40)), 0xFFFF)\r\n                mstore(\r\n                    add(order, 704),\r\n                    offset\r\n                )\r\n\r\n                // order.tokenBFeePercentage\r\n                offset := and(mload(add(tablesPtr, 42)), 0xFFFF)\r\n                mstore(\r\n                    add(order, 736),\r\n                    offset\r\n                )\r\n\r\n                // The owner is the default value of tokenRecipient\r\n                mstore(add(data, 20), mload(add(order, 32)))                // order.owner\r\n\r\n                // order.tokenRecipient\r\n                offset := mul(and(mload(add(tablesPtr, 44)), 0xFFFF), 4)\r\n                mstore(\r\n                    add(order, 768),\r\n                    and(mload(add(add(data, 20), offset)), 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\r\n                )\r\n\r\n                // Restore default to 0\r\n                mstore(add(data, 20), 0)\r\n\r\n                // order.walletSplitPercentage\r\n                offset := and(mload(add(tablesPtr, 46)), 0xFFFF)\r\n                mstore(\r\n                    add(order, 800),\r\n                    offset\r\n                )\r\n\r\n                // order.tokenTypeS\r\n                offset := and(mload(add(tablesPtr, 48)), 0xFFFF)\r\n                mstore(\r\n                    add(order, 1024),\r\n                    offset\r\n                )\r\n\r\n                // order.tokenTypeB\r\n                offset := and(mload(add(tablesPtr, 50)), 0xFFFF)\r\n                mstore(\r\n                    add(order, 1056),\r\n                    offset\r\n                )\r\n\r\n                // order.tokenTypeFee\r\n                offset := and(mload(add(tablesPtr, 52)), 0xFFFF)\r\n                mstore(\r\n                    add(order, 1088),\r\n                    offset\r\n                )\r\n\r\n                // order.trancheS\r\n                offset := mul(and(mload(add(tablesPtr, 54)), 0xFFFF), 4)\r\n                mstore(\r\n                    add(order, 1120),\r\n                    mload(add(add(data, 32), offset))\r\n                )\r\n\r\n                // order.trancheB\r\n                offset := mul(and(mload(add(tablesPtr, 56)), 0xFFFF), 4)\r\n                mstore(\r\n                    add(order, 1152),\r\n                    mload(add(add(data, 32), offset))\r\n                )\r\n\r\n                // Default to empty bytes array for transferDataS\r\n                mstore(add(data, 32), emptyBytes)\r\n\r\n                // order.transferDataS\r\n                offset := mul(and(mload(add(tablesPtr, 58)), 0xFFFF), 4)\r\n                mstore(\r\n                    add(order, 1184),\r\n                    add(data, add(offset, 32))\r\n                )\r\n\r\n                // Restore default to 0\r\n                mstore(add(data, 32), 0)\r\n\r\n                // Set default  values\r\n                mstore(add(order, 832), 0)         // order.P2P\r\n                mstore(add(order, 864), 0)         // order.hash\r\n                mstore(add(order, 896), 0)         // order.brokerInterceptor\r\n                mstore(add(order, 928), 0)         // order.filledAmountS\r\n                mstore(add(order, 960), 0)         // order.initialFilledAmountS\r\n                mstore(add(order, 992), 1)         // order.valid\r\n\r\n                // Advance to the next order\r\n                tablesPtr := add(tablesPtr, 60)\r\n            }\r\n        }\r\n    }\r\n\r\n    function assembleRings(\r\n        uint data,\r\n        uint numRings,\r\n        Data.Order[] memory orders\r\n        )\r\n        internal\r\n        pure\r\n        returns (Data.Ring[] memory rings)\r\n    {\r\n        uint ringsArrayDataSize = (1 + numRings) * 32;\r\n        uint ringStructSize = 5 * 32;\r\n        uint participationStructSize = 10 * 32;\r\n\r\n        assembly {\r\n            // Allocate memory for all rings\r\n            rings := mload(0x40)\r\n            mstore(add(rings, 0), numRings)                      // rings.length\r\n            // Reserve the memory for the rings array\r\n            mstore(0x40, add(rings, add(ringsArrayDataSize, mul(ringStructSize, numRings))))\r\n\r\n            for { let r := 0 } lt(r, numRings) { r := add(r, 1) } {\r\n                let ring := add(rings, add(ringsArrayDataSize, mul(ringStructSize, r)))\r\n\r\n                // Store the memory location of this ring in the rings array\r\n                mstore(add(rings, mul(add(r, 1), 32)), ring)\r\n\r\n                // Get the ring size\r\n                let ringSize := and(mload(data), 0xFF)\r\n                data := add(data, 1)\r\n\r\n                // require(ringsSize <= 8)\r\n                if gt(ringSize, 8) {\r\n                    revert(0, 0)\r\n                }\r\n\r\n                // Allocate memory for all participations\r\n                let participations := mload(0x40)\r\n                mstore(add(participations, 0), ringSize)         // participations.length\r\n                // Memory for participations length + ringSize participation pointers\r\n                let participationsData := add(participations, mul(add(1, ringSize), 32))\r\n                // Reserve the memory for the participations\r\n                mstore(0x40, add(participationsData, mul(participationStructSize, ringSize)))\r\n\r\n                // Initialize ring properties\r\n                mstore(add(ring,   0), ringSize)                 // ring.size\r\n                mstore(add(ring,  32), participations)           // ring.participations\r\n                mstore(add(ring,  64), 0)                        // ring.hash\r\n                mstore(add(ring,  96), 0)                        // ring.minerFeesToOrdersPercentage\r\n                mstore(add(ring, 128), 1)                        // ring.valid\r\n\r\n                for { let i := 0 } lt(i, ringSize) { i := add(i, 1) } {\r\n                    let participation := add(participationsData, mul(participationStructSize, i))\r\n\r\n                    // Store the memory location of this participation in the participations array\r\n                    mstore(add(participations, mul(add(i, 1), 32)), participation)\r\n\r\n                    // Get the order index\r\n                    let orderIndex := and(mload(data), 0xFF)\r\n                    // require(orderIndex < orders.length)\r\n                    if iszero(lt(orderIndex, mload(orders))) {\r\n                        revert(0, 0)\r\n                    }\r\n                    data := add(data, 1)\r\n\r\n                    // participation.order\r\n                    mstore(\r\n                        add(participation,   0),\r\n                        mload(add(orders, mul(add(orderIndex, 1), 32)))\r\n                    )\r\n\r\n                    // Set default values\r\n                    mstore(add(participation,  32), 0)          // participation.splitS\r\n                    mstore(add(participation,  64), 0)          // participation.feeAmount\r\n                    mstore(add(participation,  96), 0)          // participation.feeAmountS\r\n                    mstore(add(participation, 128), 0)          // participation.feeAmountB\r\n                    mstore(add(participation, 160), 0)          // participation.rebateFee\r\n                    mstore(add(participation, 192), 0)          // participation.rebateS\r\n                    mstore(add(participation, 224), 0)          // participation.rebateB\r\n                    mstore(add(participation, 256), 0)          // participation.fillAmountS\r\n                    mstore(add(participation, 288), 0)          // participation.fillAmountB\r\n                }\r\n\r\n                // Advance to the next ring\r\n                data := add(data, sub(8, ringSize))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/impl/RingSubmitter.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title An Implementation of IRingSubmitter.\r\n/// @author Daniel Wang - <daniel@loopring.org>,\r\n/// @author Kongliang Zhong - <kongliang@loopring.org>\r\n/// @author Brechtpd - <brecht@loopring.org>\r\n/// Recognized contributing developers from the community:\r\n///     https://github.com/rainydio\r\n///     https://github.com/BenjaminPrice\r\n///     https://github.com/jonasshen\r\n///     https://github.com/Hephyrius\r\ncontract RingSubmitter is IRingSubmitter, NoDefaultFunc {\r\n    using MathUint          for uint;\r\n    using BytesUtil         for bytes;\r\n    using OrderHelper       for Data.Order;\r\n    using RingHelper        for Data.Ring;\r\n    using MiningHelper      for Data.Mining;\r\n    using ERC20SafeTransfer for address;\r\n\r\n    address public  lrcTokenAddress             = address(0x0);\r\n    address public  wethTokenAddress            = address(0x0);\r\n    address public  delegateAddress             = address(0x0);\r\n    address public  tradeHistoryAddress         = address(0x0);\r\n    address public  orderBrokerRegistryAddress  = address(0x0);\r\n    address public  orderRegistryAddress        = address(0x0);\r\n    address public  feeHolderAddress            = address(0x0);\r\n    address public  orderBookAddress            = address(0x0);\r\n    address public  burnRateTableAddress        = address(0x0);\r\n\r\n    uint64  public  ringIndex                   = 0;\r\n\r\n    uint    public constant MAX_RING_SIZE       = 8;\r\n\r\n    struct SubmitRingsParam {\r\n        uint16[]    encodeSpecs;\r\n        uint16      miningSpec;\r\n        uint16[]    orderSpecs;\r\n        uint8[][]   ringSpecs;\r\n        address[]   addressList;\r\n        uint[]      uintList;\r\n        bytes[]     bytesList;\r\n    }\r\n\r\n    constructor(\r\n        address _lrcTokenAddress,\r\n        address _wethTokenAddress,\r\n        address _delegateAddress,\r\n        address _tradeHistoryAddress,\r\n        address _orderBrokerRegistryAddress,\r\n        address _orderRegistryAddress,\r\n        address _feeHolderAddress,\r\n        address _orderBookAddress,\r\n        address _burnRateTableAddress\r\n        )\r\n        public\r\n    {\r\n        require(_lrcTokenAddress != address(0x0), ZERO_ADDRESS);\r\n        require(_wethTokenAddress != address(0x0), ZERO_ADDRESS);\r\n        require(_delegateAddress != address(0x0), ZERO_ADDRESS);\r\n        require(_tradeHistoryAddress != address(0x0), ZERO_ADDRESS);\r\n        require(_orderBrokerRegistryAddress != address(0x0), ZERO_ADDRESS);\r\n        require(_orderRegistryAddress != address(0x0), ZERO_ADDRESS);\r\n        require(_feeHolderAddress != address(0x0), ZERO_ADDRESS);\r\n        require(_orderBookAddress != address(0x0), ZERO_ADDRESS);\r\n        require(_burnRateTableAddress != address(0x0), ZERO_ADDRESS);\r\n\r\n        lrcTokenAddress = _lrcTokenAddress;\r\n        wethTokenAddress = _wethTokenAddress;\r\n        delegateAddress = _delegateAddress;\r\n        tradeHistoryAddress = _tradeHistoryAddress;\r\n        orderBrokerRegistryAddress = _orderBrokerRegistryAddress;\r\n        orderRegistryAddress = _orderRegistryAddress;\r\n        feeHolderAddress = _feeHolderAddress;\r\n        orderBookAddress = _orderBookAddress;\r\n        burnRateTableAddress = _burnRateTableAddress;\r\n    }\r\n\r\n    function submitRings(\r\n        bytes calldata data\r\n        )\r\n        external\r\n    {\r\n        uint i;\r\n        bytes32[] memory tokenBurnRates;\r\n\r\n        (\r\n            Data.Mining  memory mining,\r\n            Data.Order[] memory orders,\r\n            Data.Ring[]  memory rings\r\n        ) = ExchangeDeserializer.deserialize(lrcTokenAddress, data);\r\n\r\n        Data.Context memory ctx = Data.Context(\r\n            lrcTokenAddress,\r\n            ITradeDelegate(delegateAddress),\r\n            ITradeHistory(tradeHistoryAddress),\r\n            IBrokerRegistry(orderBrokerRegistryAddress),\r\n            IOrderRegistry(orderRegistryAddress),\r\n            IFeeHolder(feeHolderAddress),\r\n            IOrderBook(orderBookAddress),\r\n            IBurnRateTable(burnRateTableAddress),\r\n            ringIndex,\r\n            FEE_PERCENTAGE_BASE,\r\n            tokenBurnRates,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            new Data.BrokerOrder[](orders.length),\r\n            new Data.BrokerAction[](orders.length),\r\n            new Data.BrokerTransfer[](orders.length * 3),\r\n            0,\r\n            0,\r\n            0\r\n        );\r\n\r\n        // Set the highest bit of ringIndex to '1' (IN STORAGE!)\r\n        ringIndex = ctx.ringIndex | (1 << 63);\r\n\r\n        // Check if the highest bit of ringIndex is '1'\r\n        require((ctx.ringIndex >> 63) == 0, REENTRY);\r\n\r\n        // Allocate memory that is used to batch things for all rings\r\n        setupLists(ctx, orders, rings);\r\n\r\n        for (i = 0; i < orders.length; i++) {\r\n            orders[i].updateHash();\r\n        }\r\n\r\n        batchGetFilledAndCheckCancelled(ctx, orders);\r\n\r\n        for (i = 0; i < orders.length; i++) {\r\n            orders[i].check(ctx);\r\n            // An order can only be sent once\r\n            for (uint j = i + 1; j < orders.length; j++) {\r\n                require(orders[i].hash != orders[j].hash, INVALID_VALUE);\r\n            }\r\n        }\r\n\r\n        for (i = 0; i < rings.length; i++) {\r\n            rings[i].updateHash();\r\n        }\r\n\r\n        mining.updateHash(rings);\r\n        mining.updateMinerAndInterceptor();\r\n        require(mining.checkMinerSignature(), INVALID_SIG);\r\n\r\n        for (i = 0; i < orders.length; i++) {\r\n            // We don't need to verify the dual author signature again if it uses the same\r\n            // dual author address as the previous order (the miner can optimize the order of the orders\r\n            // so this happens as much as possible). We don't need to check if the signature is the same\r\n            // because the same mining hash is signed for all orders.\r\n            if(i > 0 && orders[i].dualAuthAddr == orders[i - 1].dualAuthAddr) {\r\n                continue;\r\n            }\r\n            orders[i].checkDualAuthSignature(mining.hash);\r\n        }\r\n\r\n        for (i = 0; i < rings.length; i++) {\r\n            Data.Ring memory ring = rings[i];\r\n            ring.checkOrdersValid();\r\n            // ring.checkForSubRings(); we submit rings of size 2 - there's no need to check for sub-rings\r\n            ring.calculateFillAmountAndFee(ctx);\r\n            if (ring.valid) {\r\n                ring.adjustOrderStates();\r\n            }\r\n        }\r\n\r\n        // Check if the allOrNone orders are completely filled over all rings\r\n        // This can invalidate rings\r\n        checkRings(orders, rings);\r\n\r\n        for (i = 0; i < rings.length; i++) {\r\n            Data.Ring memory ring = rings[i];\r\n            if (ring.valid) {\r\n                // Only settle rings we have checked to be valid\r\n                ring.doPayments(ctx, mining);\r\n                emitRingMinedEvent(\r\n                    ring,\r\n                    ctx.ringIndex++,\r\n                    mining.feeRecipient\r\n                );\r\n            } else {\r\n                emit InvalidRing(ring.hash);\r\n            }\r\n        }\r\n\r\n        // Do all token transfers for all rings\r\n        batchTransferTokens(ctx);\r\n        // Do all broker token transfers for all rings\r\n        batchBrokerTransferTokens(ctx, orders);\r\n        // Do all fee payments for all rings\r\n        batchPayFees(ctx);\r\n        // Update all order stats\r\n        updateOrdersStats(ctx, orders);\r\n\r\n        // Update ringIndex while setting the highest bit of ringIndex back to '0'\r\n        ringIndex = ctx.ringIndex;\r\n    }\r\n\r\n    function checkRings(\r\n        Data.Order[] memory orders,\r\n        Data.Ring[] memory rings\r\n        )\r\n        internal\r\n        pure\r\n    {\r\n        // Check if allOrNone orders are completely filled\r\n        // When a ring is turned invalid because of an allOrNone order we have to\r\n        // recheck the other rings again because they may contain other allOrNone orders\r\n        // that may not be completely filled anymore.\r\n        bool reevaluateRings = true;\r\n        while (reevaluateRings) {\r\n            reevaluateRings = false;\r\n            for (uint i = 0; i < orders.length; i++) {\r\n                if (orders[i].valid) {\r\n                    orders[i].validateAllOrNone();\r\n                    // Check if the order valid status has changed\r\n                    reevaluateRings = reevaluateRings || !orders[i].valid;\r\n                }\r\n            }\r\n            if (reevaluateRings) {\r\n                for (uint i = 0; i < rings.length; i++) {\r\n                    Data.Ring memory ring = rings[i];\r\n                    if (ring.valid) {\r\n                        ring.checkOrdersValid();\r\n                        if (!ring.valid) {\r\n                            // If the ring was valid before the completely filled check we have to revert the filled amountS\r\n                            // of the orders in the ring. This is a bit awkward so maybe there's a better solution.\r\n                            ring.revertOrderStats();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function emitRingMinedEvent(\r\n        Data.Ring memory ring,\r\n        uint _ringIndex,\r\n        address feeRecipient\r\n        )\r\n        internal\r\n    {\r\n        bytes32 ringHash = ring.hash;\r\n        // keccak256(\"RingMined(uint256,bytes32,address,bytes)\")\r\n        bytes32 ringMinedSignature = 0xb2ef4bc5209dff0c46d5dfddb2b68a23bd4820e8f33107fde76ed15ba90695c9;\r\n        uint fillsSize = ring.size * 8 * 32;\r\n\r\n        uint data;\r\n        uint ptr;\r\n        assembly {\r\n            data := mload(0x40)\r\n            ptr := data\r\n            mstore(ptr, _ringIndex)                     // ring index data\r\n            mstore(add(ptr, 32), 0x40)                  // offset to fills data\r\n            mstore(add(ptr, 64), fillsSize)             // fills length\r\n            ptr := add(ptr, 96)\r\n        }\r\n        ptr = ring.generateFills(ptr);\r\n\r\n        assembly {\r\n            log3(\r\n                data,                                   // data start\r\n                sub(ptr, data),                         // data length\r\n                ringMinedSignature,                     // Topic 0: RingMined signature\r\n                ringHash,                               // Topic 1: ring hash\r\n                feeRecipient                            // Topic 2: feeRecipient\r\n            )\r\n        }\r\n    }\r\n\r\n    function setupLists(\r\n        Data.Context memory ctx,\r\n        Data.Order[] memory orders,\r\n        Data.Ring[] memory rings\r\n        )\r\n        internal\r\n        pure\r\n    {\r\n        setupTokenBurnRateList(ctx, orders);\r\n        setupFeePaymentList(ctx, rings);\r\n        setupTokenTransferList(ctx, rings);\r\n    }\r\n\r\n    function setupTokenBurnRateList(\r\n        Data.Context memory ctx,\r\n        Data.Order[] memory orders\r\n        )\r\n        internal\r\n        pure\r\n    {\r\n        // Allocate enough memory to store burn rates for all tokens even\r\n        // if every token is unique (max 2 unique tokens / order)\r\n        uint maxNumTokenBurnRates = orders.length * 2;\r\n        bytes32[] memory tokenBurnRates;\r\n        assembly {\r\n            tokenBurnRates := mload(0x40)\r\n            mstore(tokenBurnRates, 0)                               // tokenBurnRates.length\r\n            mstore(0x40, add(\r\n                tokenBurnRates,\r\n                add(32, mul(maxNumTokenBurnRates, 64))\r\n            ))\r\n        }\r\n        ctx.tokenBurnRates = tokenBurnRates;\r\n    }\r\n\r\n    function setupFeePaymentList(\r\n        Data.Context memory ctx,\r\n        Data.Ring[] memory rings\r\n        )\r\n        internal\r\n        pure\r\n    {\r\n        uint totalMaxSizeFeePayments = 0;\r\n        for (uint i = 0; i < rings.length; i++) {\r\n            // Up to (ringSize + 3) * 3 payments per order (because of fee sharing by miner)\r\n            // (3 x 32 bytes for every fee payment)\r\n            uint ringSize = rings[i].size;\r\n            uint maxSize = (ringSize + 3) * 3 * ringSize * 3;\r\n            totalMaxSizeFeePayments += maxSize;\r\n        }\r\n        // Store the data directly in the call data format as expected by batchAddFeeBalances:\r\n        // - 0x00: batchAddFeeBalances selector (4 bytes)\r\n        // - 0x04: parameter offset (batchAddFeeBalances has a single function parameter) (32 bytes)\r\n        // - 0x24: length of the array passed into the function (32 bytes)\r\n        // - 0x44: the array data (32 bytes x length)\r\n        bytes4 batchAddFeeBalancesSelector = ctx.feeHolder.batchAddFeeBalances.selector;\r\n        uint ptr;\r\n        assembly {\r\n            let data := mload(0x40)\r\n            mstore(data, batchAddFeeBalancesSelector)\r\n            mstore(add(data, 4), 32)\r\n            ptr := add(data, 68)\r\n            mstore(0x40, add(ptr, mul(totalMaxSizeFeePayments, 32)))\r\n        }\r\n        ctx.feeData = ptr;\r\n        ctx.feePtr = ptr;\r\n    }\r\n\r\n    function setupTokenTransferList(\r\n        Data.Context memory ctx,\r\n        Data.Ring[] memory rings\r\n        )\r\n        internal\r\n        pure\r\n    {\r\n        uint totalMaxSizeTransfers = 0;\r\n        for (uint i = 0; i < rings.length; i++) {\r\n            // Up to 4 transfers per order\r\n            // (4 x 32 bytes for every transfer)\r\n            uint maxSize = 4 * rings[i].size * 4;\r\n            totalMaxSizeTransfers += maxSize;\r\n        }\r\n        // Store the data directly in the call data format as expected by batchTransfer:\r\n        // - 0x00: batchTransfer selector (4 bytes)\r\n        // - 0x04: parameter offset (batchTransfer has a single function parameter) (32 bytes)\r\n        // - 0x24: length of the array passed into the function (32 bytes)\r\n        // - 0x44: the array data (32 bytes x length)\r\n        bytes4 batchTransferSelector = ctx.delegate.batchTransfer.selector;\r\n        uint ptr;\r\n        assembly {\r\n            let data := mload(0x40)\r\n            mstore(data, batchTransferSelector)\r\n            mstore(add(data, 4), 32)\r\n            ptr := add(data, 68)\r\n            mstore(0x40, add(ptr, mul(totalMaxSizeTransfers, 32)))\r\n        }\r\n        ctx.transferData = ptr;\r\n        ctx.transferPtr = ptr;\r\n    }\r\n\r\n    function updateOrdersStats(\r\n        Data.Context memory ctx,\r\n        Data.Order[] memory orders\r\n        )\r\n        internal\r\n    {\r\n        // Store the data directly in the call data format as expected by batchUpdateFilled:\r\n        // - 0x00: batchUpdateFilled selector (4 bytes)\r\n        // - 0x04: parameter offset (batchUpdateFilled has a single function parameter) (32 bytes)\r\n        // - 0x24: length of the array passed into the function (32 bytes)\r\n        // - 0x44: the array data (32 bytes x length)\r\n        // For every (valid) order we store 2 words:\r\n        // - order.hash\r\n        // - order.filledAmountS after all rings\r\n        bytes4 batchUpdateFilledSelector = ctx.tradeHistory.batchUpdateFilled.selector;\r\n        address _tradeHistoryAddress = address(ctx.tradeHistory);\r\n        assembly {\r\n            let data := mload(0x40)\r\n            mstore(data, batchUpdateFilledSelector)\r\n            mstore(add(data, 4), 32)\r\n            let ptr := add(data, 68)\r\n            let arrayLength := 0\r\n            for { let i := 0 } lt(i, mload(orders)) { i := add(i, 1) } {\r\n                let order := mload(add(orders, mul(add(i, 1), 32)))\r\n                let filledAmount := mload(add(order, 928))                               // order.filledAmountS\r\n                let initialFilledAmount := mload(add(order, 960))                        // order.initialFilledAmountS\r\n                let filledAmountChanged := iszero(eq(filledAmount, initialFilledAmount))\r\n                // if (order.valid && filledAmountChanged)\r\n                if and(gt(mload(add(order, 992)), 0), filledAmountChanged) {             // order.valid\r\n                    mstore(add(ptr,   0), mload(add(order, 864)))                        // order.hash\r\n                    mstore(add(ptr,  32), filledAmount)\r\n\r\n                    ptr := add(ptr, 64)\r\n                    arrayLength := add(arrayLength, 2)\r\n                }\r\n            }\r\n\r\n            // Only do the external call if the list is not empty\r\n            if gt(arrayLength, 0) {\r\n                mstore(add(data, 36), arrayLength)      // filledInfo.length\r\n\r\n                let success := call(\r\n                    gas,                                // forward all gas\r\n                    _tradeHistoryAddress,               // external address\r\n                    0,                                  // wei\r\n                    data,                               // input start\r\n                    sub(ptr, data),                     // input length\r\n                    data,                               // output start\r\n                    0                                   // output length\r\n                )\r\n                if eq(success, 0) {\r\n                    // Propagate the revert message\r\n                    returndatacopy(0, 0, returndatasize())\r\n                    revert(0, returndatasize())\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function batchGetFilledAndCheckCancelled(\r\n        Data.Context memory ctx,\r\n        Data.Order[] memory orders\r\n        )\r\n        internal\r\n    {\r\n        // Store the data in the call data format as expected by batchGetFilledAndCheckCancelled:\r\n        // - 0x00: batchGetFilledAndCheckCancelled selector (4 bytes)\r\n        // - 0x04: parameter offset (batchGetFilledAndCheckCancelled has a single function parameter) (32 bytes)\r\n        // - 0x24: length of the array passed into the function (32 bytes)\r\n        // - 0x44: the array data (32 bytes x length)\r\n        // For every order we store 5 words:\r\n        // - order.broker\r\n        // - order.owner\r\n        // - order.hash\r\n        // - order.validSince\r\n        // - The trading pair of the order: order.tokenS ^ order.tokenB\r\n        bytes4 batchGetFilledAndCheckCancelledSelector = ctx.tradeHistory.batchGetFilledAndCheckCancelled.selector;\r\n        address _tradeHistoryAddress = address(ctx.tradeHistory);\r\n        assembly {\r\n            let data := mload(0x40)\r\n            mstore(data, batchGetFilledAndCheckCancelledSelector)\r\n            mstore(add(data,  4), 32)\r\n            mstore(add(data, 36), mul(mload(orders), 5))                // orders.length\r\n            let ptr := add(data, 68)\r\n            for { let i := 0 } lt(i, mload(orders)) { i := add(i, 1) } {\r\n                let order := mload(add(orders, mul(add(i, 1), 32)))     // orders[i]\r\n                mstore(add(ptr,   0), mload(add(order, 320)))           // order.broker\r\n                mstore(add(ptr,  32), mload(add(order,  32)))           // order.owner\r\n                mstore(add(ptr,  64), mload(add(order, 864)))           // order.hash\r\n                mstore(add(ptr,  96), mload(add(order, 192)))           // order.validSince\r\n                // bytes20(order.tokenS) ^ bytes20(order.tokenB)        // tradingPair\r\n                mstore(add(ptr, 128), mul(\r\n                    xor(\r\n                        mload(add(order, 64)),                 // order.tokenS\r\n                        mload(add(order, 96))                  // order.tokenB\r\n                    ),\r\n                    0x1000000000000000000000000)               // shift left 12 bytes (bytes20 is padded on the right)\r\n                )\r\n                ptr := add(ptr, 160)                                    // 5 * 32\r\n            }\r\n            // Return data is stored just like the call data without the signature:\r\n            // 0x00: Offset to data\r\n            // 0x20: Array length\r\n            // 0x40: Array data\r\n            let returnDataSize := mul(add(2, mload(orders)), 32)\r\n            let success := call(\r\n                gas,                                // forward all gas\r\n                _tradeHistoryAddress,               // external address\r\n                0,                                  // wei\r\n                data,                               // input start\r\n                sub(ptr, data),                     // input length\r\n                data,                               // output start\r\n                returnDataSize                      // output length\r\n            )\r\n            // Check if the call was successful and the return data is the expected size\r\n            if or(eq(success, 0), iszero(eq(returndatasize(), returnDataSize))) {\r\n                if eq(success, 0) {\r\n                    // Propagate the revert message\r\n                    returndatacopy(0, 0, returndatasize())\r\n                    revert(0, returndatasize())\r\n                }\r\n                revert(0, 0)\r\n            }\r\n            for { let i := 0 } lt(i, mload(orders)) { i := add(i, 1) } {\r\n                let order := mload(add(orders, mul(add(i, 1), 32)))     // orders[i]\r\n                let fill := mload(add(data,  mul(add(i, 2), 32)))       // fills[i]\r\n                mstore(add(order, 928), fill)                           // order.filledAmountS\r\n                mstore(add(order, 960), fill)                           // order.initialFilledAmountS\r\n                // If fills[i] == ~uint(0) the order was cancelled\r\n                // order.valid = order.valid && (order.filledAmountS != ~uint(0))\r\n                mstore(add(order, 992),                                 // order.valid\r\n                    and(\r\n                        gt(mload(add(order, 992)), 0),                  // order.valid\r\n                        iszero(eq(fill, not(0)))                        // fill != ~uint(0\r\n                    )\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    function batchBrokerTransferTokens(Data.Context memory ctx, Data.Order[] memory orders) internal {\r\n        Data.BrokerInterceptorReport[] memory reportQueue = new Data.BrokerInterceptorReport[](orders.length);\r\n        uint reportCount = 0;\r\n\r\n        for (uint i = 0; i < ctx.numBrokerActions; i++) {\r\n            Data.BrokerAction memory action = ctx.brokerActions[i];\r\n            Data.BrokerApprovalRequest memory request = Data.BrokerApprovalRequest({\r\n                orders: new Data.BrokerOrder[](action.numOrders),\r\n                tokenS: action.tokenS,\r\n                tokenB: action.tokenB,\r\n                feeToken: action.feeToken,\r\n                totalFillAmountB: 0,\r\n                totalRequestedAmountS: 0,\r\n                totalRequestedFeeAmount: 0\r\n            });\r\n            \r\n            for (uint b = 0; b < action.numOrders; b++) {\r\n                request.orders[b] = ctx.brokerOrders[action.orderIndices[b]];\r\n                request.totalFillAmountB += request.orders[b].fillAmountB;\r\n                request.totalRequestedAmountS += request.orders[b].requestedAmountS;\r\n                request.totalRequestedFeeAmount += request.orders[b].requestedFeeAmount;\r\n            }\r\n\r\n            bool requiresReport = IBrokerDelegate(action.broker).brokerRequestAllowance(request);\r\n            \r\n            if (requiresReport) {\r\n                for (uint k = 0; k < request.orders.length; k++) {\r\n                    reportQueue[reportCount] = Data.BrokerInterceptorReport({\r\n                        owner: request.orders[k].owner,\r\n                        broker: action.broker,\r\n                        orderHash: request.orders[k].orderHash,\r\n                        tokenB: action.tokenB,\r\n                        tokenS: action.tokenS,\r\n                        feeToken: action.feeToken,\r\n                        fillAmountB: request.orders[k].fillAmountB,\r\n                        spentAmountS: request.orders[k].requestedAmountS,\r\n                        spentFeeAmount: request.orders[k].requestedFeeAmount,\r\n                        tokenRecipient: request.orders[k].tokenRecipient,\r\n                        extraData: request.orders[k].extraData\r\n                    });\r\n                    reportCount += 1;\r\n                }\r\n            }\r\n\r\n            for (uint j = 0; j < action.numTransfers; j++) {\r\n                Data.BrokerTransfer memory transfer = ctx.brokerTransfers[action.transferIndices[j]];\r\n\r\n                if (transfer.recipient != action.broker) {\r\n                    require(transfer.token.safeTransferFrom(\r\n                        action.broker, \r\n                        transfer.recipient, \r\n                        transfer.amount\r\n                    ), TRANSFER_FAILURE);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (uint m = 0; m < reportCount; m++) {\r\n            IBrokerDelegate(reportQueue[m].broker).onOrderFillReport(reportQueue[m]);\r\n        }\r\n    }\r\n\r\n    function batchTransferTokens(\r\n        Data.Context memory ctx\r\n        )\r\n        internal\r\n    {\r\n        // Check if there are any transfers\r\n        if (ctx.transferData == ctx.transferPtr) {\r\n            return;\r\n        }\r\n        // We stored the token transfers in the call data as expected by batchTransfer.\r\n        // The only thing we still need to do is update the final length of the array and call\r\n        // the function on the TradeDelegate contract with the generated data.\r\n        address _tradeDelegateAddress = address(ctx.delegate);\r\n        uint arrayLength = (ctx.transferPtr - ctx.transferData) / 32;\r\n        uint data = ctx.transferData - 68;\r\n        uint ptr = ctx.transferPtr;\r\n        assembly {\r\n            mstore(add(data, 36), arrayLength)      // batch.length\r\n\r\n            let success := call(\r\n                gas,                                // forward all gas\r\n                _tradeDelegateAddress,              // external address\r\n                0,                                  // wei\r\n                data,                               // input start\r\n                sub(ptr, data),                     // input length\r\n                data,                               // output start\r\n                0                                   // output length\r\n            )\r\n            if eq(success, 0) {\r\n                // Propagate the revert message\r\n                returndatacopy(0, 0, returndatasize())\r\n                revert(0, returndatasize())\r\n            }\r\n        }\r\n    }\r\n\r\n    function batchPayFees(\r\n        Data.Context memory ctx\r\n        )\r\n        internal\r\n    {\r\n        // Check if there are any fee payments\r\n        if (ctx.feeData == ctx.feePtr) {\r\n            return;\r\n        }\r\n        // We stored the fee payments in the call data as expected by batchAddFeeBalances.\r\n        // The only thing we still need to do is update the final length of the array and call\r\n        // the function on the FeeHolder contract with the generated data.\r\n        address _feeHolderAddress = address(ctx.feeHolder);\r\n        uint arrayLength = (ctx.feePtr - ctx.feeData) / 32;\r\n        uint data = ctx.feeData - 68;\r\n        uint ptr = ctx.feePtr;\r\n        assembly {\r\n            mstore(add(data, 36), arrayLength)      // batch.length\r\n\r\n            let success := call(\r\n                gas,                                // forward all gas\r\n                _feeHolderAddress,                  // external address\r\n                0,                                  // wei\r\n                data,                               // input start\r\n                sub(ptr, data),                     // input length\r\n                data,                               // output start\r\n                0                                   // output length\r\n            )\r\n            if eq(success, 0) {\r\n                // Propagate the revert message\r\n                returndatacopy(0, 0, returndatasize())\r\n                revert(0, returndatasize())\r\n            }\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"orderBrokerRegistryAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wethTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradeHistoryAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ringIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lrcTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"delegateAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"orderBookAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"orderRegistryAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_RING_SIZE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"submitRings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FEE_PERCENTAGE_BASE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnRateTableAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeHolderAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_lrcTokenAddress\",\"type\":\"address\"},{\"name\":\"_wethTokenAddress\",\"type\":\"address\"},{\"name\":\"_delegateAddress\",\"type\":\"address\"},{\"name\":\"_tradeHistoryAddress\",\"type\":\"address\"},{\"name\":\"_orderBrokerRegistryAddress\",\"type\":\"address\"},{\"name\":\"_orderRegistryAddress\",\"type\":\"address\"},{\"name\":\"_feeHolderAddress\",\"type\":\"address\"},{\"name\":\"_orderBookAddress\",\"type\":\"address\"},{\"name\":\"_burnRateTableAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_ringIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_ringHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_fills\",\"type\":\"bytes\"}],\"name\":\"RingMined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_ringHash\",\"type\":\"bytes32\"}],\"name\":\"InvalidRing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_ringHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_orderHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_feeToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"name\":\"DistributeFeeRebate\",\"type\":\"event\"}]","ContractName":"RingSubmitter","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"000000000000000000000000bbbbca6a901c926f240b89eacb641d8aec7aeafd000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000048c40e8b9f45e199238e3131b232adf12d88ea2c000000000000000000000000cb6054fb55e90adbad1053e4698cd0ca6904d56a000000000000000000000000267dc5f342e139b5e407684e3a731aeae8a71e3e000000000000000000000000362ed516f2e8eeab895043af976864126bdd9c7b000000000000000000000000afdc6417d5b8df07af13918b73155541f08aa472000000000000000000000000f5ba7ca17af300f52112c4cc8a7ab1a0482e84d5000000000000000000000000b32c08cb3777a040f1b1b6398b8af6e52d652ae9","Library":"","LicenseType":"None","SwarmSource":"bzzr://4767b2450873980b15acd4eae87f484dfb56c87c3a28f727698ffc8e7de81c15"}]}