{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n//team.gutalik//\r\n//mit \r\n//base on the Nagaganesh Jaladanki\r\n\r\ncontract Lottery {\r\n\r\n    event LotteryTicketPurchased(address indexed _purchaser, uint256 _ticketID);\r\n    event LotteryAmountPaid(address indexed _winner, uint64 _ticketID, uint256 _amount);\r\n\r\n    // Note: prone to change\r\n    uint64 public ticketPrice = 0.1 ether;\r\n    uint64 public ticketMax = 5;\r\n    address owner;\r\n    // Initialize mapping\r\n    address[6] public ticketMapping;\r\n    uint256 public ticketsBought = 0;\r\n    address public fee = 0xd44f59581056EaF5d601edD1244Ff4AA55516666;\r\n    // Prevent potential locked funds by checking greater than\r\n    modifier allTicketsSold() {\r\n      require(ticketsBought >= ticketMax);\r\n      _;\r\n    }\r\n    constructor() public{\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /* @dev Tickets may only be purchased through the buyTickets function */\r\n    function() payable public{\r\n      revert();\r\n    }\r\n\r\n    /**\r\n      * @dev Purchase ticket and send reward if necessary\r\n      * @param _ticket Ticket number to purchase\r\n      * @return bool Validity of transaction\r\n      */\r\n    function buyTicket(uint16 _ticket) payable public returns (bool) {\r\n      require(msg.value == ticketPrice);\r\n      require(_ticket > 0 && _ticket < ticketMax + 1);\r\n      require(ticketMapping[_ticket] == address(0));\r\n      require(ticketsBought < ticketMax);\r\n\r\n      // Avoid reentrancy attacks\r\n      address purchaser = msg.sender;\r\n      ticketsBought += 1;\r\n      ticketMapping[_ticket] = purchaser;\r\n      fee.transfer(0.01 ether);\r\n      emit LotteryTicketPurchased(purchaser, _ticket);\r\n\r\n      /** Placing the \"burden\" of sendReward() on the last ticket\r\n        * buyer is okay, because the refund from destroying the\r\n        * arrays decreases net gas cost\r\n        */\r\n      if (ticketsBought>=ticketMax) {\r\n        sendReward();\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    /**\r\n      * @dev Send lottery winner their reward\r\n      * @return address of winner\r\n      */\r\n    function sendReward() public allTicketsSold returns (address) {\r\n      uint64 winningNumber = lotteryPicker();\r\n      address winner = ticketMapping[winningNumber];\r\n      uint256 totalAmount = ticketMax * ticketPrice;\r\n\r\n      // Prevent locked funds by sending to bad address\r\n      require(winner != address(0));\r\n\r\n      // Prevent reentrancy\r\n      reset();\r\n      winner.transfer(0.45 ether);\r\n      emit LotteryAmountPaid(winner, winningNumber, totalAmount);\r\n      return winner;\r\n    }\r\n\r\n    /* @return a random number based off of current block information */\r\n    function lotteryPicker() public view allTicketsSold returns (uint64) {\r\n      bytes memory entropy = abi.encodePacked(block.timestamp, block.number);\r\n      bytes32 hash = sha256(entropy);\r\n      return uint64(hash) % ticketMax;\r\n    }\r\n\r\n    /* @dev Reset lottery mapping once a round is finished */\r\n    function reset() private allTicketsSold returns (bool) {\r\n      ticketsBought = 0;\r\n      for(uint x = 0; x < ticketMax+1; x++) {\r\n        delete ticketMapping[x];\r\n      }\r\n      return true;\r\n    }\r\n    \r\n    function restart() public returns (bool){\r\n        require (msg.sender == owner);\r\n        ticketsBought = 0;\r\n      for(uint x = 0; x < ticketMax+1; x++) {\r\n        delete ticketMapping[x];\r\n      }\r\n      return true;\r\n    }\r\n    /** @dev Returns ticket map array for front-end access.\r\n      * Using a getter method is ineffective since it allows\r\n      * only element-level access\r\n      */\r\n    function getTicketsPurchased() public view returns(address[6]) {\r\n      return ticketMapping;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"lotteryPicker\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"restart\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ticket\",\"type\":\"uint16\"}],\"name\":\"buyTicket\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTicketsPurchased\",\"outputs\":[{\"name\":\"\",\"type\":\"address[6]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ticketMapping\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ticketsBought\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ticketMax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_ticketID\",\"type\":\"uint256\"}],\"name\":\"LotteryTicketPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_ticketID\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LotteryAmountPaid\",\"type\":\"event\"}]","ContractName":"Lottery","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5bae5db3ac833d8818de4fbd3f35607086993f15de7d89f6260c81ec7e536889"}]}