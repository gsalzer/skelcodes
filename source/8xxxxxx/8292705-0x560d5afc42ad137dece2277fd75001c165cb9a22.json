{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/utils/LoggingErrors.sol\r\n\r\npragma solidity ^0.4.11;\r\n\r\n/**\r\n * @title Log Various Error Types\r\n * @author Adam Lemmon <adam@oraclize.it>\r\n * @dev Inherit this contract and your may now log errors easily\r\n * To support various error types, params, etc.\r\n */\r\ncontract LoggingErrors {\r\n  /**\r\n  * Events\r\n  */\r\n  event LogErrorString(string errorString);\r\n\r\n  /**\r\n  * Error cases\r\n  */\r\n\r\n  /**\r\n   * @dev Default error to simply log the error message and return\r\n   * @param _errorMessage The error message to log\r\n   * @return ALWAYS false\r\n   */\r\n  function error(string _errorMessage) internal returns(bool) {\r\n    emit LogErrorString(_errorMessage);\r\n    return false;\r\n  }\r\n}\r\n\r\n// File: contracts/wallet/WalletConnector.sol\r\n\r\npragma solidity ^0.4.15;\r\n\r\n\r\n/**\r\n * @title Wallet Connector\r\n * @dev Connect the wallet contract to the correct Wallet Logic version\r\n */\r\ncontract WalletConnector is LoggingErrors {\r\n  /**\r\n   * Storage\r\n   */\r\n  address public owner_;\r\n  address public latestLogic_;\r\n  uint256 public latestVersion_;\r\n  mapping(uint256 => address) public logicVersions_;\r\n  uint256 public birthBlock_;\r\n\r\n  /**\r\n   * Events\r\n   */\r\n  event LogLogicVersionAdded(uint256 version);\r\n  event LogLogicVersionRemoved(uint256 version);\r\n\r\n  /**\r\n   * @dev Constructor to set the latest logic address\r\n   * @param _latestVersion Latest version of the wallet logic\r\n   * @param _latestLogic Latest address of the wallet logic contract\r\n   */\r\n  function WalletConnector (\r\n    uint256 _latestVersion,\r\n    address _latestLogic\r\n  ) public {\r\n    owner_ = msg.sender;\r\n    latestLogic_ = _latestLogic;\r\n    latestVersion_ = _latestVersion;\r\n    logicVersions_[_latestVersion] = _latestLogic;\r\n    birthBlock_ = block.number;\r\n  }\r\n\r\n  /**\r\n   * Add a new version of the logic contract\r\n   * @param _version The version to be associated with the new contract.\r\n   * @param _logic New logic contract.\r\n   * @return Success of the transaction.\r\n   */\r\n  function addLogicVersion (\r\n    uint256 _version,\r\n    address _logic\r\n  ) external\r\n    returns(bool)\r\n  {\r\n    if (msg.sender != owner_)\r\n      return error('msg.sender != owner, WalletConnector.addLogicVersion()');\r\n\r\n    if (logicVersions_[_version] != 0)\r\n      return error('Version already exists, WalletConnector.addLogicVersion()');\r\n\r\n    // Update latest if this is the latest version\r\n    if (_version > latestVersion_) {\r\n      latestLogic_ = _logic;\r\n      latestVersion_ = _version;\r\n    }\r\n\r\n    logicVersions_[_version] = _logic;\r\n    LogLogicVersionAdded(_version);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Remove a version. Cannot remove the latest version.\r\n   * @param  _version The version to remove.\r\n   */\r\n  function removeLogicVersion(uint256 _version) external {\r\n    require(msg.sender == owner_);\r\n    require(_version != latestVersion_);\r\n    delete logicVersions_[_version];\r\n    LogLogicVersionRemoved(_version);\r\n  }\r\n\r\n  /**\r\n   * Constants\r\n   */\r\n\r\n  /**\r\n   * Called from user wallets in order to upgrade their logic.\r\n   * @param _version The version to upgrade to. NOTE pass in 0 to upgrade to latest.\r\n   * @return The address of the logic contract to upgrade to.\r\n   */\r\n  function getLogic(uint256 _version)\r\n    external\r\n    constant\r\n    returns(address)\r\n  {\r\n    if (_version == 0)\r\n      return latestLogic_;\r\n    else\r\n      return logicVersions_[_version];\r\n  }\r\n}\r\n\r\n// File: contracts/token/ERC20Interface.sol\r\n\r\npragma solidity ^0.4.11;\r\n\r\ninterface Token {\r\n  /// @return total amount of tokens\r\n  function totalSupply() external constant returns (uint256 supply);\r\n\r\n  /// @param _owner The address from which the balance will be retrieved\r\n  /// @return The balance\r\n  function balanceOf(address _owner) external constant returns (uint256 balance);\r\n\r\n  /// @notice send `_value` token to `_to` from `msg.sender`\r\n  /// @param _to The address of the recipient\r\n  /// @param _value The amount of token to be transferred\r\n  /// @return Whether the transfer was successful or not\r\n  function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n  /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n  /// @param _from The address of the sender\r\n  /// @param _to The address of the recipient\r\n  /// @param _value The amount of token to be transferred\r\n  /// @return Whether the transfer was successful or not\r\n  function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n\r\n  /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n  /// @param _spender The address of the account able to transfer the tokens\r\n  /// @param _value The amount of wei to be approved for transfer\r\n  /// @return Whether the approval was successful or not\r\n  function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n  /// @param _owner The address of the account owning tokens\r\n  /// @param _spender The address of the account able to transfer the tokens\r\n  /// @return Amount of remaining tokens allowed to spent\r\n  function allowance(address _owner, address _spender) external constant returns (uint256 remaining);\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n  function decimals() external constant returns(uint);\r\n  function name() external constant returns(string);\r\n}\r\n\r\n// File: contracts/wallet/WalletV3.sol\r\n\r\npragma solidity ^0.4.15;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Wallet to hold and trade ERC20 tokens and ether\r\n * @dev User wallet to interact with the exchange.\r\n * all tokens and ether held in this wallet, 1 to 1 mapping to user EOAs.\r\n */\r\ncontract WalletV3 is LoggingErrors {\r\n  /**\r\n   * Storage\r\n   */\r\n  // Vars included in wallet logic \"lib\", the order must match between Wallet and Logic\r\n  address public owner_;\r\n  address public exchange_;\r\n  mapping(address => uint256) public tokenBalances_;\r\n\r\n  address public logic_; // storage location 0x3 loaded for delegatecalls so this var must remain at index 3\r\n  uint256 public birthBlock_;\r\n\r\n  WalletConnector private connector_;\r\n\r\n  /**\r\n   * Events\r\n   */\r\n  event LogDeposit(address token, uint256 amount, uint256 balance);\r\n  event LogWithdrawal(address token, uint256 amount, uint256 balance);\r\n\r\n  /**\r\n   * @dev Contract constructor. Set user as owner and connector address.\r\n   * @param _owner The address of the user's EOA, wallets created from the exchange\r\n   * so must past in the owner address, msg.sender == exchange.\r\n   * @param _connector The wallet connector to be used to retrieve the wallet logic\r\n   */\r\n  constructor(address _owner, address _connector, address _exchange) public {\r\n    owner_ = _owner;\r\n    connector_ = WalletConnector(_connector);\r\n    exchange_ = _exchange;\r\n    logic_ = connector_.latestLogic_();\r\n    birthBlock_ = block.number;\r\n  }\r\n\r\n  function () external payable {}\r\n\r\n  /**\r\n  * External\r\n  */\r\n\r\n  /**\r\n   * @dev Deposit ether into this wallet, default to address 0 for consistent token lookup.\r\n   */\r\n  function depositEther()\r\n    external\r\n    payable\r\n  {\r\n    require(\r\n      logic_.delegatecall(abi.encodeWithSignature('deposit(address,uint256)', 0, msg.value)),\r\n      \"depositEther() failed\"\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Deposit any ERC20 token into this wallet.\r\n   * @param _token The address of the existing token contract.\r\n   * @param _amount The amount of tokens to deposit.\r\n   * @return Bool if the deposit was successful.\r\n   */\r\n  function depositERC20Token (\r\n    address _token,\r\n    uint256 _amount\r\n  ) external\r\n    returns(bool)\r\n  {\r\n    // ether\r\n    if (_token == 0)\r\n      return error('Cannot deposit ether via depositERC20, Wallet.depositERC20Token()');\r\n\r\n    require(\r\n      logic_.delegatecall(abi.encodeWithSignature('deposit(address,uint256)', _token, _amount)),\r\n      \"depositERC20Token() failed\"\r\n    );\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev The result of an order, update the balance of this wallet.\r\n   * param _token The address of the token balance to update.\r\n   * param _amount The amount to update the balance by.\r\n   * param _subtractionFlag If true then subtract the token amount else add.\r\n   * @return Bool if the update was successful.\r\n   */\r\n  function updateBalance (\r\n    address /*_token*/,\r\n    uint256 /*_amount*/,\r\n    bool /*_subtractionFlag*/\r\n  ) external\r\n    returns(bool)\r\n  {\r\n    assembly {\r\n      calldatacopy(0x40, 0, calldatasize)\r\n      delegatecall(gas, sload(0x3), 0x40, calldatasize, 0, 32)\r\n      return(0, 32)\r\n      pop\r\n    }\r\n  }\r\n\r\n  /**\r\n   * User may update to the latest version of the exchange contract.\r\n   * Note that multiple versions are NOT supported at this time and therefore if a\r\n   * user does not wish to update they will no longer be able to use the exchange.\r\n   * @param _exchange The new exchange.\r\n   * @return Success of this transaction.\r\n   */\r\n  function updateExchange(address _exchange)\r\n    external\r\n    returns(bool)\r\n  {\r\n    if (msg.sender != owner_)\r\n      return error('msg.sender != owner_, Wallet.updateExchange()');\r\n\r\n    // If subsequent messages are not sent from this address all orders will fail\r\n    exchange_ = _exchange;\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * User may update to a new or older version of the logic contract.\r\n   * @param _version The versin to update to.\r\n   * @return Success of this transaction.\r\n   */\r\n  function updateLogic(uint256 _version)\r\n    external\r\n    returns(bool)\r\n  {\r\n    if (msg.sender != owner_)\r\n      return error('msg.sender != owner_, Wallet.updateLogic()');\r\n\r\n    address newVersion = connector_.getLogic(_version);\r\n\r\n    // Invalid version as defined by connector\r\n    if (newVersion == 0)\r\n      return error('Invalid version, Wallet.updateLogic()');\r\n\r\n    logic_ = newVersion;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Verify an order that the Exchange has received involving this wallet.\r\n   * Internal checks and then authorize the exchange to move the tokens.\r\n   * If sending ether will transfer to the exchange to broker the trade.\r\n   * param _token The address of the token contract being sold.\r\n   * param _amount The amount of tokens the order is for.\r\n   * param _fee The fee for the current trade.\r\n   * param _feeToken The token of which the fee is to be paid in.\r\n   * @return If the order was verified or not.\r\n   */\r\n  function verifyOrder (\r\n    address /*_token*/,\r\n    uint256 /*_amount*/,\r\n    uint256 /*_fee*/,\r\n    address /*_feeToken*/\r\n  ) external\r\n    returns(bool)\r\n  {\r\n    assembly {\r\n      calldatacopy(0x40, 0, calldatasize)\r\n      delegatecall(gas, sload(0x3), 0x40, calldatasize, 0, 32)\r\n      return(0, 32)\r\n      pop\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Withdraw any token, including ether from this wallet to an EOA.\r\n   * param _token The address of the token to withdraw.\r\n   * param _amount The amount to withdraw.\r\n   * @return Success of the withdrawal.\r\n   */\r\n  function withdraw(address /*_token*/, uint256 /*_amount*/)\r\n    external\r\n    returns(bool)\r\n  {\r\n    if(msg.sender != owner_)\r\n      return error('msg.sender != owner, Wallet.withdraw()');\r\n\r\n    assembly {\r\n      calldatacopy(0x40, 0, calldatasize)\r\n      delegatecall(gas, sload(0x3), 0x40, calldatasize, 0, 32)\r\n      return(0, 32)\r\n      pop\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Constants\r\n   */\r\n\r\n  /**\r\n   * @dev Get the balance for a specific token.\r\n   * @param _token The address of the token contract to retrieve the balance of.\r\n   * @return The current balance within this contract.\r\n   */\r\n  function balanceOf(address _token)\r\n    public\r\n    view\r\n    returns(uint)\r\n  {\r\n    if (_token == address(0)) {\r\n      return address(this).balance;\r\n    } else {\r\n      return Token(_token).balanceOf(this);\r\n    }\r\n  }\r\n\r\n  function walletVersion() external pure returns(uint){\r\n    return 3;\r\n  }\r\n}\r\n\r\n// File: contracts/wallet/WalletBuilderInterface.sol\r\n\r\npragma solidity ^0.4.15;\r\n\r\n\r\n\r\n/**\r\n * @title Wallet to hold and trade ERC20 tokens and ether\r\n */\r\ninterface WalletBuilderInterface {\r\n\r\n  /**\r\n   * @dev build a new trading wallet and returns its address\r\n   * @param _owner user EOA of the created trading wallet\r\n   * @param _exchange exchange address\r\n   */\r\n  function buildWallet(address _owner, address _exchange) external returns(address);\r\n}\r\n\r\n// File: contracts/utils/Ownable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, \"msg.sender != owner\");\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0), \"newOwner == 0\");\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/utils/SafeMath.sol\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/UsersManager.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface RetrieveWalletInterface {\r\n  function retrieveWallet(address userAccount) external returns(address walletAddress);\r\n}\r\n\r\ncontract UsersManager is Ownable, RetrieveWalletInterface {\r\n  mapping(address => address) public userAccountToWallet_; // User EOA to wallet addresses\r\n  WalletBuilderInterface public walletBuilder;\r\n  RetrieveWalletInterface public previousMapping;\r\n\r\n  event LogUserAdded(address indexed user, address walletAddress);\r\n  event LogWalletUpgraded(address indexed user, address oldWalletAddress, address newWalletAddress);\r\n  event LogWalletBuilderChanged(address newWalletBuilder);\r\n\r\n  constructor (\r\n    address _previousMappingAddress,\r\n    address _walletBuilder\r\n  ) public {\r\n    require(_walletBuilder != address (0), \"WalletConnector address == 0\");\r\n    previousMapping = RetrieveWalletInterface(_previousMappingAddress);\r\n    walletBuilder = WalletBuilderInterface(_walletBuilder);\r\n  }\r\n\r\n  /**\r\n   * External\r\n   */\r\n\r\n  /**\r\n   * @dev Returns the Wallet contract address associated to a user account. If the user account is not known, try to\r\n   * migrate the wallet address from the old exchange instance. This function is equivalent to getWallet(), in addition\r\n   * it stores the wallet address fetched from old the exchange instance.\r\n   * @param userAccount The user account address\r\n   * @return The address of the Wallet instance associated to the user account\r\n   */\r\n  function retrieveWallet(address userAccount)\r\n    public\r\n    returns(address walletAddress)\r\n  {\r\n    walletAddress = userAccountToWallet_[userAccount];\r\n    if (walletAddress == address(0) && address(previousMapping) != address(0)) {\r\n      // Retrieve the wallet address from the old exchange.\r\n      walletAddress = previousMapping.retrieveWallet(userAccount);\r\n\r\n      if (walletAddress != address(0)) {\r\n        userAccountToWallet_[userAccount] = walletAddress;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n * @dev Private implementation for addNewUser function. Add a new user\r\n * into the exchange, create a wallet for them.\r\n * Map their account address to the wallet contract for lookup.\r\n * @param userExternalOwnedAccount The address of the user\"s EOA.\r\n * @param exchangeAddress The address of the exchange smart contract.\r\n * @return the created trading wallet address.\r\n */\r\n  function __addNewUser(address userExternalOwnedAccount, address exchangeAddress)\r\n    private\r\n    returns (address)\r\n  {\r\n    address userTradingWallet = walletBuilder.buildWallet(userExternalOwnedAccount, exchangeAddress);\r\n    userAccountToWallet_[userExternalOwnedAccount] = userTradingWallet;\r\n    emit LogUserAdded(userExternalOwnedAccount, userTradingWallet);\r\n    return userTradingWallet;\r\n  }\r\n\r\n  /**\r\n   * @dev Add a new user to the exchange, create a wallet for them.\r\n   * Map their account address to the wallet contract for lookup.\r\n   * @param userExternalOwnedAccount The address of the user\"s EOA.\r\n   * @return Success of the transaction, false if error condition met.\r\n   */\r\n  function addNewUser(address userExternalOwnedAccount)\r\n    public\r\n    returns (bool)\r\n  {\r\n    require (\r\n      retrieveWallet(userExternalOwnedAccount) == address(0),\r\n      \"User already exists, Exchange.addNewUser()\"\r\n    );\r\n\r\n    // Create a new wallet passing EOA for owner and msg.sender for exchange. If the caller of this function is not the\r\n    // exchange, the trading wallet is not operable and requires an updateExchange()\r\n    __addNewUser(userExternalOwnedAccount, msg.sender);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Recreate the trading wallet for the user calling the function.\r\n   */\r\n  function upgradeWallet() external\r\n  {\r\n    address oldWallet = retrieveWallet(msg.sender);\r\n    require(\r\n      oldWallet != address(0),\r\n      \"User does not exists yet, Exchange.upgradeWallet()\"\r\n    );\r\n    address exchange = WalletV3(oldWallet).exchange_();\r\n    address userTradingWallet = __addNewUser(msg.sender, exchange);\r\n    emit LogWalletUpgraded(msg.sender, oldWallet, userTradingWallet);\r\n  }\r\n\r\n  /**\r\n   * @dev Administratively changes the wallet address for a specific EOA.\r\n   */\r\n  function adminSetWallet(address userExternalOwnedAccount, address userTradingWallet)\r\n    onlyOwner\r\n    external\r\n  {\r\n    address oldWallet = retrieveWallet(userExternalOwnedAccount);\r\n    userAccountToWallet_[userExternalOwnedAccount] = userTradingWallet;\r\n    emit LogUserAdded(userExternalOwnedAccount, userTradingWallet);\r\n    if (oldWallet != address(0)) {\r\n      emit LogWalletUpgraded(userExternalOwnedAccount, oldWallet, userTradingWallet);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Add a new user to the exchange, create a wallet for them.\r\n   * Map their account address to the wallet contract for lookup.\r\n   * @param newWalletBuilder The address of the new wallet builder\r\n   * @return Success of the transaction, false if error condition met.\r\n   */\r\n  function setWalletBuilder(address newWalletBuilder)\r\n    public\r\n    onlyOwner\r\n    returns (bool)\r\n  {\r\n    require(newWalletBuilder != address(0), \"setWalletBuilder(): newWalletBuilder == 0\");\r\n    walletBuilder = WalletBuilderInterface(newWalletBuilder);\r\n    emit LogWalletBuilderChanged(walletBuilder);\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts/utils/SafeERC20.sol\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\ninterface BadERC20 {\r\n  function transfer(address to, uint value) external;\r\n  function transferFrom(address from, address to, uint256 value) external;\r\n  function approve(address spender, uint value) external;\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeERC20 {\r\n\r\n  event LogWarningNonZeroAllowance(address token, address spender, uint256 allowance);\r\n\r\n  /**\r\n   * @dev Wrapping the ERC20 transfer function to avoid missing returns.\r\n   * @param _token The address of bad formed ERC20 token.\r\n   * @param _to Transfer receiver.\r\n   * @param _amount Amount to be transfered.\r\n   * @return Success of the safeTransfer.\r\n   */\r\n\r\n  function safeTransfer(\r\n    address _token,\r\n    address _to,\r\n    uint _amount\r\n  )\r\n  internal\r\n  returns (bool result)\r\n  {\r\n    BadERC20(_token).transfer(_to, _amount);\r\n\r\n    assembly {\r\n      switch returndatasize()\r\n      case 0 {                      // This is our BadToken\r\n        result := not(0)            // result is true\r\n      }\r\n      case 32 {                     // This is our GoodToken\r\n        returndatacopy(0, 0, 32)\r\n        result := mload(0)          // result == returndata of external call\r\n      }\r\n      default {                     // This is not an ERC20 token\r\n        revert(0, 0)\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Wrapping the ERC20 transferFrom function to avoid missing returns.\r\n   * @param _token The address of bad formed ERC20 token.\r\n   * @param _from Transfer sender.\r\n   * @param _to Transfer receiver.\r\n   * @param _value Amount to be transfered.\r\n   * @return Success of the safeTransferFrom.\r\n   */\r\n\r\n  function safeTransferFrom(\r\n    address _token,\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n  internal\r\n  returns (bool result)\r\n  {\r\n    BadERC20(_token).transferFrom(_from, _to, _value);\r\n\r\n    assembly {\r\n      switch returndatasize()\r\n      case 0 {                      // This is our BadToken\r\n        result := not(0)            // result is true\r\n      }\r\n      case 32 {                     // This is our GoodToken\r\n        returndatacopy(0, 0, 32)\r\n        result := mload(0)          // result == returndata of external call\r\n      }\r\n      default {                     // This is not an ERC20 token\r\n        revert(0, 0)\r\n      }\r\n    }\r\n  }\r\n\r\n  function checkAndApprove(\r\n    address _token,\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n  internal\r\n  returns (bool result)\r\n  {\r\n    uint currentAllowance = Token(_token).allowance(this, _spender);\r\n    if (currentAllowance > 0) {\r\n      emit LogWarningNonZeroAllowance(_token, _spender, currentAllowance);\r\n      // no check required for approve because it eventually will fail in the second approve\r\n      safeApprove(_token, _spender, 0);\r\n    }\r\n    return safeApprove(_token, _spender, _value);\r\n  }\r\n  /**\r\n   * @dev Wrapping the ERC20 approve function to avoid missing returns.\r\n   * @param _token The address of bad formed ERC20 token.\r\n   * @param _spender Spender address.\r\n   * @param _value Amount allowed to be spent.\r\n   * @return Success of the safeApprove.\r\n   */\r\n\r\n  function safeApprove(\r\n    address _token,\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n  internal\r\n  returns (bool result)\r\n  {\r\n    BadERC20(_token).approve(_spender, _value);\r\n\r\n    assembly {\r\n      switch returndatasize()\r\n      case 0 {                      // This is our BadToken\r\n        result := not(0)            // result is true\r\n      }\r\n      case 32 {                     // This is our GoodToken\r\n        returndatacopy(0, 0, 32)\r\n        result := mload(0)          // result == returndata of external call\r\n      }\r\n      default {                     // This is not an ERC20 token\r\n        revert(0, 0)\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// File: contracts/ExchangeV3.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Decentralized exchange for ether and ERC20 tokens.\r\n * @author Eidoo SAGL.\r\n * @dev All trades brokered by this contract.\r\n * Orders submitted by off chain order book and this contract handles\r\n * verification and execution of orders.\r\n * All value between parties is transferred via this exchange.\r\n * Methods arranged by visibility; external, public, internal, private and alphabatized within.\r\n *\r\n * New Exchange SC with eventually no fee and ERC20 tokens as quote\r\n */\r\ncontract ExchangeV3 {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  /**\r\n   * Data Structures\r\n   */\r\n  struct Order {\r\n    address offerToken_;\r\n    uint256 offerTokenTotal_;\r\n    uint256 offerTokenRemaining_;  // Amount left to give\r\n    address wantToken_;\r\n    uint256 wantTokenTotal_;\r\n    uint256 wantTokenReceived_;  // Amount received, note this may exceed want total\r\n  }\r\n\r\n  struct OrderStatus {\r\n    uint256 expirationBlock_;\r\n    uint256 wantTokenReceived_;    // Amount received, note this may exceed want total\r\n    uint256 offerTokenRemaining_;  // Amount left to give\r\n  }\r\n\r\n  struct Orders {\r\n    Order makerOrder;\r\n    Order takerOrder;\r\n    bool isMakerBuy;\r\n  }\r\n\r\n  struct FeeRate {\r\n    uint256 edoPerQuote;\r\n    uint256 edoPerQuoteDecimals;\r\n  }\r\n\r\n  struct Balances {\r\n    uint256 makerWantTokenBalance;\r\n    uint256 makerOfferTokenBalance;\r\n    uint256 takerWantTokenBalance;\r\n    uint256 takerOfferTokenBalance;\r\n  }\r\n\r\n  struct TradingWallets {\r\n    WalletV3 maker;\r\n    WalletV3 taker;\r\n  }\r\n\r\n  struct TradingAmounts {\r\n    uint256 toTaker;\r\n    uint256 toMaker;\r\n    uint256 fee;\r\n  }\r\n\r\n  struct OrdersHashes {\r\n    bytes32 makerOrder;\r\n    bytes32 takerOrder;\r\n  }\r\n\r\n  /**\r\n   * Storage\r\n   */\r\n  address private orderBookAccount_;\r\n  address public owner_;\r\n  address public feeManager_;\r\n  uint256 public birthBlock_;\r\n  address public edoToken_;\r\n  uint256 public dustLimit = 100;\r\n\r\n  mapping (address => uint256) public feeEdoPerQuote;\r\n  mapping (address => uint256) public feeEdoPerQuoteDecimals;\r\n\r\n  address public eidooWallet_;\r\n\r\n  // Define if fee calculation must be skipped for a given trade. By default (false) fee must not be skipped.\r\n  mapping(address => mapping(address => FeeRate)) public customFee;\r\n  // whitelist of EOA that should not pay fee\r\n  mapping(address => bool) public feeTakersWhitelist;\r\n\r\n  /**\r\n   * @dev Define in a trade who is the quote using a priority system:\r\n   * values example\r\n   *   0: not used as quote\r\n   *  >0: used as quote\r\n   *  if wanted and offered tokens have value > 0 the quote is the token with the bigger value\r\n   */\r\n  mapping(address => uint256) public quotePriority;\r\n\r\n  mapping(bytes32 => OrderStatus) public orders_; // Map order hashes to order data struct\r\n  UsersManager public users;\r\n\r\n  /**\r\n   * Events\r\n   */\r\n  event LogFeeRateSet(address indexed token, uint256 rate, uint256 decimals);\r\n  event LogQuotePrioritySet(address indexed quoteToken, uint256 priority);\r\n  event LogCustomFeeSet(address indexed base, address indexed quote, uint256 edoPerQuote, uint256 edoPerQuoteDecimals);\r\n  event LogFeeTakersWhitelistSet(address takerEOA, bool value);\r\n  event LogWalletDeposit(address indexed walletAddress, address token, uint256 amount, uint256 balance);\r\n  event LogWalletWithdrawal(address indexed walletAddress, address token, uint256 amount, uint256 balance);\r\n  event LogWithdraw(address recipient, address token, uint256 amount);\r\n\r\n  event LogOrderExecutionSuccess(\r\n    bytes32 indexed makerOrderId,\r\n    bytes32 indexed takerOrderId,\r\n    uint256 toMaker,\r\n    uint256 toTaker\r\n  );\r\n  event LogBatchOrderExecutionFailed(\r\n    bytes32 indexed makerOrderId,\r\n    bytes32 indexed takerOrderId,\r\n    uint256 position\r\n  );\r\n  event LogOrderFilled(bytes32 indexed orderId, uint256 totalOfferRemaining, uint256 totalWantReceived);\r\n\r\n  /**\r\n   * @dev Contract constructor - CONFIRM matches contract name.  Set owner and addr of order book.\r\n   * @param _bookAccount The EOA address for the order book, will submit ALL orders.\r\n   * @param _edoToken Deployed edo token.\r\n   * @param _edoPerWei Rate of edo tokens per wei.\r\n   * @param _edoPerWeiDecimals Decimlas carried in edo rate.\r\n   * @param _eidooWallet Wallet to pay fees to.\r\n   * @param _usersMapperAddress Previous exchange smart contract address.\r\n   */\r\n  constructor (\r\n    address _bookAccount,\r\n    address _edoToken,\r\n    uint256 _edoPerWei,\r\n    uint256 _edoPerWeiDecimals,\r\n    address _eidooWallet,\r\n    address _usersMapperAddress\r\n  ) public {\r\n    orderBookAccount_ = _bookAccount;\r\n    owner_ = msg.sender;\r\n    birthBlock_ = block.number;\r\n    edoToken_ = _edoToken;\r\n    feeEdoPerQuote[address(0)] = _edoPerWei;\r\n    feeEdoPerQuoteDecimals[address(0)] = _edoPerWeiDecimals;\r\n    eidooWallet_ = _eidooWallet;\r\n    quotePriority[address(0)] = 10;\r\n    setUsersMapper(_usersMapperAddress);\r\n  }\r\n\r\n  /**\r\n   * @dev Fallback. wallets utilize to send ether in order to broker trade.\r\n   */\r\n  function () external payable { }\r\n\r\n  modifier onlyOwner() {\r\n    require (\r\n      msg.sender == owner_,\r\n      \"msg.sender != owner\"\r\n    );\r\n    _;\r\n  }\r\n\r\n  function setUsersMapper(address _userMapperAddress)\r\n    public\r\n    onlyOwner\r\n    returns (bool)\r\n  {\r\n    require(_userMapperAddress != address(0), \"_userMapperAddress == 0\");\r\n    users = UsersManager(_userMapperAddress);\r\n    return true;\r\n  }\r\n\r\n  function setFeeManager(address feeManager)\r\n    public\r\n    onlyOwner\r\n  {\r\n    feeManager_ = feeManager;\r\n  }\r\n\r\n  function setDustLimit(uint limit)\r\n    public\r\n    onlyOwner\r\n  {\r\n    dustLimit = limit;\r\n  }\r\n\r\n  /**\r\n   * @dev Add a new user to the exchange, create a wallet for them.\r\n   * Map their account address to the wallet contract for lookup.\r\n   * @param userExternalOwnedAccount The address of the user\"s EOA.\r\n   * @return Success of the transaction, false if error condition met.\r\n   */\r\n  function addNewUser(address userExternalOwnedAccount)\r\n    external\r\n    returns (bool)\r\n  {\r\n    return users.addNewUser(userExternalOwnedAccount);\r\n  }\r\n\r\n  /**\r\n   * @dev For backward compatibility.\r\n   * @param userExternalOwnedAccount The address of the user's EOA.\r\n   * @return The address of the trading wallet\r\n   */\r\n  function userAccountToWallet_(address userExternalOwnedAccount) external returns(address)\r\n  {\r\n    return users.retrieveWallet(userExternalOwnedAccount);\r\n  }\r\n\r\n  function retrieveWallet(address userExternalOwnedAccount)\r\n    external\r\n    returns(address)\r\n  {\r\n    return users.retrieveWallet(userExternalOwnedAccount);\r\n  }\r\n\r\n  /**\r\n   * Execute orders in batches.\r\n   * @param ownedExternalAddressesAndTokenAddresses Tokan and user addresses.\r\n   * @param amountsExpirationsAndSalts Offer and want token amount and expiration and salt values.\r\n   * @param vSignatures All order signature v values.\r\n   * @param rAndSsignatures All order signature r and r values.\r\n   * @return The success of this transaction.\r\n   */\r\n  function batchExecuteOrder(\r\n    address[4][] ownedExternalAddressesAndTokenAddresses,\r\n    uint256[8][] amountsExpirationsAndSalts, // Packing to save stack size\r\n    uint8[2][] vSignatures,\r\n    bytes32[4][] rAndSsignatures\r\n  ) external\r\n    returns(bool)\r\n  {\r\n    require(\r\n      msg.sender == orderBookAccount_,\r\n      \"msg.sender != orderBookAccount, Exchange.batchExecuteOrder()\"\r\n    );\r\n\r\n    for (uint256 i = 0; i < amountsExpirationsAndSalts.length; i++) {\r\n      // TODO: the following 3 lines requires solc 0.5.0\r\n//      bytes memory payload = abi.encodeWithSignature(\"executeOrder(address[4],uint256[8],uint8[2],bytes32[4])\",\r\n//        ownedExternalAddressesAndTokenAddresses[i],\r\n//        amountsExpirationsAndSalts[i],\r\n//        vSignatures[i],\r\n//        rAndSsignatures[i]\r\n//      );\r\n//      (bool success, bytes memory returnData) = address(this).call(payload);\r\n//      if (!success || !bool(returnData)) {\r\n      bool success = address(this).call(abi.encodeWithSignature(\"executeOrder(address[4],uint256[8],uint8[2],bytes32[4])\",\r\n        ownedExternalAddressesAndTokenAddresses[i],\r\n        amountsExpirationsAndSalts[i],\r\n        vSignatures[i],\r\n        rAndSsignatures[i]\r\n      ));\r\n      if (!success) {\r\n        OrdersHashes memory hashes = __generateOrderHashes__(\r\n          ownedExternalAddressesAndTokenAddresses[i],\r\n          amountsExpirationsAndSalts[i]\r\n        );\r\n        emit LogBatchOrderExecutionFailed(hashes.makerOrder, hashes.takerOrder, i);\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Execute an order that was submitted by the external order book server.\r\n   * The order book server believes it to be a match.\r\n   * There are components for both orders, maker and taker, 2 signatures as well.\r\n   * @param ownedExternalAddressesAndTokenAddresses The maker and taker external owned accounts addresses and offered tokens contracts.\r\n   * [\r\n   *   makerEOA\r\n   *   makerOfferToken\r\n   *   takerEOA\r\n   *   takerOfferToken\r\n   * ]\r\n   * @param amountsExpirationsAndSalts The amount of tokens and the block number at which this order expires and a random number to mitigate replay.\r\n   * [\r\n   *   makerOffer\r\n   *   makerWant\r\n   *   takerOffer\r\n   *   takerWant\r\n   *   makerExpiry\r\n   *   makerSalt\r\n   *   takerExpiry\r\n   *   takerSalt\r\n   * ]\r\n   * @param vSignatures ECDSA signature parameter.\r\n   * [\r\n   *   maker V\r\n   *   taker V\r\n   * ]\r\n   * @param rAndSsignatures ECDSA signature parameters r ans s, maker 0, 1 and taker 2, 3.\r\n   * [\r\n   *   maker R\r\n   *   maker S\r\n   *   taker R\r\n   *   taker S\r\n   * ]\r\n   * @return Success of the transaction, false if error condition met.\r\n   * Like types grouped to eliminate stack depth error.\r\n   */\r\n  function executeOrder (\r\n    address[4] ownedExternalAddressesAndTokenAddresses,\r\n    uint256[8] amountsExpirationsAndSalts, // Packing to save stack size\r\n    uint8[2] vSignatures,\r\n    bytes32[4] rAndSsignatures\r\n  ) public\r\n    returns(bool)\r\n  {\r\n    // get users trading wallets and check if they exist\r\n    TradingWallets memory wallets =\r\n      getMakerAndTakerTradingWallets(ownedExternalAddressesAndTokenAddresses);\r\n\r\n    // Basic pre-conditions, return if any input data is invalid\r\n    __executeOrderInputIsValid__(\r\n      ownedExternalAddressesAndTokenAddresses,\r\n      amountsExpirationsAndSalts\r\n    );\r\n\r\n    // Verify Maker and Taker signatures\r\n    OrdersHashes memory hashes = __generateOrderHashes__(\r\n      ownedExternalAddressesAndTokenAddresses,\r\n      amountsExpirationsAndSalts\r\n    );\r\n\r\n    // Check maker order signature\r\n    require(\r\n      __signatureIsValid__(\r\n      ownedExternalAddressesAndTokenAddresses[0],\r\n        hashes.makerOrder,\r\n        vSignatures[0],\r\n        rAndSsignatures[0],\r\n        rAndSsignatures[1]\r\n      ),\r\n      \"Maker signature is invalid, Exchange.executeOrder()\"\r\n    );\r\n\r\n    // Check taker order signature\r\n    require(__signatureIsValid__(\r\n        ownedExternalAddressesAndTokenAddresses[2],\r\n        hashes.takerOrder,\r\n        vSignatures[1],\r\n        rAndSsignatures[2],\r\n        rAndSsignatures[3]\r\n      ),\r\n      \"Taker signature is invalid, Exchange.executeOrder()\"\r\n    );\r\n\r\n    // Exchange Order Verification and matching\r\n    Orders memory orders = __getOrders__(ownedExternalAddressesAndTokenAddresses, amountsExpirationsAndSalts, hashes);\r\n\r\n    // Trade amounts and fee\r\n    TradingAmounts memory amounts = __getTradeAmounts__(orders, ownedExternalAddressesAndTokenAddresses[2]);\r\n\r\n    require(\r\n      amounts.toTaker > 0 && amounts.toMaker > 0,\r\n      \"Token amount < 1, price ratio is invalid! Token value < 1, Exchange.executeOrder()\"\r\n    );\r\n\r\n    // Update orders status\r\n    orders.makerOrder.offerTokenRemaining_ = orders.makerOrder.offerTokenRemaining_.sub(amounts.toTaker);\r\n    orders.makerOrder.wantTokenReceived_ = orders.makerOrder.wantTokenReceived_.add(amounts.toMaker);\r\n\r\n    orders.takerOrder.offerTokenRemaining_ = orders.takerOrder.offerTokenRemaining_.sub(amounts.toMaker);\r\n    orders.takerOrder.wantTokenReceived_ = orders.takerOrder.wantTokenReceived_.add(amounts.toTaker);\r\n\r\n    // Write orders status to storage. If the remaining to trade in the order is below the limit,\r\n    // cleanup the storage marking the order as completed.\r\n    uint limit = dustLimit;\r\n    if ((orders.makerOrder.offerTokenRemaining_ <= limit) ||\r\n        (orders.isMakerBuy && (orders.makerOrder.wantTokenReceived_ + limit) >= orders.makerOrder.wantTokenTotal_)\r\n    ) {\r\n      orders_[hashes.makerOrder].offerTokenRemaining_ = 0;\r\n      orders_[hashes.makerOrder].wantTokenReceived_ = 0;\r\n    } else {\r\n      orders_[hashes.makerOrder].offerTokenRemaining_ = orders.makerOrder.offerTokenRemaining_;\r\n      orders_[hashes.makerOrder].wantTokenReceived_ = orders.makerOrder.wantTokenReceived_;\r\n    }\r\n\r\n    if ((orders.takerOrder.offerTokenRemaining_ <= limit) ||\r\n        (!orders.isMakerBuy && (orders.takerOrder.wantTokenReceived_ + limit) >= orders.takerOrder.wantTokenTotal_)\r\n    ) {\r\n      orders_[hashes.takerOrder].offerTokenRemaining_ = 0;\r\n      orders_[hashes.takerOrder].wantTokenReceived_ = 0;\r\n    } else {\r\n      orders_[hashes.takerOrder].offerTokenRemaining_ = orders.takerOrder.offerTokenRemaining_;\r\n      orders_[hashes.takerOrder].wantTokenReceived_ = orders.takerOrder.wantTokenReceived_;\r\n    }\r\n\r\n    // Transfer the external value, ether <> tokens\r\n    __executeTokenTransfer__(\r\n      ownedExternalAddressesAndTokenAddresses,\r\n      amounts,\r\n      wallets\r\n    );\r\n\r\n    // Log the order id(hash), amount of offer given, amount of offer remaining\r\n    emit LogOrderFilled(hashes.makerOrder, orders.makerOrder.offerTokenRemaining_, orders.makerOrder.wantTokenReceived_);\r\n    emit LogOrderFilled(hashes.takerOrder, orders.takerOrder.offerTokenRemaining_, orders.takerOrder.wantTokenReceived_);\r\n    emit LogOrderExecutionSuccess(hashes.makerOrder, hashes.takerOrder, amounts.toMaker, amounts.toTaker);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Set the fee rate for a specific quote\r\n   * @param _quoteToken Quote token.\r\n   * @param _edoPerQuote EdoPerQuote.\r\n   * @param _edoPerQuoteDecimals EdoPerQuoteDecimals.\r\n   * @return Success of the transaction.\r\n   */\r\n  function setFeeRate(\r\n    address _quoteToken,\r\n    uint256 _edoPerQuote,\r\n    uint256 _edoPerQuoteDecimals\r\n  ) external\r\n    returns(bool)\r\n  {\r\n    require(\r\n      msg.sender == owner_ || msg.sender == feeManager_,\r\n      \"msg.sender != owner, Exchange.setFeeRate()\"\r\n    );\r\n\r\n    require(\r\n      quotePriority[_quoteToken] != 0,\r\n      \"quotePriority[_quoteToken] == 0, Exchange.setFeeRate()\"\r\n    );\r\n\r\n    feeEdoPerQuote[_quoteToken] = _edoPerQuote;\r\n    feeEdoPerQuoteDecimals[_quoteToken] = _edoPerQuoteDecimals;\r\n\r\n    emit LogFeeRateSet(_quoteToken, _edoPerQuote, _edoPerQuoteDecimals);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Set the wallet for fees to be paid to.\r\n   * @param eidooWallet Wallet to pay fees to.\r\n   * @return Success of the transaction.\r\n   */\r\n  function setEidooWallet(\r\n    address eidooWallet\r\n  ) external\r\n    returns(bool)\r\n  {\r\n    require(\r\n      msg.sender == owner_,\r\n      \"msg.sender != owner, Exchange.setEidooWallet()\"\r\n    );\r\n    eidooWallet_ = eidooWallet;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Set a new order book account.\r\n   * @param account The new order book account.\r\n   */\r\n  function setOrderBookAcount (\r\n    address account\r\n  ) external\r\n    returns(bool)\r\n  {\r\n    require(\r\n      msg.sender == owner_,\r\n      \"msg.sender != owner, Exchange.setOrderBookAcount()\"\r\n    );\r\n    orderBookAccount_ = account;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Set custom fee for a pair. If both _edoPerQuote and _edoPerQuoteDecimals are 0 there is no custom fee.\r\n   *      If _edoPerQuote is 0 and _edoPerQuoteDecimals is greater than 0 the resulting fee rate is 0 (disable fee for the pair).\r\n   * @param _baseTokenAddress The trade base token address that must skip fee calculation.\r\n   * @param _quoteTokenAddress The trade quote token address that must skip fee calculation.\r\n   * @param _edoPerQuote Rate\r\n   * @param _edoPerQuoteDecimals Rate decimals\r\n   */\r\n  function setCustomFee (\r\n    address _baseTokenAddress,\r\n    address _quoteTokenAddress,\r\n    uint256 _edoPerQuote,\r\n    uint256 _edoPerQuoteDecimals\r\n  ) external\r\n    returns(bool)\r\n  {\r\n    // Preserving same owner check style\r\n    require(\r\n      msg.sender == owner_ || msg.sender == feeManager_,\r\n      \"msg.sender != owner, Exchange.setCustomFee()\"\r\n    );\r\n    if (_edoPerQuote == 0 && _edoPerQuoteDecimals == 0) {\r\n      delete customFee[_baseTokenAddress][_quoteTokenAddress];\r\n    } else {\r\n      customFee[_baseTokenAddress][_quoteTokenAddress] = FeeRate({\r\n        edoPerQuote: _edoPerQuote,\r\n        edoPerQuoteDecimals: _edoPerQuoteDecimals\r\n      });\r\n    }\r\n    emit LogCustomFeeSet(_baseTokenAddress, _quoteTokenAddress, _edoPerQuote, _edoPerQuoteDecimals);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   *  For backward compatibility\r\n   */\r\n  function mustSkipFee(address base, address quote) external view returns(bool) {\r\n    FeeRate storage rate = customFee[base][quote];\r\n    return rate.edoPerQuote == 0 && rate.edoPerQuoteDecimals != 0;\r\n  }\r\n\r\n  /**\r\n   * @dev Set a taker EOA in the fees whitelist\r\n   * @param _takerEOA EOA address of the taker\r\n   * @param _value true if the take should not pay fees\r\n   *\r\n   */\r\n  function setFeeTakersWhitelist(\r\n    address _takerEOA,\r\n    bool _value\r\n  ) external\r\n    returns(bool)\r\n  {\r\n    require(\r\n      msg.sender == owner_,\r\n      \"msg.sender != owner, Exchange.setFeeTakersWhitelist()\"\r\n    );\r\n    feeTakersWhitelist[_takerEOA] = _value;\r\n    emit LogFeeTakersWhitelistSet(_takerEOA, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Set quote priority token.\r\n   * Set the sorting of token quote based on a priority.\r\n   * @param _token The address of the token that was deposited.\r\n   * @param _priority The amount of the token that was deposited.\r\n   * @return Operation success.\r\n   */\r\n\r\n  function setQuotePriority(address _token, uint256 _priority)\r\n    external\r\n    returns(bool)\r\n  {\r\n    require(\r\n      msg.sender == owner_,\r\n      \"msg.sender != owner, Exchange.setQuotePriority()\"\r\n    );\r\n    quotePriority[_token] = _priority;\r\n    emit LogQuotePrioritySet(_token, _priority);\r\n    return true;\r\n  }\r\n\r\n  /*\r\n   Methods to catch events from external contracts, user wallets primarily\r\n   */\r\n\r\n  /**\r\n   * @dev DEPRECATED!\r\n   * Simply log the event to track wallet interaction off-chain.\r\n   * @param tokenAddress The address of the token that was deposited.\r\n   * @param amount The amount of the token that was deposited.\r\n   * @param tradingWalletBalance The updated balance of the wallet after deposit.\r\n   */\r\n  function walletDeposit(\r\n    address tokenAddress,\r\n    uint256 amount,\r\n    uint256 tradingWalletBalance\r\n  ) external\r\n  {\r\n    emit LogWalletDeposit(msg.sender, tokenAddress, amount, tradingWalletBalance);\r\n  }\r\n\r\n  /**\r\n   * @dev DEPRECATED!\r\n   * Simply log the event to track wallet interaction off-chain.\r\n   * @param tokenAddress The address of the token that was deposited.\r\n   * @param amount The amount of the token that was deposited.\r\n   * @param tradingWalletBalance The updated balance of the wallet after deposit.\r\n   */\r\n  function walletWithdrawal(\r\n    address tokenAddress,\r\n    uint256 amount,\r\n    uint256 tradingWalletBalance\r\n  ) external\r\n  {\r\n    emit LogWalletWithdrawal(msg.sender, tokenAddress, amount, tradingWalletBalance);\r\n  }\r\n\r\n  /**\r\n   * Private\r\n   */\r\n\r\n  /**\r\n   * @dev Convenient function to resolve call stack size error in ExchangeV3\r\n   * @param ownedExternalAddressesAndTokenAddresses -\r\n   */\r\n  function getMakerAndTakerTradingWallets(address[4] ownedExternalAddressesAndTokenAddresses)\r\n    private\r\n    returns (TradingWallets wallets)\r\n  {\r\n    wallets = TradingWallets(\r\n      WalletV3(users.retrieveWallet(ownedExternalAddressesAndTokenAddresses[0])), // maker\r\n      WalletV3(users.retrieveWallet(ownedExternalAddressesAndTokenAddresses[2])) // taker\r\n    );\r\n\r\n    // Operating on existing tradingWallets\r\n    require(\r\n      wallets.maker != address(0),\r\n      \"Maker wallet does not exist, Exchange.getMakerAndTakerTradingWallets()\"\r\n    );\r\n\r\n    require(\r\n      wallets.taker != address(0),\r\n      \"Taker wallet does not exist, Exchange.getMakerAndTakerTradingWallets()\"\r\n    );\r\n  }\r\n\r\n  function calculateFee(\r\n    address base,\r\n    address quote,\r\n    uint256 quoteAmount,\r\n    address takerEOA\r\n  ) public\r\n    view\r\n    returns(uint256)\r\n  {\r\n    require(quotePriority[quote] > quotePriority[base], \"Invalid pair\");\r\n    return __calculateFee__(base, quote, quoteAmount, takerEOA);\r\n  }\r\n\r\n  function __calculateFee__(\r\n    address base,\r\n    address quote,\r\n    uint256 quoteAmount,\r\n    address takerEOA\r\n  )\r\n    internal view returns(uint256)\r\n  {\r\n    FeeRate memory fee;\r\n    if (feeTakersWhitelist[takerEOA]) {\r\n      return 0;\r\n    }\r\n\r\n    // weiAmount * (fee %) * (EDO/Wei) / (decimals in edo/wei) / (decimals in percentage)\r\n      fee = customFee[base][quote];\r\n      if (fee.edoPerQuote == 0 && fee.edoPerQuoteDecimals == 0) {\r\n        // no custom fee\r\n        fee.edoPerQuote = feeEdoPerQuote[quote];\r\n        fee.edoPerQuoteDecimals = feeEdoPerQuoteDecimals[quote];\r\n      }\r\n      return quoteAmount.mul(fee.edoPerQuote).div(10**fee.edoPerQuoteDecimals);\r\n  }\r\n\r\n  /**\r\n   * @dev Verify the input to order execution is valid.\r\n   * @param ownedExternalAddressesAndTokenAddresses The maker and taker external owned accounts addresses and offered tokens contracts.\r\n   * [\r\n   *   makerEOA\r\n   *   makerOfferToken\r\n   *   takerEOA\r\n   *   takerOfferToken\r\n   * ]\r\n   * @param amountsExpirationsAndSalts The amount of tokens and the block number at which this order expires and a random number to mitigate replay.\r\n   * [\r\n   *   makerOffer\r\n   *   makerWant\r\n   *   takerOffer\r\n   *   takerWant\r\n   *   makerExpiry\r\n   *   makerSalt\r\n   *   takerExpiry\r\n   *   takerSalt\r\n   * ]\r\n   * @return Success if all checks pass.\r\n   */\r\n  function __executeOrderInputIsValid__(\r\n    address[4] ownedExternalAddressesAndTokenAddresses,\r\n    uint256[8] amountsExpirationsAndSalts\r\n  ) private view\r\n  {\r\n    // msg.send needs to be the orderBookAccount\r\n    require(\r\n      msg.sender == orderBookAccount_ || msg.sender == address(this),\r\n      \"msg.sender != orderBookAccount, Exchange.__executeOrderInputIsValid__()\"\r\n    );\r\n\r\n    // Check expirations base on the block number\r\n    require (\r\n      block.number <= amountsExpirationsAndSalts[4],\r\n      \"Maker order has expired, Exchange.__executeOrderInputIsValid__()\"\r\n    );\r\n\r\n    require(\r\n      block.number <= amountsExpirationsAndSalts[6],\r\n      \"Taker order has expired, Exchange.__executeOrderInputIsValid__()\"\r\n    );\r\n\r\n    require(\r\n      quotePriority[ownedExternalAddressesAndTokenAddresses[1]] != quotePriority[ownedExternalAddressesAndTokenAddresses[3]],\r\n      \"Quote token is omitted! Is not offered by either the Taker or Maker, Exchange.__executeOrderInputIsValid__()\"\r\n    );\r\n\r\n    // Check that none of the amounts is = to 0\r\n    if (\r\n        amountsExpirationsAndSalts[0] == 0 ||\r\n        amountsExpirationsAndSalts[1] == 0 ||\r\n        amountsExpirationsAndSalts[2] == 0 ||\r\n        amountsExpirationsAndSalts[3] == 0\r\n      )\r\n    {\r\n      revert(\"May not execute an order where token amount == 0, Exchange.__executeOrderInputIsValid__()\");\r\n    }\r\n  }\r\n\r\n  function __getBalance__(address token, address owner) private view returns(uint256) {\r\n    if (token == address(0)) {\r\n      return owner.balance;\r\n    } else {\r\n      return Token(token).balanceOf(owner);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Execute the external transfer of tokens.\r\n   * @param ownedExternalAddressesAndTokenAddresses The maker and taker external owned accounts addresses and offered tokens contracts.\r\n   * [\r\n   *   makerEOA\r\n   *   makerOfferToken\r\n   *   takerEOA\r\n   *   takerOfferToken\r\n   * ]\r\n   * @param amounts The amount of tokens to transfer.\r\n   * @return Success if both wallets verify the order.\r\n   */\r\n  function __executeTokenTransfer__(\r\n    address[4] ownedExternalAddressesAndTokenAddresses,\r\n    TradingAmounts amounts,\r\n    TradingWallets wallets\r\n  ) private\r\n  {\r\n\r\n    // Get balances. Must be taken before trading wallet verifyOrder() call because it can transfer ethers\r\n    Balances memory initialBalances;\r\n    initialBalances.takerOfferTokenBalance = __getBalance__(ownedExternalAddressesAndTokenAddresses[3], wallets.taker);\r\n    initialBalances.makerOfferTokenBalance = __getBalance__(ownedExternalAddressesAndTokenAddresses[1], wallets.maker);\r\n    initialBalances.takerWantTokenBalance = __getBalance__(ownedExternalAddressesAndTokenAddresses[1], wallets.taker);\r\n    initialBalances.makerWantTokenBalance = __getBalance__(ownedExternalAddressesAndTokenAddresses[3], wallets.maker);\r\n    //    initialBalances.takerFeeTokenBalance = __getBalance__(edoToken_, wallets.taker);\r\n\r\n\r\n    // Wallet Order Verification, reach out to the maker and taker wallets. Approve the tokens and transfer ethers\r\n    // to the exchange contract\r\n    require(\r\n      wallets.maker.verifyOrder(\r\n        ownedExternalAddressesAndTokenAddresses[1],\r\n        amounts.toTaker,\r\n        0,\r\n        0\r\n      ),\r\n      \"Maker wallet could not prepare the transfer, Exchange.__executeTokenTransfer__()\"\r\n    );\r\n\r\n    require(\r\n      wallets.taker.verifyOrder(\r\n        ownedExternalAddressesAndTokenAddresses[3],\r\n        amounts.toMaker,\r\n        amounts.fee,\r\n        edoToken_\r\n      ),\r\n      \"Taker wallet could not prepare the transfer, Exchange.__executeTokenTransfer__()\"\r\n    );\r\n\r\n    // Wallet mapping balances\r\n    address makerOfferTokenAddress = ownedExternalAddressesAndTokenAddresses[1];\r\n    address takerOfferTokenAddress = ownedExternalAddressesAndTokenAddresses[3];\r\n\r\n    WalletV3 makerTradingWallet = wallets.maker;\r\n    WalletV3 takerTradingWallet = wallets.taker;\r\n\r\n    // Taker to pay fee before trading\r\n    if(amounts.fee != 0) {\r\n      uint256 takerInitialFeeTokenBalance = Token(edoToken_).balanceOf(takerTradingWallet);\r\n\r\n      require(\r\n        Token(edoToken_).transferFrom(takerTradingWallet, eidooWallet_, amounts.fee),\r\n        \"Cannot transfer fees from taker trading wallet to eidoo wallet, Exchange.__executeTokenTransfer__()\"\r\n      );\r\n      require(\r\n        Token(edoToken_).balanceOf(takerTradingWallet) == takerInitialFeeTokenBalance.sub(amounts.fee),\r\n        \"Wrong fee token balance after transfer, Exchange.__executeTokenTransfer__()\"\r\n      );\r\n    }\r\n\r\n    // Ether to the taker and tokens to the maker\r\n    if (makerOfferTokenAddress == address(0)) {\r\n      address(takerTradingWallet).transfer(amounts.toTaker);\r\n    } else {\r\n      require(\r\n        SafeERC20.safeTransferFrom(makerOfferTokenAddress, makerTradingWallet, takerTradingWallet, amounts.toTaker),\r\n        \"Token transfership from makerTradingWallet to takerTradingWallet failed, Exchange.__executeTokenTransfer__()\"\r\n      );\r\n    }\r\n\r\n    if (takerOfferTokenAddress == address(0)) {\r\n      address(makerTradingWallet).transfer(amounts.toMaker);\r\n    } else {\r\n      require(\r\n        SafeERC20.safeTransferFrom(takerOfferTokenAddress, takerTradingWallet, makerTradingWallet, amounts.toMaker),\r\n        \"Token transfership from takerTradingWallet to makerTradingWallet failed, Exchange.__executeTokenTransfer__()\"\r\n      );\r\n    }\r\n\r\n    // Check balances\r\n    Balances memory expected;\r\n    if (takerTradingWallet != makerTradingWallet) {\r\n      expected.makerWantTokenBalance = initialBalances.makerWantTokenBalance.add(amounts.toMaker);\r\n      expected.makerOfferTokenBalance = initialBalances.makerOfferTokenBalance.sub(amounts.toTaker);\r\n      expected.takerWantTokenBalance = edoToken_ == makerOfferTokenAddress\r\n        ? initialBalances.takerWantTokenBalance.add(amounts.toTaker).sub(amounts.fee)\r\n        : initialBalances.takerWantTokenBalance.add(amounts.toTaker);\r\n      expected.takerOfferTokenBalance = edoToken_ == takerOfferTokenAddress\r\n        ? initialBalances.takerOfferTokenBalance.sub(amounts.toMaker).sub(amounts.fee)\r\n        : initialBalances.takerOfferTokenBalance.sub(amounts.toMaker);\r\n    } else {\r\n      expected.makerWantTokenBalance = expected.takerOfferTokenBalance =\r\n        edoToken_ == takerOfferTokenAddress\r\n        ? initialBalances.takerOfferTokenBalance.sub(amounts.fee)\r\n        : initialBalances.takerOfferTokenBalance;\r\n      expected.makerOfferTokenBalance = expected.takerWantTokenBalance =\r\n        edoToken_ == makerOfferTokenAddress\r\n        ? initialBalances.takerWantTokenBalance.sub(amounts.fee)\r\n        : initialBalances.takerWantTokenBalance;\r\n    }\r\n\r\n    require(\r\n      expected.takerOfferTokenBalance == __getBalance__(takerOfferTokenAddress, takerTradingWallet),\r\n      \"Wrong taker offer token balance after transfer, Exchange.__executeTokenTransfer__()\"\r\n    );\r\n    require(\r\n      expected.makerOfferTokenBalance == __getBalance__(makerOfferTokenAddress, makerTradingWallet),\r\n      \"Wrong maker offer token balance after transfer, Exchange.__executeTokenTransfer__()\"\r\n    );\r\n    require(\r\n      expected.takerWantTokenBalance == __getBalance__(makerOfferTokenAddress, takerTradingWallet),\r\n      \"Wrong taker want token balance after transfer, Exchange.__executeTokenTransfer__()\"\r\n    );\r\n    require(\r\n      expected.makerWantTokenBalance == __getBalance__(takerOfferTokenAddress, makerTradingWallet),\r\n      \"Wrong maker want token balance after transfer, Exchange.__executeTokenTransfer__()\"\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates Keccak-256 hash of order with specified parameters.\r\n   * @param ownedExternalAddressesAndTokenAddresses The orders maker EOA and current exchange address.\r\n   * @param amountsExpirationsAndSalts The orders offer and want amounts and expirations with salts.\r\n   * @return Keccak-256 hash of the passed order.\r\n   */\r\n  function generateOrderHashes(\r\n    address[4] ownedExternalAddressesAndTokenAddresses,\r\n    uint256[8] amountsExpirationsAndSalts\r\n  ) public\r\n    view\r\n    returns (bytes32[2])\r\n  {\r\n    OrdersHashes memory hashes = __generateOrderHashes__(\r\n      ownedExternalAddressesAndTokenAddresses,\r\n      amountsExpirationsAndSalts\r\n    );\r\n    return [hashes.makerOrder, hashes.takerOrder];\r\n  }\r\n\r\n  function __generateOrderHashes__(\r\n    address[4] ownedExternalAddressesAndTokenAddresses,\r\n    uint256[8] amountsExpirationsAndSalts\r\n  ) internal\r\n    view\r\n    returns (OrdersHashes)\r\n  {\r\n    bytes32 makerOrderHash = keccak256(abi.encodePacked(\r\n      address(this),\r\n      ownedExternalAddressesAndTokenAddresses[0], // _makerEOA\r\n      ownedExternalAddressesAndTokenAddresses[1], // offerToken\r\n      amountsExpirationsAndSalts[0],  // offerTokenAmount\r\n      ownedExternalAddressesAndTokenAddresses[3], // wantToken\r\n      amountsExpirationsAndSalts[1],  // wantTokenAmount\r\n      amountsExpirationsAndSalts[4], // expiry\r\n      amountsExpirationsAndSalts[5] // salt\r\n    ));\r\n\r\n    bytes32 takerOrderHash = keccak256(abi.encodePacked(\r\n      address(this),\r\n      ownedExternalAddressesAndTokenAddresses[2], // _makerEOA\r\n      ownedExternalAddressesAndTokenAddresses[3], // offerToken\r\n      amountsExpirationsAndSalts[2],  // offerTokenAmount\r\n      ownedExternalAddressesAndTokenAddresses[1], // wantToken\r\n      amountsExpirationsAndSalts[3],  // wantTokenAmount\r\n      amountsExpirationsAndSalts[6], // expiry\r\n      amountsExpirationsAndSalts[7] // salt\r\n    ));\r\n\r\n    return OrdersHashes(makerOrderHash, takerOrderHash);\r\n  }\r\n\r\n  function __getOrders__(\r\n    address[4] ownedExternalAddressesAndTokenAddresses,\r\n    uint256[8] amountsExpirationsAndSalts,\r\n    OrdersHashes hashes\r\n  ) private\r\n    returns(Orders orders)\r\n  {\r\n    OrderStatus storage makerOrderStatus = orders_[hashes.makerOrder];\r\n    OrderStatus storage takerOrderStatus = orders_[hashes.takerOrder];\r\n\r\n    orders.makerOrder.offerToken_ = ownedExternalAddressesAndTokenAddresses[1];\r\n    orders.makerOrder.offerTokenTotal_ = amountsExpirationsAndSalts[0];\r\n    orders.makerOrder.wantToken_ = ownedExternalAddressesAndTokenAddresses[3];\r\n    orders.makerOrder.wantTokenTotal_ = amountsExpirationsAndSalts[1];\r\n\r\n    if (makerOrderStatus.expirationBlock_ > 0) {  // Check for existence\r\n      // Orders still active\r\n      require(\r\n        makerOrderStatus.offerTokenRemaining_ != 0,\r\n        \"Maker order is inactive, Exchange.executeOrder()\"\r\n      );\r\n      orders.makerOrder.offerTokenRemaining_ = makerOrderStatus.offerTokenRemaining_; // Amount to give\r\n      orders.makerOrder.wantTokenReceived_ = makerOrderStatus.wantTokenReceived_; // Amount received\r\n    } else {\r\n      makerOrderStatus.expirationBlock_ = amountsExpirationsAndSalts[4]; // maker order expiration block, persist order on storage\r\n      orders.makerOrder.offerTokenRemaining_ = amountsExpirationsAndSalts[0]; // Amount to give\r\n      orders.makerOrder.wantTokenReceived_ = 0; // Amount received\r\n    }\r\n\r\n    orders.takerOrder.offerToken_ = ownedExternalAddressesAndTokenAddresses[3];\r\n    orders.takerOrder.offerTokenTotal_ = amountsExpirationsAndSalts[2];\r\n    orders.takerOrder.wantToken_ = ownedExternalAddressesAndTokenAddresses[1];\r\n    orders.takerOrder.wantTokenTotal_ = amountsExpirationsAndSalts[3];\r\n\r\n    if (takerOrderStatus.expirationBlock_ > 0) {  // Check for existence\r\n      require(\r\n        takerOrderStatus.offerTokenRemaining_ != 0,\r\n        \"Taker order is inactive, Exchange.executeOrder()\"\r\n      );\r\n      orders.takerOrder.offerTokenRemaining_ = takerOrderStatus.offerTokenRemaining_;  // Amount to give\r\n      orders.takerOrder.wantTokenReceived_ = takerOrderStatus.wantTokenReceived_; // Amount received\r\n    } else {\r\n      takerOrderStatus.expirationBlock_ = amountsExpirationsAndSalts[6]; // taker order expiration block, persist order on storage\r\n      orders.takerOrder.offerTokenRemaining_ = amountsExpirationsAndSalts[2];  // Amount to give\r\n      orders.takerOrder.wantTokenReceived_ = 0; // Amount received\r\n    }\r\n\r\n    orders.isMakerBuy = __isSell__(orders.takerOrder);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns a bool representing a SELL or BUY order based on quotePriority.\r\n   * @param _order The maker order data structure.\r\n   * @return The bool indicating if the order is a SELL or BUY.\r\n   */\r\n  function __isSell__(Order _order) internal view returns (bool) {\r\n    return quotePriority[_order.offerToken_] < quotePriority[_order.wantToken_];\r\n  }\r\n\r\n  /**\r\n   * @dev Compute the tradeable amounts of the two verified orders.\r\n   * Token amount is the __min__ remaining between want and offer of the two orders that isn\"t ether.\r\n   * Ether amount is then: etherAmount = tokenAmount * priceRatio, as ratio = eth / token.\r\n   * @param orders The maker and taker orders data structure.\r\n   * @return The amount moving from makerOfferRemaining to takerWantRemaining and vice versa.\r\n   */\r\n  function __getTradeAmounts__(\r\n    Orders memory orders,\r\n    address takerEOA\r\n  ) internal\r\n    view\r\n    returns (TradingAmounts)\r\n  {\r\n    Order memory makerOrder = orders.makerOrder;\r\n    Order memory takerOrder = orders.takerOrder;\r\n    bool isMakerBuy = orders.isMakerBuy;  // maker buy = taker sell\r\n    uint256 priceRatio;\r\n    uint256 makerAmountLeftToReceive;\r\n    uint256 takerAmountLeftToReceive;\r\n\r\n    uint toTakerAmount;\r\n    uint toMakerAmount;\r\n\r\n    if (makerOrder.offerTokenTotal_ >= makerOrder.wantTokenTotal_) {\r\n      priceRatio = makerOrder.offerTokenTotal_.mul(2**128).div(makerOrder.wantTokenTotal_);\r\n      require(\r\n        priceRatio >= takerOrder.wantTokenTotal_.mul(2**128).div(takerOrder.offerTokenTotal_),\r\n        \"Taker price is greater than maker price, Exchange.__getTradeAmounts__()\"\r\n      );\r\n      if (isMakerBuy) {\r\n        // MP > 1\r\n        makerAmountLeftToReceive = makerOrder.wantTokenTotal_.sub(makerOrder.wantTokenReceived_);\r\n        toMakerAmount = __min__(takerOrder.offerTokenRemaining_, makerAmountLeftToReceive);\r\n        // add 2**128-1 in order to obtain a round up\r\n        toTakerAmount = toMakerAmount.mul(priceRatio).div(2**128);\r\n      } else {\r\n        // MP < 1\r\n        takerAmountLeftToReceive = takerOrder.wantTokenTotal_.sub(takerOrder.wantTokenReceived_);\r\n        toTakerAmount = __min__(makerOrder.offerTokenRemaining_, takerAmountLeftToReceive);\r\n        toMakerAmount = toTakerAmount.mul(2**128).div(priceRatio);\r\n      }\r\n    } else {\r\n      priceRatio = makerOrder.wantTokenTotal_.mul(2**128).div(makerOrder.offerTokenTotal_);\r\n      require(\r\n        priceRatio <= takerOrder.offerTokenTotal_.mul(2**128).div(takerOrder.wantTokenTotal_),\r\n        \"Taker price is less than maker price, Exchange.__getTradeAmounts__()\"\r\n      );\r\n      if (isMakerBuy) {\r\n        // MP < 1\r\n        makerAmountLeftToReceive = makerOrder.wantTokenTotal_.sub(makerOrder.wantTokenReceived_);\r\n        toMakerAmount = __min__(takerOrder.offerTokenRemaining_, makerAmountLeftToReceive);\r\n        toTakerAmount = toMakerAmount.mul(2**128).div(priceRatio);\r\n      } else {\r\n        // MP > 1\r\n        takerAmountLeftToReceive = takerOrder.wantTokenTotal_.sub(takerOrder.wantTokenReceived_);\r\n        toTakerAmount = __min__(makerOrder.offerTokenRemaining_, takerAmountLeftToReceive);\r\n        // add 2**128-1 in order to obtain a round up\r\n        toMakerAmount = toTakerAmount.mul(priceRatio).div(2**128);\r\n      }\r\n    }\r\n\r\n    uint fee = isMakerBuy\r\n      ? __calculateFee__(makerOrder.wantToken_, makerOrder.offerToken_, toTakerAmount, takerEOA)\r\n      : __calculateFee__(makerOrder.offerToken_, makerOrder.wantToken_, toMakerAmount, takerEOA);\r\n\r\n    return TradingAmounts(toTakerAmount, toMakerAmount, fee);\r\n  }\r\n\r\n  /**\r\n   * @dev Return the maximum of two uints\r\n   * @param a Uint 1\r\n   * @param b Uint 2\r\n   * @return The grater value or a if equal\r\n   */\r\n  function __max__(uint256 a, uint256 b)\r\n    private\r\n    pure\r\n    returns (uint256)\r\n  {\r\n    return a < b\r\n      ? b\r\n      : a;\r\n  }\r\n\r\n  /**\r\n   * @dev Return the minimum of two uints\r\n   * @param a Uint 1\r\n   * @param b Uint 2\r\n   * @return The smallest value or b if equal\r\n   */\r\n  function __min__(uint256 a, uint256 b)\r\n    private\r\n    pure\r\n    returns (uint256)\r\n  {\r\n    return a < b\r\n      ? a\r\n      : b;\r\n  }\r\n\r\n  /**\r\n   * @dev On chain verification of an ECDSA ethereum signature.\r\n   * @param signer The EOA address of the account that supposedly signed the message.\r\n   * @param orderHash The on-chain generated hash for the order.\r\n   * @param v ECDSA signature parameter v.\r\n   * @param r ECDSA signature parameter r.\r\n   * @param s ECDSA signature parameter s.\r\n   * @return Bool if the signature is valid or not.\r\n   */\r\n  function __signatureIsValid__(\r\n    address signer,\r\n    bytes32 orderHash,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) private\r\n    pure\r\n    returns (bool)\r\n  {\r\n    address recoveredAddr = ecrecover(\r\n      keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", orderHash)),\r\n      v,\r\n      r,\r\n      s\r\n    );\r\n\r\n    return recoveredAddr == signer;\r\n  }\r\n\r\n  /**\r\n   * @dev Confirm wallet local balances and token balances match.\r\n   * @param makerTradingWallet  Maker wallet address.\r\n   * @param takerTradingWallet  Taker wallet address.\r\n   * @param token  Token address to confirm balances match.\r\n   * @return If the balances do match.\r\n   */\r\n  function __tokenAndWalletBalancesMatch__(\r\n    address makerTradingWallet,\r\n    address takerTradingWallet,\r\n    address token\r\n  ) private\r\n    view\r\n    returns(bool)\r\n  {\r\n    if (Token(token).balanceOf(makerTradingWallet) != WalletV3(makerTradingWallet).balanceOf(token)) {\r\n      return false;\r\n    }\r\n\r\n    if (Token(token).balanceOf(takerTradingWallet) != WalletV3(takerTradingWallet).balanceOf(token)) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n * @dev Withdraw asset.\r\n * @param _tokenAddress Asset to be withdrawed.\r\n * @return bool.\r\n */\r\n  function withdraw(address _tokenAddress)\r\n    public\r\n    onlyOwner\r\n  returns(bool)\r\n  {\r\n    uint tokenBalance;\r\n    if (_tokenAddress == address(0)) {\r\n      tokenBalance = address(this).balance;\r\n      msg.sender.transfer(tokenBalance);\r\n    } else {\r\n      tokenBalance = Token(_tokenAddress).balanceOf(address(this));\r\n      require(\r\n        Token(_tokenAddress).transfer(msg.sender, tokenBalance),\r\n        \"withdraw transfer failed\"\r\n      );\r\n    }\r\n    emit LogWithdraw(msg.sender, _tokenAddress, tokenBalance);\r\n    return true;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"base\",\"type\":\"address\"},{\"name\":\"quote\",\"type\":\"address\"},{\"name\":\"quoteAmount\",\"type\":\"uint256\"},{\"name\":\"takerEOA\",\"type\":\"address\"}],\"name\":\"calculateFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"eidooWallet\",\"type\":\"address\"}],\"name\":\"setEidooWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"quotePriority\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userMapperAddress\",\"type\":\"address\"}],\"name\":\"setUsersMapper\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userExternalOwnedAccount\",\"type\":\"address\"}],\"name\":\"retrieveWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ownedExternalAddressesAndTokenAddresses\",\"type\":\"address[4]\"},{\"name\":\"amountsExpirationsAndSalts\",\"type\":\"uint256[8]\"}],\"name\":\"generateOrderHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[2]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"feeManager\",\"type\":\"address\"}],\"name\":\"setFeeManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ownedExternalAddressesAndTokenAddresses\",\"type\":\"address[4][]\"},{\"name\":\"amountsExpirationsAndSalts\",\"type\":\"uint256[8][]\"},{\"name\":\"vSignatures\",\"type\":\"uint8[2][]\"},{\"name\":\"rAndSsignatures\",\"type\":\"bytes32[4][]\"}],\"name\":\"batchExecuteOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setOrderBookAcount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"tradingWalletBalance\",\"type\":\"uint256\"}],\"name\":\"walletWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_takerEOA\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setFeeTakersWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_priority\",\"type\":\"uint256\"}],\"name\":\"setQuotePriority\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_baseTokenAddress\",\"type\":\"address\"},{\"name\":\"_quoteTokenAddress\",\"type\":\"address\"},{\"name\":\"_edoPerQuote\",\"type\":\"uint256\"},{\"name\":\"_edoPerQuoteDecimals\",\"type\":\"uint256\"}],\"name\":\"setCustomFee\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"edoToken_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"birthBlock_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orders_\",\"outputs\":[{\"name\":\"expirationBlock_\",\"type\":\"uint256\"},{\"name\":\"wantTokenReceived_\",\"type\":\"uint256\"},{\"name\":\"offerTokenRemaining_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeManager_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"base\",\"type\":\"address\"},{\"name\":\"quote\",\"type\":\"address\"}],\"name\":\"mustSkipFee\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeEdoPerQuote\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"setDustLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userExternalOwnedAccount\",\"type\":\"address\"}],\"name\":\"userAccountToWallet_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eidooWallet_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userExternalOwnedAccount\",\"type\":\"address\"}],\"name\":\"addNewUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ownedExternalAddressesAndTokenAddresses\",\"type\":\"address[4]\"},{\"name\":\"amountsExpirationsAndSalts\",\"type\":\"uint256[8]\"},{\"name\":\"vSignatures\",\"type\":\"uint8[2]\"},{\"name\":\"rAndSsignatures\",\"type\":\"bytes32[4]\"}],\"name\":\"executeOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"customFee\",\"outputs\":[{\"name\":\"edoPerQuote\",\"type\":\"uint256\"},{\"name\":\"edoPerQuoteDecimals\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dustLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"tradingWalletBalance\",\"type\":\"uint256\"}],\"name\":\"walletDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeTakersWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeEdoPerQuoteDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"users\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_quoteToken\",\"type\":\"address\"},{\"name\":\"_edoPerQuote\",\"type\":\"uint256\"},{\"name\":\"_edoPerQuoteDecimals\",\"type\":\"uint256\"}],\"name\":\"setFeeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_bookAccount\",\"type\":\"address\"},{\"name\":\"_edoToken\",\"type\":\"address\"},{\"name\":\"_edoPerWei\",\"type\":\"uint256\"},{\"name\":\"_edoPerWeiDecimals\",\"type\":\"uint256\"},{\"name\":\"_eidooWallet\",\"type\":\"address\"},{\"name\":\"_usersMapperAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"LogFeeRateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"quoteToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"priority\",\"type\":\"uint256\"}],\"name\":\"LogQuotePrioritySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"base\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"quote\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"edoPerQuote\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"edoPerQuoteDecimals\",\"type\":\"uint256\"}],\"name\":\"LogCustomFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"takerEOA\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"LogFeeTakersWhitelistSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"walletAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"LogWalletDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"walletAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"LogWalletWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"makerOrderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"takerOrderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"toMaker\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"toTaker\",\"type\":\"uint256\"}],\"name\":\"LogOrderExecutionSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"makerOrderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"takerOrderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"LogBatchOrderExecutionFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"totalOfferRemaining\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalWantReceived\",\"type\":\"uint256\"}],\"name\":\"LogOrderFilled\",\"type\":\"event\"}]","ContractName":"ExchangeV3","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008725e59eef18409273fa50662e7c1b671e368a86000000000000000000000000ced4e93198734ddaff8492d525bd258d49eb388e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006504d6f4cb6ec9cff5675c515212ebd17c3d83f000000000000000000000000b7c975bd483ba4d6c3e3a12132b1c974005ba1d7","Library":"","SwarmSource":"bzzr://a7ca4ffcef4b99ce7cc3fdc724059fb5a8ad0ae36ce2a152032b9d6d85ce77f5"}]}