{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n \r\nlibrary SafeMath256 {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20 {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf( address who ) public constant returns (uint);\r\n    function allowance( address owner, address spender ) public constant returns (uint);\r\n\r\n    function transfer( address to, uint value) public returns (bool);\r\n    function transferFrom( address from, address to, uint value) public returns (bool);\r\n    function approve( address spender, uint value ) public returns (bool);\r\n\r\n    event Transfer( address indexed from, address indexed to, uint value);\r\n    event Approval( address indexed owner, address indexed spender, uint value);\r\n    \r\n}\r\n\r\ncontract BaseEvent {\r\n\r\n    event OnBurn\r\n    (\r\n        address indexed from, \r\n        uint256 value\r\n    );\r\n\r\n    event OnFrozenAccount\r\n    (\r\n        address indexed target, \r\n        bool frozen\r\n    );\r\n\r\n}\r\n\r\ninterface TokenRecipient {\r\n    function receiveApproval(address from, uint256 _amount, address _token, bytes _data) external;\r\n}\r\n\r\n/***\r\n    1、修改类名称ClassName成自己的名称\r\n    2、修改标识符\r\n    3、修改英文名称\r\n***/\r\ncontract GCC is ERC20, Ownable, BaseEvent {\r\n\r\n    uint256 _supply;\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256))  _approvals;\r\n    \r\n    string   public  symbol = \"GCC\";\r\n    string   public  name = \"game continent\";\r\n    uint256  public  decimals = 18;\r\n\r\n    using SafeMath256 for uint256;\r\n\r\n    constructor() public {}\r\n\r\n    function totalSupply() public constant returns (uint256) {return _supply;}\r\n    function balanceOf(address _owner) public constant returns (uint256) {return _balances[_owner];}\r\n    function allowance(address _owner, address _spender) public constant returns (uint256) {return _approvals[_owner][_spender];}\r\n\r\n    function transfer(address _to, uint _val) public returns (bool) {\r\n//        require(!_frozenAccount[msg.sender]);\r\n        require(_balances[msg.sender] >= _val);\r\n        _balances[msg.sender] = _balances[msg.sender].sub(_val);\r\n        _balances[_to] = _balances[_to].add(_val);\r\n\r\n        emit Transfer(msg.sender, _to, _val);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _val) public returns (bool) {\r\n//        require(!_frozenAccount[_from]);\r\n        require(_balances[_from] >= _val);\r\n        require(_approvals[_from][msg.sender] >= _val);\r\n        _approvals[_from][msg.sender] = _approvals[_from][msg.sender].sub(_val);\r\n        _balances[_from] = _balances[_from].sub(_val);\r\n        _balances[_to] = _balances[_to].add(_val);\r\n\r\n        emit Transfer(_from, _to, _val);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _val) public returns (bool) {\r\n        _approvals[msg.sender][_spender] = _val;\r\n        emit Approval(msg.sender, _spender, _val);\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 _value) public returns (bool) {\r\n//        require(!_frozenAccount[msg.sender]);\r\n        require(_balances[msg.sender] >= _value); \r\n        _balances[msg.sender] = _balances[msg.sender].sub(_value);\r\n        _supply = _supply.sub(_value);\r\n        emit OnBurn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    function burnFrom(address _from, uint256 _value) public returns (bool) {\r\n//        require(!_frozenAccount[_from]);\r\n        require(_balances[_from] >= _value);\r\n        require(_value <= _approvals[_from][msg.sender]);\r\n\r\n        _balances[_from] = _balances[_from].sub(_value);\r\n        _approvals[_from][msg.sender] = _approvals[_from][msg.sender].sub(_value);\r\n        _supply = _supply.sub(_value);\r\n        emit OnBurn(_from, _value);\r\n        return true;\r\n    }\r\n    \r\n    function freezeAccount(address target, bool freeze) \r\n        onlyOwner()\r\n        public\r\n    {\r\n//        _frozenAccount[target] = freeze;\r\n        emit OnFrozenAccount(target, freeze);\r\n    }\r\n    \r\n\r\n    function mint(address _to,uint256 _val) \r\n        public\r\n        onlyOwner()\r\n    {\r\n        require(_val > 0);\r\n        uint256 _val0 = _val * 10 ** uint256(decimals);\r\n        _balances[_to] = _balances[_to].add(_val0);\r\n        _supply = _supply.add(_val0);\r\n    }\r\n\r\n    function approveAndCall(address _recipient, uint256 _value, bytes _extraData)\r\n        public\r\n    {\r\n        approve(_recipient, _value);\r\n        TokenRecipient(_recipient).receiveApproval(msg.sender, _value, address(this), _extraData);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"OnBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"OnFrozenAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"GCC","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6c10119d7d4f67b6a6b97e0fdd4df44c40a7f4815748795bf990a7c9623f596e"}]}