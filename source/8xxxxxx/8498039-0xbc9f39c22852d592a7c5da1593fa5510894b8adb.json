{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2019-08-22\r\n*/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() internal {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title ERC20Detailed token\r\n * @dev The decimals are only for visualization purposes.\r\n * All the operations are done using the smallest and indivisible token unit,\r\n * just as on Ethereum all the operations are done in wei.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n  string private _name;\r\n  string private _symbol;\r\n  uint8 private _decimals;\r\n\r\n  constructor(string name, string symbol, uint8 decimals) public {\r\n    _name = name;\r\n    _symbol = symbol;\r\n    _decimals = decimals;\r\n  }\r\n\r\n  /**\r\n   * @return the name of the token.\r\n   */\r\n  function name() public view returns(string) {\r\n    return _name;\r\n  }\r\n\r\n  /**\r\n   * @return the symbol of the token.\r\n   */\r\n  function symbol() public view returns(string) {\r\n    return _symbol;\r\n  }\r\n\r\n  /**\r\n   * @return the number of decimals of the token.\r\n   */\r\n  function decimals() public view returns(uint8) {\r\n    return _decimals;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract ERC20 is IERC20 {\r\n  using SafeMath for uint256;\r\n\r\n  mapping (address => uint256) private _balances;\r\n\r\n  mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n  uint256 private _totalSupply;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param owner The address to query the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n    return _balances[owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param owner address The address which owns the funds.\r\n   * @param spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address owner,\r\n    address spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return _allowed[owner][spender];\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param to The address to transfer to.\r\n  * @param value The amount to be transferred.\r\n  */\r\n  function transfer(address to, uint256 value) public returns (bool) {\r\n    _transfer(msg.sender, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param spender The address which will spend the funds.\r\n   * @param value The amount of tokens to be spent.\r\n   */\r\n  function approve(address spender, uint256 value) public returns (bool) {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = value;\r\n    emit Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param from address The address which you want to send tokens from\r\n   * @param to address The address which you want to transfer to\r\n   * @param value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(value <= _allowed[from][msg.sender]);\r\n\r\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n    _transfer(from, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed_[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param spender The address which will spend the funds.\r\n   * @param addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseAllowance(\r\n    address spender,\r\n    uint256 addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = (\r\n      _allowed[msg.sender][spender].add(addedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed_[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param spender The address which will spend the funds.\r\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseAllowance(\r\n    address spender,\r\n    uint256 subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = (\r\n      _allowed[msg.sender][spender].sub(subtractedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified addresses\r\n  * @param from The address to transfer from.\r\n  * @param to The address to transfer to.\r\n  * @param value The amount to be transferred.\r\n  */\r\n  function _transfer(address from, address to, uint256 value) internal {\r\n    require(value <= _balances[from]);\r\n    require(to != address(0));\r\n\r\n    _balances[from] = _balances[from].sub(value);\r\n    _balances[to] = _balances[to].add(value);\r\n    emit Transfer(from, to, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that mints an amount of the token and assigns it to\r\n   * an account. This encapsulates the modification of balances such that the\r\n   * proper events are emitted.\r\n   * @param account The account that will receive the created tokens.\r\n   * @param value The amount that will be created.\r\n   */\r\n  function _mint(address account, uint256 value) internal {\r\n    require(account != 0);\r\n    _totalSupply = _totalSupply.add(value);\r\n    _balances[account] = _balances[account].add(value);\r\n    emit Transfer(address(0), account, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that burns an amount of the token of a given\r\n   * account.\r\n   * @param account The account whose tokens will be burnt.\r\n   * @param value The amount that will be burnt.\r\n   */\r\n  function _burn(address account, uint256 value) internal {\r\n    require(account != 0);\r\n    require(value <= _balances[account]);\r\n\r\n    _totalSupply = _totalSupply.sub(value);\r\n    _balances[account] = _balances[account].sub(value);\r\n    emit Transfer(account, address(0), value);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that burns an amount of the token of a given\r\n   * account, deducting from the sender's allowance for said account. Uses the\r\n   * internal burn function.\r\n   * @param account The account whose tokens will be burnt.\r\n   * @param value The amount that will be burnt.\r\n   */\r\n  function _burnFrom(address account, uint256 value) internal {\r\n    require(value <= _allowed[account][msg.sender]);\r\n\r\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\r\n    // this function needs to emit an event with the updated approval.\r\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\r\n      value);\r\n    _burn(account, value);\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/Roles.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping (address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev give an account access to this role\r\n   */\r\n  function add(Role storage role, address account) internal {\r\n    require(account != address(0));\r\n    require(!has(role, account));\r\n\r\n    role.bearer[account] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev remove an account's access to this role\r\n   */\r\n  function remove(Role storage role, address account) internal {\r\n    require(account != address(0));\r\n    require(has(role, account));\r\n\r\n    role.bearer[account] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev check if an account has this role\r\n   * @return bool\r\n   */\r\n  function has(Role storage role, address account)\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    require(account != address(0));\r\n    return role.bearer[account];\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/roles/PauserRole.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ncontract PauserRole {\r\n  using Roles for Roles.Role;\r\n\r\n  event PauserAdded(address indexed account);\r\n  event PauserRemoved(address indexed account);\r\n\r\n  Roles.Role private pausers;\r\n\r\n  constructor() internal {\r\n    _addPauser(msg.sender);\r\n  }\r\n\r\n  modifier onlyPauser() {\r\n    require(isPauser(msg.sender));\r\n    _;\r\n  }\r\n\r\n  function isPauser(address account) public view returns (bool) {\r\n    return pausers.has(account);\r\n  }\r\n\r\n  function addPauser(address account) public onlyPauser {\r\n    _addPauser(account);\r\n  }\r\n\r\n  function renouncePauser() public {\r\n    _removePauser(msg.sender);\r\n  }\r\n\r\n  function _addPauser(address account) internal {\r\n    pausers.add(account);\r\n    emit PauserAdded(account);\r\n  }\r\n\r\n  function _removePauser(address account) internal {\r\n    pausers.remove(account);\r\n    emit PauserRemoved(account);\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is PauserRole {\r\n  event Paused(address account);\r\n  event Unpaused(address account);\r\n\r\n  bool private _paused;\r\n\r\n  constructor() internal {\r\n    _paused = false;\r\n  }\r\n\r\n  /**\r\n   * @return true if the contract is paused, false otherwise.\r\n   */\r\n  function paused() public view returns(bool) {\r\n    return _paused;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!_paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(_paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyPauser whenNotPaused {\r\n    _paused = true;\r\n    emit Paused(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyPauser whenPaused {\r\n    _paused = false;\r\n    emit Unpaused(msg.sender);\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Pausable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev ERC20 modified with pausable transfers.\r\n **/\r\ncontract ERC20Pausable is ERC20, Pausable {\r\n\r\n  function transfer(\r\n    address to,\r\n    uint256 value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.transfer(to, value);\r\n  }\r\n\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.transferFrom(from, to, value);\r\n  }\r\n\r\n  function approve(\r\n    address spender,\r\n    uint256 value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.approve(spender, value);\r\n  }\r\n\r\n  function increaseAllowance(\r\n    address spender,\r\n    uint addedValue\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool success)\r\n  {\r\n    return super.increaseAllowance(spender, addedValue);\r\n  }\r\n\r\n  function decreaseAllowance(\r\n    address spender,\r\n    uint subtractedValue\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool success)\r\n  {\r\n    return super.decreaseAllowance(spender, subtractedValue);\r\n  }\r\n}\r\n\r\n// File: contracts/SignkeysToken.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\ncontract SignkeysToken is ERC20Pausable, ERC20Detailed, Ownable {\r\n\r\n    uint8 public constant DECIMALS = 18;\r\n\r\n    uint256 public constant INITIAL_SUPPLY = 2E9 * (10 ** uint256(DECIMALS));\r\n\r\n    /* Address where fees will be transferred */\r\n    address public feeChargingAddress;\r\n\r\n    function setFeeChargingAddress(address _feeChargingAddress) external onlyOwner {\r\n        feeChargingAddress = _feeChargingAddress;\r\n        emit FeeChargingAddressChanges(_feeChargingAddress);\r\n    }\r\n\r\n    /* Fee charging address changed */\r\n    event FeeChargingAddressChanges(address newFeeChargingAddress);\r\n\r\n    /**\r\n     * @dev Constructor that gives msg.sender all of existing tokens.\r\n     */\r\n    constructor() public ERC20Detailed(\"SignkeysToken\", \"KEYS\", DECIMALS) {\r\n        _mint(owner(), INITIAL_SUPPLY);\r\n    }\r\n\r\n    function transferWithSignature(\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 feeAmount,\r\n        uint256 expiration,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s) public {\r\n        require(expiration >= now, \"Signature expired\");\r\n        require(feeChargingAddress != 0x0, \"Fee charging address must be set\");\r\n\r\n        address receivedSigner = ecrecover(\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    from, to, amount, feeAmount, expiration\r\n                )\r\n            ), v, r, s);\r\n\r\n        require(receivedSigner == from, \"Something wrong with signature\");\r\n        _transfer(from, to, amount);\r\n        _transfer(from, feeChargingAddress, feeAmount);\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes _data) public payable returns (bool success) {\r\n        require(_spender != address(this));\r\n        require(super.approve(_spender, _value));\r\n        require(_spender.call(_data));\r\n        return true;\r\n    }\r\n\r\n    function() payable external {\r\n        revert();\r\n    }\r\n}\r\n\r\n// File: contracts/BytesDeserializer.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * Deserialize bytes payloads.\r\n *\r\n * Values are in big-endian byte order.\r\n *\r\n */\r\nlibrary BytesDeserializer {\r\n\r\n    /**\r\n     * Extract 256-bit worth of data from the bytes stream.\r\n     */\r\n    function slice32(bytes b, uint offset) internal pure returns (bytes32) {\r\n        bytes32 out;\r\n\r\n        for (uint i = 0; i < 32; i++) {\r\n            out |= bytes32(b[offset + i] & 0xFF) >> (i * 8);\r\n        }\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Extract Ethereum address worth of data from the bytes stream.\r\n     */\r\n    function sliceAddress(bytes b, uint offset) internal pure returns (address) {\r\n        bytes32 out;\r\n\r\n        for (uint i = 0; i < 20; i++) {\r\n            out |= bytes32(b[offset + i] & 0xFF) >> ((i+12) * 8);\r\n        }\r\n        return address(uint(out));\r\n    }\r\n\r\n    /**\r\n     * Extract 128-bit worth of data from the bytes stream.\r\n     */\r\n    function slice16(bytes b, uint offset) internal pure returns (bytes16) {\r\n        bytes16 out;\r\n\r\n        for (uint i = 0; i < 16; i++) {\r\n            out |= bytes16(b[offset + i] & 0xFF) >> (i * 8);\r\n        }\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Extract 32-bit worth of data from the bytes stream.\r\n     */\r\n    function slice4(bytes b, uint offset) internal pure returns (bytes4) {\r\n        bytes4 out;\r\n\r\n        for (uint i = 0; i < 4; i++) {\r\n            out |= bytes4(b[offset + i] & 0xFF) >> (i * 8);\r\n        }\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Extract 16-bit worth of data from the bytes stream.\r\n     */\r\n    function slice2(bytes b, uint offset) internal pure returns (bytes2) {\r\n        bytes2 out;\r\n\r\n        for (uint i = 0; i < 2; i++) {\r\n            out |= bytes2(b[offset + i] & 0xFF) >> (i * 8);\r\n        }\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Extract 8-bit worth of data from the bytes stream.\r\n     */\r\n    function slice(bytes b, uint offset) internal pure returns (bytes1) {\r\n        return bytes1(b[offset] & 0xFF);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  function safeTransfer(\r\n    IERC20 token,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    require(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    IERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    require(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    // safeApprove should only be called when setting an initial allowance, \r\n    // or when resetting it to zero. To increase and decrease it, use \r\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n    require((value == 0) || (token.allowance(msg.sender, spender) == 0));\r\n    require(token.approve(spender, value));\r\n  }\r\n\r\n  function safeIncreaseAllowance(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n    require(token.approve(spender, newAllowance));\r\n  }\r\n\r\n  function safeDecreaseAllowance(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n    require(token.approve(spender, newAllowance));\r\n  }\r\n}\r\n\r\n// File: contracts/SignkeysStaking.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract SignkeysStaking is Ownable {\r\n\r\n    using BytesDeserializer for bytes;\r\n\r\n    using SafeMath for uint256;\r\n\r\n    using SafeERC20 for ERC20;\r\n\r\n    /* The array of currently staking accounts */\r\n    address[] private stakers;\r\n\r\n    /* The amounts of currently staking accounts for KEYS */\r\n    uint256[] private keysAmounts;\r\n\r\n    /* The amounts of currently staking accounts for XRM */\r\n    uint256[] private xrmAmounts;\r\n\r\n    /* The dates until the stake is locked for KEYS */\r\n    uint256[] private keysLockTimes;\r\n\r\n    /* The dates until the stake is locked for XRM */\r\n    uint256[] private xrmLockTimes;\r\n\r\n    /* Mapping for holding reference address -> index */\r\n    mapping(address => uint256) private stakersIndexes;\r\n\r\n    /* Token field for interacting with KEYS token */\r\n    ERC20 public keysToken;\r\n\r\n    /* Token field for interacting with XRM token */\r\n    ERC20 public xrmToken;\r\n\r\n    /* The duration of lock starting from the moment of stake */\r\n    uint256 public lockDuration;\r\n\r\n    uint256 public dailyDistributedReward;\r\n\r\n    event Staked(address indexed token, address indexed user, uint256 amount, uint256 total);\r\n    event Unstaked(address indexed token, address indexed user, uint256 amount, uint256 total);\r\n    event Locked(address indexed token, address indexed user, uint endDateTime);\r\n    event LockDurationChanged(uint newLockDurationSeconds);\r\n    event KeysStakingTokenChanged(address indexed token);\r\n    event XrmStakingTokenChanged(address indexed token);\r\n    event DailyDistributedRewardChanged(uint256 reward);\r\n\r\n    constructor(address _keysToken, address _xrmToken) public {\r\n        lockDuration = 30 days;\r\n        keysToken = ERC20(_keysToken);\r\n        xrmToken = ERC20(_xrmToken);\r\n\r\n        stakers.push(0x0000000000000000000000000000000000000000);\r\n\r\n        keysAmounts.push(0);\r\n        keysLockTimes.push(0);\r\n\r\n        xrmAmounts.push(0);\r\n        xrmLockTimes.push(0);\r\n    }\r\n\r\n    function setKeysToken(address _token) external onlyOwner {\r\n        keysToken = ERC20(_token);\r\n        emit KeysStakingTokenChanged(_token);\r\n    }\r\n\r\n    function setXrmToken(address _token) external onlyOwner {\r\n        xrmToken = ERC20(_token);\r\n        emit XrmStakingTokenChanged(_token);\r\n    }\r\n\r\n    function setDailyDistributedReward(uint256 _reward) external onlyOwner {\r\n        dailyDistributedReward = _reward;\r\n        emit DailyDistributedRewardChanged(_reward);\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the stakes of the specified address.\r\n    * @param _staker The address to query the stake of.\r\n    * @return Two uint256 numbers representing the amount owned by the passed address for KEYS and XRM.\r\n    */\r\n    function stakeOf(address _staker) public view returns (uint256, uint256) {\r\n        return (keysAmounts[stakersIndexes[_staker]], xrmAmounts[stakersIndexes[_staker]]);\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the stakes of the specified address.\r\n    * @param _staker The address to query the stake of.\r\n    * @return Two uint256 numbers representing the amount owned by the passed address for KEYS and XRM.\r\n    */\r\n    function lockTimeOf(address _staker) public view returns (uint256, uint256) {\r\n        return (keysLockTimes[stakersIndexes[_staker]], xrmLockTimes[stakersIndexes[_staker]]);\r\n    }\r\n\r\n    /**\r\n    * @dev Returns list of all stakers addresses with their corresponding staking amounts\r\n    * @return Three lists representing staking addresses and their staked amounts for KEYS and XRM.\r\n    */\r\n    function getAllStakers() public view returns (address[], uint256[], uint256[]) {\r\n        return (stakers, keysAmounts, xrmAmounts);\r\n    }\r\n\r\n    /**\r\n    * Stake the given amount of tokens. This method calls only via \"approve and call\" mechanism from token.\r\n    * See receiveApproval method and approveAndCall method in token\r\n    * @param _user The address from which we stake tokens\r\n    * @param _amount The amount of tokens we stake from\r\n    */\r\n    function stake(address _user, uint256 _amount) internal returns (uint256)  {\r\n        if (stakersIndexes[_user] == 0x0) {\r\n            keysAmounts.push(0);\r\n            keysLockTimes.push(0);\r\n\r\n            xrmAmounts.push(0);\r\n            xrmLockTimes.push(0);\r\n\r\n            stakers.push(_user);\r\n            stakersIndexes[_user] = stakers.length - 1;\r\n        }\r\n\r\n        if (msg.sender == address(keysToken)) {\r\n            return stakeKeys(_user, _amount);\r\n        }\r\n\r\n        if (msg.sender == address(xrmToken)) {\r\n            return stakeXrm(_user, _amount);\r\n        }\r\n\r\n        revert();\r\n    }\r\n\r\n    function stakeKeys(address _user, uint256 _amount) internal returns (uint256)  {\r\n        require(keysToken.balanceOf(_user) >= _amount, \"User balance is less than the requested stake size\");\r\n\r\n        keysAmounts[stakersIndexes[_user]] = keysAmounts[stakersIndexes[_user]].add(_amount);\r\n        keysLockTimes[stakersIndexes[_user]] = now;\r\n\r\n        keysToken.safeTransferFrom(_user, this, _amount);\r\n\r\n        emit Locked(address(keysToken), _user, keysLockTimes[stakersIndexes[_user]]);\r\n\r\n        return keysToken.balanceOf(_user);\r\n    }\r\n\r\n    function stakeXrm(address _user, uint256 _amount) internal returns (uint256)  {\r\n        require(xrmToken.balanceOf(_user) >= _amount, \"User balance is less than the requested stake size\");\r\n\r\n        xrmAmounts[stakersIndexes[_user]] = xrmAmounts[stakersIndexes[_user]].add(_amount);\r\n        xrmLockTimes[stakersIndexes[_user]] = now;\r\n\r\n        xrmToken.safeTransferFrom(_user, this, _amount);\r\n\r\n        emit Locked(address(xrmToken), _user, xrmLockTimes[stakersIndexes[_user]]);\r\n\r\n        return xrmToken.balanceOf(_user);\r\n    }\r\n\r\n    /*\r\n    * Unstake the given amount of tokens from msg.sender\r\n    * @param token Address of token for which we unstake tokens (KEYS or XRM)\r\n    * @param _amount The amount of tokens we unstake\r\n    */\r\n    function unstake(address token, uint _amount) external {\r\n        require(token == address(keysToken) || token == address(xrmToken), \"Invalid token address\");\r\n\r\n        if (token == address(keysToken)) {\r\n            return unstakeKeys(msg.sender, _amount);\r\n        }\r\n\r\n        if (token == address(xrmToken)) {\r\n            return unstakeXrm(msg.sender, _amount);\r\n        }\r\n\r\n        revert();\r\n    }\r\n\r\n    function unstakeKeys(address _user, uint _amount) internal {\r\n        uint256 keysStakedAmount;\r\n        uint256 xrmStakedAmount;\r\n\r\n        (keysStakedAmount, xrmStakedAmount) = stakeOf(_user);\r\n\r\n        require(now >= keysLockTimes[stakersIndexes[msg.sender]].add(lockDuration), \"Stake is locked\");\r\n        require(keysStakedAmount >= _amount, \"User stake size is less than the requested amount\");\r\n\r\n        keysToken.safeTransfer(msg.sender, _amount);\r\n\r\n        keysAmounts[stakersIndexes[msg.sender]] = keysAmounts[stakersIndexes[msg.sender]].sub(_amount);\r\n\r\n        emit Unstaked(address(keysToken), _user, _amount, keysToken.balanceOf(_user));\r\n    }\r\n\r\n    function unstakeXrm(address _user, uint _amount) internal {\r\n        uint256 keysStakedAmount;\r\n        uint256 xrmStakedAmount;\r\n\r\n        (keysStakedAmount, xrmStakedAmount) = stakeOf(_user);\r\n\r\n        require(now >= xrmLockTimes[stakersIndexes[_user]].add(lockDuration), \"Stake is locked\");\r\n        require(xrmStakedAmount >= _amount, \"User stake size is less than the requested amount\");\r\n\r\n        xrmToken.safeTransfer(_user, _amount);\r\n\r\n        xrmAmounts[stakersIndexes[_user]] = xrmAmounts[stakersIndexes[_user]].sub(_amount);\r\n\r\n        emit Unstaked(address(xrmToken), _user, _amount, xrmToken.balanceOf(_user));\r\n    }\r\n\r\n    /*\r\n    * receiveApproval method provide the way to call required stake method after transfer approval in token\r\n    * @params sender the user we need to stake tokens from\r\n    * @params tokensAmount the amount of tokens to stake\r\n    */\r\n    function receiveApproval(address sender, uint256 tokensAmount) external {\r\n        uint256 newBalance = stake(sender, tokensAmount);\r\n\r\n        emit Staked(msg.sender, sender, tokensAmount, newBalance);\r\n    }\r\n\r\n    /*\r\n    * Set new lock duration for staked tokens\r\n    */\r\n    function setLockDuration(uint _periodInSeconds) external onlyOwner {\r\n        lockDuration = _periodInSeconds;\r\n        emit LockDurationChanged(lockDuration);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"lockDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"lockTimeOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"stakeOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"tokensAmount\",\"type\":\"uint256\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_periodInSeconds\",\"type\":\"uint256\"}],\"name\":\"setLockDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"keysToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllStakers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"setDailyDistributedReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setKeysToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setXrmToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dailyDistributedReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"xrmToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_keysToken\",\"type\":\"address\"},{\"name\":\"_xrmToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"endDateTime\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newLockDurationSeconds\",\"type\":\"uint256\"}],\"name\":\"LockDurationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"KeysStakingTokenChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"XrmStakingTokenChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"DailyDistributedRewardChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SignkeysStaking","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004993bc704ab81e5826e7cd5ca71ebf3f66e98505000000000000000000000000a249f0e9a464b9685f66992f41e1012388e39e81","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://bce8f91b9a6354a630d9be8269dc393ed199f21babebc7213ae43b00b0d849b4"}]}