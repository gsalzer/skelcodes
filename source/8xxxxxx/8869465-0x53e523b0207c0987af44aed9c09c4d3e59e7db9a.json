{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract FireCasino {\r\naddress public owner;\r\n// The minimum bet a user has to make to participate in the game\r\nuint256 public minimumBet;\r\n\r\n// The total amount of Ether bet for this current game\r\nuint256 public totalBet;\r\n\r\n// The total number of bets the users have made\r\nuint256 public numberOfBets;\r\n\r\n// The max user of bets that cannot be exceeded to avoid excessive gas consumption\r\n// when distributing the prizes and restarting the game\r\nuint256 public maximumBetsNr = 2;\r\n\r\n// Save player when betting number\r\naddress[] public players;\r\n\r\n// The number that won the last game\r\nuint public numberWinner;\r\n\r\n// Save player info\r\nstruct Player {\r\nuint256 amountBet;\r\nuint256 numberSelected;\r\n}\r\n\r\n// The address of the player and => the user info\r\nmapping(address => Player) public playerInfo;\r\n\r\n// Event watch when player win\r\nevent Won(bool _status, address _address, uint _amount);\r\n\r\nmodifier onlyOwner() {\r\nrequire(msg.sender == owner);\r\n_;\r\n}\r\n\r\nconstructor(uint256 _minimumBet) public payable {\r\nowner = msg.sender;\r\nif (_minimumBet != 0)\r\nminimumBet = _minimumBet;\r\n}\r\n\r\n// fallback\r\nfunction() public payable {}\r\n\r\nfunction kill() public {\r\nif (msg.sender == owner)\r\nselfdestruct(owner);\r\n}\r\n\r\n/// @notice The Bookie can withdraw money from the table\r\n/// @return bool Returns true if withdraw success\r\nfunction withdraw() public onlyOwner returns(bool) {\r\nowner.transfer(address(this).balance);\r\nreturn true;\r\n}\r\n\r\n/// @notice Check if a player exists in the current game\r\n/// @param player The address of the player to check\r\n/// @return bool Returns true is it exists or false if it doesn't\r\nfunction checkPlayerExists(address player) public constant returns(bool) {\r\nfor (uint256 i = 0; i < players.length; i++) {\r\nif (players[i] == player)\r\nreturn true;\r\n}\r\nreturn false;\r\n}\r\n\r\n/// @notice To bet for a number by sending Ether\r\n/// @param numberSelected The number that the player wants to bet for. Must be between 1 and 10 both inclusive\r\nfunction bet(uint256 numberSelected) public payable {\r\n// Check that the player doesn't exists\r\nrequire(!checkPlayerExists(msg.sender));\r\n// Check that the number to bet is within the range\r\nrequire(numberSelected <= 10 && numberSelected >= 1);\r\n// Check that the amount paid is bigger or equal the minimum bet\r\nrequire(msg.value >= minimumBet);\r\n\r\n// Set the number bet for that player\r\nplayerInfo[msg.sender].amountBet = msg.value;\r\nplayerInfo[msg.sender].numberSelected = numberSelected;\r\nnumberOfBets++;\r\nplayers.push(msg.sender);\r\ntotalBet += msg.value;\r\nif (numberOfBets >= maximumBetsNr)\r\ngenerateNumberWinner();\r\n//We need to change this in order to be secure\r\n}\r\n\r\n/// @notice Generates a random number between 1 and 10 both inclusive.\r\n/// Can only be executed when the game ends.\r\nfunction generateNumberWinner() public {\r\nuint256 numberGenerated = block.number % 10 + 1;\r\nnumberWinner = numberGenerated;\r\ndistributePrizes(numberGenerated);\r\n}\r\n\r\n/// @notice Sends the corresponding Ether to each winner then deletes all the\r\n/// players for the next game and resets the `totalBet` and `numberOfBets`\r\nfunction distributePrizes(uint256 numberWin) public {\r\naddress[100] memory winners;\r\naddress[100] memory losers;\r\nuint256 countWin = 0;\r\nuint256 countLose = 0;\r\n\r\nfor (uint256 i = 0; i < players.length; i++) {\r\naddress playerAddress = players[i];\r\nif (playerInfo[playerAddress].numberSelected == numberWin) {\r\nwinners[countWin] = playerAddress;\r\ncountWin++;\r\n} else {\r\nlosers[countLose] = playerAddress;\r\ncountLose++;\r\n}\r\ndelete playerInfo[playerAddress];\r\n}\r\n\r\nif (countWin != 0) {\r\nuint256 winnerEtherAmount = totalBet/countWin;\r\n\r\nfor (uint256 j = 0; j < countWin; j++){\r\nif (winners[j] != address(0)) {\r\nwinners[j].transfer(winnerEtherAmount);\r\nemit Won(true, winners[j], winnerEtherAmount);\r\n}\r\n}\r\n}\r\n\r\nfor (uint256 l = 0; l < losers.length; l++){\r\nif (losers[l] != address(0))\r\nemit Won(false, losers[l], 0);\r\n}\r\n\r\nresetData();\r\n}\r\n\r\n// Restart game\r\nfunction resetData() public {\r\nplayers.length = 0;\r\ntotalBet = 0;\r\nnumberOfBets = 0;\r\n}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"generateNumberWinner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfBets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"checkPlayerExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resetData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerInfo\",\"outputs\":[{\"name\":\"amountBet\",\"type\":\"uint256\"},{\"name\":\"numberSelected\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"numberWin\",\"type\":\"uint256\"}],\"name\":\"distributePrizes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"numberSelected\",\"type\":\"uint256\"}],\"name\":\"bet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumBetsNr\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_minimumBet\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_status\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Won\",\"type\":\"event\"}]","ContractName":"FireCasino","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000005f5e100","Library":"","LicenseType":"None","SwarmSource":"bzzr://a627e63d433570f9cf5cbf93ae0d5b86608ca3b9c16d3685a94bbb9ab89b81c9"}]}