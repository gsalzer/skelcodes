{"status":"1","message":"OK","result":[{"SourceCode":"{\"ERC20Detailed.sol\":{\"content\":\"pragma solidity ^0.5.1;\\r\\n\\r\\n// Palmes token\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ncontract ERC20Detailed is IERC20 {\\r\\n\\r\\n    uint8 private _Tokendecimals; \\r\\n    string private _Tokenname; \\r\\n    string private _Tokensymbol;\\r\\n\\r\\nconstructor(string memory name, string memory symbol, uint8 decimals) public {\\r\\n\\r\\n   _Tokendecimals = decimals; \\r\\n   _Tokenname = name; \\r\\n   _Tokensymbol = symbol;\\r\\n  \\r\\n   }\\r\\n\\r\\n   function name() public view returns(string memory) { return _Tokenname; }\\r\\n\\r\\n   function symbol() public view returns(string memory) { return _Tokensymbol; }\\r\\n\\r\\n   function decimals() public view returns(uint8) { return _Tokendecimals; } \\r\\n    \\r\\n}\\r\\n\\r\\n\"},\"IERC20.sol\":{\"content\":\"pragma solidity ^0.5.1;\\r\\n\\r\\n/**\\r\\n * Palmes token\\r\\n  */\\r\\ninterface IERC20 {\\r\\n    \\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address who) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"},\"Owned.sol\":{\"content\":\"pragma solidity ^0.5.1;\\r\\n\\r\\n//Palmes token\\r\\n\\r\\ncontract Owned {\\r\\n    address public owner;\\r\\n    address public newOwner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed _from, address indexed _to);\\r\\n\\r\\n    constructor() public {\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner {\\r\\n        require(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address _newOwner) public onlyOwner {\\r\\n        newOwner = _newOwner;\\r\\n    }\\r\\n    function acceptOwnership() public {\\r\\n        require(msg.sender == newOwner);\\r\\n        emit OwnershipTransferred(owner, newOwner);\\r\\n        owner = newOwner;\\r\\n        newOwner = address(0);\\r\\n    }\\r\\n}\"},\"Palmes.sol\":{\"content\":\"pragma solidity ^0.5.1;\\r\\n\\r\\n//Palmes token\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./Owned.sol\\\";\\r\\nimport \\\"./ERC20Detailed.sol\\\";\\r\\n\\r\\ncontract Palmes is ERC20Detailed { \\r\\n    \\r\\n    using SafeMath for uint256; \\r\\n    string constant tokenName = \\\"Palmes\\\"; \\r\\n    string constant tokenSymbol = \\\"PLM\\\"; \\r\\n    uint8 constant tokenDecimals = 6; \\r\\n    uint256 _totalSuplly= _initialSupply;\\r\\n    uint256 _initialSupply = 100000000000;\\r\\n    \\r\\n    \\r\\n     mapping (address =\\u003e uint256) private _PalmesTokenBalances; \\r\\n     mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowed;\\r\\n//\\r\\n  constructor() public payable ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) { _mint(msg.sender, _initialSupply); }\\r\\n           \\r\\n            function totalSupply() public view returns (uint256) { return _initialSupply; }\\r\\n\\r\\n            function balanceOf(address owner) public view returns (uint256) { return _PalmesTokenBalances[owner]; }\\r\\n\\r\\n            function allowance(address owner, address spender) public view returns (uint256) { return _allowed[owner][spender]; }\\r\\n\\r\\n            function transfer(address to, uint256 value) public returns (bool) { require(value \\u003c= _PalmesTokenBalances[msg.sender]); require(to != address(0));\\r\\n  \\r\\n\\r\\n   uint256 PalmesIncrease = value.div(1000000);\\r\\n   uint256 tokensToTransfer = value.add(0);\\r\\n   \\r\\n   \\r\\n   _PalmesTokenBalances[msg.sender] = _PalmesTokenBalances[msg.sender].sub(value);\\r\\n   _PalmesTokenBalances[msg.sender] = _PalmesTokenBalances[msg.sender].add(value.div(1000000));\\r\\n   _PalmesTokenBalances[to] = _PalmesTokenBalances[to].add(tokensToTransfer);\\r\\n  \\r\\n   _totalSuplly = _initialSupply.add(PalmesIncrease);\\r\\n\\r\\n   emit Transfer(msg.sender, to, tokensToTransfer);\\r\\n   emit Transfer(address(0), address(msg.sender), PalmesIncrease);\\r\\n\\r\\n   return true;\\r\\n   }\\r\\n\\r\\n   function multiTransfer(address[] memory receivers, uint256[] memory amounts) public { for (uint256 i = 0; i \\u003c receivers.length; i++) { transfer(receivers[i], amounts[i]); } }\\r\\n\\r\\n   function approve(address spender, uint256 value) public returns (bool) { require(spender != address(0)); \\r\\n   _allowed[msg.sender][spender] = value; \\r\\n   emit Approval(msg.sender, spender, value); \\r\\n   return true; }\\r\\n\\r\\n   function transferFrom(address from, address to, uint256 value) public returns (bool) { require(value \\u003c= _PalmesTokenBalances[from]); \\r\\n   require(value \\u003c= _allowed[from][msg.sender]); \\r\\n   require(to != address(0));\\r\\n\\r\\n_PalmesTokenBalances[from] = _PalmesTokenBalances[from].sub(value);\\r\\n\\r\\n   uint256 PalmesIncrease = value.div(1000000);\\r\\n   uint256 tokensToTransfer = value.add(0);\\r\\n\\r\\n_PalmesTokenBalances[to] = _PalmesTokenBalances[to].add(tokensToTransfer);\\r\\n_initialSupply = _initialSupply.add(PalmesIncrease);\\r\\n\\r\\n_allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\\r\\n_allowed[from][msg.sender] = _allowed[from][msg.sender].add(value.div(1000000));\\r\\n\\r\\nemit Transfer(from, to, tokensToTransfer);\\r\\nemit Transfer(address(0), address(msg.sender), PalmesIncrease);\\r\\n\\r\\nreturn true;\\r\\n}\\r\\n\\r\\nfunction increaseAllowance(address spender, uint256 addedValue) public returns (bool) { require(spender != address(0)); \\r\\n_allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue)); \\r\\nemit Approval(msg.sender, spender, _allowed[msg.sender][spender]); return true; }\\r\\n\\r\\nfunction decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) { require(spender != address(0)); \\r\\n_allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue)); \\r\\nemit Approval(msg.sender, spender, _allowed[msg.sender][spender]); return true; }\\r\\n\\r\\nfunction _mint(address account, uint256 amount) internal { require(amount != 0); \\r\\n_PalmesTokenBalances[account] = _PalmesTokenBalances[account].add(amount); emit Transfer(address(0), account, amount); }\\r\\n\\r\\nfunction create(uint256 amount) external { _create(msg.sender, amount); }\\r\\n\\r\\nfunction _create(address account, uint256 amount) internal { require(amount != 0); \\r\\nrequire(amount \\u003c= _PalmesTokenBalances[account]);\\r\\n_totalSuplly = _initialSupply.add(amount); \\r\\n_PalmesTokenBalances[account] = _PalmesTokenBalances[account].add(amount); \\r\\nemit Transfer(account, address(0), amount); }\\r\\n\\r\\nfunction createFrom(address account, uint256 amount) external { require(amount \\u003c= _allowed[account][msg.sender]); \\r\\n_allowed[account][msg.sender] = _allowed[account][msg.sender].add(amount); \\r\\n_create(account, amount); } }\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.1;\\r\\n\\r\\n// Palmes token\\r\\n\\r\\nlibrary SafeMath {\\r\\n    \\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        \\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b);\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n       \\r\\n        require(b \\u003e 0);\\r\\n        uint256 c = a / b;\\r\\n        \\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a);\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b != 0);\\r\\n        return a % b;\\r\\n    }\\r\\n    function ceil(uint256 a, uint256 m) internal pure returns (uint256) { \\r\\n        uint256 c = add(a,m); \\r\\n        uint256 d = sub(c,1); \\r\\n        return mul(div(d,m),m); }\\r\\n}\"}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receivers\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"createFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Palmes","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e48654a2f1840fcc0cffa5c126ebf65c5dc2bd93a253fef6e326150ec1d265dd"}]}