{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2019-08-14\r\n*/\r\n\r\npragma solidity ^0.4.26;\r\n    \r\n    library SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n  \r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n \r\n        return c;\r\n    }\r\n \r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n \r\n        return c;\r\n    }\r\n \r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n \r\n        return c;\r\n    }\r\n \r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n \r\n        return c;\r\n    }\r\n \r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n \r\n    contract token {\r\n       \r\n     \r\n            string public name;\r\n            string public symbol;\r\n            uint256 public decimals = 8;  \r\n            uint256 public _totalSupply; \r\n            uint256 public startTime=1565928000;\r\n \r\n        function totalSupply() constant returns (uint256 supply) {\r\n            return _totalSupply;\r\n        }\r\n \r\n        function changeStartTime(uint256 _startTime) returns (bool success) {\r\n            require(msg.sender==founder);\r\n            startTime=_startTime;\r\n            return true;\r\n        }\r\n \r\n        function approve(address _spender, uint256 _value) returns (bool success) {\r\n            allowed[msg.sender][_spender] = _value;\r\n            Approval(msg.sender, _spender, _value);\r\n            return true;\r\n        }\r\n        \r\n \r\n        function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n          return allowed[_owner][_spender];\r\n        }\r\n \r\n        mapping(address => uint256) public  balanceOf;         \r\n        mapping(address => uint256) public distBalances;\r\n        \r\n        mapping(address => bool) public distTeam;\r\n        \r\n           \r\n        mapping(address => bool) public lockAddrs;           \r\n        mapping(address => mapping (address => uint256)) allowed;\r\n \r\n \r\n        address public founder;\r\n        uint256 public distributed = 0;\r\n \r\n        event AllocateFounderTokens(address indexed sender);\r\n        event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n        event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n      \r\n \r\n    function token(uint256 initialSupply, string tokenName, string tokenSymbol) public {\r\n        founder = msg.sender;\r\n        _totalSupply = initialSupply * 10 ** uint256(decimals); \r\n        name = tokenName;\r\n        symbol = tokenSymbol;\r\n        balanceOf[msg.sender]=_totalSupply;\r\n    }\r\n \r\n\r\n        \r\n     \r\n        function lockAddr(address user) returns (bool success) {\r\n            if (msg.sender != founder) revert();\r\n            lockAddrs[user]=true;\r\n            return true;\r\n        }\r\n        \r\n      \r\n        function unLockAddr(address user) returns (bool success) {\r\n            if (msg.sender != founder) revert();\r\n            lockAddrs[user]=false;\r\n            return true;\r\n        }\r\n \r\n\r\n        function distribute(uint256 _amount, address[] _to,bool isteam) {\r\n            if (msg.sender!=founder) revert();\r\n            if (SafeMath.add(distributed,SafeMath.mul(_to.length,_amount)) > _totalSupply) revert();\r\n            \r\n            for(uint j=0;j<_to.length;j++){\r\n                if(distBalances[_to[j]]>0) revert();\r\n            }\r\n            \r\n            for(uint i=0;i<_to.length;i++){\r\n                distributed= SafeMath.add(distributed, _amount);\r\n                distBalances[_to[i]] =SafeMath.add(distBalances[_to[i]], _amount);\r\n                if(isteam){\r\n                    distTeam[_to[i]]=true;\r\n                }\r\n                transfer(_to[i],_amount);\r\n             }\r\n           \r\n        }\r\n        \r\n        function transfer(address _to, uint256 _value) public {\r\n \r\n            require(lockAddrs[msg.sender]==false);\r\n            require(balanceOf[msg.sender] >= _value);\r\n            require(SafeMath.add(balanceOf[_to],_value) > balanceOf[_to]);\r\n          \r\n            uint _freeAmount = freeAmount(msg.sender);\r\n            require (_freeAmount > _value);\r\n\r\n            balanceOf[msg.sender]=SafeMath.sub(balanceOf[msg.sender], _value);\r\n            balanceOf[_to]=SafeMath.add(balanceOf[_to], _value);\r\n            Transfer(msg.sender, _to, _value);\r\n        }\r\n        \r\n    \r\n       \r\n        function freeAmount(address user) constant  returns (uint256 amount) {\r\n          \r\n            if (user == founder) {\r\n                return balanceOf[user];\r\n            }\r\n            uint monthDiff;\r\n            bool isteam;\r\n            if(distTeam[user]){\r\n                isteam=true;\r\n            }\r\n            if(startTime<now){\r\n               if(isteam){\r\n                     monthDiff= (now-startTime) / 90 days;\r\n                    if(monthDiff==0){\r\n                        return  balanceOf[user]-distBalances[user];\r\n                    }else if(monthDiff>0 && monthDiff<12){\r\n                        return  distBalances[user]/12*monthDiff+balanceOf[user]-distBalances[user];\r\n                    }else{\r\n                        return distBalances[user]+balanceOf[user]-distBalances[user];\r\n                    }\r\n               }else{\r\n                    uint256 direct=distBalances[user]/10;\r\n                     monthDiff= (now-startTime) /30 days;\r\n                    if(monthDiff==0){\r\n                        return  direct+balanceOf[user]-distBalances[user];\r\n                    }else if(monthDiff>0 && monthDiff<4){\r\n                        return  direct+(distBalances[user]-direct)/4*monthDiff+balanceOf[user]-distBalances[user];\r\n                    }else{\r\n                        return distBalances[user]+balanceOf[user]-distBalances[user];\r\n                    }\r\n               }\r\n            }else{\r\n                return balanceOf[user]-distBalances[user];\r\n            }\r\n        }\r\n \r\n        \r\n       function unLockAmount(address user) constant returns (uint256 amount) {\r\n \r\n            uint monthDiff;\r\n            bool isteam;\r\n            if(distTeam[user]){\r\n                isteam=true;\r\n            }\r\n            if(startTime<now){\r\n                if(isteam){\r\n                        monthDiff= (now-startTime) / 90 days;\r\n                        if(monthDiff==0){\r\n                            return  0;\r\n                        }else if(monthDiff>0 && monthDiff<12){\r\n                            return  distBalances[user]/12*monthDiff;\r\n                        }else{\r\n                            return distBalances[user];\r\n                        }\r\n                }else{\r\n                        uint256 direct=distBalances[user]/10;\r\n                        monthDiff= (now-startTime)/30 days;\r\n                        if(monthDiff==0){\r\n                            return  direct;\r\n                        }else if(monthDiff>0 && monthDiff<4){\r\n                            return  direct+(distBalances[user]-direct)/4*monthDiff;\r\n                        }else{\r\n                            return distBalances[user];\r\n                        }\r\n                }\r\n            }else{\r\n                return 0;\r\n            }\r\n        }\r\n \r\n\r\n        function changeFounder(address newFounder) {\r\n            if (msg.sender!=founder) revert();\r\n            founder = newFounder; \r\n        }\r\n \r\n   \r\n        function transferFrom(address _from, address _to, uint256 _value) {\r\n         \r\n            require(lockAddrs[_from]==false);\r\n            require(balanceOf[_from] >= _value);\r\n            require(allowed[_from][msg.sender] >= _value);\r\n            require(balanceOf[_to] + _value > balanceOf[_to]);\r\n          \r\n            uint _freeAmount = freeAmount(_from);\r\n            require (_freeAmount > _value);\r\n            \r\n            balanceOf[_to]=SafeMath.add(balanceOf[_to],_value);\r\n            balanceOf[_from]=SafeMath.sub(balanceOf[_from],_value);\r\n            allowed[_from][msg.sender]=SafeMath.sub(allowed[_from][msg.sender], _value);\r\n            Transfer(_from, _to, _value);\r\n\r\n        }\r\n \r\n        function() payable {\r\n            if (!founder.call.value(msg.value)()) revert(); \r\n        }\r\n    }","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"unLockAddr\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"freeAmount\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockAddrs\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"changeStartTime\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFounder\",\"type\":\"address\"}],\"name\":\"changeFounder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"unLockAmount\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"isteam\",\"type\":\"bool\"}],\"name\":\"distribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"distBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"distTeam\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"lockAddr\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AllocateFounderTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"token","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000114469676974616c2046756e6420436f696e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034446500000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://3e70ace33cd8d0a38bb78e67792b9e9dac45e13e71e6bab631090ea9e43bcf9a"}]}