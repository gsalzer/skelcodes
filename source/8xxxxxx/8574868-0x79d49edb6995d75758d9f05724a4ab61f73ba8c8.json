{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\n\n\ncontract PalmTree {\n  uint8 constant ENGAGEMENT_TYPE_REPOST = 1;\n  uint8 constant SOCIAL_MEDIA_SOURCE_TWITTER = 1;\n\n\n  struct Pledge {\n    uint128 id;\n    address recipient;\n    address supporter;\n    uint8 socialMediaSource;\n    uint64 socialMediaContentId;\n    uint8 engagementType;\n    uint engagementRewardRate;\n    uint engagementGoal;\n    uint32 engagementDeadline; \n    uint engagementStart; \n    uint32 engagements;\n    uint finalized; \n  }\n\n\n  address public admin; \n  uint16 public adminCommission = 0; \n  uint public unclaimedRewards;\n  uint public unclaimedFees;\n  mapping (uint => Pledge) public pledges;\n\n\n  modifier onlyAdmin() {\n    require(admin == msg.sender);\n    _;\n  }\n\n\n  constructor() public {\n    admin = msg.sender;\n  }\n\n\n  function getAdmin() public view returns (address) {\n    return admin;\n  }\n\n  function setAdminCommission(uint16 rate) public onlyAdmin {\n    adminCommission = rate;\n  }\n\n\n  function getPledge (uint128 id) public view returns (\n    address recipient\n    , address supporter\n    , uint8 socialMediaSource\n    , uint64 socialMediaContentId\n    , uint8 engagementType\n    , uint engagementRewardRate\n    , uint engagementGoal\n    , uint32 engagementDeadline\n    , uint engagementStart\n    , uint64 engagements\n    , uint finalized\n    ) {\n    Pledge storage p = pledges[id];\n    return (\n      p.recipient\n      , p.supporter\n      , p.socialMediaSource\n      , p.socialMediaContentId\n      , p.engagementType\n      , p.engagementRewardRate\n      , p.engagementGoal\n      , p.engagementDeadline\n      , p.engagementStart\n      , p.engagements\n      , p.finalized\n    );\n  }\n\n\n  function startPledge (\n    uint128 id\n    , address recipient\n    , uint8 socialMediaSource\n    , uint64 socialMediaContentId\n    , uint8 engagementType\n    , uint engagementRewardRate\n    , uint32 engagementDeadline) public payable {\n    require (id != uint(0));\n\n    Pledge storage p = pledges[id];\n    require(p.id == uint128(0));\n    require(recipient != address(0));\n    require(recipient != msg.sender);\n    require(socialMediaSource != uint8(0));\n    require(socialMediaContentId != uint64(0));\n    require(engagementType != uint8(0));\n    require(engagementRewardRate > uint(0));\n    require(engagementDeadline > uint32(0));\n    require(msg.value > uint(0));\n\n    p.id = id;\n    p.recipient = recipient;\n    p.supporter = msg.sender;\n    p.socialMediaSource = socialMediaSource;\n    p.socialMediaContentId = socialMediaContentId;\n    p.engagementType = engagementType;\n    p.engagementRewardRate = engagementRewardRate;\n    p.engagementGoal = msg.value;\n    p.engagementDeadline = engagementDeadline;\n    p.engagementStart = now;\n\n    unclaimedRewards += msg.value;\n\n  }\n\n\n  function getPledgeEndDate (uint128 id) public view returns (uint result) {\n    Pledge storage p = pledges[id];\n    require(p.id == id);\n    require(p.engagementStart > uint(0));\n    return p.engagementStart + p.engagementDeadline;\n  }\n\n\n  function finalizePledge (uint128 id, uint32 engagements) public onlyAdmin {\n    Pledge storage p = pledges[id];\n    require(p.id == id);\n    require(p.engagementStart > uint(0));\n    require(p.finalized == uint(0));\n\n    p.engagements = engagements;\n    p.finalized = now;\n\n    uint reward;\n    uint remainder;\n    uint fees;\n    (reward, remainder, fees) = calculateEngagementResults(p);\n\n    unclaimedRewards -= (fees + reward + remainder);\n    unclaimedFees += fees;\n\n    if(reward > 0) {\n      address payable recipient  = address(int160(p.recipient));\n      recipient.transfer(reward);\n    }\n\n    if(remainder > 0) {\n      address payable supporter  = address(int160(p.supporter));\n      supporter.transfer(remainder);\n    }\n  }\n\n\n  function withdrawFees () public onlyAdmin {\n    if(unclaimedFees > 0){\n      uint fees = unclaimedFees;\n      unclaimedFees = 0;\n      address(uint160(admin)).transfer(fees);\n    }\n  }\n\n\n  function calculateEngagementResults (uint128 id) public view \n    returns (uint reward, uint remainder, uint fees){\n    Pledge storage p = pledges[id];\n    require(p.id == id);\n    return calculateEngagementResults(p);\n  }\n\n\n  function calculateEngagementResults (Pledge memory p) private view \n    returns (uint reward, uint remainder, uint fees){\n    if (p.finalized > uint(0)) {\n      fees = (adminCommission * p.engagementGoal) / 10000;\n      reward = p.engagementRewardRate * p.engagements;\n      reward = reward < p.engagementGoal ? reward : p.engagementGoal;\n      remainder = p.engagementGoal - reward;\n\n      uint feeOverflow;\n      if (remainder < fees){\n        feeOverflow = fees - remainder;\n      }\n\n      reward -= feeOverflow;\n      remainder -= fees - feeOverflow;\n\n      assert(reward >= 0);\n      assert(remainder >= 0);\n      assert(fees >= 0);\n      assert((reward + remainder + fees) == p.engagementGoal);\n      return (reward, remainder, fees);\n\n    }else{\n      return (uint(0), uint(0), uint(0));\n    }\n  }\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint128\"},{\"name\":\"engagements\",\"type\":\"uint32\"}],\"name\":\"finalizePledge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint128\"}],\"name\":\"getPledgeEndDate\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint128\"}],\"name\":\"calculateEngagementResults\",\"outputs\":[{\"name\":\"reward\",\"type\":\"uint256\"},{\"name\":\"remainder\",\"type\":\"uint256\"},{\"name\":\"fees\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rate\",\"type\":\"uint16\"}],\"name\":\"setAdminCommission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint128\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"socialMediaSource\",\"type\":\"uint8\"},{\"name\":\"socialMediaContentId\",\"type\":\"uint64\"},{\"name\":\"engagementType\",\"type\":\"uint8\"},{\"name\":\"engagementRewardRate\",\"type\":\"uint256\"},{\"name\":\"engagementDeadline\",\"type\":\"uint32\"}],\"name\":\"startPledge\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unclaimedFees\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint128\"}],\"name\":\"getPledge\",\"outputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"supporter\",\"type\":\"address\"},{\"name\":\"socialMediaSource\",\"type\":\"uint8\"},{\"name\":\"socialMediaContentId\",\"type\":\"uint64\"},{\"name\":\"engagementType\",\"type\":\"uint8\"},{\"name\":\"engagementRewardRate\",\"type\":\"uint256\"},{\"name\":\"engagementGoal\",\"type\":\"uint256\"},{\"name\":\"engagementDeadline\",\"type\":\"uint32\"},{\"name\":\"engagementStart\",\"type\":\"uint256\"},{\"name\":\"engagements\",\"type\":\"uint64\"},{\"name\":\"finalized\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pledges\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint128\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"supporter\",\"type\":\"address\"},{\"name\":\"socialMediaSource\",\"type\":\"uint8\"},{\"name\":\"socialMediaContentId\",\"type\":\"uint64\"},{\"name\":\"engagementType\",\"type\":\"uint8\"},{\"name\":\"engagementRewardRate\",\"type\":\"uint256\"},{\"name\":\"engagementGoal\",\"type\":\"uint256\"},{\"name\":\"engagementDeadline\",\"type\":\"uint32\"},{\"name\":\"engagementStart\",\"type\":\"uint256\"},{\"name\":\"engagements\",\"type\":\"uint32\"},{\"name\":\"finalized\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminCommission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unclaimedRewards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"PalmTree","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"","SwarmSource":"bzzr://d26d3128f50e4c90f998b45314bd1706607a4a6d313e34845b237a829dbda46c"}]}