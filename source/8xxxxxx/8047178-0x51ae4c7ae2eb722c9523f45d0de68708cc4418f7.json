{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.2;\n\n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n    bool wasInitializing = initializing;\n    initializing = true;\n    initialized = true;\n\n    _;\n\n    initializing = wasInitializing;\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    uint256 cs;\n    assembly { cs := extcodesize(address) }\n    return cs == 0;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n\n/**\n * Copyright (c) 2018-present, Leap DAO (leapdao.org)\n *\n * This source code is licensed under the Mozilla Public License, version 2,\n * found in the LICENSE file in the root directory of this source tree.\n */\n\n\n\n\n\n/**\n * @title Adminable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Adminable is Initializable {\n\n  /**\n   * @dev Storage slot with the admin of the contract.\n   * This is the keccak-256 hash of \"org.zeppelinos.proxy.admin\", and is\n   * validated in the constructor.\n   */\n  bytes32 private constant ADMIN_SLOT = 0x10d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b;\n\n  /**\n   * @dev Modifier to check whether the `msg.sender` is the admin.\n   * If it is, it will run the function. Otherwise, fails.\n   */\n  modifier ifAdmin() {\n    require(msg.sender == _admin());\n    _;\n  }\n\n  function admin() external view returns (address) {\n    return _admin();\n  }\n\n    /**\n   * @return The admin slot.\n   */\n  function _admin() internal view returns (address adm) {\n    bytes32 slot = ADMIN_SLOT;\n    assembly {\n      adm := sload(slot)\n    }\n  }\n}\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n/**\n * Copyright (c) 2018-present, Leap DAO (leapdao.org)\n *\n * This source code is licensed under the Mozilla Public License, version 2,\n * found in the LICENSE file in the root directory of this source tree.\n */\n\n\n\n\n\n\ncontract Bridge is Adminable {\n  using SafeMath for uint256;\n\n  modifier onlyOperator() {\n    require(msg.sender == operator, \"Tried to call a only-operator function from non-operator\");\n    _;\n  }\n\n  event NewHeight(uint256 height, bytes32 indexed root);\n  event NewOperator(address operator);\n\n  struct Period {\n    uint32 height;            // the height of last block in period\n    uint32 timestamp;         // the block.timestamp at submission of period\n    uint32 parentBlockNumber; // the block.number at submission of period\n    bytes32 parentBlockHash;  // the blockhash(block.number -1) at submission of period\n  }\n\n  bytes32 constant GENESIS = 0x4920616d207665727920616e6772792c20627574206974207761732066756e21;\n\n  bytes32 public tipHash; // hash of first period that has extended chain to some height\n  uint256 public genesisBlockNumber;\n  uint256 parentBlockInterval; // how often epochs can be submitted max\n  uint256 public lastParentBlock; // last ethereum block when epoch was submitted\n  address public operator; // the operator contract\n\n  mapping(bytes32 => Period) public periods;\n\n  function initialize(uint256 _parentBlockInterval) public initializer {\n    // init genesis preiod\n    Period memory genesisPeriod = Period({\n      height: 1,\n      timestamp: uint32(block.timestamp),\n      parentBlockNumber: uint32(block.number),\n      parentBlockHash: blockhash(block.number-1)\n    });\n    tipHash = GENESIS;\n    periods[GENESIS] = genesisPeriod;\n    genesisBlockNumber = block.number;\n    parentBlockInterval = _parentBlockInterval;\n    operator = msg.sender;\n  }\n\n  function setOperator(address _operator) public ifAdmin {\n    operator = _operator;\n    emit NewOperator(_operator);\n  }\n\n  function getParentBlockInterval() public view returns (uint256) {\n    return parentBlockInterval;\n  }\n\n  function setParentBlockInterval(uint256 _parentBlockInterval) public ifAdmin {\n    parentBlockInterval = _parentBlockInterval;\n  }\n\n  function submitPeriod(\n    bytes32 _prevHash,\n    bytes32 _root)\n  public onlyOperator returns (uint256 newHeight) {\n\n    require(periods[_prevHash].timestamp > 0, \"Parent node should exist\");\n    require(periods[_root].timestamp == 0, \"Trying to submit the same root twice\");\n\n    // calculate height\n    newHeight = periods[_prevHash].height + 1;\n    // do some magic if chain extended\n    if (newHeight > periods[tipHash].height) {\n      // new periods can only be submitted every x Ethereum blocks\n      require(\n        block.number >= lastParentBlock + parentBlockInterval,\n        \"Tried to submit new period too soon\"\n      );\n      tipHash = _root;\n      lastParentBlock = block.number;\n    }\n    // strictly speaking this event should be called \"New Period\"\n    // but we don't want to break interfaces for now.\n    emit NewHeight(newHeight, _root);\n    // store the period\n    Period memory newPeriod = Period({\n      height: uint32(newHeight),\n      timestamp: uint32(block.timestamp),\n      parentBlockNumber: uint32(block.number),\n      parentBlockHash: blockhash(block.number-1)\n    });\n    periods[_root] = newPeriod;\n  }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n    * @dev Transfer token for a specified addresses\n    * @param from The address to transfer from.\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n        _burn(account, value);\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\n    }\n}\n\n/**\n * @title IERC165\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n */\ninterface IERC165 {\n    /**\n     * @notice Query if a contract implements an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @dev Interface identification is specified in ERC-165. This function\n     * uses less than 30,000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n/**\n * @title ERC165\n * @author Matt Condon (@shrugs)\n * @dev Implements ERC165 using a lookup table.\n */\ncontract ERC165 is IERC165 {\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n    /**\n     * 0x01ffc9a7 ===\n     *     bytes4(keccak256('supportsInterface(bytes4)'))\n     */\n\n    /**\n     * @dev a mapping of interface id to whether or not it's supported\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    /**\n     * @dev A contract implementing SupportsInterfaceWithLookup\n     * implement ERC165 itself\n     */\n    constructor () internal {\n        _registerInterface(_INTERFACE_ID_ERC165);\n    }\n\n    /**\n     * @dev implement supportsInterface(bytes4) using a lookup table\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev internal method for registering an interface\n     */\n    function _registerInterface(bytes4 interfaceId) internal {\n        require(interfaceId != 0xffffffff);\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n\n/**\n * Copyright (c) 2018-present, Leap DAO (leapdao.org)\n *\n * This source code is licensed under the Mozilla Public License, version 2,\n * found in the LICENSE file in the root directory of this source tree.\n */\n\n\n\n\n\n\ncontract TransferrableToken is ERC165 {\n  function transferFrom(address _from, address _to, uint256 _valueOrTokenId) public;\n  function approve(address _to, uint256 _value) public;\n}\n\n/**\n * Copyright (c) 2018-present, Leap DAO (leapdao.org)\n *\n * This source code is licensed under the Mozilla Public License, version 2,\n * found in the LICENSE file in the root directory of this source tree.\n */\n\n\n\n\n\n\n\n/**\n * @title PriorityQueue\n * @dev A priority queue implementation\n */\n\nlibrary PriorityQueue {\n  using SafeMath for uint256;\n\n  struct Token {\n    TransferrableToken addr;\n    uint256[] heapList;\n    uint256 currentSize;\n  }\n\n  function insert(Token storage self, uint256 k) internal {\n    self.heapList.push(k);\n    self.currentSize = self.currentSize.add(1);\n    percUp(self, self.currentSize);\n  }\n\n  function minChild(Token storage self, uint256 i) internal view returns (uint256) {\n    if (i.mul(2).add(1) > self.currentSize) {\n      return i.mul(2);\n    } else {\n      if (self.heapList[i.mul(2)] < self.heapList[i.mul(2).add(1)]) {\n        return i.mul(2);\n      } else {\n        return i.mul(2).add(1);\n      }\n    }\n  }\n\n  function getMin(Token storage self) internal view returns (uint256) {\n    return self.heapList[1];\n  }\n\n  function delMin(Token storage self) internal returns (uint256) {\n    uint256 retVal = self.heapList[1];\n    self.heapList[1] = self.heapList[self.currentSize];\n    delete self.heapList[self.currentSize];\n    self.currentSize = self.currentSize.sub(1);\n    percDown(self, 1);\n    self.heapList.length = self.heapList.length.sub(1);\n    return retVal;\n  }\n\n  // solium-disable-next-line security/no-assign-params\n  function percUp(Token storage self, uint256 i) private {\n    uint256 j = i;\n    uint256 newVal = self.heapList[i];\n    while (newVal < self.heapList[i.div(2)]) {\n      self.heapList[i] = self.heapList[i.div(2)];\n      i = i.div(2);\n    }\n    if (i != j) self.heapList[i] = newVal;\n  }\n\n  // solium-disable-next-line security/no-assign-params\n  function percDown(Token storage self, uint256 i) private {\n    uint256 j = i;\n    uint256 newVal = self.heapList[i];\n    uint256 mc = minChild(self, i);\n    while (mc <= self.currentSize && newVal > self.heapList[mc]) {\n      self.heapList[i] = self.heapList[mc];\n      i = mc;\n      mc = minChild(self, i);\n    }\n    if (i != j) self.heapList[i] = newVal;\n  }\n\n}\n\n/**\n * Copyright (c) 2018-present, Leap DAO (leapdao.org)\n *\n * This source code is licensed under the Mozilla Public License, version 2,\n * found in the LICENSE file in the root directory of this source tree.\n */\n\n\n/**\n * @dev Interface of the ERC1948 contract.\n */\ninterface IERC1948 {\n\n  /**\n   * @dev Emitted when `oldData` is replaced with `newData` in storage of `tokenId`.\n   *\n   * Note that `oldData` or `newData` may be empty bytes.\n   */\n  event DataUpdated(uint256 indexed tokenId, bytes32 oldData, bytes32 newData);\n\n  /**\n   * @dev Reads the data of a specified token. Returns the current data in\n   * storage of `tokenId`.\n   *\n   * @param tokenId The token to read the data off.\n   *\n   * @return A bytes32 representing the current data stored in the token.\n   */\n  function readData(uint256 tokenId) external view returns (bytes32);\n\n  /**\n   * @dev Updates the data of a specified token. Writes `newData` into storage\n   * of `tokenId`.\n   *\n   * @param tokenId The token to write data to.\n   * @param newData The data to be written to the token.\n   *\n   * Emits a `DataUpdated` event.\n   */\n  function writeData(uint256 tokenId, bytes32 newData) external;\n\n}\n\n/**\n * Copyright (c) 2018-present, Leap DAO (leapdao.org)\n *\n * This source code is licensed under the Mozilla Public License, version 2,\n * found in the LICENSE file in the root directory of this source tree.\n */\n\n\n\n\n\n\n\n\n\ncontract Vault is Adminable {\n  using PriorityQueue for PriorityQueue.Token;\n\n  // 2**15 + 1\n  uint16 constant NFT_FIRST_COLOR = 32769;\n  // 2**15 + 2**14 + 1\n  uint16 constant NST_FIRST_COLOR = 49153;\n\n  event NewToken(address indexed tokenAddr, uint16 color);\n\n  Bridge public bridge;\n\n  uint16 public erc20TokenCount;\n  uint16 public nftTokenCount;\n  uint16 public nstTokenCount;\n\n  mapping(uint16 => PriorityQueue.Token) public tokens;\n  mapping(address => bool) public tokenColors;\n\n  function initialize(Bridge _bridge) public initializer {\n    bridge = _bridge;\n  } \n\n  function getTokenAddr(uint16 _color) public view returns (address) {\n    return address(tokens[_color].addr);\n  }\n\n  function registerToken(address _token, bool _isERC721) public ifAdmin {\n    // make sure token is not 0x0 and that it has not been registered yet\n    require(_token != address(0), \"Tried to register 0x0 address\");\n    require(!tokenColors[_token], \"Token already registered\");\n    uint16 color;\n    if (_isERC721) {\n      // max nft count without being an NST is 16384\n      // color must be < 49153\n      require(nftTokenCount < 0x4000);\n      require(TransferrableToken(_token).supportsInterface(0x80ac58cd) == true, \"Not an ERC721 token\");\n      color = NFT_FIRST_COLOR + nftTokenCount; // NFT color namespace starts from 2^15 + 1\n      nftTokenCount += 1;\n    } else {\n      require(ERC20(_token).totalSupply() >= 0, \"Not an ERC20 token\");\n      color = erc20TokenCount;\n      erc20TokenCount += 1;\n    }\n    uint256[] memory arr = new uint256[](1);\n    tokenColors[_token] = true;\n    tokens[color] = PriorityQueue.Token({\n      addr: TransferrableToken(_token),\n      heapList: arr,\n      currentSize: 0\n    });\n    emit NewToken(_token, color);\n  }\n\n  function registerNST(address _token) public ifAdmin {\n    // make sure token is not 0x0 and that it has not been registered yet\n    require(_token != address(0), \"Tried to register 0x0 address\");\n    require(!tokenColors[_token], \"Token already registered\");\n    require(nstTokenCount < 0x3ffe);\n    require(TransferrableToken(_token).supportsInterface(0x80ac58cd) == true, \"Not an ERC721 token\");\n\n    uint16 color = NST_FIRST_COLOR + nstTokenCount; // NST color namespace starts from 2^15 + 2^14 + 1\n    nstTokenCount += 1;\n\n    uint256[] memory arr = new uint256[](1);\n    tokenColors[_token] = true;\n    tokens[color] = PriorityQueue.Token({\n      addr: TransferrableToken(_token),\n      heapList: arr,\n      currentSize: 0\n    });\n    emit NewToken(_token, color);\n  }\n  // solium-disable-next-line mixedcase\n  uint256[49] private ______gap;\n\n}\n\n/**\n * Copyright (c) 2018-present, Leap DAO (leapdao.org)\n *\n * This source code is licensed under the Mozilla Public License, version 2,\n * found in the LICENSE file in the root directory of this source tree.\n */\n\n\n\n\n\n\n\ncontract PoaOperator is Adminable {\n\n  event Epoch(uint256 epoch);\n  event EpochLength(uint256 epochLength);\n\n  event ValidatorJoin(\n    address indexed signerAddr,\n    uint256 indexed slotId,\n    bytes32 indexed tenderAddr,\n    uint256 eventCounter,\n    uint256 epoch\n  );\n\n  event ValidatorLogout(\n    address indexed signerAddr,\n    uint256 indexed slotId,\n    bytes32 indexed tenderAddr,\n    address newSigner,\n    uint256 eventCounter,\n    uint256 epoch\n  );\n\n  event ValidatorLeave(\n    address indexed signerAddr,\n    uint256 indexed slotId,\n    bytes32 indexed tenderAddr,\n    uint256 epoch\n  );\n\n  event ValidatorUpdate(\n    address indexed signerAddr,\n    uint256 indexed slotId,\n    bytes32 indexed tenderAddr,\n    uint256 eventCounter\n  );\n\n  struct Slot {\n    uint32 eventCounter;\n    address owner;\n    uint64 stake;\n    address signer;\n    bytes32 tendermint;\n    uint32 activationEpoch;\n    address newOwner;\n    uint64 newStake;\n    address newSigner;\n    bytes32 newTendermint;\n  }\n\n  Vault public vault;\n  Bridge public bridge;\n\n  uint256 public epochLength; // length of epoch in periods (32 blocks)\n  uint256 public lastCompleteEpoch; // height at which last epoch was completed\n  uint256 public lastEpochBlockHeight;\n\n  mapping(uint256 => Slot) public slots;\n\n\n  function initialize(Bridge _bridge, Vault _vault, uint256 _epochLength) public initializer {\n    vault = _vault;\n    bridge = _bridge;\n    epochLength = _epochLength;\n    emit EpochLength(epochLength);\n  }\n\n  function setEpochLength(uint256 _epochLength) public ifAdmin {\n    epochLength = _epochLength;\n    emit EpochLength(epochLength);\n  }\n\n  function setSlot(uint256 _slotId, address _signerAddr, bytes32 _tenderAddr) public ifAdmin {\n    require(_slotId < epochLength, \"out of range slotId\");\n    Slot storage slot = slots[_slotId];\n\n    // taking empty slot\n    if (slot.signer == address(0)) {\n      slot.owner = _signerAddr;\n      slot.signer = _signerAddr;\n      slot.tendermint = _tenderAddr;\n      slot.activationEpoch = 0;\n      slot.eventCounter++;\n      emit ValidatorJoin(\n        slot.signer,\n        _slotId,\n        _tenderAddr,\n        slot.eventCounter,\n        lastCompleteEpoch + 1\n      );\n      return;\n    }\n    // emptying slot\n    if (_signerAddr == address(0) && _tenderAddr == 0) {\n      slot.activationEpoch = uint32(lastCompleteEpoch + 3);\n      slot.eventCounter++;\n      emit ValidatorLogout(\n        slot.signer,\n        _slotId,\n        _tenderAddr,\n        address(0),\n        slot.eventCounter,\n        lastCompleteEpoch + 3\n      );\n      return;\n    }\n  }\n\n  function activate(uint256 _slotId) public {\n    require(_slotId < epochLength, \"out of range slotId\");\n    Slot storage slot = slots[_slotId];\n    require(lastCompleteEpoch + 1 >= slot.activationEpoch, \"activation epoch not reached yet\");\n    if (slot.signer != address(0)) {\n      emit ValidatorLeave(\n        slot.signer,\n        _slotId,\n        slot.tendermint,\n        lastCompleteEpoch + 1\n      );\n    }\n    slot.owner = slot.newOwner;\n    slot.signer = slot.newSigner;\n    slot.tendermint = slot.newTendermint;\n    slot.activationEpoch = 0;\n    slot.newSigner = address(0);\n    slot.newTendermint = 0x0;\n    slot.eventCounter++;\n    if (slot.signer != address(0)) {\n      emit ValidatorJoin(\n        slot.signer,\n        _slotId,\n        slot.tendermint,\n        slot.eventCounter,\n        lastCompleteEpoch + 1\n      );\n    }\n  }\n\n  event Submission(\n    bytes32 indexed blocksRoot,\n    uint256 indexed slotId,\n    address owner,\n    bytes32 periodRoot\n  );\n\n  function submitPeriod(uint256 _slotId, bytes32 _prevHash, bytes32 _blocksRoot) public {\n    require(_slotId < epochLength, \"Incorrect slotId\");\n    Slot storage slot = slots[_slotId];\n    require(slot.signer == msg.sender, \"not submitted by signerAddr\");\n    // This is here so that I can submit in the same epoch I auction/logout but not after\n    if (slot.activationEpoch > 0) {\n      // if slot not active, prevent submission\n      require(lastCompleteEpoch + 2 < slot.activationEpoch, \"slot not active\");\n    }\n\n    // validator root\n    bytes32 hashRoot = bytes32(_slotId << 160 | uint160(slot.owner));\n    assembly {\n      mstore(0, hashRoot)\n      mstore(0x20, 0x0000000000000000000000000000000000000000)\n      hashRoot := keccak256(0, 0x40)\n    }\n    // cas root\n    assembly {\n      mstore(0, 0x0000000000000000000000000000000000000000)\n      mstore(0x20, hashRoot)\n      hashRoot := keccak256(0, 0x40)\n    }\n\n    // consensus root\n    bytes32 consensusRoot;\n    assembly {\n      mstore(0, _blocksRoot)\n      mstore(0x20, 0x0000000000000000000000000000000000000000)\n      consensusRoot := keccak256(0, 0x40)\n    }\n\n    // period root\n    assembly {\n      mstore(0, consensusRoot)\n      mstore(0x20, hashRoot)\n      hashRoot := keccak256(0, 0x40)\n    }\n\n    uint256 newHeight = bridge.submitPeriod(_prevHash, hashRoot);\n    // check if epoch completed\n    if (newHeight >= lastEpochBlockHeight + epochLength) {\n      lastCompleteEpoch++;\n      lastEpochBlockHeight = newHeight;\n      emit Epoch(lastCompleteEpoch);\n    }\n    emit Submission(\n      _blocksRoot,\n      _slotId,\n      slot.owner,\n      hashRoot\n    );\n  }\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_bridge\",\"type\":\"address\"},{\"name\":\"_vault\",\"type\":\"address\"},{\"name\":\"_epochLength\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slots\",\"outputs\":[{\"name\":\"eventCounter\",\"type\":\"uint32\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"stake\",\"type\":\"uint64\"},{\"name\":\"signer\",\"type\":\"address\"},{\"name\":\"tendermint\",\"type\":\"bytes32\"},{\"name\":\"activationEpoch\",\"type\":\"uint32\"},{\"name\":\"newOwner\",\"type\":\"address\"},{\"name\":\"newStake\",\"type\":\"uint64\"},{\"name\":\"newSigner\",\"type\":\"address\"},{\"name\":\"newTendermint\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_epochLength\",\"type\":\"uint256\"}],\"name\":\"setEpochLength\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastCompleteEpoch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"epochLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastEpochBlockHeight\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_slotId\",\"type\":\"uint256\"},{\"name\":\"_prevHash\",\"type\":\"bytes32\"},{\"name\":\"_blocksRoot\",\"type\":\"bytes32\"}],\"name\":\"submitPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_slotId\",\"type\":\"uint256\"}],\"name\":\"activate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_slotId\",\"type\":\"uint256\"},{\"name\":\"_signerAddr\",\"type\":\"address\"},{\"name\":\"_tenderAddr\",\"type\":\"bytes32\"}],\"name\":\"setSlot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"Epoch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"epochLength\",\"type\":\"uint256\"}],\"name\":\"EpochLength\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"signerAddr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"slotId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"tenderAddr\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"eventCounter\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"ValidatorJoin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"signerAddr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"slotId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"tenderAddr\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"newSigner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eventCounter\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"ValidatorLogout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"signerAddr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"slotId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"tenderAddr\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"ValidatorLeave\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"signerAddr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"slotId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"tenderAddr\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"eventCounter\",\"type\":\"uint256\"}],\"name\":\"ValidatorUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"blocksRoot\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"slotId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"periodRoot\",\"type\":\"bytes32\"}],\"name\":\"Submission\",\"type\":\"event\"}]","ContractName":"PoaOperator","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6db27cb7019521a81e4429f25e432b07398c76ce9ecf56f00b04687a0ed511c3"}]}