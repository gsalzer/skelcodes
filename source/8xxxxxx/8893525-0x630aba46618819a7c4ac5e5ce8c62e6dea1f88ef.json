{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.2;\n\n\ncontract RoleManager {\n\n    mapping(address => bool) private admins;\n    mapping(address => bool) private controllers;\n\n    modifier onlyAdmins {\n        require(admins[msg.sender], 'only admins');\n        _;\n    }\n\n    modifier onlyControllers {\n        require(controllers[msg.sender], 'only controllers');\n        _;\n    } \n\n    constructor() public {\n        admins[msg.sender] = true;\n        controllers[msg.sender] = true;\n    }\n\n    function addController(address _newController) external onlyAdmins{\n        controllers[_newController] = true;\n    } \n\n    function addAdmin(address _newAdmin) external onlyAdmins{\n        admins[_newAdmin] = true;\n    } \n\n    function removeController(address _controller) external onlyAdmins{\n        controllers[_controller] = false;\n    } \n    \n    function removeAdmin(address _admin) external onlyAdmins{\n        require(_admin != msg.sender, 'unexecutable operation'); \n        admins[_admin] = false;\n    } \n\n    function isAdmin(address addr) external view returns (bool) {\n        return (admins[addr]);\n    }\n\n    function isController(address addr) external view returns (bool) {\n        return (controllers[addr]);\n    }\n\n}\n\ncontract AccessController {\n\n    address roleManagerAddr;\n\n    modifier onlyAdmins {\n        require(RoleManager(roleManagerAddr).isAdmin(msg.sender), 'only admins');\n        _;\n    }\n\n    modifier onlyControllers {\n        require(RoleManager(roleManagerAddr).isController(msg.sender), 'only controllers');\n        _;\n    }\n\n    constructor (address _roleManagerAddr) public {\n        require(_roleManagerAddr != address(0), '_roleManagerAddr: Invalid address (zero address)');\n        roleManagerAddr = _roleManagerAddr;\n    }\n\n}\n\nlibrary SafeMath {\n    \n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        \n        \n        \n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    \n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        \n        require(b > 0);\n        uint256 c = a / b;\n        \n\n        return c;\n    }\n\n    \n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    \n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    \n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\ncontract AidolProductionBilling is AccessController {\n    using SafeMath for uint256;\n\n    mapping( address => uint256 ) public expirationTime;\n    uint256 public price;\n    bool public isAvailable;\n    address payable public adminWallet;\n    event Payment(address payer, uint256 newExpirationTime);\n\n    constructor (address _roleManagerAddr)\n        public\n        AccessController(_roleManagerAddr)\n    {\n        price = 100 finney;\n        isAvailable = true;\n        adminWallet = msg.sender;\n    }\n\n    function () external payable {\n        require(msg.value == price, 'Invalid amount of ether');\n        require(isAvailable, 'Not available');\n        require(expirationTime[msg.sender] == 0 ||\n           expirationTime[msg.sender] < now.add(5 days), 'Too early to update payment');\n\n        if (expirationTime[msg.sender] < now) {\n          expirationTime[msg.sender] = now.add(30 days);\n        } else {\n          expirationTime[msg.sender] = expirationTime[msg.sender].add(30 days);\n        }\n\n        adminWallet.transfer(address(this).balance);\n        emit Payment(msg.sender, expirationTime[msg.sender]);\n    }\n\n    function setPrice (uint256 _price) external onlyAdmins {\n        price = _price;\n    }\n\n    function setAvailability (bool _isAvailable) external onlyAdmins {\n        isAvailable = _isAvailable;\n    }\n\n    function setAdminWallet (address payable _adminWallet) external onlyAdmins {\n      adminWallet = _adminWallet;\n    }\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_isAvailable\",\"type\":\"bool\"}],\"name\":\"setAvailability\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adminWallet\",\"type\":\"address\"}],\"name\":\"setAdminWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"expirationTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_roleManagerAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newExpirationTime\",\"type\":\"uint256\"}],\"name\":\"Payment\",\"type\":\"event\"}]","ContractName":"AidolProductionBilling","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d9e1ec33d63d6d73ec9418254261d0cb341eb646","Library":"","LicenseType":"","SwarmSource":"bzzr://1dd7bc55252a27ad1ad9e9e6f51eb751a09e4c8784688d56d4cfd468f1f5cf5b"}]}