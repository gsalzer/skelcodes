{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract Token {\r\n/* This is a slight change to the ERC20 base standard.\r\nfunction totalSupply() constant returns (uint256 supply);\r\nis replaced with:\r\nuint256 public totalSupply;\r\nThis automatically creates a getter function for the totalSupply.\r\nThis is moved to the base contract since public getter functions are not\r\ncurrently recognised as an implementation of the matching abstract\r\nfunction by the compiler.\r\n*/\r\n/// total amount of tokens\r\nuint256 public totalSupply;\r\n\r\n/// @param _owner The address from which the balance will be retrieved\r\n/// @return The balance\r\nfunction balanceOf(address _owner) public constant returns (uint256 balance);\r\n\r\n/// @notice send '_value' token to '_to' from 'msg.sender'\r\n/// @param _to The address of the recipient\r\n/// @param _value The amount of token to be transferred\r\n/// @return Whether the transfer was successful or not\r\nfunction transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n/// @notice send '_value' token to '_to' from '_from' on the condition it is approved by '_from'\r\n/// @param _from The address of the sender\r\n/// @param _to The address of the recipient\r\n/// @param _value The amount of token to be transferred\r\n/// @return Whether the transfer was successful or not\r\nfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n/// @notice 'msg.sender' approves '_spender' to spend '_value' tokens\r\n/// @param _spender The address of the account able to transfer the tokens\r\n/// @param _value The amount of tokens to be approved for transfer\r\n/// @return Whether the approval was successful or not\r\nfunction approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n/// @param _owner The address of the account owning tokens\r\n/// @param _spender The address of the account able to transfer the tokens\r\n/// @return Amount of remaining tokens allowed to spent\r\nfunction allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n\r\nevent Transfer(address indexed _from, address indexed _to, uint256 _value);\r\nevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract SafeMath {\r\n\r\n/* function assert(bool assertion) internal { */\r\n/*   if (!assertion) { */\r\n/*     revert(); */\r\n/*   } */\r\n/* }      // assert no longer needed once solidity is on 0.4.10 */\r\n\r\nfunction safeAdd(uint256 x, uint256 y) internal pure returns(uint256) {\r\nuint256 z = x + y;\r\nassert((z >= x) && (z >= y));\r\nreturn z;\r\n}\r\n\r\nfunction safeSubtract(uint256 x, uint256 y) internal pure returns(uint256) {\r\nassert(x >= y);\r\nuint256 z = x - y;\r\nreturn z;\r\n}\r\n\r\nfunction safeMult(uint256 x, uint256 y) internal pure returns(uint256) {\r\nuint256 z = x * y;\r\nassert((x == 0)||(z/x == y));\r\nreturn z;\r\n}\r\n\r\nfunction safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\nassert(b <= a);\r\nreturn a - b;\r\n}\r\n\r\n}\r\n\r\ncontract StandardToken is Token, SafeMath {\r\n\r\nfunction transfer(address _to, uint256 _value) public returns (bool success) {\r\n//Default assumes totalSupply can't be over max (2^256 - 1).\r\n//If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\r\n//Replace the if with this one instead.\r\n//if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\nif (balances[msg.sender] >= _value && _value > 0) {\r\nbalances[msg.sender] -= _value;\r\nbalances[_to] += _value;\r\nemit Transfer(msg.sender, _to, _value);\r\nreturn true;\r\n} else { return false; }\r\n}\r\n\r\nfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n//same as above. Replace this line with the following if you want to protect against wrapping uints.\r\n//if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\nif (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\nbalances[_to] += _value;\r\nbalances[_from] -= _value;\r\nallowed[_from][msg.sender] -= _value;\r\nemit Transfer(_from, _to, _value);\r\nreturn true;\r\n} else { return false; }\r\n}\r\n\r\nfunction balanceOf(address _owner) public constant returns (uint256 balance) {\r\nreturn balances[_owner];\r\n}\r\n\r\nfunction approve(address _spender, uint256 _value) public returns (bool success) {\r\nallowed[msg.sender][_spender] = _value;\r\nemit Approval(msg.sender, _spender, _value);\r\nreturn true;\r\n}\r\n\r\nfunction allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\nreturn allowed[_owner][_spender];\r\n}\r\n\r\nmapping (address => uint256) balances;\r\nmapping (address => mapping (address => uint256)) allowed;\r\n}\r\n\r\ncontract TSETERIF is StandardToken {\r\n\r\n// metadata\r\nstring public constant name = \"TSETERIF\";\r\nstring public constant symbol = \"LIPS\";\r\nuint256 public constant decimals = 0;\r\nstring public version = \"1.0\";\r\n\r\n// contracts\r\naddress public ethFundDeposit;      // beneficiary address.\r\naddress public tokenFundDeposit;     // initial token owner\r\n\r\n// crowdsale parameters\r\nbool public isFinalized;       // switched to true in operational state\r\nuint256 public fundingStartBlock;\r\nuint256 public fundingEndBlock;\r\nuint256 public crowdsaleSupply = 0;         // crowdsale supply\r\nuint256 public tokenExchangeRate = 1000000;   // how many tokens per 1 ETH\r\nuint256 public constant tokenCreationCap =  88 * (10 ** 6) * 10 ** 18;\r\nuint256 public tokenCrowdsaleCap =  80 * (10 ** 6) * 10 ** 18;\r\n// events\r\nevent CreateTSETERIF(address indexed _to, uint256 _value);\r\n\r\n// constructor\r\nconstructor() public\r\n{\r\n    isFinalized = false;                   //controls pre through crowdsale state\r\n    ethFundDeposit = 0xbD4eF565DC5aD1835B005deBe75AbB815A757fDB;\r\n    tokenFundDeposit = 0xbD4eF565DC5aD1835B005deBe75AbB815A757fDB;\r\n    tokenExchangeRate = 1000000;\r\n    fundingStartBlock = block.number;\r\n    fundingEndBlock = fundingStartBlock + 24;\r\n    totalSupply = tokenCreationCap;\r\n    balances[tokenFundDeposit] = tokenCreationCap;    // deposit all token to the initial address.\r\n    emit CreateTSETERIF(tokenFundDeposit, tokenCreationCap);\r\n}\r\n\r\nfunction () payable public {\r\nassert(!isFinalized);\r\nrequire(block.number >= fundingStartBlock);\r\nrequire(block.number < fundingEndBlock);\r\nrequire(msg.value > 0);\r\n\r\nuint256 tokens = safeMult(msg.value, tokenExchangeRate);\r\ncrowdsaleSupply = safeAdd(crowdsaleSupply, tokens);\r\n\r\n// return money if something goes wrong\r\nrequire(tokenCrowdsaleCap >= crowdsaleSupply);\r\n\r\nbalances[msg.sender] = safeAdd(balances[msg.sender], tokens);     // add amount of tokens to sender\r\nbalances[tokenFundDeposit] = safeSub(balances[tokenFundDeposit], tokens); // subtracts amount from initial balance\r\nemit CreateTSETERIF(msg.sender, tokens);\r\n}\r\n/// @dev Accepts ether and creates new tokens.\r\nfunction createTokens() payable external {\r\nrequire(!isFinalized);\r\nrequire(block.number >= fundingStartBlock);\r\nrequire(block.number < fundingEndBlock);\r\nrequire(msg.value > 0);\r\n\r\nuint256 tokens = safeMult(msg.value, tokenExchangeRate);    // check that we does not oversell\r\ncrowdsaleSupply = safeAdd(crowdsaleSupply, tokens);\r\n\r\n// return money if something goes wrong\r\nrequire(tokenCrowdsaleCap >= crowdsaleSupply);\r\n\r\nbalances[msg.sender] = safeAdd(balances[msg.sender], tokens);     // add amount of tokens to sender\r\nbalances[tokenFundDeposit] = safeSub(balances[tokenFundDeposit], tokens); // subtracts amount from initial balance\r\nemit CreateTSETERIF(msg.sender, tokens);      // logs token creation\r\n}\r\n\r\n/// @dev Update crowdsale parameter\r\nfunction updateParams(\r\nuint256 _tokenExchangeRate,\r\nuint256 _tokenCrowdsaleCap,\r\nuint256 _fundingStartBlock,\r\nuint256 _fundingEndBlock) external\r\n{\r\nassert(block.number < fundingStartBlock);\r\nassert(!isFinalized);\r\n\r\n// update system parameters\r\ntokenExchangeRate = _tokenExchangeRate;\r\ntokenCrowdsaleCap = _tokenCrowdsaleCap;\r\nfundingStartBlock = _fundingStartBlock;\r\nfundingEndBlock = _fundingEndBlock;\r\n}\r\n/// @dev Ends the funding period and sends the ETH home\r\nfunction finalize(uint _amount) external {\r\n    assert(!isFinalized);\r\n\r\n    // move to operational\r\n    isFinalized = true;\r\n    require(address(this).balance > _amount);\r\n    ethFundDeposit.transfer(_amount);\r\n}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCreationCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingEndBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenFundDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethFundDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenExchangeRate\",\"type\":\"uint256\"},{\"name\":\"_tokenCrowdsaleCap\",\"type\":\"uint256\"},{\"name\":\"_fundingStartBlock\",\"type\":\"uint256\"},{\"name\":\"_fundingEndBlock\",\"type\":\"uint256\"}],\"name\":\"updateParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingStartBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCrowdsaleCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"CreateTSETERIF\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"TSETERIF","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://29f0acfef8644671b25670211882734c08354e6ee2d5fe4faea9acfa023194ec"}]}