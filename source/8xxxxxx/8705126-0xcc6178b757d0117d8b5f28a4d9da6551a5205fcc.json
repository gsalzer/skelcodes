{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.12; \r\n/*\r\n\r\n___________________________________________________________________\r\n  _      _                                        ______           \r\n  |  |  /          /                                /              \r\n--|-/|-/-----__---/----__----__---_--_----__-------/-------__------\r\n  |/ |/    /___) /   /   ' /   ) / /  ) /___)     /      /   )     \r\n__/__|____(___ _/___(___ _(___/_/_/__/_(___ _____/______(___/__o_o_\r\n\r\n\r\n\r\n █████╗ ███████╗██╗   ██╗███╗   ███╗ █████╗      ██████╗ ██████╗ ██╗███╗   ██╗\r\n██╔══██╗╚══███╔╝██║   ██║████╗ ████║██╔══██╗    ██╔════╝██╔═══██╗██║████╗  ██║\r\n███████║  ███╔╝ ██║   ██║██╔████╔██║███████║    ██║     ██║   ██║██║██╔██╗ ██║\r\n██╔══██║ ███╔╝  ██║   ██║██║╚██╔╝██║██╔══██║    ██║     ██║   ██║██║██║╚██╗██║\r\n██║  ██║███████╗╚██████╔╝██║ ╚═╝ ██║██║  ██║    ╚██████╗╚██████╔╝██║██║ ╚████║\r\n╚═╝  ╚═╝╚══════╝ ╚═════╝ ╚═╝     ╚═╝╚═╝  ╚═╝     ╚═════╝ ╚═════╝ ╚═╝╚═╝  ╚═══╝\r\n                                                                              \r\n\r\n\r\n-------------------------------------------------------------------\r\n Copyright (c) 2019 onwards Azuma Coin Inc. ( https://Azumacoin.io )\r\n Contract designed with ❤ by EtherAuthority ( https://EtherAuthority.io )\r\n-------------------------------------------------------------------\r\n*/ \r\n\r\n\r\n\r\n\r\n//*******************************************************************//\r\n//------------------------ SafeMath Library -------------------------//\r\n//*******************************************************************//\r\n/**\r\n    * @title SafeMath\r\n    * @dev Math operations with safety checks that throw on error\r\n    */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n        return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b, 'SafeMath mul failed');\r\n    return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a, 'SafeMath sub failed');\r\n    return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, 'SafeMath add failed');\r\n    return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n//*******************************************************************//\r\n//------------------ Contract to Manage Ownership -------------------//\r\n//*******************************************************************//\r\n    \r\ncontract owned {\r\n    address payable public owner;\r\n    address payable private newOwner;\r\n\r\n    /**\r\n        Signer is deligated admin wallet, which can do sub-owner functions.\r\n        Signer calls following four functions:\r\n            => updateEthUsdPrice\r\n    */\r\n    address payable public signer;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        signer = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlySigner {\r\n        require(msg.sender == signer);\r\n        _;\r\n    }\r\n\r\n    function changeSigner(address payable _signer) public onlyOwner {\r\n        signer = _signer;\r\n    }\r\n\r\n    function transferOwnership(address payable _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    //this flow is to prevent transferring ownership to wrong wallet by mistake\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n \r\n\r\ninterface tokenInterface\r\n{\r\n    function transfer(address _to, uint256 _amount) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _amount) external returns (bool);\r\n} \r\n\r\n \r\n//****************************************************************************//\r\n//---------------------        MAIN CODE STARTS HERE     ---------------------//\r\n//****************************************************************************//\r\n\r\ncontract AzumaPrivateSale is owned {\r\n\r\n    /*===============================\r\n    =         DATA STORAGE          =\r\n    ===============================*/\r\n\r\n    // Public variables for private sale\r\n    using SafeMath for uint256;\r\n    address public azumaContractAddress;            // main token address to run ICO on\r\n   \tuint256 public icoETHReceived;                  // how many ETH Received through ICO\r\n   \tuint256 public totalTokenSold;                  // how many tokens sold\r\n\tuint256 public minimumContribution = 10**16;    // Minimum amount to invest - 0.01 ETH (in 18 decimal format)\r\n\tuint256 public etherUsdPrice = 172000;          // 1 ETH = 172 USD on 07/11/2019\r\n\tuint256 public etherPriceLastUpdated = now;     // Timestamp when the price was last updated\r\n\tuint256 public tokenPriceUSD = 150;             // 1 Token = 0.15 USD\r\n\r\n\r\n    //nothing happens in constructor\r\n    constructor() public{ }    \r\n\r\n\r\n    /**\r\n        * Fallback function. It accepts incoming ETH and issue tokens\r\n    */\r\n    function () payable external {\r\n        buyToken();\r\n    }\r\n\r\n    event buyTokenEvent (address sender,uint amount, uint tokenPaid);\r\n    function buyToken() payable public returns(uint)\r\n    {\r\n        uint256 etherAmount = msg.value;\r\n\t\t\r\n\t\t//checking conditions\r\n        require(etherAmount >= minimumContribution, \"less then minimum contribution\"); \r\n        \r\n        //getting USD value of incoming ether based on set ETH/USD exchang rate\r\n        //etherUsdValue is in WEI\r\n        uint256 etherUsdValue = etherAmount * etherUsdPrice;\r\n        \r\n        //calculating tokens to issue\r\n        uint256 tokenTotal = etherUsdValue  / tokenPriceUSD;\r\n\r\n        //updating state variables\r\n        icoETHReceived += etherAmount;\r\n        totalTokenSold += tokenTotal;\r\n        \r\n        //sending tokens. This crowdsale contract must hold enough tokens.\r\n        tokenInterface(azumaContractAddress).transfer(msg.sender, tokenTotal);\r\n        \r\n        \r\n        //send ether to owner\r\n        forwardETHToOwner();\r\n        \r\n        //logging event\r\n        emit buyTokenEvent(msg.sender, etherAmount, tokenTotal);\r\n        \r\n        return tokenTotal;\r\n\r\n    }\r\n    \r\n    // this function called by signer from oracle script. The pricing of ether is fetched from:\r\n    // https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=USD\r\n    // If any changes in that API, the above URL may change.\r\n    function updateEthUsdPrice(uint256 usdPrice) public onlySigner returns(bool){\r\n        \r\n        etherUsdPrice = usdPrice;          \r\n\t    etherPriceLastUpdated = now;\r\n\t    \r\n\t    return true;\r\n    }\r\n\r\n\r\n\t//Automatocally forwards ether from smart contract to owner address\r\n\tfunction forwardETHToOwner() internal {\r\n\t\towner.transfer(msg.value); \r\n\t}\r\n\t\r\n\t\r\n\t// exchange rate => 1 Token = how many USD in 3 decimals\r\n    function changeTokenUsdPricing(uint256 _tokenPriceUSD) onlyOwner public returns (bool)\r\n    {\r\n        tokenPriceUSD = _tokenPriceUSD;\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    function setMinimumContribution(uint256 _minimumContribution) onlyOwner public returns (bool)\r\n    {\r\n        minimumContribution = _minimumContribution;\r\n        return true;\r\n    }\r\n    \r\n    \r\n    function updateAzumaContract(address _newAzumaContract) onlyOwner public returns (bool)\r\n    {\r\n        azumaContractAddress = _newAzumaContract;\r\n        return true;\r\n    }\r\n    \r\n\t\r\n\tfunction manualWithdrawTokens(uint256 tokenAmount) public onlyOwner returns(string memory){\r\n        // no need for overflow checking as that will be done in transfer function\r\n        tokenInterface(azumaContractAddress).transfer(msg.sender, tokenAmount);\r\n        return \"Tokens withdrawn to owner wallet\";\r\n    }\r\n\r\n    function manualWithdrawEther() public onlyOwner returns(string memory){\r\n        address(owner).transfer(address(this).balance);\r\n        return \"Ether withdrawn to owner wallet\";\r\n    }\r\n    \r\n\r\n\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenPaid\",\"type\":\"uint256\"}],\"name\":\"buyTokenEvent\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"azumaContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"changeSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenPriceUSD\",\"type\":\"uint256\"}],\"name\":\"changeTokenUsdPricing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherPriceLastUpdated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherUsdPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoETHReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"manualWithdrawEther\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"manualWithdrawTokens\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumContribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumContribution\",\"type\":\"uint256\"}],\"name\":\"setMinimumContribution\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPriceUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokenSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAzumaContract\",\"type\":\"address\"}],\"name\":\"updateAzumaContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdPrice\",\"type\":\"uint256\"}],\"name\":\"updateEthUsdPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AzumaPrivateSale","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://e5010b41d81adc77fad30828681804fdd5f8fb5377fc7bbaba94eae05354e793"}]}