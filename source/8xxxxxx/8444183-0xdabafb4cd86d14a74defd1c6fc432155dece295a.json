{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ncontract TokenInterface {\r\n    function allowance(address, address) public returns (uint);\r\n    function balanceOf(address) public returns (uint);\r\n    function approve(address, uint) public;\r\n    function transfer(address, uint) public returns (bool);\r\n    function transferFrom(address, address, uint) public returns (bool);\r\n    function deposit() public payable;\r\n    function withdraw(uint) public;\r\n}\r\n\r\n\r\ncontract PipInterface {\r\n    function read() public returns (bytes32);\r\n}\r\n\r\ncontract PepInterface {\r\n    function peek() public returns (bytes32, bool);\r\n}\r\n\r\ncontract VoxInterface {\r\n    function par() public returns (uint);\r\n}\r\n\r\ncontract TubInterface {\r\n    event LogNewCup(address indexed lad, bytes32 cup);\r\n\r\n    function open() public returns (bytes32);\r\n    function join(uint) public;\r\n    function exit(uint) public;\r\n    function lock(bytes32, uint) public;\r\n    function free(bytes32, uint) public;\r\n    function draw(bytes32, uint) public;\r\n    function wipe(bytes32, uint) public;\r\n    function give(bytes32, address) public;\r\n    function shut(bytes32) public;\r\n    function bite(bytes32) public;\r\n    function cups(bytes32) public returns (address, uint, uint, uint);\r\n    function gem() public returns (TokenInterface);\r\n    function gov() public returns (TokenInterface);\r\n    function skr() public returns (TokenInterface);\r\n    function sai() public returns (TokenInterface);\r\n    function vox() public returns (VoxInterface);\r\n    function ask(uint) public returns (uint);\r\n    function mat() public returns (uint);\r\n    function chi() public returns (uint);\r\n    function ink(bytes32) public returns (uint);\r\n    function tab(bytes32) public returns (uint);\r\n    function rap(bytes32) public returns (uint);\r\n    function per() public returns (uint);\r\n    function pip() public returns (PipInterface);\r\n    function pep() public returns (PepInterface);\r\n    function tag() public returns (uint);\r\n    function drip() public;\r\n    function lad(bytes32 cup) public view returns (address);\r\n    function bid(uint wad) public view returns (uint);\r\n}\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint supply);\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    function decimals() external view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ninterface ExchangeInterface {\r\n    function swapEtherToToken (uint _ethAmount, address _tokenAddress, uint _maxAmount) payable external returns(uint, uint);\r\n    function swapTokenToEther (address _tokenAddress, uint _amount, uint _maxAmount) external returns(uint);\r\n\r\n    function getExpectedRate(address src, address dest, uint srcQty) external view\r\n        returns (uint expectedRate, uint slippageRate);\r\n}\r\n\r\ncontract DSMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function max(uint x, uint y) internal pure returns (uint z) {\r\n        return x >= y ? x : y;\r\n    }\r\n    function imin(int x, int y) internal pure returns (int z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function imax(int x, int y) internal pure returns (int z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n    //\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n    //\r\n    // These facts are why it works:\r\n    //\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n    //   and applying the equation for even x gives\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n    //\r\n    //  Also, EVM division is flooring and\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n    //\r\n    function rpow(uint x, uint n) internal pure returns (uint z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract SaverLogger {\r\n    event Repay(uint indexed cdpId, address indexed owner, uint collateralAmount, uint daiAmount);\r\n    event Boost(uint indexed cdpId, address indexed owner, uint daiAmount, uint collateralAmount);\r\n\r\n    function LogRepay(uint _cdpId, address _owner, uint _collateralAmount, uint _daiAmount) public {\r\n        emit Repay(_cdpId, _owner, _collateralAmount, _daiAmount);\r\n    }\r\n\r\n    function LogBoost(uint _cdpId, address _owner, uint _daiAmount, uint _collateralAmount) public {\r\n        emit Boost(_cdpId, _owner, _daiAmount, _collateralAmount);\r\n    }\r\n}\r\n\r\n\r\ncontract ConstantAddressesKovan {\r\n    address public constant KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address public constant WETH_ADDRESS = 0xd0A1E359811322d97991E03f863a0C30C2cF029C;\r\n    address public constant MAKER_DAI_ADDRESS = 0xC4375B7De8af5a38a93548eb8453a498222C4fF2;\r\n    address public constant MKR_ADDRESS = 0xAaF64BFCC32d0F15873a02163e7E500671a4ffcD;\r\n    address public constant VOX_ADDRESS = 0xBb4339c0aB5B1d9f14Bd6e3426444A1e9d86A1d9;\r\n    address public constant PETH_ADDRESS = 0xf4d791139cE033Ad35DB2B2201435fAd668B1b64;\r\n    address public constant TUB_ADDRESS = 0xa71937147b55Deb8a530C7229C442Fd3F31b7db2;\r\n    address public constant LOGGER_ADDRESS = 0x32d0e18f988F952Eb3524aCE762042381a2c39E5;\r\n    address public constant WALLET_ID = 0x54b44C6B18fc0b4A1010B21d524c338D1f8065F6;\r\n    address public constant OTC_ADDRESS = 0x4A6bC4e803c62081ffEbCc8d227B5a87a58f1F8F;\r\n    address public constant COMPOUND_DAI_ADDRESS = 0x25a01a05C188DaCBCf1D61Af55D4a5B4021F7eeD;\r\n    address public constant SOLO_MARGIN_ADDRESS = 0x4EC3570cADaAEE08Ae384779B0f3A45EF85289DE;\r\n    address public constant IDAI_ADDRESS = 0xA1e58F3B1927743393b25f261471E1f2D3D9f0F6;\r\n    address public constant CDAI_ADDRESS = 0xb6b09fBffBa6A5C4631e5F7B2e3Ee183aC259c0d;\r\n    address public constant STUPID_EXCHANGE = 0x863E41FE88288ebf3fcd91d8Dbb679fb83fdfE17;\r\n\r\n    address public constant KYBER_WRAPPER = 0x5595930d576Aedf13945C83cE5aaD827529A1310;\r\n    address public constant UNISWAP_WRAPPER = 0x5595930d576Aedf13945C83cE5aaD827529A1310;\r\n    address public constant ETH2DAI_WRAPPER = 0x823cde416973a19f98Bb9C96d97F4FE6C9A7238B;\r\n\r\n    address public constant FACTORY_ADDRESS = 0xc72E74E474682680a414b506699bBcA44ab9a930;\r\n    //\r\n    address public constant PIP_INTERFACE_ADDRESS = 0xA944bd4b25C9F186A846fd5668941AA3d3B8425F;\r\n    address public constant PROXY_REGISTRY_INTERFACE_ADDRESS = 0x64A436ae831C1672AE81F674CAb8B6775df3475C;\r\n    address public constant GAS_TOKEN_INTERFACE_ADDRESS = 0x0000000000170CcC93903185bE5A2094C870Df62;\r\n    address public constant KYBER_INTERFACE = 0x692f391bCc85cefCe8C237C01e1f636BbD70EA4D;\r\n\r\n    // Rinkeby, when no Kovan\r\n    address public constant UNISWAP_FACTORY = 0xf5D915570BC477f9B8D6C0E980aA81757A3AaC36;\r\n}\r\n\r\ncontract ConstantAddressesMainnet {\r\n    address public constant MAKER_DAI_ADDRESS = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\r\n    address public constant IDAI_ADDRESS = 0x14094949152EDDBFcd073717200DA82fEd8dC960;\r\n    address public constant SOLO_MARGIN_ADDRESS = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\r\n    address public constant CDAI_ADDRESS = 0xF5DCe57282A584D2746FaF1593d3121Fcac444dC;\r\n    address public constant KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address public constant MKR_ADDRESS = 0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2;\r\n    address public constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address public constant VOX_ADDRESS = 0x9B0F70Df76165442ca6092939132bBAEA77f2d7A;\r\n    address public constant PETH_ADDRESS = 0xf53AD2c6851052A81B42133467480961B2321C09;\r\n    address public constant TUB_ADDRESS = 0x448a5065aeBB8E423F0896E6c5D525C040f59af3;\r\n    address public constant WALLET_ID = 0x322d58b9E75a6918f7e7849AEe0fF09369977e08;\r\n    address public constant LOGGER_ADDRESS = 0xeCf88e1ceC2D2894A0295DB3D86Fe7CE4991E6dF;\r\n    address public constant OTC_ADDRESS = 0x39755357759cE0d7f32dC8dC45414CCa409AE24e;\r\n\r\n    address public constant KYBER_WRAPPER = 0xAae7ba823679889b12f71D1f18BEeCBc69E62237;\r\n    address public constant UNISWAP_WRAPPER = 0x0aa70981311D60a9521C99cecFDD68C3E5a83B83;\r\n    address public constant ETH2DAI_WRAPPER = 0xd7BBB1777E13b6F535Dec414f575b858ed300baF;\r\n\r\n    address public constant KYBER_INTERFACE = 0x818E6FECD516Ecc3849DAf6845e3EC868087B755;\r\n    address public constant UNISWAP_FACTORY = 0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95;\r\n    address public constant FACTORY_ADDRESS = 0x5a15566417e6C1c9546523066500bDDBc53F88C7;\r\n    address public constant PIP_INTERFACE_ADDRESS = 0x729D19f657BD0614b4985Cf1D82531c67569197B;\r\n\r\n    address public constant PROXY_REGISTRY_INTERFACE_ADDRESS = 0x4678f0a6958e4D2Bc4F1BAF7Bc52E8F3564f3fE4;\r\n    address public constant GAS_TOKEN_INTERFACE_ADDRESS = 0x0000000000b3F879cb30FE243b4Dfee438691c04;\r\n\r\n    // Kovan addresses, not used on mainnet\r\n    address public constant COMPOUND_DAI_ADDRESS = 0x25a01a05C188DaCBCf1D61Af55D4a5B4021F7eeD;\r\n    address public constant STUPID_EXCHANGE = 0x863E41FE88288ebf3fcd91d8Dbb679fb83fdfE17;\r\n}\r\n\r\n\r\ncontract ConstantAddresses is ConstantAddressesMainnet {\r\n}\r\n\r\n/// @title SaverProxy implements advanced dashboard features repay/boost\r\ncontract SaverProxyMonitor is DSMath, ConstantAddresses {\r\n\r\n    uint public constant SERVICE_FEE = 400; // 0.25% Fee\r\n\r\n    /// @notice Withdraws Eth collateral, swaps Eth -> Dai with Kyber, and pays back the debt in Dai\r\n    /// @dev If _buyMkr is false user needs to have MKR tokens and approve his DSProxy\r\n    /// @param _cup Id of the CDP\r\n    /// @param _gasCost taking the amount needed for tx gas cost\r\n    function repay(bytes32 _cup, uint _amount, uint _gasCost) public {\r\n        address exchangeWrapper;\r\n        uint ethDaiPrice;\r\n\r\n        (exchangeWrapper, ethDaiPrice) = getBestPrice(_amount, KYBER_ETH_ADDRESS, MAKER_DAI_ADDRESS, 0);\r\n\r\n        TubInterface tub = TubInterface(TUB_ADDRESS);\r\n\r\n        approveTub(MAKER_DAI_ADDRESS);\r\n        approveTub(MKR_ADDRESS);\r\n        approveTub(PETH_ADDRESS);\r\n        approveTub(WETH_ADDRESS);\r\n\r\n        address owner = getOwner(tub, _cup);\r\n\r\n        uint startingRatio = getRatio(tub, _cup);\r\n\r\n        if (_amount > maxFreeCollateral(tub, _cup)) {\r\n            _amount = maxFreeCollateral(tub, _cup);\r\n        }\r\n\r\n        withdrawEth(tub, _cup, _amount);\r\n\r\n        uint daiAmount = wmul(_amount, ethDaiPrice);\r\n        uint cdpWholeDebt = getDebt(tub, _cup);\r\n\r\n        uint mkrAmount = stabilityFeeInMkr(tub, _cup, sub(daiAmount, daiAmount / SERVICE_FEE));\r\n\r\n        if (daiAmount > cdpWholeDebt) {\r\n            mkrAmount = stabilityFeeInMkr(tub, _cup, cdpWholeDebt);\r\n        }\r\n\r\n        uint ethFee = wdiv(mkrAmount, estimatedMkrPrice(_amount));\r\n\r\n        uint change;\r\n        (, change) = ExchangeInterface(KYBER_WRAPPER).swapEtherToToken.\r\n                        value(ethFee)(ethFee, MKR_ADDRESS, mkrAmount);\r\n\r\n\r\n        _amount = sub(_amount, sub(ethFee, change));\r\n\r\n        (daiAmount, ) = ExchangeInterface(exchangeWrapper).swapEtherToToken.\r\n                            value(_amount)(_amount, MAKER_DAI_ADDRESS, uint(-1));\r\n\r\n         // Take a fee from the user in dai\r\n         daiAmount = sub(daiAmount, takeFee(daiAmount, _gasCost, ethDaiPrice));\r\n\r\n        if (daiAmount > cdpWholeDebt) {\r\n            tub.wipe(_cup, cdpWholeDebt);\r\n            // FIX\r\n            ERC20(MAKER_DAI_ADDRESS).transfer(owner, sub(daiAmount, cdpWholeDebt));\r\n        } else {\r\n            tub.wipe(_cup, daiAmount);\r\n            require(getRatio(tub, _cup) > startingRatio, \"ratio must be better off at the end\");\r\n        }\r\n\r\n        SaverLogger(LOGGER_ADDRESS).LogRepay(uint(_cup), owner, _amount, daiAmount);\r\n    }\r\n    \r\n    /// @notice Boost will draw Dai, swap Dai -> Eth on kyber, and add that Eth to the CDP\r\n    /// @dev Amount must be less then the max. amount available Dai to generate\r\n    /// @param _cup Id of the CDP\r\n    /// @param _gasCost taking the amount needed for tx gas cost\r\n    function boost(bytes32 _cup, uint _amount, uint _gasCost) public {\r\n        address exchangeWrapper;\r\n        uint daiEthPrice;\r\n\r\n        (exchangeWrapper, daiEthPrice) = getBestPrice(_amount, MAKER_DAI_ADDRESS, KYBER_ETH_ADDRESS, 0);\r\n\r\n        uint ethDaiPrice = wdiv(1000000000000000000, daiEthPrice);\r\n\r\n        TubInterface tub = TubInterface(TUB_ADDRESS);\r\n\r\n        approveTub(WETH_ADDRESS);\r\n        approveTub(PETH_ADDRESS);\r\n        approveTub(MAKER_DAI_ADDRESS);\r\n\r\n        uint maxAmount = maxFreeDai(tub, _cup);\r\n\r\n        if (_amount > maxAmount) {\r\n            _amount = maxAmount;\r\n        }\r\n\r\n        uint startingCollateral = tub.ink(_cup);\r\n\r\n        tub.draw(_cup, _amount);\r\n        \r\n        // Take a fee from the user in dai\r\n        _amount = sub(_amount, takeFee(_amount, _gasCost, ethDaiPrice));\r\n\r\n        uint ethAmount = swapDaiAndLockEth(tub, _cup, _amount, exchangeWrapper);\r\n\r\n        require(tub.ink(_cup) > startingCollateral, \"collateral must be bigger than starting point\");\r\n\r\n        SaverLogger(LOGGER_ADDRESS).LogBoost(uint(_cup), msg.sender, _amount, ethAmount);\r\n    }\r\n\r\n    /// @notice Max. amount of collateral available to withdraw\r\n    /// @param _tub Tub interface\r\n    /// @param _cup Id of the CDP\r\n    function maxFreeCollateral(TubInterface _tub, bytes32 _cup) public returns (uint) {\r\n        return sub(_tub.ink(_cup), wdiv(wmul(wmul(_tub.tab(_cup), rmul(_tub.mat(), WAD)),\r\n                VoxInterface(VOX_ADDRESS).par()), _tub.tag())) - 1;\r\n    }\r\n\r\n    /// @notice Max. amount of Dai available to generate\r\n    /// @param _tub Tub interface\r\n    /// @param _cup Id of the CDP\r\n    function maxFreeDai(TubInterface _tub, bytes32 _cup) public returns (uint) {\r\n        return sub(wdiv(rmul(_tub.ink(_cup), _tub.tag()), rmul(_tub.mat(), WAD)), _tub.tab(_cup)) - 1;\r\n    }\r\n\r\n    /// @notice Stability fee amount in Mkr\r\n    /// @param _tub Tub interface\r\n    /// @param _cup Id of the CDP\r\n    /// @param _daiRepay Amount of dai we are repaying\r\n    function stabilityFeeInMkr(TubInterface _tub, bytes32 _cup, uint _daiRepay) public returns (uint) {\r\n        bytes32 mkrPrice;\r\n        bool ok;\r\n\r\n        uint feeInDai = rmul(_daiRepay, rdiv(_tub.rap(_cup), _tub.tab(_cup)));\r\n\r\n        (mkrPrice, ok) = _tub.pep().peek();\r\n\r\n        return wdiv(feeInDai, uint(mkrPrice));\r\n    }\r\n\r\n    /// @notice Helper function which swaps Dai for Eth and adds the collateral to the CDP\r\n    /// @param _tub Tub interface\r\n    /// @param _cup Id of the CDP\r\n    /// @param _daiAmount Amount of Dai to swap for Eth\r\n    function swapDaiAndLockEth(TubInterface _tub, bytes32 _cup, uint _daiAmount, address _exchangeWrapper) internal returns(uint) {\r\n\r\n        ERC20(MAKER_DAI_ADDRESS).transfer(_exchangeWrapper, _daiAmount);\r\n\r\n        uint ethAmount = ExchangeInterface(_exchangeWrapper).swapTokenToEther(MAKER_DAI_ADDRESS, _daiAmount, uint(-1));\r\n\r\n        _tub.gem().deposit.value(ethAmount)();\r\n\r\n        uint ink = sub(rdiv(ethAmount, _tub.per()), 1);\r\n\r\n        _tub.join(ink);\r\n\r\n        _tub.lock(_cup, ink);\r\n\r\n        return ethAmount;\r\n    }\r\n\r\n    /// @notice Approve a token if it's not already approved\r\n    /// @param _tokenAddress Address of the ERC20 token we want to approve\r\n    function approveTub(address _tokenAddress) internal {\r\n        if (ERC20(_tokenAddress).allowance(msg.sender, _tokenAddress) < (uint(-1) / 2)) {\r\n            ERC20(_tokenAddress).approve(TUB_ADDRESS, uint(-1));\r\n        }\r\n    }\r\n\r\n    /// @notice Returns the current collaterlization ratio for the CDP\r\n    /// @param _tub Tub interface\r\n    /// @param _cup Id of the CDP\r\n    function getRatio(TubInterface _tub, bytes32 _cup) internal returns(uint) {\r\n        return (wdiv(rmul(rmul(_tub.ink(_cup), _tub.tag()), WAD), _tub.tab(_cup)));\r\n    }\r\n\r\n    /// @notice Helper function which withdraws collateral from CDP\r\n    /// @param _tub Tub interface\r\n    /// @param _cup Id of the CDP\r\n    /// @param _ethAmount Amount of Eth to withdraw\r\n    function withdrawEth(TubInterface _tub, bytes32 _cup, uint _ethAmount) internal {\r\n        uint ink = rdiv(_ethAmount, _tub.per());\r\n        _tub.free(_cup, ink);\r\n\r\n        _tub.exit(ink);\r\n        _tub.gem().withdraw(_ethAmount);\r\n    }\r\n\r\n    /// @notice Takes a feePercentage and sends it to wallet\r\n    /// @param _amount Dai amount of the whole trade\r\n    /// @param _gasFee Aditional fee for gas payment\r\n    /// @param _price Price of Eth in Dai so we can take the fee in Dai\r\n    /// @return feeAmount Amount in Dai owner earned on the fee\r\n    function takeFee(uint _amount, uint _gasFee, uint _price) internal returns (uint feeAmount) {\r\n        uint gasFeeDai = wmul(_gasFee, _price); // The gas price of the tx in Dai\r\n\r\n        feeAmount = add((_amount / SERVICE_FEE), gasFeeDai);\r\n        \r\n        // if fee + gas cost is more than 20% of amount, lock it to 20%\r\n        if (feeAmount > (_amount / 5)) {\r\n            feeAmount = _amount / 5;\r\n        }\r\n\r\n\r\n        ERC20(MAKER_DAI_ADDRESS).transfer(WALLET_ID, feeAmount);\r\n    }\r\n\r\n    /// @notice Returns the best estimated price from 2 exchanges\r\n    /// @param _amount Amount of source tokens you want to exchange\r\n    /// @param _srcToken Address of the source token\r\n    /// @param _destToken Address of the destination token\r\n    /// @return (address, uint) The address of the best exchange and the exchange price\r\n    function getBestPrice(uint _amount, address _srcToken, address _destToken, uint _exchangeType) public view returns (address, uint) {\r\n        uint expectedRateKyber = 0;\r\n        uint expectedRateUniswap = 0;\r\n        uint expectedRateEth2Dai = 0;\r\n\r\n        (expectedRateKyber, ) = ExchangeInterface(KYBER_WRAPPER).getExpectedRate(_srcToken, _destToken, _amount);\r\n        (expectedRateUniswap, ) = ExchangeInterface(UNISWAP_WRAPPER).getExpectedRate(_srcToken, _destToken, _amount);\r\n        (expectedRateEth2Dai, ) = ExchangeInterface(ETH2DAI_WRAPPER).getExpectedRate(_srcToken, _destToken, _amount);\r\n\r\n        if (_exchangeType == 1) {\r\n            return (ETH2DAI_WRAPPER, expectedRateEth2Dai);\r\n        }\r\n\r\n        if (_exchangeType == 2) {\r\n            return (KYBER_WRAPPER, expectedRateKyber);\r\n        }\r\n\r\n        if (_exchangeType == 3) {\r\n            return (UNISWAP_WRAPPER, expectedRateUniswap);\r\n        }\r\n\r\n        if ((expectedRateEth2Dai >= expectedRateKyber) && (expectedRateEth2Dai >= expectedRateUniswap)) {\r\n            return (ETH2DAI_WRAPPER, expectedRateEth2Dai);\r\n        }\r\n\r\n        if ((expectedRateKyber >= expectedRateUniswap) && (expectedRateKyber >= expectedRateEth2Dai)) {\r\n            return (KYBER_WRAPPER, expectedRateKyber);\r\n        }\r\n\r\n        if ((expectedRateUniswap >= expectedRateKyber) && (expectedRateUniswap >= expectedRateEth2Dai)) {\r\n            return (UNISWAP_WRAPPER, expectedRateUniswap);\r\n        }\r\n    }\r\n\r\n    /// @notice Returns expected rate for Eth -> Dai conversion\r\n    /// @param _amount Amount of Ether\r\n    function estimatedDaiPrice(uint _amount) internal view returns (uint expectedRate) {\r\n        (expectedRate, ) = ExchangeInterface(KYBER_WRAPPER).getExpectedRate(KYBER_ETH_ADDRESS, MAKER_DAI_ADDRESS, _amount);\r\n    }\r\n\r\n    /// @notice Returns expected rate for Dai -> Eth conversion\r\n    /// @param _amount Amount of Dai\r\n    function estimatedEthPrice(uint _amount) internal view returns (uint expectedRate) {\r\n        (expectedRate, ) = ExchangeInterface(KYBER_WRAPPER).getExpectedRate(MAKER_DAI_ADDRESS, KYBER_ETH_ADDRESS, _amount);\r\n    }\r\n\r\n    /// @notice Returns expected rate for Eth -> Mkr conversion\r\n    /// @param _amount Amount of Ether\r\n    function estimatedMkrPrice(uint _amount) internal view returns (uint expectedRate) {\r\n        (expectedRate, ) = ExchangeInterface(KYBER_WRAPPER).getExpectedRate(KYBER_ETH_ADDRESS, MKR_ADDRESS, _amount);\r\n    }\r\n\r\n    /// @notice Returns current Dai debt of the CDP\r\n    /// @param _tub Tub interface\r\n    /// @param _cup Id of the CDP\r\n    function getDebt(TubInterface _tub, bytes32 _cup) internal returns (uint debt) {\r\n        ( , , debt, ) = _tub.cups(_cup);\r\n    }\r\n\r\n    /// @notice Returns the owner of the CDP\r\n    /// @param _tub Tub interface\r\n    /// @param _cup Id of the CDP\r\n    function getOwner(TubInterface _tub, bytes32 _cup) internal returns (address owner) {\r\n        ( owner, , , ) = _tub.cups(_cup);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"WETH_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CDAI_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PIP_INTERFACE_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KYBER_ETH_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OTC_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IDAI_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_srcToken\",\"type\":\"address\"},{\"name\":\"_destToken\",\"type\":\"address\"},{\"name\":\"_exchangeType\",\"type\":\"uint256\"}],\"name\":\"getBestPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GAS_TOKEN_INTERFACE_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VOX_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH2DAI_WRAPPER\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STUPID_EXCHANGE\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SERVICE_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROXY_REGISTRY_INTERFACE_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tub\",\"type\":\"address\"},{\"name\":\"_cup\",\"type\":\"bytes32\"}],\"name\":\"maxFreeDai\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MKR_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FACTORY_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LOGGER_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAKER_DAI_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KYBER_WRAPPER\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMPOUND_DAI_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tub\",\"type\":\"address\"},{\"name\":\"_cup\",\"type\":\"bytes32\"},{\"name\":\"_daiRepay\",\"type\":\"uint256\"}],\"name\":\"stabilityFeeInMkr\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UNISWAP_FACTORY\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PETH_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cup\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_gasCost\",\"type\":\"uint256\"}],\"name\":\"boost\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KYBER_INTERFACE\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tub\",\"type\":\"address\"},{\"name\":\"_cup\",\"type\":\"bytes32\"}],\"name\":\"maxFreeCollateral\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WALLET_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SOLO_MARGIN_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UNISWAP_WRAPPER\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cup\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_gasCost\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TUB_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SaverProxyMonitor","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://35ad83cfc2c92a26af07847e8ef8e9657c3aa0e6a68fd4e5e2b0a67d116274ab"}]}