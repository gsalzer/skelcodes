{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.11;\r\n\r\n// Vision.Network 100G Token v2.0\r\n//\r\n// Upgraded in Aug 2019\r\n//\r\n// More info:\r\n//   https://vision.network\r\n//   https://voken.io\r\n//\r\n// Contact us:\r\n//   support@vision.network\r\n//   support@voken.io\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow checks.\r\n */\r\nlibrary SafeMath256 {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     *\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard\r\n */\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of an allocation contract.\r\n */\r\ninterface IAllocation {\r\n    function reservedOf(address account) external view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n */\r\ncontract Ownable {\r\n    address internal _owner;\r\n    address internal _newOwner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event OwnershipAccepted(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addresses of the current and new owner.\r\n     */\r\n    function owner() public view returns (address currentOwner, address newOwner) {\r\n        currentOwner = _owner;\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     *\r\n     * IMPORTANT: Need to run {acceptOwnership} by the new owner.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _newOwner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     *\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Accept ownership of the contract.\r\n     *\r\n     * Can only be called by the new owner.\r\n     */\r\n    function acceptOwnership() public {\r\n        require(msg.sender == _newOwner, \"Ownable: caller is not the new owner address\");\r\n        require(msg.sender != address(0), \"Ownable: caller is the zero address\");\r\n\r\n        emit OwnershipAccepted(_owner, msg.sender);\r\n        _owner = msg.sender;\r\n        _newOwner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Rescue compatible ERC20 Token\r\n     *\r\n     * Can only be called by the current owner.\r\n     */\r\n    function rescueTokens(address tokenAddr, address recipient, uint256 amount) external onlyOwner {\r\n        IERC20 _token = IERC20(tokenAddr);\r\n        require(recipient != address(0), \"Rescue: recipient is the zero address\");\r\n        uint256 balance = _token.balanceOf(address(this));\r\n\r\n        require(balance >= amount, \"Rescue: amount exceeds balance\");\r\n        _token.transfer(recipient, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw Ether\r\n     *\r\n     * Can only be called by the current owner.\r\n     */\r\n    function withdrawEther(address payable recipient, uint256 amount) external onlyOwner {\r\n        require(recipient != address(0), \"Withdraw: recipient is the zero address\");\r\n\r\n        uint256 balance = address(this).balance;\r\n\r\n        require(balance >= amount, \"Withdraw: amount exceeds balance\");\r\n        recipient.transfer(amount);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n    bool private _paused;\r\n\r\n    event Paused();\r\n    event Unpaused();\r\n\r\n\r\n    /**\r\n     * @dev Constructor\r\n     */\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @return Returns true if the contract is paused, false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets paused state.\r\n     *\r\n     * Can only be called by the current owner.\r\n     */\r\n    function setPaused(bool value) external onlyOwner {\r\n        _paused = value;\r\n\r\n        if (_paused) {\r\n            emit Paused();\r\n        } else {\r\n            emit Unpaused();\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Voken Main Contract v2.0\r\n */\r\ncontract Voken2 is Ownable, Pausable, IERC20 {\r\n    using SafeMath256 for uint256;\r\n    using Roles for Roles.Role;\r\n\r\n    Roles.Role private _globals;\r\n    Roles.Role private _proxies;\r\n    Roles.Role private _minters;\r\n\r\n    string private _name = \"Vision.Network 100G Token v2.0\";\r\n    string private _symbol = \"Voken2.0\";\r\n    uint8 private _decimals = 6;\r\n    uint256 private _cap;\r\n    uint256 private _totalSupply;\r\n\r\n    bool private _whitelistingMode;\r\n    bool private _safeMode;\r\n    uint16 private _BURNING_PERMILL;\r\n    uint256 private _whitelistCounter;\r\n    uint256 private _WHITELIST_TRIGGER = 1001000000;     // 1001 VOKEN for sign-up trigger\r\n    uint256 private _WHITELIST_REFUND = 1000000;         //    1 VOKEN for success signal\r\n    uint256[15] private _WHITELIST_REWARDS = [\r\n        300000000,  // 300 Voken for Level.1\r\n        200000000,  // 200 Voken for Level.2\r\n        100000000,  // 100 Voken for Level.3\r\n        100000000,  // 100 Voken for Level.4\r\n        100000000,  // 100 Voken for Level.5\r\n        50000000,   //  50 Voken for Level.6\r\n        40000000,   //  40 Voken for Level.7\r\n        30000000,   //  30 Voken for Level.8\r\n        20000000,   //  20 Voken for Level.9\r\n        10000000,   //  10 Voken for Level.10\r\n        10000000,   //  10 Voken for Level.11\r\n        10000000,   //  10 Voken for Level.12\r\n        10000000,   //  10 Voken for Level.13\r\n        10000000,   //  10 Voken for Level.14\r\n        10000000    //  10 Voken for Level.15\r\n    ];\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => IAllocation[]) private _allocations;\r\n    mapping (address => mapping (address => bool)) private _addressAllocations;\r\n\r\n    mapping (address => address) private _referee;\r\n    mapping (address => address[]) private _referrals;\r\n\r\n    event Donate(address indexed account, uint256 amount);\r\n    event Burn(address indexed account, uint256 amount);\r\n    event ProxyAdded(address indexed account);\r\n    event ProxyRemoved(address indexed account);\r\n    event GlobalAdded(address indexed account);\r\n    event GlobalRemoved(address indexed account);\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n    event Mint(address indexed account, uint256 amount);\r\n    event MintWithAllocation(address indexed account, uint256 amount, IAllocation indexed allocationContract);\r\n    event WhitelistSignUpEnabled();\r\n    event WhitelistSignUpDisabled();\r\n    event WhitelistSignUp(address indexed account, address indexed refereeAccount);\r\n    event SafeModeOn();\r\n    event SafeModeOff();\r\n    event BurningModeOn();\r\n    event BurningModeOff();\r\n\r\n\r\n    /**\r\n     * @dev Returns true if the `account` has the Global role\r\n     */\r\n    function isGlobal(address account) public view returns (bool) {\r\n        return _globals.has(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Give an `account` access to the Global role.\r\n     *\r\n     * Can only be called by the current owner.\r\n     */\r\n    function addGlobal(address account) public onlyOwner {\r\n        _globals.add(account);\r\n        emit GlobalAdded(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an `account` access from the Global role.\r\n     *\r\n     * Can only be called by the current owner.\r\n     */\r\n    function removeGlobal(address account) public onlyOwner {\r\n        _globals.remove(account);\r\n        emit GlobalRemoved(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by account which is not a proxy.\r\n     */\r\n    modifier onlyProxy() {\r\n        require(isProxy(msg.sender), \"ProxyRole: caller does not have the Proxy role\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the `account` has the Proxy role.\r\n     */\r\n    function isProxy(address account) public view returns (bool) {\r\n        return _proxies.has(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Give an `account` access to the Proxy role.\r\n     *\r\n     * Can only be called by the current owner.\r\n     */\r\n    function addProxy(address account) public onlyOwner {\r\n        _proxies.add(account);\r\n        emit ProxyAdded(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an `account` access from the Proxy role.\r\n     *\r\n     * Can only be called by the current owner.\r\n     */\r\n    function removeProxy(address account) public onlyOwner {\r\n        _proxies.remove(account);\r\n        emit ProxyRemoved(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by account which is not a minter.\r\n     */\r\n    modifier onlyMinter() {\r\n        require(isMinter(msg.sender), \"MinterRole: caller does not have the Minter role\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the `account` has the Minter role\r\n     */\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minters.has(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Give an `account` access to the Minter role.\r\n     *\r\n     * Can only be called by the current owner.\r\n     */\r\n    function addMinter(address account) public onlyOwner {\r\n        _minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an `account` access from the Minter role.\r\n     *\r\n     * Can only be called by the current owner.\r\n     */\r\n    function removeMinter(address account) public onlyOwner {\r\n        _minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Constructor\r\n     */\r\n    constructor () public {\r\n        addGlobal(address(this));\r\n        addProxy(msg.sender);\r\n        addMinter(msg.sender);\r\n        setWhitelistingMode(true);\r\n        setSafeMode(true);\r\n        setBurningMode(10);\r\n\r\n        _cap = 35000000000000000;   // 35 billion cap, that is 35000000000.000000\r\n\r\n        _whitelistCounter = 1;\r\n        _referee[msg.sender] = msg.sender;\r\n        emit WhitelistSignUp(msg.sender, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Donate\r\n     */\r\n    function () external payable {\r\n        if (msg.value > 0) {\r\n            emit Donate(msg.sender, msg.value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the full name of VOKEN.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of VOKEN.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the cap on VOKEN's total supply.\r\n     */\r\n    function cap() public view returns (uint256) {\r\n        return _cap;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the amount of VOKEN in existence.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the amount of VOKEN owned by `account`.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the reserved amount of VOKEN by `account`.\r\n     */\r\n    function reservedOf(address account) public view returns (uint256 reserved) {\r\n        uint256 __len = _allocations[account].length;\r\n        if (__len > 0) {\r\n            for (uint256 i = 0; i < __len; i++) {\r\n                reserved = reserved.add(_allocations[account][i].reservedOf(account));\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the available amount of VOKEN by `account` and a certain `amount`.\r\n     */\r\n    function _getAvailableAmount(address account, uint256 amount) private view returns (uint256) {\r\n        uint256 __available = balanceOf(account).sub(reservedOf(account));\r\n\r\n        if (amount <= __available) {\r\n            return amount;\r\n        }\r\n\r\n        else if (__available > 0) {\r\n            return __available;\r\n        }\r\n\r\n        revert(\"VOKEN: available balance is zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the allocation contracts' addresses on `account`.\r\n     */\r\n    function allocations(address account) public view returns (IAllocation[] memory contracts) {\r\n        contracts = _allocations[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` VOKEN from the caller's account to `recipient`.\r\n     *\r\n     * Auto handle {WhitelistSignUp} when `amount` is a specific value.\r\n     * Auto handle {Burn} when `recipient` is a `address(this)` or `address(0)`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public whenNotPaused returns (bool) {\r\n        // Whitelist sign-up\r\n        if (amount == _WHITELIST_TRIGGER && _whitelistingMode && whitelisted(recipient) && !whitelisted(msg.sender)) {\r\n            _move(msg.sender, address(this), _WHITELIST_TRIGGER);\r\n            _whitelist(msg.sender, recipient);\r\n            _distributeForWhitelist(msg.sender);\r\n        }\r\n\r\n        // Burn\r\n        else if (recipient == address(this) || recipient == address(0)) {\r\n            _burn(msg.sender, amount);\r\n        }\r\n\r\n        // Normal Transfer\r\n        else {\r\n            _transfer(msg.sender, recipient, _getAvailableAmount(msg.sender, amount));\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` VOKEN from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Auto handle {Burn} when `recipient` is a `address(this)` or `address(0)`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public whenNotPaused returns (bool) {\r\n        // Burn\r\n        if (recipient == address(this) || recipient == address(0)) {\r\n            _burn(msg.sender, amount);\r\n        }\r\n\r\n        // Normal transfer\r\n        else {\r\n            uint256 __amount = _getAvailableAmount(sender, amount);\r\n\r\n            _transfer(sender, recipient, __amount);\r\n            _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(__amount, \"VOKEN: transfer amount exceeds allowance\"));\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` VOKEN from the caller.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     */\r\n    function burn(uint256 amount) public whenNotPaused returns (bool) {\r\n        _burn(msg.sender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Destoys `amount` VOKEN from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public whenNotPaused returns (bool) {\r\n        _burn(account, amount);\r\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount, \"VOKEN: burn amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates `amount` VOKEN and assigns them to `account`.\r\n     *\r\n     * Can only be called by a minter.\r\n     */\r\n    function mint(address account, uint256 amount) public whenNotPaused onlyMinter returns (bool) {\r\n        _mint(account, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates `amount` VOKEN and assigns them to `account`.\r\n     *\r\n     * With an `allocationContract`\r\n     *\r\n     * Can only be called by a minter.\r\n     */\r\n    function mintWithAllocation(address account, uint256 amount, IAllocation allocationContract) public whenNotPaused onlyMinter returns (bool) {\r\n        _mintWithAllocation(account, amount, allocationContract);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remaining number of VOKEN that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}.\r\n     * This is zero by default.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public whenNotPaused returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public whenNotPaused returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \"VOKEN: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves VOKEN `amount` from `sender` to `recipient`.\r\n     *\r\n     * May reject non-whitelist transaction.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) private {\r\n        require(recipient != address(0), \"VOKEN: recipient is the zero address\");\r\n\r\n        if (_safeMode && !isGlobal(sender) && !isGlobal(recipient)) {\r\n            require(whitelisted(sender), \"VOKEN: sender is not whitelisted\");\r\n        }\r\n\r\n        if (_BURNING_PERMILL > 0) {\r\n            uint256 __burning = amount.mul(_BURNING_PERMILL).div(1000);\r\n            uint256 __amount = amount.sub(__burning);\r\n\r\n            _balances[sender] = _balances[sender].sub(__amount);\r\n            _balances[recipient] = _balances[recipient].add(__amount);\r\n            emit Transfer(sender, recipient, __amount);\r\n\r\n            _burn(sender, __burning);\r\n        }\r\n\r\n        else {\r\n            _balances[sender] = _balances[sender].sub(amount);\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n            emit Transfer(sender, recipient, amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Moves VOKEN `amount` from `sender` to `recipient`.\r\n     *\r\n     * May reject non-whitelist transaction.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _move(address sender, address recipient, uint256 amount) private {\r\n        require(recipient != address(0), \"VOKEN: recipient is the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Creates `amount` VOKEN and assigns them to `account`, increasing the total supply.\r\n     *\r\n     * Emits a {Mint} event.\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) private {\r\n        require(_totalSupply.add(amount) <= _cap, \"VOKEN: total supply cap exceeded\");\r\n        require(account != address(0), \"VOKEN: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Mint(account, amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Creates `amount` VOKEN and assigns them to `account`, increasing the total supply.\r\n     *\r\n     * With an `allocationContract`\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     */\r\n    function _mintWithAllocation(address account, uint256 amount, IAllocation allocationContract) private {\r\n        require(_totalSupply.add(amount) <= _cap, \"VOKEN: total supply cap exceeded\");\r\n        require(account != address(0), \"VOKEN: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n\r\n        if (!_addressAllocations[account][address(allocationContract)]) {\r\n            _allocations[account].push(allocationContract);\r\n            _addressAllocations[account][address(allocationContract)] = true;\r\n        }\r\n\r\n        emit MintWithAllocation(account, amount, allocationContract);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` VOKEN from `account`, reducing the total supply.\r\n     *\r\n     * Emits a {Burn} event.\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     */\r\n    function _burn(address account, uint256 amount) private {\r\n        uint256 __amount = _getAvailableAmount(account, amount);\r\n\r\n        _balances[account] = _balances[account].sub(__amount, \"VOKEN: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(__amount);\r\n        _cap = _cap.sub(__amount);\r\n        emit Burn(account, __amount);\r\n        emit Transfer(account, address(0), __amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s VOKEN.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) private {\r\n        require(owner != address(0), \"VOKEN: approve from the zero address\");\r\n        require(spender != address(0), \"VOKEN: approve to the zero address\");\r\n        require(value <= _getAvailableAmount(spender, value), \"VOKEN: approve exceeds available balance\");\r\n\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the full name of VOKEN.\r\n     *\r\n     * Can only be called by the current owner.\r\n     */\r\n    function rename(string calldata value) external onlyOwner {\r\n        _name = value;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the symbol of VOKEN.\r\n     *\r\n     * Can only be called by the current owner.\r\n     */\r\n    function setSymbol(string calldata value) external onlyOwner {\r\n        _symbol = value;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the `account` is whitelisted.\r\n     */\r\n    function whitelisted(address account) public view returns (bool) {\r\n        return _referee[account] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the whitelist counter.\r\n     */\r\n    function whitelistCounter() public view returns (uint256) {\r\n        return _whitelistCounter;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the sign-up for whitelist is allowed.\r\n     */\r\n    function whitelistingMode() public view returns (bool) {\r\n        return _whitelistingMode;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the referee of an `account`.\r\n     */\r\n    function whitelistReferee(address account) public view returns (address) {\r\n        return _referee[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns referrals of a `account`\r\n     */\r\n    function whitelistReferrals(address account) public view returns (address[] memory) {\r\n        return _referrals[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the referrals count of an `account`.\r\n     */\r\n    function whitelistReferralsCount(address account) public view returns (uint256) {\r\n        return _referrals[account].length;\r\n    }\r\n\r\n    /**\r\n     * @dev Push whitelist, batch.\r\n     *\r\n     * Can only be called by a proxy.\r\n     */\r\n    function pushWhitelist(address[] memory accounts, address[] memory refereeAccounts) public onlyProxy returns (bool) {\r\n        require(accounts.length == refereeAccounts.length, \"VOKEN Whitelist: batch length is not match\");\r\n\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            if (accounts[i] != address(0) && !whitelisted(accounts[i]) && whitelisted(refereeAccounts[i])) {\r\n                _whitelist(accounts[i], refereeAccounts[i]);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Whitelist an `account` with a `refereeAccount`.\r\n     *\r\n     * Emits {WhitelistSignUp} event.\r\n     */\r\n    function _whitelist(address account, address refereeAccount) private {\r\n        require(!whitelisted(account), \"Whitelist: account is already whitelisted\");\r\n        require(whitelisted(refereeAccount), \"Whitelist: refereeAccount is not whitelisted\");\r\n\r\n        _referee[account] = refereeAccount;\r\n        _referrals[refereeAccount].push(account);\r\n        _whitelistCounter = _whitelistCounter.add(1);\r\n\r\n        emit WhitelistSignUp(account, refereeAccount);\r\n    }\r\n\r\n    /**\r\n     * @dev Distribute.\r\n     */\r\n    function _distributeForWhitelist(address account) private {\r\n        uint256 __distributedAmount;\r\n        uint256 __burnAmount;\r\n\r\n        address __account = account;\r\n        for(uint i = 0; i < _WHITELIST_REWARDS.length; i++) {\r\n            address __referee = _referee[__account];\r\n\r\n            if (__referee != address(0) && __referee != __account && _referrals[__referee].length > i) {\r\n                _move(address(this), __referee, _WHITELIST_REWARDS[i]);\r\n                __distributedAmount = __distributedAmount.add(_WHITELIST_REWARDS[i]);\r\n            }\r\n\r\n            __account = __referee;\r\n        }\r\n\r\n        // Burn\r\n        __burnAmount = _WHITELIST_TRIGGER.sub(_WHITELIST_REFUND).sub(__distributedAmount);\r\n        if (__burnAmount > 0) {\r\n            _burn(address(this), __burnAmount);\r\n        }\r\n\r\n        // Transfer VOKEN refund as a success signal.\r\n        _move(address(this), account, _WHITELIST_REFUND);\r\n    }\r\n\r\n    /**\r\n     * @dev Enable/disable sign-up for whitelist.\r\n     *\r\n     * Can only be called by the current owner.\r\n     */\r\n    function setWhitelistingMode(bool value) public onlyOwner {\r\n        _whitelistingMode = value;\r\n\r\n        if (_whitelistingMode) {\r\n            emit WhitelistSignUpEnabled();\r\n        } else {\r\n            emit WhitelistSignUpDisabled();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if a transaction from non-whitelisted address is not allowed.\r\n     */\r\n    function safeMode() public view returns (bool) {\r\n        return _safeMode;\r\n    }\r\n\r\n    /**\r\n     * @dev Disable/enable non-whitelist transaction.\r\n     *\r\n     * Can only be called by the current owner.\r\n     */\r\n    function setSafeMode(bool value) public onlyOwner {\r\n        _safeMode = value;\r\n\r\n        if (_safeMode) {\r\n            emit SafeModeOn();\r\n        } else {\r\n            emit SafeModeOff();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns {bool}, {value} of burning mode.\r\n     */\r\n    function burningMode() public view returns (bool, uint16) {\r\n        return (_BURNING_PERMILL > 0, _BURNING_PERMILL);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the burning mode by `value`.\r\n     */\r\n    function setBurningMode(uint16 value) public onlyOwner {\r\n        require(value <= 1000, \"BurningMode: value is greater than 1000\");\r\n\r\n        if (value > 0) {\r\n            _BURNING_PERMILL = value;\r\n            emit BurningModeOn();\r\n        }\r\n        else {\r\n            _BURNING_PERMILL = 0;\r\n            emit BurningModeOff();\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setWhitelistingMode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistingMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burningMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addProxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"refereeAccounts\",\"type\":\"address[]\"}],\"name\":\"pushWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"whitelistReferralsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setSafeMode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"whitelistReferee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"allocations\",\"outputs\":[{\"internalType\":\"contract IAllocation[]\",\"name\":\"contracts\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"rename\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"currentOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addGlobal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isGlobal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"value\",\"type\":\"uint16\"}],\"name\":\"setBurningMode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"safeMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeGlobal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeProxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"whitelistReferrals\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"reservedOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserved\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IAllocation\",\"name\":\"allocationContract\",\"type\":\"address\"}],\"name\":\"mintWithAllocation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Donate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ProxyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ProxyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"GlobalAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"GlobalRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IAllocation\",\"name\":\"allocationContract\",\"type\":\"address\"}],\"name\":\"MintWithAllocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"WhitelistSignUpEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"WhitelistSignUpDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"refereeAccount\",\"type\":\"address\"}],\"name\":\"WhitelistSignUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SafeModeOn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SafeModeOff\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BurningModeOn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BurningModeOff\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipAccepted\",\"type\":\"event\"}]","ContractName":"Voken2","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4e26dd44b55a6a43ffa435fee457b7473bdf9e5207a533c9bf8b7c7dac94d4cc"}]}