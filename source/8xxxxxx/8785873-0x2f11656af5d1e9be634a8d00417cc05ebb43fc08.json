{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/lib/interface/IRouterRegistry.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n\r\n/**\r\n * @title RouterRegistry interface for routing\r\n */\r\ninterface IRouterRegistry {\r\n    enum RouterOperation { Add, Remove, Refresh }\r\n\r\n    function registerRouter() external;\r\n\r\n    function deregisterRouter() external;\r\n\r\n    function refreshRouter() external;\r\n\r\n    event RouterUpdated(RouterOperation indexed op, address indexed routerAddress);\r\n}\r\n\r\n// File: contracts/RouterRegistry.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n\r\n/**\r\n * @title Router Registry contract for external routers to join the Celer Network\r\n * @notice Implementation of a global registry to enable external routers to join\r\n */\r\ncontract RouterRegistry is IRouterRegistry {\r\n    // mapping to store the registered routers address as key \r\n    // and the lastest registered/refreshed block number as value\r\n    mapping(address => uint) public routerInfo;\r\n\r\n    /**\r\n     * @notice An external router could register to join the Celer Network\r\n     */\r\n    function registerRouter() external {\r\n        require(routerInfo[msg.sender] == 0, \"Router address already exists\");\r\n\r\n        routerInfo[msg.sender] = block.number;\r\n\r\n        emit RouterUpdated(RouterOperation.Add, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice An in-network router could deregister to leave the network\r\n     */\r\n    function deregisterRouter() external {\r\n        require(routerInfo[msg.sender] != 0, \"Router address does not exist\");\r\n\r\n        delete routerInfo[msg.sender];\r\n\r\n        emit RouterUpdated(RouterOperation.Remove, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Refresh the existed router's block number\r\n     */\r\n    function refreshRouter() external {\r\n        require(routerInfo[msg.sender] != 0, \"Router address does not exist\");\r\n\r\n        routerInfo[msg.sender] = block.number;\r\n\r\n        emit RouterUpdated(RouterOperation.Refresh, msg.sender);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"registerRouter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refreshRouter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"routerInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deregisterRouter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"op\",\"type\":\"uint8\"},{\"indexed\":true,\"name\":\"routerAddress\",\"type\":\"address\"}],\"name\":\"RouterUpdated\",\"type\":\"event\"}]","ContractName":"RouterRegistry","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"byzantium","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://a6cb3406d5c8b09132b542c813a59bbd1dc3ae874cfeed6b4d800c190e6ffff1"}]}