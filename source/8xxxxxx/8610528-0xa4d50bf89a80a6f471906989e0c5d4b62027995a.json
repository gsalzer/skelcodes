{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the `IERC20` interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using `_mint`.\r\n * For a generic mechanism see `ERC20Mintable`.\r\n *\r\n * *For a detailed writeup see our guide [How to implement supply\r\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See `IERC20.approve`.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See `IERC20.totalSupply`.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.balanceOf`.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transfer`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.allowance`.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.approve`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transferFrom`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of `ERC20`;\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `value`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to `transfer`, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a `Transfer` event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n     /**\r\n     * @dev Destoys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a `Transfer` event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an `Approval` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See `_burn` and `_approve`.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/Roles.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/roles/PauserRole.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract PauserRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event PauserAdded(address indexed account);\r\n    event PauserRemoved(address indexed account);\r\n\r\n    Roles.Role private _pausers;\r\n\r\n    constructor () internal {\r\n        _addPauser(msg.sender);\r\n    }\r\n\r\n    modifier onlyPauser() {\r\n        require(isPauser(msg.sender), \"PauserRole: caller does not have the Pauser role\");\r\n        _;\r\n    }\r\n\r\n    function isPauser(address account) public view returns (bool) {\r\n        return _pausers.has(account);\r\n    }\r\n\r\n    function addPauser(address account) public onlyPauser {\r\n        _addPauser(account);\r\n    }\r\n\r\n    function renouncePauser() public {\r\n        _removePauser(msg.sender);\r\n    }\r\n\r\n    function _addPauser(address account) internal {\r\n        _pausers.add(account);\r\n        emit PauserAdded(account);\r\n    }\r\n\r\n    function _removePauser(address account) internal {\r\n        _pausers.remove(account);\r\n        emit PauserRemoved(account);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract Pausable is PauserRole {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\r\n     * to the deployer.\r\n     */\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to pause, triggers stopped state.\r\n     */\r\n    function pause() public onlyPauser whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to unpause, returns to normal state.\r\n     */\r\n    function unpause() public onlyPauser whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n}\r\n\r\n// File: contracts/ReferralTracker.sol\r\n\r\npragma solidity 0.5.10;\r\n\r\n\r\n\r\n\r\n\r\ncontract ReferralTracker is Ownable, Pausable {\r\n    using SafeMath for uint256;\r\n    uint256 public REFERRAL_BONUS = 100000000000000000000;\r\n\r\n    mapping(address => uint256) public unclaimedReferrals;\r\n    address public registryAddress;\r\n    address public admin;\r\n    ERC20 token;\r\n\r\n    event ReferralRegistered(\r\n        address referralAddress,\r\n        address indexed referrer,\r\n        address indexed user\r\n    );\r\n    event ReferralBonusWithdrawn(\r\n        address referralAddress,\r\n        address indexed referrer,\r\n        uint256 amount,\r\n        uint256 currentTrackerBalance\r\n    );\r\n    event FundsAdded(address referralAddress, address fundsDepositor, uint256 amount);\r\n    event FundsRemoved(address referralAddress, address fundsWithdrawer, uint256 amount);\r\n\r\n    constructor(address registryAddress_, address tokenAdress) public {\r\n        registryAddress = registryAddress_;\r\n        token = ERC20(tokenAdress);\r\n    }\r\n\r\n    modifier onlyRegistry() {\r\n        require(msg.sender == registryAddress, \"the caller is not the registry\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin, \"the caller is not the admin\");\r\n        _;\r\n    }\r\n\r\n    function setAdministrator(address _admin) public onlyOwner {\r\n        admin = _admin;\r\n    }\r\n\r\n    function addFunds(uint256 amount) public onlyAdmin whenNotPaused {\r\n        token.transferFrom(msg.sender, address(this), amount);\r\n        emit FundsAdded(address(this), msg.sender, amount);\r\n    }\r\n\r\n    function removeFunds(address to) public onlyAdmin {\r\n        uint256 amount = token.balanceOf(address(this));\r\n        require(amount > 0, \"ReferralTracker has no funds to withdraw\");\r\n        token.transfer(to, amount);\r\n        emit FundsRemoved(address(this), msg.sender, amount);\r\n    }\r\n\r\n    function registerReferral(address referrer, address user) public onlyRegistry whenNotPaused {\r\n        unclaimedReferrals[referrer] = unclaimedReferrals[referrer].add(1);\r\n\r\n        emit ReferralRegistered(address(this), referrer, user);\r\n    }\r\n\r\n    function withdraw(address to) public whenNotPaused {\r\n        require(unclaimedReferrals[msg.sender] > 0, \"no referrals to claim\");\r\n        uint256 trackerBalance = token.balanceOf(address(this));\r\n        uint256 amount = REFERRAL_BONUS * unclaimedReferrals[msg.sender];\r\n\r\n        require(trackerBalance >= amount, \"Not enough funds\");\r\n        delete unclaimedReferrals[msg.sender];\r\n\r\n        token.transfer(to, amount);\r\n\r\n        emit ReferralBonusWithdrawn(address(this), msg.sender, amount, trackerBalance);\r\n    }\r\n\r\n    function getTrackerBalance() public view returns (uint256) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n}\r\n\r\n// File: contracts/KYCRegistry.sol\r\n\r\npragma solidity 0.5.10;\r\n\r\n\r\ncontract KYCRegistry is Ownable {\r\n    mapping(address => bool) public KYCConfirmed;\r\n    address public admin;\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin, \"caller is not the admin\");\r\n        _;\r\n    }\r\n\r\n    event RemovedFromKYC(address indexed user);\r\n    event AddedToKYC(address indexed user);\r\n\r\n    function isConfirmed(address addr) public view returns (bool) {\r\n        return KYCConfirmed[addr];\r\n    }\r\n\r\n    function setAdministrator(address _admin) public onlyOwner {\r\n        admin = _admin;\r\n    }\r\n\r\n    function removeAddressFromKYC(address addr) public onlyAdmin {\r\n        require(KYCConfirmed[addr], \"Address not KYCed\");\r\n        KYCConfirmed[addr] = false;\r\n        emit RemovedFromKYC(addr);\r\n    }\r\n\r\n    function addAddressToKYC(address addr) public onlyAdmin {\r\n        require(!KYCConfirmed[addr], \"Address already KYCed\");\r\n        KYCConfirmed[addr] = true;\r\n        emit AddedToKYC(addr);\r\n    }\r\n}\r\n\r\n// File: contracts/DepositRegistry.sol\r\n\r\npragma solidity 0.5.10;\r\n\r\n\r\n\r\n\r\n\r\ncontract DepositRegistry is Ownable {\r\n    struct Deposit {\r\n        bool deposited;\r\n        bool unlockedForWithdrawal;\r\n    }\r\n    mapping(address => Deposit) deposits;\r\n    address public admin;\r\n    uint256 DEPOSIT_AMNT = 200000000000000000000;\r\n    ERC20 token;\r\n\r\n    KYCRegistry kyc;\r\n    ReferralTracker public ref;\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin, \"caller is not the admin\");\r\n        _;\r\n    }\r\n\r\n    event UserDepositCompleted(address depositRegistry, address indexed user);\r\n    event UserWithdrawnCompleted(address depositRegistry, address indexed user);\r\n    event AddressUnlockedForWithdrawal(address depositRegistry, address indexed user);\r\n\r\n    constructor(address tokenAddress, address kycAddress) public {\r\n        token = ERC20(tokenAddress);\r\n        kyc = KYCRegistry(kycAddress);\r\n    }\r\n\r\n    function setReferralTracker(address contractAddress) public onlyOwner {\r\n        ref = ReferralTracker(contractAddress);\r\n    }\r\n\r\n    function setAdministrator(address _admin) public onlyOwner {\r\n        admin = _admin;\r\n    }\r\n\r\n    function depositFor(address from) public {\r\n        require(deposits[from].deposited == false, \"already deposited\");\r\n        require(\r\n            token.allowance(from, address(this)) >= DEPOSIT_AMNT,\r\n            \"address not approved amount\"\r\n        );\r\n\r\n        deposits[from].deposited = true;\r\n        token.transferFrom(from, address(this), DEPOSIT_AMNT);\r\n\r\n        emit UserDepositCompleted(address(this), from);\r\n    }\r\n\r\n    function depositForWithReferral(address from, address referrer) public {\r\n        require(from != referrer, \"can not refer to itself\");\r\n        require(deposits[referrer].deposited, \"referrer has not deposited\");\r\n        require(deposits[from].deposited == false, \"alredy deposited\");\r\n        require(\r\n            token.allowance(from, address(this)) >= DEPOSIT_AMNT,\r\n            \"address not approved amount\"\r\n        );\r\n        require(msg.sender == from, \"cannot deposit with a referral from another address\");\r\n\r\n        deposits[from].deposited = true;\r\n\r\n        ref.registerReferral(referrer, msg.sender);\r\n\r\n        token.transferFrom(from, address(this), DEPOSIT_AMNT);\r\n\r\n        emit UserDepositCompleted(address(this), from);\r\n    }\r\n\r\n    function withdraw(address to) public {\r\n        require(deposits[msg.sender].deposited, \"address not deposited\");\r\n        require(\r\n            deposits[msg.sender].unlockedForWithdrawal || kyc.isConfirmed(msg.sender),\r\n            \"cannot withdraw without KYC or unlocked\"\r\n        );\r\n\r\n        delete deposits[msg.sender];\r\n        token.transfer(to, DEPOSIT_AMNT);\r\n        emit UserWithdrawnCompleted(address(this), msg.sender);\r\n    }\r\n\r\n    function unlockAddressForWithdrawal(address user) public onlyAdmin {\r\n        require(deposits[user].deposited, \"address has not deposited\");\r\n        deposits[user].unlockedForWithdrawal = true;\r\n        emit AddressUnlockedForWithdrawal(address(this), user);\r\n    }\r\n\r\n    function hasDeposited(address user) public view returns (bool) {\r\n        return deposits[user].deposited;\r\n    }\r\n\r\n    function isUnlocked(address user) public view returns (bool) {\r\n        return deposits[user].unlockedForWithdrawal;\r\n    }\r\n}\r\n\r\n// File: contracts/Authorization.sol\r\n\r\npragma solidity 0.5.10;\r\n\r\n\r\n\r\n\r\ncontract Authorization is Ownable {\r\n    KYCRegistry kyc;\r\n    DepositRegistry deposit;\r\n\r\n    constructor(address kycAddr, address depositAddr) public {\r\n        kyc = KYCRegistry(kycAddr);\r\n        deposit = DepositRegistry(depositAddr);\r\n    }\r\n\r\n    function hasDeposited(address user) public view returns (bool) {\r\n        return deposit.hasDeposited(user);\r\n    }\r\n\r\n    function isKYCConfirmed(address user) public view returns (bool) {\r\n        return kyc.isConfirmed(user);\r\n    }\r\n}\r\n\r\n// File: contracts/DAIProxyInterface.sol\r\n\r\npragma solidity 0.5.10;\r\n\r\ninterface DAIProxyInterface {\r\n    function fund(address loanAddress, uint256 fundingAmount) external;\r\n    function repay(address loanAddress, uint256 repaymentAmount) external;\r\n}\r\n\r\n// File: contracts/LoanContractInterface.sol\r\n\r\npragma solidity 0.5.10;\r\n\r\ninterface LoanContractInterface {\r\n    function onFundingReceived(address lender, uint256 amount) external returns (bool);\r\n    function withdrawRepayment() external;\r\n    function withdrawLoan() external;\r\n    function onRepaymentReceived(address from, uint256 amount) external returns (bool);\r\n    function getInterestRate() external view returns (uint256);\r\n    function calculateValueWithInterest(uint256 value) external view returns (uint256);\r\n    function getMaxAmount() external view returns (uint256);\r\n    function getAuctionBalance() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/LoanContract.sol\r\n\r\npragma solidity 0.5.10;\r\n\r\n\r\n\r\n\r\n\r\ncontract LoanContract is LoanContractInterface {\r\n    using SafeMath for uint256;\r\n    ERC20 DAIToken;\r\n    DAIProxyInterface proxy;\r\n    address public originator;\r\n    address public administrator;\r\n\r\n    uint256 public minAmount;\r\n    uint256 public maxAmount;\r\n\r\n    uint256 public auctionEndTimestamp;\r\n    uint256 public auctionStartTimestamp;\r\n    uint256 public auctionLength;\r\n\r\n    uint256 public lastFundedTimestamp;\r\n\r\n    uint256 public termEndTimestamp;\r\n    uint256 public termLength;\r\n\r\n    uint256 public auctionBalance;\r\n    uint256 public loanWithdrawnAmount;\r\n    uint256 public borrowerDebt; // Amount borrower need to repay == principal + interests\r\n    uint256 public maxInterestRate;\r\n    uint256 internal interestRate;\r\n    uint256 public operatorFee;\r\n    uint256 public operatorBalance;\r\n\r\n    bool public loanWithdrawn;\r\n    bool public minimumReached;\r\n\r\n    uint256 constant MONTH_SECONDS = 2592000;\r\n    uint256 constant ONE_HUNDRED = 100000000000000000000;\r\n\r\n    struct Position {\r\n        uint256 bidAmount;\r\n        bool withdrawn;\r\n    }\r\n\r\n    mapping(address => Position) public lenderPosition;\r\n\r\n    enum LoanState {\r\n        CREATED, // accepts bids until timelimit initial state\r\n        FAILED_TO_FUND, // not fully funded in timelimit\r\n        ACTIVE, // fully funded, inside timelimit\r\n        DEFAULTED, // not repaid in time loanRepaymentLength\r\n        REPAID, // the borrower repaid in full, lenders have yet to reclaim funds\r\n        CLOSED, // from failed_to_fund => last lender to withdraw triggers change / from repaid => fully witdrawn by lenders\r\n        FROZEN // when admin unlocks withdrawals\r\n    }\r\n\r\n    LoanState public currentState;\r\n\r\n    event LoanCreated(\r\n        address indexed contractAddr,\r\n        address indexed originator,\r\n        uint256 minAmount,\r\n        uint256 maxAmount,\r\n        uint256 maxInterestRate,\r\n        uint256 auctionStartTimestamp,\r\n        uint256 auctionEndTimestamp,\r\n        address indexed administrator,\r\n        uint256 operatorFee\r\n    );\r\n\r\n    event MinimumFundingReached(address loanAddress, uint256 currentBalance, uint256 interest);\r\n    event FullyFunded(\r\n        address loanAddress,\r\n        uint256 balanceToRepay,\r\n        uint256 auctionBalance,\r\n        uint256 interest,\r\n        uint256 fundedTimestamp\r\n    );\r\n    event Funded(\r\n        address loanAddress,\r\n        address indexed lender,\r\n        uint256 amount,\r\n        uint256 interest,\r\n        uint256 fundedTimestamp\r\n    );\r\n    event LoanRepaid(address loanAddress, uint256 indexed timestampRepaid);\r\n    event RepaymentWithdrawn(address loanAddress, address indexed to, uint256 amount);\r\n    event RefundWithdrawn(address loanAddress, address indexed lender, uint256 amount);\r\n    event FullyRefunded(address loanAddress);\r\n    event FailedToFund(address loanAddress, address indexed lender, uint256 amount);\r\n    event LoanFundsWithdrawn(address loanAddress, address indexed borrower, uint256 amount);\r\n    event LoanDefaulted(address loanAddress);\r\n    event AuctionSuccessful(\r\n        address loanAddress,\r\n        uint256 balanceToRepay,\r\n        uint256 auctionBalance,\r\n        uint256 operatorBalance,\r\n        uint256 interest,\r\n        uint256 fundedTimestamp\r\n    );\r\n    event FundsUnlockedWithdrawn(address loanAddress, address indexed lender, uint256 amount);\r\n    event FullyFundsUnlockedWithdrawn(address loanAddress);\r\n    event LoanFundsUnlocked(uint256 auctionBalance);\r\n    event OperatorWithdrawn(uint256 amount, address administrator);\r\n\r\n    modifier onlyFrozen() {\r\n        require(currentState == LoanState.FROZEN, \"Loan status is not FROZEN\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == administrator, \"Caller is not an administrator\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyCreated() {\r\n        require(currentState == LoanState.CREATED, \"Loan status is not CREATED\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyActive() {\r\n        updateStateMachine();\r\n        require(currentState == LoanState.ACTIVE, \"Loan status is not ACTIVE\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyRepaid() {\r\n        updateStateMachine();\r\n        require(currentState == LoanState.REPAID, \"Loan status is not REPAID\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyFailedToFund() {\r\n        updateStateMachine();\r\n        require(currentState == LoanState.FAILED_TO_FUND, \"Loan status is not FAILED_TO_FUND\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyProxy() {\r\n        require(msg.sender == address(proxy), \"Caller is not the proxy\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOriginator() {\r\n        require(msg.sender == originator, \"Caller is not the originator\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        uint256 _termLength,\r\n        uint256 _minAmount,\r\n        uint256 _maxAmount,\r\n        uint256 _maxInterestRate,\r\n        address _originator,\r\n        address DAITokenAddress,\r\n        address proxyAddress,\r\n        address _administrator,\r\n        uint256 _operatorFee,\r\n        uint256 _auctionLength\r\n    ) public {\r\n        DAIToken = ERC20(DAITokenAddress);\r\n        proxy = DAIProxyInterface(proxyAddress);\r\n        originator = _originator;\r\n        administrator = _administrator;\r\n\r\n        maxInterestRate = _maxInterestRate;\r\n        minAmount = _minAmount;\r\n        maxAmount = _maxAmount;\r\n\r\n        auctionLength = _auctionLength;\r\n        auctionStartTimestamp = block.timestamp;\r\n        auctionEndTimestamp = auctionStartTimestamp + auctionLength;\r\n\r\n        termLength = _termLength;\r\n\r\n        loanWithdrawnAmount = 0;\r\n\r\n        operatorFee = _operatorFee;\r\n\r\n        setState(LoanState.CREATED);\r\n        emit LoanCreated(\r\n            address(this),\r\n            originator,\r\n            minAmount,\r\n            maxAmount,\r\n            maxInterestRate,\r\n            auctionStartTimestamp,\r\n            auctionEndTimestamp,\r\n            administrator,\r\n            operatorFee\r\n        );\r\n    }\r\n\r\n    function getMaxAmount() external view returns (uint256) {\r\n        return maxAmount;\r\n    }\r\n\r\n    function getAuctionBalance() external view returns (uint256) {\r\n        return auctionBalance;\r\n    }\r\n\r\n    function getLenderBidAmount(address lender) external view returns (uint256) {\r\n        return lenderPosition[lender].bidAmount;\r\n    }\r\n\r\n    function getLenderWithdrawn(address lender) external view returns (bool) {\r\n        return lenderPosition[lender].withdrawn;\r\n    }\r\n\r\n    // Notes:\r\n    // - This function does not track if real ERC20 balance has changed. Needs to blindly \"trust\" DaiProxy.\r\n    function onFundingReceived(address lender, uint256 amount)\r\n        external\r\n        onlyCreated\r\n        onlyProxy\r\n        returns (bool)\r\n    {\r\n        if (isAuctionExpired()) {\r\n            if (auctionBalance < minAmount) {\r\n                setState(LoanState.FAILED_TO_FUND);\r\n                emit FailedToFund(address(this), lender, amount);\r\n                return false;\r\n            } else {\r\n                require(setSuccessfulAuction(), \"error while transitioning to successful auction\");\r\n                emit FailedToFund(address(this), lender, amount);\r\n                return false;\r\n            }\r\n        }\r\n        uint256 interest = getInterestRate();\r\n        lenderPosition[lender].bidAmount = lenderPosition[lender].bidAmount.add(amount);\r\n        auctionBalance = auctionBalance.add(amount);\r\n\r\n        lastFundedTimestamp = block.timestamp;\r\n\r\n        if (auctionBalance >= minAmount && !minimumReached) {\r\n            minimumReached = true;\r\n            emit Funded(address(this), lender, amount, interest, lastFundedTimestamp);\r\n            emit MinimumFundingReached(address(this), auctionBalance, interest);\r\n        } else {\r\n            emit Funded(address(this), lender, amount, interest, lastFundedTimestamp);\r\n        }\r\n\r\n        if (auctionBalance == maxAmount) {\r\n            require(setSuccessfulAuction(), \"error while transitioning to successful auction\");\r\n            emit FullyFunded(\r\n                address(this),\r\n                borrowerDebt,\r\n                auctionBalance,\r\n                interest,\r\n                lastFundedTimestamp\r\n            );\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function unlockFundsWithdrawal() external onlyAdmin {\r\n        setState(LoanState.FROZEN);\r\n        emit LoanFundsUnlocked(auctionBalance);\r\n    }\r\n\r\n    function withdrawFees() external onlyAdmin returns (bool) {\r\n        require(loanWithdrawn == true, \"borrower didnt withdraw\");\r\n        require(operatorBalance > 0, \"no funds to withdraw\");\r\n        uint256 allFees = operatorBalance;\r\n        operatorBalance = 0;\r\n        require(DAIToken.transfer(msg.sender, allFees), \"transfer failed\");\r\n        emit OperatorWithdrawn(allFees, msg.sender);\r\n        return true;\r\n    }\r\n\r\n    function withdrawFundsUnlocked() external onlyFrozen {\r\n        require(!loanWithdrawn, \"Loan already withdrawn\");\r\n        require(!lenderPosition[msg.sender].withdrawn, \"Lender already withdrawn\");\r\n        require(lenderPosition[msg.sender].bidAmount > 0, \"Account did not deposit\");\r\n\r\n        lenderPosition[msg.sender].withdrawn = true;\r\n\r\n        loanWithdrawnAmount = loanWithdrawnAmount.add(lenderPosition[msg.sender].bidAmount);\r\n\r\n        require(\r\n            DAIToken.transfer(msg.sender, lenderPosition[msg.sender].bidAmount),\r\n            \"error while transfer\"\r\n        );\r\n\r\n        emit FundsUnlockedWithdrawn(\r\n            address(this),\r\n            msg.sender,\r\n            lenderPosition[msg.sender].bidAmount\r\n        );\r\n\r\n        if (loanWithdrawnAmount == auctionBalance.add(operatorBalance)) {\r\n            setState(LoanState.CLOSED);\r\n            emit FullyFundsUnlockedWithdrawn(address(this));\r\n        }\r\n    }\r\n\r\n    function withdrawRefund() external onlyFailedToFund {\r\n        require(!lenderPosition[msg.sender].withdrawn, \"Lender already withdrawn\");\r\n        require(lenderPosition[msg.sender].bidAmount > 0, \"Account did not deposited.\");\r\n\r\n        lenderPosition[msg.sender].withdrawn = true;\r\n\r\n        loanWithdrawnAmount = loanWithdrawnAmount.add(lenderPosition[msg.sender].bidAmount);\r\n\r\n        emit RefundWithdrawn(address(this), msg.sender, lenderPosition[msg.sender].bidAmount);\r\n\r\n        require(\r\n            DAIToken.transfer(msg.sender, lenderPosition[msg.sender].bidAmount),\r\n            \"error while transfer\"\r\n        );\r\n\r\n        if (loanWithdrawnAmount == auctionBalance) {\r\n            setState(LoanState.CLOSED);\r\n            emit FullyRefunded(address(this));\r\n        }\r\n    }\r\n\r\n    function withdrawRepayment() external onlyRepaid {\r\n        require(!lenderPosition[msg.sender].withdrawn, \"Lender already withdrawn\");\r\n        require(lenderPosition[msg.sender].bidAmount != 0, \"Account did not deposited\");\r\n        uint256 amount = calculateValueWithInterest(lenderPosition[msg.sender].bidAmount);\r\n        lenderPosition[msg.sender].withdrawn = true;\r\n        emit RepaymentWithdrawn(address(this), msg.sender, amount);\r\n\r\n        loanWithdrawnAmount = loanWithdrawnAmount.add(amount);\r\n        require(DAIToken.transfer(msg.sender, amount), \"error while transfer\");\r\n\r\n        if (loanWithdrawnAmount == borrowerDebt) {\r\n            setState(LoanState.CLOSED);\r\n            emit FullyRefunded(address(this));\r\n        }\r\n    }\r\n\r\n    function withdrawLoan() external onlyActive onlyOriginator {\r\n        require(!loanWithdrawn, \"Already withdrawn\");\r\n\r\n        // if (isDefaulted()) {\r\n        //     setState(LoanState.DEFAULTED);\r\n        //     emit LoanDefaulted(address(this));\r\n        //     return;\r\n        // }\r\n\r\n        loanWithdrawn = true;\r\n        emit LoanFundsWithdrawn(address(this), msg.sender, auctionBalance);\r\n        require(DAIToken.transfer(msg.sender, auctionBalance), \"error while transfer\");\r\n    }\r\n\r\n    function onRepaymentReceived(address from, uint256 amount)\r\n        external\r\n        onlyActive\r\n        onlyProxy\r\n        returns (bool)\r\n    {\r\n        require(from == originator, \"from address is not the originator\");\r\n        // require(amount == borrowerDebt, \"Incorrect sum repaid\");\r\n        // require(borrowerDebt != 0, \"Borrower does not have any debt.\");\r\n        require(borrowerDebt == amount, \"Repayment amount is not the same\");\r\n\r\n        // if (isDefaulted()) {\r\n        //     setState(LoanState.DEFAULTED);\r\n        //     emit LoanDefaulted(address(this));\r\n        //     return false;\r\n        // }\r\n\r\n        setState(LoanState.REPAID);\r\n        emit LoanRepaid(address(this), block.timestamp);\r\n        return true;\r\n    }\r\n\r\n    function isAuctionExpired() public view returns (bool) {\r\n        return block.timestamp > auctionEndTimestamp;\r\n    }\r\n\r\n    function isDefaulted() public view returns (bool) {\r\n        if (block.timestamp <= auctionEndTimestamp || block.timestamp <= termEndTimestamp) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function setState(LoanState state) internal {\r\n        currentState = state;\r\n    }\r\n\r\n    function updateStateMachine() public returns (LoanState) {\r\n        if (isAuctionExpired() && currentState == LoanState.CREATED) {\r\n            if (!minimumReached) {\r\n                setState(LoanState.FAILED_TO_FUND);\r\n            } else {\r\n                require(setSuccessfulAuction(), \"error while transitioning to successful auction\");\r\n            }\r\n        }\r\n        if (isDefaulted() && currentState == LoanState.ACTIVE) {\r\n            setState(LoanState.DEFAULTED);\r\n            emit LoanDefaulted(address(this));\r\n        }\r\n\r\n        return currentState;\r\n    }\r\n\r\n    function calculateValueWithInterest(uint256 value) public view returns (uint256) {\r\n        return\r\n            value.add(\r\n                value.mul(getInterestRate().mul(termLength).div(MONTH_SECONDS)).div(ONE_HUNDRED)\r\n            );\r\n    }\r\n\r\n    function getInterestRate() public view returns (uint256) {\r\n        if (currentState == LoanState.CREATED) {\r\n            return\r\n                maxInterestRate.mul(block.timestamp.sub(auctionStartTimestamp)).div(\r\n                    auctionEndTimestamp.sub(auctionStartTimestamp)\r\n                );\r\n        } else if (currentState == LoanState.ACTIVE || currentState == LoanState.REPAID) {\r\n            return\r\n                maxInterestRate.mul(lastFundedTimestamp.sub(auctionStartTimestamp)).div(\r\n                    auctionEndTimestamp.sub(auctionStartTimestamp)\r\n                );\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function setSuccessfulAuction() internal onlyCreated returns (bool) {\r\n        setState(LoanState.ACTIVE);\r\n        borrowerDebt = calculateValueWithInterest(auctionBalance);\r\n        operatorBalance = auctionBalance.mul(operatorFee).div(ONE_HUNDRED);\r\n        auctionBalance = auctionBalance - operatorBalance;\r\n\r\n        if (block.timestamp < auctionEndTimestamp) {\r\n            termEndTimestamp = block.timestamp.add(termLength);\r\n        } else {\r\n            termEndTimestamp = auctionEndTimestamp.add(termLength);\r\n        }\r\n\r\n        emit AuctionSuccessful(\r\n            address(this),\r\n            borrowerDebt,\r\n            auctionBalance,\r\n            operatorBalance,\r\n            getInterestRate(),\r\n            lastFundedTimestamp\r\n        );\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts/LoanContractDispatcher.sol\r\n\r\npragma solidity 0.5.10;\r\n\r\n\r\n\r\ncontract LoanContractDispatcher is Ownable {\r\n    Authorization auth;\r\n    address DAITokenAddress;\r\n    address DAIProxyAddress;\r\n\r\n    address public administrator;\r\n\r\n    uint256 public operatorFee;\r\n    uint256 public minAmount;\r\n    uint256 public maxAmount;\r\n    uint256 public minTermLength;\r\n    uint256 public minAuctionLength;\r\n\r\n    uint256 public minInterestRate;\r\n    uint256 public maxInterestRate;\r\n\r\n    mapping(address => bool) public isLoanContract;\r\n\r\n    modifier onlyKYC {\r\n        require(auth.isKYCConfirmed(msg.sender), \"user does not have KYC\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == administrator, \"Caller is not an administrator\");\r\n        _;\r\n    }\r\n\r\n    event LoanContractCreated(\r\n        address loanDispatcher,\r\n        address contractAddress,\r\n        address indexed originator,\r\n        uint256 minAmount,\r\n        uint256 maxAmount,\r\n        uint256 maxInterestRate,\r\n        uint256 termEndTimestamp,\r\n        address indexed administrator,\r\n        uint256 operatorFee,\r\n        uint256 auctionLength\r\n    );\r\n\r\n    event MinAmountUpdated(uint256 minAmount, address loanDispatcher);\r\n    event MaxAmountUpdated(uint256 maxAmount, address loanDispatcher);\r\n    event MinInterestRateUpdated(uint256 minInterestRate, address loanDispatcher);\r\n    event MaxInterestRateUpdated(uint256 maxInterestRate, address loanDispatcher);\r\n    event OperatorFeeUpdated(uint256 operatorFee, address loanDispatcher, address administrator);\r\n\r\n    event AuthAddressUpdated(address newAuthAddress, address administrator);\r\n    event DaiTokenAddressUpdated(address newDaiTokenAddress, address administrator);\r\n    event DaiProxyAddressUpdated(address newDaiProxyAddress, address administrator);\r\n\r\n    event AdministratorUpdated(address newAdminAddress);\r\n\r\n    constructor(address authAddress, address _DAITokenAddress, address _DAIProxyAddress) public {\r\n        auth = Authorization(authAddress);\r\n        DAITokenAddress = _DAITokenAddress;\r\n        DAIProxyAddress = _DAIProxyAddress;\r\n\r\n        minAmount = 1e18; //1000000000000000000; // Minimum 1 DAI\r\n        maxAmount = 2500000e18; //2500000000000000000000000; // Maximum 2.5 Million DAI\r\n\r\n        minInterestRate = 0;\r\n        maxInterestRate = 20e18; //20000000000000000000; // Max default MiR 20% / 240% APR\r\n\r\n        operatorFee = 1e18; //1000000000000000000; // 1 % operator fee, expressed in wei\r\n        minTermLength = 2592000;\r\n        minAuctionLength = 2592000;\r\n    }\r\n\r\n    function setDaiTokenAddress(address daiAddress) external onlyAdmin {\r\n        DAITokenAddress = daiAddress;\r\n        emit DaiTokenAddressUpdated(DAITokenAddress, administrator);\r\n    }\r\n\r\n    function setAuthAddress(address authAddress) external onlyAdmin {\r\n        auth = Authorization(authAddress);\r\n        emit AuthAddressUpdated(authAddress, administrator);\r\n    }\r\n\r\n    function setDaiProxyAddress(address daiProxyAddress) external onlyAdmin {\r\n        DAIProxyAddress = daiProxyAddress;\r\n        emit DaiProxyAddressUpdated(DAIProxyAddress, administrator);\r\n    }\r\n\r\n    function setAdministrator(address admin) external onlyOwner {\r\n        administrator = admin;\r\n        emit AdministratorUpdated(administrator);\r\n    }\r\n\r\n    function setOperatorFee(uint256 newFee) external onlyAdmin {\r\n        operatorFee = newFee;\r\n        emit OperatorFeeUpdated(operatorFee, address(this), msg.sender);\r\n    }\r\n\r\n    function setMinAmount(uint256 requestedMinAmount) external onlyAdmin {\r\n        require(\r\n            requestedMinAmount <= maxAmount,\r\n            \"Minimum amount needs to be lesser or equal than maximum amount\"\r\n        );\r\n        minAmount = requestedMinAmount;\r\n        emit MinAmountUpdated(minAmount, address(this));\r\n    }\r\n\r\n    function setMaxAmount(uint256 requestedMaxAmount) external onlyAdmin {\r\n        require(\r\n            requestedMaxAmount >= minAmount,\r\n            \"Maximum amount needs to be greater or equal than minimum amount\"\r\n        );\r\n        maxAmount = requestedMaxAmount;\r\n        emit MaxAmountUpdated(maxAmount, address(this));\r\n    }\r\n\r\n    function setMinInterestRate(uint256 requestedMinInterestRate) external onlyAdmin {\r\n        require(\r\n            requestedMinInterestRate <= maxInterestRate,\r\n            \"Minimum interest needs to be lesser or equal than maximum interest\"\r\n        );\r\n        minInterestRate = requestedMinInterestRate;\r\n        emit MinInterestRateUpdated(minInterestRate, address(this));\r\n    }\r\n\r\n    function setMaxInterestRate(uint256 requestedMaxInterestRate) external onlyAdmin {\r\n        require(\r\n            requestedMaxInterestRate >= minInterestRate,\r\n            \"Maximum interest needs to be greater or equal than minimum interest\"\r\n        );\r\n        maxInterestRate = requestedMaxInterestRate;\r\n        emit MaxInterestRateUpdated(maxInterestRate, address(this));\r\n    }\r\n\r\n    function setMinTermLength(uint256 requestedMinTermLength) external onlyAdmin {\r\n        minTermLength = requestedMinTermLength;\r\n    }\r\n\r\n    function setMinAuctionLength(uint256 requestedMinAuctionLength) external onlyAdmin {\r\n        minAuctionLength = requestedMinAuctionLength;\r\n    }\r\n\r\n    function deploy(\r\n        uint256 loanMinAmount,\r\n        uint256 loanMaxAmount,\r\n        uint256 loanMaxInterestRate,\r\n        uint256 termLength,\r\n        uint256 auctionLength\r\n    ) external onlyKYC returns (address) {\r\n        require(administrator != address(0), \"There is no administrator set\");\r\n        require(\r\n            loanMinAmount >= minAmount &&\r\n                loanMinAmount <= maxAmount &&\r\n                loanMinAmount <= loanMaxAmount,\r\n            \"minimum amount not correct\"\r\n        );\r\n        require(\r\n            loanMaxAmount >= minAmount &&\r\n                loanMaxAmount <= maxAmount &&\r\n                loanMaxAmount >= loanMinAmount,\r\n            \"maximum amount not correct\"\r\n        );\r\n        require(\r\n            loanMaxInterestRate >= minInterestRate && loanMaxInterestRate <= maxInterestRate,\r\n            \"maximum interest rate not correct\"\r\n        );\r\n        require(termLength >= minTermLength, \"Term length is to small\");\r\n        require(auctionLength >= minAuctionLength, \"Auction length is to small\");\r\n\r\n        LoanContract loanContract = new LoanContract(\r\n            termLength,\r\n            loanMinAmount,\r\n            loanMaxAmount,\r\n            loanMaxInterestRate,\r\n            msg.sender,\r\n            DAITokenAddress,\r\n            DAIProxyAddress,\r\n            administrator,\r\n            operatorFee,\r\n            auctionLength\r\n        );\r\n        isLoanContract[address(loanContract)] = true;\r\n\r\n        emit LoanContractCreated(\r\n            address(this),\r\n            address(loanContract),\r\n            msg.sender,\r\n            loanMinAmount,\r\n            loanMaxAmount,\r\n            loanMaxInterestRate,\r\n            termLength,\r\n            administrator,\r\n            operatorFee,\r\n            auctionLength\r\n        );\r\n\r\n        return address(loanContract);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"minTermLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authAddress\",\"type\":\"address\"}],\"name\":\"setAuthAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setOperatorFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requestedMaxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requestedMinAuctionLength\",\"type\":\"uint256\"}],\"name\":\"setMinAuctionLength\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"loanMinAmount\",\"type\":\"uint256\"},{\"name\":\"loanMaxAmount\",\"type\":\"uint256\"},{\"name\":\"loanMaxInterestRate\",\"type\":\"uint256\"},{\"name\":\"termLength\",\"type\":\"uint256\"},{\"name\":\"auctionLength\",\"type\":\"uint256\"}],\"name\":\"deploy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requestedMinAmount\",\"type\":\"uint256\"}],\"name\":\"setMinAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operatorFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minAuctionLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requestedMinTermLength\",\"type\":\"uint256\"}],\"name\":\"setMinTermLength\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"daiProxyAddress\",\"type\":\"address\"}],\"name\":\"setDaiProxyAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxInterestRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requestedMaxInterestRate\",\"type\":\"uint256\"}],\"name\":\"setMaxInterestRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requestedMinInterestRate\",\"type\":\"uint256\"}],\"name\":\"setMinInterestRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"setAdministrator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLoanContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minInterestRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"daiAddress\",\"type\":\"address\"}],\"name\":\"setDaiTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"administrator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"authAddress\",\"type\":\"address\"},{\"name\":\"_DAITokenAddress\",\"type\":\"address\"},{\"name\":\"_DAIProxyAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"loanDispatcher\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"originator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"minAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maxInterestRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"termEndTimestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"administrator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"operatorFee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"auctionLength\",\"type\":\"uint256\"}],\"name\":\"LoanContractCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"minAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"loanDispatcher\",\"type\":\"address\"}],\"name\":\"MinAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"loanDispatcher\",\"type\":\"address\"}],\"name\":\"MaxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"minInterestRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"loanDispatcher\",\"type\":\"address\"}],\"name\":\"MinInterestRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"maxInterestRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"loanDispatcher\",\"type\":\"address\"}],\"name\":\"MaxInterestRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operatorFee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"loanDispatcher\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"administrator\",\"type\":\"address\"}],\"name\":\"OperatorFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAuthAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"administrator\",\"type\":\"address\"}],\"name\":\"AuthAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newDaiTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"administrator\",\"type\":\"address\"}],\"name\":\"DaiTokenAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newDaiProxyAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"administrator\",\"type\":\"address\"}],\"name\":\"DaiProxyAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAdminAddress\",\"type\":\"address\"}],\"name\":\"AdministratorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"LoanContractDispatcher","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000d0608aef0d7eae02c35e4a5f8f4d315c13b7b66100000000000000000000000089d24a6b4ccb1b6faa2625fe562bdd9a232603590000000000000000000000005c0336451b65bf3a9caf6a69d04007efc6964e2e","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://673bdadfec55a866b074dfc8dd215f399062cbd911dadacf205cf8b0d9f8793a"}]}