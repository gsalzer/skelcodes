{"status":"1","message":"OK","result":[{"SourceCode":"// hevm: flattened sources of /nix/store/k8y52yly1kzii65m0yw5pbidrq3jlajh-dss-deploy-001fb27/src/join.sol\r\npragma solidity =0.5.12;\r\n\r\n////// /nix/store/4vip6nyqfd0yhs15md21rzxsk5jgx6sv-dss/dapp/dss/src/lib.sol\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity 0.5.12; */\r\n\r\ncontract LibNote {\r\n    event LogNote(\r\n        bytes4   indexed  sig,\r\n        address  indexed  usr,\r\n        bytes32  indexed  arg1,\r\n        bytes32  indexed  arg2,\r\n        bytes             data\r\n    ) anonymous;\r\n\r\n    modifier note {\r\n        _;\r\n        assembly {\r\n            // log an 'anonymous' event with a constant 6 words of calldata\r\n            // and four indexed topics: selector, caller, arg1 and arg2\r\n            let mark := msize                         // end of memory ensures zero\r\n            mstore(0x40, add(mark, 288))              // update free memory pointer\r\n            mstore(mark, 0x20)                        // bytes type data offset\r\n            mstore(add(mark, 0x20), 224)              // bytes size (padded)\r\n            calldatacopy(add(mark, 0x40), 0, 224)     // bytes payload\r\n            log4(mark, 288,                           // calldata\r\n                 shl(224, shr(224, calldataload(0))), // msg.sig\r\n                 caller,                              // msg.sender\r\n                 calldataload(4),                     // arg1\r\n                 calldataload(36)                     // arg2\r\n                )\r\n        }\r\n    }\r\n}\r\n\r\n////// /nix/store/k8y52yly1kzii65m0yw5pbidrq3jlajh-dss-deploy-001fb27/src/join.sol\r\n/// join.sol -- Non-standard token adapters\r\n\r\n// Copyright (C) 2018 Rain <rainbreak@riseup.net>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity 0.5.12; */\r\n\r\n/* import \"dss/lib.sol\"; */\r\n\r\ncontract VatLike {\r\n    function slip(bytes32,address,int) public;\r\n}\r\n\r\n// GemJoin2\r\n\r\n// For a token that does not return a bool on transfer or transferFrom (like OMG)\r\n// This is one way of doing it. Check the balances before and after calling a transfer\r\n\r\ncontract GemLike2 {\r\n    function decimals() public view returns (uint);\r\n    function transfer(address,uint) public;\r\n    function transferFrom(address,address,uint) public;\r\n    function balanceOf(address) public view returns (uint);\r\n    function allowance(address,address) public view returns (uint);\r\n}\r\n\r\ncontract GemJoin2 is LibNote {\r\n    // --- Auth ---\r\n    mapping (address => uint) public wards;\r\n    function rely(address usr) external note auth { wards[usr] = 1; }\r\n    function deny(address usr) external note auth { wards[usr] = 0; }\r\n    modifier auth { require(wards[msg.sender] == 1); _; }\r\n\r\n    VatLike  public vat;\r\n    bytes32  public ilk;\r\n    GemLike2 public gem;\r\n    uint     public dec;\r\n    uint     public live;  // Access Flag\r\n\r\n    constructor(address vat_, bytes32 ilk_, address gem_) public {\r\n        wards[msg.sender] = 1;\r\n        live = 1;\r\n        vat = VatLike(vat_);\r\n        ilk = ilk_;\r\n        gem = GemLike2(gem_);\r\n        dec = gem.decimals();\r\n    }\r\n\r\n    function cage() external note auth {\r\n        live = 0;\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"GemJoin2/overflow\");\r\n    }\r\n\r\n    function join(address urn, uint wad) public note {\r\n        require(live == 1, \"GemJoin2/not-live\");\r\n        require(wad <= 2 ** 255, \"GemJoin2/overflow\");\r\n        vat.slip(ilk, urn, int(wad));\r\n        uint256 prevBalance = gem.balanceOf(msg.sender);\r\n\r\n        require(prevBalance >= wad, \"GemJoin2/no-funds\");\r\n        require(gem.allowance(msg.sender, address(this)) >= wad, \"GemJoin2/no-allowance\");\r\n\r\n        (bool ok,) = address(gem).call(\r\n            abi.encodeWithSignature(\"transferFrom(address,address,uint256)\", msg.sender, address(this), wad)\r\n        );\r\n        require(ok, \"GemJoin2/failed-transfer\");\r\n\r\n        require(prevBalance - wad == gem.balanceOf(msg.sender), \"GemJoin2/failed-transfer\");\r\n    }\r\n\r\n    function exit(address guy, uint wad) public note {\r\n        require(wad <= 2 ** 255, \"GemJoin2/overflow\");\r\n        vat.slip(ilk, msg.sender, -int(wad));\r\n        uint256 prevBalance = gem.balanceOf(address(this));\r\n\r\n        require(prevBalance >= wad, \"GemJoin2/no-funds\");\r\n\r\n        (bool ok,) = address(gem).call(\r\n            abi.encodeWithSignature(\"transfer(address,uint256)\", guy, wad)\r\n        );\r\n        require(ok, \"GemJoin2/failed-transfer\");\r\n\r\n        require(prevBalance - wad == gem.balanceOf(address(this)), \"GemJoin2/failed-transfer\");\r\n    }\r\n}\r\n\r\n// GemJoin3\r\n// For a token that has a lower precision than 18 and doesn't have decimals field in place (like DGD)\r\n\r\ncontract GemLike3 {\r\n    function transfer(address,uint) public returns (bool);\r\n    function transferFrom(address,address,uint) public returns (bool);\r\n}\r\n\r\ncontract GemJoin3 is LibNote {\r\n    // --- Auth ---\r\n    mapping (address => uint) public wards;\r\n    function rely(address usr) external note auth { wards[usr] = 1; }\r\n    function deny(address usr) external note auth { wards[usr] = 0; }\r\n    modifier auth { require(wards[msg.sender] == 1); _; }\r\n\r\n    VatLike  public vat;\r\n    bytes32  public ilk;\r\n    GemLike3 public gem;\r\n    uint     public dec;\r\n    uint     public live;  // Access Flag\r\n\r\n    constructor(address vat_, bytes32 ilk_, address gem_, uint decimals) public {\r\n        require(decimals < 18, \"GemJoin3/decimals-18-or-higher\");\r\n        wards[msg.sender] = 1;\r\n        live = 1;\r\n        vat = VatLike(vat_);\r\n        ilk = ilk_;\r\n        gem = GemLike3(gem_);\r\n        dec = decimals;\r\n    }\r\n\r\n    function cage() external note auth {\r\n        live = 0;\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"GemJoin3/overflow\");\r\n    }\r\n\r\n    function join(address urn, uint wad) public note {\r\n        require(live == 1, \"GemJoin3/not-live\");\r\n        uint wad18 = mul(wad, 10 ** (18 - dec));\r\n        require(wad18 <= 2 ** 255, \"GemJoin3/overflow\");\r\n        vat.slip(ilk, urn, int(wad18));\r\n        require(gem.transferFrom(msg.sender, address(this), wad), \"GemJoin3/failed-transfer\");\r\n    }\r\n\r\n    function exit(address guy, uint wad) public note {\r\n        uint wad18 = mul(wad, 10 ** (18 - dec));\r\n        require(wad18 <= 2 ** 255, \"GemJoin3/overflow\");\r\n        vat.slip(ilk, msg.sender, -int(wad18));\r\n        require(gem.transfer(guy, wad), \"GemJoin3/failed-transfer\");\r\n    }\r\n}\r\n\r\n/// GemJoin4\r\n\r\n// Copyright (C) 2019 Lorenzo Manacorda <lorenzo@mailbox.org>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n// For tokens that do not implement transferFrom (like GNT), meaning the usual adapter\r\n// approach won't work: the adapter cannot call transferFrom and therefore\r\n// has no way of knowing when users deposit gems into it.\r\n\r\n// To work around this, we introduce the concept of a bag, which is a trusted\r\n// (it's created by the adapter), personalized component (one for each user).\r\n\r\n// Users first have to create their bag with `GemJoin4.make`, then transfer\r\n// gem to it, and then call `GemJoin4.join`, which transfer the gems from the\r\n// bag to the adapter.\r\n\r\ncontract GemLike4 {\r\n    function decimals() public view returns (uint);\r\n    function balanceOf(address) public returns (uint256);\r\n    function transfer(address, uint256) public returns (bool);\r\n}\r\n\r\ncontract GemBag {\r\n    address  public ada;\r\n    address  public lad;\r\n    GemLike4 public gem;\r\n\r\n    constructor(address lad_, address gem_) public {\r\n        ada = msg.sender;\r\n        lad = lad_;\r\n        gem = GemLike4(gem_);\r\n    }\r\n\r\n    function exit(address usr, uint256 wad) external {\r\n        require(msg.sender == ada || msg.sender == lad, \"GemBag/invalid-caller\");\r\n        require(gem.transfer(usr, wad), \"GemBag/failed-transfer\");\r\n    }\r\n}\r\n\r\ncontract GemJoin4 is LibNote {\r\n    // --- Auth ---\r\n    mapping (address => uint) public wards;\r\n    function rely(address usr) external note auth { wards[usr] = 1; }\r\n    function deny(address usr) external note auth { wards[usr] = 0; }\r\n    modifier auth { require(wards[msg.sender] == 1); _; }\r\n\r\n    VatLike  public vat;\r\n    bytes32  public ilk;\r\n    GemLike4 public gem;\r\n    uint     public dec;\r\n    uint     public live;  // Access Flag\r\n\r\n    mapping(address => address) public bags;\r\n\r\n    constructor(address vat_, bytes32 ilk_, address gem_) public {\r\n        wards[msg.sender] = 1;\r\n        live = 1;\r\n        vat = VatLike(vat_);\r\n        ilk = ilk_;\r\n        gem = GemLike4(gem_);\r\n        dec = gem.decimals();\r\n    }\r\n\r\n    function cage() external note auth {\r\n        live = 0;\r\n    }\r\n\r\n    // -- admin --\r\n    function make() external returns (address bag) {\r\n        bag = make(msg.sender);\r\n    }\r\n\r\n    function make(address usr) public note returns (address bag) {\r\n        require(bags[usr] == address(0), \"GemJoin4/bag-already-exists\");\r\n\r\n        bag = address(new GemBag(address(usr), address(gem)));\r\n        bags[usr] = bag;\r\n    }\r\n\r\n    // -- gems --\r\n    function join(address urn, uint256 wad) external note {\r\n        require(live == 1, \"GemJoin4/not-live\");\r\n        require(int256(wad) >= 0, \"GemJoin4/negative-amount\");\r\n\r\n        GemBag(bags[msg.sender]).exit(address(this), wad);\r\n        vat.slip(ilk, urn, int256(wad));\r\n    }\r\n\r\n    function exit(address usr, uint256 wad) external note {\r\n        require(int256(wad) >= 0, \"GemJoin4/negative-amount\");\r\n\r\n        vat.slip(ilk, msg.sender, -int256(wad));\r\n        require(gem.transfer(usr, wad), \"GemJoin4/failed-transfer\");\r\n    }\r\n}\r\n\r\n// AuthGemJoin\r\n// For a token that needs restriction on the sources which are able to execute the join function (like SAI through Migration contract)\r\n\r\ncontract GemLike {\r\n    function decimals() public view returns (uint);\r\n    function transfer(address,uint) public returns (bool);\r\n    function transferFrom(address,address,uint) public returns (bool);\r\n}\r\n\r\ncontract AuthGemJoin is LibNote {\r\n    VatLike public vat;\r\n    bytes32 public ilk;\r\n    GemLike public gem;\r\n    uint    public dec;\r\n    uint    public live;  // Access Flag\r\n\r\n    // --- Auth ---\r\n    mapping (address => uint) public wards;\r\n    function rely(address usr) public note auth { wards[usr] = 1; }\r\n    function deny(address usr) public note auth { wards[usr] = 0; }\r\n    modifier auth { require(wards[msg.sender] == 1, \"AuthGemJoin/non-authed\"); _; }\r\n\r\n    constructor(address vat_, bytes32 ilk_, address gem_) public {\r\n        wards[msg.sender] = 1;\r\n        live = 1;\r\n        vat = VatLike(vat_);\r\n        ilk = ilk_;\r\n        gem = GemLike(gem_);\r\n        dec = gem.decimals();\r\n    }\r\n\r\n    function cage() external note auth {\r\n        live = 0;\r\n    }\r\n\r\n    function join(address usr, uint wad) public auth note {\r\n        require(live == 1, \"AuthGemJoin/not-live\");\r\n        require(int(wad) >= 0, \"AuthGemJoin/overflow\");\r\n        vat.slip(ilk, usr, int(wad));\r\n        require(gem.transferFrom(msg.sender, address(this), wad), \"AuthGemJoin/failed-transfer\");\r\n    }\r\n\r\n    function exit(address usr, uint wad) public note {\r\n        require(wad <= 2 ** 255, \"AuthGemJoin/overflow\");\r\n        vat.slip(ilk, msg.sender, -int(wad));\r\n        require(gem.transfer(usr, wad), \"AuthGemJoin/failed-transfer\");\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vat_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ilk_\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"gem_\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"arg1\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"arg2\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"cage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"deny\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gem\",\"outputs\":[{\"internalType\":\"contract GemLike\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ilk\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"join\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"live\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"rely\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vat\",\"outputs\":[{\"internalType\":\"contract VatLike\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"AuthGemJoin","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000035d1b3f3d7966a1dfe207aa4514c12a259a0492b534149000000000000000000000000000000000000000000000000000000000000000000000000000000000089d24a6b4ccb1b6faa2625fe562bdd9a23260359","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://3e1c27770ae0c4917a3d9e9ff92aa793d84bd22404a65f482185b02994d0f893"}]}