{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address previousOwner, address newOwner);\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract.\r\n    */\r\n    constructor(address _owner) public {\r\n        owner = _owner == address(0) ? msg.sender : _owner;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param _newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != owner);\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    /**\r\n    * @dev confirm ownership by a new owner\r\n    */\r\n    function confirmOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = 0x0;\r\n    }\r\n}\r\n\r\n/**\r\n * @title IERC20Token - ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract IERC20Token {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value)  public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value)  public returns (bool success);\r\n    function approve(address _spender, uint256 _value)  public returns (bool success);\r\n    function allowance(address _owner, address _spender)  public view returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\ncontract SafeMath {\r\n    /**\r\n    * @dev constructor\r\n    */\r\n    constructor() public {\r\n    }\r\n\r\n    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(a >= b);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20Token - ERC20 base implementation\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20Token is IERC20Token, SafeMath {\r\n    mapping (address => uint256) public balances;\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(balances[msg.sender] >= _value);\r\n\r\n        balances[msg.sender] = safeSub(balances[msg.sender], _value);\r\n        balances[_to] = safeAdd(balances[_to], _value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\r\n\r\n        balances[_to] = safeAdd(balances[_to], _value);\r\n        balances[_from] = safeSub(balances[_from], _value);\r\n        allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}\r\n\r\n/**\r\n * @title ITokenEventListener\r\n * @dev Interface which should be implemented by token listener\r\n */\r\ninterface ITokenEventListener {\r\n    /**\r\n     * @dev Function is called after token transfer/transferFrom\r\n     * @param _from Sender address\r\n     * @param _to Receiver address\r\n     * @param _value Amount of tokens\r\n     */\r\n    function onTokenTransfer(address _from, address _to, uint256 _value) external;\r\n}\r\n\r\n/**\r\n * @title ManagedToken\r\n * @dev ERC20 compatible token with issue\r\n * @dev All transfers can be monitored by token event listener\r\n */\r\ncontract ManagedToken is ERC20Token, Ownable {\r\n    uint256 public totalIssue;                                                  //Total token issue\r\n    bool public allowTransfers = true;                                          //Default enable transfer\r\n\r\n    ITokenEventListener public eventListener;                                   //Listen events\r\n\r\n    event AllowTransfersChanged(bool _newState);                                //Event:\r\n    event Issue(address indexed _to, uint256 _value);                           //Event: Issue\r\n    event Destroy(address indexed _from, uint256 _value);                       //Event:\r\n    event IssuanceFinished(bool _issuanceFinished);                             //Event: Finished issuance\r\n\r\n    //Modifier: Allow all transfer if not any condition\r\n    modifier transfersAllowed() {\r\n        require(allowTransfers, \"Require enable transfer\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev ManagedToken constructor\r\n     * @param _listener Token listener(address can be 0x0)\r\n     * @param _owner Owner of contract(address can be 0x0)\r\n     */\r\n    constructor(address _listener, address _owner) public Ownable(_owner) {\r\n        if(_listener != address(0)) {\r\n            eventListener = ITokenEventListener(_listener);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Enable/disable token transfers. Can be called only by owners\r\n     * @param _allowTransfers True - allow False - disable\r\n     */\r\n    function setAllowTransfers(bool _allowTransfers) external onlyOwner {\r\n        allowTransfers = _allowTransfers;\r\n\r\n        //Call event\r\n        emit AllowTransfersChanged(_allowTransfers);\r\n    }\r\n\r\n    /**\r\n     * @dev Set/remove token event listener\r\n     * @param _listener Listener address (Contract must implement ITokenEventListener interface)\r\n     */\r\n    function setListener(address _listener) public onlyOwner {\r\n        if(_listener != address(0)) {\r\n            eventListener = ITokenEventListener(_listener);\r\n        } else {\r\n            delete eventListener;\r\n        }\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public transfersAllowed returns (bool) {\r\n        bool success = super.transfer(_to, _value);\r\n        /* if(hasListener() && success) {\r\n            eventListener.onTokenTransfer(msg.sender, _to, _value);\r\n        } */\r\n        return success;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public transfersAllowed returns (bool) {\r\n        bool success = super.transferFrom(_from, _to, _value);\r\n\r\n        //If has Listenser and transfer success\r\n        /* if(hasListener() && success) {\r\n            //Call event listener\r\n            eventListener.onTokenTransfer(_from, _to, _value);\r\n        } */\r\n        return success;\r\n    }\r\n\r\n    function hasListener() internal view returns(bool) {\r\n        if(eventListener == address(0)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Issue tokens to specified wallet\r\n     * @param _to Wallet address\r\n     * @param _value Amount of tokens\r\n     */\r\n    function issue(address _to, uint256 _value) external onlyOwner {\r\n        totalIssue = safeAdd(totalIssue, _value);\r\n        require(totalSupply >= totalIssue, \"Total issue is not greater total of supply\");\r\n        balances[_to] = safeAdd(balances[_to], _value);\r\n        //Call event\r\n        emit Issue(_to, _value);\r\n        emit Transfer(address(0), _to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From OpenZeppelin StandardToken.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = safeAdd(allowed[msg.sender][_spender], _addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From OpenZeppelin StandardToken.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = safeSub(oldValue, _subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * LEX Token Contract\r\n * @title LEX\r\n */\r\ncontract LEX is ManagedToken {\r\n\r\n    /*\r\n    *  Token with ability to limit transfers of owner\r\n    *  for certain period of time and certain amount\r\n    */\r\n    struct OwnerLock {\r\n        string name;                                                            //Name of lock\r\n        uint256 lockEndTime;                                                    //Time end of lock\r\n        uint256 amount;                                                         //Total token is lock\r\n        bool isLock;                                                            //Total token is lock\r\n    }\r\n\r\n    /*\r\n    *  Token with ability to limit transfers of client\r\n    *  for certain period of time and certain amount\r\n    */\r\n    struct ClientLock {\r\n        uint256 lockEndTime;                                                    //Time end of lock\r\n        uint256 amount;                                                         //Total token is lock\r\n        bool isLock;                                                            //Total token is lock\r\n    }\r\n\r\n    uint256 public TotalLocked = 0;                                             //Total token is lock\r\n\r\n    /* This creates an array with all balances of freeze */\r\n    mapping (address => uint256) public freezeOf;\r\n    /* This creates an array with all locks of owner*/\r\n    mapping(uint256 => OwnerLock) public ownerLocks;\r\n    /* This creates an array with all locks of client*/\r\n    mapping(address => ClientLock) public clientLocks;\r\n    /* This creates an array with all ids of locks */\r\n    uint256[] public LockIds;\r\n\r\n    /* This notifies about owner lock the amount of token for certain period of time */\r\n    event LockOwner(string name, uint256 lockEndTime, uint256 amount, uint256 id);\r\n\r\n    /* This notifies about owner unlock the amount of token for certain period of time */\r\n    event UnLockOwner(string name, uint256 lockEndTime, uint256 amount, uint256 id);\r\n\r\n    /* This notifies about owner burnt the amount of token */\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    /* This notifies clients about the amount frozen */\r\n    event Freeze(address indexed from, uint256 value);\r\n\r\n    event UnLockClient(address _addressLock, uint256 lockEndTime, uint256 amount);\r\n    event LockClient(address _addressLock, uint256 lockEndTime, uint256 amount);\r\n\r\n    /**\r\n     * @dev Liq constructor\r\n     */\r\n    constructor() public ManagedToken(msg.sender, msg.sender) {\r\n        name = \"Liquiditex\";\r\n        symbol = \"LEX\";\r\n        decimals = 18;\r\n        totalIssue = 0;\r\n        //The maximum number of tokens is unchanged and totals will decrease after issue\r\n        totalSupply = 100000000 ether;\r\n    }\r\n\r\n    function issue(address _to, uint256 _value) external onlyOwner {\r\n        totalIssue = safeAdd(totalIssue, _value);\r\n        require(totalSupply >= totalIssue, \"Total issue is not greater total of supply\");\r\n\r\n        balances[_to] = safeAdd(balances[_to], _value);\r\n        //Call event\r\n        emit Issue(_to, _value);\r\n        emit Transfer(address(0), _to, _value);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        if(clientLocks[msg.sender].isLock){\r\n            require(_value <= safeSub(balances[msg.sender], clientLocks[msg.sender].amount), \"Not enough token to transfer\");\r\n        }\r\n        bool success = super.transfer(_to, _value);\r\n        return success;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        if(clientLocks[_from].isLock){\r\n            require(_value <= safeSub(balances[_from], clientLocks[_from].amount), \"Not enough token to transfer\");\r\n        }\r\n        bool success = super.transferFrom(_from, _to, _value);\r\n        return success;\r\n    }\r\n\r\n    /**\r\n    * @dev Owner burn token with certain of amount\r\n    * @param _value number of token will be burn of owner\r\n    */\r\n    function burn(uint256 _value) external onlyOwner returns (bool success) {\r\n        require(balances[msg.sender] >= _value, \"Not enough token to burn\");                // Check if the sender has enough\r\n\t\trequire(_value > 0, \"Require burn token greater than 0\");\r\n        balances[msg.sender] = safeSub(balances[msg.sender], _value);                       // Subtract from the sender\r\n        totalSupply = safeSub(totalSupply,_value);                                          // Updates totalSupply\r\n        totalIssue = safeSub(totalIssue,_value);                                            // Updates totalSupply\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Client freeze token with certain of amount and not allow unfreeze\r\n    * @param _value number of token will be freeze of client\r\n    */\r\n    function freeze(uint256 _value) external returns (bool success) {\r\n        require(balances[msg.sender] >= _value, \"Not enough token to freeze\");             // Check if the sender has enough\r\n\t\trequire(_value > 0, \"Require burn token greater than 0\");\r\n        balances[msg.sender] = safeSub(balances[msg.sender], _value);                      // Subtract from the sender\r\n        freezeOf[msg.sender] = safeAdd(freezeOf[msg.sender], _value);                      // Updates totalSupply\r\n        emit Freeze(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Owner lock token with for certain period of time and certain of amount\r\n    * @param _lockTotal number of token lock\r\n    * @param _totalDayLock number of day lock\r\n    * @param name name of lock\r\n    * @param id id of lock\r\n    */\r\n    function setLockInOwner(uint256 _lockTotal, uint256 _totalDayLock, string name, uint256 id) external onlyOwner {\r\n        require(_totalDayLock >= 1, \"Lock for at least one day\");\r\n        require(balances[msg.sender] >= _lockTotal, \"Total lock is not greater total of owner\");\r\n        require(ownerLocks[id].amount == 0, \"Lock with id is not existed\");\r\n\r\n        //set truct lock\r\n        ownerLocks[id].amount = _lockTotal;\r\n        ownerLocks[id].lockEndTime = _totalDayLock * 86400 + now;\r\n        ownerLocks[id].name = name;\r\n        ownerLocks[id].isLock = true;\r\n\r\n        //set lock token of owner\r\n        TotalLocked = safeAdd(TotalLocked, _lockTotal);\r\n        balances[msg.sender] = safeSub(balances[msg.sender], _lockTotal);\r\n\r\n        //Add id of lock in list LockIds\r\n        LockIds.push(id);\r\n\r\n        //Call event lock\r\n        emit LockOwner(name, ownerLocks[id].lockEndTime, _lockTotal, id);\r\n    }\r\n\r\n    /**\r\n    * @dev Owner unlock token with id of lock if lock is end\r\n    * @param id id of lock\r\n    */\r\n    function unLockInOwner(uint256 id) external onlyOwner {\r\n        //Lock with id is not unlock\r\n        require(ownerLocks[id].isLock == true, \"Lock with id is locking\");\r\n        require(now > ownerLocks[id].lockEndTime, \"Please wait to until the end of lock previous\");\r\n        //unlock\r\n        ownerLocks[id].isLock = false;\r\n\r\n        //release token\r\n        TotalLocked = safeSub(TotalLocked, ownerLocks[id].amount);\r\n        balances[msg.sender] = safeAdd(balances[msg.sender], ownerLocks[id].amount);\r\n\r\n        //Call event unlock\r\n        emit UnLockOwner(name, ownerLocks[id].lockEndTime, ownerLocks[id].amount, id);\r\n    }\r\n\r\n    /**\r\n    * @dev Owner transfer token to client and this token is lock in period of time\r\n    * @param _value number of token transfer and is lock\r\n    * @param _totalDayLock number of day lock\r\n    * @param _to address received token\r\n    */\r\n    function transferLockFromOwner(address _to, uint256 _value, uint256 _totalDayLock) external onlyOwner returns (bool) {\r\n        require(_totalDayLock >= 1, \"Lock for at least one day\");\r\n        require(clientLocks[_to].isLock == false, \"Account client has not lock token\");\r\n        bool success = super.transfer(_to, _value);\r\n        if(success){\r\n            clientLocks[_to].isLock = true;\r\n            clientLocks[_to].amount = _value;\r\n            clientLocks[_to].lockEndTime = _totalDayLock * 86400 + now;\r\n\r\n            //Call event\r\n            emit LockClient(_to, clientLocks[_to].lockEndTime, clientLocks[_to].amount);\r\n        }\r\n\r\n        return success;\r\n    }\r\n\r\n    /**\r\n    * @dev Any address can confirm to unlock token of address if lock is expired\r\n    * @param _addressLock address will be unlock token\r\n    */\r\n    function unLockTransferClient(address _addressLock) external {\r\n        require(clientLocks[_addressLock].isLock == true, \"Account client has lock token\");\r\n        require(now > clientLocks[_addressLock].lockEndTime, \"Please wait to until the end of lock previous\");\r\n\r\n        //unlock\r\n        clientLocks[_addressLock].isLock = false;\r\n\r\n        //Call event\r\n        emit UnLockClient(_addressLock, clientLocks[_addressLock].lockEndTime, clientLocks[_addressLock].amount);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowTransfers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_totalDayLock\",\"type\":\"uint256\"}],\"name\":\"transferLockFromOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TotalLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalIssue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockTotal\",\"type\":\"uint256\"},{\"name\":\"_totalDayLock\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"setLockInOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_listener\",\"type\":\"address\"}],\"name\":\"setListener\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addressLock\",\"type\":\"address\"}],\"name\":\"unLockTransferClient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"unLockInOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"freezeOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eventListener\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"clientLocks\",\"outputs\":[{\"name\":\"lockEndTime\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"isLock\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"freeze\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_allowTransfers\",\"type\":\"bool\"}],\"name\":\"setAllowTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LockIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerLocks\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"lockEndTime\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"isLock\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"lockEndTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"LockOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"lockEndTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"UnLockOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addressLock\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"lockEndTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnLockClient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addressLock\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"lockEndTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockClient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_newState\",\"type\":\"bool\"}],\"name\":\"AllowTransfersChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Destroy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_issuanceFinished\",\"type\":\"bool\"}],\"name\":\"IssuanceFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"LEX","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://7dd65d1bc23454ffaed5d5fb9a846a6d13ed3e55058997bdfacfd1731e00ea23"}]}