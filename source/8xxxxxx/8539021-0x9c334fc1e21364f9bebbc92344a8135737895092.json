{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address) public view returns (uint256);\r\n    function transfer(address, uint256) public returns (bool);\r\n    function transferFrom(address, address, uint256) public returns (bool);\r\n    function approve(address, uint256) public returns (bool);\r\n    function allowance(address, address) public view returns (uint256);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract contractInterface {\r\n    function hasSupportFor(address, uint256, bytes memory) public returns (bool);\r\n}\r\n\r\ncontract delegableTokenInterface {\r\n    bytes public constant signingPrefix = \"\\x19Ethereum Signed Message:\\n32\";\r\n    bytes4 public constant signedTransferSig = \"\\x75\\x32\\xea\\xac\";\r\n\r\n    function signedTransferHash(address, address, uint, uint, uint) public view returns (bytes32);\r\n    function signedTransfer(address, address, uint, uint, uint, bytes memory, address) public returns (bool);\r\n    function signedTransferCheck(address, address, uint, uint, uint, bytes memory, address) public view returns (string memory);\r\n}\r\n\r\n\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    // allow transfer of ownership to another address in case shit hits the fan.\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract StandardToken is ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) internal balances;\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n    \r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        // Added to prevent potential race attack.\r\n        // forces caller of this function to ensure address allowance is already 0\r\n        // ref: https://github.com/ethereum/EIPs/issues/738\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    /**\r\n    * approve should be called when allowed[_spender] == 0. To increment\r\n    * allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined)\r\n    * From MonolithDAO Token.sol\r\n    */\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\ncontract delegableToken is StandardToken, delegableTokenInterface {\r\n    mapping(address => uint) internal nextNonce;\r\n\r\n    function getNextNonce(address _owner) public view returns (uint) {\r\n        return nextNonce[_owner];\r\n    }\r\n\r\n\r\n    /**\r\n     * Prevalidation - Checks nonce value, signing account/parameter mismatch, balance sufficient for transfer\r\n     */    \r\n    function signedTransferCheck(address from, address to, uint transferAmount, uint fee,\r\n                                    uint nonce, bytes memory sig, address feeAccount) public view returns (string memory result) {\r\n        bytes32 hash = signedTransferHash(from, to, transferAmount, fee, nonce);\r\n        if (nextNonce[from] != nonce)\r\n            return \"Nonce does not match.\";\r\n        if (from == address(0) || from != ecrecoverFromSig(keccak256(abi.encodePacked(signingPrefix, hash)), sig))\r\n            return \"Mismatch in signing account or parameter mismatch.\";\r\n        if (transferAmount > balances[from])\r\n            return \"Transfer amount exceeds token balance on address.\";\r\n        if (transferAmount.add(fee) > balances[from])\r\n            return \"Insufficient tokens to pay for fees.\";\r\n        if (balances[feeAccount] + fee < balances[feeAccount])\r\n            return \"Overflow error.\";\r\n        return \"All checks cleared\";\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // ecrecover from a signature rather than the signature in parts [v, r, s]\r\n    // The signature format is a compact form {bytes32 r}{bytes32 s}{uint8 v}.\r\n    // Compact means, uint8 is not padded to 32 bytes.\r\n    //\r\n    // An invalid signature results in the address(0) being returned, make\r\n    // sure that the returned result is checked to be non-zero for validity\r\n    //\r\n    // Parts from https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\r\n    // ------------------------------------------------------------------------\r\n    function ecrecoverFromSig(bytes32 hash, bytes memory sig) public pure returns (address recoveredAddress) {\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n        if (sig.length != 65) return address(0);\r\n        assembly {\r\n            r := mload(add(sig, 32))\r\n            s := mload(add(sig, 64))\r\n            // Here we are loading the last 32 bytes. We exploit the fact that 'mload' will pad with zeroes if we overread.\r\n            // There is no 'mload8' to do this, but that would be nicer.\r\n            v := byte(0, mload(add(sig, 96)))\r\n        }\r\n        // Albeit non-transactional signatures are not specified by the YP,\r\n        // one would expect it to match the YP range of [27, 28]\r\n        // geth uses [0, 1] and some clients have followed. This might change,\r\n        // see https://github.com/ethereum/go-ethereum/issues/2053\r\n        if (v < 27) {\r\n          v += 27;\r\n        }\r\n        if (v != 27 && v != 28) return address(0);\r\n        return ecrecover(hash, v, r, s);\r\n    }\r\n\r\n\r\n    /**\r\n     * Creates keccak256 hash of sent parameters\r\n     */\r\n    function signedTransferHash(address from, address to, uint transferAmount, uint fee,\r\n                                    uint nonce) public view returns (bytes32 hash) {\r\n        hash = keccak256(\r\n            abi.encodePacked(signedTransferSig, address(this), from, to, transferAmount, fee, nonce)\r\n                        );\r\n    }\r\n\r\n    /**\r\n     * executes signedTransfer, allowing tokens to be sent through a delegate\r\n     */\r\n    function signedTransfer(address from, address to, uint transferAmount, uint fee,\r\n                            uint nonce, bytes memory sig, address feeAccount) public returns (bool success) {\r\n        bytes32 hash = signedTransferHash(from, to, transferAmount, fee, nonce);\r\n        // verifies if signature is indeed signed by owner, and with the same values\r\n        require(from != address(0) && from == ecrecoverFromSig(keccak256(abi.encodePacked(signingPrefix, hash)), sig));\r\n        require(nextNonce[from] == nonce);\r\n\r\n        // update nonce\r\n        nextNonce[from] = nonce + 1;\r\n\r\n        // transfer tokens\r\n        balances[from] = balances[from].sub(transferAmount);\r\n        balances[to] = balances[to].add(transferAmount);\r\n        emit Transfer(from, to, transferAmount);\r\n        \r\n        // transfer fees\r\n        balances[from] = balances[from].sub(fee);\r\n        balances[feeAccount] = balances[feeAccount].add(fee);\r\n        emit Transfer(from, feeAccount, fee);\r\n        return true;\r\n    }\r\n}\r\n\r\n//token contract\r\ncontract Token is Owned, delegableToken {\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    /* Public variables of the token */\r\n    string public name;\r\n    uint8 public decimals;\r\n    string public symbol;\r\n    uint256 private _totalSupply;\r\n    address public distributionAddress;\r\n    bool public isTransferable = false;\r\n\r\n\r\n    constructor() public {\r\n        name = \"Twistcode Token\";\r\n        decimals = 18;\r\n        symbol = \"TCDT\";\r\n        _totalSupply = 1500000000 * 10 ** uint256(decimals);\r\n        owner = msg.sender;\r\n\r\n        //transfer all to handler address\r\n        balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0x0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    function signedTransfer(address _tokenOwner, address _to, uint _tokens, uint _fee, uint _nonce, bytes memory _sig,\r\n                            address _feeAccount) public returns (bool) {\r\n        require(isTransferable);\r\n        return super.signedTransfer(_tokenOwner, _to, _tokens, _fee, _nonce, _sig, _feeAccount);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(isTransferable);\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(isTransferable);\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function transferHasSupportFor(address _to, uint256 _value, bytes memory _data) public returns (bool) {\r\n        uint codeLength;\r\n\r\n        require(isTransferable);\r\n        require(super.transfer(_to, _value));\r\n        assembly {\r\n            // retrieve code where tokens are sent tokens\r\n            // if code exists, we are interfacing with an external contract\r\n            codeLength := extcodesize(_to)\r\n        }\r\n\r\n        // call contract to see if it implements hasSupportFor\r\n        // _data should specify the function signature and signature parameters\r\n        if(codeLength > 0) {\r\n            contractInterface receiver = contractInterface(_to);\r\n            receiver.hasSupportFor(msg.sender, _value, _data);\r\n        }\r\n    }\r\n\r\n    function signedtransferHasSupportFor(address _tokenOwner, address _to, uint _tokens, uint _fee, uint _nonce, bytes memory _sig,\r\n                            address _feeAccount, bytes memory _data) public returns (bool) {\r\n        uint codeLength;\r\n        require(isTransferable);\r\n        require(super.signedTransfer(_tokenOwner, _to, _tokens, _fee, _nonce, _sig, _feeAccount));\r\n        \r\n        assembly {\r\n            // retrieve code where tokens are sent tokens\r\n            // if code exists, we are interfacing with an external contract\r\n            codeLength := extcodesize(_to)\r\n        }\r\n        \r\n        // call contract to see if it implements hasSupportFor\r\n        // _data should specify the function signature and signature parameters\r\n        if(codeLength > 0) {\r\n            contractInterface receiver = contractInterface(_to);\r\n            receiver.hasSupportFor(_tokenOwner, _tokens, _data);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Get totalSupply of tokens - Minus any from address 0 if that was used as a burnt method\r\n     * Suggested way is still to use the burnSent function\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * unlocks tokens, only allowed once\r\n     */\r\n    function enableTransfers() public onlyOwner {\r\n        isTransferable = true;\r\n    }\r\n\r\n    /**\r\n     * Callable by anyone\r\n     * Accepts an input of the number of tokens to be burnt held by the sender.\r\n     */\r\n    function burnSent(uint256 _value) public {\r\n        require(_value > 0);\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        _totalSupply = _totalSupply.sub(_value);\r\n        emit Burn(burner, _value);\r\n    }\r\n\r\n    \r\n    /**\r\n    * Allow distribution helper to help with distributeToken function\r\n    * Here we should update the distributionAddress with the crowdsale contract address upon deployment\r\n    * Allows for added flexibility in terms of scheduling, token allocation, etc.\r\n    */\r\n    function setDistributionAddress(address _setAddress) public onlyOwner {\r\n        distributionAddress = _setAddress;\r\n    }\r\n\r\n    /**\r\n     * Called by owner to transfer tokens - Managing manual distribution.\r\n     * Also allow distribution contract to call for this function\r\n     */\r\n    function distributeTokens(address _to, uint256 _value) public {\r\n        require(distributionAddress == msg.sender || owner == msg.sender);\r\n        super.transfer(_to, _value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"distributeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isTransferable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributionAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signedTransferSig\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_sig\",\"type\":\"bytes\"},{\"name\":\"_feeAccount\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"signedtransferHasSupportFor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_sig\",\"type\":\"bytes\"},{\"name\":\"_feeAccount\",\"type\":\"address\"}],\"name\":\"signedTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"transferAmount\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"sig\",\"type\":\"bytes\"},{\"name\":\"feeAccount\",\"type\":\"address\"}],\"name\":\"signedTransferCheck\",\"outputs\":[{\"name\":\"result\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnSent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getNextNonce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"transferAmount\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"signedTransferHash\",\"outputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_setAddress\",\"type\":\"address\"}],\"name\":\"setDistributionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferHasSupportFor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"ecrecoverFromSig\",\"outputs\":[{\"name\":\"recoveredAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signingPrefix\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Token","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://2a216394ef8b61cc54e240814c91340d63c9b6208d9c0a2d03afb4ccd8c386f3"}]}