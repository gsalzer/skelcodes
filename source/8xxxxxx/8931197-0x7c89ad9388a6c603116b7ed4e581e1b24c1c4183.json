{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2019-09-09\r\n * BEB dapp for www.betbeb.com\r\n*/\r\npragma solidity^0.4.24;  \r\ninterface tokenTransfer {\r\n    function transfer(address receiver, uint amount);\r\n    function transferFrom(address _from, address _to, uint256 _value);\r\n    function balanceOf(address receiver) returns(uint256);\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n \r\n    function Ownable () public {\r\n        owner = msg.sender;\r\n    }\r\n \r\n    modifier onlyOwner {\r\n        require (msg.sender == owner);\r\n        _;\r\n    }\r\n \r\n    /**\r\n     * @param  newOwner address\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        if (newOwner != address(0)) {\r\n        owner = newOwner;\r\n      }\r\n    }\r\n}\r\n\r\ncontract LUCK is Ownable{\r\ntokenTransfer public bebTokenTransfer; //代币 \r\n    uint8 decimals = 18;\r\n    uint256 opentime=now+3600;//开放时间\r\n    uint256 opensome;//设定次数\r\n    uint256 _opensome;//已经空投次数\r\n    uint256 BEBMAX;\r\n    uint256 BEBtime;\r\n    uint256 Numberofairdrops;\r\n    //address owners;\r\n    struct luckuser{\r\n        uint256 _time;\r\n        uint256 _eth;\r\n        uint256 _beb;\r\n        uint256 _bz;\r\n        uint256 _romd;//随机数\r\n        uint256 Bond;\r\n    }\r\n    mapping(address=>luckuser)public luckusers;\r\n    function LUCK(address _tokenAddress){\r\n         bebTokenTransfer = tokenTransfer(_tokenAddress);\r\n     }\r\n     function present(uint256 _value)public{\r\n         require(_value==168168168,\"Airdrop password error\");\r\n         require(tx.origin == msg.sender);\r\n         luckuser storage _user=luckusers[msg.sender];\r\n         require(_user.Bond==1);\r\n         require(getTokenBalanceUser(msg.sender)>=BEBMAX,\"You don't have a beb\");\r\n         //luckuser storage _users=luckusers[owners];\r\n         require(now>opentime,\"Airdrop not open\");\r\n         if(_opensome>=opensome){\r\n             opentime=now+BEBtime;\r\n             _opensome=0;\r\n         }\r\n         uint256 _times=now;\r\n         uint256 _usertime=now-_user._time;\r\n         require(_usertime>86400 || _user._time==0,\"You can't air drop again, please wait 24 hours\");\r\n         //生成随机数1~100\r\n         uint256 random2 = random(block.difficulty+_usertime+_times);\r\n         if(random2>50){\r\n             if(random2==88){\r\n                  _user._time=now;\r\n                  _user._eth=1 ether;\r\n                  _user._bz=1;\r\n                  _user._beb=0;\r\n                  _user._romd=random2;\r\n                  _opensome+=1;\r\n                  require(this.balance>=1 ether,\"Insufficient contract balance\");\r\n                  msg.sender.transfer(1 ether);\r\n             }else{\r\n                  _user._time=now;\r\n                  uint256 ssll=random2-50;\r\n                  uint256 sstt=ssll* 10 ** 18;\r\n                  uint256 rrr=sstt/1000;\r\n                 _user._eth=rrr;\r\n                 uint256 beb=random2* 10 ** 18;\r\n                 _user._beb=beb;\r\n                 _user._romd=random2;\r\n                  _user._bz=1;\r\n                  _opensome+=1;\r\n                  require(this.balance>=rrr,\"Insufficient contract balance\");\r\n                  msg.sender.transfer(rrr);\r\n                 bebTokenTransfer.transfer(msg.sender,beb);\r\n             }\r\n         }else{\r\n              _user._bz=0;\r\n              _user._time=now;\r\n              _user._eth=0;\r\n              _user._beb=0;\r\n              _user._romd=random2;\r\n         }\r\n         \r\n     }\r\n     function setETH()payable public{\r\n         require(tx.origin == msg.sender);\r\n         uint256 _amount=msg.value;\r\n         require(_amount==100000000000000000);\r\n         luckuser storage _users=luckusers[msg.sender];\r\n         require(_users.Bond!=1);\r\n         _users.Bond=1;\r\n         Numberofairdrops+=1;\r\n     }\r\n     function refundETH()public{\r\n         require(tx.origin == msg.sender);\r\n         luckuser storage _users=luckusers[msg.sender];\r\n         require(_users.Bond==1);\r\n          uint256 _usertime=now-_users._time;\r\n         require(_usertime>86400,\"Please apply for refund in 24 hours\");\r\n         _users.Bond=0;\r\n         Numberofairdrops-=1;\r\n         msg.sender.transfer(100000000000000000);\r\n     }\r\n     function getLUCK()public view returns(uint256,uint256,uint256,uint256,uint256,uint256){\r\n         luckuser storage _user=luckusers[msg.sender];\r\n         return (_user._time,_user._eth,_user._beb,_user._bz,_user._romd,opentime);\r\n     }\r\n    //buyBeb-eth\r\n    function getTokenBalance() public view returns(uint256){\r\n         return bebTokenTransfer.balanceOf(address(this));\r\n    }\r\n    function getTokenBalanceUser(address _addr) public view returns(uint256){\r\n         return bebTokenTransfer.balanceOf(address(_addr));\r\n    }\r\n    function gettime() public view returns(uint256,uint256){\r\n         return (opentime,Numberofairdrops);\r\n    }\r\n    function querBalance()public view returns(uint256){\r\n         return this.balance;\r\n     }\r\n     function ETHwithdrawal(uint256 amount) payable  onlyOwner {\r\n       //uint256 _amount=amount* 10 ** 18;\r\n       require(this.balance>=amount,\"Insufficient contract balance\");\r\n       owner.transfer(amount);\r\n    }\r\n    function BEBwithdrawal(uint256 amount)onlyOwner {\r\n       uint256 _amount=amount* 10 ** 18;\r\n       bebTokenTransfer.transfer(owner,_amount);\r\n    }\r\n    function setLUCK(uint256 _opentime,uint256 _opensome_,uint256 _BEBMAX,uint256 _BEBtime)onlyOwner{\r\n        opentime=now+_opentime;\r\n        opensome=_opensome_;\r\n        BEBMAX=_BEBMAX* 10 ** 18;\r\n        BEBtime=_BEBtime;\r\n        \r\n    }\r\n    //生成随机数\r\n     function random(uint256 randomyType)  internal returns(uint256 num){\r\n        uint256 random = uint256(keccak256(randomyType,now));\r\n         uint256 randomNum = random%101;\r\n         if(randomNum<1){\r\n             randomNum=1;\r\n         }\r\n         if(randomNum>100){\r\n            randomNum=100; \r\n         }\r\n         \r\n         return randomNum;\r\n    }\r\n    function ()payable{\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BEBwithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refundETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gettime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bebTokenTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getTokenBalanceUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLUCK\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_opentime\",\"type\":\"uint256\"},{\"name\":\"_opensome_\",\"type\":\"uint256\"},{\"name\":\"_BEBMAX\",\"type\":\"uint256\"},{\"name\":\"_BEBtime\",\"type\":\"uint256\"}],\"name\":\"setLUCK\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"querBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"luckusers\",\"outputs\":[{\"name\":\"_time\",\"type\":\"uint256\"},{\"name\":\"_eth\",\"type\":\"uint256\"},{\"name\":\"_beb\",\"type\":\"uint256\"},{\"name\":\"_bz\",\"type\":\"uint256\"},{\"name\":\"_romd\",\"type\":\"uint256\"},{\"name\":\"Bond\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"present\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ETHwithdrawal\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"LUCK","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000006798cc8ad079a7e663536f83ee26d63aabe03da9","Library":"","LicenseType":"None","SwarmSource":"bzzr://ddc63a71ca54e748920268029cad4534233cc0fc3d7124a54f019de34fde0d22"}]}