{"status":"1","message":"OK","result":[{"SourceCode":"{\"Management.sol\":{\"content\":\"pragma solidity ^0.5.10;\\n\\ncontract Management {\\n\\n    //VOTES\\n    struct DirectorsApprove{\\n        address director;\\n        bool voted;\\n    }\\n\\n    //DIRECTORS PROPERTIES\\n    uint256 totalDirectors;\\n\\n    mapping(address =\\u003e bool) directors;\\n    mapping(address =\\u003e uint8) countApproveDirectors;\\n    mapping(address =\\u003e DirectorsApprove[]) directorsApprove;\\n    mapping(address =\\u003e mapping(address =\\u003e bool)) countDirectorApprove;\\n\\n    modifier onlyDirector {\\n        require(directors[msg.sender], \\\"Invalid sender\\\");\\n        _;\\n    }\\n\\n    //GENEALOGY PROPERTIES\\n    address[] addressesInitiated;\\n\\n    struct Genealogy{\\n        address law;\\n        address father;\\n        mapping(address =\\u003e uint256) children;\\n    }\\n\\n    mapping(address =\\u003e Genealogy) genealogy;\\n    mapping(address =\\u003e mapping(address =\\u003e uint8)) countApproveGenealogy;\\n    mapping(address =\\u003e mapping(address =\\u003e DirectorsApprove[])) genalogyApprove;\\n    mapping(address =\\u003e mapping(address =\\u003e mapping(address =\\u003e bool))) directorsVoted;\\n\\n    //LAW PROPERTIES\\n    bool public legislationValid;\\n\\n    mapping(address =\\u003e uint8) countVotes;\\n    mapping(address =\\u003e mapping(address =\\u003e bool)) abortLaw;\\n\\n    modifier currentLaw {\\n        require(legislationValid, \\\"The law is invalid\\\");\\n        _;\\n    }\\n\\n    //CONSTRUCTOR\\n    constructor() public {\\n        directors[msg.sender] = true;\\n        totalDirectors = 1;\\n        legislationValid = true;\\n    }\\n\\n     //INTERFACES FUNCTIONS\\n    function initContract(address _address) public currentLaw returns (bool success){\\n        require(genealogy[_address].law == address(0x0), \\\"Invalid address\\\");\\n\\n        Genealogy memory newGenealogy = Genealogy({\\n            law: address(this),\\n            father: address(0x0)\\n        });\\n\\n        addressesInitiated.push(_address);\\n        genealogy[_address] = newGenealogy;\\n\\n        return true;\\n    }\\n\\n    function setPermission(address _address, uint256 _permission) public currentLaw returns (bool success){\\n        require(genealogy[_address].father == msg.sender, \\\"Sender must be father\\\");\\n        genealogy[msg.sender].children[_address] = _permission;\\n        return true;\\n    }\\n\\n    function getPermission(address _address) public view currentLaw returns (uint256){\\n        return genealogy[msg.sender].children[_address];\\n    }\\n\\n    function getGenealogy(address _child, address _father) public view currentLaw returns(uint256 permission){\\n        return genealogy[_father].children[_child];\\n    }\\n\\n    function getGenealogyComplete(address _me) public view currentLaw returns(address law, address father){\\n        return (\\n            genealogy[_me].law,\\n            genealogy[_me].father\\n        );\\n\\n    }\\n\\n    //DIRECTORS FUNCTIONS\\n    function addDirector(address _newDirector) private returns(bool success){\\n        directors[_newDirector] = true;\\n        totalDirectors++;\\n\\n        return true;\\n    }\\n\\n    function removeDirector(address _director) private returns(bool success){\\n        directors[_director] = false;\\n        totalDirectors--;\\n\\n        return true;\\n    }\\n\\n    function seeDirector(address _address) public view currentLaw returns(bool director){\\n        return directors[_address];\\n    }\\n\\n    function directorAddRequest(address _address) public onlyDirector currentLaw returns(bool success){\\n        require(!countDirectorApprove[_address][msg.sender] \\u0026\\u0026 !directors[_address], \\\"Ivalid values\\\");\\n\\n        DirectorsApprove memory newRequest = DirectorsApprove({\\n            director: msg.sender,\\n            voted: true\\n        });\\n\\n        directorsApprove[_address].push(newRequest);\\n        countDirectorApprove[_address][msg.sender] = true;\\n        countApproveDirectors[_address]++;\\n\\n        if(countApproveDirectors[_address] \\u003e totalDirectors/2) {\\n            addDirector(_address);\\n            countApproveDirectors[_address] = 0;\\n            for(uint8 i = 0; i \\u003c directorsApprove[_address].length; i++){\\n                directorsApprove[_address][i].voted = false;\\n                countDirectorApprove[_address][directorsApprove[_address][i].director] = false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function directorRemoveRequest(address _address) public onlyDirector currentLaw returns(bool success){\\n        require(!countDirectorApprove[_address][msg.sender] \\u0026\\u0026 totalDirectors \\u003e 1 \\u0026\\u0026 directors[_address], \\\"Invalid values\\\");\\n        DirectorsApprove memory newRequest = DirectorsApprove({\\n            director: msg.sender,\\n            voted: true\\n        });\\n\\n        directorsApprove[_address].push(newRequest);\\n        countDirectorApprove[_address][msg.sender] = true;\\n        countApproveDirectors[_address]++;\\n\\n        if(countApproveDirectors[_address] \\u003e totalDirectors/2) {\\n            removeDirector(_address);\\n            countApproveDirectors[_address] = 0;\\n            for(uint8 i = 0; i \\u003c directorsApprove[_address].length; i++){\\n                directorsApprove[_address][i].voted = false;\\n                countDirectorApprove[_address][directorsApprove[_address][i].director] = false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function getTotalDirectors() public view currentLaw returns (uint256 total){\\n        return totalDirectors;\\n    }\\n\\n    //GENEALOGY FUNCTIONS\\n    function setNewGenealogy(address _child, address _father) private returns (bool succcess){\\n        genealogy[_child].father = _father;\\n        genealogy[_father].children[_child] = 1;\\n\\n        return true;\\n    }\\n\\n    function removeGenealogy(address _child, address _father) private returns (bool success){\\n        genealogy[_child].father = address(0x0);\\n        genealogy[_father].children[_child] = 0;\\n\\n        return true;\\n    }\\n\\n    function genealogyAddRequest(address _child, address _father) public onlyDirector currentLaw returns(bool success){\\n        require(!directorsVoted[_child][_father][msg.sender] \\u0026\\u0026 genealogy[_child].law != address(0x0) \\u0026\\u0026\\n            genealogy[_father].law != address(0x0), \\\"Invalid values\\\");\\n\\n        DirectorsApprove memory newRequest = DirectorsApprove({\\n            director: msg.sender,\\n            voted: true\\n        });\\n\\n        genalogyApprove[_child][_father].push(newRequest);\\n        directorsVoted[_child][_father][msg.sender] = true;\\n        countApproveGenealogy[_child][_father]++;\\n\\n        if(countApproveGenealogy[_child][_father] \\u003e totalDirectors/2){\\n            setNewGenealogy(_child, _father);\\n            countApproveGenealogy[_child][_father] = 0;\\n            for(uint8 i = 0; i \\u003c genalogyApprove[_child][_father].length; i++){\\n                genalogyApprove[_child][_father][i].voted = false;\\n                directorsVoted[_child][_father][genalogyApprove[_child][_father][i].director] = false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function genealogyRemoveRequest(address _child, address _father) public onlyDirector currentLaw returns(bool success){\\n        require(!directorsVoted[_child][_father][msg.sender] \\u0026\\u0026 genealogy[_father].children[_child] \\u003e= 1, \\\"Invalid values\\\");\\n\\n        DirectorsApprove memory newRequest = DirectorsApprove({\\n            director: msg.sender,\\n            voted: true\\n        });\\n\\n        genalogyApprove[_child][_father].push(newRequest);\\n        directorsVoted[_child][_father][msg.sender] = true;\\n        countApproveGenealogy[_child][_father]++;\\n\\n        if(countApproveGenealogy[_child][_father] \\u003e totalDirectors/2){\\n            removeGenealogy(_child, _father);\\n            countApproveGenealogy[_child][_father] = 0;\\n            for(uint8 i = 0; i \\u003c genalogyApprove[_child][_father].length; i++){\\n                genalogyApprove[_child][_father][i].voted = false;\\n                directorsVoted[_child][_father][genalogyApprove[_child][_father][i].director] = false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    //LAW FUNCTION\\n    function abortLawRequest(address _address) public onlyDirector currentLaw returns(bool success){\\n        require(!abortLaw[_address][msg.sender], \\\"Sender already voted\\\");\\n\\n        abortLaw[_address][msg.sender] = true;\\n        countVotes[_address]++;\\n\\n        if(countVotes[_address] == totalDirectors){\\n            legislationValid = false;\\n        }\\n        return true;\\n    }\\n}\"},\"Symma.sol\":{\"content\":\"pragma solidity ^0.5.10;\\n\\nimport \\\"./Management.sol\\\";\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        c = a + b;\\n        require(c \\u003e= a, \\\"Invalid value\\\");\\n    }\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require(b \\u003c= a, \\\"Invalid value\\\");\\n        c = a - b;\\n    }\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        c = a * b;\\n        require(a == 0 || c / a == b, \\\"Invalid value\\\");\\n    }\\n    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require(b \\u003e 0, \\\"Invalid value\\\");\\n        c = a / b;\\n    }\\n}\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\ncontract Symma is IERC20 {\\n    using SafeMath for uint256;\\n\\n    Management management;\\n    address owner;\\n\\n    //SYMMA EVENTS\\n    event Transfer( address indexed _from, address indexed _to, uint256 _value );\\n    event Approval( address indexed _tokenOwner, address indexed _spender, uint256 _tokens);\\n\\n    //SYMMA PROPERTIES\\n    struct Quotation {\\n        uint256 numerator;\\n        uint256 denominator;\\n    }\\n\\n    Quotation public currencyRate;\\n    Quotation public fee;\\n\\n    //ERC20 PROPERTIES\\n    string public name = \\\"SYMMA\\\";\\n    string public symbol = \\\"SYM\\\";\\n    string public standard = \\\"SYM Token v3.0\\\";\\n    uint8 public decimals = 2;\\n    uint256 private supply;\\n\\n    mapping(address =\\u003e uint256) symmaToken;\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) allowed;\\n\\n    constructor(address _addressManagement) public payable {\\n        owner = msg.sender;\\n        management = Management(_addressManagement);\\n        currencyRate.numerator = 1;\\n        currencyRate.denominator = 100;\\n        fee.numerator = 5;\\n        fee.denominator = 1000;\\n    }\\n\\n    //MODIFIERS MANAGEMENTS\\n    modifier onlyOwner {\\n        require(owner == msg.sender, \\\"Sender must be a child\\\");\\n        _;\\n    }\\n\\n    modifier onlyOperator {\\n        require(management.getGenealogy(msg.sender, address(this)) == 2, \\\"Sender must be a child\\\");\\n        _;\\n    }\\n\\n    modifier onlyDirector {\\n        require(management.seeDirector(msg.sender), \\\"Sender must be director\\\");\\n        _;\\n    }\\n\\n    modifier onlyPermitted{\\n        require(management.seeDirector(msg.sender) || management.getGenealogy(msg.sender, address(this)) \\u003e 0,\\n            \\\"Sender must be director or a child\\\");\\n        _;\\n    }\\n\\n    //REQUESTS PROPERTIES\\n    struct DirectorsApprove{\\n        address director;\\n        bool voted;\\n    }\\n\\n    mapping(uint256 =\\u003e mapping(uint256 =\\u003e uint8)) countApproveQuotations;\\n    mapping(uint256 =\\u003e mapping(uint256 =\\u003e DirectorsApprove[])) quotationApprove;\\n    mapping(uint256 =\\u003e mapping(uint256 =\\u003e mapping(address =\\u003e bool))) countQuotationDirectorsApprove;\\n\\n    //MANAGEMENT FUNCTIONS\\n    function setPermission(address _address, uint8 _permission) public onlyDirector returns (bool success){\\n        management.setPermission(_address, _permission);\\n        return true;\\n    }\\n\\n    function getPermission(address _address) public view onlyDirector returns (uint256 permission){\\n        return management.getPermission(_address);\\n    }\\n\\n    //MANOLO FUNCTION\\n    uint256 public donation;\\n\\n    function donate() public payable {\\n        donation = donation.add(msg.value);\\n    }\\n\\n    //OPERATOR FUNCTION\\n    function deposit(address  _address, address _addressOperator) public payable onlyOperator returns (bool success){\\n        uint256 _taxValue = msg.value * fee.numerator / fee.denominator;\\n        uint256 _userValue = msg.value - _taxValue;\\n        symmaToken[_address] = symmaToken[_address].add(_userValue);\\n        symmaToken[_addressOperator] = symmaToken[_addressOperator].add(_taxValue);\\n        supply = supply.add(msg.value);\\n\\n        return true;\\n    }\\n\\n    function batchDeposit(address[] memory  _address, address _addressOperator, uint256[] memory _value)\\n        public payable onlyOperator returns (bool success){\\n        uint256 _taxValue;\\n        uint256 _userValue;\\n\\n        for(uint8 i = 0; i \\u003c _address.length; i++) {\\n            _taxValue = _value[i] * fee.numerator / fee.denominator;\\n            _userValue = _value[i] - _taxValue;\\n            symmaToken[_address[i]] = symmaToken[_address[i]].add(_userValue);\\n            symmaToken[_addressOperator] = symmaToken[_addressOperator].add(_taxValue);\\n        }\\n\\n        supply = supply.add(msg.value);\\n\\n        return true;\\n    }\\n\\n    function withdraw(address payable _address, address _addressOperator, uint256 _symmaValue, uint256 _estimateGas,\\n        bytes32 _hash, uint8 _v, bytes32 _r, bytes32 _s) public  onlyOperator returns (bool success) {\\n        require(_symmaValue \\u003e= 100, \\\"Must be more than one symma\\\");\\n        require(verifyAssignature(_address, _hash, _v, _r, _s), \\\"Invalid signature\\\");\\n        require(symmaToken[_address] \\u003e= toEther(_symmaValue), \\\"Sender insufficient funds\\\");\\n\\n        uint256 _etherValue = toEther(_symmaValue);\\n\\n        uint256 _taxValue = _etherValue * fee.numerator / fee.denominator + _estimateGas;\\n        uint256 _userValue = _etherValue - _taxValue;\\n\\n        symmaToken[_address] = symmaToken[_address].sub(_etherValue);\\n        supply = supply.sub(_etherValue);\\n\\n        symmaToken[_addressOperator] = symmaToken[_addressOperator].add(_taxValue);\\n        _address.transfer(_userValue);\\n\\n        emit Transfer(address(this), _address, _userValue);\\n\\n        return true;\\n    }\\n\\n    function transferFromOperator(address _from, address _to, address _addressOperator, uint256 _symmaValue)\\n        public onlyOperator returns(bool success){\\n        require(symmaToken[_from] \\u003e= toEther(_symmaValue) \\u0026\\u0026 _symmaValue \\u003e 0, \\\"Invalid values\\\");\\n\\n        uint256 _etherValue = toEther(_symmaValue);\\n\\n        uint256 _taxValue = _etherValue * fee.numerator / fee.denominator;\\n        uint256 _userValue = _etherValue + _taxValue;\\n\\n        symmaToken[_from] = symmaToken[_from].sub(_userValue);\\n\\n        symmaToken[_to] = symmaToken[_to].add(_etherValue);\\n        symmaToken[_addressOperator] = symmaToken[_addressOperator].add(_taxValue);\\n\\n        emit Transfer(_from, _to, _etherValue);\\n\\n        return true;\\n    }\\n\\n    //ERC20\\n    function transfer(address _to, uint256 _symmaValue) public returns(bool success){\\n        require(symmaToken[msg.sender] \\u003e= toEther(_symmaValue) \\u0026\\u0026 _symmaValue \\u003e 0, \\\"Invalid values\\\");\\n\\n        uint256 ethValue = toEther(_symmaValue);\\n\\n        symmaToken[msg.sender] = symmaToken[msg.sender].sub(ethValue);\\n        symmaToken[_to] = symmaToken[_to].add(ethValue);\\n\\n        emit Transfer(msg.sender, _to, ethValue);\\n\\n        return true;\\n    }\\n\\n    function balanceOf(address _address) public view returns(uint256 balance){\\n        return toSymma(symmaToken[_address]);\\n    }\\n\\n    function totalSupply() public onlyPermitted view returns(uint256 symmaValue){\\n        return toSymma(supply);\\n    }\\n\\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining){\\n        return allowed[_owner][_spender];\\n    }\\n\\n    function approve(address _spender, uint256 _symmaValue) public returns (bool success){\\n        require(symmaToken[msg.sender] \\u003e= _symmaValue \\u0026\\u0026 _spender != address(0x0), \\\"Invalid values\\\");\\n\\n        allowed[msg.sender][_spender] = _symmaValue;\\n\\n        emit Approval(msg.sender, _spender, _symmaValue);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(address _from, address _to, uint256 _symmaValue) public returns (bool success){\\n        require(symmaToken[_from] \\u003e= _symmaValue \\u0026\\u0026 allowed[_from][msg.sender] \\u003e= _symmaValue \\u0026\\u0026\\n            _symmaValue \\u003e 0 \\u0026\\u0026 _to != address(0x0), \\\"Invalid values\\\");\\n\\n        uint256 ethValue = toEther(_symmaValue);\\n\\n        symmaToken[_from] = symmaToken[_from].sub(ethValue);\\n        symmaToken[_to] = symmaToken[_to].add(ethValue);\\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_symmaValue);\\n\\n        emit Transfer(msg.sender, _to, _symmaValue);\\n\\n        return true;\\n    }\\n\\n    //AUXILIARY FUNCTIONS\\n    function toSymma(uint256 _value) private view returns(uint256 symma){\\n        uint256 result = (_value * currencyRate.denominator / currencyRate.numerator) / 10**15;\\n        require(result \\u003e= 0, \\\"Result can\\u0027t be zero\\\");\\n        return result;\\n    }\\n\\n    function toEther(uint256 _symma) private view returns(uint256 value){\\n        uint256 result = (_symma * currencyRate.numerator / currencyRate.denominator) * 10**15;\\n        require(result \\u003e= 0, \\\"Result can\\u0027t be zero\\\");\\n        return result;\\n    }\\n\\n    function verifyAssignature(address _address, bytes32 _hash, uint8 _v, bytes32 _r, bytes32 _s) private pure returns(bool success){\\n        require(_address != address(0x0) \\u0026\\u0026 _hash.length \\u003e 0 \\u0026\\u0026 _r.length \\u003e 0 \\u0026\\u0026 _s.length \\u003e 0, \\\"Invalid values\\\");\\n        return (ecrecover(_hash, _v, _r, _s) == _address);\\n    }\\n\\n    //REQUEST CURRENCY RATE AND TAX VALUES\\n    function resetFee(uint256 _numerator, uint256 _denominator) private returns(bool success){\\n        fee.numerator = _numerator;\\n        fee.denominator = _denominator;\\n        return true;\\n    }\\n\\n    function resetCurrencyRate(uint256 _numerator, uint256 _denominator) private returns(bool success){\\n        currencyRate.numerator = _numerator;\\n        currencyRate.denominator = _denominator;\\n        return true;\\n    }\\n\\n    function currencyRateRequest(uint256 _numerator, uint256 _denominator) public onlyDirector returns(bool success){\\n        require(!countQuotationDirectorsApprove[_numerator][_denominator][msg.sender] \\u0026\\u0026 _numerator \\u003e 0 \\u0026\\u0026 _denominator \\u003e 0, \\\"Invalid values\\\");\\n\\n        DirectorsApprove memory newRequest = DirectorsApprove({\\n            director: msg.sender,\\n            voted: true\\n        });\\n\\n        quotationApprove[_numerator][_denominator].push(newRequest);\\n        countQuotationDirectorsApprove[_numerator][_denominator][msg.sender] = true;\\n        countApproveQuotations[_numerator][_denominator]++;\\n\\n        if(countApproveQuotations[_numerator][_denominator] \\u003e management.getTotalDirectors()/2) {\\n            resetCurrencyRate(_numerator, _denominator);\\n            countApproveQuotations[_numerator][_denominator] = 0;\\n            for(uint8 i = 0; i \\u003c quotationApprove[_numerator][_denominator].length; i++){\\n                quotationApprove[_numerator][_denominator][i].voted = false;\\n                countQuotationDirectorsApprove[_numerator][_denominator][quotationApprove[_numerator][_denominator][i].director] = false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    function feeRequest(uint256 _numerator, uint256 _denominator) public onlyDirector returns(bool success){\\n        require(!countQuotationDirectorsApprove[_numerator][_denominator][msg.sender] \\u0026\\u0026 _numerator \\u003e 0 \\u0026\\u0026 _denominator \\u003e 0, \\\"Invalid values\\\");\\n\\n        DirectorsApprove memory newRequest = DirectorsApprove({\\n            director: msg.sender,\\n            voted: true\\n        });\\n\\n        quotationApprove[_numerator][_denominator].push(newRequest);\\n        countQuotationDirectorsApprove[_numerator][_denominator][msg.sender] = true;\\n        countApproveQuotations[_numerator][_denominator]++;\\n\\n        if(countApproveQuotations[_numerator][_denominator] \\u003e management.getTotalDirectors()/2){\\n            resetFee(_numerator, _denominator);\\n            countApproveQuotations[_numerator][_denominator] = 0;\\n            for(uint8 i = 0; i \\u003c quotationApprove[_numerator][_denominator].length; i++){\\n                quotationApprove[_numerator][_denominator][i].voted = false;\\n                countQuotationDirectorsApprove[_numerator][_denominator][quotationApprove[_numerator][_denominator][i].director] = false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    function verifyContractBalance() public view returns(uint256 balance) {\\n        return address(this).balance;\\n    }\\n\\n    function changeManagement(address _address) public onlyOwner returns(bool success){\\n        management = Management(_address);\\n        return true;\\n    }\\n}\"}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_symmaValue\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"symmaValue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_symmaValue\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currencyRate\",\"outputs\":[{\"name\":\"numerator\",\"type\":\"uint256\"},{\"name\":\"denominator\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address[]\"},{\"name\":\"_addressOperator\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"batchDeposit\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getPermission\",\"outputs\":[{\"name\":\"permission\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"donation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"verifyContractBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_symmaValue\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_numerator\",\"type\":\"uint256\"},{\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"currencyRateRequest\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"changeManagement\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_addressOperator\",\"type\":\"address\"},{\"name\":\"_symmaValue\",\"type\":\"uint256\"}],\"name\":\"transferFromOperator\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_permission\",\"type\":\"uint8\"}],\"name\":\"setPermission\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"numerator\",\"type\":\"uint256\"},{\"name\":\"denominator\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_addressOperator\",\"type\":\"address\"},{\"name\":\"_symmaValue\",\"type\":\"uint256\"},{\"name\":\"_estimateGas\",\"type\":\"uint256\"},{\"name\":\"_hash\",\"type\":\"bytes32\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"donate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_addressOperator\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_numerator\",\"type\":\"uint256\"},{\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"feeRequest\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_addressManagement\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Symma","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000caee97071026e5886ea8d71c462314650e2b466a","Library":"","LicenseType":"None","SwarmSource":"bzzr://b0a5bec542fdf5f167197d3fb9adcca7637b6c735fe88e987b469811bc93f103"}]}