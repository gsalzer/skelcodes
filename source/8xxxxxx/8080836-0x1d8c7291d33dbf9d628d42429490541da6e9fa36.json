{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2019-06-19\r\n*/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n* @title Ownable\r\n* @dev The Ownable contract has an owner address, and provides basic authorization control\r\n* functions, this simplifies the implementation of \"user permissions\".\r\n*/\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  \r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  \r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n \r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract NewEscrow is Ownable {\r\n\r\n    enum OrderStatus { Pending, Completed, Refunded, Disputed }\r\n\r\n    event PaymentCreation(uint indexed orderId, address indexed customer, uint value);\r\n    event PaymentCompletion(uint indexed orderId, address indexed customer, uint value, OrderStatus status);\r\n    \r\n    uint orderCount;\r\n    \r\n    struct Order {\r\n        uint orderId;\r\n        address customer;\r\n        uint value;\r\n        OrderStatus status;\r\n        uint quantity;\r\n        uint itemId;\r\n        address disputeCreatedBy;\r\n        bool paymentStatus;\r\n        bool paymentMade;\r\n        \r\n    }\r\n    \r\n    struct Item {\r\n        uint quantity;\r\n        string name;\r\n        uint price;\r\n    }\r\n    \r\n    mapping(uint => Item) public items;\r\n    mapping(uint => Order) public orders;\r\n    \r\n    address public admin;\r\n    address public seller;    \r\n    \r\n    modifier onlyDisputed(uint256 _orderID) {\r\n        require(orders[_orderID].status != OrderStatus.Disputed);\r\n        _;\r\n    }\r\n    \r\n    modifier onlySeller() {\r\n        require(msg.sender == seller);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyDisputeEnder(uint256 _orderID,address _caller) {\r\n        require(_caller == admin || _caller == orders[_orderID].disputeCreatedBy);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyDisputeCreater(uint256 _orderID,address _caller) {\r\n        require(_caller == seller || _caller == orders[_orderID].customer);\r\n        _;\r\n    }\r\n    \r\n     modifier onlyAdminOrBuyer(uint256 _orderID, address _caller) {\r\n        require( _caller == admin || _caller == orders[_orderID].customer);\r\n        _;\r\n    }\r\n    \r\n     modifier onlyBuyer(uint256 _orderID, address _caller) {\r\n        require(_caller == orders[_orderID].customer);\r\n        _;\r\n    }\r\n    \r\n    \r\n    modifier onlyAdminOrSeller(address _caller) {\r\n        require(_caller == admin || _caller == seller);\r\n        _;\r\n    }\r\n    \r\n    constructor (address _seller) public {\r\n        admin = 0x382468fb5070Ae19e9D82ec388e79AE4e43d890D;\r\n        seller = _seller;\r\n        orderCount = 1;\r\n    }\r\n    \r\n    function buyProduct(uint _itemId, uint _itemQuantity) public payable {\r\n        require(msg.value > 0);\r\n        require(msg.value == (items[_itemId].price * _itemQuantity));\r\n        require(!orders[orderCount].paymentMade);\r\n        require(msg.sender != seller && msg.sender != admin);\r\n        orders[orderCount].paymentMade = true;\r\n        createPayment(_itemId, msg.sender, _itemQuantity);\r\n    }\r\n    \r\n    function createPayment(uint _itemId, address _customer, uint _itemQuantity) internal {\r\n       \r\n        require(items[_itemId].quantity >= _itemQuantity);\r\n    \r\n        orders[orderCount].orderId = orderCount;\r\n        \r\n        items[_itemId].quantity = items[_itemId].quantity - _itemQuantity;\r\n        \r\n        uint totalPrice = _itemQuantity * items[_itemId].price;\r\n        \r\n        orders[orderCount].value = totalPrice;\r\n        orders[orderCount].quantity = _itemQuantity;\r\n        orders[orderCount].customer = _customer;\r\n        orders[orderCount].itemId = _itemId;\r\n        orders[orderCount].status = OrderStatus.Pending;\r\n        \r\n        emit PaymentCreation(orderCount, _customer, totalPrice);\r\n        orderCount = orderCount + 1;\r\n    }\r\n    \r\n    function addItem(uint _itemId, string _itemName, uint _quantity, uint _price) external onlySeller  {\r\n\r\n        items[_itemId].name = _itemName;\r\n        items[_itemId].quantity = _quantity;\r\n        items[_itemId].price = _price;\r\n    }\r\n    \r\n    \r\n    function release(uint _orderId) public onlyDisputed(_orderId) onlyAdminOrBuyer(_orderId,msg.sender) {\r\n    \r\n        completePayment(_orderId, seller, OrderStatus.Completed);\r\n        \r\n    }\r\n    \r\n    function refund(uint _orderId, uint _itemId) public onlyDisputed(_orderId) onlyAdminOrSeller(msg.sender){\r\n        \r\n        items[_itemId].quantity = items[_itemId].quantity + orders[_orderId].quantity;\r\n        \r\n        incompletePayment(_orderId, orders[_orderId].customer, OrderStatus.Refunded);\r\n    }\r\n\r\n\r\n    function completePayment(uint _orderId, address _receiver, OrderStatus _status) private {\r\n        require(orders[_orderId].paymentStatus != true);\r\n        \r\n        Order storage payment = orders[_orderId];\r\n     \r\n        uint adminSupply = SafeMath.div(SafeMath.mul(orders[_orderId].value, 7), 100);\r\n        \r\n        uint sellerSupply = SafeMath.div(SafeMath.mul(orders[_orderId].value, 93), 100);\r\n        \r\n        _receiver.transfer(sellerSupply);\r\n        \r\n        admin.transfer(adminSupply);\r\n        \r\n        orders[_orderId].status = _status;\r\n        \r\n        orders[_orderId].paymentStatus = true;\r\n        \r\n        emit PaymentCompletion(_orderId, _receiver, payment.value, _status);\r\n    }\r\n    \r\n    function incompletePayment(uint _orderId, address _receiver, OrderStatus _status) private {\r\n        require(orders[_orderId].paymentStatus != true);                        \r\n        \r\n        Order storage payment = orders[_orderId];\r\n        \r\n        _receiver.transfer(orders[_orderId].value);\r\n       \r\n        orders[_orderId].status = _status;\r\n        \r\n        orders[_orderId].paymentStatus = true;\r\n        \r\n        emit PaymentCompletion(_orderId, _receiver, payment.value, _status);\r\n    }\r\n    \r\n     function openDispute (uint256 _orderID) external onlyDisputeCreater(_orderID,msg.sender){ \r\n        orders[_orderID].status = OrderStatus.Disputed;\r\n        orders[_orderID].disputeCreatedBy = msg.sender;\r\n    }\r\n    \r\n    function closeDispute (uint256 _orderID,uint256 _itemId, address _paymentSendTo) external onlyDisputeEnder(_orderID,msg.sender){\r\n        if (msg.sender == admin)\r\n        {\r\n            if (_paymentSendTo == orders[_orderID].customer)\r\n            {\r\n                orders[_orderID].status = OrderStatus.Refunded;\r\n                refund(_orderID, _itemId);\r\n            }\r\n            else if (_paymentSendTo == seller)\r\n            {\r\n                orders[_orderID].status = OrderStatus.Completed;\r\n                release(_orderID);\r\n            }\r\n        }\r\n        else if (msg.sender == orders[_orderID].customer)\r\n        {\r\n            orders[_orderID].status = OrderStatus.Completed;\r\n            release(_orderID);\r\n        }\r\n        else if (msg.sender == seller)\r\n        {\r\n            orders[_orderID].status = OrderStatus.Refunded;\r\n            refund(_orderID, _itemId);\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"seller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderID\",\"type\":\"uint256\"}],\"name\":\"openDispute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"},{\"name\":\"_itemQuantity\",\"type\":\"uint256\"}],\"name\":\"buyProduct\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"uint256\"},{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderID\",\"type\":\"uint256\"},{\"name\":\"_itemId\",\"type\":\"uint256\"},{\"name\":\"_paymentSendTo\",\"type\":\"address\"}],\"name\":\"closeDispute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orders\",\"outputs\":[{\"name\":\"orderId\",\"type\":\"uint256\"},{\"name\":\"customer\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"quantity\",\"type\":\"uint256\"},{\"name\":\"itemId\",\"type\":\"uint256\"},{\"name\":\"disputeCreatedBy\",\"type\":\"address\"},{\"name\":\"paymentStatus\",\"type\":\"bool\"},{\"name\":\"paymentMade\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"items\",\"outputs\":[{\"name\":\"quantity\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"},{\"name\":\"_itemName\",\"type\":\"string\"},{\"name\":\"_quantity\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"addItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_seller\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"customer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PaymentCreation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"customer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"PaymentCompletion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"NewEscrow","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000f7dc4e3fc9c7cb5be76717ed7877bf461dcdb1a7","Library":"","SwarmSource":"bzzr://fc87965cc7fb9c4cb0a1f7178592a210638843854c048aa62cca12877f2d17c3"}]}