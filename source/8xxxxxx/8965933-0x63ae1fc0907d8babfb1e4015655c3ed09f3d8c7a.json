{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.12;\r\npragma experimental ABIEncoderV2;\r\n/*-\r\n * Copyright (c) 2019 @secondphonejune\r\n * All rights reserved.\r\n *\r\n * This code is derived by @secondphonejune (Telegram ID)\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in the\r\n *    documentation and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS\r\n * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\r\n * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\r\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS\r\n * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n * This project is originally created to implement an election for 2019 Hong Kong local elections.\r\n * Ofcause the Hong Kong government is not going to use it, but we have a chance to show that how an election can be done completely anonymously with blockchain\r\n * Everyone can use the code provided in this project, but they must keep this statement here unchanged.\r\n * Fight for freedom, Stand with Hong Kong\r\n * Five Demands, Not One Less\r\n */\r\n/*\r\n* Expected workflow, voter get his/her voter ID from contract, this makes sure no one has access to his/her personal data\r\n* Second, the voter registers their voter ID and email (not phone as no money to do SMS) via a vote box and make a vote.\r\n* Email is checked by the voter box to prevent double voting and robot voting, but there should be a better way to do it.\r\n* Now registration will make old registration and votes from the same voter ID invalid\r\n* The vote will then encrypted using a public key and submitted to this contract for record\r\n* After the election, the private key will be made public and people can decrypt the votes and knows who wins\r\n* Currently we let the vote box decides if a new vote should replace the old vote, but there should be a better way to do it\r\n* Also if people can read the private variable voteListByVoter from blockchain, they will know who a person votes after election. \r\n* The variable is needed for replacing old votes. \r\n* This variable should be removed when there is a proper way to authenticate a person and replacing vote is not needed. \r\n*/\r\ncontract electionList{\r\n\tstring public hashHead;\r\n    //This one keeps the council list for easy checking by public\r\n\tstring[] public councilList;\r\n\tuint256 public councilNumber;\r\n}\r\ncontract localElection{\r\n    address payable public owner;\r\n    string public encryptionPublicKey; //Just keep record on the vote encryption key\r\n    bool public isRunningElection = false;\r\n\t//vote box exists only because most people do not own a crypto account.\r\n\t//vote box are needed to encrypt and submit votes for people and do email validations\r\n\t//Once the election is over, vote box also need to get votes from the contract and decrypt the votes\r\n\tmapping(address => bool) public approvedVoteBox;\r\n\t\r\n\t//This one is dummy list as the voter list is hidden from public\r\n\t//Even in real case, this one only keeps the hash of the voter information, so no private data is leaked\r\n\t//With the same name and HKID (voter), a person can only vote in one council\r\n\t//The following information is created and verified by government before the election, \r\n\t//but in this 2019 election even voter list is hidden from people. \r\n\t//We setup register function for people to register just before they vote\r\n\tmapping(uint256 => bool) public voterList;\r\n\tmapping(uint256 => uint256) public usedPhoneNumber;\r\n\tmapping(uint256 => mapping(string => bool)) public councilVoterList;\r\n\tmapping(string => uint) public councilVoterNumber;\r\n\t\r\n\t//This one keeps the votes, but arranged by voter so it is easy to check if someone has voted\r\n\t//This file must be kept private as it links a person to a vote, \r\n\t//people can find back who a person voted after the election \r\n\t//If there is an electronic way for public to really verify a person to do the voting,\r\n\t//there will be no need to setup replaceVote function. \r\n\t//We can safely remove the link between vote and voter\r\n\tmapping(uint256 => string) private voteListByVoter; \r\n\tmapping(string => string[]) private votes; //Votes grouped by council\r\n\tmapping(address => string[]) private voteByVotebox; //Votes grouped by votebox\r\n\tmapping(string => bool) private voteDictionary; //Makre sure votes are unique\r\n\tmapping(string => address) public invalidVotes;\r\n\t\r\n\taddress public dbAddress;\r\n\t\r\n\tconstructor(address electionDBaddr,string memory pKey) public{\r\n\t    owner = msg.sender;\r\n\t    dbAddress = electionDBaddr;\r\n\t    encryptionPublicKey = pKey;\r\n\t}\r\n\t\r\n\tfunction() external payable { \r\n\t\t//Thank you for donation, it will be sent to the owner. \r\n\t\t//The owner will send it to 星火 after deducting the cost (if they have ETH account)\r\n\t\tif(address(this).balance >= msg.value && msg.value >0) \r\n            owner.transfer(msg.value);\r\n\t}\r\n\t//Just in case someone manage to give ETH to this contract\r\n\tfunction withdrawAll() public payable{\r\n\t    if(address(this).balance >0) owner.transfer(address(this).balance);\r\n\t}\r\n\tfunction addVoteBox(address box) public {\r\n\t\tif(msg.sender != owner) revert();\r\n\t\tapprovedVoteBox[box] = true;\r\n\t}\r\n\tfunction removeVoteBox(address box) public {\r\n\t\tif(msg.sender != owner) revert();\r\n\t\tapprovedVoteBox[box] = false;\r\n\t\t//Also remove all votes in that votebox from the election result\r\n\t\telectionList db = electionList(dbAddress);\r\n\t\tfor(uint i=0;i<db.councilNumber();i++){\r\n\t\t    for(uint a=0;a<voteByVotebox[box].length;a++){\r\n\t\t        if(bytes(voteByVotebox[box][a]).length >0){\r\n\t\t            invalidVotes[voteByVotebox[box][a]] = msg.sender;\r\n\t\t        }\r\n\t\t    }\r\n\t\t}\r\n\t}\r\n\tfunction getVoteboxVoteCount(address box) public view returns(uint256){\r\n\t    return voteByVotebox[box].length;\r\n\t}\r\n\tfunction getCouncilVoteCount(string memory council) public view returns(uint256){\r\n\t    return votes[council].length;\r\n\t}\r\n\tfunction startElection() public {\r\n\t    if(msg.sender != owner) revert();\r\n\t    isRunningElection = true;\r\n\t}\r\n\tfunction stopElection() public {\r\n\t    if(msg.sender != owner) revert();\r\n\t    isRunningElection = false;\r\n\t}\r\n\t//This function allows people to generate a voterID to register and vote.\r\n\t//Supposingly this ID should be random so that people do not know who it belongs to, \r\n\t//and each person has only one unique ID so they cannot double vote. \r\n\t//It means a public key pair binding with identity / hash of identity. \r\n\t//As most people do not have a wallet, we can only make sure each person has one ID only\r\n\tfunction getVoterID(string memory name, string memory HKID) \r\n\t\tpublic view returns(uint256){\r\n\t\telectionList db = electionList(dbAddress);\r\n\t\tif(!checkHKID(HKID)) return 0;\r\n\t\treturn uint256(sha256(joinStrToBytes(db.hashHead(),HKID,\"\")));\r\n\t}\r\n\t//function getphoneHash(uint number)\r\n\tfunction getEmailHash(string memory email)\r\n\t\tpublic view returns(uint256){\r\n\t\t//return uint256(sha256(joinStrToBytes(hashHead,uint2str(number),\"\")));\r\n\t\telectionList db = electionList(dbAddress);\r\n\t\treturn uint256(sha256(joinStrToBytes(db.hashHead(),email,\"\")));\r\n\t}\r\n\t//function register(uint256 voterID, uint256 hashedPhone, string memory council)\r\n\tfunction register(uint256 voterID, uint256 hashedEmail, string memory council) \r\n\t\tpublic returns(bool){\r\n\t\trequire(isRunningElection);\r\n\t\trequire(approvedVoteBox[msg.sender]);\r\n\t\t//Register happens during election as we do not have the voter list\r\n\t\t//require(now >= votingStartTime);\r\n\t\t//require(now < votingEndTime);\r\n\t\tif(voterList[voterID]) deregister(voterID);\r\n\t\t//if(usedPhoneNumber[hashedPhone] > 0)\r\n\t\t\t//deregister(usedPhoneNumber[hashedPhone]);\r\n\t\tif(usedPhoneNumber[hashedEmail] > 0)\r\n\t\t\tderegister(usedPhoneNumber[hashedEmail]);\r\n\t\tvoterList[voterID] = true;\r\n\t\t//usedPhoneNumber[hashedPhone] = voterID;\r\n\t\tusedPhoneNumber[hashedEmail] = voterID;\r\n\t\tcouncilVoterList[voterID][council] = true;\r\n\t\tcouncilVoterNumber[council]++;\r\n\t\treturn true;\r\n\t}\r\n\tfunction deregister(uint256 voterID) \r\n\t\tinternal returns(bool){\r\n\t\trequire(isRunningElection);\r\n\t\tvoterList[voterID] = false;\t\r\n\t\telectionList db = electionList(dbAddress);\r\n\t\tfor(uint i=0;i<db.councilNumber();i++){\r\n\t\t\t//deregister them from the other councils\r\n\t\t\tif(councilVoterList[voterID][db.councilList(i)]){\r\n\t\t\t\tcouncilVoterList[voterID][db.councilList(i)] = false;\r\n\t\t\t\tcouncilVoterNumber[db.councilList(i)]--;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(bytes(voteListByVoter[voterID]).length >0){\r\n\t\t\tinvalidVotes[voteListByVoter[voterID]] = msg.sender;\r\n\t\t\tdelete voteListByVoter[voterID];\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\t//function isValidVoter(uint256 voterID, uint256 hashedPhone, string memory council)\r\n\tfunction isValidVoter(uint256 voterID, uint256 hashedEmail, string memory council) \r\n\t\tpublic view returns(bool){\r\n\t\tif(!voterList[voterID]) return false;\r\n\t\t//if(usedPhoneNumber[hashedPhone] == 0 || usedPhoneNumber[hashedPhone] != voterID)\r\n\t\tif(usedPhoneNumber[hashedEmail] == 0 || usedPhoneNumber[hashedEmail] != voterID)\r\n\t\t\treturn false;\r\n\t\tif(!councilVoterList[voterID][council]) return false;\r\n\t\treturn true;\r\n\t}\r\n\tfunction isVoted(uint256 voterID) public view returns(bool){\r\n\t\tif(bytes(voteListByVoter[voterID]).length >0) return true;\r\n\t\treturn false;\r\n\t}\r\n\t//function submitVote(uint256 voterID, uint256 hashedPhone, \r\n\tfunction submitVote(uint256 voterID, uint256 hashedEmail, \r\n\t    string memory council, string memory singleVote) public returns(bool){\r\n\t\trequire(isRunningElection);\r\n\t\trequire(approvedVoteBox[msg.sender]);\r\n\t\t//require(now >= votingStartTime);\r\n\t\t//require(now < votingEndTime);\r\n\t\t//require(isValidVoter(voterID,hashedPhone,council));\r\n\t\trequire(isValidVoter(voterID,hashedEmail,council));\r\n\t\trequire(!isVoted(voterID)); //Voted already\r\n\t\trequire(!voteDictionary[singleVote]);\r\n\t\tvoteListByVoter[voterID] = singleVote;\r\n\t\tvotes[council].push(singleVote);\r\n\t\tvoteByVotebox[msg.sender].push(singleVote);\r\n\t\tvoteDictionary[singleVote] = true;\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction registerAndVote(uint256 voterID, uint256 hashedEmail, \r\n\t    string memory council, string memory singleVote) public returns(bool){\r\n\t    require(isRunningElection);\r\n\t\trequire(approvedVoteBox[msg.sender]);\r\n\t    require(!voterList[voterID]);\r\n\t    require(usedPhoneNumber[hashedEmail] ==0);\r\n\t    require(!voteDictionary[singleVote]);\r\n\t    voterList[voterID] = true;\r\n\t\t//usedPhoneNumber[hashedPhone] = voterID;\r\n\t\tusedPhoneNumber[hashedEmail] = voterID;\r\n\t\tcouncilVoterList[voterID][council] = true;\r\n\t\tcouncilVoterNumber[council]++;\r\n\t\tvoteListByVoter[voterID] = singleVote;\r\n\t\tvotes[council].push(singleVote);\r\n\t\tvoteByVotebox[msg.sender].push(singleVote);\r\n\t\tvoteDictionary[singleVote] = true;\r\n\t    return true;\r\n\t}\r\n\t\r\n\tfunction getResult(string memory council) public view returns(uint, uint, uint, uint, \r\n\t\tstring[] memory, string[] memory){\r\n\t\trequire(!isRunningElection);\r\n\t\t//require(now >= votingEndTime);\r\n\t\tuint totalVoteCount = votes[council].length;\r\n\t\tuint validVoteCount;\r\n\t\t//uint invalidCount;\r\n\t\tfor(uint i=0;i<totalVoteCount;i++){\r\n\t\t\tstring memory singleVote = votes[council][i];\r\n\t\t\tif(invalidVotes[singleVote] == address(0)){\r\n\t\t\t    validVoteCount++;   \r\n\t\t\t}\r\n\t\t\t//else invalidCount++;\r\n\t\t}\r\n\t\t//assert((validVoteCount+invalidCount) == totalVoteCount);\r\n\t\tstring[] memory validVoteIndex = new string[](validVoteCount);\r\n\t\tstring[] memory invalidVoteIndex = new string[](totalVoteCount-validVoteCount);\r\n\t\tuint a=0;\r\n\t\tfor(uint i=0;i<totalVoteCount && (a<validVoteCount || validVoteCount==0);i++){\r\n\t\t\tstring memory singleVote = votes[council][i];\r\n\t\t\tif(invalidVotes[singleVote] == address(0)){\r\n\t\t\t    validVoteIndex[a++] = singleVote;\r\n\t\t\t}else{\r\n\t\t\t    invalidVoteIndex[i-a] = singleVote;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn (councilVoterNumber[council],totalVoteCount,validVoteCount,\r\n\t\t    totalVoteCount-validVoteCount,validVoteIndex,invalidVoteIndex);\r\n\t}\r\n\t\r\n\tfunction joinStrToBytes(string memory _a, string memory _b, string memory _c) \r\n\t\tinternal pure returns (bytes memory){\r\n        bytes memory _ba = bytes(_a);\r\n        bytes memory _bb = bytes(_b);\r\n\t\tbytes memory _bc = bytes(_c);\r\n        string memory ab = new string(_ba.length + _bb.length + _bc.length);\r\n        bytes memory bab = bytes(ab);\r\n        uint k = 0;\r\n        for (uint i = 0; i < _ba.length; i++) bab[k++] = _ba[i];\r\n        for (uint i = 0; i < _bb.length; i++) bab[k++] = _bb[i];\r\n\t\tfor (uint i = 0; i < _bc.length; i++) bab[k++] = _bc[i];\t\t\r\n        //return string(bab);\r\n        return bab;\r\n    }\r\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\r\n\t\tif (_i == 0) {\r\n\t\t\treturn \"0\";\r\n\t\t}\r\n\t\tuint j = _i;\r\n\t\tuint len;\r\n\t\twhile (j != 0) {\r\n\t\t\tlen++;\r\n\t\t\tj /= 10;\r\n\t\t}\r\n\t\tbytes memory bstr = new bytes(len);\r\n\t\tuint k = len - 1;\r\n\t\twhile (_i != 0) {\r\n\t\t\tbstr[k--] = byte(uint8(48 + _i % 10));\r\n\t\t\t_i /= 10;\r\n\t\t}\r\n\t\treturn string(bstr);\r\n\t}\r\n\t//Sample G123456A AB9876543, C1234569 invalid sample AY987654A C668668E\r\n\tfunction checkHKID(string memory HKID) \r\n\t\tinternal pure returns(bool){\r\n\t\tbytes memory b = bytes(HKID);\r\n\t\tif(b.length !=8 && b.length !=9) return false;\r\n\t\tuint256 checkDigit = 0;\r\n\t\tuint256 power = 9;\r\n\t\tif(b.length ==8){\r\n\t\t\tcheckDigit += (36*power);\r\n\t\t\tpower--;\r\n\t\t}\r\n\t\tfor(uint i=0;i<b.length;i++){\r\n\t\t\tuint digit = uint8(b[i]);\r\n\t\t\tif(i>(b.length-8) && i<(b.length-1)){\r\n\t\t\t\t//It should be a number\r\n\t\t\t\tif(digit < 48 || digit > 57) return false;\r\n\t\t\t}\r\n\t\t\tif(digit >=48 && digit<=57) checkDigit += ((digit-48)*power); //Number\r\n\t\t\telse if(digit >=65 && digit<=90) checkDigit += ((digit-55)*power); //A-Z\r\n\t\t\telse return false;\r\n\t\t\tpower--;\r\n\t\t}\r\n\t\tif(checkDigit % 11 == 0) return true;\r\n\t\treturn false;\r\n\t}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"electionDBaddr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"pKey\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"box\",\"type\":\"address\"}],\"name\":\"addVoteBox\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedVoteBox\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"councilVoterList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"councilVoterNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dbAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"encryptionPublicKey\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"council\",\"type\":\"string\"}],\"name\":\"getCouncilVoteCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"}],\"name\":\"getEmailHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"council\",\"type\":\"string\"}],\"name\":\"getResult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"box\",\"type\":\"address\"}],\"name\":\"getVoteboxVoteCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"HKID\",\"type\":\"string\"}],\"name\":\"getVoterID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"invalidVotes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isRunningElection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"voterID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hashedEmail\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"council\",\"type\":\"string\"}],\"name\":\"isValidVoter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"voterID\",\"type\":\"uint256\"}],\"name\":\"isVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"voterID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hashedEmail\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"council\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"voterID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hashedEmail\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"council\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"singleVote\",\"type\":\"string\"}],\"name\":\"registerAndVote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"box\",\"type\":\"address\"}],\"name\":\"removeVoteBox\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startElection\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopElection\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"voterID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hashedEmail\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"council\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"singleVote\",\"type\":\"string\"}],\"name\":\"submitVote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usedPhoneNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voterList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"localElection","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000064e9f4bdf14f0cbcd4e922571bb96dc80434d938000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000d84d4947654d413047435371475349623344514542415155414134474d4144434269414b426745575a3456544f7a7143694b2f63577330316866726a696a35353979577659516c36336533594d4665706f75736a306b3035384953585149336d7666302b4867314a45562b39734861695871724e52526931576747782f4f70656c616956686b3866612b4c6248586950435362643133494f717671704d57384f764239643956574f6c586b7a785a47456b6e413461687067454a376c622f336d6e4a7a53506454696730654c343044674641674d424141453d0000000000000000","Library":"","LicenseType":"BSD-2-Clause","SwarmSource":"bzzr://ecc60c1bdbce2bc81e6e649ebcb43e189a016e62fa3a79a06c3fb2e43629674c"}]}