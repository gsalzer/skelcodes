{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.7;\r\n\r\n\r\n// Token Public Sale\r\n\r\nlibrary SafeMath256 {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b > 0);\r\n        uint256 c = a / b;\r\n        assert(a == b * c + a % b);\r\n        return a / b;\r\n    }\r\n\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath16 {\r\n\r\n    function add(uint16 a, uint16 b) internal pure returns (uint16 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n\r\n    function sub(uint16 a, uint16 b) internal pure returns (uint16) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint16 a, uint16 b) internal pure returns (uint16 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint16 a, uint16 b) internal pure returns (uint16) {\r\n        assert(b > 0);\r\n        uint256 c = a / b;\r\n        assert(a == b * c + a % b);\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint16 a, uint16 b) internal pure returns (uint16) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n    address payable internal _receiver;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event ReceiverChanged(address indexed previousReceiver, address indexed newReceiver);\r\n\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        _receiver = msg.sender;\r\n    }\r\n\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner);\r\n        _;\r\n    }\r\n\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0));\r\n        address __previousOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(__previousOwner, newOwner);\r\n    }\r\n\r\n    function changeReceiver(address payable newReceiver) external onlyOwner {\r\n        require(newReceiver != address(0));\r\n        address __previousReceiver = _receiver;\r\n        _receiver = newReceiver;\r\n        emit ReceiverChanged(__previousReceiver, newReceiver);\r\n    }\r\n\r\n    function rescueTokens(address tokenAddress, address receiver, uint256 amount) external onlyOwner {\r\n        IERC20 _token = IERC20(tokenAddress);\r\n        require(receiver != address(0));\r\n        uint256 balance = _token.balanceOf(address(this));\r\n        require(balance >= amount);\r\n\r\n        assert(_token.transfer(receiver, amount));\r\n    }\r\n\r\n\r\n    function withdrawEther(address payable to, uint256 amount) external onlyOwner {\r\n        require(to != address(0));\r\n        uint256 balance = address(this).balance;\r\n        require(balance >= amount);\r\n\r\n        to.transfer(amount);\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract Pausable is Ownable {\r\n    bool private _paused;\r\n\r\n    event Paused(address account);\r\n    event Unpaused(address account);\r\n\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Paused.\");\r\n        _;\r\n    }\r\n\r\n    function setPaused(bool state) external onlyOwner {\r\n        if (_paused && !state) {\r\n            _paused = false;\r\n            emit Unpaused(msg.sender);\r\n        } else if (!_paused && state) {\r\n            _paused = true;\r\n            emit Paused(msg.sender);\r\n        }\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n}\r\n\r\n\r\ninterface IToken {\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function inWhitelist(address account) external view returns (bool);\r\n    function referrer(address account) external view returns (address);\r\n    function refCount(address account) external view returns (uint256);\r\n}\r\n\r\n\r\ncontract TokenPublicSale is Ownable, Pausable{\r\n    using SafeMath16 for uint16;\r\n    using SafeMath256 for uint256;\r\n\r\n    IToken public TOKEN = IToken(0xfaCe8492ce3EE56855827b5eC3f9Affd0a4c5E15);\r\n\r\n    // Start timestamp\r\n    uint32 _startTimestamp;\r\n\r\n    // Audit ether price\r\n    uint256 private _etherPrice;    // 1 Ether = xx.xxxxxx USD, with 6 decimals\r\n\r\n    // Referral rewards, 35% for 15 levels\r\n    uint16 private WHITELIST_REF_REWARDS_PCT_SUM = 35;\r\n    uint16[15] private WHITELIST_REF_REWARDS_PCT = [\r\n    6,  // 6% for Level.1\r\n    6,  // 6% for Level.2\r\n    5,  // 5% for Level.3\r\n    4,  // 4% for Level.4\r\n    3,  // 3% for Level.5\r\n    2,  // 2% for Level.6\r\n    1,  // 1% for Level.7\r\n    1,  // 1% for Level.8\r\n    1,  // 1% for Level.9\r\n    1,  // 1% for Level.10\r\n    1,  // 1% for Level.11\r\n    1,  // 1% for Level.12\r\n    1,  // 1% for Level.13\r\n    1,  // 1% for Level.14\r\n    1   // 1% for Level.15\r\n    ];\r\n\r\n    // Wei & Gas\r\n    uint72 private WEI_MIN   = 0.1 ether;      // 0.1 Ether Minimum\r\n    uint72 private WEI_MAX   = 10 ether;       // 10 Ether Maximum\r\n    uint72 private WEI_BONUS = 10 ether;       // >10 Ether for Bonus\r\n    uint24 private GAS_MIN   = 3000000;        // 3.0 Mwei gas Mininum\r\n    uint24 private GAS_EX    = 1500000;        // 1.5 Mwei gas for ex\r\n\r\n    // Price\r\n    uint256 private TOKEN_USD_PRICE_START = 1000;           // $      0.00100 USD\r\n    uint256 private TOKEN_USD_PRICE_STEP  = 10;             // $    + 0.00001 USD\r\n    uint256 private STAGE_USD_CAP_START   = 100000000;      // $    100 USD\r\n    uint256 private STAGE_USD_CAP_STEP    = 1000000;        // $     +1 USD\r\n    uint256 private STAGE_USD_CAP_MAX     = 15100000000;    // $    15,100 USD\r\n\r\n    uint256 private _tokenUsdPrice        = TOKEN_USD_PRICE_START;\r\n\r\n    // Progress\r\n    uint16 private STAGE_MAX = 60000;   // 60,000 stages total\r\n    uint16 private SEASON_MAX = 100;    // 100 seasons total\r\n    uint16 private SEASON_STAGES = 600; // each 600 stages is a season\r\n\r\n    uint16 private _stage;\r\n    uint16 private _season;\r\n\r\n    // Sum\r\n    uint256 private _txs;\r\n    uint256 private _tokenTxs;\r\n    uint256 private _tokenBonusTxs;\r\n    uint256 private _tokenWhitelistTxs;\r\n    uint256 private _tokenIssued;\r\n    uint256 private _tokenBonus;\r\n    uint256 private _tokenWhitelist;\r\n    uint256 private _weiSold;\r\n    uint256 private _weiRefRewarded;\r\n    uint256 private _weiTopSales;\r\n    uint256 private _weiTeam;\r\n    uint256 private _weiPending;\r\n    uint256 private _weiPendingTransfered;\r\n\r\n    // Top-Sales\r\n    uint256 private TOP_SALES_RATIO_START = 15000000;         // 15%, with 8 decimals\r\n    uint256 private TOP_SALES_RATIO_DISTANCE = 50000000;      // 50%, with 8 decimals\r\n\r\n    uint256 private _topSalesRatio = TOP_SALES_RATIO_START;   // 15% + 50% x(_stage/_stageMax)\r\n\r\n    // During tx\r\n    bool private _inWhitelist_;\r\n    uint256 private _pending_ = WHITELIST_REF_REWARDS_PCT_SUM;\r\n    uint16[] private _rewards_;\r\n    address[] private _referrers_;\r\n\r\n    // Audit ether price auditor\r\n    mapping (address => bool) private _etherPriceAuditors;\r\n\r\n    // Stage\r\n    mapping (uint16 => uint256) private _stageUsdSold;\r\n    mapping (uint16 => uint256) private _stageTokenIssued;\r\n\r\n    // Season\r\n    mapping (uint16 => uint256) private _seasonWeiSold;\r\n    mapping (uint16 => uint256) private _seasonWeiTopSales;\r\n    mapping (uint16 => uint256) private _seasonWeiTopSalesTransfered;\r\n\r\n    // Account\r\n    mapping (address => uint256) private _accountTokenIssued;\r\n    mapping (address => uint256) private _accountTokenBonus;\r\n    mapping (address => uint256) private _accountTokenWhitelisted;\r\n    mapping (address => uint256) private _accountWeiPurchased;\r\n    mapping (address => uint256) private _accountWeiRefRewarded;\r\n\r\n    // Ref\r\n    mapping (uint16 => address[]) private _seasonRefAccounts;\r\n    mapping (uint16 => mapping (address => bool)) private _seasonHasRefAccount;\r\n    mapping (uint16 => mapping (address => uint256)) private _usdSeasonAccountPurchased;\r\n    mapping (uint16 => mapping (address => uint256)) private _usdSeasonAccountRef;\r\n\r\n    // Events\r\n    event AuditEtherPriceChanged(uint256 value, address indexed account);\r\n    event AuditEtherPriceAuditorChanged(address indexed account, bool state);\r\n\r\n    event TokenBonusTransfered(address indexed to, uint256 amount);\r\n    event TokenWhitelistTransfered(address indexed to, uint256 amount);\r\n    event TokenIssuedTransfered(uint16 stageIndex, address indexed to, uint256 tokenAmount, uint256 auditEtherPrice, uint256 weiUsed);\r\n\r\n    event StageClosed(uint256 _stageNumber, address indexed account);\r\n    event SeasonClosed(uint16 _seasonNumber, address indexed account);\r\n\r\n    event SeasonTopSalesWeiTransfered(uint16 seasonNumber, address indexed to, uint256 amount);\r\n    event TeamWeiTransfered(address indexed to, uint256 amount);\r\n    event PendingWeiTransfered(address indexed to, uint256 amount);\r\n\r\n\r\n    function startTimestamp() public view returns (uint32) {\r\n        return _startTimestamp;\r\n    }\r\n\r\n    function setStartTimestamp(uint32 timestamp) external onlyOwner {\r\n        _startTimestamp = timestamp;\r\n    }\r\n\r\n    modifier onlyEtherPriceAuditor() {\r\n        require(_etherPriceAuditors[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function setEtherPrice(uint256 value) external onlyEtherPriceAuditor {\r\n        _etherPrice = value;\r\n        emit AuditEtherPriceChanged(value, msg.sender);\r\n    }\r\n\r\n    function etherPriceAuditor(address account) public view returns (bool) {\r\n        return _etherPriceAuditors[account];\r\n    }\r\n\r\n    function setEtherPriceAuditor(address account, bool state) external onlyOwner {\r\n        _etherPriceAuditors[account] = state;\r\n        emit AuditEtherPriceAuditorChanged(account, state);\r\n    }\r\n\r\n    function stageTokenUsdPrice(uint16 stageIndex) private view returns (uint256) {\r\n        return TOKEN_USD_PRICE_START.add(TOKEN_USD_PRICE_STEP.mul(stageIndex));\r\n    }\r\n\r\n    function wei2usd(uint256 amount) private view returns (uint256) {\r\n        return amount.mul(_etherPrice).div(1 ether);\r\n    }\r\n\r\n    function usd2wei(uint256 amount) private view returns (uint256) {\r\n        return amount.mul(1 ether).div(_etherPrice);\r\n    }\r\n\r\n    function usd2token(uint256 usdAmount) private view returns (uint256) {\r\n        return usdAmount.mul(1000000).div(_tokenUsdPrice);\r\n    }\r\n\r\n    function usd2tokenByStage(uint256 usdAmount, uint16 stageIndex) public view returns (uint256) {\r\n        return usdAmount.mul(1000000).div(stageTokenUsdPrice(stageIndex));\r\n    }\r\n\r\n    function calcSeason(uint16 stageIndex) private view returns (uint16) {\r\n        if (stageIndex > 0) {\r\n            uint16 __seasonNumber = stageIndex.div(SEASON_STAGES);\r\n\r\n            if (stageIndex.mod(SEASON_STAGES) > 0) {\r\n                return __seasonNumber.add(1);\r\n            }\r\n\r\n            return __seasonNumber;\r\n        }\r\n\r\n        return 1;\r\n    }\r\n\r\n\r\n    function transferTopSales(uint16 seasonNumber, address payable to) external onlyOwner {\r\n        uint256 __weiRemain = seasonTopSalesRemain(seasonNumber);\r\n        require(to != address(0));\r\n\r\n        _seasonWeiTopSalesTransfered[seasonNumber] = _seasonWeiTopSalesTransfered[seasonNumber].add(__weiRemain);\r\n        emit SeasonTopSalesWeiTransfered(seasonNumber, to, __weiRemain);\r\n        to.transfer(__weiRemain);\r\n    }\r\n\r\n    function pendingRemain() private view returns (uint256) {\r\n        return _weiPending.sub(_weiPendingTransfered);\r\n    }\r\n\r\n\r\n    function transferPending(address payable to) external onlyOwner {\r\n        uint256 __weiRemain = pendingRemain();\r\n        require(to != address(0));\r\n\r\n        _weiPendingTransfered = _weiPendingTransfered.add(__weiRemain);\r\n        emit PendingWeiTransfered(to, __weiRemain);\r\n        to.transfer(__weiRemain);\r\n    }\r\n\r\n    function transferTeam(address payable to) external onlyOwner {\r\n        uint256 __weiRemain = _weiSold.sub(_weiRefRewarded).sub(_weiTopSales).sub(_weiPending).sub(_weiTeam);\r\n        require(to != address(0));\r\n\r\n        _weiTeam = _weiTeam.add(__weiRemain);\r\n        emit TeamWeiTransfered(to, __weiRemain);\r\n        to.transfer(__weiRemain);\r\n    }\r\n\r\n\r\n    function status() public view returns (uint256 auditEtherPrice,\r\n        uint16 stage,\r\n        uint16 season,\r\n        uint256 tokenUsdPrice,\r\n        uint256 currentTopSalesRatio,\r\n        uint256 txs,\r\n        uint256 tokenTxs,\r\n        uint256 tokenBonusTxs,\r\n        uint256 tokenWhitelistTxs,\r\n        uint256 tokenIssued,\r\n        uint256 tokenBonus,\r\n        uint256 tokenWhitelist) {\r\n        auditEtherPrice = _etherPrice;\r\n\r\n        if (_stage > STAGE_MAX) {\r\n            stage = STAGE_MAX;\r\n            season = SEASON_MAX;\r\n        } else {\r\n            stage = _stage;\r\n            season = _season;\r\n        }\r\n\r\n        tokenUsdPrice = _tokenUsdPrice;\r\n        currentTopSalesRatio = _topSalesRatio;\r\n\r\n        txs = _txs;\r\n        tokenTxs = _tokenTxs;\r\n        tokenBonusTxs = _tokenBonusTxs;\r\n        tokenWhitelistTxs = _tokenWhitelistTxs;\r\n        tokenIssued = _tokenIssued;\r\n        tokenBonus = _tokenBonus;\r\n        tokenWhitelist = _tokenWhitelist;\r\n    }\r\n\r\n    function sum() public view returns(uint256 weiSold,\r\n        uint256 weiReferralRewarded,\r\n        uint256 weiTopSales,\r\n        uint256 weiTeam,\r\n        uint256 weiPending,\r\n        uint256 weiPendingTransfered,\r\n        uint256 weiPendingRemain) {\r\n        weiSold = _weiSold;\r\n        weiReferralRewarded = _weiRefRewarded;\r\n        weiTopSales = _weiTopSales;\r\n        weiTeam = _weiTeam;\r\n        weiPending = _weiPending;\r\n        weiPendingTransfered = _weiPendingTransfered;\r\n        weiPendingRemain = pendingRemain();\r\n    }\r\n\r\n    modifier enoughGas() {\r\n        require(gasleft() > GAS_MIN);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOnSale() {\r\n        require(_startTimestamp > 0 && now > _startTimestamp, \"TM Token Public-Sale has not started yet.\");\r\n        require(_etherPrice > 0,        \"Audit ETH price must be greater than zero.\");\r\n        require(!paused(),              \"TM Token Public-Sale is paused.\");\r\n        require(_stage <= STAGE_MAX,    \"TM Token Public-Sale Closed.\");\r\n        _;\r\n    }\r\n\r\n\r\n    function topSalesRatio(uint16 stageIndex) private view returns (uint256) {\r\n        return TOP_SALES_RATIO_START.add(TOP_SALES_RATIO_DISTANCE.mul(stageIndex).div(STAGE_MAX));\r\n    }\r\n\r\n    function usd2weiTopSales(uint256 usdAmount) private view returns (uint256) {\r\n        return usd2wei(usdAmount.mul(_topSalesRatio).div(100000000));\r\n    }\r\n\r\n\r\n    function stageUsdCap(uint16 stageIndex) private view returns (uint256) {\r\n        uint256 __usdCap = STAGE_USD_CAP_START.add(STAGE_USD_CAP_STEP.mul(stageIndex));\r\n\r\n        if (__usdCap > STAGE_USD_CAP_MAX) {\r\n            return STAGE_USD_CAP_MAX;\r\n        }\r\n\r\n        return __usdCap;\r\n    }\r\n\r\n\r\n    function stageTokenCap(uint16 stageIndex) private view returns (uint256) {\r\n        return usd2tokenByStage(stageUsdCap(stageIndex), stageIndex);\r\n    }\r\n\r\n\r\n    function stageStatus(uint16 stageIndex) public view returns (uint256 tokenUsdPrice,\r\n        uint256 tokenCap,\r\n        uint256 tokenOnSale,\r\n        uint256 tokenSold,\r\n        uint256 usdCap,\r\n        uint256 usdOnSale,\r\n        uint256 usdSold,\r\n        uint256 weiTopSalesRatio) {\r\n        if (stageIndex > STAGE_MAX) {\r\n            return (0, 0, 0, 0, 0, 0, 0, 0);\r\n        }\r\n\r\n        tokenUsdPrice = stageTokenUsdPrice(stageIndex);\r\n\r\n        tokenSold = _stageTokenIssued[stageIndex];\r\n        tokenCap = stageTokenCap(stageIndex);\r\n        tokenOnSale = tokenCap.sub(tokenSold);\r\n\r\n        usdSold = _stageUsdSold[stageIndex];\r\n        usdCap = stageUsdCap(stageIndex);\r\n        usdOnSale = usdCap.sub(usdSold);\r\n\r\n        weiTopSalesRatio = topSalesRatio(stageIndex);\r\n    }\r\n\r\n    function seasonTopSalesRemain(uint16 seasonNumber) private view returns (uint256) {\r\n        return _seasonWeiTopSales[seasonNumber].sub(_seasonWeiTopSalesTransfered[seasonNumber]);\r\n    }\r\n\r\n    function seasonTopSalesRewards(uint16 seasonNumber) public view returns (uint256 weiSold,\r\n        uint256 weiTopSales,\r\n        uint256 weiTopSalesTransfered,\r\n        uint256 weiTopSalesRemain) {\r\n        weiSold = _seasonWeiSold[seasonNumber];\r\n        weiTopSales = _seasonWeiTopSales[seasonNumber];\r\n        weiTopSalesTransfered = _seasonWeiTopSalesTransfered[seasonNumber];\r\n        weiTopSalesRemain = seasonTopSalesRemain(seasonNumber);\r\n    }\r\n\r\n    function accountQuery(address account) public view returns (uint256 tokenIssued,\r\n        uint256 tokenBonus,\r\n        uint256 tokenWhitelisted,\r\n        uint256 weiPurchased,\r\n        uint256 weiReferralRewarded) {\r\n        tokenIssued = _accountTokenIssued[account];\r\n        tokenBonus = _accountTokenBonus[account];\r\n        tokenWhitelisted = _accountTokenWhitelisted[account];\r\n        weiPurchased = _accountWeiPurchased[account];\r\n        weiReferralRewarded = _accountWeiRefRewarded[account];\r\n    }\r\n\r\n    function seasonRefAccounts(uint16 seasonNumber) public view returns (address[] memory accounts) {\r\n        accounts = _seasonRefAccounts[seasonNumber];\r\n    }\r\n\r\n    function usdSeasonAccountPurchased(uint16 seasonNumber, address account) public view returns (uint256) {\r\n        return _usdSeasonAccountPurchased[seasonNumber][account];\r\n    }\r\n\r\n    function usdSeasonAccountRef(uint16 seasonNumber, address account) public view returns (uint256) {\r\n        return _usdSeasonAccountRef[seasonNumber][account];\r\n    }\r\n\r\n    constructor () public {\r\n        _etherPriceAuditors[msg.sender] = true;\r\n        _stage = 0;\r\n        _season = 1;\r\n    }\r\n\r\n    function () external payable enoughGas onlyOnSale {\r\n        require(msg.value >= WEI_MIN);\r\n        require(msg.value <= WEI_MAX);\r\n\r\n        // Set temporary variables.\r\n        setTemporaryVariables();\r\n        uint256 __usdAmount = wei2usd(msg.value);\r\n        uint256 __usdRemain = __usdAmount;\r\n        uint256 __tokenIssued;\r\n        uint256 __tokenBonus;\r\n        uint256 __usdUsed;\r\n        uint256 __weiUsed;\r\n\r\n        // USD => TM Token\r\n        while (gasleft() > GAS_EX && __usdRemain > 0 && _stage <= STAGE_MAX) {\r\n            uint256 __txTokenIssued;\r\n            (__txTokenIssued, __usdRemain) = ex(__usdRemain);\r\n            __tokenIssued = __tokenIssued.add(__txTokenIssued);\r\n        }\r\n\r\n        // Used\r\n        __usdUsed = __usdAmount.sub(__usdRemain);\r\n        __weiUsed = usd2wei(__usdUsed);\r\n\r\n        // Bonus 10%\r\n        if (msg.value >= WEI_BONUS) {\r\n            __tokenBonus = __tokenIssued.div(10);\r\n            assert(transferTokenBonus(__tokenBonus));\r\n        }\r\n\r\n        // Whitelisted\r\n        // BUY-ONE-AND-GET-ONE-MORE-FREE\r\n        if (_inWhitelist_ && __tokenIssued > 0) {\r\n            // both issued and bonus\r\n            assert(transferTokenWhitelisted(__tokenIssued.add(__tokenBonus)));\r\n\r\n            // 35% for 15 levels\r\n            sendWhitelistReferralRewards(__weiUsed);\r\n        }\r\n\r\n        // If wei remains, refund.\r\n        if (__usdRemain > 0) {\r\n            uint256 __weiRemain = usd2wei(__usdRemain);\r\n\r\n            __weiUsed = msg.value.sub(__weiRemain);\r\n\r\n            // Refund wei back\r\n            msg.sender.transfer(__weiRemain);\r\n        }\r\n\r\n        // Counter\r\n        if (__weiUsed > 0) {\r\n            _txs = _txs.add(1);\r\n            _weiSold = _weiSold.add(__weiUsed);\r\n            _accountWeiPurchased[msg.sender] = _accountWeiPurchased[msg.sender].add(__weiUsed);\r\n        }\r\n\r\n        // Wei team\r\n        uint256 __weiTeam;\r\n        if (_season > SEASON_MAX)\r\n            __weiTeam = _weiSold.sub(_weiRefRewarded).sub(_weiTopSales).sub(_weiPending).sub(_weiTeam);\r\n        else\r\n            __weiTeam = _weiSold.sub(_weiRefRewarded).sub(_weiTopSales).sub(_weiPending).sub(_weiTeam).div(0.01 ether).mul(0.01 ether);\r\n\r\n        _weiTeam = _weiTeam.add(__weiTeam);\r\n        _receiver.transfer(__weiTeam);\r\n\r\n        // Assert finished\r\n        assert(true);\r\n    }\r\n\r\n    function setTemporaryVariables() private {\r\n        delete _referrers_;\r\n        delete _rewards_;\r\n\r\n        _inWhitelist_ = TOKEN.inWhitelist(msg.sender);\r\n        _pending_ = WHITELIST_REF_REWARDS_PCT_SUM;\r\n\r\n        address __cursor = msg.sender;\r\n        for(uint16 i = 0; i < WHITELIST_REF_REWARDS_PCT.length; i++) {\r\n            address __refAccount = TOKEN.referrer(__cursor);\r\n\r\n            if (__cursor == __refAccount)\r\n                break;\r\n\r\n            if (TOKEN.refCount(__refAccount) > i) {\r\n                if (!_seasonHasRefAccount[_season][__refAccount]) {\r\n                    _seasonRefAccounts[_season].push(__refAccount);\r\n                    _seasonHasRefAccount[_season][__refAccount] = true;\r\n                }\r\n\r\n                _pending_ = _pending_.sub(WHITELIST_REF_REWARDS_PCT[i]);\r\n                _rewards_.push(WHITELIST_REF_REWARDS_PCT[i]);\r\n                _referrers_.push(__refAccount);\r\n            }\r\n\r\n            __cursor = __refAccount;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  USD => TM Token\r\n     */\r\n    function ex(uint256 usdAmount) private returns (uint256, uint256) {\r\n        uint256 __stageUsdCap = stageUsdCap(_stage);\r\n        uint256 __tokenIssued;\r\n\r\n        // in stage\r\n        if (_stageUsdSold[_stage].add(usdAmount) <= __stageUsdCap) {\r\n            exCount(usdAmount);\r\n\r\n            __tokenIssued = usd2token(usdAmount);\r\n            assert(transfertokenIssued(__tokenIssued, usdAmount));\r\n\r\n            // close stage, if stage dollor cap reached\r\n            if (__stageUsdCap == _stageUsdSold[_stage]) {\r\n                assert(closeStage());\r\n            }\r\n\r\n            return (__tokenIssued, 0);\r\n        }\r\n\r\n        // close stage\r\n        uint256 __usdUsed = __stageUsdCap.sub(_stageUsdSold[_stage]);\r\n        uint256 __usdRemain = usdAmount.sub(__usdUsed);\r\n\r\n        exCount(__usdUsed);\r\n\r\n        __tokenIssued = usd2token(__usdUsed);\r\n        assert(transfertokenIssued(__tokenIssued, __usdUsed));\r\n        assert(closeStage());\r\n\r\n        return (__tokenIssued, __usdRemain);\r\n    }\r\n\r\n    function exCount(uint256 usdAmount) private {\r\n        uint256 __weiSold = usd2wei(usdAmount);\r\n        uint256 __weiTopSales = usd2weiTopSales(usdAmount);\r\n\r\n        _usdSeasonAccountPurchased[_season][msg.sender] = _usdSeasonAccountPurchased[_season][msg.sender].add(usdAmount);   // season => address => purchased, in USD\r\n\r\n        _stageUsdSold[_stage] = _stageUsdSold[_stage].add(usdAmount);                   // stage sold, in USD\r\n        _seasonWeiSold[_season] = _seasonWeiSold[_season].add(__weiSold);               // season sold, in wei\r\n        _seasonWeiTopSales[_season] = _seasonWeiTopSales[_season].add(__weiTopSales);   // season Top-Sales, in wei\r\n        _weiTopSales = _weiTopSales.add(__weiTopSales);                                 // sum Top-Sales, in wei\r\n\r\n        // season referral account\r\n        if (_inWhitelist_) {\r\n            for (uint16 i = 0; i < _rewards_.length; i++) {\r\n                _usdSeasonAccountRef[_season][_referrers_[i]] = _usdSeasonAccountRef[_season][_referrers_[i]].add(usdAmount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function transfertokenIssued(uint256 amount, uint256 usdAmount) private returns (bool) {\r\n        _tokenTxs = _tokenTxs.add(1);\r\n\r\n        _tokenIssued = _tokenIssued.add(amount);\r\n        _stageTokenIssued[_stage] = _stageTokenIssued[_stage].add(amount);\r\n        _accountTokenIssued[msg.sender] = _accountTokenIssued[msg.sender].add(amount);\r\n\r\n        assert(TOKEN.transfer(msg.sender, amount));\r\n        emit TokenIssuedTransfered(_stage, msg.sender, amount, _etherPrice, usdAmount);\r\n        return true;\r\n    }\r\n\r\n    function transferTokenBonus(uint256 amount) private returns (bool) {\r\n        _tokenBonusTxs = _tokenBonusTxs.add(1);\r\n\r\n        _tokenBonus = _tokenBonus.add(amount);\r\n        _accountTokenBonus[msg.sender] = _accountTokenBonus[msg.sender].add(amount);\r\n\r\n        assert(TOKEN.transfer(msg.sender, amount));\r\n        emit TokenBonusTransfered(msg.sender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferTokenWhitelisted(uint256 amount) private returns (bool) {\r\n        _tokenWhitelistTxs = _tokenWhitelistTxs.add(1);\r\n\r\n        _tokenWhitelist = _tokenWhitelist.add(amount);\r\n        _accountTokenWhitelisted[msg.sender] = _accountTokenWhitelisted[msg.sender].add(amount);\r\n\r\n        assert(TOKEN.transfer(msg.sender, amount));\r\n        emit TokenWhitelistTransfered(msg.sender, amount);\r\n        return true;\r\n    }\r\n\r\n    function closeStage() private returns (bool) {\r\n        emit StageClosed(_stage, msg.sender);\r\n        _stage = _stage.add(1);\r\n        _tokenUsdPrice = stageTokenUsdPrice(_stage);\r\n        _topSalesRatio = topSalesRatio(_stage);\r\n\r\n        // Close current season\r\n        uint16 __seasonNumber = calcSeason(_stage);\r\n        if (_season < __seasonNumber) {\r\n            emit SeasonClosed(_season, msg.sender);\r\n            _season = __seasonNumber;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function sendWhitelistReferralRewards(uint256 weiAmount) private {\r\n        uint256 __weiRemain = weiAmount;\r\n        for (uint16 i = 0; i < _rewards_.length; i++) {\r\n            uint256 __weiReward = weiAmount.mul(_rewards_[i]).div(100);\r\n            address payable __receiver = address(uint160(_referrers_[i]));\r\n\r\n            _weiRefRewarded = _weiRefRewarded.add(__weiReward);\r\n            _accountWeiRefRewarded[__receiver] = _accountWeiRefRewarded[__receiver].add(__weiReward);\r\n            __weiRemain = __weiRemain.sub(__weiReward);\r\n\r\n            __receiver.transfer(__weiReward);\r\n        }\r\n\r\n        if (_pending_ > 0)\r\n            _weiPending = _weiPending.add(weiAmount.mul(_pending_).div(100));\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"name\":\"auditEtherPrice\",\"type\":\"uint256\"},{\"name\":\"stage\",\"type\":\"uint16\"},{\"name\":\"season\",\"type\":\"uint16\"},{\"name\":\"tokenUsdPrice\",\"type\":\"uint256\"},{\"name\":\"currentTopSalesRatio\",\"type\":\"uint256\"},{\"name\":\"txs\",\"type\":\"uint256\"},{\"name\":\"tokenTxs\",\"type\":\"uint256\"},{\"name\":\"tokenBonusTxs\",\"type\":\"uint256\"},{\"name\":\"tokenWhitelistTxs\",\"type\":\"uint256\"},{\"name\":\"tokenIssued\",\"type\":\"uint256\"},{\"name\":\"tokenBonus\",\"type\":\"uint256\"},{\"name\":\"tokenWhitelist\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"etherPriceAuditor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setEtherPriceAuditor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setEtherPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"usdAmount\",\"type\":\"uint256\"},{\"name\":\"stageIndex\",\"type\":\"uint16\"}],\"name\":\"usd2tokenByStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"stageIndex\",\"type\":\"uint16\"}],\"name\":\"stageStatus\",\"outputs\":[{\"name\":\"tokenUsdPrice\",\"type\":\"uint256\"},{\"name\":\"tokenCap\",\"type\":\"uint256\"},{\"name\":\"tokenOnSale\",\"type\":\"uint256\"},{\"name\":\"tokenSold\",\"type\":\"uint256\"},{\"name\":\"usdCap\",\"type\":\"uint256\"},{\"name\":\"usdOnSale\",\"type\":\"uint256\"},{\"name\":\"usdSold\",\"type\":\"uint256\"},{\"name\":\"weiTopSalesRatio\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newReceiver\",\"type\":\"address\"}],\"name\":\"changeReceiver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferTeam\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sum\",\"outputs\":[{\"name\":\"weiSold\",\"type\":\"uint256\"},{\"name\":\"weiReferralRewarded\",\"type\":\"uint256\"},{\"name\":\"weiTopSales\",\"type\":\"uint256\"},{\"name\":\"weiTeam\",\"type\":\"uint256\"},{\"name\":\"weiPending\",\"type\":\"uint256\"},{\"name\":\"weiPendingTransfered\",\"type\":\"uint256\"},{\"name\":\"weiPendingRemain\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"seasonNumber\",\"type\":\"uint16\"},{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"usdSeasonAccountRef\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"seasonNumber\",\"type\":\"uint16\"},{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"usdSeasonAccountPurchased\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seasonNumber\",\"type\":\"uint16\"},{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferTopSales\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"seasonNumber\",\"type\":\"uint16\"}],\"name\":\"seasonTopSalesRewards\",\"outputs\":[{\"name\":\"weiSold\",\"type\":\"uint256\"},{\"name\":\"weiTopSales\",\"type\":\"uint256\"},{\"name\":\"weiTopSalesTransfered\",\"type\":\"uint256\"},{\"name\":\"weiTopSalesRemain\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"timestamp\",\"type\":\"uint32\"}],\"name\":\"setStartTimestamp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accountQuery\",\"outputs\":[{\"name\":\"tokenIssued\",\"type\":\"uint256\"},{\"name\":\"tokenBonus\",\"type\":\"uint256\"},{\"name\":\"tokenWhitelisted\",\"type\":\"uint256\"},{\"name\":\"weiPurchased\",\"type\":\"uint256\"},{\"name\":\"weiReferralRewarded\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"seasonNumber\",\"type\":\"uint16\"}],\"name\":\"seasonRefAccounts\",\"outputs\":[{\"name\":\"accounts\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AuditEtherPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"AuditEtherPriceAuditorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenBonusTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenWhitelistTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"stageIndex\",\"type\":\"uint16\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"auditEtherPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"weiUsed\",\"type\":\"uint256\"}],\"name\":\"TokenIssuedTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_stageNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"StageClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_seasonNumber\",\"type\":\"uint16\"},{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SeasonClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"seasonNumber\",\"type\":\"uint16\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SeasonTopSalesWeiTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TeamWeiTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PendingWeiTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousReceiver\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newReceiver\",\"type\":\"address\"}],\"name\":\"ReceiverChanged\",\"type\":\"event\"}]","ContractName":"TokenPublicSale","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d30fe2851790d4b0bae41cd970a64d14073ea2a43114bc8d7d7c938cea8d5af7"}]}