{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/*  ERC 20 token */\r\ncontract OBSToken {\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\tstring lname = \"OuroBoros\";\r\n\tstring lsymbol= \"OBS\";\r\n\tuint8 dec=6;\r\n\taddress manager;\r\n\tuint256 thetotal;\r\n\tconstructor(uint256 total) public\r\n\t{\r\n\t    thetotal= total;\r\n\t\tmanager = msg.sender;\r\n\t\tbalances[manager]=total;\r\n\t}\r\n\t\r\n\tfunction name() public view returns (string)\r\n\t{\r\n\t   return lname;\r\n\t}\r\n\t\r\n\tfunction symbol() public view returns (string)\r\n\t{\r\n\t   return lsymbol;\r\n\t}\r\n\t\r\n\tfunction decimals() public view returns (uint8)\r\n\t{\r\n\t   return dec;\r\n\t}\r\n\t\r\n\tfunction totalSupply() public view returns (uint256)\r\n\t{\r\n\t\treturn thetotal;\r\n\t}\r\n\t\r\n\tfunction balanceOf(address _owner) public view returns (uint256 balance)\r\n\t{\r\n\t    return balances[_owner];\r\n\t}\r\n\t\r\n\tfunction transfer(address _to, uint256 _value) public returns (bool success)\r\n\t{\r\n\t    require(_value > 0 &&_value < 210000000000000000);\r\n\t\trequire(balances[msg.sender] >= _value);\r\n\t\t\r\n\t\tuint256 oldtotal= add(balances[msg.sender],balances[_to]);\r\n\t\tbalances[msg.sender] = sub(balances[msg.sender],_value);\r\n\t\tbalances[_to] = add(balances[_to] ,_value);\r\n\t\trequire(balances[_to] + balances[msg.sender] == oldtotal);\r\n\t\temit Transfer(msg.sender, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success)\r\n\t{\r\n\t\trequire(_value > 0 &&_value < 210000000000000000);\r\n\t\trequire(balances[_from] >= _value);\r\n\t\tif(msg.sender != manager)\r\n\t\t{\r\n\t\t\trequire(allowed[_from][msg.sender] >= _value);\r\n\t\t\tallowed[_from][msg.sender] = sub(allowed[_from][msg.sender],_value);\r\n\t\t}\r\n\t\r\n\t\tuint256 oldtotal= add(balances[_from],balances[_to]);\r\n\t\tbalances[_from] = sub(balances[_from],_value);\t\r\n\t\tbalances[_to] = add(balances[_to],_value);\r\n\t\trequire(balances[_from] + balances[_to] == oldtotal);\r\n\t\temit Transfer(_from, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction approve(address _spender, uint256 _value) public returns (bool success)\r\n\t{\r\n        require(_value > 0 &&_value < 210000000000000000);\r\n\t\trequire(balances[msg.sender] >= _value);\r\n        allowed[msg.sender][_spender] = add(allowed[msg.sender][_spender],_value);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n\t}\r\n\t\r\n\tfunction allowance(address _owner, address _spender) public view returns (uint256 remaining)\r\n\t{\r\n\t    return allowed[_owner][_spender];\r\n\t}\r\n\t\r\n\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\t\r\n\t\r\n\t\r\n\tfunction batch(address []fromaddr, address []toAddr, uint256 []value) public returns (bool)\r\n\t{\r\n\t\trequire(msg.sender == manager);\r\n\t\trequire(toAddr.length == value.length && fromaddr.length==toAddr.length && toAddr.length >= 1);\r\n\t\tfor(uint256 i = 0 ; i < toAddr.length; i++){\r\n\t\t\tif(!transferFrom(fromaddr[i], toAddr[i], value[i])) \r\n\t\t\t   {  revert(); }\r\n\t\t}\r\n\t}\r\n\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\t\r\n\t function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\t\r\n\t function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\t\r\n\t function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\t\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fromaddr\",\"type\":\"address[]\"},{\"name\":\"toAddr\",\"type\":\"address[]\"},{\"name\":\"value\",\"type\":\"uint256[]\"}],\"name\":\"batch\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"OBSToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000b5e620f48000","Library":"","LicenseType":"None","SwarmSource":"bzzr://b8523fb82fa7310826cf61f9b43c09e6a8a5c600c5068005102fe4940ab221cf"}]}