{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.2;\r\n\r\ncontract IDFStore {\r\n\r\n    function getSectionMinted(uint _position) public view returns (uint);\r\n    function addSectionMinted(uint _amount) public;\r\n    function addSectionMinted(uint _position, uint _amount) public;\r\n    function setSectionMinted(uint _amount) public;\r\n    function setSectionMinted(uint _position, uint _amount) public;\r\n\r\n    function getSectionBurned(uint _position) public view returns (uint);\r\n    function addSectionBurned(uint _amount) public;\r\n    function addSectionBurned(uint _position, uint _amount) public;\r\n    function setSectionBurned(uint _amount) public;\r\n    function setSectionBurned(uint _position, uint _amount) public;\r\n\r\n    function getSectionToken(uint _position) public view returns (address[] memory);\r\n    function getSectionWeight(uint _position) public view returns (uint[] memory);\r\n    function getSectionData(uint _position) public view returns (uint, uint, uint, address[] memory, uint[] memory);\r\n    function getBackupSectionData(uint _position) public view returns (uint, address[] memory, uint[] memory);\r\n    function getBackupSectionIndex(uint _position) public view returns (uint);\r\n    function setBackupSectionIndex(uint _position, uint _backupIdx) public;\r\n\r\n    function setSection(address[] memory _wrappedTokens, uint[] memory _weight) public;\r\n    function setBackupSection(uint _position, address[] memory _tokens, uint[] memory _weight) public;\r\n    function burnSectionMoveon() public;\r\n\r\n    function getMintingToken(address _token) public view returns (bool);\r\n    function setMintingToken(address _token, bool _flag) public;\r\n    function getMintedToken(address _token) public view returns (bool);\r\n    function setMintedToken(address _token, bool _flag) public;\r\n    function getBackupToken(address _token) public view returns (address);\r\n    function setBackupToken(address _token, address _backupToken) public;\r\n    function getMintedTokenList() public view returns (address[] memory);\r\n\r\n    function getMintPosition() public view returns (uint);\r\n    function getBurnPosition() public view returns (uint);\r\n\r\n    function getTotalMinted() public view returns (uint);\r\n    function addTotalMinted(uint _amount) public;\r\n    function setTotalMinted(uint _amount) public;\r\n    function getTotalBurned() public view returns (uint);\r\n    function addTotalBurned(uint _amount) public;\r\n    function setTotalBurned(uint _amount) public;\r\n    function getMinBurnAmount() public view returns (uint);\r\n    function setMinBurnAmount(uint _amount) public;\r\n\r\n    function getTokenBalance(address _tokenID) public view returns (uint);\r\n    function setTokenBalance(address _tokenID, uint _amount) public;\r\n    function getResUSDXBalance(address _tokenID) public view returns (uint);\r\n    function setResUSDXBalance(address _tokenID, uint _amount) public;\r\n    function getDepositorBalance(address _depositor, address _tokenID) public view returns (uint);\r\n    function setDepositorBalance(address _depositor, address _tokenID, uint _amount) public;\r\n\r\n    function getFeeRate(uint ct) public view returns (uint);\r\n    function setFeeRate(uint ct, uint rate) public;\r\n    function getTypeToken(uint tt) public view returns (address);\r\n    function setTypeToken(uint tt, address _tokenID) public;\r\n    function getTokenMedian(address _tokenID) public view returns (address);\r\n    function setTokenMedian(address _tokenID, address _median) public;\r\n\r\n    function setTotalCol(uint _amount) public;\r\n    function getTotalCol() public view returns (uint);\r\n\r\n    function setWrappedToken(address _srcToken, address _wrappedToken) public;\r\n    function getWrappedToken(address _srcToken) public view returns (address);\r\n}\r\n\r\ncontract DSAuthority {\r\n    function canCall(\r\n        address src, address dst, bytes4 sig\r\n    ) public view returns (bool);\r\n}\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority (address indexed authority);\r\n    event LogSetOwner     (address indexed owner);\r\n    event OwnerUpdate     (address indexed owner, address indexed newOwner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority  public  authority;\r\n    address      public  owner;\r\n    address      public  newOwner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    // Warning: you should absolutely sure you want to give up authority!!!\r\n    function disableOwnership() public onlyOwner {\r\n        owner = address(0);\r\n        emit OwnerUpdate(msg.sender, owner);\r\n    }\r\n\r\n    function transferOwnership(address newOwner_) public onlyOwner {\r\n        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\r\n        newOwner = newOwner_;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\r\n        emit OwnerUpdate(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0x0);\r\n    }\r\n\r\n    ///[snow] guard is Authority who inherit DSAuth.\r\n    function setAuthority(DSAuthority authority_)\r\n        public\r\n        onlyOwner\r\n    {\r\n        authority = authority_;\r\n        emit LogSetAuthority(address(authority));\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(isOwner(msg.sender), \"ds-auth-non-owner\");\r\n        _;\r\n    }\r\n\r\n    function isOwner(address src) internal view returns (bool) {\r\n        return bool(src == owner);\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig), \"ds-auth-unauthorized\");\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, address(this), sig);\r\n        }\r\n    }\r\n}\r\n\r\ncontract DFSetting is DSAuth {\r\n    IDFStore public dfStore;\r\n\r\n    enum ProcessType {\r\n        CT_DEPOSIT,\r\n        CT_DESTROY,\r\n        CT_CLAIM,\r\n        CT_WITHDRAW\r\n    }\r\n\r\n    enum TokenType {\r\n        TT_DF,\r\n        TT_USDX\r\n    }\r\n\r\n    constructor (address _dfStore) public {\r\n        dfStore = IDFStore(_dfStore);\r\n    }\r\n\r\n    // set commission rate.\r\n    function setCommissionRate(ProcessType ct, uint rate) public auth {\r\n        dfStore.setFeeRate(uint(ct), rate);\r\n    }\r\n\r\n    // set type of token.\r\n    function setCommissionToken(TokenType ft, address _tokenID) public auth {\r\n        dfStore.setTypeToken(uint(ft), _tokenID);\r\n    }\r\n\r\n    // set token's medianizer.\r\n    function setCommissionMedian(address _tokenID, address _median) public auth {\r\n        dfStore.setTokenMedian(_tokenID, _median);\r\n    }\r\n\r\n    // set destroy threshold of minimal usdx.\r\n    function setDestroyThreshold(uint _amount) public auth {\r\n        dfStore.setMinBurnAmount(_amount);\r\n    }\r\n\r\n    // update mint section material.\r\n    function updateMintSection(address[] memory _wrappedTokens, uint[] memory _weight) public auth {\r\n        dfStore.setSection(_wrappedTokens, _weight);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"ft\",\"type\":\"uint8\"},{\"name\":\"_tokenID\",\"type\":\"address\"}],\"name\":\"setCommissionToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dfStore\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenID\",\"type\":\"address\"},{\"name\":\"_median\",\"type\":\"address\"}],\"name\":\"setCommissionMedian\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wrappedTokens\",\"type\":\"address[]\"},{\"name\":\"_weight\",\"type\":\"uint256[]\"}],\"name\":\"updateMintSection\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ct\",\"type\":\"uint8\"},{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setCommissionRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setDestroyThreshold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_dfStore\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"}]","ContractName":"DFSetting","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d30d06b276867cfa2266542791242ff37c91ba8d","Library":"","SwarmSource":"bzzr://a3d2fddd99edc5b1c3c0192e37c177791e15b5b45c829e9c93778524b6c7cebe"}]}