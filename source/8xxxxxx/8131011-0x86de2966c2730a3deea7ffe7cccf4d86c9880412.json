{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n// File: ERC20Interface.sol\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: BVAFounders.sol\r\n\r\ncontract BVAFounders {\r\n    using SafeMath for uint;\r\n\r\n    ERC20Interface erc20Contract;\r\n    address payable owner;\r\n\r\n\r\n    modifier isOwner() {\r\n        require(msg.sender == owner, \"must be contract owner\");\r\n        _;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    constructor(ERC20Interface ctr) public {\r\n        erc20Contract = ctr;\r\n        owner         = msg.sender;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Unlock Tokens\r\n    // ------------------------------------------------------------------------\r\n    function unlockTokens(address to) external isOwner {\r\n        // Total Allocation : 1,260,000 BVA (4.5% of total supply)\r\n        // 1. 25% - 2020/12/01 (315,000 BVA) - timestamp 1606752000\r\n        // 2. 25% - 2021/12/01 (315,000 BVA) - timestamp 1638288000\r\n        // 3. 15% - 2022/12/01 (189,000 BVA) - timestamp 1669824000\r\n        // 4. 15% - 2023/12/01 (189,000 BVA) - timestamp 1701360000\r\n        // 5. 10% - 2024/12/01 (126,000 BVA) - timestamp 1732982400\r\n        // 6. 10% - 2025/12/01 (126,000 BVA) - timestamp 1764518400\r\n\r\n        require(now >= 1606752000, \"locked\");\r\n\r\n        uint balance = erc20Contract.balanceOf(address(this));\r\n        uint amount;\r\n        uint remain;\r\n\r\n        if (now < 1638288000) {\r\n            // 1st unlock : before balance must have at least 1,260,000 BVA\r\n            require(balance >= 1260000e18, \"checkpoint 1 balance error\");\r\n            remain = 945000e18;\r\n            amount = balance.sub(remain);\r\n        } else if (now < 1669824000) {\r\n            // 2nd unlock : before balance must have at least 945,000 BVA\r\n            require(balance >= 945000e18, \"checkpoint 2 balance error\");\r\n            remain = 630000e18;\r\n            amount = balance.sub(remain);\r\n        } else if (now < 1701360000) {\r\n            // 3rd unlock : before balance must have at least 630,000 BVA\r\n            require(balance >= 630000e18, \"checkpoint 3 balance error\");\r\n            remain = 441000e18;\r\n            amount = balance.sub(remain);\r\n        } else if (now < 1732982400) {\r\n            // 4th unlock : before balance must have at least 441,000 BVA\r\n            require(balance >= 441000e18, \"checkpoint 4 balance error\");\r\n            remain = 252000e18;\r\n            amount = balance.sub(remain);\r\n        } else if (now < 1764518400) {\r\n            // 5th unlock : before balance must have at least 252,000 BVA\r\n            require(balance >= 252000e18, \"checkpoint 5 balance error\");\r\n            remain = 126000e18;\r\n            amount = balance.sub(remain);\r\n        } else {\r\n            // 6th unlock : before balance must have at least 126,000 BVA\r\n            amount = balance;\r\n        }\r\n\r\n        if (amount > 0) {\r\n            erc20Contract.transfer(to, amount);\r\n        }\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Withdraw ETH from this contract to `owner`\r\n    // ------------------------------------------------------------------------\r\n    function withdrawEther(uint _amount) external isOwner {\r\n        owner.transfer(_amount);\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // accept ETH\r\n    // ------------------------------------------------------------------------\r\n    function () external payable {\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"unlockTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"ctr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"BVAFounders","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000010d88d7495ca381df1391229bdb82d015b9ad17d","Library":"","SwarmSource":"bzzr://f7d6edc5fa7a857235a9472a147fdabae543bb8e9c0dafd3a137232f8ea3434e"}]}