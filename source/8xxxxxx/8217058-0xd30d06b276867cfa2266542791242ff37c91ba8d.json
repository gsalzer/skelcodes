{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.2;\r\n\r\ncontract IERC20Token {\r\n    function balanceOf(address _owner) public view returns (uint);\r\n    function allowance(address _owner, address _spender) public view returns (uint);\r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n    function approve(address _spender, uint _value) public returns (bool success);\r\n    function totalSupply() public view returns (uint);\r\n}\r\n\r\ncontract IDSWrappedToken is IERC20Token {\r\n    function mint(address _account, uint _value) public;\r\n    function burn(address _account, uint _value) public;\r\n    function wrap(address _dst, uint _amount) public returns (uint);\r\n    function unwrap(address _dst, uint _amount) public returns (uint);\r\n    function changeByMultiple(uint _amount) public view returns (uint);\r\n    function reverseByMultiple(uint _xAmount) public view returns (uint);\r\n    function getSrcERC20() public view returns (address);\r\n}\r\n\r\ncontract DSMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\r\n    }\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\r\n    }\r\n\r\n    function div(uint x, uint y) internal pure returns (uint z) {\r\n        require(y > 0, \"ds-math-div-overflow\");\r\n        z = x / y;\r\n    }\r\n\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function max(uint x, uint y) internal pure returns (uint z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n    /**\r\n     * @dev x to the power of y power(base, exponent)\r\n     */\r\n    function pow(uint256 base, uint256 exponent) public pure returns (uint256) {\r\n        if (exponent == 0) {\r\n            return 1;\r\n        }\r\n        else if (exponent == 1) {\r\n            return base;\r\n        }\r\n        else if (base == 0 && exponent != 0) {\r\n            return 0;\r\n        }\r\n        else {\r\n            uint256 z = base;\r\n            for (uint256 i = 1; i < exponent; i++)\r\n                z = mul(z, base);\r\n            return z;\r\n        }\r\n    }\r\n}\r\n\r\ncontract DSAuthority {\r\n    function canCall(\r\n        address src, address dst, bytes4 sig\r\n    ) public view returns (bool);\r\n}\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority (address indexed authority);\r\n    event LogSetOwner     (address indexed owner);\r\n    event OwnerUpdate     (address indexed owner, address indexed newOwner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority  public  authority;\r\n    address      public  owner;\r\n    address      public  newOwner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    // Warning: you should absolutely sure you want to give up authority!!!\r\n    function disableOwnership() public onlyOwner {\r\n        owner = address(0);\r\n        emit OwnerUpdate(msg.sender, owner);\r\n    }\r\n\r\n    function transferOwnership(address newOwner_) public onlyOwner {\r\n        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\r\n        newOwner = newOwner_;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\r\n        emit OwnerUpdate(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0x0);\r\n    }\r\n\r\n    ///[snow] guard is Authority who inherit DSAuth.\r\n    function setAuthority(DSAuthority authority_)\r\n        public\r\n        onlyOwner\r\n    {\r\n        authority = authority_;\r\n        emit LogSetAuthority(address(authority));\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(isOwner(msg.sender), \"ds-auth-non-owner\");\r\n        _;\r\n    }\r\n\r\n    function isOwner(address src) internal view returns (bool) {\r\n        return bool(src == owner);\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig), \"ds-auth-unauthorized\");\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, address(this), sig);\r\n        }\r\n    }\r\n}\r\n\r\ncontract DFStore is DSMath, DSAuth {\r\n    // MEMBERS\r\n    /// @dev  cw - The Weight of collateral\r\n    struct Section {\r\n        uint        minted;\r\n        uint        burned;\r\n        uint        backupIdx;\r\n        address[]   colIDs;\r\n        uint[]      cw;\r\n    }\r\n\r\n    Section[] public secList;\r\n\r\n    mapping(address => address) public wrappedTokens;\r\n\r\n    uint backupSeed = 1;\r\n    mapping(uint => Section) public secListBackup;\r\n\r\n    mapping(address => bool) public mintingTokens;\r\n    mapping(address => bool) public mintedTokens;\r\n    mapping(address => address) public tokenBackup;\r\n\r\n    address[] public mintedTokenList;\r\n\r\n    /// @dev The position of current secList\r\n    uint private mintPosition;\r\n\r\n    /// @dev The position of old secList\r\n    uint private burnPosition;\r\n\r\n    /// @dev  The total amount of minted.\r\n    uint private totalMinted;\r\n\r\n    /// @dev  The total amount of burned.\r\n    uint private totalBurned;\r\n\r\n    /// @dev  The minimal amount of burned.\r\n    uint private minimalBurnAmount = 10 ** 14;\r\n\r\n    /// @dev The total amount of collateral.\r\n    uint private totalCol;\r\n\r\n    mapping(uint => uint) public FeeRate;\r\n    mapping(uint => address) public FeeToken;\r\n    mapping(address => address) public TokenMedian;\r\n    mapping(address => uint) public poolBalance;\r\n    mapping(address => uint) public resUSDXBalance;\r\n    mapping(address => mapping (address => uint)) public depositorsBalance;\r\n\r\n    event UpdateSection(address[] _wrappedTokens, uint[] _number);\r\n\r\n    constructor(address[] memory _wrappedTokens, uint[] memory _weights) public {\r\n        _setSection(_wrappedTokens, _weights);\r\n    }\r\n\r\n    function getSectionMinted(uint _position) public view returns (uint) {\r\n        return secList[_position].minted;\r\n    }\r\n\r\n    function addSectionMinted(uint _amount) public auth {\r\n        require(_amount > 0, \"AddSectionMinted: amount not correct.\");\r\n        secList[mintPosition].minted = add(secList[mintPosition].minted, _amount);\r\n    }\r\n\r\n    function addSectionMinted(uint _position, uint _amount) public auth {\r\n        require(_amount > 0, \"AddSectionMinted: amount not correct.\");\r\n        secList[_position].minted = add(secList[_position].minted, _amount);\r\n    }\r\n\r\n    function setSectionMinted(uint _amount) public auth {\r\n        secList[mintPosition].minted = _amount;\r\n    }\r\n\r\n    function setSectionMinted(uint _position, uint _amount) public auth {\r\n        secList[_position].minted = _amount;\r\n    }\r\n\r\n    function getSectionBurned(uint _position) public view returns (uint) {\r\n        return secList[_position].burned;\r\n    }\r\n\r\n    function addSectionBurned(uint _amount) public auth {\r\n        require(_amount > 0, \"AddSectionBurned: amount not correct.\");\r\n        secList[burnPosition].burned = add(secList[burnPosition].burned, _amount);\r\n    }\r\n\r\n    function addSectionBurned(uint _position, uint _amount) public auth {\r\n        require(_amount > 0, \"AddSectionBurned: amount not correct.\");\r\n        secList[_position].burned = add(secList[_position].burned, _amount);\r\n    }\r\n\r\n    function setSectionBurned(uint _amount) public auth {\r\n        secList[burnPosition].burned = _amount;\r\n    }\r\n\r\n    function setSectionBurned(uint _position, uint _amount) public auth {\r\n        secList[_position].burned = _amount;\r\n    }\r\n\r\n    function getSectionToken(uint _position) public view returns (address[] memory) {\r\n        return secList[_position].colIDs;\r\n    }\r\n\r\n    function getSectionWeight(uint _position) public view returns (uint[] memory) {\r\n        return secList[_position].cw;\r\n    }\r\n\r\n    function getSectionData(uint _position) public view returns (uint, uint, uint, address[] memory, uint[] memory) {\r\n\r\n        return (\r\n            secList[_position].minted,\r\n            secList[_position].burned,\r\n            secList[_position].backupIdx,\r\n            secList[_position].colIDs,\r\n            secList[_position].cw\r\n            );\r\n    }\r\n\r\n    function getBackupSectionData(uint _position) public view returns (uint, address[] memory, uint[] memory) {\r\n        uint _backupIdx = getBackupSectionIndex(_position);\r\n        return (secListBackup[_backupIdx].backupIdx, secListBackup[_backupIdx].colIDs, secListBackup[_backupIdx].cw);\r\n    }\r\n\r\n    function getBackupSectionIndex(uint _position) public view returns (uint) {\r\n        return secList[_position].backupIdx;\r\n    }\r\n\r\n    function setBackupSectionIndex(uint _position, uint _backupIdx) public auth {\r\n        secList[_position].backupIdx = _backupIdx;\r\n    }\r\n\r\n    function _setSection(address[] memory _wrappedTokens, uint[] memory _weight) internal {\r\n        require(_wrappedTokens.length == _weight.length, \"_SetSection: data not allow.\");\r\n\r\n        uint sum;\r\n        uint factor = 10 ** 10;\r\n        address[] memory _srcTokens = new address[](_weight.length);\r\n\r\n        for (uint i = 0; i < _wrappedTokens.length; i++) {\r\n            require(_weight[i] != 0, \"_SetSection: invalid weight\");\r\n            require(_wrappedTokens[i] != address(0), \"_SetSection: 0 address not allow.\");\r\n            _srcTokens[i] = IDSWrappedToken(_wrappedTokens[i]).getSrcERC20();\r\n            require(_srcTokens[i] != address(0), \"_SetSection: invalid address\");\r\n            sum = add(sum, _weight[i]);\r\n        }\r\n\r\n        secList.push(Section(0, 0, 0, new address[](_wrappedTokens.length), new uint[](_weight.length)));\r\n        uint _mintPosition = secList.length - 1;\r\n\r\n        if (_mintPosition > 0) {\r\n            address[] memory _cruColIDs = getSectionToken(mintPosition);\r\n            for (uint i = 0; i < _cruColIDs.length; i++)\r\n                delete mintingTokens[_cruColIDs[i]];\r\n        }\r\n\r\n        for (uint i = 0; i < _wrappedTokens.length; i++) {\r\n            require(mul(div(mul(_weight[i], factor), sum), sum) == mul(_weight[i], factor), \"_SetSection: invalid weight\");\r\n\r\n            secList[_mintPosition].cw[i] = _weight[i];\r\n            secList[_mintPosition].colIDs[i] = _wrappedTokens[i];\r\n            mintingTokens[_wrappedTokens[i]] = true;\r\n            wrappedTokens[_srcTokens[i]] = _wrappedTokens[i];\r\n\r\n            if (mintedTokens[_wrappedTokens[i]])\r\n                continue;\r\n\r\n            mintedTokenList.push(_wrappedTokens[i]);\r\n            mintedTokens[_wrappedTokens[i]] = true;\r\n        }\r\n\r\n        mintPosition = _mintPosition;\r\n        emit UpdateSection(secList[mintPosition].colIDs, secList[mintPosition].cw);\r\n    }\r\n\r\n    function setSection(address[] memory _wrappedTokens, uint[] memory _weight) public auth {\r\n        _setSection(_wrappedTokens, _weight);\r\n    }\r\n\r\n    function setBackupSection(uint _position, address[] memory _wrappedTokens, uint[] memory _weight) public auth {\r\n        require(_wrappedTokens.length == _weight.length, \"SetBackupSection: data not allow.\");\r\n        require(_position < mintPosition, \"SetBackupSection: update mint section first.\");\r\n\r\n        uint _backupIdx = secList[_position].backupIdx;\r\n\r\n        if (_backupIdx == 0){\r\n\r\n            _backupIdx = backupSeed;\r\n            secList[_position].backupIdx = _backupIdx;\r\n            backupSeed = add(_backupIdx, 1);\r\n        }\r\n\r\n        secListBackup[_backupIdx] = Section(0, 0, _position, new address[](_wrappedTokens.length), new uint[](_weight.length));\r\n\r\n        for (uint i = 0; i < _wrappedTokens.length; i++) {\r\n            require(_wrappedTokens[i] != address(0), \"SetBackupSection: token contract address invalid\");\r\n            require(_weight[i] > 0, \"SetBackupSection: weight must greater than 0\");\r\n\r\n            secListBackup[_backupIdx].cw[i] = _weight[i];\r\n            secListBackup[_backupIdx].colIDs[i] = _wrappedTokens[i];\r\n            mintedTokens[_wrappedTokens[i]] = true;\r\n        }\r\n    }\r\n\r\n    function burnSectionMoveon() public auth {\r\n        require(\r\n            secList[burnPosition].minted == secList[burnPosition].burned,\r\n            \"BurnSectionMoveon: burned not meet minted.\"\r\n            );\r\n\r\n        burnPosition = add(burnPosition, 1);\r\n        assert(burnPosition <= mintPosition);\r\n    }\r\n\r\n    function getMintingToken(address _token) public view returns (bool) {\r\n        return mintingTokens[_token];\r\n    }\r\n\r\n    function setMintingToken(address _token, bool _flag) public auth {\r\n        mintingTokens[_token] = _flag;\r\n    }\r\n\r\n    function getMintedToken(address _token) public view returns (bool) {\r\n        return mintedTokens[_token];\r\n    }\r\n\r\n    function setMintedToken(address _token, bool _flag) public auth {\r\n        mintedTokens[_token] = _flag;\r\n    }\r\n\r\n    function getBackupToken(address _token) public view returns (address) {\r\n        return tokenBackup[_token];\r\n    }\r\n\r\n    function setBackupToken(address _token, address _backupToken) public auth {\r\n        tokenBackup[_token] = _backupToken;\r\n    }\r\n\r\n    function getMintedTokenList() public view returns (address[] memory) {\r\n        return mintedTokenList;\r\n    }\r\n\r\n    function getMintPosition() public view returns (uint) {\r\n        return mintPosition;\r\n    }\r\n\r\n    function getBurnPosition() public view returns (uint) {\r\n        return burnPosition;\r\n    }\r\n\r\n    function getTotalMinted() public view returns (uint) {\r\n        return totalMinted;\r\n    }\r\n\r\n    function addTotalMinted(uint _amount) public auth {\r\n        require(_amount > 0, \"AddTotalMinted: minted amount is zero.\");\r\n        totalMinted = add(totalMinted, _amount);\r\n    }\r\n\r\n    function setTotalMinted(uint _amount) public auth {\r\n        totalMinted = _amount;\r\n    }\r\n\r\n    function getTotalBurned() public view returns (uint) {\r\n        return totalBurned;\r\n    }\r\n\r\n    function addTotalBurned(uint _amount) public auth {\r\n        require(_amount > 0, \"AddTotalBurned: minted amount is zero.\");\r\n        totalBurned = add(totalBurned, _amount);\r\n    }\r\n\r\n    function setTotalBurned(uint _amount) public auth {\r\n        totalBurned = _amount;\r\n    }\r\n\r\n    function getMinBurnAmount() public view returns (uint) {\r\n        return minimalBurnAmount;\r\n    }\r\n\r\n    function setMinBurnAmount(uint _amount) public auth {\r\n        _setMinBurnAmount(_amount);\r\n    }\r\n\r\n    function _setMinBurnAmount(uint _amount) internal {\r\n        minimalBurnAmount = _amount;\r\n    }\r\n\r\n    function getTokenBalance(address _tokenID) public view returns (uint) {\r\n        return poolBalance[_tokenID];\r\n    }\r\n\r\n    function setTokenBalance(address _tokenID, uint _amount) public auth {\r\n        poolBalance[_tokenID] = _amount;\r\n    }\r\n\r\n    function getResUSDXBalance(address _tokenID) public view returns (uint) {\r\n        return resUSDXBalance[_tokenID];\r\n    }\r\n\r\n    function setResUSDXBalance(address _tokenID, uint _amount) public auth {\r\n        resUSDXBalance[_tokenID] = _amount;\r\n    }\r\n\r\n    function getDepositorBalance(address _depositor, address _tokenID) public view returns (uint) {\r\n        return depositorsBalance[_depositor][_tokenID];\r\n    }\r\n\r\n    function setDepositorBalance(address _depositor, address _tokenID, uint _amount) public auth {\r\n        depositorsBalance[_depositor][_tokenID] = _amount;\r\n    }\r\n\r\n    function setFeeRate(uint ct, uint rate) public auth {\r\n        FeeRate[ct] = rate;\r\n    }\r\n\r\n    function getFeeRate(uint ct) public view returns (uint) {\r\n        return FeeRate[ct];\r\n    }\r\n\r\n    function setTypeToken(uint tt, address _tokenID) public auth {\r\n        FeeToken[tt] = _tokenID;\r\n    }\r\n\r\n    function getTypeToken(uint tt) public view returns (address) {\r\n        return FeeToken[tt];\r\n    }\r\n\r\n    function setTokenMedian(address _tokenID, address _median) public auth {\r\n        TokenMedian[_tokenID] = _median;\r\n    }\r\n\r\n    function getTokenMedian(address _tokenID) public view returns (address) {\r\n        return TokenMedian[_tokenID];\r\n    }\r\n\r\n    function setTotalCol(uint _amount) public auth {\r\n        totalCol = _amount;\r\n    }\r\n\r\n    function getTotalCol() public view returns (uint) {\r\n        return totalCol;\r\n    }\r\n\r\n    function setWrappedToken(address _srcToken, address _wrappedToken) public auth {\r\n        wrappedTokens[_srcToken] = _wrappedToken;\r\n    }\r\n\r\n    function getWrappedToken(address _srcToken) public view returns (address) {\r\n        return  wrappedTokens[_srcToken];\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_srcToken\",\"type\":\"address\"},{\"name\":\"_wrappedToken\",\"type\":\"address\"}],\"name\":\"setWrappedToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalMinted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalCol\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSectionBurned\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setTotalMinted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMintedTokenList\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getMintingToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setMintedToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addTotalMinted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"base\",\"type\":\"uint256\"},{\"name\":\"exponent\",\"type\":\"uint256\"}],\"name\":\"pow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"secList\",\"outputs\":[{\"name\":\"minted\",\"type\":\"uint256\"},{\"name\":\"burned\",\"type\":\"uint256\"},{\"name\":\"backupIdx\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenID\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wrappedTokens\",\"type\":\"address[]\"},{\"name\":\"_weight\",\"type\":\"uint256[]\"}],\"name\":\"setSection\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_position\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addSectionBurned\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_position\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addSectionMinted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenID\",\"type\":\"address\"}],\"name\":\"getResUSDXBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenID\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setTokenBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tt\",\"type\":\"uint256\"},{\"name\":\"_tokenID\",\"type\":\"address\"}],\"name\":\"setTypeToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setTotalBurned\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_position\",\"type\":\"uint256\"}],\"name\":\"getSectionWeight\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBurnPosition\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_depositor\",\"type\":\"address\"},{\"name\":\"_tokenID\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setDepositorBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintedTokenList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositorsBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMintPosition\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"FeeToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSectionMinted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"FeeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_position\",\"type\":\"uint256\"},{\"name\":\"_wrappedTokens\",\"type\":\"address[]\"},{\"name\":\"_weight\",\"type\":\"uint256[]\"}],\"name\":\"setBackupSection\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"resUSDXBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getBackupToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_position\",\"type\":\"uint256\"}],\"name\":\"getSectionMinted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addTotalBurned\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_position\",\"type\":\"uint256\"}],\"name\":\"getBackupSectionData\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintingTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMinBurnAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_srcToken\",\"type\":\"address\"}],\"name\":\"getWrappedToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_position\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSectionBurned\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"secListBackup\",\"outputs\":[{\"name\":\"minted\",\"type\":\"uint256\"},{\"name\":\"burned\",\"type\":\"uint256\"},{\"name\":\"backupIdx\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalBurned\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_position\",\"type\":\"uint256\"}],\"name\":\"getSectionToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setTotalCol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenID\",\"type\":\"address\"},{\"name\":\"_median\",\"type\":\"address\"}],\"name\":\"setTokenMedian\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addSectionMinted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addSectionBurned\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMinBurnAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_depositor\",\"type\":\"address\"},{\"name\":\"_tokenID\",\"type\":\"address\"}],\"name\":\"getDepositorBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ct\",\"type\":\"uint256\"}],\"name\":\"getFeeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"wrappedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_position\",\"type\":\"uint256\"}],\"name\":\"getSectionData\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getMintedToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenBackup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_position\",\"type\":\"uint256\"},{\"name\":\"_backupIdx\",\"type\":\"uint256\"}],\"name\":\"setBackupSectionIndex\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"TokenMedian\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenID\",\"type\":\"address\"}],\"name\":\"getTokenMedian\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tt\",\"type\":\"uint256\"}],\"name\":\"getTypeToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setMintingToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_position\",\"type\":\"uint256\"}],\"name\":\"getSectionBurned\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnSectionMoveon\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_position\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSectionMinted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ct\",\"type\":\"uint256\"},{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setFeeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_backupToken\",\"type\":\"address\"}],\"name\":\"setBackupToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenID\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setResUSDXBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_position\",\"type\":\"uint256\"}],\"name\":\"getBackupSectionIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wrappedTokens\",\"type\":\"address[]\"},{\"name\":\"_weights\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wrappedTokens\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"_number\",\"type\":\"uint256[]\"}],\"name\":\"UpdateSection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"}]","ContractName":"DFStore","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000400000000000000000000000026472cc7f4cb43ae9b3f18c705de8c34578933f9000000000000000000000000666ed86f5ed0e80d8f441002b1ae08dcbaeff1e6000000000000000000000000284bfce387b079eb3461d7da9399266662e697c5000000000000000000000000369dffbb1d8f49ecf63501e2d175742ae1bfdfc80000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000000000000000000000000000006a94d74f430000000000000000000000000000000000000000000000000000006a94d74f430000000000000000000000000000000000000000000000000000006a94d74f430000","Library":"","SwarmSource":"bzzr://0c66c8e36b30c5d14d404c76aae86ff30b294bfd9acc056b3360ef4abf9a5f74"}]}