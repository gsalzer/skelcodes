{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.11;\r\n\r\ncontract ETHGIVER {\r\n    address payable owner;\r\n    uint256 public maxWei;\r\n    event Winnings(uint256);\r\n\r\n    constructor() public payable {\r\n        owner = msg.sender;\r\n    }\r\n\r\n     function () external payable {\r\n        // donate here\r\n    }\r\n\r\n    function send() public payable returns(uint) {\r\n        require(msg.value <= 5 ether && msg.value < address(this).balance * 5 / 100, \"sending too much\");\r\n        if (random() < 9) {\r\n            uint winnings = msg.value * 9 / 100;\r\n            msg.sender.transfer(msg.value + winnings);\r\n            emit Winnings(winnings);\r\n        }\r\n        emit Winnings(0);\r\n    }\r\n\r\n    function withdraw(uint256 _wei) public payable {\r\n        require(owner == msg.sender,  \"cannot withdraw\");\r\n        // 1000000000000000000 wei = 1 ETH\r\n        owner.transfer(_wei);\r\n    }\r\n\r\n    function random() private view returns(uint){\r\n        uint source = block.difficulty + now;\r\n        bytes memory source_b = toBytes(source);\r\n        // random between 0 - 9\r\n        return uint(keccak256(source_b)) % 10;\r\n    }\r\n\r\n    function toBytes(uint256 x) private pure returns (bytes memory b) {\r\n        b = new bytes(32);\r\n        assembly { mstore(add(b, 32), x) }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"maxWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wei\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"send\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Winnings\",\"type\":\"event\"}]","ContractName":"ETHGIVER","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://0afff3b2257e105a7d69d507f0e5b963693279cd55e2d49d4cebe10f002a867a"}]}