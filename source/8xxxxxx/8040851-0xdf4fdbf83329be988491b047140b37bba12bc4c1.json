{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.7;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\ninterface Storage {\r\n    function getModerationResources() external view returns (address payable);\r\n    function allowOnlyDappContracts(address caller) external view returns (bool);\r\n    function getAmountAvailableForWithdraw(address userAddr, uint256 pid) external view returns (uint256);\r\n    function getPayment(address payable payee) external view returns (uint256);\r\n    function setAmountAvailableForWithdraw(address userAddr, uint256 pid, uint256 amount) external returns (uint256);\r\n}\r\n\r\ninterface SecondaryStorageInterface {\r\n    function onlyProjectControllers(address caller, uint256 pid) external view returns (bool);\r\n    function getProjectCurrentState(uint256 pid) external view returns (uint8);\r\n    function getPolicyEndDate(uint256 pid) external view returns (uint256);\r\n    function getPolicyBase(uint256 pid) external view returns (uint256);\r\n    function getAmountOfFundsContributed(uint256 pid) external view returns (uint256);\r\n    function getTotalAmountSecuredEther(uint256 pid) external view returns (uint256);\r\n    function getActiveProjects() external view returns (uint256);\r\n    function getBasePolicyExpired(uint256 pid) external view returns (bool);\r\n    function getOwnerFunds(uint256 pid, address ownerAddr) external view returns (uint256);\r\n}\r\n\r\ninterface RefundPoolInterface {\r\n    function deposit(uint256 pid) external payable;\r\n    function insuranceDeposit(uint256 pid) external payable;\r\n    function getProjectFunds (uint256 pid) external view returns (uint256);\r\n    function withdraw(uint256 pid, address payable to, uint256 amount) external;\r\n    function withdrawInsuranceFee(uint256 pid, address payable to, uint256 amount) external;\r\n    function cleanIfNoProjects() external;\r\n}\r\n\r\ninterface Logger {\r\n    function emitPoolDeposit(uint256 pid, uint256 weiAmount) external;\r\n    function emitPoolWithdraw(address investorRefunded, uint256 weiAmount) external;\r\n}\r\n\r\n\r\ncontract RefundableICORefundPool {\r\n    using SafeMath for uint256;\r\n\r\n    Storage masterStorage;\r\n    SecondaryStorageInterface secondStorage;\r\n    Logger eventLogger;\r\n\r\n    mapping(uint256 => uint256) private projectFunds;\r\n    mapping(uint256 => uint256) private amountRepaid;\r\n\r\n    event CommunityAidReceived(address sender, uint256 value);\r\n\r\n    constructor(\r\n        address storageAddress,\r\n        address secondaryStorage,\r\n        address eventLoggerContract\r\n    )\r\n        public\r\n    {\r\n        masterStorage = Storage(storageAddress);\r\n        secondStorage = SecondaryStorageInterface(secondaryStorage);\r\n        eventLogger = Logger(eventLoggerContract);\r\n    }\r\n\r\n    function() external payable {\r\n        emit CommunityAidReceived(msg.sender, msg.value);\r\n    }\r\n\r\n    modifier onlyValidControllers(uint256 pid) {\r\n        require(secondStorage.onlyProjectControllers(msg.sender, pid), \"Not a valid controller\");\r\n        _;\r\n    }\r\n\r\n    function insuranceDeposit(uint256 pid) external payable onlyValidControllers(pid) {\r\n        uint256 amount = msg.value;\r\n        projectFunds[pid] = projectFunds[pid].add(amount);\r\n        eventLogger.emitPoolDeposit(pid, msg.value);\r\n    }\r\n\r\n    function deposit(uint256 pid) external payable onlyValidControllers(pid) {\r\n        uint256 amount = msg.value;\r\n        projectFunds[pid] = projectFunds[pid].add(amount);\r\n        eventLogger.emitPoolDeposit(pid, amount);\r\n    }\r\n\r\n    function getProjectFunds(uint256 pid)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return projectFunds[pid];\r\n    }\r\n\r\n    function withdraw(uint256 pid, address payable to, uint256 amount)\r\n        external\r\n        onlyValidControllers(pid)\r\n    {\r\n        uint256 paymentAmount = amount;\r\n        uint256 payment;\r\n        address payable modResources = masterStorage.getModerationResources();\r\n        uint256 tfc = secondStorage.getAmountOfFundsContributed(pid);\r\n        if (to == modResources) {\r\n            uint8 pjs = secondStorage.getProjectCurrentState(pid);\r\n            if (pjs == 6) {\r\n                payment = paymentAmount;\r\n                require(\r\n                    tfc.div(2) >= payment &&\r\n                    block.number > secondStorage.getPolicyEndDate(pid).add(185142) &&\r\n                    projectFunds[pid] >= amountRepaid[pid].add(payment),\r\n                    \"Withdraw not allowed yet or not enough project funds available\"\r\n                );\r\n                paymentAmount = 0;\r\n                amountRepaid[pid] = amountRepaid[pid].add(payment);\r\n                to.transfer(payment);\r\n                eventLogger.emitPoolWithdraw(to, payment);\r\n            }\r\n\r\n            if (pjs == 5) {\r\n                payment = paymentAmount;\r\n                if (!secondStorage.getBasePolicyExpired(pid)) {\r\n                    require(tfc >= payment, \"Not enough project funds available\");\r\n                    require(projectFunds[pid] >= amountRepaid[pid].add(payment), \"No project funds for repayment\");\r\n                } else {\r\n                    require(tfc.div(2) >= payment, \"Not enough project funds available\");\r\n                    require(projectFunds[pid] >= amountRepaid[pid].add(payment), \"No project funds for repayment\");\r\n                }\r\n\r\n                paymentAmount = 0;\r\n                amountRepaid[pid] = amountRepaid[pid].add(payment);\r\n                to.transfer(payment);\r\n                eventLogger.emitPoolWithdraw(to, payment);\r\n            }\r\n\r\n            if (pjs != 5 && pjs != 6 && block.number > secondStorage.getPolicyBase(pid) &&\r\n                !secondStorage.getBasePolicyExpired(pid)) {\r\n                payment = paymentAmount;\r\n                require(tfc.div(2) >= payment, \"Not a valid amount of funds\");\r\n                require(projectFunds[pid] >= amountRepaid[pid].add(payment), \"No project funds for repayment\");\r\n                paymentAmount = 0;\r\n                amountRepaid[pid] = amountRepaid[pid].add(payment);\r\n\r\n                to.transfer(payment);\r\n                eventLogger.emitPoolWithdraw(to, payment);\r\n            }\r\n        } else {\r\n            uint256 refundAmount = masterStorage.getAmountAvailableForWithdraw(to, pid);\r\n            if (refundAmount == paymentAmount) {\r\n                payment = refundAmount;\r\n                masterStorage.setAmountAvailableForWithdraw(to, pid, 0);\r\n                require(payment > 0, \"No refund amount is available for this project\");\r\n                to.transfer(payment);\r\n                eventLogger.emitPoolWithdraw(to, payment);\r\n            } else {\r\n                require(projectFunds[pid] >= amountRepaid[pid].add(payment), \"No project funds for repayment\");\r\n                payment = paymentAmount;\r\n                paymentAmount = 0;\r\n                amountRepaid[pid] = amountRepaid[pid].add(payment);\r\n                to.transfer(payment);\r\n                eventLogger.emitPoolWithdraw(to, payment);\r\n            }\r\n        }\r\n    }\r\n\r\n    function withdrawInsuranceFee(uint256 pid, address payable to, uint256 amount)\r\n        external\r\n        onlyValidControllers(pid)\r\n    {\r\n        uint256 payment = masterStorage.getAmountAvailableForWithdraw(to, pid);\r\n        require(payment == amount, \"Not enough funds available\");\r\n        require(projectFunds[pid] >= amountRepaid[pid].add(payment), \"No project funds for repayment\");\r\n        masterStorage.setAmountAvailableForWithdraw(to, pid, 0);\r\n        amountRepaid[pid] = amountRepaid[pid].add(payment);\r\n        to.transfer(payment);\r\n        eventLogger.emitPoolWithdraw(to, payment);\r\n    }\r\n\r\n    function cleanIfNoProjects() external {\r\n        if (secondStorage.getActiveProjects() == 0) {\r\n            address payable modrRsrc = masterStorage.getModerationResources();\r\n            modrRsrc.transfer(address(this).balance);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getProjectFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawInsuranceFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanIfNoProjects\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"insuranceDeposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"storageAddress\",\"type\":\"address\"},{\"name\":\"secondaryStorage\",\"type\":\"address\"},{\"name\":\"eventLoggerContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"CommunityAidReceived\",\"type\":\"event\"}]","ContractName":"RefundableICORefundPool","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"500000","ConstructorArguments":"00000000000000000000000057d504f3ebcc43b8a894a7933676eb17236cc35d000000000000000000000000ac5ae06a85b710c1c68708bb04b80f2d81c00617000000000000000000000000358994ca3f907b689c4177790a2cb424a3d2bcdf","Library":"","SwarmSource":"bzzr://39f4d2d5e6c4bca9a9dbc513994a77fb77076eb789e49957d9f26bc150a81d7b"}]}