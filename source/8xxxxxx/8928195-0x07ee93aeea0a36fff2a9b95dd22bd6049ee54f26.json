{"status":"1","message":"OK","result":[{"SourceCode":"// hevm: flattened sources of /nix/store/sxr9nv6bdacjzw8vhns72bxjga458x34-dss-proxy-actions-53f1d75/src/DssProxyActions.sol\r\npragma solidity =0.5.12;\r\n\r\n////// /nix/store/sxr9nv6bdacjzw8vhns72bxjga458x34-dss-proxy-actions-53f1d75/src/DssProxyActions.sol\r\n/* pragma solidity 0.5.12; */\r\n\r\ncontract GemLike {\r\n    function approve(address, uint) public;\r\n    function transfer(address, uint) public;\r\n    function transferFrom(address, address, uint) public;\r\n    function deposit() public payable;\r\n    function withdraw(uint) public;\r\n}\r\n\r\ncontract ManagerLike {\r\n    function cdpCan(address, uint, address) public view returns (uint);\r\n    function ilks(uint) public view returns (bytes32);\r\n    function owns(uint) public view returns (address);\r\n    function urns(uint) public view returns (address);\r\n    function vat() public view returns (address);\r\n    function open(bytes32, address) public returns (uint);\r\n    function give(uint, address) public;\r\n    function cdpAllow(uint, address, uint) public;\r\n    function urnAllow(address, uint) public;\r\n    function frob(uint, int, int) public;\r\n    function flux(uint, address, uint) public;\r\n    function move(uint, address, uint) public;\r\n    function exit(address, uint, address, uint) public;\r\n    function quit(uint, address) public;\r\n    function enter(address, uint) public;\r\n    function shift(uint, uint) public;\r\n}\r\n\r\ncontract VatLike {\r\n    function can(address, address) public view returns (uint);\r\n    function ilks(bytes32) public view returns (uint, uint, uint, uint, uint);\r\n    function dai(address) public view returns (uint);\r\n    function urns(bytes32, address) public view returns (uint, uint);\r\n    function frob(bytes32, address, address, address, int, int) public;\r\n    function hope(address) public;\r\n    function move(address, address, uint) public;\r\n}\r\n\r\ncontract GemJoinLike {\r\n    function dec() public returns (uint);\r\n    function gem() public returns (GemLike);\r\n    function join(address, uint) public payable;\r\n    function exit(address, uint) public;\r\n}\r\n\r\ncontract GNTJoinLike {\r\n    function bags(address) public view returns (address);\r\n    function make(address) public returns (address);\r\n}\r\n\r\ncontract DaiJoinLike {\r\n    function vat() public returns (VatLike);\r\n    function dai() public returns (GemLike);\r\n    function join(address, uint) public payable;\r\n    function exit(address, uint) public;\r\n}\r\n\r\ncontract HopeLike {\r\n    function hope(address) public;\r\n    function nope(address) public;\r\n}\r\n\r\ncontract EndLike {\r\n    function fix(bytes32) public view returns (uint);\r\n    function cash(bytes32, uint) public;\r\n    function free(bytes32) public;\r\n    function pack(uint) public;\r\n    function skim(bytes32, address) public;\r\n}\r\n\r\ncontract JugLike {\r\n    function drip(bytes32) public returns (uint);\r\n}\r\n\r\ncontract PotLike {\r\n    function pie(address) public view returns (uint);\r\n    function drip() public returns (uint);\r\n    function join(uint) public;\r\n    function exit(uint) public;\r\n}\r\n\r\ncontract ProxyRegistryLike {\r\n    function proxies(address) public view returns (address);\r\n    function build(address) public returns (address);\r\n}\r\n\r\ncontract ProxyLike {\r\n    function owner() public view returns (address);\r\n}\r\n\r\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n// WARNING: These functions meant to be used as a a library for a DSProxy. Some are unsafe if you call them directly.\r\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\ncontract Common {\r\n    uint256 constant RAY = 10 ** 27;\r\n\r\n    // Internal functions\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"mul-overflow\");\r\n    }\r\n\r\n    // Public functions\r\n\r\n    function daiJoin_join(address apt, address urn, uint wad) public {\r\n        // Gets DAI from the user's wallet\r\n        DaiJoinLike(apt).dai().transferFrom(msg.sender, address(this), wad);\r\n        // Approves adapter to take the DAI amount\r\n        DaiJoinLike(apt).dai().approve(apt, wad);\r\n        // Joins DAI into the vat\r\n        DaiJoinLike(apt).join(urn, wad);\r\n    }\r\n}\r\n\r\ncontract DssProxyActions is Common {\r\n    // Internal functions\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"sub-overflow\");\r\n    }\r\n\r\n    function toInt(uint x) internal pure returns (int y) {\r\n        y = int(x);\r\n        require(y >= 0, \"int-overflow\");\r\n    }\r\n\r\n    function toRad(uint wad) internal pure returns (uint rad) {\r\n        rad = mul(wad, 10 ** 27);\r\n    }\r\n\r\n    function convertTo18(address gemJoin, uint256 amt) internal returns (uint256 wad) {\r\n        // For those collaterals that have less than 18 decimals precision we need to do the conversion before passing to frob function\r\n        // Adapters will automatically handle the difference of precision\r\n        wad = mul(\r\n            amt,\r\n            10 ** (18 - GemJoinLike(gemJoin).dec())\r\n        );\r\n    }\r\n\r\n    function _getDrawDart(\r\n        address vat,\r\n        address jug,\r\n        address urn,\r\n        bytes32 ilk,\r\n        uint wad\r\n    ) internal returns (int dart) {\r\n        // Updates stability fee rate\r\n        uint rate = JugLike(jug).drip(ilk);\r\n\r\n        // Gets DAI balance of the urn in the vat\r\n        uint dai = VatLike(vat).dai(urn);\r\n\r\n        // If there was already enough DAI in the vat balance, just exits it without adding more debt\r\n        if (dai < mul(wad, RAY)) {\r\n            // Calculates the needed dart so together with the existing dai in the vat is enough to exit wad amount of DAI tokens\r\n            dart = toInt(sub(mul(wad, RAY), dai) / rate);\r\n            // This is neeeded due lack of precision. It might need to sum an extra dart wei (for the given DAI wad amount)\r\n            dart = mul(uint(dart), rate) < mul(wad, RAY) ? dart + 1 : dart;\r\n        }\r\n    }\r\n\r\n    function _getWipeDart(\r\n        address vat,\r\n        uint dai,\r\n        address urn,\r\n        bytes32 ilk\r\n    ) internal view returns (int dart) {\r\n        // Gets actual rate from the vat\r\n        (, uint rate,,,) = VatLike(vat).ilks(ilk);\r\n        // Gets actual art value of the urn\r\n        (, uint art) = VatLike(vat).urns(ilk, urn);\r\n\r\n        // Uses the whole dai balance in the vat to reduce the debt\r\n        dart = toInt(dai / rate);\r\n        // Checks the calculated dart is not higher than urn.art (total debt), otherwise uses its value\r\n        dart = uint(dart) <= art ? - dart : - toInt(art);\r\n    }\r\n\r\n    function _getWipeAllWad(\r\n        address vat,\r\n        address usr,\r\n        address urn,\r\n        bytes32 ilk\r\n    ) internal view returns (uint wad) {\r\n        // Gets actual rate from the vat\r\n        (, uint rate,,,) = VatLike(vat).ilks(ilk);\r\n        // Gets actual art value of the urn\r\n        (, uint art) = VatLike(vat).urns(ilk, urn);\r\n        // Gets actual dai amount in the urn\r\n        uint dai = VatLike(vat).dai(usr);\r\n\r\n        uint rad = sub(mul(art, rate), dai);\r\n        wad = rad / RAY;\r\n\r\n        // If the rad precision has some dust, it will need to request for 1 extra wad wei\r\n        wad = mul(wad, RAY) < rad ? wad + 1 : wad;\r\n    }\r\n\r\n    // Public functions\r\n\r\n    function transfer(address gem, address dst, uint wad) public {\r\n        GemLike(gem).transfer(dst, wad);\r\n    }\r\n\r\n    function ethJoin_join(address apt, address urn) public payable {\r\n        // Wraps ETH in WETH\r\n        GemJoinLike(apt).gem().deposit.value(msg.value)();\r\n        // Approves adapter to take the WETH amount\r\n        GemJoinLike(apt).gem().approve(address(apt), msg.value);\r\n        // Joins WETH collateral into the vat\r\n        GemJoinLike(apt).join(urn, msg.value);\r\n    }\r\n\r\n    function gemJoin_join(address apt, address urn, uint wad, bool transferFrom) public {\r\n        // Only executes for tokens that have approval/transferFrom implementation\r\n        if (transferFrom) {\r\n            // Gets token from the user's wallet\r\n            GemJoinLike(apt).gem().transferFrom(msg.sender, address(this), wad);\r\n            // Approves adapter to take the token amount\r\n            GemJoinLike(apt).gem().approve(apt, wad);\r\n        }\r\n        // Joins token collateral into the vat\r\n        GemJoinLike(apt).join(urn, wad);\r\n    }\r\n\r\n    function hope(\r\n        address obj,\r\n        address usr\r\n    ) public {\r\n        HopeLike(obj).hope(usr);\r\n    }\r\n\r\n    function nope(\r\n        address obj,\r\n        address usr\r\n    ) public {\r\n        HopeLike(obj).nope(usr);\r\n    }\r\n\r\n    function open(\r\n        address manager,\r\n        bytes32 ilk,\r\n        address usr\r\n    ) public returns (uint cdp) {\r\n        cdp = ManagerLike(manager).open(ilk, usr);\r\n    }\r\n\r\n    function give(\r\n        address manager,\r\n        uint cdp,\r\n        address usr\r\n    ) public {\r\n        ManagerLike(manager).give(cdp, usr);\r\n    }\r\n\r\n    function giveToProxy(\r\n        address proxyRegistry,\r\n        address manager,\r\n        uint cdp,\r\n        address dst\r\n    ) public {\r\n        // Gets actual proxy address\r\n        address proxy = ProxyRegistryLike(proxyRegistry).proxies(dst);\r\n        // Checks if the proxy address already existed and dst address is still the owner\r\n        if (proxy == address(0) || ProxyLike(proxy).owner() != dst) {\r\n            uint csize;\r\n            assembly {\r\n                csize := extcodesize(dst)\r\n            }\r\n            // We want to avoid creating a proxy for a contract address that might not be able to handle proxies, then losing the CDP\r\n            require(csize == 0, \"Dst-is-a-contract\");\r\n            // Creates the proxy for the dst address\r\n            proxy = ProxyRegistryLike(proxyRegistry).build(dst);\r\n        }\r\n        // Transfers CDP to the dst proxy\r\n        give(manager, cdp, proxy);\r\n    }\r\n\r\n    function cdpAllow(\r\n        address manager,\r\n        uint cdp,\r\n        address usr,\r\n        uint ok\r\n    ) public {\r\n        ManagerLike(manager).cdpAllow(cdp, usr, ok);\r\n    }\r\n\r\n    function urnAllow(\r\n        address manager,\r\n        address usr,\r\n        uint ok\r\n    ) public {\r\n        ManagerLike(manager).urnAllow(usr, ok);\r\n    }\r\n\r\n    function flux(\r\n        address manager,\r\n        uint cdp,\r\n        address dst,\r\n        uint wad\r\n    ) public {\r\n        ManagerLike(manager).flux(cdp, dst, wad);\r\n    }\r\n\r\n    function move(\r\n        address manager,\r\n        uint cdp,\r\n        address dst,\r\n        uint rad\r\n    ) public {\r\n        ManagerLike(manager).move(cdp, dst, rad);\r\n    }\r\n\r\n    function frob(\r\n        address manager,\r\n        uint cdp,\r\n        int dink,\r\n        int dart\r\n    ) public {\r\n        ManagerLike(manager).frob(cdp, dink, dart);\r\n    }\r\n\r\n    function quit(\r\n        address manager,\r\n        uint cdp,\r\n        address dst\r\n    ) public {\r\n        ManagerLike(manager).quit(cdp, dst);\r\n    }\r\n\r\n    function enter(\r\n        address manager,\r\n        address src,\r\n        uint cdp\r\n    ) public {\r\n        ManagerLike(manager).enter(src, cdp);\r\n    }\r\n\r\n    function shift(\r\n        address manager,\r\n        uint cdpSrc,\r\n        uint cdpOrg\r\n    ) public {\r\n        ManagerLike(manager).shift(cdpSrc, cdpOrg);\r\n    }\r\n\r\n    function makeGemBag(\r\n        address gemJoin\r\n    ) public returns (address bag) {\r\n        bag = GNTJoinLike(gemJoin).make(address(this));\r\n    }\r\n\r\n    function lockETH(\r\n        address manager,\r\n        address ethJoin,\r\n        uint cdp\r\n    ) public payable {\r\n        // Receives ETH amount, converts it to WETH and joins it into the vat\r\n        ethJoin_join(ethJoin, address(this));\r\n        // Locks WETH amount into the CDP\r\n        VatLike(ManagerLike(manager).vat()).frob(\r\n            ManagerLike(manager).ilks(cdp),\r\n            ManagerLike(manager).urns(cdp),\r\n            address(this),\r\n            address(this),\r\n            toInt(msg.value),\r\n            0\r\n        );\r\n    }\r\n\r\n    function safeLockETH(\r\n        address manager,\r\n        address ethJoin,\r\n        uint cdp,\r\n        address owner\r\n    ) public payable {\r\n        require(ManagerLike(manager).owns(cdp) == owner, \"owner-missmatch\");\r\n        lockETH(manager, ethJoin, cdp);\r\n    }\r\n\r\n    function lockGem(\r\n        address manager,\r\n        address gemJoin,\r\n        uint cdp,\r\n        uint wad,\r\n        bool transferFrom\r\n    ) public {\r\n        // Takes token amount from user's wallet and joins into the vat\r\n        gemJoin_join(gemJoin, address(this), wad, transferFrom);\r\n        // Locks token amount into the CDP\r\n        VatLike(ManagerLike(manager).vat()).frob(\r\n            ManagerLike(manager).ilks(cdp),\r\n            ManagerLike(manager).urns(cdp),\r\n            address(this),\r\n            address(this),\r\n            toInt(convertTo18(gemJoin, wad)),\r\n            0\r\n        );\r\n    }\r\n\r\n    function safeLockGem(\r\n        address manager,\r\n        address gemJoin,\r\n        uint cdp,\r\n        uint wad,\r\n        bool transferFrom,\r\n        address owner\r\n    ) public {\r\n        require(ManagerLike(manager).owns(cdp) == owner, \"owner-missmatch\");\r\n        lockGem(manager, gemJoin, cdp, wad, transferFrom);\r\n    }\r\n\r\n    function freeETH(\r\n        address manager,\r\n        address ethJoin,\r\n        uint cdp,\r\n        uint wad\r\n    ) public {\r\n        // Unlocks WETH amount from the CDP\r\n        frob(manager, cdp, -toInt(wad), 0);\r\n        // Moves the amount from the CDP urn to proxy's address\r\n        flux(manager, cdp, address(this), wad);\r\n        // Exits WETH amount to proxy address as a token\r\n        GemJoinLike(ethJoin).exit(address(this), wad);\r\n        // Converts WETH to ETH\r\n        GemJoinLike(ethJoin).gem().withdraw(wad);\r\n        // Sends ETH back to the user's wallet\r\n        msg.sender.transfer(wad);\r\n    }\r\n\r\n    function freeGem(\r\n        address manager,\r\n        address gemJoin,\r\n        uint cdp,\r\n        uint wad\r\n    ) public {\r\n        uint wad18 = convertTo18(gemJoin, wad);\r\n        // Unlocks token amount from the CDP\r\n        frob(manager, cdp, -toInt(wad18), 0);\r\n        // Moves the amount from the CDP urn to proxy's address\r\n        flux(manager, cdp, address(this), wad18);\r\n        // Exits token amount to the user's wallet as a token\r\n        GemJoinLike(gemJoin).exit(msg.sender, wad);\r\n    }\r\n\r\n    function exitETH(\r\n        address manager,\r\n        address ethJoin,\r\n        uint cdp,\r\n        uint wad\r\n    ) public {\r\n        // Moves the amount from the CDP urn to proxy's address\r\n        flux(manager, cdp, address(this), wad);\r\n\r\n        // Exits WETH amount to proxy address as a token\r\n        GemJoinLike(ethJoin).exit(address(this), wad);\r\n        // Converts WETH to ETH\r\n        GemJoinLike(ethJoin).gem().withdraw(wad);\r\n        // Sends ETH back to the user's wallet\r\n        msg.sender.transfer(wad);\r\n    }\r\n\r\n    function exitGem(\r\n        address manager,\r\n        address gemJoin,\r\n        uint cdp,\r\n        uint wad\r\n    ) public {\r\n        // Moves the amount from the CDP urn to proxy's address\r\n        flux(manager, cdp, address(this), convertTo18(gemJoin, wad));\r\n\r\n        // Exits token amount to the user's wallet as a token\r\n        GemJoinLike(gemJoin).exit(msg.sender, wad);\r\n    }\r\n\r\n    function draw(\r\n        address manager,\r\n        address jug,\r\n        address daiJoin,\r\n        uint cdp,\r\n        uint wad\r\n    ) public {\r\n        address urn = ManagerLike(manager).urns(cdp);\r\n        address vat = ManagerLike(manager).vat();\r\n        bytes32 ilk = ManagerLike(manager).ilks(cdp);\r\n        // Generates debt in the CDP\r\n        frob(manager, cdp, 0, _getDrawDart(vat, jug, urn, ilk, wad));\r\n        // Moves the DAI amount (balance in the vat in rad) to proxy's address\r\n        move(manager, cdp, address(this), toRad(wad));\r\n        // Allows adapter to access to proxy's DAI balance in the vat\r\n        if (VatLike(vat).can(address(this), address(daiJoin)) == 0) {\r\n            VatLike(vat).hope(daiJoin);\r\n        }\r\n        // Exits DAI to the user's wallet as a token\r\n        DaiJoinLike(daiJoin).exit(msg.sender, wad);\r\n    }\r\n\r\n    function wipe(\r\n        address manager,\r\n        address daiJoin,\r\n        uint cdp,\r\n        uint wad\r\n    ) public {\r\n        address vat = ManagerLike(manager).vat();\r\n        address urn = ManagerLike(manager).urns(cdp);\r\n        bytes32 ilk = ManagerLike(manager).ilks(cdp);\r\n\r\n        address own = ManagerLike(manager).owns(cdp);\r\n        if (own == address(this) || ManagerLike(manager).cdpCan(own, cdp, address(this)) == 1) {\r\n            // Joins DAI amount into the vat\r\n            daiJoin_join(daiJoin, urn, wad);\r\n            // Paybacks debt to the CDP\r\n            frob(manager, cdp, 0, _getWipeDart(vat, VatLike(vat).dai(urn), urn, ilk));\r\n        } else {\r\n             // Joins DAI amount into the vat\r\n            daiJoin_join(daiJoin, address(this), wad);\r\n            // Paybacks debt to the CDP\r\n            VatLike(vat).frob(\r\n                ilk,\r\n                urn,\r\n                address(this),\r\n                address(this),\r\n                0,\r\n                _getWipeDart(vat, wad * RAY, urn, ilk)\r\n            );\r\n        }\r\n    }\r\n\r\n    function safeWipe(\r\n        address manager,\r\n        address daiJoin,\r\n        uint cdp,\r\n        uint wad,\r\n        address owner\r\n    ) public {\r\n        require(ManagerLike(manager).owns(cdp) == owner, \"owner-missmatch\");\r\n        wipe(manager, daiJoin, cdp, wad);\r\n    }\r\n\r\n    function wipeAll(\r\n        address manager,\r\n        address daiJoin,\r\n        uint cdp\r\n    ) public {\r\n        address vat = ManagerLike(manager).vat();\r\n        address urn = ManagerLike(manager).urns(cdp);\r\n        bytes32 ilk = ManagerLike(manager).ilks(cdp);\r\n        (, uint art) = VatLike(vat).urns(ilk, urn);\r\n\r\n        address own = ManagerLike(manager).owns(cdp);\r\n        if (own == address(this) || ManagerLike(manager).cdpCan(own, cdp, address(this)) == 1) {\r\n            // Joins DAI amount into the vat\r\n            daiJoin_join(daiJoin, urn, _getWipeAllWad(vat, urn, urn, ilk));\r\n            // Paybacks debt to the CDP\r\n            frob(manager, cdp, 0, -int(art));\r\n        } else {\r\n            // Joins DAI amount into the vat\r\n            daiJoin_join(daiJoin, address(this), _getWipeAllWad(vat, address(this), urn, ilk));\r\n            // Paybacks debt to the CDP\r\n            VatLike(vat).frob(\r\n                ilk,\r\n                urn,\r\n                address(this),\r\n                address(this),\r\n                0,\r\n                -int(art)\r\n            );\r\n        }\r\n    }\r\n\r\n    function safeWipeAll(\r\n        address manager,\r\n        address daiJoin,\r\n        uint cdp,\r\n        address owner\r\n    ) public {\r\n        require(ManagerLike(manager).owns(cdp) == owner, \"owner-missmatch\");\r\n        wipeAll(manager, daiJoin, cdp);\r\n    }\r\n\r\n    function lockETHAndDraw(\r\n        address manager,\r\n        address jug,\r\n        address ethJoin,\r\n        address daiJoin,\r\n        uint cdp,\r\n        uint wadD\r\n    ) public payable {\r\n        address urn = ManagerLike(manager).urns(cdp);\r\n        address vat = ManagerLike(manager).vat();\r\n        bytes32 ilk = ManagerLike(manager).ilks(cdp);\r\n        // Receives ETH amount, converts it to WETH and joins it into the vat\r\n        ethJoin_join(ethJoin, urn);\r\n        // Locks WETH amount into the CDP and generates debt\r\n        frob(manager, cdp, toInt(msg.value), _getDrawDart(vat, jug, urn, ilk, wadD));\r\n        // Moves the DAI amount (balance in the vat in rad) to proxy's address\r\n        move(manager, cdp, address(this), toRad(wadD));\r\n        // Allows adapter to access to proxy's DAI balance in the vat\r\n        if (VatLike(vat).can(address(this), address(daiJoin)) == 0) {\r\n            VatLike(vat).hope(daiJoin);\r\n        }\r\n        // Exits DAI to the user's wallet as a token\r\n        DaiJoinLike(daiJoin).exit(msg.sender, wadD);\r\n    }\r\n\r\n    function openLockETHAndDraw(\r\n        address manager,\r\n        address jug,\r\n        address ethJoin,\r\n        address daiJoin,\r\n        bytes32 ilk,\r\n        uint wadD\r\n    ) public payable returns (uint cdp) {\r\n        cdp = open(manager, ilk, address(this));\r\n        lockETHAndDraw(manager, jug, ethJoin, daiJoin, cdp, wadD);\r\n    }\r\n\r\n    function lockGemAndDraw(\r\n        address manager,\r\n        address jug,\r\n        address gemJoin,\r\n        address daiJoin,\r\n        uint cdp,\r\n        uint wadC,\r\n        uint wadD,\r\n        bool transferFrom\r\n    ) public {\r\n        address urn = ManagerLike(manager).urns(cdp);\r\n        address vat = ManagerLike(manager).vat();\r\n        bytes32 ilk = ManagerLike(manager).ilks(cdp);\r\n        // Takes token amount from user's wallet and joins into the vat\r\n        gemJoin_join(gemJoin, urn, wadC, transferFrom);\r\n        // Locks token amount into the CDP and generates debt\r\n        frob(manager, cdp, toInt(convertTo18(gemJoin, wadC)), _getDrawDart(vat, jug, urn, ilk, wadD));\r\n        // Moves the DAI amount (balance in the vat in rad) to proxy's address\r\n        move(manager, cdp, address(this), toRad(wadD));\r\n        // Allows adapter to access to proxy's DAI balance in the vat\r\n        if (VatLike(vat).can(address(this), address(daiJoin)) == 0) {\r\n            VatLike(vat).hope(daiJoin);\r\n        }\r\n        // Exits DAI to the user's wallet as a token\r\n        DaiJoinLike(daiJoin).exit(msg.sender, wadD);\r\n    }\r\n\r\n    function openLockGemAndDraw(\r\n        address manager,\r\n        address jug,\r\n        address gemJoin,\r\n        address daiJoin,\r\n        bytes32 ilk,\r\n        uint wadC,\r\n        uint wadD,\r\n        bool transferFrom\r\n    ) public returns (uint cdp) {\r\n        cdp = open(manager, ilk, address(this));\r\n        lockGemAndDraw(manager, jug, gemJoin, daiJoin, cdp, wadC, wadD, transferFrom);\r\n    }\r\n\r\n    function openLockGNTAndDraw(\r\n        address manager,\r\n        address jug,\r\n        address gntJoin,\r\n        address daiJoin,\r\n        bytes32 ilk,\r\n        uint wadC,\r\n        uint wadD\r\n    ) public returns (address bag, uint cdp) {\r\n        // Creates bag (if doesn't exist) to hold GNT\r\n        bag = GNTJoinLike(gntJoin).bags(address(this));\r\n        if (bag == address(0)) {\r\n            bag = makeGemBag(gntJoin);\r\n        }\r\n        // Transfer funds to the funds which previously were sent to the proxy\r\n        GemLike(GemJoinLike(gntJoin).gem()).transfer(bag, wadC);\r\n        cdp = openLockGemAndDraw(manager, jug, gntJoin, daiJoin, ilk, wadC, wadD, false);\r\n    }\r\n\r\n    function wipeAndFreeETH(\r\n        address manager,\r\n        address ethJoin,\r\n        address daiJoin,\r\n        uint cdp,\r\n        uint wadC,\r\n        uint wadD\r\n    ) public {\r\n        address urn = ManagerLike(manager).urns(cdp);\r\n        // Joins DAI amount into the vat\r\n        daiJoin_join(daiJoin, urn, wadD);\r\n        // Paybacks debt to the CDP and unlocks WETH amount from it\r\n        frob(\r\n            manager,\r\n            cdp,\r\n            -toInt(wadC),\r\n            _getWipeDart(ManagerLike(manager).vat(), VatLike(ManagerLike(manager).vat()).dai(urn), urn, ManagerLike(manager).ilks(cdp))\r\n        );\r\n        // Moves the amount from the CDP urn to proxy's address\r\n        flux(manager, cdp, address(this), wadC);\r\n        // Exits WETH amount to proxy address as a token\r\n        GemJoinLike(ethJoin).exit(address(this), wadC);\r\n        // Converts WETH to ETH\r\n        GemJoinLike(ethJoin).gem().withdraw(wadC);\r\n        // Sends ETH back to the user's wallet\r\n        msg.sender.transfer(wadC);\r\n    }\r\n\r\n    function wipeAllAndFreeETH(\r\n        address manager,\r\n        address ethJoin,\r\n        address daiJoin,\r\n        uint cdp,\r\n        uint wadC\r\n    ) public {\r\n        address vat = ManagerLike(manager).vat();\r\n        address urn = ManagerLike(manager).urns(cdp);\r\n        bytes32 ilk = ManagerLike(manager).ilks(cdp);\r\n        (, uint art) = VatLike(vat).urns(ilk, urn);\r\n\r\n        // Joins DAI amount into the vat\r\n        daiJoin_join(daiJoin, urn, _getWipeAllWad(vat, urn, urn, ilk));\r\n        // Paybacks debt to the CDP and unlocks WETH amount from it\r\n        frob(\r\n            manager,\r\n            cdp,\r\n            -toInt(wadC),\r\n            -int(art)\r\n        );\r\n        // Moves the amount from the CDP urn to proxy's address\r\n        flux(manager, cdp, address(this), wadC);\r\n        // Exits WETH amount to proxy address as a token\r\n        GemJoinLike(ethJoin).exit(address(this), wadC);\r\n        // Converts WETH to ETH\r\n        GemJoinLike(ethJoin).gem().withdraw(wadC);\r\n        // Sends ETH back to the user's wallet\r\n        msg.sender.transfer(wadC);\r\n    }\r\n\r\n    function wipeAndFreeGem(\r\n        address manager,\r\n        address gemJoin,\r\n        address daiJoin,\r\n        uint cdp,\r\n        uint wadC,\r\n        uint wadD\r\n    ) public {\r\n        address urn = ManagerLike(manager).urns(cdp);\r\n        // Joins DAI amount into the vat\r\n        daiJoin_join(daiJoin, urn, wadD);\r\n        uint wad18 = convertTo18(gemJoin, wadC);\r\n        // Paybacks debt to the CDP and unlocks token amount from it\r\n        frob(\r\n            manager,\r\n            cdp,\r\n            -toInt(wad18),\r\n            _getWipeDart(ManagerLike(manager).vat(), VatLike(ManagerLike(manager).vat()).dai(urn), urn, ManagerLike(manager).ilks(cdp))\r\n        );\r\n        // Moves the amount from the CDP urn to proxy's address\r\n        flux(manager, cdp, address(this), wad18);\r\n        // Exits token amount to the user's wallet as a token\r\n        GemJoinLike(gemJoin).exit(msg.sender, wadC);\r\n    }\r\n\r\n    function wipeAllAndFreeGem(\r\n        address manager,\r\n        address gemJoin,\r\n        address daiJoin,\r\n        uint cdp,\r\n        uint wadC\r\n    ) public {\r\n        address vat = ManagerLike(manager).vat();\r\n        address urn = ManagerLike(manager).urns(cdp);\r\n        bytes32 ilk = ManagerLike(manager).ilks(cdp);\r\n        (, uint art) = VatLike(vat).urns(ilk, urn);\r\n\r\n        // Joins DAI amount into the vat\r\n        daiJoin_join(daiJoin, urn, _getWipeAllWad(vat, urn, urn, ilk));\r\n        uint wad18 = convertTo18(gemJoin, wadC);\r\n        // Paybacks debt to the CDP and unlocks token amount from it\r\n        frob(\r\n            manager,\r\n            cdp,\r\n            -toInt(wad18),\r\n            -int(art)\r\n        );\r\n        // Moves the amount from the CDP urn to proxy's address\r\n        flux(manager, cdp, address(this), wad18);\r\n        // Exits token amount to the user's wallet as a token\r\n        GemJoinLike(gemJoin).exit(msg.sender, wadC);\r\n    }\r\n}\r\n\r\ncontract DssProxyActionsEnd is Common {\r\n    // Internal functions\r\n\r\n    function _free(\r\n        address manager,\r\n        address end,\r\n        uint cdp\r\n    ) internal returns (uint ink) {\r\n        bytes32 ilk = ManagerLike(manager).ilks(cdp);\r\n        address urn = ManagerLike(manager).urns(cdp);\r\n        VatLike vat = VatLike(ManagerLike(manager).vat());\r\n        uint art;\r\n        (ink, art) = vat.urns(ilk, urn);\r\n\r\n        // If CDP still has debt, it needs to be paid\r\n        if (art > 0) {\r\n            EndLike(end).skim(ilk, urn);\r\n            (ink,) = vat.urns(ilk, urn);\r\n        }\r\n        // Approves the manager to transfer the position to proxy's address in the vat\r\n        if (vat.can(address(this), address(manager)) == 0) {\r\n            vat.hope(manager);\r\n        }\r\n        // Transfers position from CDP to the proxy address\r\n        ManagerLike(manager).quit(cdp, address(this));\r\n        // Frees the position and recovers the collateral in the vat registry\r\n        EndLike(end).free(ilk);\r\n    }\r\n\r\n    // Public functions\r\n    function freeETH(\r\n        address manager,\r\n        address ethJoin,\r\n        address end,\r\n        uint cdp\r\n    ) public {\r\n        uint wad = _free(manager, end, cdp);\r\n        // Exits WETH amount to proxy address as a token\r\n        GemJoinLike(ethJoin).exit(address(this), wad);\r\n        // Converts WETH to ETH\r\n        GemJoinLike(ethJoin).gem().withdraw(wad);\r\n        // Sends ETH back to the user's wallet\r\n        msg.sender.transfer(wad);\r\n    }\r\n\r\n    function freeGem(\r\n        address manager,\r\n        address gemJoin,\r\n        address end,\r\n        uint cdp\r\n    ) public {\r\n        uint wad = _free(manager, end, cdp);\r\n        // Exits token amount to the user's wallet as a token\r\n        GemJoinLike(gemJoin).exit(msg.sender, wad);\r\n    }\r\n\r\n    function pack(\r\n        address daiJoin,\r\n        address end,\r\n        uint wad\r\n    ) public {\r\n        daiJoin_join(daiJoin, address(this), wad);\r\n        VatLike vat = DaiJoinLike(daiJoin).vat();\r\n        // Approves the end to take out DAI from the proxy's balance in the vat\r\n        if (vat.can(address(this), address(end)) == 0) {\r\n            vat.hope(end);\r\n        }\r\n        EndLike(end).pack(wad);\r\n    }\r\n\r\n    function cashETH(\r\n        address ethJoin,\r\n        address end,\r\n        bytes32 ilk,\r\n        uint wad\r\n    ) public {\r\n        EndLike(end).cash(ilk, wad);\r\n        uint wadC = mul(wad, EndLike(end).fix(ilk)) / RAY;\r\n        // Exits WETH amount to proxy address as a token\r\n        GemJoinLike(ethJoin).exit(address(this), wadC);\r\n        // Converts WETH to ETH\r\n        GemJoinLike(ethJoin).gem().withdraw(wadC);\r\n        // Sends ETH back to the user's wallet\r\n        msg.sender.transfer(wadC);\r\n    }\r\n\r\n    function cashGem(\r\n        address gemJoin,\r\n        address end,\r\n        bytes32 ilk,\r\n        uint wad\r\n    ) public {\r\n        EndLike(end).cash(ilk, wad);\r\n        // Exits token amount to the user's wallet as a token\r\n        GemJoinLike(gemJoin).exit(msg.sender, mul(wad, EndLike(end).fix(ilk)) / RAY);\r\n    }\r\n}\r\n\r\ncontract DssProxyActionsDsr is Common {\r\n    function join(\r\n        address daiJoin,\r\n        address pot,\r\n        uint wad\r\n    ) public {\r\n        VatLike vat = DaiJoinLike(daiJoin).vat();\r\n        // Executes drip to get the chi rate updated to rho == now, otherwise join will fail\r\n        uint chi = PotLike(pot).drip();\r\n        // Joins wad amount to the vat balance\r\n        daiJoin_join(daiJoin, address(this), wad);\r\n        // Approves the pot to take out DAI from the proxy's balance in the vat\r\n        if (vat.can(address(this), address(pot)) == 0) {\r\n            vat.hope(pot);\r\n        }\r\n        // Joins the pie value (equivalent to the DAI wad amount) in the pot\r\n        PotLike(pot).join(mul(wad, RAY) / chi);\r\n    }\r\n\r\n    function exit(\r\n        address daiJoin,\r\n        address pot,\r\n        uint wad\r\n    ) public {\r\n        VatLike vat = DaiJoinLike(daiJoin).vat();\r\n        // Executes drip to count the savings accumulated until this moment\r\n        uint chi = PotLike(pot).drip();\r\n        // Calculates the pie value in the pot equivalent to the DAI wad amount\r\n        uint pie = mul(wad, RAY) / chi;\r\n        // Exits DAI from the pot\r\n        PotLike(pot).exit(pie);\r\n        // Checks the actual balance of DAI in the vat after the pot exit\r\n        uint bal = DaiJoinLike(daiJoin).vat().dai(address(this));\r\n        // Allows adapter to access to proxy's DAI balance in the vat\r\n        if (vat.can(address(this), address(daiJoin)) == 0) {\r\n            vat.hope(daiJoin);\r\n        }\r\n        // It is necessary to check if due rounding the exact wad amount can be exited by the adapter.\r\n        // Otherwise it will do the maximum DAI balance in the vat\r\n        DaiJoinLike(daiJoin).exit(\r\n            msg.sender,\r\n            bal >= mul(wad, RAY) ? wad : bal / RAY\r\n        );\r\n    }\r\n\r\n    function exitAll(\r\n        address daiJoin,\r\n        address pot\r\n    ) public {\r\n        VatLike vat = DaiJoinLike(daiJoin).vat();\r\n        // Executes drip to count the savings accumulated until this moment\r\n        uint chi = PotLike(pot).drip();\r\n        // Gets the total pie belonging to the proxy address\r\n        uint pie = PotLike(pot).pie(address(this));\r\n        // Exits DAI from the pot\r\n        PotLike(pot).exit(pie);\r\n        // Allows adapter to access to proxy's DAI balance in the vat\r\n        if (vat.can(address(this), address(daiJoin)) == 0) {\r\n            vat.hope(daiJoin);\r\n        }\r\n        // Exits the DAI amount corresponding to the value of pie\r\n        DaiJoinLike(daiJoin).exit(msg.sender, mul(chi, pie) / RAY);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"apt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"urn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"daiJoin_join\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"daiJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pot\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"daiJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pot\",\"type\":\"address\"}],\"name\":\"exitAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"daiJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pot\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"join\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DssProxyActionsDsr","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://8daa8c5490010fc092c27522739e2580fad4632b46242cae43aa034a54436b83"}]}