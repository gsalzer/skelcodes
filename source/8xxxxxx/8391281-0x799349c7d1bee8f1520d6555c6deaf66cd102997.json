{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n\r\ninterface IERC20 {\r\n\tfunction totalSupply() external view returns (uint256);\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\tfunction allowance(address owner, address spender) external view returns (uint256);\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a, \"SafeMath: addition overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\trequire(b <= a, \"SafeMath: subtraction overflow\");\r\n\t\tuint256 c = a - b;\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tuint256 c = a * b;\r\n\t\trequire(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\trequire(b > 0, \"SafeMath: division by zero\");\r\n\t\tuint256 c = a / b;\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\trequire(b != 0, \"SafeMath: modulo by zero\");\r\n\t\treturn a % b;\r\n\t}\r\n}\r\n\r\ncontract ERC20 is IERC20 {\r\n\tusing SafeMath for uint256;\r\n\r\n\tmapping (address => uint256) private _balances;\r\n\tmapping (address => mapping (address => uint256)) private _allowances;\r\n\tuint256 private _totalSupply;\r\n\r\n\tfunction totalSupply() public view returns (uint256) {\r\n\t\treturn _totalSupply;\r\n\t}\r\n\r\n\tfunction balanceOf(address account) public view returns (uint256) {\r\n\t\treturn _balances[account];\r\n\t}\r\n\r\n\tfunction transfer(address recipient, uint256 amount) public returns (bool) {\r\n\t\t_transfer(msg.sender, recipient, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction allowance(address owner, address spender) public view returns (uint256) {\r\n\t\treturn _allowances[owner][spender];\r\n\t}\r\n\r\n\tfunction approve(address spender, uint256 value) public returns (bool) {\r\n\t\t_approve(msg.sender, spender, value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n\t\t_transfer(sender, recipient, amount);\r\n\t\t_approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n\t\t_approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n\t\t_approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction _transfer(address sender, address recipient, uint256 amount) internal {\r\n\t\trequire(sender != address(0), \"ERC20: transfer from the zero address\");\r\n\t\trequire(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n\t\t_balances[sender] = _balances[sender].sub(amount);\r\n\t\t_balances[recipient] = _balances[recipient].add(amount);\r\n\t\temit Transfer(sender, recipient, amount);\r\n\t}\r\n\r\n\tfunction _mint(address account, uint256 amount) internal {\r\n\t\trequire(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n\t\t_totalSupply = _totalSupply.add(amount);\r\n\t\t_balances[account] = _balances[account].add(amount);\r\n\t\temit Transfer(address(0), account, amount);\r\n\t}\r\n\r\n\tfunction _burn(address account, uint256 value) internal {\r\n\t\trequire(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n\t\t_totalSupply = _totalSupply.sub(value);\r\n\t\t_balances[account] = _balances[account].sub(value);\r\n\t\temit Transfer(account, address(0), value);\r\n\t}\r\n\r\n\tfunction _approve(address owner, address spender, uint256 value) internal {\r\n\t\trequire(owner != address(0), \"ERC20: approve from the zero address\");\r\n\t\trequire(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n\t\t_allowances[owner][spender] = value;\r\n\t\temit Approval(owner, spender, value);\r\n\t}\r\n\r\n\tfunction _burnFrom(address account, uint256 amount) internal {\r\n\t\t_burn(account, amount);\r\n\t\t_approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\r\n\t}\r\n}\r\n\r\ncontract ERC20Detailed is IERC20 {\r\n\tstring private _name;\r\n\tstring private _symbol;\r\n\tuint8 private _decimals;\r\n\r\n\tconstructor (string memory name, string memory symbol, uint8 decimals) public {\r\n\t\t_name = name;\r\n\t\t_symbol = symbol;\r\n\t\t_decimals = decimals;\r\n\t}\r\n\r\n\tfunction name() public view returns (string memory) {\r\n\t\treturn _name;\r\n\t}\r\n\r\n\tfunction symbol() public view returns (string memory) {\r\n\t\treturn _symbol;\r\n\t}\r\n\r\n\tfunction decimals() public view returns (uint8) {\r\n\t\treturn _decimals;\r\n\t}\r\n}\r\n\r\ncontract ERC20Burnable is ERC20 {\r\n\tfunction burn(uint256 amount) public {\r\n\t\t_burn(msg.sender, amount);\r\n\t}\r\n\r\n\tfunction burnFrom(address account, uint256 amount) public {\r\n\t\t_burnFrom(account, amount);\r\n\t}\r\n}\r\n\r\ncontract Ownable {\r\n\taddress private _owner;\r\n\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\tconstructor() internal {\r\n\t\t_owner = msg.sender;\r\n\t\temit OwnershipTransferred(address(0), _owner);\r\n\t}\r\n\r\n\tmodifier onlyOwner() {\r\n\t\trequire(msg.sender == _owner, \"Ownable: caller is not the owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction owner() public view returns (address) {\r\n\t\treturn _owner;\r\n\t}\r\n\r\n\tfunction renounceOwnership() public onlyOwner {\r\n\t\temit OwnershipTransferred(_owner, address(0));\r\n\t\t_owner = address(0);\r\n\t}\r\n\r\n\tfunction transferOwnership(address newOwner) public onlyOwner {\r\n\t\t_transferOwnership(newOwner);\r\n\t}\r\n\r\n\tfunction _transferOwnership(address newOwner) internal {\r\n\t\trequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\t\temit OwnershipTransferred(_owner, newOwner);\r\n\t\t_owner = newOwner;\r\n\t}\r\n}\r\n\r\ncontract Lockable is Ownable {\r\n\tuint256 constant INFINITY = 300000000000;\r\n\t\r\n\tbool private _tokenLocked;\r\n\tmapping(address => uint256) private _accountLocked;\r\n\r\n\tevent TokenLocked();\r\n\tevent TokenUnlocked();\r\n\tevent AccountLocked(address account, uint256 time);\r\n\tevent AccountUnlocked(address account, uint256 time);\r\n\r\n\tconstructor() internal {\r\n\t\t_tokenLocked = false;\r\n\t}\r\n\r\n\tmodifier whenUnlocked(address originator, address from, address to) {\r\n\t\trequire(!_tokenLocked, 'Lockable: Token is locked.');\r\n\t\trequire(!isAccountLocked(originator), 'Lockable: Account is locked.');\r\n\r\n\t\tif (originator != from) {\r\n\t\t\trequire(!isAccountLocked(from), 'Lockable: Account is locked.');\r\n\t\t}\r\n\r\n\t\trequire(!isAccountLocked(to), 'Lockable: Account is locked.');\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction isAccountLocked(address account) internal view returns (bool) {\r\n\t\tif (_accountLocked[account] >= block.timestamp) {\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getTokenLockState() public onlyOwner view returns (bool) {\r\n\t\treturn _tokenLocked;\r\n\t}\r\n\r\n\tfunction getAccountLockState(address account) public onlyOwner view returns (uint256) {\r\n\t\treturn _accountLocked[account];\r\n\t}\r\n\r\n\tfunction getAccountLockState() public view returns (uint256) {\r\n\t\treturn _accountLocked[msg.sender];\r\n\t}\r\n\r\n\tfunction lockToken() public onlyOwner {\r\n\t\t_tokenLocked = true;\r\n\t\temit TokenLocked();\r\n\t}\r\n\r\n\tfunction unlockToken() public onlyOwner {\r\n\t\t_tokenLocked = false; \r\n\t\temit TokenUnlocked();\r\n\t}\r\n\r\n\tfunction lockAccount(address account) public onlyOwner {\r\n\t\t_lockAccount(account, INFINITY);\r\n\t}\r\n\r\n\tfunction lockAccount(address account, uint256 time) public onlyOwner {\r\n\t\t_lockAccount(account, time);\r\n\t}\r\n\r\n\tfunction _lockAccount(address account, uint256 time) private onlyOwner {\r\n\t\t_accountLocked[account] = time;\r\n\t\temit AccountLocked(account, time);\r\n\t}\r\n\r\n\tfunction unlockAccount(address account) public onlyOwner {\r\n\t\tif (_accountLocked[account] != 0) {\r\n\t\t\tuint256 lockedTimestamp = _accountLocked[account];\r\n\t\t\tdelete _accountLocked[account];\r\n\t\t\temit AccountUnlocked(account, lockedTimestamp);\r\n\t\t}\r\n\t}\r\n}\r\n\r\ncontract ERC20Lockable is ERC20, Lockable {\r\n\tfunction transfer(address to, uint256 value) public whenUnlocked(msg.sender, msg.sender, to) returns (bool) {\r\n\t\treturn super.transfer(to, value);\r\n\t}\r\n\r\n\tfunction transferFrom(address from, address to, uint256 value) public whenUnlocked(msg.sender, from, to) returns (bool) {\r\n\t\treturn super.transferFrom(from, to, value);\r\n\t}\r\n\r\n\tfunction approve(address spender, uint256 value) public whenUnlocked(msg.sender, msg.sender, spender) returns (bool) {\r\n\t\treturn super.approve(spender, value);\r\n\t}\r\n\r\n\tfunction increaseAllowance(address spender, uint addedValue) public whenUnlocked(msg.sender, msg.sender, spender) returns (bool) {\r\n\t\treturn super.increaseAllowance(spender, addedValue);\r\n\t}\r\n\r\n\tfunction decreaseAllowance(address spender, uint subtractedValue) public whenUnlocked(msg.sender, msg.sender, spender) returns (bool) {\r\n\t\treturn super.decreaseAllowance(spender, subtractedValue);\r\n\t}\r\n}\r\n\r\ncontract MediumToken is ERC20, ERC20Detailed, ERC20Burnable, ERC20Lockable {\r\n\tuint256 private _INITIAL_SUPPLY = 1000000000e18;\r\n\tstring private _TOKEN_NAME = \"Medium Token\";\r\n\tstring private _TOKEN_SYMBOL = \"MDM\";\r\n\tuint8 _DECIMALS = 18;\r\n\r\n\tconstructor(address initialWallet) ERC20Detailed(_TOKEN_NAME, _TOKEN_SYMBOL, _DECIMALS) public {\r\n\t\t_mint(initialWallet, _INITIAL_SUPPLY);\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"lockAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unlockAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenLockState\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAccountLockState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lockAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountLockState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialWallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TokenLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TokenUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"AccountLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"AccountUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"MediumToken","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000f009a1147a4f6b7bac1417b8cc1d54161678ca3f","Library":"","SwarmSource":"bzzr://a42d581754070f28be75cb2675504d933cf1095dcf7d29f76ccdd7328afa209d"}]}