{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.6.0;\r\n\r\ncontract BWSERC20\r\n{\r\n    string public standard = 'https://leeks.cc';\r\n    string public name=\"Bretton Woods system\"; //代币名称\r\n    string public symbol=\"BWS\"; //代币符号\r\n    uint8 public decimals = 18;  //代币单位，展示的小数点后面多少个0,和以太币一样后面是是18个0\r\n    uint256 public totalSupply=100000000 ether; //代币总量\r\n    \r\n    address st_owner;\r\n    address st_owner1;\r\n\r\n    uint256 public st_bws_pool;//币仓\r\n    uint256 public st_ready_for_listing;//准备上市　\r\n    bool st_unlock_owner=false;\r\n    bool st_unlock_owner1=false;\r\n    address st_unlock_to;\r\n    address st_unlock_to1;\r\n    \r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    mapping (address => uint32) public CredibleContract;//可信任的智能合约，主要是后期的游戏之类的\r\n    /* 在区块链上创建一个事件，用以通知客户端*/\r\n    event Transfer(address indexed from, address indexed to, uint256 value);  //转帐通知事件\r\n    event Burn(address indexed from, uint256 value);  //减去用户余额事件\r\n    \r\n    \r\n    constructor (address owner1)public\r\n    {\r\n        st_owner=msg.sender;\r\n        st_owner1=owner1;\r\n        \r\n        st_bws_pool = 70000000 ether;\r\n        st_ready_for_listing = 14000000 ether;\r\n        \r\n        balanceOf[st_owner]=8000000 ether;\r\n        balanceOf[st_owner1]=8000000 ether;\r\n    }\r\n    \r\n    function _transfer(address _from, address _to, uint256 _value) internal {\r\n\r\n      //避免转帐的地址是0x0\r\n      require(_to != address(0x0));\r\n      //检查发送者是否拥有足够余额\r\n      require(balanceOf[_from] >= _value);\r\n      //检查是否溢出\r\n      require(balanceOf[_to] + _value > balanceOf[_to]);\r\n      //保存数据用于后面的判断\r\n      uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n      //从发送者减掉发送额\r\n      balanceOf[_from] -= _value;\r\n      //给接收者加上相同的量\r\n      balanceOf[_to] += _value;\r\n      //通知任何监听该交易的客户端\r\n      emit Transfer(_from, _to, _value);\r\n      //判断买、卖双方的数据是否和转换前一致\r\n      assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success){\r\n        //检查发送者是否拥有足够余额\r\n        require(_value <= allowance[_from][msg.sender]);   // Check allowance\r\n\r\n        allowance[_from][msg.sender] -= _value;\r\n\r\n        _transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n    \r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        \r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n    \r\n    //管理员可以解锁1400万币到指定地址\r\n    function unlock_listing(address _to) public\r\n    {\r\n        require(_to != address(0x0),\"参数中传入了空地址\");\r\n        //解锁1400万，需要两个管理员同时解锁才行\r\n        if(msg.sender==st_owner)\r\n        {\r\n            st_unlock_owner=true;\r\n            st_unlock_to=_to;\r\n        }\r\n        else if(msg.sender==st_owner1)\r\n        {\r\n            st_unlock_owner1=true;\r\n            st_unlock_to1=_to;\r\n        }\r\n        \r\n        if(st_unlock_owner =true && st_unlock_owner1==true && st_unlock_to !=address(0x0) && st_unlock_to==st_unlock_to1)\r\n        {\r\n            //满足了解锁条件\r\n            if(st_ready_for_listing==14000000 ether)\r\n                {\r\n                    st_ready_for_listing=0;\r\n                    balanceOf[_to]+=14000000 ether;\r\n                }\r\n            \r\n        }\r\n    }\r\n    //管理员指定可信的合约地址，这些地址可以进行一些敏感操作，比如从币仓取走股币发放给指定玩家\r\n    function set_CredibleContract(address tract_address) public\r\n    {\r\n        require(tract_address != address(0x0),\"参数中传入了空地址\");\r\n        //需要两个管理员同时设置才行\r\n        if(msg.sender==st_owner)\r\n        {\r\n            if(CredibleContract[tract_address]==0)CredibleContract[tract_address]=2;\r\n            else if(CredibleContract[tract_address]==3)CredibleContract[tract_address]=1;\r\n        }\r\n        if(msg.sender==st_owner1 )\r\n        {\r\n            if(CredibleContract[tract_address]==0)CredibleContract[tract_address]=3;\r\n            else if(CredibleContract[tract_address]==2)CredibleContract[tract_address]=1;\r\n        }\r\n    }\r\n    \r\n    //从币仓取出指定量的bws给指定玩家\r\n    function TransferFromPool(address _to ,uint256 _value)public\r\n    {\r\n        require(CredibleContract[msg.sender]==1,\"非法的调用\");\r\n        require(_value<=st_bws_pool,\"要取出的股币数量太多\");\r\n        \r\n        st_bws_pool-=_value;\r\n        balanceOf[_to] +=_value;\r\n        emit Transfer(address(this), _to, _value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"unlock_listing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"st_ready_for_listing\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"CredibleContract\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"st_bws_pool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tract_address\",\"type\":\"address\"}],\"name\":\"set_CredibleContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TransferFromPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"owner1\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"BWSERC20","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000007d0e7baebb4010c839f3e0f36373e7941792adea","Library":"","SwarmSource":"bzzr://f52395b3afa61e25575a3ef0c8b07f07f90c61fcf412b3efc4581674aba87dba"}]}