{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.8;\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/file_verification_v2.sol\r\n\r\ncontract Verification is Ownable {\r\n    // Struct for each certificate\r\n    struct Certificate {\r\n        uint256 time;\r\n        bytes32 pdfHash;\r\n        bytes32 originHash;\r\n    }\r\n\r\n    // mapping that stores all the versions of a certificate, indexed by the hash of the first pdf\r\n    mapping(bytes32 => bytes32[]) public versions;\r\n\r\n    // events\r\n    event CertificateCreated(bytes32 indexed _pdfHash, bytes32 indexed _originHash, address indexed _sender, uint256 _time);\r\n    event CertificateUpdated(bytes32 indexed _pdfHash, bytes32 indexed _originHash, address indexed _sender, uint256 _time);\r\n\r\n    // Create a certificate\r\n    function createCert(bytes32 _pdfHash) public onlyOwner returns (bool) {\r\n        require(_pdfHash != bytes32(0));\r\n\r\n        // Making sure that we don't push the same hash multiple times\r\n        require(versions[_pdfHash].length == 0);\r\n\r\n        versions[_pdfHash].push(_pdfHash);\r\n        emit CertificateCreated(_pdfHash, _pdfHash, msg.sender, block.timestamp);\r\n        return true;\r\n    }\r\n\r\n    // Update the Certificate\r\n    function updateCert(bytes32 _pdfHash, bytes32 _newPdfHash) public onlyOwner returns (bool) {\r\n        require(_pdfHash != bytes32(0));\r\n        require(_newPdfHash != bytes32(0));\r\n        require(versions[_pdfHash].length != 0);\r\n        versions[_pdfHash].push(_newPdfHash);\r\n        emit CertificateUpdated(_newPdfHash, _pdfHash, msg.sender, block.timestamp);\r\n        return true;\r\n    }\r\n\r\n    // View the record by `originHash`\r\n    function viewRecord(bytes32 _originHash) public view returns (bytes32[] memory copy) {\r\n        require(_originHash != bytes32(0));\r\n        copy = versions[_originHash];\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pdfHash\",\"type\":\"bytes32\"},{\"name\":\"_newPdfHash\",\"type\":\"bytes32\"}],\"name\":\"updateCert\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versions\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pdfHash\",\"type\":\"bytes32\"}],\"name\":\"createCert\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_originHash\",\"type\":\"bytes32\"}],\"name\":\"viewRecord\",\"outputs\":[{\"name\":\"copy\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_pdfHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_originHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"CertificateCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_pdfHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_originHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"CertificateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Verification","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://6ecca7d451732cf8d8f316615d0c940c6db72c52851312303f081fe4eee92a6b"}]}