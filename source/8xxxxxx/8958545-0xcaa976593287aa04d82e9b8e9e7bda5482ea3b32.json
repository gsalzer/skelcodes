{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.8;\r\n\r\ninterface TubInterface {\r\n    function open() external returns (bytes32);\r\n    function join(uint) external;\r\n    function exit(uint) external;\r\n    function lock(bytes32, uint) external;\r\n    function free(bytes32, uint) external;\r\n    function draw(bytes32, uint) external;\r\n    function wipe(bytes32, uint) external;\r\n    function give(bytes32, address) external;\r\n    function shut(bytes32) external;\r\n    function cups(bytes32) external view returns (address, uint, uint, uint);\r\n    function gem() external view returns (TokenInterface);\r\n    function gov() external view returns (TokenInterface);\r\n    function skr() external view returns (TokenInterface);\r\n    function sai() external view returns (TokenInterface);\r\n    function ink(bytes32) external view returns (uint);\r\n    function tab(bytes32) external returns (uint);\r\n    function rap(bytes32) external returns (uint);\r\n    function per() external view returns (uint);\r\n    function pep() external view returns (PepInterface);\r\n}\r\n\r\ninterface TokenInterface {\r\n    function allowance(address, address) external view returns (uint);\r\n    function balanceOf(address) external view returns (uint);\r\n    function approve(address, uint) external;\r\n    function transfer(address, uint) external returns (bool);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n    function deposit() external payable;\r\n    function withdraw(uint) external;\r\n}\r\n\r\ninterface CTokenInterface {\r\n    function mint(uint mintAmount) external returns (uint);\r\n    function redeem(uint redeemTokens) external returns (uint);\r\n    function borrow(uint borrowAmount) external returns (uint);\r\n    function borrowBalanceCurrent(address account) external returns (uint);\r\n    function repayBorrow(uint repayAmount) external returns (uint);\r\n    function totalReserves() external view returns (uint);\r\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\r\n    function underlying() external view returns (address);\r\n    function exchangeRateCurrent() external returns (uint);\r\n\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function allowance(address, address) external view returns (uint);\r\n    function approve(address, uint) external;\r\n    function transfer(address, uint) external returns (bool);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n}\r\n\r\ninterface PepInterface {\r\n    function peek() external returns (bytes32, bool);\r\n}\r\n\r\ninterface UniswapExchange {\r\n    function getEthToTokenOutputPrice(uint256 tokensBought) external view returns (uint256 ethSold);\r\n    function getTokenToEthOutputPrice(uint256 ethBought) external view returns (uint256 tokensSold);\r\n    function tokenToTokenSwapOutput(\r\n        uint256 tokensBought,\r\n        uint256 maxTokensSold,\r\n        uint256 maxEthSold,\r\n        uint256 deadline,\r\n        address tokenAddr\r\n    ) external returns (uint256  tokensSold);\r\n    function ethToTokenSwapOutput(uint256 tokensBought, uint256 deadline) external payable returns (uint256  ethSold);\r\n}\r\n\r\ninterface UniswapFactoryInterface {\r\n    function getExchange(address token) external view returns (address exchange);\r\n}\r\n\r\ninterface MCDInterface {\r\n    function swapDaiToSai(uint wad) external;\r\n    function migrate(bytes32 cup) external returns (uint cdp);\r\n}\r\n\r\ninterface PoolInterface {\r\n    function accessToken(address[] calldata ctknAddr, uint[] calldata tknAmt, bool isCompound) external;\r\n    function paybackToken(address[] calldata ctknAddr, bool isCompound) external payable;\r\n}\r\n\r\ninterface OtcInterface {\r\n    function getPayAmount(address, address, uint) external view returns (uint);\r\n    function buyAllAmount(\r\n        address,\r\n        uint,\r\n        address,\r\n        uint\r\n    ) external;\r\n}\r\n\r\ninterface ManagerLike {\r\n    function cdpCan(address, uint, address) external view returns (uint);\r\n    function ilks(uint) external view returns (bytes32);\r\n    function owns(uint) external view returns (address);\r\n    function urns(uint) external view returns (address);\r\n    function vat() external view returns (address);\r\n    function open(bytes32, address) external returns (uint);\r\n    function give(uint, address) external;\r\n    function cdpAllow(uint, address, uint) external;\r\n    function urnAllow(address, uint) external;\r\n    function frob(uint, int, int) external;\r\n    function flux(uint, address, uint) external;\r\n    function move(uint, address, uint) external;\r\n    function exit(\r\n        address,\r\n        uint,\r\n        address,\r\n        uint\r\n    ) external;\r\n    function quit(uint, address) external;\r\n    function enter(address, uint) external;\r\n    function shift(uint, uint) external;\r\n}\r\n\r\ninterface GemLike {\r\n    function approve(address, uint) external;\r\n    function transfer(address, uint) external;\r\n    function transferFrom(address, address, uint) external;\r\n    function deposit() external payable;\r\n    function withdraw(uint) external;\r\n}\r\n\r\ninterface JugLike {\r\n    function drip(bytes32) external returns (uint);\r\n}\r\n\r\ninterface VatLike {\r\n    function can(address, address) external view returns (uint);\r\n    function ilks(bytes32) external view returns (uint, uint, uint, uint, uint);\r\n    function dai(address) external view returns (uint);\r\n    function urns(bytes32, address) external view returns (uint, uint);\r\n    function frob(\r\n        bytes32,\r\n        address,\r\n        address,\r\n        address,\r\n        int,\r\n        int\r\n    ) external;\r\n    function hope(address) external;\r\n    function move(address, address, uint) external;\r\n}\r\n\r\ninterface GemJoinLike {\r\n    function dec() external returns (uint);\r\n    function gem() external returns (GemLike);\r\n    function join(address, uint) external payable;\r\n    function exit(address, uint) external;\r\n}\r\n\r\ninterface GNTJoinLike {\r\n    function bags(address) external view returns (address);\r\n    function make(address) external returns (address);\r\n}\r\n\r\ninterface DaiJoinLike {\r\n    function vat() external returns (VatLike);\r\n    function dai() external returns (GemLike);\r\n    function join(address, uint) external payable;\r\n    function exit(address, uint) external;\r\n}\r\n\r\n/** Swap Functionality */\r\ninterface ScdMcdMigration {\r\n    function swapDaiToSai(uint daiAmt) external;\r\n    function swapSaiToDai(uint saiAmt) external;\r\n}\r\n\r\ninterface InstaMcdAddress {\r\n    function manager() external returns (address);\r\n    function dai() external returns (address);\r\n    function daiJoin() external returns (address);\r\n    function vat() external returns (address);\r\n    function jug() external returns (address);\r\n    function cat() external returns (address);\r\n    function gov() external returns (address);\r\n    function adm() external returns (address);\r\n    function vow() external returns (address);\r\n    function spot() external returns (address);\r\n    function pot() external returns (address);\r\n    function esm() external returns (address);\r\n    function mcdFlap() external returns (address);\r\n    function mcdFlop() external returns (address);\r\n    function mcdDeploy() external returns (address);\r\n    function mcdEnd() external returns (address);\r\n    function proxyActions() external returns (address);\r\n    function proxyActionsEnd() external returns (address);\r\n    function proxyActionsDsr() external returns (address);\r\n    function getCdps() external returns (address);\r\n    function saiTub() external returns (address);\r\n    function weth() external returns (address);\r\n    function bat() external returns (address);\r\n    function sai() external returns (address);\r\n    function ethAJoin() external returns (address);\r\n    function ethAFlip() external returns (address);\r\n    function batAJoin() external returns (address);\r\n    function batAFlip() external returns (address);\r\n    function ethPip() external returns (address);\r\n    function batAPip() external returns (address);\r\n    function saiJoin() external returns (address);\r\n    function saiFlip() external returns (address);\r\n    function saiPip() external returns (address);\r\n    function migration() external returns (address payable);\r\n}\r\n\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        z = x - y <= x ? x - y : 0;\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n    function toInt(uint x) internal pure returns (int y) {\r\n        y = int(x);\r\n        require(y >= 0, \"int-overflow\");\r\n    }\r\n\r\n    function toRad(uint wad) internal pure returns (uint rad) {\r\n        rad = mul(wad, 10 ** 27);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Helpers is DSMath {\r\n\r\n    /**\r\n     * @dev get cSAI Address\r\n     */\r\n    function getCSaiAddress() public pure returns (address csaiAddr) {\r\n        csaiAddr = 0xF5DCe57282A584D2746FaF1593d3121Fcac444dC;\r\n    }\r\n\r\n    /**\r\n     * @dev get MakerDAO MCD Address contract\r\n     */\r\n    function getMcdAddresses() public pure returns (address mcd) {\r\n        mcd = 0xF23196DF1C440345DE07feFbe556a5eF0dcD29F0;\r\n    }\r\n\r\n    /**\r\n     * @dev get cETH Address\r\n     */\r\n    function getCEthAddress() public pure returns (address cEthAddr) {\r\n        cEthAddr = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\r\n    }\r\n\r\n    /**\r\n     * @dev get MakerDAO SCD CDP engine\r\n     */\r\n    function getSaiTubAddress() public pure returns (address sai) {\r\n        sai = 0x448a5065aeBB8E423F0896E6c5D525C040f59af3;\r\n    }\r\n\r\n    /**\r\n     * @dev get Sai (Dai v1) address\r\n     */\r\n    function getSaiAddress() public pure returns (address sai) {\r\n        sai = 0x448a5065aeBB8E423F0896E6c5D525C040f59af3;\r\n    }\r\n\r\n    /**\r\n     * @dev get Dai (Dai v2) address\r\n     */\r\n    function getDaiAddress() public pure returns (address dai) {\r\n        dai = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n    }\r\n\r\n    /**\r\n     * @dev get InstaDApp Liquidity Address\r\n     */\r\n    function getPoolAddress() public pure returns (address payable liqAddr) {\r\n        liqAddr = 0x1564D040EC290C743F67F5cB11f3C1958B39872A;\r\n    }\r\n\r\n    /**\r\n     * @dev setting allowance if required\r\n     */\r\n    function setApproval(address erc20, uint srcAmt, address to) internal {\r\n        TokenInterface erc20Contract = TokenInterface(erc20);\r\n        uint tokenAllowance = erc20Contract.allowance(address(this), to);\r\n        if (srcAmt > tokenAllowance) {\r\n            erc20Contract.approve(to, uint(-1));\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract LiquidityResolver is Helpers {\r\n    //Had to write seprate for pool, remix was showing error.\r\n    function getLiquidity(uint _wad, bool isComp) internal {\r\n        uint[] memory _wadArr = new uint[](1);\r\n        _wadArr[0] = _wad;\r\n\r\n        address[] memory addrArr = new address[](1);\r\n        addrArr[0] = getSaiAddress();\r\n\r\n        // Get liquidity assets to payback user wallet borrowed assets\r\n        PoolInterface(getPoolAddress()).accessToken(addrArr, _wadArr, isComp);\r\n    }\r\n\r\n    function paybackLiquidity(uint _wad, bool isComp) internal {\r\n        address[] memory addrArr = new address[](1);\r\n        addrArr[0] = getSaiAddress();\r\n\r\n        // transfer and payback dai to InstaDApp pool.\r\n        require(TokenInterface(getSaiAddress()).transfer(getPoolAddress(), _wad), \"Not-enough-dai\");\r\n        PoolInterface(getPoolAddress()).paybackToken(addrArr, isComp);\r\n    }\r\n}\r\n\r\n\r\ncontract CompoundResolver is LiquidityResolver {\r\n    /**\r\n     * @dev Redeem ETH/ERC20 and mint Compound Tokens\r\n     * @param tokenAmt Amount of token To Redeem\r\n     */\r\n    function redeemCEthUnderlying(uint tokenAmt) internal {\r\n        address cErc20 = getCEthAddress();\r\n        CTokenInterface cToken = CTokenInterface(cErc20);\r\n        setApproval(cErc20, tokenAmt, cErc20);\r\n        require(cToken.redeemUnderlying(tokenAmt) == 0, \"something went wrong\");\r\n    }\r\n\r\n    /**\r\n     * @dev Pay Debt ETH/ERC20\r\n     */\r\n    function repaySaiToken(uint tokenAmt) internal {\r\n        CTokenInterface cToken = CTokenInterface(getCSaiAddress());\r\n        address erc20 = cToken.underlying();\r\n        setApproval(erc20, tokenAmt, getCSaiAddress());\r\n        require(cToken.repayBorrow(tokenAmt) == 0, \"transfer approved?\");\r\n    }\r\n\r\n    /**\r\n     * @dev Check if entered amt is valid or not (Used in makerToCompound)\r\n     */\r\n    function checkCompound(uint ethAmt, uint daiAmt) internal returns (uint ethCol, uint daiDebt) {\r\n        CTokenInterface cEthContract = CTokenInterface(getCEthAddress());\r\n        uint cEthBal = cEthContract.balanceOf(address(this));\r\n        uint ethExchangeRate = cEthContract.exchangeRateCurrent();\r\n        ethCol = wmul(cEthBal, ethExchangeRate);\r\n        ethCol = wdiv(ethCol, ethExchangeRate) <= cEthBal ? ethCol : ethCol - 10000000000;\r\n        ethCol = ethCol <= ethAmt ? ethCol : ethAmt; // Set Max if amount is greater than the Col user have\r\n\r\n        daiDebt = CTokenInterface(getCSaiAddress()).borrowBalanceCurrent(address(this));\r\n        daiDebt = daiDebt <= daiAmt ? daiDebt : daiAmt; // Set Max if amount is greater than the Debt user have\r\n    }\r\n}\r\n\r\n\r\ncontract McdResolver is CompoundResolver {\r\n    function open() internal returns (uint cdp) {\r\n        address manager = InstaMcdAddress(getMcdAddresses()).manager();\r\n        bytes32 ilk = 0x4554482d41000000000000000000000000000000000000000000000000000000;\r\n        cdp = ManagerLike(manager).open(ilk, address(this));\r\n    }\r\n\r\n    function lockETH(\r\n        uint cdp,\r\n        uint amt\r\n    ) internal\r\n    {\r\n        address manager = InstaMcdAddress(getMcdAddresses()).manager();\r\n        address ethJoin = InstaMcdAddress(getMcdAddresses()).ethAJoin();\r\n        GemJoinLike(ethJoin).gem().deposit.value(amt)();\r\n        GemJoinLike(ethJoin).gem().approve(address(ethJoin), amt);\r\n        GemJoinLike(ethJoin).join(address(this), amt);\r\n\r\n        // Locks WETH amount into the CDP\r\n        VatLike(ManagerLike(manager).vat()).frob(\r\n            ManagerLike(manager).ilks(cdp),\r\n            ManagerLike(manager).urns(cdp),\r\n            address(this),\r\n            address(this),\r\n            int(amt),\r\n            0\r\n        );\r\n    }\r\n\r\n    function draw(\r\n        uint cdp,\r\n        uint wad\r\n    ) internal\r\n    {\r\n        address manager = InstaMcdAddress(getMcdAddresses()).manager();\r\n        address jug = InstaMcdAddress(getMcdAddresses()).jug();\r\n        address daiJoin = InstaMcdAddress(getMcdAddresses()).daiJoin();\r\n\r\n        address urn = ManagerLike(manager).urns(cdp);\r\n        address vat = ManagerLike(manager).vat();\r\n        bytes32 ilk = ManagerLike(manager).ilks(cdp);\r\n        // Updates stability fee rate before generating new debt\r\n        JugLike(jug).drip(ilk);\r\n\r\n        int dart;\r\n        // Gets actual rate from the vat\r\n        (, uint rate,,,) = VatLike(vat).ilks(ilk);\r\n        // Gets DAI balance of the urn in the vat\r\n        uint dai = VatLike(vat).dai(urn);\r\n\r\n        // If there was already enough DAI in the vat balance, just exits it without adding more debt\r\n        if (dai < mul(wad, RAY)) {\r\n            // Calculates the needed dart so together with the existing dai in the vat is enough to exit wad amount of DAI tokens\r\n            dart = int(sub(mul(wad, RAY), dai) / rate);\r\n            // This is neeeded due lack of precision. It might need to sum an extra dart wei (for the given DAI wad amount)\r\n            dart = mul(uint(dart), rate) < mul(wad, RAY) ? dart + 1 : dart;\r\n        }\r\n\r\n        ManagerLike(manager).frob(cdp, 0, dart);\r\n        // Moves the DAI amount (balance in the vat in rad) to proxy's address\r\n        ManagerLike(manager).move(cdp, address(this), toRad(wad));\r\n        // Allows adapter to access to proxy's DAI balance in the vat\r\n        if (VatLike(vat).can(address(this), address(daiJoin)) == 0) {\r\n            VatLike(vat).hope(daiJoin);\r\n        }\r\n        DaiJoinLike(daiJoin).exit(address(this), wad);\r\n    }\r\n}\r\n\r\n\r\ncontract CompMcdResolver is McdResolver {\r\n    function swapDaiToSai(\r\n        uint wad                            // Amount to swap\r\n    ) internal\r\n    {\r\n        address payable scdMcdMigration = InstaMcdAddress(getMcdAddresses()).migration();\r\n        TokenInterface dai = TokenInterface(getDaiAddress());\r\n        if (dai.allowance(address(this), scdMcdMigration) < wad) {\r\n            dai.approve(scdMcdMigration, wad);\r\n        }\r\n        ScdMcdMigration(scdMcdMigration).swapDaiToSai(wad);\r\n    }\r\n\r\n    function paybackAndRedeem(uint ethAmt, uint saiAmt, bool isCompound) internal {\r\n        getLiquidity(saiAmt, isCompound);\r\n        repaySaiToken(saiAmt);\r\n        redeemCEthUnderlying(ethAmt);\r\n    }\r\n\r\n    function lockDrawSwapMcd(\r\n        uint cdpId,\r\n        uint ethAmt,\r\n        uint saiAmt,\r\n        bool isCompound\r\n    ) internal\r\n    {\r\n        lockETH(cdpId,ethAmt);\r\n        draw(cdpId, saiAmt);\r\n        swapDaiToSai(saiAmt);\r\n        paybackLiquidity(saiAmt, isCompound);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract BridgeResolver is CompMcdResolver {\r\n    event LogCompMcdMigrate(uint vaultId, uint eth, uint debt, bool isCompound);\r\n\r\n    function compoundToMcdMigrate(\r\n        uint cdpId,\r\n        uint ethQty,\r\n        uint saiQty,\r\n        bool isCompound\r\n    ) external\r\n    {\r\n        // subtracting 0.00000001 ETH from initialPoolBal to solve Compound 8 decimal CETH error.\r\n        uint initialPoolBal = sub(getPoolAddress().balance, 10000000000);\r\n\r\n        uint cdpNum = cdpId > 0 ? cdpId : open();\r\n        (uint ethCol, uint saiDebt) = checkCompound(ethQty, saiQty);\r\n        paybackAndRedeem(ethCol, saiDebt, isCompound); // Getting Liquidity inside Wipe function\r\n        ethCol = ethCol < address(this).balance ? ethCol : address(this).balance;\r\n        lockDrawSwapMcd(\r\n            cdpNum,\r\n            ethCol,\r\n            saiDebt,\r\n            isCompound\r\n        ); // Returning Liquidity inside Borrow function\r\n\r\n        uint finalPoolBal = getPoolAddress().balance;\r\n        assert(finalPoolBal >= initialPoolBal);\r\n\r\n        emit LogCompMcdMigrate(\r\n            cdpNum,\r\n            ethCol,\r\n            saiDebt,\r\n            isCompound\r\n        );\r\n    }\r\n}\r\n\r\n\r\ncontract InstaCompMcdMigrate is BridgeResolver {\r\n    function() external payable {}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"cdpId\",\"type\":\"uint256\"},{\"name\":\"ethQty\",\"type\":\"uint256\"},{\"name\":\"saiQty\",\"type\":\"uint256\"},{\"name\":\"isCompound\",\"type\":\"bool\"}],\"name\":\"compoundToMcdMigrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDaiAddress\",\"outputs\":[{\"name\":\"dai\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSaiAddress\",\"outputs\":[{\"name\":\"sai\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCSaiAddress\",\"outputs\":[{\"name\":\"csaiAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMcdAddresses\",\"outputs\":[{\"name\":\"mcd\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCEthAddress\",\"outputs\":[{\"name\":\"cEthAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSaiTubAddress\",\"outputs\":[{\"name\":\"sai\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPoolAddress\",\"outputs\":[{\"name\":\"liqAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"debt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isCompound\",\"type\":\"bool\"}],\"name\":\"LogCompMcdMigrate\",\"type\":\"event\"}]","ContractName":"InstaCompMcdMigrate","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://5745a466171ad8b2708cd9e71a4c5be073410fa1da84f5f08b8862e4ac03cdae"}]}