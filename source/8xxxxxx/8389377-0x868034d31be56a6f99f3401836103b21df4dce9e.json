{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Registry is Ownable {\r\n    struct Entry {\r\n        bytes32 project;\r\n        address proxyAddress;\r\n    }\r\n\r\n    Entry[] entries;\r\n\r\n    event NewEntry(bytes32 indexed _project, address indexed _proxyAddress);\r\n    event DeleteEntry(bytes32 indexed _project, address indexed _proxyAddress);\r\n    event UpdateEntry(bytes32 indexed _project, address indexed _proxyAddress);\r\n\r\n    function addEntry(bytes32 _project, address _proxyAddress) external onlyOwner {\r\n        require(_proxyAddress != address(0));\r\n\r\n        entries.push(Entry({\r\n            project: _project,\r\n            proxyAddress: _proxyAddress\r\n        }));\r\n\r\n        emit NewEntry(_project, _proxyAddress);\r\n    }\r\n\r\n    function deleteEntry(uint256 index) external onlyOwner {\r\n        require(index < entries.length);\r\n\r\n        emit DeleteEntry(entries[index].project, entries[index].proxyAddress);\r\n        entries[index] = entries[entries.length - 1];\r\n        entries.length--;\r\n    }\r\n\r\n    function updateEntryProject(uint256 index, bytes32 _project) external onlyOwner {\r\n        require(index < entries.length);\r\n\r\n        entries[index].project = _project;\r\n        emit UpdateEntry(_project, entries[index].proxyAddress);\r\n    }\r\n\r\n    function updateEntryAddress(uint256 index, address _proxyAddress) external onlyOwner {\r\n        require(index < entries.length);\r\n\r\n        entries[index].proxyAddress = _proxyAddress;\r\n        emit UpdateEntry(entries[index].project, _proxyAddress);\r\n    }\r\n\r\n    function getNumEntries() external view returns(uint256) {\r\n        return entries.length;\r\n    }\r\n\r\n    function getEntries() external view returns(Entry[] memory) {\r\n        return entries;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"_proxyAddress\",\"type\":\"address\"}],\"name\":\"updateEntryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumEntries\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_project\",\"type\":\"bytes32\"},{\"name\":\"_proxyAddress\",\"type\":\"address\"}],\"name\":\"addEntry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"deleteEntry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEntries\",\"outputs\":[{\"components\":[{\"name\":\"project\",\"type\":\"bytes32\"},{\"name\":\"proxyAddress\",\"type\":\"address\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"_project\",\"type\":\"bytes32\"}],\"name\":\"updateEntryProject\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_project\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_proxyAddress\",\"type\":\"address\"}],\"name\":\"NewEntry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_project\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_proxyAddress\",\"type\":\"address\"}],\"name\":\"DeleteEntry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_project\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_proxyAddress\",\"type\":\"address\"}],\"name\":\"UpdateEntry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Registry","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"5000000","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5eb0fd4b5a8890ee0c9ff188e29cb7299417a6b3f7e55917d0cc60b2a375959c"}]}