{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/saga-genesis/interfaces/IMintManager.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n/**\r\n * @title Mint Manager Interface.\r\n */\r\ninterface IMintManager {\r\n    /**\r\n     * @dev Return the current minting-point index.\r\n     */\r\n    function getIndex() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/saga-genesis/interfaces/ISGNTokenManager.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n/**\r\n * @title SGN Token Manager Interface.\r\n */\r\ninterface ISGNTokenManager {\r\n    /**\r\n     * @dev Get the current SGA worth of a given SGN amount.\r\n     * @param _sgnAmount The amount of SGN to convert.\r\n     * @return The equivalent amount of SGA.\r\n     */\r\n    function convertSgnToSga(uint256 _sgnAmount) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Exchange SGN for SGA.\r\n     * @param _sender The address of the sender.\r\n     * @param _sgnAmount The amount of SGN received.\r\n     * @return The amount of SGA that the sender is entitled to.\r\n     */\r\n    function exchangeSgnForSga(address _sender, uint256 _sgnAmount) external returns (uint256);\r\n\r\n    /**\r\n     * @dev Handle direct SGN transfer.\r\n     * @param _sender The address of the sender.\r\n     * @param _to The address of the destination account.\r\n     * @param _value The amount of SGN to be transferred.\r\n     */\r\n    function uponTransfer(address _sender, address _to, uint256 _value) external;\r\n\r\n    /**\r\n     * @dev Handle custodian SGN transfer.\r\n     * @param _sender The address of the sender.\r\n     * @param _from The address of the source account.\r\n     * @param _to The address of the destination account.\r\n     * @param _value The amount of SGN to be transferred.\r\n     */\r\n    function uponTransferFrom(address _sender, address _from, address _to, uint256 _value) external;\r\n\r\n    /** \r\n     * @dev Upon minting of SGN vested in delay.\r\n     * @param _value The amount of SGN to mint.\r\n     */\r\n    function uponMintSgnVestedInDelay(uint256 _value) external;\r\n}\r\n\r\n// File: contracts/saga-genesis/interfaces/ISGNConversionManager.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n/**\r\n * @title SGN Conversion Manager Interface.\r\n */\r\ninterface ISGNConversionManager {\r\n    /**\r\n     * @dev Compute the SGA worth of a given SGN amount at a given minting-point.\r\n     * @param _amount The amount of SGN.\r\n     * @param _index The minting-point index.\r\n     * @return The equivalent amount of SGA.\r\n     */\r\n    function sgn2sga(uint256 _amount, uint256 _index) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/saga-genesis/interfaces/ISGNAuthorizationManager.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n/**\r\n * @title SGN Authorization Manager Interface.\r\n */\r\ninterface ISGNAuthorizationManager {\r\n    /**\r\n     * @dev Determine whether or not a user is authorized to sell SGN.\r\n     * @param _sender The address of the user.\r\n     * @return Authorization status.\r\n     */\r\n    function isAuthorizedToSell(address _sender) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Determine whether or not a user is authorized to transfer SGN to another user.\r\n     * @param _sender The address of the source user.\r\n     * @param _target The address of the target user.\r\n     * @return Authorization status.\r\n     */\r\n    function isAuthorizedToTransfer(address _sender, address _target) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Determine whether or not a user is authorized to transfer SGN from one user to another user.\r\n     * @param _sender The address of the custodian user.\r\n     * @param _source The address of the source user.\r\n     * @param _target The address of the target user.\r\n     * @return Authorization status.\r\n     */\r\n    function isAuthorizedToTransferFrom(address _sender, address _source, address _target) external view returns (bool);\r\n}\r\n\r\n// File: contracts/wallet_trading_limiter/interfaces/IWalletsTradingLimiter.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n/**\r\n * @title Wallets Trading Limiter Interface.\r\n */\r\ninterface IWalletsTradingLimiter {\r\n    /**\r\n     * @dev Increment the limiter value of a wallet.\r\n     * @param _wallet The address of the wallet.\r\n     * @param _value The amount to be updated.\r\n     */\r\n    function updateWallet(address _wallet, uint256 _value) external;\r\n}\r\n\r\n// File: contracts/contract_address_locator/interfaces/IContractAddressLocator.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n/**\r\n * @title Contract Address Locator Interface.\r\n */\r\ninterface IContractAddressLocator {\r\n    /**\r\n     * @dev Get the contract address mapped to a given identifier.\r\n     * @param _identifier The identifier.\r\n     * @return The contract address.\r\n     */\r\n    function getContractAddress(bytes32 _identifier) external view returns (address);\r\n\r\n    /**\r\n     * @dev Determine whether or not a contract address is relates to one of the given identifiers.\r\n     * @param _contractAddress The contract address to look for.\r\n     * @param _identifiers The identifiers.\r\n     * @return Is the contract address relates to one of the identifiers.\r\n     */\r\n    function isContractAddressRelates(address _contractAddress, bytes32[] _identifiers) external view returns (bool);\r\n}\r\n\r\n// File: contracts/contract_address_locator/ContractAddressLocatorHolder.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n\r\n/**\r\n * @title Contract Address Locator Holder.\r\n * @dev Hold a contract address locator, which maps a unique identifier to every contract address in the system.\r\n * @dev Any contract which inherits from this contract can retrieve the address of any contract in the system.\r\n * @dev Thus, any contract can remain \"oblivious\" to the replacement of any other contract in the system.\r\n * @dev In addition to that, any function in any contract can be restricted to a specific caller.\r\n */\r\ncontract ContractAddressLocatorHolder {\r\n    bytes32 internal constant _IAuthorizationDataSource_ = \"IAuthorizationDataSource\";\r\n    bytes32 internal constant _ISGNConversionManager_    = \"ISGNConversionManager\"      ;\r\n    bytes32 internal constant _IModelDataSource_         = \"IModelDataSource\"        ;\r\n    bytes32 internal constant _IPaymentHandler_          = \"IPaymentHandler\"            ;\r\n    bytes32 internal constant _IPaymentManager_          = \"IPaymentManager\"            ;\r\n    bytes32 internal constant _IPaymentQueue_            = \"IPaymentQueue\"              ;\r\n    bytes32 internal constant _IReconciliationAdjuster_  = \"IReconciliationAdjuster\"      ;\r\n    bytes32 internal constant _IIntervalIterator_        = \"IIntervalIterator\"       ;\r\n    bytes32 internal constant _IMintHandler_             = \"IMintHandler\"            ;\r\n    bytes32 internal constant _IMintListener_            = \"IMintListener\"           ;\r\n    bytes32 internal constant _IMintManager_             = \"IMintManager\"            ;\r\n    bytes32 internal constant _IPriceBandCalculator_     = \"IPriceBandCalculator\"       ;\r\n    bytes32 internal constant _IModelCalculator_         = \"IModelCalculator\"        ;\r\n    bytes32 internal constant _IRedButton_               = \"IRedButton\"              ;\r\n    bytes32 internal constant _IReserveManager_          = \"IReserveManager\"         ;\r\n    bytes32 internal constant _ISagaExchanger_           = \"ISagaExchanger\"          ;\r\n    bytes32 internal constant _IMonetaryModel_               = \"IMonetaryModel\"              ;\r\n    bytes32 internal constant _IMonetaryModelState_          = \"IMonetaryModelState\"         ;\r\n    bytes32 internal constant _ISGAAuthorizationManager_ = \"ISGAAuthorizationManager\";\r\n    bytes32 internal constant _ISGAToken_                = \"ISGAToken\"               ;\r\n    bytes32 internal constant _ISGATokenManager_         = \"ISGATokenManager\"        ;\r\n    bytes32 internal constant _ISGNAuthorizationManager_ = \"ISGNAuthorizationManager\";\r\n    bytes32 internal constant _ISGNToken_                = \"ISGNToken\"               ;\r\n    bytes32 internal constant _ISGNTokenManager_         = \"ISGNTokenManager\"        ;\r\n    bytes32 internal constant _IMintingPointTimersManager_             = \"IMintingPointTimersManager\"            ;\r\n    bytes32 internal constant _ITradingClasses_          = \"ITradingClasses\"         ;\r\n    bytes32 internal constant _IWalletsTradingLimiterValueConverter_        = \"IWalletsTLValueConverter\"       ;\r\n    bytes32 internal constant _IWalletsTradingDataSource_       = \"IWalletsTradingDataSource\"      ;\r\n    bytes32 internal constant _WalletsTradingLimiter_SGNTokenManager_          = \"WalletsTLSGNTokenManager\"         ;\r\n    bytes32 internal constant _WalletsTradingLimiter_SGATokenManager_          = \"WalletsTLSGATokenManager\"         ;\r\n    bytes32 internal constant _IETHConverter_             = \"IETHConverter\"   ;\r\n    bytes32 internal constant _ITransactionLimiter_      = \"ITransactionLimiter\"     ;\r\n    bytes32 internal constant _ITransactionManager_      = \"ITransactionManager\"     ;\r\n    bytes32 internal constant _IRateApprover_      = \"IRateApprover\"     ;\r\n\r\n    IContractAddressLocator private contractAddressLocator;\r\n\r\n    /**\r\n     * @dev Create the contract.\r\n     * @param _contractAddressLocator The contract address locator.\r\n     */\r\n    constructor(IContractAddressLocator _contractAddressLocator) internal {\r\n        require(_contractAddressLocator != address(0), \"locator is illegal\");\r\n        contractAddressLocator = _contractAddressLocator;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the contract address locator.\r\n     * @return The contract address locator.\r\n     */\r\n    function getContractAddressLocator() external view returns (IContractAddressLocator) {\r\n        return contractAddressLocator;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the contract address mapped to a given identifier.\r\n     * @param _identifier The identifier.\r\n     * @return The contract address.\r\n     */\r\n    function getContractAddress(bytes32 _identifier) internal view returns (address) {\r\n        return contractAddressLocator.getContractAddress(_identifier);\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @dev Determine whether or not the sender is relates to one of the identifiers.\r\n     * @param _identifiers The identifiers.\r\n     * @return Is the sender relates to one of the identifiers.\r\n     */\r\n    function isSenderAddressRelates(bytes32[] _identifiers) internal view returns (bool) {\r\n        return contractAddressLocator.isContractAddressRelates(msg.sender, _identifiers);\r\n    }\r\n\r\n    /**\r\n     * @dev Verify that the caller is mapped to a given identifier.\r\n     * @param _identifier The identifier.\r\n     */\r\n    modifier only(bytes32 _identifier) {\r\n        require(msg.sender == getContractAddress(_identifier), \"caller is illegal\");\r\n        _;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/saga-genesis/SGNTokenManager.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Details of usage of licenced software see here: https://www.saga.org/software/readme_v1\r\n */\r\n\r\n/**\r\n * @title SGN Token Manager.\r\n */\r\ncontract SGNTokenManager is ISGNTokenManager, ContractAddressLocatorHolder {\r\n    string public constant VERSION = \"1.0.0\";\r\n\r\n    event ExchangeSgnForSgaCompleted(address indexed _user, uint256 _input, uint256 _output);\r\n    event MintSgnVestedInDelayCompleted(uint256 _value);\r\n\r\n    /**\r\n     * @dev Create the contract.\r\n     * @param _contractAddressLocator The contract address locator.\r\n     */\r\n    constructor(IContractAddressLocator _contractAddressLocator) ContractAddressLocatorHolder(_contractAddressLocator) public {}\r\n\r\n    /**\r\n     * @dev Return the contract which implements the ISGNAuthorizationManager interface.\r\n     */\r\n    function getSGNAuthorizationManager() public view returns (ISGNAuthorizationManager) {\r\n        return ISGNAuthorizationManager(getContractAddress(_ISGNAuthorizationManager_));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the contract which implements the ISGNConversionManager interface.\r\n     */\r\n    function getSGNConversionManager() public view returns (ISGNConversionManager) {\r\n        return ISGNConversionManager(getContractAddress(_ISGNConversionManager_));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the contract which implements the IMintManager interface.\r\n     */\r\n    function getMintManager() public view returns (IMintManager) {\r\n        return IMintManager(getContractAddress(_IMintManager_));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the contract which implements the IWalletsTradingLimiter interface.\r\n     */\r\n    function getWalletsTradingLimiter() public view returns (IWalletsTradingLimiter) {\r\n        return IWalletsTradingLimiter(getContractAddress(_WalletsTradingLimiter_SGNTokenManager_));\r\n    }\r\n\r\n    /**\r\n     * @dev Get the current SGA worth of a given SGN amount.\r\n     * @param _sgnAmount The amount of SGN to convert.\r\n     * @return The equivalent amount of SGA.\r\n     */\r\n    function convertSgnToSga(uint256 _sgnAmount) external view returns (uint256) {\r\n        return convertSgnToSgaFunc(_sgnAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Exchange SGN for SGA.\r\n     * @param _sender The address of the sender.\r\n     * @param _sgnAmount The amount of SGN received.\r\n     * @return The amount of SGA that the sender is entitled to.\r\n     */\r\n    function exchangeSgnForSga(address _sender, uint256 _sgnAmount) external only(_ISGNToken_) returns (uint256) {\r\n        require(getSGNAuthorizationManager().isAuthorizedToSell(_sender), \"exchanging SGN for SGA is not authorized\");\r\n        uint256 sgaAmount = convertSgnToSgaFunc(_sgnAmount);\r\n        require(sgaAmount > 0, \"returned amount is zero\");\r\n        emit ExchangeSgnForSgaCompleted(_sender, _sgnAmount, sgaAmount);\r\n        return sgaAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Handle direct SGN transfer.\r\n     * @param _sender The address of the sender.\r\n     * @param _to The address of the destination account.\r\n     * @param _value The amount of SGN to be transferred.\r\n     */\r\n    function uponTransfer(address _sender, address _to, uint256 _value) external only(_ISGNToken_) {\r\n        require(getSGNAuthorizationManager().isAuthorizedToTransfer(_sender, _to), \"direct-transfer of SGN is not authorized\");\r\n        getWalletsTradingLimiter().updateWallet(_to, _value);\r\n        _value;\r\n    }\r\n\r\n    /**\r\n     * @dev Handle custodian SGN transfer.\r\n     * @param _sender The address of the sender.\r\n     * @param _from The address of the source account.\r\n     * @param _to The address of the destination account.\r\n     * @param _value The amount of SGN to be transferred.\r\n     */\r\n    function uponTransferFrom(address _sender, address _from, address _to, uint256 _value) external only(_ISGNToken_) {\r\n        require(getSGNAuthorizationManager().isAuthorizedToTransferFrom(_sender, _from, _to), \"custodian-transfer of SGN is not authorized\");\r\n        getWalletsTradingLimiter().updateWallet(_to, _value);\r\n        _value;\r\n    }\r\n\r\n    /** \r\n     * @dev Upon minting of SGN vested in delay.\r\n     * @param _value The amount of SGN to mint.\r\n     */\r\n    function uponMintSgnVestedInDelay(uint256 _value) external only(_ISGNToken_) {\r\n        emit MintSgnVestedInDelayCompleted(_value);\r\n    }\r\n\r\n    /**\r\n     * @dev  Get the amount of SGA received upon conversion of a given SGN amount.\r\n     * @param _sgnAmount the amount of SGN to convert.\r\n     * @return The amount of SGA received upon conversion .\r\n     */\r\n    function convertSgnToSgaFunc(uint256 _sgnAmount) private view returns (uint256) {\r\n        return getSGNConversionManager().sgn2sga(_sgnAmount, getMintManager().getIndex());\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getSGNConversionManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSGNAuthorizationManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMintManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sgnAmount\",\"type\":\"uint256\"}],\"name\":\"convertSgnToSga\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"uponTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractAddressLocator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_sgnAmount\",\"type\":\"uint256\"}],\"name\":\"exchangeSgnForSga\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWalletsTradingLimiter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"uponTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"uponMintSgnVestedInDelay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_contractAddressLocator\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_input\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_output\",\"type\":\"uint256\"}],\"name\":\"ExchangeSgnForSgaCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"MintSgnVestedInDelayCompleted\",\"type\":\"event\"}]","ContractName":"SGNTokenManager","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"6000","ConstructorArguments":"000000000000000000000000aabcd54faf94925adbe0df117c62961acecbacdb","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://834b0ebfa8065d39d15494fc97f297e0ecb895088056365d433abf1b628ce294"}]}