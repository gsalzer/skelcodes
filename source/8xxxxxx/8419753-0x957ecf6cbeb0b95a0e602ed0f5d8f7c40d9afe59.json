{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.10;\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n/**\r\n * @title Blockmmerce ICO\r\n * @dev   Blockmmerce ICO accepting contributions only within a time frame.\r\n */\r\ncontract BlockmmerceICO is ERC20Interface, Owned {\r\n  using SafeMath for uint256;\r\n  string  public symbol; \r\n  string  public name;\r\n  uint8   public decimals;\r\n  uint256 public fundsRaised;\r\n  address payable public wallet;\r\n  bool    internal Open;\r\n  \r\n  mapping(address => uint) balances;\r\n  mapping(address => mapping(address => uint)) allowed;\r\n  mapping(address => uint) public pendingInvestments;\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    modifier onlyWhileOpen {\r\n        require(Open);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n  \r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    constructor (address payable _wallet) public {\r\n        symbol = \"BLM\";\r\n        name = \"Blockmmerce\";\r\n        decimals = 18;\r\n        owner = _wallet;\r\n        wallet = _wallet;\r\n        Open = true;\r\n        balances[address(this)] = totalSupply();\r\n        emit Transfer(address(0), address(this), totalSupply());\r\n    }\r\n    \r\n    function () external payable onlyWhileOpen {\r\n        // buyTokens(msg.sender);\r\n        fundsRecord(msg.sender, msg.value);\r\n    }\r\n    \r\n    function fundsRecord(address _beneficiary, uint _weiAmount) internal {\r\n        pendingInvestments[_beneficiary] += _weiAmount; //saves record of new investments\r\n    }\r\n    \r\n    function approvedByAdmin(address _beneficiary, uint256 _weiAmount) external onlyOwner{\r\n        require(pendingInvestments[_beneficiary] >= _weiAmount && pendingInvestments[_beneficiary] != 0);\r\n        buyTokens(_beneficiary, _weiAmount);\r\n    }\r\n    \r\n    function buyTokens(address _beneficiary, uint256 _weiAmount) internal{\r\n        // uint256 _weiAmount = pendingInvestments[_beneficiary];\r\n        \r\n        _preValidatePurchase(_beneficiary, _weiAmount);\r\n        \r\n        uint256 _tokens = _getTokenAmount(_weiAmount);\r\n        \r\n        fundsRaised = fundsRaised.add(_weiAmount);\r\n\r\n        _processPurchase(_beneficiary, _tokens);\r\n        \r\n        emit TokenPurchase(address(this), _beneficiary, _weiAmount, _tokens);\r\n        \r\n        _forwardFunds(wallet, _weiAmount);\r\n        \r\n        pendingInvestments[_beneficiary] = pendingInvestments[_beneficiary].sub(_weiAmount); //remove the processed investments from record\r\n    }\r\n    \r\n    function rejectedByAdmin(address payable _beneficiary, uint256 _weiAmount) external onlyOwner{\r\n        //return the investments\r\n        // uint amount = pendingInvestments[_beneficiary];\r\n        require(pendingInvestments[_beneficiary] >= _weiAmount && pendingInvestments[_beneficiary] != 0);\r\n        _forwardFunds(_beneficiary,_weiAmount);\r\n        \r\n        // remove investment record\r\n        pendingInvestments[_beneficiary] = pendingInvestments[_beneficiary].sub(_weiAmount);\r\n    }\r\n    \r\n    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) pure internal{\r\n        require(_beneficiary != address(0));\r\n        require(_weiAmount != 0);\r\n    }\r\n    \r\n    function _getTokenAmount(uint256 _weiAmount) pure internal returns (uint256) {\r\n        uint256 rate = 1000; // per wei \r\n        return _weiAmount.mul(rate);\r\n    }\r\n\r\n    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\r\n        _deliverTokens(_beneficiary, _tokenAmount);\r\n    }\r\n    \r\n    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\r\n        _transfer(_beneficiary, _tokenAmount);\r\n    }\r\n    \r\n    function _forwardFunds(address payable _wallet, uint256 _amount) internal {\r\n        _wallet.transfer(_amount);\r\n    }\r\n    \r\n    function _transfer(address to, uint tokens) internal returns (bool success) {\r\n        // prevent transfer to 0x0, use burn instead\r\n        require(to != address(0));\r\n        require(balances[address(this)] >= tokens );\r\n        require(balances[to] + tokens >= balances[to]);\r\n        balances[address(this)] = balances[address(this)].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(address(this),to,tokens);\r\n        return true;\r\n    }\r\n    \r\n    function freeTokens(address receiver, uint tokenAmount) external onlyOwner {\r\n        require(balances[address(this)] != 0);\r\n        _transfer(receiver,tokenAmount*10**uint(decimals));\r\n    }\r\n    \r\n    \r\n    function stopICO() public onlyOwner{\r\n        Open = false;\r\n        if(balances[address(this)] != 0){ /* Transfers all of the tokens to the owner address*/ \r\n            _transfer(owner,balances[address(this)]);\r\n        }\r\n    }\r\n    \r\n    /* ERC20Interface function's implementation */\r\n    function totalSupply() public view returns (uint){\r\n       return 1e26; // 10 million \r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Get the token balance for account `tokenOwner`\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from token owner's account to `to` account\r\n    // - Owner's account must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n        // prevent transfer to 0x0, use burn instead\r\n        require(to != address(0));\r\n        require(balances[msg.sender] >= tokens );\r\n        require(balances[to] + tokens >= balances[to]);\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(msg.sender,to,tokens);\r\n        return true;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account\r\n    // ------------------------------------------------------------------------\r\n    function approve(address spender, uint tokens) public returns (bool success){\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender,spender,tokens);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer `tokens` from the `from` account to the `to` account\r\n    // \r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n    // for spending from the `from` account and\r\n    // - From account must have sufficient balance to transfer\r\n    // - Spender must have sufficient allowance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success){\r\n        require(tokens <= allowed[from][msg.sender]); //check allowance\r\n        require(balances[from] >= tokens);\r\n        balances[from] = balances[from].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        emit Transfer(from,to,tokens);\r\n        return true;\r\n    }\r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ------------------------------------------------------------------------\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_weiAmount\",\"type\":\"uint256\"}],\"name\":\"approvedByAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundsRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_weiAmount\",\"type\":\"uint256\"}],\"name\":\"rejectedByAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingInvestments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"freeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"BlockmmerceICO","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000005ba02d796fc2d4fb2ec24eff67d3e9ce05e7b342","Library":"","SwarmSource":"bzzr://34fce5ecfd7093ee8a988aa73b74a76d126705424f46f9e29f7d6dac52e4b47f"}]}