{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n// import SafeMath for safety checks\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n     function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n     \tuint256 c = a + b;\r\n     \trequire(c >= a, \"SafeMath: addition overflow\");\r\n\r\n     \treturn c;\r\n     }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n     function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n     \trequire(b <= a, \"SafeMath: subtraction overflow\");\r\n     \tuint256 c = a - b;\r\n\r\n     \treturn c;\r\n     }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n     function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n        \treturn 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n     function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n     function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n     \trequire(b != 0, \"SafeMath: modulo by zero\");\r\n     \treturn a % b;\r\n     }\r\n }\r\n\r\n contract Calorie {\r\n\r\n \tusing SafeMath for uint256;\r\n\r\n// Public parameters for ERC20 token\r\nuint8 public decimals = 18;\r\nstring public name = \"Calorie\";\r\nstring public symbol = \"CAL-Token\";\r\nuint256 public totalSupply= 100000000 *(10**uint256(decimals));\r\n\r\n\r\nmapping(address => uint256) public balanceOf;\r\nmapping(address => mapping(address => uint256)) public allowance;\r\n\r\n\r\n// Only owner can call mint and transferOwnership function\r\naddress public owner;\r\n\r\n// disable minting functions when mintingFinished is true\r\nbool public mintingFinished = false;\r\n\r\n// Events that notify clients about token transfer, approval and burn \r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\nevent Mint(address indexed minter, uint256 value);\r\nevent Burn(address indexed from, uint256 value);\r\nevent Approval(address indexed _owner, address indexed _spender, uint256 value);\r\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\nevent MintFinished();\r\n\r\n    /**\r\n     * Constructor function\r\n     *\r\n     * Initializes contract with initial supply and designate ownership \r\n     */\r\n     constructor() public {\r\n        owner = address(0x23CbcE1672D6E329B2194DC286B7986d06D9FdCB);\r\n        balanceOf[owner] = totalSupply;\r\n        emit Transfer(address(0),owner,totalSupply);\r\n    }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool){\r\n\r\n  \trequire(_to != address(0));\r\n  \trequire(_value <= balanceOf[msg.sender]);\r\n  \tbalanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n  \tbalanceOf[_to] = balanceOf[_to].add(_value);\r\n  \temit Transfer(msg.sender, _to, _value);\r\n  \treturn true;\r\n  }\r\n\r\n\r\n/**\r\n* Transfer tokens from other address\r\n*\r\n* Send `_value` tokens to `_to` on behalf of `_from`\r\n*\r\n* @param _from The address of the sender\r\n* @param _to The address of the recipient\r\n* @param _value the amount to send \r\n*/\r\n\r\nfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n\t\r\n require(_to != address(0));\r\n require(_value <= allowance[_from][msg.sender]);\r\n require(_value <= balanceOf[_from]);\r\n allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n balanceOf[_from] = balanceOf[_from].sub(_value);\r\n balanceOf[_to] = balanceOf[_to].add(_value);\r\n emit Transfer(_from, _to, _value);\r\n return true;\r\n}\r\n\r\n/**\r\n* @dev Set allowance for other address\r\n*\r\n* Allows `_spender` to spend no more than `_value` tokens on your behalf\r\n*\r\n* @param _spender The address authorized to spend\r\n* @param _value the max amount they can spend\r\n\r\n*/\r\nfunction approve(address _spender, uint256 _value) public returns (bool) {\r\n\t\r\n\tallowance[msg.sender][_spender] = _value;\r\n\temit Approval(msg.sender, _spender, _value);\r\n\treturn true;\r\n}\r\n\r\n/**\r\n* @dev Call this function to burn tokens instead of sending to address(0)\r\n\r\n* @param _value amount to burn\r\n\r\n*/\r\nfunction burn(uint256 _value) public returns (bool) {\r\n\t\r\n\trequire(balanceOf[msg.sender] >= _value);\r\n\tbalanceOf[msg.sender] =balanceOf[msg.sender].sub(_value);\r\n\ttotalSupply = totalSupply.sub(_value);\r\n\temit Burn(msg.sender, _value);\r\n\treturn true;\r\n}\r\n\r\n/**\r\n* @dev Call this function to mint tokens (only contract owner can trigger the function) and increase the total supply accordingly\r\n\r\n* @param _value amount to mint\r\n\r\n*/\r\nfunction mint(uint256 _value) public returns (bool) {\r\n    require(!mintingFinished);\r\n    require(msg.sender == owner);\r\n    balanceOf[msg.sender] = balanceOf[msg.sender].add(_value);\r\n    totalSupply = totalSupply.add(_value);\r\n    emit Mint(msg.sender, _value);\r\n    emit Transfer(address(0),msg.sender,_value);\r\n    return true;\r\n}\r\n\r\n/**\r\n* @dev Function to stop minting new tokens, when this function is called, function mint will be permanently disabled\r\n\r\n*/\r\n\r\nfunction finishMinting() public returns (bool) {\r\n    require(msg.sender == owner);\r\n    require(!mintingFinished);\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n}\r\n\r\n\r\n\r\n/**\r\n* @dev Transfer ownership of this contract to given address\r\n\r\n* @param _newOwner new owner address\r\n\r\n*/\r\nfunction transferOwnership(address _newOwner) public {\r\n\trequire(msg.sender == owner);\r\n\towner = _newOwner;\r\n    emit OwnershipTransferred(msg.sender,owner);\r\n} \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"}]","ContractName":"Calorie","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6c6218bb65f453e6aa056ab7652cd90804c25aabb7b0910541913d8e8a0edeb2"}]}