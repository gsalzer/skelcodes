{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.26;\r\n\r\n/* TEMPLATE TERMS\r\n\r\nEstablishing a retainer and acknowledging the mutual consideration and agreement hereby, Client, indentified as ethereum address '0x[[Client Ethereum Address]]',\r\n\r\ncommits a digital payment transactional script capped at '$[[Payment Cap in Dollars]]' for the benefit of Provider, identified as ethereum address '0x[[Provider Ethereum Address]]',\r\n\r\nin exchange for the prompt satisfaction of the following deliverables to Client by Provider, '[[Deliverable]]', upon scripted payments set at the rate of '$[[Deliverable Rate]]' per deliverable,\r\n\r\nwith such retainer relationship not to exceed '[[Retainer Duration in Days]]' days and to be governed by the choice of [[Choice of Law and Arbitration Forum]] law and 'either/or' arbitration rules in [[Choice of Law and Arbitration Forum]]. \r\n*/\r\n\r\n/* OPENLAW TEMPLATE\r\n\r\nhttps://app.openlaw.io/template/OpenLEX%20-%20Digital%20Dollar%20Retainer%20(DDR)\r\n\r\n*/\r\n\r\n/***************\r\nDDR CONTRACT\r\n***************/\r\n\r\ncontract DigitalDollarRetainer {\r\n\r\nstring public terms; // **terms governing DDR**\r\n\r\n// **ERC-20 Token References**\r\nuint256 private decimalFactor = 10**uint256(18); // **adjusts token payments to wei amount for UX**\r\naddress public daiToken = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359; // **designated ERC-20 token for payments - DAI 'digital dollar'**\r\naddress public usdcToken = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48; // **designated ERC-20 token for payments - USDC 'digital dollar'**\r\n\r\n// **Service Retainer References**\r\naddress public client; // **client ethereum address**\r\naddress public provider; // **ethereum address that receives payments in exchange for goods or services**\r\nstring public deliverable; // **goods or services (deliverable) retained for benefit of ethereum payments**\r\nstring public governingLawandForum; // **choice of law and forum for retainer relationship**\r\nuint8 public retainerDurationinDays; // **duration of retainer in days**\r\nuint8 public deliverableRate; // **rate for retained deliverables in digital dollars**\r\nuint8 public paid; // **amount paid thus far under retainer in digital dollars**\r\nuint8 public payCap; // **retainer payment cap in digital dollars**\r\n\r\nevent Paid(uint256 amount, address indexed); // **triggered on successful payments**\r\n\r\nconstructor(string _terms, address _client, address _provider, string _deliverable, string _governingLawandForum, uint8 _retainerDurationinDays, uint8 _deliverableRate, uint8 _payCap) public {\r\nterms = _terms;\r\nclient = _client;\r\nprovider = _provider;\r\ndeliverable = _deliverable;\r\ngoverningLawandForum = _governingLawandForum;\r\nretainerDurationinDays = _retainerDurationinDays;\r\ndeliverableRate = _deliverableRate;\r\npayCap = _payCap;\r\n}\r\n\r\nfunction getTerms() // **getter function to facilitate factory calls**\r\npublic\r\nview\r\nreturns (string)\r\n{\r\nreturn terms;\r\n}\r\n\r\nfunction payDAI() public { // **forwards approved DAI token amount to provider ethereum address**\r\nrequire(msg.sender == client);\r\nrequire(paid <= payCap, \"payDAI: payCap exceeded\");\r\nrequire(paid + deliverableRate <= payCap, \"payDAI: payCap exceeded\");\r\nuint256 weiAmount = deliverableRate * decimalFactor;\r\nERC20 dai = ERC20(daiToken);\r\ndai.transferFrom(msg.sender, provider, weiAmount);\r\nemit Paid(weiAmount, msg.sender);\r\npaid = paid + deliverableRate;\r\n}\r\n\r\nfunction payUSDC() public { // **forwards approved USDC token amount to provider ethereum address**\r\nrequire(msg.sender == client);\r\nrequire(paid <= payCap, \"payUSDC: payCap exceeded\");\r\nrequire(paid + deliverableRate <= payCap, \"payUSDC: payCap exceeded\");\r\nuint256 weiAmount = deliverableRate * decimalFactor;\r\nERC20 usdc = ERC20(usdcToken);\r\nusdc.transferFrom(msg.sender, provider, weiAmount);\r\nemit Paid(weiAmount, msg.sender);\r\npaid = paid + deliverableRate;\r\n}\r\n}\r\n\r\n/***************\r\nERC20 CONTRACT\r\n***************/\r\n\r\n/**\r\n* @title ERC20\r\n* @dev see https://github.com/ethereum/EIPs/issues/20\r\n*/\r\ncontract ERC20 {\r\nuint256 public totalSupply;\r\n\r\nfunction balanceOf(address who) public view returns (uint256);\r\nfunction transfer(address to, uint256 value) public returns (bool);\r\nfunction allowance(address owner, address spender) public view returns (uint256);\r\nfunction transferFrom(address from, address to, uint256 value) public returns (bool);\r\nfunction approve(address spender, uint256 value) public returns (bool);\r\n\r\nevent Approval(address indexed owner, address indexed spender, uint256 value);\r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/***************\r\nFACTORY CONTRACT\r\n***************/\r\n\r\ncontract DigitalDollarRetainerFactory {\r\n\r\n// **index of created contracts**\r\nmapping (address => bool) public validContracts;\r\naddress[] public contracts;\r\n\r\n// **useful to know the row count in contracts index**\r\nfunction getContractCount()\r\npublic\r\nview\r\nreturns(uint contractCount)\r\n{\r\nreturn contracts.length;\r\n}\r\n\r\n// **get all contracts**\r\nfunction getDeployedContracts() public view returns (address[])\r\n{\r\nreturn contracts;\r\n}\r\n\r\n// **deploy a new contract**\r\nfunction newDigitalRetainer(string _terms, address _client, address _provider, string _deliverable, string _governingLawandForum, uint8 _retainerDurationinDays, uint8 _deliverableRate, uint8 _payCap)\r\npublic\r\nreturns(address)\r\n{\r\nDigitalDollarRetainer c = new DigitalDollarRetainer(_terms, _client, _provider, _deliverable, _governingLawandForum, _retainerDurationinDays, _deliverableRate, _payCap);\r\nvalidContracts[c] = true;\r\ncontracts.push(c);\r\nreturn c;\r\n}\r\n\r\n// **retrieve stored terms from deployed DDR**\r\nfunction getTerms(address ddRetainer)\r\npublic\r\nview\r\nreturns(string)\r\n{\r\n\r\n// **ensure valid address for DDR**\r\nrequire(validContracts[ddRetainer],\"Contract Not Found!\");\r\n\r\nreturn (DigitalDollarRetainer(ddRetainer).getTerms());\r\n}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"ddRetainer\",\"type\":\"address\"}],\"name\":\"getTerms\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contracts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"validContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractCount\",\"outputs\":[{\"name\":\"contractCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDeployedContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_terms\",\"type\":\"string\"},{\"name\":\"_client\",\"type\":\"address\"},{\"name\":\"_provider\",\"type\":\"address\"},{\"name\":\"_deliverable\",\"type\":\"string\"},{\"name\":\"_governingLawandForum\",\"type\":\"string\"},{\"name\":\"_retainerDurationinDays\",\"type\":\"uint8\"},{\"name\":\"_deliverableRate\",\"type\":\"uint8\"},{\"name\":\"_payCap\",\"type\":\"uint8\"}],\"name\":\"newDigitalRetainer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DigitalDollarRetainerFactory","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://5d8e3c3ffb3ca941a565d8ca43d3b3a3937ac1360d04ea4f141f0210f99d3e3d"}]}