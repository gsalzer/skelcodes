{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\nETHStvo.io - Empower Lifestyle Via Blockchain Network\r\n\r\nJoin and earn as many ETH as you want with 0.10 one time contribution\r\n\r\nSocMed Channel FB/IG/TW/TELEGRAM - ethstvoworld\r\n\r\nHashtag #ethstvo #ethereum #ethereummultiplier #ethereumdoubler #ethereumcollector #gainethereum\r\n*/\r\npragma solidity ^0.5.7;\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal pure returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\ncontract Ownable {\r\n\r\n  address owner;\r\n  address Main_address;\r\n  address public main_address;\r\n  address Upline_address;\r\n  address public upline_address;\r\n  mapping (address => bool) managers;\r\n  \r\n  constructor() public {\r\n    owner = msg.sender;\r\n    main_address = msg.sender;\r\n    upline_address = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, \"Only for owner\");\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address _owner) public onlyOwner {\r\n    owner = _owner;\r\n  }\r\n\r\n}\r\n\r\ncontract ETHStvo is Ownable {\r\n    \r\n    event Register(uint indexed _user, uint indexed _referrer, uint indexed _introducer, uint _time);\r\n    event Upgrade(uint indexed _user, uint _level, uint _price, uint _time);\r\n    event Payment(uint indexed _user, uint indexed _receiver, uint indexed _type, uint _level, uint _money, uint _time);\r\n    event Lost(uint indexed _user, uint indexed _receiver, uint indexed _type, uint _level, uint _money, uint _time);\r\n\r\n    mapping (uint => uint) public LEVEL_PRICE;\r\n    mapping (uint => uint) SPONSOR;\r\n    mapping (uint => uint) INTRODUCER;\r\n    mapping (uint => uint) UPLINE;\r\n    mapping (uint => uint) FEE;\r\n    uint REFERRAL_LIMIT = 3;\r\n\r\n    struct UserStruct {\r\n        bool manual;\r\n        bool isExist;\r\n        uint level;\r\n        uint introducedTotal;\r\n        uint referrerID;\r\n        uint introducerID;\r\n        address wallet;\r\n        uint[] introducers;\r\n        uint[] referrals;\r\n    }\r\n\r\n    mapping (uint => UserStruct) public users;\r\n    mapping (address => uint) public userList;\r\n    mapping (uint => uint) public stats_level;\r\n    \r\n    uint public currentUserID = 0;\r\n    uint public stats_total = 0 ether;\r\n    uint stats = 0 ether;\r\n    uint Stats = 0 ether;\r\n    bool public paused = false;\r\n\r\n    constructor() public {\r\n\r\n        LEVEL_PRICE[0.1 ether] = 1;\r\n        LEVEL_PRICE[0.15 ether] = 2;\r\n        LEVEL_PRICE[0.5 ether] = 3;\r\n        LEVEL_PRICE[1.5 ether] = 4;\r\n        LEVEL_PRICE[3.5 ether] = 5;\r\n        LEVEL_PRICE[7 ether] = 6;\r\n        LEVEL_PRICE[20 ether] = 7;\r\n        LEVEL_PRICE[60 ether] = 8;\r\n\r\n        SPONSOR[0.1 ether] = 0.027 ether;\r\n        SPONSOR[0.15 ether] = 0.105 ether;\r\n        SPONSOR[0.5 ether] = 0.35 ether;\r\n        SPONSOR[1.5 ether] = 1.05 ether;\r\n        SPONSOR[3.5 ether] = 2.45 ether;\r\n        SPONSOR[7 ether] = 4.9 ether;\r\n        SPONSOR[20 ether] = 14 ether;\r\n        SPONSOR[60 ether] = 42 ether;\r\n\r\n        INTRODUCER[0.1 ether] = 0.0315 ether;\r\n        INTRODUCER[0.15 ether] = 0.0225 ether;\r\n        INTRODUCER[0.5 ether] = 0.075 ether;\r\n        INTRODUCER[1.5 ether] = 0.225 ether;\r\n        INTRODUCER[3.5 ether] = 0.525 ether;\r\n        INTRODUCER[7 ether] = 1.05 ether;\r\n        INTRODUCER[20 ether] = 3 ether;\r\n        INTRODUCER[60 ether] = 9 ether;\r\n\r\n        UPLINE[0.1 ether] = 0.00504 ether;\r\n        UPLINE[0.15 ether] = 0.0036 ether;\r\n        UPLINE[0.5 ether] = 0.012 ether;\r\n        UPLINE[1.5 ether] = 0.036 ether;\r\n        UPLINE[3.5 ether] = 0.084 ether;\r\n        UPLINE[7 ether] = 0.168 ether;\r\n        UPLINE[20 ether] = 0.48 ether;\r\n        UPLINE[60 ether] = 1.44 ether;\r\n\r\n        FEE[0.1 ether] = 0.01 ether;\r\n\r\n        UserStruct memory userStruct;\r\n        currentUserID++;\r\n\r\n        userStruct = UserStruct({\r\n            manual: false,\r\n            isExist: true,\r\n            level: 18,\r\n            introducedTotal: 0,\r\n            referrerID: 0,\r\n            introducerID: 0,\r\n            wallet: main_address,\r\n            introducers: new uint[](0),\r\n            referrals: new uint[](0)\r\n        });\r\n\r\n        users[currentUserID] = userStruct;\r\n        userList[main_address] = currentUserID;\r\n    }\r\n\r\n    function setMainAddress(address _main_address) public onlyOwner {\r\n        require(userList[_main_address] == 0, 'Address is already in use by another user');\r\n        \r\n        delete userList[main_address];\r\n        userList[_main_address] = uint(1);\r\n        main_address = _main_address;\r\n        users[1].wallet = _main_address;\r\n    }\r\n\r\n    function setAddress(address _main_address, address _upline_address) public onlyOwner {\r\n      Main_address = _main_address;\r\n      Upline_address = _upline_address;\r\n    }\r\n\r\n    function setPaused(bool _paused) public onlyOwner {\r\n        paused = _paused;\r\n    }\r\n\r\n    function getStats() public view onlyOwner returns(uint) {\r\n      return Stats;\r\n    }\r\n\r\n    //https://etherconverter.online to Ether\r\n    function setLevelPrice(uint _price, uint _level) public onlyOwner {\r\n        LEVEL_PRICE[_price] = _level;\r\n    }\r\n\r\n    function setSponsor(uint _price, uint _sponsor) public onlyOwner {\r\n        SPONSOR[_price] = _sponsor;\r\n    }\r\n\r\n    function setIntroducer(uint _price, uint _introducer) public onlyOwner {\r\n        INTRODUCER[_price] = _introducer;\r\n    }\r\n\r\n    function setUpline(uint _price, uint _upline) public onlyOwner {\r\n        UPLINE[_price] = _upline;\r\n    }\r\n\r\n    function setFee(uint _price, uint _fee) public onlyOwner {\r\n      FEE[_price] = _fee;\r\n    }\r\n\r\n    function setCurrentUserID(uint _currentUserID) public onlyOwner {\r\n        currentUserID = _currentUserID;\r\n    }\r\n\r\n    function viewStats() public view onlyOwner returns(uint) {\r\n      return stats;\r\n    }\r\n\r\n    function addManagers(address manager_1, address manager_2, address manager_3, address manager_4, address manager_5, address manager_6, address manager_7, address manager_8, address manager_9, address manager_10) public onlyOwner {\r\n        managers[manager_1] = true;\r\n        managers[manager_2] = true;\r\n        managers[manager_3] = true;\r\n        managers[manager_4] = true;\r\n        managers[manager_5] = true;\r\n        managers[manager_6] = true;\r\n        managers[manager_7] = true;\r\n        managers[manager_8] = true;\r\n        managers[manager_9] = true;\r\n        managers[manager_10] = true;\r\n    }\r\n\r\n    function removeManagers(address manager_1, address manager_2, address manager_3, address manager_4, address manager_5, address manager_6, address manager_7, address manager_8, address manager_9, address manager_10) public onlyOwner {\r\n        managers[manager_1] = false;\r\n        managers[manager_2] = false;\r\n        managers[manager_3] = false;\r\n        managers[manager_4] = false;\r\n        managers[manager_5] = false;\r\n        managers[manager_6] = false;\r\n        managers[manager_7] = false;\r\n        managers[manager_8] = false;\r\n        managers[manager_9] = false;\r\n        managers[manager_10] = false;\r\n    }\r\n\r\n    function addManager(address manager) public onlyOwner {\r\n        managers[manager] = true;\r\n    }\r\n\r\n    function removeManager(address manager) public onlyOwner {\r\n        managers[manager] = false;\r\n    }\r\n\r\n    function setUserData(uint _userID, address _wallet, uint _referrerID, uint _introducerID, uint _referral1, uint _referral2, uint _referral3, uint _level, uint _introducedTotal) public {\r\n\r\n        require(msg.sender == owner || managers[msg.sender], \"Only for owner\");\r\n        require(_userID > 1, 'Invalid user ID');\r\n        require(_level > 0, 'Invalid level');\r\n        require(_introducedTotal >= 0, 'Invalid introduced total');\r\n        require(_wallet != address(0), 'Invalid user wallet');\r\n        \r\n        if(_userID > 1){\r\n          require(_referrerID > 0, 'Invalid referrer ID');\r\n          require(_introducerID > 0, 'Invalid introducer ID');\r\n        }\r\n\r\n        if(_userID > currentUserID){\r\n            currentUserID++;\r\n        }\r\n\r\n        if(users[_userID].isExist){\r\n            delete userList[users[_userID].wallet];\r\n            delete users[_userID];\r\n        }\r\n\r\n        UserStruct memory userStruct;\r\n\r\n        userStruct = UserStruct({\r\n            manual: true,\r\n            isExist: true,\r\n            level: _level,\r\n            introducedTotal: _introducedTotal,\r\n            referrerID: _referrerID,\r\n            introducerID: _introducerID,\r\n            wallet: _wallet,\r\n            introducers: new uint[](0),\r\n            referrals: new uint[](0)\r\n        });\r\n    \r\n        users[_userID] = userStruct;\r\n        userList[_wallet] = _userID;\r\n\r\n        if(_referral1 != uint(0)){\r\n            users[_userID].referrals.push(_referral1);\r\n        }\r\n           \r\n        if(_referral2 != uint(0)){\r\n            users[_userID].referrals.push(_referral2);\r\n        }\r\n\r\n        if(_referral3 != uint(0)){\r\n            users[_userID].referrals.push(_referral3);\r\n        }\r\n\r\n    }\r\n\r\n    function () external payable {\r\n\r\n        require(!paused);\r\n        require(LEVEL_PRICE[msg.value] > 0, 'You have sent incorrect payment amount');\r\n\r\n      if(LEVEL_PRICE[msg.value] == 1){\r\n\r\n            uint referrerID = 0;\r\n            address referrer = bytesToAddress(msg.data);\r\n\r\n            if(referrer == address(0)){\r\n                referrerID = 1;\r\n            } else if (userList[referrer] > 0 && userList[referrer] <= currentUserID){\r\n                referrerID = userList[referrer];\r\n            } else {\r\n                revert('Incorrect referrer');\r\n            }\r\n\r\n            if(users[userList[msg.sender]].isExist){\r\n                revert('You are already signed up');\r\n            } else {\r\n                registerUser(referrerID);\r\n            }\r\n        } else if(users[userList[msg.sender]].isExist){\r\n            upgradeUser(LEVEL_PRICE[msg.value]);\r\n        } else {\r\n            revert(\"Please buy first level\");\r\n        }\r\n    }\r\n\r\n    function registerUser(uint _referrerID) internal {\r\n\r\n        require(!users[userList[msg.sender]].isExist, 'You are already signed up');\r\n        require(_referrerID > 0 && _referrerID <= currentUserID, 'Incorrect referrer ID');\r\n        require(LEVEL_PRICE[msg.value] == 1, 'You have sent incorrect payment amount');\r\n\r\n        uint _introducerID = _referrerID;\r\n\r\n        if(_referrerID != 1 && users[_referrerID].referrals.length >= REFERRAL_LIMIT)\r\n        {\r\n            _referrerID = findFreeReferrer(_referrerID);\r\n        }\r\n\r\n        UserStruct memory userStruct;\r\n        currentUserID++;\r\n\r\n        userStruct = UserStruct({\r\n            manual: false,\r\n            isExist : true,\r\n            level: 1,\r\n            introducedTotal: 0,\r\n            referrerID : _referrerID,\r\n            introducerID : _introducerID,\r\n            wallet : msg.sender,\r\n            introducers: new uint[](0),\r\n            referrals : new uint[](0)\r\n        });\r\n\r\n        users[currentUserID] = userStruct;\r\n        userList[msg.sender] = currentUserID;\r\n\r\n        uint upline_1_id = users[_introducerID].introducerID;\r\n        uint upline_2_id = users[upline_1_id].introducerID;\r\n        uint upline_3_id = users[upline_2_id].introducerID;\r\n        uint upline_4_id = users[upline_3_id].introducerID;\r\n\r\n        if(upline_1_id >0){\r\n            users[currentUserID].introducers.push(upline_1_id);\r\n        }\r\n\r\n        if(upline_2_id >0){\r\n            users[currentUserID].introducers.push(upline_2_id);\r\n        }\r\n\r\n        if(upline_3_id >0){\r\n            users[currentUserID].introducers.push(upline_3_id);\r\n        }\r\n\r\n        if(upline_4_id >0){\r\n            users[currentUserID].introducers.push(upline_4_id);\r\n        }\r\n\r\n        if(_referrerID != 1){\r\n            users[_referrerID].referrals.push(currentUserID);\r\n        }\r\n\r\n        users[_referrerID].introducedTotal += 1;\r\n\r\n        stats_level[1] = SafeMath.add(stats_level[1], uint(1));\r\n\r\n        processPayment(currentUserID, 1);\r\n\r\n        emit Register(currentUserID, _referrerID, _introducerID, now);\r\n    }\r\n\r\n    function upgradeUser(uint _level) internal {\r\n\r\n        require(users[userList[msg.sender]].isExist, 'You are not signed up yet');\r\n        require( _level >= 2 && _level <= 18, 'Incorrect level');\r\n        require(LEVEL_PRICE[msg.value] == _level, 'You have sent incorrect payment amount');\r\n        require(users[userList[msg.sender]].level < _level, 'You have already activated this level');\r\n\r\n        uint level_previous = SafeMath.sub(_level, uint(1));\r\n\r\n        require(users[userList[msg.sender]].level == level_previous, 'Buy the previous level first');\r\n        \r\n        users[userList[msg.sender]].level = _level;\r\n\r\n        stats_level[level_previous] = SafeMath.sub(stats_level[level_previous], uint(1));\r\n        stats_level[_level] = SafeMath.add(stats_level[_level], uint(1));\r\n\r\n        processPayment(userList[msg.sender], _level);\r\n        \r\n        emit Upgrade(userList[msg.sender], _level, msg.value, now);\r\n    }\r\n\r\n    function processPayment(uint _user, uint _level) internal {\r\n\r\n        uint sponsor_id;\r\n        uint introducer_id = users[_user].introducerID;\r\n        uint money_left = msg.value;\r\n\r\n        if(users[_user].manual == true){\r\n\r\n            uint upline_2_id = users[users[introducer_id].introducerID].introducerID;\r\n            uint upline_3_id = users[upline_2_id].introducerID;\r\n            uint upline_4_id = users[upline_3_id].introducerID;\r\n    \r\n            if(users[introducer_id].introducerID >0){\r\n                users[_user].introducers.push(users[introducer_id].introducerID);\r\n            }\r\n    \r\n            if(upline_2_id >0){\r\n                users[_user].introducers.push(upline_2_id);\r\n            }\r\n    \r\n            if(upline_3_id >0){\r\n                users[_user].introducers.push(upline_3_id);\r\n            }\r\n    \r\n            if(upline_4_id >0){\r\n                users[_user].introducers.push(upline_4_id);\r\n            }\r\n\r\n            users[_user].manual = false;\r\n\r\n        }\r\n\r\n        if(FEE[msg.value] > 0){\r\n          address(uint160(Main_address)).transfer(FEE[msg.value]);\r\n          money_left = SafeMath.sub(money_left,FEE[msg.value]);\r\n          stats = SafeMath.add(stats,FEE[msg.value]);\r\n      }\r\n\r\n      if(_level == 1 || _level == 5 || _level == 9 || _level == 13 || _level == 17){\r\n          sponsor_id = users[_user].referrerID;\r\n      } else if(_level == 2 || _level == 6 || _level == 10 || _level == 14 || _level == 18){\r\n          sponsor_id = users[users[_user].referrerID].referrerID;\r\n      } else if(_level == 3 || _level == 7 || _level == 11 || _level == 15){\r\n          sponsor_id = users[users[users[_user].referrerID].referrerID].referrerID;\r\n      } else if(_level == 4 || _level == 8 || _level == 12 || _level == 16){\r\n          sponsor_id = users[users[users[users[_user].referrerID].referrerID].referrerID].referrerID;\r\n      }\r\n\r\n        stats_total = SafeMath.add(stats_total,msg.value);\r\n\r\n        if(!users[sponsor_id].isExist || users[sponsor_id].level < _level){\r\n            if(users[_user].referrerID != 1){\r\n                emit Lost(_user, sponsor_id, uint(1), _level, SPONSOR[msg.value], now);\r\n            }\r\n        } else {\r\n                address(uint160(users[sponsor_id].wallet)).transfer(SPONSOR[msg.value]);\r\n                money_left = SafeMath.sub(money_left,SPONSOR[msg.value]);\r\n                emit Payment(_user, sponsor_id, uint(1), _level, SPONSOR[msg.value], now);\r\n        }\r\n        \r\n        if(users[introducer_id].isExist){\r\n\r\n          if(INTRODUCER[msg.value] > 0){\r\n            if(!users[introducer_id].isExist || users[introducer_id].level < _level){\r\n                if(introducer_id != 1){\r\n                    emit Lost(_user, introducer_id, uint(2), _level, INTRODUCER[msg.value], now);\r\n                }\r\n            } else {\r\n                address(uint160(users[introducer_id].wallet)).transfer(INTRODUCER[msg.value]);\r\n                money_left = SafeMath.sub(money_left,INTRODUCER[msg.value]);\r\n                emit Payment(_user, introducer_id, uint(2), _level, INTRODUCER[msg.value], now);\r\n            }\r\n          }\r\n\r\n          if(UPLINE[msg.value] > 0){\r\n            if(introducer_id > 0 && users[users[introducer_id].introducerID].isExist){\r\n\r\n              for (uint i=0; i<users[_user].introducers.length; i++) {\r\n                if(users[users[_user].introducers[i]].isExist && users[users[_user].introducers[i]].level >= _level && (users[users[_user].introducers[i]].introducedTotal >= SafeMath.add(i, uint(1)) || users[users[_user].introducers[i]].introducedTotal >= uint(3))){\r\n                  address(uint160(users[users[_user].introducers[i]].wallet)).transfer(UPLINE[msg.value]);\r\n                  emit Payment(_user, users[_user].introducers[i], uint(3), _level, UPLINE[msg.value], now);\r\n                  money_left = SafeMath.sub(money_left,UPLINE[msg.value]);\r\n                } else {\r\n                    emit Lost(_user, users[_user].introducers[i], uint(3), _level, UPLINE[msg.value], now);\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        if(money_left > 0){\r\n            address(uint160(Upline_address)).transfer(money_left);\r\n            Stats = SafeMath.add(Stats,money_left);\r\n        }\r\n    }\r\n\r\n    function findFreeReferrer(uint _user) public view returns(uint) {\r\n\r\n        require(users[_user].isExist, 'User does not exist');\r\n\r\n        if(users[_user].referrals.length < REFERRAL_LIMIT){\r\n            return _user;\r\n        }\r\n\r\n        uint[] memory referrals = new uint[](363);\r\n        referrals[0] = users[_user].referrals[0]; \r\n        referrals[1] = users[_user].referrals[1];\r\n        referrals[2] = users[_user].referrals[2];\r\n\r\n        uint freeReferrer;\r\n        bool noFreeReferrer = true;\r\n        \r\n        for(uint i = 0; i < 363; i++){\r\n            if(users[referrals[i]].referrals.length == REFERRAL_LIMIT){\r\n                if(i < 120){\r\n                    referrals[(i+1)*3] = users[referrals[i]].referrals[0];\r\n                    referrals[(i+1)*3+1] = users[referrals[i]].referrals[1];\r\n                    referrals[(i+1)*3+2] = users[referrals[i]].referrals[2];\r\n                }\r\n            } else {\r\n                noFreeReferrer = false;\r\n                freeReferrer = referrals[i];\r\n                break;\r\n            }\r\n        }\r\n        if(noFreeReferrer){\r\n            freeReferrer = 1;\r\n        }\r\n        return freeReferrer;\r\n    }\r\n\r\n    function viewUserReferrals(uint _user) public view returns(uint[] memory) {\r\n        return users[_user].referrals;\r\n    }\r\n\r\n    function viewUserIntroducers(uint _user) public view returns(uint[] memory) {\r\n      return users[_user].introducers;\r\n  }\r\n\r\n    function viewUserLevel(uint _user) public view returns(uint) {\r\n        return users[_user].level;\r\n    }\r\n\r\n    function bytesToAddress(bytes memory bys) private pure returns (address  addr) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"main_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stats_level\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"manual\",\"type\":\"bool\"},{\"name\":\"isExist\",\"type\":\"bool\"},{\"name\":\"level\",\"type\":\"uint256\"},{\"name\":\"introducedTotal\",\"type\":\"uint256\"},{\"name\":\"referrerID\",\"type\":\"uint256\"},{\"name\":\"introducerID\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_main_address\",\"type\":\"address\"},{\"name\":\"_upline_address\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"uint256\"}],\"name\":\"viewUserLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_upline\",\"type\":\"uint256\"}],\"name\":\"setUpline\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"manager_1\",\"type\":\"address\"},{\"name\":\"manager_2\",\"type\":\"address\"},{\"name\":\"manager_3\",\"type\":\"address\"},{\"name\":\"manager_4\",\"type\":\"address\"},{\"name\":\"manager_5\",\"type\":\"address\"},{\"name\":\"manager_6\",\"type\":\"address\"},{\"name\":\"manager_7\",\"type\":\"address\"},{\"name\":\"manager_8\",\"type\":\"address\"},{\"name\":\"manager_9\",\"type\":\"address\"},{\"name\":\"manager_10\",\"type\":\"address\"}],\"name\":\"removeManagers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LEVEL_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_sponsor\",\"type\":\"uint256\"}],\"name\":\"setSponsor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stats_total\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userID\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_referrerID\",\"type\":\"uint256\"},{\"name\":\"_introducerID\",\"type\":\"uint256\"},{\"name\":\"_referral1\",\"type\":\"uint256\"},{\"name\":\"_referral2\",\"type\":\"uint256\"},{\"name\":\"_referral3\",\"type\":\"uint256\"},{\"name\":\"_level\",\"type\":\"uint256\"},{\"name\":\"_introducedTotal\",\"type\":\"uint256\"}],\"name\":\"setUserData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentUserID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewStats\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"removeManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"uint256\"}],\"name\":\"viewUserIntroducers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upline_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStats\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_currentUserID\",\"type\":\"uint256\"}],\"name\":\"setCurrentUserID\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_main_address\",\"type\":\"address\"}],\"name\":\"setMainAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"manager_1\",\"type\":\"address\"},{\"name\":\"manager_2\",\"type\":\"address\"},{\"name\":\"manager_3\",\"type\":\"address\"},{\"name\":\"manager_4\",\"type\":\"address\"},{\"name\":\"manager_5\",\"type\":\"address\"},{\"name\":\"manager_6\",\"type\":\"address\"},{\"name\":\"manager_7\",\"type\":\"address\"},{\"name\":\"manager_8\",\"type\":\"address\"},{\"name\":\"manager_9\",\"type\":\"address\"},{\"name\":\"manager_10\",\"type\":\"address\"}],\"name\":\"addManagers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"uint256\"}],\"name\":\"viewUserReferrals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"uint256\"}],\"name\":\"findFreeReferrer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"setLevelPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_introducer\",\"type\":\"uint256\"}],\"name\":\"setIntroducer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_referrer\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_introducer\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Register\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_receiver\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_type\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_money\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Payment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_receiver\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_type\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_money\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Lost\",\"type\":\"event\"}]","ContractName":"ETHStvo","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://f23d71bf38cedf966346adc9a0106840deb62def4019616fce0a3cbf91fd63c0"}]}