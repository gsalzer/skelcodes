{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.5.0 <0.6.0; \r\n\r\nlibrary SafeMath {\r\n    \r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n    \r\n}\r\n\r\n\r\ncontract AladdinToken {\r\n\r\n    //=====================================================================================================================\r\n    //==SECTION-1, Standard ERC20-TOKEN. Only transfer() been modified.\r\n    //=====================================================================================================================\r\n\r\n    using SafeMath for uint256;\r\n\r\n    string constant private _name = \"ADS\";\r\n    string constant private _symbol = \"ADS\";\r\n    uint8 constant private _decimals = 18;\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _special;\r\n    \r\n    uint256 constant private _totalSupply = (10**9)*(10**18);\r\n    uint256 private _bancorPool;\r\n    address public LOCK = 0x597f40FE34D1eCb851bD54Cb6AF4F5c940312C89;\r\n    address public TEAM = 0x89C275BcaF12296CcCE3b396b0110385089aDe8D;\r\n    uint256 public startTime;\r\n     \r\n    constructor() public {\r\n        startTime = block.timestamp;\r\n        _balances[LOCK] = 7*(10**8)*(10**18);\r\n        _balances[TEAM] = (10**8)*(10**18);\r\n        _bancorPool = 2*(10**8)*(10**18);\r\n    }\r\n\r\n    function viewBancorPool() public view returns (uint256) {\r\n        return _bancorPool;\r\n    }\r\n    \r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n    \r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    \r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    \r\n    function totalSupply() public pure returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        if(msg.sender == LOCK || _special[msg.sender]) {\r\n            require(block.timestamp.sub(startTime) > 3*12*30 days); //Lock 3 years;\r\n        } \r\n        else if(msg.sender == TEAM && amount > 0) {\r\n            require(_balances[recipient] == 0 || _special[recipient]);\r\n            _special[recipient] = true;\r\n        }\r\n        _transfer(msg.sender, recipient, amount); \r\n        return true;\r\n    }\r\n    \r\n    function batchTransfer(address[] memory recipients , uint256[] memory amounts) public returns (bool) {\r\n        require(recipients.length == amounts.length);\r\n        for(uint256 i = 0; i < recipients.length; i++) {\r\n            transfer(recipients[i], amounts[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n \r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    //=====================================================================================================================\r\n    //==SECTION-2, BANCOR-TOKEN\r\n    //=====================================================================================================================\r\n    \r\n    uint256 constant private BASE_UNIT = 10**18;  // 000000000000000000\r\n    uint256 constant private _baseSupply = 3333*2*1500*BASE_UNIT; // 3333 * 2 = 6666\r\n    uint256 constant private _baseBalance = 3333*BASE_UNIT; // 3333 * 3 = 9999， 9999 + 1 = 10000\r\n    uint256 private _virtualSupply = _baseSupply;\r\n    uint256 private _virtualBalance = _baseBalance;\r\n    uint256 constant private ROE_UNIT = BASE_UNIT; //Same decimal as ETH.\r\n    uint256 constant public RCW = 2;  // Reciprocal CW, CW == 50% == 1/2;\r\n    \r\n    function realSupply() public view returns (uint256) {\r\n        return _virtualSupply.sub(_baseSupply);\r\n    }\r\n    \r\n    function realBanlance() public view returns (uint256) {\r\n        return _virtualBalance.sub(_baseBalance);\r\n    }\r\n    \r\n    // TODO overflow test.\r\n    function sqrt(uint256 a) public pure returns (uint256 b) {\r\n        uint256 c = (a+1)/2;\r\n        b = a;\r\n        while (c<b) {\r\n            b = c;\r\n            c = (a/c+c)/2;\r\n        }\r\n    }\r\n    \r\n    function oneEthToAds() public view returns (uint256) {\r\n        return ROE_UNIT.mul(_virtualSupply).div(_virtualBalance.mul(2));\r\n    }\r\n    \r\n    function oneAdsToEth() public view returns (uint256) {\r\n        return ROE_UNIT.mul(_virtualBalance).div(_virtualSupply.div(2));\r\n    }\r\n    \r\n    /*****************************************************************\r\n    tknWei = supply*((1+ethWei/ethBlance)^(1/2)-1)\r\n           = supply*(sqrt((ethBlance+ethWei)/ethBlance)-1);\r\n           = supply*sqrt((ethBlance+ethWei)/ethBlance)-supply;\r\n           = sqrt(supply*supply*(ethBlance+ethWei)/ethBlance)-supply;\r\n           = sqrt(supply*supply*sum/ethBlance)-supply;\r\n    *****************************************************************/  \r\n    // When ethWei is ZERO, tknWei might be NON-ZERO.\r\n    // This is because sell function retun eth value is less than precise value.\r\n    // So it will Accumulate small amount of differences.\r\n    function _bancorBuy(uint256 ethWei) internal returns (uint256 tknWei) {\r\n        uint256 savedSupply = _virtualSupply;\r\n        _virtualBalance = _virtualBalance.add(ethWei); //sum is new ethBlance.\r\n        _virtualSupply = sqrt(_baseSupply.mul(_baseSupply).mul(_virtualBalance).div(_baseBalance));\r\n        tknWei = _virtualSupply.sub(savedSupply);\r\n        if(ethWei == 0) { // to reduce Accumulated differences.\r\n            tknWei = 0;\r\n        }\r\n    }\r\n    \r\n    function evaluateEthToAds(uint256 ethWei) public view returns (uint256 tknWei) {\r\n        if(ethWei > 0) {\r\n            tknWei = sqrt(_baseSupply.mul(_baseSupply).mul(_virtualBalance.add(ethWei)).div(_baseBalance)).sub(_virtualSupply);\r\n        }\r\n    }\r\n    \r\n    function oneEthToAdsAfterBuy(uint256 ethWei) public view returns (uint256) {\r\n        uint256 vb = _virtualBalance.add(ethWei);\r\n        uint256 vs = sqrt(_baseSupply.mul(_baseSupply).mul(vb).div(_baseBalance));\r\n        return ROE_UNIT.mul(vs).div(vb.mul(2));\r\n    }\r\n \r\n    //=====================================================================================================================\r\n    //==SECTION-3, main program\r\n    //=====================================================================================================================\r\n    \r\n    function _buyMint(uint256 ethWei, address buyer) internal returns (uint256 tknWei) {\r\n        tknWei = _bancorBuy(ethWei);\r\n        _balances[buyer] = _balances[buyer].add(tknWei);\r\n        _bancorPool = _bancorPool.sub(tknWei);\r\n        \r\n        emit Transfer(address(0), buyer, tknWei);\r\n    }\r\n    \r\n    // TODO, JUST FOR TEST ENV, NEED TO DELETE THIS FUNCTION WHEN DEPLOYED IN PRODUCTION ENV!!!\r\n    //function buyMint(uint256 ethWei) public returns (uint256 tknWei) {\r\n        //tknWei = _buyMint(ethWei, msg.sender);\r\n    //}\r\n    \r\n    address public ethA = 0x1F49ac62066FBACa763045Ac2799ac43C7fDe6B8;\r\n    address public ethB = 0x1D01C11162c4808a679Cf29380F7594d3163AF8d;\r\n    address public ethC = 0x233bEEd512CE10ed72Ad6Bd43a5424af82d9D5Ef;\r\n    mapping (address => uint256) private _ethOwner;\r\n    \r\n    function() external payable {\r\n        if(msg.value > 0) {\r\n            allocate(msg.value);\r\n            _buyMint(msg.value, msg.sender);\r\n        } else if (msg.sender == ethA || msg.sender == ethB || msg.sender == ethC) {\r\n            msg.sender.transfer(_ethOwner[msg.sender]);\r\n            _ethOwner[msg.sender] = 0;\r\n        }\r\n    }\r\n    \r\n    function allocate(uint256 ethWei) internal {\r\n        uint256 foo = ethWei.mul(70).div(100);\r\n        _ethOwner[ethA] = _ethOwner[ethA].add(foo);\r\n        ethWei = ethWei.sub(foo);\r\n        foo = ethWei.mul(67).div(100);\r\n        _ethOwner[ethB] = _ethOwner[ethB].add(foo);\r\n        _ethOwner[ethC] = _ethOwner[ethC].add(ethWei.sub(foo));\r\n    }\r\n    \r\n    function viewAllocate(address addr) public view returns (uint256) {\r\n        return _ethOwner[addr];\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"realSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"realBanlance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethWei\",\"type\":\"uint256\"}],\"name\":\"evaluateEthToAds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tknWei\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"sqrt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oneAdsToEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"viewAllocate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LOCK\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewBancorPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RCW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oneEthToAds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEAM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethWei\",\"type\":\"uint256\"}],\"name\":\"oneEthToAdsAfterBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"AladdinToken","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://4c591dc76b0443cf7f1c3fa16ec3ca30f808cd9562c591069ce31e265c715c1b"}]}