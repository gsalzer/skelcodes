{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.10;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\ncontract IERC721 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    function balanceOf(address owner) public view returns (uint256 balance);\r\n\r\n    function ownerOf(uint256 tokenId) public view returns (address owner);\r\n\r\n    function approve(address to, uint256 tokenId) public;\r\n\r\n    function getApproved(uint256 tokenId) public view returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) public;\r\n\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\r\n\r\n    function transfer(address to, uint256 tokenId) public;\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId) public;\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\r\n}\r\ncontract ERC20BasicInterface {\r\n    function totalSupply() public view returns (uint256);\r\n\r\n    function balanceOf(address who) public view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    uint8 public decimals;\r\n}\r\ncontract Gacha is Ownable {\r\n    struct item {\r\n        uint256[] tokenIds; \r\n    }\r\n    struct items { \r\n        mapping(address => item) items; \r\n        uint8 totalItem;\r\n    }\r\n    // bool public isEnded;\r\n    mapping(address => items) public awardDatas;\r\n\r\n    event _setAward(address _from, address _game, uint256 tokenId);\r\n    constructor() public {}\r\n    function getTokenIdByIndex(address _game, uint8 _index) public view returns (uint256){\r\n        return awardDatas[msg.sender].items[_game].tokenIds[_index];\r\n    }\r\n    function getGameBalance(address _game) public view returns (uint256){\r\n        return awardDatas[msg.sender].items[_game].tokenIds.length;\r\n    }\r\n    function setAward(address _user, address _game, uint256 _tokenId) public onlyOwner{\r\n        IERC721 erc721 = IERC721(_game);\r\n        require(erc721.isApprovedForAll(erc721.ownerOf(_tokenId), address(this)));\r\n        awardDatas[_user].items[_game].tokenIds.push(_tokenId);\r\n        awardDatas[_user].totalItem +=1;\r\n        emit _setAward(_user, _game, _tokenId);\r\n    }\r\n\r\n    function withdraw(address _game, uint256 _tokenId) public {\r\n        IERC721 erc721 = IERC721(_game);\r\n        require(erc721.isApprovedForAll(erc721.ownerOf(_tokenId), address(this)));\r\n        require(checkowner(_game, _tokenId));\r\n        erc721.transferFrom(erc721.ownerOf(_tokenId), msg.sender, _tokenId);\r\n    }\r\n    function checkowner(address _game, uint256 _tokenId) internal returns(bool) {\r\n        bool valid;\r\n        uint256[] storage ids = awardDatas[msg.sender].items[_game].tokenIds;\r\n        for(uint8 i = 0; i< ids.length; i++){\r\n            if(ids[i] == _tokenId) {\r\n                valid = true;\r\n                _burnArrayTokenId(_game, i);\r\n            }\r\n        }\r\n        return valid;\r\n    }\r\n    function _burnArrayTokenId(address _game, uint256 index)  internal {\r\n        if (index >= awardDatas[msg.sender].items[_game].tokenIds.length) return;\r\n\r\n        for (uint i = index; i<awardDatas[msg.sender].items[_game].tokenIds.length-1; i++){\r\n            awardDatas[msg.sender].items[_game].tokenIds[i] = awardDatas[msg.sender].items[_game].tokenIds[i+1];\r\n        }\r\n        delete awardDatas[msg.sender].items[_game].tokenIds[awardDatas[msg.sender].items[_game].tokenIds.length-1];\r\n        awardDatas[msg.sender].items[_game].tokenIds.length--;\r\n        awardDatas[msg.sender].totalItem -=1;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_game\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"setAward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"awardDatas\",\"outputs\":[{\"name\":\"totalItem\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_game\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint8\"}],\"name\":\"getTokenIdByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_game\",\"type\":\"address\"}],\"name\":\"getGameBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_game\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_game\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"_setAward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Gacha","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5ad78f02c630abf7b39edbdeadd1dc440c3f9a80bbf88b5738802e38b57c76b1"}]}