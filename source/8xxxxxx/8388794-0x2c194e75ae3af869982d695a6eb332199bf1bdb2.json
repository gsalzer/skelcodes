{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.8;\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Called by unknown account\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract GameGuess is Ownable {\r\n    event Status(address indexed user, uint number, uint wins, uint loses, int profit);\r\n\r\n    struct GameStats {\r\n        uint wins;\r\n        uint loses;\r\n        int profit;\r\n    }\r\n\r\n    mapping(address => GameStats) public userGameStats;\r\n\r\n    function play(uint8 chance, bool sign) external payable notContract {\r\n        if (msg.sender == owner) return;\r\n        uint16 number = chance;\r\n        if (sign) number = 100 - chance;\r\n        uint multiplier = getMultiplier(chance);\r\n        require(msg.value > 0 && address(this).balance > (multiplier * msg.value) / 10000, \"Incorrect bet\");\r\n        require(number >= 1 && number < 100, \"Invalid number\");\r\n        uint16 randomNumber = random();\r\n        bool result = false;\r\n        if (sign) result = randomNumber > (number * 10);\r\n        else result = randomNumber < (number * 10);\r\n        if (result) {\r\n            uint prize = (msg.value * multiplier) / 10000;\r\n            userGameStats[msg.sender].wins++;\r\n            userGameStats[msg.sender].profit += int(prize);\r\n            msg.sender.transfer(prize);\r\n        } else {\r\n            userGameStats[msg.sender].loses++;\r\n            userGameStats[msg.sender].profit -= int(msg.value);\r\n        }\r\n        emit Status(msg.sender,\r\n            randomNumber,\r\n            userGameStats[msg.sender].wins,\r\n            userGameStats[msg.sender].loses,\r\n            userGameStats[msg.sender].profit\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to withdraw certain amount of ether from the contract.\r\n     * @param amount Amount of wei that needs to be withdrawn.\r\n     */\r\n    function withdraw(uint amount) external onlyOwner {\r\n        require(address(this).balance >= amount);\r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n    function getMultiplier(uint number) public pure returns (uint) {\r\n        uint multiplier = (99 * 100000) / number;\r\n        if (multiplier % 10 >= 5) multiplier += 10;\r\n        multiplier = multiplier / 10;\r\n\r\n        return multiplier;\r\n    }\r\n\r\n    function random() private view returns (uint16) {\r\n        uint totalGames = userGameStats[msg.sender].wins + userGameStats[msg.sender].loses;\r\n        return uint16(uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, msg.sender, totalGames))) % 1000) + 1;\r\n    }\r\n\r\n    modifier notContract {\r\n        uint size;\r\n        address addr = msg.sender;\r\n        assembly {size := extcodesize(addr)}\r\n        require(size <= 0 && tx.origin == addr, \"Called by contract\");\r\n        _;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userGameStats\",\"outputs\":[{\"name\":\"wins\",\"type\":\"uint256\"},{\"name\":\"loses\",\"type\":\"uint256\"},{\"name\":\"profit\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"chance\",\"type\":\"uint8\"},{\"name\":\"sign\",\"type\":\"bool\"}],\"name\":\"play\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"number\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"wins\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"loses\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"profit\",\"type\":\"int256\"}],\"name\":\"Status\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"GameGuess","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://286ed83347e27c670be3c02b52b1ff3408cece856d758f49fab7063585c7d7cd"}]}