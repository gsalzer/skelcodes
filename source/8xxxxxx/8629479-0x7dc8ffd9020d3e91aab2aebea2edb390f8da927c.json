{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.5.0 <0.6.0;\r\n\r\n//721协议\r\ninterface ERC721 {\r\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function ownerOf(uint256 _tokenId) external view returns (address);\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata data) external;\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n    function approve(address _approved, uint256 _tokenId) external;\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n    function getApproved(uint256 _tokenId) external view returns (address);\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n}\r\n\r\n//165协议\r\ninterface ERC165{\r\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n}\r\n\r\ninterface ERC721TokenReceiver {\r\n    function onERC721Received(address _from, uint256 _tokenId, bytes calldata data) external returns(bytes4);\r\n}\r\n\r\ncontract AccessAdmin{\r\n    bool public isPaused = false;\r\n    address public adminAddr;\r\n\r\n    event AdminTransferred(address indexed preAdmin, address indexed newAdmin);\r\n\r\n    constructor() public {\r\n        adminAddr = msg.sender;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == adminAddr);\r\n        _;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!isPaused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused {\r\n        require(isPaused);\r\n        _;\r\n    }\r\n\r\n    function setAdmin(address _newAdmin) external onlyAdmin {\r\n        require(_newAdmin != address(0));\r\n        emit AdminTransferred(adminAddr, _newAdmin);\r\n        adminAddr = _newAdmin;\r\n    }\r\n\r\n    function doPause() external onlyAdmin whenNotPaused {\r\n        isPaused = true;\r\n    }\r\n\r\n    function doUnpause() external onlyAdmin whenPaused {\r\n        isPaused = false;\r\n    }\r\n}\r\n\r\ncontract SpecialSoldiers is ERC721,AccessAdmin {\r\n    //物品\r\n    struct Item{\r\n        uint256 itemMainType;\r\n        uint256 itemSubtype;\r\n        uint16 itemLevel;\r\n        uint16 itemQuality;\r\n        uint16 itemPhase; \r\n        uint64 createTime;\r\n        uint64 updateTime;\r\n        uint16 updateCNT;\r\n        uint256 attr1;\r\n        uint256 attr2;\r\n        uint256 attr3;\r\n        uint256 attr4;\r\n        uint256 attr5;\r\n    }\r\n\r\n    //物品数组\r\n    Item[] public itemArray; //item ID is the index in this array\r\n    //每个地址拥有的物品的个数\r\n    mapping (address => uint256) public ownershipTokenCount;\r\n    //物品id到地址的mapping地址\r\n    mapping (uint256 => address) public ItemIDToOwner;\r\n    //临时具有操作物品tansfer权限的地址\r\n    mapping (uint256 => address) public ItemIDToApproved;\r\n    //具有对某个地址下所有物品transfer权限的地址\r\n    mapping (address => mapping (address => bool)) operatorToApprovals;\r\n    //信任的地址,官方地址,或者其他合约地址\r\n    mapping (address => bool) trustAddr;\r\n    //物品加锁\r\n    mapping (uint256 => bool) public itemLocked;\r\n\r\n    //用来查询合约支持的协议,和实现的协议方法\r\n    bytes4 constant InterfaceSignature_ERC165 =\r\n        bytes4(keccak256('supportsInterface(bytes4)'));\r\n    bytes4 constant InterfaceSignature_ERC721 =\r\n        bytes4(keccak256('balanceOf(address)')) ^\r\n        bytes4(keccak256('ownerOf(uint256)')) ^\r\n        bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) ^\r\n        bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\r\n        bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n        bytes4(keccak256('approve(address,uint256)')) ^\r\n        bytes4(keccak256('setApprovalForAll(address,bool)')) ^\r\n        bytes4(keccak256('getApproved(uint256)')) ^\r\n        bytes4(keccak256('isApprovedForAll(address,address)'));\r\n\r\n    //定义通知\r\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n    event ItemUpdate(address  _owner,uint256  _itemID);\r\n    event ItemCreate(address  _owner,uint256  _itemID);\r\n    event ItemUnlock(address _caller,address _owner,uint256  _itemID);\r\n\r\n    //构造函数\r\n    constructor() public{\r\n        adminAddr = msg.sender;\r\n    }\r\n\r\n    //修饰函数,用来在函数执行前判断一些条件\r\n    modifier isValidToken(uint256 _tokenID) {\r\n        require(_tokenID >= 0 && _tokenID <= itemArray.length);\r\n        require(ItemIDToOwner[_tokenID] != address(0));\r\n        _;\r\n    }\r\n\r\n    modifier isItemLock(uint256 _tokenID) {\r\n        require(itemLocked[_tokenID]);\r\n        _;\r\n    }\r\n\r\n    modifier isItemUnlock(uint256 _tokenID) {\r\n        require(!itemLocked[_tokenID]);\r\n        _;\r\n    }\r\n\r\n    modifier canTransfer(uint256 _tokenId) {\r\n        address owner = ItemIDToOwner[_tokenId];\r\n        require(msg.sender == owner || msg.sender == ItemIDToApproved[_tokenId] || operatorToApprovals[owner][msg.sender]);\r\n        _;\r\n    }\r\n\r\n    //用于获取itemArray的长度\r\n    function getitemArrayLength() external view returns(uint256){\r\n        return(itemArray.length);\r\n    }\r\n\r\n    //用于链上查询合约支持的协议\r\n    function supportsInterface(bytes4 _interfaceId) external pure  returns(bool) {\r\n        return ((_interfaceId == InterfaceSignature_ERC165) || (_interfaceId == InterfaceSignature_ERC721));\r\n    }\r\n\r\n    function setTrustAddr(address _addr,bool _trust) external onlyAdmin{\r\n        require(_addr != address(0));\r\n        trustAddr[_addr] = _trust;\r\n    }\r\n\r\n    function getTrustAddr(address _addr) external view onlyAdmin returns(bool){\r\n        return (trustAddr[_addr]);\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n        ownershipTokenCount[_to]++;\r\n        ItemIDToOwner[_tokenId] = _to;\r\n\r\n        if (_from != address(0)) {\r\n            ownershipTokenCount[_from]--;\r\n            delete ItemIDToApproved[_tokenId];\r\n        }\r\n\r\n        emit Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    //更新物品的状态\r\n    function updateItem(uint256 _tp,uint256 _subTp,uint16 _level,uint256[5] calldata _attr,uint16 _quality,uint16 _phase,uint256 _tokenId) external whenNotPaused isValidToken(_tokenId) isItemUnlock(_tokenId){\r\n        require(msg.sender==adminAddr || trustAddr[msg.sender]);\r\n        \r\n        itemArray[_tokenId].itemMainType = _tp;\r\n        itemArray[_tokenId].itemSubtype = _subTp;\r\n        itemArray[_tokenId].itemLevel = _level;\r\n        itemArray[_tokenId].itemQuality = _quality;\r\n        itemArray[_tokenId].itemPhase = _phase;\r\n        itemArray[_tokenId].updateTime = uint64(now);\r\n        itemArray[_tokenId].updateCNT += 1;\r\n        itemArray[_tokenId].attr1 = _attr[0];\r\n        itemArray[_tokenId].attr2 = _attr[1];\r\n        itemArray[_tokenId].attr3 = _attr[2];\r\n        itemArray[_tokenId].attr4 = _attr[3];\r\n        itemArray[_tokenId].attr5 = _attr[4];\r\n\r\n        address owner = ItemIDToOwner[_tokenId];\r\n        itemLocked[_tokenId] = true;\r\n        emit ItemUpdate(owner,_tokenId);\r\n    }\r\n    \r\n    //创建物品\r\n    function createNewItem(uint256 _tp,uint256 _subTp,address _owner,uint256[5] calldata _attr,uint16 _quality,uint16 _phase) external whenNotPaused {\r\n        require(msg.sender==adminAddr || trustAddr[msg.sender]);\r\n        require(_owner != address(0));\r\n        require(itemArray.length < 4294967296);\r\n        \r\n        uint64 currentTime = uint64(now);\r\n        Item memory _newItem = Item({\r\n            itemMainType: _tp,\r\n            itemSubtype: _subTp,\r\n            itemLevel: 1,\r\n            itemQuality:_quality,\r\n            itemPhase:_phase,\r\n            createTime:currentTime,\r\n            updateTime:currentTime,\r\n            updateCNT:0,\r\n            attr1:_attr[0],\r\n            attr2:_attr[1],\r\n            attr3:_attr[2],\r\n            attr4:_attr[3],\r\n            attr5:_attr[4]\r\n        });\r\n        uint256 newItemID = itemArray.push(_newItem) - 1;\r\n        itemLocked[newItemID] = true;\r\n        \r\n        _transfer(address(0), _owner, newItemID);\r\n        emit ItemCreate(_owner,newItemID);\r\n    }\r\n\r\n    //物品解锁,解锁后才能更新状态\r\n    function unLockedItem(uint256 _tokenId) external whenNotPaused isValidToken(_tokenId) isItemLock(_tokenId) {\r\n        require(msg.sender==adminAddr || trustAddr[msg.sender]);\r\n        address owner = ItemIDToOwner[_tokenId];\r\n        itemLocked[_tokenId] = false;\r\n        emit ItemUnlock(msg.sender,owner,_tokenId);\r\n    }\r\n\r\n    //某个地址所有物品个数\r\n    function balanceOf(address _owner) external view returns (uint256 count) {\r\n        return ownershipTokenCount[_owner];\r\n    }\r\n\r\n    //某个物品所属地址\r\n    function ownerOf(uint256 _tokenId) external view returns (address owner)\r\n    {\r\n        owner = ItemIDToOwner[_tokenId];\r\n\r\n        require(owner != address(0));\r\n    }\r\n\r\n    function _safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes memory data) internal isValidToken(_tokenId) canTransfer(_tokenId){\r\n        _transfer(_from, _to, _tokenId);\r\n\r\n        //only call onERC721Received when _to is a contract address\r\n        uint256 codeSize;\r\n        assembly { codeSize := extcodesize(_to) }\r\n        if (codeSize == 0) {\r\n            return;\r\n        }\r\n\r\n        bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(_from, _tokenId, data);\r\n        // bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\")) = 0xf0b9e5ba;\r\n        require(retval == 0xf0b9e5ba);\r\n    }\r\n\r\n    //合约之间的物品的transfer,对方合约需要要支持721协议,要做onERC721Received判断\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata data) external whenNotPaused{\r\n        _safeTransferFrom(_from, _to, _tokenId, data);\r\n    }\r\n\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external whenNotPaused{\r\n        _safeTransferFrom(_from, _to, _tokenId, \"\");\r\n    }\r\n\r\n    //物品的transfer,到一个用户地址\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external whenNotPaused isValidToken(_tokenId) canTransfer(_tokenId){\r\n        address owner = ItemIDToOwner[_tokenId];\r\n        require(owner != address(0));\r\n        require(_to != address(0));\r\n        require(_from == owner);\r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function _approve(uint256 _tokenId, address _approved) internal {\r\n        ItemIDToApproved[_tokenId] = _approved;\r\n    }\r\n\r\n    //让另一个地址具有临时transfer物品的权限\r\n    function approve(address _approved, uint256 _tokenId) external whenNotPaused{\r\n        address owner = ItemIDToOwner[_tokenId];\r\n        require(owner != address(0));\r\n        require(msg.sender == owner || operatorToApprovals[owner][msg.sender]);\r\n\r\n        _approve(_tokenId, _approved);\r\n        emit Approval(msg.sender,  _approved, _tokenId);\r\n    }\r\n\r\n    //让另一个地址具有transfer当前地址内所有物品的权限\r\n    function setApprovalForAll(address _operator, bool _approved) external whenNotPaused{\r\n        require(_operator != address(0));\r\n        operatorToApprovals[msg.sender][_operator] = _approved;\r\n        emit ApprovalForAll(msg.sender, _operator, _approved);\r\n    }\r\n\r\n    function getApproved(uint256 _tokenId) external view returns (address){\r\n        return ItemIDToApproved[_tokenId];\r\n    }\r\n\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool){\r\n        return operatorToApprovals[_owner][_operator];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getitemArrayLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doUnpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_subTp\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_level\",\"type\":\"uint16\"},{\"internalType\":\"uint256[5]\",\"name\":\"_attr\",\"type\":\"uint256[5]\"},{\"internalType\":\"uint16\",\"name\":\"_quality\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_phase\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"updateItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getTrustAddr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"itemLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ItemIDToApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_trust\",\"type\":\"bool\"}],\"name\":\"setTrustAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"unLockedItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_subTp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256[5]\",\"name\":\"_attr\",\"type\":\"uint256[5]\"},{\"internalType\":\"uint16\",\"name\":\"_quality\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_phase\",\"type\":\"uint16\"}],\"name\":\"createNewItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ItemIDToOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"itemArray\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"itemMainType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemSubtype\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"itemLevel\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"itemQuality\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"itemPhase\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"createTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"updateTime\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"updateCNT\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"attr1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"attr2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"attr3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"attr4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"attr5\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownershipTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_itemID\",\"type\":\"uint256\"}],\"name\":\"ItemUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_itemID\",\"type\":\"uint256\"}],\"name\":\"ItemCreate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_itemID\",\"type\":\"uint256\"}],\"name\":\"ItemUnlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"preAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminTransferred\",\"type\":\"event\"}]","ContractName":"SpecialSoldiers","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://15c0410300272ef04cfac5f5463ef477d435075b99f2a9f53f6a4dda7af340ae"}]}