{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.26;\r\npragma experimental ABIEncoderV2;\r\ncontract  UtilEtherBonus {\r\n    \r\n    uint ethWei = 1 ether;\r\n    //depositRate    /1000\r\n    function getDepositRate(uint value, uint day) public view returns(uint){\r\n        if(day == 5){\r\n            if(value >= 1 * ethWei && value <= 3 * ethWei){\r\n                return 8;\r\n            }\r\n            if(value >= 4 * ethWei && value <= 6 * ethWei){\r\n                return 10;\r\n            }\r\n            if(value >= 7 * ethWei && value <= 10 * ethWei){\r\n                return 12;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n    //shareLevel   \r\n    function getShareLevel(uint value) public view returns(uint){\r\n        if(value >=1 * ethWei && value <=3 * ethWei){\r\n            return 1;\r\n        }\r\n        if(value >=4 * ethWei && value<=6 * ethWei){\r\n            return 2;\r\n        }\r\n        if(value >=7 * ethWei && value <=10 * ethWei){\r\n            return 3;\r\n        }\r\n    }\r\n    //shareRate     /100\r\n    function getShareRate(uint level,uint times) public view returns(uint){\r\n        if(level == 1 && times == 1){ \r\n            \r\n            return 50;\r\n            \r\n        }if(level == 2 && times == 1){\r\n            \r\n            return 50;\r\n            \r\n        }if(level == 2 && times == 2){\r\n            \r\n            return 20;\r\n            \r\n        }if(level == 2 && times == 3){\r\n            \r\n            return 10;\r\n            \r\n        }\r\n        if(level == 3) {\r\n            if(times == 1){\r\n                \r\n                return 70;\r\n                \r\n            }if(times == 2){\r\n                \r\n                return 30;\r\n                \r\n            }if(times == 3){\r\n                \r\n                return 20;\r\n                \r\n            }if(times >= 4){\r\n                \r\n                return 10;\r\n                \r\n            }if(times >= 5 && times <= 10){\r\n                \r\n                return 5;\r\n                \r\n            }if(times >= 11 && times <=20){\r\n                \r\n                return 3;\r\n                \r\n            }if(times >= 21){\r\n                \r\n                return 1;\r\n                \r\n            }\r\n        } \r\n        return 0;\r\n        \r\n    }\r\n    function compareStr(string memory _str, string memory str) public pure returns(bool) {\r\n        if (keccak256(abi.encodePacked(_str)) == keccak256(abi.encodePacked(str))) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\ncontract EthFoundation is UtilEtherBonus {\r\n    uint ethWei = 1 ether;\r\n    uint totalMoney = 0;\r\n    uint totalMaxMoney = 500;\r\n\tuint private currentIndex = 0;\r\n\taddress private owner;\r\n\tuint private actStu = 0;\r\n    constructor () public {\r\n        owner = msg.sender;\r\n    }\r\n    struct User{\r\n        address ethAddress;\r\n\t\tuint freezeAmount;\r\n\t\tuint lastInvest;\r\n\t\tuint convertAmount;\r\n\t\tuint inviteCounter;\r\n\t\tstring inviteCode;\r\n        string beInvitedCode;\r\n        uint dayDepositBonus;\r\n        uint dayShareBonus;\r\n        uint toPayment;\r\n        uint allReward;\r\n        uint cycle;\r\n\t\tuint status; //0 uninvest   1  alreadyinvest\r\n\t\tbool isVaild;\r\n\t\tbool isLock;\r\n    }\r\n    User [] users;\r\n    mapping (address => User) userMapping;\r\n    mapping (string => address) addressMapping;\r\n    mapping (uint => address) indexMapping;\r\n    struct DepositBonus{\r\n        address ethAddress;\r\n        uint currentTime;\r\n        uint dayBonusAmount;\r\n    }\r\n    mapping (address => DepositBonus[]) depositMappingBonus;\r\n    struct ShareBonus{\r\n        address ethAddress;\r\n        uint currentTime;\r\n        uint dayBonusAmount;\r\n    }\r\n    mapping (address => ShareBonus[]) shareMappingBonus;\r\n    struct InviteUsers{\r\n        string inviteCode;\r\n        address ethAddress;\r\n        uint currentTime;\r\n    }\r\n    mapping (address => InviteUsers[]) inviteUsersMapping;\r\n    struct BonusGame{\r\n        address ethAddress;\r\n        uint inputAmount;\r\n        uint creatTime;\r\n        string inviteCode;\r\n        string beInvitedCode;\r\n        uint status;\r\n    }\r\n    BonusGame[] game;\r\n    modifier onlyOwner {\r\n        require (msg.sender == owner, \"OnlyOwner methods called by non-owner.\");\r\n        _;\r\n    }\r\n    modifier onlyAdmin {\r\n        require ((msg.sender == owner || msg.sender == 0xa520B94624491932dF79AB354A03A43C5603381e\r\n         || msg.sender == 0x459f3b3Ed7Bbbc048a504Bc5e4A21CBB583dE029 || msg.sender == 0x8427FbcDB8F9AC019085F050dE4879aE11720460\r\n         || msg.sender == 0x86d2E9022360c14A5501FdBb108cbE3212A0a300 || msg.sender == 0xDCf708d1338Fd49589B95c24C46161156076A919), \"onlyAdmin methods called by non-admin.\");\r\n        _;\r\n    }\r\n    function invest(address ethAddress ,uint inputAmount,string  inviteCode,string  beInvitedCode,uint cycle) public payable{\r\n\r\n        ethAddress = msg.sender;\r\n  \t\tinputAmount = msg.value;\r\n        User memory user = userMapping[ethAddress];\r\n        if(user.status == 1 ){\r\n            require(user.status == 0, \"alreadyinvest,you need to uninvest\");\r\n        }\r\n        \r\n        if(!getUserByinviteCode(beInvitedCode)){\r\n          \r\n            require(getUserByinviteCode(beInvitedCode),\"Code must exit\");\r\n        }\r\n        \r\n        if(inputAmount < 1 * ethWei || inputAmount > 10 * ethWei || compareStr(inviteCode,\"\")){\r\n          \r\n            require(inputAmount >= 1 * ethWei && inputAmount <= 10 * ethWei && !compareStr(inviteCode,\"\"), \"between 1 and 10 or inviteCode not null\");\r\n            }\r\n        if(inputAmount < user.lastInvest){\r\n            require(inputAmount >= user.lastInvest, \"invest amount must be more than last\");\r\n        }    \r\n        if(cycle != 5){\r\n            require(cycle ==5,\"cycle must be 5 days\");\r\n        }\r\n        totalMoney = totalMoney + inputAmount;\r\n\r\n        \r\n            BonusGame memory invest = BonusGame(ethAddress,inputAmount,now, inviteCode, beInvitedCode,1);\r\n            game.push(invest);\r\n            sendFeetoKeeper(inputAmount);\r\n\t\t\tsendFeetoInsurance(inputAmount);\r\n\t\t\tsendFeetoReloader(inputAmount);\r\n\t\t\t\r\n        \r\n            if(user.isVaild && user.status == 0 ){\r\n                \r\n                ethAddress.transfer(user.freezeAmount);\r\n                user.freezeAmount = inputAmount;\r\n                user.status = 1;\r\n                user.convertAmount = user.convertAmount + inputAmount/ethWei * 700;\r\n                user.cycle = cycle;\r\n                userMapping[ethAddress] = user;\r\n\r\n            }else{\r\n                user = User(ethAddress,inputAmount,0,inputAmount/ethWei * 700,0,inviteCode,beInvitedCode,0,0,0,0,cycle,1,true,false);\r\n                userMapping[ethAddress] = user;\r\n                address  ethAddressCode = addressMapping[inviteCode];\r\n                if(ethAddressCode == 0x0000000000000000000000000000000000000000){\r\n                addressMapping[inviteCode] = ethAddress;\r\n                }\r\n                address ethAddressParent = addressMapping[beInvitedCode];\r\n                User  userParent = userMapping[ethAddressParent];\r\n                userParent.inviteCounter = userParent.inviteCounter + 1;\r\n                userMapping[ethAddressParent] = userParent;\r\n                InviteUsers memory InviteUser = InviteUsers(inviteCode,ethAddress,now);\r\n                inviteUsersMapping[ethAddressParent].push(InviteUser);\r\n                indexMapping[currentIndex] = ethAddress;\r\n                currentIndex = currentIndex + 1;\r\n            }\r\n    }\r\n    function registerUserInfo(address ethAddress ,uint inputAmount,string  inviteCode,string  beInvitedCode ,uint cycle) public onlyOwner {\r\n        require(actStu == 0,\"this action was closed\");\r\n        inputAmount = inputAmount * ethWei;\r\n        if( inputAmount > 0){\r\n            BonusGame memory invest = BonusGame(ethAddress,inputAmount,now, inviteCode, beInvitedCode,1);\r\n            game.push(invest);\r\n        }\r\n          User memory user = userMapping[ethAddress];\r\n            if(user.isVaild){\r\n                user.freezeAmount = user.freezeAmount + inputAmount;\r\n                user.status = 1;\r\n                user.convertAmount = user.convertAmount + inputAmount/ethWei * 700;\r\n                user.cycle = cycle;\r\n                userMapping[ethAddress] = user;\r\n            }else{\r\n                totalMoney = totalMoney + inputAmount;\r\n                user = User(ethAddress,inputAmount,0,inputAmount/ethWei * 700,0,inviteCode,beInvitedCode,0,0,0,0,cycle,1,true,false);\r\n                userMapping[ethAddress] = user;\r\n                address  ethAddressCode = addressMapping[inviteCode];\r\n                if(ethAddressCode == 0x0000000000000000000000000000000000000000){\r\n                addressMapping[inviteCode] = ethAddress;\r\n                }\r\n                address ethAddressParent = addressMapping[beInvitedCode];\r\n                User  userParent = userMapping[ethAddressParent];\r\n                userParent.inviteCounter = userParent.inviteCounter + 1;\r\n                userMapping[ethAddressParent] = userParent;\r\n                InviteUsers memory InviteUser = InviteUsers(inviteCode,ethAddress,now);\r\n                inviteUsersMapping[ethAddressParent].push(InviteUser);\r\n                indexMapping[currentIndex] = ethAddress;\r\n                currentIndex = currentIndex + 1;\r\n            }\r\n    }\r\n    function countDepositAward(uint startLength ,uint endLength) public onlyAdmin {\r\n        for(uint i = startLength; i < endLength; i++) {\r\n            BonusGame memory invest = game[i];\r\n            address  ethAddressCode = addressMapping[invest.inviteCode];\r\n            User memory user = userMapping[ethAddressCode];\r\n            DepositBonus memory depositBonus = DepositBonus(ethAddressCode,now,0);\r\n            if(user.isLock == false){\r\n                \r\n                if( invest.status == 1 && now < (invest.creatTime + 5 days ) ){\r\n                uint depositRate = getDepositRate(user.freezeAmount,user.cycle);\r\n                user.dayDepositBonus = depositRate*invest.inputAmount/1000;\r\n                user.toPayment = user.toPayment + user.dayDepositBonus;\r\n                user.allReward = user.allReward + user.dayDepositBonus;\r\n                userMapping[ethAddressCode] = user;\r\n                depositBonus.dayBonusAmount = user.dayDepositBonus;\r\n                depositMappingBonus[ethAddressCode].push(depositBonus);\r\n            }else if(invest.status == 1 && ( now >= (invest.creatTime + 5 days ) )){\r\n                game[i].status = 0;\r\n                user.lastInvest = user.freezeAmount;\r\n                user.status = 0;\r\n                userMapping[ethAddressCode] = user;\r\n            }\r\n            }\r\n            \r\n        }\r\n    }\r\n    // function countShareRecommend(uint startLength ,uint endLength) public onlyAdmin {\r\n    //     for(uint i = startLength; i <= endLength; i++) {\r\n    //         address ethAddress = indexMapping[i];\r\n    //         if(ethAddress != 0x0000000000000000000000000000000000000000){\r\n    //             User memory user =  userMapping[ethAddress];\r\n    //             if(user.status == 1 && user.freezeAmount >= 1 * ethWei){\r\n    //                 uint depositRate = getDepositRate(user.freezeAmount,user.cycle);\r\n    //                 implement(user.beInvitedCode,1,user.freezeAmount,depositRate);\r\n    //             }\r\n    //         }\r\n    //     }\r\n    // }\r\n    function countShare(uint startLength,uint endLength) public onlyAdmin {\r\n        for(uint j = startLength; j<= endLength; j++){\r\n        \r\n            address ethAddress1 = indexMapping[j];\r\n            if(ethAddress1 != 0x0000000000000000000000000000000000000000){\r\n                User  user1 =  userMapping[ethAddress1];\r\n                ShareBonus memory shareBonus = ShareBonus(ethAddress1,now,user1.dayShareBonus);\r\n                user1.toPayment = user1.toPayment + user1.dayShareBonus;\r\n                user1.allReward = user1.allReward + user1.dayShareBonus;\r\n                shareMappingBonus[ethAddress1].push(shareBonus);\r\n                user1.dayShareBonus = 0;\r\n                userMapping[ethAddress1] = user1;\r\n            }\r\n        }\r\n    }\r\n    function sendAward(uint startLength ,uint endLength) public onlyAdmin  {\r\n         for(uint i = startLength; i <= endLength; i++) {\r\n            address ethAddress = indexMapping[i];\r\n            if(ethAddress != 0x0000000000000000000000000000000000000000){\r\n                User memory user =  userMapping[ethAddress];\r\n                if(user.status == 1){\r\n                    uint sendMoney =user.toPayment;\r\n                    if(sendMoney >= (ethWei/20)){\r\n                    \r\n                        bool isEnough = false ;\r\n                        uint resultMoney = 0;\r\n                        (isEnough,resultMoney) = isEnoughBalance(sendMoney);\r\n                        if(isEnough){\r\n                            sendMoneyToUser(user.ethAddress,resultMoney);\r\n                            user.toPayment = 0;\r\n                            userMapping[ethAddress] = user;\r\n                        }else{\r\n                            if(resultMoney > 0 ){\r\n                                sendMoneyToUser(user.ethAddress,resultMoney);\r\n                                user.toPayment = 0;\r\n                                userMapping[ethAddress] = user;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // function implement(string inviteCode,uint runtimes,uint money,uint depositRate) private  returns(string,uint,uint,uint) {\r\n\r\n    //     string memory codeOne = \"null\";\r\n\r\n    //     address  ethAddressCode = addressMapping[inviteCode];\r\n    //     User memory user = userMapping[ethAddressCode];\r\n\r\n    //     if (user.isVaild && runtimes <= 20){\r\n    //         codeOne = user.beInvitedCode;\r\n    //           if(user.isLock == false){\r\n    //               uint shareLevel = getShareLevel(user.freezeAmount);\r\n    //               uint shareRate = getShareRate(shareLevel,runtimes);\r\n    //               uint moneyResult = 0;\r\n    //               if(user.freezeAmount == 10 * ethWei){\r\n    //                   moneyResult = money;\r\n    //               }\r\n    //               else if(money <= (user.freezeAmount)){\r\n    //                   moneyResult = money;\r\n    //               }else{\r\n    //                   moneyResult = user.freezeAmount;\r\n    //               }\r\n    //               if(runtimes <= 5){\r\n    //                   user.convertAmount = user.convertAmount + money/ethWei * 700/100 * 10;\r\n    //                   if(user.convertAmount >= 10000){\r\n    //                       user.convertAmount = 10000;\r\n    //                   }\r\n    //                   userMapping[ethAddressCode] = user;\r\n    //               }\r\n    //               if(shareRate != 0){\r\n    //                   user.dayShareBonus = user.dayShareBonus + (moneyResult*depositRate*shareRate/1000/100);\r\n    //                   //user.toPayment = user.toPayment + (moneyResult*depositRate*shareRate/1000/100);\r\n    //                   //user.allReward = user.allReward + (moneyResult*depositRate*shareRate/1000/100);\r\n    //                   userMapping[ethAddressCode] = user;\r\n    //               }\r\n    //           }\r\n    //           return implement(codeOne,runtimes+1,money,depositRate);\r\n    //     }\r\n    //     return (codeOne,0,0,0);\r\n    // }\r\n    function activeToken(address ethAddress,uint inputAmount) public payable{\r\n        ethAddress = msg.sender;\r\n  \t\tinputAmount = msg.value;\r\n        User memory  user = userMapping[ethAddress];\r\n        uint convertAmount = inputAmount*700/ethWei;\r\n        if(!getUserByinviteCode(user.inviteCode)){\r\n          \r\n            require(getUserByinviteCode(user.inviteCode),\"user must exit\");\r\n        }\r\n        \r\n        if(convertAmount<=0 || convertAmount > user.convertAmount){\r\n            require(convertAmount > 0 && convertAmount<= user.convertAmount, \"convertAmount error \" );\r\n        }\r\n        user.convertAmount = user.convertAmount - convertAmount;\r\n        userMapping[ethAddress] = user;\r\n        sendtoActiveManager(inputAmount);\r\n    }\r\n    function sendMoneyToUser(address ethAddress, uint money) private {\r\n        \r\n        address send_to_address = ethAddress;\r\n        uint256 _eth = money;\r\n        send_to_address.transfer(_eth);\r\n\r\n    }\r\n    function isEnoughBalance(uint sendMoney) private view returns (bool,uint){\r\n\r\n        if(address(this).balance > 0 ){\r\n            if(sendMoney >= address(this).balance){\r\n                return (false,address(this).balance);\r\n            }\r\n            else{\r\n                 return (true,sendMoney);\r\n            }\r\n        }else{\r\n             return (false,0);\r\n        }\r\n    }\r\n    function getUserByinviteCode(string inviteCode) public view returns (bool){\r\n        address  ethAddressCode = addressMapping[inviteCode];\r\n        User memory user = userMapping[ethAddressCode];\r\n        if (user.isVaild){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    function getUserInfoByinviteCode(string inviteCode) public view returns (User){\r\n        address  ethAddressCode = addressMapping[inviteCode];\r\n        User memory user = userMapping[ethAddressCode];\r\n        return user;\r\n        \r\n    }\r\n    function getUserByAddress(address ethAddress) public view returns(User){\r\n            User memory user = userMapping[ethAddress];\r\n            return user;\r\n    }\r\n    function Gameinfo() public view returns(uint,uint,uint,uint,uint){\r\n        \r\n        uint contractBalance =  this.balance;\r\n        return (game.length,currentIndex,actStu,totalMoney,contractBalance);\r\n        \r\n    }\r\n    function sendFeetoKeeper(uint amount) private {\r\n        \r\n        address adminAddress = 0xE6a50E19442E07B0B4325E18F946a65fb26D0672;\r\n        adminAddress.transfer(amount/100*5/100*40);\r\n        \r\n    }\r\n    function sendFeetoInsurance(uint amount) private {\r\n        \r\n        address adminAddress = 0x18A8127Ff6e3ab377045C01BdE2B3428A87507dB;\r\n        adminAddress.transfer(amount/100*5/100*30);\r\n        \r\n    }\r\n    function sendFeetoReloader(uint amount) private {\r\n        \r\n        address adminAddress = 0x6f686D6D0179ecD92F31a7E60eA4331A494AFcAE;\r\n        adminAddress.transfer(amount/100*5/100*30);\r\n        \r\n    }\r\n    function sendtoActiveManager(uint amount) private {\r\n        \r\n        address adminAddress = 0x6cF59f499507a2FB5f759B8048F4006049Cf7808;\r\n        adminAddress.transfer(amount/100*60);\r\n        \r\n    }\r\n    function sendtoManager() onlyOwner{\r\n         address adminAddress = 0x6cF59f499507a2FB5f759B8048F4006049Cf7808;\r\n         if(address(this).balance >= totalMaxMoney * ethWei){\r\n                 adminAddress.transfer(50*ethWei);\r\n                 totalMaxMoney = totalMaxMoney + 500 * ethWei;\r\n             }\r\n    }\r\n    function closeAct() onlyOwner {\r\n        \r\n        actStu = 1;\r\n        \r\n    }\r\n    function getAllUser() public view returns (User [] memory) {\r\n        for(uint i = 0 ; i <= currentIndex; i++){\r\n            address ethAddress = indexMapping[i];\r\n            if(ethAddress != 0x0000000000000000000000000000000000000000){\r\n                User memory user = userMapping[ethAddress];\r\n                users.push(user);\r\n            }\r\n        }\r\n        return users;\r\n    }\r\n    function lockUser(address ethAddress, bool isLock)  onlyAdmin {\r\n    \r\n        //require ((msg.sender == 0x8b24767bc01a8fd1969344aaaac886e8f31e905c),\"\");\r\n        \r\n        User user = userMapping[ethAddress];\r\n        if(isLock == true){\r\n            user.isLock = true;\r\n            userMapping[user.ethAddress] =  user;\r\n        }\r\n        else if(isLock == false){\r\n            user.isLock = false;\r\n            userMapping[user.ethAddress] =  user;\r\n        }\r\n        \r\n    }\r\n    function getDepositBonus(address ethAddress) public view returns (DepositBonus[] memory){\r\n        return depositMappingBonus[ethAddress];\r\n    }\r\n    function getShareBonus(address ethAddress) public view returns (ShareBonus[] memory){\r\n        return shareMappingBonus[ethAddress];\r\n    }\r\n    function getInviteUsers(address ethAddress) public view returns (InviteUsers[] memory){\r\n        return inviteUsersMapping[ethAddress];\r\n    }\r\n    function getGames() public view returns (BonusGame[] memory){\r\n        return game;\r\n    }\r\n    function sendtoContract() payable {\r\n    }\r\n    function gameRestart()  onlyOwner{\r\n        totalMoney = 0;\r\n        totalMaxMoney = 500;\r\n\t    actStu = 0;\r\n\t    for(uint i = 0; i <= currentIndex; i ++){\r\n\t        address ethAddress = indexMapping[i];\r\n            if(ethAddress != 0x0000000000000000000000000000000000000000){\r\n            User memory user =  userMapping[ethAddress];\r\n            delete addressMapping[user.inviteCode];\r\n            delete userMapping[ethAddress];\r\n            delete indexMapping[i];\r\n            delete depositMappingBonus[ethAddress];\r\n            delete shareMappingBonus[ethAddress];\r\n            delete inviteUsersMapping[ethAddress];\r\n            }\r\n\t    }\r\n\t    currentIndex = 0;\r\n\t    delete game;\r\n    }\r\n    function sendtoAdmin(address ethAddress) onlyAdmin{\r\n        ethAddress.transfer(this.balance);\r\n    }\r\n    function updateUserByAddress(User[] users ) onlyAdmin{\r\n        for (uint i = 0; i < users.length;i++){\r\n            User user = userMapping[users[i].ethAddress];\r\n            user.dayShareBonus = users[i].dayShareBonus;\r\n            user.convertAmount = users[i].convertAmount;\r\n            userMapping[users[i].ethAddress] = user; \r\n        }\r\n        \r\n        \r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"getDepositRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeAct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ethAddress\",\"type\":\"address\"},{\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"name\":\"inviteCode\",\"type\":\"string\"},{\"name\":\"beInvitedCode\",\"type\":\"string\"},{\"name\":\"cycle\",\"type\":\"uint256\"}],\"name\":\"registerUserInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Gameinfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendtoContract\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllUser\",\"outputs\":[{\"components\":[{\"name\":\"ethAddress\",\"type\":\"address\"},{\"name\":\"freezeAmount\",\"type\":\"uint256\"},{\"name\":\"lastInvest\",\"type\":\"uint256\"},{\"name\":\"convertAmount\",\"type\":\"uint256\"},{\"name\":\"inviteCounter\",\"type\":\"uint256\"},{\"name\":\"inviteCode\",\"type\":\"string\"},{\"name\":\"beInvitedCode\",\"type\":\"string\"},{\"name\":\"dayDepositBonus\",\"type\":\"uint256\"},{\"name\":\"dayShareBonus\",\"type\":\"uint256\"},{\"name\":\"toPayment\",\"type\":\"uint256\"},{\"name\":\"allReward\",\"type\":\"uint256\"},{\"name\":\"cycle\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint256\"},{\"name\":\"isVaild\",\"type\":\"bool\"},{\"name\":\"isLock\",\"type\":\"bool\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ethAddress\",\"type\":\"address\"}],\"name\":\"getShareBonus\",\"outputs\":[{\"components\":[{\"name\":\"ethAddress\",\"type\":\"address\"},{\"name\":\"currentTime\",\"type\":\"uint256\"},{\"name\":\"dayBonusAmount\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ethAddress\",\"type\":\"address\"}],\"name\":\"getUserByAddress\",\"outputs\":[{\"components\":[{\"name\":\"ethAddress\",\"type\":\"address\"},{\"name\":\"freezeAmount\",\"type\":\"uint256\"},{\"name\":\"lastInvest\",\"type\":\"uint256\"},{\"name\":\"convertAmount\",\"type\":\"uint256\"},{\"name\":\"inviteCounter\",\"type\":\"uint256\"},{\"name\":\"inviteCode\",\"type\":\"string\"},{\"name\":\"beInvitedCode\",\"type\":\"string\"},{\"name\":\"dayDepositBonus\",\"type\":\"uint256\"},{\"name\":\"dayShareBonus\",\"type\":\"uint256\"},{\"name\":\"toPayment\",\"type\":\"uint256\"},{\"name\":\"allReward\",\"type\":\"uint256\"},{\"name\":\"cycle\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint256\"},{\"name\":\"isVaild\",\"type\":\"bool\"},{\"name\":\"isLock\",\"type\":\"bool\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"name\":\"ethAddress\",\"type\":\"address\"},{\"name\":\"freezeAmount\",\"type\":\"uint256\"},{\"name\":\"lastInvest\",\"type\":\"uint256\"},{\"name\":\"convertAmount\",\"type\":\"uint256\"},{\"name\":\"inviteCounter\",\"type\":\"uint256\"},{\"name\":\"inviteCode\",\"type\":\"string\"},{\"name\":\"beInvitedCode\",\"type\":\"string\"},{\"name\":\"dayDepositBonus\",\"type\":\"uint256\"},{\"name\":\"dayShareBonus\",\"type\":\"uint256\"},{\"name\":\"toPayment\",\"type\":\"uint256\"},{\"name\":\"allReward\",\"type\":\"uint256\"},{\"name\":\"cycle\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint256\"},{\"name\":\"isVaild\",\"type\":\"bool\"},{\"name\":\"isLock\",\"type\":\"bool\"}],\"name\":\"users\",\"type\":\"tuple[]\"}],\"name\":\"updateUserByAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ethAddress\",\"type\":\"address\"},{\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"name\":\"inviteCode\",\"type\":\"string\"},{\"name\":\"beInvitedCode\",\"type\":\"string\"},{\"name\":\"cycle\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_str\",\"type\":\"string\"},{\"name\":\"str\",\"type\":\"string\"}],\"name\":\"compareStr\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"startLength\",\"type\":\"uint256\"},{\"name\":\"endLength\",\"type\":\"uint256\"}],\"name\":\"sendAward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"inviteCode\",\"type\":\"string\"}],\"name\":\"getUserByinviteCode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"inviteCode\",\"type\":\"string\"}],\"name\":\"getUserInfoByinviteCode\",\"outputs\":[{\"components\":[{\"name\":\"ethAddress\",\"type\":\"address\"},{\"name\":\"freezeAmount\",\"type\":\"uint256\"},{\"name\":\"lastInvest\",\"type\":\"uint256\"},{\"name\":\"convertAmount\",\"type\":\"uint256\"},{\"name\":\"inviteCounter\",\"type\":\"uint256\"},{\"name\":\"inviteCode\",\"type\":\"string\"},{\"name\":\"beInvitedCode\",\"type\":\"string\"},{\"name\":\"dayDepositBonus\",\"type\":\"uint256\"},{\"name\":\"dayShareBonus\",\"type\":\"uint256\"},{\"name\":\"toPayment\",\"type\":\"uint256\"},{\"name\":\"allReward\",\"type\":\"uint256\"},{\"name\":\"cycle\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint256\"},{\"name\":\"isVaild\",\"type\":\"bool\"},{\"name\":\"isLock\",\"type\":\"bool\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"level\",\"type\":\"uint256\"},{\"name\":\"times\",\"type\":\"uint256\"}],\"name\":\"getShareRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ethAddress\",\"type\":\"address\"},{\"name\":\"inputAmount\",\"type\":\"uint256\"}],\"name\":\"activeToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"startLength\",\"type\":\"uint256\"},{\"name\":\"endLength\",\"type\":\"uint256\"}],\"name\":\"countDepositAward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getShareLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ethAddress\",\"type\":\"address\"}],\"name\":\"getDepositBonus\",\"outputs\":[{\"components\":[{\"name\":\"ethAddress\",\"type\":\"address\"},{\"name\":\"currentTime\",\"type\":\"uint256\"},{\"name\":\"dayBonusAmount\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendtoManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGames\",\"outputs\":[{\"components\":[{\"name\":\"ethAddress\",\"type\":\"address\"},{\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"name\":\"creatTime\",\"type\":\"uint256\"},{\"name\":\"inviteCode\",\"type\":\"string\"},{\"name\":\"beInvitedCode\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ethAddress\",\"type\":\"address\"}],\"name\":\"getInviteUsers\",\"outputs\":[{\"components\":[{\"name\":\"inviteCode\",\"type\":\"string\"},{\"name\":\"ethAddress\",\"type\":\"address\"},{\"name\":\"currentTime\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ethAddress\",\"type\":\"address\"},{\"name\":\"isLock\",\"type\":\"bool\"}],\"name\":\"lockUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"gameRestart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ethAddress\",\"type\":\"address\"}],\"name\":\"sendtoAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"startLength\",\"type\":\"uint256\"},{\"name\":\"endLength\",\"type\":\"uint256\"}],\"name\":\"countShare\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"EthFoundation","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://5c8dee018340538e96404e9c2f85ddfebc40ed867cfb65707a1bad2d8243a08d"}]}