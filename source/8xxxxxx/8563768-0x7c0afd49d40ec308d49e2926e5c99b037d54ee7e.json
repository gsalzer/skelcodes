{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.11;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;}\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");}\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;}\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {return 0;}\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;}\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");}\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;}\r\n}\r\n\r\ncontract Secondary {\r\n    address private _primary;\r\n    address private _primaryCandidate;\r\n\r\n    constructor () internal {\r\n        _primary = msg.sender;\r\n        _primaryCandidate = address(0);\r\n    }\r\n\r\n    modifier onlyPrimary() {\r\n        require(msg.sender == _primary, \"Secondary: caller is not the primary account\");\r\n        _;\r\n    }\r\n\r\n    function primary() public view returns (address) {\r\n        return _primary;\r\n    }\r\n    \r\n    function acceptBeingPrimary() public {\r\n        require(msg.sender == _primaryCandidate, \"Secondary: caller is not the primary candidate account\");\r\n        require(msg.sender != address(0));\r\n        \r\n        _primary = _primaryCandidate;\r\n        _primaryCandidate = address(0);\r\n    }\r\n\r\n    function setPrimaryCandidate(address recipient) public onlyPrimary {\r\n        require(recipient != _primary);\r\n        _primaryCandidate = recipient;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract assetContractable is Secondary{\r\n    mapping(address=>bool) private _assetContracts;\r\n    \r\n    modifier onlyAssetContracts() {\r\n        require(_assetContracts[msg.sender], \"You cannot call this function!\");\r\n        _;\r\n    }\r\n    \r\n    function assetContracts(address input) public view returns (bool) {\r\n        return _assetContracts[input];\r\n    }\r\n \r\n    function addAssetContracts(address input) public onlyPrimary{\r\n         require(input != address(this));\r\n         require(input != msg.sender);\r\n         require(input != address(0));\r\n         require(!assetContracts(input));\r\n         \r\n        _assetContracts[input] = true;\r\n    }\r\n    \r\n    function removeAssetContracts(address input) public onlyPrimary{\r\n         require(assetContracts(input));\r\n        _assetContracts[input] = false;\r\n    }\r\n    \r\n}\r\n\r\ninterface EthPricer{\r\n    function ethUpper() external view returns (uint256);\r\n    function ethLower() external view returns (uint256);\r\n}\r\n\r\ncontract EthPriceable is assetContractable{\r\n    \r\n    address private _ethPricerAddress;\r\n    \r\n    function ethUpper() internal view returns (uint256) {\r\n        return EthPricer(_ethPricerAddress).ethUpper();\r\n    }\r\n    \r\n    function ethLower() internal view returns (uint256) {\r\n        return EthPricer(_ethPricerAddress).ethLower();\r\n    }\r\n    \r\n    function setEthPricerAddress(address input) public onlyPrimary {\r\n        require(input != address(this));\r\n        require(!assetContracts(input));\r\n        require(input != msg.sender);\r\n        require(input != address(0));\r\n    \r\n        _ethPricerAddress = input;\r\n    }\r\n    \r\n    function ethPricerAddress() public view onlyAssetContracts returns (address) {\r\n        return _ethPricerAddress;\r\n    }\r\n\r\n}\r\n\r\ninterface Assetcontract{\r\n    function assetPricerAddress() external view returns (address payable);\r\n    function AssetMint(address sender, uint256 valuesent) external;\r\n    function isShort() external view returns (bool);\r\n}\r\n\r\ninterface AssetPricer{\r\n    function updateAssetPrice() external payable returns (bytes32);\r\n    function Fee() external returns (uint256);\r\n    function assetUpper(bool isShort) external view returns (uint256);\r\n    function assetLower(bool isShort) external view returns (uint256);\r\n    function updateGasPrice() external;\r\n}\r\n\r\ncontract AssetPriceGettable is assetContractable{\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    uint256 internal _multiplier = 0;\r\n    \r\n    function multiplier() public view onlyAssetContracts returns (uint256) {\r\n        return _multiplier;\r\n    }\r\n    \r\n    function setMultiplier(uint256 input) public onlyPrimary {\r\n        require(input <= 9999999900);\r\n        _multiplier = input;\r\n    }\r\n    \r\n    function aPA(address assetContractAddress) private view returns (address){\r\n        return Assetcontract(assetContractAddress).assetPricerAddress();\r\n    }\r\n\r\n    function Fee(address aCA) internal returns (uint256) {\r\n        AssetPricer(aPA(aCA)).updateGasPrice();\r\n        uint fee = AssetPricer(aPA(aCA)).Fee();\r\n        return (fee.mul(_multiplier.add(100))).div(100);\r\n    }\r\n    \r\n    function assetUpper(address aCA) internal view returns (uint256) {\r\n        bool isShort = Assetcontract(aCA).isShort();\r\n        return AssetPricer(aPA(aCA)).assetUpper(isShort);\r\n    }\r\n    \r\n    function assetLower(address aCA) internal view returns (uint256) {\r\n        bool isShort = Assetcontract(aCA).isShort();\r\n        return AssetPricer(aPA(aCA)).assetLower(isShort);\r\n    }\r\n\r\n    function updateAssetPrice(address aCA) internal returns (bytes32) {\r\n        address payable sendto = address(uint160(aPA(aCA)));\r\n        AssetPricer(sendto).updateGasPrice();\r\n        return AssetPricer(sendto).updateAssetPrice.value(AssetPricer(sendto).Fee())();\r\n    }\r\n    \r\n    function isAssetPricerAddress(address aCA, address input) internal view returns (bool) {\r\n        return aPA(aCA) == input;\r\n    }\r\n\r\n}\r\n\r\ncontract ERC20 is IERC20, EthPriceable, AssetPriceGettable{\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    \r\n    uint constant internal DECIMAL = 10**18;\r\n    \r\n    mapping(bytes32=>customer) internal Customers;\r\n    mapping(uint=>uint) private withdrawPerBlock;\r\n    \r\n    enum IdType { gettingAsset, gettingUSD}\r\n    \r\n    struct customer { \r\n        address sender;\r\n        uint256 valuesent;\r\n        address Assetcontract;\r\n        IdType mytype;\r\n    }\r\n    \r\n    uint256 private withdrawThreshold = 1;\r\n    \r\n    function updateWithdrawThreshold(uint256 _withdrawThreshold) public onlyPrimary {\r\n        withdrawThreshold = _withdrawThreshold;\r\n    }\r\n    \r\n    //Max you can withdraw in USD per block\r\n    function withdrawMAX() public view returns (uint256){\r\n        \r\n        uint usdMAX = (address(this).balance.mul(ethUpper())).div(withdrawThreshold.mul(DECIMAL));\r\n      \r\n        if(withdrawPerBlock[block.number] < usdMAX){\r\n            return usdMAX.sub(withdrawPerBlock[block.number]);\r\n        }else{\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        \r\n        if(recipient == address(this)){\r\n            require(amount <= withdrawMAX(), \"Amount sent is too big\");\r\n            withdrawPerBlock[block.number] = withdrawPerBlock[block.number].add(amount);\r\n            \r\n            _burn(sender,amount);\r\n            address payable sendto = address(uint160(sender));\r\n            sendto.transfer(amount.mul(DECIMAL).div(ethUpper()));\r\n            \r\n        }else if(assetContracts(recipient)){\r\n\r\n           uint USDFee = (Fee(recipient).mul(ethUpper())).div(DECIMAL);\r\n           require(amount > USDFee, \"Amount sent is too small\");\r\n           \r\n           _burn(sender,amount);\r\n           bytes32 CustomerId = updateAssetPrice(recipient);\r\n           Customers[CustomerId] = customer(sender, amount.sub(USDFee), recipient, IdType.gettingAsset);\r\n            \r\n        }else{\r\n            _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n        }\r\n        \r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount,address sender ) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(sender, account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(value, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(value);\r\n    }\r\n    \r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n   \r\n}\r\n\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\ninterface token {\r\n    function balanceOf(address input) external returns (uint256);\r\n    function transfer(address input, uint amount) external;\r\n}\r\n\r\ncontract MainToken is ERC20, ERC20Detailed{\r\n\r\n    constructor () public ERC20Detailed(\"Onyx USD\", \"OUSD\", 18){\r\n        _mint(primary(),10**18, address(this));\r\n    }\r\n    \r\n    function () external payable {\r\n        uint256 amount = (msg.value.mul(ethLower())).div(DECIMAL);\r\n        _mint(msg.sender,amount,address(this));\r\n    }\r\n    \r\n    function sendFunds() external payable {}\r\n    \r\n    function USDtrade(address sender, uint assetAmount) public onlyAssetContracts{\r\n       bytes32 customerId = updateAssetPrice(msg.sender);\r\n       Customers[customerId] = customer(sender, assetAmount, msg.sender,IdType.gettingUSD);\r\n    }\r\n    \r\n    function assetPriceUpdated(bytes32 customerId, bool marketOpen) public {\r\n       address sender    = Customers[customerId].sender;\r\n       uint256 valuesent = Customers[customerId].valuesent;\r\n       address AC        = Customers[customerId].Assetcontract;\r\n       IdType mytype     = Customers[customerId].mytype;\r\n       \r\n       require(isAssetPricerAddress(AC, msg.sender));\r\n       require(msg.sender != address(0));\r\n       \r\n       if(mytype == IdType.gettingUSD){\r\n\r\n            if(marketOpen){\r\n               uint amount = ((valuesent.mul(AssetPricer(msg.sender).assetLower(Assetcontract(AC).isShort())).mul(100)).sub(AssetPricer(msg.sender).Fee().mul(_multiplier+100).mul(ethUpper())))/(10**20);\r\n               _mint(sender, amount, AC);\r\n               \r\n            }else{\r\n               uint amount = valuesent.sub((AssetPricer(msg.sender).Fee().mul(_multiplier+100).mul(ethUpper())).div(AssetPricer(msg.sender).assetLower(Assetcontract(AC).isShort()).mul(100)));\r\n               Assetcontract(AC).AssetMint(sender,amount); \r\n            }\r\n\r\n        }else if(mytype == IdType.gettingAsset){\r\n\r\n            if(marketOpen){\r\n               uint amount = (valuesent.mul(DECIMAL)).div(assetUpper(AC));\r\n               Assetcontract(AC).AssetMint(sender,amount);\r\n\r\n            }else{\r\n                _mint(sender, valuesent, AC);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function USDMint(address to, uint256 valuesent) public onlyPrimary{\r\n        _mint(to,valuesent, address(this));\r\n    }\r\n \r\n    function USDBurn(address to, uint256 valuesent) public onlyPrimary {\r\n        _burn(to,valuesent);\r\n        emit Transfer(to, address(this), valuesent);\r\n    }\r\n    \r\n    \r\n    function getStuckTokens(address _tokenAddress) public {\r\n        token(_tokenAddress).transfer(primary(), token(_tokenAddress).balanceOf(address(this)));\r\n    }\r\n   \r\n    function withdrawEth(uint256 amount) public onlyPrimary{\r\n        address payable sendto = address(uint160(primary()));\r\n        sendto.transfer(amount);\r\n    } \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ethPricerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valuesent\",\"type\":\"uint256\"}],\"name\":\"USDMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getStuckTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valuesent\",\"type\":\"uint256\"}],\"name\":\"USDBurn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"}],\"name\":\"USDtrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"input\",\"type\":\"address\"}],\"name\":\"addAssetContracts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"customerId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"marketOpen\",\"type\":\"bool\"}],\"name\":\"assetPriceUpdated\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"input\",\"type\":\"address\"}],\"name\":\"setEthPricerAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"input\",\"type\":\"uint256\"}],\"name\":\"setMultiplier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptBeingPrimary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawThreshold\",\"type\":\"uint256\"}],\"name\":\"updateWithdrawThreshold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendFunds\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"input\",\"type\":\"address\"}],\"name\":\"assetContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawMAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"setPrimaryCandidate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"primary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"input\",\"type\":\"address\"}],\"name\":\"removeAssetContracts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"MainToken","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://4aa60cf457e3809d25ed681d5c55b0c8d1158402839a26753da442bd629ad04b"}]}