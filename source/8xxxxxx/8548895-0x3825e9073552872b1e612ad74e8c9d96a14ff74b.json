{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * Copyright (C) 2018 Smartz, LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\").\r\n * You may not use this file except in compliance with the License.\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND (express or implied).\r\n */\r\n\r\npragma solidity ^0.4.20;\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Booking\r\n * @author Vladimir Khramov <vladimir.khramov@smartz.io>\r\n */\r\ncontract Ledger is Ownable {\r\n\r\n    function Ledger() public payable {\r\n\r\n        //empty element with id=0\r\n        records.push(Record('','',0));\r\n\r\n        \r\n        address(0xfF20387Dd4dbfA3e72AbC7Ee9B03393A941EE36E).transfer(4000000000000000 wei);\r\n        address(0xfF20387Dd4dbfA3e72AbC7Ee9B03393A941EE36E).transfer(16000000000000000 wei);\r\n            \r\n    }\r\n    \r\n    /************************** STRUCT **********************/\r\n    \r\n    struct Record {\r\nstring tweet;\r\nstring urlToTheScreenshotOfTweet;\r\nbytes32 hashOfScreenShot;\r\n    }\r\n    \r\n    /************************** EVENTS **********************/\r\n    \r\n    event RecordAdded(uint256 id, string tweet, string urlToTheScreenshotOfTweet, bytes32 hashOfScreenShot);\r\n    \r\n    /************************** CONST **********************/\r\n    \r\n    string public constant name = 'TrumpTweets'; \r\n    string public constant description = 'Donald Trumps Tweets'; \r\n    string public constant recordName = 'Tweets'; \r\n\r\n    /************************** PROPERTIES **********************/\r\n\r\n    Record[] public records;\r\n    mapping (bytes32 => uint256) tweet_mapping;\r\n    mapping (bytes32 => uint256) urlToTheScreenshotOfTweet_mapping;\r\n    mapping (bytes32 => uint256) hashOfScreenShot_mapping;\r\n\r\n    /************************** EXTERNAL **********************/\r\n\r\n    function addRecord(string _tweet,string _urlToTheScreenshotOfTweet,bytes32 _hashOfScreenShot) external onlyOwner returns (uint256) {\r\n        require(0==findIdByTweet(_tweet));\r\n        require(0==findIdByUrlToTheScreenshotOfTweet(_urlToTheScreenshotOfTweet));\r\n        require(0==findIdByHashOfScreenShot(_hashOfScreenShot));\r\n    \r\n    \r\n        records.push(Record(_tweet, _urlToTheScreenshotOfTweet, _hashOfScreenShot));\r\n        \r\n        tweet_mapping[keccak256(_tweet)] = records.length-1;\r\n        urlToTheScreenshotOfTweet_mapping[keccak256(_urlToTheScreenshotOfTweet)] = records.length-1;\r\n        hashOfScreenShot_mapping[(_hashOfScreenShot)] = records.length-1;\r\n        \r\n        RecordAdded(records.length - 1, _tweet, _urlToTheScreenshotOfTweet, _hashOfScreenShot);\r\n        \r\n        return records.length - 1;\r\n    }\r\n    \r\n    /************************** PUBLIC **********************/\r\n    \r\n    function getRecordsCount() public view returns(uint256) {\r\n        return records.length - 1;\r\n    }\r\n    \r\n    \r\n    function findByTweet(string _tweet) public view returns (uint256 id, string tweet, string urlToTheScreenshotOfTweet, bytes32 hashOfScreenShot) {\r\n        Record record = records[ findIdByTweet(_tweet) ];\r\n        return (\r\n            findIdByTweet(_tweet),\r\n            record.tweet, record.urlToTheScreenshotOfTweet, record.hashOfScreenShot\r\n        );\r\n    }\r\n    \r\n    function findIdByTweet(string tweet) internal view returns (uint256) {\r\n        return tweet_mapping[keccak256(tweet)];\r\n    }\r\n\r\n\r\n    function findByUrlToTheScreenshotOfTweet(string _urlToTheScreenshotOfTweet) public view returns (uint256 id, string tweet, string urlToTheScreenshotOfTweet, bytes32 hashOfScreenShot) {\r\n        Record record = records[ findIdByUrlToTheScreenshotOfTweet(_urlToTheScreenshotOfTweet) ];\r\n        return (\r\n            findIdByUrlToTheScreenshotOfTweet(_urlToTheScreenshotOfTweet),\r\n            record.tweet, record.urlToTheScreenshotOfTweet, record.hashOfScreenShot\r\n        );\r\n    }\r\n    \r\n    function findIdByUrlToTheScreenshotOfTweet(string urlToTheScreenshotOfTweet) internal view returns (uint256) {\r\n        return urlToTheScreenshotOfTweet_mapping[keccak256(urlToTheScreenshotOfTweet)];\r\n    }\r\n\r\n\r\n    function findByHashOfScreenShot(bytes32 _hashOfScreenShot) public view returns (uint256 id, string tweet, string urlToTheScreenshotOfTweet, bytes32 hashOfScreenShot) {\r\n        Record record = records[ findIdByHashOfScreenShot(_hashOfScreenShot) ];\r\n        return (\r\n            findIdByHashOfScreenShot(_hashOfScreenShot),\r\n            record.tweet, record.urlToTheScreenshotOfTweet, record.hashOfScreenShot\r\n        );\r\n    }\r\n    \r\n    function findIdByHashOfScreenShot(bytes32 hashOfScreenShot) internal view returns (uint256) {\r\n        return hashOfScreenShot_mapping[(hashOfScreenShot)];\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_tweet\",\"type\":\"string\"},{\"name\":\"_urlToTheScreenshotOfTweet\",\"type\":\"string\"},{\"name\":\"_hashOfScreenShot\",\"type\":\"bytes32\"}],\"name\":\"addRecord\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"records\",\"outputs\":[{\"name\":\"tweet\",\"type\":\"string\"},{\"name\":\"urlToTheScreenshotOfTweet\",\"type\":\"string\"},{\"name\":\"hashOfScreenShot\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecordsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tweet\",\"type\":\"string\"}],\"name\":\"findByTweet\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"tweet\",\"type\":\"string\"},{\"name\":\"urlToTheScreenshotOfTweet\",\"type\":\"string\"},{\"name\":\"hashOfScreenShot\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_urlToTheScreenshotOfTweet\",\"type\":\"string\"}],\"name\":\"findByUrlToTheScreenshotOfTweet\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"tweet\",\"type\":\"string\"},{\"name\":\"urlToTheScreenshotOfTweet\",\"type\":\"string\"},{\"name\":\"hashOfScreenShot\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recordName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_hashOfScreenShot\",\"type\":\"bytes32\"}],\"name\":\"findByHashOfScreenShot\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"tweet\",\"type\":\"string\"},{\"name\":\"urlToTheScreenshotOfTweet\",\"type\":\"string\"},{\"name\":\"hashOfScreenShot\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tweet\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"urlToTheScreenshotOfTweet\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"hashOfScreenShot\",\"type\":\"bytes32\"}],\"name\":\"RecordAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Ledger","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://44cd0cc2a3e03262ce73250fd1e323e81952f1358717f5df2b539e94c038657c"}]}