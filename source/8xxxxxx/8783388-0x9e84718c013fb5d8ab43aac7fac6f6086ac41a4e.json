{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ncontract Baccarat {\r\n\r\n    struct Card {\r\n        uint8 value;\r\n    }\r\n\r\n    mapping(uint256 => Card) private cards;\r\n    \r\n    event Result(string winner, uint8 player2CardPoint, uint8 banker2CardPoint, uint8 playerFinalPoint, uint8 bankerFinalPoint, uint256[] result);\r\n\r\n    constructor() public {\r\n        uint8 cardCount = 1;\r\n\r\n        for (uint8 x=1; x<=4; x++) {\r\n            for (uint8 y=1; y<=13; y++) {\r\n                if (y >= 10) {\r\n                    cards[cardCount] = Card(10);\r\n                } else {\r\n                    cards[cardCount] = Card(y);\r\n                }\r\n                cardCount ++;\r\n            } \r\n        }\r\n    }\r\n\r\n    function play() public {\r\n        uint256[] memory result = new uint[](6);\r\n        string memory winner = \"player\";\r\n        uint8 player2CardPoint;\r\n        uint8 banker2CardPoint;\r\n        uint8 playerFinalPoint;\r\n        uint8 bankerFinalPoint;\r\n        bool draws = false;\r\n        uint8 counter = 1;\r\n        uint8 total = 0;\r\n\r\n        for (uint8 i=0; i<4; i++) {\r\n            (result, total, counter) = uniqueRandom(result, total, counter);\r\n        }\r\n\r\n        player2CardPoint = (cards[result[0]].value + cards[result[2]].value) % 10;\r\n        banker2CardPoint = (cards[result[1]].value + cards[result[3]].value) % 10;\r\n        \r\n        if (player2CardPoint <= 5 && banker2CardPoint <= 7) {\r\n\r\n            (result, total, counter) = uniqueRandom(result, total, counter);\r\n\r\n            if (banker2CardPoint <= 2) {\r\n                draws = true;\r\n            }\r\n            else if (banker2CardPoint == 3 && cards[result[4]].value != 8) {\r\n                draws = true;\r\n            }\r\n            else if (banker2CardPoint == 4 && cards[result[4]].value >= 2 && cards[result[4]].value <= 7) {\r\n                draws = true;\r\n            }\r\n            else if (banker2CardPoint == 5 && cards[result[4]].value >= 4 && cards[result[4]].value <= 7) {\r\n                draws = true;\r\n            }\r\n            else if (banker2CardPoint == 6 && cards[result[4]].value >= 6 && cards[result[4]].value <= 7) {\r\n                draws = true;\r\n            }\r\n            \r\n            playerFinalPoint = (player2CardPoint + cards[result[4]].value) % 10;\r\n            \r\n            if (draws) {\r\n\r\n                (result, total, counter) = uniqueRandom(result, total, counter);\r\n                bankerFinalPoint = (banker2CardPoint + cards[result[5]].value) % 10;\r\n            }\r\n            else {\r\n                bankerFinalPoint = banker2CardPoint;\r\n            }\r\n        }\r\n        else if (player2CardPoint <= 7 && banker2CardPoint <= 5) {\r\n            total ++;\r\n            (result, total, counter) = uniqueRandom(result, total, counter);\r\n            playerFinalPoint = player2CardPoint;\r\n            bankerFinalPoint = (banker2CardPoint + cards[result[5]].value) % 10;\r\n        }\r\n        else {\r\n            playerFinalPoint = player2CardPoint;\r\n            bankerFinalPoint = banker2CardPoint;\r\n        }\r\n\r\n        if (bankerFinalPoint > playerFinalPoint) {\r\n            winner = \"banker\";\r\n        }\r\n        else if (bankerFinalPoint == playerFinalPoint){\r\n            winner = \"tie\";\r\n        }\r\n\r\n        emit Result(winner, player2CardPoint, banker2CardPoint, playerFinalPoint, bankerFinalPoint, result);\r\n    }\r\n    \r\n    function uniqueRandom(uint256[] memory result, uint8 total, uint8 counter) private view returns (uint256[] memory, uint8, uint8) {\r\n        bool duplicate;\r\n        uint256 rand;\r\n\r\n        do {\r\n            duplicate = false;\r\n            rand = random(counter);\r\n            counter ++;\r\n\r\n            for (uint8 u=0; u<total; u++) {\r\n                if (result[u] == rand) {\r\n                    duplicate = true;\r\n                }\r\n            }\r\n        } while (duplicate);\r\n        \r\n        result[total] = rand;\r\n        total ++;\r\n        \r\n        return (result, total, counter);\r\n    }\r\n\r\n    function random(uint8 orderFactor) private view returns (uint256) {\r\n        uint256 rand = uint256(keccak256(abi.encodePacked(block.coinbase, block.difficulty, block.timestamp, msg.sender, tx.gasprice, orderFactor)));\r\n        rand = (rand % 52) + 1;\r\n        return rand;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"play\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"winner\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"player2CardPoint\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"banker2CardPoint\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"playerFinalPoint\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"bankerFinalPoint\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256[]\"}],\"name\":\"Result\",\"type\":\"event\"}]","ContractName":"Baccarat","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://415efb6131d27ff65987d871c1df19a3a29fc207636d76831ae02425f5a61ea5"}]}