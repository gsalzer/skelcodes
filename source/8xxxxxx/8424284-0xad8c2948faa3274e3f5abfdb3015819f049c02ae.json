{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n// produced by the Solididy File Flattener (c) David Appleton 2018\r\n// contact : dave@akomba.com\r\n// released under Apache 2.0 licence\r\n// input  /Users/rmanzoku/src/github.com/doublejumptokyo/erc721/contracts/erc721converter.sol\r\n// flattened :  Monday, 26-Aug-19 06:45:45 UTC\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\ncontract IERC721Receiver {\r\n    /**\r\n     * @notice Handle the receipt of an NFT\r\n     * @dev The ERC721 smart contract calls this function on the recipient\r\n     * after a `safeTransfer`. This function MUST return the function selector,\r\n     * otherwise the caller will revert the transaction. The selector to be\r\n     * returned can be obtained as `this.onERC721Received.selector`. This\r\n     * function MAY throw to revert and reject the transfer.\r\n     * Note: the ERC721 contract address is always the message sender.\r\n     * @param operator The address which called `safeTransferFrom` function\r\n     * @param from The address which previously owned the token\r\n     * @param tokenId The NFT identifier which is being transferred\r\n     * @param data Additional data with no specified format\r\n     * @return bytes4 `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n     */\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\r\n    public returns (bytes4);\r\n}\r\n\r\ninterface ERC721 /* is ERC165 */ {\r\n  event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\r\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n  function balanceOf(address _owner) external view returns (uint256);\r\n  function ownerOf(uint256 _tokenId) external view returns (address);\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata data) external payable;\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n  function approve(address _approved, uint256 _tokenId) external payable;\r\n  function setApprovalForAll(address _operator, bool _approved) external;\r\n  function getApproved(uint256 _tokenId) external view returns (address);\r\n  function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n}\r\n\r\ninterface ERC165 {\r\n  function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n}\r\n\r\ncontract ERC721Holder is IERC721Receiver {\r\n    function onERC721Received(address, address, uint256, bytes memory) public returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n}\r\n\r\ncontract OperatorRole is Ownable {\r\n  using Roles for Roles.Role;\r\n\r\n  event OperatorAdded(address indexed account);\r\n  event OperatorRemoved(address indexed account);\r\n\r\n  event Paused(address account);\r\n  event Unpaused(address account);\r\n\r\n  bool private _paused;\r\n\r\n  Roles.Role private operators;\r\n\r\n  constructor() public {\r\n    operators.add(msg.sender);\r\n    _paused = false;\r\n  }\r\n\r\n  modifier onlyOperator() {\r\n    require(isOperator(msg.sender));\r\n    _;\r\n  }\r\n\r\n  modifier whenNotPaused() {\r\n    require(!_paused, \"Pausable: paused\");\r\n    _;\r\n  }\r\n\r\n  modifier whenPaused() {\r\n    require(_paused, \"Pausable: not paused\");\r\n    _;\r\n  }\r\n\r\n  function isOperator(address account) public view returns (bool) {\r\n    return operators.has(account);\r\n  }\r\n\r\n  function addOperator(address account) public onlyOwner() {\r\n    operators.add(account);\r\n    emit OperatorAdded(account);\r\n  }\r\n\r\n  function removeOperator(address account) public onlyOwner() {\r\n    operators.remove(account);\r\n    emit OperatorRemoved(account);\r\n  }\r\n\r\n  function paused() public view returns (bool) {\r\n    return _paused;\r\n  }\r\n\r\n  function pause() public onlyOperator() whenNotPaused() {\r\n    _paused = true;\r\n    emit Paused(msg.sender);\r\n  }\r\n\r\n  function unpause() public onlyOperator whenPaused() {\r\n    _paused = false;\r\n    emit Unpaused(msg.sender);\r\n  }\r\n\r\n}\r\n\r\ncontract ERC721Converter is ERC721Holder, OperatorRole {\r\n  ERC721 Alice;\r\n  ERC721 Bob;\r\n\r\n  address public aliceContract;\r\n  address public bobContract;\r\n\r\n  bool public approveOnce = false;\r\n\r\n  mapping (uint256 => uint256) private _idMapAliceToBob;\r\n  mapping (uint256 => uint256) private _idMapBobToAlice;\r\n\r\n  constructor(address _alice, address _bob) public {\r\n    aliceContract = _alice;\r\n    bobContract = _bob;\r\n    Alice = ERC721(aliceContract);\r\n    Bob = ERC721(bobContract);\r\n  }\r\n\r\n  function approve(address _spender) external onlyOwner() {\r\n    require(approveOnce != true);\r\n    Alice.setApprovalForAll(_spender, true);\r\n    Bob.setApprovalForAll(_spender, true);\r\n    approveOnce = true;\r\n  }\r\n\r\n  function dismiss(address _spender) external onlyOwner() {\r\n    Alice.setApprovalForAll(_spender, false);\r\n    Bob.setApprovalForAll(_spender, false);\r\n  }\r\n\r\n  function updateAlice(address _newAlice) external onlyOperator() {\r\n    aliceContract = _newAlice;\r\n    Alice = ERC721(_newAlice);\r\n  }\r\n\r\n  function updateBob(address _newBob) external onlyOperator() {\r\n    bobContract = _newBob;\r\n    Bob = ERC721(_newBob);\r\n  }\r\n\r\n  function draftAliceTokens(uint256[] memory _aliceTokenIds, uint256[] memory _bobTokenIds) public onlyOperator() {\r\n    require(_aliceTokenIds.length == _bobTokenIds.length);\r\n    for (uint256 i = 0; i < _aliceTokenIds.length; i++) {\r\n      draftAliceToken(_aliceTokenIds[i], _bobTokenIds[i]);\r\n    }\r\n  }\r\n\r\n  function draftBobTokens(uint256[] memory _bobTokenIds, uint256[] memory _aliceTokenIds) public onlyOperator() {\r\n    require(_aliceTokenIds.length == _bobTokenIds.length);\r\n    for (uint256 i = 0; i < _aliceTokenIds.length; i++) {\r\n      draftBobToken(_bobTokenIds[i], _aliceTokenIds[i]);\r\n    }\r\n  }\r\n\r\n  function draftAliceToken(uint256 _aliceTokenId, uint256 _bobTokenId) public onlyOperator() {\r\n    require(Alice.ownerOf(_aliceTokenId) == address(this), \"_aliceTokenId is not owned\");\r\n    require(_idMapAliceToBob[_aliceTokenId] == 0, \"_aliceTokenId is already assignd\");\r\n    require(_idMapBobToAlice[_bobTokenId] == 0, \"_bobTokenId is already assignd\");\r\n\r\n    _idMapAliceToBob[_aliceTokenId] = _bobTokenId;\r\n    _idMapBobToAlice[_bobTokenId] = _aliceTokenId;\r\n  }\r\n\r\n  function draftBobToken(uint256 _bobTokenId, uint256 _aliceTokenId) public onlyOperator() {\r\n    require(Bob.ownerOf(_bobTokenId) == address(this), \"_bobTokenId is not owned\");\r\n    require(_idMapBobToAlice[_bobTokenId] == 0, \"_bobTokenId is already assignd\");\r\n    require(_idMapAliceToBob[_aliceTokenId] == 0, \"_aliceTokenId is already assignd\");\r\n\r\n    _idMapBobToAlice[_bobTokenId] = _aliceTokenId;\r\n    _idMapAliceToBob[_aliceTokenId] = _bobTokenId;\r\n  }\r\n\r\n  function getBobTokenID(uint256 _aliceTokenId) public view returns(uint256) {\r\n    return _idMapAliceToBob[_aliceTokenId];\r\n  }\r\n\r\n  function getAliceTokenID(uint256 _bobTokenId) public view returns(uint256) {\r\n    return _idMapBobToAlice[_bobTokenId];\r\n  }\r\n\r\n  function convertFromAliceToBob(uint256 _tokenId) external whenNotPaused() {\r\n    Alice.safeTransferFrom(msg.sender, address(this), _tokenId);\r\n    Bob.safeTransferFrom(address(this), msg.sender, getBobTokenID(_tokenId));\r\n  }\r\n\r\n  function convertFromBobToAlice(uint256 _tokenId) external whenNotPaused() {\r\n    Bob.safeTransferFrom(msg.sender, address(this), _tokenId);\r\n    Alice.safeTransferFrom(address(this), msg.sender, getAliceTokenID(_tokenId));\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_aliceTokenIds\",\"type\":\"uint256[]\"},{\"name\":\"_bobTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"draftAliceTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bobTokenId\",\"type\":\"uint256\"}],\"name\":\"getAliceTokenID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAlice\",\"type\":\"address\"}],\"name\":\"updateAlice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"convertFromBobToAlice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bobTokenIds\",\"type\":\"uint256[]\"},{\"name\":\"_aliceTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"draftBobTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newBob\",\"type\":\"address\"}],\"name\":\"updateBob\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_aliceTokenId\",\"type\":\"uint256\"}],\"name\":\"getBobTokenID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"convertFromAliceToBob\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bobTokenId\",\"type\":\"uint256\"},{\"name\":\"_aliceTokenId\",\"type\":\"uint256\"}],\"name\":\"draftBobToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bobContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aliceContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"dismiss\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"approveOnce\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_aliceTokenId\",\"type\":\"uint256\"},{\"name\":\"_bobTokenId\",\"type\":\"uint256\"}],\"name\":\"draftAliceToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_alice\",\"type\":\"address\"},{\"name\":\"_bob\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OperatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OperatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ERC721Converter","CompilerVersion":"v0.5.4+commit.9549d8ff","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000273f7f8e6489682df756151f5525576e322d51a300000000000000000000000067cbbb366a51fff9ad869d027e496ba49f5f6d55","Library":"","SwarmSource":"bzzr://c85e4ee0ae9fbfe590bc9cd6caca994eae7dbb4b450379f46becf45961176239"}]}