{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.24;\r\n\r\ninterface token {\r\n    function transfer(address receiver, uint amount) external;\r\n    function balanceOf(address tokenOwner) constant external returns (uint balance);\r\n}\r\n\r\ncontract againstRelease {\r\n    string public name = \"AGAINST Release\";\r\n    string public symbol = \"AGAINST\";\r\n    string public comment = \"AGAINST Release Contract\";\r\n    token public tokenReward = token(0xF7Be133620a7D944595683cE2B14156591EFe609);\r\n    address againstDev = address(0x4e0871dC93410305F83aEEB15741B2BDb54C3c5a);\r\n    uint public oneEthBuy = 4000000000; \r\n\t\r\n    event FundTransfer(address backer, uint amount, bool isContribution);\r\n\r\n    function setPrice(uint price) public {\r\n       require(msg.sender == againstDev,\"Not Admin\");\r\n       oneEthBuy = price; \r\n    } \r\n\r\n    function gatewayTransaction(address gateway) payable public {        \r\n        uint amount = msg.value;\r\n        uint stockSupply = tokenReward.balanceOf(address(this));   \r\n        require(stockSupply >= (amount*oneEthBuy*11)/10); \r\n        tokenReward.transfer(msg.sender, amount*oneEthBuy);         \r\n        emit FundTransfer(msg.sender, amount, true);\r\n        tokenReward.transfer(gateway, (amount*oneEthBuy)/100);\r\n        emit FundTransfer(gateway, (amount*oneEthBuy)/100, true);\r\n        if (againstDev.send(amount)) {\r\n               emit FundTransfer(againstDev, amount, false);\r\n        }\t\t\r\n    }\r\n\r\n    function () payable external {        \r\n        uint amount = msg.value;\r\n        uint stockSupply = tokenReward.balanceOf(address(this));  \r\n        require(stockSupply >= amount*oneEthBuy);   \r\n        tokenReward.transfer(msg.sender, amount*oneEthBuy);\r\n        emit FundTransfer(msg.sender, amount, true);\r\n        if (againstDev.send(amount)) {\r\n               emit FundTransfer(againstDev, amount, false);\r\n        }\t\t\t\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oneEthBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gateway\",\"type\":\"address\"}],\"name\":\"gatewayTransaction\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"comment\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"}]","ContractName":"againstRelease","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8e42ecdd125d829e3ea1ef5240e7713d61c98b2de857d2c02d95d4808f0b2069"}]}