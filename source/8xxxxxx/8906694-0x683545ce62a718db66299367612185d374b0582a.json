{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/Ownable/Ownable.sol\r\n\r\npragma solidity ^0.5.7;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/Properties/IProperties.sol\r\n\r\npragma solidity ^0.5.7;\r\n\r\n/**\r\n@title IProperties\r\n@dev This contract represents properties contract interface */\r\ncontract IProperties {\r\n    /**\r\n    @notice fired when owner is changed\r\n     */\r\n    event OwnerChanged(address newOwner);\r\n\r\n    /**\r\n    @notice fired when a manager's status is set\r\n     */\r\n    event ManagerSet(address manager, bool status);\r\n\r\n    /**\r\n    @notice fired when a new property is created\r\n     */\r\n    event PropertyCreated(\r\n        uint256 propertyId,\r\n        uint256 allocationCapacity,\r\n        string title,\r\n        string location,\r\n        uint256 marketValue,\r\n        uint256 maxInvestedATperInvestor,\r\n        uint256 totalAllowedATinvestments,\r\n        address AT,\r\n        uint256 dateAdded\r\n    );\r\n\r\n    /**\r\n    @notice fired when the status of a property is updated\r\n     */\r\n    event PropertyStatusUpdated(uint256 propertyId, uint256 status);\r\n\r\n    /**\r\n    @notice fired when a property is invested in\r\n     */\r\n    event PropertyInvested(uint256 propertyId, uint256 tokens);\r\n\r\n    /**\r\n    @dev fired when investment contract's status is set\r\n    */\r\n    event InvestmentContractStatusSet(address investmentContract, bool status);\r\n\r\n    /**\r\n    @dev fired when a property is updated\r\n    s */\r\n    event PropertyUpdated(uint256 propertyId);\r\n\r\n    /**\r\n    @dev function to change the owner\r\n    @param newOwner the address of new owner\r\n     */\r\n    function changeOwner(address newOwner) external;\r\n\r\n    /**\r\n    @dev function to set the status of manager\r\n    @param manager address of manager\r\n    @param status the status to set\r\n     */\r\n    function setManager(address manager, bool status) external;\r\n\r\n    /**\r\n    @dev function to create a new property\r\n    @param  allocationCapacity refers to the number of ATs allocated to a property\r\n    @param title title of property\r\n    @param location location of property\r\n    @param marketValue market value of property in USD\r\n    @param maxInvestedATperInvestor absolute amount of shares that could be allocated per person\r\n    @param totalAllowedATinvestments absolute amount of shares to be issued\r\n    @param AT address of AT contract\r\n    */\r\n    function createProperty(\r\n        uint256 allocationCapacity,\r\n        string memory title,\r\n        string memory location,\r\n        uint256 marketValue,\r\n        uint256 maxInvestedATperInvestor,\r\n        uint256 totalAllowedATinvestments,\r\n        address AT\r\n    ) public returns (bool);\r\n\r\n    /**\r\n    @notice function is called to update a property's status\r\n    @param propertyId ID of the property\r\n    @param status status of the property\r\n     */\r\n    function updatePropertyStatus(uint256 propertyId, uint256 status) external;\r\n\r\n    /**\r\n    @notice function is called to invest in the property\r\n    @param investor the address of the investor\r\n    @param propertyId the ID of the property to invest in\r\n    @param shares the amount of shares being invested\r\n     */\r\n    function invest(address investor, uint256 propertyId, uint256 shares)\r\n        public\r\n        returns (bool);\r\n\r\n    /**\r\n    @dev this function is called to set the status of an investment contract\r\n    @param investmentContract the address of investment contract\r\n    @param status status of the investment smart contact\r\n     */\r\n    function setInvestmentContractStatus(\r\n        address investmentContract,\r\n        bool status\r\n    ) external;\r\n\r\n    /**\r\n    @notice the function returns the paramters of a property\r\n    @param propertyId the ID of the property to get\r\n     */\r\n    function getProperty(uint256 propertyId)\r\n        public\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            string memory,\r\n            string memory,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            address,\r\n            uint256,\r\n            uint8\r\n        );\r\n\r\n    /**\r\n    @notice function returns the list of property investors\r\n    @param from the starting number . minimum = 0\r\n    @param to the ending number\r\n     */\r\n    function getPropertyInvestors(uint256 propertyId, uint256 from, uint256 to)\r\n        public\r\n        view\r\n        returns (address[] memory);\r\n\r\n    /**\r\n    @notice Called to get the total amount of investment and investment for a specific holder for a property\r\n    @param propertyId The ID of the property\r\n    @param holder The address of the holder\r\n    @return The total amount of investment\r\n    @return The amount of shares owned by the holder */\r\n    function getTotalAndHolderShares(uint256 propertyId, address holder)\r\n        public\r\n        view\r\n        returns (uint256 totalShares, uint256 holderShares);\r\n}\r\n\r\n// File: contracts/Math/SafeMath.sol\r\n\r\npragma solidity ^0.5.7;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n// File: contracts/Dividends/DividendsWithETH/IDividendsWithETH.sol\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\n/**\r\n@title IInvestment\r\n@dev This contract is an interface for Investment contract\r\n */\r\ncontract IDividendsWithETH {\r\n    /**\r\n    @dev fired on exchange state change\r\n    */\r\n    event StateChanged(uint256 state);\r\n\r\n    /**\r\n    @dev fired when property is set by owner\r\n     */\r\n    event PropertiesSet(address property);\r\n\r\n    // Fired after the status for a manager is updated\r\n    event ManagerStatusUpdated(address manager, bool managerStatus);\r\n\r\n    /**\r\n    @notice fired when dividend are created/paid by the manager\r\n     */\r\n    event DividendPaid(\r\n        uint256 propertyId,\r\n        uint256 dividendId,\r\n        uint256 ethAmount\r\n    );\r\n\r\n    /**\r\n    @notice fired when an investor withdraw his dividend\r\n     */\r\n    event DividendWithdrawn(\r\n        uint256 propertyId,\r\n        uint256 dividendId,\r\n        address investor,\r\n        uint256 amount\r\n    );\r\n\r\n    /**\r\n    @notice fired when ETH is drawn from the contract by manager\r\n     */\r\n    event ETHWithdrawn(address withdrawer, uint256 amount);\r\n\r\n    /// @notice Sets status for a manager\r\n    /// @param manager The address of manager for which the status is to be updated\r\n    /// @param managerStatus The status for the manager\r\n    /// @return status of the transaction\r\n    function setManagerStatus(address manager, bool managerStatus)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n    @notice is called by owner to set property address\r\n    @param _properties it is the address of the property\r\n     */\r\n    function setProperty(IProperties _properties) external;\r\n\r\n    /**\r\n    @notice this function sets/changes state of this smart contract and only manager/owner can call it\r\n    @param state it can be either 0 (ACTIVE) or 1 (INACTIVE)\r\n     */\r\n    function setState(uint256 state) external;\r\n\r\n    /**\r\n    @notice Used to pay/create dividend for a property\r\n    @param  propertyId The ID of the property for which the dividend is being paid/created\r\n    */\r\n    function payDividend(uint256 propertyId) external payable;\r\n\r\n    /**\r\n    @notice Called to withdraw ETH dividend by investor\r\n    @param dividendId The ID of the dividend from where the user wants to withdraw his dividend amount\r\n     */\r\n    function withdrawDividend(uint256 dividendId) public returns (bool);\r\n\r\n    /**\r\n    @notice Used to withdraw ETH from the contract by the manager\r\n    @param amount The amount of ETH to withdraw | if amount is zero then all ETH balance is withdrawn from the contract\r\n     */\r\n    function withdrawETHByManager(uint256 amount) external;\r\n\r\n    /**\r\n    @notice Returns the complete list of all dividends\r\n    @return The list of IDs of all dividends\r\n    @return The list of totalDividendAmount of all dividends\r\n    @return The list of totalInvestment of all dividends\r\n    @return The list of dividendsAmountPaid of all dividends\r\n     */\r\n    function getAllDividendsList()\r\n        public\r\n        view\r\n        returns (\r\n            uint256[] memory propertyId,\r\n            uint256[] memory totalDividendAmount,\r\n            uint256[] memory totalInvestment,\r\n            uint256[] memory dividendsAmountPaid\r\n        );\r\n\r\n    function getInvestorBalanceByDividendId(\r\n        uint256 dividendId,\r\n        address investor\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            uint256 dividendBalanceAvailable,\r\n            uint256 dividendBalanceWithdrawn\r\n        );\r\n\r\n}\r\n\r\n// File: contracts/Dividends/DividendsWithETH/DividendsWithETH.sol\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\n\r\n\r\n\r\ncontract DividendsWithETH is IDividendsWithETH, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    enum State {INACTIVE, ACTIVE} // enum value for the states of DividendsWithETH contract.\r\n\r\n    struct Dividend {\r\n        uint256 propertyId; // ID of the property for which the dividend is created.\r\n        uint256 totalDividendAmount; // amount of dividend.\r\n        uint256 totalInvestment; // total investment amount of the property.\r\n        uint256 dividendsAmountPaid; // the amount of dividend that are withdrawn by the investors.\r\n        mapping(address => uint256) amountWithdrawnByInvestor;\r\n    }\r\n\r\n    mapping(uint256 => Dividend) public dividends; // mapping from dividendId to dividend\r\n\r\n    mapping(address => bool) public managers; // mapping of manager address to its status(true or false) of eligibility.\r\n\r\n    State stateOfDividendsWithETH; // current state( ACTIVE, INACTIVE ) of the contract\r\n    uint256 dividendIdCount = 0; // total count of the dividens\r\n\r\n    IProperties public properties; // properties interface to interact with the properties contract\r\n\r\n    /**\r\n    @dev constructor of the  DividendsWithETH contract\r\n    */\r\n    constructor() public {\r\n        // set the current state of the contract as ACTIVE\r\n        stateOfDividendsWithETH = State.ACTIVE;\r\n\r\n        emit StateChanged(uint256(stateOfDividendsWithETH));\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than Managers.\r\n     */\r\n    modifier onlyManager() {\r\n        require(isOwner() || managers[msg.sender], \"Only owner/manager can call this function.\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Sets status for a manager\r\n    /// @param manager The address of manager for which the status is to be updated\r\n    /// @param managerStatus The status for the manager\r\n    /// @return status of the transaction\r\n    function setManagerStatus(address manager, bool managerStatus)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(\r\n            manager != address(0),\r\n            \"Provided mannager address is not valid.\"\r\n        );\r\n        require(\r\n            managers[manager] != managerStatus,\r\n            \"This status of manager is already set.\"\r\n        );\r\n\r\n        managers[manager] = managerStatus;\r\n\r\n        emit ManagerStatusUpdated(manager, managerStatus);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    @notice is called by owner to set property address\r\n    @param _properties it is the address of the property\r\n     */\r\n    function setProperty(IProperties _properties) external onlyOwner {\r\n        require(\r\n            address(_properties) != address(0),\r\n            \"properties address must be a valid address.\"\r\n        );\r\n        properties = _properties;\r\n\r\n        emit PropertiesSet(address(properties));\r\n    }\r\n\r\n    /**\r\n    @notice call is only allowed to pass when exchange is in ACTIVE state\r\n     */\r\n    modifier isStateActive() {\r\n        require(\r\n            stateOfDividendsWithETH == State.ACTIVE,\r\n            \"contract state is INACTIVE.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n    @notice this function sets/changes state of this smart contract and only manager/owner can call it\r\n    @param state it can be either 0 (ACTIVE) or 1 (INACTIVE)\r\n     */\r\n    function setState(uint256 state) external onlyOwner {\r\n        require(state == 0 || state == 1, \"Provided state is invalid.\");\r\n        require(\r\n            state != uint256(stateOfDividendsWithETH),\r\n            \"Provided state is already set.\"\r\n        );\r\n\r\n        stateOfDividendsWithETH = State(state);\r\n\r\n        emit StateChanged(uint256(stateOfDividendsWithETH));\r\n    }\r\n\r\n    /**\r\n    @notice Used to pay/create dividend for a property\r\n    @param  propertyId The ID of the property for which the dividend is being paid/created\r\n    */\r\n    function payDividend(uint256 propertyId)\r\n        external\r\n        payable\r\n        onlyManager\r\n        isStateActive\r\n    {\r\n        require(propertyId > 0, \"propertyId should be greater than zero.\");\r\n        require(msg.value > 0, \"msg.value should be greater than 0\");\r\n\r\n        uint256 dividendAmount = msg.value;\r\n        bool exists = false;\r\n        for (uint256 i = 1; i <= dividendIdCount; i++) {\r\n            Dividend memory dividend = dividends[i];\r\n            if (dividend.propertyId == propertyId) {\r\n                // For existing dividends, just update totalDividendAmount\r\n                dividend.totalDividendAmount = dividend.totalDividendAmount.add(dividendAmount);\r\n                dividends[i] = dividend;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (!exists) {\r\n            // get total property investment from the properties contract\r\n            (, , , , , , uint256 totalPropertyInvestment, , , ) = properties\r\n                .getProperty(propertyId);\r\n            Dividend memory newDividend = Dividend(\r\n                propertyId,\r\n                dividendAmount,\r\n                totalPropertyInvestment,\r\n                uint256(0)\r\n            );\r\n            dividendIdCount = dividendIdCount.add(1);\r\n\r\n            dividends[dividendIdCount] = newDividend;\r\n        }\r\n\r\n        emit DividendPaid(propertyId, dividendIdCount, dividendAmount);\r\n\r\n    }\r\n\r\n    /**\r\n    @notice Called to withdraw ETH dividend by investor\r\n    @param dividendId The ID of the dividend from where the user wants to withdraw his dividend amount\r\n     */\r\n    function withdrawDividend(uint256 dividendId)\r\n        public\r\n        isStateActive\r\n        returns (bool)\r\n    {\r\n        require(dividendId > 0, \"dividendId should be greater than zero\");\r\n\r\n        Dividend storage dividend = dividends[dividendId];\r\n\r\n        require(\r\n            dividend.propertyId != 0,\r\n            \"dividend with the given property ID does not exists\"\r\n        );\r\n\r\n        // Get amount of the shares of the investor in the given property\r\n        (, uint256 investmentByUser) = properties.getTotalAndHolderShares(\r\n            dividend.propertyId,\r\n            msg.sender\r\n        );\r\n\r\n        // calculate dividend amount for the given investor\r\n        uint256 userDividendAmount = calculateDividend(\r\n            dividend.totalInvestment,\r\n            dividend.totalDividendAmount,\r\n            investmentByUser\r\n        );\r\n\r\n        require(\r\n            userDividendAmount < dividend.totalDividendAmount,\r\n            \"Dividend amount overflow\"\r\n        );\r\n\r\n        require(\r\n            dividend.amountWithdrawnByInvestor[msg.sender] < userDividendAmount,\r\n            \"No dividend amount available for withdrawal\"\r\n        );\r\n\r\n        uint256 dividendAmount = userDividendAmount.sub(\r\n            dividend.amountWithdrawnByInvestor[msg.sender]\r\n        );\r\n\r\n        require(\r\n            dividendAmount <= address(this).balance,\r\n            \"The dividendWithETH contract does not have enough ETH balance to pay dividend.\"\r\n        );\r\n\r\n        dividend.amountWithdrawnByInvestor[msg.sender] = dividend\r\n            .amountWithdrawnByInvestor[msg.sender]\r\n            .add(dividendAmount);\r\n        dividend.dividendsAmountPaid = dividend.dividendsAmountPaid.add(\r\n            dividendAmount\r\n        );\r\n\r\n        // transfer dividend to investor\r\n        msg.sender.transfer(dividendAmount);\r\n\r\n        emit DividendWithdrawn(\r\n            dividend.propertyId,\r\n            dividendId,\r\n            msg.sender,\r\n            dividendAmount\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    @notice Used to withdraw ETH from the contract by the manager\r\n    @param amount The amount of ETH to withdraw | if amount is zero then all ETH balance is withdrawn from the contract\r\n     */\r\n    function withdrawETHByManager(uint256 amount) external onlyManager {\r\n        uint256 contractBalance = address(this).balance;\r\n\r\n        require(contractBalance > 0, \"Contract has no ETH in it.\");\r\n\r\n        if (amount == 0) {\r\n            msg.sender.transfer(contractBalance);\r\n            emit ETHWithdrawn(msg.sender, contractBalance);\r\n        } else {\r\n            require(\r\n                amount <= contractBalance,\r\n                \"Contract has less balance than the amount specified.\"\r\n            );\r\n            msg.sender.transfer(amount);\r\n            emit ETHWithdrawn(msg.sender, amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n    @notice Returns the complete list of all dividends\r\n    @return The list of IDs of all dividends\r\n    @return The list of totalDividendAmount of all dividends\r\n    @return The list of totalInvestment of all dividends\r\n    @return The list of dividendsAmountPaid of all dividends\r\n     */\r\n    function getAllDividendsList()\r\n        public\r\n        view\r\n        returns (\r\n            uint256[] memory propertyId,\r\n            uint256[] memory totalDividendAmount,\r\n            uint256[] memory totalInvestment,\r\n            uint256[] memory dividendsAmountPaid\r\n        )\r\n    {\r\n        propertyId = new uint256[](dividendIdCount);\r\n        totalDividendAmount = new uint256[](dividendIdCount);\r\n        totalInvestment = new uint256[](dividendIdCount);\r\n        dividendsAmountPaid = new uint256[](dividendIdCount);\r\n\r\n        for (uint256 i = 1; i <= dividendIdCount; i++) {\r\n            Dividend memory dividend = dividends[i];\r\n\r\n            propertyId[i - 1] = dividend.propertyId;\r\n            totalDividendAmount[i - 1] = dividend.totalDividendAmount;\r\n            totalInvestment[i - 1] = dividend.totalInvestment;\r\n            dividendsAmountPaid[i - 1] = dividend.dividendsAmountPaid;\r\n        }\r\n\r\n    }\r\n\r\n    function getDividendsByPropertyId(uint256 propertyId)\r\n        public\r\n        view\r\n        returns (\r\n            uint256[] memory dividendId,\r\n            uint256[] memory totalDividendAmount,\r\n            uint256[] memory totalInvestment,\r\n            uint256[] memory dividendsAmountPaid\r\n        )\r\n    {\r\n        require(propertyId > 0, \"propertyId should be greater than zero.\");\r\n\r\n        dividendId = new uint256[](dividendIdCount);\r\n        totalDividendAmount = new uint256[](dividendIdCount);\r\n        totalInvestment = new uint256[](dividendIdCount);\r\n        dividendsAmountPaid = new uint256[](dividendIdCount);\r\n\r\n        uint256 counter = 0;\r\n\r\n        for (uint256 i = 1; i <= dividendIdCount; i++) {\r\n            Dividend memory dividend = dividends[i];\r\n\r\n            if (dividend.propertyId == propertyId) {\r\n                dividendId[counter] = i;\r\n                totalDividendAmount[counter] = dividend.totalDividendAmount;\r\n                totalInvestment[counter] = dividend.totalInvestment;\r\n                dividendsAmountPaid[counter] = dividend.dividendsAmountPaid;\r\n                counter++;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    function getDividendByPropertyId(uint256 propertyId)\r\n        public\r\n        view\r\n        returns (\r\n            uint256 dividendId,\r\n            uint256 totalDividendAmount,\r\n            uint256 totalInvestment,\r\n            uint256 dividendsAmountPaid\r\n        )\r\n    {\r\n        require(propertyId > 0, \"propertyId should be greater than zero.\");\r\n\r\n        dividendId = 0;\r\n        totalDividendAmount = 0;\r\n        totalInvestment = 0;\r\n        dividendsAmountPaid = 0;\r\n\r\n        for (uint256 i = 1; i <= dividendIdCount; i++) {\r\n            Dividend memory dividend = dividends[i];\r\n\r\n            if (dividend.propertyId == propertyId) {\r\n                dividendId = i;\r\n                totalDividendAmount = dividend.totalDividendAmount;\r\n                totalInvestment = dividend.totalInvestment;\r\n                dividendsAmountPaid = dividend.dividendsAmountPaid;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getInvestorBalanceByDividendId(\r\n        uint256 dividendId,\r\n        address investor\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            uint256 dividendBalanceAvailable,\r\n            uint256 dividendBalanceWithdrawn\r\n        )\r\n    {\r\n        require(dividendId > 0, \"dividendId cannot be zero\");\r\n\r\n        Dividend storage dividend = dividends[dividendId];\r\n\r\n        // Get amount of the shares of the investor in the given property\r\n        (, uint256 investmentByUser) = properties.getTotalAndHolderShares(\r\n            dividend.propertyId,\r\n            investor\r\n        );\r\n\r\n        // calculate dividend amount for the given investor\r\n        uint256 totalDividendBalance = calculateDividend(\r\n            dividend.totalInvestment,\r\n            dividend.totalDividendAmount,\r\n            investmentByUser\r\n        );\r\n\r\n        dividendBalanceAvailable = totalDividendBalance.sub(\r\n            dividend.amountWithdrawnByInvestor[investor]\r\n        );\r\n        dividendBalanceWithdrawn = dividend.amountWithdrawnByInvestor[investor];\r\n    }\r\n\r\n    /**\r\n    @dev Fallback function to accept ETH\r\n     */\r\n    function() external payable {\r\n        require(msg.data.length == 0, \"Error in calling the function\");\r\n    }\r\n\r\n    /**\r\n    @notice Function to calculated dividend amount\r\n    @param  totalInvestments The total nvestments in a property\r\n    @param totalDividend The amount of total dividends allocated to a dividend\r\n    @param userInvestment The investment of a user in a property\r\n    @return The amount of dividend withdrawable by user\r\n     */\r\n    function calculateDividend(\r\n        uint256 totalInvestments,\r\n        uint256 totalDividend,\r\n        uint256 userInvestment\r\n    ) private pure returns (uint256) {\r\n        return\r\n            userInvestment\r\n                .mul(1000000000000000000)\r\n                .div(totalInvestments)\r\n                .mul(totalDividend)\r\n                .div(1000000000000000000);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETHByManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllDividendsList\",\"outputs\":[{\"name\":\"propertyId\",\"type\":\"uint256[]\"},{\"name\":\"totalDividendAmount\",\"type\":\"uint256[]\"},{\"name\":\"totalInvestment\",\"type\":\"uint256[]\"},{\"name\":\"dividendsAmountPaid\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"propertyId\",\"type\":\"uint256\"}],\"name\":\"payDividend\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dividendId\",\"type\":\"uint256\"}],\"name\":\"withdrawDividend\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"dividendId\",\"type\":\"uint256\"},{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"getInvestorBalanceByDividendId\",\"outputs\":[{\"name\":\"dividendBalanceAvailable\",\"type\":\"uint256\"},{\"name\":\"dividendBalanceWithdrawn\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"propertyId\",\"type\":\"uint256\"}],\"name\":\"getDividendByPropertyId\",\"outputs\":[{\"name\":\"dividendId\",\"type\":\"uint256\"},{\"name\":\"totalDividendAmount\",\"type\":\"uint256\"},{\"name\":\"totalInvestment\",\"type\":\"uint256\"},{\"name\":\"dividendsAmountPaid\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_properties\",\"type\":\"address\"}],\"name\":\"setProperty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dividends\",\"outputs\":[{\"name\":\"propertyId\",\"type\":\"uint256\"},{\"name\":\"totalDividendAmount\",\"type\":\"uint256\"},{\"name\":\"totalInvestment\",\"type\":\"uint256\"},{\"name\":\"dividendsAmountPaid\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"manager\",\"type\":\"address\"},{\"name\":\"managerStatus\",\"type\":\"bool\"}],\"name\":\"setManagerStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"state\",\"type\":\"uint256\"}],\"name\":\"setState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"propertyId\",\"type\":\"uint256\"}],\"name\":\"getDividendsByPropertyId\",\"outputs\":[{\"name\":\"dividendId\",\"type\":\"uint256[]\"},{\"name\":\"totalDividendAmount\",\"type\":\"uint256[]\"},{\"name\":\"totalInvestment\",\"type\":\"uint256[]\"},{\"name\":\"dividendsAmountPaid\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"properties\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"managers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"state\",\"type\":\"uint256\"}],\"name\":\"StateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"property\",\"type\":\"address\"}],\"name\":\"PropertiesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"managerStatus\",\"type\":\"bool\"}],\"name\":\"ManagerStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"propertyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dividendId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"DividendPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"propertyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dividendId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DividendWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ETHWithdrawn\",\"type\":\"event\"}]","ContractName":"DividendsWithETH","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://ebeb0ce166ead14775e1bfb53ec20cd0d5a7c42d56b45638838e14f8354741bc"}]}