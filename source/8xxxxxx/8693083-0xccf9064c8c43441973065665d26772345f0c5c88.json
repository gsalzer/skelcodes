{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.2;\r\n\r\n/***************\r\n**            **\r\n** INTERFACES **\r\n**            **\r\n***************/\r\n\r\n/**\r\n * @title  Interface for Kong ERC20 Token Contract.\r\n */\r\ninterface KongERC20Interface {\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function mint(uint256 mintedAmount, address recipient) external;\r\n  function getMintingLimit() external returns(uint256);\r\n\r\n}\r\n\r\n/**\r\n * @title Interface for EllipticCurve contract.\r\n */\r\ninterface EllipticCurveInterface {\r\n\r\n    function validateSignature(bytes32 message, uint[2] calldata rs, uint[2] calldata Q) external view returns (bool);\r\n\r\n}\r\n\r\n/**\r\n * @title Kong escrow contract.\r\n *\r\n * @dev   This contract escrows Kong tokens until the timestamp specified in `unlockTime`.\r\n *        Afterwards, `transferTokens()` can be called to transfer the escrowed tokens to a\r\n *        destination address of choice. The function has to be provided with a valid SECP256R1\r\n *        signature of a specifically-formatted sha256 hash for the public key stored in the\r\n *        variables `publicKeyX` and `publicKeyY`. The signature is verified by a separately-\r\n *        deployed contract capable of verifying SECP256R1 signatures.\r\n */\r\ncontract Escrow\r\n{\r\n\r\n  uint256 _publicKeyX;\r\n  uint256 _publicKeyY;\r\n  uint256 _unlockTime;\r\n  address _eccAddress;\r\n  address _tokAddress;\r\n\r\n  uint256 constant BLOCK_DELAY = 240;\r\n\r\n  /**\r\n   * @dev All of the variables set in the constructor are immutable.\r\n   *\r\n   * @param publicKeyX         X coordinate of public key.\r\n   * @param publicKeyY         Y coordinate of public key.\r\n   * @param eccAddress         Address of elliptic curve contract.\r\n   * @param tokAddress         Address of Kong ERC20 contract.\r\n   * @param unlockTime         Timestamp at which transfers become possible.\r\n   */\r\n  constructor(\r\n    uint256 publicKeyX,\r\n    uint256 publicKeyY,\r\n    address eccAddress,\r\n    address tokAddress,\r\n    uint256 unlockTime\r\n  )\r\n    public\r\n  {\r\n    _publicKeyX = publicKeyX;\r\n    _publicKeyY = publicKeyY;\r\n    _eccAddress = eccAddress;\r\n    _tokAddress = tokAddress;\r\n    _unlockTime = unlockTime;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to transfer Kong tokens.\r\n   *\r\n   * @param to                 Recipient.\r\n   * @param blockNumber        Number of the block(hash) included in the signature.\r\n   * @param rs                 R+S value of the signature.\r\n   */\r\n  function transferTokens(\r\n    address to,\r\n    uint256 blockNumber,\r\n    uint256[2] calldata rs\r\n  )\r\n    external\r\n  {\r\n    // Verify that timelock has expired.\r\n    require(block.timestamp >= _unlockTime, 'Cannot unlock yet.');\r\n\r\n    // Verify blockhash is from recent past.\r\n    require(block.number >= blockNumber, 'Invalid block.');\r\n    require(block.number <= blockNumber + BLOCK_DELAY, 'Outdated block.');\r\n\r\n    // Verify signature.\r\n    require(_validateSignature(sha256(abi.encodePacked(to, blockhash(blockNumber))), rs), 'Invalid signature.');\r\n\r\n    // Transfer current balance from token contract to `to`.\r\n    KongERC20Interface(_tokAddress).transfer(to, KongERC20Interface(_tokAddress).balanceOf(address(this)));\r\n  }\r\n\r\n  /**\r\n   * @dev Function to validate SECP256R1 signatures.\r\n   *\r\n   * @param message            The hash of the signed message.\r\n   * @param rs                 R+S value of the signature.\r\n   */\r\n  function _validateSignature(\r\n    bytes32 message,\r\n    uint256[2] memory rs\r\n  )\r\n    internal view returns (bool)\r\n  {\r\n    return EllipticCurveInterface(_eccAddress).validateSignature(message, rs, [_publicKeyX, _publicKeyY]);\r\n  }\r\n\r\n  /**\r\n   * @dev Helper function to return state variables.\r\n   */\r\n  function getContractState() external view returns (\r\n    uint256, uint256, address, uint256, address\r\n  ) {\r\n    return (_publicKeyX, _publicKeyY, _eccAddress, _unlockTime, _tokAddress);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getContractState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"name\":\"rs\",\"type\":\"uint256[2]\"}],\"name\":\"transferTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"publicKeyX\",\"type\":\"uint256\"},{\"name\":\"publicKeyY\",\"type\":\"uint256\"},{\"name\":\"eccAddress\",\"type\":\"address\"},{\"name\":\"tokAddress\",\"type\":\"address\"},{\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Escrow","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"46cddd97476acb3e123b9f98861496dc2f939bfccf1deb5a7873446f9751a26c3429cb081c1f3d8005c6ba4ca720b79d25516908ad68912c7edc3c68e4c442c5000000000000000000000000f471789937856d80e589f5996cf8b0511ddd9de4000000000000000000000000177f2ace25f81fc50f9f6e9193adf5ac758e8098000000000000000000000000000000000000000000000000000000006338d480","Library":"","LicenseType":"None","SwarmSource":"bzzr://2d3069df31319100e8ebcb15877cc97f9e8bcf50493552dc1c33c3e4c0c23bfa"}]}