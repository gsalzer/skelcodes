{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/lib/AddressUtil.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\npragma solidity ^0.5.11;\r\n\r\n\r\n/// @title Utility Functions for addresses\r\n/// @author Daniel Wang - <daniel@loopring.org>\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\nlibrary AddressUtil\r\n{\r\n    using AddressUtil for *;\r\n\r\n    function isContract(\r\n        address addr\r\n        )\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        uint32 size;\r\n        assembly { size := extcodesize(addr) }\r\n        return (size > 0);\r\n    }\r\n\r\n    function toPayable(\r\n        address addr\r\n        )\r\n        internal\r\n        pure\r\n        returns (address payable)\r\n    {\r\n        return address(uint160(addr));\r\n    }\r\n\r\n    // Works like address.send but with a customizable gas limit\r\n    // Make sure your code is safe for reentrancy when using this function!\r\n    function sendETH(\r\n        address to,\r\n        uint    amount,\r\n        uint    gasLimit\r\n        )\r\n        internal\r\n        returns (bool success)\r\n    {\r\n        if (amount == 0) {\r\n            return true;\r\n        }\r\n        address payable recipient = to.toPayable();\r\n        /* solium-disable-next-line */\r\n        (success, ) = recipient.call.value(amount).gas(gasLimit)(\"\");\r\n    }\r\n\r\n    // Works like address.transfer but with a customizable gas limit\r\n    // Make sure your code is safe for reentrancy when using this function!\r\n    function transferETH(\r\n        address to,\r\n        uint    amount,\r\n        uint    gasLimit\r\n        )\r\n        internal\r\n        returns (bool success)\r\n    {\r\n        success = to.sendETH(amount, gasLimit);\r\n        require(success, \"TRANSFER_FAILURE\");\r\n    }\r\n}\r\n\r\n// File: contracts/lib/ERC20.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\npragma solidity ^0.5.11;\r\n\r\n\r\n/// @title ERC20 Token Interface\r\n/// @dev see https://github.com/ethereum/EIPs/issues/20\r\n/// @author Daniel Wang - <daniel@loopring.org>\r\ncontract ERC20\r\n{\r\n    function totalSupply()\r\n        public\r\n        view\r\n        returns (uint);\r\n\r\n    function balanceOf(\r\n        address who\r\n        )\r\n        public\r\n        view\r\n        returns (uint);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n        )\r\n        public\r\n        view\r\n        returns (uint);\r\n\r\n    function transfer(\r\n        address to,\r\n        uint value\r\n        )\r\n        public\r\n        returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint    value\r\n        )\r\n        public\r\n        returns (bool);\r\n\r\n    function approve(\r\n        address spender,\r\n        uint    value\r\n        )\r\n        public\r\n        returns (bool);\r\n}\r\n\r\n// File: contracts/lib/BurnableERC20.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\npragma solidity ^0.5.11;\r\n\r\n\r\n\r\n/// @title Burnable ERC20 Token Interface\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\ncontract BurnableERC20 is ERC20\r\n{\r\n    function burn(\r\n        uint value\r\n        )\r\n        public\r\n        returns (bool);\r\n\r\n    function burnFrom(\r\n        address from,\r\n        uint value\r\n        )\r\n        public\r\n        returns (bool);\r\n}\r\n\r\n// File: contracts/lib/ERC20SafeTransfer.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\npragma solidity ^0.5.11;\r\n\r\n\r\n/// @title ERC20 safe transfer\r\n/// @dev see https://github.com/sec-bit/badERC20Fix\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\nlibrary ERC20SafeTransfer\r\n{\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint    value\r\n        )\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return safeTransferWithGasLimit(\r\n            token,\r\n            to,\r\n            value,\r\n            gasleft()\r\n        );\r\n    }\r\n\r\n    function safeTransferWithGasLimit(\r\n        address token,\r\n        address to,\r\n        uint    value,\r\n        uint    gasLimit\r\n        )\r\n        internal\r\n        returns (bool)\r\n    {\r\n        // A transfer is successful when 'call' is successful and depending on the token:\r\n        // - No value is returned: we assume a revert when the transfer failed (i.e. 'call' returns false)\r\n        // - A single boolean is returned: this boolean needs to be true (non-zero)\r\n\r\n        // bytes4(keccak256(\"transfer(address,uint)\")) = 0xa9059cbb\r\n        bytes memory callData = abi.encodeWithSelector(\r\n            bytes4(0xa9059cbb),\r\n            to,\r\n            value\r\n        );\r\n        (bool success, ) = token.call.gas(gasLimit)(callData);\r\n        return checkReturnValue(success);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint    value\r\n        )\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return safeTransferFromWithGasLimit(\r\n            token,\r\n            from,\r\n            to,\r\n            value,\r\n            gasleft()\r\n        );\r\n    }\r\n\r\n    function safeTransferFromWithGasLimit(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint    value,\r\n        uint    gasLimit\r\n        )\r\n        internal\r\n        returns (bool)\r\n    {\r\n        // A transferFrom is successful when 'call' is successful and depending on the token:\r\n        // - No value is returned: we assume a revert when the transfer failed (i.e. 'call' returns false)\r\n        // - A single boolean is returned: this boolean needs to be true (non-zero)\r\n\r\n        // bytes4(keccak256(\"transferFrom(address,address,uint)\")) = 0x23b872dd\r\n        bytes memory callData = abi.encodeWithSelector(\r\n            bytes4(0x23b872dd),\r\n            from,\r\n            to,\r\n            value\r\n        );\r\n        (bool success, ) = token.call.gas(gasLimit)(callData);\r\n        return checkReturnValue(success);\r\n    }\r\n\r\n    function checkReturnValue(\r\n        bool success\r\n        )\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        // A transfer/transferFrom is successful when 'call' is successful and depending on the token:\r\n        // - No value is returned: we assume a revert when the transfer failed (i.e. 'call' returns false)\r\n        // - A single boolean is returned: this boolean needs to be true (non-zero)\r\n        if (success) {\r\n            assembly {\r\n                switch returndatasize()\r\n                // Non-standard ERC20: nothing is returned so if 'call' was successful we assume the transfer succeeded\r\n                case 0 {\r\n                    success := 1\r\n                }\r\n                // Standard ERC20: a single boolean value is returned which needs to be true\r\n                case 32 {\r\n                    returndatacopy(0, 0, 32)\r\n                    success := mload(0)\r\n                }\r\n                // None of the above: not successful\r\n                default {\r\n                    success := 0\r\n                }\r\n            }\r\n        }\r\n        return success;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/lib/MathUint.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\npragma solidity ^0.5.11;\r\n\r\n\r\n/// @title Utility Functions for uint\r\n/// @author Daniel Wang - <daniel@loopring.org>\r\nlibrary MathUint\r\n{\r\n    function mul(\r\n        uint a,\r\n        uint b\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint c)\r\n    {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b, \"MUL_OVERFLOW\");\r\n    }\r\n\r\n    function sub(\r\n        uint a,\r\n        uint b\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint)\r\n    {\r\n        require(b <= a, \"SUB_UNDERFLOW\");\r\n        return a - b;\r\n    }\r\n\r\n    function add(\r\n        uint a,\r\n        uint b\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint c)\r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"ADD_OVERFLOW\");\r\n    }\r\n\r\n    function decodeFloat(\r\n        uint f\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint value)\r\n    {\r\n        uint numBitsMantissa = 23;\r\n        uint exponent = f >> numBitsMantissa;\r\n        uint mantissa = f & ((1 << numBitsMantissa) - 1);\r\n        value = mantissa * (10 ** exponent);\r\n    }\r\n}\r\n\r\n// File: contracts/thirdparty/Cloneable.sol\r\n\r\n// This code is taken from https://gist.github.com/holiman/069de8d056a531575d2b786df3345665\r\n\r\npragma solidity ^0.5.11;\r\n\r\n\r\nlibrary Cloneable {\r\n    function clone(address a)\r\n        external\r\n        returns (address)\r\n    {\r\n\r\n    /*\r\n    Assembly of the code that we want to use as init-code in the new contract,\r\n    along with stack values:\r\n                    # bottom [ STACK ] top\r\n     PUSH1 00       # [ 0 ]\r\n     DUP1           # [ 0, 0 ]\r\n     PUSH20\r\n     <address>      # [0,0, address]\r\n     DUP1           # [0,0, address ,address]\r\n     EXTCODESIZE    # [0,0, address, size ]\r\n     DUP1           # [0,0, address, size, size]\r\n     SWAP4          # [ size, 0, address, size, 0]\r\n     DUP1           # [ size, 0, address ,size, 0,0]\r\n     SWAP2          # [ size, 0, address, 0, 0, size]\r\n     SWAP3          # [ size, 0, size, 0, 0, address]\r\n     EXTCODECOPY    # [ size, 0]\r\n     RETURN\r\n\r\n    The code above weighs in at 33 bytes, which is _just_ above fitting into a uint.\r\n    So a modified version is used, where the initial PUSH1 00 is replaced by `PC`.\r\n    This is one byte smaller, and also a bit cheaper Wbase instead of Wverylow. It only costs 2 gas.\r\n\r\n     PC             # [ 0 ]\r\n     DUP1           # [ 0, 0 ]\r\n     PUSH20\r\n     <address>      # [0,0, address]\r\n     DUP1           # [0,0, address ,address]\r\n     EXTCODESIZE    # [0,0, address, size ]\r\n     DUP1           # [0,0, address, size, size]\r\n     SWAP4          # [ size, 0, address, size, 0]\r\n     DUP1           # [ size, 0, address ,size, 0,0]\r\n     SWAP2          # [ size, 0, address, 0, 0, size]\r\n     SWAP3          # [ size, 0, size, 0, 0, address]\r\n     EXTCODECOPY    # [ size, 0]\r\n     RETURN\r\n\r\n    The opcodes are:\r\n    58 80 73 <address> 80 3b 80 93 80 91 92 3c F3\r\n    We get <address> in there by OR:ing the upshifted address into the 0-filled space.\r\n      5880730000000000000000000000000000000000000000803b80938091923cF3\r\n     +000000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx000000000000000000\r\n     -----------------------------------------------------------------\r\n      588073xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx00000803b80938091923cF3\r\n\r\n    This is simply stored at memory position 0, and create is invoked.\r\n    */\r\n        address retval;\r\n        assembly{\r\n            mstore(0x0, or (0x5880730000000000000000000000000000000000000000803b80938091923cF3 ,mul(a,0x1000000000000000000)))\r\n            retval := create(0,0, 32)\r\n        }\r\n        return retval;\r\n    }\r\n}\r\n\r\n// File: contracts/lib/Ownable.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\npragma solidity ^0.5.11;\r\n\r\n\r\n/// @title Ownable\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\n/// @dev The Ownable contract has an owner address, and provides basic\r\n///      authorization control functions, this simplifies the implementation of\r\n///      \"user permissions\".\r\ncontract Ownable\r\n{\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /// @dev The Ownable constructor sets the original `owner` of the contract\r\n    ///      to the sender.\r\n    constructor()\r\n        public\r\n    {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /// @dev Throws if called by any account other than the owner.\r\n    modifier onlyOwner()\r\n    {\r\n        require(msg.sender == owner, \"UNAUTHORIZED\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Allows the current owner to transfer control of the contract to a\r\n    ///      new owner.\r\n    /// @param newOwner The address to transfer ownership to.\r\n    function transferOwnership(\r\n        address newOwner\r\n        )\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(newOwner != address(0), \"ZERO_ADDRESS\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    function renounceOwnership()\r\n        public\r\n        onlyOwner\r\n    {\r\n        emit OwnershipTransferred(owner, address(0));\r\n        owner = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/lib/Claimable.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\npragma solidity ^0.5.11;\r\n\r\n\r\n\r\n/// @title Claimable\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\n/// @dev Extension for the Ownable contract, where the ownership needs\r\n///      to be claimed. This allows the new owner to accept the transfer.\r\ncontract Claimable is Ownable\r\n{\r\n    address public pendingOwner;\r\n\r\n    /// @dev Modifier throws if called by any account other than the pendingOwner.\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == pendingOwner, \"UNAUTHORIZED\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Allows the current owner to set the pendingOwner address.\r\n    /// @param newOwner The address to transfer ownership to.\r\n    function transferOwnership(\r\n        address newOwner\r\n        )\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(newOwner != address(0) && newOwner != owner, \"INVALID_ADDRESS\");\r\n        pendingOwner = newOwner;\r\n    }\r\n\r\n    /// @dev Allows the pendingOwner address to finalize the transfer.\r\n    function claimOwnership()\r\n        public\r\n        onlyPendingOwner\r\n    {\r\n        emit OwnershipTransferred(owner, pendingOwner);\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/lib/ReentrancyGuard.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\npragma solidity ^0.5.11;\r\n\r\n\r\n/// @title ReentrancyGuard\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\n/// @dev Exposes a modifier that guards a function against reentrancy\r\n///      Changing the value of the same storage value multiple times in a transaction\r\n///      is cheap (starting from Istanbul) so there is no need to minimize\r\n///      the number of times the value is changed\r\ncontract ReentrancyGuard\r\n{\r\n    //The default value must be 0 in order to work behind a proxy.\r\n    uint private _guardValue;\r\n\r\n    // Use this modifier on a function to prevent reentrancy\r\n    modifier nonReentrant()\r\n    {\r\n        // Check if the guard value has its original value\r\n        require(_guardValue == 0, \"REENTRANCY\");\r\n\r\n        // Set the value to something else\r\n        _guardValue = 1;\r\n\r\n        // Function body\r\n        _;\r\n\r\n        // Set the value back\r\n        _guardValue = 0;\r\n    }\r\n}\r\n\r\n// File: contracts/iface/IExchange.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\npragma solidity ^0.5.11;\r\n\r\n\r\n\r\n\r\n\r\n/// @title IExchange\r\n/// @author Daniel Wang  - <daniel@loopring.org>\r\ncontract IExchange is Claimable, ReentrancyGuard\r\n{\r\n    string  constant public version          = \"\"; // must override this\r\n    bytes32 constant public genesisBlockHash = 0;  // must override this\r\n\r\n    /// @dev Clone an exchange without any initialization\r\n    /// @return  cloneAddress The address of the new exchange.\r\n    function clone()\r\n        external\r\n        nonReentrant\r\n        returns (address cloneAddress)\r\n    {\r\n        address origin = address(this);\r\n        cloneAddress = Cloneable.clone(origin);\r\n\r\n        assert(cloneAddress != origin);\r\n        assert(cloneAddress != address(0));\r\n    }\r\n}\r\n\r\n// File: contracts/iface/IExchangeV3.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\npragma solidity ^0.5.11;\r\n\r\n\r\n\r\n/// @title IExchangeV3\r\n/// @dev Note that Claimable and RentrancyGuard are inherited here to\r\n///      ensure all data members are declared on IExchangeV3 to make it\r\n///      easy to support upgradability through proxies.\r\n///\r\n///      Subclasses of this contract must NOT define constructor to\r\n///      initialize data.\r\n///\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\n/// @author Daniel Wang  - <daniel@loopring.org>\r\ncontract IExchangeV3 is IExchange\r\n{\r\n    // -- Events --\r\n    // We need to make sure all events defined in exchange/*.sol\r\n    // are aggregrated here.\r\n    event AccountCreated(\r\n        address indexed owner,\r\n        uint24  indexed id,\r\n        uint            pubKeyX,\r\n        uint            pubKeyY\r\n    );\r\n\r\n    event AccountUpdated(\r\n        address indexed owner,\r\n        uint24  indexed id,\r\n        uint            pubKeyX,\r\n        uint            pubKeyY\r\n    );\r\n\r\n    event TokenRegistered(\r\n        address indexed token,\r\n        uint16  indexed tokenId\r\n    );\r\n\r\n    event OperatorChanged(\r\n        uint    indexed exchangeId,\r\n        address         oldOperator,\r\n        address         newOperator\r\n    );\r\n\r\n    event AddressWhitelistChanged(\r\n        uint    indexed exchangeId,\r\n        address         oldAddressWhitelist,\r\n        address         newAddressWhitelist\r\n    );\r\n\r\n    event FeesUpdated(\r\n        uint    indexed exchangeId,\r\n        uint            accountCreationFeeETH,\r\n        uint            accountUpdateFeeETH,\r\n        uint            depositFeeETH,\r\n        uint            withdrawalFeeETH\r\n    );\r\n\r\n    event Shutdown(\r\n        uint            timestamp\r\n    );\r\n\r\n    event BlockCommitted(\r\n        uint    indexed blockIdx,\r\n        bytes32 indexed publicDataHash\r\n    );\r\n\r\n    event BlockVerified(\r\n        uint    indexed blockIdx\r\n    );\r\n\r\n    event BlockFinalized(\r\n        uint    indexed blockIdx\r\n    );\r\n\r\n    event Revert(\r\n        uint    indexed blockIdx\r\n    );\r\n\r\n    event DepositRequested(\r\n        uint    indexed depositIdx,\r\n        uint24  indexed accountID,\r\n        uint16  indexed tokenID,\r\n        uint96          amount,\r\n        uint            pubKeyX,\r\n        uint            pubKeyY\r\n    );\r\n\r\n    event BlockFeeWithdrawn(\r\n        uint    indexed blockIdx,\r\n        uint            amount\r\n    );\r\n\r\n    event WithdrawalRequested(\r\n        uint    indexed withdrawalIdx,\r\n        uint24  indexed accountID,\r\n        uint16  indexed tokenID,\r\n        uint96          amount\r\n    );\r\n\r\n    event WithdrawalCompleted(\r\n        uint24  indexed accountID,\r\n        uint16  indexed tokenID,\r\n        address         to,\r\n        uint96          amount\r\n    );\r\n\r\n    event WithdrawalFailed(\r\n        uint24  indexed accountID,\r\n        uint16  indexed tokenID,\r\n        address         to,\r\n        uint96          amount\r\n    );\r\n\r\n    event ProtocolFeesUpdated(\r\n        uint8 takerFeeBips,\r\n        uint8 makerFeeBips,\r\n        uint8 previousTakerFeeBips,\r\n        uint8 previousMakerFeeBips\r\n    );\r\n\r\n    // -- Initialization --\r\n    /// @dev Initializes this exchange. This method can only be called once.\r\n    /// @param  owner The owner of this exchange.\r\n    /// @param  exchangeId The id of this exchange.\r\n    /// @param  operator The operator address of the exchange who will be responsible for\r\n    ///         submitting blocks and proofs.\r\n    /// @param  loopringAddress The corresponding ILoopring contract address.\r\n    /// @param  onchainDataAvailability True if \"Data Availability\" is turned on for this\r\n    ///         exchange. Note that this value can not be changed once the exchange is initialized.\r\n    function initialize(\r\n        address loopringAddress,\r\n        address owner,\r\n        uint    exchangeId,\r\n        address payable operator,\r\n        bool    onchainDataAvailability\r\n        )\r\n        external;\r\n\r\n    // -- Mode --\r\n    /// @dev Whether the exchange is in withdrawal mode.\r\n    /// @return Returns true if the exchange is in withdrawal mode, else false\r\n    function isInWithdrawalMode()\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    /// @dev Whether the exchange is shutdown.\r\n    /// @return Returns true if the exchange is shutdown, else false\r\n    function isShutdown()\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    // -- Accounts --\r\n\r\n    /// @dev Gets the number of accounts registered on this exchange.\r\n    /// @return The number of accounts registered\r\n    function getNumAccounts()\r\n        external\r\n        view\r\n        returns (uint);\r\n\r\n    /// @dev Get the account information for a given address.\r\n    /// @param  owner The owning address of the account\r\n    /// @return accountID The account's ID\r\n    /// @return pubKeyX The first part of the account's trading EdDSA public key\r\n    /// @return pubKeyY The second part of the account's trading EdDSA public key\r\n    function getAccount(\r\n        address owner\r\n        )\r\n        external\r\n        view\r\n        returns (\r\n            uint24 accountID,\r\n            uint   pubKeyX,\r\n            uint   pubKeyY\r\n        );\r\n\r\n    /// @dev Submit an onchain request to create a new account for msg.sender or\r\n    ///      update its existing account by replacing its trading public key.\r\n    ///      The total fee in ETH that the user needs to pay is:\r\n    ///          depositFee +\r\n    ///          (isAccountNew ? accountCreationFee : 0) +\r\n    ///          (isAccountUpdated ? accountUpdateFee : 0)\r\n    ///      If the user sends too much ETH the surplus is sent back immediately.\r\n    ///\r\n    ///      Note that after such an operation, it will take the operator some\r\n    ///      time (no more than MAX_AGE_REQUEST_UNTIL_FORCED) to process the request\r\n    ///      and create or update the offchain account.\r\n    ///\r\n    ///      Calling this method with a different trading public key will effectively\r\n    ///      cancel all existing orders within MAX_AGE_REQUEST_UNTIL_FORCED.\r\n    ///\r\n    /// @param  pubKeyX The first part of the account's trading EdDSA public key\r\n    /// @param  pubKeyY The second part of the account's trading EdDSA public key.\r\n    ///                 Note that pubkeyX and pubKeyY cannot be both `1`.\r\n    /// @param  permission Data used for checking address whitelisting prior to\r\n    ///                    account creation.\r\n    /// @return accountID The account's ID\r\n    /// @return isAccountNew True if this account is newly created, false if the account existed\r\n    /// @return isAccountUpdated True if this account was updated, false otherwise\r\n    function createOrUpdateAccount(\r\n        uint  pubKeyX,\r\n        uint  pubKeyY,\r\n        bytes calldata permission\r\n        )\r\n        external\r\n        payable\r\n        returns (\r\n            uint24 accountID,\r\n            bool   isAccountNew,\r\n            bool   isAccountUpdated\r\n        );\r\n\r\n    // -- Balances --\r\n    /// @dev Verifies that the given information is stored in the merkle tree with\r\n    ///      the specified merkle root.\r\n    /// @param  merkleRoot The merkle tree root of all account data\r\n    /// @param  accountID The ID of the account the balance is verified for\r\n    /// @param  tokenID The ID of the token the balance is verified for\r\n    /// @param  pubKeyX The first part of the public key of the account\r\n    /// @param  pubKeyY The second part of the public key of the account\r\n    /// @param  nonce The nonce of the account\r\n    /// @param  balance The balance of the account for the given token\r\n    /// @param  tradeHistoryRoot The merkle root of the trade history of the given token\r\n    /// @param  accountMerkleProof The merkle proof (side node hashes) for the account.\r\n    ///                      The deepest hash in the tree is the 1st element of the array.\r\n    /// @param  balanceMerkleProof he merkle proof (side node hashes) for the balance of the\r\n    ///                      token for the account. The deepest hash in the tree is the\r\n    ///                      1st element of the array.\r\n    /// @return True if the given information is stored in the merkle tree, false otherwise\r\n    function isAccountBalanceCorrect(\r\n        uint     merkleRoot,\r\n        uint24   accountID,\r\n        uint16   tokenID,\r\n        uint     pubKeyX,\r\n        uint     pubKeyY,\r\n        uint32   nonce,\r\n        uint96   balance,\r\n        uint     tradeHistoryRoot,\r\n        uint[30] calldata accountMerkleProof,\r\n        uint[12] calldata balanceMerkleProof\r\n        )\r\n        external\r\n        pure\r\n        returns (bool);\r\n\r\n    // -- Tokens --\r\n\r\n    /// @dev Get the required amount of LRC to burn for registering one more token.\r\n    /// @return feeLRC The amount of LRC to burn.\r\n    function getLRCFeeForRegisteringOneMoreToken()\r\n        external\r\n        view\r\n        returns (uint feeLRC);\r\n\r\n    /// @dev Register an ERC20 token for a token id. Note that different exchanges may have\r\n    ///      different ids for the same ERC20 token.\r\n    ///\r\n    ///      Please note that 1 is reserved for Ether (ETH), 2 is reserved for Wrapped Ether (ETH),\r\n    ///      and 3 is reserved for Loopring Token (LRC).\r\n    ///\r\n    ///      This function is only callable by the exchange owner.\r\n    ///\r\n    /// @param  tokenAddress The token's address\r\n    /// @return tokenID The token's ID in this exchanges.\r\n    /// @return isAccountNew True if this account is newly created, false if the account existed\r\n    function registerToken(\r\n        address tokenAddress\r\n        )\r\n        external\r\n        returns (uint16 tokenID);\r\n\r\n    /// @dev Returns the id of a registered token.\r\n    /// @param  tokenAddress The token's address\r\n    /// @return tokenID The token's ID in this exchanges.\r\n    function getTokenID(\r\n        address tokenAddress\r\n        )\r\n        external\r\n        view\r\n        returns (uint16 tokenID);\r\n\r\n    /// @dev Returns the address of a registered token.\r\n    /// @param  tokenID The token's ID in this exchanges.\r\n    /// @return tokenAddress The token's address\r\n    function getTokenAddress(\r\n        uint16 tokenID\r\n        )\r\n        external\r\n        view\r\n        returns (address tokenAddress);\r\n\r\n    /// @dev Disable users to submit onchain deposit requests for a token.\r\n    ///      This function is only callable by the exchange owner.\r\n    /// @param  tokenAddress The token's address\r\n    function disableTokenDeposit(\r\n        address tokenAddress\r\n        )\r\n        external;\r\n\r\n    /// @dev Enable users to submit onchain deposit requests for a token.\r\n    ///      This function is only callable by the exchange owner.\r\n    /// @param  tokenAddress The token's address\r\n    function enableTokenDeposit(\r\n        address tokenAddress\r\n        )\r\n        external;\r\n\r\n    // -- Stakes --\r\n    /// @dev Get the amount of LRC the owner has staked onchain for this exchange.\r\n    ///      The stake will be burned if the exchange does not fulfill its duty by\r\n    ///      processing user requests in time. Please note that order matching may potentially\r\n    ///      performed by another party and is not part of the exchange's duty.\r\n    ///\r\n    /// @return The amount of LRC staked\r\n    function getExchangeStake()\r\n        external\r\n        view\r\n        returns (uint);\r\n\r\n    /// @dev Withdraws the amount staked for this exchange.\r\n    ///      This can only be done if the exchange has been correctly shutdown:\r\n    ///      - The exchange owner has shutdown the exchange\r\n    ///      - All deposit requests are processed\r\n    ///      - All funds are returned to the users (merkle root is reset to initial state)\r\n    ///\r\n    ///      Can only be called by the exchange owner.\r\n    ///\r\n    /// @return The amount of LRC withdrawn\r\n    function withdrawExchangeStake(\r\n        address recipient\r\n        )\r\n        external\r\n        returns (uint);\r\n\r\n    /// @dev Withdraws all tokens not owned by users, e.g., candies, airdrops.\r\n    ///      Can only be called by the exchange owner.\r\n    ///\r\n    /// @param tokenAddress The adderss of the token.\r\n    /// @param recipient The address to send the token or ether.\r\n    /// @return The amount of token withdrawn\r\n    function withdrawTokenNotOwnedByUsers(\r\n        address tokenAddress,\r\n        address payable recipient\r\n        )\r\n        external\r\n        returns (uint);\r\n\r\n    /// @dev Withdraws the amount staked for this exchange.\r\n    ///      This can always be called.\r\n    ///      Can only be called by the exchange owner.\r\n    /// @param  recipient The recipient of the withdrawn LRC\r\n    /// @param  amount The amount of LRC that needs to be withdrawn\r\n    function withdrawProtocolFeeStake(\r\n        address recipient,\r\n        uint    amount\r\n        )\r\n        external;\r\n\r\n    /// @dev Can by called by anyone to burn the stake of the exchange when certain\r\n    ///      conditions are fulfilled.\r\n    ///\r\n    ///      Currently this will only burn the stake of the exchange if there are\r\n    ///      unfinalized blocks and the exchange is in withdrawal mode.\r\n    function burnExchangeStake()\r\n        external;\r\n\r\n    // -- Blocks --\r\n    /// @dev Get the height of this exchange's virtual blockchain. The block height for a\r\n    ///      new exchange is 0.\r\n    /// @return The virtual blockchain height which is the index of the last block.\r\n    function getBlockHeight()\r\n        external\r\n        view\r\n        returns (uint);\r\n\r\n    /// @dev Get the number of finalized (i.e. irreversible) blocks.\r\n    /// @return The number of finalized blocks which is the index of the last finalized block.\r\n    function getNumBlocksFinalized()\r\n        external\r\n        view\r\n        returns (uint);\r\n\r\n    /// @dev Returns the block data for the specified block index.\r\n    /// @param  blockIdx The block index\r\n    /// @return merkleRoot The merkle root\r\n    /// @return publicDataHash The hash of all public data. Used as public input for the ZKP.\r\n    /// @return blockState The current state of the block\r\n    /// @return blockType The type of work done in the block\r\n    /// @return blockSize The number of requests handled in the block\r\n    /// @return timestamp The time the block was committed on-chain\r\n    /// @return blockState The current state of the block\r\n    /// @return numDepositRequestsCommitted The total number of deposit requests committed\r\n    /// @return numWithdrawalRequestsCommitted The total number of withdrawal requests committed\r\n    /// @return blockFeeWithdrawn True if the block fee has been withdrawn, else false\r\n    /// @return numWithdrawalsDistributed The number of withdrawals that have been done for this block\r\n    function getBlock(\r\n        uint blockIdx\r\n        )\r\n        external\r\n        view\r\n        returns (\r\n            bytes32 merkleRoot,\r\n            bytes32 publicDataHash,\r\n            uint8   blockState,\r\n            uint8   blockType,\r\n            uint16  blockSize,\r\n            uint32  timestamp,\r\n            uint32  numDepositRequestsCommitted,\r\n            uint32  numWithdrawalRequestsCommitted,\r\n            bool    blockFeeWithdrawn,\r\n            uint16  numWithdrawalsDistributed\r\n        );\r\n\r\n    /// @dev Commit a new block to the virtual blockchain without the proof.\r\n    ///      This function is only callable by the exchange operator.\r\n    ///\r\n    /// @param blockType The type of the new block\r\n    /// @param blockSize The number of onchain or offchain requests/settlements\r\n    ///        that have been processed in this block\r\n    /// @param blockVersion The circuit version to use for verifying the block\r\n    /// @param data The data for this block -\r\n    ///        For all block types:\r\n    ///            - Compression type: 1 bytes\r\n    ///            - Exchange ID: 4 bytes\r\n    ///            - Old merkle root: 32 bytes\r\n    ///            - New merkle root: 32 bytes\r\n    ///        For RING_SETTLEMENT blocks add the following data:\r\n    ///            - timestamp used in the block: 4 bytes\r\n    ///            - protocolTakerFeeBips: 1 bytes\r\n    ///            - protocolMakerFeeBips: 1 bytes\r\n    ///            - Label hash: 32 bytes\r\n    ///        For DEPOSIT blocks add the following data:\r\n    ///            - Starting hash: 32 bytes\r\n    ///            - Ending hash: 32 bytes\r\n    ///            - Start index (in deposit chain): 4 bytes\r\n    ///            - Number of deposits processed: 4 bytes\r\n    ///        For ONCHAIN_WITHDRAWAL blocks add the following data:\r\n    ///            - Starting hash: 32 bytes\r\n    ///            - Ending hash: 32 bytes\r\n    ///            - Start index (in withdrawal chain): 4 bytes\r\n    ///            - Number of withdrawals processed: 4 bytes\r\n    ///            - For every withdrawal:\r\n    ///                - Token ID: 1 bytes\r\n    ///                - Account ID: 2,5 bytes\r\n    ///                - Amount: 3,5 bytes\r\n    ///        For OFFCHAIN_WITHDRAWAL blocks add the following data:\r\n    ///            - For every withdrawal:\r\n    ///                - Token ID: 1 bytes\r\n    ///                - Account ID: 2,5 bytes\r\n    ///                - Amount: 3,5 bytes\r\n    ///            - Label hash: 32 bytes\r\n    ///        For ORDER_CANCELLATION blocks add the following data:\r\n    ///            - Label hash: 32 bytes\r\n    ///\r\n    ///        The 'onchain data availability' data (if enabled) is added\r\n    ///        at the end. This allows anyone to recreate the merkle tree\r\n    ///        just by using data published on the Ethereum blockchain.\r\n    ///\r\n    ///        For RING_SETTLEMENT blocks add the following data:\r\n    ///            - Operator account ID: 3 bytes\r\n    ///            - For every ring\r\n    ///                - OrderA.orderID: 2,5 bytes\r\n    ///                - OrderB.orderID: 2,5 bytes\r\n    ///                - OrderA.accountID: 2,5 bytes\r\n    ///                - OrderB.accountID: 2,5 bytes\r\n    ///                - For both Orders:\r\n    ///                    - TokenS: 1 bytes\r\n    ///                    - FillS: 3 bytes\r\n    ///                    - OrderData: isBuyOrder (1 bit) | isRebate (1 bit) |\r\n    ///                                 feeOrRebateBips (6 bits)\r\n    ///        For DEPOSIT blocks add the following data:\r\n    ///            - None\r\n    ///        For ONCHAIN_WITHDRAWAL blocks add the following data:\r\n    ///            - None\r\n    ///        For OFFCHAIN_WITHDRAWALAL blocks add the following data:\r\n    ///            - Operator account ID: 3 bytes\r\n    ///            - For every withdrawal:\r\n    ///                - Fee token ID: 1 bytes\r\n    ///                - Fee amount: 2 bytes\r\n    ///        For ORDER_CANCELLATION blocks add the following data:\r\n    ///            - Operator account ID: 3 bytes\r\n    ///            - For every cancel:\r\n    ///                - Account ID: 2,5 bytes\r\n    ///                - Order ID: 2,5 bytes\r\n    ///                - Token ID: 1 bytes\r\n    ///                - Fee token ID: 1 bytes\r\n    ///                - Fee amount: 2 bytes\r\n    ///\r\n    ///        The RING_SETTLEMENT data availability data is further transformed\r\n    ///        to make it more compressible:\r\n    ///        - To group more similar data together we don't store all data\r\n    ///          for a ring next to each other but group them together for all rings.\r\n    ///          For ALL rings, sequentially:\r\n    ///             - orderA.orderID + orderB.orderID\r\n    ///             - orderA.accountID + orderB.accountID\r\n    ///             - orderA.tokenS + orderB.tokenS\r\n    ///             - orderA.fillS + orderB.fillS\r\n    ///             - orderA.orderData\r\n    ///             - orderB.orderData\r\n    ///\r\n    ///        The data can be sent on-chain compressed. The data will be decompressed respecting the\r\n    ///        Compression type (the first byte in 'data'):\r\n    ///            - Mode 0: No compression. The data following the mode byte is used as is.\r\n    ///            - Mode 1: An IDecompressor address (20 bytes) is stored after the mode byte.\r\n    ///                      IDecompressor.decompress() will be called to decompress the following data.\r\n    /// @param offchainData Arbitrary data, mainly for off-chain data-availability, i.e.,\r\n    ///        the multihash of the IPFS file that contains the block data.\r\n    function commitBlock(\r\n        uint8  blockType,\r\n        uint16 blockSize,\r\n        uint8  blockVersion,\r\n        bytes  calldata data,\r\n        bytes  calldata offchainData\r\n        )\r\n        external;\r\n\r\n    /// @dev Submits ZK proofs onchain to verify previously committed blocks. Submitting an\r\n    ///      invalid proof will not change the state of the exchange. Note that proofs can\r\n    ///      be submitted in a different order than the blocks themselves.\r\n    ///\r\n    ///      Multiple blocks can be verified at once (in any order) IF they use the same circuit.\r\n    ///      This function will throw if blocks using different circuits need to be verified.\r\n    ///\r\n    ///      This method can only be called by the operator.\r\n    ///\r\n    /// @param blockIndices The 0-based index of the blocks to be verified with the given proofs\r\n    /// @param proofs The ZK proof for all blockIndices (proofs.length % 8 == 0).\r\n    function verifyBlocks(\r\n        uint[] calldata blockIndices,\r\n        uint[] calldata proofs\r\n        )\r\n        external;\r\n\r\n    /// @dev Revert the exchange's virtual blockchain until a specific block index.\r\n    ///      After MAX_PROOF_GENERATION_TIME_IN_SECONDS seconds (the timeout), if a valid\r\n    ///      proof is still not submitted onchain, the operator can call this method to trigger\r\n    ///      the blockchain to revert.\r\n    ///\r\n    ///      If more than one blocks (A, B) are missing proofs after the required timeout,\r\n    ///      one can only trigger the blockchain to revert until A.\r\n    ///\r\n    ///      This method can only be called by the operator when not in withdrawal mode.\r\n    ///\r\n    ///      In withdrawal mode anyone can call burnStake so the exchange still gets punished\r\n    ///      for committing blocks it does not prove.\r\n    ///\r\n    /// @param blockIdx The 0-based index of the block that does not have a valid proof within\r\n    ///        MAX_PROOF_GENERATION_TIME_IN_SECONDS seconds.\r\n    function revertBlock(\r\n        uint blockIdx\r\n        )\r\n        external;\r\n\r\n    // -- Deposits --\r\n    /// @dev Returns the index of the first deposit request that wasn't yet included\r\n    ///      in a block. Can be used to check if a deposit with a given depositIdx\r\n    ///      (as specified in the DepositRequested event) was processed by the operator.\r\n    /// @return The num of the processed deposit requests\r\n    function getNumDepositRequestsProcessed()\r\n        external\r\n        view\r\n        returns (uint);\r\n\r\n    /// @dev Get the number of available onchain deposit slots.\r\n    /// @return The number of slots avalable for deposits.\r\n    function getNumAvailableDepositSlots()\r\n        external\r\n        view\r\n        returns (uint);\r\n\r\n    /// @dev Get an item from deposit request-chain.\r\n    /// @param index The 0-based index of the request\r\n    /// @return accumulatedHash See @Request\r\n    /// @return accumulatedFee  See @Request\r\n    /// @return timestamp       See @Request\r\n    function getDepositRequest(\r\n        uint index\r\n        )\r\n        external\r\n        view\r\n        returns (\r\n          bytes32 accumulatedHash,\r\n          uint    accumulatedFee,\r\n          uint32  timestamp\r\n        );\r\n\r\n    /// @dev Deposit Ether or ERC20 tokens to the sender's account.\r\n    ///      This function will create a new account if no account exists\r\n    ///      for msg.sender, or update the existing account with the given trading\r\n    ///      public key when the account exists.\r\n    ///\r\n    ///      The total fee in ETH that the user needs to pay is:\r\n    ///          depositFee +\r\n    ///          (isAccountNew ? accountCreationFee : 0) +\r\n    ///          (isAccountUpdated ? accountUpdateFee : 0)\r\n    ///      If the user sends too much ETH the surplus is sent back immediately.\r\n    ///\r\n    ///      Note that after such an operation, it will take the operator some\r\n    ///      time (no more than MAX_AGE_REQUEST_UNTIL_FORCED) to process the request\r\n    ///      and create the deposit to the offchain account.\r\n    ///\r\n    ///      Calling this method with a different trading public key will effectively\r\n    ///      cancel all existing orders within MAX_AGE_REQUEST_UNTIL_FORCED.\r\n    ///\r\n    /// @param  pubKeyX The first part of the account's trading EdDSA public key\r\n    /// @param  pubKeyY The second part of the account's trading EdDSA public key\r\n    /// @param  permission Data used for checking address whitelisting prior to\r\n    ///                    account creation.\r\n    /// @param  tokenAddress The adderss of the token, use `0x0` for Ether.\r\n    /// @param  amount The amount of tokens to deposit\r\n    /// @return accountID The id of the account\r\n    /// @return isAccountNew True if this account is newly created, false if the account existed\r\n    /// @return isAccountUpdated True if this account was updated, false otherwise\r\n    function updateAccountAndDeposit(\r\n        uint    pubKeyX,\r\n        uint    pubKeyY,\r\n        address tokenAddress,\r\n        uint96  amount,\r\n        bytes   calldata permission\r\n        )\r\n        external\r\n        payable\r\n        returns (\r\n            uint24 accountID,\r\n            bool   isAccountNew,\r\n            bool   isAccountUpdated\r\n        );\r\n\r\n    /// @dev Deposit Ether or ERC20 tokens to the sender's account.\r\n    ///\r\n    ///      The total fee in ETH that the user needs to pay is 'depositFee'.\r\n    ///      If the user sends too much ETH the surplus is sent back immediately.\r\n    ///\r\n    ///      Note that after such an operation, it will take the operator some\r\n    ///      time (no more than MAX_AGE_REQUEST_UNTIL_FORCED) to process the request\r\n    ///      and create the deposit to the offchain account.\r\n    ///\r\n    ///      Warning: the DEX UI should warn their users not to deposit more than 2^96 - 1\r\n    ///               tokens in total. If that happens, the user may lose token.\r\n    ///               This token balance upper limit, however, is large enough for most scenarios.\r\n    ///\r\n    /// @param tokenAddress The address of the token, use `0x0` for Ether.\r\n    /// @param amount The amount of tokens to deposit\r\n    function deposit(\r\n        address tokenAddress,\r\n        uint96  amount\r\n        )\r\n        external\r\n        payable;\r\n\r\n    /// @dev Deposit Ether or ERC20 tokens to a recipient account.\r\n    ///\r\n    ///      The total fee in ETH that the user needs to pay is 'depositFee'.\r\n    ///      If the user sends too much ETH the surplus is sent back immediately.\r\n    ///\r\n    ///      Note that after such an operation, it will take the operator some\r\n    ///      time (no more than MAX_AGE_REQUEST_UNTIL_FORCED) to process the request\r\n    ///      and create the deposit to the offchain account.\r\n    ///\r\n    ///      Warning: the DEX UI should warn their users not to deposit more than 2^96 - 1\r\n    ///               tokens in total. If that happens, the user may lose token.\r\n    ///               This token balance upper limit, however, is large enough for most scenarios.\r\n    ///\r\n    /// @param recipient The address of the recipient\r\n    /// @param tokenAddress The adderss of the token, use `0x0` for Ether.\r\n    /// @param amount The amount of tokens to deposit\r\n    function depositTo(\r\n        address recipient,\r\n        address tokenAddress,\r\n        uint96  amount\r\n        )\r\n        external\r\n        payable;\r\n\r\n    // -- Withdrawals --\r\n    /// @dev Returns the index of the first withdrawal request that wasn't yet included\r\n    ///      in a block. Can be used to check if a withdrawal with a given withdrawalIdx\r\n    ///      (as specified in the WithdrawalRequested event) was processed by the operator.\r\n    /// @return The num of processed withdrawal requests\r\n    function getNumWithdrawalRequestsProcessed()\r\n        external\r\n        view\r\n        returns (uint);\r\n\r\n    /// @dev Get the number of available onchain withdrawal slots.\r\n    /// @return The number of slots available for withdrawals\r\n    function getNumAvailableWithdrawalSlots(\r\n        )\r\n        external\r\n        view\r\n        returns (uint);\r\n\r\n    /// @dev Get an item from withdrawal request-chain.\r\n    /// @param index The 0-based index of the request\r\n    /// @return accumulatedHash See @Request\r\n    /// @return accumulatedFee  See @Request\r\n    /// @return timestamp       See @Request\r\n    function getWithdrawRequest(\r\n        uint index\r\n        )\r\n        external\r\n        view\r\n        returns (\r\n            bytes32 accumulatedHash,\r\n            uint    accumulatedFee,\r\n            uint32  timestamp\r\n        );\r\n\r\n    /// @dev Submit an onchain request to withdraw Ether or ERC20 tokens. To withdraw\r\n    ///      all the balance, use a very large number for `amount`.\r\n    ///\r\n    ///      Only the owner of the account can request a withdrawal.\r\n    ///\r\n    ///      The total fee in ETH that the user needs to pay is 'withdrawalFee'.\r\n    ///      If the user sends too much ETH the surplus is sent back immediately.\r\n    ///\r\n    ///      Note that after such an operation, it will take the operator some\r\n    ///      time (no more than MAX_AGE_REQUEST_UNTIL_FORCED) to process the request\r\n    ///      and create the deposit to the offchain account.\r\n    ///\r\n    /// @param tokenAddress The address of the token, use `0x0` for Ether.\r\n    /// @param amount The amount of tokens to deposit\r\n    function withdraw(\r\n        address tokenAddress,\r\n        uint96  amount\r\n        )\r\n        external\r\n        payable;\r\n\r\n    /// @dev Submit an onchain request to withdraw Ether or ERC20 tokens from the\r\n    ///      protocol fees account. The complete balance is always withdrawn.\r\n    ///\r\n    ///      Anyone can request a withdrawal of the protocol fees.\r\n    ///\r\n    ///      Note that after such an operation, it will take the operator some\r\n    ///      time (no more than MAX_AGE_REQUEST_UNTIL_FORCED) to process the request\r\n    ///      and create the deposit to the offchain account.\r\n    ///\r\n    /// @param tokenAddress The address of the token, use `0x0` for Ether.\r\n    function withdrawProtocolFees(\r\n        address tokenAddress\r\n        )\r\n        external\r\n        payable;\r\n\r\n    /// @dev Allows an account owner to withdraw his funds using the balances stored\r\n    ///      in the merkle tree. The funds will be sent to the owner of the account.\r\n    ///\r\n    ///      Trading pubKey matching the offchain Merkle tree need to be provided.\r\n    ///      The pubKey may already be reset to 0 when the exchange is shutdown.\r\n    ///      The pubKey passed in here is used to calculate the Merkle root, which\r\n    ///      needs to match perfectly with the offchain Merkle root. The onchain pubKey\r\n    ///      doesn't matter at all in withdrawal mode.\r\n    ///\r\n    ///      Can only be used in withdrawal mode (i.e. when the operator has stopped\r\n    ///      committing blocks and is not able to commit anymore blocks).\r\n    ///\r\n    ///      This will NOT modify the onchain merkle root! The merkle root stored\r\n    ///      onchain will remain the same after the withdrawal. We store if the user\r\n    ///      has withdrawn the balance in State.withdrawnInWithdrawMode.\r\n    ///\r\n    /// @param  token The address of the token to withdraw the tokens for\r\n    /// @param  pubKeyX The first part of the public key of the account\r\n    /// @param  pubKeyY The second part of the public key of the account\r\n    /// @param  nonce The nonce of the account\r\n    /// @param  balance The balance of the account for the given token\r\n    /// @param  tradeHistoryRoot The merkle root of the trade history of the given token\r\n    /// @param  accountMerkleProof The merkle proof (side node hashes) for the account.\r\n    ///                      The deepest hash in the tree is the 1st element of the array.\r\n    /// @param  balanceMerkleProof he merkle proof (side node hashes) for the balance of the\r\n    ///                      token for the account. The deepest hash in the tree is the\r\n    ///                      1st element of the array.\r\n    function withdrawFromMerkleTree(\r\n        address  token,\r\n        uint     pubKeyX,\r\n        uint     pubKeyY,\r\n        uint32   nonce,\r\n        uint96   balance,\r\n        uint     tradeHistoryRoot,\r\n        uint[30] calldata accountMerkleProof,\r\n        uint[12] calldata balanceMerkleProof\r\n        )\r\n        external;\r\n\r\n    /// @dev Allows anyone to withdraw funds for a specified user using the balances stored\r\n    ///      in the merkle tree. The funds will be sent to the owner of the acount.\r\n    ///\r\n    ///      Can only be used in withdrawal mode (i.e. when the operator has stopped\r\n    ///      committing blocks and is not able to commit anymore blocks).\r\n    ///\r\n    ///      This will NOT modify the onchain merkle root! The merkle root stored\r\n    ///      onchain will remain the same after the withdrawal. We store if the user\r\n    ///      has withdrawn the balance in State.withdrawnInWithdrawMode.\r\n    ///\r\n    /// @param  owner The owner of the account to withdraw the funds for.\r\n    /// @param  token The address of the token to withdraw the tokens for\r\n    /// @param  pubKeyX The first part of the public key of the account\r\n    /// @param  pubKeyY The second part of the public key of the account\r\n    /// @param  nonce The nonce of the account\r\n    /// @param  balance The balance of the account for the given token\r\n    /// @param  tradeHistoryRoot The merkle root of the trade history of the given token\r\n    /// @param  accountMerkleProof The merkle proof (side node hashes) for the account.\r\n    ///                      The deepest hash in the tree is the 1st element of the array.\r\n    /// @param  balanceMerkleProof he merkle proof (side node hashes) for the balance of the\r\n    ///                      token for the account. The deepest hash in the tree is the\r\n    ///                      1st element of the array.\r\n    function withdrawFromMerkleTreeFor(\r\n        address  owner,\r\n        address  token,\r\n        uint     pubKeyX,\r\n        uint     pubKeyY,\r\n        uint32   nonce,\r\n        uint96   balance,\r\n        uint     tradeHistoryRoot,\r\n        uint[30] calldata accountMerkleProof,\r\n        uint[12] calldata balanceMerkleProof\r\n        )\r\n        external;\r\n\r\n    /// @dev Allows withdrawing funds deposited to the contract in a deposit request when\r\n    ///      it was never committed in a block (so the balance in the merkle tree was\r\n    ///      not updated).\r\n    ///\r\n    ///      Can be called by anyone. The deposited tokens will be sent back to\r\n    ///      the owner of the account they were deposited in.\r\n    ///\r\n    ///      Can only be used in withdrawal mode (i.e. when the operator has stopped\r\n    ///      committing blocks and is not able to commit anymore blocks).\r\n    ///\r\n    /// @param  depositIdx The index of the deposit request (as given in the\r\n    ///                    depositIdx field in the DepositRequested event)\r\n    function withdrawFromDepositRequest(\r\n        uint depositIdx\r\n        )\r\n        external;\r\n\r\n    /// @dev Allows withdrawing funds after a withdrawal request (either onchain\r\n    ///      or offchain) was committed in a block by the operator.\r\n    ///\r\n    ///      Can be called by anyone. The withdrawn tokens will be sent to\r\n    ///      the owner of the account they were withdrawn out.\r\n    ///\r\n    ///      Normally it is should not be needed for users to call this manually.\r\n    ///      Funds from withdrawal requests will be sent to the account owner\r\n    ///      by the operator in distributeWithdrawals. The user can however\r\n    ///      choose to withdraw earlier if he wants, or will need to call this\r\n    ///      manually if nobody calls distributeWithdrawals.\r\n    ///\r\n    ///      Funds can only be withdrawn from requests processed in a\r\n    ///      finalized block (i.e. a block that can never be reverted).\r\n    ///\r\n    /// @param  blockIdx The block the withdrawal requests was committed in\r\n    /// @param  slotIdx The index in the list of withdrawals that were processed\r\n    ///                 by the operator. It is not possible for users to know\r\n    ///                 what this index will be for their withdrawal request.\r\n    function withdrawFromApprovedWithdrawal(\r\n        uint blockIdx,\r\n        uint slotIdx\r\n        )\r\n        external;\r\n\r\n    /// @dev Allows the operator to withdraw the fees he earned by processing the\r\n    ///      deposit and onchain withdrawal requests.\r\n    ///\r\n    ///      This function is only callable by the exchange operator.\r\n    ///\r\n    ///      The block fee can only be withdrawn from finalized blocks\r\n    ///      (i.e. blocks that can never be reverted).\r\n    ///\r\n    /// @param  blockIdx The block index to withdraw the funds for\r\n    /// @param  feeRecipient The address that receives the block fee\r\n    /// @return feeAmount The amount of ETH earned in the block and sent to the operator\r\n    function withdrawBlockFee(\r\n        uint    blockIdx,\r\n        address payable feeRecipient\r\n        )\r\n        external\r\n        returns (uint feeAmount);\r\n\r\n    /// @dev Distributes the the funds to the account owners after their withdrawal\r\n    ///      requests were processed by the operator.\r\n    ///\r\n    ///      Needs to be called by the operator after submitting a block processing\r\n    ///      withdrawal requests (either onchain or offchain requests) after the block\r\n    ///      is finalized and before the block is MAX_TIME_TO_DISTRIBUTE_WITHDRAWALS seconds old.\r\n    ///\r\n    ///      If the operator fails to do so anyone will be able to call this function\r\n    ///      and the stake of the exchange will be used to reward the caller of this function.\r\n    ///      The amount of staked LRC withdrawn is calculated as follows:\r\n    ///\r\n    ///      totalFine = withdrawalFineLRC * numWithdrawalRequestsInBlock\r\n    ///      The caller of the function will be rewarded half this amount,\r\n    ///      the other half is burned.\r\n    ///\r\n    ///      Only withdrawals processed in finalized blocks can be distributed.\r\n    ///\r\n    ///      The withdrawals can be done in multiple transactions because the token transfers\r\n    ///      are more expensive than committing and proving a block, so it's possible more\r\n    ///      withdrawals requests are processed in a block than can be distributed\r\n    ///      in an Ethereum block.\r\n    ///      This function will automatically stop distributing the withdrawals when the amount\r\n    ///      of gas left is less than MIN_GAS_TO_DISTRIBUTE_WITHDRAWALS.\r\n    ///      So there are 2 ways to  limit the number of withdrawals:\r\n    ///          - using the maxNumWithdrawals parameter\r\n    ///          - limiting the amount of gas in the transaction\r\n    ///\r\n    /// @param  blockIdx The block index to distribute the funds from the withdrawal requests for\r\n    /// @param  maxNumWithdrawals The max number of withdrawals to distribute. Can be lower than the\r\n    ///         number of withdrawal requests processed in the block. Withdrawals are distributed\r\n    ///         in the same order the withdrawal requests were processed in the block.\r\n    ///         If the withdrawals are done in multiple parts we always start from the\r\n    ///         first withdrawal that was not yet distributed.\r\n    function distributeWithdrawals(\r\n        uint blockIdx,\r\n        uint maxNumWithdrawals\r\n        )\r\n        external;\r\n\r\n    // -- Admins --\r\n\r\n    /// @dev Set the operator address.\r\n    /// @param _operator The new operator's address\r\n    /// @return oldOperator The old operator's address\r\n    function setOperator(\r\n        address payable _operator\r\n        )\r\n        external\r\n        returns (address payable oldOperator);\r\n\r\n    /// @dev Set the address whitelist contract address.\r\n    ///      Can only be called by the exchange owner.\r\n    /// @param _addressWhitelist The new address whitelist contract address\r\n    /// @return oldAddressWhitelist The old address whitelist contract address\r\n    function setAddressWhitelist(\r\n        address _addressWhitelist\r\n        )\r\n        external\r\n        returns (address oldAddressWhitelist);\r\n\r\n    /// @dev Update fee settings.\r\n    ///      This function is only callable by the exchange owner.\r\n    /// @param _accountCreationFeeETH The fee in ETH for account creation\r\n    /// @param _accountUpdateFeeETH The fee in ETH for account update\r\n    /// @param _depositFeeETH The fee in ETH for deposits\r\n    /// @param _withdrawalFeeETH The fee in ETH for onchain withdrawal requests\r\n    function setFees(\r\n        uint _accountCreationFeeETH,\r\n        uint _accountUpdateFeeETH,\r\n        uint _depositFeeETH,\r\n        uint _withdrawalFeeETH\r\n        )\r\n        external;\r\n\r\n    /// @dev Get current fee settings.\r\n    /// @return _accountCreationFeeETH The fee in ETH for account creation\r\n    /// @return _accountUpdateFeeETH The fee in ETH for account update\r\n    /// @return _depositFeeETH The fee in ETH for deposits\r\n    /// @return _withdrawalFeeETH The fee in ETH for onchain withdrawal requests\r\n    function getFees()\r\n        external\r\n        view\r\n        returns (\r\n            uint _accountCreationFeeETH,\r\n            uint _accountUpdateFeeETH,\r\n            uint _depositFeeETH,\r\n            uint _withdrawalFeeETH\r\n        );\r\n\r\n    /// @dev Starts or continues maintenance mode for the specified duration.\r\n    ///      The necessary additional downtime minutes will be purchased. The number of\r\n    ///      downtime minutes still available for use can be checked with getRemainingDowntime().\r\n    ///      In maintenance mode, all onchain user requests, including account creation,\r\n    ///      account update, deposits, and withdrawal requests are disabled.\r\n    ///\r\n    ///      The remaining downtime time will be extended so that the exchange can stay in\r\n    ///      maintenance mode for at least `durationMinutes`.\r\n    ///\r\n    ///      The exchange owner can exit maintenance mode by calling stopMaintenanceMode()\r\n    ///      or by waiting until the remaining downtime is reduced to 0.\r\n    ///\r\n    ///      Once entering the maintenance mode, the operator should still fulfill his duty\r\n    ///      by submitting blocks and proofs until all pending user requests have been taken\r\n    ///      care of within the required timeouts. In the maintenance mode, operator can no longer\r\n    ///      submit settlement blocks.\r\n    ///\r\n    ///      After all pending onchain requests have been handled, the operator can no longer\r\n    ///      submit blocks of any type until maintenance mode is no longer active.\r\n    ///\r\n    ///      This function is only callable by the exchange owner.\r\n    ///\r\n    /// @param durationMinutes The duration in minutes that this exchange can remain in\r\n    ///                        the maintenance mode.\r\n    function startOrContinueMaintenanceMode(\r\n        uint durationMinutes\r\n        )\r\n        external;\r\n\r\n    /// @dev Gets the exchange out of maintenance mode.\r\n    ///\r\n    ///      This function is only callable by the exchange owner.\r\n    function stopMaintenanceMode()\r\n        external;\r\n\r\n    /// @dev Get the remaining downtime.\r\n    /// @return durationSeconds Remaining downtime in second.\r\n    function getRemainingDowntime()\r\n        external\r\n        view\r\n        returns (uint durationMinutes);\r\n\r\n    /// @dev Get the amount of LRC to burn for buying the downtime.\r\n    /// @return costLRC The amount of LRC to burn\r\n    function getDowntimeCostLRC(\r\n        uint durationMinutes\r\n        )\r\n        external\r\n        view\r\n        returns (uint costLRC);\r\n\r\n    /// @dev Gets the total amount of time in seconds the exchange has ever been in maintenance.\r\n    /// @return timeInSeconds The total time in maintenance.\r\n    function getTotalTimeInMaintenanceSeconds()\r\n        external\r\n        view\r\n        returns (uint timeInSeconds);\r\n\r\n    /// @dev Gets the time the exchange was created.\r\n    /// @return timestamp The time the exchange was created.\r\n    function getExchangeCreationTimestamp()\r\n        external\r\n        view\r\n        returns (uint timestamp);\r\n\r\n    /// @dev Shuts down the exchange.\r\n    ///      Once the exchange is shutdown all onchain requests are permanently disabled.\r\n    ///      When all requirements are fulfilled the exchange owner can withdraw\r\n    ///      the exchange stake with withdrawStake.\r\n    ///\r\n    ///      Note that the exchange can still enter the withdrawal mode after this function\r\n    ///      has been invoked successfully. To prevent entering the withdrawal mode, exchange\r\n    ///      operators need to reset the Merkle tree to its initial state by doing withdrawals\r\n    ///      within MAX_TIME_IN_SHUTDOWN_BASE + (accounts.length * MAX_TIME_IN_SHUTDOWN_DELTA)\r\n    ///      seconds.\r\n    ///\r\n    ///      Can only be called by the exchange owner.\r\n    ///\r\n    /// @return success True if the exchange is shutdown, else False\r\n    function shutdown()\r\n        external\r\n        returns (bool success);\r\n\r\n    /// @dev Get number of available/processed deposits/withdrawals.\r\n    /// @return numDepositRequestsProcessed The num of the processed deposit requests\r\n    /// @return numAvailableDepositSlots The number of slots available for deposits\r\n    /// @return numWithdrawalRequestsProcessed The num of processed withdrawal requests\r\n    /// @return numAvailableWithdrawalSlots The number of slots available for withdrawals\r\n    function getRequestStats()\r\n        external\r\n        view\r\n        returns(\r\n            uint numDepositRequestsProcessed,\r\n            uint numAvailableDepositSlots,\r\n            uint numWithdrawalRequestsProcessed,\r\n            uint numAvailableWithdrawalSlots\r\n        );\r\n\r\n    /// @dev Get the protocol fees for this exchange.\r\n    /// @return timestamp The timestamp the protocol fees were last updated\r\n    /// @return takerFeeBips The protocol taker fee\r\n    /// @return makerFeeBips The protocol maker fee\r\n    /// @return previousTakerFeeBips The previous protocol taker fee\r\n    /// @return previousMakerFeeBips The previous protocol maker fee\r\n    function getProtocolFeeValues()\r\n        external\r\n        view\r\n        returns (\r\n            uint32 timestamp,\r\n            uint8 takerFeeBips,\r\n            uint8 makerFeeBips,\r\n            uint8 previousTakerFeeBips,\r\n            uint8 previousMakerFeeBips\r\n        );\r\n}\r\n\r\n// File: contracts/iface/ILoopring.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\npragma solidity ^0.5.11;\r\n\r\n\r\n\r\n\r\n/// @title ILoopring\r\n/// @author Daniel Wang  - <daniel@loopring.org>\r\ncontract ILoopring is Claimable, ReentrancyGuard\r\n{\r\n    address public protocolRegistry;\r\n    address public lrcAddress;\r\n    uint    public exchangeCreationCostLRC;\r\n\r\n    event ExchangeInitialized(\r\n        uint    indexed exchangeId,\r\n        address indexed exchangeAddress,\r\n        address indexed owner,\r\n        address         operator,\r\n        bool            onchainDataAvailability\r\n    );\r\n\r\n    /// @dev Initialize and register an exchange.\r\n    ///      This function should only be callabled by the protocolRegistry contract.\r\n    ///      Also note that this function can only be called once per exchange instance.\r\n    /// @param  exchangeAddress The address of the exchange to initialize and register.\r\n    /// @param  exchangeId The unique exchange id.\r\n    /// @param  owner The owner of the exchange.\r\n    /// @param  operator The operator of the exchange.\r\n    /// @param  onchainDataAvailability True if \"Data Availability\" is turned on for this\r\n    ///         exchange. Note that this value can not be changed once the exchange is initialized.\r\n    /// @return exchangeId The id of the exchange.\r\n    function initializeExchange(\r\n        address exchangeAddress,\r\n        uint    exchangeId,\r\n        address owner,\r\n        address payable operator,\r\n        bool    onchainDataAvailability\r\n        )\r\n        external;\r\n}\r\n\r\n// File: contracts/iface/ILoopringV3.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\npragma solidity ^0.5.11;\r\n\r\n\r\n\r\n/// @title ILoopringV3\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\n/// @author Daniel Wang  - <daniel@loopring.org>\r\ncontract ILoopringV3 is ILoopring\r\n{\r\n    // == Events ==\r\n\r\n    event ExchangeStakeDeposited(\r\n        uint    indexed exchangeId,\r\n        uint            amount\r\n    );\r\n\r\n    event ExchangeStakeWithdrawn(\r\n        uint    indexed exchangeId,\r\n        uint            amount\r\n    );\r\n\r\n    event ExchangeStakeBurned(\r\n        uint    indexed exchangeId,\r\n        uint            amount\r\n    );\r\n\r\n    event ProtocolFeeStakeDeposited(\r\n        uint    indexed exchangeId,\r\n        uint            amount\r\n    );\r\n\r\n    event ProtocolFeeStakeWithdrawn(\r\n        uint    indexed exchangeId,\r\n        uint            amount\r\n    );\r\n\r\n    event SettingsUpdated(\r\n        uint            time\r\n    );\r\n\r\n    // == Public Variables ==\r\n    struct Exchange\r\n    {\r\n        address exchangeAddress;\r\n        uint    exchangeStake;\r\n        uint    protocolFeeStake;\r\n    }\r\n\r\n    mapping (uint => Exchange) internal exchanges;\r\n\r\n    uint    public totalStake;\r\n\r\n    address public wethAddress;\r\n    address public exchangeDeployerAddress;\r\n    address public blockVerifierAddress;\r\n    address public downtimeCostCalculator;\r\n    uint    public maxWithdrawalFee;\r\n    uint    public withdrawalFineLRC;\r\n    uint    public tokenRegistrationFeeLRCBase;\r\n    uint    public tokenRegistrationFeeLRCDelta;\r\n    uint    public minExchangeStakeWithDataAvailability;\r\n    uint    public minExchangeStakeWithoutDataAvailability;\r\n    uint    public revertFineLRC;\r\n    uint8   public minProtocolTakerFeeBips;\r\n    uint8   public maxProtocolTakerFeeBips;\r\n    uint8   public minProtocolMakerFeeBips;\r\n    uint8   public maxProtocolMakerFeeBips;\r\n    uint    public targetProtocolTakerFeeStake;\r\n    uint    public targetProtocolMakerFeeStake;\r\n\r\n    address payable public protocolFeeVault;\r\n\r\n    // == Public Functions ==\r\n    /// @dev Update the global exchange settings.\r\n    ///      This function can only be called by the owner of this contract.\r\n    ///\r\n    ///      Warning: these new values will be used by existing and\r\n    ///      new Loopring exchanges.\r\n    function updateSettings(\r\n        address payable _protocolFeeVault,   // address(0) not allowed\r\n        address _blockVerifierAddress,       // address(0) not allowed\r\n        address _downtimeCostCalculator,     // address(0) allowed\r\n        uint    _exchangeCreationCostLRC,\r\n        uint    _maxWithdrawalFee,\r\n        uint    _tokenRegistrationFeeLRCBase,\r\n        uint    _tokenRegistrationFeeLRCDelta,\r\n        uint    _minExchangeStakeWithDataAvailability,\r\n        uint    _minExchangeStakeWithoutDataAvailability,\r\n        uint    _revertFineLRC,\r\n        uint    _withdrawalFineLRC\r\n        )\r\n        external;\r\n\r\n    /// @dev Update the global protocol fee settings.\r\n    ///      This function can only be called by the owner of this contract.\r\n    ///\r\n    ///      Warning: these new values will be used by existing and\r\n    ///      new Loopring exchanges.\r\n    function updateProtocolFeeSettings(\r\n        uint8 _minProtocolTakerFeeBips,\r\n        uint8 _maxProtocolTakerFeeBips,\r\n        uint8 _minProtocolMakerFeeBips,\r\n        uint8 _maxProtocolMakerFeeBips,\r\n        uint  _targetProtocolTakerFeeStake,\r\n        uint  _targetProtocolMakerFeeStake\r\n        )\r\n        external;\r\n\r\n    /// @dev Returns whether the Exchange has staked enough to commit blocks\r\n    ///      Exchanges with on-chain data-availaiblity need to stake at least\r\n    ///      minExchangeStakeWithDataAvailability, exchanges without\r\n    ///      data-availability need to stake at least\r\n    ///      minExchangeStakeWithoutDataAvailability.\r\n    /// @param exchangeId The id of the exchange\r\n    /// @param onchainDataAvailability True if the exchange has on-chain\r\n    ///        data-availability, else false\r\n    /// @return True if the exchange has staked enough, else false\r\n    function canExchangeCommitBlocks(\r\n        uint exchangeId,\r\n        bool onchainDataAvailability\r\n        )\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    /// @dev Get the amount of staked LRC for an exchange.\r\n    /// @param exchangeId The id of the exchange\r\n    /// @return stakedLRC The amount of LRC\r\n    function getExchangeStake(\r\n        uint exchangeId\r\n        )\r\n        public\r\n        view\r\n        returns (uint stakedLRC);\r\n\r\n    /// @dev Burn a certain amount of staked LRC for a specific exchange.\r\n    ///      This function is meant to be called only from exchange contracts.\r\n    /// @param  exchangeId The id of the exchange\r\n    /// @return burnedLRC The amount of LRC burned. If the amount is greater than\r\n    ///         the staked amount, all staked LRC will be burned.\r\n    function burnExchangeStake(\r\n        uint exchangeId,\r\n        uint amount\r\n        )\r\n        external\r\n        returns (uint burnedLRC);\r\n\r\n    /// @dev Stake more LRC for an exchange.\r\n    /// @param  exchangeId The id of the exchange\r\n    /// @param  amountLRC The amount of LRC to stake\r\n    /// @return stakedLRC The total amount of LRC staked for the exchange\r\n    function depositExchangeStake(\r\n        uint exchangeId,\r\n        uint amountLRC\r\n        )\r\n        external\r\n        returns (uint stakedLRC);\r\n\r\n    /// @dev Withdraw a certain amount of staked LRC for an exchange to the given address.\r\n    ///      This function is meant to be called only from within exchange contracts.\r\n    /// @param  exchangeId The id of the exchange\r\n    /// @param  recipient The address to receive LRC\r\n    /// @param  requestedAmount The amount of LRC to withdraw\r\n    /// @return stakedLRC The amount of LRC withdrawn\r\n    function withdrawExchangeStake(\r\n        uint    exchangeId,\r\n        address recipient,\r\n        uint    requestedAmount\r\n        )\r\n        external\r\n        returns (uint amount);\r\n\r\n    /// @dev Stake more LRC for an exchange.\r\n    /// @param  exchangeId The id of the exchange\r\n    /// @param  amountLRC The amount of LRC to stake\r\n    /// @return stakedLRC The total amount of LRC staked for the exchange\r\n    function depositProtocolFeeStake(\r\n        uint exchangeId,\r\n        uint amountLRC\r\n        )\r\n        external\r\n        returns (uint stakedLRC);\r\n\r\n    /// @dev Withdraw a certain amount of staked LRC for an exchange to the given address.\r\n    ///      This function is meant to be called only from within exchange contracts.\r\n    /// @param  exchangeId The id of the exchange\r\n    /// @param  recipient The address to receive LRC\r\n    /// @param  amount The amount of LRC to withdraw\r\n    function withdrawProtocolFeeStake(\r\n        uint    exchangeId,\r\n        address recipient,\r\n        uint    amount\r\n        )\r\n        external;\r\n\r\n    /// @dev Get the protocol fee values for an exchange.\r\n    /// @param exchangeId The id of the exchange\r\n    /// @param onchainDataAvailability True if the exchange has on-chain\r\n    ///        data-availability, else false\r\n    /// @return takerFeeBips The protocol taker fee\r\n    /// @return makerFeeBips The protocol maker fee\r\n    function getProtocolFeeValues(\r\n        uint exchangeId,\r\n        bool onchainDataAvailability\r\n        )\r\n        external\r\n        view\r\n        returns (\r\n            uint8 takerFeeBips,\r\n            uint8 makerFeeBips\r\n        );\r\n\r\n    /// @dev Returns the exchange's protocol fee stake.\r\n    /// @param  exchangeId The exchange's id.\r\n    /// @return protocolFeeStake The exchange's protocol fee stake.\r\n    function getProtocolFeeStake(\r\n        uint exchangeId\r\n        )\r\n        external\r\n        view\r\n        returns (uint protocolFeeStake);\r\n}\r\n\r\n// File: contracts/impl/LoopringV3.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\npragma solidity ^0.5.11;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title LoopringV3\r\n/// @dev This contract does NOT support proxy.\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\n/// @author Daniel Wang  - <daniel@loopring.org>\r\ncontract LoopringV3 is ILoopringV3\r\n{\r\n    using AddressUtil       for address payable;\r\n    using MathUint          for uint;\r\n    using ERC20SafeTransfer for address;\r\n\r\n    // -- Constructor --\r\n    constructor(\r\n        address _protocolRegistry,\r\n        address _lrcAddress,\r\n        address _wethAddress,\r\n        address payable _protocolFeeVault,\r\n        address _blockVerifierAddress,\r\n        address _downtimeCostCalculator\r\n        )\r\n        Claimable()\r\n        public\r\n    {\r\n        require(address(0) != _protocolRegistry, \"ZERO_ADDRESS\");\r\n        require(address(0) != _lrcAddress, \"ZERO_ADDRESS\");\r\n        require(address(0) != _wethAddress, \"ZERO_ADDRESS\");\r\n\r\n        protocolRegistry = _protocolRegistry;\r\n        lrcAddress = _lrcAddress;\r\n        wethAddress = _wethAddress;\r\n\r\n        updateSettingsInternal(\r\n            _protocolFeeVault,\r\n            _blockVerifierAddress,\r\n            _downtimeCostCalculator,\r\n            0, 0, 0, 0, 0, 0, 0, 0\r\n        );\r\n    }\r\n\r\n    // === ILoopring methods ===\r\n\r\n    modifier onlyProtocolRegistry()\r\n    {\r\n        require(msg.sender == protocolRegistry, \"UNAUTHORIZED\");\r\n        _;\r\n    }\r\n\r\n    function initializeExchange(\r\n        address exchangeAddress,\r\n        uint    exchangeId,\r\n        address owner,\r\n        address payable operator,\r\n        bool    onchainDataAvailability\r\n        )\r\n        external\r\n        nonReentrant\r\n        onlyProtocolRegistry\r\n    {\r\n        require(exchangeId != 0, \"ZERO_ID\");\r\n        require(exchangeAddress != address(0), \"ZERO_ADDRESS\");\r\n        require(owner != address(0), \"ZERO_ADDRESS\");\r\n        require(operator != address(0), \"ZERO_ADDRESS\");\r\n        require(exchanges[exchangeId].exchangeAddress == address(0), \"ID_USED_ALREADY\");\r\n\r\n        IExchangeV3 exchange = IExchangeV3(exchangeAddress);\r\n\r\n        // If the exchange has already been initialized, the following function will throw.\r\n        exchange.initialize(\r\n            address(this),\r\n            owner,\r\n            exchangeId,\r\n            operator,\r\n            onchainDataAvailability\r\n        );\r\n\r\n        exchanges[exchangeId] = Exchange(exchangeAddress, 0, 0);\r\n\r\n        emit ExchangeInitialized(\r\n            exchangeId,\r\n            exchangeAddress,\r\n            owner,\r\n            operator,\r\n            onchainDataAvailability\r\n        );\r\n    }\r\n\r\n    // == Public Functions ==\r\n    function updateSettings(\r\n        address payable _protocolFeeVault,\r\n        address _blockVerifierAddress,\r\n        address _downtimeCostCalculator,\r\n        uint    _exchangeCreationCostLRC,\r\n        uint    _maxWithdrawalFee,\r\n        uint    _tokenRegistrationFeeLRCBase,\r\n        uint    _tokenRegistrationFeeLRCDelta,\r\n        uint    _minExchangeStakeWithDataAvailability,\r\n        uint    _minExchangeStakeWithoutDataAvailability,\r\n        uint    _revertFineLRC,\r\n        uint    _withdrawalFineLRC\r\n        )\r\n        external\r\n        onlyOwner\r\n    {\r\n        updateSettingsInternal(\r\n            _protocolFeeVault,\r\n            _blockVerifierAddress,\r\n            _downtimeCostCalculator,\r\n            _exchangeCreationCostLRC,\r\n            _maxWithdrawalFee,\r\n            _tokenRegistrationFeeLRCBase,\r\n            _tokenRegistrationFeeLRCDelta,\r\n            _minExchangeStakeWithDataAvailability,\r\n            _minExchangeStakeWithoutDataAvailability,\r\n            _revertFineLRC,\r\n            _withdrawalFineLRC\r\n        );\r\n    }\r\n\r\n    function updateProtocolFeeSettings(\r\n        uint8 _minProtocolTakerFeeBips,\r\n        uint8 _maxProtocolTakerFeeBips,\r\n        uint8 _minProtocolMakerFeeBips,\r\n        uint8 _maxProtocolMakerFeeBips,\r\n        uint  _targetProtocolTakerFeeStake,\r\n        uint  _targetProtocolMakerFeeStake\r\n        )\r\n        external\r\n        onlyOwner\r\n    {\r\n        minProtocolTakerFeeBips = _minProtocolTakerFeeBips;\r\n        maxProtocolTakerFeeBips = _maxProtocolTakerFeeBips;\r\n        minProtocolMakerFeeBips = _minProtocolMakerFeeBips;\r\n        maxProtocolMakerFeeBips = _maxProtocolMakerFeeBips;\r\n        targetProtocolTakerFeeStake = _targetProtocolTakerFeeStake;\r\n        targetProtocolMakerFeeStake = _targetProtocolMakerFeeStake;\r\n\r\n        emit SettingsUpdated(now);\r\n    }\r\n\r\n    function canExchangeCommitBlocks(\r\n        uint exchangeId,\r\n        bool onchainDataAvailability\r\n        )\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        uint amountStaked = getExchangeStake(exchangeId);\r\n        if (onchainDataAvailability) {\r\n            return amountStaked >= minExchangeStakeWithDataAvailability;\r\n        } else {\r\n            return amountStaked >= minExchangeStakeWithoutDataAvailability;\r\n        }\r\n    }\r\n\r\n    function getExchangeStake(\r\n        uint exchangeId\r\n        )\r\n        public\r\n        view\r\n        returns (uint)\r\n    {\r\n        Exchange storage exchange = exchanges[exchangeId];\r\n        require(exchange.exchangeAddress != address(0), \"INVALID_EXCHANGE_ID\");\r\n        return exchange.exchangeStake;\r\n    }\r\n\r\n    function burnExchangeStake(\r\n        uint exchangeId,\r\n        uint amount\r\n        )\r\n        external\r\n        nonReentrant\r\n        returns (uint burnedLRC)\r\n    {\r\n        Exchange storage exchange = exchanges[exchangeId];\r\n        address exchangeAddress = exchange.exchangeAddress;\r\n\r\n        require(exchangeAddress != address(0), \"INVALID_EXCHANGE_ID\");\r\n        require(exchangeAddress == msg.sender, \"UNAUTHORIZED\");\r\n\r\n        burnedLRC = exchange.exchangeStake;\r\n\r\n        if (amount < burnedLRC) {\r\n            burnedLRC = amount;\r\n        }\r\n        if (burnedLRC > 0) {\r\n            require(\r\n                BurnableERC20(lrcAddress).burn(burnedLRC),\r\n                \"BURN_FAILURE\"\r\n            );\r\n\r\n            exchange.exchangeStake = exchange.exchangeStake.sub(burnedLRC);\r\n            totalStake = totalStake.sub(burnedLRC);\r\n        }\r\n        emit ExchangeStakeBurned(exchangeId, burnedLRC);\r\n    }\r\n\r\n    function depositExchangeStake(\r\n        uint exchangeId,\r\n        uint amountLRC\r\n        )\r\n        external\r\n        nonReentrant\r\n        returns (uint stakedLRC)\r\n    {\r\n        require(amountLRC > 0, \"ZERO_VALUE\");\r\n\r\n        Exchange storage exchange = exchanges[exchangeId];\r\n        require(exchange.exchangeAddress != address(0), \"INVALID_EXCHANGE_ID\");\r\n\r\n        require(\r\n            lrcAddress.safeTransferFrom(msg.sender, address(this), amountLRC),\r\n            \"TRANSFER_FAILURE\"\r\n        );\r\n\r\n        stakedLRC = exchange.exchangeStake.add(amountLRC);\r\n        exchange.exchangeStake = stakedLRC;\r\n        totalStake = totalStake.add(amountLRC);\r\n\r\n        emit ExchangeStakeDeposited(exchangeId, amountLRC);\r\n    }\r\n\r\n    function withdrawExchangeStake(\r\n        uint    exchangeId,\r\n        address recipient,\r\n        uint    requestedAmount\r\n        )\r\n        external\r\n        nonReentrant\r\n        returns (uint amountLRC)\r\n    {\r\n        Exchange storage exchange = exchanges[exchangeId];\r\n        require(exchange.exchangeAddress != address(0), \"INVALID_EXCHANGE_ID\");\r\n        require(exchange.exchangeAddress == msg.sender, \"UNAUTHORIZED\");\r\n\r\n        amountLRC = (exchange.exchangeStake > requestedAmount) ?\r\n            requestedAmount : exchange.exchangeStake;\r\n\r\n        if (amountLRC > 0) {\r\n            require(\r\n                lrcAddress.safeTransfer(recipient, amountLRC),\r\n                \"WITHDRAWAL_FAILURE\"\r\n            );\r\n            exchange.exchangeStake = exchange.exchangeStake.sub(amountLRC);\r\n            totalStake = totalStake.sub(amountLRC);\r\n        }\r\n\r\n        emit ExchangeStakeWithdrawn(exchangeId, amountLRC);\r\n    }\r\n\r\n    function depositProtocolFeeStake(\r\n        uint exchangeId,\r\n        uint amountLRC\r\n        )\r\n        external\r\n        nonReentrant\r\n        returns (uint stakedLRC)\r\n    {\r\n        require(amountLRC > 0, \"ZERO_VALUE\");\r\n\r\n        Exchange storage exchange = exchanges[exchangeId];\r\n        require(exchange.exchangeAddress != address(0), \"INVALID_EXCHANGE_ID\");\r\n\r\n        require(\r\n            lrcAddress.safeTransferFrom(msg.sender, address(this), amountLRC),\r\n            \"TRANSFER_FAILURE\"\r\n        );\r\n\r\n        stakedLRC = exchange.protocolFeeStake.add(amountLRC);\r\n        exchange.protocolFeeStake = stakedLRC;\r\n        totalStake = totalStake.add(amountLRC);\r\n\r\n        emit ProtocolFeeStakeDeposited(exchangeId, amountLRC);\r\n    }\r\n\r\n    function withdrawProtocolFeeStake(\r\n        uint    exchangeId,\r\n        address recipient,\r\n        uint    amountLRC\r\n        )\r\n        external\r\n        nonReentrant\r\n    {\r\n        Exchange storage exchange = exchanges[exchangeId];\r\n        require(exchange.exchangeAddress != address(0), \"INVALID_EXCHANGE_ID\");\r\n        require(exchange.exchangeAddress == msg.sender, \"UNAUTHORIZED\");\r\n        require(amountLRC <= exchange.protocolFeeStake, \"INSUFFICIENT_STAKE\");\r\n\r\n        if (amountLRC > 0) {\r\n            require(\r\n                lrcAddress.safeTransfer(recipient, amountLRC),\r\n                \"WITHDRAWAL_FAILURE\"\r\n            );\r\n            exchange.protocolFeeStake = exchange.protocolFeeStake.sub(amountLRC);\r\n            totalStake = totalStake.sub(amountLRC);\r\n        }\r\n        emit ProtocolFeeStakeWithdrawn(exchangeId, amountLRC);\r\n    }\r\n\r\n    function getProtocolFeeValues(\r\n        uint exchangeId,\r\n        bool onchainDataAvailability\r\n        )\r\n        external\r\n        view\r\n        returns (\r\n            uint8 takerFeeBips,\r\n            uint8 makerFeeBips\r\n        )\r\n    {\r\n        Exchange storage exchange = exchanges[exchangeId];\r\n        require(exchange.exchangeAddress != address(0), \"INVALID_EXCHANGE_ID\");\r\n\r\n        // Subtract the minimum exchange stake, this amount cannot be used to reduce the protocol fees\r\n        uint stake = 0;\r\n        if (onchainDataAvailability && exchange.exchangeStake > minExchangeStakeWithDataAvailability) {\r\n            stake = exchange.exchangeStake - minExchangeStakeWithDataAvailability;\r\n        } else if (!onchainDataAvailability && exchange.exchangeStake > minExchangeStakeWithoutDataAvailability) {\r\n            stake = exchange.exchangeStake - minExchangeStakeWithoutDataAvailability;\r\n        }\r\n\r\n        // The total stake used here is the exchange stake + the protocol fee stake, but\r\n        // the protocol fee stake has a reduced weight of 50%.\r\n        uint protocolFeeStake = stake.add(exchange.protocolFeeStake / 2);\r\n\r\n        takerFeeBips = calculateProtocolFee(\r\n            minProtocolTakerFeeBips, maxProtocolTakerFeeBips, protocolFeeStake, targetProtocolTakerFeeStake\r\n        );\r\n        makerFeeBips = calculateProtocolFee(\r\n            minProtocolMakerFeeBips, maxProtocolMakerFeeBips, protocolFeeStake, targetProtocolMakerFeeStake\r\n        );\r\n    }\r\n\r\n    function getProtocolFeeStake(\r\n        uint exchangeId\r\n        )\r\n        external\r\n        view\r\n        returns (uint)\r\n    {\r\n        Exchange storage exchange = exchanges[exchangeId];\r\n        require(exchange.exchangeAddress != address(0), \"INVALID_EXCHANGE_ID\");\r\n        return exchange.protocolFeeStake;\r\n    }\r\n\r\n    // == Internal Functions ==\r\n    function updateSettingsInternal(\r\n        address payable  _protocolFeeVault,\r\n        address _blockVerifierAddress,\r\n        address _downtimeCostCalculator,\r\n        uint    _exchangeCreationCostLRC,\r\n        uint    _maxWithdrawalFee,\r\n        uint    _tokenRegistrationFeeLRCBase,\r\n        uint    _tokenRegistrationFeeLRCDelta,\r\n        uint    _minExchangeStakeWithDataAvailability,\r\n        uint    _minExchangeStakeWithoutDataAvailability,\r\n        uint    _revertFineLRC,\r\n        uint    _withdrawalFineLRC\r\n        )\r\n        private\r\n    {\r\n        require(address(0) != _protocolFeeVault, \"ZERO_ADDRESS\");\r\n        require(address(0) != _blockVerifierAddress, \"ZERO_ADDRESS\");\r\n        require(address(0) != _downtimeCostCalculator, \"ZERO_ADDRESS\");\r\n\r\n        protocolFeeVault = _protocolFeeVault;\r\n        blockVerifierAddress = _blockVerifierAddress;\r\n        downtimeCostCalculator = _downtimeCostCalculator;\r\n        exchangeCreationCostLRC = _exchangeCreationCostLRC;\r\n        maxWithdrawalFee = _maxWithdrawalFee;\r\n        tokenRegistrationFeeLRCBase = _tokenRegistrationFeeLRCBase;\r\n        tokenRegistrationFeeLRCDelta = _tokenRegistrationFeeLRCDelta;\r\n        minExchangeStakeWithDataAvailability = _minExchangeStakeWithDataAvailability;\r\n        minExchangeStakeWithoutDataAvailability = _minExchangeStakeWithoutDataAvailability;\r\n        revertFineLRC = _revertFineLRC;\r\n        withdrawalFineLRC = _withdrawalFineLRC;\r\n\r\n        emit SettingsUpdated(now);\r\n    }\r\n\r\n    function calculateProtocolFee(\r\n        uint minFee,\r\n        uint maxFee,\r\n        uint stake,\r\n        uint targetStake\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint8)\r\n    {\r\n        if (targetStake > 0) {\r\n            // Simple linear interpolation between 2 points\r\n            uint maxReduction = maxFee.sub(minFee);\r\n            uint reduction = maxReduction.mul(stake) / targetStake;\r\n            if (reduction > maxReduction) {\r\n                reduction = maxReduction;\r\n            }\r\n            return uint8(maxFee.sub(reduction));\r\n        } else {\r\n            return uint8(minFee);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exchangeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestedAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawExchangeStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountLRC\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxProtocolMakerFeeBips\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxProtocolTakerFeeBips\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"targetProtocolMakerFeeStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawalFineLRC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exchangeId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"onchainDataAvailability\",\"type\":\"bool\"}],\"name\":\"canExchangeCommitBlocks\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_minProtocolTakerFeeBips\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_maxProtocolTakerFeeBips\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_minProtocolMakerFeeBips\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_maxProtocolMakerFeeBips\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_targetProtocolTakerFeeStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_targetProtocolMakerFeeStake\",\"type\":\"uint256\"}],\"name\":\"updateProtocolFeeSettings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"downtimeCostCalculator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lrcAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenRegistrationFeeLRCDelta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exchangeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountLRC\",\"type\":\"uint256\"}],\"name\":\"depositExchangeStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedLRC\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wethAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"targetProtocolTakerFeeStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exchangeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountLRC\",\"type\":\"uint256\"}],\"name\":\"depositProtocolFeeStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedLRC\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeCreationCostLRC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exchangeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLRC\",\"type\":\"uint256\"}],\"name\":\"withdrawProtocolFeeStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"protocolRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exchangeId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"onchainDataAvailability\",\"type\":\"bool\"}],\"name\":\"getProtocolFeeValues\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"takerFeeBips\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"makerFeeBips\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exchangeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnExchangeStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"burnedLRC\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blockVerifierAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenRegistrationFeeLRCBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeDeployerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"protocolFeeVault\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minExchangeStakeWithDataAvailability\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minExchangeStakeWithoutDataAvailability\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_protocolFeeVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_blockVerifierAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_downtimeCostCalculator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_exchangeCreationCostLRC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxWithdrawalFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenRegistrationFeeLRCBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenRegistrationFeeLRCDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minExchangeStakeWithDataAvailability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minExchangeStakeWithoutDataAvailability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_revertFineLRC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawalFineLRC\",\"type\":\"uint256\"}],\"name\":\"updateSettings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exchangeId\",\"type\":\"uint256\"}],\"name\":\"getExchangeStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minProtocolTakerFeeBips\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exchangeId\",\"type\":\"uint256\"}],\"name\":\"getProtocolFeeStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minProtocolMakerFeeBips\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxWithdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"exchangeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exchangeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"onchainDataAvailability\",\"type\":\"bool\"}],\"name\":\"initializeExchange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"revertFineLRC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocolRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lrcAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_protocolFeeVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_blockVerifierAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_downtimeCostCalculator\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"exchangeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExchangeStakeDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"exchangeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExchangeStakeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"exchangeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExchangeStakeBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"exchangeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProtocolFeeStakeDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"exchangeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProtocolFeeStakeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"SettingsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"exchangeId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exchangeAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"onchainDataAvailability\",\"type\":\"bool\"}],\"name\":\"ExchangeInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"LoopringV3","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000dbd93b069d7fc8c77684811d0ccf472f4ac9b555000000000000000000000000bbbbca6a901c926f240b89eacb641d8aec7aeafd000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000a8b6a3efbcdd578154a913f33dc9949808b7a9f4000000000000000000000000a1ddbeecc1ea91957100c3c13cd6f6482299c14d0000000000000000000000000309800ab60ec63db3b1ce8954bd946f75b43ecd","Library":"","SwarmSource":"bzzr://c678b4ed22b2fdb47dbd7e5bf680d18d3c82e84930130c3b60aee67c078e9f61"}]}