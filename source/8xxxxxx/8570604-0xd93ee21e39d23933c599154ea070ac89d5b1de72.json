{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.11;\r\n\r\n\r\ncontract Ownable {\r\n  address payable public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n\r\n  function transferOwnership(address payable newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract GroupAdmin is Ownable {\r\n    event AdminGranted(address indexed grantee);\r\n    event AdminRevoked(address indexed grantee);\r\n    address[] public admins;\r\n\r\n    modifier onlyAdmin() {\r\n        require(isAdmin(msg.sender), 'must be admin');\r\n        _;\r\n    }\r\n\r\n\r\n    function grant(address[] memory newAdmins) public onlyAdmin{\r\n        for(uint i = 0; i < newAdmins.length; i++){\r\n            admins.push(newAdmins[i]);\r\n            emit AdminGranted(newAdmins[i]);\r\n        }\r\n    }\r\n\r\n\r\n    function revoke(address[] memory oldAdmins) public onlyAdmin{\r\n        for(uint oldIdx = 0; oldIdx < oldAdmins.length; oldIdx++){\r\n            for (uint idx = 0; idx < admins.length; idx++) {\r\n                if (admins[idx] == oldAdmins[oldIdx]) {\r\n                    admins[idx] = admins[admins.length - 1];\r\n                    admins.length--;\r\n                    emit AdminRevoked(oldAdmins[oldIdx]);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function getAdmins() public view returns(address[] memory){\r\n\r\n        return admins;\r\n    }\r\n\r\n\r\n    function numOfAdmins() public view returns(uint){\r\n        return admins.length;\r\n    }\r\n\r\n\r\n    function isAdmin(address admin) public view returns(bool){\r\n        if (admin == owner) return true;\r\n\r\n        for (uint i = 0; i<admins.length; i++){\r\n            if (admins[i] == admin){\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\ninterface Conference {\r\n\r\n    event AdminGranted(address indexed grantee);\r\n    event AdminRevoked(address indexed grantee);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    event RegisterEvent(address addr, uint256 index);\r\n    event FinalizeEvent(uint256[] maps, uint256 payout, uint256 endedAt);\r\n    event WithdrawEvent(address addr, uint256 payout);\r\n    event CancelEvent(uint256 endedAt);\r\n    event ClearEvent(address addr, uint256 leftOver);\r\n    event UpdateParticipantLimit(uint256 limit);\r\n\r\n\r\n\r\n    function owner() view external returns (address);\r\n\r\n    function name() view external returns (string memory);\r\n    function deposit() view external returns (uint256);\r\n    function limitOfParticipants() view external returns (uint256);\r\n    function registered() view external returns (uint256);\r\n    function ended() view external returns (bool);\r\n    function cancelled() view external returns (bool);\r\n    function endedAt() view external returns (uint256);\r\n    function totalAttended() view external returns (uint256);\r\n    function coolingPeriod() view external returns (uint256);\r\n    function payoutAmount() view external returns (uint256);\r\n    function participants(address participant) view external returns (\r\n        uint256 index,\r\n        address payable addr,\r\n        bool paid\r\n    );\r\n    function participantsIndex(uint256) view external returns(address);\r\n\r\n\r\n    function transferOwnership(address payable newOwner) external;\r\n\r\n    function grant(address[] calldata newAdmins) external;\r\n    function revoke(address[] calldata oldAdmins) external;\r\n    function getAdmins() external view returns(address[] memory);\r\n    function numOfAdmins() external view returns(uint);\r\n    function isAdmin(address admin) external view returns(bool);\r\n\r\n\r\n    function register() external payable;\r\n    function withdraw() external;\r\n    function totalBalance() view external returns (uint256);\r\n    function isRegistered(address _addr) view external returns (bool);\r\n    function isAttended(address _addr) external view returns (bool);\r\n    function isPaid(address _addr) external view returns (bool);\r\n    function cancel() external;\r\n    function clear() external;\r\n    function setLimitOfParticipants(uint256 _limitOfParticipants) external;\r\n    function changeName(string calldata _name) external;\r\n    function changeDeposit(uint256 _deposit) external;\r\n    function finalize(uint256[] calldata _maps) external;\r\n    function tokenAddress() external view returns (address);\r\n}\r\n\r\ncontract AbstractConference is Conference, GroupAdmin {\r\n    string public name;\r\n    uint256 public deposit;\r\n    uint256 public limitOfParticipants;\r\n    uint256 public registered;\r\n    bool public ended;\r\n    bool public cancelled;\r\n    uint256 public endedAt;\r\n    uint256 public totalAttended;\r\n\r\n    uint256 public coolingPeriod;\r\n    uint256 public payoutAmount;\r\n    uint256[] public attendanceMaps;\r\n\r\n    mapping (address => Participant) public participants;\r\n    mapping (uint256 => address) public participantsIndex;\r\n\r\n    struct Participant {\r\n        uint256 index;\r\n        address payable addr;\r\n        bool paid;\r\n    }\r\n\r\n\r\n    modifier onlyActive {\r\n        require(!ended, 'already ended');\r\n        _;\r\n    }\r\n\r\n    modifier noOneRegistered {\r\n        require(registered == 0, 'people have already registered');\r\n        _;\r\n    }\r\n\r\n    modifier onlyEnded {\r\n        require(ended, 'not yet ended');\r\n        _;\r\n    }\r\n\r\n\r\n\r\n    constructor (\r\n        string memory _name,\r\n        uint256 _deposit,\r\n        uint256 _limitOfParticipants,\r\n        uint256 _coolingPeriod,\r\n        address payable _owner\r\n    ) public {\r\n        require(_owner != address(0), 'owner address is required');\r\n        owner = _owner;\r\n        name = _name;\r\n        deposit = _deposit;\r\n        limitOfParticipants = _limitOfParticipants;\r\n        coolingPeriod = _coolingPeriod;\r\n    }\r\n\r\n\r\n\r\n    function register() external payable onlyActive{\r\n        require(registered < limitOfParticipants, 'participant limit reached');\r\n        require(!isRegistered(msg.sender), 'already registered');\r\n        doDeposit(msg.sender, deposit);\r\n\r\n        registered++;\r\n        participantsIndex[registered] = msg.sender;\r\n        participants[msg.sender] = Participant(registered, msg.sender, false);\r\n\r\n        emit RegisterEvent(msg.sender, registered);\r\n    }\r\n\r\n\r\n    function withdraw() external onlyEnded {\r\n        require(payoutAmount > 0, 'payout is 0');\r\n        Participant storage participant = participants[msg.sender];\r\n        require(participant.addr == msg.sender, 'forbidden access');\r\n        require(cancelled || isAttended(msg.sender), 'event still active or you did not attend');\r\n        require(participant.paid == false, 'already withdrawn');\r\n\r\n        participant.paid = true;\r\n        doWithdraw(msg.sender, payoutAmount);\r\n        emit WithdrawEvent(msg.sender, payoutAmount);\r\n    }\r\n\r\n\r\n\r\n    function totalBalance() view public returns (uint256){\r\n        revert('totalBalance must be impelmented in the child class');\r\n    }\r\n\r\n\r\n    function isRegistered(address _addr) view public returns (bool){\r\n        return participants[_addr].addr != address(0);\r\n    }\r\n\r\n\r\n    function isAttended(address _addr) public view returns (bool){\r\n        if (!isRegistered(_addr) || !ended) {\r\n            return false;\r\n        }\r\n\r\n        else {\r\n            Participant storage p = participants[_addr];\r\n            uint256 pIndex = p.index - 1;\r\n            uint256 map = attendanceMaps[uint256(pIndex / 256)];\r\n            return (0 < (map & (2 ** (pIndex % 256))));\r\n        }\r\n    }\r\n\r\n\r\n    function isPaid(address _addr) public view returns (bool){\r\n        return isRegistered(_addr) && participants[_addr].paid;\r\n    }\r\n\r\n\r\n\r\n\r\n    function cancel() external onlyAdmin onlyActive{\r\n        payoutAmount = deposit;\r\n        cancelled = true;\r\n        ended = true;\r\n        endedAt = now;\r\n        emit CancelEvent(endedAt);\r\n    }\r\n\r\n\r\n    function clear() external onlyAdmin onlyEnded{\r\n        require(now > endedAt + coolingPeriod, 'still in cooling period');\r\n        uint256 leftOver = totalBalance();\r\n        doWithdraw(owner, leftOver);\r\n        emit ClearEvent(owner, leftOver);\r\n    }\r\n\r\n\r\n    function setLimitOfParticipants(uint256 _limitOfParticipants) external onlyAdmin onlyActive{\r\n        require(registered <= _limitOfParticipants, 'cannot lower than already registered');\r\n        limitOfParticipants = _limitOfParticipants;\r\n\r\n        emit UpdateParticipantLimit(limitOfParticipants);\r\n    }\r\n\r\n\r\n    function changeName(string calldata _name) external onlyAdmin noOneRegistered{\r\n        name = _name;\r\n    }\r\n\r\n\r\n    function changeDeposit(uint256 _deposit) external onlyAdmin noOneRegistered{\r\n        deposit = _deposit;\r\n    }\r\n\r\n\r\n    function finalize(uint256[] calldata _maps) external onlyAdmin onlyActive {\r\n        uint256 totalBits = _maps.length * 256;\r\n        require(totalBits >= registered && totalBits - registered < 256, 'incorrect no. of bitmaps provided');\r\n        attendanceMaps = _maps;\r\n        ended = true;\r\n        endedAt = now;\r\n        uint256 _totalAttended = 0;\r\n\r\n        for (uint256 i = 0; i < attendanceMaps.length; i++) {\r\n            uint256 map = attendanceMaps[i];\r\n\r\n            while (map != 0) {\r\n                map &= (map - 1);\r\n                _totalAttended++;\r\n            }\r\n        }\r\n        require(_totalAttended <= registered, 'should not have more attendees than registered');\r\n        totalAttended = _totalAttended;\r\n\r\n        if (totalAttended > 0) {\r\n            payoutAmount = uint256(totalBalance()) / totalAttended;\r\n        }\r\n\r\n        emit FinalizeEvent(attendanceMaps, payoutAmount, endedAt);\r\n    }\r\n\r\n    function doDeposit(address , uint256  ) internal {\r\n        revert('doDeposit must be impelmented in the child class');\r\n    }\r\n\r\n    function doWithdraw(address payable  , uint256  ) internal {\r\n        revert('doWithdraw must be impelmented in the child class');\r\n    }\r\n\r\n    function tokenAddress() public view returns (address){\r\n        revert('tokenAddress must be impelmented in the child class');\r\n    }\r\n\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ERC20Conference is AbstractConference {\r\n\r\n    IERC20 public token;\r\n\r\n    constructor(\r\n        string memory _name,\r\n        uint256 _deposit,\r\n        uint256 _limitOfParticipants,\r\n        uint256 _coolingPeriod,\r\n        address payable _owner,\r\n        address  _tokenAddress\r\n    )\r\n        AbstractConference(_name, _deposit, _limitOfParticipants, _coolingPeriod, _owner)\r\n        public\r\n    {\r\n        require(_tokenAddress != address(0), 'token address is not set');\r\n        token = IERC20(_tokenAddress);\r\n    }\r\n\r\n\r\n    function totalBalance() view public returns (uint256){\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    function doWithdraw(address payable participant, uint256 amount) internal {\r\n        token.transfer(participant, amount);\r\n    }\r\n\r\n    function doDeposit(address participant, uint256 amount) internal {\r\n        require(msg.value == 0, 'ERC20Conference can not receive ETH');\r\n        token.transferFrom(participant, address(this), amount);\r\n    }\r\n\r\n    function tokenAddress() public view returns (address){\r\n        return address(token);\r\n    }\r\n}\r\n\r\ninterface DeployerInterface {\r\n    function deploy(\r\n        string calldata _name,\r\n        uint256 _deposit,\r\n        uint _limitOfParticipants,\r\n        uint _coolingPeriod,\r\n        address payable _ownerAddress,\r\n        address _tokenAddress\r\n    )external returns(Conference c);\r\n}\r\n\r\ncontract ERC20Deployer is DeployerInterface{\r\n    function deploy(\r\n        string calldata _name,\r\n        uint256 _deposit,\r\n        uint _limitOfParticipants,\r\n        uint _coolingPeriod,\r\n        address payable _ownerAddress,\r\n        address _tokenAddress\r\n    )external returns(Conference c){\r\n        c = new ERC20Conference(\r\n            _name,\r\n            _deposit,\r\n            _limitOfParticipants,\r\n            _coolingPeriod,\r\n            _ownerAddress,\r\n            _tokenAddress\r\n        );\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limitOfParticipants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_coolingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_ownerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"contract Conference\",\"name\":\"c\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ERC20Deployer","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://3c17c21486e6c4068dc54348cecdf3af19fc836e3b7600eef59c14b8c9cc2947"}]}