{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n    safeMath.sol v1.0.0\r\n    Safe mathematical operations\r\n    \r\n    This file is part of Screenist [NIS] token project.\r\n    \r\n    Author: Andor 'iFA' Rajci, Fusion Solutions KFT @ contact@fusionsolutions.io\r\n*/\r\npragma solidity 0.4.26;\r\n\r\nlibrary SafeMath {\r\n    /* Internals */\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256 c) {\r\n        c = a + b;\r\n        assert( c >= a );\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256 c) {\r\n        c = a - b;\r\n        assert( c <= a );\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256 c) {\r\n        c = a * b;\r\n        assert( c == 0 || c / a == b );\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        return a / b;\r\n    }\r\n    function pow(uint256 a, uint256 b) internal pure returns(uint256 c) {\r\n        c = a ** b;\r\n        assert( c % a == 0 );\r\n        return a ** b;\r\n    }\r\n}\r\n\r\n/*\r\n    owner.sol v1.0.0\r\n    Owner\r\n    \r\n    This file is part of Screenist [NIS] token project.\r\n    \r\n    Author: Andor 'iFA' Rajci, Fusion Solutions KFT @ contact@fusionsolutions.io\r\n*/\r\npragma solidity 0.4.26;\r\n\r\ncontract Owned {\r\n    /* Variables */\r\n    address public owner = msg.sender;\r\n    /* Constructor */\r\n    constructor(address _owner) public {\r\n        if ( _owner == address(0x00000000000000000000000000000000000000) ) {\r\n            _owner = msg.sender;\r\n        }\r\n        owner = _owner;\r\n    }\r\n    /* Externals */\r\n    function replaceOwner(address _owner) external returns(bool) {\r\n        require( isOwner() );\r\n        owner = _owner;\r\n        return true;\r\n    }\r\n    /* Internals */\r\n    function isOwner() internal view returns(bool) {\r\n        return owner == msg.sender;\r\n    }\r\n    /* Modifiers */\r\n    modifier forOwner {\r\n        require( isOwner() );\r\n        _;\r\n    }\r\n}\r\n\r\n/*\r\n    tokenDB.sol v1.0.0\r\n    Token Database - ABSTRACT\r\n    \r\n    This file is part of Screenist [NIS] token project.\r\n    \r\n    Author: Andor 'iFA' Rajci, Fusion Solutions KFT @ contact@fusionsolutions.io\r\n*/\r\npragma solidity 0.4.26;\r\n\r\ncontract TokenDB is Owned {\r\n    /* Declarations */\r\n    using SafeMath for uint256;\r\n    /* Structures */\r\n    struct balances_s {\r\n        uint256 amount;\r\n        bool valid;\r\n    }\r\n    struct vesting_s {\r\n        uint256 amount;\r\n        uint256 startBlock;\r\n        uint256 endBlock;\r\n        uint256 claimedAmount;\r\n        bool    valid;\r\n    }\r\n    /* Variables */\r\n    mapping(address => mapping(address => uint256)) private allowance;\r\n    mapping(address => balances_s) private balances;\r\n    mapping(address => vesting_s) public vesting;\r\n    uint256 public totalSupply;\r\n    address public tokenAddress;\r\n    address public oldDBAddress;\r\n    uint256 public totalVesting;\r\n    /* Constructor */\r\n    constructor(address _owner, address _tokenAddress, address _oldDBAddress) Owned(_owner) public {}\r\n    /* Externals */\r\n    function changeTokenAddress(address _tokenAddress) external forOwner {}\r\n    function mint(address _to, uint256 _amount) external returns(bool _success) {}\r\n    function transfer(address _from, address _to, uint256 _amount) external returns(bool _success) {}\r\n    function bulkTransfer(address _from, address[] memory _to, uint256[] memory _amount) public returns(bool _success) {}\r\n    function setAllowance(address _owner, address _spender, uint256 _amount) external returns(bool _success) {}\r\n    function setVesting(address _owner, uint256 _amount, uint256 _startBlock, uint256 _endBlock, uint256 _claimedAmount) external returns(bool _success) {}\r\n    /* Constants */\r\n    function getAllowance(address _owner, address _spender) public view returns(bool _success, uint256 _remaining) {}\r\n    function getBalance(address _owner) public view returns(bool _success, uint256 _balance) {}\r\n    function getTotalSupply() public view returns(bool _success, uint256 _totalSupply) {}\r\n    function getTotalVesting() public view returns(bool _success, uint256 _totalVesting) {}\r\n    function getVesting(address _owner) public view returns(bool _success, uint256 _amount, uint256 _startBlock, uint256 _endBlock, uint256 _claimedAmount, bool _valid) {}\r\n    /* Internals */\r\n    function _getBalance(address _owner) internal view returns(uint256 _balance) {}\r\n    function _getTotalSupply() internal view returns(uint256 _totalSupply) {}\r\n    function _getTotalVesting() internal view returns(uint256 _totalVesting) {}\r\n}\r\n\r\n/*\r\n    token.sol v1.0.0\r\n    Token Proxy\r\n    \r\n    This file is part of Screenist [NIS] token project.\r\n    \r\n    Author: Andor 'iFA' Rajci, Fusion Solutions KFT @ contact@fusionsolutions.io\r\n*/\r\npragma solidity 0.4.26;\r\n\r\ncontract Token is Owned {\r\n    /* Declarations */\r\n    using SafeMath for uint256;\r\n    /* Variables */\r\n    string  public name = \"Screenist Token\";\r\n    string  public symbol = \"NIS\";\r\n    uint8   public decimals = 8;\r\n    address public libAddress;\r\n    address public freezeAdmin;\r\n    address public vestingAdmin;\r\n    TokenDB public db;\r\n    bool    public underFreeze;\r\n    /* Constructor */\r\n    constructor(address _owner, address _freezeAdmin, address _vestingAdmin, address _libAddress, address _dbAddress, bool _isLib) Owned(_owner) public {\r\n        if ( ! _isLib ) {\r\n            db = TokenDB(_dbAddress);\r\n            libAddress = _libAddress;\r\n            vestingAdmin = _vestingAdmin;\r\n            freezeAdmin = _freezeAdmin;\r\n            require( db.setAllowance(address(this), _owner, uint256(0)-1) );\r\n            require( db.mint(address(this), 1.55e16) );\r\n            emit Mint(address(this), 1.55e16);\r\n        }\r\n    }\r\n    /* Fallback */\r\n    function () external payable {\r\n        owner.transfer(msg.value);\r\n    }\r\n    /* Externals */\r\n    function changeLibAddress(address _libAddress) public forOwner {\r\n        libAddress = _libAddress;\r\n    }\r\n    function changeDBAddress(address _dbAddress) public forOwner {\r\n        db = TokenDB(_dbAddress);\r\n    }\r\n    function setFreezeStatus(bool _newStatus) public forFreezeAdmin {\r\n        underFreeze = _newStatus;\r\n    }\r\n    function approve(address _spender, uint256 _value) public returns (bool _success) {\r\n        address _trg = libAddress;\r\n        assembly {\r\n            let m := mload(0x40)\r\n            calldatacopy(m, 0, calldatasize)\r\n            let success := delegatecall(gas, _trg, m, calldatasize, m, 0x20)\r\n            switch success case 0 {\r\n                revert(0, 0)\r\n            } default {\r\n                return(m, 0x20)\r\n            }\r\n        }\r\n    }\r\n    function transfer(address _to, uint256 _amount) public isNotFrozen returns(bool _success)  {\r\n        address _trg = libAddress;\r\n        assembly {\r\n            let m := mload(0x40)\r\n            calldatacopy(m, 0, calldatasize)\r\n            let success := delegatecall(gas, _trg, m, calldatasize, m, 0x20)\r\n            switch success case 0 {\r\n                revert(0, 0)\r\n            } default {\r\n                return(m, 0x20)\r\n            }\r\n        }\r\n    }\r\n    function bulkTransfer(address[] memory _to, uint256[] memory _amount) public isNotFrozen returns(bool _success)  {\r\n        address _trg = libAddress;\r\n        assembly {\r\n            let m := mload(0x40)\r\n            calldatacopy(m, 0, calldatasize)\r\n            let success := delegatecall(gas, _trg, m, calldatasize, m, 0x20)\r\n            switch success case 0 {\r\n                revert(0, 0)\r\n            } default {\r\n                return(m, 0x20)\r\n            }\r\n        }\r\n    }\r\n    function transferFrom(address _from, address _to, uint256 _amount) public isNotFrozen returns (bool _success)  {\r\n        address _trg = libAddress;\r\n        assembly {\r\n            let m := mload(0x40)\r\n            calldatacopy(m, 0, calldatasize)\r\n            let success := delegatecall(gas, _trg, m, calldatasize, m, 0x20)\r\n            switch success case 0 {\r\n                revert(0, 0)\r\n            } default {\r\n                return(m, 0x20)\r\n            }\r\n        }\r\n    }\r\n    function setVesting(address _beneficiary, uint256 _amount, uint256 _startBlock, uint256 _endBlock) public forVestingAdmin {\r\n        address _trg = libAddress;\r\n        assembly {\r\n            let m := mload(0x40)\r\n            calldatacopy(m, 0, calldatasize)\r\n            let success := delegatecall(gas, _trg, m, calldatasize, m, 0)\r\n            switch success case 0 {\r\n                revert(0, 0)\r\n            } default {\r\n                return(m, 0)\r\n            }\r\n        }\r\n    }\r\n    function claimVesting() public isNotFrozen {\r\n        address _trg = libAddress;\r\n        assembly {\r\n            let m := mload(0x40)\r\n            calldatacopy(m, 0, calldatasize)\r\n            let success := delegatecall(gas, _trg, m, calldatasize, m, 0)\r\n            switch success case 0 {\r\n                revert(0, 0)\r\n            } default {\r\n                return(m, 0)\r\n            }\r\n        }\r\n    }\r\n    /* Constants */\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 _remaining) {\r\n        address _trg = libAddress;\r\n        assembly {\r\n            let m := mload(0x40)\r\n            calldatacopy(m, 0, calldatasize)\r\n            let success := delegatecall(gas, _trg, m, calldatasize, m, 0x20)\r\n            switch success case 0 {\r\n                revert(0, 0)\r\n            } default {\r\n                return(m, 0x20)\r\n            }\r\n        }\r\n    }\r\n    function balanceOf(address _owner) public constant returns (uint256 _balance) {\r\n        address _trg = libAddress;\r\n        assembly {\r\n            let m := mload(0x40)\r\n            calldatacopy(m, 0, calldatasize)\r\n            let success := delegatecall(gas, _trg, m, calldatasize, m, 0x20)\r\n            switch success case 0 {\r\n                revert(0, 0)\r\n            } default {\r\n                return(m, 0x20)\r\n            }\r\n        }\r\n    }\r\n    function totalSupply() public constant returns (uint256 _totalSupply) {\r\n        address _trg = libAddress;\r\n        assembly {\r\n            let m := mload(0x40)\r\n            calldatacopy(m, 0, calldatasize)\r\n            let success := delegatecall(gas, _trg, m, calldatasize, m, 0x20)\r\n            switch success case 0 {\r\n                revert(0, 0)\r\n            } default {\r\n                return(m, 0x20)\r\n            }\r\n        }\r\n    }\r\n    function getVesting(address _owner) public constant returns(uint256 _amount, uint256 _startBlock, uint256 _endBlock, uint256 _claimedAmount) {\r\n        address _trg = libAddress;\r\n        assembly {\r\n            let m := mload(0x40)\r\n            calldatacopy(m, 0, calldatasize)\r\n            let success := delegatecall(gas, _trg, m, calldatasize, m, 0x80)\r\n            switch success case 0 {\r\n                revert(0, 0)\r\n            } default {\r\n                return(m, 0x80)\r\n            }\r\n        }\r\n    }\r\n    function totalVesting() public constant returns(uint256 _amount) {\r\n        address _trg = libAddress;\r\n        assembly {\r\n            let m := mload(0x40)\r\n            calldatacopy(m, 0, calldatasize)\r\n            let success := delegatecall(gas, _trg, m, calldatasize, m, 0x20)\r\n            switch success case 0 {\r\n                revert(0, 0)\r\n            } default {\r\n                return(m, 0x20)\r\n            }\r\n        }\r\n    }\r\n    function calcVesting(address _owner) public constant returns(uint256 _reward) {\r\n        address _trg = libAddress;\r\n        assembly {\r\n            let m := mload(0x40)\r\n            calldatacopy(m, 0, calldatasize)\r\n            let success := delegatecall(gas, _trg, m, calldatasize, m, 0x20)\r\n            switch success case 0 {\r\n                revert(0, 0)\r\n            } default {\r\n                return(m, 0x20)\r\n            }\r\n        }\r\n    }\r\n    /* Events */\r\n    event AllowanceUsed(address indexed _spender, address indexed _owner, uint256 indexed _value);\r\n    event Mint(address indexed _addr, uint256 indexed _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event VestingDefined(address _beneficiary, uint256 _amount, uint256 _startBlock, uint256 _endBlock);\r\n    event VestingClaimed(address _beneficiary, uint256 _amount);\r\n    /* Modifiers */\r\n    modifier isNotFrozen {\r\n        require( ! underFreeze );\r\n        _;\r\n    }\r\n    modifier forOwner {\r\n        require( isOwner() );\r\n        _;\r\n    }\r\n    modifier forVestingAdmin {\r\n        require( msg.sender == vestingAdmin );\r\n        _;\r\n    }\r\n    modifier forFreezeAdmin {\r\n        require( msg.sender == freezeAdmin );\r\n        _;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"underFreeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"bulkTransfer\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_libAddress\",\"type\":\"address\"}],\"name\":\"changeLibAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"libAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dbAddress\",\"type\":\"address\"}],\"name\":\"changeDBAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newStatus\",\"type\":\"bool\"}],\"name\":\"setFreezeStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"db\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"calcVesting\",\"outputs\":[{\"name\":\"_reward\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalVesting\",\"outputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"freezeAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"replaceOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"name\":\"_endBlock\",\"type\":\"uint256\"}],\"name\":\"setVesting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getVesting\",\"outputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"name\":\"_endBlock\",\"type\":\"uint256\"},{\"name\":\"_claimedAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"_remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimVesting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_freezeAdmin\",\"type\":\"address\"},{\"name\":\"_vestingAdmin\",\"type\":\"address\"},{\"name\":\"_libAddress\",\"type\":\"address\"},{\"name\":\"_dbAddress\",\"type\":\"address\"},{\"name\":\"_isLib\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"AllowanceUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_endBlock\",\"type\":\"uint256\"}],\"name\":\"VestingDefined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"VestingClaimed\",\"type\":\"event\"}]","ContractName":"Token","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a0f4a8d71e0631e6441463b12645936e9548d91b000000000000000000000000b4e0392f2827162f2c443e9404289b6f0a48e418000000000000000000000000e813ca5435833d2cdab4f843537c03febe17197f00000000000000000000000022e4ad257b1118403208addc2986318f2b0fcf83000000000000000000000000e9dbbdb64607f8ed2703fdc38e937dd57f99acec0000000000000000000000000000000000000000000000000000000000000000","Library":"","LicenseType":"None","SwarmSource":"bzzr://eeb531b160cfa5007b804a2546269077b8bae8e84a725c6b523c8c92ba126ad0"}]}