{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @dev APIX 토큰을 1년 동안 잠그는 기능을 수행한다.\r\n * 매 분기마다(1년에 4번 - 3, 6, 9, 12개월 차) 잠긴 토큰의 1/4 만큼 씩 잠금 해제한다.\r\n * \r\n * 컨트렉트 사용 절차 : \r\n * 1. 컨트렉트를 생성한다.\r\n * 2. 생성된 컨트렉트 주소에 APIX 토큰을 전송한다.\r\n * 3. initLockedBalance() 메서드를 호출한다.\r\n * 4. getNextRound() 및 getNextRoundTime() 값을 확인하여 다음 잠금해제 정보를 확인한다.\r\n * 5. 해제 가능 시점에 도달하면 unlock() 메서드를 실행한다.\r\n */\r\n\r\n /**\r\n * @dev This contract locks specific amount of APIX tokens for 1 year.\r\n * In every quarter of the year(4 times in 1 year - 3rd, 6th, 9th, 12th months), contract unlocks 1/4 of annually locked tokens.\r\n * \r\n * Contract use sequence : \r\n * 1. Deploy contract.\r\n * 2. Transfer APIX tokens to the generated contract address.\r\n * 3. Call initLockedBalance() method.\r\n * 4. Check getNextRound() and getNextRoundTime() value to find out next unlock information.\r\n * 5. Call unlock() method when unlockable time has come.\r\n */\r\n\r\ncontract Locker {\r\n    IERC20  APIX;\r\n    address receiver;\r\n    uint32 unlockStartYear;\r\n    uint256 unlockStartTime;\r\n    uint256 unlockOffsetTime = 7884000; /* (365*24*60*60)/4 */\r\n    uint256 totalLockedBalance = 0;\r\n    uint256 unlockBalancePerRound = 0;\r\n    uint8 lastRound = 0;\r\n    \r\n    /**\r\n     * @dev APIX 토큰이 락업될 때 emit됩니다.\r\n     *\r\n     * 유의사항 : `value`는 0일 수도 있습니다.\r\n     */\r\n\r\n    /**\r\n     * @dev Emits when APIX token is locked.\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event APIXLock(uint256 value);\r\n    \r\n    /**\r\n     * @dev APIX 토큰이 락업 해제되고 (`receiver`)에게 전송될 때 emit됩니다.\r\n     *\r\n     * 유의사항 : `value`는 0일 수도 있습니다.\r\n     */\r\n\r\n    /**\r\n     * @dev Emitted when APIX token is unlocked and transfer tokens to (`receiver`)\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event APIXUnlock(uint256 value, address receiver);\r\n    \r\n    /**\r\n     * @dev 컨트렉트를 생성한다.\r\n     * \r\n     * @param _APIX 토큰 컨트렉트 주소\r\n     * @param _receiver 잠금 해제된 토큰을 수령할 주소\r\n     * @param _unlockStartTime 잠금 해제가 시작되는 년도의 1월 1일 0시 0분 0초 시간(GMT, Unix Timestamp)\r\n     * @param _unlockStartYear 잠금 해제가 시작되는 년도(정수)\r\n     */\r\n\r\n     /**\r\n     * @dev Creates contract.\r\n     * \r\n     * @param _APIXContractAddress Address of APIX token contract\r\n     * @param _receiver Address which will receive unlocked tokens\r\n     * @param _unlockStartTime Time of the Jan 1st, 00:00:00 of the year that unlocking will be started(GMT, Unix Timestamp)\r\n     * @param _unlockStartYear Year that unlocking will be started\r\n     */\r\n    constructor (address _APIXContractAddress, address _receiver, uint256 _unlockStartTime, uint32 _unlockStartYear) public {\r\n        APIX = IERC20(_APIXContractAddress);\r\n        receiver = _receiver;\r\n        unlockStartTime = _unlockStartTime;\r\n        unlockStartYear = _unlockStartYear;\r\n    }\r\n    \r\n    /**\r\n     * @dev Lock 컨트렉트가 보유한 토큰의 수량을 반환한다.\r\n     * @return 현재 컨트렉트에서 보유한 APIX 수량 (wei)\r\n     */\r\n    /**\r\n     * @dev Returns APIX token balance of this Lock contract.\r\n     * @return Current contract's APIX balance (wei)\r\n     */\r\n    function getContractBalance() external view returns (uint256) {\r\n        return APIX.balanceOf(address(this));\r\n    }\r\n    \r\n    /**\r\n     * @dev 잠겨진 토큰의 전체 수량을 반환한다.\r\n     * @return 컨트렉트 초기화 시 설정된 잠금 수량\r\n     */\r\n    /**\r\n     * @dev Returns amount of total locked tokens.\r\n     * @return Locked amount set at the contract initalization step\r\n     */\r\n    function totalLockedTokens() external view returns (uint256) {\r\n        return totalLockedBalance;\r\n    }\r\n    \r\n    /**\r\n     * @dev 다음 잠금이 해제되는 회차를 확인한다.\r\n     * @return 다음 라운드 번호\r\n     */\r\n    /**\r\n     * @dev Check next unlock round.\r\n     * @return Next round number\r\n     */\r\n    function getNextRound() external view returns (uint8) {\r\n        return lastRound + 1;\r\n    }\r\n    \r\n    /**\r\n     * @dev 다음 잠금이 해제되는 시간을 확인한다.\r\n     */\r\n     /**\r\n     * @dev Check next round's unlock time.\r\n     */\r\n    function getNextRoundTime() external view returns (uint256) {\r\n        return _getNextRoundTime();\r\n    }\r\n    \r\n    function _getNextRoundTime() internal view returns (uint256) {\r\n        return unlockStartTime + unlockOffsetTime * (lastRound + 1);\r\n    }\r\n    /**\r\n     * @dev 다음 라운드에서 해제되는 수량을 조회한다\r\n     * @return 해제되는 토큰 수량\r\n     */\r\n    /**\r\n     * @dev Check next round's APIX unlock amount\r\n     * @return Unlock amount\r\n     */\r\n    function getNextRoundUnlock() external view returns (uint256) {\r\n        return _getNextRoundUnlock();\r\n    }\r\n    function _getNextRoundUnlock() internal view returns (uint256) {\r\n        uint8 round = lastRound + 1;\r\n        uint256 unlockAmount;\r\n        \r\n        if(round < 4) {\r\n            unlockAmount = unlockBalancePerRound;\r\n        }\r\n        else {\r\n            unlockAmount = APIX.balanceOf(address(this));\r\n        }\r\n        \r\n        return unlockAmount;\r\n    }\r\n    \r\n    /**\r\n     * @dev 현재 컨트렉트에 대한 정보를 반환한다.\r\n     * @return  initLockedToken 컨트렉트에 잠겨진 수량\r\n     *          balance 현재 컨트렉트가 보관하고 있는 토큰의 수량\r\n     *          unlockYear 락 컨트렉트가 해제되는 년도\r\n     *          nextRound 다음 회차 번호\r\n     *          nextRoundUnlockAt 다음 회차 시작 시간 (Unix timestamp)\r\n     *          nextRoundUnlockToken 다음 회차에 풀리는 토큰의 수량\r\n     */\r\n     /**\r\n     * @dev Returns information of current contract.\r\n     * @return  initLockedToken - Locked APIX token amount\r\n     *          balance - APIX token balance of contract\r\n     *          unlockYear - Contract unlock year\r\n     *          nextRound - Next unlock round number\r\n     *          nextRoundUnlockAt - Next unlock round start time (Unix timestamp)\r\n     *          nextRoundUnlockToken - Unlocking APIX amount of next unlock round\r\n     */\r\n    function getLockInfo() external view returns (uint256 initLockedToken, uint256 balance, uint32 unlockYear, uint8 nextRound, uint256 nextRoundUnlockAt, uint256 nextRoundUnlockToken) {\r\n        initLockedToken = totalLockedBalance;\r\n        balance = APIX.balanceOf(address(this));\r\n        nextRound = lastRound + 1;\r\n        nextRoundUnlockAt = _getNextRoundTime();\r\n        nextRoundUnlockToken = _getNextRoundUnlock();\r\n        unlockYear = unlockStartYear;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * 컨트랙트에서 보관하고 있는 잠긴 수량을 설정한다.\r\n     * 이 함수를 실행하기 전에 토큰을 먼저 보내야 한다.\r\n     * \r\n     * !!** 잠긴 수량은 한 번 설정되면 다시 변경할 수 없음 **!!\r\n     * \r\n     * @return 잠겨진 토큰의 수량\r\n     */\r\n    /**\r\n     * Sets locked amount of current contract.\r\n     * Must transfer APIX tokens to this contract.\r\n     * \r\n     * !!** After locked amount is set, it cannot be updated again **!!\r\n     * \r\n     * @return Locked token amount\r\n     */\r\n    function initLockedBalance() public returns (uint256) {\r\n        require(totalLockedBalance == 0, \"Locker: There is no token stored\");\r\n        \r\n        totalLockedBalance = APIX.balanceOf(address(this));\r\n        unlockBalancePerRound = totalLockedBalance / 4;\r\n        \r\n        emit APIXLock (totalLockedBalance);\r\n        \r\n        return totalLockedBalance;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * @dev 토큰 잠김을 해제하고 보유자에게 반환한다.\r\n     * \r\n     * @param round 토큰 잠김 해제 회차\r\n     * @return 성공했을 경우 TRUE, 아니면 FALSE\r\n     */\r\n    /**\r\n     * @dev Unlocks APIX token and transfer it to the receiver.\r\n     * \r\n     * @param round Round to unlock the token\r\n     * @return TRUE if successed, FALSE in other situations.\r\n     */\r\n    function unlock(uint8 round) public returns (bool) {\r\n        // 잠긴 토큰이 존재해야 한다.\r\n        // Locked token must be exist.\r\n        require(totalLockedBalance > 0, \"Locker: There is no locked token\");\r\n        \r\n        \r\n        // 직전에 출금된 라운드보다 한 번 증가된 라운드여야 한다.\r\n        // Round should be 1 round bigger than the latest unlocked round.\r\n        require(round == lastRound + 1, \"Locker: The round value is incorrect\");\r\n        \r\n        \r\n        // 4라운드까지만 실행 가능하다.\r\n        // Can only be executed for the round 4.\r\n        require(round <= 4, \"Locker: The round value has exceeded the executable range\");\r\n        \r\n        \r\n        // 해당 라운드의 시간이 아직 되지 않았을 경우 실행하지 못하도록 한다.\r\n        // Cannot execute when the round's unlock time has not yet reached.\r\n        require(block.timestamp >= _getNextRoundTime(), \"Locker: It's not time to unlock yet\");\r\n        \r\n        \r\n        // 출금 실행\r\n        // Withdrawal\r\n        uint256 amount = _getNextRoundUnlock();\r\n        require(amount > 0, 'Locker: There is no unlockable token');\r\n        require(APIX.transfer(receiver, amount));\r\n        \r\n        emit APIXUnlock(amount, receiver);\r\n        \r\n        // 실행된 회차를 기록한다.\r\n        // Records executed round.\r\n        lastRound = round;\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"round\",\"type\":\"uint8\"}],\"name\":\"unlock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initLockedBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNextRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNextRoundTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNextRoundUnlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLockInfo\",\"outputs\":[{\"name\":\"initLockedToken\",\"type\":\"uint256\"},{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"unlockYear\",\"type\":\"uint32\"},{\"name\":\"nextRound\",\"type\":\"uint8\"},{\"name\":\"nextRoundUnlockAt\",\"type\":\"uint256\"},{\"name\":\"nextRoundUnlockToken\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalLockedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_APIXContractAddress\",\"type\":\"address\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_unlockStartTime\",\"type\":\"uint256\"},{\"name\":\"_unlockStartYear\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"APIXLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"APIXUnlock\",\"type\":\"event\"}]","ContractName":"Locker","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000f51ebf9a26dbc02b13f8b3a9110dac47a4d62d7800000000000000000000000057952ba9e8d09b53d49b323cd549f6e9925f6901000000000000000000000000000000000000000000000000000000005c2aad8000000000000000000000000000000000000000000000000000000000000007e3","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://d1cb97f56a96bc978f66ade31f4074e865818c64cdacd6f4be56cdf4921311f6"}]}