{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.7;\r\n// produced by the Solididy File Flattener (c) David Appleton 2018\r\n// contact : dave@akomba.com\r\n// released under Apache 2.0 licence\r\ncontract Basket {\r\n    address[] public tokens;\r\n    mapping(address => uint256) public weights; // unit: aqToken/RSV\r\n    mapping(address => bool) public has;\r\n    // INVARIANT: {addr | addr in tokens} == {addr | has[addr] == true}\r\n    \r\n    // SECURITY PROPERTY: The value of prev is always a Basket, and cannot be set by any user.\r\n    \r\n    // WARNING: A basket can be of size 0. It is the Manager's responsibility\r\n    //                    to ensure Issuance does not happen against an empty basket.\r\n\r\n    /// Construct a new basket from an old Basket `prev`, and a list of tokens and weights with\r\n    /// which to update `prev`. If `prev == address(0)`, act like it's an empty basket.\r\n    constructor(Basket trustedPrev, address[] memory _tokens, uint256[] memory _weights) public {\r\n        require(_tokens.length == _weights.length, \"Basket: unequal array lengths\");\r\n\r\n        // Initialize data from input arrays\r\n        tokens = new address[](_tokens.length);\r\n        for (uint256 i = 0; i < _tokens.length; i++) {\r\n            require(!has[_tokens[i]], \"duplicate token entries\");\r\n            weights[_tokens[i]] = _weights[i];\r\n            has[_tokens[i]] = true;\r\n            tokens[i] = _tokens[i];\r\n        }\r\n\r\n        // If there's a previous basket, copy those of its contents not already set.\r\n        if (trustedPrev != Basket(0)) {\r\n            for (uint256 i = 0; i < trustedPrev.size(); i++) {\r\n                address tok = trustedPrev.tokens(i);\r\n                if (!has[tok]) {\r\n                    weights[tok] = trustedPrev.weights(tok);\r\n                    has[tok] = true;\r\n                    tokens.push(tok);\r\n                }\r\n            }\r\n        }\r\n        require(tokens.length <= 10, \"Basket: bad length\");\r\n    }\r\n\r\n    function getTokens() external view returns(address[] memory) {\r\n        return tokens;\r\n    }\r\n\r\n    function size() external view returns(uint256) {\r\n        return tokens.length;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"has\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"size\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"weights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"trustedPrev\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"address[]\"},{\"name\":\"_weights\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Basket","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"100000","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000030000000000000000000000008e870d67f660d95d5be530380d0ec0bd388289e10000000000000000000000000000000000085d4780b73119b644ae5ecd22b376000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000403295f434236c799ce5b7400000000000000000000000000000000000000000403295f434236c799ce5b740000000000000000000000000000000000000000000000000004696128568c6fa980000","Library":"","LicenseType":"BSD-2-Clause","SwarmSource":"bzzr://392880f562f3a87fda7b63f16c3d4edab814aa60350133017fe0dd9bc03c7be4"}]}