{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.7;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal pure returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n  address public mainAddress;\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n    mainAddress = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, \"Only for owner\");\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address _owner) public onlyOwner {\r\n    owner = _owner;\r\n  }\r\n\r\n}\r\n\r\ncontract ETHStvo is Ownable {\r\n    \r\n    event Register(uint indexed _user, uint indexed _referrer, uint indexed _introducer, uint _time);\r\n    event SponsorChange(uint indexed _user, uint indexed _referrer, uint indexed _introducer, uint _time);\r\n    event Upgrade(uint indexed _user, uint _star, uint _price, uint _time);\r\n    event Payment(uint indexed _user, uint indexed _referrer, uint indexed _introducer, uint _star, uint _money, uint _fee, uint _time);\r\n    event LostMoney(uint indexed _referrer, uint indexed _referral, uint _star, uint _money, uint _time);\r\n\r\n    mapping (uint => uint) public STAR_PRICE;\r\n    mapping (uint => uint) public STAR_FEE;\r\n    uint REFERRER_1_STAR_LIMIT = 3;\r\n\r\n    struct UserStruct {\r\n        bool isExist;\r\n        address wallet;\r\n        uint referrerID;\r\n        uint introducerID;\r\n        address[] referral;\r\n        mapping (uint => bool) starActive;\r\n    }\r\n\r\n    mapping (uint => UserStruct) public users;\r\n    mapping (address => uint) public userList;\r\n\r\n    uint public currentUserID = 0;\r\n    uint public total = 0 ether;\r\n    uint public totalFees = 0 ether;\r\n    bool public paused = false;\r\n    bool public allowSponsorChange = true;\r\n\r\n    constructor() public {\r\n\r\n        //Cycle 1\r\n        STAR_PRICE[1] = 0.05 ether;\r\n        STAR_PRICE[2] = 0.15 ether;\r\n        STAR_PRICE[3] = 0.60 ether;\r\n        STAR_PRICE[4] = 2.70 ether;\r\n        STAR_PRICE[5] = 24.75 ether;\r\n        STAR_PRICE[6] = 37.50 ether;\r\n        STAR_PRICE[7] = 72.90 ether;\r\n        STAR_PRICE[8] = 218.70 ether;\r\n\r\n        //Cycle 2\r\n        STAR_PRICE[9] = 385.00 ether;\r\n        STAR_PRICE[10] = 700.00 ether;\r\n        STAR_PRICE[11] = 1250.00 ether;\r\n        STAR_PRICE[12] = 2500.00 ether;\r\n        STAR_PRICE[13] = 5500.00 ether;\r\n        STAR_PRICE[14] = 7500.00 ether;\r\n        STAR_PRICE[15] = 10000.00 ether;\r\n        STAR_PRICE[16] = 15000.00 ether;\r\n\r\n        STAR_FEE[5] = 2.25 ether;\r\n        STAR_FEE[9] = 35.00 ether;\r\n        STAR_FEE[13] = 500.00 ether;\r\n\r\n        UserStruct memory userStruct;\r\n        currentUserID++;\r\n\r\n        userStruct = UserStruct({\r\n            isExist : true,\r\n            wallet : mainAddress,\r\n            referrerID : 0,\r\n            introducerID : 0,\r\n            referral : new address[](0)\r\n        });\r\n\r\n        users[currentUserID] = userStruct;\r\n        userList[mainAddress] = currentUserID;\r\n\r\n        users[currentUserID].starActive[1] = true;\r\n        users[currentUserID].starActive[2] = true;\r\n        users[currentUserID].starActive[3] = true;\r\n        users[currentUserID].starActive[4] = true;\r\n        users[currentUserID].starActive[5] = true;\r\n        users[currentUserID].starActive[6] = true;\r\n        users[currentUserID].starActive[7] = true;\r\n        users[currentUserID].starActive[8] = true;\r\n        users[currentUserID].starActive[9] = true;\r\n        users[currentUserID].starActive[10] = true;\r\n        users[currentUserID].starActive[11] = true;\r\n        users[currentUserID].starActive[12] = true;\r\n        users[currentUserID].starActive[13] = true;\r\n        users[currentUserID].starActive[14] = true;\r\n        users[currentUserID].starActive[15] = true;\r\n        users[currentUserID].starActive[16] = true;\r\n    }\r\n\r\n    function setMainAddress(address _mainAddress) public onlyOwner {\r\n\r\n        require(userList[_mainAddress] == 0, 'Address is already in use by another user');\r\n        \r\n        delete userList[mainAddress];\r\n        userList[_mainAddress] = uint(1);\r\n        mainAddress = _mainAddress;\r\n        users[1].wallet = _mainAddress;\r\n      }\r\n\r\n    function setPaused(bool _paused) public onlyOwner {\r\n        paused = _paused;\r\n      }\r\n\r\n      function setAllowSponsorChange(bool _allowSponsorChange) public onlyOwner {\r\n        allowSponsorChange = _allowSponsorChange;\r\n      }\r\n\r\n    //https://etherconverter.online to Ether\r\n    function setStarPrice(uint _star, uint _price) public onlyOwner {\r\n        STAR_PRICE[_star] = _price;\r\n      }\r\n\r\n    //https://etherconverter.online to Ether\r\n    function setStarFee(uint _star, uint _price) public onlyOwner {\r\n        STAR_FEE[_star] = _price;\r\n      }\r\n\r\n    function setCurrentUserID(uint _currentUserID) public onlyOwner {\r\n        currentUserID = _currentUserID;\r\n      }\r\n\r\n    //Null address is 0x0000000000000000000000000000000000000000\r\n    function setUserData(uint _userID, address _wallet, uint _referrerID, uint _introducerID, address _referral1, address _referral2, address _referral3) public onlyOwner {\r\n\r\n        require(_userID > 0, 'Invalid user ID');\r\n        require(_wallet != address(0), 'Invalid user wallet');\r\n        require(_referrerID > 0, 'Invalid referrer ID');\r\n        require(_introducerID > 0, 'Invalid introducer ID');\r\n\r\n        if(_userID > currentUserID){\r\n            currentUserID++;\r\n        }\r\n\r\n        if(users[_userID].isExist){\r\n            delete userList[users[_userID].wallet];\r\n            delete users[_userID];\r\n        }\r\n\r\n        UserStruct memory userStruct;\r\n\r\n        userStruct = UserStruct({\r\n            isExist : true,\r\n            wallet : _wallet,\r\n            referrerID : _referrerID,\r\n            introducerID : _introducerID,\r\n            referral : new address[](0)\r\n        });\r\n    \r\n        users[_userID] = userStruct;\r\n        userList[_wallet] = _userID;\r\n\r\n        if(_referral1 != address(0)){\r\n            users[_userID].referral.push(_referral1);\r\n        }\r\n           \r\n        if(_referral2 != address(0)){\r\n            users[_userID].referral.push(_referral2);\r\n        }\r\n\r\n        if(_referral3 != address(0)){\r\n            users[_userID].referral.push(_referral3);\r\n        }\r\n\r\n    }\r\n\r\n    function () external payable {\r\n\r\n        require(!paused, 'Temporarily not accepting new users and Star upgrades');\r\n\r\n        uint star;\r\n\r\n        if(msg.value == STAR_PRICE[1]){\r\n            star = 1;\r\n        }else if(msg.value == STAR_PRICE[2]){\r\n            star = 2;\r\n        }else if(msg.value == STAR_PRICE[3]){\r\n            star = 3;\r\n        }else if(msg.value == STAR_PRICE[4]){\r\n            star = 4;\r\n        }else if(msg.value == STAR_PRICE[5]){\r\n            star = 5;\r\n        }else if(msg.value == STAR_PRICE[6]){\r\n            star = 6;\r\n        }else if(msg.value == STAR_PRICE[7]){\r\n            star = 7;\r\n        }else if(msg.value == STAR_PRICE[8]){\r\n            star = 8;\r\n        }else if(msg.value == STAR_PRICE[9]){\r\n            star = 9;\r\n        }else if(msg.value == STAR_PRICE[10]){\r\n            star = 10;\r\n        }else if(msg.value == STAR_PRICE[11]){\r\n            star = 11;\r\n        }else if(msg.value == STAR_PRICE[12]){\r\n            star = 12;\r\n        }else if(msg.value == STAR_PRICE[13]){\r\n            star = 13;\r\n        }else if(msg.value == STAR_PRICE[14]){\r\n            star = 14;\r\n        }else if(msg.value == STAR_PRICE[15]){\r\n            star = 15;\r\n        }else if(msg.value == STAR_PRICE[16]){\r\n            star = 16;\r\n        }else {\r\n            revert('You have sent incorrect payment amount');\r\n        }\r\n\r\n        if(star == 1){\r\n\r\n            uint referrerID = 0;\r\n            address referrer = bytesToAddress(msg.data);\r\n\r\n            if (userList[referrer] > 0 && userList[referrer] <= currentUserID){\r\n                referrerID = userList[referrer];\r\n            } else {\r\n                revert('Incorrect referrer');\r\n            }\r\n\r\n            if(users[userList[msg.sender]].isExist){\r\n                changeSponsor(referrerID);\r\n            } else {\r\n                registerUser(referrerID);\r\n            }\r\n        } else if(users[userList[msg.sender]].isExist){\r\n            upgradeUser(star);\r\n        } else {\r\n            revert(\"Please buy first star\");\r\n        }\r\n    }\r\n\r\n    function changeSponsor(uint _referrerID) internal {\r\n\r\n        require(allowSponsorChange, 'You are already signed up. Sponsor change not allowed');\r\n        require(users[userList[msg.sender]].isExist, 'You are not signed up');\r\n        require(userList[msg.sender] != _referrerID, 'You cannot sponsor yourself');\r\n        require(users[userList[msg.sender]].referrerID != _referrerID && users[userList[msg.sender]].introducerID != _referrerID, 'You are already under this sponsor');\r\n        require(_referrerID > 0 && _referrerID <= currentUserID, 'Incorrect referrer ID');\r\n        require(msg.value==STAR_PRICE[1], 'You have sent incorrect payment amount');\r\n        require(users[userList[msg.sender]].starActive[2] == false, 'Sponsor change is allowed only on Star 1');\r\n\r\n        uint _introducerID = _referrerID;\r\n        uint oldReferrer = users[userList[msg.sender]].referrerID;\r\n\r\n        if(users[_referrerID].referral.length >= REFERRER_1_STAR_LIMIT)\r\n        {\r\n            _referrerID = userList[findFreeReferrer(_referrerID)];\r\n        }\r\n\r\n        users[userList[msg.sender]].referrerID = _referrerID;\r\n        users[userList[msg.sender]].introducerID = _introducerID;\r\n\r\n        users[_referrerID].referral.push(msg.sender);\r\n\r\n        uint arrayLength = SafeMath.sub(uint(users[oldReferrer].referral.length),uint(1));\r\n\r\n        address[] memory referrals = new address[](arrayLength);\r\n\r\n        for(uint a = 0; a <= arrayLength; a++){\r\n            if(users[oldReferrer].referral[a] != msg.sender){\r\n                referrals[a] = users[oldReferrer].referral[a];\r\n            }\r\n        }\r\n\r\n        for(uint b = 0; b <= arrayLength; b++){\r\n            users[oldReferrer].referral.pop();\r\n        }\r\n\r\n        uint arrayLengthSecond = SafeMath.sub(uint(referrals.length),uint(1));\r\n\r\n        for(uint c = 0; c <= arrayLengthSecond; c++){\r\n            if(referrals[c] != address(0)){\r\n                users[oldReferrer].referral.push(referrals[c]);\r\n            }\r\n        }\r\n\r\n        upgradePayment(userList[msg.sender], 1);\r\n\r\n        emit SponsorChange(userList[msg.sender], _referrerID, _introducerID, now);\r\n\r\n    }\r\n\r\n    function registerUser(uint _referrerID) internal {\r\n\r\n        require(!users[userList[msg.sender]].isExist, 'You are already signed up');\r\n        require(_referrerID > 0 && _referrerID <= currentUserID, 'Incorrect referrer ID');\r\n        require(msg.value==STAR_PRICE[1], 'You have sent incorrect payment amount');\r\n\r\n        uint _introducerID = _referrerID;\r\n\r\n        if(users[_referrerID].referral.length >= REFERRER_1_STAR_LIMIT)\r\n        {\r\n            _referrerID = userList[findFreeReferrer(_referrerID)];\r\n        }\r\n\r\n        UserStruct memory userStruct;\r\n        currentUserID++;\r\n\r\n        userStruct = UserStruct({\r\n            isExist : true,\r\n            wallet : msg.sender,\r\n            referrerID : _referrerID,\r\n            introducerID : _introducerID,\r\n            referral : new address[](0)\r\n        });\r\n\r\n        users[currentUserID] = userStruct;\r\n        userList[msg.sender] = currentUserID;\r\n\r\n        users[currentUserID].starActive[1] = true;\r\n        users[currentUserID].starActive[2] = false;\r\n        users[currentUserID].starActive[3] = false;\r\n        users[currentUserID].starActive[4] = false;\r\n        users[currentUserID].starActive[5] = false;\r\n        users[currentUserID].starActive[6] = false;\r\n        users[currentUserID].starActive[7] = false;\r\n        users[currentUserID].starActive[8] = false;\r\n        users[currentUserID].starActive[9] = false;\r\n        users[currentUserID].starActive[10] = false;\r\n        users[currentUserID].starActive[11] = false;\r\n        users[currentUserID].starActive[12] = false;\r\n        users[currentUserID].starActive[13] = false;\r\n        users[currentUserID].starActive[14] = false;\r\n        users[currentUserID].starActive[15] = false;\r\n        users[currentUserID].starActive[16] = false;\r\n\r\n        users[_referrerID].referral.push(msg.sender);\r\n\r\n        upgradePayment(currentUserID, 1);\r\n\r\n        emit Register(currentUserID, _referrerID, _introducerID, now);\r\n    }\r\n\r\n    function upgradeUser(uint _star) internal {\r\n\r\n        require(users[userList[msg.sender]].isExist, 'You are not signed up yet');\r\n        require( _star >= 2 && _star <= 16, 'Incorrect star');\r\n        require(msg.value==STAR_PRICE[_star], 'You have sent incorrect payment amount');\r\n        require(users[userList[msg.sender]].starActive[_star] == false, 'You have already activated this star');\r\n\r\n        uint previousStar = SafeMath.sub(_star,uint(1));\r\n        require(users[userList[msg.sender]].starActive[previousStar] == true, 'Buy the previous star first');\r\n        \r\n        users[userList[msg.sender]].starActive[_star] = true;\r\n\r\n        upgradePayment(userList[msg.sender], _star);\r\n        \r\n        emit Upgrade(userList[msg.sender], _star, STAR_PRICE[_star], now);\r\n    }\r\n\r\n    function upgradePayment(uint _user, uint _star) internal {\r\n\r\n        address referrer;\r\n        address introducer;\r\n\r\n        uint referrerFinal;\r\n        uint referrer1;\r\n        uint referrer2;\r\n        uint referrer3;\r\n        uint money;\r\n\r\n        if(_star == 1 || _star == 5 || _star == 9 || _star == 13){\r\n            referrerFinal = users[_user].referrerID;\r\n        } else if(_star == 2 || _star == 6 || _star == 10 || _star == 14){\r\n            referrer1 = users[_user].referrerID;\r\n            referrerFinal = users[referrer1].referrerID;\r\n        } else if(_star == 3 || _star == 7 || _star == 11 || _star == 15){\r\n            referrer1 = users[_user].referrerID;\r\n            referrer2 = users[referrer1].referrerID;\r\n            referrerFinal = users[referrer2].referrerID;\r\n        } else if(_star == 4 || _star == 8 || _star == 12 || _star == 16){\r\n            referrer1 = users[_user].referrerID;\r\n            referrer2 = users[referrer1].referrerID;\r\n            referrer3 = users[referrer2].referrerID;\r\n            referrerFinal = users[referrer3].referrerID;\r\n        }\r\n\r\n        if(!users[referrerFinal].isExist || users[referrerFinal].starActive[_star] == false){\r\n            referrer = mainAddress;\r\n        } else {\r\n            referrer = users[referrerFinal].wallet;\r\n        }\r\n\r\n        money = STAR_PRICE[_star];\r\n                \r\n        if(STAR_FEE[_star] > 0){\r\n            bool result;\r\n            result = address(uint160(mainAddress)).send(STAR_FEE[_star]);\r\n            money = SafeMath.sub(money,STAR_FEE[_star]);\r\n            totalFees = SafeMath.add(totalFees,money);\r\n        }\r\n\r\n        total = SafeMath.add(total,money);\r\n\r\n        if(_star>=3){\r\n\r\n            if(!users[users[_user].introducerID].isExist){\r\n                introducer = mainAddress;\r\n            } else {\r\n                introducer = users[users[_user].introducerID].wallet;\r\n            }\r\n\r\n            money = SafeMath.div(money,2);\r\n\r\n            bool result_one;\r\n            result_one = address(uint160(referrer)).send(money);\r\n\r\n            bool result_two;\r\n            result_two = address(uint160(introducer)).send(money);\r\n            \r\n        } else {\r\n            bool result_three;\r\n            result_three = address(uint160(referrer)).send(money);\r\n        }\r\n\r\n        if(users[referrerFinal].starActive[_star] == false ){\r\n            emit LostMoney(referrerFinal, userList[msg.sender], _star, money, now);\r\n        }\r\n\r\n        emit Payment(userList[msg.sender], userList[referrer], userList[introducer], _star, money, STAR_FEE[_star], now);\r\n\r\n    }\r\n\r\n    function findFreeReferrer(uint _user) public view returns(address) {\r\n\r\n        require(users[_user].isExist, 'User does not exist');\r\n\r\n        if(users[_user].referral.length < REFERRER_1_STAR_LIMIT){\r\n            return users[_user].wallet;\r\n        }\r\n\r\n        address[] memory referrals = new address[](363);\r\n        referrals[0] = users[_user].referral[0]; \r\n        referrals[1] = users[_user].referral[1];\r\n        referrals[2] = users[_user].referral[2];\r\n\r\n        address freeReferrer;\r\n        bool noFreeReferrer = true;\r\n\r\n        for(uint i = 0; i < 363; i++){\r\n            if(users[userList[referrals[i]]].referral.length == REFERRER_1_STAR_LIMIT){\r\n                if(i < 120){\r\n                    referrals[(i+1)*3] = users[userList[referrals[i]]].referral[0];\r\n                    referrals[(i+1)*3+1] = users[userList[referrals[i]]].referral[1];\r\n                    referrals[(i+1)*3+2] = users[userList[referrals[i]]].referral[2];\r\n                }\r\n            } else {\r\n                noFreeReferrer = false;\r\n                freeReferrer = referrals[i];\r\n                break;\r\n            }\r\n        }\r\n        require(!noFreeReferrer, 'Free referrer not found');\r\n        return freeReferrer;\r\n\r\n    }\r\n\r\n    function viewUserReferrals(uint _user) public view returns(address[] memory) {\r\n        return users[_user].referral;\r\n    }\r\n\r\n    function viewUserStarActive(uint _user, uint _star) public view returns(bool) {\r\n        return users[_user].starActive[_star];\r\n    }\r\n\r\n    function bytesToAddress(bytes memory bys) private pure returns (address  addr) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mainAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowSponsorChange\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"isExist\",\"type\":\"bool\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"name\":\"referrerID\",\"type\":\"uint256\"},{\"name\":\"introducerID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userID\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_referrerID\",\"type\":\"uint256\"},{\"name\":\"_introducerID\",\"type\":\"uint256\"},{\"name\":\"_referral1\",\"type\":\"address\"},{\"name\":\"_referral2\",\"type\":\"address\"},{\"name\":\"_referral3\",\"type\":\"address\"}],\"name\":\"setUserData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"STAR_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_star\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setStarFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"uint256\"},{\"name\":\"_star\",\"type\":\"uint256\"}],\"name\":\"viewUserStarActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"STAR_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentUserID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_allowSponsorChange\",\"type\":\"bool\"}],\"name\":\"setAllowSponsorChange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_currentUserID\",\"type\":\"uint256\"}],\"name\":\"setCurrentUserID\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mainAddress\",\"type\":\"address\"}],\"name\":\"setMainAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"uint256\"}],\"name\":\"viewUserReferrals\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_star\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setStarPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"uint256\"}],\"name\":\"findFreeReferrer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_referrer\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_introducer\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Register\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_referrer\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_introducer\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"SponsorChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_star\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_referrer\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_introducer\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_star\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_money\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_fee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Payment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_referrer\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_referral\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_star\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_money\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"LostMoney\",\"type\":\"event\"}]","ContractName":"ETHStvo","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://22185a8602e8347d28596436f396c3e9ee9f333b32f520dff70d930152857012"}]}