{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/lib/interface/IEthPool.sol\r\n\r\npragma solidity ^0.5.1;\r\n\r\n/**\r\n * @title EthPool interface\r\n */\r\ninterface IEthPool {\r\n    function deposit(address _receiver) external payable;\r\n\r\n    function withdraw(uint _value) external;\r\n\r\n    function approve(address _spender, uint _value) external returns (bool);\r\n\r\n    function transferFrom(address _from, address payable _to, uint _value) external returns (bool);\r\n\r\n    function transferToCelerWallet(address _from, address _walletAddr, bytes32 _walletId, uint _value) external returns (bool);\r\n\r\n    function increaseAllowance(address _spender, uint _addedValue) external returns (bool);\r\n\r\n    function decreaseAllowance(address _spender, uint _subtractedValue) external returns (bool);\r\n\r\n    function balanceOf(address _owner) external view returns (uint);\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint);\r\n\r\n    event Deposit(address indexed receiver, uint value);\r\n    \r\n    // transfer from \"from\" account inside EthPool to real \"to\" address outside EthPool\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    \r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n// File: contracts/lib/interface/ICelerWallet.sol\r\n\r\npragma solidity ^0.5.1;\r\n\r\n/**\r\n * @title CelerWallet interface\r\n */\r\ninterface ICelerWallet {\r\n    function create(address[] calldata _owners, address _operator, bytes32 _nonce) external returns(bytes32);\r\n\r\n    function depositETH(bytes32 _walletId) external payable;\r\n\r\n    function depositERC20(bytes32 _walletId, address _tokenAddress, uint _amount) external;\r\n    \r\n    function withdraw(bytes32 _walletId, address _tokenAddress, address _receiver, uint _amount) external;\r\n\r\n    function transferToWallet(bytes32 _fromWalletId, bytes32 _toWalletId, address _tokenAddress, address _receiver, uint _amount) external;\r\n\r\n    function transferOperatorship(bytes32 _walletId, address _newOperator) external;\r\n\r\n    function proposeNewOperator(bytes32 _walletId, address _newOperator) external;\r\n\r\n    function drainToken(address _tokenAddress, address _receiver, uint _amount) external;\r\n\r\n    function getWalletOwners(bytes32 _walletId) external view returns(address[] memory);\r\n\r\n    function getOperator(bytes32 _walletId) external view returns(address);\r\n\r\n    function getBalance(bytes32 _walletId, address _tokenAddress) external view returns(uint);\r\n\r\n    function getProposedNewOperator(bytes32 _walletId) external view returns(address);\r\n\r\n    function getProposalVote(bytes32 _walletId, address _owner) external view returns(bool);\r\n\r\n    event CreateWallet(bytes32 indexed walletId, address[] indexed owners, address indexed operator);\r\n\r\n    event DepositToWallet(bytes32 indexed walletId, address indexed tokenAddress, uint amount);\r\n\r\n    event WithdrawFromWallet(bytes32 indexed walletId, address indexed tokenAddress, address indexed receiver, uint amount);\r\n\r\n    event TransferToWallet(bytes32 indexed fromWalletId, bytes32 indexed toWalletId, address indexed tokenAddress, address receiver, uint amount);\r\n\r\n    event ChangeOperator(bytes32 indexed walletId, address indexed oldOperator, address indexed newOperator);\r\n\r\n    event ProposeNewOperator(bytes32 indexed walletId, address indexed newOperator, address indexed proposer);\r\n\r\n    event DrainToken(address indexed tokenAddress, address indexed receiver, uint amount);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/EthPool.sol\r\n\r\npragma solidity ^0.5.1;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ETH Pool providing an ERC20 like interface\r\n * @notice Implementation of an ERC20 like pool for native ETH.\r\n * @dev Originally based on code of ERC20 by openzeppelin-solidity v2.1.2\r\n *   https://github.com/OpenZeppelin/openzeppelin-solidity/blob/v2.1.2/contracts/token/ERC20/ERC20.sol\r\n */ \r\ncontract EthPool is IEthPool {\r\n    using SafeMath for uint;\r\n\r\n    mapping (address => uint) private balances;\r\n    mapping (address => mapping (address => uint)) private allowed;\r\n    \r\n    // mock ERC20 details to enable etherscan-like tools to monitor EthPool correctly\r\n    string public constant name = \"EthInPool\";\r\n    string public constant symbol = \"EthIP\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    /**\r\n     * @notice Deposit ETH to ETH Pool\r\n     * @param _receiver the address ETH is deposited to \r\n     */\r\n    function deposit(address _receiver) public payable {\r\n        require(_receiver != address(0), \"Receiver address is 0\");\r\n\r\n        balances[_receiver] = balances[_receiver].add(msg.value);\r\n        emit Deposit(_receiver, msg.value);\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw ETH from ETH Pool\r\n     * @param _value the amount of ETH to withdraw\r\n     */\r\n    function withdraw(uint _value) public {\r\n        _transfer(msg.sender, msg.sender, _value);\r\n    }\r\n\r\n    /**\r\n     * @notice Approve the passed address to spend the specified amount of ETH on behalf of msg.sender.\r\n     * @dev Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     *   and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     *   race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     *   https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of ETH to be spent.\r\n     */\r\n    function approve(address _spender, uint _value) public returns (bool) {\r\n        require(_spender != address(0), \"Spender address is 0\");\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer ETH from one address to another.\r\n     * @dev Note that while this function emits an Approval event, this is not required as per the specification.\r\n     * @param _from The address which you want to transfer ETH from\r\n     * @param _to The address which you want to transfer to\r\n     * @param _value the amount of ETH to be transferred\r\n     */\r\n    function transferFrom(address _from, address payable _to, uint _value) public returns (bool) {\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Approval(_from, msg.sender, allowed[_from][msg.sender]);\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer ETH from one address to a wallet in CelerWallet contract.\r\n     * @param _from The address which you want to transfer ETH from\r\n     * @param _walletAddr CelerWallet address which should have a depositETH(bytes32) payable API\r\n     * @param _walletId id of the wallet you want to deposit ETH into\r\n     * @param _value the amount of ETH to be transferred\r\n     */\r\n    function transferToCelerWallet(\r\n        address _from,\r\n        address _walletAddr,\r\n        bytes32 _walletId,\r\n        uint _value\r\n    )\r\n        external\r\n        returns (bool)\r\n    {\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Approval(_from, msg.sender, allowed[_from][msg.sender]);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        emit Transfer(_from, _walletAddr, _value);\r\n\r\n        ICelerWallet wallet = ICelerWallet(_walletAddr);\r\n        wallet.depositETH.value(_value)(_walletId);\r\n        \r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Increase the amount of ETH that an owner allowed to a spender.\r\n     * @dev approve should be called when allowed[msg.sender][spender] == 0. To increment\r\n     *   allowed value is better to use this function to avoid 2 calls (and wait until\r\n     *   the first transaction is mined)\r\n     *   From MonolithDAO Token.sol\r\n     *   Emits an Approval event.\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of ETH to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address _spender, uint _addedValue) public returns (bool) {\r\n        require(_spender != address(0), \"Spender address is 0\");\r\n\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Decrease the amount of ETH that an owner allowed to a spender.\r\n     * @dev approve should be called when allowed[msg.sender][spender] == 0. To decrement\r\n     *   allowed value is better to use this function to avoid 2 calls (and wait until\r\n     *   the first transaction is mined)\r\n     *   From MonolithDAO Token.sol\r\n     *   Emits an Approval event.\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of ETH to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address _spender, uint _subtractedValue) public returns (bool) {\r\n        require(_spender != address(0), \"Spender address is 0\");\r\n\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].sub(_subtractedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the balance of the specified address.\r\n     * @param _owner The address to query the balance of.\r\n     * @return An uint representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address _owner) public view returns (uint) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n     * @notice Function to check the amount of ETH that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint specifying the amount of ETH still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer ETH for a specified addresses\r\n     * @param _from The address to transfer from.\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */\r\n    function _transfer(address _from, address payable _to, uint _value) internal {\r\n        require(_to != address(0), \"To address is 0\");\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        _to.transfer(_value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_walletAddr\",\"type\":\"address\"},{\"name\":\"_walletId\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferToCelerWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"EthPool","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"byzantium","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://e51338a3c6ac672fc2d366d593d9a46aebef69c804363974cd743a137e9b05e0"}]}