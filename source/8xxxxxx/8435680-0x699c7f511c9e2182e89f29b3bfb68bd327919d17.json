{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @ensdomains/ens/contracts/ENS.sol\r\n\r\npragma solidity >=0.4.24;\r\n\r\ninterface ENS {\r\n\r\n    // Logged when the owner of a node assigns a new owner to a subnode.\r\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\r\n\r\n    // Logged when the owner of a node transfers ownership to a new account.\r\n    event Transfer(bytes32 indexed node, address owner);\r\n\r\n    // Logged when the resolver for a node changes.\r\n    event NewResolver(bytes32 indexed node, address resolver);\r\n\r\n    // Logged when the TTL of a node changes\r\n    event NewTTL(bytes32 indexed node, uint64 ttl);\r\n\r\n\r\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external;\r\n    function setResolver(bytes32 node, address resolver) external;\r\n    function setOwner(bytes32 node, address owner) external;\r\n    function setTTL(bytes32 node, uint64 ttl) external;\r\n    function owner(bytes32 node) external view returns (address);\r\n    function resolver(bytes32 node) external view returns (address);\r\n    function ttl(bytes32 node) external view returns (uint64);\r\n\r\n}\r\n\r\n// File: @ensdomains/ens/contracts/Deed.sol\r\n\r\npragma solidity >=0.4.24;\r\n\r\ninterface Deed {\r\n\r\n    function setOwner(address payable newOwner) external;\r\n    function setRegistrar(address newRegistrar) external;\r\n    function setBalance(uint newValue, bool throwOnFailure) external;\r\n    function closeDeed(uint refundRatio) external;\r\n    function destroyDeed() external;\r\n\r\n    function owner() external view returns (address);\r\n    function previousOwner() external view returns (address);\r\n    function value() external view returns (uint);\r\n    function creationDate() external view returns (uint);\r\n\r\n}\r\n\r\n// File: @ensdomains/ens/contracts/Registrar.sol\r\n\r\npragma solidity >=0.4.24;\r\n\r\n\r\ninterface Registrar {\r\n\r\n    enum Mode { Open, Auction, Owned, Forbidden, Reveal, NotYetAvailable }\r\n\r\n    event AuctionStarted(bytes32 indexed hash, uint registrationDate);\r\n    event NewBid(bytes32 indexed hash, address indexed bidder, uint deposit);\r\n    event BidRevealed(bytes32 indexed hash, address indexed owner, uint value, uint8 status);\r\n    event HashRegistered(bytes32 indexed hash, address indexed owner, uint value, uint registrationDate);\r\n    event HashReleased(bytes32 indexed hash, uint value);\r\n    event HashInvalidated(bytes32 indexed hash, string indexed name, uint value, uint registrationDate);\r\n\r\n    function state(bytes32 _hash) external view returns (Mode);\r\n    function startAuction(bytes32 _hash) external;\r\n    function startAuctions(bytes32[] calldata _hashes) external;\r\n    function newBid(bytes32 sealedBid) external payable;\r\n    function startAuctionsAndBid(bytes32[] calldata hashes, bytes32 sealedBid) external payable;\r\n    function unsealBid(bytes32 _hash, uint _value, bytes32 _salt) external;\r\n    function cancelBid(address bidder, bytes32 seal) external;\r\n    function finalizeAuction(bytes32 _hash) external;\r\n    function transfer(bytes32 _hash, address payable newOwner) external;\r\n    function releaseDeed(bytes32 _hash) external;\r\n    function invalidateName(string calldata unhashedName) external;\r\n    function eraseNode(bytes32[] calldata labels) external;\r\n    function transferRegistrars(bytes32 _hash) external;\r\n    function acceptRegistrarTransfer(bytes32 hash, Deed deed, uint registrationDate) external;\r\n    function entries(bytes32 _hash) external view returns (Mode, address, uint, uint, uint);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/introspection/IERC165.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title IERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @notice Query if a contract implements an interface\r\n     * @param interfaceId The interface identifier, as specified in ERC-165\r\n     * @dev Interface identification is specified in ERC-165. This function\r\n     * uses less than 30,000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/IERC721.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic interface\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract IERC721 is IERC165 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    function balanceOf(address owner) public view returns (uint256 balance);\r\n    function ownerOf(uint256 tokenId) public view returns (address owner);\r\n\r\n    function approve(address to, uint256 tokenId) public;\r\n    function getApproved(uint256 tokenId) public view returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) public;\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId) public;\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\r\n}\r\n\r\n// File: contracts/BaseRegistrar.sol\r\n\r\npragma solidity >=0.4.24;\r\n\r\n\r\n\r\n\r\n\r\ncontract BaseRegistrar is IERC721, Ownable {\r\n    uint constant public GRACE_PERIOD = 90 days;\r\n\r\n    event ControllerAdded(address indexed controller);\r\n    event ControllerRemoved(address indexed controller);\r\n    event NameMigrated(uint256 indexed id, address indexed owner, uint expires);\r\n    event NameRegistered(uint256 indexed id, address indexed owner, uint expires);\r\n    event NameRenewed(uint256 indexed id, uint expires);\r\n\r\n    // Expiration timestamp for migrated domains.\r\n    uint public transferPeriodEnds;\r\n\r\n    // The ENS registry\r\n    ENS public ens;\r\n\r\n    // The namehash of the TLD this registrar owns (eg, .eth)\r\n    bytes32 public baseNode;\r\n\r\n    // The interim registrar\r\n    Registrar public previousRegistrar;\r\n\r\n    // A map of addresses that are authorised to register and renew names.\r\n    mapping(address=>bool) public controllers;\r\n\r\n    // Authorises a controller, who can register and renew domains.\r\n    function addController(address controller) external;\r\n\r\n    // Revoke controller permission for an address.\r\n    function removeController(address controller) external;\r\n\r\n    // Set the resolver for the TLD this registrar manages.\r\n    function setResolver(address resolver) external;\r\n\r\n    // Returns the expiration timestamp of the specified label hash.\r\n    function nameExpires(uint256 id) external view returns(uint);\r\n\r\n    // Returns true iff the specified name is available for registration.\r\n    function available(uint256 id) public view returns(bool);\r\n\r\n    /**\r\n     * @dev Register a name.\r\n     */\r\n    function register(uint256 id, address owner, uint duration) external returns(uint);\r\n\r\n    function renew(uint256 id, uint duration) external returns(uint);\r\n\r\n    /**\r\n     * @dev Reclaim ownership of a name in ENS, if you own it in the registrar.\r\n     */\r\n    function reclaim(uint256 id, address owner) external;\r\n\r\n    /**\r\n     * @dev Transfers a registration from the initial registrar.\r\n     * This function is called by the initial registrar when a user calls `transferRegistrars`.\r\n     */\r\n    function acceptRegistrarTransfer(bytes32 label, Deed deed, uint) external;\r\n}\r\n\r\n// File: contracts/StringUtils.sol\r\n\r\npragma solidity >=0.4.24;\r\n\r\nlibrary StringUtils {\r\n    /**\r\n     * @dev Returns the length of a given string\r\n     *\r\n     * @param s The string to measure the length of\r\n     * @return The length of the input string\r\n     */\r\n    function strlen(string memory s) internal pure returns (uint) {\r\n        uint len;\r\n        uint i = 0;\r\n        uint bytelength = bytes(s).length;\r\n        for(len = 0; i < bytelength; len++) {\r\n            byte b = bytes(s)[i];\r\n            if(b < 0x80) {\r\n                i += 1;\r\n            } else if (b < 0xE0) {\r\n                i += 2;\r\n            } else if (b < 0xF0) {\r\n                i += 3;\r\n            } else if (b < 0xF8) {\r\n                i += 4;\r\n            } else if (b < 0xFC) {\r\n                i += 5;\r\n            } else {\r\n                i += 6;\r\n            }\r\n        }\r\n        return len;\r\n    }\r\n}\r\n\r\n// File: contracts/ShortNameAuctionController.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ninterface ProxyRegistry {\r\n    function proxies(address owner) external view returns(address);\r\n}\r\n\r\ncontract ShortNameAuctionController is Ownable {\r\n    using StringUtils for *;\r\n\r\n    uint constant public REGISTRATION_PERIOD = 31536000;\r\n\r\n    event NameRegistered(string name, address owner);\r\n\r\n    BaseRegistrar public base;\r\n    ProxyRegistry public proxies;\r\n    address public opensea;\r\n\r\n    modifier onlyOpensea {\r\n        require(msg.sender == opensea || msg.sender == proxies.proxies(opensea));\r\n        _;\r\n    }\r\n\r\n    constructor(BaseRegistrar _base, ProxyRegistry _proxies, address _opensea) public {\r\n        base = _base;\r\n        proxies = _proxies;\r\n        opensea = _opensea;\r\n    }\r\n\r\n    function valid(string memory name) public view returns(bool) {\r\n        uint len = name.strlen();\r\n        return len >= 3 && len <= 6;\r\n    }\r\n\r\n    function available(string memory name) public view returns(bool) {\r\n        return valid(name) && base.available(getTokenId(name));\r\n    }\r\n\r\n    function register(string calldata name, address owner) external onlyOpensea {\r\n        require(available(name));\r\n        base.register(getTokenId(name), owner, REGISTRATION_PERIOD);\r\n        emit NameRegistered(name, owner);\r\n    }\r\n\r\n    function setOpensea(address _opensea) external onlyOwner {\r\n        opensea = _opensea;\r\n    }\r\n\r\n    function getTokenId(string memory name) internal pure returns(uint256) {\r\n        return uint256(keccak256(bytes(name)));\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"base\",\"outputs\":[{\"internalType\":\"contract BaseRegistrar\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"opensea\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"valid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"available\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_opensea\",\"type\":\"address\"}],\"name\":\"setOpensea\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxies\",\"outputs\":[{\"internalType\":\"contract ProxyRegistry\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REGISTRATION_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract BaseRegistrar\",\"name\":\"_base\",\"type\":\"address\"},{\"internalType\":\"contract ProxyRegistry\",\"name\":\"_proxies\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_opensea\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NameRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ShortNameAuctionController","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000fac7bea255a6990f749363002136af6556b31e04000000000000000000000000a5409ec958c83c3f309868babaca7c86dcb077c10000000000000000000000000904dac3347ea47d208f3fd67402d039a3b99859","Library":"","SwarmSource":"bzzr://667b0bc2a0809f2d1d6ac9b689f81183a486543cf758ba23d24fa5d8829d7cc5"}]}