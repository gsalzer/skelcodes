{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.11;   /*\r\n\r\n\r\n    \r\n    ___________________________________________________________________\r\n      _      _                                        ______           \r\n      |  |  /          /                                /              \r\n    --|-/|-/-----__---/----__----__---_--_----__-------/-------__------\r\n      |/ |/    /___) /   /   ' /   ) / /  ) /___)     /      /   )     \r\n    __/__|____(___ _/___(___ _(___/_/_/__/_(___ _____/______(___/__o_o_\r\n    \r\n\r\n\r\n    \r\n      ██╗  ██╗██╗   ██╗██████╗ ███████╗██████╗ ███████╗████████╗██╗  ██╗\r\n      ██║  ██║╚██╗ ██╔╝██╔══██╗██╔════╝██╔══██╗██╔════╝╚══██╔══╝██║  ██║\r\n      ███████║ ╚████╔╝ ██████╔╝█████╗  ██████╔╝█████╗     ██║   ███████║\r\n      ██╔══██║  ╚██╔╝  ██╔═══╝ ██╔══╝  ██╔══██╗██╔══╝     ██║   ██╔══██║\r\n      ██║  ██║   ██║   ██║     ███████╗██║  ██║███████╗   ██║   ██║  ██║\r\n      ╚═╝  ╚═╝   ╚═╝   ╚═╝     ╚══════╝╚═╝  ╚═╝╚══════╝   ╚═╝   ╚═╝  ╚═╝\r\n                                                                      \r\n    \r\n\r\n----------------------------------------------------------------------------------------------------\r\n\r\n=== MAIN FEATURES ===\r\n    => Higher degree of control by owner - safeGuard functionality\r\n    => SafeMath implementation \r\n    => Standared ERC20\r\n    => Deflationary feature\r\n    => Air Drop\r\n    => Account Freezing\r\n    => Global safeGuard\r\n    => Token freeze / unfreeze for the dividend.\r\n    => Unfreeze anytime.. no unfreeze cooldown time\r\n\r\n\r\n------------------------------------------------------------------------------------------------------\r\n Copyright (c) 2019 onwards HyperETH Inc. ( https://hypereth.net )\r\n Contract designed with ❤ by EtherAuthority  ( https://EtherAuthority.io )\r\n------------------------------------------------------------------------------------------------------\r\n*/\r\n\r\n\r\n\r\n\r\n/* Safemath library */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n//**************************************************************************//\r\n//-------------------    DIVIDEND CONTRACT INTERFACE    --------------------//\r\n//**************************************************************************//\r\n\r\ninterface InterfaceDividend {\r\n    function withdrawDividendsEverything() external returns(bool);\r\n}\r\n\r\n\r\n\r\n\r\n//*******************************************************************//\r\n//------------------ Contract to Manage Ownership -------------------//\r\n//*******************************************************************//\r\n\r\ncontract ownerShip    // Auction Contract Owner and OwherShip change\r\n{\r\n    //Global storage declaration\r\n    address payable public owner;\r\n\r\n    address payable public newOwner;\r\n\r\n    bool public safeGuard ; // To hault all non owner functions in case of imergency\r\n    \r\n    /* Records for the fronzen accounts */\r\n    mapping (address => bool) public frozenAccount;\r\n\r\n    //Event defined for ownership transfered\r\n    event OwnershipTransferredEv(uint256 timeOfEv, address payable indexed previousOwner, address payable indexed newOwner);\r\n\r\n\r\n    //Sets owner only on first run\r\n    constructor() public \r\n    {\r\n        //Set contract owner\r\n        owner = msg.sender;\r\n    }\r\n\r\n    //This will restrict function only for owner where attached\r\n    modifier onlyOwner() \r\n    {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    function transferOwnership(address payable _newOwner) public onlyOwner \r\n    {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n\r\n    //the reason for this flow is to protect owners from sending ownership to unintended address due to human error\r\n    function acceptOwnership() public \r\n    {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferredEv(now, owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n\r\n\r\n    // Changing safe guard status to true by admin will stop all public functions to stop working \r\n    function changesafeGuardStatus() onlyOwner public\r\n    {\r\n        if (safeGuard == false)\r\n        {\r\n            safeGuard = true;\r\n        }\r\n        else\r\n        {\r\n            safeGuard = false;    \r\n        }\r\n    }\r\n\r\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\r\n    /// @param target Address to be frozen\r\n    /// @param freeze either to freeze it or not\r\n    event FrozenAccounts(uint256 timeOfEv, address target, bool freeze);\r\n    function freezeAccount(address target, bool freeze) onlyOwner public \r\n    {\r\n        frozenAccount[target] = freeze;\r\n        emit  FrozenAccounts(now, target, freeze);\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n//********************************************************************************//\r\n//---------------------    HRX TOKEN CONTRACT STARTS HERE    ---------------------//\r\n//********************************************************************************//\r\n\r\ncontract HRX is ownerShip {\r\n  \r\n    using SafeMath for uint256;       \r\n    string constant public name=\"HYPERETH\";\r\n    string constant public symbol=\"HRX\";\r\n    uint256 constant public decimals=18;\r\n    uint256 public totalSupply = 25000000 * ( 10 ** decimals);\r\n    uint256 public minTotalSupply = 1000000 * ( 10 ** decimals);\r\n    uint256 public _burnPercent = 6;  // 6 = 0.06%, 123 = 1.23%\r\n    uint256 public frozenTokenGlobal;\r\n    address public dividendContractAdderess;\r\n\r\n\r\n    // This creates an array with all balances\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    mapping (address => uint256) public usersTokenFrozen;\r\n\r\n\r\n  \r\n    \r\n    \r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed approvedBy, address indexed spender, uint256 value);\r\n    \r\n    //user frozen tokens\r\n    event TokenFrozen(address indexed user, uint256 indexed tokenAmount);\r\n    //user un frozen tokens\r\n    event TokenUnFrozen(address indexed user, uint256 indexed tokenAmount);\r\n\r\n  \r\n    /**\r\n     * Constructor function just assigns initial supply to Owner\r\n     */\r\n    constructor() public\r\n    {\r\n        //sending all the tokens to Owner\r\n        balanceOf[owner] = totalSupply;\r\n        // emit Transfer event\r\n        emit Transfer(address(0), owner, totalSupply);\r\n\r\n    }\r\n    \r\n    /**\r\n    * Fallback function. It just accepts incoming TRX\r\n    */\r\n    function () payable external {}\r\n    \r\n    /*======================================\r\n    =       STANDARD ERC20 FUNCTIONS       =\r\n    ======================================*/\r\n\r\n    /* Internal transfer, only can be called by this contract */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        \r\n        //checking conditions\r\n        require(!safeGuard);\r\n        require(!frozenAccount[_from]);                     // Check if sender is frozen\r\n        require(!frozenAccount[_to]);                       // Check if recipient is frozen\r\n        \r\n        // overflow and undeflow checked by SafeMath Library\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the sender\r\n        balanceOf[_to] = balanceOf[_to].add(_value);        // Add the same to the recipient\r\n        \r\n        // emit Transfer event\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n        * Transfer tokens\r\n        *\r\n        * Send `_value` tokens to `_to` from your account\r\n        *\r\n        * @param _to The address of the recipient\r\n        * @param _value the amount to send\r\n        */\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        \r\n        uint256 tokensToBurn = calculatePercentage(_value,_burnPercent);\r\n\r\n        //no need to check for input validations, as that is ruled by SafeMath\r\n        _transfer(msg.sender, _to, _value);\r\n        \r\n        //deflation burn\r\n        _burn(_to, tokensToBurn);\r\n        \r\n        return true;\r\n    }\r\n\r\n    /**\r\n        * Transfer tokens from other address\r\n        *\r\n        * Send `_value` tokens to `_to` in behalf of `_from`\r\n        *\r\n        * @param _from The address of the sender\r\n        * @param _to The address of the recipient\r\n        * @param _value the amount to send\r\n        */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        \r\n        uint256 tokensToBurn = calculatePercentage(_value,_burnPercent);\r\n        \r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n        _transfer(_from, _to, _value);\r\n        \r\n        //deflation burn\r\n        _burn(_to, tokensToBurn);\r\n        \r\n        return true;\r\n    }\r\n\r\n    /**\r\n        * Set allowance for other address\r\n        *\r\n        * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n        *\r\n        * @param _spender The address authorized to spend\r\n        * @param _value the max amount they can spend\r\n        */\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        \r\n        address user = msg.sender;  //local variable is gas cheaper than reading from storate multiple time\r\n\r\n        require(!safeGuard, 'safeGuard is on');\r\n        require(!frozenAccount[user]);                     // Check if sender is frozen\r\n        require(!frozenAccount[_spender]);                       // Check if recipient is frozen\r\n        require(_value <= balanceOf[user], 'Not enough balance');\r\n        \r\n        allowance[user][_spender] = _value;\r\n        emit Approval(user, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    \r\n    /*======================================\r\n    =          DIVIDEND FUNCTIONS          =\r\n    ======================================*/\r\n    \r\n    /**\r\n        Function to freeze the tokens \r\n    */\r\n    function freezeTokens(uint256 _value) public returns(bool){\r\n\r\n        address callingUser = msg.sender;\r\n        address contractAddress = address(this);\r\n\r\n        //LOGIC TO WITHDRAW ANY OUTSTANDING MAIN DIVIDENDS\r\n        //we want this current call to complete if we return true from withdrawDividendsEverything, otherwise revert.\r\n        require(InterfaceDividend(dividendContractAdderess).withdrawDividendsEverything(), 'Outstanding div withdraw failed');\r\n        \r\n\r\n        //to freeze token, we just take token from his account and transfer to contract address, \r\n        //and track that with usersTokenFrozen mapping variable\r\n        // overflow and undeflow checked by SafeMath Library\r\n        _transfer(callingUser, contractAddress, _value);\r\n\r\n\r\n        //There is no integer underflow possibilities, as user must have that token _value, which checked in above _transfer function.\r\n        frozenTokenGlobal += _value;\r\n        usersTokenFrozen[callingUser] += _value;\r\n\r\n\r\n        // emit events\r\n        emit TokenFrozen(callingUser, _value);\r\n        \r\n        \r\n        return true;\r\n    }\r\n\r\n    function unfreezeTokens() public returns(bool){\r\n\r\n        address callingUser = msg.sender;\r\n\r\n        //LOGIC TO WITHDRAW ANY OUTSTANDING MAIN DIVIDENDS, ALL TOKENS AND TRX\r\n        //It will not update dividend tracker, just withdraw them. when user will freeze tokens again, then automatically those trackers will be updated\r\n        require(InterfaceDividend(dividendContractAdderess).withdrawDividendsEverything(), 'Outstanding div withdraw failed');\r\n        \r\n \r\n        uint256 _value = usersTokenFrozen[callingUser];\r\n\r\n        require(_value > 0 , 'Insufficient Frozen Tokens');\r\n        \r\n        //update variables\r\n        usersTokenFrozen[callingUser] = 0; \r\n        frozenTokenGlobal -= _value;\r\n        \r\n        //transfer the tokens back to users\r\n        _transfer(address(this), callingUser, _value);\r\n\r\n        //emit event\r\n        emit TokenUnFrozen(callingUser, _value);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    \r\n    \r\n\r\n    /*======================================\r\n    =             HELPER FUNCTIONS         =\r\n    ======================================*/\r\n    \r\n    \r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n    \r\n        uint256 newAmount = allowance[msg.sender][spender].add(addedValue);\r\n        approve(spender, newAmount);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n    \r\n        uint256 newAmount = allowance[msg.sender][spender].sub(subtractedValue);\r\n        approve(spender, newAmount);\r\n        \r\n        return true;\r\n    }\r\n\r\n\r\n    //Calculate percent and return result\r\n    function calculatePercentage(uint256 PercentOf, uint256 percentTo ) internal pure returns (uint256) \r\n    {\r\n        uint256 factor = 10000;\r\n        require(percentTo <= factor);\r\n        uint256 c = PercentOf.mul(percentTo).div(factor);\r\n        return c;\r\n    }\r\n\r\n    \r\n    function setBurningRate(uint burnPercent) onlyOwner public returns(bool success)\r\n    {\r\n        _burnPercent = burnPercent;\r\n        return true;\r\n    }\r\n    \r\n    function updateMinimumTotalSupply(uint minimumTotalSupplyWEI) onlyOwner public returns(bool success)\r\n    {\r\n        minTotalSupply = minimumTotalSupplyWEI;\r\n        return true;\r\n    }\r\n    \r\n    \r\n    \r\n    function _burn(address account, uint256 amount) internal returns(bool) {\r\n    \r\n        if(totalSupply > minTotalSupply)\r\n        {\r\n          totalSupply = totalSupply.sub(amount);\r\n          balanceOf[account] = balanceOf[account].sub(amount);\r\n          emit Transfer(account, address(0), amount);\r\n          return true;\r\n        }\r\n        //return false; bydefault returns false\r\n    }\r\n\r\n    function manualWithdrawTokens(uint256 tokenAmount) public onlyOwner returns(string memory){\r\n        // no need for overflow checking as that will be done in transfer function\r\n        _transfer(address(this), owner, tokenAmount);\r\n        return \"Tokens withdrawn to owner wallet\";\r\n    }\r\n\r\n\r\n    function manualWithdrawEther(uint256 amount) public onlyOwner returns(string memory){\r\n        owner.transfer(amount);\r\n        return \"Ether withdrawn to owner wallet\";\r\n    }\r\n\r\n    function updateDividendContractAddress(address dividendContract) public onlyOwner returns(string memory){\r\n        dividendContractAdderess = dividendContract;\r\n        return \"dividend conract address updated successfully\";\r\n    }\r\n\r\n    //To air drop\r\n    function airDrop(address[] memory recipients,uint[] memory tokenAmount) public onlyOwner returns (bool) {\r\n        uint reciversLength  = recipients.length;\r\n        require(reciversLength <= 150);\r\n        for(uint i = 0; i < reciversLength; i++)\r\n        {\r\n            if (gasleft() < 100000)\r\n            {\r\n                break;\r\n            }\r\n              //This will loop through all the recipients and send them the specified tokens\r\n              _transfer(owner, recipients[i], tokenAmount[i]);\r\n        }\r\n        return true;\r\n    }\r\n        \r\n         \r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_burnPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"frozenTokenGlobal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendContractAdderess\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"dividendContract\",\"type\":\"address\"}],\"name\":\"updateDividendContractAddress\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usersTokenFrozen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenAmount\",\"type\":\"uint256[]\"}],\"name\":\"airDrop\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"safeGuard\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"freezeTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"changesafeGuardStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"manualWithdrawEther\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"burnPercent\",\"type\":\"uint256\"}],\"name\":\"setBurningRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumTotalSupplyWEI\",\"type\":\"uint256\"}],\"name\":\"updateMinimumTotalSupply\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"manualWithdrawTokens\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unfreezeTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approvedBy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"TokenFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"TokenUnFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeOfEv\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address payable\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferredEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeOfEv\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"FrozenAccounts\",\"type\":\"event\"}]","ContractName":"HRX","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://fb83a9c31b0d6b094099c46f117d6af5201a2003ef351fe26c4afc84c140e40a"}]}