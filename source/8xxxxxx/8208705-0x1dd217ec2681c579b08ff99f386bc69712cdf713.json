{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\ncontract Lottery {\r\n\r\n    event LotteryTicketPurchased(address indexed _purchaser, uint256 _ticketID);\r\n    event LotteryAmountPaid(address indexed _winner, uint64 _ticketID, uint256 _amount);\r\n    event LotteryTicketPurchased2(address indexed _purchaser2, uint256 _ticketID2);\r\n    event LotteryAmountPaid2(address indexed _winner2, uint64 _ticketID2, uint256 _amount2);\r\n    event LotteryTicketPurchased3(address indexed _purchaser3, uint256 _ticketID3);\r\n    event LotteryAmountPaid3(address indexed _winner3, uint64 _ticketID3, uint256 _amount3);\r\n\r\n    // Note: prone to change\r\n    uint64 public ticketPrice = 0.1 ether;\r\n    uint64 public ticketMax = 5;\r\n    uint64 public ticketPrice2 = 1 ether;\r\n    uint64 public ticketMax2 = 5;\r\n    uint64 public ticketPrice3 = 2 ether;\r\n    uint64 public ticketMax3 = 5;\r\n    address owner;\r\n    // Initialize mapping\r\n    address[6] public ticketMapping;\r\n    uint256 public ticketsBought = 0;\r\n    address[6] public ticketMapping2;\r\n    uint256 public ticketsBought2 = 0;\r\n    address[6] public ticketMapping3;\r\n    uint256 public ticketsBought3 = 0;\r\n    address public fee = 0xd44f59581056EaF5d601edD1244Ff4AA55516666;\r\n    \r\n    // Prevent potential locked funds by checking greater than\r\n  \r\n    modifier allTicketsSold() {\r\n      require(ticketsBought >= ticketMax);\r\n      _;\r\n    }\r\n    modifier allTicketsSold2() {\r\n      require(ticketsBought2 >= ticketMax2);\r\n      _;\r\n    }\r\n    modifier allTicketsSold3() {\r\n      require(ticketsBought3 >= ticketMax3);\r\n      _;\r\n    }\r\n    constructor() public{\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /* @dev Tickets may only be purchased through the buyTickets function */\r\n    function() payable public{\r\n      revert();\r\n    }\r\n\r\n    /**\r\n      * @dev Purchase ticket and send reward if necessary\r\n      * @param _ticket Ticket number to purchase\r\n      * @return bool Validity of transaction\r\n      */\r\n    function buyTicket(uint16 _ticket) payable public returns (bool) {\r\n      require(msg.value == ticketPrice);\r\n      require(_ticket > 0 && _ticket < ticketMax + 1);\r\n      require(ticketMapping[_ticket] == address(0));\r\n      require(ticketsBought < ticketMax);\r\n\r\n      // Avoid reentrancy attacks\r\n      address purchaser = msg.sender;\r\n      ticketsBought += 1;\r\n      ticketMapping[_ticket] = purchaser;\r\n      fee.transfer(0.01 ether);\r\n      emit LotteryTicketPurchased(purchaser, _ticket);\r\n\r\n      /** Placing the \"burden\" of sendReward() on the last ticket\r\n        * buyer is okay, because the refund from destroying the\r\n        * arrays decreases net gas cost\r\n        */\r\n      if (ticketsBought>=ticketMax) {\r\n        sendReward();\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    function buyTicket2(uint16 _ticket2) payable public returns (bool) {\r\n      require(msg.value == ticketPrice2);\r\n      require(_ticket2 > 0 && _ticket2 < ticketMax2 + 1);\r\n      require(ticketMapping2[_ticket2] == address(0));\r\n      require(ticketsBought2 < ticketMax2);\r\n\r\n      // Avoid reentrancy attacks\r\n      address purchaser2 = msg.sender;\r\n      ticketsBought2 += 1;\r\n      ticketMapping2[_ticket2] = purchaser2;\r\n      fee.transfer(0.1 ether);\r\n      emit LotteryTicketPurchased2(purchaser2, _ticket2);\r\n\r\n      /** Placing the \"burden\" of sendReward() on the last ticket\r\n        * buyer is okay, because the refund from destroying the\r\n        * arrays decreases net gas cost\r\n        */\r\n      if (ticketsBought2>=ticketMax2) {\r\n        sendReward2();\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\nfunction buyTicket3(uint16 _ticket3) payable public returns (bool) {\r\n      require(msg.value == ticketPrice3);\r\n      require(_ticket3 > 0 && _ticket3 < ticketMax3 + 1);\r\n      require(ticketMapping3[_ticket3] == address(0));\r\n      require(ticketsBought3 < ticketMax3);\r\n\r\n      // Avoid reentrancy attacks\r\n      address purchaser3 = msg.sender;\r\n      ticketsBought3 += 1;\r\n      ticketMapping3[_ticket3] = purchaser3;\r\n      fee.transfer(0.2 ether);\r\n      emit LotteryTicketPurchased3(purchaser3, _ticket3);\r\n\r\n      /** Placing the \"burden\" of sendReward() on the last ticket\r\n        * buyer is okay, because the refund from destroying the\r\n        * arrays decreases net gas cost\r\n        */\r\n      if (ticketsBought3>=ticketMax3) {\r\n        sendReward3();\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    /**\r\n      * @dev Send lottery winner their reward\r\n      * @return address of winner\r\n      */\r\n    function sendReward() public allTicketsSold returns (address) {\r\n      uint64 winningNumber = lotteryPicker();\r\n      address winner = ticketMapping[winningNumber];\r\n      uint256 totalAmount = ticketMax * ticketPrice;\r\n\r\n      // Prevent locked funds by sending to bad address\r\n      require(winner != address(0));\r\n\r\n      // Prevent reentrancy\r\n      reset();\r\n      winner.transfer(0.45 ether);\r\n      emit LotteryAmountPaid(winner, winningNumber, totalAmount);\r\n      return winner;\r\n    }\r\n\r\n    function sendReward2() public allTicketsSold2 returns (address) {\r\n      uint64 winningNumber2 = lotteryPicker2();\r\n      address winner2 = ticketMapping2[winningNumber2];\r\n      uint256 totalAmount2 = ticketMax2 * ticketPrice2;\r\n\r\n      // Prevent locked funds by sending to bad address\r\n      require(winner2 != address(0));\r\n\r\n      // Prevent reentrancy\r\n      reset2();\r\n      winner2.transfer(4.5 ether);\r\n      emit LotteryAmountPaid2(winner2, winningNumber2, totalAmount2);\r\n      return winner2;\r\n    }\r\n\r\n    function sendReward3() public allTicketsSold3 returns (address) {\r\n      uint64 winningNumber3 = lotteryPicker3();\r\n      address winner3 = ticketMapping3[winningNumber3];\r\n      uint256 totalAmount3 = ticketMax3 * ticketPrice3;\r\n\r\n      // Prevent locked funds by sending to bad address\r\n      require(winner3 != address(0));\r\n\r\n      // Prevent reentrancy\r\n      reset3();\r\n      winner3.transfer(9 ether);\r\n      emit LotteryAmountPaid3(winner3, winningNumber3, totalAmount3);\r\n      return winner3;\r\n    }\r\n\r\n    /* @return a random number based off of current block information */\r\n    function lotteryPicker() public view allTicketsSold returns (uint64) {\r\n      bytes memory entropy = abi.encodePacked(block.timestamp, block.number);\r\n      bytes32 hash = sha256(entropy);\r\n      return uint64(hash) % ticketMax;\r\n    }\r\n\r\n    function lotteryPicker2() public view allTicketsSold2 returns (uint64) {\r\n      bytes memory entropy2 = abi.encodePacked(block.timestamp, block.number);\r\n      bytes32 hash = sha256(entropy2);\r\n      return uint64(hash) % ticketMax2;\r\n    }\r\n\r\n    function lotteryPicker3() public view allTicketsSold3 returns (uint64) {\r\n      bytes memory entropy3 = abi.encodePacked(block.timestamp, block.number);\r\n      bytes32 hash = sha256(entropy3);\r\n      return uint64(hash) % ticketMax3;\r\n    }\r\n\r\n    /* @dev Reset lottery mapping once a round is finished */\r\n    function reset() private allTicketsSold returns (bool) {\r\n      ticketsBought = 0;\r\n      for(uint x = 0; x < ticketMax+1; x++) {\r\n        delete ticketMapping[x];\r\n      }\r\n      return true;\r\n    }\r\n\r\n    function reset2() private allTicketsSold2 returns (bool) {\r\n      ticketsBought2 = 0;\r\n      for(uint x = 0; x < ticketMax2+1; x++) {\r\n        delete ticketMapping2[x];\r\n      }\r\n      return true;\r\n    }\r\n\r\n    function reset3() private allTicketsSold3 returns (bool) {\r\n      ticketsBought3 = 0;\r\n      for(uint x = 0; x < ticketMax3+1; x++) {\r\n        delete ticketMapping3[x];\r\n      }\r\n      return true;\r\n    }\r\n    \r\n    function restart() public returns (bool){\r\n        require (msg.sender == owner);\r\n        ticketsBought = 0;\r\n      for(uint x = 0; x < ticketMax+1; x++) {\r\n        delete ticketMapping[x];\r\n      }\r\n      return true;\r\n    }\r\n\r\n    function restart2() public returns (bool){\r\n        require (msg.sender == owner);\r\n        ticketsBought2 = 0;\r\n      for(uint x = 0; x < ticketMax2+1; x++) {\r\n        delete ticketMapping2[x];\r\n      }\r\n      return true;\r\n    }\r\n\r\n    function restart3() public returns (bool){\r\n        require (msg.sender == owner);\r\n        ticketsBought3 = 0;\r\n      for(uint x = 0; x < ticketMax3+1; x++) {\r\n        delete ticketMapping3[x];\r\n      }\r\n      return true;\r\n    }\r\n    /** @dev Returns ticket map array for front-end access.\r\n      * Using a getter method is ineffective since it allows\r\n      * only element-level access\r\n      */\r\n    function getTicketsPurchased() public view returns(address[6]) {\r\n      return ticketMapping;\r\n    }\r\n\r\n    function getTicketsPurchased2() public view returns(address[6]) {\r\n      return ticketMapping2;\r\n    }\r\n\r\n    function getTicketsPurchased3() public view returns(address[6]) {\r\n      return ticketMapping3;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getTicketsPurchased3\",\"outputs\":[{\"name\":\"\",\"type\":\"address[6]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lotteryPicker\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lotteryPicker3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"restart\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendReward3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendReward2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ticket\",\"type\":\"uint16\"}],\"name\":\"buyTicket\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ticketsBought2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ticketPrice3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ticket2\",\"type\":\"uint16\"}],\"name\":\"buyTicket2\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTicketsPurchased\",\"outputs\":[{\"name\":\"\",\"type\":\"address[6]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ticketMapping\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"restart2\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ticketMax3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ticketMapping2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lotteryPicker2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ticketPrice2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ticketsBought3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ticketsBought\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ticketMapping3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"restart3\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ticketMax2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTicketsPurchased2\",\"outputs\":[{\"name\":\"\",\"type\":\"address[6]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ticketMax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ticket3\",\"type\":\"uint16\"}],\"name\":\"buyTicket3\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_ticketID\",\"type\":\"uint256\"}],\"name\":\"LotteryTicketPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_ticketID\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LotteryAmountPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_purchaser2\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_ticketID2\",\"type\":\"uint256\"}],\"name\":\"LotteryTicketPurchased2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_winner2\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_ticketID2\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"_amount2\",\"type\":\"uint256\"}],\"name\":\"LotteryAmountPaid2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_purchaser3\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_ticketID3\",\"type\":\"uint256\"}],\"name\":\"LotteryTicketPurchased3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_winner3\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_ticketID3\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"_amount3\",\"type\":\"uint256\"}],\"name\":\"LotteryAmountPaid3\",\"type\":\"event\"}]","ContractName":"Lottery","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://091fc92f7d0ab9aec39d08adfb31a130a96df4626fffb93d873580c275debf87"}]}