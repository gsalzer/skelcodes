{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * Copyright (c) 2018-present, Leap DAO (leapdao.org)\r\n *\r\n * This source code is licensed under the Mozilla Public License, version 2,\r\n * found in the LICENSE file in the root directory of this source tree.\r\n */\r\npragma solidity 0.5.2;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface IColony {\r\n\r\n  struct Payment {\r\n    address payable recipient;\r\n    bool finalized;\r\n    uint256 fundingPotId;\r\n    uint256 domainId;\r\n    uint256[] skills;\r\n  }\r\n\r\n  // Implemented in ColonyPayment.sol\r\n  /// @notice Add a new payment in the colony. Secured function to authorised members.\r\n  /// @param _permissionDomainId The domainId in which I have the permission to take this action\r\n  /// @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`,\r\n  /// (only used if `_permissionDomainId` is different to `_domainId`)\r\n  /// @param _recipient Address of the payment recipient\r\n  /// @param _token Address of the token, `0x0` value indicates Ether\r\n  /// @param _amount Payout amount\r\n  /// @param _domainId The domain where the payment belongs\r\n  /// @param _skillId The skill associated with the payment\r\n  /// @return paymentId Identifier of the newly created payment\r\n  function addPayment(\r\n    uint256 _permissionDomainId,\r\n    uint256 _childSkillIndex,\r\n    address payable _recipient,\r\n    address _token,\r\n    uint256 _amount,\r\n    uint256 _domainId,\r\n    uint256 _skillId)\r\n    external returns (uint256 paymentId);\r\n\r\n  /// @notice Returns an exiting payment.\r\n  /// @param _id Payment identifier\r\n  /// @return payment The Payment data structure\r\n  function getPayment(uint256 _id) external view returns (Payment memory payment);\r\n\r\n  /// @notice Move a given amount: `_amount` of `_token` funds from funding pot with id `_fromPot` to one with id `_toPot`.\r\n  /// @param _permissionDomainId The domainId in which I have the permission to take this action\r\n  /// @param _fromChildSkillIndex The child index in `_permissionDomainId` where we can find the domain for `_fromPotId`\r\n  /// @param _toChildSkillIndex The child index in `_permissionDomainId` where we can find the domain for `_toPotId`\r\n  /// @param _fromPot Funding pot id providing the funds\r\n  /// @param _toPot Funding pot id receiving the funds\r\n  /// @param _amount Amount of funds\r\n  /// @param _token Address of the token, `0x0` value indicates Ether\r\n  function moveFundsBetweenPots(\r\n    uint256 _permissionDomainId,\r\n    uint256 _fromChildSkillIndex,\r\n    uint256 _toChildSkillIndex,\r\n    uint256 _fromPot,\r\n    uint256 _toPot,\r\n    uint256 _amount,\r\n    address _token\r\n    ) external;\r\n\r\n  /// @notice Finalizes the payment and logs the reputation log updates.\r\n  /// Allowed to be called once after payment is fully funded. Secured function to authorised members.\r\n  /// @param _permissionDomainId The domainId in which I have the permission to take this action\r\n  /// @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\r\n  /// @param _id Payment identifier\r\n  function finalizePayment(uint256 _permissionDomainId, uint256 _childSkillIndex, uint256 _id) external;\r\n\r\n  /// @notice Claim the payout in `_token` denomination for payment `_id`. Here the network receives its fee from each payout.\r\n  /// Same as for tasks, ether fees go straight to the Meta Colony whereas Token fees go to the Network to be auctioned off.\r\n  /// @param _id Payment identifier\r\n  /// @param _token Address of the token, `0x0` value indicates Ether\r\n  function claimPayment(uint256 _id, address _token) external;\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract BountyPayout {\r\n\r\n  uint256 constant PERMISSION_DOMAIN_ID = 1;\r\n  uint256 constant CHILD_SKILL_INDEX = 0;\r\n  uint256 constant DOMAIN_ID = 1;\r\n  uint256 constant SKILL_ID = 0;\r\n\r\n  address public payerAddr;\r\n  address public colonyAddr;\r\n  address public daiAddr;\r\n  address public leapAddr;\r\n\r\n  enum PayoutType { Gardener, Worker, Reviewer }\r\n  event Payout(\r\n    bytes32 indexed bountyId,\r\n    PayoutType indexed payoutType,\r\n    address indexed recipient,\r\n    uint256 amount,\r\n    uint256 paymentId\r\n  );\r\n\r\n  constructor(\r\n    address _payerAddr,\r\n    address _colonyAddr,\r\n    address _daiAddr,\r\n    address _leapAddr) public {\r\n    payerAddr = _payerAddr;\r\n    colonyAddr = _colonyAddr;\r\n    daiAddr = _daiAddr;\r\n    leapAddr = _leapAddr;\r\n  }\r\n\r\n  modifier onlyPayer() {\r\n    require(msg.sender == payerAddr, \"Only payer can call\");\r\n    _;\r\n  }\r\n\r\n  function _makeColonyPayment(address payable _worker, uint256 _amount) internal returns (uint256) {\r\n\r\n    IColony colony = IColony(colonyAddr);\r\n    // Add a new payment\r\n    uint256 paymentId = colony.addPayment(\r\n      PERMISSION_DOMAIN_ID,\r\n      CHILD_SKILL_INDEX,\r\n      _worker,\r\n      leapAddr,\r\n      _amount,\r\n      DOMAIN_ID,\r\n      SKILL_ID\r\n    );\r\n    IColony.Payment memory payment = colony.getPayment(paymentId);\r\n\r\n    // Fund the payment\r\n    colony.moveFundsBetweenPots(\r\n      1, // Root domain always 1\r\n      0, // Not used, this extension contract must have funding permission in the root for this function to work\r\n      CHILD_SKILL_INDEX,\r\n      1, // Root domain funding pot is always 1\r\n      payment.fundingPotId,\r\n      _amount,\r\n      leapAddr\r\n    );\r\n    colony.finalizePayment(PERMISSION_DOMAIN_ID, CHILD_SKILL_INDEX, paymentId);\r\n\r\n    // Claim payout on behalf of the recipient\r\n    colony.claimPayment(paymentId, leapAddr);\r\n    return paymentId;\r\n  }\r\n\r\n  function _payout(\r\n    address payable _gardenerAddr,\r\n    uint256 _gardenerDaiAmount,\r\n    address payable _workerAddr,\r\n    uint256 _workerDaiAmount,\r\n    address payable _reviewerAddr,\r\n    uint256 _reviewerDaiAmount,\r\n    bytes32 _bountyId\r\n  ) internal  {\r\n\r\n    IERC20 dai = IERC20(daiAddr);\r\n\r\n    // handle worker\r\n    uint256 paymentId = _makeColonyPayment(_gardenerAddr, _gardenerDaiAmount);\r\n    dai.transferFrom(payerAddr, _gardenerAddr, _gardenerDaiAmount);\r\n    emit Payout(_bountyId, PayoutType.Gardener, _gardenerAddr, _gardenerDaiAmount, paymentId);\r\n\r\n    // handle worker\r\n    if (_workerDaiAmount > 0) {\r\n      paymentId = _makeColonyPayment(_workerAddr, _workerDaiAmount);\r\n      dai.transferFrom(payerAddr, _workerAddr, _workerDaiAmount);\r\n      emit Payout(_bountyId, PayoutType.Worker, _workerAddr, _workerDaiAmount, paymentId);\r\n    }\r\n\r\n    // handle reviewer\r\n    if (_reviewerDaiAmount > 0) {\r\n      paymentId = _makeColonyPayment(_reviewerAddr, _reviewerDaiAmount);\r\n      dai.transferFrom(payerAddr, _reviewerAddr, _reviewerDaiAmount);\r\n      emit Payout(_bountyId, PayoutType.Reviewer, _reviewerAddr, _reviewerDaiAmount, paymentId);\r\n    }\r\n  }\r\n\r\n /**\r\n  * Pays out a bounty to the different roles of a bounty\r\n  *\r\n  * @dev This contract should have enough allowance of daiAddr from payerAddr\r\n  * @dev This colony contract should have enough LEAP in its funding pot\r\n  * @param _gardenerAddr gardener wallet address\r\n  * @param _gardenerDaiAmount DAI amount to pay gardner\r\n  * @param _workerAddr worker wallet address\r\n  * @param _workerDaiAmount DAI amount to pay worker\r\n  * @param _reviewerAddr reviewer wallet address\r\n  * @param _reviewerDaiAmount DAI amount to pay reviewer\r\n  */\r\n  function payout(\r\n    address payable _gardenerAddr,\r\n    uint256 _gardenerDaiAmount,\r\n    address payable _workerAddr,\r\n    uint256 _workerDaiAmount,\r\n    address payable _reviewerAddr,\r\n    uint256 _reviewerDaiAmount,\r\n    bytes32 _bountyId\r\n  ) public onlyPayer {\r\n    _payout(\r\n      _gardenerAddr,\r\n      _gardenerDaiAmount,\r\n      _workerAddr,\r\n      _workerDaiAmount,\r\n      _reviewerAddr,\r\n      _reviewerDaiAmount,\r\n      _bountyId\r\n    );\r\n  }\r\n\r\n  function payoutNoWorker(\r\n    address payable _gardenerAddr,\r\n    uint256 _gardenerDaiAmount,\r\n    address payable _reviewerAddr,\r\n    uint256 _reviewerDaiAmount,\r\n    bytes32 _bountyId\r\n  ) public onlyPayer {\r\n    _payout(\r\n      _gardenerAddr,\r\n      _gardenerDaiAmount,\r\n      _reviewerAddr,\r\n      0,\r\n      _reviewerAddr,\r\n      _reviewerDaiAmount,\r\n      _bountyId\r\n    );\r\n  }\r\n\r\n  function payoutNoReviewer(\r\n    address payable _gardenerAddr,\r\n    uint256 _gardenerDaiAmount,\r\n    address payable _workerAddr,\r\n    uint256 _workerDaiAmount,\r\n    bytes32 _bountyId\r\n  ) public onlyPayer {\r\n    _payout(\r\n      _gardenerAddr,\r\n      _gardenerDaiAmount,\r\n      _workerAddr,\r\n      _workerDaiAmount,\r\n      _workerAddr,\r\n      0,\r\n      _bountyId\r\n    );\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"colonyAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gardenerAddr\",\"type\":\"address\"},{\"name\":\"_gardenerDaiAmount\",\"type\":\"uint256\"},{\"name\":\"_workerAddr\",\"type\":\"address\"},{\"name\":\"_workerDaiAmount\",\"type\":\"uint256\"},{\"name\":\"_bountyId\",\"type\":\"bytes32\"}],\"name\":\"payoutNoReviewer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"daiAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"leapAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gardenerAddr\",\"type\":\"address\"},{\"name\":\"_gardenerDaiAmount\",\"type\":\"uint256\"},{\"name\":\"_workerAddr\",\"type\":\"address\"},{\"name\":\"_workerDaiAmount\",\"type\":\"uint256\"},{\"name\":\"_reviewerAddr\",\"type\":\"address\"},{\"name\":\"_reviewerDaiAmount\",\"type\":\"uint256\"},{\"name\":\"_bountyId\",\"type\":\"bytes32\"}],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gardenerAddr\",\"type\":\"address\"},{\"name\":\"_gardenerDaiAmount\",\"type\":\"uint256\"},{\"name\":\"_reviewerAddr\",\"type\":\"address\"},{\"name\":\"_reviewerDaiAmount\",\"type\":\"uint256\"},{\"name\":\"_bountyId\",\"type\":\"bytes32\"}],\"name\":\"payoutNoWorker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payerAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_payerAddr\",\"type\":\"address\"},{\"name\":\"_colonyAddr\",\"type\":\"address\"},{\"name\":\"_daiAddr\",\"type\":\"address\"},{\"name\":\"_leapAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"bountyId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"payoutType\",\"type\":\"uint8\"},{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"paymentId\",\"type\":\"uint256\"}],\"name\":\"Payout\",\"type\":\"event\"}]","ContractName":"BountyPayout","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c5cdcd5470aef35fc33bddff3f8ecec027f95b1d00000000000000000000000024f861f8356fa8d18b6adea07ac59719f42012b100000000000000000000000089d24a6b4ccb1b6faa2625fe562bdd9a2326035900000000000000000000000078230e69d6e6449db1e11904e0bd81c018454d7a","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://a6481025ab30c752bd090a4d26f40272eed73d41b8898405b219e232ba8d76f9"}]}