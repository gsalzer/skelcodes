{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.11; // optimization runs: 65536, version: petersburg\r\n\r\n\r\n/**\r\n * @title CodeHashCache\r\n * @author 0age\r\n * @notice This contract allows callers to register the runtime code hash of any\r\n * contract that is currently deployed with runtime code. It then allows callers\r\n * to determine whether or not the runtime code hash of any registered contract\r\n * has been altered since it was initially registered. A critical consideration\r\n * to bear in mind is that registered contracts can still be destroyed and later\r\n * redeployed with the same runtime code - their runtime code hash will be the\r\n * same, but their creation code may differ, and their contract storage will be\r\n * completely wiped upon destruction.\r\n */\r\ncontract CodeHashCache {\r\n  // Maintain a mapping of runtime code hashes of deployed contracts.\r\n  mapping (address => bytes32) private _cachedHashes;\r\n\r\n  /**\r\n   * @notice Register a target contract's current runtime code hash. This call\r\n   * will revert if the supplied target contract has already been registered or\r\n   * does not currently have any runtime code.\r\n   * @param target address The contract to retrieve and store the runtime code\r\n   * hash for.\r\n   */\r\n  function registerCodeHash(address target) external {\r\n    // Ensure that the target contract has not already had a hash registered.\r\n    require(_cachedHashes[target] == bytes32(0), \"Target already registered.\");    \r\n\r\n    // Ensure that the target contract currently has runtime code.\r\n    uint256 currentCodeSize;\r\n    assembly { currentCodeSize := extcodesize(target) }\r\n    require(currentCodeSize > 0, \"Target currently has no runtime code.\");\r\n\r\n    // Retrieve the current runtime code hash of the target contract.\r\n    bytes32 currentCodeHash;\r\n    assembly { currentCodeHash := extcodehash(target) }\r\n\r\n    // Register the runtime code hash for the target contract.\r\n    _cachedHashes[target] = currentCodeHash;\r\n  }\r\n\r\n  /**\r\n   * @notice View function to determine if the current runtime code hash of a\r\n   * target contract matches the registered runtime code hash for the target\r\n   * contract. Reverts if no runtime code hash has been registered yet for the\r\n   * target contract.\r\n   * @param target address The contract to retrieve the runtime code hash for,\r\n   * which will be compared against the runtime code hash that was initially\r\n   * registered for that contract.\r\n   * @return A boolean signifying that the target contract's runtime code has\r\n   * not been altered since it was initially registered.\r\n   */\r\n  function matchesRegisteredCodeHash(\r\n    address target\r\n  ) external view returns (bool codeHashMatchesRegisteredCodeHash) {\r\n    // Get the runtime code hash that is currently registered for the target.\r\n    bytes32 cachedCodeHash = _cachedHashes[target];\r\n\r\n    // Ensure that the target contract has already had a code hash registered.\r\n    require(cachedCodeHash != bytes32(0), \"Target not yet registered.\");\r\n\r\n    // Retrieve the current runtime code hash of the target contract.\r\n    bytes32 currentCodeHash;\r\n    assembly { currentCodeHash := extcodehash(target) }\r\n\r\n    // Compare current runtime code hash to registered runtime code hash.\r\n    codeHashMatchesRegisteredCodeHash = currentCodeHash == cachedCodeHash;\r\n  }\r\n\r\n  /**\r\n   * @notice View function to retrieve the runtime code hash registered for the\r\n   * target contract. Returns bytes32(0) if there is no runtime code hash\r\n   * registered for the target.\r\n   * @param target address The contract to retrieve the registered runtime code\r\n   * hash for.\r\n   * @return The runtime code hash registered for the target contract. Returns\r\n   * bytes32(0) if there runtime code hash has been registered for the target.\r\n   */\r\n  function getRegisteredCodeHash(\r\n    address target\r\n  ) external view returns (bytes32 registeredCodeHash) {\r\n    // Get the runtime code hash that is currently registered for the target.\r\n    registeredCodeHash = _cachedHashes[target];\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"getRegisteredCodeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"registeredCodeHash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"registerCodeHash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"matchesRegisteredCodeHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"codeHashMatchesRegisteredCodeHash\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CodeHashCache","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"65536","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://07827a1ee6619eec427005a48b2e311124aaec12d098f5013339b2dfbc9cbb76"}]}