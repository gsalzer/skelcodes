{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.21 <0.6.0;\r\n\r\ncontract MultiSig{\r\n\r\n  struct invoke_status{\r\n    uint propose_height;\r\n    bytes32 invoke_hash;\r\n    string func_name;\r\n    uint64 invoke_id;\r\n    bool called;\r\n    address[] invoke_signers;\r\n    bool processing;\r\n    bool exists;\r\n  }\r\n\r\n  uint public signer_number;\r\n  address[] public signers;\r\n  address public owner;\r\n  mapping (bytes32 => invoke_status) public invokes;\r\n  mapping (bytes32 => uint64) public used_invoke_ids;\r\n  mapping(address => uint) public signer_join_height;\r\n\r\n  event signers_reformed(address[] old_signers, address[] new_signers);\r\n  event valid_function_sign(string name, uint64 id, uint64 current_signed_number, uint propose_height);\r\n  event function_called(string name, uint64 id, uint propose_height);\r\n\r\n  modifier enough_signers(address[] memory s){\r\n    require(s.length >=3, \"the number of signers must be >=3\");\r\n    _;\r\n  }\r\n  constructor(address[] memory s) public enough_signers(s){\r\n    signers = s;\r\n    signer_number = s.length;\r\n    owner = msg.sender;\r\n    for(uint i = 0; i < s.length; i++){\r\n      signer_join_height[s[i]] = block.number;\r\n    }\r\n  }\r\n\r\n  modifier only_signer{\r\n    require(array_exist(signers, msg.sender), \"only a signer can call this\");\r\n    _;\r\n  }\r\n\r\n  function get_majority_number() private view returns(uint){\r\n    return signer_number/2 + 1;\r\n  }\r\n\r\n  function array_exist (address[] memory accounts, address p) private pure returns (bool){\r\n    for (uint i = 0; i< accounts.length;i++){\r\n      if (accounts[i]==p){\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function is_all_minus_sig(uint number, uint64 id, string memory name, bytes32 hash, address sender) internal only_signer returns (bool){\r\n    bytes32 b = keccak256(abi.encodePacked(name));\r\n    require(id <= used_invoke_ids[b] + 1, \"you're using a too big id.\");\r\n\r\n    if(id > used_invoke_ids[b]){\r\n      used_invoke_ids[b] = id;\r\n    }\r\n\r\n    if(!invokes[hash].exists){\r\n      invokes[hash].propose_height = block.number;\r\n      invokes[hash].invoke_hash = hash;\r\n      invokes[hash].func_name= name;\r\n      invokes[hash].invoke_id= id;\r\n      invokes[hash].called= false;\r\n      invokes[hash].invoke_signers.push(sender);\r\n      invokes[hash].processing= false;\r\n      invokes[hash].exists= true;\r\n      emit valid_function_sign(name, id, 1, block.number);\r\n      return false;\r\n    }\r\n\r\n    invoke_status storage invoke = invokes[hash];\r\n    require(!array_exist(invoke.invoke_signers, sender), \"you already called this method\");\r\n\r\n    uint valid_invoke_num = 0;\r\n    uint join_height = signer_join_height[msg.sender];\r\n    for(uint i = 0; i < invoke.invoke_signers.length; i++){\r\n      require(join_height < invoke.propose_height, \"this proposal is already exist before you become a signer\");\r\n      if(array_exist(signers, invoke.invoke_signers[i])){\r\n        valid_invoke_num ++;\r\n      }\r\n    }\r\n    invoke.invoke_signers.push(msg.sender);\r\n    valid_invoke_num ++;\r\n    emit valid_function_sign(name, id, uint64(valid_invoke_num), invoke.propose_height);\r\n    if(invoke.called) return false;\r\n    if(valid_invoke_num < signer_number-number) return false;\r\n    invoke.processing = true;\r\n    return true;\r\n  }\r\n\r\n  modifier is_majority_sig(uint64 id, string memory name) {\r\n    bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));\r\n    if(!is_all_minus_sig(get_majority_number()-1, id, name, hash, msg.sender))\r\n      return ;\r\n    set_called(hash);\r\n    _;\r\n  }\r\n\r\n  modifier is_all_sig(uint64 id, string memory name) {\r\n    bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));\r\n    if(!is_all_minus_sig(0, id, name, hash, msg.sender)) return ;\r\n    set_called(hash);\r\n    _;\r\n  }\r\n\r\n  function set_called(bytes32 hash) internal only_signer{\r\n    invoke_status storage invoke = invokes[hash];\r\n    require(invoke.exists, \"no such function\");\r\n    require(!invoke.called, \"already called\");\r\n    require(invoke.processing, \"cannot call this separately\");\r\n    invoke.called = true;\r\n    invoke.processing = false;\r\n    emit function_called(invoke.func_name, invoke.invoke_id, invoke.propose_height);\r\n  }\r\n\r\n  function reform_signers(uint64 id, address[] calldata s)\r\n    external\r\n    only_signer\r\n    enough_signers(s)\r\n    is_majority_sig(id, \"reform_signers\"){\r\n    address[] memory old_signers = signers;\r\n    for(uint i = 0; i < s.length; i++){\r\n      if(array_exist(old_signers, s[i])){\r\n      }else{\r\n        signer_join_height[s[i]] = block.number;\r\n      }\r\n    }\r\n    for(uint i = 0; i < old_signers.length; i++){\r\n      if(array_exist(s, old_signers[i])){\r\n      }else{\r\n        signer_join_height[old_signers[i]] = 0;\r\n      }\r\n    }\r\n    signer_number = s.length;\r\n    signers = s;\r\n    emit signers_reformed(old_signers, signers);\r\n  }\r\n\r\n  function get_unused_invoke_id(string memory name) public view returns(uint64){\r\n    return used_invoke_ids[keccak256(abi.encodePacked(name))] + 1;\r\n  }\r\n  function get_signers() public view returns(address[] memory){\r\n    return signers;\r\n  }\r\n}\r\n\r\ncontract SafeMath {\r\n    function safeAdd(uint a, uint b) public pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function safeSub(uint a, uint b) public pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function safeMul(uint a, uint b) public pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function safeDiv(uint a, uint b) public pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n//We shouldn't depend on ERC20's allowance, approve, and transferFrom\r\ncontract ERC20Salary is SafeMath, MultiSig{\r\n  struct employee_info{\r\n    uint salary;\r\n    uint period;\r\n    uint total;\r\n    uint claimed;\r\n    uint last_block_num;\r\n    bool exists;\r\n  }\r\n\r\n  ERC20Interface public erc20_token;\r\n  string public token_name;\r\n  address[] public employee_accounts;\r\n  mapping (address => employee_info) public employee_infos;\r\n\r\n\r\n  event ClaimedSalary(address account, address to, uint amount);\r\n\r\n  constructor(string memory name, address token_contract, address[] memory s) MultiSig(s) public{\r\n    token_name = name;\r\n    erc20_token = ERC20Interface(token_contract);\r\n  }\r\n\r\n  function balance() public view returns(uint){\r\n    return erc20_token.balanceOf(address(this));\r\n  }\r\n\r\n  function unclaimed_amount() public returns(uint){\r\n    uint total = 0;\r\n    for(uint i = 0; i < employee_accounts.length; ++i){\r\n      _update_salary(employee_accounts[i]);\r\n      uint t = safeSub(employee_infos[employee_accounts[i]].total, employee_infos[employee_accounts[i]].claimed);\r\n      total = safeAdd(total, t);\r\n    }\r\n    return total;\r\n  }\r\n\r\n  function add_employee(uint64 id, address account, uint last_block_num, uint period, uint salary)\r\n    external only_signer\r\n    is_majority_sig(id, \"add_employee\")\r\n    returns(bool)\r\n    {\r\n      require(account != address(0));\r\n      require(last_block_num >0);\r\n      require(period > 0);\r\n      require(salary > 0);\r\n      if(employee_infos[account].exists) return false;\r\n\r\n      employee_infos[account].salary = salary;\r\n      employee_infos[account].period = period;\r\n      employee_infos[account].total = 0;\r\n      employee_infos[account].claimed = 0;\r\n      employee_infos[account].last_block_num = last_block_num;\r\n      employee_infos[account].exists = true;\r\n\r\n      employee_accounts.push(account);\r\n\r\n      return true;\r\n    }\r\n\r\n    function config_employee(uint64 id, address account, uint period, uint salary)\r\n      external only_signer\r\n      is_majority_sig(id, \"config_employee\")\r\n      returns(bool)\r\n    {\r\n      require(employee_infos[account].exists);\r\n      _update_salary(account);\r\n\r\n      employee_infos[account].period = period;\r\n      employee_infos[account].salary = salary;\r\n      return true;\r\n    }\r\n\r\n    function _update_salary(address account) private {\r\n      employee_info storage ei = employee_infos[account];\r\n      uint p = safeDiv(safeSub(block.number, ei.last_block_num), ei.period);\r\n      if(p == 0) return ;\r\n      ei.total = safeAdd(ei.total, safeMul(p, ei.salary));\r\n      ei.last_block_num = safeAdd(ei.last_block_num, safeMul(p, ei.period));\r\n    }\r\n    function self_info() public returns(uint salary, uint period, uint total,\r\n                                       uint claimed, uint last_claim_block_num){\r\n      require(employee_infos[msg.sender].exists);\r\n      _update_salary(msg.sender);\r\n      salary = employee_infos[msg.sender].salary;\r\n      period = employee_infos[msg.sender].period;\r\n      total = employee_infos[msg.sender].total;\r\n      claimed = employee_infos[msg.sender].claimed;\r\n      last_claim_block_num = employee_infos[msg.sender].last_block_num;\r\n    }\r\n\r\n    function claim_salary(address to, uint amount) external returns(bool){\r\n      require(employee_infos[msg.sender].exists);\r\n      _update_salary(msg.sender);\r\n      employee_info storage ei = employee_infos[msg.sender];\r\n      require(safeSub(ei.total, ei.claimed) >= amount);\r\n      require(amount <= balance());\r\n      ei.claimed  = safeAdd(ei.claimed, amount);\r\n      erc20_token.transfer(to, amount);\r\n    }\r\n\r\n\r\n    function transfer(uint64 id, address to, uint tokens)\r\n      external\r\n      only_signer\r\n      is_majority_sig(id, \"transfer\")\r\n      returns (bool success){\r\n      erc20_token.transfer(to, tokens);\r\n      return true;\r\n    }\r\n\r\n    function token() public view returns(address, string memory){\r\n      return (address(erc20_token), token_name);\r\n    }\r\n\r\n    function get_employee_count() public view returns(uint){\r\n      return employee_accounts.length;\r\n    }\r\n\r\n    function get_employee_info_with_index(uint index) public view only_signer returns(uint salary, uint period, uint total, uint claimed, uint last_claim_block_num){\r\n      require(index >= 0 && index < employee_accounts.length);\r\n      address account = employee_accounts[index];\r\n      require(employee_infos[account].exists);\r\n      salary = employee_infos[account].salary;\r\n      period = employee_infos[account].period;\r\n      total = employee_infos[account].total;\r\n      claimed = employee_infos[account].claimed;\r\n      last_claim_block_num = employee_infos[account].last_block_num;\r\n    }\r\n\r\n    function get_employee_info_with_account(address account) public view only_signer returns(uint salary, uint period, uint total, uint claimed, uint last_claim_block_num){\r\n      require(employee_infos[account].exists);\r\n      salary = employee_infos[account].salary;\r\n      period = employee_infos[account].period;\r\n      total = employee_infos[account].total;\r\n      claimed = employee_infos[account].claimed;\r\n      last_claim_block_num = employee_infos[account].last_block_num;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"signers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claim_salary\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"invokes\",\"outputs\":[{\"name\":\"propose_height\",\"type\":\"uint256\"},{\"name\":\"invoke_hash\",\"type\":\"bytes32\"},{\"name\":\"func_name\",\"type\":\"string\"},{\"name\":\"invoke_id\",\"type\":\"uint64\"},{\"name\":\"called\",\"type\":\"bool\"},{\"name\":\"processing\",\"type\":\"bool\"},{\"name\":\"exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint64\"},{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"last_block_num\",\"type\":\"uint256\"},{\"name\":\"period\",\"type\":\"uint256\"},{\"name\":\"salary\",\"type\":\"uint256\"}],\"name\":\"add_employee\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint64\"},{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"period\",\"type\":\"uint256\"},{\"name\":\"salary\",\"type\":\"uint256\"}],\"name\":\"config_employee\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"self_info\",\"outputs\":[{\"name\":\"salary\",\"type\":\"uint256\"},{\"name\":\"period\",\"type\":\"uint256\"},{\"name\":\"total\",\"type\":\"uint256\"},{\"name\":\"claimed\",\"type\":\"uint256\"},{\"name\":\"last_claim_block_num\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_signers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"get_employee_info_with_account\",\"outputs\":[{\"name\":\"salary\",\"type\":\"uint256\"},{\"name\":\"period\",\"type\":\"uint256\"},{\"name\":\"total\",\"type\":\"uint256\"},{\"name\":\"claimed\",\"type\":\"uint256\"},{\"name\":\"last_claim_block_num\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"get_employee_info_with_index\",\"outputs\":[{\"name\":\"salary\",\"type\":\"uint256\"},{\"name\":\"period\",\"type\":\"uint256\"},{\"name\":\"total\",\"type\":\"uint256\"},{\"name\":\"claimed\",\"type\":\"uint256\"},{\"name\":\"last_claim_block_num\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"used_invoke_ids\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc20_token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"employee_infos\",\"outputs\":[{\"name\":\"salary\",\"type\":\"uint256\"},{\"name\":\"period\",\"type\":\"uint256\"},{\"name\":\"total\",\"type\":\"uint256\"},{\"name\":\"claimed\",\"type\":\"uint256\"},{\"name\":\"last_block_num\",\"type\":\"uint256\"},{\"name\":\"exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unclaimed_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token_name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeSub\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeDiv\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_employee_count\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signer_number\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"get_unused_invoke_id\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeMul\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint64\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"employee_accounts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint64\"},{\"name\":\"s\",\"type\":\"address[]\"}],\"name\":\"reform_signers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"signer_join_height\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeAdd\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"token_contract\",\"type\":\"address\"},{\"name\":\"s\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedSalary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"old_signers\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"new_signers\",\"type\":\"address[]\"}],\"name\":\"signers_reformed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"current_signed_number\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"propose_height\",\"type\":\"uint256\"}],\"name\":\"valid_function_sign\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"propose_height\",\"type\":\"uint256\"}],\"name\":\"function_called\",\"type\":\"event\"}]","ContractName":"ERC20Salary","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec700000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000004555344540000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030000000000000000000000004aa66237b79d0b9be8f6fe9e416d3975d480ec200000000000000000000000003bde508f42130c7f87714a2219a9969cbad1e6a200000000000000000000000057955d7aa271dbdde92d67e0ef52d90c6e4089ca","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://411aaa5a6a06f1ab2067a07a7cf9ec4c7b7a19fa3b757fd95d38a6a417a5ee53"}]}