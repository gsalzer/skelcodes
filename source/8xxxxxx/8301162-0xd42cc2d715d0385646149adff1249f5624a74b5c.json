{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.5;\r\n\r\ncontract SafeMath { \r\n  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;  \r\n    }\r\n  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {  \r\n    return a/b;   \r\n    }\r\n  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;  \r\n    }\r\n  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c>=a && c>=b);\r\n    return c;\r\n    }  \r\n  function safePower(uint a, uint b) internal pure returns (uint256 result) {       \r\n      assert(a >= 0); //edited this later!\r\n      result = 1;\r\n      for (uint256 i = 0; i < b; i++){\r\n          result *= a;\r\n          assert(result >= a);\r\n      }\r\n    }\r\n}\r\ncontract Token {\r\n  function totalSupply() public view returns (uint256 supply) {}\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {}\r\n  function transfer(address _to, uint256 _value) public returns (bool success) {}\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {}\r\n  function approve(address _spender, uint256 _value) public returns (bool success) {}\r\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {}  \r\n  function burn(uint256 _value) public returns (bool success){}\r\n  function mintToken(address _target, uint256 _mintedAmount) public returns (bool success) {}\r\n  function share(address _token) external payable {}\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n  uint public decimals;\r\n  string public name;\r\n  uint256 public totalSupplyLimit;\r\n}\r\ninterface tokenRecipient {function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; }\r\ncontract UNIONDAOISSUE is SafeMath{     \r\n    address payable public owner;\r\n    address public manager;\r\n    address public tokenAddress;\r\n    uint256 public upTotalSupply;\r\n    address public share;\r\n    uint256 public tokenNumber;/*Number of assets*/    \r\n    uint256 public blocksPeriod;\r\n    bool public pauseIssue;\r\n    uint256 public baseBlock;\r\n    address public operator;\r\n    mapping (uint256 => address) public investToken;\r\n    mapping (uint256 => mapping (address => mapping (uint256 => uint256))) public investAmount;/*The investment amount of the investor of a certain type in each period*/\r\n    mapping (uint256 => mapping (address => mapping (uint256 => address))) public investAddress;/*List of investors in each issue*/\r\n    mapping (uint256 => mapping (address => uint256)) public investRate;/*Investment price ratio for each period*/    \r\n    mapping (uint256 => mapping (address => uint256)) public investTotalAmount;/*Total investment in each period*/    \r\n    mapping (uint256 => mapping (address => uint256)) public investorTotal;/*Number of investors in each issue*/    \r\n    mapping (uint256 => mapping (address => uint256)) public SaleTotal;/*Sales volume of each period*/    \r\n    mapping (address => uint256) public upAmount;/*The total amount rate of this token exchange per day,Defaults:1000000000000000*/ \r\n    mapping (address => uint256) public maxInvestRate;/*max invest rate*/                               \r\n    mapping (address => uint8) public tokenDecimals;\r\n    mapping (address => uint256) public newPrice;\r\n    mapping (uint256 => uint256) public distributionInvestI;\r\n    mapping (uint256 => uint256) public distributionInvestJ;\r\n\r\n    event SetManager(address add);\r\n    event ChangeOwner(address add);\r\n    event SetShare(address add);\r\n    event SetOperator(address add);\r\n    event SetPauseIssue(bool pause);\r\n    \r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    constructor (uint256 limitSupply,address incomeShare,uint256 blocks,address monetaryTokenAddress) public{\r\n        upTotalSupply = limitSupply;        \r\n        owner = msg.sender;\r\n        manager = msg.sender;\r\n        share = incomeShare;                \r\n        blocksPeriod = blocks;              \r\n        tokenAddress = monetaryTokenAddress;    \r\n        baseBlock = block.number;       \r\n        operator = msg.sender;          \r\n    }\r\n    \r\n    /*Setup administrator*/\r\n    function setManager(address _add)public returns (bool success) {\r\n        require (msg.sender == owner) ;\r\n        require (_add != address(0x0)) ;\r\n        manager = _add ;                \r\n        emit SetManager(_add);\r\n        return true;    \r\n    }  \r\n\r\n    /*change Owner*/  \r\n    function changeOwner(address payable _add)public returns (bool success) {\r\n        require (msg.sender == owner) ;\r\n        require (_add != address(0x0)) ;\r\n        owner = _add ;              \r\n        emit ChangeOwner(_add);\r\n        return true;\r\n    }  \r\n\r\n    /*Set the revenue receiving address*/\r\n    function setShare(address _add)public returns (bool success) {\r\n        require (msg.sender == owner) ;\r\n        require (_add != address(0x0)) ;\r\n        share = _add ;              \r\n        emit SetShare(_add);\r\n        return true;\r\n    }\r\n\r\n    /*Set the distributionInvest operator address*/\r\n    function setOperator(address _add)public returns (bool success) {       \r\n        require (msg.sender == owner) ;\r\n        require (_add != address(0x0)) ;\r\n        operator = _add ;           \r\n        emit SetOperator(_add);\r\n        return true;\r\n    }\r\n\r\n    /*Pause Issue*/\r\n    function setPauseIssue(bool _pause)public     {   \r\n        require (msg.sender == manager) ; \r\n        pauseIssue = _pause; \r\n        emit SetPauseIssue(_pause);\r\n    }                   \r\n\r\n    /*set InvestToken*/\r\n    function setInvestToken(address _token,uint256 _value,uint8 _tokenDecimals,uint256 _maxInvestRate)public returns (bool success) {\r\n        require (msg.sender == owner) ; \r\n        require (_token != address(0x0)) ;\r\n        require (_value > 0 && _value <= 10000000000000000) ;       \r\n        if (upAmount[_token] == 0) {\r\n            investToken[tokenNumber] = _token ;\r\n            upAmount[_token] = _value ;\r\n            tokenDecimals[_token] = _tokenDecimals;\r\n            maxInvestRate[_token] = _maxInvestRate;\r\n            tokenNumber = safeAdd(tokenNumber,1) ;        }     \r\n        else{\r\n            upAmount[_token] = _value ;\r\n            tokenDecimals[_token] = _tokenDecimals;\r\n            maxInvestRate[_token] = _maxInvestRate;        }\r\n        return true;    \r\n    }\r\n\r\n    /*Set the latest price*/\r\n    function setNewPrice(address _token,uint256 _amount)public returns (bool success) { \r\n        require (msg.sender == manager) ;\r\n        require (_token != address(0x0)) ;\r\n        newPrice[_token] = _amount ;\r\n        return true;\r\n    }\r\n\r\n    // can accept ether\r\n    function() external payable  {}\r\n    // transfer Ether balance to owner\r\n    function withdrawEther(uint amount) public{// transfer balance to owner\r\n      require(msg.sender == owner);\r\n      owner.transfer(amount); \r\n    }\r\n\r\n    /*Get current sales*/\r\n     function getThisTimesSaleAmount(address _token) public view returns (uint256 ) {\r\n        return safeDiv(safeMul(safeSub(upTotalSupply , Token(tokenAddress).totalSupply()) , upAmount[_token]),safePower(10,18));\r\n    }   \r\n\r\n    //Assemble the address bytecode. If there is a bytecode, then _addr is a contract.\r\n    function isContract(address _addr) private view returns (bool is_contract) {\r\n      uint length;\r\n      assembly { length := extcodesize(_addr) }    \r\n      return (length>0);\r\n    }    \r\n\r\n    /*Buy UDAO,receiveApproval*/\r\n    function _buy(address _mgsSender,address _token,uint256 _amount) private  returns (bool success){   \r\n        require(isContract(_mgsSender) == false && !pauseIssue);        \r\n        require(_token != address(0x0));\r\n        require(_amount >= safeMul(newPrice[_token],safeDiv(getThisTimesSaleAmount(_token),safeMul(10000,safePower(10,18)))));      \r\n        require(upAmount[_token] > 0);                               \r\n        require (Token(_token).transferFrom(_mgsSender, address(this), _amount)) ;   \r\n        uint256 n = safeDiv(block.number , blocksPeriod);   \r\n        investAddress[n][_token][investorTotal[n][_token]] = _mgsSender; \r\n        investAmount[n][_token][investorTotal[n][_token]] = _amount;        \r\n        investTotalAmount[n][_token] = safeAdd(investTotalAmount[n][_token],_amount);\r\n        investorTotal[n][_token] = safeAdd(investorTotal[n][_token],1);     \r\n        return true;    \r\n    }    \r\n    \r\n    /*Buy UDAO*/\r\n    function buy(address _token,uint256 _amount) external payable  returns (bool success)    {   \r\n        return _buy(msg.sender,_token,_amount);    }\r\n    \r\n    //This method implements the service contract function. _from: original sender, _value: send value, _token: token contract address, _extraData: extended data\r\n    function receiveApproval(address _from, uint256 _value, address _token, bytes memory _extraData) public    {   \r\n        uint256 loadSize;uint256 load;\r\n        assembly {\r\n          loadSize := mload(_extraData)\r\n          load := mload(add(_extraData, 0x20))}\r\n        load = load >> 8*(32 - loadSize);\r\n        if(load == 0x31){_buy(_from,_token,_value);}\r\n    }\r\n\r\n    /*Get GrowthRate*/\r\n    function getGrowthRate(uint256 _base) public view returns (uint256 _rate) {\r\n        _rate = (block.number - _base) * 1000000000000000000 / 600000;          \r\n        if(_rate > 10000000000000000000)        \r\n            _rate = 10000000000000000000;       \r\n        return _rate;\r\n    }\r\n\r\n    /*End n round of auction, assign token*/\r\n    function distributionInvest(uint256 _periods,uint256 _batchsize) public returns (bool success)    {\r\n        require(msg.sender == operator);\r\n        require( _periods < safeDiv(block.number , blocksPeriod) && !pauseIssue);       \r\n        uint256 n = _periods;\r\n        for (uint256 j = distributionInvestJ[_periods]; j < tokenNumber; j++){\r\n            if (investTotalAmount[n][investToken[j]] >= 1){     \r\n                if(distributionInvestI[_periods] == 0){\r\n                    investRate[n][investToken[j]] = safeDiv(safeMul(getThisTimesSaleAmount(investToken[j]) , safePower(10,18)) , investTotalAmount[n][investToken[j]]);     \r\n                }\r\n                if(investRate[n][investToken[j]] > safeDiv( safeMul( maxInvestRate[investToken[j]] , 1000000000000000000) , safeAdd(1000000000000000000 , getGrowthRate(baseBlock)) )){     \r\n                    investRate[n][investToken[j]] = safeDiv( safeMul( maxInvestRate[investToken[j]] , 1000000000000000000) , safeAdd(1000000000000000000 , getGrowthRate(baseBlock)) );     \r\n                }\r\n                if(distributionInvestI[_periods] == 0){\r\n                    SaleTotal[n][investToken[j]] = safeDiv(safeMul(investTotalAmount[n][investToken[j]],investRate[n][investToken[j]]),safePower(10,18));   \r\n                    newPrice[investToken[j]] = safeDiv(safePower(10,36),investRate[n][investToken[j]]);   \r\n                    if (share != address(this)){\r\n                        require(Token(investToken[j]).transfer(share, investTotalAmount[n][investToken[j]]));\r\n                    }\r\n                    Token(tokenAddress).mintToken(address(this),SaleTotal[n][investToken[j]]);\r\n                }   \r\n                uint256 _temp;\r\n                for (uint256 i = distributionInvestI[_periods]; i < investorTotal[n][investToken[j]]; i++){\r\n                    if(Token(tokenAddress).balanceOf(address(this)) < safeDiv(safeMul(investAmount[n][investToken[j]][i],investRate[n][investToken[j]]),safePower(10,18))){\r\n                        Token(tokenAddress).mintToken(address(this),safeSub(safeDiv(safeMul(investAmount[n][investToken[j]][i],investRate[n][investToken[j]]),safePower(10,18)),Token(tokenAddress).balanceOf(address(this))));\r\n                    }\r\n                    Token(tokenAddress).transfer(investAddress[n][investToken[j]][i],safeDiv(safeMul(investAmount[n][investToken[j]][i],investRate[n][investToken[j]]),safePower(10,18))) ;\r\n                    _temp = _temp + 1;\r\n                    distributionInvestI[_periods] = i+1;\r\n                    if(_temp >= _batchsize && i < investorTotal[n][investToken[j]] - 1){\r\n                        distributionInvestJ[_periods] = j;\r\n                        return false;\r\n                    } \r\n                    if (i >= investorTotal[n][investToken[j]]-1 && j != tokenNumber-1 ){\r\n                        distributionInvestI[_periods] = 0;\r\n                        distributionInvestJ[_periods] = j+1;\r\n                    }\r\n                }                \r\n            }\r\n        }        \r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"blocksPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pauseIssue\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_periods\",\"type\":\"uint256\"},{\"name\":\"_batchsize\",\"type\":\"uint256\"}],\"name\":\"distributionInvest\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investorTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"newPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_tokenDecimals\",\"type\":\"uint8\"},{\"name\":\"_maxInvestRate\",\"type\":\"uint256\"}],\"name\":\"setInvestToken\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_base\",\"type\":\"uint256\"}],\"name\":\"getGrowthRate\",\"outputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"SaleTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"upAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"setShare\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"distributionInvestJ\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setNewPrice\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"distributionInvestI\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"share\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pause\",\"type\":\"bool\"}],\"name\":\"setPauseIssue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investTotalAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxInvestRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getThisTimesSaleAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"limitSupply\",\"type\":\"uint256\"},{\"name\":\"incomeShare\",\"type\":\"address\"},{\"name\":\"blocks\",\"type\":\"uint256\"},{\"name\":\"monetaryTokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"add\",\"type\":\"address\"}],\"name\":\"SetManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"add\",\"type\":\"address\"}],\"name\":\"ChangeOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"add\",\"type\":\"address\"}],\"name\":\"SetShare\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"add\",\"type\":\"address\"}],\"name\":\"SetOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"pause\",\"type\":\"bool\"}],\"name\":\"SetPauseIssue\",\"type\":\"event\"}]","ContractName":"UNIONDAOISSUE","CompilerVersion":"v0.5.5+commit.47a71e8f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000052b7d2dcc80cd2e40000000000000000000000000000006dec718f7ead6aef5ff9ca5fb02b2edff23436ff00000000000000000000000000000000000000000000000000000000000017700000000000000000000000004a32e09c60af50f0a5869bf5c622f4e5d57c3b37","Library":"","LicenseType":"None","SwarmSource":"bzzr://08552b2a8b0011c85771e9e46d7e342b460348d93db5659123d5afdcef555738"}]}