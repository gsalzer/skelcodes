{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.7;\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b > 0);\r\n        uint256 c = a / b;\r\n        assert(a == b * c + a % b);\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\ninterface IERC20{\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0));\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n    }\r\n\r\n    function rescueTokens(address tokenAddress, address receiver, uint256 amount) external onlyOwner {\r\n        IERC20 _token = IERC20(tokenAddress);\r\n        require(receiver != address(0));\r\n        uint256 balance = _token.balanceOf(address(this));\r\n\r\n        require(balance >= amount);\r\n        assert(_token.transfer(receiver, amount));\r\n    }\r\n\r\n    function withdrawEther(address payable to, uint256 amount) external onlyOwner {\r\n        require(to != address(0));\r\n\r\n        uint256 balance = address(this).balance;\r\n\r\n        require(balance >= amount);\r\n        to.transfer(amount);\r\n    }\r\n}\r\n\r\n\r\ncontract Pausable is Ownable {\r\n    bool private _paused;\r\n\r\n    event Paused(address account);\r\n    event Unpaused(address account);\r\n\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!_paused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(_paused);\r\n        _;\r\n    }\r\n\r\n    function pause() external onlyOwner whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    function unpause() external onlyOwner whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n}\r\n\r\n\r\ncontract TmToken is Ownable, Pausable, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    string private  _name     = \"TM Token\";\r\n    string private  _symbol   = \"TM\";\r\n    uint8 private   _decimals = 6;                   // 6 decimals\r\n    uint256 private _cap      = 10000000000000000;   // 10 billion cap, that is 10000000000.000000\r\n    uint256 private _totalSupply;\r\n\r\n    mapping (address => bool) private _minter;\r\n    event Mint(address indexed to, uint256 value);\r\n    event MinterChanged(address account, bool state);\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    bool private _allowWhitelistRegistration;\r\n    mapping(address => address) private _referrer;\r\n    mapping(address => uint256) private _refCount;\r\n\r\n    event TokenSaleWhitelistRegistered(address indexed addr, address indexed refAddr);\r\n    event TokenSaleWhitelistTransferred(address indexed previousAddr, address indexed _newAddr);\r\n    event TokenSaleWhitelistRegistrationEnabled();\r\n    event TokenSaleWhitelistRegistrationDisabled();\r\n\r\n    uint256 private _whitelistRegistrationValue = 101000000;   // 101 Token, 101.000000\r\n    uint256[15] private _whitelistRefRewards = [                // 100% Reward\r\n    31000000,  // 31 Token for Level.1\r\n    20000000,  // 20 Token for Level.2\r\n    10000000,  // 10 Token for Level.3\r\n    10000000,  // 10 Token for Level.4\r\n    10000000,  // 10 Token for Level.5\r\n    5000000,   //  5 Token for Level.6\r\n    4000000,   //  4 Token for Level.7\r\n    3000000,   //  3 Token for Level.8\r\n    2000000,   //  2 Token for Level.9\r\n    1000000,   //  1 Token for Level.10\r\n    1000000,   //  1 Token for Level.11\r\n    1000000,   //  1 Token for Level.12\r\n    1000000,   //  1 Token for Level.13\r\n    1000000,   //  1 Token for Level.14\r\n    1000000    //  1 Token for Level.15\r\n    ];\r\n\r\n    event Donate(address indexed account, uint256 amount);\r\n\r\n    constructor() public {\r\n        _minter[msg.sender] = true;\r\n        _allowWhitelistRegistration = true;\r\n\r\n        emit TokenSaleWhitelistRegistrationEnabled();\r\n\r\n        _referrer[msg.sender] = msg.sender;\r\n        emit TokenSaleWhitelistRegistered(msg.sender, msg.sender);\r\n    }\r\n\r\n\r\n    function () external payable {\r\n        emit Donate(msg.sender, msg.value);\r\n    }\r\n\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function cap() public view returns (uint256) {\r\n        return _cap;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\r\n        if (_allowWhitelistRegistration && value == _whitelistRegistrationValue\r\n        && inWhitelist(to) && !inWhitelist(msg.sender) && isNotContract(msg.sender)) {\r\n            // Register whitelist for TM Token-Sale\r\n            _regWhitelist(msg.sender, to);\r\n            return true;\r\n        } else {\r\n            // Normal Transfer\r\n            _transfer(msg.sender, to, value);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\r\n        require(_allowed[from][msg.sender] >= value);\r\n        _transfer(from, to, value);\r\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0));\r\n        require(spender != address(0));\r\n\r\n        _allowed[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(_minter[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minter[account];\r\n    }\r\n\r\n    function setMinterState(address account, bool state) external onlyOwner {\r\n        _minter[account] = state;\r\n        emit MinterChanged(account, state);\r\n    }\r\n\r\n    function mint(address to, uint256 value) public onlyMinter returns (bool) {\r\n        _mint(to, value);\r\n        return true;\r\n    }\r\n\r\n    function _mint(address account, uint256 value) internal {\r\n        require(_totalSupply.add(value) <= _cap);\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Mint(account, value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    modifier onlyInWhitelist() {\r\n        require(_referrer[msg.sender] != address(0));\r\n        _;\r\n    }\r\n\r\n    function allowWhitelistRegistration() public view returns (bool) {\r\n        return _allowWhitelistRegistration;\r\n    }\r\n\r\n    function inWhitelist(address account) public view returns (bool) {\r\n        return _referrer[account] != address(0);\r\n    }\r\n\r\n\r\n    function referrer(address account) public view returns (address) {\r\n        return _referrer[account];\r\n    }\r\n\r\n    function refCount(address account) public view returns (uint256) {\r\n        return _refCount[account];\r\n    }\r\n\r\n\r\n    function disableTokenSaleWhitelistRegistration() external onlyOwner {\r\n        _allowWhitelistRegistration = false;\r\n        emit TokenSaleWhitelistRegistrationDisabled();\r\n    }\r\n\r\n\r\n    function _regWhitelist(address account, address refAccount) internal {\r\n        _refCount[refAccount] = _refCount[refAccount].add(1);\r\n        _referrer[account] = refAccount;\r\n\r\n        emit TokenSaleWhitelistRegistered(account, refAccount);\r\n\r\n        // Whitelist Registration Referral Reward\r\n        _transfer(msg.sender, address(this), _whitelistRegistrationValue);\r\n        address cursor = account;\r\n        uint256 remain = _whitelistRegistrationValue;\r\n        for(uint i = 0; i < _whitelistRefRewards.length; i++) {\r\n            address receiver = _referrer[cursor];\r\n\r\n            if (cursor != receiver) {\r\n                if (_refCount[receiver] > i) {\r\n                    _transfer(address(this), receiver, _whitelistRefRewards[i]);\r\n                    remain = remain.sub(_whitelistRefRewards[i]);\r\n                }\r\n            } else {\r\n                _transfer(address(this), refAccount, remain);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function transferWhitelist(address account) external onlyInWhitelist {\r\n        require(isNotContract(account));\r\n\r\n        _refCount[account]    = _refCount[msg.sender];\r\n        _refCount[msg.sender] = 0;\r\n        _referrer[account]    = _referrer[msg.sender];\r\n        _referrer[msg.sender] = address(0);\r\n\r\n        emit TokenSaleWhitelistTransferred(msg.sender, account);\r\n    }\r\n\r\n\r\n    function isNotContract(address addr) internal view returns (bool) {\r\n        uint size;\r\n        assembly {\r\n            size := extcodesize(addr)\r\n        }\r\n        return size == 0;\r\n    }\r\n\r\n    function calculateTheRewardOfDirectWhitelistRegistration(address whitelistedAccount) external view returns (uint256 reward) {\r\n        if (!inWhitelist(whitelistedAccount)) {\r\n            return 0;\r\n        }\r\n\r\n        address cursor = whitelistedAccount;\r\n        uint256 remain = _whitelistRegistrationValue;\r\n        for(uint i = 1; i < _whitelistRefRewards.length; i++) {\r\n            address receiver = _referrer[cursor];\r\n\r\n            if (cursor != receiver) {\r\n                if (_refCount[receiver] > i) {\r\n                    remain = remain.sub(_whitelistRefRewards[i]);\r\n                }\r\n            } else {\r\n                reward = reward.add(remain);\r\n                break;\r\n            }\r\n\r\n            cursor = _referrer[cursor];\r\n        }\r\n\r\n        return reward;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableTokenSaleWhitelistRegistration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"referrer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowWhitelistRegistration\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"whitelistedAccount\",\"type\":\"address\"}],\"name\":\"calculateTheRewardOfDirectWhitelistRegistration\",\"outputs\":[{\"name\":\"reward\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"transferWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setMinterState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"inWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"refCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"MinterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"refAddr\",\"type\":\"address\"}],\"name\":\"TokenSaleWhitelistRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousAddr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newAddr\",\"type\":\"address\"}],\"name\":\"TokenSaleWhitelistTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TokenSaleWhitelistRegistrationEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TokenSaleWhitelistRegistrationDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Donate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TmToken","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://66b2d5a7fb1b5c410f242a10616f6f67e77ab4d29f48f450a1943c544dbbd749"}]}