{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.11; /*\r\n\r\n\r\n___________________________________________________________________\r\n  _      _                                        ______           \r\n  |  |  /          /                                /              \r\n--|-/|-/-----__---/----__----__---_--_----__-------/-------__------\r\n  |/ |/    /___) /   /   ' /   ) / /  ) /___)     /      /   )     \r\n__/__|____(___ _/___(___ _(___/_/_/__/_(___ _____/______(___/__o_o_\r\n\r\n\r\n██████╗  █████╗ ███╗   ██╗██╗  ██╗     ██████╗ ██████╗ ██╗███╗   ██╗\r\n██╔══██╗██╔══██╗████╗  ██║╚██╗██╔╝    ██╔════╝██╔═══██╗██║████╗  ██║\r\n██████╔╝███████║██╔██╗ ██║ ╚███╔╝     ██║     ██║   ██║██║██╔██╗ ██║\r\n██╔══██╗██╔══██║██║╚██╗██║ ██╔██╗     ██║     ██║   ██║██║██║╚██╗██║\r\n██████╔╝██║  ██║██║ ╚████║██╔╝ ██╗    ╚██████╗╚██████╔╝██║██║ ╚████║\r\n╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═══╝╚═╝  ╚═╝     ╚═════╝ ╚═════╝ ╚═╝╚═╝  ╚═══╝\r\n                                                                                                                                                  \r\n                                                                              \r\n\r\n=== 'BanxCoin' Token contract with following features ===\r\n    => ERC20 Compliance\r\n    => Higher degree of control by owner - safeguard functionality\r\n    => SafeMath implementation \r\n    => Burnable and minting \r\n\r\n\r\n======================= Quick Stats ===================\r\n    => Name             : Banx coin\r\n    => Symbol           : BXN\r\n    => Initial Supply   : 500000000 tokens - vested\r\n    => Total supply     : (Minting on demand)\r\n    => Decimals         : 18\r\n    \r\n\r\n====================== Vesting Logic ===================\r\n    => 500 million tokens will be vested, means will be kept aside for owner to withdraw in defined intervals\r\n    => Owner can withdraw 1% of it after 60 days after contract deployment\r\n\r\n\r\n============= Independant Audit of the code ============\r\n    => Multiple Freelancers Auditors\r\n\r\n\r\n\r\n-------------------------------------------------------------------\r\n Copyright (c) 2019 onwards Banx Coin Inc. ( http://banxcoin.org )\r\n Contract designed with ❤ by EtherAuthority ( https://EtherAuthority.io )\r\n-------------------------------------------------------------------\r\n*/ \r\n\r\n\r\n\r\n\r\n//*******************************************************************//\r\n//------------------------ SafeMath Library -------------------------//\r\n//*******************************************************************//\r\n/**\r\n    * @title SafeMath\r\n    * @dev Math operations with safety checks that throw on error\r\n    */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n        return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b, 'SafeMath mul failed');\r\n    return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a, 'SafeMath sub failed');\r\n    return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, 'SafeMath add failed');\r\n    return c;\r\n    }\r\n}\r\n\r\n\r\n//*******************************************************************//\r\n//------------------ Contract to Manage Ownership -------------------//\r\n//*******************************************************************//\r\n    \r\ncontract owned {\r\n    address payable public owner;\r\n    address payable internal newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address payable _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    //this flow is to prevent transferring ownership to wrong wallet by mistake\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n \r\n\r\n    \r\n//****************************************************************************//\r\n//---------------------        MAIN CODE STARTS HERE     ---------------------//\r\n//****************************************************************************//\r\n    \r\ncontract Banxcoin is owned {\r\n    \r\n\r\n    /*===============================\r\n    =         DATA STORAGE          =\r\n    ===============================*/\r\n\r\n    // Public variables of the token\r\n    using SafeMath for uint256;\r\n    string constant public name = \"Banx coin\";\r\n    string constant public symbol = \"BXN\";\r\n    uint256 constant public decimals = 18;\r\n    uint256 public totalSupply;\r\n    \r\n    address public burnAddress;     //This variable will hold the address of the contract or any address where the tokens will be sent to be burned\r\n    bool public safeguard;      //putting safeguard on will halt all non-owner functions\r\n\r\n    // Vesting related variables\r\n    uint256 public totalVestedTokens = 500000000 * (10**decimals);      // 500 million tokens vested\r\n    uint256 public monthlyVestingRelease = totalVestedTokens / 100;     // 1% of totalVestedTokens\r\n    uint256 public vestedTokensWithdrawn;                               // how many vested tokens withdrawn by owner\r\n    uint256 public deploymentTimestamp;\r\n    \r\n    \r\n    \r\n    // This creates a mapping with all data storage\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    mapping (address => bool) public frozenAccount;\r\n    mapping (address => bool) public transferAccounts;\r\n    mapping (address => bool) public burnAccounts;\r\n    mapping (address => bool) public minterAccounts;\r\n    mapping (address => bool) public creatorAccounts;\r\n\r\n\r\n\r\n    /*===============================\r\n    =       OPERATOR MODIFIERS      =\r\n    ===============================*/\r\n\r\n    //This allows only authorized transfer operators to transfer tokens\r\n    modifier onlyTransferOperator {\r\n        require(transferAccounts[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    //This allows only authorized burn operators to burn tokens\r\n    modifier onlyBurnOperator {\r\n        require(burnAccounts[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    //This allows only authorized minters to mint new tokens\r\n    modifier onlyMintOperator {\r\n        require(minterAccounts[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    //This allows only owners and authorized operator creators to create new operators\r\n    modifier onlyOwnerOrCreator {\r\n        require(creatorAccounts[msg.sender] || msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    /*===============================\r\n    =         PUBLIC EVENTS         =\r\n    ===============================*/\r\n\r\n    // This generates a public event of token transfer\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed from, address indexed to, uint256 value);\r\n        \r\n    // This notifies clients about the amount minted\r\n    event Mint(address indexed to, uint256 value);\r\n        \r\n    // This generates a public event for frozen (blacklisting) accounts\r\n    event FrozenAccounts(address target, bool frozen);\r\n    \r\n    // This will log approval of token Transfer\r\n    event Approval(address indexed from, address indexed spender, uint256 value);\r\n\r\n    //This will log the addition of operators\r\n    event AddOperator(address indexed operator, string  role);\r\n    \r\n    //This will log the removal of operators\r\n    event RemoveOperator(address indexed operator, string  role);\r\n    \r\n    //This will log any changes in the burn address\r\n    event UpdateBurnAddress(address indexed oldAddress, address indexed newAddress, uint256  timestamp);\r\n    \r\n    //This will log the vesting EVENTS\r\n    event WithdrawVestedTokens(address userAddress, uint256 numberOfTokens);\r\n\r\n    /*======================================\r\n    =       STANDARD ERC20 FUNCTIONS       =\r\n    ======================================*/\r\n\r\n    /* Internal transfer, only can be called by this contract */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        \r\n        //checking conditions\r\n        require(!safeguard);\r\n        require(!frozenAccount[_from]);                     // Check if sender is frozen\r\n        require(!frozenAccount[_to]);                       // Check if recipient is frozen\r\n        \r\n\t\tif(_to == burnAddress)\r\n\t\t{\r\n\t\t\tburn(_from, _value);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n            // overflow and undeflow checked by SafeMath Library\r\n            balanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the sender\r\n            balanceOf[_to] = balanceOf[_to].add(_value);        // Add the same to the recipient\r\n            \r\n            // emit Transfer event\r\n            emit Transfer(_from, _to, _value);\r\n\t\t}\r\n    }\r\n\r\n    /**\r\n        * Transfer tokens\r\n        *\r\n        * Send `_value` tokens to `_to` from your account\r\n        *\r\n        * @param _to The address of the recipient\r\n        * @param _value the amount to send\r\n        */\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        \r\n        //no need to check for input validations, as that is ruled by SafeMath\r\n        _transfer(msg.sender, _to, _value);\r\n        \r\n        return true;\r\n    }\r\n\r\n    /**\r\n        * Transfer tokens from other address\r\n        *\r\n        * Send `_value` tokens to `_to` in behalf of `_from`\r\n        *\r\n        * @param _from The address of the sender\r\n        * @param _to The address of the recipient\r\n        * @param _value the amount to send\r\n        */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        * Set allowance for other address\r\n        *\r\n        * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n        *\r\n        * @param _spender The address authorized to spend\r\n        * @param _value the max amount they can spend\r\n        */\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        require(!safeguard);\r\n        require(balanceOf[msg.sender] >= _value, \"Balance does not have enough tokens\");\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    /*=====================================\r\n    =       CUSTOM PUBLIC FUNCTIONS       =\r\n    ======================================*/\r\n    \r\n    constructor() public{\r\n        \r\n        //Setting deployment timestamp;\r\n        deploymentTimestamp = now;\r\n        \r\n        burnAddress = address(this);\r\n\r\n    }\r\n    \r\n    //just accept incoming ether\r\n    function () external payable {}\r\n\r\n    /**\r\n        * Destroy tokens\r\n        *\r\n        * Remove `_value` tokens from the system irreversibly\r\n        *\r\n        * @param _value the amount of money to burn\r\n        */\r\n    function burn(address _from, uint256 _value) internal returns (bool success) {\r\n\r\n        //checking of enough token balance is done by SafeMath\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);            // Subtract from the targeted balance\r\n        totalSupply = totalSupply.sub(_value);                      // Updates totalSupply\r\n        emit Burn(_from, burnAddress, _value);\r\n        emit Transfer(_from, burnAddress, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n        * Destroy tokens from user account by Burn Operator only\r\n        *\r\n        * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n        *\r\n        * @param _from the address of the sender\r\n        * @param _value the amount of money to burn\r\n        */\r\n    function burnFrom(address _from, uint256 _value) onlyBurnOperator public returns (bool success) {\r\n        \r\n        require(!safeguard);\r\n        \r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value); // Subtract from the sender's allowance\r\n        \r\n        burn(_from, _value);\r\n        \r\n        return true;\r\n    }\r\n\r\n\r\n    /** \r\n        * @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\r\n        * @param target Address to be frozen\r\n        * @param freeze either to freeze it or not\r\n        */\r\n    function freezeAccount(address target, bool freeze) onlyOwner public {\r\n            frozenAccount[target] = freeze;\r\n        emit  FrozenAccounts(target, freeze);\r\n    }\r\n    \r\n    /** \r\n        * @notice Create `mintedAmount` tokens and send it to `target`\r\n        * @param target Address to receive the tokens\r\n        * @param mintedAmount the amount of tokens it will receive\r\n        */\r\n    function _mintToken(address target, uint256 mintedAmount) internal {\r\n        \r\n        balanceOf[target] = balanceOf[target].add(mintedAmount);\r\n        totalSupply = totalSupply.add(mintedAmount);\r\n        emit Mint(target, mintedAmount);\r\n        emit Transfer(address(0), target, mintedAmount);\r\n    }\r\n    \r\n    function mintToken(address target, uint256 mintedAmount) onlyMintOperator public {\r\n        _mintToken(target, mintedAmount);\r\n    }\r\n\r\n\r\n\r\n    /**\r\n        * Owner can transfer tokens from contract to owner address\r\n        *\r\n        * When safeguard is true, then all the non-owner functions will stop working.\r\n        * When safeguard is false, then all the functions will resume working back again!\r\n        */\r\n    \r\n    function manualWithdrawTokens(uint256 tokenAmount) public onlyOwner{\r\n        // no need for overflow checking as that will be done in transfer function\r\n        _transfer(address(this), owner, tokenAmount);\r\n    }\r\n    \r\n    //Just in rare case, owner wants to transfer Ether from contract to owner address\r\n    function manualWithdrawEther()onlyOwner public{\r\n        address(owner).transfer(address(this).balance);\r\n    }\r\n    \r\n    /**\r\n        * Change safeguard status on or off\r\n        *\r\n        * When safeguard is true, then all the non-owner functions will stop working.\r\n        * When safeguard is false, then all the functions will resume working back again!\r\n        */\r\n    function changeSafeguardStatus() onlyOwner public{\r\n        if (safeguard == false){\r\n            safeguard = true;\r\n        }\r\n        else{\r\n            safeguard = false;    \r\n        }\r\n    }\r\n\r\n    //Owner can change the address which is used to send the tokens to burn.\r\n    function updateBurnAddress(address _burnAddress) onlyOwner public {\r\n        address oldAddress = burnAddress;\r\n        burnAddress = _burnAddress;\r\n        emit UpdateBurnAddress(oldAddress, _burnAddress, now);\r\n    }\r\n    \r\n\r\n    \r\n    \r\n    /*============================================\r\n    =   OPERATOR CREATION & DELETION FUNCTIONS   =\r\n    ============================================*/\r\n    \r\n\r\n    function addBurnAccount(address operator) onlyOwnerOrCreator public returns(bool) {\r\n        burnAccounts[operator] = true;\r\n        emit  AddOperator(operator, 'Burn');\r\n        return true;\r\n    }\r\n    \r\n    function removeBurnAccount(address operator) onlyOwnerOrCreator public returns(bool) {\r\n        burnAccounts[operator] = false;\r\n        emit  RemoveOperator(operator, 'Burn');\r\n        return true;\r\n    }\r\n\r\n    function addMinterAccount(address operator) onlyOwnerOrCreator public returns(bool) {\r\n        minterAccounts[operator] = true;\r\n        emit  AddOperator(operator, 'Minter');\r\n        return true;\r\n    }\r\n    \r\n    function removeMinterAccount(address operator) onlyOwnerOrCreator public returns(bool) {\r\n        minterAccounts[operator] = false;\r\n        emit  RemoveOperator(operator, 'Minter');\r\n        return true;\r\n    }\r\n    \r\n    function addCreatorAccount(address operator) onlyOwnerOrCreator public returns(bool) {\r\n        creatorAccounts[operator] = true;\r\n        emit  AddOperator(operator, 'Creator');\r\n        return true;\r\n    }\r\n    \r\n    function removeCreatorAccount(address operator) onlyOwnerOrCreator public returns(bool) {\r\n        creatorAccounts[operator] = false;\r\n        emit  RemoveOperator(operator, 'Creator');\r\n        return true;\r\n    }\r\n    \r\n    \r\n    /*============================================\r\n    =             VESTING FUNCTIONS              =\r\n    ============================================*/\r\n\r\n    // Function to view available vested tokens\r\n    function availableTokensFromVesting() public view returns(uint256) {\r\n        \r\n        uint256 currentTimeStamp = now;\r\n        uint256 vestingStartTimestamp = deploymentTimestamp + 5184000;  //deploy time plus 60*60*24*60 = 60 days after contract deployment\r\n        \r\n        if(currentTimeStamp < vestingStartTimestamp || vestedTokensWithdrawn >= totalVestedTokens)\r\n        {\r\n            return 0;\r\n        }\r\n        else\r\n        {\r\n            \r\n            uint256 timestampDiff = currentTimeStamp - vestingStartTimestamp;\r\n            uint256 numMonths = 1 + (timestampDiff / 2592000);        //finding months after vesting release time\r\n            uint256 tokensAllTime = monthlyVestingRelease * numMonths;\r\n            \r\n            return tokensAllTime - vestedTokensWithdrawn;\r\n            \r\n        }\r\n\r\n   }\r\n   \r\n   //function to withdraw desired number of tokens from the available tokens.\r\n   function withdrawVestingTokens() onlyOwner public returns (bool) {\r\n       \r\n       uint256 tokensToWithdraw = availableTokensFromVesting();\r\n       \r\n       if(tokensToWithdraw > 0){\r\n           \r\n           _mintToken(msg.sender, tokensToWithdraw);\r\n           vestedTokensWithdrawn += tokensToWithdraw;\r\n\r\n           emit WithdrawVestedTokens(msg.sender, tokensToWithdraw);\r\n           return true;\r\n       }\r\n   }\r\n   \r\n   \r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"transferAccounts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"addCreatorAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestedTokensWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minterAccounts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"removeMinterAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"changeSafeguardStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalVestedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"removeBurnAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"manualWithdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_burnAddress\",\"type\":\"address\"}],\"name\":\"updateBurnAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"addMinterAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"creatorAccounts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"safeguard\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deploymentTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawVestingTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"burnAccounts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"removeCreatorAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"availableTokensFromVesting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"monthlyVestingRelease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"addBurnAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"manualWithdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenAccounts\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"}],\"name\":\"AddOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"}],\"name\":\"RemoveOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateBurnAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"WithdrawVestedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Banxcoin","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://8a8b5c2715a224770847318572130338275f1d2623e28e5e03d8ac4176cdd959"}]}