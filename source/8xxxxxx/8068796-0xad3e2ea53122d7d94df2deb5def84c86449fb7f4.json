{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/lib/interface/IVirtContractResolver.sol\r\n\r\npragma solidity ^0.5.1;\r\n\r\n/**\r\n * @title VirtContractResolver interface\r\n */\r\ninterface IVirtContractResolver {\r\n    function deploy(bytes calldata _code, uint _nonce) external returns (bool);\r\n    \r\n    function resolve(bytes32 _virtAddr) external view returns (address);\r\n\r\n    event Deploy(bytes32 indexed virtAddr);\r\n}\r\n\r\n// File: contracts/VirtContractResolver.sol\r\n\r\npragma solidity ^0.5.1;\r\n\r\n\r\n/**\r\n * @title Virtual Contract Resolver contract\r\n * @notice Implementation of the Virtual Contract Resolver.\r\n * @dev this resolver establishes the mapping from off-chain address to on-chain address\r\n */\r\ncontract VirtContractResolver is IVirtContractResolver {\r\n    mapping(bytes32 => address) virtToRealMap;\r\n\r\n    /**\r\n     * @notice Deploy virtual contract to an on-chain address\r\n     * @param _code bytes of virtual contract code\r\n     * @param _nonce nonce associated to virtual contract code\r\n     * @return true if deployment succeeds\r\n     */\r\n    function deploy(bytes calldata _code, uint _nonce) external returns(bool) {\r\n        bytes32 virtAddr = keccak256(abi.encodePacked(_code, _nonce));\r\n        bytes memory c = _code;\r\n        require(virtToRealMap[virtAddr] == address(0), \"Current real address is not 0\");\r\n        address deployedAddress;\r\n        assembly {\r\n            deployedAddress := create(0, add(c, 32), mload(c))\r\n        }\r\n        require(deployedAddress != address(0), 'Create contract failed.');\r\n\r\n        virtToRealMap[virtAddr] = deployedAddress;\r\n        emit Deploy(virtAddr);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice look up the deployed address of a virtual address\r\n     * @param _virtAddr the virtual address to be looked up\r\n     * @return the deployed address of the input virtual address\r\n     */\r\n    function resolve(bytes32 _virtAddr) external view returns(address) {\r\n        require(virtToRealMap[_virtAddr] != address(0), 'Nonexistent virtual address');\r\n        return virtToRealMap[_virtAddr];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_virtAddr\",\"type\":\"bytes32\"}],\"name\":\"resolve\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_code\",\"type\":\"bytes\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"deploy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"virtAddr\",\"type\":\"bytes32\"}],\"name\":\"Deploy\",\"type\":\"event\"}]","ContractName":"VirtContractResolver","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"byzantium","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://86095bccbd167fc366930c118a12ab7e1eaee166a47c07e081e0ddf4eb420d60"}]}