{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.9;\r\n\r\n/**\r\n * @title Math operations with safety checks for overflows.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Performs addition.\r\n     * @param a first number\r\n     * @param b second number\r\n     * @return c addtion\r\n     */\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a && c >= b);\r\n    }\r\n\r\n    /**\r\n     * @dev Performs subtraction.\r\n     * @param a first number\r\n     * @param b second number, must be less or equal to a\r\n     * @return c difference\r\n     */\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Performs multiplication.\r\n     * @param a first number\r\n     * @param b second number\r\n     * @return c addtion\r\n     */\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n\r\n    /**\r\n     * @dev Performs division.\r\n     * @param a first number\r\n     * @param b second number, cannot be 0\r\n     * @return c addtion\r\n     */\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n *  @title Binfinity token contract.\r\n */\r\ncontract BinfinityToken {\r\n    using SafeMath for uint;\r\n    \r\n    /**\r\n     * Token name.\r\n     */\r\n    string public name;\r\n\r\n    /**\r\n     * Token symbol.\r\n     */\r\n    string public symbol;\r\n\r\n    /**\r\n     * Number of decimal places.\r\n     */\r\n    uint8 public decimals;\r\n    \r\n    /**\r\n     * Total suply.\r\n     */\r\n    uint public totalSupply;\r\n\r\n    /**\r\n     * Contract owner.\r\n     */\r\n    address payable public owner;\r\n    \r\n    /**\r\n     * Balances.\r\n     */\r\n    mapping (address => uint) public balanceOf;\r\n    \r\n    /**\r\n     * Freezings.\r\n     */\r\n    mapping (address => uint) public freezeOf;\r\n    \r\n    /**\r\n     * Allowed transfers.\r\n     */\r\n    mapping (address => mapping (address => uint)) public allowance;\r\n\r\n    /**\r\n     * @dev Creates new instance. All tokens will be assigned to the contract owner.\r\n     * @param initialSupply initial token supply\r\n     * @param tokenName token name\r\n     * @param numDecimals number of decimal units\r\n     * @param tokenSymbol symbol of the token\r\n     */\r\n    constructor(string memory tokenName, string memory tokenSymbol, uint initialSupply, uint8 numDecimals) public {\r\n        require(initialSupply > 0);\r\n        require(numDecimals >= 0);\r\n        balanceOf[msg.sender] = initialSupply;\r\n        totalSupply = initialSupply;\r\n        name = tokenName;\r\n        symbol = tokenSymbol;\r\n        decimals = numDecimals;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function which allows to accept payments.\r\n     */\r\n    function() external payable {\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers tokens from sender to the specified address.\r\n     * @param _to destination address\r\n     * @param _value number of tokens\r\n     * @return success true on success\r\n     */\r\n    function transfer(address _to, uint _value) external returns (bool success){\r\n        require(_to != address(0x0));\r\n        require(_value > 0); \r\n        require(balanceOf[msg.sender] >= _value);\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Allow another contract to spend tokens on the caller behalf.\r\n     * Subsequent calls to this methods overrides the previous values.\r\n     * @param _spender allowed spender who can spend tokens from callers account\r\n     * @param _value allowed number of tokens\r\n     * @return success true on success\r\n     */\r\n    function approve(address _spender, uint _value) external returns (bool success) {\r\n        require(_value >= 0);\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n       \r\n\r\n    /**\r\n     * @dev Transfers tokens from the specified address (if allowed).\r\n     * @param _from address where the tyokens are taken from\r\n     * @param _to address where the tokens are sent to\r\n     * @param _value number of tokens to transfer\r\n     * @return success true on success\r\n     */\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success) {\r\n        require(_to != address(0x0));\r\n        require(_value > 0); \r\n        require(balanceOf[_from] >= _value);\r\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\r\n        require(_value <= allowance[_from][msg.sender]);\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Burns tokens.\r\n     * @param _value the number of token to burn\r\n     * @return success true on success\r\n     */\r\n    function burn(uint _value) external returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);\r\n        require(_value > 0);\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Freezes tokens.\r\n     * @param _value amount to freeze\r\n     * @return success true on success\r\n     */\r\n    function freeze(uint _value) external returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);\r\n        require(_value > 0);\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n        freezeOf[msg.sender] = freezeOf[msg.sender].add(_value);\r\n        emit Freeze(msg.sender, _value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Unfreezes tokens.\r\n     * @param _value amount to unfreeze\r\n     * @return success true on success\r\n     */\r\n    function unfreeze(uint _value) external returns (bool success) {\r\n        require(freezeOf[msg.sender] >= _value);\r\n        require(_value > 0);\r\n        freezeOf[msg.sender] = freezeOf[msg.sender].sub(_value);\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(_value);\r\n        emit Unfreeze(msg.sender, _value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Withdraws ethereum.\r\n     * @param amount amount to withdraw\r\n     */\r\n    function withdrawEther(uint amount) external {\r\n        require(msg.sender == owner);\r\n        owner.transfer(amount);\r\n    }\r\n \r\n    /**\r\n     * @dev Transfer event.\r\n     * @param _from payer address\r\n     * @param _to revceiver address\r\n     * @param _value number of transfered tokens\r\n     */\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n\r\n    /**\r\n     * @dev Approval event.\r\n     * @param _owner owner of the tokens\r\n     * @param _spender who is allowed to spend tokens\r\n     * @param _value the amount which can be spend\r\n     */\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    \r\n    /**\r\n     * @dev Burn event.\r\n     * @param _from source account from which tokens are burned\r\n     * @param _value number of burend tokens\r\n     */\r\n    event Burn(address indexed _from, uint _value);\r\n    \r\n    /**\r\n     * @dev Token freezing event.\r\n     * @param _from account where tokens got frozen\r\n     * @param _value number of frozen tokens\r\n     */\r\n    event Freeze(address indexed _from, uint _value);\r\n    \r\n    /**\r\n     * @dev Token unfreezing event.\r\n     * @param _from account where tokens got released\r\n     * @param _value number of unfrozen tokens\r\n     */\r\n    event Unfreeze(address indexed _from, uint _value);\r\n        \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"unfreeze\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"freezeOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"freeze\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"numDecimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Unfreeze\",\"type\":\"event\"}]","ContractName":"BinfinityToken","CompilerVersion":"v0.5.9+commit.e560f70d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000f8277896582678ac0000000000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000e42696e66696e69747920436f696e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034246430000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://1a812560a30dbc39c25bf407ea07ceeedda341ef4224375eba95b893c1086e89"}]}