{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.11;\r\n\r\n\r\n/**\r\n * @title DharmaUpgradeBeaconEnvoy\r\n * @author 0age\r\n * @notice This contract calls into an upgrade beacon on behalf of a controller\r\n * to retrieve the implementation address, since a call from the controller will\r\n * instead trigger an update of the upgrade beacon's implementation.\r\n */\r\ncontract DharmaUpgradeBeaconEnvoy {\r\n  /**\r\n   * @notice View function to check the existing implementation on a given\r\n   * beacon. This is accomplished via a staticcall to the beacon with no data,\r\n   * and the beacon will return an abi-encoded implementation address.\r\n   * @param beacon Address of the upgrade beacon to check for an implementation.\r\n   * @return implementation Address of the implementation.\r\n   */\r\n  function getImplementation(\r\n    address beacon\r\n  ) external view returns (address implementation) {\r\n    // Perform the staticcall into the supplied upgrade beacon.\r\n    (bool ok, bytes memory returnData) = beacon.staticcall(\"\");\r\n\r\n    // Revert if underlying staticcall reverts, passing along revert message.\r\n    require(ok, string(returnData));\r\n\r\n    // Ensure that the data returned from the beacon is the correct length.\r\n    require(returnData.length == 32, \"Return data must be exactly 32 bytes.\");\r\n\r\n    // Decode the address from the returned data and return it to the caller.\r\n    implementation = abi.decode(returnData, (address));\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DharmaUpgradeBeaconEnvoy","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://107734a2fcd1d762a5f847530eab7552a2346f80ce0afa376570475d354bab32"}]}