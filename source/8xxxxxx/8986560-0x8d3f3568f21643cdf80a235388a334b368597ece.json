{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.12;\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// ProfitLineInc contract\r\ncontract IPO  {\r\n    using SafeMath for uint;\r\n    // IPO specifics\r\n    \r\n    address payable public hubFundAdmin;\r\n    uint256 public payoutPot;\r\n    // interface\r\n    PlincInterface constant hub_ = PlincInterface(0xd5D10172e8D8B84AC83031c16fE093cba4c84FC6);// hubplinc\r\n    // setup vars\r\n    mapping(uint256 => uint256)public  bondsOutstanding; // redeemablebonds switched to uint256 instead of address\r\n    uint256 public totalSupplyBonds; //totalsupply of bonds outstanding\r\n    mapping(address => uint256)public  playerVault; // in contract eth balance\r\n    mapping(uint256 => uint256) public  totalsupplyStake; // stake totalsupply\r\n    \r\n    mapping(uint256 => uint256)public  pendingFills; //eth to fill bonds\r\n    \r\n    mapping(address => uint256)public  playerId; //investor to playerid\r\n    mapping(uint256 => uint256)public  IPOtoID; //IPO to playerid\r\n    mapping(uint256 => address payable)public  IdToAdress; //address which is owner of ID\r\n    uint256  public nextPlayerID;\r\n    \r\n    uint256 public nextIPO;// IPO registration number\r\n    mapping(uint256 => address)public  IPOcreator; \r\n    mapping(uint256 => bool)public  IPOhasTarget;\r\n    mapping(uint256 => uint256)public  IPOtarget;\r\n    mapping(uint256 => bool)public  IPOisActive;\r\n    mapping(uint256 => bytes32)public  IPOinfo;\r\n    uint256 public openingFee;\r\n    \r\n    //sale vars\r\n    mapping(uint256 =>  mapping(address => uint256))public  IPOpurchases;// IPO - address - amount\r\n    mapping(uint256 =>  mapping(uint256 => address))public  IPOadresslist;// IPO - adressno - address\r\n    mapping(uint256 => uint256)public  IPOnextAddressPointer;\r\n    mapping(uint256 => uint256)public  IPOamountFunded;\r\n    mapping(uint256 =>  uint256)public  IdVaultedEths;// IPO - address - amount\r\n    \r\n    // extra  functionallity\r\n    mapping(address =>  mapping(uint256 => uint256))public  funcAmount;\r\n    mapping(address =>  mapping(uint256 => address))public  funcAddress;\r\n    // ranking\r\n    mapping(uint256 => uint256)public  IPOprofile;\r\n    mapping(uint256 => bool)public  UIblacklist;\r\n    \r\n    // IPO functions\r\n    function setFees(uint256 amount) public {\r\n        require(msg.sender == hubFundAdmin);\r\n        openingFee = amount;\r\n    }\r\n    \r\n    function registerIPO(address payable creator,bool hasTarget, uint256 target, bytes32 info) public payable updateAccount(playerId[msg.sender]){\r\n        uint256 next = nextIPO;\r\n        uint256 value = msg.value;\r\n        require(value >= openingFee);\r\n        playerVault[hubFundAdmin] = playerVault[hubFundAdmin] + value; \r\n        // write IPO in Investorbook\r\n        \r\n           IPOtoID[next] = nextPlayerID; //retrieve this ID to know the location of IPO's bonds\r\n           IdToAdress[nextPlayerID] = creator; //register who can withdraw from the ID\r\n           fetchdivs(nextPlayerID);\r\n           nextPlayerID++;\r\n            \r\n        // set creator\r\n        IPOcreator[next] = creator;\r\n        // set hasTarget\r\n        IPOhasTarget[next] = hasTarget;\r\n        // set target\r\n        IPOtarget[next] = target;\r\n        // set info\r\n        IPOinfo[next] = info;\r\n        \r\n        // activate IPO\r\n        IPOisActive[next] = true;\r\n        // update IPO pointer\r\n        nextIPO++;\r\n        emit IPOCreated(creator,hasTarget,target);\r\n    }\r\n    function fundIPO(uint256 IPOidentifier) public payable updateAccount(playerId[msg.sender])updateAccount(IPOtoID[IPOidentifier]){\r\n        // check if IPO is active\r\n        uint256 value = msg.value;\r\n        address payable sender = msg.sender;\r\n        require(IPOisActive[IPOidentifier] == true);\r\n        // check if it has target\r\n        if(IPOhasTarget[IPOidentifier] == true)\r\n        {\r\n            // check if funding vs target overflow\r\n            if(IPOamountFunded[IPOidentifier].add(value)  > IPOtarget[IPOidentifier]){\r\n                // add excess to playervault\r\n                playerVault[sender] = playerVault[sender].add(IPOamountFunded[IPOidentifier].add(value)).sub(IPOtarget[IPOidentifier]);\r\n                // change value to amount of able to fund\r\n                value = IPOtarget[IPOidentifier].sub(IPOamountFunded[IPOidentifier]);\r\n            }\r\n        }\r\n         // update Investorbook\r\n        if(playerId[sender] == 0){\r\n           playerId[sender] = nextPlayerID;\r\n           IdToAdress[nextPlayerID] = sender;\r\n           fetchdivs(nextPlayerID);\r\n           nextPlayerID++;\r\n            }\r\n        // Update bonds sender\r\n        bondsOutstanding[playerId[sender]] = bondsOutstanding[playerId[sender]].add(value);\r\n        // update bonds IPOcreator\r\n        bondsOutstanding[IPOtoID[IPOidentifier]] = bondsOutstanding[IPOtoID[IPOidentifier]].add(value.div(10));\r\n        // ADJUST totalsupply\r\n        totalSupplyBonds = totalSupplyBonds.add(value).add(value.div(10));\r\n        // update IPOpurchases for the sender\r\n        IPOpurchases[IPOidentifier][sender] =  IPOpurchases[IPOidentifier][sender].add(value);\r\n        // add address to IPOadresslist\r\n        IPOadresslist[IPOidentifier][IPOnextAddressPointer[IPOidentifier]] = sender;\r\n        // update IPOnextAddressPointer\r\n        IPOnextAddressPointer[IPOidentifier] = IPOnextAddressPointer[IPOidentifier].add(1);\r\n        // update IPOamountFunded\r\n        IPOamountFunded[IPOidentifier] = IPOamountFunded[IPOidentifier].add(value);\r\n        //buy hub bonds\r\n        hub_.buyBonds.value(value)(0x2e66aa088ceb9Ce9b04f6B9B7482fBe559732A70) ;\r\n        emit IPOFunded(sender,value,IPOidentifier);\r\n    }\r\n    // PIMP UPGRADE START\r\n    function giftExcessBonds(address payable _IPOidentifier) public payable updateAccount(playerId[msg.sender])updateAccount(playerId[_IPOidentifier]){\r\n        // check if IPO is active\r\n        uint256 value = msg.value;\r\n        address payable sender = msg.sender;\r\n        \r\n         // update Investorbook for sender\r\n        if(playerId[sender] == 0){\r\n           playerId[sender] = nextPlayerID;\r\n           IdToAdress[nextPlayerID] = sender;\r\n           fetchdivs(nextPlayerID);\r\n           nextPlayerID++;\r\n            }\r\n            // update Investorbook for giftee\r\n        if(playerId[_IPOidentifier] == 0){\r\n           playerId[_IPOidentifier] = nextPlayerID;\r\n           IdToAdress[nextPlayerID] = _IPOidentifier;\r\n           fetchdivs(nextPlayerID);\r\n           nextPlayerID++;\r\n            }\r\n        // Update bonds sender\r\n        bondsOutstanding[playerId[sender]] = bondsOutstanding[playerId[sender]].add(value);\r\n        // update bonds receiver\r\n        bondsOutstanding[playerId[_IPOidentifier]] = bondsOutstanding[playerId[_IPOidentifier]].add(value.div(10));\r\n        // ADJUST totalsupply\r\n        totalSupplyBonds = totalSupplyBonds.add(value).add(value.div(10));\r\n        //buy hub bonds\r\n        hub_.buyBonds.value(value)(0x2e66aa088ceb9Ce9b04f6B9B7482fBe559732A70) ;\r\n        emit payment(sender,IdToAdress[playerId[_IPOidentifier]],value );\r\n    }\r\n    function RebatePayment(address payable _IPOidentifier, uint256 refNumber) public payable updateAccount(playerId[msg.sender])updateAccount(playerId[_IPOidentifier]){\r\n        // check if IPO is active\r\n        uint256 value = msg.value;\r\n        address payable sender = msg.sender;\r\n        \r\n         // update Investorbook for sender\r\n        if(playerId[sender] == 0){\r\n           playerId[sender] = nextPlayerID;\r\n           IdToAdress[nextPlayerID] = sender;\r\n           fetchdivs(nextPlayerID);\r\n           nextPlayerID++;\r\n            }\r\n            // update Investorbook for giftee\r\n        if(playerId[_IPOidentifier] == 0){\r\n           playerId[_IPOidentifier] = nextPlayerID;\r\n           IdToAdress[nextPlayerID] = _IPOidentifier;\r\n           fetchdivs(nextPlayerID);\r\n           nextPlayerID++;\r\n            }\r\n        // Update bonds sender\r\n        bondsOutstanding[playerId[sender]] = bondsOutstanding[playerId[sender]].add(value);\r\n        // update bonds receiver\r\n        bondsOutstanding[playerId[_IPOidentifier]] = bondsOutstanding[playerId[_IPOidentifier]].add(value.div(10));\r\n        // ADJUST totalsupply\r\n        totalSupplyBonds = totalSupplyBonds.add(value).add(value.div(10));\r\n        //buy hub bonds\r\n        hub_.buyBonds.value(value)(0x2e66aa088ceb9Ce9b04f6B9B7482fBe559732A70) ;\r\n        emit payment(sender,IdToAdress[playerId[_IPOidentifier]],value );\r\n        // extra func\r\n        funcAmount[_IPOidentifier][refNumber] = value;\r\n        funcAmount[_IPOidentifier][refNumber] = value;\r\n    }\r\n    function giftAll(address payable _IPOidentifier) public payable updateAccount(playerId[msg.sender])updateAccount(playerId[_IPOidentifier]){\r\n        // check if IPO is active\r\n        uint256 value = msg.value;\r\n        address payable sender = msg.sender;\r\n        \r\n         // update Investorbook for sender\r\n        if(playerId[sender] == 0){\r\n           playerId[sender] = nextPlayerID;\r\n           IdToAdress[nextPlayerID] = sender;\r\n           fetchdivs(nextPlayerID);\r\n           nextPlayerID++;\r\n            }\r\n            // update Investorbook for giftee\r\n        if(playerId[_IPOidentifier] == 0){\r\n           playerId[_IPOidentifier] = nextPlayerID;\r\n           IdToAdress[nextPlayerID] = _IPOidentifier;\r\n           fetchdivs(nextPlayerID);\r\n           nextPlayerID++;\r\n            }\r\n        // Update bonds sender\r\n        bondsOutstanding[playerId[_IPOidentifier]] = bondsOutstanding[playerId[_IPOidentifier]].add(value);\r\n        // update bonds receiver\r\n        bondsOutstanding[playerId[_IPOidentifier]] = bondsOutstanding[playerId[_IPOidentifier]].add(value.div(10));\r\n        // ADJUST totalsupply\r\n        totalSupplyBonds = totalSupplyBonds.add(value).add(value.div(10));\r\n        //buy hub bonds\r\n        hub_.buyBonds.value(value)(0x2e66aa088ceb9Ce9b04f6B9B7482fBe559732A70) ;\r\n        emit payment(sender,IdToAdress[playerId[_IPOidentifier]],value );\r\n    }\r\n    // PIMP upgrade end\r\n    function changeIPOstate(uint256 IPOidentifier, bool state) public {\r\n        address sender = msg.sender;\r\n        require(sender == IPOcreator[IPOidentifier]);\r\n        // activate or deactive IPO\r\n        IPOisActive[IPOidentifier] = state;\r\n    }\r\n    function changeUIblacklist(uint256 IPOidentifier, bool state) public {\r\n        \r\n        address sender = msg.sender;\r\n        require(sender == hubFundAdmin);\r\n        // activate or deactive IPO for UI\r\n        UIblacklist[IPOidentifier] = state;\r\n    }\r\n    function changeIPOinfo(uint256 IPOidentifier, bytes32 info) public {\r\n        address sender = msg.sender;\r\n        require(sender == IPOcreator[IPOidentifier]);\r\n        // set info\r\n        IPOinfo[IPOidentifier] = info;\r\n        \r\n    }\r\n    // pay to get higher visibillity\r\n    function RaiseProfile(uint256 IPOidentifier) public payable updateAccount(playerId[msg.sender])updateAccount(playerId[hubFundAdmin]){\r\n        // check if IPO is active\r\n        uint256 value = msg.value;\r\n        address sender = msg.sender;\r\n        require(IPOisActive[IPOidentifier] == true);\r\n        \r\n        // Update bonds sender\r\n        bondsOutstanding[playerId[sender]] = bondsOutstanding[playerId[sender]].add(value);\r\n        // update bonds admin\r\n        bondsOutstanding[playerId[hubFundAdmin]] = bondsOutstanding[playerId[hubFundAdmin]].add(value.div(10));\r\n        // raise profile of IPO\r\n        IPOprofile[IPOidentifier] = IPOprofile[IPOidentifier].add(value);\r\n        // adjust totalSupplyBonds\r\n        totalSupplyBonds = totalSupplyBonds.add(value).add(value.div(10));\r\n        //buy hub bonds\r\n        hub_.buyBonds.value(value)(0x2e66aa088ceb9Ce9b04f6B9B7482fBe559732A70) ;\r\n    }\r\n    //div setup type bonds\r\n    uint256 public pointMultiplier = 10e18;\r\n    struct Account {\r\n        uint256 owned;\r\n        uint256 lastDividendPoints;\r\n        }\r\n    mapping(uint256=>Account)public  accounts;\r\n    \r\n    uint256 public totalDividendPoints;\r\n    uint256 public unclaimedDividends;\r\n\r\n    function dividendsOwing(uint256 account) public view returns(uint256) {\r\n        uint256 newDividendPoints = totalDividendPoints.sub(accounts[account].lastDividendPoints);\r\n        return (bondsOutstanding[account] * newDividendPoints) / pointMultiplier;\r\n    }\r\n    function fetchdivs(uint256 toupdate) public updateAccount(toupdate){}\r\n    \r\n    \r\n    modifier updateAccount(uint256 account) {\r\n        uint256 owing = dividendsOwing(account);\r\n        if(owing > 0) {\r\n            \r\n            unclaimedDividends = unclaimedDividends.sub(owing);\r\n            pendingFills[account] = pendingFills[account].add(owing);\r\n        }\r\n        accounts[account].lastDividendPoints = totalDividendPoints;\r\n        _;\r\n        }\r\n    function () external payable{} // needs for divs\r\n    function vaultToWallet(uint256 _ID) public {\r\n        \r\n        address payable _sendTo = IdToAdress[_ID];\r\n        require(playerVault[IdToAdress[_ID]] > 0);\r\n        //require(IdToAdress[_ID] = _sender);\r\n        uint256 value = playerVault[IdToAdress[_ID]];\r\n        playerVault[_sendTo] = 0;\r\n        _sendTo.transfer(value);\r\n        emit cashout(_sendTo,value);\r\n    }\r\n    \r\n    function fillBonds (uint256 bondsOwner) updateAccount(bondsOwner) public {\r\n        uint256 pendingz = pendingFills[bondsOwner];\r\n        require(bondsOutstanding[bondsOwner] > 1000 && pendingz > 1000);\r\n        if(pendingz > bondsOutstanding[bondsOwner]){\r\n            // if has excess fills, excess to redistibution\r\n            payoutPot = payoutPot.add(pendingz.sub(bondsOutstanding[bondsOwner]));\r\n            pendingz = bondsOutstanding[bondsOwner];\r\n            \r\n        }\r\n        //require(pendingz <= bondsOutstanding[bondsOwner]);\r\n        // empty the pendings\r\n        pendingFills[bondsOwner] = 0;\r\n        // decrease bonds outstanding\r\n        bondsOutstanding[bondsOwner] = bondsOutstanding[bondsOwner].sub(pendingz);\r\n        // adjust totalSupplyBonds\r\n        totalSupplyBonds = totalSupplyBonds.sub(pendingz);\r\n        // add to vault\r\n        playerVault[IdToAdress[bondsOwner]] = playerVault[IdToAdress[bondsOwner]].add(pendingz);\r\n        // count amount for transparancy IPO\r\n        IdVaultedEths[bondsOwner] = IdVaultedEths[bondsOwner].add(pendingz);\r\n        \r\n    }\r\n    function setHubAuto(uint256 percentage) public{\r\n        require(msg.sender == hubFundAdmin);\r\n        hub_.setAuto(percentage);\r\n    }\r\n    function fetchHubVault() public{\r\n        \r\n        uint256 value = hub_.playerVault(address(this));\r\n        require(value >0);\r\n        require(msg.sender == hubFundAdmin);\r\n        hub_.vaultToWallet();\r\n        payoutPot = payoutPot.add(value);\r\n    }\r\n    function fetchHubPiggy() public{\r\n        \r\n        uint256 value = hub_.piggyBank(address(this));\r\n        require(value >0);\r\n        hub_.piggyToWallet();\r\n        payoutPot = payoutPot.add(value);\r\n    }\r\n    function potToPayout() public {\r\n        uint256 value = payoutPot;\r\n        payoutPot = 0;\r\n        require(value > 1 finney);\r\n        totalDividendPoints = totalDividendPoints.add(value.mul(pointMultiplier).div(totalSupplyBonds));\r\n        unclaimedDividends = unclaimedDividends.add(value);\r\n        emit bondsMatured(value);\r\n    }    \r\n    constructor()\r\n        public\r\n        \r\n    {\r\n        hubFundAdmin = 0x2e66aa088ceb9Ce9b04f6B9B7482fBe559732A70;// change to new address for marketing fund\r\n        playerId[hubFundAdmin] = 1;\r\n        IdToAdress[1] = hubFundAdmin;\r\n        nextPlayerID = 2;\r\n        hub_.setAuto(10);\r\n        openingFee = 0.1 ether;\r\n    }\r\n\r\n// UI helper functions\r\n    function getIPOpurchases(uint256 IPOidentifier) public view returns(address[] memory _funders, uint256[] memory owned){\r\n        uint i;\r\n          address[] memory _locationOwner = new address[](IPOnextAddressPointer[IPOidentifier]); //address\r\n          uint[] memory _locationData = new uint[](IPOnextAddressPointer[IPOidentifier]); //amount invested \r\n            bool checkpoint;\r\n          for(uint x = 0; x < IPOnextAddressPointer[IPOidentifier]; x+=1){\r\n              checkpoint = false;\r\n                for(uint y = 0; y < IPOnextAddressPointer[IPOidentifier]; y+=1)\r\n                {\r\n                    if(_locationOwner[y] ==IPOadresslist[IPOidentifier][i])\r\n                    {\r\n                        checkpoint = true;\r\n                    }\r\n                }\r\n                    if (checkpoint == false)\r\n                    {\r\n                    _locationOwner[i] = IPOadresslist[IPOidentifier][i];\r\n                    _locationData[i] = IPOpurchases[IPOidentifier][IPOadresslist[IPOidentifier][i]];\r\n                    }\r\n              i+=1;\r\n            }\r\n          \r\n          return (_locationOwner,_locationData);\r\n    }\r\n    \r\n    function getHubInfo() public view returns(uint256 piggy){\r\n        uint256 _piggy = hub_.piggyBank(address(this));\r\n        return(_piggy);\r\n    }\r\n    function getPlayerInfo() public view returns(address[] memory _Owner, uint256[] memory locationData,address[] memory infoRef ){\r\n          uint i;\r\n          address[] memory _locationOwner = new address[](nextPlayerID); //address\r\n          uint[] memory _locationData = new uint[](nextPlayerID*4); //bonds - divs - pending - vault \r\n          address[] memory _info = new address[](nextPlayerID*2);\r\n          //bool[] memory _locationData2 = new bool[](nextPlayerID); //isAlive\r\n          uint y;\r\n          uint z;\r\n          for(uint x = 0; x < nextPlayerID; x+=1){\r\n            \r\n             \r\n                _locationOwner[i] = IdToAdress[i];\r\n                _locationData[y] = bondsOutstanding[i];\r\n                _locationData[y+1] = dividendsOwing(i);\r\n                _locationData[y+2] = pendingFills[i];\r\n                _locationData[y+3] = playerVault[IdToAdress[i]];\r\n                _info[z] = IdToAdress[i];\r\n                _info[z+1] = IdToAdress[i];\r\n                \r\n                //_locationData2[i] = allowAutoInvest[IdToAdress[i]];\r\n              y += 4;\r\n              z += 2;\r\n              i+=1;\r\n            }\r\n          \r\n          return (_locationOwner,_locationData, _info);\r\n        }\r\n        function getIPOInfo(address user) public view returns(address[] memory _Owner, uint256[] memory locationData , bool[] memory states, bytes32[] memory infos){\r\n          uint i;\r\n          address[] memory _locationOwner = new address[](nextIPO); // IPO creator\r\n          uint[] memory _locationData = new uint[](nextIPO * 6); // IPOtarget - IPOamountFunded - IPOprofile - owned\r\n          bool[] memory _states = new bool[](nextIPO * 3); //hastarget - isactive - isblacklisted\r\n          bytes32[] memory _infos = new bytes32[](nextIPO);// info - info2 info3\r\n          uint y;\r\n          uint z;\r\n          for(uint x = 0; x < nextIPO; x+=1){\r\n            \r\n                _locationOwner[i] = IPOcreator[i];\r\n                _locationData[y] = IPOtarget[i];\r\n                _locationData[y+1] = IPOamountFunded[i];\r\n                _locationData[y+2] = IPOprofile[i];\r\n                _locationData[y+3] = IPOpurchases[i][user];\r\n                _locationData[y+4] = IdVaultedEths[IPOtoID[i]];\r\n                _locationData[y+5] = IPOtoID[i];\r\n                _states[z] = IPOhasTarget[i];\r\n                _states[z+1] = IPOisActive[i];\r\n                _states[z+2] = UIblacklist[i];\r\n                _infos[i] = IPOinfo[i];\r\n                \r\n              y += 6;\r\n              z += 3;\r\n              i+=1;\r\n            }\r\n          \r\n          return (_locationOwner,_locationData, _states, _infos);\r\n        }\r\n  // events\r\n  \r\nevent IPOFunded(address indexed Funder, uint256 indexed amount, uint256 indexed IPOidentifier);\r\nevent cashout(address indexed player , uint256 indexed ethAmount);\r\nevent bondsMatured(uint256 indexed amount);\r\nevent IPOCreated(address indexed owner, bool indexed hastarget, uint256 indexed target);\r\nevent payment(address indexed sender,address indexed receiver, uint256 indexed amount);\r\n\r\n}\r\n\r\ninterface PlincInterface {\r\n    \r\n    function IdToAdress(uint256 index) external view returns(address);\r\n    function nextPlayerID() external view returns(uint256);\r\n    function bondsOutstanding(address player) external view returns(uint256);\r\n    function playerVault(address player) external view returns(uint256);\r\n    function piggyBank(address player) external view returns(uint256);\r\n    function vaultToWallet() external ;\r\n    function piggyToWallet() external ;\r\n    function setAuto (uint256 percentage)external ;\r\n    function buyBonds( address referral)external payable ;\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"hastarget\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"name\":\"IPOCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Funder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"IPOidentifier\",\"type\":\"uint256\"}],\"name\":\"IPOFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bondsMatured\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"cashout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payment\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"IPOadresslist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"IPOamountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"IPOcreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"IPOhasTarget\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"IPOinfo\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"IPOisActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"IPOnextAddressPointer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"IPOprofile\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"IPOpurchases\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"IPOtarget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"IPOtoID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"IdToAdress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"IdVaultedEths\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"IPOidentifier\",\"type\":\"uint256\"}],\"name\":\"RaiseProfile\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_IPOidentifier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"refNumber\",\"type\":\"uint256\"}],\"name\":\"RebatePayment\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"UIblacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"owned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDividendPoints\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bondsOutstanding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"IPOidentifier\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"info\",\"type\":\"bytes32\"}],\"name\":\"changeIPOinfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"IPOidentifier\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"changeIPOstate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"IPOidentifier\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"changeUIblacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"account\",\"type\":\"uint256\"}],\"name\":\"dividendsOwing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fetchHubPiggy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fetchHubVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toupdate\",\"type\":\"uint256\"}],\"name\":\"fetchdivs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bondsOwner\",\"type\":\"uint256\"}],\"name\":\"fillBonds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funcAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funcAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"IPOidentifier\",\"type\":\"uint256\"}],\"name\":\"fundIPO\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHubInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"piggy\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getIPOInfo\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_Owner\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"locationData\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"states\",\"type\":\"bool[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"infos\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"IPOidentifier\",\"type\":\"uint256\"}],\"name\":\"getIPOpurchases\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_funders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"owned\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPlayerInfo\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_Owner\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"locationData\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"infoRef\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_IPOidentifier\",\"type\":\"address\"}],\"name\":\"giftAll\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_IPOidentifier\",\"type\":\"address\"}],\"name\":\"giftExcessBonds\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hubFundAdmin\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextIPO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextPlayerID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payoutPot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingFills\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pointMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"potToPayout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"hasTarget\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"info\",\"type\":\"bytes32\"}],\"name\":\"registerIPO\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"setHubAuto\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDividendPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupplyBonds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalsupplyStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unclaimedDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ID\",\"type\":\"uint256\"}],\"name\":\"vaultToWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"IPO","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU LGPLv3","SwarmSource":"bzzr://66321f7fa8cd816c40e067902a329c2dd65eed8c60b19e8737f646fc01f18b99"}]}