{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2018-05-04\r\n*/\r\n\r\npragma solidity ^0.4.23;\r\n    /**\r\n    * @title ERC20Basic\r\n    * @dev Simpler version of ERC20 interface\r\n    * @dev see https://github.com/ethereum/EIPs/issues/179\r\n    */\r\n    contract ERC20Basic {\r\n    uint256 public totalSupply;\r\n     function balanceOf(address who) public view returns (uint256);\r\n     function transfer(address to, uint256 value) public returns (bool);\r\n     event Transfer(address indexed from, address indexed to, uint256 value);\r\n   }\r\n\r\n   /**\r\n   * @title Ownable\r\n   * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n   * functions, this simplifies the implementation of \"user permissions\".\r\n   */\r\n   contract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n     constructor() public {\r\n      owner = msg.sender;\r\n    }\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n     modifier onlyOwner() {\r\n      require(msg.sender == owner);\r\n      _;\r\n    }\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n     function transferOwnership(address newOwner) public onlyOwner {\r\n      require(newOwner != address(0));\r\n      emit OwnershipTransferred(owner, newOwner);\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n\r\n   /**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n  // allowedAddresses will be able to transfer even when locked\r\n  // lockedAddresses will *not* be able to transfer even when *not locked*\r\n  mapping(address => bool) public allowedAddresses;\r\n  mapping(address => bool) public lockedAddresses;\r\n  bool public locked = true;\r\n\r\n  function allowAddress(address _addr, bool _allowed) public onlyOwner {\r\n    require(_addr != owner);\r\n    allowedAddresses[_addr] = _allowed;\r\n  }\r\n\r\n  function lockAddress(address _addr, bool _locked) public onlyOwner {\r\n    require(_addr != owner);\r\n    lockedAddresses[_addr] = _locked;\r\n  }\r\n\r\n  function setLocked(bool _locked) public onlyOwner {\r\n    locked = _locked;\r\n  }\r\n\r\n  function canTransfer(address _addr) public constant returns (bool) {\r\n    if(locked){\r\n      if(!allowedAddresses[_addr]&&_addr!=owner) return false;\r\n    }else if(lockedAddresses[_addr]) return false;\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(canTransfer(msg.sender));\r\n\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n/**\r\n* @title ERC20 interface\r\n* @dev see https://github.com/ethereum/EIPs/issues/20\r\n*/\r\ncontract ERC20 is ERC20Basic {\r\n function allowance(address owner, address spender) public view returns (uint256);\r\n function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n function approve(address spender, uint256 value) public returns (bool);\r\n event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(canTransfer(msg.sender));\r\n\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue)\r\n    returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue)\r\n    returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is StandardToken {\r\nusing SafeMath for uint;\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 _value) public {\r\n        require(_value > 0);\r\n        require(_value <= balances[msg.sender]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(burner, _value);\r\n        Transfer(burner, address(0), _value);\r\n    }\r\n}\r\n\r\ncontract PlayerWonCoin is BurnableToken {\r\n\r\n    string public constant name = \"PlayerWonCoin\";\r\n    string public constant symbol = \"pwon\";\r\n    uint public constant decimals = 18;\r\n    // there is no problem in using * here instead of .mul()\r\n    uint256 public constant initialSupply = 1000000000 * (10 ** uint256(decimals));\r\n\r\n    // Constructors\r\n    function PlayerWonCoin () {\r\n        totalSupply = initialSupply;\r\n        balances[msg.sender] = initialSupply; // Send all tokens to owner\r\n        allowedAddresses[owner] = true;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n    /**\r\n    * @title Pausable\r\n    * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n    */\r\n    contract Pausable is Ownable {\r\n     event Pause();\r\n     event Unpause();\r\n\r\n     bool public paused = false;\r\n\r\n\r\n     /**\r\n      * @dev Modifier to make a function callable only when the contract is not paused.\r\n      */\r\n      modifier whenNotPaused() {\r\n       require(!paused);\r\n       _;\r\n     }\r\n\r\n     /**\r\n      * @dev Modifier to make a function callable only when the contract is paused.\r\n      */\r\n      modifier whenPaused() {\r\n       require(paused);\r\n       _;\r\n     }\r\n\r\n     /**\r\n      * @dev called by the owner to pause, triggers stopped state\r\n      */\r\n      function pause() onlyOwner whenNotPaused public {\r\n       paused = true;\r\n       emit Pause();\r\n     }\r\n\r\n     /**\r\n      * @dev called by the owner to unpause, returns to normal state\r\n      */\r\n      function unpause() onlyOwner whenPaused public {\r\n       paused = false;\r\n       emit Unpause();\r\n     }\r\n   }\r\n\r\n    \r\n    /**\r\n    * @title SafeMath\r\n    * @dev Math operations with safety checks that throw on error\r\n    */\r\n    library SafeMath {\r\n     /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n     */\r\n     function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n       if (a == 0) {\r\n         return 0;\r\n       }\r\n       uint256 c = a * b;\r\n       assert(c / a == b);\r\n       return c;\r\n     }\r\n     /**\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n     */\r\n     function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n       // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n       uint256 c = a / b;\r\n       // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n       return c;\r\n     }\r\n     /**\r\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n     function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n       assert(b <= a);\r\n       return a - b;\r\n     }\r\n     /**\r\n     * @dev Adds two numbers, throws on overflow.\r\n     */\r\n     function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n       uint256 c = a + b;\r\n       assert(c >= a);\r\n       return c;\r\n     }\r\n   }\r\n    /**\r\n    * @title Crowdsale\r\n    * @dev Crowdsale is a base contract for managing a token crowdsale,\r\n    * allowing investors to purchase tokens with ether. This contract implements\r\n    * such functionality in its most fundamental form and can be extended to provide additional\r\n    * functionality and/or custom behavior.\r\n    * The external interface represents the basic interface for purchasing tokens, and conform\r\n    * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\r\n    * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\r\n    * the methods to add functionality. Consider using 'super' where appropiate to concatenate\r\n    * behavior.\r\n    */\r\n    contract Crowdsale is Pausable{\r\n     using SafeMath for uint256;\r\n     // The token being sold\r\n     BurnableToken public token;\r\n     // Address where funds are collected\r\n     address public wallet;\r\n     // How many token units a buyer gets per wei\r\n     uint256 public rate = 1883800000000000000000;\r\n     // Amount of tokens sold\r\n     uint256 tokensSold;\r\n     uint256 public weiRaised; \r\n    //Star of the crowdsale\r\n     uint256 startTime;\r\n     uint256 phaze1Start = 1564617600; \r\n     uint256 phaze1End = 1567209600; \r\n     uint256 phaze2Start = 1567296000; \r\n     uint256 phaze2End = 1569801600; \r\n     uint256 phaze3Start = 1569888000; \r\n     uint256 phaze3End = 1572480000; \r\n    uint256 rate1 = 3767600000000000000000; \r\n     uint256 rate2 = 2354750000000000000000;\r\n     uint256 rate3 = 2093100000000000000000; \r\n     uint256 public hardcap = 250000000000000000000000000;\r\n\r\n\r\n\r\n     /**\r\n      * Event for token purchase logging\r\n      * @param purchaser who paid for the tokens\r\n      * @param beneficiary who got the tokens\r\n      * @param value weis paid for purchase\r\n      * @param amount amount of tokens purchased\r\n      */\r\n      event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount, uint256 time);\r\n\r\n      event buyx(address buyer, address contractAddr, uint256 amount);\r\n\r\n      constructor(address _wallet, BurnableToken _token, uint256 starttime, uint256 _cap) public{\r\n\r\n       require(_wallet != address(0));\r\n       require(_token != address(0));\r\n\r\n       wallet = _wallet;\r\n       token = _token;\r\n       startTime = starttime;\r\n       hardcap = _cap; \r\n     }\r\n     \r\n     function setWallet(address wl) public onlyOwner {\r\n         wallet=wl; \r\n     }\r\n     \r\n     function setphase1(uint256 rte) public onlyOwner{\r\n         rate1 = rte; \r\n     }\r\n         function setphase2(uint256 rte) public onlyOwner{\r\n         rate2 = rte; \r\n     }\r\n         function setphase3(uint256 rte) public onlyOwner{\r\n         rate3 = rte; \r\n     }\r\n     function setCrowdsale(address _wallet, BurnableToken _token, uint256 starttime, uint256 _cap) public onlyOwner{\r\n\r\n\r\n       require(_wallet != address(0));\r\n       require(_token != address(0));\r\n\r\n       wallet = _wallet;\r\n       token = _token;\r\n       startTime = starttime;\r\n       hardcap = _cap; \r\n     }\r\n\r\n\r\n\r\n     // -----------------------------------------\r\n     // Crowdsale external interface\r\n     // -----------------------------------------\r\n     /**\r\n      *  fallback function ***DO NOT OVERRIDE***\r\n      */\r\n      function () external whenNotPaused payable {\r\n        emit buyx(msg.sender, this, _getTokenAmount(msg.value));\r\n        buyTokens(msg.sender);\r\n      }\r\n     /**\r\n      * @dev low level token purchase ***DO NOT OVERRIDE***\r\n      * @param _beneficiary Address performing the token purchase\r\n      */\r\n     function buyTokens(address _beneficiary) public whenNotPaused payable {\r\n       \r\n     \r\n\r\n       if ((block.timestamp >= phaze1Start ) && (block.timestamp <= phaze1End) && (tokensSold <= 40000000000000000000000000)&&(weiRaised <= hardcap)) {\r\n         rate = rate1;\r\n       }\r\n       else if ((block.timestamp >= phaze2Start) && (block.timestamp <= phaze2End)&&(tokensSold <= hardcap)) {\r\n        rate = rate2;\r\n       }\r\n       else if ((block.timestamp >= phaze3Start) && (block.timestamp <= phaze3End)&&(tokensSold <= hardcap)) {\r\n        rate = rate3; \r\n       }\r\n       else {\r\n           rate = 10000000000000000000; \r\n       }\r\n      \r\n\r\n\r\n      uint256 weiAmount = msg.value;\r\n      uint256 tokens = _getTokenAmount(weiAmount);\r\n      tokensSold = tokensSold.add(tokens);\r\n      weiRaised = weiRaised.add(weiAmount); \r\n      _processPurchase(_beneficiary, tokens);\r\n      emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens, block.number);\r\n      _updatePurchasingState(_beneficiary, weiAmount);\r\n      _forwardFunds();\r\n      _postValidatePurchase(_beneficiary, weiAmount);\r\n    }\r\n\r\n    // -----------------------------------------\r\n    // Internal interface (extensible)\r\n    // -----------------------------------------\r\n\r\n\r\n\r\n     /**\r\n      * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\r\n      * @param _beneficiary Address performing the token purchase\r\n      * @param _weiAmount Value in wei involved in the purchase\r\n      */\r\n      function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\r\n       require(_beneficiary != address(0));\r\n       require(_weiAmount != 0);\r\n     }\r\n     /**\r\n      * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\r\n      * @param _beneficiary Address performing the token purchase\r\n      * @param _weiAmount Value in wei involved in the purchase\r\n      */\r\n      function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\r\n       // optional override\r\n     }\r\n     /**\r\n      * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\r\n      * @param _beneficiary Address performing the token purchase\r\n      * @param _tokenAmount Number of tokens to be emitted\r\n      */\r\n      function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\r\n       token.transfer(_beneficiary, _tokenAmount);\r\n     }\r\n     /**\r\n      * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\r\n      * @param _beneficiary Address receiving the tokens\r\n      * @param _tokenAmount Number of tokens to be purchased\r\n      */\r\n      function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\r\n       _deliverTokens(_beneficiary, _tokenAmount);\r\n     }\r\n     /**\r\n      * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\r\n      * @param _beneficiary Address receiving the tokens\r\n      * @param _weiAmount Value in wei involved in the purchase\r\n      */\r\n      function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\r\n       // optional override\r\n     }\r\n     /**\r\n      * @dev Override to extend the way in which ether is converted to tokens.\r\n      * @param _weiAmount Value in wei to be converted into tokens\r\n      * @return Number of tokens that can be purchased with the specified _weiAmount\r\n      */\r\n      function _getTokenAmount(uint256 _weiAmount) internal  returns (uint256) {\r\nuint256 tmp = rate.div(1000000000000000000); \r\n       return _weiAmount.mul(tmp);\r\n     }\r\n\r\n     /**\r\n      * @dev Determines how ETH is stored/forwarded on purchases.\r\n      */\r\n      function _forwardFunds() internal {\r\n       wallet.transfer(msg.value);\r\n     }\r\n\r\n   }\r\n\r\n\r\n\r\n   contract WonCrowdsale is Crowdsale {\r\n    uint256  hardcap=250000000000000000000000000;\r\n    uint256 public starttime;\r\n\r\n    using SafeMath for uint256;\r\n    constructor(address wallet, BurnableToken token, uint256 startTime) Crowdsale(wallet, token, starttime, hardcap) public onlyOwner\r\n    {\r\n\r\n     \r\n      starttime = startTime;\r\n      setCrowdsale(wallet, token, startTime, hardcap);\r\n\r\n    }\r\n\r\n\r\n\r\nfunction transferTokenOwnership(address newOwner) public onlyOwner {\r\n  token.transferOwnership(newOwner); \r\n}\r\n\r\n\r\n   function () external payable  whenNotPaused{\r\n\r\n    emit buyx(msg.sender, this, _getTokenAmount(msg.value));\r\n\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"rte\",\"type\":\"uint256\"}],\"name\":\"setphase3\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferTokenOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rte\",\"type\":\"uint256\"}],\"name\":\"setphase2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"starttime\",\"type\":\"uint256\"},{\"name\":\"_cap\",\"type\":\"uint256\"}],\"name\":\"setCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rte\",\"type\":\"uint256\"}],\"name\":\"setphase1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"starttime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wl\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"startTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contractAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"WonCrowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000008cfc49a554e78c05e4e2a76a66454836b3c5bfa600000000000000000000000047b2608c14497a07a41c788fdbef8631adcd86c9000000000000000000000000000000000000000000000000000000005d422b80","Library":"","SwarmSource":"bzzr://7f7cd42189d7a797ad54fa57eeb501ad7db94fbafaa3ace4905667f9ac4a47d6"}]}