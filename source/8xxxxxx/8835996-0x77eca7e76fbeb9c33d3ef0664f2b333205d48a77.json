{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n|| THE LEXDAO REGISTRY (TLDR) || version 0.2\r\n\r\nDEAR MSG.SENDER(S):\r\n\r\n/ TLDR is a project in beta.\r\n// Please audit and use at your own risk.\r\n/// Entry into TLDR shall not create an attorney/client relationship.\r\n//// Likewise, TLDR should not be construed as legal advice or replacement for professional counsel.\r\n\r\n///// STEAL THIS C0D3SL4W \r\n\r\n|| lexDAO || \r\n~presented by Open, ESQ LLC_DAO~\r\n< https://mainnet.aragon.org/#/openesquire/ >\r\n*/\r\n\r\npragma solidity 0.5.9;\r\n\r\n/***************\r\nOPENZEPPELIN REFERENCE CONTRACTS - SafeMath, ScribeRole, ERC-20 transactional scripts\r\n***************/\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\r\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\r\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\r\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract ScribeRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event ScribeAdded(address indexed account);\r\n    event ScribeRemoved(address indexed account);\r\n\r\n    Roles.Role private _Scribes;\r\n\r\n    constructor () internal {\r\n        _addScribe(_msgSender());\r\n    }\r\n\r\n    modifier onlyScribe() {\r\n        require(isScribe(_msgSender()), \"ScribeRole: caller does not have the Scribe role\");\r\n        _;\r\n    }\r\n\r\n    function isScribe(address account) public view returns (bool) {\r\n        return _Scribes.has(account);\r\n    }\r\n\r\n    function renounceScribe() public {\r\n        _removeScribe(_msgSender());\r\n    }\r\n\r\n    function _addScribe(address account) internal {\r\n        _Scribes.add(account);\r\n        emit ScribeAdded(account);\r\n    }\r\n\r\n    function _removeScribe(address account) internal {\r\n        _Scribes.remove(account);\r\n        emit ScribeRemoved(account);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n}\r\n\r\n/***************\r\nTLDR CONTRACT\r\n***************/\r\ncontract TLDR is ScribeRole, ERC20 { // TLDR: internet-native market to wrap & enforce common deal patterns with legal & ethereal security\r\n    using SafeMath for uint256;\r\n    \r\n    // lexDAO references for lexDAOscribe (lexScribe) reputation governance fees (Ξ)\r\n    address payable public lexDAO;\r\n\t\r\n    // TLDR (LEX) ERC-20 token references for public inspection\r\n    address public tldrAddress = address(this);\r\n    ERC20 tldrToken = ERC20(tldrAddress); \r\n    \r\n    string public name = \"TLDR\";\r\n    string public symbol = \"LEX\";\r\n    uint8 public decimals = 18;\r\n\t\r\n    // counters for lexScribe lexScriptWrapper and registered DDR (rddr) / DC (rdc)\r\n    uint256 public LSW = 1; // number of lexScriptWrapper enscribed (starting from constructor tldr template)\r\n    uint256 public RDC; // number of rdc\r\n    uint256 public RDDR; // number of rddr\r\n\t\r\n    // mapping for lexScribe reputation governance program\r\n    mapping(address => uint256) public reputation; // mapping lexScribe reputation points \r\n    mapping(address => uint256) public lastActionTimestamp; // mapping Unix timestamp of lexScribe governance actions (cooldown)\r\n    mapping(address => uint256) public lastSuperActionTimestamp; // mapping Unix timestamp of special lexScribe governance actions that require longer cooldown (icedown)\r\n    \r\n    // mapping for stored lexScript wrappers and registered digital dollar retainers (DDR / rddr)\r\n    mapping (uint256 => lexScriptWrapper) public lexScript; // mapping registered lexScript 'wet code' templates\r\n    mapping (uint256 => DC) public rdc; // mapping rdc call numbers for inspection and signature revocation\r\n    mapping (uint256 => DDR) public rddr; // mapping rddr call numbers for inspection and digital dollar payments\r\n\t\r\n    struct lexScriptWrapper { // LSW: rddr lexScript templates maintained by lexScribes\r\n        address lexScribe; // lexScribe (0x) address that enscribed lexScript template into TLDR / can make subsequent edits (lexVersion)\r\n        address lexAddress; // (0x) address to receive lexScript wrapper lexFee / adjustable by associated lexScribe\r\n        string templateTerms; // lexScript template terms to wrap rddr with legal security\r\n        uint256 lexID; // number to reference in rddr to import lexScript wrapper terms\r\n        uint256 lexVersion; // version number to mark lexScribe edits\r\n        uint256 lexRate; // fixed, divisible rate for lexFee in ddrToken type per rddr payment made thereunder / e.g., 100 = 1% lexFee on rddr payDDR payment transaction\r\n    }\r\n        \r\n    struct DC { // Digital Covenant lexScript templates maintained by lexScribes\r\n        address signatory; // DC signatory (0x) address\r\n        string templateTerms; // DC templateTerms imported from referenced lexScriptWrapper\r\n        string signatureDetails; // DC may include signatory name or other supplementary info\r\n        uint256 lexID; // lexID number reference to include lexScriptWrapper for legal security \r\n        uint256 dcNumber; // DC number generated on signed covenant registration / identifies DC for signatory revocation function call\r\n        uint256 timeStamp; // block.timestamp (\"now\") of DC registration \r\n        bool revoked; // tracks signatory revocation status on DC\r\n    }\r\n    \t\r\n    struct DDR { // Digital Dollar Retainer created on lexScript terms maintained by lexScribes / data for registration \r\n        address client; // rddr client (0x) address\r\n        address provider; // provider (0x) address that receives ERC-20 payments in exchange for goods or services\r\n        ERC20 ddrToken; // ERC-20 digital token (0x) address used to transfer digital value on ethereum under rddr / e.g., DAI 'digital dollar' - 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359\r\n        string deliverable; // goods or services (deliverable) retained for benefit of ethereum payments\r\n        uint256 lexID; // lexID number reference to include lexScriptWrapper for legal security / default '1' for generalized rddr lexScript template\r\n        uint256 ddrNumber; // rddr number generated on DDR registration / identifies rddr for payDDR function calls\r\n        uint256 timeStamp; // block.timestamp (\"now\") of registration used to calculate retainerTermination UnixTime\r\n        uint256 retainerTermination; // termination date of rddr in UnixTime / locks payments to provider / after termination, allows withdrawal of remaining escrow digital value by client on payDDR function\r\n        uint256 deliverableRate; // rate for rddr deliverables in digital dollar wei amount / 1 = 1000000000000000000\r\n        uint256 paid; // tracking amount of designated ERC-20 digital value paid under rddr in wei amount for payCap logic\r\n        uint256 payCap; // value cap limit on rddr payments in wei amount \r\n        bool confirmed; // tracks provider countersignature status\r\n        bool disputed; // tracks digital dispute status from client or provider / if called, locks remainder of escrow rddr payments for reputable lexScribe resolution\r\n    }\r\n    \t\r\n    constructor(string memory tldrTerms, uint256 tldrLexRate, address tldrLexAddress, address payable tldrLexDAO) public { // deploys TLDR contract with designated lexRate / lexAddress (0x) & stores base lexScript template \"1\" (lexID)\r\n\t    address lexScribe = msg.sender; // TLDR summoner is lexScribe\r\n\t    reputation[msg.sender] = 3; // sets TLDR summoner lexScribe reputation to '3' max value\r\n\t    lexDAO = tldrLexDAO; // sets initial lexDAO (0x) address \r\n\t    uint256 lexID = 1; // default lexID for constructor / general rddr reference, 'tldrTerms'\r\n\t    uint256 lexVersion = 0; // initialized version of tldrTerms\r\n\t    \r\n\t        lexScript[lexID] = lexScriptWrapper( // populates default '1' lexScript data for reference in LSW and rddr\r\n                lexScribe,\r\n                tldrLexAddress,\r\n                tldrTerms,\r\n                lexID,\r\n                lexVersion,\r\n                tldrLexRate);\r\n    }\r\n        \r\n    // TLDR Contract Events\r\n    event Enscribed(uint256 indexed lexID, uint256 indexed lexVersion, address indexed lexScribe); // triggered on successful LSW creation / edits to LSW\r\n    event Signed(uint256 indexed lexID, uint256 indexed dcNumber, address indexed signatory); // triggered on successful DC creation / edits to DC \r\n    event Registered(uint256 indexed ddrNumber, uint256 indexed lexID, address indexed client); // triggered on successful rddr \r\n    event Confirmed(uint256 indexed ddrNumber, uint256 indexed lexID, address indexed provider); // triggered on succesfful rddr confirmation\r\n    event Paid(uint256 indexed ddrNumber, uint256 indexed lexID); // triggered on successful rddr payments\r\n    event Disputed(uint256 indexed ddrNumber); // triggered on rddr dispute\r\n    event Resolved(uint256 indexed ddrNumber); // triggered on successful rddr dispute resolution\r\n    \r\n    /***************\r\n    TLDR GOVERNANCE FUNCTIONS\r\n    ***************/   \r\n    // restricts lexScribe TLDR reputation governance function calls to once per day (cooldown)\r\n    modifier cooldown() {\r\n        require(now.sub(lastActionTimestamp[msg.sender]) > 1 days); // enforces cooldown period\r\n        _;\r\n        \r\n\t    lastActionTimestamp[msg.sender] = now; // block.timestamp, \"now\"\r\n    }\r\n        \r\n    // restricts important lexScribe TLDR reputation staking and lexDAO governance function calls to once per 90 days (icedown)\r\n    modifier icedown() {\r\n        require(now.sub(lastSuperActionTimestamp[msg.sender]) > 90 days); // enforces icedown period\r\n        _;\r\n        \r\n\t    lastSuperActionTimestamp[msg.sender] = now; // block.timestamp, \"now\"\r\n    }\r\n    \r\n    // lexDAO can add new lexScribe to maintain TLDR\r\n    function addScribe(address account) public {\r\n        require(msg.sender == lexDAO);\r\n        _addScribe(account);\r\n\t    reputation[account] = 1;\r\n    }\r\n    \r\n    // lexDAO can remove lexScribe from TLDR / slash reputation\r\n    function removeScribe(address account) public {\r\n        require(msg.sender == lexDAO);\r\n        _removeScribe(account);\r\n\t    reputation[account] = 0;\r\n    }\r\n    \r\n    // lexDAO can update (0x) address receiving reputation governance stakes (Ξ) / maintaining lexScribe registry\r\n    function updateLexDAO(address payable newLexDAO) public {\r\n    \trequire(msg.sender == lexDAO);\r\n        require(newLexDAO != address(0)); // program safety check / newLexDAO cannot be \"0\" burn address\r\n        \r\n\t    lexDAO = newLexDAO; // updates lexDAO (0x) address\r\n    }\r\n        \r\n    // lexScribes can stake ether (Ξ) value for TLDR reputation and special TLDR function access (TLDR write privileges, rddr dispute resolution role) \r\n    function stakeETHreputation() payable public onlyScribe icedown {\r\n        require(msg.value == 0.1 ether); // tenth of ether (Ξ) fee for staking reputation to lexDAO\r\n        \r\n\t    reputation[msg.sender] = 3; // sets / refreshes lexScribe reputation to '3' max value, 'three strikes, you're out' buffer\r\n        \r\n\t    address(lexDAO).transfer(msg.value); // forwards staked value (Ξ) to designated lexDAO (0x) address\r\n    }\r\n    \r\n    // lexScribes can burn minted LEX value for TLDR reputation \r\n    function stakeLEXreputation() public onlyScribe icedown { \r\n\t    _burn(_msgSender(), 10000000000000000000); // 10 LEX burned \r\n        \r\n\t    reputation[msg.sender] = 3; // sets / refreshes lexScribe reputation to '3' max value, 'three strikes, you're out' buffer\r\n    }\r\n         \r\n    // public check on lexScribe reputation status\r\n    function isReputable(address x) public view returns (bool) { // returns true if lexScribe is reputable\r\n        return reputation[x] > 0;\r\n    }\r\n        \r\n    // reputable lexScribes can reduce each other's reputation within cooldown period \r\n    function reduceScribeRep(address reducedLexScribe) cooldown public {\r\n        require(isReputable(msg.sender)); // program governance check / lexScribe must be reputable\r\n        require(msg.sender != reducedLexScribe); // program governance check / cannot reduce own reputation\r\n        \r\n\t    reputation[reducedLexScribe] = reputation[reducedLexScribe].sub(1); // reduces referenced lexScribe reputation by \"1\"\r\n    }\r\n        \r\n    // reputable lexScribes can repair each other's reputation within cooldown period\r\n    function repairScribeRep(address repairedLexScribe) cooldown public {\r\n        require(isReputable(msg.sender)); // program governance check / lexScribe must be reputable\r\n        require(msg.sender != repairedLexScribe); // program governance check / cannot repair own reputation\r\n        require(reputation[repairedLexScribe] < 3); // program governance check / cannot repair fully reputable lexScribe\r\n        require(reputation[repairedLexScribe] > 0); // program governance check / cannot repair disreputable lexScribe / induct non-staked lexScribe\r\n        \r\n\t    reputation[repairedLexScribe] = reputation[repairedLexScribe].add(1); // repairs reputation by \"1\"\r\n    }\r\n       \r\n    /***************\r\n    TLDR LEXSCRIBE FUNCTIONS\r\n    ***************/\r\n    // reputable lexScribes can register lexScript legal wrappers on TLDR and program ERC-20 lexFees associated with lexID / receive LEX mint, \"1\"\r\n    function writeLexScript(string memory templateTerms, uint256 lexRate, address lexAddress) public {\r\n        require(isReputable(msg.sender)); // program governance check / lexScribe must be reputable \r\n\t\r\n\t    uint256 lexID = LSW.add(1); // reflects new lexScript value for tracking lexScript wrappers\r\n\t    uint256 lexVersion = 0; // initalized lexVersion, \"0\"\r\n\t    LSW = LSW.add(1); // counts new entry to LSW \r\n\t    \r\n\t        lexScript[lexID] = lexScriptWrapper( // populate lexScript data for rddr / rdc usage\r\n                msg.sender,\r\n                lexAddress,\r\n                templateTerms,\r\n                lexID,\r\n                lexVersion,\r\n                lexRate);\r\n                \r\n        _mint(msg.sender, 1000000000000000000); // mints lexScribe \"1\" LEX for contribution to TLDR\r\n\t\r\n        emit Enscribed(lexID, lexVersion, msg.sender); \r\n    }\r\n\t    \r\n    // lexScribes can update TLDR lexScript wrappers with new templateTerms and (0x) newLexAddress / versions up LSW\r\n    function editLexScript(uint256 lexID, string memory templateTerms, address lexAddress) public {\r\n\t    lexScriptWrapper storage lS = lexScript[lexID]; // retrieve LSW data\r\n\t\r\n\t    require(msg.sender == lS.lexScribe); // program safety check / authorization \r\n\t\r\n\t    uint256 lexVersion = lS.lexVersion.add(1); // updates lexVersion \r\n\t    \r\n\t        lexScript[lexID] = lexScriptWrapper( // populates updated lexScript data for rddr / rdc usage\r\n                msg.sender,\r\n                lexAddress,\r\n                templateTerms,\r\n                lexID,\r\n                lexVersion,\r\n                lS.lexRate);\r\n                \t\r\n        emit Enscribed(lexID, lexVersion, msg.sender);\r\n    }\r\n\r\n    /***************\r\n    TLDR MARKET FUNCTIONS\r\n    ***************/\r\n    // public can sign and associate (0x) ethereum identity with lexScript digital covenant wrapper \r\n    function signDC(uint256 lexID, string memory signatureDetails) public { // sign Digital Covenant with (0x) address\r\n\t    require(lexID > (0)); // program safety check\r\n\t    require(lexID <= LSW); // program safety check\r\n\t    lexScriptWrapper storage lS = lexScript[lexID]; // retrieve LSW data\r\n\t\r\n\t    uint256 dcNumber = RDC.add(1); // reflects new rdc value for public inspection and signature revocation\r\n\t    RDC = RDC.add(1); // counts new entry to RDC\r\n\t        \r\n\t        rdc[dcNumber] = DC( // populates rdc data\r\n                msg.sender,\r\n                lS.templateTerms,\r\n                signatureDetails,\r\n                lexID,\r\n                dcNumber,\r\n                now, \r\n                false);\r\n                \t\r\n        emit Signed(lexID, dcNumber, msg.sender);\r\n    }\r\n    \t\r\n    // registered DC signatories can revoke (0x) signature  \r\n    function revokeDC(uint256 dcNumber) public { // revoke Digital Covenant signature with (0x) address\r\n\t    DC storage dc = rdc[dcNumber]; // retrieve rdc data\r\n\t\r\n\t    require(msg.sender == dc.signatory); // program safety check / authorization\r\n\t    \r\n\t        rdc[dcNumber] = DC(// updates rdc data\r\n                msg.sender,\r\n                \"Signature Revoked\", // replaces Digital Covenant terms with revocation message\r\n                dc.signatureDetails,\r\n                dc.lexID,\r\n                dc.dcNumber,\r\n                now, // updates to revocation timestamp\r\n                true);\r\n                \t\r\n        emit Signed(dc.lexID, dcNumber, msg.sender);\r\n    }\r\n    \r\n    // rddr client can register DDR with TLDR lexScripts (lexID) \r\n    function registerDDR( // rddr \r\n    \taddress client,\r\n    \taddress provider,\r\n    \tERC20 ddrToken,\r\n    \tstring memory deliverable,\r\n        uint256 retainerDuration,\r\n    \tuint256 deliverableRate,\r\n    \tuint256 payCap,\r\n    \tuint256 lexID) public {\r\n    \trequire(lexID > (0)); // program safety check \r\n    \trequire(lexID <= LSW); // program safety check \r\n        require(deliverableRate <= payCap); // program safety check / economics\r\n\t    require(msg.sender == client); // program safety check / authorization / client signs TLDR transaction registering ddr offer / designates provider for confirmation\r\n        \r\n\t    uint256 ddrNumber = RDDR.add(1); // reflects new rddr value for inspection and escrow management\r\n        uint256 retainerTermination = now.add(retainerDuration); // rddr termination date in UnixTime, \"now\" block.timestamp + retainerDuration\r\n\r\n\t    RDDR = RDDR.add(1); // counts new entry to RDDR\r\n    \r\n            rddr[ddrNumber] = DDR( // populate rddr data \r\n                client,\r\n                provider,\r\n                ddrToken,\r\n                deliverable,\r\n                lexID,\r\n                ddrNumber,\r\n                now, // block.timestamp, \"now\"\r\n                retainerTermination,\r\n                deliverableRate,\r\n                0,\r\n                payCap,\r\n                false,\r\n                false);\r\n        \t \r\n        emit Registered(ddrNumber, lexID, msg.sender); \r\n    }\r\n    \r\n    // rddr provider can confirm rddr offer and countersign ddrNumber / trigger escrow deposit from rddr client in approved payCap amount\r\n    function confirmDDR(uint256 ddrNumber) public {\r\n        DDR storage ddr = rddr[ddrNumber]; // retrieve rddr data\r\n        \r\n        require(ddr.confirmed == false); // program safety check / status\r\n        require(now <= ddr.retainerTermination); // program safety check / time\r\n        require(msg.sender == ddr.provider); // program safety check / authorization\r\n        \r\n        ddr.confirmed = true; // reflect rddr provider countersignature\r\n        \r\n        ddr.ddrToken.transferFrom(ddr.client, address(this), ddr.payCap); // escrows payCap amount in approved ddrToken into TLDR for rddr payments and/or lexScribe resolution\r\n    \r\n        emit Confirmed(ddrNumber, ddr.lexID, msg.sender);\r\n    }\r\n         \r\n    // rddr client can call to delegate role\r\n    function delegateDDRclient(uint256 ddrNumber, address clientDelegate) public {\r\n        DDR storage ddr = rddr[ddrNumber]; // retrieve rddr data\r\n        \r\n        require(ddr.disputed == false); // program safety check / status\r\n        require(now <= ddr.retainerTermination); // program safety check / time\r\n        require(msg.sender == ddr.client); // program safety check / authorization\r\n        require(ddr.paid < ddr.payCap); // program safety check / economics\r\n        \r\n        ddr.client = clientDelegate; // updates rddr client address to delegate\r\n    }\r\n    \r\n    // rddr parties can initiate dispute and lock escrowed remainder of rddr payCap in TLDR until resolution by reputable lexScribe\r\n    function disputeDDR(uint256 ddrNumber) public {\r\n        DDR storage ddr = rddr[ddrNumber]; // retrieve rddr data\r\n        \r\n        require(ddr.confirmed == true); // program safety check / status\r\n\t    require(ddr.disputed == false); // program safety check / status\r\n        require(now <= ddr.retainerTermination); // program safety check / time\r\n        require(msg.sender == ddr.client || msg.sender == ddr.provider); // program safety check / authorization\r\n\t    require(ddr.paid < ddr.payCap); // program safety check / economics\r\n        \r\n\t    ddr.disputed = true; // updates rddr value to reflect dispute status, \"true\"\r\n\t    \r\n\t    emit Disputed(ddrNumber);\r\n    }\r\n    \r\n    // reputable lexScribe can resolve rddr dispute with division of remaining payCap amount in wei accounting for 5% fee / receive fee + LEX mint, \"1\"\r\n    function resolveDDR(uint256 ddrNumber, uint256 clientAward, uint256 providerAward) public {\r\n        DDR storage ddr = rddr[ddrNumber]; // retrieve rddr data\r\n\t\r\n\t    uint256 ddRemainder = ddr.payCap.sub(ddr.paid); // alias remainder rddr wei amount for rddr resolution reference\r\n\t    uint256 resolutionFee = ddRemainder.div(20); // calculates 5% lexScribe dispute resolution fee\r\n\t\r\n\t    require(ddr.disputed == true); // program safety check / status\r\n\t    require(clientAward.add(providerAward) == ddRemainder.sub(resolutionFee)); // program safety check / economics\r\n        require(msg.sender != ddr.client); // program safety check / authorization / client cannot resolve own dispute as lexScribe\r\n        require(msg.sender != ddr.provider); // program safety check / authorization / provider cannot resolve own dispute as lexScribe\r\n        require(isReputable(msg.sender)); // program governance check / resolving lexScribe must be reputable\r\n\t    require(balanceOf(msg.sender) >= 5000000000000000000); // program governance check / resolving lexScribe must have at least \"5\" LEX balance\r\n\t\r\n        ddr.ddrToken.transfer(ddr.client, clientAward); // executes ERC-20 award transfer to rddr client\r\n        ddr.ddrToken.transfer(ddr.provider, providerAward); // executes ERC-20 award transfer to rddr provider\r\n    \tddr.ddrToken.transfer(msg.sender, resolutionFee); // executes ERC-20 fee transfer to resolving lexScribe\r\n    \t\r\n    \t_mint(msg.sender, 1000000000000000000); // mints resolving lexScribe \"1\" LEX for contribution to TLDR\r\n\t\r\n\t    ddr.paid = ddr.paid.add(ddRemainder); // tallies remainder to paid wei amount to reflect rddr closure\r\n\t    \r\n\t    emit Resolved(ddrNumber);\r\n    }\r\n    \r\n    // client can call to pay rddr on TLDR\r\n    function payDDR(uint256 ddrNumber) public { // releases escrowed ddrToken deliverableRate amount to provider (0x) address / lexFee for attached lexID lexAddress\r\n    \tDDR storage ddr = rddr[ddrNumber]; // retrieve rddr data\r\n    \tlexScriptWrapper storage lS = lexScript[ddr.lexID]; // retrieve LSW data\r\n\t\r\n\t    require(ddr.confirmed == true); // program safety check / status\r\n\t    require(ddr.disputed == false); // program safety check / status\r\n    \trequire(now <= ddr.retainerTermination); // program safety check / time\r\n    \trequire(msg.sender == ddr.client); // program safety check / authorization\r\n    \trequire(ddr.paid.add(ddr.deliverableRate) <= ddr.payCap); // program safety check / economics\r\n\t\r\n    \tuint256 lexFee = ddr.deliverableRate.div(lS.lexRate); // derives lexFee from rddr deliverableRate\r\n\t\r\n    \tddr.ddrToken.transfer(ddr.provider, ddr.deliverableRate.sub(lexFee)); // executes ERC-20 transfer to rddr provider in deliverableRate amount\r\n    \tddr.ddrToken.transfer(lS.lexAddress, lexFee); // executes ERC-20 transfer of lexFee to (0x) lexAddress identified in lexID\r\n    \tddr.paid = ddr.paid.add(ddr.deliverableRate); // tracks total ERC-20 wei amount paid under rddr / used to calculate rddr remainder\r\n        \r\n\t    emit Paid(ddr.ddrNumber, ddr.lexID); \r\n    }\r\n    \r\n    // client can call to withdraw rddr remainder on TLDR after termination\r\n    function withdrawRemainder(uint256 ddrNumber) public { // releases escrowed ddrToken deliverableRate amount to provider (0x) address \r\n    \tDDR storage ddr = rddr[ddrNumber]; // retrieve rddr data\r\n\t\r\n        require(ddr.confirmed == true); // program safety check / status\r\n        require(ddr.disputed == false); // program safety check / status\r\n    \trequire(now >= ddr.retainerTermination); // program safety check / time\r\n    \trequire(msg.sender == ddr.client); // program safety check / authorization\r\n    \t\r\n    \tuint256 remainder = ddr.payCap.sub(ddr.paid); // derive rddr remainder\r\n    \t\r\n    \trequire(remainder > 0); // program safety check / economics\r\n\t\r\n    \tddr.ddrToken.transfer(ddr.client, remainder); // executes ERC-20 transfer to rddr provider in escrow remainder amount\r\n    \t\r\n    \tddr.paid = ddr.paid.add(remainder); // tallies remainder to paid wei amount to reflect rddr closure\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dcNumber\",\"type\":\"uint256\"}],\"name\":\"revokeDC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastActionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ddrNumber\",\"type\":\"uint256\"}],\"name\":\"disputeDDR\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastSuperActionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RDC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeScribe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ddrNumber\",\"type\":\"uint256\"},{\"name\":\"clientDelegate\",\"type\":\"address\"}],\"name\":\"delegateDDRclient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ddrNumber\",\"type\":\"uint256\"},{\"name\":\"clientAward\",\"type\":\"uint256\"},{\"name\":\"providerAward\",\"type\":\"uint256\"}],\"name\":\"resolveDDR\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lexDAO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lexID\",\"type\":\"uint256\"},{\"name\":\"templateTerms\",\"type\":\"string\"},{\"name\":\"lexAddress\",\"type\":\"address\"}],\"name\":\"editLexScript\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tldrAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceScribe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"address\"}],\"name\":\"isReputable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ddrNumber\",\"type\":\"uint256\"}],\"name\":\"withdrawRemainder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"repairedLexScribe\",\"type\":\"address\"}],\"name\":\"repairScribeRep\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"templateTerms\",\"type\":\"string\"},{\"name\":\"lexRate\",\"type\":\"uint256\"},{\"name\":\"lexAddress\",\"type\":\"address\"}],\"name\":\"writeLexScript\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lexScript\",\"outputs\":[{\"name\":\"lexScribe\",\"type\":\"address\"},{\"name\":\"lexAddress\",\"type\":\"address\"},{\"name\":\"templateTerms\",\"type\":\"string\"},{\"name\":\"lexID\",\"type\":\"uint256\"},{\"name\":\"lexVersion\",\"type\":\"uint256\"},{\"name\":\"lexRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newLexDAO\",\"type\":\"address\"}],\"name\":\"updateLexDAO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stakeLEXreputation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"reputation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rddr\",\"outputs\":[{\"name\":\"client\",\"type\":\"address\"},{\"name\":\"provider\",\"type\":\"address\"},{\"name\":\"ddrToken\",\"type\":\"address\"},{\"name\":\"deliverable\",\"type\":\"string\"},{\"name\":\"lexID\",\"type\":\"uint256\"},{\"name\":\"ddrNumber\",\"type\":\"uint256\"},{\"name\":\"timeStamp\",\"type\":\"uint256\"},{\"name\":\"retainerTermination\",\"type\":\"uint256\"},{\"name\":\"deliverableRate\",\"type\":\"uint256\"},{\"name\":\"paid\",\"type\":\"uint256\"},{\"name\":\"payCap\",\"type\":\"uint256\"},{\"name\":\"confirmed\",\"type\":\"bool\"},{\"name\":\"disputed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addScribe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"client\",\"type\":\"address\"},{\"name\":\"provider\",\"type\":\"address\"},{\"name\":\"ddrToken\",\"type\":\"address\"},{\"name\":\"deliverable\",\"type\":\"string\"},{\"name\":\"retainerDuration\",\"type\":\"uint256\"},{\"name\":\"deliverableRate\",\"type\":\"uint256\"},{\"name\":\"payCap\",\"type\":\"uint256\"},{\"name\":\"lexID\",\"type\":\"uint256\"}],\"name\":\"registerDDR\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isScribe\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rdc\",\"outputs\":[{\"name\":\"signatory\",\"type\":\"address\"},{\"name\":\"templateTerms\",\"type\":\"string\"},{\"name\":\"signatureDetails\",\"type\":\"string\"},{\"name\":\"lexID\",\"type\":\"uint256\"},{\"name\":\"dcNumber\",\"type\":\"uint256\"},{\"name\":\"timeStamp\",\"type\":\"uint256\"},{\"name\":\"revoked\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ddrNumber\",\"type\":\"uint256\"}],\"name\":\"confirmDDR\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"reducedLexScribe\",\"type\":\"address\"}],\"name\":\"reduceScribeRep\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ddrNumber\",\"type\":\"uint256\"}],\"name\":\"payDDR\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stakeETHreputation\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RDDR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lexID\",\"type\":\"uint256\"},{\"name\":\"signatureDetails\",\"type\":\"string\"}],\"name\":\"signDC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LSW\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tldrTerms\",\"type\":\"string\"},{\"name\":\"tldrLexRate\",\"type\":\"uint256\"},{\"name\":\"tldrLexAddress\",\"type\":\"address\"},{\"name\":\"tldrLexDAO\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"lexID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"lexVersion\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"lexScribe\",\"type\":\"address\"}],\"name\":\"Enscribed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"lexID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"dcNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"signatory\",\"type\":\"address\"}],\"name\":\"Signed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"ddrNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"lexID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"client\",\"type\":\"address\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"ddrNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"lexID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"Confirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"ddrNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"lexID\",\"type\":\"uint256\"}],\"name\":\"Paid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"ddrNumber\",\"type\":\"uint256\"}],\"name\":\"Disputed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"ddrNumber\",\"type\":\"uint256\"}],\"name\":\"Resolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ScribeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ScribeRemoved\",\"type\":\"event\"}]","ContractName":"TLDR","CompilerVersion":"v0.5.9+commit.e560f70d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000012c0000000000000000000000001c0aa8ccd568d90d61659f060d1bfb1e6f855a200000000000000000000000001c0aa8ccd568d90d61659f060d1bfb1e6f855a2000000000000000000000000000000000000000000000000000000000000003397c7c2045737461626c697368696e672061206469676974616c2072657461696e657220686572656279206173205b5b6464724e756d6265725d5d20616e642061636b6e6f776c656467696e67206d757475616c20636f6e73696465726174696f6e20616e642061677265656d656e742c20436c69656e742c206964656e74696669656420627920657468657265756d20616464726573732030785b5b636c69656e745d5d2c20636f6d6d69747320746f206d616b65207061796d656e74732061732070726f76696465642068657265696e20756e6465722074686520544c4452207472616e73616374696f6e616c207363726970742063617070656420617420245b5b7061794361705d5d206469676974616c20646f6c6c61722076616c75652064656e6f6d696e6174656420696e2030785b5b646472546f6b656e5d5d20666f72207468652062656e65666974206f662050726f76696465722c206964656e74696669656420627920657468657265756d20616464726573732030785b5b70726f76696465725d5d2c20696e2065786368616e676520666f722070726f6d707420736174697366616374696f6e206f662074686520666f6c6c6f77696e672c205b5b64656c6976657261626c655d5d2c20746f20436c69656e742062792050726f76696465722075706f6e207363726970746564207061796d656e747320736574206174207468652072617465206f6620245b5b64656c6976657261626c65526174655d5d206469676974616c20646f6c6c617273207065722064656c6976657261626c652c207769746820737563682072657461696e65722072656c6174696f6e73686970206e6f7420746f20657863656564205b5b72657461696e65724475726174696f6e5d5d207365636f6e647320616e6420746f20626520676f7665726e6564206279207468652063686f696365206f66204e657720596f726b206c617720616e6420276569746865722f6f7227206172626974726174696f6e2072756c65732061646d696e697374657265642062792061206c6578536372696265206163636f756e742072656769737465726564206f6e2074686520544c4452207472616e73616374696f6e616c207363726970742e207c7c00000000000000","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://25d40f075a400e0d1a12ffc0f3820f664a10a43ba58ecdcc7bae3e851fe98439"}]}