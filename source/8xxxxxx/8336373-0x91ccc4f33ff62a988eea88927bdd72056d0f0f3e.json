{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\nHello\r\nI am a CryptoBinar.\r\nMy URL: http://cryptobinar.org\r\nSupport: http://t.me/cbsmart\r\n*/\r\n\r\npragma solidity ^0.5.10;\r\n\r\n\r\ncontract CryptoBinar {\r\n    address public ownerWallet = 0x1C9817FC3eA5d3a3DE6Ad5E244A54093d8e100b7;\r\n\r\n    event regLevelEvent(address indexed _user, address indexed _referrer, uint _time);\r\n    event buyLevelEvent(address indexed _user, uint _lvl, uint _time);\r\n    event prolongateLevelEvent(address indexed _user, uint _lvl, uint _time);\r\n    event getMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _lvl, uint _time);\r\n    event lostMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _lvl, uint _time);\r\n    //------------------------------\r\n\r\n    mapping (uint => uint) public LVL_COST;\r\n    uint UPLINE_1_LVL_LIMIT = 2;\r\n    uint PERIOD_LENGTH = 100 days;\r\n\r\n\r\n    struct UserStruct {\r\n        bool isExist;\r\n        uint id;\r\n        uint referrerID;\r\n        address[] referral;\r\n        mapping (uint => uint) levelExpired;\r\n    }\r\n\r\n    mapping (address => UserStruct) public users;\r\n    mapping (uint => address) public userList;\r\n    uint public currUserID = 0;\r\n\r\n\r\n\r\n    constructor() public {\r\n\r\n        LVL_COST[1] = 0.03 ether;\r\n        LVL_COST[2] = 0.06 ether;\r\n        LVL_COST[3] = 0.15 ether;\r\n        LVL_COST[4] = 0.45 ether;\r\n        LVL_COST[5] = 0.75 ether;\r\n        LVL_COST[6] = 2 ether;\r\n        LVL_COST[7] = 5 ether;\r\n        LVL_COST[8] = 15 ether;\r\n\r\n        UserStruct memory userStruct;\r\n        currUserID++;\r\n\r\n        userStruct = UserStruct({\r\n            isExist : true,\r\n            id : currUserID,\r\n            referrerID : 0,\r\n            referral : new address[](0)\r\n        });\r\n        users[ownerWallet] = userStruct;\r\n        userList[currUserID] = ownerWallet;\r\n\r\n        users[ownerWallet].levelExpired[1] = 55555555555;\r\n        users[ownerWallet].levelExpired[2] = 55555555555;\r\n        users[ownerWallet].levelExpired[3] = 55555555555;\r\n        users[ownerWallet].levelExpired[4] = 55555555555;\r\n        users[ownerWallet].levelExpired[5] = 55555555555;\r\n        users[ownerWallet].levelExpired[6] = 55555555555;\r\n        users[ownerWallet].levelExpired[7] = 55555555555;\r\n        users[ownerWallet].levelExpired[8] = 55555555555;\r\n    }\r\n\r\n    function () external payable {\r\n\r\n        uint level;\r\n\r\n        if(msg.value == LVL_COST[1]){\r\n            level = 1;\r\n        }else if(msg.value == LVL_COST[2]){\r\n            level = 2;\r\n        }else if(msg.value == LVL_COST[3]){\r\n            level = 3;\r\n        }else if(msg.value == LVL_COST[4]){\r\n            level = 4;\r\n        }else if(msg.value == LVL_COST[5]){\r\n            level = 5;\r\n        }else if(msg.value == LVL_COST[6]){\r\n            level = 6;\r\n        }else if(msg.value == LVL_COST[7]){\r\n            level = 7;\r\n        }else if(msg.value == LVL_COST[8]){\r\n            level = 8;\r\n        }else {\r\n            revert('Incorrect Value send');\r\n        }\r\n\r\n        if(users[msg.sender].isExist){\r\n            buyLevel(level);\r\n        } else if(level == 1) {\r\n            uint refId = 0;\r\n            address upline = bytesToAddress(msg.data);\r\n\r\n            if (users[upline].isExist){\r\n                refId = users[upline].id;\r\n            } else {\r\n                revert('Incorrect upline');\r\n            }\r\n\r\n            regUser(refId);\r\n        } else {\r\n            revert(\"Please buy first level for 0.03 ETH\");\r\n        }\r\n    }\r\n\r\n    function regUser(uint _referrerID) public payable {\r\n        require(!users[msg.sender].isExist, 'User exist');\r\n\r\n        require(_referrerID > 0 && _referrerID <= currUserID, 'Incorrect Upline Id');\r\n\r\n        require(msg.value==LVL_COST[1], 'Incorrect Value');\r\n\r\n\r\n        if(users[userList[_referrerID]].referral.length >= UPLINE_1_LVL_LIMIT)\r\n        {\r\n            _referrerID = users[findFreeUpline(userList[_referrerID])].id;\r\n        }\r\n\r\n\r\n        UserStruct memory userStruct;\r\n        currUserID++;\r\n\r\n        userStruct = UserStruct({\r\n            isExist : true,\r\n            id : currUserID,\r\n            referrerID : _referrerID,\r\n            referral : new address[](0)\r\n        });\r\n\r\n        users[msg.sender] = userStruct;\r\n        userList[currUserID] = msg.sender;\r\n\r\n        users[msg.sender].levelExpired[1] = now + PERIOD_LENGTH;\r\n        users[msg.sender].levelExpired[2] = 0;\r\n        users[msg.sender].levelExpired[3] = 0;\r\n        users[msg.sender].levelExpired[4] = 0;\r\n        users[msg.sender].levelExpired[5] = 0;\r\n        users[msg.sender].levelExpired[6] = 0;\r\n        users[msg.sender].levelExpired[7] = 0;\r\n        users[msg.sender].levelExpired[8] = 0;\r\n\r\n        users[userList[_referrerID]].referral.push(msg.sender);\r\n\r\n        payForLevel(1, msg.sender);\r\n\r\n        emit regLevelEvent(msg.sender, userList[_referrerID], now);\r\n    }\r\n\r\n    function buyLevel(uint _lvl) public payable {\r\n        require(users[msg.sender].isExist, 'User not exist');\r\n\r\n        require( _lvl>0 && _lvl<=8, 'Incorrect level');\r\n\r\n        if(_lvl == 1){\r\n            require(msg.value==LVL_COST[1], 'Incorrect Value');\r\n            users[msg.sender].levelExpired[1] += PERIOD_LENGTH;\r\n        } else {\r\n            require(msg.value==LVL_COST[_lvl], 'Incorrect Value');\r\n\r\n            for(uint l =_lvl-1; l>0; l-- ){\r\n                require(users[msg.sender].levelExpired[l] >= now, 'Buy the previous level');\r\n            }\r\n\r\n            if(users[msg.sender].levelExpired[_lvl] == 0){\r\n                users[msg.sender].levelExpired[_lvl] = now + PERIOD_LENGTH;\r\n            } else {\r\n                users[msg.sender].levelExpired[_lvl] += PERIOD_LENGTH;\r\n            }\r\n        }\r\n        payForLevel(_lvl, msg.sender);\r\n        emit buyLevelEvent(msg.sender, _lvl, now);\r\n    }\r\n\r\n    function payForLevel(uint _lvl, address _user) internal {\r\n\r\n        address upline;\r\n        address upline1;\r\n        address upline2;\r\n        address upline3;\r\n        if(_lvl == 1 || _lvl == 5){\r\n            upline = userList[users[_user].referrerID];\r\n        } else if(_lvl == 2 || _lvl == 6){\r\n            upline1 = userList[users[_user].referrerID];\r\n            upline = userList[users[upline1].referrerID];\r\n        } else if(_lvl == 3 || _lvl == 7){\r\n            upline1 = userList[users[_user].referrerID];\r\n            upline2 = userList[users[upline1].referrerID];\r\n            upline = userList[users[upline2].referrerID];\r\n        } else if(_lvl == 4 || _lvl == 8){\r\n            upline1 = userList[users[_user].referrerID];\r\n            upline2 = userList[users[upline1].referrerID];\r\n            upline3 = userList[users[upline2].referrerID];\r\n            upline = userList[users[upline3].referrerID];\r\n        }\r\n\r\n        if(!users[upline].isExist){\r\n            upline = userList[1];\r\n        }\r\n\r\n        if(users[upline].levelExpired[_lvl] >= now ){\r\n            address(uint160(upline)).transfer(LVL_COST[_lvl]);\r\n            emit getMoneyForLevelEvent(upline, msg.sender, _lvl, now);\r\n        } else {\r\n            emit lostMoneyForLevelEvent(upline, msg.sender, _lvl, now);\r\n            payForLevel(_lvl,upline);\r\n        }\r\n    }\r\n\r\n    function findFreeUpline(address _user) public view returns(address) {\r\n        if(users[_user].referral.length < UPLINE_1_LVL_LIMIT){\r\n            return _user;\r\n        }\r\n\r\n        address[] memory referrals = new address[](62);\r\n        referrals[0] = users[_user].referral[0]; \r\n        referrals[1] = users[_user].referral[1];\r\n\r\n        address FreeUpline;\r\n        bool noFreeUpline = true;\r\n\r\n        for(uint i = 0; i<62;i++){\r\n            if(users[referrals[i]].referral.length == UPLINE_1_LVL_LIMIT){\r\n                if(i<30){\r\n                    referrals[(i+1)*2] = users[referrals[i]].referral[0];\r\n                    referrals[(i+1)*2+1] = users[referrals[i]].referral[1];\r\n                }\r\n            }else{\r\n                noFreeUpline = false;\r\n                FreeUpline = referrals[i];\r\n                break;\r\n            }\r\n        }\r\n        require(!noFreeUpline, 'No Free Upline');\r\n        return FreeUpline;\r\n\r\n    }\r\n\r\n    function viewUserReferral(address _user) public view returns(address[] memory) {\r\n        return users[_user].referral;\r\n    }\r\n\r\n    function viewUserLevelExpired(address _user, uint _lvl) public view returns(uint) {\r\n        return users[_user].levelExpired[_lvl];\r\n    }\r\n    \r\n    function bytesToAddress(bytes memory bys) private pure returns (address  addr ) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"findFreeUpline\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewUserReferral\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referrerID\",\"type\":\"uint256\"}],\"name\":\"regUser\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currUserID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"isExist\",\"type\":\"bool\"},{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"referrerID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_lvl\",\"type\":\"uint256\"}],\"name\":\"viewUserLevelExpired\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LVL_COST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lvl\",\"type\":\"uint256\"}],\"name\":\"buyLevel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"regLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_lvl\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"buyLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_lvl\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"prolongateLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_referral\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_lvl\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"getMoneyForLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_referral\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_lvl\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"lostMoneyForLevelEvent\",\"type\":\"event\"}]","ContractName":"CryptoBinar","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://63b525ee8ba745caae52695b3b1d9f25306bb7439e87cbb4b3e24b1dc8a7e928"}]}