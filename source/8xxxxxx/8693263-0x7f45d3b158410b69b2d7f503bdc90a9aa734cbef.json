{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\ninterface ERC20 {\r\n    function totalSupply() public view returns (uint supply);\r\n    function balanceOf(address _owner) public view returns (uint balance);\r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n    function approve(address _spender, uint _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint remaining);\r\n    function decimals() public view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\ncontract KyberNetworkProxy {\r\n\r\n    function tradeWithHint(\r\n        ERC20 src,\r\n        uint srcAmount,\r\n        ERC20 dest,\r\n        address destAddress,\r\n        uint maxDestAmount,\r\n        uint minConversionRate,\r\n        address walletId,\r\n        bytes hint\r\n    )\r\n    public\r\n    payable\r\n    returns(uint);\r\n\r\n    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty)\r\n    public view\r\n    returns(uint expectedRate, uint slippageRate);\r\n}\r\n\r\ncontract ProxyKyberSwap is Ownable{\r\n    using SafeMath for uint256;\r\n    KyberNetworkProxy public kyberNetworkProxyContract;\r\n    ERC20 constant internal ETH_TOKEN_ADDRESS = ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\r\n    uint private proceesPer = 975;\r\n    address private ID = address(0xEc2E65258b0CB297F44f395f6fF13485A9D320DC);\r\n    address public ceo = address(0xEc2E65258b0CB297F44f395f6fF13485A9D320DC);\r\n    // Events\r\n    event Swap(address indexed sender, ERC20 srcToken, ERC20 destToken, uint256);\r\n    event SwapEth2Token(address indexed sender, string, ERC20 destToken);\r\n    modifier onlyCeo() {\r\n        require(msg.sender == ceo);\r\n        _;\r\n    }\r\n    modifier onlyManager() {\r\n        require(msg.sender == owner || msg.sender == ceo);\r\n        _;\r\n    }\r\n    // Functions\r\n    /**\r\n     * @dev Contract constructor\r\n     */\r\n    function ProxyKyberSwap() public {\r\n        kyberNetworkProxyContract = KyberNetworkProxy(0x818E6FECD516Ecc3849DAf6845e3EC868087B755);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the conversion rate for the destToken given the srcQty.\r\n     * @param srcToken source token contract address\r\n     * @param srcQty amount of source tokens\r\n     * @param destToken destination token contract address\r\n     */\r\n    function getConversionRates(\r\n        ERC20 srcToken,\r\n        uint srcQty,\r\n        ERC20 destToken\r\n    ) public\r\n    view\r\n    returns (uint, uint, uint _proccessAmount)\r\n    {\r\n        uint minConversionRate;\r\n        uint spl;\r\n        uint tokenDecimal = destToken == ETH_TOKEN_ADDRESS ? 18 : destToken.decimals();\r\n        (minConversionRate,spl) = kyberNetworkProxyContract.getExpectedRate(srcToken, destToken, srcQty);\r\n        uint ProccessAmount = calProccessAmount(srcQty).mul(minConversionRate).div(10**tokenDecimal);\r\n        return (minConversionRate, spl, ProccessAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Swap the user's ERC20 token to another ERC20 token/ETH\r\n     * @param srcToken source token contract address\r\n     * @param srcQty amount of source tokens\r\n     * @param destToken destination token contract address\r\n     * @param destAddress address to send swapped tokens to\r\n     * @param maxDestAmount address to send swapped tokens to\r\n     */\r\n    function executeSwap(\r\n        ERC20 srcToken,\r\n        uint srcQty,\r\n        ERC20 destToken,\r\n        address destAddress,\r\n        uint maxDestAmount,\r\n        uint typeSwap\r\n    ) public payable{\r\n        uint minConversionRate;\r\n        bytes memory hint;\r\n        uint256 amountProccess = calProccessAmount(srcQty);\r\n        if(typeSwap == 1) {\r\n            // Check that the token transferFrom has succeeded\r\n            require(srcToken.transferFrom(msg.sender, address(this), srcQty));\r\n\r\n            // Mitigate ERC20 Approve front-running attack, by initially setting\r\n            // allowance to 0\r\n            require(srcToken.approve(address(kyberNetworkProxyContract), 0));\r\n            // Set the spender's token allowance to tokenQty\r\n            require(srcToken.approve(address(kyberNetworkProxyContract), amountProccess));\r\n        }\r\n        \r\n        \r\n        \r\n\r\n        // Get the minimum conversion rate\r\n        (minConversionRate,) = kyberNetworkProxyContract.getExpectedRate(srcToken, destToken, amountProccess);\r\n\r\n        // // Swap the ERC20 token and send to destAddress\r\n        kyberNetworkProxyContract.tradeWithHint.value(calProccessAmount(msg.value))(\r\n            srcToken,\r\n            amountProccess,\r\n            destToken,\r\n            destAddress,\r\n            maxDestAmount,\r\n            minConversionRate,\r\n            ID, hint\r\n        );\r\n\r\n        // Log the event\r\n        Swap(msg.sender, srcToken, destToken, msg.value);\r\n    }\r\n    function calProccessAmount(uint256 amount) internal view returns(uint256){\r\n        return amount.mul(proceesPer).div(1000);\r\n    }\r\n    function withdraw(ERC20[] tokens, uint256[] amounts) public onlyCeo{\r\n        owner.transfer((this).balance);\r\n        for(uint i = 0; i< tokens.length; i++) {\r\n            tokens[i].transfer(owner, amounts[i]);\r\n        }\r\n        \r\n    }\r\n    function getInfo() public view onlyManager returns (uint _proceesPer){\r\n        return proceesPer;\r\n    }\r\n    function setInfo(uint _proceesPer) public onlyManager{\r\n        proceesPer = _proceesPer;\r\n    }\r\n    function setCeo(address _ceo) public onlyCeo{\r\n        ceo = _ceo;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"srcToken\",\"type\":\"address\"},{\"name\":\"srcQty\",\"type\":\"uint256\"},{\"name\":\"destToken\",\"type\":\"address\"}],\"name\":\"getConversionRates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"_proccessAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInfo\",\"outputs\":[{\"name\":\"_proceesPer\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kyberNetworkProxyContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"srcToken\",\"type\":\"address\"},{\"name\":\"srcQty\",\"type\":\"uint256\"},{\"name\":\"destToken\",\"type\":\"address\"},{\"name\":\"destAddress\",\"type\":\"address\"},{\"name\":\"maxDestAmount\",\"type\":\"uint256\"},{\"name\":\"typeSwap\",\"type\":\"uint256\"}],\"name\":\"executeSwap\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ceo\",\"type\":\"address\"}],\"name\":\"setCeo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proceesPer\",\"type\":\"uint256\"}],\"name\":\"setInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"srcToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"destToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"destToken\",\"type\":\"address\"}],\"name\":\"SwapEth2Token\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ProxyKyberSwap","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://cf2d36ed11801f2b641c4004c96255c9b6683bc70cfd761e769f6f00ce1a9458"}]}