{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.24;\r\ncontract LUKTokenStore {\r\n    /** 精度，推荐是 8 */\r\n    uint8 public decimals = 8;\r\n    /** 代币总量 */\r\n    uint256 public totalSupply;\r\n    /** 查看某一地址代币余额 */\r\n    mapping (address => uint256) private tokenAmount;\r\n    /** 代币交易代理人授权列表 */\r\n    mapping (address => mapping (address => uint256)) private allowanceMapping;\r\n    //合约所有者\r\n    address private owner;\r\n    //写授权\r\n    mapping (address => bool) private authorization;\r\n    \r\n    /**\r\n     * Constructor function\r\n     * \r\n     * 初始合约\r\n     * @param initialSupply 代币总量\r\n     */\r\n    constructor (uint256 initialSupply) public {\r\n        //** 是幂运算\r\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\r\n        tokenAmount[msg.sender] = totalSupply;                // Give the creator all initial tokens\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    //定义函数修饰符，判断消息发送者是否是合约所有者\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner,\"Illegal operation.\");\r\n        _;\r\n    }\r\n    \r\n    modifier checkWrite() {\r\n        require(authorization[msg.sender] == true,\"Illegal operation.\");\r\n        _;\r\n    }\r\n    \r\n    //写授权，合约调用合约时调用者为父合约地址\r\n    function writeGrant(address _address) public onlyOwner {\r\n        authorization[_address] = true;\r\n    }\r\n    function writeRevoke(address _address) public onlyOwner {\r\n        authorization[_address] = false;\r\n    }\r\n    \r\n    /**\r\n     * 设置代币消费代理人，代理人可以在最大可使用金额内消费代币\r\n     *\r\n     * @param _from 资金所有者地址\r\n     * @param _spender 代理人地址\r\n     * @param _value 最大可使用金额\r\n     */\r\n    function approve(address _from,address _spender, uint256 _value) public checkWrite returns (bool) {\r\n        allowanceMapping[_from][_spender] = _value;\r\n        return true;\r\n    }\r\n    \r\n    function allowance(address _from, address _spender) public view returns (uint256) {\r\n        return allowanceMapping[_from][_spender];\r\n    }\r\n    \r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function transfer(address _from, address _to, uint256 _value) public checkWrite returns (bool) {\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != address(0x0),\"Invalid address\");\r\n        // Check if the sender has enough\r\n        require(tokenAmount[_from] >= _value,\"Not enough balance.\");\r\n        // Check for overflows\r\n        require(tokenAmount[_to] + _value > tokenAmount[_to],\"Target account cannot be received.\");\r\n\r\n        // 转账\r\n        // Subtract from the sender\r\n        tokenAmount[_from] -= _value;\r\n        // Add the same to the recipient\r\n        tokenAmount[_to] += _value;\r\n\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address _from,address _spender, address _to, uint256 _value) public checkWrite returns (bool) {\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_from != address(0x0),\"Invalid address\");\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != address(0x0),\"Invalid address\");\r\n        \r\n        // Check if the sender has enough\r\n        require(allowanceMapping[_from][_spender] >= _value,\"Insufficient credit limit.\");\r\n        // Check if the sender has enough\r\n        require(tokenAmount[_from] >= _value,\"Not enough balance.\");\r\n        // Check for overflows\r\n        require(tokenAmount[_to] + _value > tokenAmount[_to],\"Target account cannot be received.\");\r\n        \r\n        // 转账\r\n        // Subtract from the sender\r\n        tokenAmount[_from] -= _value;\r\n        // Add the same to the recipient\r\n        tokenAmount[_to] += _value;\r\n        \r\n        allowanceMapping[_from][_spender] -= _value; \r\n    }\r\n    \r\n    function balanceOf(address _owner) public view returns (uint256){\r\n        require(_owner != address(0x0),\"Address can't is zero.\");\r\n        return tokenAmount[_owner] ;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"writeGrant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"writeRevoke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"LUKTokenStore","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000002540be400","Library":"","LicenseType":"BSD-3-Clause","SwarmSource":"bzzr://600a83ecb1a9ca91db895003575666d551e3323063f12458c93972aa0eb3da8c"}]}