{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2019-07-09\r\n*/\r\n\r\npragma solidity ^0.5.12;\r\n//import \"github.com/oraclize/ethereum-api/oraclizeAPI.sol\";\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b; //200\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address payable public owner;\r\n  address payable public coowner;\r\n  uint256 public globalLimit = 3000000;\r\n  address public token = 0xB120f6b27934C265EA1620e4C213e03039eC7604;\r\n\r\n  // How many tokens each user got distributed\r\n  mapping(address => uint256) public distributedBalances;\r\n  \r\n  // Individual limit for special cases\r\n  mapping(address => uint256) public personalLimit;\r\n  \r\n  constructor() public {\r\n    owner = msg.sender;\r\n    coowner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  modifier onlyTeam() {\r\n    require(msg.sender == coowner || msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address payable _newOwner) onlyOwner public {\r\n    coowner = _newOwner;\r\n  }\r\n\r\n  function changeToken(address _newToken) onlyOwner public {\r\n    token = _newToken;\r\n  }\r\n\r\n\r\n  function changeGlobalLimit(uint _newGlobalLimit) onlyTeam public {\r\n    globalLimit = _newGlobalLimit;\r\n  }\r\n\r\n  function setPersonalLimit(address wallet, uint256 _newPersonalLimit) onlyTeam public {\r\n    personalLimit[wallet] = _newPersonalLimit;\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) public returns (uint);\r\n  function transfer(address to, uint value) public;\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public returns (uint);\r\n  function transferFrom(address from, address to, uint value) public;\r\n  function approve(address spender, uint value) public;\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ncontract Airdropper2 is Ownable {\r\n    using SafeMath for uint256;\r\n    function multisend(address[] calldata wallets, uint256[] calldata values) external onlyTeam returns (uint256) {\r\n        \r\n        uint256 limit = globalLimit;\r\n        uint256 tokensToIssue = 0;\r\n        address wallet = address(0);\r\n        \r\n        for (uint i = 0; i < wallets.length; i++) {\r\n\r\n            tokensToIssue = values[i];\r\n            wallet = wallets[i];\r\n\r\n           if(tokensToIssue > 0 && wallet != address(0)) { \r\n               \r\n                if(personalLimit[wallet] > globalLimit) {\r\n                    limit = personalLimit[wallet];\r\n                }\r\n\r\n                if(distributedBalances[wallet].add(tokensToIssue) > limit) {\r\n                    tokensToIssue = limit.sub(distributedBalances[wallet]);\r\n                }\r\n\r\n                if(limit > distributedBalances[wallet]) {\r\n                    distributedBalances[wallet] = distributedBalances[wallet].add(tokensToIssue);\r\n                    ERC20(token).transfer(wallet, tokensToIssue);\r\n                }\r\n           }\r\n        }\r\n    }\r\n    \r\n    function simplesend(address[] calldata wallets) external onlyTeam returns (uint256) {\r\n        \r\n        uint256 tokensToIssue = globalLimit;\r\n        address wallet = address(0);\r\n        \r\n        for (uint i = 0; i < wallets.length; i++) {\r\n            \r\n            wallet = wallets[i];\r\n           if(wallet != address(0)) {\r\n               \r\n                if(distributedBalances[wallet] == 0) {\r\n                    distributedBalances[wallet] = distributedBalances[wallet].add(tokensToIssue);\r\n                    ERC20(token).transfer(wallet, tokensToIssue);\r\n                }\r\n           }\r\n        }\r\n    }\r\n\r\n\r\n    function evacuateTokens(ERC20 _tokenInstance, uint256 _tokens) external onlyOwner returns (bool success) {\r\n        _tokenInstance.transfer(owner, _tokens);\r\n        return true;\r\n    }\r\n\r\n    function _evacuateEther() onlyOwner external {\r\n        owner.transfer(address(this).balance);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"_evacuateEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newGlobalLimit\",\"type\":\"uint256\"}],\"name\":\"changeGlobalLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newToken\",\"type\":\"address\"}],\"name\":\"changeToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coowner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"distributedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_tokenInstance\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"evacuateTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globalLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multisend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"personalLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newPersonalLimit\",\"type\":\"uint256\"}],\"name\":\"setPersonalLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"}],\"name\":\"simplesend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Airdropper2","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://bbdc118bdc96c1675b5feaa361eb94fc3e0aed3da929cb30e47fcea524de4dea"}]}