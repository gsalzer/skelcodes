{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.8;\n\n\nlibrary SafeMath {\n    \n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    \n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    \n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        \n        \n        \n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    \n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        \n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        \n\n        return c;\n    }\n\n    \n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n}\n\ninterface IERC20 {\n    \n    function totalSupply() external view returns (uint256);\n\n    \n    function balanceOf(address account) external view returns (uint256);\n\n    \n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    \n    function allowance(address owner, address spender) external view returns (uint256);\n\n    \n    function approve(address spender, uint256 amount) external returns (bool);\n\n    \n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    \n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    \n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    \n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    \n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    \n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    \n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    \n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    \n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    \n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    \n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    \n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    \n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ncontract Claimable {\n  function _claimTokens(address tokenAddress, address recipient) internal {\n    require(recipient != address(0));\n    IERC20 token = IERC20(tokenAddress);\n    uint256 balance = token.balanceOf(address(this));\n    token.transfer(recipient, balance);\n  }\n}\n\ninterface IMoneyMarketAdapter {\n  \n  function getRate(address tokenAddress) external view returns (uint256);\n\n  \n  function deposit(address tokenAddress, uint256 tokenAmount) external;\n\n  \n  function withdraw(address tokenAddress, address recipient, uint256 amount)\n    external;\n\n  \n  function withdrawAll(address tokenAddress, address recipient) external;\n\n  function claimTokens(address tokenAddress, address recipient) external;\n\n  \n  function getSupply(address tokenAddress) external returns (uint256);\n\n  \n  function getSupplyView(address tokenAddress) external view returns (uint256);\n\n  \n  function supportsToken(address tokenAddress) external view returns (bool);\n}\n\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    \n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    \n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    \n    function transfer(address recipient, uint256 amount) public returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    \n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    \n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    \n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n        return true;\n    }\n\n    \n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    \n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    \n    function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _balances[sender] = _balances[sender].sub(amount);\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    \n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n     \n    function _burn(address account, uint256 value) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    \n    function _approve(address owner, address spender, uint256 value) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    \n    function _burnFrom(address account, uint256 amount) internal {\n        _burn(account, amount);\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n    }\n}\n\ncontract ERC20Burnable is ERC20 {\n    \n    function burn(uint256 amount) public {\n        _burn(msg.sender, amount);\n    }\n\n    \n    function burnFrom(address account, uint256 amount) public {\n        _burnFrom(account, amount);\n    }\n}\n\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    \n    function add(Role storage role, address account) internal {\n        require(!has(role, account), \"Roles: account already has role\");\n        role.bearer[account] = true;\n    }\n\n    \n    function remove(Role storage role, address account) internal {\n        require(has(role, account), \"Roles: account does not have role\");\n        role.bearer[account] = false;\n    }\n\n    \n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0), \"Roles: account is the zero address\");\n        return role.bearer[account];\n    }\n}\n\ncontract MinterRole {\n    using Roles for Roles.Role;\n\n    event MinterAdded(address indexed account);\n    event MinterRemoved(address indexed account);\n\n    Roles.Role private _minters;\n\n    constructor () internal {\n        _addMinter(msg.sender);\n    }\n\n    modifier onlyMinter() {\n        require(isMinter(msg.sender), \"MinterRole: caller does not have the Minter role\");\n        _;\n    }\n\n    function isMinter(address account) public view returns (bool) {\n        return _minters.has(account);\n    }\n\n    function addMinter(address account) public onlyMinter {\n        _addMinter(account);\n    }\n\n    function renounceMinter() public {\n        _removeMinter(msg.sender);\n    }\n\n    function _addMinter(address account) internal {\n        _minters.add(account);\n        emit MinterAdded(account);\n    }\n\n    function _removeMinter(address account) internal {\n        _minters.remove(account);\n        emit MinterRemoved(account);\n    }\n}\n\ncontract ERC20Mintable is ERC20, MinterRole {\n    \n    function mint(address account, uint256 amount) public onlyMinter returns (bool) {\n        _mint(account, amount);\n        return true;\n    }\n}\n\ncontract TokenShare is ERC20Burnable, ERC20Mintable {}\n\ncontract MetaMoneyMarket is Ownable, Claimable {\n  using SafeMath for uint256;\n\n  \n  IMoneyMarketAdapter[] public moneyMarkets;\n\n  \n  mapping(address => Market) public supportedMarkets;\n  address[] public supportedMarketsList;\n\n  struct Market {\n    bool isSupported;\n    TokenShare tokenShare;\n  }\n\n  \n  constructor(address[] memory _moneyMarkets) public {\n    require(\n      _moneyMarkets.length > 0,\n      \"At least one money market has to be specified\"\n    );\n    for (uint256 i = 0; i < _moneyMarkets.length; i++) {\n      moneyMarkets.push(IMoneyMarketAdapter(_moneyMarkets[i]));\n    }\n  }\n\n  modifier checkMarketSupported(address token) {\n    require(isMarketSupported(token), \"Market is not supported\");\n    _;\n  }\n\n  \n  function deposit(address tokenAddress, uint256 tokenAmount)\n    external\n    checkMarketSupported(tokenAddress)\n  {\n    IERC20 token = IERC20(tokenAddress);\n\n    TokenShare tokenShare = supportedMarkets[tokenAddress].tokenShare;\n    uint256 tokenShareSupply = tokenShare.totalSupply();\n    uint256 tokenSupply = totalSupply(tokenAddress);\n\n    uint256 tokenSharesToMint = tokenSupply > 0\n      ? tokenShareSupply * tokenAmount / tokenSupply\n      : tokenAmount;\n\n    tokenShare.mint(msg.sender, tokenSharesToMint);\n\n    (IMoneyMarketAdapter bestMoneyMarket, ) = getBestMoneyMarket(tokenAddress);\n\n    require(\n      token.balanceOf(msg.sender) >= tokenAmount,\n      \"MetaMoneyMarket.deposit: User does not have enough balance\"\n    );\n    require(\n      token.allowance(msg.sender, address(this)) >= tokenAmount,\n      \"MetaMoneyMarket.deposit: Cannot transfer tokens from the user\"\n    );\n    token.transferFrom(msg.sender, address(this), tokenAmount);\n\n    bestMoneyMarket.deposit(tokenAddress, tokenAmount);\n  }\n\n  \n  function withdraw(address tokenAddress, uint256 tokenShareAmount)\n    external\n    checkMarketSupported(tokenAddress)\n  {\n    TokenShare tokenShare = supportedMarkets[tokenAddress].tokenShare;\n    uint256 tokenShareSupply = tokenShare.totalSupply();\n    uint256 tokenSupply = totalSupply(tokenAddress);\n\n    uint256 tokensToTransfer = tokenSupply * tokenShareAmount / tokenShareSupply;\n\n    require(\n      tokenShare.balanceOf(msg.sender) >= tokenShareAmount,\n      \"MetaMoneyMarket.withdraw: Not enough token shares\"\n    );\n    require(\n      tokenShare.allowance(msg.sender, address(this)) >= tokenShareAmount,\n      \"MetaMoneyMarket.withdraw: Cannot burn token shares\"\n    );\n    tokenShare.burnFrom(msg.sender, tokenShareAmount);\n\n    for (uint256 i = 0; i < moneyMarkets.length && tokensToTransfer > 0; i++) {\n      if (!moneyMarkets[i].supportsToken(tokenAddress)) {\n        continue;\n      }\n      uint256 supply = moneyMarkets[i].getSupply(tokenAddress);\n      if (supply == 0) {\n        continue;\n      }\n      if (supply >= tokensToTransfer) {\n        moneyMarkets[i].withdraw(tokenAddress, msg.sender, tokensToTransfer);\n        tokensToTransfer = 0;\n      } else {\n        moneyMarkets[i].withdraw(tokenAddress, msg.sender, supply);\n        tokensToTransfer -= supply;\n      }\n    }\n\n    require(\n      tokensToTransfer == 0,\n      \"MetaMoneyMarket.withdraw: Not all tokens could be withdrawn\"\n    );\n  }\n\n  \n  function addMarket(address tokenAddress) external onlyOwner {\n    IERC20 token = IERC20(tokenAddress);\n    require(\n      !supportedMarkets[tokenAddress].isSupported,\n      \"Market is already supported\"\n    );\n\n    TokenShare tokenShare = new TokenShare();\n\n    supportedMarketsList.push(tokenAddress);\n    supportedMarkets[tokenAddress].isSupported = true;\n    supportedMarkets[tokenAddress].tokenShare = tokenShare;\n\n    for (uint256 i = 0; i < moneyMarkets.length; i++) {\n      token.approve(address(moneyMarkets[i]), uint256(-1));\n      tokenShare.approve(address(moneyMarkets[i]), uint256(-1));\n    }\n  }\n\n  \n  function rebalance(address tokenAddress, uint256[] memory percentages)\n    public\n    checkMarketSupported(tokenAddress)\n    onlyOwner\n  {\n    IERC20 token = IERC20(tokenAddress);\n\n    require(percentages.length + 1 == moneyMarkets.length);\n\n    for (uint256 i = 0; i < moneyMarkets.length; i++) {\n      if (!moneyMarkets[i].supportsToken(tokenAddress)) {\n        continue;\n      }\n      moneyMarkets[i].withdrawAll(tokenAddress, address(this));\n    }\n\n    uint256 totalSupply = token.balanceOf(address(this));\n\n    for (uint256 i = 0; i < percentages.length; i++) {\n      if (!moneyMarkets[i].supportsToken(tokenAddress)) {\n        continue;\n      }\n      uint256 amountToDeposit = totalSupply * percentages[i] / 10000;\n      if (amountToDeposit == 0) {\n        continue;\n      }\n      moneyMarkets[i].deposit(tokenAddress, amountToDeposit);\n    }\n\n    uint256 remainingTokens = token.balanceOf(address(this));\n    if (\n      moneyMarkets[moneyMarkets.length - 1].supportsToken(\n        tokenAddress\n      ) && remainingTokens > 0\n    ) {\n      moneyMarkets[moneyMarkets.length - 1].deposit(\n        tokenAddress,\n        remainingTokens\n      );\n    }\n\n    require(\n      token.balanceOf(address(this)) == 0,\n      \"MetaMoneyMarket.rebalance: Not all tokens could be rebalanced\"\n    );\n  }\n\n  function claimTokens(address tokenAddress, address recipient)\n    public\n    onlyOwner\n  {\n    _claimTokens(tokenAddress, recipient);\n  }\n\n  function claimTokensFromAdapter(\n    uint256 index,\n    address tokenAddress,\n    address recipient\n  ) public onlyOwner {\n    IMoneyMarketAdapter moneyMarket = moneyMarkets[index];\n    moneyMarket.claimTokens(tokenAddress, recipient);\n  }\n\n  \n  function getTokenShare(address tokenAddress)\n    external\n    view\n    checkMarketSupported(tokenAddress)\n    returns (address)\n  {\n    return address(supportedMarkets[tokenAddress].tokenShare);\n  }\n\n  \n  function totalSupply(address tokenAddress)\n    public\n    checkMarketSupported(tokenAddress)\n    returns (uint256)\n  {\n    uint256 tokenSupply = 0;\n    for (uint256 i = 0; i < moneyMarkets.length; i++) {\n      if (!moneyMarkets[i].supportsToken(tokenAddress)) {\n        continue;\n      }\n      tokenSupply += moneyMarkets[i].getSupply(tokenAddress);\n    }\n\n    return tokenSupply;\n  }\n\n  \n  function totalSupplyView(address tokenAddress)\n    public\n    view\n    checkMarketSupported(tokenAddress)\n    returns (uint256)\n  {\n    uint256 tokenSupply = 0;\n    for (uint256 i = 0; i < moneyMarkets.length; i++) {\n      if (!moneyMarkets[i].supportsToken(tokenAddress)) {\n        continue;\n      }\n      tokenSupply += moneyMarkets[i].getSupplyView(tokenAddress);\n    }\n\n    return tokenSupply;\n  }\n\n  \n  function isMarketSupported(address tokenAddress) public view returns (bool) {\n    return supportedMarkets[tokenAddress].isSupported;\n  }\n\n  function getMarketSymbol(address tokenAddress)\n    public\n    view\n    checkMarketSupported(tokenAddress)\n    returns (string memory)\n  {\n    ERC20Detailed token = ERC20Detailed(tokenAddress);\n\n    return token.symbol();\n  }\n\n  \n  function moneyMarketsCount() public view returns (uint256) {\n    return moneyMarkets.length;\n  }\n\n  function supportedMarketsCount() public view returns (uint256) {\n    return supportedMarketsList.length;\n  }\n\n  function getDepositedAmount(address tokenAddress, address account)\n    public\n    view\n    checkMarketSupported(tokenAddress)\n    returns (uint256)\n  {\n    TokenShare tokenShare = supportedMarkets[address(tokenAddress)].tokenShare;\n\n    (uint256 tokenSupply, uint256 tokenShareSupply) = getExchangeRate(\n      tokenAddress\n    );\n    uint256 tokenShareBalance = tokenShare.balanceOf(account);\n\n    return tokenShareSupply > 0\n      ? tokenShareBalance * tokenSupply / tokenShareSupply\n      : 0;\n  }\n\n  function getExchangeRate(address tokenAddress)\n    public\n    view\n    checkMarketSupported(tokenAddress)\n    returns (uint256 tokenSupply, uint256 tokenShareSupply)\n  {\n    TokenShare tokenShare = supportedMarkets[address(tokenAddress)].tokenShare;\n\n    tokenSupply = totalSupplyView(tokenAddress);\n    tokenShareSupply = tokenShare.totalSupply();\n  }\n\n  function getBestMoneyMarket(address tokenAddress)\n    public\n    view\n    checkMarketSupported(tokenAddress)\n    returns (IMoneyMarketAdapter bestMoneyMarket, uint256 bestRate)\n  {\n    bestMoneyMarket = IMoneyMarketAdapter(address(0));\n    bestRate = 0;\n    for (uint256 i = 0; i < moneyMarkets.length; i++) {\n      if (!moneyMarkets[i].supportsToken(tokenAddress)) {\n        continue;\n      }\n      uint256 rate = moneyMarkets[i].getRate(tokenAddress);\n      if (rate > bestRate) {\n        bestRate = rate;\n        bestMoneyMarket = moneyMarkets[i];\n      }\n    }\n\n    require(address(bestMoneyMarket) != address(0));\n  }\n\n  function getBestInterestRate(address tokenAddress)\n    public\n    view\n    checkMarketSupported(tokenAddress)\n    returns (uint256)\n  {\n    (, uint256 bestRate) = getBestMoneyMarket(tokenAddress);\n\n    return bestRate;\n  }\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getBestInterestRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getDepositedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"claimTokensFromAdapter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportedMarkets\",\"outputs\":[{\"name\":\"isSupported\",\"type\":\"bool\"},{\"name\":\"tokenShare\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"percentages\",\"type\":\"uint256[]\"}],\"name\":\"rebalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"moneyMarketsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supportedMarketsList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"totalSupplyView\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"addMarket\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"moneyMarkets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"isMarketSupported\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supportedMarketsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getMarketSymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getBestMoneyMarket\",\"outputs\":[{\"name\":\"bestMoneyMarket\",\"type\":\"address\"},{\"name\":\"bestRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getExchangeRate\",\"outputs\":[{\"name\":\"tokenSupply\",\"type\":\"uint256\"},{\"name\":\"tokenShareSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getTokenShare\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokenShareAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_moneyMarkets\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MetaMoneyMarket","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000014371facd3d62ec68a2603040b2660061314a9f700000000000000000000000016d0d3cb2b3697abca5331c51b72895f9913ea83","Library":"","SwarmSource":"bzzr://8b472ed8ada3c34ef3d3d8730e59611611e1e229178be1ce466dc7b3e61e2554"}]}