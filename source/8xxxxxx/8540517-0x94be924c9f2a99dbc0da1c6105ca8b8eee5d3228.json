{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.11;\r\n\r\ninterface IERC20Token {\r\n\tfunction decimals() external pure returns (uint8);\r\n}\r\n\r\ninterface KyberProxy {\r\n\tfunction getExpectedRate(IERC20Token _from, IERC20Token _to, uint256 _amount) external view returns(uint256, uint256);\r\n}\r\n\r\ncontract KyberPrice {\r\n\tKyberProxy private proxy = KyberProxy(0x818E6FECD516Ecc3849DAf6845e3EC868087B755);\r\n\tIERC20Token private etherToken = IERC20Token(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n\r\n\tfunction getOutputAmount(IERC20Token _from, IERC20Token _to, uint256 _amount) internal view returns (uint256) {\r\n\t\t(uint256 expectedRate, ) = proxy.getExpectedRate(_from, _to, _amount);\r\n\t\tuint256 defaultMultiplier = getMultiplier(etherToken);\r\n\t\tuint256 fromMultiplier = getMultiplier(_from);\r\n\t\tuint256 toMultiplier = getMultiplier(_to);\r\n\t\tuint256 amount = (expectedRate * toMultiplier * _amount) / (defaultMultiplier * fromMultiplier);\r\n\t\treturn amount;\r\n\t}\r\n\r\n\tfunction getInputAmount(IERC20Token _from, IERC20Token _to, uint256 _amount) internal view returns (uint256) {\r\n\t\tuint256 initialAmount = getMultiplier(_from);\r\n\t\tuint256 initialReturn = getOutputAmount(_from, _to, initialAmount);\r\n\t\tif (initialReturn == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tuint256 initialCost = _amount * initialAmount / initialReturn;\r\n\t\tuint256 finalReturn = getOutputAmount(_from, _to, initialCost);\r\n\t\tif (finalReturn == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\treturn _amount * initialCost / finalReturn;\r\n\t}\r\n\t\r\n\tfunction getMultiplier(IERC20Token _token) private view returns(uint256) {\r\n\t\treturn 10 ** getDecimals(_token);\r\n\t}\r\n\t\r\n\tfunction getDecimals(IERC20Token _token) private view returns(uint256) {\r\n\t\tif (_token == etherToken) {\r\n\t\t\treturn 18;\r\n\t\t}\r\n\t\treturn _token.decimals();\r\n\t}\r\n}\r\n\r\ncontract KyberMultiPrice is KyberPrice {\r\n\tfunction getOutputAmounts(IERC20Token _from, IERC20Token _to, uint256 _amount) external view returns (uint256[100] memory _amounts) {\r\n\t\tfor (uint256 i = 0; i < 100; i++) {\r\n\t\t\t_amounts[i] = getOutputAmount(_from, _to, (i + 1) * _amount / 100);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getInputAmounts(IERC20Token _from, IERC20Token _to, uint256 _amount) external view returns (uint256[100] memory _amounts) {\r\n\t\tfor (uint256 i = 0; i < 100; i++) {\r\n\t\t\t_amounts[i] = getInputAmount(_from, _to, (i + 1) * _amount / 100);\r\n\t\t}\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"internalType\":\"contract IERC20Token\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Token\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getInputAmounts\",\"outputs\":[{\"internalType\":\"uint256[100]\",\"name\":\"_amounts\",\"type\":\"uint256[100]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract IERC20Token\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Token\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getOutputAmounts\",\"outputs\":[{\"internalType\":\"uint256[100]\",\"name\":\"_amounts\",\"type\":\"uint256[100]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"KyberMultiPrice","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://069ad4f433175d34e36edb417c01181f7b06aaaa266005174e833fd934fa21fc"}]}