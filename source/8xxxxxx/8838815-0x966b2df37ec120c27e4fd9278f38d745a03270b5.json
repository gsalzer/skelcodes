{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n\r\nDeployed by Ren Project, https://renproject.io\r\n\r\nCommit hash: 261d638\r\nRepository: https://github.com/renproject/darknode-sol\r\nIssues: https://github.com/renproject/darknode-sol/issues\r\n\r\nLicenses\r\nopenzeppelin-solidity: (MIT) https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/LICENSE\r\ndarknode-sol: (GNU GPL V3) https://github.com/renproject/darknode-sol/blob/master/LICENSE\r\n\r\n*/\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\ncontract Claimable {\r\n    address private _pendingOwner;\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    \r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    \r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    \r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Claimable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    \r\n    modifier onlyPendingOwner() {\r\n      require(msg.sender == _pendingOwner, \"Claimable: caller is not the pending owner\");\r\n      _;\r\n    }\r\n\r\n    \r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    \r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    \r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n      _pendingOwner = newOwner;\r\n    }\r\n\r\n    \r\n    function claimOwnership() public onlyPendingOwner {\r\n      emit OwnershipTransferred(_owner, _pendingOwner);\r\n      _owner = _pendingOwner;\r\n      _pendingOwner = address(0);\r\n    }\r\n}\r\n\r\nlibrary ECDSA {\r\n    \r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        \r\n        if (signature.length != 65) {\r\n            revert(\"signature's length is invalid\");\r\n        }\r\n\r\n        \r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        \r\n        \r\n        \r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := byte(0, mload(add(signature, 0x60)))\r\n        }\r\n\r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            revert(\"signature's s is in the wrong range\");\r\n        }\r\n\r\n        if (v != 27 && v != 28) {\r\n            revert(\"signature's v is in the wrong range\");\r\n        }\r\n\r\n        \r\n        return ecrecover(hash, v, r, s);\r\n    }\r\n\r\n    \r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        \r\n        \r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n}\r\n\r\nlibrary String {\r\n\r\n    \r\n    \r\n    function fromUint(uint _i) internal pure returns (string memory) {\r\n        if (_i == 0) {\r\n            return \"0\";\r\n        }\r\n        uint j = _i;\r\n        uint len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len - 1;\r\n        while (_i != 0) {\r\n            bstr[k--] = byte(uint8(48 + _i % 10));\r\n            _i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n\r\n    \r\n    function fromBytes32(bytes32 _value) internal pure returns(string memory) {\r\n        bytes32 value = bytes32(uint256(_value));\r\n        bytes memory alphabet = \"0123456789abcdef\";\r\n\r\n        bytes memory str = new bytes(32 * 2 + 2);\r\n        str[0] = '0';\r\n        str[1] = 'x';\r\n        for (uint i = 0; i < 32; i++) {\r\n            str[2+i*2] = alphabet[uint(uint8(value[i] >> 4))];\r\n            str[3+i*2] = alphabet[uint(uint8(value[i] & 0x0f))];\r\n        }\r\n        return string(str);\r\n    }\r\n\r\n    \r\n    function fromAddress(address _addr) internal pure returns(string memory) {\r\n        bytes32 value = bytes32(uint256(_addr));\r\n        bytes memory alphabet = \"0123456789abcdef\";\r\n\r\n        bytes memory str = new bytes(20 * 2 + 2);\r\n        str[0] = '0';\r\n        str[1] = 'x';\r\n        for (uint i = 0; i < 20; i++) {\r\n            str[2+i*2] = alphabet[uint(uint8(value[i + 12] >> 4))];\r\n            str[3+i*2] = alphabet[uint(uint8(value[i + 12] & 0x0f))];\r\n        }\r\n        return string(str);\r\n    }\r\n\r\n    \r\n    function add4(string memory a, string memory b, string memory c, string memory d) internal pure returns (string memory) {\r\n        return string(abi.encodePacked(a, b, c, d));\r\n    }\r\n}\r\n\r\nlibrary Compare {\r\n\r\n    function bytesEqual(bytes memory a, bytes memory b) internal pure returns (bool) {\r\n        if (a.length != b.length) {\r\n            return false;\r\n        }\r\n        for (uint i = 0; i < a.length; i ++) {\r\n            if (a[i] != b[i]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\nlibrary Validate {\r\n\r\n    \r\n    \r\n    \r\n    \r\n    function duplicatePropose(\r\n        uint256 _height,\r\n        uint256 _round,\r\n        bytes memory _blockhash1,\r\n        uint256 _validRound1,\r\n        bytes memory _signature1,\r\n        bytes memory _blockhash2,\r\n        uint256 _validRound2,\r\n        bytes memory _signature2\r\n    ) internal pure returns (address) {\r\n        require(!Compare.bytesEqual(_signature1, _signature2), \"Validate: same signature\");\r\n        address signer1 = recoverPropose(_height, _round, _blockhash1, _validRound1, _signature1);\r\n        address signer2 = recoverPropose(_height, _round, _blockhash2, _validRound2, _signature2);\r\n        require(signer1 == signer2, \"Validate: different signer\");\r\n        return signer1;\r\n    }\r\n\r\n    function recoverPropose(\r\n        uint256 _height,\r\n        uint256 _round,\r\n        bytes memory _blockhash,\r\n        uint256 _validRound,\r\n        bytes memory _signature\r\n    ) internal pure returns (address) {\r\n        return ECDSA.recover(sha256(proposeMessage(_height, _round, _blockhash, _validRound)), _signature);\r\n    }\r\n\r\n    function proposeMessage(\r\n        uint256 _height,\r\n        uint256 _round,\r\n        bytes memory _blockhash,\r\n        uint256 _validRound\r\n    ) internal pure returns (bytes memory) {\r\n        return abi.encodePacked(\r\n            \"Propose(Height=\", String.fromUint(_height),\r\n            \",Round=\", String.fromUint(_round),\r\n            \",BlockHash=\", string(_blockhash),\r\n            \",ValidRound=\", String.fromUint(_validRound),\r\n            \")\"\r\n        );\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    \r\n    function duplicatePrevote(\r\n        uint256 _height,\r\n        uint256 _round,\r\n        bytes memory _blockhash1,\r\n        bytes memory _signature1,\r\n        bytes memory _blockhash2,\r\n        bytes memory _signature2\r\n    ) internal pure returns (address) {\r\n        require(!Compare.bytesEqual(_signature1, _signature2), \"Validate: same signature\");\r\n        address signer1 = recoverPrevote(_height, _round, _blockhash1, _signature1);\r\n        address signer2 = recoverPrevote(_height, _round, _blockhash2, _signature2);\r\n        require(signer1 == signer2, \"Validate: different signer\");\r\n        return signer1;\r\n    }\r\n\r\n    function recoverPrevote(\r\n        uint256 _height,\r\n        uint256 _round,\r\n        bytes memory _blockhash,\r\n        bytes memory _signature\r\n    ) internal pure returns (address) {\r\n        return ECDSA.recover(sha256(prevoteMessage(_height, _round, _blockhash)), _signature);\r\n    }\r\n\r\n    function prevoteMessage(\r\n        uint256 _height,\r\n        uint256 _round,\r\n        bytes memory _blockhash\r\n    ) internal pure returns (bytes memory) {\r\n        return abi.encodePacked(\r\n            \"Prevote(Height=\", String.fromUint(_height),\r\n            \",Round=\", String.fromUint(_round),\r\n            \",BlockHash=\", string(_blockhash),\r\n            \")\"\r\n        );\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    \r\n    function duplicatePrecommit(\r\n        uint256 _height,\r\n        uint256 _round,\r\n        bytes memory _blockhash1,\r\n        bytes memory _signature1,\r\n        bytes memory _blockhash2,\r\n        bytes memory _signature2\r\n    ) internal pure returns (address) {\r\n        require(!Compare.bytesEqual(_signature1, _signature2), \"Validate: same signature\");\r\n        address signer1 = recoverPrecommit(_height, _round, _blockhash1, _signature1);\r\n        address signer2 = recoverPrecommit(_height, _round, _blockhash2, _signature2);\r\n        require(signer1 == signer2, \"Validate: different signer\");\r\n        return signer1;\r\n    }\r\n\r\n    function recoverPrecommit(\r\n        uint256 _height,\r\n        uint256 _round,\r\n        bytes memory _blockhash,\r\n        bytes memory _signature\r\n    ) internal pure returns (address) {\r\n        return ECDSA.recover(sha256(precommitMessage(_height, _round, _blockhash)), _signature);\r\n    }\r\n\r\n    function precommitMessage(\r\n        uint256 _height,\r\n        uint256 _round,\r\n        bytes memory _blockhash\r\n    ) internal pure returns (bytes memory) {\r\n        return abi.encodePacked(\r\n            \"Precommit(Height=\", String.fromUint(_height),\r\n            \",Round=\", String.fromUint(_round),\r\n            \",BlockHash=\", string(_blockhash),\r\n            \")\"\r\n        );\r\n    }\r\n\r\n    function recoverSecret(\r\n        uint256 _a,\r\n        uint256 _b,\r\n        uint256 _c,\r\n        uint256 _d,\r\n        uint256 _e,\r\n        uint256 _f,\r\n        bytes memory _signature\r\n    ) internal pure returns (address) {\r\n        return ECDSA.recover(sha256(secretMessage(_a, _b, _c, _d, _e, _f)), _signature);\r\n    }\r\n\r\n    function secretMessage(\r\n        uint256 _a,\r\n        uint256 _b,\r\n        uint256 _c,\r\n        uint256 _d,\r\n        uint256 _e,\r\n        uint256 _f\r\n    ) internal pure returns (bytes memory) {\r\n        return abi.encodePacked(\r\n            \"Secret(\",\r\n            \"ShamirShare(\",\r\n            String.fromUint(_a),\r\n            \",\", String.fromUint(_b),\r\n            \",S256N(\", String.fromUint(_c),\r\n            \"),\",\r\n            \"S256PrivKey(\",\r\n            \"S256N(\", String.fromUint(_d),\r\n            \"),\",\r\n            \"S256P(\", String.fromUint(_e),\r\n            \"),\",\r\n            \"S256P(\", String.fromUint(_f),\r\n            \")\",\r\n            \")\",\r\n            \")\",\r\n            \")\"\r\n        );\r\n    }\r\n}\r\n\r\ncontract Context {\r\n    \r\n    \r\n    constructor () internal { }\r\n    \r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; \r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    \r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    \r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    \r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    \r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    \r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    \r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    \r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    \r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        \r\n        \r\n        \r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    \r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        \r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        \r\n\r\n        return c;\r\n    }\r\n\r\n    \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    \r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n\r\n    \r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    \r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    \r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    \r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    \r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    \r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    \r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    \r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    \r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    \r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    \r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    \r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    \r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    \r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    \r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    \r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    \r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    \r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    \r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n     \r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    \r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    \r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n}\r\n\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    \r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    \r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    \r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\ncontract PauserRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event PauserAdded(address indexed account);\r\n    event PauserRemoved(address indexed account);\r\n\r\n    Roles.Role private _pausers;\r\n\r\n    constructor () internal {\r\n        _addPauser(_msgSender());\r\n    }\r\n\r\n    modifier onlyPauser() {\r\n        require(isPauser(_msgSender()), \"PauserRole: caller does not have the Pauser role\");\r\n        _;\r\n    }\r\n\r\n    function isPauser(address account) public view returns (bool) {\r\n        return _pausers.has(account);\r\n    }\r\n\r\n    function addPauser(address account) public onlyPauser {\r\n        _addPauser(account);\r\n    }\r\n\r\n    function renouncePauser() public {\r\n        _removePauser(_msgSender());\r\n    }\r\n\r\n    function _addPauser(address account) internal {\r\n        _pausers.add(account);\r\n        emit PauserAdded(account);\r\n    }\r\n\r\n    function _removePauser(address account) internal {\r\n        _pausers.remove(account);\r\n        emit PauserRemoved(account);\r\n    }\r\n}\r\n\r\ncontract Pausable is Context, PauserRole {\r\n    \r\n    event Paused(address account);\r\n\r\n    \r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    \r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    \r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    \r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    \r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    \r\n    function pause() public onlyPauser whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    \r\n    function unpause() public onlyPauser whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\ncontract ERC20Pausable is ERC20, Pausable {\r\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.transfer(to, value);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.approve(spender, value);\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public whenNotPaused returns (bool) {\r\n        return super.increaseAllowance(spender, addedValue);\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public whenNotPaused returns (bool) {\r\n        return super.decreaseAllowance(spender, subtractedValue);\r\n    }\r\n}\r\n\r\ncontract ERC20Burnable is Context, ERC20 {\r\n    \r\n    function burn(uint256 amount) public {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    \r\n    function burnFrom(address account, uint256 amount) public {\r\n        _burnFrom(account, amount);\r\n    }\r\n}\r\n\r\ncontract RenToken is Ownable, ERC20Detailed, ERC20Pausable, ERC20Burnable {\r\n\r\n    string private constant _name = \"Republic Token\";\r\n    string private constant _symbol = \"REN\";\r\n    uint8 private constant _decimals = 18;\r\n\r\n    uint256 public constant INITIAL_SUPPLY = 1000000000 * 10**uint256(_decimals);\r\n\r\n    \r\n    constructor() ERC20Burnable() ERC20Pausable() ERC20Detailed(_name, _symbol, _decimals) public {\r\n        _mint(msg.sender, INITIAL_SUPPLY);\r\n    }\r\n\r\n    function transferTokens(address beneficiary, uint256 amount) public onlyOwner returns (bool) {\r\n        \r\n        \r\n        require(amount > 0);\r\n\r\n        _transfer(msg.sender, beneficiary, amount);\r\n        emit Transfer(msg.sender, beneficiary, amount);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\nlibrary LinkedList {\r\n\r\n    \r\n    address public constant NULL = address(0);\r\n\r\n    \r\n    struct Node {\r\n        bool inList;\r\n        address previous;\r\n        address next;\r\n    }\r\n\r\n    \r\n    struct List {\r\n        mapping (address => Node) list;\r\n    }\r\n\r\n    \r\n    function insertBefore(List storage self, address target, address newNode) internal {\r\n        require(!isInList(self, newNode), \"LinkedList: already in list\");\r\n        require(isInList(self, target) || target == NULL, \"LinkedList: not in list\");\r\n\r\n        \r\n        address prev = self.list[target].previous;\r\n\r\n        self.list[newNode].next = target;\r\n        self.list[newNode].previous = prev;\r\n        self.list[target].previous = newNode;\r\n        self.list[prev].next = newNode;\r\n\r\n        self.list[newNode].inList = true;\r\n    }\r\n\r\n    \r\n    function insertAfter(List storage self, address target, address newNode) internal {\r\n        require(!isInList(self, newNode), \"LinkedList: already in list\");\r\n        require(isInList(self, target) || target == NULL, \"LinkedList: not in list\");\r\n\r\n        \r\n        address n = self.list[target].next;\r\n\r\n        self.list[newNode].previous = target;\r\n        self.list[newNode].next = n;\r\n        self.list[target].next = newNode;\r\n        self.list[n].previous = newNode;\r\n\r\n        self.list[newNode].inList = true;\r\n    }\r\n\r\n    \r\n    function remove(List storage self, address node) internal {\r\n        require(isInList(self, node), \"LinkedList: not in list\");\r\n        if (node == NULL) {\r\n            return;\r\n        }\r\n        address p = self.list[node].previous;\r\n        address n = self.list[node].next;\r\n\r\n        self.list[p].next = n;\r\n        self.list[n].previous = p;\r\n\r\n        \r\n        \r\n        self.list[node].inList = false;\r\n        delete self.list[node];\r\n    }\r\n\r\n    \r\n    function prepend(List storage self, address node) internal {\r\n        \r\n\r\n        insertBefore(self, begin(self), node);\r\n    }\r\n\r\n    \r\n    function append(List storage self, address node) internal {\r\n        \r\n\r\n        insertAfter(self, end(self), node);\r\n    }\r\n\r\n    function swap(List storage self, address left, address right) internal {\r\n        \r\n\r\n        address previousRight = self.list[right].previous;\r\n        remove(self, right);\r\n        insertAfter(self, left, right);\r\n        remove(self, left);\r\n        insertAfter(self, previousRight, left);\r\n    }\r\n\r\n    function isInList(List storage self, address node) internal view returns (bool) {\r\n        return self.list[node].inList;\r\n    }\r\n\r\n    \r\n    function begin(List storage self) internal view returns (address) {\r\n        return self.list[NULL].next;\r\n    }\r\n\r\n    \r\n    function end(List storage self) internal view returns (address) {\r\n        return self.list[NULL].previous;\r\n    }\r\n\r\n    function next(List storage self, address node) internal view returns (address) {\r\n        require(isInList(self, node), \"LinkedList: not in list\");\r\n        return self.list[node].next;\r\n    }\r\n\r\n    function previous(List storage self, address node) internal view returns (address) {\r\n        require(isInList(self, node), \"LinkedList: not in list\");\r\n        return self.list[node].previous;\r\n    }\r\n\r\n}\r\n\r\ncontract DarknodeRegistryStore is Claimable {\r\n    using SafeMath for uint256;\r\n\r\n    string public VERSION; \r\n\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    struct Darknode {\r\n        \r\n        \r\n        \r\n        \r\n        address payable owner;\r\n\r\n        \r\n        \r\n        \r\n        uint256 bond;\r\n\r\n        \r\n        uint256 registeredAt;\r\n\r\n        \r\n        uint256 deregisteredAt;\r\n\r\n        \r\n        \r\n        \r\n        \r\n        bytes publicKey;\r\n    }\r\n\r\n    \r\n    mapping(address => Darknode) private darknodeRegistry;\r\n    LinkedList.List private darknodes;\r\n\r\n    \r\n    RenToken public ren;\r\n\r\n    \r\n    \r\n    \r\n    \r\n    constructor(\r\n        string memory _VERSION,\r\n        RenToken _ren\r\n    ) public {\r\n        VERSION = _VERSION;\r\n        ren = _ren;\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    \r\n    function recoverTokens(address _token) external onlyOwner {\r\n        require(_token != address(ren), \"DarknodeRegistryStore: not allowed to recover REN\");\r\n\r\n        if (_token == address(0x0)) {\r\n            msg.sender.transfer(address(this).balance);\r\n        } else {\r\n            ERC20(_token).transfer(msg.sender, ERC20(_token).balanceOf(address(this)));\r\n        }\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    function appendDarknode(\r\n        address _darknodeID,\r\n        address payable _darknodeOwner,\r\n        uint256 _bond,\r\n        bytes calldata _publicKey,\r\n        uint256 _registeredAt,\r\n        uint256 _deregisteredAt\r\n    ) external onlyOwner {\r\n        Darknode memory darknode = Darknode({\r\n            owner: _darknodeOwner,\r\n            bond: _bond,\r\n            publicKey: _publicKey,\r\n            registeredAt: _registeredAt,\r\n            deregisteredAt: _deregisteredAt\r\n        });\r\n        darknodeRegistry[_darknodeID] = darknode;\r\n        LinkedList.append(darknodes, _darknodeID);\r\n    }\r\n\r\n    \r\n    function begin() external view onlyOwner returns(address) {\r\n        return LinkedList.begin(darknodes);\r\n    }\r\n\r\n    \r\n    \r\n    function next(address darknodeID) external view onlyOwner returns(address) {\r\n        return LinkedList.next(darknodes, darknodeID);\r\n    }\r\n\r\n    \r\n    \r\n    function removeDarknode(address darknodeID) external onlyOwner {\r\n        uint256 bond = darknodeRegistry[darknodeID].bond;\r\n        delete darknodeRegistry[darknodeID];\r\n        LinkedList.remove(darknodes, darknodeID);\r\n        require(ren.transfer(owner(), bond), \"DarknodeRegistryStore: bond transfer failed\");\r\n    }\r\n\r\n    \r\n    \r\n    function updateDarknodeBond(address darknodeID, uint256 decreasedBond) external onlyOwner {\r\n        uint256 previousBond = darknodeRegistry[darknodeID].bond;\r\n        require(decreasedBond < previousBond, \"DarknodeRegistryStore: bond not decreased\");\r\n        darknodeRegistry[darknodeID].bond = decreasedBond;\r\n        require(ren.transfer(owner(), previousBond.sub(decreasedBond)), \"DarknodeRegistryStore: bond transfer failed\");\r\n    }\r\n\r\n    \r\n    function updateDarknodeDeregisteredAt(address darknodeID, uint256 deregisteredAt) external onlyOwner {\r\n        darknodeRegistry[darknodeID].deregisteredAt = deregisteredAt;\r\n    }\r\n\r\n    \r\n    function darknodeOwner(address darknodeID) external view onlyOwner returns (address payable) {\r\n        return darknodeRegistry[darknodeID].owner;\r\n    }\r\n\r\n    \r\n    function darknodeBond(address darknodeID) external view onlyOwner returns (uint256) {\r\n        return darknodeRegistry[darknodeID].bond;\r\n    }\r\n\r\n    \r\n    function darknodeRegisteredAt(address darknodeID) external view onlyOwner returns (uint256) {\r\n        return darknodeRegistry[darknodeID].registeredAt;\r\n    }\r\n\r\n    \r\n    function darknodeDeregisteredAt(address darknodeID) external view onlyOwner returns (uint256) {\r\n        return darknodeRegistry[darknodeID].deregisteredAt;\r\n    }\r\n\r\n    \r\n    function darknodePublicKey(address darknodeID) external view onlyOwner returns (bytes memory) {\r\n        return darknodeRegistry[darknodeID].publicKey;\r\n    }\r\n}\r\n\r\ninterface IDarknodePayment {\r\n    function changeCycle() external;\r\n    function store() external returns (address);\r\n}\r\n\r\ncontract DarknodeRegistry is Claimable {\r\n    using SafeMath for uint256;\r\n\r\n    string public VERSION; \r\n\r\n    \r\n    \r\n    \r\n    struct Epoch {\r\n        uint256 epochhash;\r\n        uint256 blocktime;\r\n    }\r\n\r\n    uint256 public numDarknodes;\r\n    uint256 public numDarknodesNextEpoch;\r\n    uint256 public numDarknodesPreviousEpoch;\r\n\r\n    \r\n    uint256 public minimumBond;\r\n    uint256 public minimumPodSize;\r\n    uint256 public minimumEpochInterval;\r\n\r\n    \r\n    \r\n    uint256 public nextMinimumBond;\r\n    uint256 public nextMinimumPodSize;\r\n    uint256 public nextMinimumEpochInterval;\r\n\r\n    \r\n    Epoch public currentEpoch;\r\n    Epoch public previousEpoch;\r\n\r\n    \r\n    RenToken public ren;\r\n\r\n    \r\n    DarknodeRegistryStore public store;\r\n\r\n    \r\n    IDarknodePayment public darknodePayment;\r\n\r\n    \r\n    address public slasher;\r\n    address public nextSlasher;\r\n\r\n    \r\n    \r\n    \r\n    \r\n    event LogDarknodeRegistered(address indexed _operator, address indexed _darknodeID, uint256 _bond);\r\n\r\n    \r\n    \r\n    \r\n    event LogDarknodeDeregistered(address indexed _operator, address indexed _darknodeID);\r\n\r\n    \r\n    \r\n    \r\n    event LogDarknodeOwnerRefunded(address indexed _operator, uint256 _amount);\r\n\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    event LogDarknodeSlashed(address indexed _operator, address indexed _darknodeID, address indexed _challenger, uint256 _percentage);\r\n\r\n    \r\n    event LogNewEpoch(uint256 indexed epochhash);\r\n\r\n    \r\n    event LogMinimumBondUpdated(uint256 _previousMinimumBond, uint256 _nextMinimumBond);\r\n    event LogMinimumPodSizeUpdated(uint256 _previousMinimumPodSize, uint256 _nextMinimumPodSize);\r\n    event LogMinimumEpochIntervalUpdated(uint256 _previousMinimumEpochInterval, uint256 _nextMinimumEpochInterval);\r\n    event LogSlasherUpdated(address _previousSlasher, address _nextSlasher);\r\n\r\n    \r\n    modifier onlyDarknodeOwner(address _darknodeID) {\r\n        require(store.darknodeOwner(_darknodeID) == msg.sender, \"DarknodeRegistry: must be darknode owner\");\r\n        _;\r\n    }\r\n\r\n    \r\n    modifier onlyRefunded(address _darknodeID) {\r\n        require(isRefunded(_darknodeID), \"DarknodeRegistry: must be refunded or never registered\");\r\n        _;\r\n    }\r\n\r\n    \r\n    modifier onlyRefundable(address _darknodeID) {\r\n        require(isRefundable(_darknodeID), \"DarknodeRegistry: must be deregistered for at least one epoch\");\r\n        _;\r\n    }\r\n\r\n    \r\n    \r\n    modifier onlyDeregisterable(address _darknodeID) {\r\n        require(isDeregisterable(_darknodeID), \"DarknodeRegistry: must be deregisterable\");\r\n        _;\r\n    }\r\n\r\n    \r\n    modifier onlySlasher() {\r\n        require(address(slasher) == msg.sender, \"DarknodeRegistry: must be slasher\");\r\n        _;\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    constructor(\r\n        string memory _VERSION,\r\n        RenToken _renAddress,\r\n        DarknodeRegistryStore _storeAddress,\r\n        uint256 _minimumBond,\r\n        uint256 _minimumPodSize,\r\n        uint256 _minimumEpochIntervalSeconds\r\n    ) public {\r\n        VERSION = _VERSION;\r\n\r\n        store = _storeAddress;\r\n        ren = _renAddress;\r\n\r\n        minimumBond = _minimumBond;\r\n        nextMinimumBond = minimumBond;\r\n\r\n        minimumPodSize = _minimumPodSize;\r\n        nextMinimumPodSize = minimumPodSize;\r\n\r\n        minimumEpochInterval = _minimumEpochIntervalSeconds;\r\n        nextMinimumEpochInterval = minimumEpochInterval;\r\n\r\n        currentEpoch = Epoch({\r\n            epochhash: uint256(blockhash(block.number - 1)),\r\n            blocktime: block.timestamp\r\n        });\r\n        numDarknodes = 0;\r\n        numDarknodesNextEpoch = 0;\r\n        numDarknodesPreviousEpoch = 0;\r\n    }\r\n\r\n    \r\n    \r\n    function recoverTokens(address _token) external onlyOwner {\r\n        if (_token == address(0x0)) {\r\n            msg.sender.transfer(address(this).balance);\r\n        } else {\r\n            ERC20(_token).transfer(msg.sender, ERC20(_token).balanceOf(address(this)));\r\n        }\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    function register(address _darknodeID, bytes calldata _publicKey) external onlyRefunded(_darknodeID) {\r\n        \r\n        uint256 bond = minimumBond;\r\n\r\n        \r\n        require(ren.transferFrom(msg.sender, address(store), bond), \"DarknodeRegistry: bond transfer failed\");\r\n\r\n        \r\n        store.appendDarknode(\r\n            _darknodeID,\r\n            msg.sender,\r\n            bond,\r\n            _publicKey,\r\n            currentEpoch.blocktime.add(minimumEpochInterval),\r\n            0\r\n        );\r\n\r\n        numDarknodesNextEpoch = numDarknodesNextEpoch.add(1);\r\n\r\n        \r\n        emit LogDarknodeRegistered(msg.sender, _darknodeID, bond);\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    function deregister(address _darknodeID) external onlyDeregisterable(_darknodeID) onlyDarknodeOwner(_darknodeID) {\r\n        deregisterDarknode(_darknodeID);\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    function epoch() external {\r\n        if (previousEpoch.blocktime == 0) {\r\n            \r\n            require(msg.sender == owner(), \"DarknodeRegistry: not authorized (first epochs)\");\r\n        }\r\n\r\n        \r\n        require(block.timestamp >= currentEpoch.blocktime.add(minimumEpochInterval), \"DarknodeRegistry: epoch interval has not passed\");\r\n        uint256 epochhash = uint256(blockhash(block.number - 1));\r\n\r\n        \r\n        previousEpoch = currentEpoch;\r\n        currentEpoch = Epoch({\r\n            epochhash: epochhash,\r\n            blocktime: block.timestamp\r\n        });\r\n\r\n        \r\n        numDarknodesPreviousEpoch = numDarknodes;\r\n        numDarknodes = numDarknodesNextEpoch;\r\n\r\n        \r\n        if (nextMinimumBond != minimumBond) {\r\n            minimumBond = nextMinimumBond;\r\n            emit LogMinimumBondUpdated(minimumBond, nextMinimumBond);\r\n        }\r\n        if (nextMinimumPodSize != minimumPodSize) {\r\n            minimumPodSize = nextMinimumPodSize;\r\n            emit LogMinimumPodSizeUpdated(minimumPodSize, nextMinimumPodSize);\r\n        }\r\n        if (nextMinimumEpochInterval != minimumEpochInterval) {\r\n            minimumEpochInterval = nextMinimumEpochInterval;\r\n            emit LogMinimumEpochIntervalUpdated(minimumEpochInterval, nextMinimumEpochInterval);\r\n        }\r\n        if (nextSlasher != slasher) {\r\n            slasher = nextSlasher;\r\n            emit LogSlasherUpdated(address(slasher), address(nextSlasher));\r\n        }\r\n        if (address(darknodePayment) != address(0x0)) {\r\n            darknodePayment.changeCycle();\r\n        }\r\n\r\n        \r\n        emit LogNewEpoch(epochhash);\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    function transferStoreOwnership(DarknodeRegistry _newOwner) external onlyOwner {\r\n        store.transferOwnership(address(_newOwner));\r\n        _newOwner.claimStoreOwnership();\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    function claimStoreOwnership() external {\r\n        store.claimOwnership();\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    function updateDarknodePayment(IDarknodePayment _dnpAddress) external onlyOwner {\r\n        require(address(_dnpAddress) != address(0x0), \"DarknodeRegistry: invalid dnp address\");\r\n        darknodePayment = _dnpAddress;\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    function updateMinimumBond(uint256 _nextMinimumBond) external onlyOwner {\r\n        \r\n        nextMinimumBond = _nextMinimumBond;\r\n    }\r\n\r\n    \r\n    \r\n    function updateMinimumPodSize(uint256 _nextMinimumPodSize) external onlyOwner {\r\n        \r\n        nextMinimumPodSize = _nextMinimumPodSize;\r\n    }\r\n\r\n    \r\n    \r\n    function updateMinimumEpochInterval(uint256 _nextMinimumEpochInterval) external onlyOwner {\r\n        \r\n        nextMinimumEpochInterval = _nextMinimumEpochInterval;\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    function updateSlasher(address _slasher) external onlyOwner {\r\n        require(address(_slasher) != address(0), \"DarknodeRegistry: invalid slasher address\");\r\n        nextSlasher = _slasher;\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    function slash(address _guilty, address _challenger, uint256 _percentage)\r\n        external\r\n        onlySlasher\r\n    {\r\n        require(_percentage <= 100, \"DarknodeRegistry: invalid percent\");\r\n\r\n        \r\n        if (isDeregisterable(_guilty)) {\r\n            deregisterDarknode(_guilty);\r\n        }\r\n\r\n        uint256 totalBond = store.darknodeBond(_guilty);\r\n        uint256 penalty = totalBond.div(100).mul(_percentage);\r\n        uint256 reward = penalty.div(2);\r\n        if (reward > 0) {\r\n            \r\n            store.updateDarknodeBond(_guilty, totalBond.sub(penalty));\r\n\r\n            \r\n            require(address(darknodePayment) != address(0x0), \"DarknodeRegistry: invalid payment address\");\r\n            require(ren.transfer(address(darknodePayment.store()), reward), \"DarknodeRegistry: reward transfer failed\");\r\n            require(ren.transfer(_challenger, reward), \"DarknodeRegistry: reward transfer failed\");\r\n        }\r\n\r\n        emit LogDarknodeSlashed(store.darknodeOwner(_guilty), _guilty, _challenger, _percentage);\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    function refund(address _darknodeID) external onlyRefundable(_darknodeID) {\r\n        address darknodeOwner = store.darknodeOwner(_darknodeID);\r\n\r\n        \r\n        uint256 amount = store.darknodeBond(_darknodeID);\r\n\r\n        \r\n        store.removeDarknode(_darknodeID);\r\n\r\n        \r\n        require(ren.transfer(darknodeOwner, amount), \"DarknodeRegistry: bond transfer failed\");\r\n\r\n        \r\n        emit LogDarknodeOwnerRefunded(darknodeOwner, amount);\r\n    }\r\n\r\n    \r\n    \r\n    function getDarknodeOwner(address _darknodeID) external view returns (address payable) {\r\n        return store.darknodeOwner(_darknodeID);\r\n    }\r\n\r\n    \r\n    \r\n    function getDarknodeBond(address _darknodeID) external view returns (uint256) {\r\n        return store.darknodeBond(_darknodeID);\r\n    }\r\n\r\n    \r\n    \r\n    function getDarknodePublicKey(address _darknodeID) external view returns (bytes memory) {\r\n        return store.darknodePublicKey(_darknodeID);\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    function getDarknodes(address _start, uint256 _count) external view returns (address[] memory) {\r\n        uint256 count = _count;\r\n        if (count == 0) {\r\n            count = numDarknodes;\r\n        }\r\n        return getDarknodesFromEpochs(_start, count, false);\r\n    }\r\n\r\n    \r\n    \r\n    function getPreviousDarknodes(address _start, uint256 _count) external view returns (address[] memory) {\r\n        uint256 count = _count;\r\n        if (count == 0) {\r\n            count = numDarknodesPreviousEpoch;\r\n        }\r\n        return getDarknodesFromEpochs(_start, count, true);\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    function isPendingRegistration(address _darknodeID) external view returns (bool) {\r\n        uint256 registeredAt = store.darknodeRegisteredAt(_darknodeID);\r\n        return registeredAt != 0 && registeredAt > currentEpoch.blocktime;\r\n    }\r\n\r\n    \r\n    \r\n    function isPendingDeregistration(address _darknodeID) external view returns (bool) {\r\n        uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);\r\n        return deregisteredAt != 0 && deregisteredAt > currentEpoch.blocktime;\r\n    }\r\n\r\n    \r\n    function isDeregistered(address _darknodeID) public view returns (bool) {\r\n        uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);\r\n        return deregisteredAt != 0 && deregisteredAt <= currentEpoch.blocktime;\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    function isDeregisterable(address _darknodeID) public view returns (bool) {\r\n        uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);\r\n        \r\n        \r\n        return isRegistered(_darknodeID) && deregisteredAt == 0;\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    function isRefunded(address _darknodeID) public view returns (bool) {\r\n        uint256 registeredAt = store.darknodeRegisteredAt(_darknodeID);\r\n        uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);\r\n        return registeredAt == 0 && deregisteredAt == 0;\r\n    }\r\n\r\n    \r\n    \r\n    function isRefundable(address _darknodeID) public view returns (bool) {\r\n        return isDeregistered(_darknodeID) && store.darknodeDeregisteredAt(_darknodeID) <= previousEpoch.blocktime;\r\n    }\r\n\r\n    \r\n    function isRegistered(address _darknodeID) public view returns (bool) {\r\n        return isRegisteredInEpoch(_darknodeID, currentEpoch);\r\n    }\r\n\r\n    \r\n    function isRegisteredInPreviousEpoch(address _darknodeID) public view returns (bool) {\r\n        return isRegisteredInEpoch(_darknodeID, previousEpoch);\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    \r\n    function isRegisteredInEpoch(address _darknodeID, Epoch memory _epoch) private view returns (bool) {\r\n        uint256 registeredAt = store.darknodeRegisteredAt(_darknodeID);\r\n        uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);\r\n        bool registered = registeredAt != 0 && registeredAt <= _epoch.blocktime;\r\n        bool notDeregistered = deregisteredAt == 0 || deregisteredAt > _epoch.blocktime;\r\n        \r\n        \r\n        return registered && notDeregistered;\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    function getDarknodesFromEpochs(address _start, uint256 _count, bool _usePreviousEpoch) private view returns (address[] memory) {\r\n        uint256 count = _count;\r\n        if (count == 0) {\r\n            count = numDarknodes;\r\n        }\r\n\r\n        address[] memory nodes = new address[](count);\r\n\r\n        \r\n        uint256 n = 0;\r\n        address next = _start;\r\n        if (next == address(0)) {\r\n            next = store.begin();\r\n        }\r\n\r\n        \r\n        while (n < count) {\r\n            if (next == address(0)) {\r\n                break;\r\n            }\r\n            \r\n            bool includeNext;\r\n            if (_usePreviousEpoch) {\r\n                includeNext = isRegisteredInPreviousEpoch(next);\r\n            } else {\r\n                includeNext = isRegistered(next);\r\n            }\r\n            if (!includeNext) {\r\n                next = store.next(next);\r\n                continue;\r\n            }\r\n            nodes[n] = next;\r\n            next = store.next(next);\r\n            n += 1;\r\n        }\r\n        return nodes;\r\n    }\r\n\r\n    \r\n    function deregisterDarknode(address _darknodeID) private {\r\n        \r\n        store.updateDarknodeDeregisteredAt(_darknodeID, currentEpoch.blocktime.add(minimumEpochInterval));\r\n        numDarknodesNextEpoch = numDarknodesNextEpoch.sub(1);\r\n\r\n        \r\n        emit LogDarknodeDeregistered(msg.sender, _darknodeID);\r\n    }\r\n}\r\n\r\ncontract DarknodeSlasher is Claimable {\r\n\r\n    DarknodeRegistry public darknodeRegistry;\r\n\r\n    uint256 public blacklistSlashPercent;\r\n    uint256 public maliciousSlashPercent;\r\n    uint256 public secretRevealSlashPercent;\r\n\r\n    \r\n    \r\n    mapping(uint256 => mapping(uint256 => mapping(address => bool))) public slashed;\r\n\r\n    \r\n    mapping(address => bool) public secretRevealed;\r\n\r\n    \r\n    mapping(address => bool) public blacklisted;\r\n\r\n    \r\n    modifier validPercent(uint256 _percent) {\r\n        require(_percent <= 100, \"DarknodeSlasher: invalid percentage\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        DarknodeRegistry _darknodeRegistry\r\n    ) public {\r\n        darknodeRegistry = _darknodeRegistry;\r\n    }\r\n\r\n    function setBlacklistSlashPercent(uint256 _percentage) public validPercent(_percentage) onlyOwner {\r\n        blacklistSlashPercent = _percentage;\r\n    }\r\n\r\n    function setMaliciousSlashPercent(uint256 _percentage) public validPercent(_percentage) onlyOwner {\r\n        maliciousSlashPercent = _percentage;\r\n    }\r\n\r\n    function setSecretRevealSlashPercent(uint256 _percentage) public validPercent(_percentage) onlyOwner {\r\n        secretRevealSlashPercent = _percentage;\r\n    }\r\n\r\n    function slash(address _guilty, address _challenger, uint256 _percentage)\r\n        external\r\n        onlyOwner\r\n    {\r\n        darknodeRegistry.slash(_guilty, _challenger, _percentage);\r\n    }\r\n\r\n    function blacklist(address _guilty) external onlyOwner {\r\n        require(!blacklisted[_guilty], \"DarknodeSlasher: already blacklisted\");\r\n        blacklisted[_guilty] = true;\r\n        darknodeRegistry.slash(_guilty, owner(), blacklistSlashPercent);\r\n    }\r\n\r\n    function slashDuplicatePropose(\r\n        uint256 _height,\r\n        uint256 _round,\r\n        bytes calldata _blockhash1,\r\n        uint256 _validRound1,\r\n        bytes calldata _signature1,\r\n        bytes calldata _blockhash2,\r\n        uint256 _validRound2,\r\n        bytes calldata _signature2\r\n    ) external {\r\n        address signer = Validate.duplicatePropose(\r\n            _height,\r\n            _round,\r\n            _blockhash1,\r\n            _validRound1,\r\n            _signature1,\r\n            _blockhash2,\r\n            _validRound2,\r\n            _signature2\r\n        );\r\n        require(!slashed[_height][_round][signer], \"DarknodeSlasher: already slashed\");\r\n        slashed[_height][_round][signer] = true;\r\n        darknodeRegistry.slash(signer, msg.sender, maliciousSlashPercent);\r\n    }\r\n\r\n    function slashDuplicatePrevote(\r\n        uint256 _height,\r\n        uint256 _round,\r\n        bytes calldata _blockhash1,\r\n        bytes calldata _signature1,\r\n        bytes calldata _blockhash2,\r\n        bytes calldata _signature2\r\n    ) external {\r\n        address signer = Validate.duplicatePrevote(\r\n            _height,\r\n            _round,\r\n            _blockhash1,\r\n            _signature1,\r\n            _blockhash2,\r\n            _signature2\r\n        );\r\n        require(!slashed[_height][_round][signer], \"DarknodeSlasher: already slashed\");\r\n        slashed[_height][_round][signer] = true;\r\n        darknodeRegistry.slash(signer, msg.sender, maliciousSlashPercent);\r\n    }\r\n\r\n    function slashDuplicatePrecommit(\r\n        uint256 _height,\r\n        uint256 _round,\r\n        bytes calldata _blockhash1,\r\n        bytes calldata _signature1,\r\n        bytes calldata _blockhash2,\r\n        bytes calldata _signature2\r\n    ) external {\r\n        address signer = Validate.duplicatePrecommit(\r\n            _height,\r\n            _round,\r\n            _blockhash1,\r\n            _signature1,\r\n            _blockhash2,\r\n            _signature2\r\n        );\r\n        require(!slashed[_height][_round][signer], \"DarknodeSlasher: already slashed\");\r\n        slashed[_height][_round][signer] = true;\r\n        darknodeRegistry.slash(signer, msg.sender, maliciousSlashPercent);\r\n    }\r\n\r\n    function slashSecretReveal(\r\n        uint256 _a,\r\n        uint256 _b,\r\n        uint256 _c,\r\n        uint256 _d,\r\n        uint256 _e,\r\n        uint256 _f,\r\n        bytes calldata _signature\r\n    ) external {\r\n        address signer = Validate.recoverSecret(\r\n            _a,\r\n            _b,\r\n            _c,\r\n            _d,\r\n            _e,\r\n            _f,\r\n            _signature\r\n        );\r\n        require(!secretRevealed[signer], \"DarknodeSlasher: already slashed\");\r\n        secretRevealed[signer] = true;\r\n        darknodeRegistry.slash(signer, msg.sender, secretRevealSlashPercent);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract DarknodeRegistry\",\"name\":\"_darknodeRegistry\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guilty\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blacklistSlashPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"darknodeRegistry\",\"outputs\":[{\"internalType\":\"contract DarknodeRegistry\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maliciousSlashPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secretRevealSlashPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"secretRevealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"setBlacklistSlashPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"setMaliciousSlashPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"setSecretRevealSlashPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guilty\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_challenger\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"slash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_height\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_blockhash1\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signature1\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_blockhash2\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signature2\",\"type\":\"bytes\"}],\"name\":\"slashDuplicatePrecommit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_height\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_blockhash1\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signature1\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_blockhash2\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signature2\",\"type\":\"bytes\"}],\"name\":\"slashDuplicatePrevote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_height\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_blockhash1\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_validRound1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature1\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_blockhash2\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_validRound2\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature2\",\"type\":\"bytes\"}],\"name\":\"slashDuplicatePropose\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_b\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_c\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_d\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_e\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_f\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"slashSecretReveal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"slashed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DarknodeSlasher","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ab5ebc4ddf9c4d5b00de10ff3692acdec43a5a6e","Library":"","LicenseType":"None","SwarmSource":"bzzr://868a087a15473fae80e2535aa8d8f84cd2f2018362ed6acd69e72773433d3725"}]}