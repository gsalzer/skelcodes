{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.1;\r\n\r\ninterface ERC20Interface {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract WithdrawFail\r\n{\r\n\r\naddress token_contract;\r\naddress admin;\r\nuint256 withdraw_value;\r\nbool capReached ;\r\n\r\n//address withdrawed\r\naddress[] public withdrawed_addresses;\r\n//Whitelists of reward address\r\nmapping(address => bool) public whitelists;\r\n\r\nconstructor() public {\r\nadmin = msg.sender;\r\nwithdraw_value = 5000000000000000000;\r\n}\r\n\r\nfunction adminAddress() public view returns (address)\r\n{\r\n    return admin;\r\n}\r\n\r\n    /**\r\n     * Whitelist reward address \r\n     * @param users Array of addresses to be whitelisted\r\n     */\r\n    function whitelist(address[] memory users) public  {\r\n        require(msg.sender==admin);\r\n        for (uint32 i = 0; i < users.length; i++) {\r\n            whitelists[users[i]] = true;\r\n        }\r\n    }\r\n    \r\n    function whitelistRemove(address user) public {\r\n      require(msg.sender==admin);\r\n      require(whitelists[user]);\r\n      whitelists[user] = false;\r\n    }\r\n\r\n\r\n//tokens in contract\r\nfunction tokensInContract() public view returns (uint256)\r\n{\r\n    ERC20Interface token = ERC20Interface(token_contract);\r\n    return token.balanceOf(address(this));\r\n}\r\n\r\n// //withdraw all, just admin\r\n// function withdraw_all() public\r\n// {\r\n//     require(msg.sender==admin);\r\n//     ERC20Interface token = ERC20Interface(token_contract);\r\n//     token.transfer(admin, token.balanceOf(address(this)));\r\n// }\r\n\r\n//change the withdraw value\r\nfunction setWithdrawValue(uint256 value) public\r\n{\r\n    require(msg.sender==admin);\r\n    withdraw_value = value;\r\n}\r\n\r\n//set token contract address\r\nfunction setTokenContractAddress(address addr) public\r\n{\r\n    require(msg.sender==admin);\r\n    token_contract = addr;\r\n}\r\n\r\nfunction tokenContractAddress() public view returns (address)\r\n{\r\n    return token_contract;\r\n}\r\n\r\nfunction getWithdrawValue() public view returns (uint256)\r\n{\r\n    return withdraw_value;\r\n}\r\n\r\n//if he claimed one time he cannot claim again\r\nfunction ableToWithdraw(address addr) public view returns (bool)\r\n{\r\n    for (uint i = 0; i < withdrawed_addresses.length; i++)\r\n    {\r\n        if(withdrawed_addresses[i]==addr)\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n  function enoughBalance() public view returns (bool)\r\n    {\r\n        return withdraw_value <= tokensInContract();\r\n    }\r\n    \r\n  function checkCap() public view returns (bool) {\r\n    return capReached;\r\n  }\r\n  \r\nfunction setCapReached(bool yea) public\r\n{\r\n    require(msg.sender==admin);\r\n    capReached = yea;\r\n}\r\n  \r\n\r\n//withdraw tokens from contract\r\n//if u are not whitelisted u can get 1 FAIL per address\r\n//if u are whitelisted u can get withdraw_value\r\n  function withdraw() external returns(bool)\r\n    {\r\n    require(enoughBalance());\r\n    require(ableToWithdraw(msg.sender));    \r\n    ERC20Interface token = ERC20Interface(token_contract);\r\n    if (whitelists[msg.sender]) \r\n        {\r\n        token.transfer(msg.sender, withdraw_value);\r\n        withdrawed_addresses.push(msg.sender);\r\n        }\r\n    else if (capReached == false) \r\n        {\r\n        token.transfer(msg.sender, 1000000000000000000);\r\n        withdrawed_addresses.push(msg.sender);\r\n        }\r\n    return true;\r\n    \r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"enoughBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawed_addresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"yea\",\"type\":\"bool\"}],\"name\":\"setCapReached\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensInContract\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"whitelistRemove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setTokenContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"whitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkCap\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWithdrawValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ableToWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setWithdrawValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"WithdrawFail","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://20fb9a4313e5a92127b212bb56d702d0f38b8e50caa6564c750fa8b3ff22cde2"}]}