{"status":"1","message":"OK","result":[{"SourceCode":"//************* BREED COIN\r\n//TOTAL SUPPLY      :20,000,000,000 BRE\r\n//SYMBOL            :BRE\r\n//TOKEN NAME        :BREED TOKEN\r\n\r\n\r\n\r\npragma solidity ^0.4.23;\r\n\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public constant returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public constant returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    mapping (address => uint256) public freezeOf;\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {if (a == 0) {return 0;}c = a * b;assert(c / a == b);return c;}\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {return a / b;}\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {assert(b <= a);return a - b;}\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {c = a + b;assert(c >= a);return c;\r\n    }\r\n}\r\n\r\n    contract ForeignToken {\r\n        function balanceOf(address _owner) constant public returns (uint256);\r\n        function transfer(address _to, uint256 _value) public returns (bool);\r\n    }\r\n\r\n\r\n\r\n\r\ncontract BREEDTOKEN is ERC20 {\r\n    using SafeMath for uint256;\r\n    address owner = msg.sender;\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;  \r\n\t\r\n\t// Token Name\r\n    string public constant name = \"BREED TOKEN\"; \r\n\t\r\n\t// BREED Coin Symbol\r\n    string public constant symbol = \"BRE\"; \r\n\t\r\n\t// Number of Decimals\r\n    uint public constant decimals = 8; \r\n\t\r\n\t// total supply of BREED coin\r\n    uint256 public totalSupply = 2000000000000000000; \r\n\t\r\n\t// Initial BREED coins that will give to contract creator \r\n    uint256 public totalDistributed =  10000000000000 ; \r\n\t\r\n\t// Minimum Contribution for BREED Coin\r\n    uint256 public constant MIN = 1 ether / 100;  \r\n\tuint256 public constant MINbonus = 1 ether / 10;\r\n\r\n\t// BREED Coin Amount per Ethereum\r\n    uint256 public tokensPerEth = 2000000000000000;\r\n\r\n    //ICO Allocated Token\r\n    uint256 public IcoLimit = 1500000000000000000;\r\n    uint256 public FirstPhaseAllocated = 800000000000000000;\r\n    uint256 public TotalIcoDist = 0; \r\n\t\r\n\t\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Distr(address indexed to, uint256 amount);\r\n    event DistrFinished();\r\n    event FirstPFinished();\r\n    event SecondPFinished();\r\n    event Airdrop(address indexed _owner, uint _amount, uint _balance);\r\n    event TokensPerEthUpdated(uint _tokensPerEth);\r\n    event Burn(address indexed burner, uint256 value);\r\n    event Freeze(address indexed from, uint256 value); //event freezing\r\n    event Unfreeze(address indexed from, uint256 value); //event Unfreezing\r\n    bool public distributionFinished = false;\r\n    bool public firstPhaseFinished = false;\r\n    bool public secondPhaseFinished = false;\r\n    \r\n    modifier canDistr() {\r\n        require(!distributionFinished);\r\n        _;\r\n    }\r\n    \r\n    modifier firstPhaseDistr() {\r\n        require(!firstPhaseFinished);\r\n        _;\r\n    }\r\n\r\n\r\n    modifier secondPhaseDistr() {\r\n        require(!secondPhaseFinished);\r\n        _;\r\n    }\r\n\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    function fnBREEDTOKEN () public {owner = msg.sender;    \r\n    FnDistr(owner, totalDistributed);}\r\n    function transferOwnership(address newOwner) onlyOwner public {if (newOwner != address(0)) {owner = newOwner;}}\r\n    \r\n    function finishDistribution() onlyOwner canDistr public returns (bool) \r\n    {distributionFinished = true;\r\n\temit DistrFinished(); return true;}\r\n\t\r\n\tfunction finishFirstPhase() onlyOwner firstPhaseDistr public returns (bool) \r\n    {firstPhaseFinished = true;\r\n\temit FirstPFinished(); return true;}\r\n\t\r\n\tfunction finishSecondPhase() onlyOwner secondPhaseDistr public returns (bool) \r\n    {secondPhaseFinished = true;\r\n\temit SecondPFinished(); return true;}\r\n    \r\n    function FnDistr(address _to, uint256 _amount) \r\n        canDistr private returns (bool) {\r\n        totalDistributed = totalDistributed.add(_amount);        \r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Distr(_to, _amount);\r\n        emit Transfer(address(0), _to, _amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function FNAirdrop(address _participant, uint _amount) internal {\r\n        require( _amount > 0 );      \r\n        require( totalDistributed < totalSupply );  \r\n        balances[_participant] = balances[_participant].add(_amount);\r\n        totalDistributed = totalDistributed.add(_amount);\r\n\r\n        if (totalDistributed >= totalSupply) {distributionFinished = true;}\r\n        emit Airdrop(_participant, _amount, balances[_participant]);\r\n        emit Transfer(address(0), _participant, _amount);\r\n    }\r\n\r\n    function FNAirdropSingle(address _participant, uint _amount) public onlyOwner {FNAirdrop(_participant, _amount);}\r\n\r\n    function FNAirdropMultiple(address[] _addresses, uint _amount) public onlyOwner {for (uint i = 0; i < _addresses.length; i++) FNAirdrop(_addresses[i], _amount);}\r\n\r\n    function FNupdateTokensPerEth(uint _tokensPerEth) public onlyOwner {        tokensPerEth = _tokensPerEth;\r\n\temit TokensPerEthUpdated(_tokensPerEth);\r\n    }\r\n           \r\n    function () external payable {getTokens();}\r\n    \r\n    function getTokens() payable canDistr  public {\r\n        uint256 intToken = 0;\r\n        uint256 tokens = 0;\r\n        uint256 bonus = 0;\r\n        \r\n        require( msg.value >= MIN );\r\n        require( msg.value > 0 );\r\n        \r\n        //first phase distribution\r\n        if (firstPhaseFinished == false && secondPhaseFinished == false)\r\n        {\r\n            //if Total Ico Distributed is less than the first phase Ico Allocated Quantity\r\n            if (TotalIcoDist < FirstPhaseAllocated) \r\n            {\r\n                intToken = tokensPerEth.mul(msg.value) / 1 ether;\r\n                if (msg.value >= MINbonus){bonus = (intToken * 25/100);} //Give bonus token when the investor sends 0.1 and above\r\n                if (msg.value < MINbonus){bonus = 0;} //Remove bonus token when the investor sends 0.09 and below\r\n                tokens = intToken + bonus; //token quatity based on token per eth price + bonus token\r\n                TotalIcoDist = TotalIcoDist.add(tokens); //add token quantity to total ico distribute\r\n                \r\n            }\r\n            \r\n        }\r\n        \r\n        //second phase distribution\r\n        if (firstPhaseFinished == true && secondPhaseFinished == false)\r\n        {\r\n            //if Total Ico Distributed is less that to Ico Allocated Quantity\r\n            if (TotalIcoDist < IcoLimit) \r\n            {\r\n                intToken = tokensPerEth.mul(msg.value) / 1 ether;\r\n                if (msg.value >= MINbonus){bonus = (intToken * 10/100);} //Give bonus token when the investor sends 0.1 and above\r\n                if (msg.value < MINbonus){bonus = 0;} //Remove bonus token when the investor sends 0.09 and below\r\n                tokens = intToken + bonus; //token quatity based on token per eth price + bonus token\r\n                TotalIcoDist = TotalIcoDist.add(tokens); //add token quantity to total ico distributed\r\n            }\r\n        }\r\n        \r\n        //first and second phase are finished\r\n        if (firstPhaseFinished == true && secondPhaseFinished == true)\r\n        {\r\n              tokens = tokensPerEth.mul(msg.value) / 1 ether;    \r\n        }\r\n        \r\n        \r\n        \r\n        address investor = msg.sender;\r\n        if (tokens > 0) {FnDistr(investor, tokens);}\r\n        if (totalDistributed >= totalSupply) {distributionFinished = true;}\r\n    }\r\n\r\n\r\n    modifier onlyPayloadSize(uint size) {\r\n        assert(msg.data.length >= size + 4);\r\n        _;\r\n    }\r\n\r\n    function balanceOf(address _owner) constant public returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n    \r\n\r\n    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {\r\n        //check if sender has balance and for oveflow\r\n        require(_to != address(0));\r\n        require(_amount <= balances[msg.sender]);\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {\r\n        require(_to != address(0));\r\n        require(_amount <= balances[_from]);\r\n        require(_amount <= allowed[_from][msg.sender]);\r\n        balances[_from] = balances[_from].sub(_amount);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function withdrawForeignTokens(address _tokenContract) onlyOwner public returns (bool) \r\n\t{ForeignToken token = ForeignToken(_tokenContract); uint256 amount = token.balanceOf(address(this));\r\n\treturn token.transfer(owner, amount);}\r\n    \r\n    function approve(address _spender, uint256 _value) public returns (bool success) \r\n\t{if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; } allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);return true;} \r\n   \r\n    function getTokenBalance(address tokenAddress, address who) constant public returns (uint)\r\n\t{ForeignToken t = ForeignToken(tokenAddress); uint bal = t.balanceOf(who);return bal;}\r\n    \r\n\t\r\n    function withdrawEther() onlyOwner public {address myAddress = this; \r\n\tuint256 etherBalance = myAddress.balance;owner.transfer(etherBalance);\r\n    }\r\n    \r\n    function allowance(address _owner, address _spender) constant public returns (uint256) {return allowed[_owner][_spender];}\r\n    \r\n    function burnBREEDTOKENcoin(uint256 _value) onlyOwner public {require(_value <= balances[msg.sender]);\r\n        address burner = msg.sender; balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value); totalDistributed = totalDistributed.sub(_value);\r\n        emit Burn(burner, _value);\r\n    } \r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishFirstPhase\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TotalIcoDist\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"FNAirdropMultiple\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINbonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondPhaseFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnBREEDTOKENcoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstPhaseFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishSecondPhase\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fnBREEDTOKEN\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"FNAirdropSingle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FirstPhaseAllocated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishDistribution\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IcoLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributionFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokensPerEth\",\"type\":\"uint256\"}],\"name\":\"FNupdateTokensPerEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"freezeOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"withdrawForeignTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Distr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DistrFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FirstPFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SecondPFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"Airdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tokensPerEth\",\"type\":\"uint256\"}],\"name\":\"TokensPerEthUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Unfreeze\",\"type\":\"event\"}]","ContractName":"BREEDTOKEN","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4c61741c4f28ad0d5f6e2b637a3e06e8083b825be3a8b5c1dc335f683ab8b661"}]}