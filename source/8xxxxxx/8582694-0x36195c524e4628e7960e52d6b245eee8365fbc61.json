{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * This test is non-exhaustive, and there may be false-negatives: during the\\n     * execution of a contract\\u0027s constructor, its address will be reported as\\n     * not containing a contract.\\n     *\\n     * IMPORTANT: It is unsafe to assume that an address for which this\\n     * function returns false is an externally-owned account (EOA) and not a\\n     * contract.\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256(\\u0027\\u0027)`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != 0x0 \\u0026\\u0026 codehash != accountHash);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n}\"},\"Context.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with GSN meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\ncontract Context {\\r\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\r\\n    // an instance of this contract, which should be used via inheritance.\\r\\n    constructor () internal { }\\r\\n    // solhint-disable-previous-line no-empty-blocks\\r\\n\\r\\n    function _msgSender() internal view returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\"},\"Counters.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Counters\\r\\n * @author Matt Condon (@shrugs)\\r\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\r\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\r\\n *\\r\\n * Include with `using Counters for Counters.Counter;`\\r\\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\\r\\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\\r\\n * directly accessed.\\r\\n */\\r\\nlibrary Counters {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    struct Counter {\\r\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\r\\n        // the library\\u0027s function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\r\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\r\\n        uint256 _value; // default: 0\\r\\n    }\\r\\n\\r\\n    function current(Counter storage counter) internal view returns (uint256) {\\r\\n        return counter._value;\\r\\n    }\\r\\n\\r\\n    function increment(Counter storage counter) internal {\\r\\n        counter._value += 1;\\r\\n    }\\r\\n\\r\\n    function decrement(Counter storage counter) internal {\\r\\n        counter._value = counter._value.sub(1);\\r\\n    }\\r\\n}\"},\"ERC165.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\nimport \\\"./IERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC165} interface.\\r\\n *\\r\\n * Contracts may inherit from this and call {_registerInterface} to declare\\r\\n * their support of an interface.\\r\\n */\\r\\ncontract ERC165 is IERC165 {\\r\\n    /*\\r\\n     * bytes4(keccak256(\\u0027supportsInterface(bytes4)\\u0027)) == 0x01ffc9a7\\r\\n     */\\r\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\r\\n\\r\\n    /**\\r\\n     * @dev Mapping of interface ids to whether or not it\\u0027s supported.\\r\\n     */\\r\\n    mapping(bytes4 =\\u003e bool) private _supportedInterfaces;\\r\\n\\r\\n    constructor () internal {\\r\\n        // Derived contracts need only register support for their own interfaces,\\r\\n        // we register support for ERC165 itself here\\r\\n        _registerInterface(_INTERFACE_ID_ERC165);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     *\\r\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\r\\n        return _supportedInterfaces[interfaceId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Registers the contract as an implementer of the interface defined by\\r\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\r\\n     * registering its interface id is not required.\\r\\n     *\\r\\n     * See {IERC165-supportsInterface}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\r\\n     */\\r\\n    function _registerInterface(bytes4 interfaceId) internal {\\r\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\r\\n        _supportedInterfaces[interfaceId] = true;\\r\\n    }\\r\\n}\"},\"ERC721.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\nimport \\\"./IERC721.sol\\\";\\r\\nimport \\\"./IERC721Receiver.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\nimport \\\"./Counters.sol\\\";\\r\\nimport \\\"./ERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ERC721 Non-Fungible Token Standard basic implementation\\r\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\r\\n */\\r\\ncontract ERC721 is Context, ERC165, IERC721 {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    // Equals to `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\r\\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\\r\\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\r\\n\\r\\n    // Mapping from token ID to owner\\r\\n    mapping (uint256 =\\u003e address) private _tokenOwner;\\r\\n\\r\\n    // Mapping from token ID to approved address\\r\\n    mapping (uint256 =\\u003e address) private _tokenApprovals;\\r\\n\\r\\n    // Mapping from owner to number of owned token\\r\\n    mapping (address =\\u003e Counters.Counter) private _ownedTokensCount;\\r\\n\\r\\n    // Mapping from owner to operator approvals\\r\\n    mapping (address =\\u003e mapping (address =\\u003e bool)) private _operatorApprovals;\\r\\n\\r\\n    /*\\r\\n     *     bytes4(keccak256(\\u0027balanceOf(address)\\u0027)) == 0x70a08231\\r\\n     *     bytes4(keccak256(\\u0027ownerOf(uint256)\\u0027)) == 0x6352211e\\r\\n     *     bytes4(keccak256(\\u0027approve(address,uint256)\\u0027)) == 0x095ea7b3\\r\\n     *     bytes4(keccak256(\\u0027getApproved(uint256)\\u0027)) == 0x081812fc\\r\\n     *     bytes4(keccak256(\\u0027setApprovalForAll(address,bool)\\u0027)) == 0xa22cb465\\r\\n     *     bytes4(keccak256(\\u0027isApprovedForAll(address,address)\\u0027)) == 0xe985e9c5\\r\\n     *     bytes4(keccak256(\\u0027transferFrom(address,address,uint256)\\u0027)) == 0x23b872dd\\r\\n     *     bytes4(keccak256(\\u0027safeTransferFrom(address,address,uint256)\\u0027)) == 0x42842e0e\\r\\n     *     bytes4(keccak256(\\u0027safeTransferFrom(address,address,uint256,bytes)\\u0027)) == 0xb88d4fde\\r\\n     *\\r\\n     *     =\\u003e 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\\r\\n     *        0xa22cb465 ^ 0xe985e9c ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\\r\\n     */\\r\\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\r\\n\\r\\n    constructor () public {\\r\\n        // register the supported interfaces to conform to ERC721 via ERC165\\r\\n        _registerInterface(_INTERFACE_ID_ERC721);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the balance of the specified address.\\r\\n     * @param owner address to query the balance of\\r\\n     * @return uint256 representing the amount owned by the passed address\\r\\n     */\\r\\n    function balanceOf(address owner) public view returns (uint256) {\\r\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\r\\n\\r\\n        return _ownedTokensCount[owner].current();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the owner of the specified token ID.\\r\\n     * @param tokenId uint256 ID of the token to query the owner of\\r\\n     * @return address currently marked as the owner of the given token ID\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) public view returns (address) {\\r\\n        address owner = _tokenOwner[tokenId];\\r\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\r\\n\\r\\n        return owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approves another address to transfer the given token ID\\r\\n     * The zero address indicates there is no approved address.\\r\\n     * There can only be one approved address per token at a given time.\\r\\n     * Can only be called by the token owner or an approved operator.\\r\\n     * @param to address to be approved for the given token ID\\r\\n     * @param tokenId uint256 ID of the token to be approved\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) public {\\r\\n        address owner = ownerOf(tokenId);\\r\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\r\\n\\r\\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\r\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\r\\n        );\\r\\n\\r\\n        _tokenApprovals[tokenId] = to;\\r\\n        emit Approval(owner, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the approved address for a token ID, or zero if no address set\\r\\n     * Reverts if the token ID does not exist.\\r\\n     * @param tokenId uint256 ID of the token to query the approval of\\r\\n     * @return address currently approved for the given token ID\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) public view returns (address) {\\r\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\r\\n\\r\\n        return _tokenApprovals[tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets or unsets the approval of a given operator\\r\\n     * An operator is allowed to transfer all tokens of the sender on their behalf.\\r\\n     * @param to operator address to set the approval\\r\\n     * @param approved representing the status of the approval to be set\\r\\n     */\\r\\n    function setApprovalForAll(address to, bool approved) public {\\r\\n        require(to != _msgSender(), \\\"ERC721: approve to caller\\\");\\r\\n\\r\\n        _operatorApprovals[_msgSender()][to] = approved;\\r\\n        emit ApprovalForAll(_msgSender(), to, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tells whether an operator is approved by a given owner.\\r\\n     * @param owner owner address which you want to query the approval of\\r\\n     * @param operator operator address which you want to query the approval of\\r\\n     * @return bool whether the given operator is approved by the given owner\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) public view returns (bool) {\\r\\n        return _operatorApprovals[owner][operator];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers the ownership of a given token ID to another address.\\r\\n     * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\r\\n     * Requires the msg.sender to be the owner, approved, or operator.\\r\\n     * @param from current owner of the token\\r\\n     * @param to address to receive the ownership of the given token ID\\r\\n     * @param tokenId uint256 ID of the token to be transferred\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 tokenId) public {\\r\\n        //solhint-disable-next-line max-line-length\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\r\\n\\r\\n        _transferFrom(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers the ownership of a given token ID to another address\\r\\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\\r\\n     * which is called upon a safe transfer, and return the magic value\\r\\n     * `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise,\\r\\n     * the transfer is reverted.\\r\\n     * Requires the msg.sender to be the owner, approved, or operator\\r\\n     * @param from current owner of the token\\r\\n     * @param to address to receive the ownership of the given token ID\\r\\n     * @param tokenId uint256 ID of the token to be transferred\\r\\n     */\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\r\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers the ownership of a given token ID to another address\\r\\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\\r\\n     * which is called upon a safe transfer, and return the magic value\\r\\n     * `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise,\\r\\n     * the transfer is reverted.\\r\\n     * Requires the _msgSender() to be the owner, approved, or operator\\r\\n     * @param from current owner of the token\\r\\n     * @param to address to receive the ownership of the given token ID\\r\\n     * @param tokenId uint256 ID of the token to be transferred\\r\\n     * @param _data bytes data to send along with a safe transfer check\\r\\n     */\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\r\\n        _safeTransferFrom(from, to, tokenId, _data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers the ownership of a given token ID to another address\\r\\n     * If the target address is a contract, it must implement `onERC721Received`,\\r\\n     * which is called upon a safe transfer, and return the magic value\\r\\n     * `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise,\\r\\n     * the transfer is reverted.\\r\\n     * Requires the msg.sender to be the owner, approved, or operator\\r\\n     * @param from current owner of the token\\r\\n     * @param to address to receive the ownership of the given token ID\\r\\n     * @param tokenId uint256 ID of the token to be transferred\\r\\n     * @param _data bytes data to send along with a safe transfer check\\r\\n     */\\r\\n    function _safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) internal {\\r\\n        _transferFrom(from, to, tokenId);\\r\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether the specified token exists.\\r\\n     * @param tokenId uint256 ID of the token to query the existence of\\r\\n     * @return bool whether the token exists\\r\\n     */\\r\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\r\\n        address owner = _tokenOwner[tokenId];\\r\\n        return owner != address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether the given spender can transfer a given token ID.\\r\\n     * @param spender address of the spender to query\\r\\n     * @param tokenId uint256 ID of the token to be transferred\\r\\n     * @return bool whether the msg.sender is approved for the given token ID,\\r\\n     * is an operator of the owner, or is the owner of the token\\r\\n     */\\r\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\\r\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\r\\n        address owner = ownerOf(tokenId);\\r\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to safely mint a new token.\\r\\n     * Reverts if the given token ID already exists.\\r\\n     * If the target address is a contract, it must implement `onERC721Received`,\\r\\n     * which is called upon a safe transfer, and return the magic value\\r\\n     * `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise,\\r\\n     * the transfer is reverted.\\r\\n     * @param to The address that will own the minted token\\r\\n     * @param tokenId uint256 ID of the token to be minted\\r\\n     */\\r\\n    function _safeMint(address to, uint256 tokenId) internal {\\r\\n        _safeMint(to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to safely mint a new token.\\r\\n     * Reverts if the given token ID already exists.\\r\\n     * If the target address is a contract, it must implement `onERC721Received`,\\r\\n     * which is called upon a safe transfer, and return the magic value\\r\\n     * `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise,\\r\\n     * the transfer is reverted.\\r\\n     * @param to The address that will own the minted token\\r\\n     * @param tokenId uint256 ID of the token to be minted\\r\\n     * @param _data bytes data to send along with a safe transfer check\\r\\n     */\\r\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal {\\r\\n        _mint(to, tokenId);\\r\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to mint a new token.\\r\\n     * Reverts if the given token ID already exists.\\r\\n     * @param to The address that will own the minted token\\r\\n     * @param tokenId uint256 ID of the token to be minted\\r\\n     */\\r\\n    function _mint(address to, uint256 tokenId) internal {\\r\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\r\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\r\\n\\r\\n        _tokenOwner[tokenId] = to;\\r\\n        _ownedTokensCount[to].increment();\\r\\n\\r\\n        emit Transfer(address(0), to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to burn a specific token.\\r\\n     * Reverts if the token does not exist.\\r\\n     * Deprecated, use {_burn} instead.\\r\\n     * @param owner owner of the token to burn\\r\\n     * @param tokenId uint256 ID of the token being burned\\r\\n     */\\r\\n    function _burn(address owner, uint256 tokenId) internal {\\r\\n        require(ownerOf(tokenId) == owner, \\\"ERC721: burn of token that is not own\\\");\\r\\n\\r\\n        _clearApproval(tokenId);\\r\\n\\r\\n        _ownedTokensCount[owner].decrement();\\r\\n        _tokenOwner[tokenId] = address(0);\\r\\n\\r\\n        emit Transfer(owner, address(0), tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to burn a specific token.\\r\\n     * Reverts if the token does not exist.\\r\\n     * @param tokenId uint256 ID of the token being burned\\r\\n     */\\r\\n    function _burn(uint256 tokenId) internal {\\r\\n        _burn(ownerOf(tokenId), tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to transfer ownership of a given token ID to another address.\\r\\n     * As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\r\\n     * @param from current owner of the token\\r\\n     * @param to address to receive the ownership of the given token ID\\r\\n     * @param tokenId uint256 ID of the token to be transferred\\r\\n     */\\r\\n    function _transferFrom(address from, address to, uint256 tokenId) internal {\\r\\n        require(ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\r\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\r\\n\\r\\n        _clearApproval(tokenId);\\r\\n\\r\\n        _ownedTokensCount[from].decrement();\\r\\n        _ownedTokensCount[to].increment();\\r\\n\\r\\n        _tokenOwner[tokenId] = to;\\r\\n\\r\\n        emit Transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\r\\n     * The call is not executed if the target address is not a contract.\\r\\n     *\\r\\n     * This function is deprecated.\\r\\n     * @param from address representing the previous owner of the given token ID\\r\\n     * @param to target address that will receive the tokens\\r\\n     * @param tokenId uint256 ID of the token to be transferred\\r\\n     * @param _data bytes optional data to send along with the call\\r\\n     * @return bool whether the call correctly returned the expected magic value\\r\\n     */\\r\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\r\\n        internal returns (bool)\\r\\n    {\\r\\n        if (!to.isContract()) {\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        bytes4 retval = IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data);\\r\\n        return (retval == _ERC721_RECEIVED);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Private function to clear current approval of a given token ID.\\r\\n     * @param tokenId uint256 ID of the token to be transferred\\r\\n     */\\r\\n    function _clearApproval(uint256 tokenId) private {\\r\\n        if (_tokenApprovals[tokenId] != address(0)) {\\r\\n            _tokenApprovals[tokenId] = address(0);\\r\\n        }\\r\\n    }\\r\\n}\"},\"ERC721Enumerable.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./Context.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\nimport \\\"./ERC721.sol\\\";\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token with optional enumeration extension logic\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ncontract ERC721Enumerable is Context, ERC165, ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address =\\u003e uint256[]) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 =\\u003e uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 =\\u003e uint256) private _allTokensIndex;\\n\\n    /*\\n     *     bytes4(keccak256(\\u0027totalSupply()\\u0027)) == 0x18160ddd\\n     *     bytes4(keccak256(\\u0027tokenOfOwnerByIndex(address,uint256)\\u0027)) == 0x2f745c59\\n     *     bytes4(keccak256(\\u0027tokenByIndex(uint256)\\u0027)) == 0x4f6ccce7\\n     *\\n     *     =\\u003e 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\\n\\n    /**\\n     * @dev Constructor function.\\n     */\\n    constructor () public {\\n        // register the supported interface to conform to ERC721Enumerable via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\\n    }\\n\\n    /**\\n     * @dev Gets the token ID at a given index of the tokens list of the requested owner.\\n     * @param owner address owning the tokens list to be accessed\\n     * @param index uint256 representing the index to be accessed of the requested tokens list\\n     * @return uint256 token ID at the given index of the tokens list owned by the requested address\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {\\n        require(index \\u003c balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev Gets the total amount of tokens stored by the contract.\\n     * @return uint256 representing the total amount of tokens\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev Gets the token ID at a given index of all the tokens in this contract\\n     * Reverts if the index is greater or equal to the total number of tokens.\\n     * @param index uint256 representing the index to be accessed of the tokens list\\n     * @return uint256 token ID at the given index of the tokens list\\n     */\\n    function tokenByIndex(uint256 index) public view returns (uint256) {\\n        require(index \\u003c totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Internal function to transfer ownership of a given token ID to another address.\\n     * As opposed to transferFrom, this imposes no restrictions on msg.sender.\\n     * @param from current owner of the token\\n     * @param to address to receive the ownership of the given token ID\\n     * @param tokenId uint256 ID of the token to be transferred\\n     */\\n    function _transferFrom(address from, address to, uint256 tokenId) internal {\\n        super._transferFrom(from, to, tokenId);\\n\\n        _removeTokenFromOwnerEnumeration(from, tokenId);\\n\\n        _addTokenToOwnerEnumeration(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to mint a new token.\\n     * Reverts if the given token ID already exists.\\n     * @param to address the beneficiary that will own the minted token\\n     * @param tokenId uint256 ID of the token to be minted\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        super._mint(to, tokenId);\\n\\n        _addTokenToOwnerEnumeration(to, tokenId);\\n\\n        _addTokenToAllTokensEnumeration(tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to burn a specific token.\\n     * Reverts if the token does not exist.\\n     * Deprecated, use {ERC721-_burn} instead.\\n     * @param owner owner of the token to burn\\n     * @param tokenId uint256 ID of the token being burned\\n     */\\n    function _burn(address owner, uint256 tokenId) internal {\\n        super._burn(owner, tokenId);\\n\\n        _removeTokenFromOwnerEnumeration(owner, tokenId);\\n        // Since tokenId will be deleted, we can clear its slot in _ownedTokensIndex to trigger a gas refund\\n        _ownedTokensIndex[tokenId] = 0;\\n\\n        _removeTokenFromAllTokensEnumeration(tokenId);\\n    }\\n\\n    /**\\n     * @dev Gets the list of token IDs of the requested owner.\\n     * @param owner address owning the tokens\\n     * @return uint256[] List of token IDs owned by the requested address\\n     */\\n    function _tokensOfOwner(address owner) internal view returns (uint256[] storage) {\\n        return _ownedTokens[owner];\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension\\u0027s ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        _ownedTokensIndex[tokenId] = _ownedTokens[to].length;\\n        _ownedTokens[to].push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension\\u0027s token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension\\u0027s ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from\\u0027s tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token\\u0027s index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        _ownedTokens[from].length--;\\n\\n        // Note that _ownedTokensIndex[tokenId] hasn\\u0027t been cleared: it still points to the old slot (now occupied by\\n        // lastTokenId, or just over the end of the array if the token was the last one).\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension\\u0027s token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length.sub(1);\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an \\u0027if\\u0027 statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token\\u0027s index\\n\\n        // This also deletes the contents at the last position of the array\\n        _allTokens.length--;\\n        _allTokensIndex[tokenId] = 0;\\n    }\\n}\"},\"ERC721Full.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./ERC721.sol\\\";\\nimport \\\"./ERC721Enumerable.sol\\\";\\nimport \\\"./ERC721Metadata.sol\\\";\\n\\n/**\\n * @title Full ERC721 Token\\n * @dev This implementation includes all the required and some optional functionality of the ERC721 standard\\n * Moreover, it includes approve all functionality using operator terminology.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-721\\n */\\ncontract ERC721Full is ERC721, ERC721Enumerable, ERC721Metadata {\\n    constructor (string memory name, string memory symbol) public ERC721Metadata(name, symbol) {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n}\"},\"ERC721Metadata.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./Context.sol\\\";\\nimport \\\"./ERC721.sol\\\";\\nimport \\\"./IERC721Metadata.sol\\\";\\nimport \\\"./ERC165.sol\\\";\\n\\ncontract ERC721Metadata is Context, ERC165, ERC721, IERC721Metadata {\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 =\\u003e string) private _tokenURIs;\\n\\n    /*\\n     *     bytes4(keccak256(\\u0027name()\\u0027)) == 0x06fdde03\\n     *     bytes4(keccak256(\\u0027symbol()\\u0027)) == 0x95d89b41\\n     *     bytes4(keccak256(\\u0027tokenURI(uint256)\\u0027)) == 0xc87b56dd\\n     *\\n     *     =\\u003e 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\\n\\n    /**\\n     * @dev Constructor function\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n\\n        // register the supported interfaces to conform to ERC721 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\\n    }\\n\\n    /**\\n     * @dev Gets the token name.\\n     * @return string representing the token name\\n     */\\n    function name() external view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Gets the token symbol.\\n     * @return string representing the token symbol\\n     */\\n    function symbol() external view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns an URI for a given token ID.\\n     * Throws if the token ID does not exist. May return an empty string.\\n     * @param tokenId uint256 ID of the token to query\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n        return _tokenURIs[tokenId];\\n    }\\n\\n    /**\\n     * @dev Internal function to set the token URI for a given token.\\n     * Reverts if the token ID does not exist.\\n     * @param tokenId uint256 ID of the token to set its URI\\n     * @param uri string URI to assign\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory uri) internal {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = uri;\\n    }\\n\\n    /**\\n     * @dev Internal function to burn a specific token.\\n     * Reverts if the token does not exist.\\n     * Deprecated, use _burn(uint256) instead.\\n     * @param owner owner of the token to burn\\n     * @param tokenId uint256 ID of the token being burned by the msg.sender\\n     */\\n    function _burn(address owner, uint256 tokenId) internal {\\n        super._burn(owner, tokenId);\\n\\n        // Clear metadata (if any)\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\"},\"IERC165.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165 {\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\"},\"IERC721.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\nimport \\\"./IERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Required interface of an ERC721 compliant contract.\\r\\n */\\r\\ncontract IERC721 is IERC165 {\\r\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\r\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\r\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of NFTs in `owner`\\u0027s account.\\r\\n     */\\r\\n    function balanceOf(address owner) public view returns (uint256 balance);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the owner of the NFT specified by `tokenId`.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) public view returns (address owner);\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     *\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - `from`, `to` cannot be zero.\\r\\n     * - `tokenId` must be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be have been allowed to move this\\r\\n     * NFT by either {approve} or {setApprovalForAll}.\\r\\n     */\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\\r\\n    /**\\r\\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - If the caller is not `from`, it must be approved to move this NFT by\\r\\n     * either {approve} or {setApprovalForAll}.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 tokenId) public;\\r\\n    function approve(address to, uint256 tokenId) public;\\r\\n    function getApproved(uint256 tokenId) public view returns (address operator);\\r\\n\\r\\n    function setApprovalForAll(address operator, bool _approved) public;\\r\\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\\r\\n\\r\\n\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\\r\\n}\"},\"IERC721Enumerable.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ncontract IERC721Enumerable is IERC721 {\\n    function totalSupply() public view returns (uint256);\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256 tokenId);\\n\\n    function tokenByIndex(uint256 index) public view returns (uint256);\\n}\"},\"IERC721Metadata.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ncontract IERC721Metadata is IERC721 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\"},\"IERC721Receiver.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\n/**\\r\\n * @title ERC721 token receiver interface\\r\\n * @dev Interface for any contract that wants to support safeTransfers\\r\\n * from ERC721 asset contracts.\\r\\n */\\r\\ncontract IERC721Receiver {\\r\\n    /**\\r\\n     * @notice Handle the receipt of an NFT\\r\\n     * @dev The ERC721 smart contract calls this function on the recipient\\r\\n     * after a {IERC721-safeTransferFrom}. This function MUST return the function selector,\\r\\n     * otherwise the caller will revert the transaction. The selector to be\\r\\n     * returned can be obtained as `this.onERC721Received.selector`. This\\r\\n     * function MAY throw to revert and reject the transfer.\\r\\n     * Note: the ERC721 contract address is always the message sender.\\r\\n     * @param operator The address which called `safeTransferFrom` function\\r\\n     * @param from The address which previously owned the token\\r\\n     * @param tokenId The NFT identifier which is being transferred\\r\\n     * @param data Additional data with no specified format\\r\\n     * @return bytes4 `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\r\\n     */\\r\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\\r\\n    public returns (bytes4);\\r\\n}\"},\"ownable.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        _owner = _msgSender();\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\"},\"Pausable.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\nimport \\\"./PauserRole.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which allows children to implement an emergency stop\\r\\n * mechanism that can be triggered by an authorized account.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the\\r\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\r\\n * the functions of your contract. Note that they will not be pausable by\\r\\n * simply including this module, only once the modifiers are put in place.\\r\\n */\\r\\ncontract Pausable is Context, PauserRole {\\r\\n    /**\\r\\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\\r\\n     */\\r\\n    event Paused(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\\r\\n     */\\r\\n    event Unpaused(address account);\\r\\n\\r\\n    bool private _paused;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\\r\\n     * to the deployer.\\r\\n     */\\r\\n    constructor () internal {\\r\\n        _paused = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the contract is paused, and false otherwise.\\r\\n     */\\r\\n    function paused() public view returns (bool) {\\r\\n        return _paused;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\r\\n     */\\r\\n    modifier whenNotPaused() {\\r\\n        require(!_paused, \\\"Pausable: paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is paused.\\r\\n     */\\r\\n    modifier whenPaused() {\\r\\n        require(_paused, \\\"Pausable: not paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Called by a pauser to pause, triggers stopped state.\\r\\n     */\\r\\n    function pause() public onlyPauser whenNotPaused {\\r\\n        _paused = true;\\r\\n        emit Paused(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Called by a pauser to unpause, returns to normal state.\\r\\n     */\\r\\n    function unpause() public onlyPauser whenPaused {\\r\\n        _paused = false;\\r\\n        emit Unpaused(_msgSender());\\r\\n    }\\r\\n}\"},\"PauserRole.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\nimport \\\"./Roles.sol\\\";\\r\\n\\r\\ncontract PauserRole is Context {\\r\\n    using Roles for Roles.Role;\\r\\n\\r\\n    event PauserAdded(address indexed account);\\r\\n    event PauserRemoved(address indexed account);\\r\\n\\r\\n    Roles.Role private _pausers;\\r\\n\\r\\n    constructor () internal {\\r\\n        _addPauser(_msgSender());\\r\\n    }\\r\\n\\r\\n    modifier onlyPauser() {\\r\\n        require(isPauser(_msgSender()), \\\"PauserRole: caller does not have the Pauser role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isPauser(address account) public view returns (bool) {\\r\\n        return _pausers.has(account);\\r\\n    }\\r\\n\\r\\n    function addPauser(address account) public onlyPauser {\\r\\n        _addPauser(account);\\r\\n    }\\r\\n\\r\\n    function renouncePauser() public {\\r\\n        _removePauser(_msgSender());\\r\\n    }\\r\\n\\r\\n    function _addPauser(address account) internal {\\r\\n        _pausers.add(account);\\r\\n        emit PauserAdded(account);\\r\\n    }\\r\\n\\r\\n    function _removePauser(address account) internal {\\r\\n        _pausers.remove(account);\\r\\n        emit PauserRemoved(account);\\r\\n    }\\r\\n}\"},\"plan-austral.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/// @title Plan Austral 1985 - 2019 - CriptoAustral ₳\\n/// @author Daniel Fernando Perosio (http://danielperosio.com) e-mail daniel@perosio.com - dperosio@gmail.com\\n/// @notice CriptoAustral es la recuperación de la moneda Austral con respaldo digital en la cadena de bloques Ethereum, reemisión, recirculación y puesta en valor. \\n/// Cada token ERC-721 corresponde en paridad a un billete físico de Australes sellado con el hash de este contrato y su identificador. \\n/// El austral fue la moneda de curso legal de la República Argentina desde el 15 de junio de 1985 hasta el 31 de diciembre de 1991. \\n/// En 1989 el Austral se depreció 5000% anual, padeciendo un periodo hiperinflacionario entre 1989 y 1990. \\n/// Con la devaluación del Austral, miles de personas pasaron hacia la pobreza: la hiperinflación devoró salarios, generó revueltas, saqueos y llevó al adelantamiento del traspaso del poder. \\n/// El CriptoAustral es una obra artística que plantea la idea del tiempo perdido, su recuperación, la del trabajo y de la vida que está representado en la moneda como valor de intercambio entre las personas.  \\n/// @dev Compatible con la implementación de OpenZeppelin de la especificación ERC-721 Cripto Coleccionables\\n\\nimport \\\"./ownable.sol\\\";\\nimport \\\"./ERC721Full.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Pausable.sol\\\";\\nimport \\u0027./Strings.sol\\u0027;\\n\\ncontract CriptoAustral is Ownable, ERC721Full, Pausable {\\n   \\n    using SafeMath for uint256;\\n    using Address for address;\\n    using Counters for Counters.Counter;\\n    using Strings for string;\\n\\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\n\\n    address payable private _autor;  \\n    address payable private _seller;\\n    \\n    constructor(string memory _name, string memory _symbol, string memory _uriBase) ERC721Full(_name, _symbol) public onlyOwner {\\n        _nombre = _name;\\n        _simbolo = _symbol;\\n        __uriBase = bytes(_uriBase);\\n        _autor = msg.sender;\\n        _registerInterface(_INTERFACE_ID_ERC721);\\n    }\\n\\n    struct Austral {\\n        uint32 valor;\\n        string valorLetras;\\n        string numeroSerie;\\n        uint16 emision;            \\n    }\\n\\n    Austral[] public monedas;\\n\\n    mapping (uint =\\u003e address) private _idPropietario; \\n\\n    mapping (address =\\u003e uint) private _numTokens; \\n\\n    mapping(address =\\u003e uint256[]) private _propiedadTokens; \\n\\n    mapping(uint256 =\\u003e uint256) private _propiedadTokensIndice; \\n\\n    uint256[] private _totalTokens;\\n\\n    mapping(uint256 =\\u003e uint256) private _totalTokensIndice; \\n\\n    mapping (address =\\u003e mapping (address =\\u003e bool)) private _operadorAprobado;\\n\\n    mapping(uint256 =\\u003e string) private _tokenUri;\\n\\n    mapping (uint =\\u003e address) private _tokenAprobado;   \\n\\n    mapping(uint256 =\\u003e uint256) private _tokensForSale;  \\n\\n    mapping (uint =\\u003e address payable) private _paymentAddress; \\n\\n    string private _nombre;\\n    string private _simbolo;\\n    bytes private __uriBase;  \\n\\n    event nuevaMoneda(uint monedaId, uint32 _valor, string _valorLetras, string _numeroSerie, uint16 _anio); \\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);  \\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\n\\n    function actualizarUrl(string calldata _nuevaUrl ) external onlyOwner {\\n        __uriBase = bytes(_nuevaUrl);        \\n    }\\n\\n    function withdraw() onlyOwner public returns(bool success)  {\\n        uint256 amount = address(this).balance;\\n        _autor.transfer(amount);\\n        return true;\\n    }    \\n\\n    function  _mintCirculante(uint32 _valor, string memory _valorLetras, string memory  _numeroSerie, uint16 _anio) internal {\\n        uint id = monedas.push(Austral(_valor, _valorLetras, _numeroSerie, _anio)) - 1;\\n        _idPropietario[id] = msg.sender;        \\n        _numTokens[msg.sender] = _numTokens[msg.sender].add(1);        \\n        _addTokenToOwnerEnumeration(msg.sender, id);       \\n        _totalTokens.push(id);\\n        _tokenUri[id] = Strings.strConcat(baseTokenURI(), Strings.uint2str(id));       \\n        emit nuevaMoneda(id, _valor, _valorLetras, _numeroSerie, _anio); \\n    }    \\n\\n    function emitirMoneda(uint32 _valor, string calldata _valorLetras, string calldata _numeroSerie, uint16 _emision) external onlyOwner { \\n        uint32  __valor =  _valor; \\n        string memory __valorLetras  = string(abi.encodePacked(_valorLetras));      \\n        string memory __numeroSerie  = string(abi.encodePacked(_numeroSerie));\\n        uint16  _anio =  _emision;\\n        _mintCirculante(__valor, __valorLetras, __numeroSerie, _anio);\\n    }\\n\\n    modifier onlyOwnerOf(uint _tokenId) {\\n        address owner = _idPropietario[_tokenId];\\n        require(msg.sender == _idPropietario[_tokenId] || msg.sender == owner || msg.sender == _tokenAprobado[_tokenId] || _operadorAprobado[owner][msg.sender]);\\n        _;\\n    }\\n\\n    modifier validDestination( address _to ) {\\n        require(_to != address(0x0));\\n        require(_to != address(this));\\n        _;\\n    }\\n\\n    function _exists(uint256 _tokenId) internal view returns (bool) {\\n        address owner = _idPropietario[_tokenId];\\n        return owner != address(0);\\n    }\\n    \\n    function _isApprovedOrOwner(address _spender, uint256 _tokenId) internal view returns (bool) {\\n        require(_exists(_tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ownerOf(_tokenId);\\n        return (_spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner, _spender));\\n    }\\n\\n    function setApprovalForAll(address _to, bool _approved) public onlyOwner {\\n        require(_to != _msgSender(), \\\"ERC721: approve to caller\\\");\\n        _operadorAprobado[_msgSender()][_to] = _approved;\\n        emit ApprovalForAll(_msgSender(), _to, _approved);\\n    }\\n\\n    function isApprovedForAll(address owner, address operator) public view returns (bool) {\\n        return _operadorAprobado[owner][operator];\\n    }\\n    \\n    function _clearApproval(uint256 _tokenId) private {\\n        if (_tokenAprobado[_tokenId] != address(0)) {\\n            _tokenAprobado[_tokenId] = address(0);\\n        }\\n    }\\n\\n    // ERC721\\n    \\n    function balanceOf(address _owner) public view returns (uint256) {\\n        require(_owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _numTokens[_owner];\\n    }\\n\\n    function ownerOf(uint256 _tokenId) public view returns (address _owner) {\\n        address owner = _idPropietario[_tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }    \\n\\n    function _transfer(address _from, address _to, uint256 _tokenId) private validDestination(_to) {\\n        _numTokens[_to] = _numTokens[_to].add(1);\\n        _numTokens[_from] = _numTokens[_from].sub(1);\\n        _clearApproval(_tokenId);\\n        _idPropietario[_tokenId] = _to;\\n        _removeTokenFromOwnerEnumeration(_from, _tokenId);\\n        _addTokenToOwnerEnumeration(_to, _tokenId);       \\n    }\\n\\n    function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) validDestination(_to) {\\n        _transfer(msg.sender, _to, _tokenId);\\n         emit Transfer(msg.sender, _to, _tokenId);\\n    }\\n\\n    function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) validDestination(_to) {\\n        _tokenAprobado[_tokenId] = _to;\\n        emit Approval(msg.sender, _to, _tokenId);\\n    }\\n        \\n    function getApproved(uint256 _tokenId) public view returns (address) {\\n        require(_exists(_tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n        return _tokenAprobado[_tokenId];\\n    }\\n\\n    function takeOwnership(uint256 _tokenId) public {\\n        require(_tokenAprobado[_tokenId] == msg.sender);\\n        address  owner = ownerOf(_tokenId);\\n        _transfer(owner, msg.sender, _tokenId);\\n    }   \\n\\n    function transferFrom(address _from, address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) validDestination(_to) {\\n         _transfer(_from, _to, _tokenId);\\n          emit Transfer(_from, _to, _tokenId);\\n    }\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public onlyOwnerOf(tokenId) validDestination(to) {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n       \\n    }\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public onlyOwnerOf(tokenId) validDestination(to) {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransferFrom(from, to, tokenId, _data);\\n    }\\n\\n    function _safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) internal {\\n        _transferFrom(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    function _transferFrom(address from, address to, uint256 tokenId) internal {\\n        _transfer(from, to, tokenId);\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) internal returns (bool) {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n        bytes4 retval = IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data);\\n        return (retval == _ERC721_RECEIVED);\\n    }\\n     \\n    // ENUMERABLE\\n\\n   function totalSupply() public view returns (uint256) {\\n        return _totalTokens.length;\\n    }\\n   \\n    function tokenByIndex(uint256 _index) public view returns (uint256) {\\n        require(_index \\u003c totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _totalTokens[_index];\\n    }\\n\\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256) {\\n        require(_index \\u003c balanceOf(_owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _propiedadTokens[_owner][_index];\\n    }\\n  \\n    function _tokensOfOwner(address owner) internal view returns (uint256[] storage) {\\n        return _propiedadTokens[owner];\\n    }\\n    \\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        _propiedadTokensIndice[tokenId] = _propiedadTokens[to].length;\\n        _propiedadTokens[to].push(tokenId);\\n    }\\n\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _totalTokensIndice[tokenId] = _totalTokens.length;\\n        _totalTokens.push(tokenId);\\n    }\\n\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        uint256 lastTokenIndex = _propiedadTokens[from].length.sub(1);\\n        uint256 tokenIndex = _propiedadTokensIndice[tokenId];\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _propiedadTokens[from][lastTokenIndex];\\n            _propiedadTokens[from][tokenIndex] = lastTokenId; \\n            _propiedadTokensIndice[lastTokenId] = tokenIndex; \\n        }\\n        _propiedadTokens[from].length--;\\n    }\\n   \\n    function listaTokensDe(address _owner) external view returns(uint[] memory) {\\n        uint[] memory result = new uint[](_numTokens[_owner]);\\n        uint counter = 0;\\n        for (uint i = 0; i \\u003c monedas.length; i++) {\\n          if (_idPropietario[i] == _owner) {\\n            result[counter] = i;\\n            counter++;\\n          }\\n        }\\n        return result;\\n    }\\n\\n    // METADATA\\n\\n    function baseTokenURI() public view returns (string memory) {\\n        return string(__uriBase);\\n    }\\n\\n    function name() external view returns (string memory _name){\\n        _name = _nombre;\\n    }\\n    \\n    function symbol() external view returns (string memory _symbol){\\n        _symbol = _simbolo;\\n    }\\n\\n    function tokenURI(uint256 _tokenId) external view returns (string memory) {\\n        require(_exists(_tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n        return _tokenUri[_tokenId];\\n    }\\n\\n    function setTokenURI(uint256 _tokenId, string calldata _uri) external onlyOwnerOf(_tokenId) {\\n        require(_exists(_tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\n        _tokenUri[_tokenId] = _uri;\\n    } \\n\\n    // VENTA\\n\\n    function setForSale(uint256 _tokenId, uint _feeWei) external onlyOwnerOf(_tokenId) whenNotPaused {\\n        address owner = ownerOf(_tokenId);\\n        _seller = msg.sender;\\n        require(_exists(_tokenId));  \\n        _tokenAprobado[_tokenId] = address(this);\\n        _tokensForSale[_tokenId] = _feeWei;\\n        _paymentAddress[_tokenId] = _seller;\\n        emit Approval(owner, address(this), _tokenId);\\n    }\\n\\n    function removeSale(uint256 _tokenId) external onlyOwnerOf(_tokenId) whenNotPaused {       \\n        require(_exists(_tokenId));  \\n        _clearApproval(_tokenId);\\n        _tokensForSale[_tokenId] = 0;\\n        _paymentAddress[_tokenId] =  address(0);      \\n    }\\n\\n    function tokenSales(uint256 _tokenId) external view whenNotPaused returns (uint256) {\\n        require(_exists(_tokenId), \\\"Nonexistent token\\\");\\n        return _tokensForSale[_tokenId];\\n    }\\n\\n    function buy(uint256 _tokenId) external payable whenNotPaused {\\n        address buyer = msg.sender;\\n        uint256 payedPrice = _tokensForSale[_tokenId];\\n        require(msg.value \\u003e= payedPrice); \\n        require(_exists(_tokenId));\\n        require(getApproved(_tokenId) == address(this));\\n        _seller = _paymentAddress[_tokenId];\\n        require(_seller != address(0x0));\\n            if (payedPrice \\u003e 0) {\\n                _seller.transfer(payedPrice);\\n            }\\n        _tokensForSale[_tokenId] = 0;\\n        _paymentAddress[_tokenId] =  address(0);  \\n        _transfer(ownerOf(_tokenId), buyer, _tokenId);\\n    }\\n}\"},\"Roles.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\n/**\\r\\n * @title Roles\\r\\n * @dev Library for managing addresses assigned to a Role.\\r\\n */\\r\\nlibrary Roles {\\r\\n    struct Role {\\r\\n        mapping (address =\\u003e bool) bearer;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Give an account access to this role.\\r\\n     */\\r\\n    function add(Role storage role, address account) internal {\\r\\n        require(!has(role, account), \\\"Roles: account already has role\\\");\\r\\n        role.bearer[account] = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove an account\\u0027s access to this role.\\r\\n     */\\r\\n    function remove(Role storage role, address account) internal {\\r\\n        require(has(role, account), \\\"Roles: account does not have role\\\");\\r\\n        role.bearer[account] = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an account has this role.\\r\\n     * @return bool\\r\\n     */\\r\\n    function has(Role storage role, address account) internal view returns (bool) {\\r\\n        require(account != address(0), \\\"Roles: account is the zero address\\\");\\r\\n        return role.bearer[account];\\r\\n    }\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\"},\"Strings.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nlibrary Strings {\\n  // via https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\\n  function strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) internal pure returns (string memory) {\\n      bytes memory _ba = bytes(_a);\\n      bytes memory _bb = bytes(_b);\\n      bytes memory _bc = bytes(_c);\\n      bytes memory _bd = bytes(_d);\\n      bytes memory _be = bytes(_e);\\n      string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\\n      bytes memory babcde = bytes(abcde);\\n      uint k = 0;\\n      for (uint i = 0; i \\u003c _ba.length; i++) babcde[k++] = _ba[i];\\n      for (uint i = 0; i \\u003c _bb.length; i++) babcde[k++] = _bb[i];\\n      for (uint i = 0; i \\u003c _bc.length; i++) babcde[k++] = _bc[i];\\n      for (uint i = 0; i \\u003c _bd.length; i++) babcde[k++] = _bd[i];\\n      for (uint i = 0; i \\u003c _be.length; i++) babcde[k++] = _be[i];\\n      return string(babcde);\\n    }\\n\\n    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d) internal pure returns (string memory) {\\n        return strConcat(_a, _b, _c, _d, \\\"\\\");\\n    }\\n\\n    function strConcat(string memory _a, string memory _b, string memory _c) internal pure returns (string memory) {\\n        return strConcat(_a, _b, _c, \\\"\\\", \\\"\\\");\\n    }\\n\\n    function strConcat(string memory _a, string memory _b) internal pure returns (string memory) {\\n        return strConcat(_a, _b, \\\"\\\", \\\"\\\", \\\"\\\");\\n    }\\n\\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint j = _i;\\n        uint len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint k = len - 1;\\n        while (_i != 0) {\\n            bstr[k--] = byte(uint8(48 + _i % 10));\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n}\"}}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_feeWei\",\"type\":\"uint256\"}],\"name\":\"setForSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"monedas\",\"outputs\":[{\"name\":\"valor\",\"type\":\"uint32\"},{\"name\":\"valorLetras\",\"type\":\"string\"},{\"name\":\"numeroSerie\",\"type\":\"string\"},{\"name\":\"emision\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"removeSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"listaTokensDe\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenSales\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_valor\",\"type\":\"uint32\"},{\"name\":\"_valorLetras\",\"type\":\"string\"},{\"name\":\"_numeroSerie\",\"type\":\"string\"},{\"name\":\"_emision\",\"type\":\"uint16\"}],\"name\":\"emitirMoneda\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nuevaUrl\",\"type\":\"string\"}],\"name\":\"actualizarUrl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseTokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_uriBase\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"monedaId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_valor\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"_valorLetras\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_numeroSerie\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_anio\",\"type\":\"uint16\"}],\"name\":\"nuevaMoneda\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CriptoAustral","CompilerVersion":"v0.5.5+commit.47a71e8f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000074175737472616c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e282b300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000021687474703a2f2f64616e69656c7065726f73696f2e636f6d2f6175737472616c2f00000000000000000000000000000000000000000000000000000000000000","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://597e204ce1f4527af32f8a38897de209d91d84f872a88bc73feda11c432e72f8"}]}