{"status":"1","message":"OK","result":[{"SourceCode":"/**************************************************************************\r\n *            ____        _                              \r\n *           / ___|      | |     __ _  _   _   ___  _ __ \r\n *          | |    _____ | |    / _` || | | | / _ \\| '__|\r\n *          | |___|_____|| |___| (_| || |_| ||  __/| |   \r\n *           \\____|      |_____|\\__,_| \\__, | \\___||_|   \r\n *                                     |___/             \r\n * \r\n **************************************************************************\r\n *\r\n *  The MIT License (MIT)\r\n *\r\n * Copyright (c) 2016-2019 Cyril Lapinte\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included\r\n * in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n **************************************************************************\r\n *\r\n * Flatten Contract: Tokensale\r\n *\r\n * Git Commit:\r\n * https://github.com/c-layer/contracts/tree/43925ba24cc22f42d0ff7711d0e169e8c2a0e09f\r\n *\r\n **************************************************************************/\r\n\r\n\r\n// File: contracts/interface/IERC20.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n/**\r\n * @title IERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract IERC20 {\r\n  function name() public view returns (string memory);\r\n  function symbol() public view returns (string memory);\r\n  function decimals() public view returns (uint256);\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n\r\n  function increaseApproval(address spender, uint addedValue)\r\n    public returns (bool);\r\n\r\n  function decreaseApproval(address spender, uint subtractedValue)\r\n    public returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: contracts/interface/ITokensale.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @title ITokensale\r\n * @dev ITokensale interface\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n */\r\ncontract ITokensale {\r\n\r\n  function () external payable;\r\n  function investETH() public payable;\r\n\r\n  function token() public view returns (IERC20);\r\n  function vaultETH() public view returns (address);\r\n  function vaultERC20() public view returns (address);\r\n  function tokenPrice() public view returns (uint256);\r\n  function totalRaised() public view returns (uint256);\r\n  function totalUnspentETH() public view returns (uint256);\r\n  function totalRefundedETH() public view returns (uint256);\r\n  function availableSupply() public view returns (uint256);\r\n  \r\n  function investorUnspentETH(address _investor) public view returns (uint256);\r\n  function investorInvested(address _investor) public view returns (uint256);\r\n  function investorTokens(address _investor) public view returns (uint256);\r\n\r\n  function tokenInvestment(address _investor, uint256 _amount) public view returns (uint256);\r\n  function refundManyUnspentETH(address payable[] memory _receivers) public returns (bool);\r\n  function refundUnspentETH() public returns (bool);\r\n  function withdrawAllETHFunds() public returns (bool);\r\n  function fundETH() public payable;\r\n\r\n  event RefundETH(address indexed recipient, uint256 amount);\r\n  event WithdrawETH(uint256 amount);\r\n  event FundETH(uint256 amount);\r\n  event Investment(address indexed investor, uint256 invested, uint256 tokens);\r\n}\r\n\r\n// File: contracts/util/math/SafeMath.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/util/governance/Ownable.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/util/governance/Operable.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @title Operable\r\n * @dev The Operable contract enable the restrictions of operations to a set of operators\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n *\r\n * Error messages\r\n * OP01: Message sender must be an operator\r\n * OP02: Address must be an operator\r\n * OP03: Address must not be an operator\r\n */\r\ncontract Operable is Ownable {\r\n\r\n  mapping (address => bool) private operators_;\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the operator\r\n   */\r\n  modifier onlyOperator {\r\n    require(operators_[msg.sender], \"OP01\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev constructor\r\n   */\r\n  constructor() public {\r\n    defineOperator(\"Owner\", msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @dev isOperator\r\n   * @param _address operator address\r\n   */\r\n  function isOperator(address _address) public view returns (bool) {\r\n    return operators_[_address];\r\n  }\r\n\r\n  /**\r\n   * @dev removeOperator\r\n   * @param _address operator address\r\n   */\r\n  function removeOperator(address _address) public onlyOwner {\r\n    require(operators_[_address], \"OP02\");\r\n    operators_[_address] = false;\r\n    emit OperatorRemoved(_address);\r\n  }\r\n\r\n  /**\r\n   * @dev defineOperator\r\n   * @param _role operator role\r\n   * @param _address operator address\r\n   */\r\n  function defineOperator(string memory _role, address _address)\r\n    public onlyOwner\r\n  {\r\n    require(!operators_[_address], \"OP03\");\r\n    operators_[_address] = true;\r\n    emit OperatorDefined(_role, _address);\r\n  }\r\n\r\n  event OperatorRemoved(address address_);\r\n  event OperatorDefined(\r\n    string role,\r\n    address address_\r\n  );\r\n}\r\n\r\n// File: contracts/util/lifecycle/Pausable.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n *\r\n * Error messages\r\n * PA01: the contract is paused\r\n * PA02: the contract is unpaused\r\n **/\r\ncontract Pausable is Operable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused, \"PA01\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused, \"PA02\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the operator to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyOperator whenNotPaused {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the operator to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyOperator whenPaused {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n// File: contracts/tokensale/BaseTokensale.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title BaseTokensale\r\n * @dev Base Tokensale contract\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n *\r\n * Error messages\r\n * TOS01: token price must be strictly positive\r\n * TOS02: price unit must be strictly positive\r\n * TOS03: No data must be sent while sending ETH\r\n * TOS04: Token transfer must be successfull\r\n * TOS05: No ETH to refund\r\n * TOS06: Cannot invest 0 tokens\r\n * TOS07: Cannot invest if there are no tokens to buy\r\n * TOS08: Only exact amount is authorized\r\n */\r\ncontract BaseTokensale is ITokensale, Operable, Pausable {\r\n  using SafeMath for uint256;\r\n\r\n  /* General sale details */\r\n  IERC20 internal token_;\r\n  address payable internal vaultETH_;\r\n  address internal vaultERC20_;\r\n\r\n  uint256 internal tokenPrice_;\r\n  uint256 internal priceUnit_;\r\n\r\n  uint256 internal totalRaised_;\r\n  uint256 internal totalTokensSold_;\r\n\r\n  uint256 internal totalUnspentETH_;\r\n  uint256 internal totalRefundedETH_;\r\n\r\n  struct Investor {\r\n    uint256 unspentETH;\r\n    uint256 invested;\r\n    uint256 tokens;\r\n  }\r\n  mapping(address => Investor) internal investors;\r\n\r\n  /**\r\n   * @dev constructor\r\n   */\r\n  constructor(\r\n    IERC20 _token,\r\n    address _vaultERC20,\r\n    address payable _vaultETH,\r\n    uint256 _tokenPrice,\r\n    uint256 _priceUnit\r\n  ) public\r\n  {\r\n    require(_tokenPrice > 0, \"TOS01\");\r\n    require(_priceUnit > 0, \"TOS02\");\r\n\r\n    token_ = _token;\r\n    vaultERC20_ = _vaultERC20;\r\n    vaultETH_ = _vaultETH;\r\n    tokenPrice_ = _tokenPrice;\r\n    priceUnit_ = _priceUnit;\r\n  }\r\n\r\n  /**\r\n   * @dev fallback function\r\n   */\r\n  //solhint-disable-next-line no-complex-fallback\r\n  function () external payable {\r\n    require(msg.data.length == 0, \"TOS03\");\r\n    investETH();\r\n  }\r\n\r\n  /* Investment */\r\n  function investETH() public payable\r\n  {\r\n    Investor storage investor = investorInternal(msg.sender);\r\n    uint256 amountETH = investor.unspentETH.add(msg.value);\r\n\r\n    investInternal(msg.sender, amountETH, false);\r\n  }\r\n\r\n  /**\r\n   * @dev returns the token sold\r\n   */\r\n  function token() public view returns (IERC20) {\r\n    return token_;\r\n  }\r\n\r\n  /**\r\n   * @dev returns the vault use to\r\n   */\r\n  function vaultETH() public view returns (address) {\r\n    return vaultETH_;\r\n  }\r\n\r\n  /**\r\n   * @dev returns the vault to receive ETH\r\n   */\r\n  function vaultERC20() public view returns (address) {\r\n    return vaultERC20_;\r\n  }\r\n\r\n  /**\r\n   * @dev returns token price\r\n   */\r\n  function tokenPrice() public view returns (uint256) {\r\n    return tokenPrice_;\r\n  }\r\n\r\n  /**\r\n   * @dev returns price unit\r\n   */\r\n  function priceUnit() public view returns (uint256) {\r\n    return priceUnit_;\r\n  }\r\n\r\n  /**\r\n   * @dev returns total raised\r\n   */\r\n  function totalRaised() public view returns (uint256) {\r\n    return totalRaised_;\r\n  }\r\n\r\n  /**\r\n   * @dev returns total tokens sold\r\n   */\r\n  function totalTokensSold() public view returns (uint256) {\r\n    return totalTokensSold_;\r\n  }\r\n\r\n  /**\r\n   * @dev returns total unspent ETH\r\n   */\r\n  function totalUnspentETH() public view returns (uint256) {\r\n    return totalUnspentETH_;\r\n  }\r\n\r\n  /**\r\n   * @dev returns total refunded ETH\r\n   */\r\n  function totalRefundedETH() public view returns (uint256) {\r\n    return totalRefundedETH_;\r\n  }\r\n\r\n  /**\r\n   * @dev returns the available supply\r\n   */\r\n  function availableSupply() public view returns (uint256) {\r\n    uint256 vaultSupply = token_.balanceOf(vaultERC20_);\r\n    uint256 allowance = token_.allowance(vaultERC20_, address(this));\r\n    return (vaultSupply < allowance) ? vaultSupply : allowance;\r\n  }\r\n\r\n  /* Investor specific attributes */\r\n  function investorUnspentETH(address _investor)\r\n    public view returns (uint256)\r\n  {\r\n    return investorInternal(_investor).unspentETH;\r\n  }\r\n\r\n  function investorInvested(address _investor)\r\n    public view returns (uint256)\r\n  {\r\n    return investorInternal(_investor).invested;\r\n  }\r\n\r\n  function investorTokens(address _investor) public view returns (uint256) {\r\n    return investorInternal(_investor).tokens;\r\n  }\r\n\r\n  /**\r\n   * @dev tokenInvestment\r\n   */\r\n  function tokenInvestment(address, uint256 _amount)\r\n    public view returns (uint256)\r\n  {\r\n    uint256 availableSupplyValue = availableSupply();\r\n    uint256 contribution = _amount.mul(priceUnit_).div(tokenPrice_);\r\n\r\n    return (contribution < availableSupplyValue) ? contribution : availableSupplyValue;\r\n  }\r\n\r\n  /**\r\n   * @dev refund unspentETH ETH many\r\n   */\r\n  function refundManyUnspentETH(address payable[] memory _receivers)\r\n    public onlyOperator returns (bool)\r\n  {\r\n    for (uint256 i = 0; i < _receivers.length; i++) {\r\n      refundUnspentETHInternal(_receivers[i]);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev refund unspentETH\r\n   */\r\n  function refundUnspentETH() public returns (bool) {\r\n    refundUnspentETHInternal(msg.sender);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev withdraw all ETH funds\r\n   */\r\n  function withdrawAllETHFunds() public onlyOperator returns (bool) {\r\n    uint256 balance = address(this).balance;\r\n    withdrawETHInternal(balance);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev fund ETH\r\n   */\r\n  function fundETH() public payable onlyOperator {\r\n    emit FundETH(msg.value);\r\n  }\r\n\r\n  /**\r\n   * @dev investor internal\r\n   */\r\n  function investorInternal(address _investor)\r\n    internal view returns (Investor storage)\r\n  {\r\n    return investors[_investor];\r\n  }\r\n\r\n  /**\r\n   * @dev eval unspent ETH internal\r\n   */\r\n  function evalUnspentETHInternal(\r\n    Investor storage _investor, uint256 _investedETH\r\n  ) internal view returns (uint256)\r\n  {\r\n    return _investor.unspentETH.add(msg.value).sub(_investedETH);\r\n  }\r\n\r\n  /**\r\n   * @dev eval investment internal\r\n   */\r\n  function evalInvestmentInternal(uint256 _tokens)\r\n    internal view returns (uint256, uint256)\r\n  {\r\n    uint256 invested = _tokens.mul(tokenPrice_).div(priceUnit_);\r\n    return (invested, _tokens);\r\n  }\r\n\r\n  /**\r\n   * @dev distribute tokens internal\r\n   */\r\n  function distributeTokensInternal(address _investor, uint256 _tokens) internal {\r\n    require(\r\n      token_.transferFrom(vaultERC20_, _investor, _tokens),\r\n      \"TOS04\");\r\n  }\r\n\r\n  /**\r\n   * @dev refund unspentETH internal\r\n   */\r\n  function refundUnspentETHInternal(address payable _investor) internal {\r\n    Investor storage investor = investorInternal(_investor);\r\n    require(investor.unspentETH > 0, \"TOS05\");\r\n\r\n    uint256 unspentETH = investor.unspentETH;\r\n    totalRefundedETH_ = totalRefundedETH_.add(unspentETH);\r\n    totalUnspentETH_ = totalUnspentETH_.sub(unspentETH);\r\n    investor.unspentETH = 0;\r\n\r\n    // Multiple sends are required for refundManyUnspentETH\r\n    // solhint-disable-next-line multiple-sends\r\n    _investor.transfer(unspentETH);\r\n    emit RefundETH(_investor, unspentETH);\r\n  }\r\n\r\n  /**\r\n   * @dev withdraw ETH internal\r\n   */\r\n  function withdrawETHInternal(uint256 _amount) internal {\r\n    // Send is used after the ERC20 transfer\r\n    // solhint-disable-next-line multiple-sends\r\n    vaultETH_.transfer(_amount);\r\n    emit WithdrawETH(_amount);\r\n  }\r\n\r\n  /**\r\n   * @dev invest internal\r\n   */\r\n  function investInternal(address _investor, uint256 _amount, bool _exactAmountOnly)\r\n    internal whenNotPaused\r\n  {\r\n    require(_amount != 0, \"TOS06\");\r\n\r\n    Investor storage investor = investorInternal(_investor);\r\n    uint256 investment = tokenInvestment(_investor, _amount);\r\n    require(investment != 0, \"TOS07\");\r\n\r\n    (uint256 invested, uint256 tokens) = evalInvestmentInternal(investment);\r\n\r\n    if (_exactAmountOnly) {\r\n      require(invested == _amount, \"TOS08\");\r\n    } else {\r\n      uint256 unspentETH = evalUnspentETHInternal(investor, invested);\r\n      totalUnspentETH_ = totalUnspentETH_.sub(investor.unspentETH).add(unspentETH);\r\n      investor.unspentETH = unspentETH;\r\n    }\r\n\r\n    investor.invested = investor.invested.add(invested);\r\n    investor.tokens = investor.tokens.add(tokens);\r\n    totalRaised_ = totalRaised_.add(invested);\r\n    totalTokensSold_ = totalTokensSold_.add(tokens);\r\n\r\n    emit Investment(_investor, invested, tokens);\r\n\r\n    /* Reentrancy risks: No state change must come below */\r\n    distributeTokensInternal(_investor, tokens);\r\n\r\n    uint256 balance = address(this).balance;\r\n    uint256 withdrawableETH = balance.sub(totalUnspentETH_);\r\n    if (withdrawableETH != 0) {\r\n      withdrawETHInternal(withdrawableETH);\r\n    }\r\n  }\r\n}\r\n\r\n// File: contracts/tokensale/SchedulableTokensale.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @title SchedulableTokensale\r\n * @dev SchedulableTokensale contract\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n *\r\n * Error messages\r\n * STS01: It must be before the sale is opened\r\n * STS02: Sale must be open\r\n * STS03: It must be before the sale is closed\r\n * STS04: It must be after the sale is closed\r\n * STS05: It must start before it ends.\r\n */\r\ncontract SchedulableTokensale is BaseTokensale {\r\n\r\n  uint256 internal startAt = ~uint256(0);\r\n  uint256 internal endAt = ~uint256(0);\r\n  bool internal closed;\r\n\r\n  event Schedule(uint256 startAt, uint256 endAt);\r\n  event CloseEarly();\r\n\r\n  /**\r\n   * @dev Throws if sale is not open\r\n   */\r\n  modifier beforeSaleIsOpened {\r\n    require(currentTime() < startAt && !closed, \"STS01\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if sale is not open\r\n   */\r\n  modifier saleIsOpened {\r\n    require(\r\n      currentTime() >= startAt\r\n        && currentTime() <= endAt\r\n        && !closed, \"STS02\"\r\n    );\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws once the sale is closed\r\n   */\r\n  modifier beforeSaleIsClosed {\r\n    require(currentTime() <= endAt && !closed, \"STS03\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws once the sale is closed\r\n   */\r\n  modifier afterSaleIsClosed {\r\n    require(isClosed(), \"STS04\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev constructor\r\n   */\r\n  constructor(\r\n    IERC20 _token,\r\n    address _vaultERC20,\r\n    address payable _vaultETH,\r\n    uint256 _tokenPrice,\r\n    uint256 _priceUnit\r\n  ) public\r\n    BaseTokensale(_token, _vaultERC20, _vaultETH, _tokenPrice, _priceUnit)\r\n  {} /* solhint-disable no-empty-blocks */\r\n\r\n  /**\r\n   * @dev schedule\r\n   */\r\n  function schedule() public view returns (uint256, uint256) {\r\n    return (startAt, endAt);\r\n  }\r\n\r\n  /**\r\n   * @dev isClosed\r\n   */\r\n  function isClosed() public view returns (bool) {\r\n    return currentTime() > endAt || closed;\r\n  }\r\n\r\n  /**\r\n   * @dev update schedule\r\n   */\r\n  function updateSchedule(uint256 _startAt, uint256 _endAt)\r\n    public onlyOperator beforeSaleIsOpened\r\n  {\r\n    require(_startAt < _endAt, \"STS05\");\r\n    startAt = _startAt;\r\n    endAt = _endAt;\r\n    emit Schedule(_startAt, _endAt);\r\n  }\r\n\r\n  /**\r\n   * @dev close sale\r\n   */\r\n  function closeEarly()\r\n    public onlyOperator beforeSaleIsClosed\r\n  {\r\n    closed = true; \r\n    emit CloseEarly();\r\n  }\r\n\r\n  /* Investment */\r\n  function investInternal(address _investor, uint256 _amount, bool _exactAmountOnly) internal\r\n    saleIsOpened\r\n  {\r\n    super.investInternal(_investor, _amount, _exactAmountOnly);\r\n  }\r\n\r\n  /* Util */\r\n  /**\r\n   * @dev current time\r\n   */\r\n  function currentTime() internal view returns (uint256) {\r\n    // solhint-disable-next-line not-rely-on-time\r\n    return now;\r\n  }\r\n}\r\n\r\n// File: contracts/tokensale/BonusTokensale.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @title BonusTokensale\r\n * @dev BonusTokensale contract\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n *\r\n * Error messages\r\n * BT01: There must have the same number of bonuses and bonusUntils\r\n * BT02: There must be some bonuses\r\n * BT03: There cannot be too many bonuses\r\n * BT04: BonusUntils must be declared in a progressive order\r\n * BT05: There cannot be bonuses with a NONE bonus mode\r\n **/\r\ncontract BonusTokensale is SchedulableTokensale {\r\n\r\n  enum BonusMode { NONE, EARLY, FIRST }\r\n  uint256 constant MAX_BONUSES = 10;\r\n\r\n  BonusMode internal bonusMode_ = BonusMode.NONE;\r\n  uint256[] internal bonusUntils_;\r\n  uint256[] internal bonuses_;\r\n\r\n  event BonusesDefined(uint256[] bonuses, BonusMode bonusMode, uint256[] bonusUntils);\r\n\r\n  /**\r\n   * @dev constructor\r\n   */\r\n  constructor(\r\n    IERC20 _token,\r\n    address _vaultERC20,\r\n    address payable _vaultETH,\r\n    uint256 _tokenPrice,\r\n    uint256 _priceUnit\r\n  ) public\r\n    SchedulableTokensale(_token,\r\n      _vaultERC20, _vaultETH, _tokenPrice, _priceUnit)\r\n  {} /* solhint-disable no-empty-blocks */\r\n  \r\n   /**\r\n   * @dev bonuses\r\n   */\r\n  function bonuses() public view returns (BonusMode, uint256[] memory, uint256[] memory) {\r\n    return (bonusMode_, bonuses_, bonusUntils_);\r\n  }\r\n\r\n  /**\r\n   * @dev early bonus\r\n   */\r\n  function earlyBonus(uint256 _currentTime)\r\n    public view returns (uint256 bonus, uint256 remainingAtBonus)\r\n  {\r\n    if (bonusMode_ != BonusMode.EARLY\r\n      || _currentTime < startAt || _currentTime > endAt) {\r\n      return (uint256(0), uint256(-1));\r\n    }\r\n\r\n    for(uint256 i=0; i < bonusUntils_.length; i++) {\r\n      if (_currentTime <= bonusUntils_[i]) {\r\n        return (bonuses_[i], uint256(-1));\r\n      }\r\n    }\r\n    return (uint256(0), uint256(-1));\r\n  }\r\n\r\n  /**\r\n   * @dev first bonus\r\n   */\r\n  function firstBonus(uint256 _tokensSold)\r\n    public view returns (uint256 bonus, uint256 remainingAtBonus)\r\n  {\r\n    if (bonusMode_ != BonusMode.FIRST) {\r\n      return (uint256(0), uint256(-1));\r\n    }\r\n\r\n    for(uint256 i=0; i < bonusUntils_.length; i++) {\r\n      if (_tokensSold < bonusUntils_[i]) {\r\n        return (bonuses_[i], bonusUntils_[i]-_tokensSold);\r\n      }\r\n    }\r\n\r\n    return (uint256(0), uint256(-1));\r\n  }\r\n\r\n  /**\r\n   * @dev define bonus\r\n   */\r\n  function defineBonuses(\r\n    BonusMode _bonusMode,\r\n    uint256[] memory _bonuses,\r\n    uint256[] memory _bonusUntils)\r\n    public onlyOperator beforeSaleIsOpened returns (bool)\r\n  {\r\n    require(_bonuses.length == _bonusUntils.length, \"BT01\");\r\n\r\n    if (_bonusMode != BonusMode.NONE) {\r\n      require(_bonusUntils.length > 0, \"BT02\");\r\n      require(_bonusUntils.length < MAX_BONUSES, \"BT03\");\r\n\r\n      uint256 bonusUntil =\r\n        (_bonusMode == BonusMode.EARLY) ? startAt : 0;\r\n\r\n      for(uint256 i=0; i < _bonusUntils.length; i++) {\r\n        require(_bonusUntils[i] > bonusUntil, \"BT04\");\r\n        bonusUntil = _bonusUntils[i];\r\n      }\r\n    } else {\r\n      require(_bonusUntils.length == 0, \"BT05\");\r\n    }\r\n\r\n    bonuses_ = _bonuses;\r\n    bonusMode_ = _bonusMode;\r\n    bonusUntils_ = _bonusUntils;\r\n\r\n    emit BonusesDefined(_bonuses, _bonusMode, _bonusUntils);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev current bonus\r\n   */\r\n  function tokenBonus(uint256 _tokens)\r\n    public view returns (uint256 tokenBonus_)\r\n  {\r\n    uint256 bonus;\r\n    uint256 remainingAtBonus;\r\n    uint256 unprocessed = _tokens;\r\n\r\n    do {\r\n      if(bonusMode_ == BonusMode.EARLY) {\r\n        (bonus, remainingAtBonus) = earlyBonus(currentTime());\r\n      }\r\n\r\n      if(bonusMode_ == BonusMode.FIRST) {\r\n        (bonus, remainingAtBonus) =\r\n          firstBonus(totalTokensSold_+_tokens-unprocessed);\r\n      }\r\n\r\n      uint256 tokensAtCurrentBonus =\r\n        (unprocessed < remainingAtBonus) ? unprocessed : remainingAtBonus;\r\n      tokenBonus_ += bonus.mul(tokensAtCurrentBonus).div(100);\r\n      unprocessed -= tokensAtCurrentBonus;\r\n    } while(bonus > 0 && unprocessed > 0 && remainingAtBonus > 0);\r\n  }\r\n\r\n  /**\r\n   * @dev eval investment internal\r\n   */\r\n  function evalInvestmentInternal(uint256 _tokens)\r\n    internal view returns (uint256, uint256)\r\n  {\r\n    (uint256 invested, uint256 tokens) = super.evalInvestmentInternal(_tokens);\r\n    uint256 bonus = tokenBonus(tokens);\r\n    return (invested, tokens.add(bonus));\r\n  }\r\n}\r\n\r\n// File: contracts/interface/IRatesProvider.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n/**\r\n * @title IRatesProvider\r\n * @dev IRatesProvider interface\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n */\r\ncontract IRatesProvider {\r\n\r\n  function defineRatesExternal(uint256[] calldata _rates) external returns (bool);\r\n\r\n  function name() public view returns (string memory);\r\n\r\n  function rate(bytes32 _currency) public view returns (uint256);\r\n\r\n  function currencies() public view\r\n    returns (bytes32[] memory, uint256[] memory, uint256);\r\n  function rates() public view returns (uint256, uint256[] memory);\r\n\r\n  function convert(uint256 _amount, bytes32 _fromCurrency, bytes32 _toCurrency)\r\n    public view returns (uint256);\r\n\r\n  function defineCurrencies(\r\n    bytes32[] memory _currencies,\r\n    uint256[] memory _decimals,\r\n    uint256 _rateOffset) public returns (bool);\r\n  function defineRates(uint256[] memory _rates) public returns (bool);\r\n\r\n  event RateOffset(uint256 rateOffset);\r\n  event Currencies(bytes32[] currencies, uint256[] decimals);\r\n  event Rate(bytes32 indexed currency, uint256 rate);\r\n}\r\n\r\n// File: contracts/tokensale/ChangeTokensale.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ChangeTokensale\r\n * @dev ChangeTokensale contract\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n *\r\n * Error messages\r\n * CTS01: message value must be positive\r\n * CTS02: No investment after currency change.\r\n */\r\ncontract ChangeTokensale is BaseTokensale {\r\n\r\n  bytes32 internal baseCurrency_;\r\n  IRatesProvider internal ratesProvider_;\r\n\r\n  uint256 internal totalReceivedETH_;\r\n\r\n  /* Investment */\r\n  function investETH() public payable\r\n  {\r\n    require(msg.value > 0, \"CTS01\");\r\n    totalReceivedETH_ = totalReceivedETH_.add(msg.value);\r\n\r\n    Investor storage investor = investorInternal(msg.sender);\r\n    uint256 amountETH = investor.unspentETH.add(msg.value);\r\n    uint256 amountCurrency =\r\n      ratesProvider_.convert(amountETH, \"ETH\", baseCurrency_);\r\n    require(amountCurrency > 0, \"CTS02\");\r\n\r\n    investInternal(msg.sender, amountCurrency, false);\r\n  }\r\n\r\n  /**\r\n   * @dev returns baseCurrency\r\n   */\r\n  function baseCurrency() public view returns (bytes32) {\r\n    return baseCurrency_;\r\n  }\r\n\r\n  /**\r\n   * @dev returns ratesProvider\r\n   */\r\n  function ratesProvider() public view returns (IRatesProvider) {\r\n    return ratesProvider_;\r\n  }\r\n\r\n  /**\r\n   * @dev returns totalRaisedETH\r\n   */\r\n  function totalRaisedETH() public view returns (uint256) {\r\n    return totalReceivedETH_.sub(totalUnspentETH_).sub(totalRefundedETH_);\r\n  }\r\n\r\n  /**\r\n   * @dev returns totalReceivedETH\r\n   */\r\n  function totalReceivedETH() public view returns (uint256) {\r\n    return totalReceivedETH_;\r\n  }\r\n\r\n  /**\r\n   * @dev add offchain investment\r\n   */\r\n  function addOffchainInvestment(address _investor, uint256 _amount)\r\n    public onlyOperator returns (bool)\r\n  {\r\n    investInternal(_investor, _amount, true);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev eval unspent ETH\r\n   */\r\n  function evalUnspentETHInternal(\r\n    Investor storage _investor, uint256 _invested\r\n  ) internal view returns (uint256)\r\n  {\r\n    uint256 investedETH =\r\n      ratesProvider_.convert(_invested, baseCurrency_, \"ETH\");\r\n    return super.evalUnspentETHInternal(_investor, investedETH);\r\n  }\r\n}\r\n\r\n// File: contracts/interface/IUserRegistry.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n/**\r\n * @title IUserRegistry\r\n * @dev IUserRegistry interface\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n **/\r\ncontract IUserRegistry {\r\n\r\n  event UserRegistered(uint256 indexed userId, address address_, uint256 validUntilTime);\r\n  event AddressAttached(uint256 indexed userId, address address_);\r\n  event AddressDetached(uint256 indexed userId, address address_);\r\n  event UserSuspended(uint256 indexed userId);\r\n  event UserRestored(uint256 indexed userId);\r\n  event UserValidity(uint256 indexed userId, uint256 validUntilTime);\r\n  event UserExtendedKey(uint256 indexed userId, uint256 key, uint256 value);\r\n  event UserExtendedKeys(uint256 indexed userId, uint256[] values);\r\n\r\n  event ExtendedKeysDefinition(uint256[] keys);\r\n\r\n  function registerManyUsersExternal(address[] calldata _addresses, uint256 _validUntilTime)\r\n    external returns (bool);\r\n  function registerManyUsersFullExternal(\r\n    address[] calldata _addresses,\r\n    uint256 _validUntilTime,\r\n    uint256[] calldata _values) external returns (bool);\r\n  function attachManyAddressesExternal(uint256[] calldata _userIds, address[] calldata _addresses)\r\n    external returns (bool);\r\n  function detachManyAddressesExternal(address[] calldata _addresses)\r\n    external returns (bool);\r\n  function suspendManyUsersExternal(uint256[] calldata _userIds) external returns (bool);\r\n  function restoreManyUsersExternal(uint256[] calldata _userIds) external returns (bool);\r\n  function updateManyUsersExternal(\r\n    uint256[] calldata _userIds,\r\n    uint256 _validUntilTime,\r\n    bool _suspended) external returns (bool);\r\n  function updateManyUsersExtendedExternal(\r\n    uint256[] calldata _userIds,\r\n    uint256 _key, uint256 _value) external returns (bool);\r\n  function updateManyUsersAllExtendedExternal(\r\n    uint256[] calldata _userIds,\r\n    uint256[] calldata _values) external returns (bool);\r\n  function updateManyUsersFullExternal(\r\n    uint256[] calldata _userIds,\r\n    uint256 _validUntilTime,\r\n    bool _suspended,\r\n    uint256[] calldata _values) external returns (bool);\r\n\r\n  function name() public view returns (string memory);\r\n  function currency() public view returns (bytes32);\r\n\r\n  function userCount() public view returns (uint256);\r\n  function userId(address _address) public view returns (uint256);\r\n  function validUserId(address _address) public view returns (uint256);\r\n  function validUser(address _address, uint256[] memory _keys)\r\n    public view returns (uint256, uint256[] memory);\r\n  function validity(uint256 _userId) public view returns (uint256, bool);\r\n\r\n  function extendedKeys() public view returns (uint256[] memory);\r\n  function extended(uint256 _userId, uint256 _key)\r\n    public view returns (uint256);\r\n  function manyExtended(uint256 _userId, uint256[] memory _key)\r\n    public view returns (uint256[] memory);\r\n\r\n  function isAddressValid(address _address) public view returns (bool);\r\n  function isValid(uint256 _userId) public view returns (bool);\r\n\r\n  function defineExtendedKeys(uint256[] memory _extendedKeys) public returns (bool);\r\n\r\n  function registerUser(address _address, uint256 _validUntilTime)\r\n    public returns (bool);\r\n  function registerUserFull(\r\n    address _address,\r\n    uint256 _validUntilTime,\r\n    uint256[] memory _values) public returns (bool);\r\n\r\n  function attachAddress(uint256 _userId, address _address) public returns (bool);\r\n  function detachAddress(address _address) public returns (bool);\r\n  function detachSelf() public returns (bool);\r\n  function detachSelfAddress(address _address) public returns (bool);\r\n  function suspendUser(uint256 _userId) public returns (bool);\r\n  function restoreUser(uint256 _userId) public returns (bool);\r\n  function updateUser(uint256 _userId, uint256 _validUntilTime, bool _suspended)\r\n    public returns (bool);\r\n  function updateUserExtended(uint256 _userId, uint256 _key, uint256 _value)\r\n    public returns (bool);\r\n  function updateUserAllExtended(uint256 _userId, uint256[] memory _values)\r\n    public returns (bool);\r\n  function updateUserFull(\r\n    uint256 _userId,\r\n    uint256 _validUntilTime,\r\n    bool _suspended,\r\n    uint256[] memory _values) public returns (bool);\r\n}\r\n\r\n// File: contracts/tokensale/UserTokensale.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title UserTokensale\r\n * @dev UserTokensale contract\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n *\r\n * Error messages\r\n */\r\ncontract UserTokensale is ChangeTokensale {\r\n\r\n  uint256[] public extendedKeys = [ 0, 1 ]; // KYC Level and AML Limit\r\n\r\n  // Default investment based on the KYC Level.\r\n  // Example [ 0, 300000, 1500000, 10000000, 100000000 ];\r\n  uint256[] internal contributionLimits_ = new uint256[](0);\r\n\r\n  mapping(uint256 => Investor) internal investorIds;\r\n  IUserRegistry internal userRegistry_;\r\n\r\n  /**\r\n   * @dev define contributionLimits\r\n   */\r\n  function defineContributionLimits(uint256[] memory _contributionLimits)\r\n    public onlyOperator returns (bool)\r\n  {\r\n    contributionLimits_ = _contributionLimits;\r\n    emit ContributionLimits(_contributionLimits);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev contributionsLimit\r\n   */\r\n  function contributionLimits() public view returns (uint256[] memory) {\r\n    return contributionLimits_;\r\n  }\r\n\r\n  /**\r\n   * @dev user registry\r\n   */\r\n  function userRegistry() public view returns (IUserRegistry) {\r\n    return userRegistry_;\r\n  }\r\n\r\n  function registredInvestorUnspentETH(uint256 _investorId)\r\n    public view returns (uint256)\r\n  {\r\n    return investorIds[_investorId].unspentETH;\r\n  }\r\n\r\n  function registredInvestorInvested(uint256 _investorId)\r\n    public view returns (uint256)\r\n  {\r\n    return investorIds[_investorId].invested;\r\n  }\r\n\r\n  function registredInvestorTokens(uint256 _investorId)\r\n    public view returns (uint256)\r\n  {\r\n    return investorIds[_investorId].tokens;\r\n  }\r\n\r\n  function investorCount()\r\n    public view returns (uint256)\r\n  {\r\n    return userRegistry_.userCount();\r\n  }\r\n\r\n  /**\r\n   * @dev contributionLimit\r\n   */\r\n  function contributionLimit(uint256 _investorId)\r\n    public view returns (uint256)\r\n  {\r\n    uint256 amlLimit = 0;\r\n\r\n    uint256[] memory extended = userRegistry_.manyExtended(_investorId, extendedKeys);\r\n    uint256 kycLevel = extended[0];\r\n    uint256 baseAmlLimit = extended[1];\r\n\r\n    if (baseAmlLimit > 0) {\r\n      amlLimit = ratesProvider_.convert(\r\n        baseAmlLimit, userRegistry_.currency(), baseCurrency_);\r\n    }\r\n\r\n    if (amlLimit == 0 && kycLevel < contributionLimits_.length) {\r\n      amlLimit = contributionLimits_[kycLevel];\r\n    }\r\n\r\n    return amlLimit.sub(investorIds[_investorId].invested);\r\n  }\r\n\r\n  /**\r\n   * @dev tokenInvestment\r\n   */\r\n  function tokenInvestment(address _investor, uint256 _amount)\r\n    public view returns (uint256)\r\n  {\r\n    uint256 investorId = userRegistry_.validUserId(_investor);\r\n    uint256 amlLimit = contributionLimit(investorId);\r\n    return super.tokenInvestment(_investor, (_amount < amlLimit) ? _amount : amlLimit);\r\n  }\r\n\r\n  /**\r\n   * @dev investor internal\r\n   */\r\n  function investorInternal(address _investor)\r\n    internal view returns (Investor storage)\r\n  {\r\n    return investorIds[userRegistry_.userId(_investor)];\r\n  }\r\n\r\n  event ContributionLimits(uint256[] contributionLimits);\r\n}\r\n\r\n// File: contracts/Tokensale.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Tokensale\r\n * @dev Tokensale contract\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n *\r\n * Error messages\r\n */\r\ncontract Tokensale is UserTokensale, BonusTokensale {\r\n\r\n  /**\r\n   * @dev constructor\r\n   */\r\n  constructor(\r\n    IERC20 _token,\r\n    address _vaultERC20,\r\n    address payable _vaultETH,\r\n    uint256 _tokenPrice,\r\n    uint256 _priceUnit,\r\n    bytes32 _baseCurrency,\r\n    IUserRegistry _userRegistry,\r\n    IRatesProvider _ratesProvider,\r\n    uint256 _start,\r\n    uint256 _end\r\n  ) public\r\n    BonusTokensale(_token,\r\n      _vaultERC20, _vaultETH, _tokenPrice, _priceUnit)\r\n  {\r\n    baseCurrency_ = _baseCurrency;\r\n    userRegistry_ = _userRegistry;\r\n    ratesProvider_ = _ratesProvider;\r\n\r\n    updateSchedule(_start, _end);\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultERC20\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_vaultETH\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceUnit\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_baseCurrency\",\"type\":\"bytes32\"},{\"internalType\":\"contract IUserRegistry\",\"name\":\"_userRegistry\",\"type\":\"address\"},{\"internalType\":\"contract IRatesProvider\",\"name\":\"_ratesProvider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"bonuses\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"enum BonusTokensale.BonusMode\",\"name\":\"bonusMode\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"bonusUntils\",\"type\":\"uint256[]\"}],\"name\":\"BonusesDefined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CloseEarly\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"contributionLimits\",\"type\":\"uint256[]\"}],\"name\":\"ContributionLimits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Investment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"OperatorDefined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"OperatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefundETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endAt\",\"type\":\"uint256\"}],\"name\":\"Schedule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawETH\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_investor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addOffchainInvestment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"availableSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseCurrency\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonuses\",\"outputs\":[{\"internalType\":\"enum BonusTokensale.BonusMode\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeEarly\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_investorId\",\"type\":\"uint256\"}],\"name\":\"contributionLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributionLimits\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"enum BonusTokensale.BonusMode\",\"name\":\"_bonusMode\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"_bonuses\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_bonusUntils\",\"type\":\"uint256[]\"}],\"name\":\"defineBonuses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_contributionLimits\",\"type\":\"uint256[]\"}],\"name\":\"defineContributionLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_role\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"defineOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currentTime\",\"type\":\"uint256\"}],\"name\":\"earlyBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingAtBonus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"extendedKeys\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokensSold\",\"type\":\"uint256\"}],\"name\":\"firstBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingAtBonus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fundETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"investETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"investorInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"investorTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"investorUnspentETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isClosed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ratesProvider\",\"outputs\":[{\"internalType\":\"contract IRatesProvider\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"_receivers\",\"type\":\"address[]\"}],\"name\":\"refundManyUnspentETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refundUnspentETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_investorId\",\"type\":\"uint256\"}],\"name\":\"registredInvestorInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_investorId\",\"type\":\"uint256\"}],\"name\":\"registredInvestorTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_investorId\",\"type\":\"uint256\"}],\"name\":\"registredInvestorUnspentETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"schedule\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"tokenBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenBonus_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_investor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"tokenInvestment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaisedETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalReceivedETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRefundedETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokensSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUnspentETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endAt\",\"type\":\"uint256\"}],\"name\":\"updateSchedule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"userRegistry\",\"outputs\":[{\"internalType\":\"contract IUserRegistry\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vaultERC20\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vaultETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAllETHFunds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Tokensale","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"0000000000000000000000001dd0df760eb950083c1925da19fc7ac1356a190b0000000000000000000000001e61c10f3afd2ec2f4b38e9f1346a6861e1d586d00000000000000000000000033a7a490b672b4560ad805e3cfc7bdc7e8c8306f000000000000000000000000000000000000000000000000000000000000004d0000000000000000000000000000000000000000000000056bc75e2d631000005553440000000000000000000000000000000000000000000000000000000000000000000000000000000000eeb655488f20b23abca2e2bd232dc4607b62c8430000000000000000000000000c95bcd7e426f7228b87a43ff741c5c268433fa0000000000000000000000000000000000000000000000000000000005dbc1030000000000000000000000000000000000000000000000000000000005de24bb0","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://a0bb470754729bd456803b1d2e4ef417dfc58ad67f203e4daac79745db13522e"}]}