{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.1;\r\nlibrary SafeMath {\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function Smul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n      uint256 z = a * b;\r\n      assert((a == 0)||(z/a == b));\r\n      return z;\r\n  }\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function Sdiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      if (a == 0) {\r\n          return 0;\r\n      }\r\n    assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function Ssub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      require(a >= b, 'First parameter must be greater than second');\r\n      assert(a >= b);\r\n      uint256 z = a - b;\r\n      return z;\r\n  }\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function Sadd(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n      uint256 z = a + b;\r\n      require((z >= a) && (z >= b),'Result must be greater than parameters');\r\n      assert((z >= a) && (z >= b));\r\n      return z;\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public payable returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  bool internal pause = false;\r\n  modifier chk_paused(){\r\n      require(pause == false,'Sorry, contract paused by the administrator');\r\n      _;\r\n  }\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\nfunction totalSupply() public view returns (uint);\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public  payable returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n  mapping(address => uint256) internal balances;\r\n  struct partners{\r\n      uint256 seq;\r\n      address owner;\r\n  }\r\n  mapping(uint => partners) internal store;\r\n  uint256 internal totalPartners_;\r\n  uint256 internal div_bal_;\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public payable  returns (bool) {\r\n    require(_to != address(0),'Address need to be different of zero');\r\n    require(_value <= balances[msg.sender],'Value is greater than balance');\r\n    require(pause == false,'Contract paused to pay dividends or other reason especified in polidatacompressor.com');\r\n    if (balances[msg.sender] >= _value && _value > 0) {\r\n        balances[msg.sender] = balances[msg.sender].Ssub(_value);\r\n        //looking for partner informed into _to\r\n        bool exists_ = false;\r\n        for (uint i = 1 ; i <= totalPartners_ ; i++) {\r\n            if (store[i].owner == _to){\r\n                exists_ = true;\r\n            }\r\n        }\r\n        if (exists_ == false){\r\n           totalPartners_ = totalPartners_.Sadd(1);\r\n           store[totalPartners_].seq = totalPartners_;\r\n           store[totalPartners_].owner = _to;\r\n        }\r\n        balances[_to] = balances[_to].Sadd(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n}\r\ncontract StandardToken is ERC20, BasicToken {\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n  address internal owner;\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public  payable  chk_paused()\r\n    returns (bool)\r\n  {\r\n    require(_to != address(0),'Address need to be different of zero');\r\n    require(_value <= balances[_from],'Value is greater than balance');\r\n    require(_value <= allowed[_from][msg.sender],'Value is greater than allowed');\r\n\r\n    balances[_from] = balances[_from].Ssub(_value);\r\n    balances[_to] = balances[_to].Sadd(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].Ssub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public chk_paused() returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   ) public view returns (uint256){\r\n    return allowed[_owner][_spender];\r\n  }\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public chk_paused()\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].Sadd(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  ) public chk_paused() returns (bool){\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.Ssub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract PoliToken is StandardToken {\r\n  string public constant name = \"PoliToken\";\r\n  string public constant symbol = \"POLI\";\r\n  uint256 public constant INITIAL_SUPPLY = 10000000;\r\n  \r\n  constructor() public  {\r\n    totalPartners_ = 1;\r\n    store[totalPartners_].seq = totalPartners_;\r\n    store[totalPartners_].owner = msg.sender;\r\n    owner = msg.sender;\r\n    div_bal_ = address(this).balance;\r\n    balances[msg.sender] = INITIAL_SUPPLY;\r\n    emit Transfer(address(0), msg.sender, INITIAL_SUPPLY);\r\n  }\r\n      function totalSupply() public view returns (uint) {\r\n        return INITIAL_SUPPLY;\r\n    }\r\n   function paying_dividends(uint _seq_ini, uint _seq_fim) external onlyOwner() onlyPaused() {\r\n      require(_seq_fim >= _seq_ini, 'first parameter must be greater than second');\r\n      uint256 tot_;\r\n      uint256 div_;\r\n      uint256 max_partners_;\r\n      uint gas_;\r\n      tot_ = div_bal_;\r\n      max_partners_ = totalPartners_;\r\n      if (max_partners_ > _seq_fim){\r\n          max_partners_ = _seq_fim;\r\n      }\r\n      for (uint i = _seq_ini; i <= max_partners_; i++){\r\n          div_ = balances[store[i].owner].Smul(tot_).Sdiv(INITIAL_SUPPLY);\r\n          gas_ = gasleft();\r\n          store[i].owner.call.value(div_).gas(gas_)(\"\");\r\n      }\r\n      if (max_partners_ == totalPartners_){\r\n          div_bal_ = 0;\r\n      }\r\n  }\r\n  function deposits_and_donations() external payable noZero() returns(bool){\r\n      if (pause != true){\r\n         div_bal_ = address(this).balance;\r\n      }\r\n      return true;\r\n  }\r\n  function change_pause(bool _pause) external onlyOwner returns(bool){\r\n      pause = _pause;\r\n      div_bal_ = address(this).balance;\r\n      return true;\r\n  }\r\n  function chk_pause() external view returns(bool){\r\n      return pause;\r\n  }\r\n  function chk_balance() external view returns(uint){\r\n      return address(this).balance;\r\n  }\r\n  function chk_balance_dividends() external view returns(uint){\r\n      return div_bal_;\r\n  }\r\n  function transfer_owner(address _owner) external onlyOwner returns(bool){\r\n      owner = _owner;\r\n      return true;\r\n  }\r\n  function chk_active_owner() external view returns(address){\r\n      return owner;\r\n  }\r\n  function chk_total_partners() external view returns(uint){\r\n      return totalPartners_;\r\n  }\r\n  function chk_partner_address(uint i) external view returns(address){\r\n      return store[i].owner;\r\n  }\r\n  modifier onlyOwner(){\r\n      require(msg.sender == owner, 'Sorry, you must be owner');\r\n      _;\r\n  }\r\n  modifier onlyPaused(){\r\n      require(pause == true,'You need pause transactions to execute this');\r\n      _;\r\n  }\r\n  modifier noZero(){\r\n      require(msg.value > 0,'Value must be greater than zero');\r\n      _;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pause\",\"type\":\"bool\"}],\"name\":\"change_pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transfer_owner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"chk_partner_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chk_total_partners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chk_active_owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chk_balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chk_pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposits_and_donations\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chk_balance_dividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_seq_ini\",\"type\":\"uint256\"},{\"name\":\"_seq_fim\",\"type\":\"uint256\"}],\"name\":\"paying_dividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"PoliToken","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b23e6961bf2d85e4c60b0f6a5a34d67a691320e44f08e92a5e39e52e8c40a31b"}]}