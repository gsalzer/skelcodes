{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/token/ERC20Cutted.sol\r\n\r\ncontract ERC20Cutted {\r\n\r\n  function balanceOf(address who) public view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n\r\n}\r\n\r\n// File: contracts/Room1.sol\r\n\r\ncontract Room1 is Ownable {\r\n\r\n  event TicketPurchased(address lotAddr, uint lotIndex, uint ticketNumber, address player, uint ticketPrice);\r\n\r\n  event TicketWon(address lotAddr, uint lotIndex, uint ticketNumber, address player, uint win);\r\n\r\n  event ParametersUpdated(uint lotIndex, address feeWallet, uint feePercent, uint starts, uint duration, uint interval, uint ticketPrice);\r\n\r\n  using SafeMath for uint;\r\n\r\n  uint diffRangeCounter = 0;\r\n\r\n  uint public LIMIT = 100;\r\n\r\n  uint public RANGE = 100000;\r\n\r\n  uint public PERCENT_RATE = 100;\r\n\r\n  enum LotState { Accepting, Processing, Rewarding, Finished }\r\n\r\n  uint public interval;\r\n\r\n  uint public duration;\r\n\r\n  uint public starts;\r\n\r\n  uint public ticketPrice;\r\n\r\n  uint public feePercent;\r\n\r\n  uint public lotProcessIndex;\r\n\r\n  uint public lastChangesIndex;\r\n\r\n  uint public MIN_DISPERSION_K = 10;\r\n\r\n  address public feeWallet;\r\n\r\n  mapping (address => uint) public summaryPayed;\r\n\r\n  struct Ticket {\r\n    address owner;\r\n    uint number;\r\n    uint win;\r\n  }\r\n\r\n  struct Lot {\r\n    LotState state;\r\n    uint processIndex;\r\n    uint summaryNumbers;\r\n    uint summaryInvested;\r\n    uint rewardBase;\r\n    uint ticketsCount;\r\n    uint playersCount;\r\n    mapping (uint => Ticket) tickets;\r\n    mapping (address => uint) invested;\r\n    address[] players;\r\n  }\r\n\r\n  mapping(uint => Lot) public lots;\r\n\r\n  modifier started() {\r\n    require(now >= starts, \"Not started yet!\");\r\n    _;\r\n  }\r\n\r\n  modifier notContract(address to) {\r\n    uint codeLength;\r\n    assembly {\r\n      codeLength := extcodesize(to)\r\n    }\r\n    require(codeLength == 0, \"Contracts not supported!\");\r\n    _;\r\n  }\r\n\r\n  function updateParameters(address newFeeWallet, uint newFeePercent, uint newStarts, uint newDuration, uint newInterval, uint newTicketPrice) public onlyOwner {\r\n    require(newStarts > now, \"Lottery can only be started in the future!\");\r\n    uint curLotIndex = getCurLotIndex();\r\n    Lot storage lot = lots[curLotIndex];\r\n    require(lot.state == LotState.Finished, \"Contract parameters can only be changed if the current lottery is finished!\");\r\n    lastChangesIndex = curLotIndex.add(1);\r\n    feeWallet = newFeeWallet;\r\n    feePercent = newFeePercent;\r\n    starts = newStarts;\r\n    duration = newDuration;\r\n    interval = newInterval;\r\n    ticketPrice = newTicketPrice;\r\n    emit ParametersUpdated(lastChangesIndex, newFeeWallet, newFeePercent, newStarts, newDuration, newInterval, newTicketPrice);\r\n  }\r\n\r\n  function getLotInvested(uint lotNumber, address player) view public returns(uint) {\r\n    Lot storage lot = lots[lotNumber];\r\n    return lot.invested[player];\r\n  }\r\n\r\n  function getTicketInfo(uint lotNumber, uint ticketNumber) view public returns(address, uint, uint) {\r\n    Ticket storage ticket = lots[lotNumber].tickets[ticketNumber];\r\n    return (ticket.owner, ticket.number, ticket.win);\r\n  }\r\n\r\n  function getCurLotIndex() view public returns(uint) {\r\n    if (starts > now) {\r\n      return lastChangesIndex;\r\n    }\r\n    uint passed = now.sub(starts);\r\n    if(passed == 0)\r\n      return 0;\r\n    return passed.div(interval.add(duration)).add(lastChangesIndex);\r\n  }\r\n\r\n  constructor() public {\r\n    starts = 1564574400;\r\n    ticketPrice = 10000000000000000;\r\n    feePercent = 10;\r\n    feeWallet = 0x53f22b8f420317e7cdcbf2a180a12534286cb578;\r\n    interval = 1800;\r\n    uint fullDuration = 3600;\r\n    duration = fullDuration.sub(interval);\r\n    emit ParametersUpdated(0, feeWallet, feePercent, starts, duration, interval, ticketPrice);\r\n  }\r\n\r\n  function setFeeWallet(address newFeeWallet) public onlyOwner {\r\n    feeWallet = newFeeWallet;\r\n  }\r\n\r\n  function getNotPayableTime(uint lotIndex) view public returns(uint) {\r\n    return starts.add(interval.add(duration).mul(lotIndex.add(1).sub(lastChangesIndex))).sub(interval);\r\n  }\r\n\r\n  function () public payable notContract(msg.sender) started {\r\n    require(RANGE.mul(RANGE).mul(address(this).balance.add(msg.value)) > 0, \"Balance limit error!\");\r\n    require(msg.value >= ticketPrice, \"Not enough funds to buy ticket!\");\r\n    uint curLotIndex = getCurLotIndex();\r\n    require(now < getNotPayableTime(curLotIndex), \"Game finished!\");\r\n    Lot storage lot = lots[curLotIndex];\r\n    require(RANGE.mul(RANGE) > lot.ticketsCount, \"Ticket count limit exceeded!\");\r\n\r\n    uint numTicketsToBuy = msg.value.div(ticketPrice);\r\n\r\n    uint toInvest = ticketPrice.mul(numTicketsToBuy);\r\n\r\n    if(lot.invested[msg.sender] == 0) {\r\n      lot.players.push(msg.sender);\r\n      lot.playersCount = lot.playersCount.add(1);\r\n    }\r\n\r\n    lot.invested[msg.sender] = lot.invested[msg.sender].add(toInvest);\r\n\r\n    for(uint i = 0; i < numTicketsToBuy; i++) {\r\n      lot.tickets[lot.ticketsCount].owner = msg.sender;\r\n      emit TicketPurchased(address(this), curLotIndex, lot.ticketsCount, msg.sender, ticketPrice);\r\n      lot.ticketsCount = lot.ticketsCount.add(1);\r\n    }\r\n\r\n    lot.summaryInvested = lot.summaryInvested.add(toInvest);\r\n\r\n    uint refund = msg.value.sub(toInvest);\r\n    msg.sender.transfer(refund);\r\n  }\r\n\r\n  function canUpdate() view public returns(bool) {\r\n    if (starts > now) {\r\n      return false;\r\n    }\r\n    uint curLotIndex = getCurLotIndex();\r\n    Lot storage lot = lots[curLotIndex];\r\n    return lot.state == LotState.Finished;\r\n  }\r\n\r\n  function isProcessNeeds() view public returns(bool) {\r\n    if (starts > now) {\r\n      return false;\r\n    }\r\n    uint curLotIndex = getCurLotIndex();\r\n    Lot storage lot = lots[curLotIndex];\r\n    return lotProcessIndex < curLotIndex || (now >= getNotPayableTime(lotProcessIndex) && lot.state != LotState.Finished);\r\n  }\r\n\r\n  function pow(uint number, uint count) private returns(uint) {\r\n    uint result = number;\r\n    if (count == 0) return 1;\r\n    for (uint i = 1; i < count; i++) {\r\n      result = result.mul(number);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  function prepareToRewardProcess() public onlyOwner started {\r\n    Lot storage lot = lots[lotProcessIndex];\r\n\r\n    if(lot.state == LotState.Accepting) {\r\n      require(now >= getNotPayableTime(lotProcessIndex), \"Lottery stakes accepting time not finished!\");\r\n      lot.state = LotState.Processing;\r\n    }\r\n\r\n    require(lot.state == LotState.Processing || lot.state == LotState.Rewarding, \"State should be Processing or Rewarding!\");\r\n\r\n    uint index = lot.processIndex;\r\n\r\n    uint limit = lot.ticketsCount - index;\r\n    if(limit > LIMIT) {\r\n      limit = LIMIT;\r\n    }\r\n\r\n    limit = limit.add(index);\r\n\r\n    uint number;\r\n\r\n    if(lot.state == LotState.Processing) {\r\n\r\n      number = block.number;\r\n\r\n      uint dispersionK = MIN_DISPERSION_K;\r\n\r\n      uint diffRangeLimit = 0;\r\n\r\n      if(limit > 0) {\r\n        diffRangeLimit = limit.div(dispersionK);\r\n        if(diffRangeLimit == 0) {\r\n          diffRangeLimit = 1;\r\n        }\r\n      }\r\n\r\n      diffRangeCounter = 0;\r\n\r\n      uint enlargedRange = RANGE.mul(dispersionK);\r\n\r\n      bool enlargedWinnerGenerated = false;\r\n\r\n      bool enlargedWinnerPrepared = false;\r\n\r\n      uint enlargedWinnerIndex = 0;\r\n\r\n      for(; index < limit; index++) {\r\n\r\n        number = pow(uint(keccak256(abi.encodePacked(number)))%RANGE, 5);\r\n        lot.tickets[index].number = number;\r\n        lot.summaryNumbers = lot.summaryNumbers.add(number);\r\n\r\n        if(!enlargedWinnerGenerated) {\r\n          enlargedWinnerIndex = uint(keccak256(abi.encodePacked(number)))%enlargedRange;\r\n          enlargedWinnerGenerated = true;\r\n        } if(!enlargedWinnerPrepared && diffRangeCounter == enlargedWinnerIndex) {\r\n          number = pow(uint(keccak256(abi.encodePacked(number)))%enlargedRange, 5);\r\n          lot.tickets[index].number = lot.tickets[index].number.add(number);\r\n          lot.summaryNumbers = lot.summaryNumbers.add(number);\r\n          enlargedWinnerGenerated = true;\r\n        }\r\n\r\n        if(diffRangeCounter == diffRangeLimit) {\r\n          diffRangeCounter = 0;\r\n          enlargedWinnerPrepared = false;\r\n          enlargedWinnerGenerated = false;\r\n        }\r\n\r\n        diffRangeCounter++;\r\n      }\r\n\r\n      if(index == lot.ticketsCount) {\r\n        uint fee = lot.summaryInvested.mul(feePercent).div(PERCENT_RATE);\r\n        feeWallet.transfer(fee);\r\n        lot.rewardBase = lot.summaryInvested.sub(fee);\r\n        lot.state = LotState.Rewarding;\r\n        index = 0;\r\n      }\r\n\r\n    } else {\r\n\r\n      for(; index < limit; index++) {\r\n        Ticket storage ticket = lot.tickets[index];\r\n        number = ticket.number;\r\n        if(number > 0) {\r\n          ticket.win = lot.rewardBase.mul(number).div(lot.summaryNumbers);\r\n          if(ticket.win > 0) {\r\n            ticket.owner.transfer(ticket.win);\r\n            summaryPayed[ticket.owner] = summaryPayed[ticket.owner].add(ticket.win);\r\n            emit TicketWon(address(this), lotProcessIndex, index, ticket.owner, ticket.win);\r\n          }\r\n        }\r\n      }\r\n\r\n      if(index == lot.ticketsCount) {\r\n        lot.state = LotState.Finished;\r\n        lotProcessIndex = lotProcessIndex.add(1);\r\n      }\r\n    }\r\n\r\n    lot.processIndex = index;\r\n  }\r\n\r\n  function retrieveTokens(address tokenAddr, address to) public onlyOwner {\r\n    ERC20Cutted token = ERC20Cutted(tokenAddr);\r\n    token.transfer(to, token.balanceOf(address(this)));\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFeeWallet\",\"type\":\"address\"},{\"name\":\"newFeePercent\",\"type\":\"uint256\"},{\"name\":\"newStarts\",\"type\":\"uint256\"},{\"name\":\"newDuration\",\"type\":\"uint256\"},{\"name\":\"newInterval\",\"type\":\"uint256\"},{\"name\":\"newTicketPrice\",\"type\":\"uint256\"}],\"name\":\"updateParameters\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lotProcessIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_DISPERSION_K\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lotNumber\",\"type\":\"uint256\"},{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getLotInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isProcessNeeds\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERCENT_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastChangesIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"prepareToRewardProcess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurLotIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RANGE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddr\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"retrieveTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lotNumber\",\"type\":\"uint256\"},{\"name\":\"ticketNumber\",\"type\":\"uint256\"}],\"name\":\"getTicketInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFeeWallet\",\"type\":\"address\"}],\"name\":\"setFeeWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"starts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"interval\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canUpdate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lotIndex\",\"type\":\"uint256\"}],\"name\":\"getNotPayableTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"summaryPayed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lots\",\"outputs\":[{\"name\":\"state\",\"type\":\"uint8\"},{\"name\":\"processIndex\",\"type\":\"uint256\"},{\"name\":\"summaryNumbers\",\"type\":\"uint256\"},{\"name\":\"summaryInvested\",\"type\":\"uint256\"},{\"name\":\"rewardBase\",\"type\":\"uint256\"},{\"name\":\"ticketsCount\",\"type\":\"uint256\"},{\"name\":\"playersCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"lotAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"lotIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ticketNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ticketPrice\",\"type\":\"uint256\"}],\"name\":\"TicketPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"lotAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"lotIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ticketNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"win\",\"type\":\"uint256\"}],\"name\":\"TicketWon\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"lotIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"feeWallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"feePercent\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"starts\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"interval\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ticketPrice\",\"type\":\"uint256\"}],\"name\":\"ParametersUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Room1","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3d83f0d539d6a305b860cdfaf6231e165a9b7ad4d7f5d2a6658ca608421adac9"}]}