{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2019-08-23\r\n*/\r\n\r\npragma solidity 0.5.11;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary Address {\r\n    /**\r\n     * Returns whether the target address is a contract\r\n     * @dev This function will return false if invoked during the constructor of a contract,\r\n     * as the code is not actually created until after the constructor finishes.\r\n     * @param account address of the account to check\r\n     * @return whether the target address is a contract\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // XXX Currently there is no better way to check if there is a contract in an address\r\n        // than to check the size of the code at that address.\r\n        // See https://ethereum.stackexchange.com/a/14016/36603\r\n        // for more details about how this works.\r\n        // TODO Check this again before the Serenity release, because all addresses will be\r\n        // contracts then.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {size := extcodesize(account)}\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0));\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must equal true).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n\r\n        require(address(token).isContract());\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success);\r\n\r\n        if (returndata.length > 0) {// Return data is optional\r\n            require(abi.decode(returndata, (bool)));\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     * @notice Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title AssetsValue\r\n * @dev The contract which hold all tokens and ETH as a assets\r\n * Also should be responsible for the balance increasing/decreasing and validation\r\n */\r\ncontract AssetsValue {\r\n    // using safe math calculation\r\n    using SafeMath for uint256;\r\n\r\n    // for being secure during transactions between users and contract gonna use SafeERC20 lib\r\n    using SafeERC20 for IERC20;\r\n\r\n    // The id for ETH asset is 0x0 address\r\n    // the rest assets should have their token contract address\r\n    address internal _ethAssetIdentificator = address(0);\r\n\r\n    // Order details which is available by JAVA long number\r\n    struct OrderDetails {\r\n        // does the order has been deposited\r\n        bool created;\r\n        // the 0x0 for Ethereum and ERC contract address for tokens\r\n        address asset;\r\n        // tokens/eth amount\r\n        uint256 amount;\r\n        // the status (deposited/withdrawn)\r\n        bool withdrawn;\r\n        //Creation time\r\n        uint256 initTimestamp;\r\n    }\r\n\r\n    // Each user has his own state and details\r\n    struct User {\r\n        // user exist validation bool\r\n        bool exist;\r\n        // contract order index\r\n        uint256 index;\r\n        // contract index (0, 1, 2 ...) => exchange order number (JAVA long number)\r\n        mapping(uint256 => uint256) orderIdByIndex;\r\n        // JAVA long number => order details\r\n        mapping(uint256 => OrderDetails) orders;\r\n    }\r\n\r\n    // ETH wallet => Assets => value\r\n    mapping(address => User) private _users;\r\n\r\n    modifier orderIdNotExist(\r\n        uint256 orderId,\r\n        address user\r\n    ) {\r\n        require(_users[user].orders[orderId].created == false, \"orderIdIsNotDeposited: user already deposit this orderId\");\r\n        _;\r\n    }\r\n\r\n    // Events\r\n    event AssetDeposited(uint256 orderId, address indexed user, address indexed asset, uint256 amount);\r\n    event AssetWithdrawal(uint256 orderId, address indexed user, address indexed asset, uint256 amount);\r\n\r\n    // -----------------------------------------\r\n    // EXTERNAL\r\n    // -----------------------------------------\r\n\r\n    function deposit(\r\n        uint256 orderId\r\n    ) public orderIdNotExist(orderId, msg.sender) payable {\r\n        require(msg.value != 0, \"deposit: user needs to transfer ETH for calling this method\");\r\n\r\n        _deposit(orderId, msg.sender, _ethAssetIdentificator, msg.value);\r\n    }\r\n\r\n    function deposit(\r\n        uint256 orderId,\r\n        uint256 amount,\r\n        address token\r\n    ) public orderIdNotExist(orderId, msg.sender) {\r\n        require(token != address(0), \"deposit: invalid token address\");\r\n        require(amount != 0, \"deposit: user needs to fill transferable tokens amount for calling this method\");\r\n\r\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\r\n        _deposit(orderId, msg.sender, token, amount);\r\n    }\r\n\r\n    function withdraw(\r\n        uint256 orderId\r\n    ) external {\r\n        // validation of the user existion\r\n        require(_doesUserExist(msg.sender) == true, \"withdraw: the user is not active\");\r\n\r\n        // storing the order information (asset and amount)\r\n        OrderDetails memory order = _getDepositedOrderDetails(orderId, msg.sender);\r\n        address asset = order.asset;\r\n        uint256 amount = order.amount;\r\n\r\n        // order amount validation, it should not be zero\r\n        require(order.withdrawn == false, \"withdraw: this order Id has been already withdrawn or waiting for the swap\");\r\n\r\n        _withdrawOrderBalance(orderId, msg.sender);\r\n\r\n        if (asset == _ethAssetIdentificator) {\r\n            msg.sender.transfer(amount);\r\n        } else {\r\n            IERC20(asset).safeTransfer(msg.sender, amount);\r\n        }\r\n\r\n        emit AssetWithdrawal(orderId, msg.sender, asset, amount);\r\n    }\r\n\r\n    // -----------------------------------------\r\n    // INTERNAL\r\n    // -----------------------------------------\r\n\r\n    function _deposit(\r\n        uint256 orderId,\r\n        address sender,\r\n        address asset,\r\n        uint256 amount\r\n    ) internal {\r\n        _activateIfUserIsNew(sender);\r\n        _depositOrderBalance(orderId, sender, asset, amount);\r\n\r\n        _users[sender].index += 1;\r\n\r\n        emit AssetDeposited(orderId, sender, asset, amount);\r\n    }\r\n\r\n    function _doesUserExist(\r\n        address user\r\n    ) internal view returns (bool) {\r\n        return _users[user].exist;\r\n    }\r\n\r\n    function _activateIfUserIsNew(\r\n        address user\r\n    ) internal returns (bool) {\r\n        if (_doesUserExist(user) == false) {\r\n            _users[user].exist = true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _getDepositedOrderDetails(\r\n        uint256 orderId,\r\n        address user\r\n    ) internal view returns (OrderDetails memory order) {\r\n        return _users[user].orders[orderId];\r\n    }\r\n\r\n    function _depositOrderBalance(\r\n        uint256 orderId,\r\n        address user,\r\n        address asset,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        _users[user].orderIdByIndex[_users[user].index] = orderId;\r\n        _users[user].orders[orderId] = OrderDetails(true, asset, amount, false, block.timestamp);\r\n        return true;\r\n    }\r\n\r\n    function _withdrawOrderBalance(\r\n        uint256 orderId,\r\n        address user\r\n    ) internal returns (bool) {\r\n        _users[user].orders[orderId].withdrawn = true;\r\n        return true;\r\n    }\r\n\r\n    // -----------------------------------------\r\n    // GETTERS\r\n    // -----------------------------------------\r\n\r\n    function doesUserExist(\r\n        address user\r\n    ) external view returns (bool) {\r\n        return _doesUserExist(user);\r\n    }\r\n\r\n    function getUserFilledDeposits(\r\n        address user\r\n    ) external view returns (\r\n        uint256[] memory orderIds,\r\n        uint256[] memory amounts,\r\n        uint256[] memory initTimestamps\r\n    ) {\r\n        // amount of deposits which user has been done\r\n        uint256 depositsLength = _users[user].index;\r\n\r\n        // init empty arrays which should been returned\r\n        orderIds = new uint256[](depositsLength);\r\n        amounts = new uint256[](depositsLength);\r\n        initTimestamps = new uint256[](depositsLength);\r\n\r\n        uint256 j = 0;\r\n        for (uint256 i = 0; i <= depositsLength; i++) {\r\n            uint256 orderId = _users[user].orderIdByIndex[i];\r\n            if (_users[user].orders[orderId].created) {\r\n                orderIds[j] = orderId;\r\n\r\n                OrderDetails memory order = _users[user].orders[orderId];\r\n                amounts[j] = order.amount;\r\n                initTimestamps[j] = order.initTimestamp;\r\n                j++;\r\n            }\r\n        }\r\n\r\n        return (\r\n        orderIds,\r\n        amounts,\r\n        initTimestamps\r\n        );\r\n    }\r\n\r\n    function getUserDepositsAmount(\r\n        address user\r\n    ) external view returns (\r\n        uint256\r\n    ) {\r\n        return _users[user].index;\r\n    }\r\n\r\n    function getDepositedOrderDetails(\r\n        uint256 orderId,\r\n        address user\r\n    ) external view returns (\r\n        bool created,\r\n        address asset,\r\n        uint256 amount,\r\n        bool withdrawn\r\n    ) {\r\n        OrderDetails memory order = _getDepositedOrderDetails(orderId, user);\r\n        return (\r\n        order.created,\r\n        order.asset,\r\n        order.amount,\r\n        order.withdrawn\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * @title CrossBlockchainSwap\r\n * @dev Fully autonomous cross-blockchain swapping smart contract\r\n */\r\ncontract CrossBlockchainSwap is AssetsValue, Ownable {\r\n    // swaps' state\r\n    enum State {Empty, Filled, Redeemed, Refunded}\r\n\r\n    // users can swap ETH and ERC tokens\r\n    enum SwapType {ETH, Token}\r\n\r\n    // the body of each swap\r\n    struct Swap {\r\n        uint256 initTimestamp;\r\n        uint256 refundTimestamp;\r\n        bytes32 secretHash;\r\n        bytes32 secret;\r\n        address initiator;\r\n        address recipient;\r\n        address asset;\r\n        uint256 amount;\r\n        uint256 orderId;\r\n        State state;\r\n    }\r\n\r\n    struct Initiator {\r\n        // contract order index\r\n        uint256 index;\r\n        // length of filled swaps\r\n        uint256 filledSwaps;\r\n        // index (0, 1, 2 ...) => swap hash\r\n        mapping(uint256 => bytes32) swaps;\r\n    }\r\n\r\n    // mapping of swaps based on secret hash and swap info\r\n    mapping(bytes32 => Swap) private _swaps;\r\n\r\n    // the swaps data by initiator address\r\n    mapping(address => Initiator) private _initiators;\r\n\r\n    // min/max life limits for swap order\r\n    // can be changed only by the contract owner\r\n    struct SwapTimeLimits {\r\n        uint256 min;\r\n        uint256 max;\r\n    }\r\n\r\n    // By default, the contract has limits for swap orders lifetime\r\n    // The swap order can be active from 10 minutes until 6 months\r\n    SwapTimeLimits private _swapTimeLimits = SwapTimeLimits(10 minutes, 180 days);\r\n\r\n    // -----------------------------------------\r\n    // EVENTS\r\n    // -----------------------------------------\r\n\r\n    event Initiated(\r\n        uint256 orderId,\r\n        bytes32 secretHash,\r\n        address indexed initiator,\r\n        address indexed recipient,\r\n        uint256 initTimestamp,\r\n        uint256 refundTimestamp,\r\n        address indexed asset,\r\n        uint256 amount\r\n    );\r\n\r\n    event Redeemed(\r\n        bytes32 secretHash,\r\n        uint256 redeemTimestamp,\r\n        bytes32 secret,\r\n        address indexed redeemer\r\n    );\r\n\r\n    event Refunded(\r\n        uint256 orderId,\r\n        bytes32 secretHash,\r\n        uint256 refundTime,\r\n        address indexed refunder\r\n    );\r\n\r\n    // -----------------------------------------\r\n    // MODIFIERS\r\n    // -----------------------------------------\r\n\r\n    modifier isNotInitiated(bytes32 secretHash) {\r\n        require(_swaps[secretHash].state == State.Empty, \"isNotInitiated: this secret hash was already used, please use another one\");\r\n        _;\r\n    }\r\n\r\n    modifier isRedeemable(bytes32 secret) {\r\n        bytes32 secretHash = _hashTheSecret(secret);\r\n        require(_swaps[secretHash].state == State.Filled, \"isRedeemable: the swap with this secretHash does not exist or has been finished\");\r\n        uint256 refundTimestamp = _swaps[secretHash].refundTimestamp;\r\n        require(refundTimestamp > block.timestamp, \"isRedeemable: the redeem is closed for this swap\");\r\n        _;\r\n    }\r\n\r\n    modifier isRefundable(bytes32 secretHash, address refunder) {\r\n        require(_swaps[secretHash].state == State.Filled, \"isRefundable: the swap with this secretHash does not exist or has been finished\");\r\n        require(_swaps[secretHash].initiator == refunder, \"isRefundable: only the initiator of the swap can call this method\");\r\n        uint256 refundTimestamp = _swaps[secretHash].refundTimestamp;\r\n        require(block.timestamp >= refundTimestamp, \"isRefundable: the refund is not available now\");\r\n        _;\r\n    }\r\n\r\n    // -----------------------------------------\r\n    // FALLBACK\r\n    // -----------------------------------------\r\n\r\n    function() external payable {\r\n        // reverts all fallback & payable transactions\r\n        revert();\r\n    }\r\n\r\n    // -----------------------------------------\r\n    // EXTERNAL\r\n    // -----------------------------------------\r\n\r\n    /**\r\n     *  @dev If user wants to swap ERC token, before initiating the swap between that\r\n     *  initiator need to call approve method from his tokens' smart contract,\r\n     *  approving to it to spend the value1 amount of tokens\r\n     *  @param secretHash the encoded secret which they discussed at offline (SHA256)\r\n     *  @param refundTimestamp the period when the swap should be active\r\n     *  it should be written in MINUTES\r\n     */\r\n    function initiate(\r\n        uint256 orderId,\r\n        bytes32 secretHash,\r\n        address recipient,\r\n        uint256 refundTimestamp\r\n    ) public isNotInitiated(secretHash) {\r\n        // validation that refund Timestamp more than exchange min limit and less then max limit\r\n        _validateRefundTimestamp(refundTimestamp * 1 minutes);\r\n\r\n        OrderDetails memory order = _getDepositedOrderDetails(orderId, msg.sender);\r\n\r\n        // validation of the deposited order existing and non-zero amount\r\n        require(order.created == true, \"initiate: this order Id has not been created and deposited yet\");\r\n        require(order.withdrawn == false, \"initiate: this order deposit has been withdrawn\");\r\n        require(order.amount != 0, \"initiate: this order Id has been withdrawn, finished or waiting for the redeem\");\r\n\r\n        // withdrawing the balance of this orderId from sender deposites\r\n        _withdrawOrderBalance(orderId, msg.sender);\r\n\r\n        // swap asset details\r\n        _swaps[secretHash].asset = order.asset;\r\n        _swaps[secretHash].amount = order.amount;\r\n\r\n        // swap status\r\n        _swaps[secretHash].state = State.Filled;\r\n\r\n        // swap clients\r\n        _swaps[secretHash].initiator = msg.sender;\r\n        _swaps[secretHash].recipient = recipient;\r\n        _swaps[secretHash].secretHash = secretHash;\r\n        _swaps[secretHash].orderId = orderId;\r\n\r\n        // swap timestapms\r\n        _swaps[secretHash].initTimestamp = block.timestamp;\r\n        _swaps[secretHash].refundTimestamp = block.timestamp + (refundTimestamp * 1 minutes);\r\n\r\n        // updating the initiator state\r\n        Initiator storage initiator = _initiators[msg.sender];\r\n        initiator.swaps[initiator.index] = secretHash;\r\n        initiator.index++;\r\n        initiator.filledSwaps++;\r\n\r\n        emit Initiated(\r\n            orderId,\r\n            secretHash,\r\n            msg.sender,\r\n            recipient,\r\n            block.timestamp,\r\n            refundTimestamp,\r\n            order.asset,\r\n            order.amount\r\n        );\r\n    }\r\n\r\n    /**\r\n     *  @dev The participant of swap, who has the secret word and the secret hash can call this method\r\n     *  and receive assets from contract.\r\n     *  @param secret which both sides discussed before initialization\r\n     */\r\n    function redeem(\r\n        bytes32 secret\r\n    ) external isRedeemable(secret) {\r\n        // storing the secret hash generated from secret\r\n        bytes32 secretHash = _hashTheSecret(secret);\r\n\r\n        // closing the state of this swap order\r\n        _swaps[secretHash].state = State.Redeemed;\r\n\r\n        // storing the recipient address\r\n        address recipient = _swaps[secretHash].recipient;\r\n\r\n        if (_getSwapType(secretHash) == SwapType.ETH) {\r\n            // converting recipient address to payable address\r\n            address payable payableReceiver = address(uint160(recipient));\r\n            // transfer ETH to recipient wallet\r\n            payableReceiver.transfer(_swaps[secretHash].amount);\r\n        } else {\r\n            // transfer tokens to recipient address\r\n            IERC20(_swaps[secretHash].asset).safeTransfer(recipient, _swaps[secretHash].amount);\r\n        }\r\n\r\n        // saving the secret\r\n        _swaps[secretHash].secret = secret;\r\n\r\n        // decrease the filled swapss amount\r\n        _initiators[_swaps[secretHash].initiator].filledSwaps--;\r\n\r\n        emit Redeemed(\r\n            secretHash,\r\n            block.timestamp,\r\n            secret,\r\n            recipient\r\n        );\r\n    }\r\n\r\n    /**\r\n     *  @dev The initiator can get back his tokens until refundTimestamp comes,\r\n     *  after that both sides cannot do anything with this swap\r\n     *  @param secretHash the encoded secret which they discussed at offline (SHA256)\r\n     */\r\n    function refund(\r\n        bytes32 secretHash\r\n    ) public isRefundable(secretHash, msg.sender) {\r\n        _swaps[secretHash].state = State.Refunded;\r\n        _depositOrderBalance(_swaps[secretHash].orderId, msg.sender, _swaps[secretHash].asset, _swaps[secretHash].amount);\r\n\r\n        // decrease the filled swapss amount\r\n        _initiators[msg.sender].filledSwaps--;\r\n\r\n        emit Refunded(\r\n            _swaps[secretHash].orderId,\r\n            secretHash,\r\n            block.timestamp,\r\n            msg.sender\r\n        );\r\n    }\r\n\r\n    /**\r\n     *  @dev The owner can change time limits for swap lifetime\r\n     *  Amounts should be written in MINUTES\r\n     */\r\n    function changeSwapLifetimeLimits(\r\n        uint256 newMin,\r\n        uint256 newMax\r\n    ) external onlyOwner {\r\n        require(newMin != 0, \"changeSwapLifetimeLimits: newMin and newMax should be bigger then 0\");\r\n        require(newMax >= newMin, \"changeSwapLifetimeLimits: the newMax should be bigger then newMax\");\r\n\r\n        _swapTimeLimits = SwapTimeLimits(newMin * 1 minutes, newMax * 1 minutes);\r\n    }\r\n\r\n    // -----------------------------------------\r\n    // INTERNAL\r\n    // -----------------------------------------\r\n\r\n    /**\r\n     *  @dev Validating the period time of swap\r\n     * It should be equal/bigger than 10 minutes and equal/less than 180 days\r\n     */\r\n    function _validateRefundTimestamp(\r\n        uint256 refundTimestamp\r\n    ) private view {\r\n        require(refundTimestamp >= _swapTimeLimits.min, \"_validateRefundTimestamp: the timestamp should be bigger than min swap lifetime\");\r\n        require(_swapTimeLimits.max >= refundTimestamp, \"_validateRefundTimestamp: the timestamp should be smaller than max swap lifetime\");\r\n    }\r\n\r\n    function _hashTheSecret(\r\n        bytes32 secret\r\n    ) private pure returns (bytes32) {\r\n        return sha256(abi.encodePacked(secret));\r\n    }\r\n\r\n    function _getSwapType(\r\n        bytes32 secretHash\r\n    ) private view returns (SwapType tp) {\r\n        if (_swaps[secretHash].asset == _ethAssetIdentificator) {\r\n            return SwapType.ETH;\r\n        } else {\r\n            return SwapType.Token;\r\n        }\r\n    }\r\n\r\n    // -----------------------------------------\r\n    // GETTERS\r\n    // -----------------------------------------\r\n\r\n    /**\r\n     *  @dev Get filled swaps order ids and amounts\r\n     *  @return uint256[] of order ids\r\n     *  @return uint256[] of amounts\r\n     */\r\n    function getUserFilledOrders(address user) external view returns (\r\n        uint256[] memory amounts,\r\n        uint256[] memory orderIds,\r\n        uint256[] memory initTimestamps\r\n    ) {\r\n        uint256 swapsLength = _initiators[user].index;\r\n        uint256 filledSwaps = _initiators[user].filledSwaps;\r\n\r\n        orderIds = new uint256[](filledSwaps);\r\n        amounts = new uint256[](filledSwaps);\r\n        initTimestamps = new uint256[](filledSwaps);\r\n\r\n        uint256 j = 0;\r\n        for (uint256 i = 0; i <= swapsLength; i++) {\r\n            Swap memory swap = _swaps[_initiators[user].swaps[i]];\r\n            if (swap.state == State.Filled) {\r\n                amounts[j] = swap.amount;\r\n                orderIds[j] = swap.orderId;\r\n                initTimestamps[j] = swap.initTimestamp;\r\n                j++;\r\n            }\r\n        }\r\n\r\n        return (\r\n        orderIds,\r\n        amounts,\r\n        initTimestamps\r\n        );\r\n    }\r\n\r\n    /**\r\n     *  @dev Get limits of a lifetime for swap in minutes\r\n     *  @return min lifetime\r\n     *  @return max lifetime\r\n     */\r\n    function getSwapLifetimeLimits() public view returns (uint256, uint256) {\r\n        return (\r\n        _swapTimeLimits.min,\r\n        _swapTimeLimits.max\r\n        );\r\n    }\r\n\r\n    /**\r\n     *  @dev Identification of the swap type with assets and value fields\r\n     *  @param secretHash the encoded secret which they discussed at offline (SHA256)\r\n     *  @return tp (type) of swap\r\n     */\r\n    function getSwapType(\r\n        bytes32 secretHash\r\n    ) public view returns (SwapType tp) {\r\n        return _getSwapType(secretHash);\r\n    }\r\n\r\n    /**\r\n     *  @dev Check the secret hash for existence, it can be used in UI for form validation\r\n     *  @param secretHash the encoded secret which they discussed at offline (SHA256)\r\n     *  @return state of this swap\r\n     */\r\n    function getSwapData(\r\n        bytes32 secretHash\r\n    ) external view returns (\r\n        uint256,\r\n        uint256,\r\n        bytes32,\r\n        bytes32,\r\n        address,\r\n        address,\r\n        address,\r\n        uint256,\r\n        State state\r\n    ) {\r\n        Swap memory swap = _swaps[secretHash];\r\n        return (\r\n        swap.initTimestamp,\r\n        swap.refundTimestamp,\r\n        swap.secretHash,\r\n        swap.secret,\r\n        swap.initiator,\r\n        swap.recipient,\r\n        swap.asset,\r\n        swap.amount,\r\n        swap.state\r\n        );\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"secretHash\",\"type\":\"bytes32\"}],\"name\":\"getSwapType\",\"outputs\":[{\"internalType\":\"enum CrossBlockchainSwap.SwapType\",\"name\":\"tp\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getDepositedOrderDetails\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"created\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withdrawn\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserFilledDeposits\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"orderIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"initTimestamps\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserFilledOrders\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"orderIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"initTimestamps\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSwapLifetimeLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"secretHash\",\"type\":\"bytes32\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserDepositsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"secretHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"refundTimestamp\",\"type\":\"uint256\"}],\"name\":\"initiate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMax\",\"type\":\"uint256\"}],\"name\":\"changeSwapLifetimeLimits\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"doesUserExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"secretHash\",\"type\":\"bytes32\"}],\"name\":\"getSwapData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum CrossBlockchainSwap.State\",\"name\":\"state\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"secretHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundTimestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Initiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"secretHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"secretHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundTime\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"refunder\",\"type\":\"address\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AssetDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AssetWithdrawal\",\"type\":\"event\"}]","ContractName":"CrossBlockchainSwap","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://6a5839064aff3466713f36ade77b8f9f4d7906cb442ac033b476f1ef9e135888"}]}