{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n        return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Erc20Token {\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n }\r\n\r\n\r\ncontract Base  {\r\n    using SafeMath for uint;\r\n    uint64 public currentEventId = 1;\r\n    function getEventId() internal returns(uint64 _result) {\r\n        _result = currentEventId;\r\n        currentEventId ++;\r\n    }\r\n\r\n    mapping (address => mapping (address => uint)) public tokenUserAmountOf;      //mapping of token addresses to mapping of account balances (token=0 means Ether)\r\n    event OnDeposit(address indexed _token, address indexed _user, uint _amount, uint _balance, uint64 _eventId);\r\n    event OnWithdraw(address indexed _token, address indexed _user, uint _amount, uint _balance, uint64 _eventId);\r\n\r\n    function deposit() payable external {\r\n        _deposit();\r\n    }\r\n\r\n    function _deposit() internal {\r\n        tokenUserAmountOf[address(0x0)][msg.sender] = tokenUserAmountOf[address(0x0)][msg.sender].add(msg.value);\r\n        emit OnDeposit(address(0x0), msg.sender, msg.value, tokenUserAmountOf[address(0x0)][msg.sender], getEventId());\r\n    }\r\n\r\n    function withdraw(uint _amount) external {\r\n        require(tokenUserAmountOf[address(0x0)][msg.sender] >= _amount);\r\n        tokenUserAmountOf[address(0x0)][msg.sender] = tokenUserAmountOf[address(0x0)][msg.sender].sub(_amount);\r\n        msg.sender.transfer(_amount);\r\n        emit OnWithdraw(address(0x0), msg.sender, _amount, tokenUserAmountOf[address(0x0)][msg.sender], getEventId());\r\n    }\r\n\r\n    function depositToken(address _token, uint _amount) external {\r\n        //call Token(address).approve(this, amount).\r\n        require(_token != address(0x0));\r\n        // require(Erc20Token(_token).transferFrom(msg.sender, address(this), _amount));\r\n        Erc20Token(_token).transferFrom(msg.sender, address(this), _amount);\r\n        tokenUserAmountOf[_token][msg.sender] = tokenUserAmountOf[_token][msg.sender].add(_amount);\r\n        emit OnDeposit(_token, msg.sender, _amount, tokenUserAmountOf[_token][msg.sender], getEventId());\r\n    }\r\n       \r\n    function testDepositToken(address _token, address _user, uint _amount) external view returns (bool _result) {\r\n        require(_token != address(0x0));\r\n        require(_user != address(0x0));\r\n        require(_amount > 0);\r\n        _result = Erc20Token(_token).allowance(_user, address(this)) >= _amount;\r\n    }\r\n\r\n    function testAllowance(address _token, address _user) external view returns (uint _result) {\r\n        _result = Erc20Token(_token).allowance(_user, address(this));\r\n    }\r\n    \r\n    function withdrawToken(address _token, uint _amount) external {\r\n        require(_token != address(0x0));\r\n        require (tokenUserAmountOf[_token][msg.sender] >= _amount);\r\n        tokenUserAmountOf[_token][msg.sender] = tokenUserAmountOf[_token][msg.sender].sub(_amount);\r\n        //require(Erc20Token(_token).transfer(msg.sender, _amount));\r\n        Erc20Token(_token).transfer(msg.sender, _amount);\r\n        emit OnWithdraw(_token, msg.sender, _amount, tokenUserAmountOf[_token][msg.sender], getEventId());\r\n    }\r\n}\r\n\r\n//质押贷款\r\ncontract Sigma is Base {    \r\n\r\n    mapping (address => mapping (bytes32 => bool)) public orders;               //User=>Hash(OrderId)=>Bool\r\n    mapping (address => mapping (bytes32 => uint)) public orderFills;           //User=>Hash(OrderId)=>Uint(_t1Amount2) ，记录卖出了多少，取消的时候是否质押物\r\n    mapping (address => mapping (bytes32 => uint)) public claimsOf;             //User=>Hash(OrderId)=>Uint(_t1Amount2) ，债权列表，记录谁拥有多少；暂时不提供转让功能，毕竟都是短期投资\r\n    mapping (address => mapping (bytes32 => uint)) public userOrderT2AmountOf;  //User=>Hash(OrderId)=>Uint(_t2Amount) ， 债权列表，记录谁拥有多少；暂时不提供转让功能，毕竟都是短期投资\r\n\r\n    event OnBorrow    (address _t1, uint _t1Amount1, uint _t1Amount2, address _t2, uint _t2Amount, uint _loanMaxTime, uint _paymentTime, string _clientNonce, address _borrower, uint64 _eventId);\r\n    event OnBuyClaim  (uint _t1OkAmount1, uint _t1OkAmount2, uint _t2OkAmount, address _buyer, address _borrower, bytes32 _sellHash, string _clientNonce, uint64 _eventId);\r\n    event OnCancel    (address _borrower, bytes32 _sellHash, string _clientNonce, uint64 _eventId);\r\n    event OnGetPayment(uint _t1OkAmount2, uint _t2OkAmount, address _buyer, address _borrower, bytes32 _sellHash, string _clientNonce, uint64 _eventId);\r\n\r\n    function balanceOf(address token, address user) view external returns (uint _result) {\r\n        _result = tokenUserAmountOf[token][user];\r\n    }\r\n    \r\n    function getSellHash(address _t1, uint _t1Amount1, uint _t1Amount2, address _t2, uint _t2Amount, uint _loanMaxTime, uint _paymentTime, string memory _clientNonce,\r\n        address _borrower) public view returns (bytes32 _result)  \r\n    {\r\n        _result =  keccak256(this, _borrower, _t1, _t1Amount1, _t1Amount2, _t2, _t2Amount,  _loanMaxTime, _paymentTime, _clientNonce);\r\n    }\r\n   \r\n    function borrow(address _t1, uint _t1Amount1, uint _t1Amount2, address _t2, uint _t2Amount, uint _loanMaxTime, uint _paymentTime, string   _clientNonce) \r\n        external \r\n    {\r\n        require(_t1Amount1 > 0 && _t1Amount2 > 0 && _t2Amount > 0);\r\n        require(_t1Amount1 < _t1Amount2);\r\n        require(_t1 != _t2);\r\n        require(bytes(_clientNonce).length <= 32);\r\n        require(_loanMaxTime > now);\r\n        require(_paymentTime > _loanMaxTime);\r\n        bytes32 sellHash = getSellHash( _t1,  _t1Amount1,  _t1Amount2, _t2,  _t2Amount,  _loanMaxTime,  _paymentTime,  _clientNonce, msg.sender);\r\n        orders[msg.sender][sellHash] = true;\r\n        emit OnBorrow (_t1,  _t1Amount1,  _t1Amount2,  _t2,  _t2Amount,  _loanMaxTime,  _paymentTime,  _clientNonce, msg.sender, getEventId());\r\n    }\r\n\r\n    function buyClaim1(address _t1, uint _t1Amount1, uint _t1Amount2, address _t2, uint _t2Amount, uint _loanMaxTime, uint _paymentTime, string   _clientNonce, \r\n        address _borrower, uint _buyerT1Amount1) external \r\n    {\r\n        require(_loanMaxTime > now);\r\n        bytes32 sellHash =  getSellHash( _t1,  _t1Amount1,  _t1Amount2, _t2,  _t2Amount,  _loanMaxTime,  _paymentTime,  _clientNonce, _borrower);\r\n        //uint buyerT1Amount2 = _buyerT1Amount1 + _buyerT1Amount1 * (_paymentTime - now) * (_t1Amount2 - _t1Amount1) / _t1Amount1 / (_paymentTime - _loanMaxTime);\r\n        uint buyerT1Amount2 = getT1A2(_t1Amount1, _t1Amount2, _loanMaxTime, _paymentTime, _buyerT1Amount1);\r\n        require(orders[_borrower][sellHash] && now <= _loanMaxTime && orderFills[_borrower][sellHash].add(buyerT1Amount2) <= _t1Amount2);\r\n        \r\n        uint _t2OkAmount = _t2Amount * buyerT1Amount2 / _t1Amount2;\r\n        tradeBalance(sellHash, _t1, _buyerT1Amount1, buyerT1Amount2, _t2, _t2OkAmount,  _borrower);\r\n        orderFills[_borrower][sellHash] = orderFills[_borrower][sellHash].add(buyerT1Amount2);\r\n        emit OnBuyClaim (_buyerT1Amount1, buyerT1Amount2, _t2OkAmount, msg.sender, _borrower, sellHash, _clientNonce, getEventId());\r\n    }\r\n\r\n    function buyClaim2(address _t1, uint _t1Amount1, uint _t1Amount2, address _t2, uint _t2Amount, uint[] memory _Time, string memory _clientNonce, \r\n        address _borrower, uint _buyerT1Amount1, uint8 v, bytes32[] memory rs) public \r\n    {\r\n        require(_Time[0] > now);\r\n        bytes32 sellHash =  getSellHash( _t1,  _t1Amount1,  _t1Amount2, _t2,  _t2Amount,  _Time[0],  _Time[1],  _clientNonce, _borrower);\r\n        require(ecrecover(sellHash,v,rs[0],rs[1]) == _borrower);\r\n        uint buyerT1Amount2 = getT1A2(_t1Amount1, _t1Amount2, _Time[0], _Time[1], _buyerT1Amount1);\r\n        require(orderFills[_borrower][sellHash].add(buyerT1Amount2) <= _t1Amount2);\r\n        uint _t2OkAmount = _t2Amount * buyerT1Amount2 / _t1Amount2;\r\n        tradeBalance(sellHash, _t1, _buyerT1Amount1, buyerT1Amount2, _t2, _t2OkAmount,  _borrower);\r\n        orderFills[_borrower][sellHash] = orderFills[_borrower][sellHash].add(buyerT1Amount2);\r\n        emit OnBuyClaim (_buyerT1Amount1, buyerT1Amount2, _t2OkAmount, msg.sender, _borrower, sellHash, _clientNonce, getEventId());\r\n    }\r\n    \r\n    function buyClaim3(address _t1, uint _t1Amount1, uint _t1Amount2, address _t2, uint _t2Amount, uint _loanMaxTime, uint _paymentTime, string memory  _clientNonce, \r\n        address _borrower, uint _buyerT1Amount1, bytes memory _sig) public \r\n    {\r\n        require(_loanMaxTime > now);\r\n        bytes32 sellHash =  getSellHash( _t1,  _t1Amount1,  _t1Amount2, _t2,  _t2Amount,  _loanMaxTime,  _paymentTime,  _clientNonce, _borrower);\r\n        require(getAddress(sellHash, _sig) == _borrower);\r\n\r\n        uint buyerT1Amount2 = getT1A2(_t1Amount1, _t1Amount2, _loanMaxTime, _paymentTime, _buyerT1Amount1);\r\n        require(orderFills[_borrower][sellHash].add(buyerT1Amount2) <= _t1Amount2);\r\n \r\n        uint _t2OkAmount = _t2Amount * buyerT1Amount2 / _t1Amount2;\r\n        tradeBalance(sellHash, _t1, _buyerT1Amount1, buyerT1Amount2, _t2, _t2OkAmount,  _borrower);\r\n        orderFills[_borrower][sellHash] = orderFills[_borrower][sellHash].add(buyerT1Amount2);\r\n        emit OnBuyClaim (_buyerT1Amount1, buyerT1Amount2, _t2OkAmount, msg.sender, _borrower, sellHash, _clientNonce, getEventId());\r\n    }\r\n\r\n\r\n    function getT1A2(uint _t1Amount1, uint _t1Amount2, uint _loanMaxTime, uint _paymentTime, uint _buyerT1Amount1) \r\n        public view returns (uint _result)  \r\n    {\r\n        _result = _buyerT1Amount1 + _buyerT1Amount1 * (_paymentTime - now) * (_t1Amount2 - _t1Amount1) / _t1Amount1 / (_paymentTime - _loanMaxTime);\r\n    }\r\n\r\n    function getT1A(uint _t1Amount1, uint _t1Amount2, uint _loanMaxTime, uint _paymentTime, uint _buyerT1Amount2) \r\n        public view returns (uint _result)  \r\n    {\r\n        require(_paymentTime > now);\r\n        uint bb = (_t1Amount2 - _t1Amount1) * _buyerT1Amount2 * (_paymentTime - now) / (_paymentTime - _loanMaxTime);\r\n        require(_t1Amount2 * _buyerT1Amount2 > bb);\r\n        _result = _t1Amount2 * _buyerT1Amount2 - bb;\r\n        _result = _result  / _t1Amount2;\r\n    }\r\n\r\n\r\n    function testBuyClaim(address _t1, uint _t1Amount1, uint _t1Amount2, address _t2, uint _t2Amount, uint loanMaxTime, uint _paymentTime, string   _clientNonce, \r\n        address _borrower)  external view returns(uint _buyerT1Amount1)  \r\n    {\r\n        bytes32 sellHash =  getSellHash( _t1,  _t1Amount1,  _t1Amount2, _t2,  _t2Amount,  loanMaxTime,  _paymentTime,  _clientNonce, _borrower);\r\n        uint buyerT1Amount2 = _t1Amount2 - orderFills[_borrower][sellHash];\r\n        _buyerT1Amount1 = buyerT1Amount2  * (_t1Amount1 * (_paymentTime - loanMaxTime)) /( _t1Amount1 * (_paymentTime - loanMaxTime) + (_paymentTime - now) * (_t1Amount2 - _t1Amount1));\r\n    }\r\n\r\n    function availableToken1Amount11(address _t1, uint _t1Amount1, uint _t1Amount2, address _t2, uint _t2Amount, uint _loanMaxTime, uint _paymentTime, string memory  _clientNonce, \r\n        address _borrower) view public returns(uint _result)  \r\n    {\r\n        bytes32 sellHash =  getSellHash( _t1,  _t1Amount1,  _t1Amount2, _t2,  _t2Amount,  _loanMaxTime,  _paymentTime,  _clientNonce, _borrower);\r\n        if(orders[_borrower][sellHash] && now <= _loanMaxTime){\r\n            uint a1 = tokenUserAmountOf[_t2][_borrower].mul(_t1Amount2).div(_t2Amount);\r\n            uint a = _t1Amount2.sub(orderFills[_borrower][sellHash]);\r\n            if (a > a1) { \r\n                a = a1;\r\n            }\r\n            _result = getT1A( _t1Amount1,  _t1Amount2,  _loanMaxTime,  _paymentTime, a) ;\r\n        }\r\n        else{\r\n            _result = 0;\r\n        }\r\n    }\r\n\r\n    function availableToken1Amount12(address _t1, uint _t1Amount1, uint _t1Amount2, address _t2, uint _t2Amount, uint[] memory _Time, string memory _clientNonce, \r\n        address _borrower, uint8 v, bytes32[] memory rs) view public returns(uint _result)  \r\n    {\r\n        bytes32 sellHash =  getSellHash( _t1,  _t1Amount1,  _t1Amount2, _t2,  _t2Amount,   _Time[0],   _Time[1],  _clientNonce, _borrower);\r\n        if(ecrecover(sellHash,v,rs[0],rs[1]) == _borrower && now <= _Time[0]){\r\n            uint a1 = tokenUserAmountOf[_t2][_borrower].mul(_t1Amount2);\r\n            a1 = a1.div(_t2Amount);\r\n            uint a = _t1Amount2.sub(orderFills[_borrower][sellHash]);\r\n            if (a > a1) { \r\n                a = a1;\r\n            }\r\n            _result = getT1A( _t1Amount1,  _t1Amount2,   _Time[0],   _Time[1], a) ;\r\n        }\r\n        else{\r\n            _result = 0;\r\n        }\r\n    }\r\n\r\n    function availableToken1Amount13(address _t1, uint _t1Amount1, uint _t1Amount2, address _t2, uint _t2Amount, uint[] memory _Time, string memory _clientNonce, \r\n        address _borrower, bytes memory _sig) view public returns(uint _result)  \r\n    {\r\n        bytes32 sellHash =  getSellHash( _t1,  _t1Amount1,  _t1Amount2, _t2,  _t2Amount,   _Time[0],   _Time[1],  _clientNonce, _borrower);\r\n        if(getAddress(sellHash, _sig) == _borrower && now <= _Time[0]){\r\n            uint a1 = tokenUserAmountOf[_t2][_borrower].mul(_t1Amount2);\r\n            a1 = a1.div(_t2Amount);\r\n            uint a = _t1Amount2.sub(orderFills[_borrower][sellHash]);\r\n            if (a > a1) { \r\n                a = a1;\r\n            }\r\n            _result = getT1A( _t1Amount1,  _t1Amount2,   _Time[0],   _Time[1], a) ;\r\n        }\r\n        else{\r\n            _result = 0;\r\n        }\r\n    }\r\n\r\n    function tradeBalance(bytes32 _sellHash, address _t1, uint _t1OkAmount1, uint _t1OkAmount2, address _t2, uint _t2OkAmount, address _borrower) private \r\n    {\r\n        require(_t1OkAmount1 > 0 && _t1OkAmount2 > 0 && _t2OkAmount > 0);\r\n        tokenUserAmountOf[_t2][_borrower] = tokenUserAmountOf[_t2][_borrower].sub(_t2OkAmount);     //质押。这个钱还在this上面，但没有记录到任何人账上了。\r\n\r\n        tokenUserAmountOf[_t1][msg.sender] = tokenUserAmountOf[_t1][msg.sender].sub(_t1OkAmount1);  //贷款支付\r\n        tokenUserAmountOf[_t1][_borrower]  = tokenUserAmountOf[_t1][_borrower].add(_t1OkAmount1);\r\n\r\n        claimsOf[msg.sender][_sellHash] = claimsOf[msg.sender][_sellHash] + _t1OkAmount2;           //记账，债权和质押品数量\r\n        userOrderT2AmountOf[msg.sender][_sellHash] =  userOrderT2AmountOf[msg.sender][_sellHash] + _t2OkAmount;\r\n    }\r\n   \r\n\r\n    function cancel(address _t1, uint _t1Amount1, uint _t1Amount2, address _t2, uint _t2Amount, uint loanMaxTime, uint _paymentTime, string    _clientNonce) external \r\n    {\r\n        bytes32 sellHash = getSellHash( _t1,  _t1Amount1,  _t1Amount2, _t2,  _t2Amount,  loanMaxTime,  _paymentTime,  _clientNonce, msg.sender);\r\n        require(orders[msg.sender][sellHash] && orderFills[msg.sender][sellHash] < _t1Amount2);\r\n        orderFills[msg.sender][sellHash] = _t1Amount2;\r\n        emit OnCancel(msg.sender, sellHash, _clientNonce, getEventId());\r\n    }\r\n\r\n    function getPaymentByBuyer(address _t1, uint _t1Amount1, uint _t1Amount2, address _t2, uint _t2Amount, uint _loanMaxTime, uint _paymentTime, string    _clientNonce,\r\n        address _borrower) external \r\n    {\r\n        require(_paymentTime <= now);       //只有到期才能还款\r\n\r\n        address[] memory _buyers = new address[](1);\r\n        _buyers[0] = address(msg.sender);\r\n\r\n        address[] memory _t1t2 = new address[](2);\r\n        _t1t2[0] = _t1;\r\n        _t1t2[1] = _t2;\r\n         \r\n        uint[] memory _t1A1t1A2t2A = new uint[](3);\r\n        _t1A1t1A2t2A[0] = _t1Amount1;\r\n        _t1A1t1A2t2A[1] = _t1Amount2;\r\n        _t1A1t1A2t2A[2] = _t2Amount;\r\n\r\n        uint[] memory _lTpT = new uint[](2);\r\n        _lTpT[0] = _loanMaxTime;\r\n        _lTpT[1] = _paymentTime;\r\n\r\n        require(_getPayment(_t1t2, _t1A1t1A2t2A, _lTpT, _clientNonce, _borrower, _buyers));\r\n    }\r\n\r\n      function getPaymentByBorrower(address _t1, uint _t1Amount1, uint _t1Amount2, address _t2, uint _t2Amount, uint _loanMaxTime, uint _paymentTime, string    _clientNonce,\r\n        address[]  _buyers) external \r\n    {\r\n        require(_loanMaxTime <= now);   //理论上任何时候都可以还款\r\n\r\n        address[] memory _t1t2 = new address[](2);\r\n        _t1t2[0] = _t1;\r\n        _t1t2[1] = _t2;\r\n         \r\n        uint[] memory _t1A1t1A2t2A = new uint[](3);\r\n        _t1A1t1A2t2A[0] = _t1Amount1;\r\n        _t1A1t1A2t2A[1] = _t1Amount2;\r\n        _t1A1t1A2t2A[2] = _t2Amount;\r\n\r\n        uint[] memory _lTpT = new uint[](2);\r\n        _lTpT[0] = _loanMaxTime;\r\n        _lTpT[1] = _paymentTime;\r\n\r\n        require(_getPayment(_t1t2, _t1A1t1A2t2A, _lTpT, _clientNonce, msg.sender, _buyers));\r\n    }\r\n\r\n    function getPayment(address _t1, uint _t1Amount1, uint _t1Amount2, address _t2, uint _t2Amount, uint _loanMaxTime, uint _paymentTime, string    _clientNonce,\r\n        address _borrower, address[]  _buyers) external \r\n    {\r\n        require(_paymentTime <= now);       //只有到期才能还款\r\n\r\n        address[] memory _t1t2 = new address[](2);\r\n        _t1t2[0] = _t1;\r\n        _t1t2[1] = _t2;\r\n         \r\n        uint[] memory _t1A1t1A2t2A = new uint[](3);\r\n        _t1A1t1A2t2A[0] = _t1Amount1;\r\n        _t1A1t1A2t2A[1] = _t1Amount2;\r\n        _t1A1t1A2t2A[2] = _t2Amount;\r\n\r\n        uint[] memory _lTpT = new uint[](2);\r\n        _lTpT[0] = _loanMaxTime;\r\n        _lTpT[1] = _paymentTime;\r\n\r\n        require(_getPayment(_t1t2, _t1A1t1A2t2A, _lTpT, _clientNonce, _borrower, _buyers));\r\n    }\r\n\r\n\r\n    function _getPayment(address[] memory _t1t2, uint[] memory _t1A1t1A2t2A, uint[] memory _lTpT, string  memory  _clientNonce,\r\n        address _borrower, address[] memory _buyers) private returns (bool _result)\r\n    // function _getPayment(address _t1, uint _t1Amount1, uint _t1Amount2, address _t2, uint _t2Amount, uint _loanMaxTime, uint _paymentTime, string  memory  _clientNonce,\r\n    //     address _borrower, address[] memory _buyers) private returns (bool _result)\r\n    {\r\n        require(_buyers.length >= 1);\r\n        bytes32 sellHash = getSellHash(_t1t2[0],  _t1A1t1A2t2A[0],  _t1A1t1A2t2A[1], _t1t2[1],  _t1A1t1A2t2A[2],  _lTpT[0],  _lTpT[1],     _clientNonce, _borrower);\r\n                //function getSellHash( _t1,     _t1Amount1,       _t1Amount2,       _t2,      _t2Amount,       _loanMaxTime,_paymentTime, _clientNonce, _borrower)\r\n                        // emit OnBorrow (_t1t2[0],  _t1A1t1A2t2A[0],  _t1A1t1A2t2A[1], _t1t2[1],  _t1A1t1A2t2A[2],  _lTpT[0],  _lTpT[1],     _clientNonce, _borrower, getEventId());\r\n\r\n        for(uint i = 0; i < _buyers.length; i++){\r\n            if (orders[_borrower][sellHash] &&  _lTpT[0] < now){\r\n                uint T1A =   claimsOf[_buyers[i]][sellHash];\r\n                uint T2A =   userOrderT2AmountOf[_buyers[i]][sellHash];\r\n                require(T1A > 0 && T2A > 0);\r\n\r\n                if (tokenUserAmountOf[_t1t2[0]][_borrower] >= T1A){\r\n                    tokenUserAmountOf[_t1t2[0]][_borrower] = tokenUserAmountOf[_t1t2[0]][_borrower] - T1A;    //支付\r\n                    tokenUserAmountOf[_t1t2[0]][_buyers[i]] = tokenUserAmountOf[_t1t2[0]][_buyers[i]] + T1A;\r\n                    claimsOf[_buyers[i]][sellHash] = 0;\r\n                    userOrderT2AmountOf[_buyers[i]][sellHash] = 0;\r\n                    tokenUserAmountOf[_t1t2[1]][_borrower] = tokenUserAmountOf[_t1t2[1]][_borrower] + T2A;    //解除抵押\r\n                    emit OnGetPayment(T1A, 0, _buyers[i], _borrower, sellHash, _clientNonce, getEventId());\r\n                    _result = true;\r\n                    continue;\r\n                }\r\n                else{\r\n                    //tokenUserAmountOf[_t2][_borrower] = tokenUserAmountOf[_t2][_borrower] - T2A;\r\n                    tokenUserAmountOf[_t1t2[1]][_buyers[i]] = tokenUserAmountOf[_t1t2[1]][_buyers[i]] + T2A;  //行使抵押权\r\n                    claimsOf[_buyers[i]][sellHash] = 0;\r\n                    userOrderT2AmountOf[_buyers[i]][sellHash] = 0;\r\n                    emit OnGetPayment(0, T2A, _buyers[i], _borrower, sellHash, _clientNonce, getEventId());\r\n                    _result = true;\r\n                    continue;\r\n                }\r\n            }\r\n        }\r\n\r\n        if(!_result){\r\n            emit OnGetPayment(0, 0, msg.sender, _borrower, sellHash, _clientNonce, getEventId());\r\n        }\r\n        _result = true;\r\n    }\r\n\r\n    \r\n    function getAddress(bytes32 h, bytes memory sig) public pure returns (address _address) \r\n    {\r\n        bytes32 _r;\r\n        bytes32 _s;\r\n        uint8 _v;\r\n        if (sig.length == 65) {\r\n            assembly {\r\n                _r := mload(add(sig, 32))\r\n                _s := mload(add(sig, 64))\r\n                _v := and(mload(add(sig, 65)), 255)\r\n            }\r\n            if (_v < 27) {\r\n                _v += 27;\r\n            }\r\n            if (_v == 27 || _v == 28) {\r\n                _address = ecrecover(h, _v, _r, _s);\r\n            }\r\n        }\r\n    }\r\n\r\n    function() payable external {\r\n        // require(1 == 2); //selfdestruct(_to);\r\n        if(msg.value > 0){\r\n            _deposit();\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"currentEventId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_t1\",\"type\":\"address\"},{\"name\":\"_t1Amount1\",\"type\":\"uint256\"},{\"name\":\"_t1Amount2\",\"type\":\"uint256\"},{\"name\":\"_t2\",\"type\":\"address\"},{\"name\":\"_t2Amount\",\"type\":\"uint256\"},{\"name\":\"_loanMaxTime\",\"type\":\"uint256\"},{\"name\":\"_paymentTime\",\"type\":\"uint256\"},{\"name\":\"_clientNonce\",\"type\":\"string\"},{\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"availableToken1Amount11\",\"outputs\":[{\"name\":\"_result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orderFills\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_t1\",\"type\":\"address\"},{\"name\":\"_t1Amount1\",\"type\":\"uint256\"},{\"name\":\"_t1Amount2\",\"type\":\"uint256\"},{\"name\":\"_t2\",\"type\":\"address\"},{\"name\":\"_t2Amount\",\"type\":\"uint256\"},{\"name\":\"loanMaxTime\",\"type\":\"uint256\"},{\"name\":\"_paymentTime\",\"type\":\"uint256\"},{\"name\":\"_clientNonce\",\"type\":\"string\"}],\"name\":\"cancel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"claimsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_t1\",\"type\":\"address\"},{\"name\":\"_t1Amount1\",\"type\":\"uint256\"},{\"name\":\"_t1Amount2\",\"type\":\"uint256\"},{\"name\":\"_t2\",\"type\":\"address\"},{\"name\":\"_t2Amount\",\"type\":\"uint256\"},{\"name\":\"_loanMaxTime\",\"type\":\"uint256\"},{\"name\":\"_paymentTime\",\"type\":\"uint256\"},{\"name\":\"_clientNonce\",\"type\":\"string\"},{\"name\":\"_buyers\",\"type\":\"address[]\"}],\"name\":\"getPaymentByBorrower\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_t1\",\"type\":\"address\"},{\"name\":\"_t1Amount1\",\"type\":\"uint256\"},{\"name\":\"_t1Amount2\",\"type\":\"uint256\"},{\"name\":\"_t2\",\"type\":\"address\"},{\"name\":\"_t2Amount\",\"type\":\"uint256\"},{\"name\":\"_loanMaxTime\",\"type\":\"uint256\"},{\"name\":\"_paymentTime\",\"type\":\"uint256\"},{\"name\":\"_clientNonce\",\"type\":\"string\"}],\"name\":\"borrow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_t1\",\"type\":\"address\"},{\"name\":\"_t1Amount1\",\"type\":\"uint256\"},{\"name\":\"_t1Amount2\",\"type\":\"uint256\"},{\"name\":\"_t2\",\"type\":\"address\"},{\"name\":\"_t2Amount\",\"type\":\"uint256\"},{\"name\":\"_loanMaxTime\",\"type\":\"uint256\"},{\"name\":\"_paymentTime\",\"type\":\"uint256\"},{\"name\":\"_clientNonce\",\"type\":\"string\"},{\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getSellHash\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_t1Amount1\",\"type\":\"uint256\"},{\"name\":\"_t1Amount2\",\"type\":\"uint256\"},{\"name\":\"_loanMaxTime\",\"type\":\"uint256\"},{\"name\":\"_paymentTime\",\"type\":\"uint256\"},{\"name\":\"_buyerT1Amount2\",\"type\":\"uint256\"}],\"name\":\"getT1A\",\"outputs\":[{\"name\":\"_result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_t1\",\"type\":\"address\"},{\"name\":\"_t1Amount1\",\"type\":\"uint256\"},{\"name\":\"_t1Amount2\",\"type\":\"uint256\"},{\"name\":\"_t2\",\"type\":\"address\"},{\"name\":\"_t2Amount\",\"type\":\"uint256\"},{\"name\":\"_loanMaxTime\",\"type\":\"uint256\"},{\"name\":\"_paymentTime\",\"type\":\"uint256\"},{\"name\":\"_clientNonce\",\"type\":\"string\"},{\"name\":\"_borrower\",\"type\":\"address\"},{\"name\":\"_buyers\",\"type\":\"address[]\"}],\"name\":\"getPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_t1\",\"type\":\"address\"},{\"name\":\"_t1Amount1\",\"type\":\"uint256\"},{\"name\":\"_t1Amount2\",\"type\":\"uint256\"},{\"name\":\"_t2\",\"type\":\"address\"},{\"name\":\"_t2Amount\",\"type\":\"uint256\"},{\"name\":\"_Time\",\"type\":\"uint256[]\"},{\"name\":\"_clientNonce\",\"type\":\"string\"},{\"name\":\"_borrower\",\"type\":\"address\"},{\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"availableToken1Amount13\",\"outputs\":[{\"name\":\"_result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_t1\",\"type\":\"address\"},{\"name\":\"_t1Amount1\",\"type\":\"uint256\"},{\"name\":\"_t1Amount2\",\"type\":\"uint256\"},{\"name\":\"_t2\",\"type\":\"address\"},{\"name\":\"_t2Amount\",\"type\":\"uint256\"},{\"name\":\"_loanMaxTime\",\"type\":\"uint256\"},{\"name\":\"_paymentTime\",\"type\":\"uint256\"},{\"name\":\"_clientNonce\",\"type\":\"string\"},{\"name\":\"_borrower\",\"type\":\"address\"},{\"name\":\"_buyerT1Amount1\",\"type\":\"uint256\"}],\"name\":\"buyClaim1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_t1\",\"type\":\"address\"},{\"name\":\"_t1Amount1\",\"type\":\"uint256\"},{\"name\":\"_t1Amount2\",\"type\":\"uint256\"},{\"name\":\"_t2\",\"type\":\"address\"},{\"name\":\"_t2Amount\",\"type\":\"uint256\"},{\"name\":\"_loanMaxTime\",\"type\":\"uint256\"},{\"name\":\"_paymentTime\",\"type\":\"uint256\"},{\"name\":\"_clientNonce\",\"type\":\"string\"},{\"name\":\"_borrower\",\"type\":\"address\"},{\"name\":\"_buyerT1Amount1\",\"type\":\"uint256\"},{\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"buyClaim3\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"testAllowance\",\"outputs\":[{\"name\":\"_result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenUserAmountOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_t1\",\"type\":\"address\"},{\"name\":\"_t1Amount1\",\"type\":\"uint256\"},{\"name\":\"_t1Amount2\",\"type\":\"uint256\"},{\"name\":\"_t2\",\"type\":\"address\"},{\"name\":\"_t2Amount\",\"type\":\"uint256\"},{\"name\":\"_Time\",\"type\":\"uint256[]\"},{\"name\":\"_clientNonce\",\"type\":\"string\"},{\"name\":\"_borrower\",\"type\":\"address\"},{\"name\":\"_buyerT1Amount1\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"rs\",\"type\":\"bytes32[]\"}],\"name\":\"buyClaim2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_t1Amount1\",\"type\":\"uint256\"},{\"name\":\"_t1Amount2\",\"type\":\"uint256\"},{\"name\":\"_loanMaxTime\",\"type\":\"uint256\"},{\"name\":\"_paymentTime\",\"type\":\"uint256\"},{\"name\":\"_buyerT1Amount1\",\"type\":\"uint256\"}],\"name\":\"getT1A2\",\"outputs\":[{\"name\":\"_result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orders\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_t1\",\"type\":\"address\"},{\"name\":\"_t1Amount1\",\"type\":\"uint256\"},{\"name\":\"_t1Amount2\",\"type\":\"uint256\"},{\"name\":\"_t2\",\"type\":\"address\"},{\"name\":\"_t2Amount\",\"type\":\"uint256\"},{\"name\":\"_loanMaxTime\",\"type\":\"uint256\"},{\"name\":\"_paymentTime\",\"type\":\"uint256\"},{\"name\":\"_clientNonce\",\"type\":\"string\"},{\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getPaymentByBuyer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"h\",\"type\":\"bytes32\"},{\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"getAddress\",\"outputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_t1\",\"type\":\"address\"},{\"name\":\"_t1Amount1\",\"type\":\"uint256\"},{\"name\":\"_t1Amount2\",\"type\":\"uint256\"},{\"name\":\"_t2\",\"type\":\"address\"},{\"name\":\"_t2Amount\",\"type\":\"uint256\"},{\"name\":\"_Time\",\"type\":\"uint256[]\"},{\"name\":\"_clientNonce\",\"type\":\"string\"},{\"name\":\"_borrower\",\"type\":\"address\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"rs\",\"type\":\"bytes32[]\"}],\"name\":\"availableToken1Amount12\",\"outputs\":[{\"name\":\"_result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"userOrderT2AmountOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_t1\",\"type\":\"address\"},{\"name\":\"_t1Amount1\",\"type\":\"uint256\"},{\"name\":\"_t1Amount2\",\"type\":\"uint256\"},{\"name\":\"_t2\",\"type\":\"address\"},{\"name\":\"_t2Amount\",\"type\":\"uint256\"},{\"name\":\"loanMaxTime\",\"type\":\"uint256\"},{\"name\":\"_paymentTime\",\"type\":\"uint256\"},{\"name\":\"_clientNonce\",\"type\":\"string\"},{\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"testBuyClaim\",\"outputs\":[{\"name\":\"_buyerT1Amount1\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"testDepositToken\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"_result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_t1\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_t1Amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_t1Amount2\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_t2\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_t2Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_loanMaxTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_paymentTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_clientNonce\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_eventId\",\"type\":\"uint64\"}],\"name\":\"OnBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_t1OkAmount1\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_t1OkAmount2\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_t2OkAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_sellHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_clientNonce\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_eventId\",\"type\":\"uint64\"}],\"name\":\"OnBuyClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_sellHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_clientNonce\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_eventId\",\"type\":\"uint64\"}],\"name\":\"OnCancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_t1OkAmount2\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_t2OkAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_sellHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_clientNonce\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_eventId\",\"type\":\"uint64\"}],\"name\":\"OnGetPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventId\",\"type\":\"uint64\"}],\"name\":\"OnDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventId\",\"type\":\"uint64\"}],\"name\":\"OnWithdraw\",\"type\":\"event\"}]","ContractName":"Sigma","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3fbaca571c8fec1e4f0a5413a6b692ab1737fdd47e9ee64f7abfda145ac6adaf"}]}