{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.7;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal pure returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n  address public mainAddress;\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n    mainAddress = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, \"Only for owner\");\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address _owner) public onlyOwner {\r\n    owner = _owner;\r\n  }\r\n\r\n}\r\n\r\ncontract UNITY is Ownable {\r\n    \r\n    event Register(uint indexed _user, uint indexed _referrer, uint indexed _introducer, uint _time);\r\n    event Upgrade(uint indexed _user, uint _stage, uint _price, uint _time);\r\n    event Payment(uint indexed _user, uint indexed _referrer, uint indexed _introducer, uint _stage, uint _money, uint _time);\r\n    event PaymentUpline(uint indexed _user, uint indexed _upline, uint _stage, uint _money, uint _time);\r\n    event LostMoney(uint indexed _referrer, uint indexed _referral, uint _stage, uint _money, uint _time);\r\n\r\n    mapping (uint => uint) public STAGE_PRICE;\r\n    uint REFERRER_1_STAGE_LIMIT = 4;\r\n\r\n    struct UserStruct {\r\n        bool isExist;\r\n        address wallet;\r\n        uint referrerID;\r\n        uint introducerID;\r\n        uint stage;\r\n        uint introducedTotal;\r\n        uint[] introducers;\r\n        address[] referral;\r\n    }\r\n\r\n    mapping (uint => UserStruct) public users;\r\n    mapping (address => uint) public userList;\r\n\r\n    uint public currentUserID = 0;\r\n    uint public total = 0 ether;\r\n    uint public totalFees = 0 ether;\r\n    bool public paused = false;\r\n\r\n    constructor() public {\r\n\r\n        STAGE_PRICE[1] = 0.10 ether;\r\n        STAGE_PRICE[2] = 0.20 ether;\r\n        STAGE_PRICE[3] = 0.90 ether;\r\n        STAGE_PRICE[4] = 2.70 ether;\r\n        STAGE_PRICE[5] = 8.10 ether;\r\n        STAGE_PRICE[6] = 24.30 ether;\r\n        STAGE_PRICE[7] = 72.90 ether;\r\n        STAGE_PRICE[8] = 218.70 ether;\r\n\r\n        UserStruct memory userStruct;\r\n        currentUserID++;\r\n\r\n        userStruct = UserStruct({\r\n            isExist : true,\r\n            wallet : mainAddress,\r\n            referrerID : 0,\r\n            introducerID : 0,\r\n            introducedTotal: 0,\r\n            stage: 8,\r\n            introducers: new uint[](0),\r\n            referral: new address[](0)\r\n        });\r\n\r\n        users[currentUserID] = userStruct;\r\n        userList[mainAddress] = currentUserID;\r\n    }\r\n\r\n    function setMainAddress(address _mainAddress) public onlyOwner {\r\n\r\n        require(userList[_mainAddress] == 0, 'Address is already in use by another user');\r\n        \r\n        delete userList[mainAddress];\r\n        userList[_mainAddress] = uint(1);\r\n        mainAddress = _mainAddress;\r\n        users[1].wallet = _mainAddress;\r\n      }\r\n\r\n    function setPaused(bool _paused) public onlyOwner {\r\n        paused = _paused;\r\n      }\r\n\r\n    //https://etherconverter.online to Ether\r\n    function setStagePrice(uint _stage, uint _price) public onlyOwner {\r\n        STAGE_PRICE[_stage] = _price;\r\n      }\r\n\r\n    function setCurrentUserID(uint _currentUserID) public onlyOwner {\r\n        currentUserID = _currentUserID;\r\n      }\r\n\r\n    //Null address is 0x0000000000000000000000000000000000000000\r\n    function setUserData(uint _userID, address _wallet, uint _referrerID, uint _introducerID, address _referral1, address _referral2, address _referral3, address _referral4, uint _stage, uint _introducedTotal) public onlyOwner {\r\n\r\n        require(_userID > 0, 'Invalid user ID');\r\n        require(_stage > 0, 'Invalid stage');\r\n        require(_introducedTotal >= 0, 'Invalid introduced total');\r\n        require(_wallet != address(0), 'Invalid user wallet');\r\n\r\n        if(_userID > 1){\r\n        require(_referrerID > 0, 'Invalid referrer ID');\r\n        require(_introducerID > 0, 'Invalid introducer ID');\r\n        }\r\n\r\n        if(_userID > currentUserID){\r\n            currentUserID++;\r\n        }\r\n\r\n        if(users[_userID].isExist){\r\n            delete userList[users[_userID].wallet];\r\n            delete users[_userID];\r\n        }\r\n\r\n        UserStruct memory userStruct;\r\n\r\n        userStruct = UserStruct({\r\n            isExist : true,\r\n            wallet : _wallet,\r\n            referrerID : _referrerID,\r\n            introducerID : _introducerID,\r\n            stage : _stage,\r\n            introducedTotal: _introducedTotal,\r\n            introducers: new uint[](0),\r\n            referral : new address[](0)\r\n        });\r\n    \r\n        users[_userID] = userStruct;\r\n        userList[_wallet] = _userID;\r\n\r\n        users[_userID].introducers.push(_introducerID);\r\n        uint upline_2_id = users[_introducerID].introducerID;\r\n        uint upline_3_id = users[upline_2_id].introducerID;\r\n        uint upline_4_id = users[upline_3_id].introducerID;\r\n\r\n        if(upline_2_id >0){\r\n            users[_userID].introducers.push(upline_2_id);\r\n        }\r\n\r\n        if(upline_3_id >0){\r\n            users[_userID].introducers.push(upline_3_id);\r\n        }\r\n\r\n        if(upline_4_id >0){\r\n            users[_userID].introducers.push(upline_4_id);\r\n        }\r\n\r\n        if(_referral1 != address(0)){\r\n            users[_userID].referral.push(_referral1);\r\n        }\r\n           \r\n        if(_referral2 != address(0)){\r\n            users[_userID].referral.push(_referral2);\r\n        }\r\n\r\n        if(_referral3 != address(0)){\r\n            users[_userID].referral.push(_referral3);\r\n        }\r\n\r\n        if(_referral4 != address(0)){\r\n            users[_userID].referral.push(_referral4);\r\n        }\r\n\r\n    }\r\n\r\n    function () external payable {\r\n\r\n        require(!paused, 'Temporarily not accepting new users and Stage upgrades');\r\n\r\n        uint stage;\r\n\r\n        if(msg.value == STAGE_PRICE[1]){\r\n            stage = 1;\r\n        }else if(msg.value == STAGE_PRICE[2]){\r\n            stage = 2;\r\n        }else if(msg.value == STAGE_PRICE[3]){\r\n            stage = 3;\r\n        }else if(msg.value == STAGE_PRICE[4]){\r\n            stage = 4;\r\n        }else if(msg.value == STAGE_PRICE[5]){\r\n            stage = 5;\r\n        }else if(msg.value == STAGE_PRICE[6]){\r\n            stage = 6;\r\n        }else if(msg.value == STAGE_PRICE[7]){\r\n            stage = 7;\r\n        }else if(msg.value == STAGE_PRICE[8]){\r\n            stage = 8;\r\n        }else {\r\n            revert('You have sent incorrect payment amount');\r\n        }\r\n\r\n        if(stage == 1){\r\n\r\n            uint referrerID = 0;\r\n            address referrer = bytesToAddress(msg.data);\r\n\r\n            if (userList[referrer] > 0 && userList[referrer] <= currentUserID){\r\n                referrerID = userList[referrer];\r\n            } else {\r\n                revert('Incorrect referrer');\r\n            }\r\n\r\n            if(users[userList[msg.sender]].isExist){\r\n                revert('You are already signed up');\r\n            } else {\r\n                registerUser(referrerID);\r\n            }\r\n        } else if(users[userList[msg.sender]].isExist){\r\n            upgradeUser(stage);\r\n        } else {\r\n            revert(\"Please buy first stage\");\r\n        }\r\n    }\r\n\r\n    function registerUser(uint _referrerID) internal {\r\n\r\n        require(!users[userList[msg.sender]].isExist, 'You are already signed up');\r\n        require(_referrerID > 0 && _referrerID <= currentUserID, 'Incorrect referrer ID');\r\n        require(msg.value==STAGE_PRICE[1], 'You have sent incorrect payment amount');\r\n\r\n        uint _introducerID = _referrerID;\r\n\r\n        if(users[_referrerID].referral.length >= REFERRER_1_STAGE_LIMIT)\r\n        {\r\n            _referrerID = userList[findFreeReferrer(_referrerID)];\r\n        }\r\n\r\n        UserStruct memory userStruct;\r\n        currentUserID++;\r\n\r\n        userStruct = UserStruct({\r\n            isExist : true,\r\n            wallet : msg.sender,\r\n            referrerID : _referrerID,\r\n            introducerID : _introducerID,\r\n            stage: 1,\r\n            introducedTotal: 0,\r\n            introducers: new uint[](0),\r\n            referral: new address[](0)\r\n        });\r\n\r\n        users[currentUserID] = userStruct;\r\n        userList[msg.sender] = currentUserID;\r\n\r\n        users[currentUserID].introducers.push(_introducerID);\r\n        uint upline_2_id = users[_introducerID].introducerID;\r\n        uint upline_3_id = users[upline_2_id].introducerID;\r\n        uint upline_4_id = users[upline_3_id].introducerID;\r\n\r\n        if(upline_2_id >0){\r\n            users[currentUserID].introducers.push(upline_2_id);\r\n        }\r\n\r\n        if(upline_3_id >0){\r\n            users[currentUserID].introducers.push(upline_3_id);\r\n        }\r\n\r\n        if(upline_4_id >0){\r\n            users[currentUserID].introducers.push(upline_4_id);\r\n        }\r\n\r\n        users[_referrerID].introducedTotal += 1;\r\n        users[_referrerID].referral.push(msg.sender);\r\n\r\n        upgradePayment(currentUserID, 1);\r\n\r\n        emit Register(currentUserID, _referrerID, _introducerID, now);\r\n    }\r\n\r\n    function upgradeUser(uint _stage) internal {\r\n\r\n        require(users[userList[msg.sender]].isExist, 'You are not signed up yet');\r\n        require( _stage >= 2 && _stage <= 8, 'Incorrect stage');\r\n        require(msg.value==STAGE_PRICE[_stage], 'You have sent incorrect payment amount');\r\n        require(users[userList[msg.sender]].stage < _stage, 'You have already activated this stage');\r\n        \r\n        users[userList[msg.sender]].stage = _stage;\r\n\r\n        upgradePayment(userList[msg.sender], _stage);\r\n        \r\n        emit Upgrade(userList[msg.sender], _stage, STAGE_PRICE[_stage], now);\r\n    }\r\n\r\n    function upgradePayment(uint _user, uint _stage) internal {\r\n\r\n        uint referrer_id;\r\n        uint introducer_id;\r\n        uint money_sponsor = SafeMath.div(STAGE_PRICE[_stage],2);\r\n        uint money_introducer = SafeMath.div(money_sponsor,2);\r\n        uint money_upline = SafeMath.div(money_introducer,4);\r\n        uint money_left = STAGE_PRICE[_stage];\r\n\r\n        total = SafeMath.add(total,STAGE_PRICE[_stage]);\r\n\r\n        if(_stage == 1 || _stage == 5){\r\n            referrer_id = users[_user].referrerID;\r\n        } else if(_stage == 2 || _stage == 6){\r\n            referrer_id = users[users[_user].referrerID].referrerID;\r\n        } else if(_stage == 3 || _stage == 7){\r\n            referrer_id = users[users[users[_user].referrerID].referrerID].referrerID;\r\n        } else if(_stage == 4 || _stage == 8){\r\n            referrer_id = users[users[users[users[_user].referrerID].referrerID].referrerID].referrerID;\r\n        }\r\n\r\n        if(!users[referrer_id].isExist || users[referrer_id].stage < _stage){\r\n            referrer_id = 1;\r\n\r\n            emit LostMoney(referrer_id, userList[msg.sender], _stage, money_sponsor, now);\r\n        } else {\r\n            if(users[referrer_id].stage >= _stage){\r\n                bool result_1;\r\n                result_1 = address(uint160(users[referrer_id].wallet)).send(money_sponsor);\r\n                money_left = SafeMath.sub(money_left,money_sponsor);\r\n            } else {\r\n                emit LostMoney(referrer_id, userList[msg.sender], _stage, money_sponsor, now);\r\n            }\r\n        }\r\n\r\n        if(!users[users[_user].introducerID].isExist){\r\n            introducer_id = 1;\r\n        } else {\r\n            introducer_id = users[_user].introducerID;\r\n\r\n            bool result_2;\r\n            result_2 = address(uint160(users[introducer_id].wallet)).send(money_introducer);\r\n            money_left = SafeMath.sub(money_left,money_introducer);\r\n        \r\n            if(introducer_id > 0 && users[users[introducer_id].introducerID].isExist){\r\n\r\n                for (uint i=0; i<users[_user].introducers.length; i++) {\r\n\r\n                    if(users[users[_user].introducers[i]].isExist && users[users[_user].introducers[i]].stage >= _stage && users[users[_user].introducers[i]].introducedTotal >= 1){\r\n                        address(uint160(users[users[_user].introducers[i]].wallet)).transfer(money_upline);\r\n                        emit PaymentUpline(userList[msg.sender], users[_user].introducers[i], _stage, money_upline, now);\r\n                        money_left = SafeMath.sub(money_left,money_upline);\r\n                    } else {\r\n                        emit LostMoney(users[_user].introducers[i], userList[msg.sender], _stage, money_upline, now);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if(money_left > 0){\r\n            bool result_lost;\r\n            result_lost = address(uint160(mainAddress)).send(money_left);\r\n            totalFees = SafeMath.add(totalFees,money_left);\r\n        }\r\n\r\n        emit Payment(userList[msg.sender], referrer_id, introducer_id, _stage, STAGE_PRICE[_stage], now);\r\n\r\n    }\r\n\r\n    function findFreeReferrer(uint _user) public view returns(address) {\r\n\r\n        require(users[_user].isExist, 'User does not exist');\r\n\r\n        if(users[_user].referral.length < REFERRER_1_STAGE_LIMIT){\r\n            return users[_user].wallet;\r\n        }\r\n        \r\n        address[] memory referrals = new address[](1364);\r\n        referrals[0] = users[_user].referral[0]; \r\n        referrals[1] = users[_user].referral[1];\r\n        referrals[2] = users[_user].referral[2];\r\n        referrals[3] = users[_user].referral[3];\r\n\r\n        address freeReferrer;\r\n        bool noFreeReferrer = true;\r\n\r\n        for(uint i = 0; i < 1364; i++){\r\n            if(users[userList[referrals[i]]].referral.length == REFERRER_1_STAGE_LIMIT){\r\n                if(i < 340){\r\n                    referrals[(i+1)*3] = users[userList[referrals[i]]].referral[0];\r\n                    referrals[(i+1)*3+1] = users[userList[referrals[i]]].referral[1];\r\n                    referrals[(i+1)*3+2] = users[userList[referrals[i]]].referral[2];\r\n                    referrals[(i+1)*3+3] = users[userList[referrals[i]]].referral[3];\r\n                }\r\n            } else {\r\n                noFreeReferrer = false;\r\n                freeReferrer = referrals[i];\r\n                break;\r\n            }\r\n        }\r\n        require(!noFreeReferrer, 'Free referrer not found');\r\n        return freeReferrer;\r\n\r\n    }\r\n\r\n    function viewUserReferrals(uint _user) public view returns(address[] memory) {\r\n        return users[_user].referral;\r\n    }\r\n\r\n    function viewUserIntroducers(uint _user) public view returns(uint[] memory) {\r\n        return users[_user].introducers;\r\n    }\r\n\r\n    function viewUserStage(uint _user) public view returns(uint) {\r\n        return users[_user].stage;\r\n    }\r\n\r\n    function bytesToAddress(bytes memory bys) private pure returns (address addr) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"STAGE_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stage\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setStagePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"isExist\",\"type\":\"bool\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"name\":\"referrerID\",\"type\":\"uint256\"},{\"name\":\"introducerID\",\"type\":\"uint256\"},{\"name\":\"stage\",\"type\":\"uint256\"},{\"name\":\"introducedTotal\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"uint256\"}],\"name\":\"viewUserStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentUserID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"uint256\"}],\"name\":\"viewUserIntroducers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userID\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_referrerID\",\"type\":\"uint256\"},{\"name\":\"_introducerID\",\"type\":\"uint256\"},{\"name\":\"_referral1\",\"type\":\"address\"},{\"name\":\"_referral2\",\"type\":\"address\"},{\"name\":\"_referral3\",\"type\":\"address\"},{\"name\":\"_referral4\",\"type\":\"address\"},{\"name\":\"_stage\",\"type\":\"uint256\"},{\"name\":\"_introducedTotal\",\"type\":\"uint256\"}],\"name\":\"setUserData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_currentUserID\",\"type\":\"uint256\"}],\"name\":\"setCurrentUserID\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mainAddress\",\"type\":\"address\"}],\"name\":\"setMainAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"uint256\"}],\"name\":\"viewUserReferrals\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"uint256\"}],\"name\":\"findFreeReferrer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_referrer\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_introducer\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Register\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_stage\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_referrer\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_introducer\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_stage\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_money\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Payment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_upline\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_stage\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_money\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"PaymentUpline\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_referrer\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_referral\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_stage\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_money\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"LostMoney\",\"type\":\"event\"}]","ContractName":"UNITY","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2e3005a3639e3b3f6e22834b352fe397421760aa0c7be583dcc14576e0a30049"}]}