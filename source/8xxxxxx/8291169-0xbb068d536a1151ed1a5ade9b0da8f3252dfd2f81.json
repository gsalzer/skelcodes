{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.5;\t\t\t\t\t\t\t\r\n/*Math operations with safety checks */\r\ncontract SafeMath { \r\n  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;  \r\n    }\r\n  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\t\r\n    return a/b;  \r\n    }\r\n  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;  \r\n    }\r\n  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c>=a && c>=b);\r\n    return c;  \r\n    }  \r\n  function safePower(uint a, uint b) internal pure returns (uint256) {\r\n      uint256 c = a**b;\r\n      return c;  \r\n    }\r\n}\r\ncontract Token {\r\n  function totalSupply() public view returns (uint256 supply) {}\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {}\r\n  function transfer(address _to, uint256 _value) public returns (bool success) {}\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {}\r\n  function approve(address _spender, uint256 _value) public returns (bool success) {}\r\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {}\r\n  function burn(uint256 _value) public returns (bool success){}\r\n  function mintToken(address _target, uint256 _mintedAmount) public returns (bool success) {}\r\n  mapping (address => uint256) public newPrice;\r\n  address public issueContract;\r\n}\r\n\r\ncontract TokenUSDT {\r\n  function transferFrom(address _from, address _to, uint256 _value) public  {}\r\n  function transfer(address _to, uint256 _value) public  {}\r\n}\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; }\r\n\r\ncontract UNDTISSUE is SafeMath{\r\n    address payable public owner;\r\n    address public tokenAddress;\r\n    uint8   public decimals;\r\n    uint256 public totalSupply;\r\n    address public manager;/*Executive manager*/    \r\n    uint256 public tokenNumber;/*Number of assets*/    \r\n    uint256 public fee;/*redeem fee ratio*/\r\n    address public managerToken;    \r\n    uint16  public upAmountRate;/*The total amount of control coefficient, the standard is 100, this parameter is divided by 100 to get the actual upper limit of the total amount of assets issued*/\r\n    bool    public pauseIssue;\r\n    bool    public pauseRedeem;\r\n    uint256 public blockPerDay;\r\n    uint256 public issueDiv;\r\n    mapping (address => uint8) public tokenDecimals;    \r\n    mapping (address => bool) public isNPA;/*Whether to dispose of bad assets, directly replace non-performing assets of this kind*/    \r\n    mapping (uint => address) public tokenPool;/*Asset list*/  \r\n    mapping (address => uint256) public tokenSupply;/*Token asset stock*/    \r\n    mapping (address => uint256) public upAmount;/*The total amount of this token exchange*/ \r\n    mapping (address => bool) public isTransferFrom;/*Whether to dispose of bad assets, directly replace non-performing assets of this kind*/  \r\n    mapping (address => mapping (address => uint)) public tokens;//mapping of token addresses to mapping of account balances (token=0 means Ether)\r\n    mapping (uint256 => mapping (address => uint256)) public totalRedeemOne;\r\n    mapping (uint256 => mapping (address => uint256)) public totalIssue;\r\n    event Withdraw(address token, address user, uint amount, uint balance);\r\n    event SetManagerToken(address add);\r\n    event SetPauseIssue(bool pause);\r\n    event SetPauseRedeem(bool pause);\r\n    event SetNPA(address token,bool isNPA);\r\n    event SetAssetsUpperLimit(address token,uint256 value);\r\n    event SetManager(address add);\r\n    event ChangeOwner(address add);\r\n    event SetFee(uint256 value);\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    constructor (uint8 decimalUnits,address monetaryTokenAddress,address managerTokenAddress) public{    \r\n        owner = msg.sender;    \r\n        decimals = decimalUnits;\r\n        manager = msg.sender;\r\n        fee = (10 ** 16);\r\n        upAmountRate = 100;\r\n        tokenAddress = monetaryTokenAddress;\t\t\r\n        managerToken = managerTokenAddress;\t\t\t\r\n        blockPerDay  = 6000;\t\t\t\r\n        issueDiv = 10;\t\t\t\t\t\r\n    }\r\n\t\r\n\t/*Set ManagerToken*/\r\n    function setManagerToken(address _add)public  {        \r\n        require (msg.sender == owner) ; \r\n        managerToken = _add;\t\t\t\t\t\t\r\n        emit SetManagerToken(_add);\r\n    } \r\n    \r\n\t/*Set Pause Issue*/\r\n    function setPauseIssue(bool _pause)public     {   \r\n        require (msg.sender == manager) ; \r\n        pauseIssue = _pause; \r\n        emit SetPauseIssue(_pause);\r\n    }\t\t\t\t\t\t\r\n\t\r\n\t/*Set Pause Redeem*/\r\n    function setPauseRedeem(bool _pause)public     {   \r\n        require (msg.sender == manager) ; \r\n        pauseRedeem = _pause; \r\n        emit SetPauseRedeem(_pause);\r\n    }\t\t\t\t\t\t \r\n\r\n    /*Set Assets*/\r\n    function setAssets(address _token,uint256 _value,uint8 _tokenDecimals,bool _isTransferFrom)public returns (bool success) {\r\n        require (msg.sender == owner) ; \r\n        require (_token != address(0x0)) ;\r\n        require (_value > 0) ;        \r\n        if (upAmount[_token] == 0) {\t\t\t\r\n            tokenPool[tokenNumber] = _token ;\t\r\n            isNPA[_token] = false ;\t\t\t\t\r\n            tokenSupply[_token] = 0 ;\t\t\t\r\n            upAmount[_token] = _value ;\t\t\t\r\n            tokenDecimals[_token] = _tokenDecimals;\t\r\n            tokenNumber = safeAdd(tokenNumber,1) ;\t\t\r\n            isTransferFrom[_token] = _isTransferFrom;\t\t\r\n        }\r\n        else\r\n        {\r\n            upAmount[_token] = _value ;\r\n            tokenDecimals[_token] = _tokenDecimals;\r\n            isTransferFrom[_token] = _isTransferFrom;\r\n        }\r\n        return true; \r\n    }  \r\n    \r\n    /*Set as bad assets*/\r\n    function setNPA(address _token,bool _isNPA)public returns (bool success) {\r\n        require (msg.sender == manager) ; \r\n        require (_token != address(0x0)) ;        \r\n        isNPA[_token] = _isNPA ;   \r\n        emit SetNPA(_token,_isNPA);     \r\n        return true;\r\n    }   \r\n\r\n    /*Set an asset exchange upper limit*/\r\n    function setAssetsUpperLimit(address _token,uint256 _value)public returns (bool success) {\r\n        require (msg.sender == manager) ;\t\r\n        require (_token != address(0x0)) ;     \r\n        require (_value > 0) ;   \r\n        upAmount[_token] = _value ;  \r\n        emit SetAssetsUpperLimit(_token,_value);       \r\n        return true; \r\n    }    \r\n\r\n     /*Set an asset exchange upper limit upAmountRate*/\r\n    function setAssetsUpAmountRate(uint16 _value)public returns (bool success) {\r\n        require (msg.sender == manager) ; \r\n        require (_value > 0) ;   \r\n        upAmountRate = _value ;\r\n        return true;\r\n    }\r\n\r\n    /*Set the fee ratio*/\r\n    function setFee(uint256 _value)public returns (bool success) {\r\n        require (msg.sender == manager) ;\r\n        require (_value <= 10**18) ;\t\t \r\n        fee = _value ;\r\n        emit SetFee(_value);       \r\n        return true;\r\n    }\r\n   \r\n\t/*set Issue Div*/\r\n    function setIssueDiv(uint256 _value)public returns (bool success) {\r\n        require (msg.sender == manager) ;\r\n        require (_value >= 1) ;\r\n        issueDiv = _value ;\r\n        return true;\r\n    }\r\n\r\n    /*Set administrator*/\r\n    function setManager(address _add)public returns (bool success) {\r\n        require (msg.sender == owner) ;\r\n        require (_add != address(0x0)) ;\r\n        manager = _add ;\r\n        emit SetManager(_add); \r\n        return true;\r\n    }    \r\n\r\n\t/*Change Owner*/\r\n    function changeOwner(address payable _add)public returns (bool success) {\r\n        require (msg.sender == owner) ;\r\n        require (_add != address(0x0)) ;\r\n        owner = _add ;\r\n        emit ChangeOwner(_add); \r\n        return true; \r\n    } \r\n\r\n    //Get Assets Upper Limit\r\n     function getAssetsUpperLimit(address _add) public view returns (uint256 _amount) {\r\n        _amount = safeDiv(safeMul(upAmount[_add] , upAmountRate) , 100);\t\r\n        return _amount;\r\n    }    \r\n\r\n    /* can accept ether */\r\n    function() external payable  {}\r\n\r\n    // transfer Ether balance to owner\r\n    function withdrawEther(uint amount) public{\r\n      require(msg.sender == owner);\r\n      owner.transfer(amount); \r\n    }\r\n\r\n    //withdraw Token\r\n    function withdrawToken(address token, uint amount) public{\r\n        require (token != address(0x0));\r\n        require (tokens[token][msg.sender] >= amount);\r\n        tokens[token][msg.sender] = safeSub(tokens[token][msg.sender], amount);   \r\n        if(isTransferFrom[token]){\r\n                require (Token(token).transfer(msg.sender, amount));\r\n        }else{  \r\n                TokenUSDT(token).transfer(msg.sender, amount);                          \r\n        }\r\n        emit Withdraw(token, msg.sender, amount, tokens[token][msg.sender]);\r\n    }\r\n    \r\n    function balanceOf(address token, address user) public view returns (uint) {\r\n        return tokens[token][user];\r\n    }\r\n\r\n   /*issue new coin */\r\n  function issue(address _token, uint256 _amount) public returns (bool success) {\t\t\r\n        require (_token != address(0x0) && !pauseIssue) ;  \r\n        require (isNPA[_token] == false) ;\t\t\t\r\n        uint256 _mintedAmount = safeDiv(safeMul(_amount , safePower(10,decimals)) , safePower(10,tokenDecimals[_token])) ;\t\r\n        require (safeAdd(totalIssue[safeDiv(block.number , blockPerDay)][_token],_mintedAmount) <= safeDiv(safeDiv(safeMul(upAmount[_token] , upAmountRate) , 100),issueDiv)) ; \r\n        require (safeDiv(safeMul(upAmount[_token] , upAmountRate) , 100) >= safeAdd(tokenSupply[_token],_mintedAmount)) ; \r\n        require (_mintedAmount >= safePower(10,decimals));\t\r\n        if(isTransferFrom[_token]){\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n             require (Token(_token).transferFrom(msg.sender, address(this), _amount));\t\t\t\r\n        }else{\r\n            TokenUSDT(_token).transferFrom(msg.sender, address(this), _amount);\t\t\t\t\t\r\n        }\r\n        require(Token(tokenAddress).mintToken(msg.sender,_mintedAmount));\t\t\r\n        tokenSupply[_token] = safeAdd(tokenSupply[_token],_mintedAmount);\t\t\r\n        totalSupply = safeAdd(totalSupply,_mintedAmount);\t\t\t\t\t\t\r\n        totalIssue[safeDiv(block.number , blockPerDay)][_token] = safeAdd(totalIssue[safeDiv(block.number , blockPerDay)][_token],_mintedAmount);  \r\n        return true; \r\n    }\r\n\r\n    /*  the circulation of each asset */\r\n    function getTokenIssueAmount() public view returns (uint256[256] memory _amount) {\r\n        for (uint i = 0; i < tokenNumber && i < 256; i++) {\r\n            _amount[i] = tokenSupply[tokenPool[i]];\r\n        }\r\n        return  _amount;\r\n    }\r\n\r\n    /*  each asset address*/\r\n    function getTokenPoolAddress() public view returns (address[256] memory _token) {\r\n        for (uint i = 0; i < tokenNumber && i < 256; i++) {\r\n            _token[i] = tokenPool[i];\r\n        }\r\n        return  _token;\r\n    }\r\n\r\n    /*  each asset Upper limit*/\r\n    function getTokenUpAmount() public view returns (uint256[256] memory _amount) {\r\n        for (uint i = 0; i < tokenNumber && i < 256; i++) {\r\n            _amount[i] = upAmount[tokenPool[i]];\r\n        }\r\n        return  _amount;\r\n    }\r\n\r\n    /*  each asset decimals*/\r\n    function getTokenDecimals() public view returns (uint8[256] memory _decimals) {\r\n        for (uint i = 0; i < tokenNumber && i < 256; i++) {\r\n            _decimals[i] = tokenDecimals[tokenPool[i]];\r\n        }\r\n        return  _decimals;\r\n    }\r\n    \r\n    /*  each asset if is NPA*/\r\n    function getTokenIsNPA() public view returns (bool[256] memory _isNPA) {\r\n        for (uint i = 0; i < tokenNumber && i < 256; i++) {\r\n            _isNPA[i] = isNPA[tokenPool[i]];\r\n        }\r\n        return  _isNPA;\r\n    }\r\n    \r\n\t/* Get RedeemOne Fee*/\r\n    function getRedeemOneFee(address _token,uint256 _amount) public view returns (uint256 _Fee) {\r\n        _Fee =  safeAdd( safeDiv( safeMul(safeAdd(totalRedeemOne[safeDiv(block.number , blockPerDay)][_token] , _amount), 100) , tokenSupply[_token]),1);\r\n        if (safeSub(tokenSupply[_token],_amount) > safeDiv(safeDiv(safeMul(upAmount[_token] , upAmountRate) , 100),2)) { _Fee = 1; }\r\n        _Fee = safeMul(fee,_Fee);\r\n        uint256 _udaoPrice = Token(Token(managerToken).issueContract()).newPrice(tokenAddress);\t\r\n        return safeDiv(safeMul(_amount , _Fee) , _udaoPrice);\t\r\n    }\r\n    \r\n    /* redeem Assets */\t\r\n    function redeem(uint256 _amount) public returns (bool success) {\r\n    require (_amount >= safePower(10,decimals) && !pauseRedeem) ;  \r\n    if(fee > 0){\r\n        uint256 _udaoPrice = Token(Token(managerToken).issueContract()).newPrice(tokenAddress);\r\n        if(_udaoPrice > 0){\r\n            uint256 _amountFee =  safeDiv(safeMul(_amount , fee) , _udaoPrice);\t\r\n            require (Token(managerToken).transferFrom(msg.sender,address(this),_amountFee));\t\r\n            require (Token(managerToken).burn(_amountFee)); }\r\n        }\r\n        address _token;\r\n        uint _value = 0;\r\n        uint _npavalue = 0;\r\n        for (uint k = 0; k < tokenNumber; k++) {\t\t\r\n            _token = tokenPool[k];\r\n            if (isNPA[_token]) {                \r\n                _npavalue = safeAdd(_npavalue , tokenSupply[_token]);\t\t\r\n            }\r\n        }\r\n        for (uint i = 0; i < tokenNumber; i++) {\t\t\r\n            _token = tokenPool[i];\r\n            if (isNPA[_token]) {continue;}\r\n            _value = safeDiv(safeMul(_amount  , tokenSupply[_token])  , safeSub(totalSupply , _npavalue)) ;\t\r\n            if(_value > 0){\r\n                if(isTransferFrom[_token]){\t\r\n                      require (Token(_token).transfer(msg.sender, safeDiv(safeMul(_value , safePower(10,tokenDecimals[_token])) , safePower(10,decimals))));\r\n                }else{  \r\n                      TokenUSDT(_token).transfer(msg.sender, safeDiv(safeMul(_value , safePower(10,tokenDecimals[_token])) , safePower(10,decimals)));\r\n                }               \r\n                tokenSupply[_token] = safeSub(tokenSupply[_token],_value);  \r\n            }    \r\n        }\r\n        require (Token(tokenAddress).transferFrom(msg.sender,address(this),_amount));\t\r\n        require(Token(tokenAddress).burn(_amount)); \r\n        totalSupply = safeSub(totalSupply,_amount);\t\t\t\t\t\t\t\r\n        return true;  \r\n    }    \r\n\r\n    /* redeem the specified bad token assets*/\t\t\r\n    function redeemNPA(uint256 _amount,address _token,bool _isReceiveToken) public returns (bool success) {\t\r\n        uint _value = safeDiv(safeMul(_amount , safePower(10,tokenDecimals[_token])) , safePower(10,decimals)) ;\t\r\n        require (_amount > 0 && !pauseRedeem) ;  \r\n        require (isNPA[_token] == true) ;\r\n        require (_amount <= tokenSupply[_token]) ;  \r\n        require (Token(tokenAddress).transferFrom(msg.sender,address(this),_amount));\r\n        require(Token(tokenAddress).burn(_amount));    \r\n        if(_isReceiveToken == true) {\t\t\r\n            if(isTransferFrom[_token]){\r\n             require (Token(_token).transfer(msg.sender, _value));\r\n            }else{  \r\n                 TokenUSDT(_token).transfer(msg.sender, _value);                        \r\n            }            \r\n        }\r\n        else{ tokens[_token][msg.sender] = safeAdd(tokens[_token][msg.sender], _value);}    \r\n        tokenSupply[_token] = safeSub(tokenSupply[_token],_amount);\t\t\t\t\t\t\t\r\n        totalSupply = safeSub(totalSupply,_amount);\t\t\t\t\t\t\t\t\t\t\t\r\n        return true;  \r\n    }\r\n\r\n    /* redeem One Assets */\t\t\r\n    function redeemOne(uint256 _amount,address _token) public returns (bool success) {\r\n    require (_amount >= safePower(10,decimals) && !pauseRedeem) ; \r\n    require (isNPA[_token] == false) ;\t\t\t\t\t\t\t\t\r\n    totalRedeemOne[safeDiv(block.number , blockPerDay)][_token] = safeAdd(totalRedeemOne[safeDiv(block.number , blockPerDay)][_token],_amount);\t\t\r\n    if(fee > 0){\r\n        uint256 _udaoPrice = Token(Token(managerToken).issueContract()).newPrice(tokenAddress);\t\t\r\n        uint256 _redeemOneFee =safeAdd( safeDiv( safeMul(totalRedeemOne[safeDiv(block.number , blockPerDay)][_token] , 100) , tokenSupply[_token]),1);\t\t\r\n        if (safeSub(tokenSupply[_token],_amount) > safeDiv(safeDiv(safeMul(upAmount[_token] , upAmountRate) , 100),2)) { _redeemOneFee = 1; }\t\r\n        _redeemOneFee = safeMul(fee,_redeemOneFee);\t\t\r\n        if(_udaoPrice > 0){\t\t\t\t\t\t\t\t\t\r\n            uint256 _amountFee =  safeDiv(safeMul(_amount , _redeemOneFee) , _udaoPrice);\t\t\r\n            require (Token(managerToken).transferFrom(msg.sender,address(this),_amountFee));\r\n            require (Token(managerToken).burn(_amountFee)); }\r\n        }\r\n        uint _value = safeDiv(safeMul(_amount , safePower(10,tokenDecimals[_token])) , safePower(10,decimals)) ;\t\r\n        if(isTransferFrom[_token]){\r\n             require (Token(_token).transfer(msg.sender, _value));\r\n        }else{  \r\n             TokenUSDT(_token).transfer(msg.sender, _value);\r\n        }\r\n        tokenSupply[_token] = safeSub(tokenSupply[_token],_amount);     \r\n        require (Token(tokenAddress).transferFrom(msg.sender,address(this),_amount));\r\n        require(Token(tokenAddress).burn(_amount));\r\n        totalSupply = safeSub(totalSupply,_amount);\t\t\t\t\t\t\r\n        return true;  \r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"getAssetsUpperLimit\",\"outputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenIsNPA\",\"outputs\":[{\"name\":\"_isNPA\",\"type\":\"bool[256]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_isReceiveToken\",\"type\":\"bool\"}],\"name\":\"redeemNPA\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pauseIssue\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pause\",\"type\":\"bool\"}],\"name\":\"setPauseRedeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenDecimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint8[256]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setIssueDiv\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getRedeemOneFee\",\"outputs\":[{\"name\":\"_Fee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pauseRedeem\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"managerToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setAssetsUpperLimit\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"redeemOne\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_isNPA\",\"type\":\"bool\"}],\"name\":\"setNPA\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"upAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isNPA\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenUpAmount\",\"outputs\":[{\"name\":\"_amount\",\"type\":\"uint256[256]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenPoolAddress\",\"outputs\":[{\"name\":\"_token\",\"type\":\"address[256]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upAmountRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenIssueAmount\",\"outputs\":[{\"name\":\"_amount\",\"type\":\"uint256[256]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pause\",\"type\":\"bool\"}],\"name\":\"setPauseIssue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"setManagerToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issueDiv\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_tokenDecimals\",\"type\":\"uint8\"},{\"name\":\"_isTransferFrom\",\"type\":\"bool\"}],\"name\":\"setAssets\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalIssue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenPool\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint16\"}],\"name\":\"setAssetsUpAmountRate\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalRedeemOne\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blockPerDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTransferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"decimalUnits\",\"type\":\"uint8\"},{\"name\":\"monetaryTokenAddress\",\"type\":\"address\"},{\"name\":\"managerTokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"add\",\"type\":\"address\"}],\"name\":\"SetManagerToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"pause\",\"type\":\"bool\"}],\"name\":\"SetPauseIssue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"pause\",\"type\":\"bool\"}],\"name\":\"SetPauseRedeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isNPA\",\"type\":\"bool\"}],\"name\":\"SetNPA\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SetAssetsUpperLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"add\",\"type\":\"address\"}],\"name\":\"SetManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"add\",\"type\":\"address\"}],\"name\":\"ChangeOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SetFee\",\"type\":\"event\"}]","ContractName":"UNDTISSUE","CompilerVersion":"v0.5.5+commit.47a71e8f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000120000000000000000000000007c6c3b4e91923f080d6cc847a68d7330400a95d70000000000000000000000004a32e09c60af50f0a5869bf5c622f4e5d57c3b37","Library":"","LicenseType":"None","SwarmSource":"bzzr://5d33a0c01aec827e1f76fffaf32e99efc54c2236907f86e5810f145cbdcfe984"}]}