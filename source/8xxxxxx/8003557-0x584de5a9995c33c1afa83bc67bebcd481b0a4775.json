{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract ERC20 is IERC20 {\r\n  using SafeMath for uint256;\r\n\r\n  mapping (address => uint256) private _balances;\r\n\r\n  mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n  uint256 private _totalSupply;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param owner The address to query the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n    return _balances[owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param owner address The address which owns the funds.\r\n   * @param spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address owner,\r\n    address spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return _allowed[owner][spender];\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param to The address to transfer to.\r\n  * @param value The amount to be transferred.\r\n  */\r\n  function transfer(address to, uint256 value) public returns (bool) {\r\n    _transfer(msg.sender, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param spender The address which will spend the funds.\r\n   * @param value The amount of tokens to be spent.\r\n   */\r\n  function approve(address spender, uint256 value) public returns (bool) {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = value;\r\n    emit Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param from address The address which you want to send tokens from\r\n   * @param to address The address which you want to transfer to\r\n   * @param value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(value <= _allowed[from][msg.sender]);\r\n\r\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n    _transfer(from, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed_[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param spender The address which will spend the funds.\r\n   * @param addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseAllowance(\r\n    address spender,\r\n    uint256 addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = (\r\n      _allowed[msg.sender][spender].add(addedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed_[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param spender The address which will spend the funds.\r\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseAllowance(\r\n    address spender,\r\n    uint256 subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = (\r\n      _allowed[msg.sender][spender].sub(subtractedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified addresses\r\n  * @param from The address to transfer from.\r\n  * @param to The address to transfer to.\r\n  * @param value The amount to be transferred.\r\n  */\r\n  function _transfer(address from, address to, uint256 value) internal {\r\n    require(value <= _balances[from]);\r\n    require(to != address(0));\r\n\r\n    _balances[from] = _balances[from].sub(value);\r\n    _balances[to] = _balances[to].add(value);\r\n    emit Transfer(from, to, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that mints an amount of the token and assigns it to\r\n   * an account. This encapsulates the modification of balances such that the\r\n   * proper events are emitted.\r\n   * @param account The account that will receive the created tokens.\r\n   * @param value The amount that will be created.\r\n   */\r\n  function _mint(address account, uint256 value) internal {\r\n    require(account != 0);\r\n    _totalSupply = _totalSupply.add(value);\r\n    _balances[account] = _balances[account].add(value);\r\n    emit Transfer(address(0), account, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that burns an amount of the token of a given\r\n   * account.\r\n   * @param account The account whose tokens will be burnt.\r\n   * @param value The amount that will be burnt.\r\n   */\r\n  function _burn(address account, uint256 value) internal {\r\n    require(account != 0);\r\n    require(value <= _balances[account]);\r\n\r\n    _totalSupply = _totalSupply.sub(value);\r\n    _balances[account] = _balances[account].sub(value);\r\n    emit Transfer(account, address(0), value);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that burns an amount of the token of a given\r\n   * account, deducting from the sender's allowance for said account. Uses the\r\n   * internal burn function.\r\n   * @param account The account whose tokens will be burnt.\r\n   * @param value The amount that will be burnt.\r\n   */\r\n  function _burnFrom(address account, uint256 value) internal {\r\n    require(value <= _allowed[account][msg.sender]);\r\n\r\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\r\n    // this function needs to emit an event with the updated approval.\r\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\r\n      value);\r\n    _burn(account, value);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping (address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev give an account access to this role\r\n   */\r\n  function add(Role storage role, address account) internal {\r\n    require(account != address(0));\r\n    require(!has(role, account));\r\n\r\n    role.bearer[account] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev remove an account's access to this role\r\n   */\r\n  function remove(Role storage role, address account) internal {\r\n    require(account != address(0));\r\n    require(has(role, account));\r\n\r\n    role.bearer[account] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev check if an account has this role\r\n   * @return bool\r\n   */\r\n  function has(Role storage role, address account)\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    require(account != address(0));\r\n    return role.bearer[account];\r\n  }\r\n}\r\n\r\n\r\ncontract CapperRole {\r\n  using Roles for Roles.Role;\r\n\r\n  event CapperAdded(address indexed account);\r\n  event CapperRemoved(address indexed account);\r\n\r\n  Roles.Role private cappers;\r\n\r\n  constructor() internal {\r\n    _addCapper(msg.sender);\r\n  }\r\n\r\n  modifier onlyCapper() {\r\n    require(isCapper(msg.sender));\r\n    _;\r\n  }\r\n\r\n  function isCapper(address account) public view returns (bool) {\r\n    return cappers.has(account);\r\n  }\r\n\r\n  function addCapper(address account) public onlyCapper {\r\n    _addCapper(account);\r\n  }\r\n\r\n  function renounceCapper() public {\r\n    _removeCapper(msg.sender);\r\n  }\r\n\r\n  function _addCapper(address account) internal {\r\n    cappers.add(account);\r\n    emit CapperAdded(account);\r\n  }\r\n\r\n  function _removeCapper(address account) internal {\r\n    cappers.remove(account);\r\n    emit CapperRemoved(account);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Depot\r\n * @dev Minting can only be directed to Depot accounts.\r\n */\r\ncontract Depot is CapperRole {\r\n\r\n  mapping(address => bool) private _depotAddress;\r\n\r\n  modifier onlyDepot(address depot) {\r\n    require(_isDepot(depot), \"not a depot address\");\r\n    _;\r\n  }\r\n\r\n  function addDepot(address depot)\r\n    public\r\n    onlyCapper\r\n  {\r\n    _addDepot(depot);\r\n  }\r\n\r\n  function removeDepot(address depot)\r\n    public\r\n    onlyCapper\r\n    onlyDepot(depot)\r\n  {\r\n    _removeDepot(depot);\r\n  }\r\n\r\n  function isDepot(address someAddr) public view returns (bool) {\r\n    return _isDepot(someAddr);\r\n  }\r\n\r\n  /**\r\n   * Add a depot address.\r\n   */\r\n  function _addDepot(address depot) internal {\r\n    require(depot != address(0), \"depot cannot be null\");\r\n    _depotAddress[depot] = true;\r\n  }\r\n\r\n  function _removeDepot(address depot) internal {\r\n    _depotAddress[depot] = false;\r\n  }\r\n\r\n  function _isDepot(address someAddr) internal view returns (bool) {\r\n    return _depotAddress[someAddr];\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract MinterRole {\r\n  using Roles for Roles.Role;\r\n\r\n  event MinterAdded(address indexed account);\r\n  event MinterRemoved(address indexed account);\r\n\r\n  Roles.Role private minters;\r\n\r\n  constructor() internal {\r\n    _addMinter(msg.sender);\r\n  }\r\n\r\n  modifier onlyMinter() {\r\n    require(isMinter(msg.sender));\r\n    _;\r\n  }\r\n\r\n  function isMinter(address account) public view returns (bool) {\r\n    return minters.has(account);\r\n  }\r\n\r\n  function addMinter(address account) public onlyMinter {\r\n    _addMinter(account);\r\n  }\r\n\r\n  function renounceMinter() public {\r\n    _removeMinter(msg.sender);\r\n  }\r\n\r\n  function _addMinter(address account) internal {\r\n    minters.add(account);\r\n    emit MinterAdded(account);\r\n  }\r\n\r\n  function _removeMinter(address account) internal {\r\n    minters.remove(account);\r\n    emit MinterRemoved(account);\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract PauserRole {\r\n  using Roles for Roles.Role;\r\n\r\n  event PauserAdded(address indexed account);\r\n  event PauserRemoved(address indexed account);\r\n\r\n  Roles.Role private pausers;\r\n\r\n  constructor() internal {\r\n    _addPauser(msg.sender);\r\n  }\r\n\r\n  modifier onlyPauser() {\r\n    require(isPauser(msg.sender));\r\n    _;\r\n  }\r\n\r\n  function isPauser(address account) public view returns (bool) {\r\n    return pausers.has(account);\r\n  }\r\n\r\n  function addPauser(address account) public onlyPauser {\r\n    _addPauser(account);\r\n  }\r\n\r\n  function renouncePauser() public {\r\n    _removePauser(msg.sender);\r\n  }\r\n\r\n  function _addPauser(address account) internal {\r\n    pausers.add(account);\r\n    emit PauserAdded(account);\r\n  }\r\n\r\n  function _removePauser(address account) internal {\r\n    pausers.remove(account);\r\n    emit PauserRemoved(account);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() internal {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Mintable\r\n * @dev ERC20 minting logic\r\n */\r\ncontract ERC20Mintable is ERC20, MinterRole {\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param to The address that will receive the minted tokens.\r\n   * @param value The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(\r\n    address to,\r\n    uint256 value\r\n  )\r\n    public\r\n    onlyMinter\r\n    returns (bool)\r\n  {\r\n    _mint(to, value);\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is PauserRole {\r\n  event Paused(address account);\r\n  event Unpaused(address account);\r\n\r\n  bool private _paused;\r\n\r\n  constructor() internal {\r\n    _paused = false;\r\n  }\r\n\r\n  /**\r\n   * @return true if the contract is paused, false otherwise.\r\n   */\r\n  function paused() public view returns(bool) {\r\n    return _paused;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!_paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(_paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyPauser whenNotPaused {\r\n    _paused = true;\r\n    emit Paused(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyPauser whenPaused {\r\n    _paused = false;\r\n    emit Unpaused(msg.sender);\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev ERC20 modified with pausable transfers.\r\n **/\r\ncontract ERC20Pausable is ERC20, Pausable {\r\n\r\n  function transfer(\r\n    address to,\r\n    uint256 value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.transfer(to, value);\r\n  }\r\n\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.transferFrom(from, to, value);\r\n  }\r\n\r\n  function approve(\r\n    address spender,\r\n    uint256 value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.approve(spender, value);\r\n  }\r\n\r\n  function increaseAllowance(\r\n    address spender,\r\n    uint addedValue\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool success)\r\n  {\r\n    return super.increaseAllowance(spender, addedValue);\r\n  }\r\n\r\n  function decreaseAllowance(\r\n    address spender,\r\n    uint subtractedValue\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool success)\r\n  {\r\n    return super.decreaseAllowance(spender, subtractedValue);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Capped token - also, limit minting targets to depots.\r\n * @dev Mintable token with a token cap.\r\n */\r\ncontract Capped is Depot, ERC20Mintable {\r\n\r\n  uint256 private _cap;\r\n\r\n  constructor(uint256 cap)\r\n    public\r\n  {\r\n    require(cap > 0, 'Cap cannot be zero');\r\n    _cap = cap;\r\n  }\r\n\r\n  /**\r\n   * @return the cap for the token minting.\r\n   */\r\n  function cap() public view returns(uint256) {\r\n    return _cap;\r\n  }\r\n\r\n  function setCap(uint256 newCap)\r\n    public\r\n    onlyCapper\r\n  {\r\n    _setCap(newCap);\r\n  }\r\n\r\n  /**\r\n   * Cap cannot be reduced, can only be increased.\r\n   */\r\n  function _setCap(uint256 newCap) internal {\r\n    if (newCap > _cap) _cap = newCap;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param to The address that will receive the minted tokens.\r\n   * @param value The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(\r\n    address to,\r\n    uint256 value\r\n  )\r\n    public\r\n    onlyMinter\r\n    onlyDepot(to)\r\n    returns (bool)\r\n  {\r\n    require(totalSupply().add(value) <= _cap, \"mint value limit exceeded\");\r\n\r\n    return super.mint(to, value);\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n\r\n/// token.sol - base class for all Rock Stable tokens\r\n\r\n// Copyright (C) 2018, 2019 Rock Stable Token Inc\r\n\r\n// This is based on OpenZeppelin code.\r\n// You may not use this file except in compliance with the MIT License.\r\n\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND (express or implied).\r\n\r\n\r\ncontract Constants {\r\n    uint public constant DENOMINATOR = 10000; // deprecated\r\n    uint public constant DECIMALS = 18;\r\n    uint public constant WAD = 10**DECIMALS;\r\n}\r\n\r\ncontract Token is Constants, Ownable, ERC20Pausable, Capped {\r\n    string  public symbol;\r\n    uint256 public decimals;\r\n    string  public name;\r\n\r\n    modifier condition(bool _condition) {\r\n      require(_condition, \"condition not met\");\r\n      _;\r\n    }\r\n\r\n    constructor(address _owner, uint256 _cap)\r\n        public\r\n        Capped(_cap)\r\n    {\r\n      require(_owner != 0, \"proposed owner is null\");\r\n      if (msg.sender != _owner) {\r\n        super.transferOwnership(_owner);\r\n        super.addCapper(_owner);\r\n        super.addPauser(_owner);\r\n      }\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n// Universal Token\r\ncontract UniversalToken is Token {\r\n    using SafeMath for uint256;\r\n\r\n    uint public xactionFeeNumerator;\r\n    uint public xactionFeeShare;\r\n\r\n    event ModifyTransFeeCalled(uint newFee);\r\n    event ModifyFeeShareCalled(uint newShare);\r\n\r\n    // Note: the constructor only sets the Cap, but does not set the initial supply.\r\n    //\r\n    constructor( \r\n        uint initialCap,\r\n        uint feeMult,\r\n        uint feeShare\r\n        )\r\n          public\r\n          Token(msg.sender, initialCap)\r\n    {\r\n        require(initialCap > 0, \"initial supply must be greater than 0\");\r\n        require(feeMult > 0, \"fee multiplier must be non-zero\");\r\n        symbol = \"UETR\";\r\n        name = \"Universal Evangelist Token - by Rock Stable Token Inc\";\r\n        decimals = DECIMALS;\r\n        xactionFeeNumerator = feeMult;\r\n        xactionFeeShare = feeShare;\r\n    }\r\n\r\n    function modifyTransFee(uint _xactionFeeMult) public\r\n        onlyOwner\r\n    {\r\n        require(DENOMINATOR > _xactionFeeMult.mul(4), 'cannot modify transaction fee to more than 0.25');\r\n        xactionFeeNumerator = _xactionFeeMult;\r\n        emit ModifyTransFeeCalled(_xactionFeeMult);\r\n    }\r\n\r\n    function modifyFeeShare(uint _share) public\r\n        onlyOwner\r\n    {\r\n        require(DENOMINATOR > _share.mul(3), 'RSTI share must be less than one-third');\r\n        xactionFeeShare = _share;\r\n        emit ModifyFeeShareCalled(_share);\r\n    }\r\n}\r\n\r\n\r\n\r\n// Local Token\r\ncontract LocalToken is Token {\r\n    using SafeMath for uint256;\r\n\r\n    string  public localityCode;\r\n    uint    public taxRateNumerator = 0;\r\n    address public govtAccount = 0;\r\n    address public pmtAccount = 0;\r\n    UniversalToken public universalToken;\r\n\r\n    constructor(\r\n            uint _maxTokens,\r\n            uint _taxRateMult,\r\n            string _tokenSymbol,\r\n            string _tokenName,\r\n            string _localityCode,\r\n            address _govt,\r\n            address _pmt,\r\n            address _universalToken\r\n            )\r\n            public\r\n            condition(_maxTokens > 0)\r\n            condition(DENOMINATOR > _taxRateMult.mul(2))\r\n            condition((_taxRateMult > 0 && _govt != 0) || _taxRateMult == 0)\r\n            condition(_universalToken != 0)\r\n            Token(msg.sender, _maxTokens)\r\n    {\r\n        universalToken = UniversalToken(_universalToken);\r\n        // require(msg.sender == universalToken.owner(), \"owner must be the same owner for UniversalToken\");\r\n        decimals = DECIMALS;\r\n        symbol = _tokenSymbol;\r\n        name = _tokenName;\r\n        localityCode = _localityCode;\r\n        govtAccount = _govt;\r\n        pmtAccount = _pmt;\r\n        if (_taxRateMult > 0) {\r\n            taxRateNumerator = _taxRateMult;\r\n        }\r\n    }\r\n\r\n    // Modify Territory\r\n    // This should only be used when the name of the territory that covers the same\r\n    // area changes in Bing maps.\r\n    // The location of the territory itself should not be modified; in other words,\r\n    // a local token, once created, has a fixed territory.\r\n    function modifyLocality(string newLocality) public\r\n        onlyMinter\r\n    {\r\n        localityCode = newLocality;\r\n    }\r\n\r\n    function modifyTaxRate(uint _taxMult) public\r\n        onlyMinter\r\n        condition(DENOMINATOR > _taxMult.mul(2))\r\n    {\r\n        taxRateNumerator = _taxMult;\r\n    }\r\n\r\n    // To reset govtAccount when taxRateNumerator is not zero, \r\n    // must reset taxRateNumerator first.\r\n    // To set govtAccount when taxRateNumerator is zero,\r\n    // must set taxRateNumerator first to non-zero value.\r\n    function modifyGovtAccount(address govt) public\r\n        onlyMinter\r\n    {\r\n        if ((taxRateNumerator > 0 && govt == address(0)) \r\n            || (taxRateNumerator == 0 && govt != address(0))) revert('invalid input');\r\n        govtAccount = govt;\r\n    }\r\n\r\n    function modifyPMTAccount(address _pmt) public\r\n        onlyOwner\r\n    {\r\n        require(_pmt != 0, 'cannot set RockStable address to zero');\r\n        pmtAccount = _pmt;\r\n    }\r\n}\r\n\r\n\r\n\r\ninterface IPayment2 {\r\n    // This event should always emit because it is necessary for getting everybody paid in PUR.\r\n    event PaymentConfirmed(address indexed _customerAddr, address indexed _paymentContract, uint _ethValue, uint _roks);\r\n\r\n    // Payment created event\r\n    event PaymentContract(bool _payTax, address _evangelist, address _localToken, address _vendor, address _pmntCenter);\r\n\r\n    // contract refreshed\r\n    event PaymentContractRefreshed(address _contract);\r\n\r\n    // Vendor transferred\r\n    event VendorTransferred(address _fromEvangelist, address _toEvangelist);\r\n\r\n    // temporary, for debugging only\r\n    event DebugEvent(address from, address to, uint value);\r\n\r\n    function getVendor() external view returns (address);\r\n\r\n    function getPmtAccount() external view returns (address);\r\n\r\n    // Transfer this vendor to another evangelist.\r\n    // Acquiring evangelist must first approve at least single local token for source vendor.\r\n    function transferThisVendor(address toAnotherEvangelist) external;\r\n\r\n    function setPayTax(bool pay) external;\r\n\r\n    // Refresh all parameters for calculating transaction fee and taxes.\r\n    // This allows these parameters to be modified in a single place.\r\n    // This refresh routine cost is charged to the evangelist or vendor, but it needs to be done\r\n    // only once a month.\r\n    function refreshFeeParams() external;\r\n\r\n    function depositLocalToken() external;\r\n\r\n    function destroy() external;\r\n\r\n    function getEthPrice() external view returns (uint);\r\n\r\n    function setEthPrice(uint ethPrice) external;\r\n\r\n    function getRoksExpected() external view returns (uint);\r\n\r\n    function setRoksExpected(uint roksExpected) external;\r\n\r\n    function getLocalToken() external view returns (LocalToken);\r\n}\r\n\r\n\r\n\r\ncontract PureMoney2 is Token {\r\n\r\n    event DebugEvent(address from, address to, uint value);\r\n\r\n    // Payment contract registered\r\n    event PaymentContractRegistered(address _contract, uint amountApproved);\r\n\r\n    constructor( \r\n        uint initialCap)\r\n          public\r\n          condition(initialCap > 0)\r\n          Token(msg.sender, initialCap)\r\n    {\r\n        symbol = \"ROKS\";\r\n        name = \"Rock Stable Token\";\r\n        decimals = DECIMALS;\r\n    }\r\n\r\n    // Register Vendor\r\n    // Call this from API server, right after creating a Payment contract.\r\n    // Deposit local token to payment contract.\r\n    // An contract that is deregistered cannot be re-registered.\r\n    // The second param is a count of how many ROKS to approve (in wei units) for the\r\n    // payment contract to transferFrom owner.\r\n    //\r\n    function registerVendor(address _contract, uint amountToApprove)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(_contract != address(0), 'null contract address');\r\n        require(!this.isRegistered(_contract), 'payment contract is already registered');\r\n        // address source = msg.sender;\r\n        // emit DebugEvent(address(_contract), source, 0);\r\n        IPayment2 pmnt = IPayment2(_contract); // reverts if _contract is not a Payment\r\n        require(pmnt.getVendor() != address(0), 'vendor not set in payment contract');\r\n        require(pmnt.getPmtAccount() != address(0), 'RSTI account not set in payment contract');\r\n        pmnt.depositLocalToken();\r\n        super.approve(address(pmnt), amountToApprove);\r\n        // emit DebugEvent(pmnt.getVendor(), source, 0);\r\n        emit PaymentContractRegistered(_contract, amountToApprove);\r\n    }\r\n\r\n    // Deregister a vendor.\r\n    // Vendor's Payment contract will be destroyed and cnnot be revived.\r\n    // If input address is not a Payment contract address, nothing happens.\r\n    // NOTE: Use this with care, only if absolutely necessary. We don't want too many deregistered\r\n    // Payment contracts lying around because if ROKS payment is made to such contracts, the payment\r\n    // is accumulated but can never be taken out.\r\n    //\r\n    function deregisterVendor(address _contract)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(_contract != address(0), 'null contract address');\r\n        IPayment2 pmnt = IPayment2(_contract); // reverts if _contract is not a Payment\r\n        pmnt.destroy();\r\n        emit DebugEvent(pmnt.getPmtAccount(), address(0), 0);\r\n    }\r\n\r\n    // determine if a payment contract is registered\r\n    function isRegistered(address _contract)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return (this.allowance(this.owner(), _contract) > WAD);\r\n    }\r\n\r\n    // Determine if TO address is a contract;\r\n    // If it is a Payment contract return vendor address.\r\n    // Otherwise, return the input TO address.\r\n    // The ultimate purpose of this function is to allow direct ROKS payment to vendor address,\r\n    // not just to vendor payment contract address.\r\n    // NOTE: If the destination is an unregistered / deregistered / destroyed Payment contract, \r\n    // transferred ROKS tokens are accumulated in the Payment contract itself and maybe lost forever.\r\n    // (If the destination is an as yet unregistered Payment contract, the only way to retrieve\r\n    // the ROKS tokens is to first register and then deregister the Payment contract.)\r\n    //\r\n    function getAccountIfContract(address to) internal view returns (address account)\r\n    {\r\n        // fail early\r\n        require(to != address(0), 'destination address is null');\r\n        // is it a Payment contract?\r\n        if (this.isRegistered(to)) {\r\n            IPayment2 pmnt = IPayment2(to);\r\n            LocalToken local = LocalToken(pmnt.getLocalToken());\r\n            require(local.balanceOf(to) >= WAD, 'destination address is an unregistered payment contract');\r\n            return pmnt.getVendor();\r\n        } else {\r\n            return to; // 'to' can be anything\r\n        }\r\n    }\r\n\r\n    // Base function override.\r\n    function transfer(address to, uint tokens) public returns (bool success)\r\n    {\r\n        emit DebugEvent(msg.sender, to, tokens);\r\n        address addr = getAccountIfContract(to);\r\n        require(addr != address(0), 'vendor address is zero');\r\n        require(balanceOf(msg.sender) > tokens, 'not enough tokens');\r\n        super._transfer(msg.sender, addr, tokens);\r\n        return true;\r\n    }\r\n\r\n    // Base function override.\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success)\r\n    {\r\n        emit DebugEvent(from, to, tokens);\r\n        return super.transferFrom(from, getAccountIfContract(to), tokens);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isCapper\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCap\",\"type\":\"uint256\"}],\"name\":\"setCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceCapper\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WAD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"someAddr\",\"type\":\"address\"}],\"name\":\"isDepot\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"deregisterVendor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addCapper\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"depot\",\"type\":\"address\"}],\"name\":\"removeDepot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"depot\",\"type\":\"address\"}],\"name\":\"addDepot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"amountToApprove\",\"type\":\"uint256\"}],\"name\":\"registerVendor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"isRegistered\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialCap\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"DebugEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_contract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountApproved\",\"type\":\"uint256\"}],\"name\":\"PaymentContractRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"CapperAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"CapperRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"PureMoney2","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000c9f2c9cd04674edea40000000","Library":"","SwarmSource":"bzzr://d99a0bfeaef2e7e086e6ad086cff86d8d9e4a0efc43077d3183f6b6085a9ac36"}]}