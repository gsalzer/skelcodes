{"status":"1","message":"OK","result":[{"SourceCode":"{\"EscrowFund.sol\":{\"content\":\"pragma solidity ^0.4.24;\\nimport \\\"./SafeMath.sol\\\";\\n\\ninterface ERC20 {\\n    function balanceOf(address who) external view returns (uint256);\\n    function transfer(address to, uint256 value) external returns (bool);\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\\ncontract EscrowFund {\\n    using SafeMath for uint256;\\n\\n    uint256 USDTPercentage = 90;\\n\\n    // BCNT token contract\\n    ERC20 public BCNTToken;\\n    ERC20 public StableToken;\\n\\n    // Roles\\n    address public bincentiveHot; // i.e., Platform Owner\\n    address public bincentiveCold;\\n    address[] public investors; // implicitly first investor is the lead investor\\n    address public accountManager;\\n    address public fundManager; // i.e., Exchange Deposit and Withdraw Manager\\n    address[] public traders;\\n\\n    uint256 public numMidwayQuitInvestors;\\n    uint256 public numRefundedInvestors; // i.e., number of investors that already received refund\\n    uint256 public numAUMDistributedInvestors; // i.e., number of investors that already received AUM\\n\\n    // Contract(Fund) Status\\n    // 0: not initialized\\n    // 1: initialized\\n    // 2: not enough fund came in in time\\n    // 3: fundStarted\\n    // 4: running\\n    // 5: stoppped\\n    // 6: closed\\n    uint256 public fundStatus;\\n\\n    // Money\\n    uint256 public currentInvestedAmount;\\n    uint256 public investedUSDTAmount;\\n    uint256 public investedBCNTAmount;\\n    mapping(address =\\u003e uint256) public investedAmount;\\n    mapping(address =\\u003e uint256) public depositedUSDTAmount;\\n    mapping(address =\\u003e uint256) public depositedBCNTAmount;\\n    uint256 public BCNTLockAmount;\\n    uint256 public returnedStableTokenAmounts;\\n    uint256 public returnedBCNTAmounts;\\n    mapping(address =\\u003e uint256) public traderReceiveUSDTAmounts;\\n    mapping(address =\\u003e uint256) public traderReceiveBCNTAmounts;\\n\\n    // Fund Parameters\\n    uint256 public minInvestAmount;\\n    // Risk management Parameters...\\n    uint256 public investPaymentDueTime;\\n    uint256 public softCap;\\n    uint256 public hardCap;\\n\\n    // Events\\n    event Deposit(address indexed investor, uint256 amount);\\n    event StartFund(uint256 num_investors, uint256 totalInvestedAmount, uint256 BCNTLockAmount);\\n    event AbortFund(uint256 num_investors, uint256 totalInvestedAmount);\\n    event MidwayQuit(address indexed investor, uint256 investAmount, uint256 BCNTWithdrawAmount);\\n    event DesignateFundManager(address indexed fundManager);\\n    event Allocate(address indexed to, uint256 amountStableTokenForInvestment, uint256 amountBCNTForInvestment);\\n    event ReturnAUM(uint256 amountStableToken, uint256 amountBCNT);\\n    event DistributeAUM(address indexed to, uint256 amountStableToken, uint256 amountBCNT);\\n\\n\\n    // Modifiers\\n    modifier initialized() {\\n        require(fundStatus == 1);\\n        _;\\n    }\\n\\n    modifier fundStarted() {\\n        require(fundStatus == 3);\\n        _;\\n    }\\n\\n    modifier running() {\\n        require(fundStatus == 4);\\n        _;\\n    }\\n\\n    modifier stopped() {\\n        require(fundStatus == 5);\\n        _;\\n    }\\n\\n    modifier afterStartedBeforeStopped() {\\n        require((fundStatus \\u003e= 3) \\u0026\\u0026 (fundStatus \\u003c 5));\\n        _;\\n    }\\n\\n    modifier closedOrAborted() {\\n        require((fundStatus == 6) || (fundStatus == 2));\\n        _;\\n    }\\n\\n    modifier isBincentive() {\\n        require(\\n            (msg.sender == bincentiveHot) || (msg.sender == bincentiveCold)\\n        );\\n        _;\\n    }\\n\\n    modifier isBincentiveCold() {\\n        require(msg.sender == bincentiveCold);\\n        _;\\n    }\\n\\n    modifier isInvestor() {\\n        // bincentive is not investor\\n        require(msg.sender != bincentiveHot);\\n        require(msg.sender != bincentiveCold);\\n        require(investedAmount[msg.sender] \\u003e 0);\\n        _;\\n    }\\n\\n    modifier isAccountManager() {\\n        require(msg.sender == accountManager);\\n        _;\\n    }\\n\\n    modifier isFundManager() {\\n        require(msg.sender == fundManager);\\n        _;\\n    }\\n\\n    // Getter Functions\\n\\n\\n    // Investor Deposit\\n    function deposit(address investor, uint256 depositUSDTAmount, uint256 depositBCNTAmount) initialized public {\\n        require(now \\u003c investPaymentDueTime);\\n        require(currentInvestedAmount \\u003c hardCap);\\n        require((investor != bincentiveHot) \\u0026\\u0026 (investor != bincentiveCold));\\n\\n        uint256 amount;\\n        if(depositBCNTAmount \\u003e 0) {\\n            // Only bincentive can deposit with BCNT\\n            require((msg.sender == bincentiveHot) || (msg.sender == bincentiveCold));\\n\\n            amount = depositUSDTAmount.mul(100).div(USDTPercentage);\\n        }\\n        else {\\n            amount = depositUSDTAmount;\\n        }\\n        // Check if deposit amount exceed minimum invest amount\\n        require(amount \\u003e= minInvestAmount);\\n        // Check if deposit amount exceed hard cap\\n        require(currentInvestedAmount.add(amount) \\u003c= hardCap);\\n\\n        // Transfer Stable Token to this contract\\n        // If deposit from bincentive, transferFrom `bincentiveCold`\\n        // Else transferFrom msg.sender\\n        if((msg.sender == bincentiveHot) || (msg.sender == bincentiveCold)) {\\n            require(StableToken.transferFrom(bincentiveCold, address(this), depositUSDTAmount));\\n            // Deposit BCNT only if invest amount does not exceed hard cap\\n            if(depositBCNTAmount \\u003e 0) {\\n                require(BCNTToken.transferFrom(bincentiveCold, address(this), depositBCNTAmount));\\n                depositedBCNTAmount[investor] = depositedBCNTAmount[investor].add(depositBCNTAmount);\\n                investedBCNTAmount = investedBCNTAmount.add(depositBCNTAmount);\\n            }\\n        }\\n        else{\\n            require(StableToken.transferFrom(msg.sender, address(this), depositUSDTAmount));\\n        }\\n        depositedUSDTAmount[investor] = depositedUSDTAmount[investor].add(depositUSDTAmount);\\n        investedUSDTAmount = investedUSDTAmount.add(depositUSDTAmount);\\n\\n        currentInvestedAmount = currentInvestedAmount.add(amount);\\n        if(investedAmount[investor] == 0) {\\n            investors.push(investor);\\n        }\\n        investedAmount[investor] = investedAmount[investor].add(amount);\\n\\n        emit Deposit(investor, amount);\\n    }\\n\\n    // Start Investing\\n    function start(uint256 _BCNTLockAmount) initialized isBincentive public {\\n        require(currentInvestedAmount \\u003e= softCap);\\n\\n        // Transfer and lock BCNT into the contract\\n        require(BCNTToken.transferFrom(bincentiveCold, address(this), _BCNTLockAmount));\\n        BCNTLockAmount = _BCNTLockAmount;\\n\\n        // Start the contract\\n        fundStatus = 3;\\n        emit StartFund(investors.length, currentInvestedAmount, BCNTLockAmount);\\n    }\\n\\n    // NOTE: might consider changing to withdrawal pattern\\n    // Not Enough Fund\\n    function notEnoughFund(uint256 numInvestorsToRefund) initialized isBincentive public {\\n        require(now \\u003e= investPaymentDueTime);\\n        require(currentInvestedAmount \\u003c softCap);\\n        require(numRefundedInvestors.add(numInvestorsToRefund) \\u003c= investors.length, \\\"Refund to more than total number of investors\\\");\\n\\n        address investor;\\n        // Return Stable Token to investors\\n        for(uint i = numRefundedInvestors; i \\u003c (numRefundedInvestors.add(numInvestorsToRefund)); i++) {\\n            investor = investors[i];\\n            if(investedAmount[investor] == 0) continue;\\n\\n            require(StableToken.transfer(investor, depositedUSDTAmount[investor]));\\n            if(depositedBCNTAmount[investor] \\u003e 0) {\\n                require(BCNTToken.transfer(investor, depositedBCNTAmount[investor]));\\n            }\\n        }\\n\\n        numRefundedInvestors = numRefundedInvestors.add(numInvestorsToRefund);\\n        if(numRefundedInvestors \\u003e= investors.length) {\\n            // End the contract due to not enough fund\\n            fundStatus = 2;\\n\\n            emit AbortFund(investors.length, currentInvestedAmount);\\n        }\\n    }\\n\\n    // Investor quit and withdraw\\n    function midwayQuit() afterStartedBeforeStopped isInvestor public {\\n        uint256 investor_amount = investedAmount[msg.sender];\\n        investedAmount[msg.sender] = 0;\\n\\n        // Subtract total invest amount and transfer investor\\u0027s share to `bincentiveCold`\\n        uint256 totalAmount = currentInvestedAmount;\\n        currentInvestedAmount = currentInvestedAmount.sub(investor_amount);\\n        investedAmount[bincentiveCold] = investedAmount[bincentiveCold].add(investor_amount);\\n\\n        uint256 BCNTWithdrawAmount = BCNTLockAmount.mul(investor_amount).div(totalAmount);\\n        BCNTLockAmount = BCNTLockAmount.sub(BCNTWithdrawAmount);\\n        require(BCNTToken.transfer(msg.sender, BCNTWithdrawAmount));\\n\\n        numMidwayQuitInvestors = numMidwayQuitInvestors.add(1);\\n        // Close the contract if every investor has quit\\n        if(numMidwayQuitInvestors == investors.length) {\\n            fundStatus = 6;\\n        }\\n\\n        emit MidwayQuit(msg.sender, investor_amount, BCNTWithdrawAmount);\\n    }\\n\\n    // Account manager designate fund manager\\n    function designateFundManager(address _fundManager) fundStarted isAccountManager public {\\n        require(fundManager == address(0), \\\"Fund manager is already declared.\\\");\\n        fundManager = _fundManager;\\n\\n        emit DesignateFundManager(_fundManager);\\n    }\\n\\n    // Fund manager allocate the resources\\n    function allocateFund(address[] _traders, uint256[] receiveUSDTAmounts, uint256[] receiveBCNTAmounts) fundStarted isFundManager public {\\n        require(traders.length == 0, \\\"Already allocated\\\");\\n        require(_traders.length \\u003e 0, \\\"Must has at least one recipient\\\");\\n        require(_traders.length == receiveUSDTAmounts.length, \\\"Input not of the same length\\\");\\n        require(receiveUSDTAmounts.length == receiveBCNTAmounts.length, \\\"Input not of the same length\\\");\\n\\n        uint256 totalAllocatedUSDTAmount;\\n        uint256 totalAllocatedBCNTAmount;\\n        address trader;\\n        for(uint i = 0; i \\u003c _traders.length; i++) {\\n            trader = _traders[i];\\n            traders.push(trader);\\n            traderReceiveUSDTAmounts[trader] = receiveUSDTAmounts[i];\\n            traderReceiveBCNTAmounts[trader] = receiveBCNTAmounts[i];\\n\\n            emit Allocate(trader, traderReceiveUSDTAmounts[trader], traderReceiveBCNTAmounts[trader]);\\n\\n            totalAllocatedUSDTAmount = totalAllocatedUSDTAmount.add(receiveUSDTAmounts[i]);\\n            totalAllocatedBCNTAmount = totalAllocatedBCNTAmount.add(receiveBCNTAmounts[i]);\\n        }\\n\\n        require(totalAllocatedUSDTAmount == investedUSDTAmount, \\\"Must allocate the full invested amount\\\");\\n        require(totalAllocatedBCNTAmount == investedBCNTAmount, \\\"Must allocate the full invested amount\\\");\\n    }\\n\\n    // `bincentiveCold` dispense the resources\\n    function dispenseFund() fundStarted isBincentiveCold public {\\n        require(traders.length \\u003e 0, \\\"Must has at least one recipient\\\");\\n\\n        address trader;\\n        for(uint i = 0; i \\u003c traders.length; i++) {\\n            trader = traders[i];\\n            // Transfer the fund to trader\\n            require(StableToken.transfer(trader, traderReceiveUSDTAmounts[trader]));\\n            if(traderReceiveBCNTAmounts[trader] \\u003e 0) {\\n                require(BCNTToken.transfer(trader, traderReceiveBCNTAmounts[trader]));\\n            }\\n        }\\n\\n        fundStatus = 4;\\n    }\\n\\n    // Return AUM\\n    function returnAUM(uint256 stableTokenAmount, uint256 BCNTAmount) running isBincentiveCold public {\\n\\n        returnedStableTokenAmounts = stableTokenAmount;\\n        returnedBCNTAmounts = BCNTAmount;\\n\\n        // Transfer stable token AUM to trader\\n        require(StableToken.transferFrom(bincentiveCold, address(this), stableTokenAmount));\\n\\n        // Transfer BCNT AUM to trader\\n        require(BCNTToken.transferFrom(bincentiveCold, address(this), BCNTAmount));\\n\\n        emit ReturnAUM(stableTokenAmount, BCNTAmount);\\n\\n        fundStatus = 5;\\n    }\\n\\n    // Distribute AUM\\n    function distributeAUM(uint256 numInvestorsToDistribute) stopped isBincentive public {\\n        require(numAUMDistributedInvestors.add(numInvestorsToDistribute) \\u003c= investors.length, \\\"Distributing to more than total number of investors\\\");\\n\\n        uint256 totalStableTokenReturned = returnedStableTokenAmounts;\\n        uint256 totalBCNTReturned = returnedBCNTAmounts;\\n        // Count `bincentiveCold`\\u0027s share in total amount when distributing AUM\\n        uint256 totalAmount = currentInvestedAmount.add(investedAmount[bincentiveCold]);\\n\\n        uint256 stableTokenDistributeAmount;\\n        uint256 BCNTDistributeAmount;\\n        address investor;\\n        uint256 investor_amount;\\n        // Distribute Stable Token and BCNT to investors\\n        for(uint i = numAUMDistributedInvestors; i \\u003c (numAUMDistributedInvestors.add(numInvestorsToDistribute)); i++) {\\n            investor = investors[i];\\n            if(investedAmount[investor] == 0) continue;\\n            investor_amount = investedAmount[investor];\\n            investedAmount[investor] = 0;\\n\\n            stableTokenDistributeAmount = totalStableTokenReturned.mul(investor_amount).div(totalAmount);\\n            require(StableToken.transfer(investor, stableTokenDistributeAmount));\\n\\n            BCNTDistributeAmount = totalBCNTReturned.mul(investor_amount).div(totalAmount);\\n            require(BCNTToken.transfer(investor, BCNTDistributeAmount));\\n\\n            emit DistributeAUM(investor, stableTokenDistributeAmount, BCNTDistributeAmount);\\n        }\\n\\n        numAUMDistributedInvestors = numAUMDistributedInvestors.add(numInvestorsToDistribute);\\n        // If all investors have received AUM,\\n        // distribute AUM and return BCNT stake to `bincentiveCold` then close the fund.\\n        if(numAUMDistributedInvestors \\u003e= investors.length) {\\n            returnedStableTokenAmounts = 0;\\n            returnedBCNTAmounts = 0;\\n            currentInvestedAmount = 0;\\n            // Distribute Stable Token and BCNT to `bincentiveCold`\\n            if(investedAmount[bincentiveCold] \\u003e 0) {\\n                investor_amount = investedAmount[bincentiveCold];\\n                investedAmount[bincentiveCold] = 0;\\n                stableTokenDistributeAmount = totalStableTokenReturned.mul(investor_amount).div(totalAmount);\\n                require(StableToken.transfer(bincentiveCold, stableTokenDistributeAmount));\\n\\n                BCNTDistributeAmount = totalBCNTReturned.mul(investor_amount).div(totalAmount);\\n                require(BCNTToken.transfer(bincentiveCold, BCNTDistributeAmount));\\n\\n                emit DistributeAUM(bincentiveCold, stableTokenDistributeAmount, BCNTDistributeAmount);\\n            }\\n\\n            // Transfer the BCNT stake left back to `bincentiveCold`\\n            uint256 _BCNTLockAmount = BCNTLockAmount;\\n            BCNTLockAmount = 0;\\n            require(BCNTToken.transfer(bincentiveCold, _BCNTLockAmount));\\n\\n            fundStatus = 6;\\n        }\\n    }\\n\\n    function claimWronglyTransferredFund() closedOrAborted isBincentive public {\\n        uint256 leftOverAmount;\\n        leftOverAmount = StableToken.balanceOf(address(this));\\n        if(leftOverAmount \\u003e 0) {\\n            require(StableToken.transfer(bincentiveCold, leftOverAmount));\\n        }\\n        leftOverAmount = BCNTToken.balanceOf(address(this));\\n        if(leftOverAmount \\u003e 0) {\\n            require(BCNTToken.transfer(bincentiveCold, leftOverAmount));\\n        }\\n    }\\n\\n\\n    // Constructor\\n    constructor(\\n        address _BCNTToken,\\n        address _StableToken,\\n        address _bincentiveHot,\\n        address _bincentiveCold,\\n        address _accountManager,\\n        uint256 _minInvestAmount,\\n        uint256 _investPaymentPeriod,\\n        uint256 _softCap,\\n        uint256 _hardCap) public {\\n\\n        bincentiveHot = _bincentiveHot;\\n        bincentiveCold = _bincentiveCold;\\n        BCNTToken = ERC20(_BCNTToken);\\n        StableToken = ERC20(_StableToken);\\n\\n        // Assign roles\\n        accountManager = _accountManager;\\n\\n        // Set parameters\\n        minInvestAmount = _minInvestAmount;\\n        investPaymentDueTime = now.add(_investPaymentPeriod);\\n        softCap = _softCap;\\n        hardCap = _hardCap;\\n\\n        // Initialized the contract\\n        fundStatus = 1;\\n    }\\n}\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n\\n  /**\\n  * @dev Multiplies two numbers, throws on overflow.\\n  */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    // Gas optimization: this is cheaper than asserting \\u0027a\\u0027 not being zero, but the\\n    // benefit is lost if \\u0027b\\u0027 is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    c = a * b;\\n    assert(c / a == b);\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Integer division of two numbers, truncating the quotient.\\n  */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // assert(b \\u003e 0); // Solidity automatically throws when dividing by 0\\n    // uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n    return a / b;\\n  }\\n\\n  /**\\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n  */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    assert(b \\u003c= a);\\n    return a - b;\\n  }\\n\\n  /**\\n  * @dev Adds two numbers, throws on overflow.\\n  */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    c = a + b;\\n    assert(c \\u003e= a);\\n    return c;\\n  }\\n}\\n\"}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"bincentiveHot\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"},{\"name\":\"depositUSDTAmount\",\"type\":\"uint256\"},{\"name\":\"depositBCNTAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"traderReceiveUSDTAmounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"traders\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"traderReceiveBCNTAmounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"midwayQuit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BCNTLockAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numMidwayQuitInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fundManager\",\"type\":\"address\"}],\"name\":\"designateFundManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"StableToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BCNTToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stableTokenAmount\",\"type\":\"uint256\"},{\"name\":\"BCNTAmount\",\"type\":\"uint256\"}],\"name\":\"returnAUM\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_traders\",\"type\":\"address[]\"},{\"name\":\"receiveUSDTAmounts\",\"type\":\"uint256[]\"},{\"name\":\"receiveBCNTAmounts\",\"type\":\"uint256[]\"}],\"name\":\"allocateFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"numInvestorsToRefund\",\"type\":\"uint256\"}],\"name\":\"notEnoughFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"numInvestorsToDistribute\",\"type\":\"uint256\"}],\"name\":\"distributeAUM\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositedBCNTAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"returnedStableTokenAmounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investPaymentDueTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investedUSDTAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accountManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_BCNTLockAmount\",\"type\":\"uint256\"}],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minInvestAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimWronglyTransferredFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bincentiveCold\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"dispenseFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investedBCNTAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numAUMDistributedInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"returnedBCNTAmounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositedUSDTAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numRefundedInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentInvestedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_BCNTToken\",\"type\":\"address\"},{\"name\":\"_StableToken\",\"type\":\"address\"},{\"name\":\"_bincentiveHot\",\"type\":\"address\"},{\"name\":\"_bincentiveCold\",\"type\":\"address\"},{\"name\":\"_accountManager\",\"type\":\"address\"},{\"name\":\"_minInvestAmount\",\"type\":\"uint256\"},{\"name\":\"_investPaymentPeriod\",\"type\":\"uint256\"},{\"name\":\"_softCap\",\"type\":\"uint256\"},{\"name\":\"_hardCap\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"num_investors\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalInvestedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"BCNTLockAmount\",\"type\":\"uint256\"}],\"name\":\"StartFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"num_investors\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalInvestedAmount\",\"type\":\"uint256\"}],\"name\":\"AbortFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"investAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"BCNTWithdrawAmount\",\"type\":\"uint256\"}],\"name\":\"MidwayQuit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"fundManager\",\"type\":\"address\"}],\"name\":\"DesignateFundManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountStableTokenForInvestment\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountBCNTForInvestment\",\"type\":\"uint256\"}],\"name\":\"Allocate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amountStableToken\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountBCNT\",\"type\":\"uint256\"}],\"name\":\"ReturnAUM\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountStableToken\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountBCNT\",\"type\":\"uint256\"}],\"name\":\"DistributeAUM\",\"type\":\"event\"}]","ContractName":"EscrowFund","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009669890e48f330acd88b78d63e1a6b3482652cd9000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000776e2337e323d11009cc4d484c7b39313f5c791f00000000000000000000000044620c73b430234104247dffdae4868b5bbe9e7300000000000000000000000044620c73b430234104247dffdae4868b5bbe9e73000000000000000000000000000000000000000000000000000000012a05f200000000000000000000000000000000000000000000000000000000000018992e00000000000000000000000000000000000000000000000000000022ecb25c00000000000000000000000000000000000000000000000000000000746a528800","Library":"","LicenseType":"None","SwarmSource":"bzzr://ecedd477aa147926b853540b3a865f358d13cceec97bec7a042ef65e05708d70"}]}