{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface ERC165 {\r\n\r\n  /**\r\n   * @notice Query if a contract implements an interface\r\n   * @param _interfaceId The interface identifier, as specified in ERC-165\r\n   * @dev Interface identification is specified in ERC-165. This function\r\n   * uses less than 30,000 gas.\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\n/**\r\n * @title SupportsInterfaceWithLookup\r\n * @author Matt Condon (@shrugs)\r\n * @dev Implements ERC165 using a lookup table.\r\n */\r\ncontract SupportsInterfaceWithLookup is ERC165 {\r\n  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\r\n  /**\r\n   * 0x01ffc9a7 ===\r\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\r\n   */\r\n\r\n  /**\r\n   * @dev a mapping of interface id to whether or not it's supported\r\n   */\r\n  mapping(bytes4 => bool) internal supportedInterfaces;\r\n\r\n  /**\r\n   * @dev A contract implementing SupportsInterfaceWithLookup\r\n   * implement ERC165 itself\r\n   */\r\n  constructor()\r\n    public\r\n  {\r\n    _registerInterface(InterfaceId_ERC165);\r\n  }\r\n\r\n  /**\r\n   * @dev implement supportsInterface(bytes4) using a lookup table\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool)\r\n  {\r\n    return supportedInterfaces[_interfaceId];\r\n  }\r\n\r\n  /**\r\n   * @dev private method for registering an interface\r\n   */\r\n  function _registerInterface(bytes4 _interfaceId)\r\n    internal\r\n  {\r\n    require(_interfaceId != 0xffffffff);\r\n    supportedInterfaces[_interfaceId] = true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic interface\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Basic is ERC165 {\r\n  event Transfer(\r\n    address indexed _from,\r\n    address indexed _to,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event Approval(\r\n    address indexed _owner,\r\n    address indexed _approved,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event ApprovalForAll(\r\n    address indexed _owner,\r\n    address indexed _operator,\r\n    bool _approved\r\n  );\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function exists(uint256 _tokenId) public view returns (bool _exists);\r\n\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function getApproved(uint256 _tokenId)\r\n    public view returns (address _operator);\r\n\r\n  function setApprovalForAll(address _operator, bool _approved) public;\r\n  function isApprovedForAll(address _owner, address _operator)\r\n    public view returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\r\n    public;\r\n\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public;\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Enumerable is ERC721Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256 _tokenId);\r\n\r\n  function tokenByIndex(uint256 _index) public view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Metadata is ERC721Basic {\r\n  function name() external view returns (string _name);\r\n  function symbol() external view returns (string _symbol);\r\n  function tokenURI(uint256 _tokenId) public view returns (string);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\r\n}\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ncontract ERC721Receiver {\r\n  /**\r\n   * @dev Magic value to be returned upon successful reception of an NFT\r\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\r\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n   */\r\n  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  /**\r\n   * @notice Handle the receipt of an NFT\r\n   * @dev The ERC721 smart contract calls this function on the recipient\r\n   * after a `safetransfer`. This function MAY throw to revert and reject the\r\n   * transfer. Return of other than the magic value MUST result in the \r\n   * transaction being reverted.\r\n   * Note: the contract address is always the message sender.\r\n   * @param _operator The address which called `safeTransferFrom` function\r\n   * @param _from The address which previously owned the token\r\n   * @param _tokenId The NFT identifier which is being transfered\r\n   * @param _data Additional data with no specified format\r\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n   */\r\n  function onERC721Received(\r\n    address _operator,\r\n    address _from,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n    returns(bytes4);\r\n}\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(addr) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\r\n\r\n  bytes4 private constant InterfaceId_ERC721 = 0x80ac58cd;\r\n  /*\r\n   * 0x80ac58cd ===\r\n   *   bytes4(keccak256('balanceOf(address)')) ^\r\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\r\n   *   bytes4(keccak256('approve(address,uint256)')) ^\r\n   *   bytes4(keccak256('getApproved(uint256)')) ^\r\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\r\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\r\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\r\n   */\r\n\r\n  bytes4 private constant InterfaceId_ERC721Exists = 0x4f558e79;\r\n  /*\r\n   * 0x4f558e79 ===\r\n   *   bytes4(keccak256('exists(uint256)'))\r\n   */\r\n\r\n  using SafeMath for uint256;\r\n  using AddressUtils for address;\r\n\r\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  // Mapping from token ID to owner\r\n  mapping (uint256 => address) internal tokenOwner;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping (uint256 => address) internal tokenApprovals;\r\n\r\n  // Mapping from owner to number of owned token\r\n  mapping (address => uint256) internal ownedTokensCount;\r\n\r\n  // Mapping from owner to operator approvals\r\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\r\n\r\n  /**\r\n   * @dev Guarantees msg.sender is owner of the given token\r\n   * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\r\n   */\r\n  modifier onlyOwnerOf(uint256 _tokenId) {\r\n    require(ownerOf(_tokenId) == msg.sender);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\r\n   * @param _tokenId uint256 ID of the token to validate\r\n   */\r\n  modifier canTransfer(uint256 _tokenId) {\r\n    require(isApprovedOrOwner(msg.sender, _tokenId));\r\n    _;\r\n  }\r\n\r\n  constructor()\r\n    public\r\n  {\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(InterfaceId_ERC721);\r\n    _registerInterface(InterfaceId_ERC721Exists);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the balance of the specified address\r\n   * @param _owner address to query the balance of\r\n   * @return uint256 representing the amount owned by the passed address\r\n   */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    require(_owner != address(0));\r\n    return ownedTokensCount[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the owner of the specified token ID\r\n   * @param _tokenId uint256 ID of the token to query the owner of\r\n   * @return owner address currently marked as the owner of the given token ID\r\n   */\r\n  function ownerOf(uint256 _tokenId) public view returns (address) {\r\n    address owner = tokenOwner[_tokenId];\r\n    require(owner != address(0));\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the specified token exists\r\n   * @param _tokenId uint256 ID of the token to query the existence of\r\n   * @return whether the token exists\r\n   */\r\n  function exists(uint256 _tokenId) public view returns (bool) {\r\n    address owner = tokenOwner[_tokenId];\r\n    return owner != address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Approves another address to transfer the given token ID\r\n   * The zero address indicates there is no approved address.\r\n   * There can only be one approved address per token at a given time.\r\n   * Can only be called by the token owner or an approved operator.\r\n   * @param _to address to be approved for the given token ID\r\n   * @param _tokenId uint256 ID of the token to be approved\r\n   */\r\n  function approve(address _to, uint256 _tokenId) public {\r\n    address owner = ownerOf(_tokenId);\r\n    require(_to != owner);\r\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n    tokenApprovals[_tokenId] = _to;\r\n    emit Approval(owner, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the approved address for a token ID, or zero if no address set\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return address currently approved for the given token ID\r\n   */\r\n  function getApproved(uint256 _tokenId) public view returns (address) {\r\n    return tokenApprovals[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Sets or unsets the approval of a given operator\r\n   * An operator is allowed to transfer all tokens of the sender on their behalf\r\n   * @param _to operator address to set the approval\r\n   * @param _approved representing the status of the approval to be set\r\n   */\r\n  function setApprovalForAll(address _to, bool _approved) public {\r\n    require(_to != msg.sender);\r\n    operatorApprovals[msg.sender][_to] = _approved;\r\n    emit ApprovalForAll(msg.sender, _to, _approved);\r\n  }\r\n\r\n  /**\r\n   * @dev Tells whether an operator is approved by a given owner\r\n   * @param _owner owner address which you want to query the approval of\r\n   * @param _operator operator address which you want to query the approval of\r\n   * @return bool whether the given operator is approved by the given owner\r\n   */\r\n  function isApprovedForAll(\r\n    address _owner,\r\n    address _operator\r\n  )\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return operatorApprovals[_owner][_operator];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers the ownership of a given token ID to another address\r\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n    canTransfer(_tokenId)\r\n  {\r\n    require(_from != address(0));\r\n    require(_to != address(0));\r\n\r\n    clearApproval(_from, _tokenId);\r\n    removeTokenFrom(_from, _tokenId);\r\n    addTokenTo(_to, _tokenId);\r\n\r\n    emit Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   *\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n    canTransfer(_tokenId)\r\n  {\r\n    // solium-disable-next-line arg-overflow\r\n    safeTransferFrom(_from, _to, _tokenId, \"\");\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes data to send along with a safe transfer check\r\n   */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n    canTransfer(_tokenId)\r\n  {\r\n    transferFrom(_from, _to, _tokenId);\r\n    // solium-disable-next-line arg-overflow\r\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the given spender can transfer a given token ID\r\n   * @param _spender address of the spender to query\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @return bool whether the msg.sender is approved for the given token ID,\r\n   *  is an operator of the owner, or is the owner of the token\r\n   */\r\n  function isApprovedOrOwner(\r\n    address _spender,\r\n    uint256 _tokenId\r\n  )\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    address owner = ownerOf(_tokenId);\r\n    // Disable solium check because of\r\n    // https://github.com/duaraghav8/Solium/issues/175\r\n    // solium-disable-next-line operator-whitespace\r\n    return (\r\n      _spender == owner ||\r\n      getApproved(_tokenId) == _spender ||\r\n      isApprovedForAll(owner, _spender)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param _to The address that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    require(_to != address(0));\r\n    addTokenTo(_to, _tokenId);\r\n    emit Transfer(address(0), _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    clearApproval(_owner, _tokenId);\r\n    removeTokenFrom(_owner, _tokenId);\r\n    emit Transfer(_owner, address(0), _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to clear current approval of a given token ID\r\n   * Reverts if the given address is not indeed the owner of the token\r\n   * @param _owner owner of the token\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   */\r\n  function clearApproval(address _owner, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _owner);\r\n    if (tokenApprovals[_tokenId] != address(0)) {\r\n      tokenApprovals[_tokenId] = address(0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param _to address representing the new owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    require(tokenOwner[_tokenId] == address(0));\r\n    tokenOwner[_tokenId] = _to;\r\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _from);\r\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1); tokenOwner[_tokenId] = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to invoke `onERC721Received` on a target address\r\n   * The call is not executed if the target address is not a contract\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _to target address that will receive the tokens\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes optional data to send along with the call\r\n   * @return whether the call correctly returned the expected magic value\r\n   */\r\n  function checkAndCallSafeTransfer(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    internal\r\n    returns (bool)\r\n  {\r\n    if (!_to.isContract()) {\r\n      return true;\r\n    }\r\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(\r\n      msg.sender, _from, _tokenId, _data);\r\n    return (retval == ERC721_RECEIVED);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Full ERC721 Token\r\n * This implementation includes all the required and some optional functionality of the ERC721 standard\r\n * Moreover, it includes approve all functionality using operator terminology\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Token is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721 {\r\n\r\n  bytes4 private constant InterfaceId_ERC721Enumerable = 0x780e9d63;\r\n  /**\r\n   * 0x780e9d63 ===\r\n   *   bytes4(keccak256('totalSupply()')) ^\r\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\r\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\r\n   */\r\n\r\n  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\r\n  /**\r\n   * 0x5b5e139f ===\r\n   *   bytes4(keccak256('name()')) ^\r\n   *   bytes4(keccak256('symbol()')) ^\r\n   *   bytes4(keccak256('tokenURI(uint256)'))\r\n   */\r\n\r\n  // Token name\r\n  string internal name_;\r\n\r\n  // Token symbol\r\n  string internal symbol_;\r\n\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping(address => uint256[]) internal ownedTokens;\r\n\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) internal ownedTokensIndex;\r\n\r\n  // Array with all token ids, used for enumeration\r\n  uint256[] internal allTokens;\r\n\r\n  // Mapping from token id to position in the allTokens array\r\n  mapping(uint256 => uint256) internal allTokensIndex;\r\n\r\n  // Optional mapping for token URIs\r\n  mapping(uint256 => string) internal tokenURIs;\r\n\r\n  /**\r\n   * @dev Constructor function\r\n   */\r\n  constructor(string _name, string _symbol) public {\r\n    name_ = _name;\r\n    symbol_ = _symbol;\r\n\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(InterfaceId_ERC721Enumerable);\r\n    _registerInterface(InterfaceId_ERC721Metadata);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token name\r\n   * @return string representing the token name\r\n   */\r\n  function name() external view returns (string) {\r\n    return name_;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token symbol\r\n   * @return string representing the token symbol\r\n   */\r\n  function symbol() external view returns (string) {\r\n    return symbol_;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns an URI for a given token ID\r\n   * Throws if the token ID does not exist. May return an empty string.\r\n   * @param _tokenId uint256 ID of the token to query\r\n   */\r\n  function tokenURI(uint256 _tokenId) public view returns (string) {\r\n    require(exists(_tokenId));\r\n    return tokenURIs[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\r\n   * @param _owner address owning the tokens list to be accessed\r\n   * @param _index uint256 representing the index to be accessed of the requested tokens list\r\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n   */\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    require(_index < balanceOf(_owner));\r\n    return ownedTokens[_owner][_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the total amount of tokens stored by the contract\r\n   * @return uint256 representing the total amount of tokens\r\n   */\r\n  function totalSupply() public view returns (uint256) {\r\n    return allTokens.length;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of all the tokens in this contract\r\n   * Reverts if the index is greater or equal to the total number of tokens\r\n   * @param _index uint256 representing the index to be accessed of the tokens list\r\n   * @return uint256 token ID at the given index of the tokens list\r\n   */\r\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\r\n    require(_index < totalSupply());\r\n    return allTokens[_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to set the token URI for a given token\r\n   * Reverts if the token ID does not exist\r\n   * @param _tokenId uint256 ID of the token to set its URI\r\n   * @param _uri string URI to assign\r\n   */\r\n  function _setTokenURI(uint256 _tokenId, string _uri) internal {\r\n    require(exists(_tokenId));\r\n    tokenURIs[_tokenId] = _uri;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param _to address representing the new owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    super.addTokenTo(_to, _tokenId);\r\n    uint256 length = ownedTokens[_to].length;\r\n    ownedTokens[_to].push(_tokenId);\r\n    ownedTokensIndex[_tokenId] = length;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    super.removeTokenFrom(_from, _tokenId);\r\n\r\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\r\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n    ownedTokens[_from][tokenIndex] = lastToken;\r\n    ownedTokens[_from][lastTokenIndex] = 0;\r\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\r\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n\r\n    ownedTokens[_from].length--;\r\n    ownedTokensIndex[_tokenId] = 0;\r\n    ownedTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param _to address the beneficiary that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    super._mint(_to, _tokenId);\r\n\r\n    allTokensIndex[_tokenId] = allTokens.length;\r\n    allTokens.push(_tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param _owner owner of the token to burn\r\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    super._burn(_owner, _tokenId);\r\n\r\n    // Clear metadata (if any)\r\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\r\n      delete tokenURIs[_tokenId];\r\n    }\r\n\r\n    // Reorg all tokens array\r\n    uint256 tokenIndex = allTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = allTokens.length.sub(1);\r\n    uint256 lastToken = allTokens[lastTokenIndex];\r\n\r\n    allTokens[tokenIndex] = lastToken;\r\n    allTokens[lastTokenIndex] = 0;\r\n\r\n    allTokens.length--;\r\n    allTokensIndex[_tokenId] = 0;\r\n    allTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\ncontract PetCemetheryToken is ERC721Token, Ownable {\r\n\r\n  using SafeMath for *;\r\n\r\n  enum TokenType { Default, Plot, Headstone, Decoration, PhotoVoucher }\r\n\r\n  struct PlotPosition {\r\n    uint32 section;\r\n    uint8 index;\r\n  }\r\n\r\n  struct Plot {\r\n    uint256 headstoneTokenId;\r\n    bool forSale;\r\n    uint256 price;\r\n    uint256 photoExpirationTime;\r\n  }\r\n\r\n  struct Headstone {\r\n    uint16 headstoneType;\r\n    uint256 plotTokenId;\r\n    string engraving;\r\n    string petName;\r\n    uint16 petSpecies;\r\n    uint32 lat;\r\n    uint32 lng;\r\n    string extraData;\r\n    bool flipped;\r\n  }\r\n\r\n  struct Decoration {\r\n    uint16 decorationType;\r\n    uint256 plotTokenId;\r\n    int16 plotPositionX;\r\n    int16 plotPositionY;\r\n    bool flipped;\r\n    uint256 firstAssignTime;\r\n    uint256 latestAssignTime;\r\n    uint256 totalAssignDuration;\r\n  }\r\n\r\n  struct PhotoVoucher {\r\n    uint256 period;\r\n  }\r\n\r\n  struct PlotDetailsView {\r\n    uint256 plotTokenId;\r\n    Plot plot;\r\n    PlotPosition plotPosition;\r\n    Headstone headstone;\r\n    DecorationDetailsView[] decorations;\r\n    address owner;\r\n    string tokenUri;\r\n  }\r\n\r\n  struct DecorationDetailsView {\r\n    uint256 decorationTokenId;\r\n    Decoration decoration;\r\n  }\r\n\r\n  string public baseURI;\r\n\r\n  uint32 public sectionCounter;\r\n  uint256 public tokenIdCounter = 1;\r\n\r\n  mapping(uint32 => uint256[]) public plotIdByPosition; // section - index -> plotTokenId\r\n\r\n  mapping(uint256 => TokenType) public tokenTypes;\r\n\r\n  mapping(uint256 => Plot) public plots;\r\n  mapping(uint256 => Headstone) public headstones;\r\n  mapping(uint256 => Decoration) public decorations;\r\n  mapping(uint256 => PhotoVoucher) public photoVouchers;\r\n  mapping(uint256 => uint256[]) public plotsDecorations; // plot id -> decoration ids\r\n  mapping(uint256 => PlotPosition) public plotsPositions;\r\n\r\n  constructor(string _baseURI) public ERC721Token(\"Pet Cemethery Token\", \"PCT\") {\r\n    baseURI = _baseURI;\r\n  }\r\n\r\n  function _mintSection(uint8 _size) private {\r\n    uint32 section = sectionCounter;\r\n    sectionCounter++;\r\n\r\n    plotIdByPosition[section] = new uint256[](_size);\r\n\r\n    for (uint8 i = 0; i < _size; i++) {\r\n      _mintPlot(section, i);\r\n    }\r\n  }\r\n\r\n  function _mintPlot(uint32 _section, uint8 _index) private {\r\n    uint256 newTokenId = _getNextTokenId();\r\n    _mint(owner, newTokenId);\r\n    plots[newTokenId] = Plot(0, false, 0, 0);\r\n    plotsDecorations[newTokenId] = new uint256[](0);\r\n    plotsPositions[newTokenId] = PlotPosition(_section, _index);\r\n    tokenTypes[newTokenId] = TokenType.Plot;\r\n    plotIdByPosition[_section][_index] = newTokenId;\r\n  }\r\n\r\n  function _mintHeadstone(uint16 _headstoneType) private {\r\n    uint256 newTokenId = _getNextTokenId();\r\n    _mint(owner, newTokenId);\r\n    headstones[newTokenId] = Headstone(_headstoneType, 0, \"\", \"\", 0, 0, 0, \"\", false);\r\n    tokenTypes[newTokenId] = TokenType.Headstone;\r\n  }\r\n\r\n  function _mintDecoration(uint16 _decorationType) private {\r\n    uint256 newTokenId = _getNextTokenId();\r\n    _mint(owner, newTokenId);\r\n    decorations[newTokenId] = Decoration(_decorationType, 0, 0, 0, false, 0, 0, 0);\r\n    tokenTypes[newTokenId] = TokenType.Decoration;\r\n  }\r\n\r\n  function _mintPhotoVoucher(uint256 _period) private {\r\n    uint256 newTokenId = _getNextTokenId();\r\n    _mint(owner, newTokenId);\r\n    photoVouchers[newTokenId] = PhotoVoucher(_period);\r\n    tokenTypes[newTokenId] = TokenType.PhotoVoucher;\r\n  }\r\n\r\n  function _getNextTokenId() private returns (uint256) {\r\n    uint256 res = tokenIdCounter;\r\n    tokenIdCounter = tokenIdCounter.add(1);\r\n    return res;\r\n  }\r\n\r\n  function _assignHeadstoneToPlot(uint256 _plotTokenId, uint256 _headstoneTokenId) private {\r\n    _unassignHeadstoneFromPlot(_plotTokenId);\r\n    plots[_plotTokenId].headstoneTokenId = _headstoneTokenId;\r\n    headstones[_headstoneTokenId].plotTokenId = _plotTokenId;\r\n  }\r\n\r\n  function _unassignHeadstoneFromPlot(uint256 _plotTokenId) private {\r\n    uint256 existingHeadstoneTokenId = plots[_plotTokenId].headstoneTokenId;\r\n\r\n    if (existingHeadstoneTokenId != 0) {\r\n      headstones[existingHeadstoneTokenId].plotTokenId = 0;\r\n      headstones[existingHeadstoneTokenId].engraving = \"\";\r\n      headstones[existingHeadstoneTokenId].petName = \"\";\r\n      headstones[existingHeadstoneTokenId].petSpecies = 0;\r\n      headstones[existingHeadstoneTokenId].lat = 0;\r\n      headstones[existingHeadstoneTokenId].lng = 0;\r\n      headstones[existingHeadstoneTokenId].extraData = \"\";\r\n      headstones[existingHeadstoneTokenId].flipped = false;\r\n    }\r\n\r\n    plots[_plotTokenId].headstoneTokenId = 0;\r\n  }\r\n\r\n  function _assignDecorationToPlot(uint256 _plotTokenId, uint256 _decorationTokenId,\r\n                                   int16 _plotPositionX, int16 _plotPositionY, bool _flipped) private {\r\n    if (decorations[_decorationTokenId].plotTokenId != _plotTokenId) {\r\n      plotsDecorations[_plotTokenId].push(_decorationTokenId);\r\n    }\r\n    decorations[_decorationTokenId].plotTokenId = _plotTokenId;\r\n    decorations[_decorationTokenId].plotPositionX = _plotPositionX;\r\n    decorations[_decorationTokenId].plotPositionY = _plotPositionY;\r\n    decorations[_decorationTokenId].flipped = _flipped;\r\n    if (decorations[_decorationTokenId].firstAssignTime == 0) {\r\n      decorations[_decorationTokenId].firstAssignTime = now;\r\n    }\r\n    decorations[_decorationTokenId].latestAssignTime = now;\r\n  }\r\n\r\n  function _unassignDecorationFromPlot(uint256 _plotTokenId, uint256 _decorationTokenId) private {\r\n    Decoration storage decoration = decorations[_decorationTokenId];\r\n    if (decoration.plotTokenId != 0) {\r\n      uint256 latestAssignDuration = now - decoration.latestAssignTime;\r\n      decoration.totalAssignDuration = decoration.totalAssignDuration.add(latestAssignDuration);\r\n    }\r\n    decoration.plotTokenId = 0;\r\n    decoration.plotPositionX = 0;\r\n    decoration.plotPositionY = 0;\r\n    decoration.flipped = false;\r\n\r\n    for (uint256 i = 0; i < plotsDecorations[_plotTokenId].length; i++) {\r\n      if (plotsDecorations[_plotTokenId][i] == _decorationTokenId) {\r\n        delete plotsDecorations[_plotTokenId][i];\r\n\r\n        if (i != plotsDecorations[_plotTokenId].length - 1) {\r\n          plotsDecorations[_plotTokenId][i] = plotsDecorations[_plotTokenId][plotsDecorations[_plotTokenId].length-1];\r\n        }\r\n\r\n        plotsDecorations[_plotTokenId].length--;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  function _unassignAllDecorationsFromPlot(uint256 _plotTokenId) private {\r\n    for (uint256 i = 0; i < plotsDecorations[_plotTokenId].length; i++) {\r\n      Decoration storage decoration = decorations[plotsDecorations[_plotTokenId][i]];\r\n      decoration.plotTokenId = 0;\r\n      decoration.plotPositionX = 0;\r\n      decoration.plotPositionY = 0;\r\n      decoration.flipped = false;\r\n\r\n      uint256 latestAssignDuration = now - decoration.latestAssignTime;\r\n      decoration.totalAssignDuration = decoration.totalAssignDuration.add(latestAssignDuration);\r\n    }\r\n    delete plotsDecorations[_plotTokenId];\r\n  }\r\n\r\n  function _offerPlot(uint256 _plotTokenId, uint256 _price) private {\r\n    _unassignHeadstoneFromPlot(_plotTokenId);\r\n    _unassignAllDecorationsFromPlot(_plotTokenId);\r\n\r\n    plots[_plotTokenId].forSale = true;\r\n    plots[_plotTokenId].price = _price;\r\n  }\r\n\r\n  function _cancelPlotOffer(uint256 _plotTokenId) private {\r\n    plots[_plotTokenId].forSale = false;\r\n    plots[_plotTokenId].price = 0;\r\n  }\r\n\r\n  /* Public methods - getters (views) */\r\n\r\n  function getOwnedTokens(address _address) public view returns (uint256[]) {\r\n    return ownedTokens[_address];\r\n  }\r\n\r\n  function getPlotDetails(uint256 _plotTokenId) public view returns (PlotDetailsView memory) {\r\n    Plot storage plot = plots[_plotTokenId];\r\n    PlotPosition storage plotPosition = plotsPositions[_plotTokenId];\r\n    Headstone storage headstone = headstones[plot.headstoneTokenId];\r\n    uint256[] storage decorationsIds = plotsDecorations[_plotTokenId];\r\n    DecorationDetailsView[] memory retDecorations = new DecorationDetailsView[](decorationsIds.length);\r\n    for (uint256 j = 0; j < decorationsIds.length; j++) {\r\n      retDecorations[j] = DecorationDetailsView(decorationsIds[j], decorations[decorationsIds[j]]);\r\n    }\r\n    address owner = ownerOf(_plotTokenId);\r\n    string memory tokenUri = tokenURI(_plotTokenId);\r\n    return PlotDetailsView(_plotTokenId, plot, plotPosition, headstone, retDecorations, owner, tokenUri);\r\n  }\r\n\r\n  function getSectionPlotsDetails(uint32 _section) public view returns (PlotDetailsView[] memory) {\r\n    uint256[] storage plotsIds = plotIdByPosition[_section];\r\n    PlotDetailsView[] memory plotsDetailsViews = new PlotDetailsView[](plotsIds.length);\r\n    for (uint256 i = 0; i<plotsIds.length; i++) {\r\n      plotsDetailsViews[i] = getPlotDetails(plotsIds[i]);\r\n    }\r\n\r\n    return plotsDetailsViews;\r\n  }\r\n\r\n  function plotsCount(uint32 _section) public view returns (uint256) {\r\n    return plotIdByPosition[_section].length;\r\n  }\r\n\r\n  function photoExpirationTime(uint256 _plotTokenId) public view returns (uint256) {\r\n    return plots[_plotTokenId].photoExpirationTime;\r\n  }\r\n\r\n  /* Public methods - plot, headstone, decorations management */\r\n\r\n  function prepareHeadstoneAndAssignToPlot(uint256 _plotTokenId, uint256 _headstoneTokenId,\r\n                                           string _engraving, string _petName, uint16 _petSpecies,\r\n                                           uint32 _lat, uint32 _lng, string _extraData, bool _flipped) public {\r\n    prepareHeadstone(_headstoneTokenId, _engraving, _petName, _petSpecies, _lat, _lng, _extraData, _flipped);\r\n    assignHeadstoneToPlot(_plotTokenId, _headstoneTokenId);\r\n  }\r\n\r\n  function prepareHeadstone(uint256 _headstoneTokenId, string _engraving,\r\n                            string _petName, uint16 _petSpecies, uint32 _lat, uint32 _lng, string _extraData, bool _flipped) public onlyOwnerOf(_headstoneTokenId) {\r\n    headstones[_headstoneTokenId].engraving = _engraving;\r\n    headstones[_headstoneTokenId].petName = _petName;\r\n    headstones[_headstoneTokenId].petSpecies = _petSpecies;\r\n    headstones[_headstoneTokenId].lat = _lat;\r\n    headstones[_headstoneTokenId].lng = _lng;\r\n    headstones[_headstoneTokenId].extraData = _extraData;\r\n    headstones[_headstoneTokenId].flipped = _flipped;\r\n  }\r\n\r\n  function assignHeadstoneToPlot(uint256 _plotTokenId,\r\n                                 uint256 _headstoneTokenId) public onlyOwnerOf(_plotTokenId) onlyOwnerOf(_headstoneTokenId) {\r\n    require(tokenTypes[_plotTokenId] == TokenType.Plot, \"Invalid plot token ID\");\r\n    require(tokenTypes[_headstoneTokenId] == TokenType.Headstone, \"Invalid headstone token ID\");\r\n    require(!plots[_plotTokenId].forSale, \"Plot is offered for sale\");\r\n\r\n    _assignHeadstoneToPlot(_plotTokenId, _headstoneTokenId);\r\n  }\r\n\r\n  function unassignHeadstoneFromPlot(uint256 _plotTokenId) public onlyOwnerOf(_plotTokenId) {\r\n    require(tokenTypes[_plotTokenId] == TokenType.Plot, \"Invalid plot token ID\");\r\n\r\n    _unassignHeadstoneFromPlot(_plotTokenId);\r\n  }\r\n\r\n  function assignDecorationToPlot(uint256 _plotTokenId, uint256 _decorationTokenId,\r\n                                  int16 _plotPositionX, int16 _plotPositionY, bool _flipped) public onlyOwnerOf(_plotTokenId) onlyOwnerOf(_decorationTokenId) {\r\n    require(tokenTypes[_plotTokenId] == TokenType.Plot, \"Invalid plot token ID\");\r\n    require(tokenTypes[_decorationTokenId] == TokenType.Decoration, \"Invalid decoration token ID\");\r\n    require(!plots[_plotTokenId].forSale, \"Plot is offered for sale\");\r\n\r\n    _assignDecorationToPlot(_plotTokenId, _decorationTokenId, _plotPositionX, _plotPositionY, _flipped);\r\n  }\r\n\r\n  function unassignDecorationFromPlot(uint256 _plotTokenId, uint256 _decorationTokenId) public onlyOwnerOf(_plotTokenId) {\r\n    require(tokenTypes[_plotTokenId] == TokenType.Plot, \"Invalid plot token ID\");\r\n    require(tokenTypes[_decorationTokenId] == TokenType.Decoration, \"Invalid decoration token ID\");\r\n\r\n    _unassignDecorationFromPlot(_plotTokenId, _decorationTokenId);\r\n  }\r\n\r\n  /* Public methods - plot trading */\r\n\r\n  function offerPlot(uint256 _plotTokenId, uint256 _price) public onlyOwnerOf(_plotTokenId) {\r\n    require(tokenTypes[_plotTokenId] == TokenType.Plot, \"Invalid plot token ID\");\r\n\r\n    _offerPlot(_plotTokenId, _price);\r\n  }\r\n\r\n  function batchOfferPlots(uint256[] _plotsTokensIds, uint256 _price) public {\r\n    for (uint256 i = 0; i < _plotsTokensIds.length; i++) {\r\n      offerPlot(_plotsTokensIds[i], _price);\r\n    }\r\n  }\r\n\r\n  function cancelPlotOffer(uint256 _plotTokenId) public onlyOwnerOf(_plotTokenId) {\r\n    require(plots[_plotTokenId].forSale, \"Plot is offered for sale\");\r\n\r\n    _cancelPlotOffer(_plotTokenId);\r\n  }\r\n\r\n  function buyPlot(uint256 _plotTokenId) public payable {\r\n    require(tokenTypes[_plotTokenId] == TokenType.Plot, \"Invalid plot token ID\");\r\n\r\n    address plotOwner = ownerOf(_plotTokenId);\r\n    uint256 price = plots[_plotTokenId].price;\r\n\r\n    require(plots[_plotTokenId].forSale, \"Plot is offered for sale\");\r\n    require(msg.value == price, \"Invalid tx value\");\r\n    require(msg.sender != plotOwner, \"Buyer is owner\");\r\n\r\n    tokenApprovals[_plotTokenId] = msg.sender;\r\n    safeTransferFrom(plotOwner, msg.sender, _plotTokenId);\r\n\r\n    plotOwner.transfer(msg.value);\r\n  }\r\n\r\n  /* Public methods - photo voucher */\r\n\r\n  function redeemPhotoVoucher(uint256 _photoVoucherTokenId,\r\n                              uint256 _plotTokenId) public onlyOwnerOf(_photoVoucherTokenId) onlyOwnerOf(_plotTokenId) {\r\n    require(tokenTypes[_photoVoucherTokenId] == TokenType.PhotoVoucher, \"Invalid photo voucher token ID\");\r\n    require(tokenTypes[_plotTokenId] == TokenType.Plot, \"Invalid plot token ID\");\r\n\r\n    Plot storage plot = plots[_plotTokenId];\r\n    if (plot.photoExpirationTime > now) {\r\n      plot.photoExpirationTime = plot.photoExpirationTime.add(photoVouchers[_photoVoucherTokenId].period);\r\n    } else {\r\n      plot.photoExpirationTime = now.add(photoVouchers[_photoVoucherTokenId].period);\r\n    }\r\n\r\n    _burn(msg.sender, _photoVoucherTokenId);\r\n    delete photoVouchers[_photoVoucherTokenId];\r\n    delete tokenTypes[_photoVoucherTokenId];\r\n  }\r\n\r\n  /* Owner only */\r\n\r\n  function mintSections(uint8 _num, uint8 _size) public onlyOwner {\r\n    for (uint8 i = 0; i < _num; i++) {\r\n      _mintSection(_size);\r\n    }\r\n  }\r\n\r\n  function mintHeadstones(uint8 _num, uint16 _headstoneType) public onlyOwner {\r\n    for (uint8 i = 0; i < _num; i++) {\r\n      _mintHeadstone(_headstoneType);\r\n    }\r\n  }\r\n\r\n  function mintDecorations(uint8 _num, uint16 _decorationType) public onlyOwner {\r\n    for (uint8 i = 0; i < _num; i++) {\r\n      _mintDecoration(_decorationType);\r\n    }\r\n  }\r\n\r\n  function mintPhotoVouchers(uint8 _num, uint256 _period) public onlyOwner {\r\n    for (uint8 i = 0; i < _num; i++) {\r\n      _mintPhotoVoucher(_period);\r\n    }\r\n  }\r\n\r\n  function setBaseURI(string _baseURI) public onlyOwner {\r\n    baseURI = _baseURI;\r\n  }\r\n\r\n  /* Override methods */\r\n\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public {\r\n    ERC721BasicToken.transferFrom(_from, _to, _tokenId);\r\n\r\n    if (tokenTypes[_tokenId] == TokenType.Plot) {\r\n      _cancelPlotOffer(_tokenId);\r\n      _unassignHeadstoneFromPlot(_tokenId);\r\n      _unassignAllDecorationsFromPlot(_tokenId);\r\n    } else if (tokenTypes[_tokenId] == TokenType.Headstone) {\r\n      if (headstones[_tokenId].plotTokenId != 0) {\r\n        _unassignHeadstoneFromPlot(headstones[_tokenId].plotTokenId);\r\n      }\r\n    } else if (tokenTypes[_tokenId] == TokenType.Decoration) {\r\n      if (decorations[_tokenId].plotTokenId != 0) {\r\n        _unassignDecorationFromPlot(decorations[_tokenId].plotTokenId, _tokenId);\r\n      }\r\n    } // else if PhotoVoucher: noop\r\n  }\r\n\r\n  function tokenURI(uint256 _tokenId) public view returns (string) {\r\n    return strConcat(baseURI, strConcat(\"/token/\", uint2str(_tokenId)));\r\n  }\r\n\r\n  /* Utils */\r\n\r\n  function strConcat(string _a, string _b) internal pure returns (string) {\r\n    bytes memory _ba = bytes(_a);\r\n    bytes memory _bb = bytes(_b);\r\n    string memory ab = new string(_ba.length + _bb.length);\r\n    bytes memory ba = bytes(ab);\r\n    uint k = 0;\r\n    for (uint i = 0; i < _ba.length; i++) ba[k++] = _ba[i];\r\n    for (i = 0; i < _bb.length; i++) ba[k++] = _bb[i];\r\n    return string(ba);\r\n  }\r\n\r\n  function uint2str(uint256 _i) internal pure returns (string) {\r\n    if (_i == 0) return \"0\";\r\n    uint j = _i;\r\n    uint length;\r\n    while (j != 0){\r\n      length++;\r\n      j /= 10;\r\n    }\r\n    bytes memory bstr = new bytes(length);\r\n    uint k = length - 1;\r\n    while (_i != 0){\r\n      bstr[k--] = byte(48 + _i % 10);\r\n      _i /= 10;\r\n    }\r\n    return string(bstr);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plotsDecorations\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_num\",\"type\":\"uint8\"},{\"name\":\"_headstoneType\",\"type\":\"uint16\"}],\"name\":\"mintHeadstones\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_plotTokenId\",\"type\":\"uint256\"},{\"name\":\"_decorationTokenId\",\"type\":\"uint256\"},{\"name\":\"_plotPositionX\",\"type\":\"int16\"},{\"name\":\"_plotPositionY\",\"type\":\"int16\"},{\"name\":\"_flipped\",\"type\":\"bool\"}],\"name\":\"assignDecorationToPlot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"InterfaceId_ERC165\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_num\",\"type\":\"uint8\"},{\"name\":\"_size\",\"type\":\"uint8\"}],\"name\":\"mintSections\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_section\",\"type\":\"uint32\"}],\"name\":\"getSectionPlotsDetails\",\"outputs\":[{\"components\":[{\"name\":\"plotTokenId\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"headstoneTokenId\",\"type\":\"uint256\"},{\"name\":\"forSale\",\"type\":\"bool\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"photoExpirationTime\",\"type\":\"uint256\"}],\"name\":\"plot\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"section\",\"type\":\"uint32\"},{\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"plotPosition\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"headstoneType\",\"type\":\"uint16\"},{\"name\":\"plotTokenId\",\"type\":\"uint256\"},{\"name\":\"engraving\",\"type\":\"string\"},{\"name\":\"petName\",\"type\":\"string\"},{\"name\":\"petSpecies\",\"type\":\"uint16\"},{\"name\":\"lat\",\"type\":\"uint32\"},{\"name\":\"lng\",\"type\":\"uint32\"},{\"name\":\"extraData\",\"type\":\"string\"},{\"name\":\"flipped\",\"type\":\"bool\"}],\"name\":\"headstone\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"decorationTokenId\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"decorationType\",\"type\":\"uint16\"},{\"name\":\"plotTokenId\",\"type\":\"uint256\"},{\"name\":\"plotPositionX\",\"type\":\"int16\"},{\"name\":\"plotPositionY\",\"type\":\"int16\"},{\"name\":\"flipped\",\"type\":\"bool\"},{\"name\":\"firstAssignTime\",\"type\":\"uint256\"},{\"name\":\"latestAssignTime\",\"type\":\"uint256\"},{\"name\":\"totalAssignDuration\",\"type\":\"uint256\"}],\"name\":\"decoration\",\"type\":\"tuple\"}],\"name\":\"decorations\",\"type\":\"tuple[]\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"tokenUri\",\"type\":\"string\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_num\",\"type\":\"uint8\"},{\"name\":\"_decorationType\",\"type\":\"uint16\"}],\"name\":\"mintDecorations\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_plotTokenId\",\"type\":\"uint256\"},{\"name\":\"_headstoneTokenId\",\"type\":\"uint256\"},{\"name\":\"_engraving\",\"type\":\"string\"},{\"name\":\"_petName\",\"type\":\"string\"},{\"name\":\"_petSpecies\",\"type\":\"uint16\"},{\"name\":\"_lat\",\"type\":\"uint32\"},{\"name\":\"_lng\",\"type\":\"uint32\"},{\"name\":\"_extraData\",\"type\":\"string\"},{\"name\":\"_flipped\",\"type\":\"bool\"}],\"name\":\"prepareHeadstoneAndAssignToPlot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_plotTokenId\",\"type\":\"uint256\"}],\"name\":\"getPlotDetails\",\"outputs\":[{\"components\":[{\"name\":\"plotTokenId\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"headstoneTokenId\",\"type\":\"uint256\"},{\"name\":\"forSale\",\"type\":\"bool\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"photoExpirationTime\",\"type\":\"uint256\"}],\"name\":\"plot\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"section\",\"type\":\"uint32\"},{\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"plotPosition\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"headstoneType\",\"type\":\"uint16\"},{\"name\":\"plotTokenId\",\"type\":\"uint256\"},{\"name\":\"engraving\",\"type\":\"string\"},{\"name\":\"petName\",\"type\":\"string\"},{\"name\":\"petSpecies\",\"type\":\"uint16\"},{\"name\":\"lat\",\"type\":\"uint32\"},{\"name\":\"lng\",\"type\":\"uint32\"},{\"name\":\"extraData\",\"type\":\"string\"},{\"name\":\"flipped\",\"type\":\"bool\"}],\"name\":\"headstone\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"decorationTokenId\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"decorationType\",\"type\":\"uint16\"},{\"name\":\"plotTokenId\",\"type\":\"uint256\"},{\"name\":\"plotPositionX\",\"type\":\"int16\"},{\"name\":\"plotPositionY\",\"type\":\"int16\"},{\"name\":\"flipped\",\"type\":\"bool\"},{\"name\":\"firstAssignTime\",\"type\":\"uint256\"},{\"name\":\"latestAssignTime\",\"type\":\"uint256\"},{\"name\":\"totalAssignDuration\",\"type\":\"uint256\"}],\"name\":\"decoration\",\"type\":\"tuple\"}],\"name\":\"decorations\",\"type\":\"tuple[]\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"tokenUri\",\"type\":\"string\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plots\",\"outputs\":[{\"name\":\"headstoneTokenId\",\"type\":\"uint256\"},{\"name\":\"forSale\",\"type\":\"bool\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"photoExpirationTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_num\",\"type\":\"uint8\"},{\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"mintPhotoVouchers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_plotTokenId\",\"type\":\"uint256\"}],\"name\":\"cancelPlotOffer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"headstones\",\"outputs\":[{\"name\":\"headstoneType\",\"type\":\"uint16\"},{\"name\":\"plotTokenId\",\"type\":\"uint256\"},{\"name\":\"engraving\",\"type\":\"string\"},{\"name\":\"petName\",\"type\":\"string\"},{\"name\":\"petSpecies\",\"type\":\"uint16\"},{\"name\":\"lat\",\"type\":\"uint32\"},{\"name\":\"lng\",\"type\":\"uint32\"},{\"name\":\"extraData\",\"type\":\"string\"},{\"name\":\"flipped\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_plotsTokensIds\",\"type\":\"uint256[]\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"batchOfferPlots\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_plotTokenId\",\"type\":\"uint256\"}],\"name\":\"buyPlot\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"decorations\",\"outputs\":[{\"name\":\"decorationType\",\"type\":\"uint16\"},{\"name\":\"plotTokenId\",\"type\":\"uint256\"},{\"name\":\"plotPositionX\",\"type\":\"int16\"},{\"name\":\"plotPositionY\",\"type\":\"int16\"},{\"name\":\"flipped\",\"type\":\"bool\"},{\"name\":\"firstAssignTime\",\"type\":\"uint256\"},{\"name\":\"latestAssignTime\",\"type\":\"uint256\"},{\"name\":\"totalAssignDuration\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_plotTokenId\",\"type\":\"uint256\"}],\"name\":\"photoExpirationTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_plotTokenId\",\"type\":\"uint256\"}],\"name\":\"unassignHeadstoneFromPlot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenIdCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_section\",\"type\":\"uint32\"}],\"name\":\"plotsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_plotTokenId\",\"type\":\"uint256\"},{\"name\":\"_headstoneTokenId\",\"type\":\"uint256\"}],\"name\":\"assignHeadstoneToPlot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_headstoneTokenId\",\"type\":\"uint256\"},{\"name\":\"_engraving\",\"type\":\"string\"},{\"name\":\"_petName\",\"type\":\"string\"},{\"name\":\"_petSpecies\",\"type\":\"uint16\"},{\"name\":\"_lat\",\"type\":\"uint32\"},{\"name\":\"_lng\",\"type\":\"uint32\"},{\"name\":\"_extraData\",\"type\":\"string\"},{\"name\":\"_flipped\",\"type\":\"bool\"}],\"name\":\"prepareHeadstone\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"photoVouchers\",\"outputs\":[{\"name\":\"period\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plotIdByPosition\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getOwnedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plotsPositions\",\"outputs\":[{\"name\":\"section\",\"type\":\"uint32\"},{\"name\":\"index\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_plotTokenId\",\"type\":\"uint256\"},{\"name\":\"_decorationTokenId\",\"type\":\"uint256\"}],\"name\":\"unassignDecorationFromPlot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sectionCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_photoVoucherTokenId\",\"type\":\"uint256\"},{\"name\":\"_plotTokenId\",\"type\":\"uint256\"}],\"name\":\"redeemPhotoVoucher\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_plotTokenId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"offerPlot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_baseURI\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]","ContractName":"PetCemetheryToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001f68747470733a2f2f6170702e70657463656d6574686572792e696f2f61706900","Library":"","LicenseType":"None","SwarmSource":"bzzr://a4f11276b1f6f6dc838dd8ae012eaaf7703127536188ec3715acd1fae28bfe46"}]}