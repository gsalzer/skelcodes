{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.12;\r\n\r\npragma solidity 0.5.12;\r\n\r\ncontract GemLike {\r\n    function allowance(address, address) public returns (uint);\r\n    function approve(address, uint) public;\r\n    function transfer(address, uint) public returns (bool);\r\n    function transferFrom(address, address, uint) public returns (bool);\r\n    function balanceOf(address) public returns (uint);\r\n    function deposit() public payable;\r\n    function withdraw(uint) public;\r\n}\r\n\r\ncontract SaiTubLike {\r\n    function sai() public view returns (GemLike);\r\n}\r\n\r\ncontract JoinLike {\r\n    function dai() public view returns (GemLike);\r\n}\r\n\r\ncontract OtcLike {\r\n    function sellAllAmount(address, uint, address, uint) public returns (uint);\r\n    function buyAllAmount(address, uint, address, uint) public returns (uint);\r\n    function getPayAmount(address, address, uint) public returns (uint);\r\n}\r\n\r\ncontract ScdMcdMigrationLike {\r\n    function daiJoin() public view returns (JoinLike);\r\n    function tub() public view returns (SaiTubLike);\r\n    function swapSaiToDai(uint) public;\r\n}\r\n\r\n\r\n/// math.sol -- mixin for inline numerical wizardry\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity >0.4.13;\r\n\r\ncontract DSMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\r\n    }\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\r\n    }\r\n\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function max(uint x, uint y) internal pure returns (uint z) {\r\n        return x >= y ? x : y;\r\n    }\r\n    function imin(int x, int y) internal pure returns (int z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function imax(int x, int y) internal pure returns (int z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n    //\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n    //\r\n    // These facts are why it works:\r\n    //\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n    //   and applying the equation for even x gives\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n    //\r\n    //  Also, EVM division is flooring and\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n    //\r\n    function rpow(uint x, uint n) internal pure returns (uint z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract OasisDirectMigrateProxyActions is DSMath {\r\n    function sellAllAmountAndMigrateSai(\r\n        address otc,\r\n        address daiToken,\r\n        uint daiAmt,\r\n        address buyToken,\r\n        uint minBuyAmt,\r\n        address scdMcdMigration\r\n    ) public returns (uint buyAmt) {\r\n        swapSaiToDai(scdMcdMigration, daiAmt);\r\n\r\n        if (GemLike(daiToken).allowance(address(this), otc) < daiAmt) {\r\n            GemLike(daiToken).approve(otc, uint(-1));\r\n        }\r\n        buyAmt = OtcLike(otc).sellAllAmount(daiToken, daiAmt, buyToken, minBuyAmt);\r\n        require(GemLike(buyToken).transfer(msg.sender, buyAmt), \"\");\r\n    }\r\n\r\n    function sellAllAmountBuyEthAndMigrateSai(\r\n        address otc,\r\n        address daiToken,\r\n        uint daiAmt,\r\n        address wethToken,\r\n        uint minBuyAmt,\r\n        address scdMcdMigration\r\n    ) public returns (uint wethAmt) {\r\n        swapSaiToDai(scdMcdMigration, daiAmt);\r\n\r\n        if (GemLike(daiToken).allowance(address(this), otc) < daiAmt) {\r\n            GemLike(daiToken).approve(otc, uint(-1));\r\n        }\r\n        wethAmt = OtcLike(otc).sellAllAmount(daiToken, daiAmt, wethToken, minBuyAmt);\r\n        withdrawAndSend(wethToken, wethAmt);\r\n    }\r\n\r\n    function buyAllAmountAndMigrateSai(\r\n        address otc,\r\n        address buyToken,\r\n        uint buyAmt,\r\n        address daiToken,\r\n        uint maxDaiAmt,\r\n        address scdMcdMigration\r\n    ) public returns (uint payAmt) {\r\n        uint daiAmtNow = OtcLike(otc).getPayAmount(daiToken, buyToken, buyAmt);\r\n        require(daiAmtNow <= maxDaiAmt, \"\");\r\n\r\n        swapSaiToDai(scdMcdMigration, daiAmtNow);\r\n\r\n        if (GemLike(daiToken).allowance(address(this), otc) < daiAmtNow) {\r\n            GemLike(daiToken).approve(otc, uint(-1));\r\n        }\r\n        payAmt = OtcLike(otc).buyAllAmount(address(buyToken), buyAmt, daiToken, daiAmtNow);\r\n        require(\r\n            GemLike(buyToken).transfer(msg.sender, min(buyAmt, GemLike(buyToken).balanceOf(address(this)))),\r\n            \"\"\r\n        ); // To avoid rounding issues we check the minimum value\r\n    }\r\n\r\n    function buyAllAmountBuyEthAndMigrateSai(\r\n        address otc,\r\n        address wethToken,\r\n        uint wethAmt,\r\n        address daiToken,\r\n        uint maxDaiAmt,\r\n        address scdMcdMigration\r\n    ) public returns (uint payAmt) {\r\n        uint daiAmtNow = OtcLike(otc).getPayAmount(daiToken, wethToken, wethAmt);\r\n        require(daiAmtNow <= maxDaiAmt, \"\");\r\n\r\n        swapSaiToDai(scdMcdMigration, daiAmtNow);\r\n\r\n        if (GemLike(daiToken).allowance(address(this), otc) < daiAmtNow) {\r\n            GemLike(daiToken).approve(otc, uint(-1));\r\n        }\r\n        payAmt = OtcLike(otc).buyAllAmount(wethToken, wethAmt, daiToken, daiAmtNow);\r\n        withdrawAndSend(wethToken, wethAmt);\r\n    }\r\n\r\n    // private methods\r\n    function swapSaiToDai(address scdMcdMigration, uint wad) private {\r\n        GemLike sai = ScdMcdMigrationLike(scdMcdMigration).tub().sai();\r\n        sai.transferFrom(msg.sender, address(this), wad);\r\n        if (sai.allowance(address(this), scdMcdMigration) < wad) {\r\n            sai.approve(scdMcdMigration, wad);\r\n        }\r\n        ScdMcdMigrationLike(scdMcdMigration).swapSaiToDai(wad);\r\n    }\r\n\r\n    function withdrawAndSend(address wethToken, uint wethAmt) private {\r\n        GemLike(wethToken).withdraw(wethAmt);\r\n\r\n        (bool success,) = msg.sender.call.value(wethAmt)(\"\");\r\n        require(success, \"\");\r\n    }\r\n\r\n    // required to be able to interact with ether\r\n    function() external payable { }\r\n}","ABI":"[{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"otc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"daiToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxDaiAmt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"scdMcdMigration\",\"type\":\"address\"}],\"name\":\"buyAllAmountAndMigrateSai\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payAmt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"otc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wethToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wethAmt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"daiToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxDaiAmt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"scdMcdMigration\",\"type\":\"address\"}],\"name\":\"buyAllAmountBuyEthAndMigrateSai\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payAmt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"otc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daiToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"daiAmt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minBuyAmt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"scdMcdMigration\",\"type\":\"address\"}],\"name\":\"sellAllAmountAndMigrateSai\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"otc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daiToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"daiAmt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wethToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minBuyAmt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"scdMcdMigration\",\"type\":\"address\"}],\"name\":\"sellAllAmountBuyEthAndMigrateSai\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"wethAmt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"OasisDirectMigrateProxyActions","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://b95500c527af47c483f3ea4672c234062a41b2803acc3ad7b614e96cf7f20b75"}]}