{"status":"1","message":"OK","result":[{"SourceCode":"//FIREDICE - https://fire.date/dice\r\n//Pick dice 1, dice 2, and place a minimum bet of .001 ETH\r\n//Pays x2 for total call, x8 for hard ways, x30 for snake eyes or midnight\r\n\r\npragma solidity ^0.4.23;\r\n\r\n//Randomness by Ñíguez Randomity Engine\r\n//https://niguezrandomityengine.github.io/\r\ncontract niguezRandomityEngine {\r\n\r\n  function ra() external view returns (uint256);\r\n\tfunction rb() external view returns (uint256);\r\n\tfunction rc() external view returns (uint256);\r\n\tfunction rd() external view returns (uint256);\r\n\tfunction re() external view returns (uint256);\r\n\tfunction rf() external view returns (uint256);\r\n\tfunction rg() external view returns (uint256);\r\n\tfunction rh() external view returns (uint256);\r\n\tfunction ri() external view returns (uint256);\r\n\tfunction rj() external view returns (uint256);\r\n\tfunction rk() external view returns (uint256);\r\n\tfunction rl() external view returns (uint256);\r\n\tfunction rm() external view returns (uint256);\r\n\tfunction rn() external view returns (uint256);\r\n\tfunction ro() external view returns (uint256);\r\n\tfunction rp() external view returns (uint256);\r\n\tfunction rq() external view returns (uint256);\r\n\tfunction rr() external view returns (uint256);\r\n\tfunction rs() external view returns (uint256);\r\n\tfunction rt() external view returns (uint256);\r\n\tfunction ru() external view returns (uint256);\r\n\tfunction rv() external view returns (uint256);\r\n\tfunction rw() external view returns (uint256);\r\n\tfunction rx() external view returns (uint256);\r\n}\r\n\r\ncontract usingNRE {\r\n\r\n  niguezRandomityEngine internal nre = niguezRandomityEngine(0x031eaE8a8105217ab64359D4361022d0947f4572);\r\n    \r\n  function ra() internal view returns (uint256) {\r\n        return nre.ra();\r\n    }\r\n\t\r\n\tfunction rb() internal view returns (uint256) {\r\n        return nre.rb();\r\n    }\r\n\t\r\n\tfunction rc() internal view returns (uint256) {\r\n        return nre.rc();\r\n    }\r\n\t\r\n\tfunction rd() internal view returns (uint256) {\r\n        return nre.rd();\r\n    }\r\n\t\r\n\tfunction re() internal view returns (uint256) {\r\n        return nre.re();\r\n    }\r\n\t\r\n\tfunction rf() internal view returns (uint256) {\r\n        return nre.rf();\r\n    }\r\n\t\r\n\tfunction rg() internal view returns (uint256) {\r\n        return nre.rg();\r\n    }\r\n\t\r\n\tfunction rh() internal view returns (uint256) {\r\n        return nre.rh();\r\n    }\r\n\t\r\n\tfunction ri() internal view returns (uint256) {\r\n        return nre.ri();\r\n    }\r\n\t\r\n\tfunction rj() internal view returns (uint256) {\r\n        return nre.rj();\r\n    }\r\n\t\r\n\tfunction rk() internal view returns (uint256) {\r\n        return nre.rk();\r\n    }\r\n\t\r\n\tfunction rl() internal view returns (uint256) {\r\n        return nre.rl();\r\n    }\r\n\t\r\n\tfunction rm() internal view returns (uint256) {\r\n        return nre.rm();\r\n    }\r\n\t\r\n\tfunction rn() internal view returns (uint256) {\r\n        return nre.rn();\r\n    }\r\n\t\r\n\tfunction ro() internal view returns (uint256) {\r\n        return nre.ro();\r\n    }\r\n\t\r\n\tfunction rp() internal view returns (uint256) {\r\n        return nre.rp();\r\n    }\r\n\t\r\n\tfunction rq() internal view returns (uint256) {\r\n        return nre.rq();\r\n    }\r\n\t\r\n\tfunction rr() internal view returns (uint256) {\r\n        return nre.rr();\r\n    }\r\n\t\r\n\tfunction rs() internal view returns (uint256) {\r\n        return nre.rs();\r\n    }\r\n\t\r\n\tfunction rt() internal view returns (uint256) {\r\n        return nre.rt();\r\n    }\r\n\t\r\n\tfunction ru() internal view returns (uint256) {\r\n        return nre.ru();\r\n    }\r\n\t\r\n\tfunction rv() internal view returns (uint256) {\r\n        return nre.rv();\r\n    }\r\n\t\r\n\tfunction rw() internal view returns (uint256) {\r\n        return nre.rw();\r\n    }\r\n\t\r\n\tfunction rx() internal view returns (uint256) {\r\n        return nre.rx();\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n  address owner;\r\n  constructor() public {\r\n  owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner {\r\n  require(msg.sender == owner);\r\n  _;\r\n  }\r\n}\r\n\r\n  contract Mortal is Ownable {\r\n  function kill() public onlyOwner {\r\n  selfdestruct(owner);\r\n  }\r\n}\r\n\r\n  contract FIREDICE is Mortal, usingNRE{\r\n  uint minBet = 1000000000000000; //.001 ETH minimum bet \r\n\r\n  event Roll(bool _won, uint256 _dice1, uint256 _dice2, uint256 _roll1, uint256 _roll2, uint _amount);\r\n\r\n  constructor() payable public {}\r\n\r\n  function() public { //fallback\r\n    revert();\r\n  }\r\n\r\n  function bet(uint _diceOne, uint _diceTwo) payable public {\r\n    require(_diceOne > 0 && _diceOne <= 6);\r\n    require(_diceTwo > 0 && _diceTwo <= 6);\r\n    require(msg.value >= minBet);\r\n    uint256 rollone = ra() % 6 + 1;\r\n    uint256 rolltwo = rx() % 6 + 1;\r\n    uint256 totalroll = rollone + rolltwo;\r\n    uint256 totaldice = _diceOne + _diceTwo;\r\n    if (totaldice == totalroll) {\r\n      uint amountWon = msg.value*2;//Pays double for total call\r\n      if(rollone==rolltwo && _diceOne==_diceTwo) amountWon = msg.value*8;//Pays x8 for hard ways\r\n      if(totalroll==2 || totalroll==12) amountWon = msg.value*30;//Pays x30 for 11 or 66\r\n      if(!msg.sender.send(amountWon)) revert();\r\n      emit Roll(true, _diceOne, _diceTwo, rollone, rolltwo, amountWon);\r\n    }\r\n    else {\r\n      emit Roll(false, _diceOne, _diceTwo, rollone, rolltwo, 0);\r\n    }\r\n  }\r\n\r\n  function checkContractBalance() public view returns(uint) {\r\n    return address(this).balance;\r\n  }\r\n\r\n  //Withdrawal function\r\n  function collect(uint _amount) public onlyOwner {\r\n    require(address(this).balance > _amount);\r\n    owner.transfer(_amount);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_diceOne\",\"type\":\"uint256\"},{\"name\":\"_diceTwo\",\"type\":\"uint256\"}],\"name\":\"bet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"collect\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_won\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_dice1\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_dice2\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_roll1\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_roll2\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Roll\",\"type\":\"event\"}]","ContractName":"FIREDICE","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://57bd5237da51480ca3a732c45c3bcc9ba9822d0a4680f9353330b00b49df7cc3"}]}