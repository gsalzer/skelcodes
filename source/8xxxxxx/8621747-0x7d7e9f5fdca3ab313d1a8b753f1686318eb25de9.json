{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.2;\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract nota { \r\n    \r\naddress owner;\r\n\r\nbool votefinish;\r\n\r\n    struct Voter {\r\n        bool voted;\r\n        bool whitelist;\r\n    }\r\nstruct candidate {\r\n        string name;\r\n        uint256 voteCount;\r\n    }\r\n\r\nmapping(address => Voter) voter;\r\nmapping(string => candidate) candidates;\r\n// uint256 coa = 0;\r\nuint256 setupcheck = 1;\r\nstring[] candiname;\r\nfunction setup (address[] memory _addresses, uint256 countofaddress, string[] memory _candidate, uint256 countofcandidate) public {\r\n    if(setupcheck == 1){\r\n    // coa = countofaddress;\r\n    owner = msg.sender;\r\n    for(uint i=0; i<countofaddress; i++){\r\n        voter[_addresses[i]].voted = false;\r\n        voter[_addresses[i]].whitelist = true;\r\n    }\r\n    for(uint i=0; i<countofcandidate; i++){\r\n        // _candidate[i] = candiname[i];\r\n        candidates[_candidate[i]] = candidate(_candidate[i], 0);\r\n        // candidates[_candidate[i]].name = _candidate[i];\r\n        // candidates[_candidate[i]].voteCount = 0;\r\n    }\r\n        setupcheck = 0;\r\n    }\r\n}\r\n\r\nmodifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\nfunction isRegistered() public view returns (bool registered) {\r\n    if(voter[msg.sender].whitelist == true)\r\n        registered = true;\r\n    else\r\n        registered = false;\r\n    return registered;\r\n}\r\n\r\nfunction vote(string memory votetocandidate) public {\r\n    if(votefinish != true && isRegistered() == true && voter[msg.sender].voted == false){\r\n    candidates[votetocandidate].voteCount ++;\r\n    voter[msg.sender].voted = true;\r\n    }\r\n    else{\r\n\r\n    }\r\n}\r\nfunction checkvote() public view returns (bool) {\r\n    return voter[msg.sender].voted;\r\n}\r\nfunction endvote() public onlyOwner{\r\nvotefinish = true;\r\n}\r\n\r\nfunction getdata() public view returns (uint256, uint256, uint256, uint256, uint256){\r\nreturn (candidates[\"James Lee\"].voteCount , candidates[\"Mark Kim\"].voteCount , candidates[\"Jun Park\"].voteCount , candidates[\"Yuna Lim\"].voteCount , candidates[\"Olivia Ha\"].voteCount  );\r\n}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"isRegistered\",\"outputs\":[{\"name\":\"registered\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getdata\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endvote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"countofaddress\",\"type\":\"uint256\"},{\"name\":\"_candidate\",\"type\":\"string[]\"},{\"name\":\"countofcandidate\",\"type\":\"uint256\"}],\"name\":\"setup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkvote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"votetocandidate\",\"type\":\"string\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"nota","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"Unlicense","SwarmSource":"bzzr://313ce64e2fd62d7c4e36eed5e94f086ae16c4514d44ebeee33165e6017e7b0d4"}]}