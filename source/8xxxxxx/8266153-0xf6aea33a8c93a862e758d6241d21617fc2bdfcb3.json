{"status":"1","message":"OK","result":[{"SourceCode":"\npragma solidity ^0.4.25;\n\n/**\n * EtherDice - fully transparent and decentralized betting\n * \n * Winning chance: 50%\n * Winning bet pays: 1.98x\n *\n *\n * Recommended gas limit: 200000\n * Recommended gas price: https://ethgasstation.info/\n */\ncontract EtherDice {\n    \n    address public constant OWNER = 0x99F74F64844dEBeeACcEDaBC8f3d69096880d951;\n    address public constant MANAGER = 0xFEa76DE950872fb2238Ee0dE20Ac562D84b9A2f3;\n    uint constant public FEE_PERCENT = 1;\n    \n    uint public minBet;\n    uint public maxBet;\n    uint public currentIndex;\n    uint public lockBalance;\n    uint public betsOfBlock;\n    uint entropy;\n    \n    struct Bet {\n        address player;\n        uint deposit;\n        uint block;\n    }\n\n    Bet[] public bets;\n\n    event PlaceBet(uint num, address player, uint bet, uint payout, uint roll, uint time);\n\n    // Modifier on methods invokable only by contract owner and manager\n    modifier onlyOwner {\n        require(OWNER == msg.sender || MANAGER == msg.sender);\n        _;\n    }\n\n    // This function called every time anyone sends a transaction to this contract\n    function() public payable {\n        if (msg.value > 0) {\n            createBet(msg.sender, msg.value);\n        }\n        \n        placeBets();\n    }\n    \n    // Records a new bet to the public storage\n    function createBet(address _player, uint _deposit) internal {\n        \n        require(_deposit >= minBet && _deposit <= maxBet); // check deposit limits\n        \n        uint lastBlock = bets.length > 0 ? bets[bets.length-1].block : 0;\n        \n        require(block.number != lastBlock || betsOfBlock < 50); // maximum 50 bets per block\n        \n        uint fee = _deposit * FEE_PERCENT / 100;\n        uint betAmount = _deposit - fee; \n        \n        require(betAmount * 2 + fee <= address(this).balance - lockBalance); // profit check\n        \n        sendOwner(fee);\n        \n        betsOfBlock = block.number != lastBlock ? 1 : betsOfBlock + 1;\n        lockBalance += betAmount * 2;\n        bets.push(Bet(_player, _deposit, block.number));\n    }\n\n    // process all the bets of previous players\n    function placeBets() internal {\n        \n        for (uint i = currentIndex; i < bets.length; i++) {\n            \n            Bet memory bet = bets[i];\n            \n            if (bet.block < block.number) {\n                \n                uint betAmount = bet.deposit - bet.deposit * FEE_PERCENT / 100;\n                lockBalance -= betAmount * 2;\n\n                // Bets made more than 256 blocks ago are considered failed - this has to do\n                // with EVM limitations on block hashes that are queryable \n                if (block.number - bet.block <= 256) {\n                    entropy = uint(keccak256(abi.encodePacked(blockhash(bet.block), entropy)));\n                    uint roll = entropy % 100 + 1;\n                    uint payout = roll < 51 ? betAmount * 2 : 0;\n                    send(bet.player, payout);\n                    emit PlaceBet(i + 1, bet.player, bet.deposit, payout, roll, now); \n                }\n            } else {\n                break;\n            }\n        }\n        \n        currentIndex = i;\n    }\n    \n    // Safely sends the ETH by the passed parameters\n    function send(address _receiver, uint _amount) internal {\n        if (_amount > 0 && _receiver != address(0)) {\n            _receiver.transfer(_amount);\n        }\n    }\n    \n    // Sends funds to the owner and manager\n    function sendOwner(uint _amount) internal {\n        send(OWNER, _amount * 7 / 10);\n        send(MANAGER, _amount * 3 / 10);\n    }\n    \n    // Funds withdrawal\n    function withdraw(uint _amount) public onlyOwner {\n        require(_amount <= address(this).balance - lockBalance);\n        sendOwner(_amount);\n    }\n    \n    // Set limits for deposits\n    function configure(uint _minBet, uint _maxBet) onlyOwner public {\n        require(_minBet >= 0.001 ether && _minBet <= _maxBet);\n        minBet = _minBet;\n        maxBet = _maxBet;\n    }\n\n    // This function deliberately left empty. It's primary use case is to top up the bank roll\n    function deposit() public payable {}\n    \n    // Returns the number of bets created\n    function totalBets() public view returns(uint) {\n        return bets.length;\n    }\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"OWNER\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MANAGER\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bets\",\"outputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"deposit\",\"type\":\"uint256\"},{\"name\":\"block\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minBet\",\"type\":\"uint256\"},{\"name\":\"_maxBet\",\"type\":\"uint256\"}],\"name\":\"configure\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FEE_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"betsOfBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"num\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bet\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"roll\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"PlaceBet\",\"type\":\"event\"}]","ContractName":"EtherDice","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4d0c0a52a7b5fd80b0acf388e5c3dcd694675355c6a2d94a0e28bceb7d2f093e"}]}