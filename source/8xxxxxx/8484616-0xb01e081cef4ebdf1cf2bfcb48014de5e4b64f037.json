{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\nThis contract is for on-chain governance of Autonomous System Research (ASResearch). All the fundings and benefits of ASResearch will be managed by this multi-signed smart contract and distributed per its on-chain governance rules.  Learn more about ASResearch at https://asresearch.io/\r\n*/\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\ncontract MultiSig{\r\n\r\n  struct invoke_status{\r\n    uint propose_height;\r\n    bytes32 invoke_hash;\r\n    string func_name;\r\n    uint64 invoke_id;\r\n    bool called;\r\n    address[] invoke_signers;\r\n    bool processing;\r\n    bool exists;\r\n  }\r\n\r\n  uint public signer_number;\r\n  address[] public signers;\r\n  address public owner;\r\n  mapping (bytes32 => invoke_status) public invokes;\r\n  mapping (bytes32 => uint64) public used_invoke_ids;\r\n  mapping(address => uint) public signer_join_height;\r\n\r\n  event signers_reformed(address[] old_signers, address[] new_signers);\r\n  event valid_function_sign(string name, uint64 id, uint64 current_signed_number, uint propose_height);\r\n  event function_called(string name, uint64 id, uint propose_height);\r\n\r\n  modifier enough_signers(address[] memory s){\r\n    require(s.length >=3, \"the number of signers must be >=3\");\r\n    _;\r\n  }\r\n  constructor(address[] memory s) public enough_signers(s){\r\n    signers = s;\r\n    signer_number = s.length;\r\n    owner = msg.sender;\r\n    for(uint i = 0; i < s.length; i++){\r\n      signer_join_height[s[i]] = block.number;\r\n    }\r\n  }\r\n\r\n  modifier only_signer{\r\n    require(array_exist(signers, msg.sender), \"only a signer can call this\");\r\n    _;\r\n  }\r\n\r\n  function get_majority_number() private view returns(uint){\r\n    return signer_number/2 + 1;\r\n  }\r\n\r\n  function array_exist (address[] memory accounts, address p) private pure returns (bool){\r\n    for (uint i = 0; i< accounts.length;i++){\r\n      if (accounts[i]==p){\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function is_all_minus_sig(uint number, uint64 id, string memory name, bytes32 hash, address sender) internal only_signer returns (bool){\r\n    bytes32 b = keccak256(abi.encodePacked(name));\r\n    require(id <= used_invoke_ids[b] + 1, \"you're using a too big id.\");\r\n\r\n    if(id > used_invoke_ids[b]){\r\n      used_invoke_ids[b] = id;\r\n    }\r\n\r\n    if(!invokes[hash].exists){\r\n      invokes[hash].propose_height = block.number;\r\n      invokes[hash].invoke_hash = hash;\r\n      invokes[hash].func_name= name;\r\n      invokes[hash].invoke_id= id;\r\n      invokes[hash].called= false;\r\n      invokes[hash].invoke_signers.push(sender);\r\n      invokes[hash].processing= false;\r\n      invokes[hash].exists= true;\r\n      emit valid_function_sign(name, id, 1, block.number);\r\n      return false;\r\n    }\r\n\r\n    invoke_status storage invoke = invokes[hash];\r\n    require(!array_exist(invoke.invoke_signers, sender), \"you already called this method\");\r\n\r\n    uint valid_invoke_num = 0;\r\n    uint join_height = signer_join_height[msg.sender];\r\n    for(uint i = 0; i < invoke.invoke_signers.length; i++){\r\n      require(join_height < invoke.propose_height, \"this proposal is already exist before you become a signer\");\r\n      if(array_exist(signers, invoke.invoke_signers[i])){\r\n        valid_invoke_num ++;\r\n      }\r\n    }\r\n    invoke.invoke_signers.push(msg.sender);\r\n    valid_invoke_num ++;\r\n    emit valid_function_sign(name, id, uint64(valid_invoke_num), invoke.propose_height);\r\n    if(invoke.called) return false;\r\n    if(valid_invoke_num < signer_number-number) return false;\r\n    invoke.processing = true;\r\n    return true;\r\n  }\r\n\r\n  modifier is_majority_sig(uint64 id, string memory name) {\r\n    bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));\r\n    if(!is_all_minus_sig(get_majority_number()-1, id, name, hash, msg.sender))\r\n      return ;\r\n    set_called(hash);\r\n    _;\r\n  }\r\n\r\n  modifier is_all_sig(uint64 id, string memory name) {\r\n    bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));\r\n    if(!is_all_minus_sig(0, id, name, hash, msg.sender)) return ;\r\n    set_called(hash);\r\n    _;\r\n  }\r\n\r\n  function set_called(bytes32 hash) internal only_signer{\r\n    invoke_status storage invoke = invokes[hash];\r\n    require(invoke.exists, \"no such function\");\r\n    require(!invoke.called, \"already called\");\r\n    require(invoke.processing, \"cannot call this separately\");\r\n    invoke.called = true;\r\n    invoke.processing = false;\r\n    emit function_called(invoke.func_name, invoke.invoke_id, invoke.propose_height);\r\n  }\r\n\r\n  function reform_signers(uint64 id, address[] calldata s)\r\n    external\r\n    only_signer\r\n    enough_signers(s)\r\n    is_majority_sig(id, \"reform_signers\"){\r\n    address[] memory old_signers = signers;\r\n    for(uint i = 0; i < s.length; i++){\r\n      if(array_exist(old_signers, s[i])){\r\n      }else{\r\n        signer_join_height[s[i]] = block.number;\r\n      }\r\n    }\r\n    for(uint i = 0; i < old_signers.length; i++){\r\n      if(array_exist(s, old_signers[i])){\r\n      }else{\r\n        signer_join_height[old_signers[i]] = 0;\r\n      }\r\n    }\r\n    signer_number = s.length;\r\n    signers = s;\r\n    emit signers_reformed(old_signers, signers);\r\n  }\r\n\r\n  function get_unused_invoke_id(string memory name) public view returns(uint64){\r\n    return used_invoke_ids[keccak256(abi.encodePacked(name))] + 1;\r\n  }\r\n  function get_signers() public view returns(address[] memory){\r\n    return signers;\r\n  }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// 'RDS' 'ResearchDAOShare' token contract\r\n//\r\n// Symbol      : RDS\r\n// Name        : ResearchDAOShare\r\n// Total supply: Generated from contributions\r\n// Decimals    : 3\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract SafeMath {\r\n    function safeAdd(uint a, uint b) public pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function safeSub(uint a, uint b) public pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function safeMul(uint a, uint b) public pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function safeDiv(uint a, uint b) public pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\ncontract ResearchDAOShare is ERC20Interface, Owned, SafeMath, MultiSig {\r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals;\r\n    uint public _totalSupply;\r\n    uint public last_block_num;\r\n    uint public period_block_num;\r\n    uint public period_share;\r\n    uint public total_alloc_share;\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n\r\n    mapping(address => uint) public share_amounts;\r\n    address[] shareholders;\r\n\r\n    event IssueShare(address account, uint amount);\r\n\r\n\r\n    constructor(uint start_block_num, uint period, uint share_per_period, address[] memory s) MultiSig(s) public {\r\n        symbol = \"RDS\";\r\n        name = \"ResearchDAOShare\";\r\n        decimals = 3;\r\n        _totalSupply = 0;\r\n        last_block_num = start_block_num;\r\n        balances[owner] = _totalSupply;\r\n        period_block_num = period;\r\n        period_share = share_per_period;\r\n\r\n        emit Transfer(address(0), owner, _totalSupply);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint) {\r\n        return _totalSupply  - balances[address(0)];\r\n    }\r\n\r\n\r\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from token owner's account to `to` account\r\n    // - Owner's account must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\r\n        balances[to] = safeAdd(balances[to], tokens);\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account\r\n    //\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n    // recommends that there are no checks for the approval double-spend attack\r\n    // as this should be implemented in user interfaces\r\n    // ------------------------------------------------------------------------\r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer `tokens` from the `from` account to the `to` account\r\n    //\r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n    // for spending from the `from` account and\r\n    // - From account must have sufficient balance to transfer\r\n    // - Spender must have sufficient allowance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        balances[from] = safeSub(balances[from], tokens);\r\n        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\r\n        balances[to] = safeAdd(balances[to], tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ------------------------------------------------------------------------\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n    function issue() public {\r\n      uint interval = safeSub(block.number, last_block_num);\r\n      uint periods = safeDiv(interval, period_block_num);\r\n      if(periods == 0) return ;\r\n\r\n      last_block_num = safeAdd(last_block_num, safeMul(periods, period_block_num));\r\n      uint total_allocation = get_total_allocation();\r\n      uint total_shares = safeMul(periods, period_share);\r\n      for(uint i = 0; i < shareholders.length; i++){\r\n        if(share_amounts[shareholders[i]] == 0) continue;\r\n        uint t = safeDiv(safeMul(share_amounts[shareholders[i]], total_shares), total_allocation);\r\n        balances[shareholders[i]] = safeAdd(balances[shareholders[i]], t);\r\n        _totalSupply = safeAdd(_totalSupply, t);\r\n        emit IssueShare(shareholders[i], t);\r\n      }\r\n    }\r\n\r\n    function shareholder_exists(address account) private view returns(bool){\r\n        bool exists = false;\r\n        for(uint i = 0; i < shareholders.length; i++){\r\n          if(shareholders[i] == account){\r\n            exists = true;\r\n            break;\r\n          }\r\n        }\r\n        return exists;\r\n    }\r\n\r\n    function add_shareholder(uint64 id, address account, uint amount)\r\n      external\r\n      only_signer\r\n      is_majority_sig(id, \"add_shareholder\")\r\n    {\r\n      require(amount > 0);\r\n      require(account != address(0));\r\n      require(!shareholder_exists(account));\r\n\r\n      issue();\r\n\r\n      shareholders.push(account);\r\n      share_amounts[account] = amount;\r\n      total_alloc_share = safeAdd(total_alloc_share, amount);\r\n    }\r\n\r\n    function config_shareholder(uint64 id, address account, uint amount)\r\n      external\r\n      only_signer\r\n      is_majority_sig(id, \"config_shareholder\")\r\n    {\r\n        require(account != address(0));\r\n        require(amount > 0);\r\n        require(shareholder_exists(account));\r\n\r\n        issue();\r\n\r\n        total_alloc_share = safeSub(total_alloc_share, share_amounts[account]);\r\n        total_alloc_share = safeAdd(total_alloc_share, amount);\r\n        share_amounts[account] = amount;\r\n    }\r\n\r\n    function add_shareholders(uint64 id, address[] calldata accounts, uint[] calldata amounts)\r\n      external\r\n      only_signer\r\n      is_majority_sig(id, \"add_shareholders\")\r\n    {\r\n      require(accounts.length == amounts.length);\r\n      require(accounts.length != 0);\r\n\r\n      issue();\r\n\r\n      for(uint i = 0; i < accounts.length; i++){\r\n        if(accounts[i] == address(0)){continue;}\r\n        if(amounts[i] <=0) continue;\r\n        if(shareholder_exists(accounts[i])){continue;}\r\n\r\n        shareholders.push(accounts[i]);\r\n        share_amounts[accounts[i]] = amounts[i];\r\n        total_alloc_share = safeAdd(total_alloc_share, amounts[i]);\r\n      }\r\n    }\r\n\r\n    function get_total_allocation() public view returns(uint total){\r\n      return total_alloc_share;\r\n    }\r\n\r\n    function get_self_share() public view returns(uint){\r\n      return share_amounts[msg.sender];\r\n    }\r\n\r\n    function set_issue_period_param(uint64 id, uint block_num, uint share)\r\n      external\r\n      only_signer\r\n      is_majority_sig(id, \"set_issue_period_param\")\r\n    {\r\n      require(block_num > 0);\r\n      require(share > 0);\r\n      issue();\r\n      period_block_num = block_num;\r\n      period_share = share;\r\n    }\r\n\r\n    function get_shareholders_count() public view returns(uint){\r\n      return shareholders.length;\r\n    }\r\n\r\n    function get_shareholder_amount_with_index(uint index) public view only_signer returns(address account, uint amount) {\r\n      require(index>=0 && index<shareholders.length);\r\n      return (shareholders[index], share_amounts[shareholders[index]]);\r\n    }\r\n\r\n    function get_shareholder_amount_with_account(address account) public view only_signer returns(uint amount){\r\n      return share_amounts[account];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"last_block_num\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"get_shareholder_amount_with_account\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"signers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint64\"},{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"add_shareholder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_self_share\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"invokes\",\"outputs\":[{\"name\":\"propose_height\",\"type\":\"uint256\"},{\"name\":\"invoke_hash\",\"type\":\"bytes32\"},{\"name\":\"func_name\",\"type\":\"string\"},{\"name\":\"invoke_id\",\"type\":\"uint64\"},{\"name\":\"called\",\"type\":\"bool\"},{\"name\":\"processing\",\"type\":\"bool\"},{\"name\":\"exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"get_shareholder_amount_with_index\",\"outputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_alloc_share\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"period_block_num\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_signers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"used_invoke_ids\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint64\"},{\"name\":\"accounts\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"add_shareholders\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_shareholders_count\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"period_share\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeSub\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeDiv\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signer_number\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"get_unused_invoke_id\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint64\"},{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"config_shareholder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeMul\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"issue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint64\"},{\"name\":\"s\",\"type\":\"address[]\"}],\"name\":\"reform_signers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint64\"},{\"name\":\"block_num\",\"type\":\"uint256\"},{\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"set_issue_period_param\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"share_amounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_total_allocation\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"signer_join_height\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeAdd\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"start_block_num\",\"type\":\"uint256\"},{\"name\":\"period\",\"type\":\"uint256\"},{\"name\":\"share_per_period\",\"type\":\"uint256\"},{\"name\":\"s\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"IssueShare\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"old_signers\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"new_signers\",\"type\":\"address[]\"}],\"name\":\"signers_reformed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"current_signed_number\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"propose_height\",\"type\":\"uint256\"}],\"name\":\"valid_function_sign\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"propose_height\",\"type\":\"uint256\"}],\"name\":\"function_called\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ResearchDAOShare","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000007b0624000000000000000000000000000000000000000000000000000000000002cfec0000000000000000000000000000000000000000000000000000000000000834000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000030000000000000000000000004aa66237b79d0b9be8f6fe9e416d3975d480ec200000000000000000000000003bde508f42130c7f87714a2219a9969cbad1e6a200000000000000000000000057955d7aa271dbdde92d67e0ef52d90c6e4089ca","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://176540bb5f5aec5819b7577d343cf8b5f5b55cb28f1d6f8a1189a8ea345da1f8"}]}