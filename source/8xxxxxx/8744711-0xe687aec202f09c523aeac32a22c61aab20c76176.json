{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n\r\n    Copyright 2019 The Hydro Protocol Foundation\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n        http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\npragma solidity 0.5.8;\r\npragma experimental ABIEncoderV2;\r\nlibrary Decimal {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 constant BASE = 10**18;\r\n\r\n    function one()\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return BASE;\r\n    }\r\n\r\n    function onePlus(\r\n        uint256 d\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return d.add(BASE);\r\n    }\r\n\r\n    function mulFloor(\r\n        uint256 target,\r\n        uint256 d\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return target.mul(d) / BASE;\r\n    }\r\n\r\n    function mulCeil(\r\n        uint256 target,\r\n        uint256 d\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return target.mul(d).divCeil(BASE);\r\n    }\r\n\r\n    function divFloor(\r\n        uint256 target,\r\n        uint256 d\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return target.mul(BASE).div(d);\r\n    }\r\n\r\n    function divCeil(\r\n        uint256 target,\r\n        uint256 d\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return target.mul(BASE).divCeil(d);\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /** @dev The Ownable constructor sets the original `owner` of the contract to the sender account. */\r\n    constructor()\r\n        internal\r\n    {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /** @return the address of the owner. */\r\n    function owner()\r\n        public\r\n        view\r\n        returns(address)\r\n    {\r\n        return _owner;\r\n    }\r\n\r\n    /** @dev Throws if called by any account other than the owner. */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"NOT_OWNER\");\r\n        _;\r\n    }\r\n\r\n    /** @return true if `msg.sender` is the owner of the contract. */\r\n    function isOwner()\r\n        public\r\n        view\r\n        returns(bool)\r\n    {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /** @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership()\r\n        public\r\n        onlyOwner\r\n    {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /** @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(\r\n        address newOwner\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(newOwner != address(0), \"INVALID_OWNER\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    // Multiplies two numbers, reverts on overflow.\r\n    function mul(\r\n        uint256 a,\r\n        uint256 b\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"MUL_ERROR\");\r\n\r\n        return c;\r\n    }\r\n\r\n    // Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    function div(\r\n        uint256 a,\r\n        uint256 b\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(b > 0, \"DIVIDING_ERROR\");\r\n        return a / b;\r\n    }\r\n\r\n    function divCeil(\r\n        uint256 a,\r\n        uint256 b\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 quotient = div(a, b);\r\n        uint256 remainder = a - quotient * b;\r\n        if (remainder > 0) {\r\n            return quotient + 1;\r\n        } else {\r\n            return quotient;\r\n        }\r\n    }\r\n\r\n    // Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(b <= a, \"SUB_ERROR\");\r\n        return a - b;\r\n    }\r\n\r\n    function sub(\r\n        int256 a,\r\n        uint256 b\r\n    )\r\n        internal\r\n        pure\r\n        returns (int256)\r\n    {\r\n        require(b <= 2**255-1, \"INT256_SUB_ERROR\");\r\n        int256 c = a - int256(b);\r\n        require(c <= a, \"INT256_SUB_ERROR\");\r\n        return c;\r\n    }\r\n\r\n    // Adds two numbers, reverts on overflow.\r\n    function add(\r\n        uint256 a,\r\n        uint256 b\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"ADD_ERROR\");\r\n        return c;\r\n    }\r\n\r\n    function add(\r\n        int256 a,\r\n        uint256 b\r\n    )\r\n        internal\r\n        pure\r\n        returns (int256)\r\n    {\r\n        require(b <= 2**255 - 1, \"INT256_ADD_ERROR\");\r\n        int256 c = a + int256(b);\r\n        require(c >= a, \"INT256_ADD_ERROR\");\r\n        return c;\r\n    }\r\n\r\n    // Divides two numbers and returns the remainder (unsigned integer modulo), reverts when dividing by zero.\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(b != 0, \"MOD_ERROR\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * Check the amount of precision lost by calculating multiple * (numerator / denominator). To\r\n     * do this, we check the remainder and make sure it's proportionally less than 0.1%. So we have:\r\n     *\r\n     *     ((numerator * multiple) % denominator)     1\r\n     *     -------------------------------------- < ----\r\n     *              numerator * multiple            1000\r\n     *\r\n     * To avoid further division, we can move the denominators to the other sides and we get:\r\n     *\r\n     *     ((numerator * multiple) % denominator) * 1000 < numerator * multiple\r\n     *\r\n     * Since we want to return true if there IS a rounding error, we simply flip the sign and our\r\n     * final equation becomes:\r\n     *\r\n     *     ((numerator * multiple) % denominator) * 1000 >= numerator * multiple\r\n     *\r\n     * @param numerator The numerator of the proportion\r\n     * @param denominator The denominator of the proportion\r\n     * @param multiple The amount we want a proportion of\r\n     * @return Boolean indicating if there is a rounding error when calculating the proportion\r\n     */\r\n    function isRoundingError(\r\n        uint256 numerator,\r\n        uint256 denominator,\r\n        uint256 multiple\r\n    )\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        // numerator.mul(multiple).mod(denominator).mul(1000) >= numerator.mul(multiple)\r\n        return mul(mod(mul(numerator, multiple), denominator), 1000) >= mul(numerator, multiple);\r\n    }\r\n\r\n    /**\r\n     * Takes an amount (multiple) and calculates a proportion of it given a numerator/denominator\r\n     * pair of values. The final value will be rounded down to the nearest integer value.\r\n     *\r\n     * This function will revert the transaction if rounding the final value down would lose more\r\n     * than 0.1% precision.\r\n     *\r\n     * @param numerator The numerator of the proportion\r\n     * @param denominator The denominator of the proportion\r\n     * @param multiple The amount we want a proportion of\r\n     * @return The final proportion of multiple rounded down\r\n     */\r\n    function getPartialAmountFloor(\r\n        uint256 numerator,\r\n        uint256 denominator,\r\n        uint256 multiple\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(!isRoundingError(numerator, denominator, multiple), \"ROUNDING_ERROR\");\r\n        // numerator.mul(multiple).div(denominator)\r\n        return div(mul(numerator, multiple), denominator);\r\n    }\r\n\r\n    /**\r\n     * Returns the smaller integer of the two passed in.\r\n     *\r\n     * @param a Unsigned integer\r\n     * @param b Unsigned integer\r\n     * @return The smaller of the two integers\r\n     */\r\n    function min(\r\n        uint256 a,\r\n        uint256 b\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\ncontract FeedPriceOracle is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    address public asset;\r\n    uint256 public price;\r\n    uint256 public lastBlockNumber;\r\n    uint256 public validBlockNumber;\r\n    uint256 public maxChangeRate;\r\n    uint256 public minPrice;\r\n    uint256 public maxPrice;\r\n\r\n    event PriceFeed(\r\n        uint256 price,\r\n        uint256 blockNumber\r\n    );\r\n\r\n    constructor (\r\n        address _asset,\r\n        uint256 _validBlockNumber,\r\n        uint256 _maxChangeRate,\r\n        uint256 _minPrice,\r\n        uint256 _maxPrice\r\n    )\r\n        public\r\n    {\r\n        asset = _asset;\r\n\r\n        setParams(\r\n            _validBlockNumber,\r\n            _maxChangeRate,\r\n            _minPrice,\r\n            _maxPrice\r\n        );\r\n    }\r\n\r\n    function setParams(\r\n        uint256 _validBlockNumber,\r\n        uint256 _maxChangeRate,\r\n        uint256 _minPrice,\r\n        uint256 _maxPrice\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(_minPrice <= _maxPrice, \"MIN_PRICE_MUST_LESS_OR_EQUAL_THAN_MAX_PRICE\");\r\n        validBlockNumber = _validBlockNumber;\r\n        maxChangeRate = _maxChangeRate;\r\n        minPrice = _minPrice;\r\n        maxPrice = _maxPrice;\r\n    }\r\n\r\n    function feed(\r\n        uint256 newPrice\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(newPrice > 0, \"PRICE_MUST_GREATER_THAN_0\");\r\n        require(lastBlockNumber < block.number, \"BLOCKNUMBER_WRONG\");\r\n        require(newPrice <= maxPrice, \"PRICE_EXCEED_MAX_LIMIT\");\r\n        require(newPrice >= minPrice, \"PRICE_EXCEED_MIN_LIMIT\");\r\n\r\n        if (price > 0) {\r\n            uint256 changeRate = Decimal.divFloor(newPrice, price);\r\n            if (changeRate > Decimal.one()) {\r\n                changeRate = changeRate.sub(Decimal.one());\r\n            } else {\r\n                changeRate = Decimal.one().sub(changeRate);\r\n            }\r\n            require(changeRate <= maxChangeRate, \"PRICE_CHANGE_RATE_EXCEED\");\r\n        }\r\n\r\n        price = newPrice;\r\n        lastBlockNumber = block.number;\r\n\r\n        emit PriceFeed(price, lastBlockNumber);\r\n    }\r\n\r\n    function getPrice(\r\n        address _asset\r\n    )\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(asset == _asset, \"ASSET_NOT_MATCH\");\r\n        require(block.number.sub(lastBlockNumber) <= validBlockNumber, \"PRICE_EXPIRED\");\r\n        return price;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"lastBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_validBlockNumber\",\"type\":\"uint256\"},{\"name\":\"_maxChangeRate\",\"type\":\"uint256\"},{\"name\":\"_minPrice\",\"type\":\"uint256\"},{\"name\":\"_maxPrice\",\"type\":\"uint256\"}],\"name\":\"setParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxChangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"feed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"validBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_asset\",\"type\":\"address\"},{\"name\":\"_validBlockNumber\",\"type\":\"uint256\"},{\"name\":\"_maxChangeRate\",\"type\":\"uint256\"},{\"name\":\"_minPrice\",\"type\":\"uint256\"},{\"name\":\"_maxPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"PriceFeed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"FeedPriceOracle","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000000000000000000000000000000000000000007530000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000000000000000000b5c0e8d21d902d61fa0000000000000000000000000000000000000000000000de24aac7eb3e705b4e0000000","Library":"","LicenseType":"Apache-2.0","SwarmSource":"bzzr://5a3a26278a69fef52a915dd2a785a0179bfc96070487069cc7df8f31679cd3d1"}]}