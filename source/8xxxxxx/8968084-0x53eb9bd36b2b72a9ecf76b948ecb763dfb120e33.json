{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.7;\r\n\r\ninterface ERC20Interface {\r\n    function allowance(address, address) external view returns (uint);\r\n    function balanceOf(address) external view returns (uint);\r\n    function approve(address, uint) external;\r\n    function transfer(address, uint) external returns (bool);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n}\r\n\r\n\r\ncontract DSMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n}\r\n\r\n\r\ncontract ImportResolver is DSMath {\r\n    event LogTokensImport(address owner, uint percentage, address[] tokenAddr, uint[] tokenBalArr);\r\n\r\n    function importTokens(uint toConvert, address[] memory tokenAddrArr) public {\r\n        uint[] memory tokenBalArr = new uint[](tokenAddrArr.length);\r\n\r\n         // transfer tokens to InstaDApp smart wallet from user wallet\r\n        for (uint i = 0; i < tokenAddrArr.length; i++) {\r\n            address erc20 = tokenAddrArr[i];\r\n            ERC20Interface tknContract = ERC20Interface(erc20);\r\n            uint tokenBal = tknContract.balanceOf(msg.sender);\r\n            tokenBal = toConvert < 10**18 ? wmul(tokenBal, toConvert) : tokenBal;\r\n            if (tokenBal > 0) {\r\n                require(tknContract.transferFrom(msg.sender, address(this), tokenBal), \"Allowance?\");\r\n            }\r\n            tokenBalArr[i] = tokenBal;\r\n        }\r\n\r\n        emit LogTokensImport(\r\n            msg.sender,\r\n            toConvert,\r\n            tokenAddrArr,\r\n            tokenBalArr\r\n        );\r\n    }\r\n}\r\n\r\n\r\ncontract InstaTokenImport is ImportResolver {\r\n    function() external payable {}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"toConvert\",\"type\":\"uint256\"},{\"name\":\"tokenAddrArr\",\"type\":\"address[]\"}],\"name\":\"importTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"percentage\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAddr\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"tokenBalArr\",\"type\":\"uint256[]\"}],\"name\":\"LogTokensImport\",\"type\":\"event\"}]","ContractName":"InstaTokenImport","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://029ba3afbe552d954e7aaf7c1c7f016e38250300bf912178e46f6bc3057d96c4"}]}