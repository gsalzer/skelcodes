{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2019-07-14\r\n*/\r\n\r\n// File: openzeppelin-eth/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: zos-lib/contracts/Initializable.sol\r\n\r\npragma solidity >=0.4.24 <0.6.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool wasInitializing = initializing;\r\n    initializing = true;\r\n    initialized = true;\r\n\r\n    _;\r\n\r\n    initializing = wasInitializing;\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(address) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts/elizabeth/IPropertyToken.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ncontract IPropertyToken is IERC20 {\r\n    function canTransfer(address _to, uint256 _value, bytes) external view returns (byte, bytes32);\r\n    function canTransferFrom(address _from, address _to, uint256 _value, bytes) external view returns (byte, bytes32);\r\n\r\n    function dividendToken() public view returns (address);\r\n    function dividendPerToken() public view returns (uint);\r\n    function dividendBalanceOf(address account) public view returns (uint);\r\n    function deposit(uint amount) public;\r\n    function depositPartial(uint amount) public;\r\n    function withdraw() public;\r\n    function changeDividendToken(address newToken) public;\r\n    function recoverDividend(address user) public;\r\n\r\n    function getDocument(bytes32 _name) external view returns (string, bytes32, uint256);\r\n    function setDocument(bytes32 _name, string _uri, bytes32 _documentHash) external;\r\n    function removeDocument(bytes32 _name) external;\r\n    function getAllDocuments() external view returns (bytes32[]);\r\n\r\n    function getMetadata(bytes32 name) external view returns (string);\r\n    function setMetadata(bytes32 name, string value) external;\r\n    function getAllMetadata() external view returns (bytes32[]);\r\n}\r\n\r\n// File: contracts/proxies/ProxyAddress.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\ncontract ProxyAddress {\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n      require(msg.sender == owner, \"Must be called by owner or manager\");\r\n      _;\r\n    }\r\n\r\n    function executeCall(address to, uint256 value, bytes memory data) public onlyOwner returns (bool success) {\r\n        assembly {\r\n            success := call(gas, to, value, add(data, 0x20), mload(data), 0, 0)\r\n        }\r\n    }\r\n}\r\n\r\n// File: openzeppelin-eth/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable is Initializable {\r\n  address private _owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function initialize(address sender) public initializer {\r\n    _owner = sender;\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(_owner);\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts/proxies/SlaveProxy.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n//import './WalletManager.sol';\r\n\r\n/**\r\n * @title Proxy\r\n * @dev Implements delegation of calls to other contracts, with proper\r\n * forwarding of return values and bubbling of failures.\r\n * It defines a fallback function that delegates all calls to the address\r\n * returned by the abstract _implementation() internal function.\r\n */\r\ncontract SlaveProxy {\r\n\r\n  bytes32 private constant MANAGER_SLOT = 0x7a55c4d64d3f68c3935ebba18bdf734d8a1d1d068c865f9e08eab9d3a6da73b4;\r\n\r\n  /**\r\n   * @dev Contract constructor.\r\n   * @param manager Address of the proxy manager.\r\n   * @param data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n  constructor(address manager, bytes data) public {\r\n    assert(MANAGER_SLOT == keccak256(\"minuteman-wallet-manager\"));\r\n    setManager(manager);\r\n\r\n    if(data.length > 0) {\r\n      require(_implementation().delegatecall(data));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the current implementation.\r\n   * @return Address of the current implementation\r\n   */\r\n  function _implementation() internal view returns (address) {\r\n    return WalletManager(managerAddress()).getImplementation();\r\n  }\r\n\r\n  function setManager(address manager) internal {\r\n    bytes32 slot = MANAGER_SLOT;\r\n    assembly {\r\n      sstore(slot, manager)\r\n    }\r\n  }\r\n\r\n  function managerAddress() internal view returns(address manager) {\r\n    bytes32 slot = MANAGER_SLOT;\r\n    assembly {\r\n      manager := sload(slot)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Fallback function.\r\n   * Implemented entirely in `_fallback`.\r\n   */\r\n  function () payable external {\r\n    _fallback();\r\n  }\r\n\r\n  /**\r\n   * @dev Delegates execution to an implementation contract.\r\n   * This is a low level function that doesn't return to its internal call site.\r\n   * It will return to the external caller whatever the implementation returns.\r\n   * @param implementation Address to delegate.\r\n   */\r\n  function _delegate(address implementation) internal {\r\n    assembly {\r\n      // Copy msg.data. We take full control of memory in this inline assembly\r\n      // block because it will not return to Solidity code. We overwrite the\r\n      // Solidity scratch pad at memory position 0.\r\n      calldatacopy(0, 0, calldatasize)\r\n\r\n      // Call the implementation.\r\n      // out and outsize are 0 because we don't know the size yet.\r\n      let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\r\n\r\n      // Copy the returned data.\r\n      returndatacopy(0, 0, returndatasize)\r\n\r\n      switch result\r\n      // delegatecall returns 0 on error.\r\n      case 0 { revert(0, returndatasize) }\r\n      default { return(0, returndatasize) }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev fallback implementation.\r\n   * Extracted to enable manual triggering.\r\n   */\r\n  function _fallback() internal {\r\n    _delegate(_implementation());\r\n  }\r\n}\r\n\r\n// File: contracts/proxies/WalletManager.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\ncontract WalletManager is Initializable, Ownable {\r\n\r\n  mapping(address => address) public walletsByUser;\r\n  address private implementation;\r\n\r\n  event UserWalletCreated(address user, address walletAddress);\r\n  event ImplementationChanged(address implementation);\r\n\r\n  function initialize(address _implementation) initializer public {\r\n    Ownable.initialize(msg.sender);\r\n    implementation = _implementation;\r\n    emit ImplementationChanged(implementation);\r\n  }\r\n\r\n  function getImplementation() external view returns (address) {\r\n    return implementation;\r\n  }\r\n\r\n  function setImplementation(address newImplementation) external onlyOwner {\r\n    implementation = newImplementation;\r\n    emit ImplementationChanged(implementation);\r\n  }\r\n\r\n  function createWallet(address owner) public returns (address) {\r\n    require(owner == address(0x0) || walletsByUser[owner] == address(0x0), \"Address already has existing wallet\");\r\n\r\n    bytes memory data = abi.encodeWithSignature(\"initialize(address,address)\", address(this), owner);\r\n    address proxy = new SlaveProxy(address(this), data);\r\n\r\n    if (owner != address(0x0)) {\r\n      walletsByUser[owner] = proxy;\r\n    }\r\n    emit UserWalletCreated(owner, proxy);\r\n    return proxy;\r\n  }\r\n\r\n  function changeOwner(address oldOwner, address newOwner) public {\r\n    require(oldOwner == address(0) || msg.sender == walletsByUser[oldOwner]);\r\n    walletsByUser[oldOwner] = address(0);\r\n    walletsByUser[newOwner] = msg.sender;\r\n  }\r\n}\r\n\r\n// File: contracts/proxies/UserWallet.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//Should implement ERC725\r\ncontract UserWallet is Initializable {\r\n\r\n  uint256 constant UINT256_MAX = ~uint256(0);\r\n\r\n  WalletManager public walletManager;\r\n  address public owner;\r\n\r\n  event OwnershipChanged(address newOwner);\r\n  event NewForwardingAddress(address forwardingAddress, address tokenAddress, bytes data);\r\n\r\n  function initialize(address _manager, address _owner) initializer public {\r\n    walletManager = WalletManager(_manager);\r\n    owner = _owner;\r\n  }\r\n\r\n  modifier onlyOwnerAndManager() {\r\n    require(msg.sender == owner || msg.sender == walletManager.owner(), \"Must be called by owner or manager\");\r\n    _;\r\n  }\r\n\r\n  function setOwner(address newOwner) public onlyOwnerAndManager {\r\n    walletManager.changeOwner(owner, newOwner);\r\n    owner = newOwner;\r\n    emit OwnershipChanged(newOwner);\r\n  }\r\n\r\n  function getBalance(address token) public view returns (uint) {\r\n    return IERC20(token).balanceOf(address(this));\r\n  }\r\n\r\n  function transfer(address token, address recipient, uint value) public onlyOwnerAndManager returns (bool) {\r\n    return IERC20(token).transfer(recipient, value);\r\n  }\r\n\r\n  function approve(address token, address spender, uint256 value) public onlyOwnerAndManager returns (bool) {\r\n    return IERC20(token).approve(spender, value);\r\n  }\r\n\r\n  function transferFrom(address token, address from, address to, uint256 value) public onlyOwnerAndManager returns (bool) {\r\n    return IERC20(token).transferFrom(from, to, value);\r\n  }\r\n\r\n  function createForwardingAddress(address tokenAddress, bytes data) public onlyOwnerAndManager {\r\n    ProxyAddress newAddress = new ProxyAddress();\r\n    bytes memory setAllowance = abi.encodeWithSignature(\"approve(address,uint256)\", address(this), UINT256_MAX);\r\n    newAddress.executeCall(tokenAddress, 0, setAllowance);\r\n    emit NewForwardingAddress(newAddress, tokenAddress, data);\r\n  }\r\n\r\n  function distributeDividends(address forwardingAddress, address dividendToken, address propertyToken, uint8 mode) public onlyOwnerAndManager {\r\n    require(mode < 2);\r\n    uint numTokens = IERC20(dividendToken).balanceOf(forwardingAddress);\r\n    require(numTokens > 0);\r\n\r\n    IERC20(dividendToken).transferFrom(forwardingAddress, address(this), numTokens);\r\n    IERC20(dividendToken).approve(propertyToken, numTokens);\r\n    if (mode == 0) {\r\n      IPropertyToken(propertyToken).deposit(numTokens);\r\n    }\r\n    if (mode == 1) {\r\n      IPropertyToken(propertyToken).depositPartial(numTokens);\r\n    }\r\n  }\r\n\r\n  function withdrawAndTransfer(address[] contracts, address recipient) external onlyOwnerAndManager {\r\n    address tokenAddress;\r\n    for (uint i = 0; i < contracts.length; i++) {\r\n      if (i == 0) {\r\n        tokenAddress = IPropertyToken(contracts[i]).dividendToken();\r\n      } else {\r\n        require(tokenAddress == IPropertyToken(contracts[i]).dividendToken());\r\n      }\r\n      if (IPropertyToken(contracts[i]).dividendBalanceOf(this) > 0) {\r\n        IPropertyToken(contracts[i]).withdraw();\r\n      }\r\n    }\r\n    IERC20(tokenAddress).transfer(recipient, IERC20(tokenAddress).balanceOf(this));\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"forwardingAddress\",\"type\":\"address\"},{\"name\":\"dividendToken\",\"type\":\"address\"},{\"name\":\"propertyToken\",\"type\":\"address\"},{\"name\":\"mode\",\"type\":\"uint8\"}],\"name\":\"distributeDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contracts\",\"type\":\"address[]\"},{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawAndTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"createForwardingAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"forwardingAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"NewForwardingAddress\",\"type\":\"event\"}]","ContractName":"UserWallet","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d097bd7539f65c14f24f2bb0d61108e09203e2fa9b880ea7146e3ffd3f7d2f1b"}]}