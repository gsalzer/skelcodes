{"status":"1","message":"OK","result":[{"SourceCode":"//generated by www.structuredeth.com/gift\r\n\r\npragma solidity ^0.4.26;\r\ncontract UniswapExchangeInterface {\r\n    // Address of ERC20 token sold on this exchange\r\n    function tokenAddress() external view returns (address token);\r\n    // Address of Uniswap Factory\r\n    function factoryAddress() external view returns (address factory);\r\n    // Provide Liquidity\r\n    function addLiquidity(uint256 min_liquidity, uint256 max_tokens, uint256 deadline) external payable returns (uint256);\r\n    function removeLiquidity(uint256 amount, uint256 min_eth, uint256 min_tokens, uint256 deadline) external returns (uint256, uint256);\r\n    // Get Prices\r\n    function getEthToTokenInputPrice(uint256 eth_sold) external view returns (uint256 tokens_bought);\r\n    function getEthToTokenOutputPrice(uint256 tokens_bought) external view returns (uint256 eth_sold);\r\n    function getTokenToEthInputPrice(uint256 tokens_sold) external view returns (uint256 eth_bought);\r\n    function getTokenToEthOutputPrice(uint256 eth_bought) external view returns (uint256 tokens_sold);\r\n    // Trade ETH to ERC20\r\n    function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline) external payable returns (uint256  tokens_bought);\r\n    function ethToTokenTransferInput(uint256 min_tokens, uint256 deadline, address recipient) external payable returns (uint256  tokens_bought);\r\n    function ethToTokenSwapOutput(uint256 tokens_bought, uint256 deadline) external payable returns (uint256  eth_sold);\r\n    function ethToTokenTransferOutput(uint256 tokens_bought, uint256 deadline, address recipient) external payable returns (uint256  eth_sold);\r\n    // Trade ERC20 to ETH\r\n    function tokenToEthSwapInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline) external returns (uint256  eth_bought);\r\n    function tokenToEthTransferInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline, address recipient) external returns (uint256  eth_bought);\r\n    function tokenToEthSwapOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline) external returns (uint256  tokens_sold);\r\n    function tokenToEthTransferOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline, address recipient) external returns (uint256  tokens_sold);\r\n    // Trade ERC20 to ERC20\r\n    function tokenToTokenSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address token_addr) external returns (uint256  tokens_bought);\r\n    function tokenToTokenTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_bought);\r\n    function tokenToTokenSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address token_addr) external returns (uint256  tokens_sold);\r\n    function tokenToTokenTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_sold);\r\n    // Trade ERC20 to Custom Pool\r\n    function tokenToExchangeSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address exchange_addr) external returns (uint256  tokens_bought);\r\n    function tokenToExchangeTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_bought);\r\n    function tokenToExchangeSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address exchange_addr) external returns (uint256  tokens_sold);\r\n    function tokenToExchangeTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_sold);\r\n    // ERC20 comaptibility for liquidity tokens\r\n    bytes32 public name;\r\n    bytes32 public symbol;\r\n    uint256 public decimals;\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 value) external returns (bool);\r\n    function approve(address _spender, uint256 _value) external returns (bool);\r\n    function allowance(address _owner, address _spender) external view returns (uint256);\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    // Never use\r\n    function setup(address token_addr) external;\r\n}\r\n\r\ninterface ERC20 {\r\n    function totalSupply() public view returns (uint supply);\r\n    function balanceOf(address _owner) public view returns (uint balance);\r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n    function approve(address _spender, uint _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint remaining);\r\n    function decimals() public view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ninterface OrFeedInterface {\r\n  function getExchangeRate ( string fromSymbol, string toSymbol, string venue, uint256 amount ) external view returns ( uint256 );\r\n  function getTokenDecimalCount ( address tokenAddress ) external view returns ( uint256 );\r\n  function getTokenAddress ( string symbol ) external view returns ( address );\r\n  function getSynthBytes32 ( string symbol ) external view returns ( bytes32 );\r\n  function getForexAddress ( string symbol ) external view returns ( address );\r\n}\r\n\r\nlibrary StringUtils {\r\n    /// @dev Does a byte-by-byte lexicographical comparison of two strings.\r\n    /// @return a negative number if `_a` is smaller, zero if they are equal\r\n    /// and a positive numbe if `_b` is smaller.\r\n    function compare(string _a, string _b) returns (int) {\r\n        bytes memory a = bytes(_a);\r\n        bytes memory b = bytes(_b);\r\n        uint minLength = a.length;\r\n        if (b.length < minLength) minLength = b.length;\r\n        //@todo unroll the loop into increments of 32 and do full 32 byte comparisons\r\n        for (uint i = 0; i < minLength; i ++)\r\n            if (a[i] < b[i])\r\n                return -1;\r\n            else if (a[i] > b[i])\r\n                return 1;\r\n        if (a.length < b.length)\r\n            return -1;\r\n        else if (a.length > b.length)\r\n            return 1;\r\n        else\r\n            return 0;\r\n    }\r\n    /// @dev Compares two strings and returns true iff they are equal.\r\n    function equal(string _a, string _b) returns (bool) {\r\n        return compare(_a, _b) == 0;\r\n    }\r\n    /// @dev Finds the index of the first occurrence of _needle in _haystack\r\n    function indexOf(string _haystack, string _needle) returns (int)\r\n    {\r\n    \tbytes memory h = bytes(_haystack);\r\n    \tbytes memory n = bytes(_needle);\r\n    \tif(h.length < 1 || n.length < 1 || (n.length > h.length)) \r\n    \t\treturn -1;\r\n    \telse if(h.length > (2**128 -1)) // since we have to be able to return -1 (if the char isn't found or input error), this function must return an \"int\" type with a max length of (2^128 - 1)\r\n    \t\treturn -1;\t\t\t\t\t\t\t\t\t\r\n    \telse\r\n    \t{\r\n    \t\tuint subindex = 0;\r\n    \t\tfor (uint i = 0; i < h.length; i ++)\r\n    \t\t{\r\n    \t\t\tif (h[i] == n[0]) // found the first char of b\r\n    \t\t\t{\r\n    \t\t\t\tsubindex = 1;\r\n    \t\t\t\twhile(subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex]) // search until the chars don't match or until we reach the end of a or b\r\n    \t\t\t\t{\r\n    \t\t\t\t\tsubindex++;\r\n    \t\t\t\t}\t\r\n    \t\t\t\tif(subindex == n.length)\r\n    \t\t\t\t\treturn int(i);\r\n    \t\t\t}\r\n    \t\t}\r\n    \t\treturn -1;\r\n    \t}\t\r\n    }\r\n}\r\n\r\n\r\ncontract PremiumFeedPrices{\r\n    \r\n    mapping (address=>address) uniswapAddresses;\r\n    mapping (string=>address) tokenAddress;\r\n    \r\n    \r\n     constructor() public  {\r\n         \r\n         //DAI\r\n         uniswapAddresses[0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359] = 0x09cabec1ead1c0ba254b09efb3ee13841712be14;\r\n         \r\n         //usdc\r\n         uniswapAddresses[0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48] = 0x97dec872013f6b5fb443861090ad931542878126;\r\n         \r\n         //MKR\r\n         \r\n         uniswapAddresses[0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2] = 0x2c4bd064b998838076fa341a83d007fc2fa50957;\r\n         \r\n         //BAT\r\n         uniswapAddresses[0x0d8775f648430679a709e98d2b0cb6250d2887ef] = 0x2e642b8d59b45a1d8c5aef716a84ff44ea665914;\r\n         \r\n         //LINK\r\n         uniswapAddresses[0x514910771af9ca656af840dff83e8264ecf986ca] = 0xf173214c720f58e03e194085b1db28b50acdeead;\r\n         \r\n         //ZRX\r\n         uniswapAddresses[0xe41d2489571d322189246dafa5ebde1f4699f498] = 0xae76c84c9262cdb9abc0c2c8888e62db8e22a0bf;\r\n     \r\n         \r\n         \r\n         \r\n         \r\n         \r\n         tokenAddress['DAI'] = 0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359;\r\n        tokenAddress['USDC'] = 0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48;\r\n        tokenAddress['MKR'] = 0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2;\r\n        tokenAddress['LINK'] = 0x514910771af9ca656af840dff83e8264ecf986ca;\r\n        tokenAddress['BAT'] = 0x0d8775f648430679a709e98d2b0cb6250d2887ef;\r\n        tokenAddress['WBTC'] = 0x2260fac5e5542a773aa44fbcfedf7c193bc2c599;\r\n        tokenAddress['BTC'] = 0x2260fac5e5542a773aa44fbcfedf7c193bc2c599;\r\n        tokenAddress['OMG'] = 0xd26114cd6EE289AccF82350c8d8487fedB8A0C07;\r\n        tokenAddress['ZRX'] = 0xe41d2489571d322189246dafa5ebde1f4699f498;\r\n        tokenAddress['TUSD'] = 0x0000000000085d4780B73119b644AE5ecd22b376;\r\n        tokenAddress['ETH'] = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n        tokenAddress['WETH'] = 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2;\r\n        \r\n     }\r\n     \r\n     function getExchangeRate(string fromSymbol, string toSymbol, string venue, uint256 amount, address requestAddress) constant returns(uint256){\r\n         \r\n         address toA1 = tokenAddress[fromSymbol];\r\n         address toA2 = tokenAddress[toSymbol];\r\n         \r\n         \r\n         \r\n         string memory theSide = determineSide(venue);\r\n         string memory theExchange = determineExchange(venue);\r\n         \r\n         uint256 price = 0;\r\n         \r\n         if(StringUtils.equal(theExchange,\"UNISWAP\")){\r\n            price= uniswapPrice(toA1, toA2, theSide, amount);\r\n         }\r\n         \r\n         \r\n         return price;\r\n     }\r\n    \r\n    function uniswapPrice(address token1, address token2, string  side, uint256 amount) constant returns (uint256){\r\n    \r\n            address fromExchange = getUniswapContract(token1);\r\n            address toExchange = getUniswapContract(token1);\r\n            UniswapExchangeInterface usi1 = UniswapExchangeInterface(fromExchange);\r\n            UniswapExchangeInterface usi2 = UniswapExchangeInterface(toExchange);    \r\n        \r\n            uint256  startingEth;\r\n            uint256 resultingTokens;\r\n            \r\n        if(StringUtils.equal(side,\"BUY\")){\r\n            startingEth = usi1.getTokenToEthInputPrice(amount);\r\n        \r\n            resultingTokens = usi2.getTokenToEthOutputPrice(startingEth);\r\n            \r\n            return resultingTokens;\r\n        }\r\n        \r\n        else{\r\n              startingEth = usi2.getTokenToEthInputPrice(amount);\r\n              resultingTokens = usi1.getTokenToEthOutputPrice(startingEth);\r\n              return resultingTokens;\r\n        }\r\n    \r\n    }\r\n    \r\n    \r\n    function getUniswapContract(address tokenAddress) returns (address){\r\n        return uniswapAddresses[tokenAddress];\r\n    }\r\n    \r\n    function determineSide(string sideString) constant returns (string){\r\n            \r\n        if(contains(\"SELL\", sideString ) == false){\r\n            return \"BUY\";\r\n        }\r\n        \r\n        else{\r\n            return \"SELL\";\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n    function determineExchange(string exString) constant returns (string){\r\n            \r\n        if(contains(\"UNISWAP\", exString ) == false){\r\n            return \"UNISWAP\";\r\n        }\r\n        \r\n        else{\r\n            return \"KYBER\";\r\n        }\r\n    }\r\n    \r\n    \r\n    function contains (string memory what, string memory where)  returns(bool){\r\n    bytes memory whatBytes = bytes (what);\r\n    bytes memory whereBytes = bytes (where);\r\n\r\n    bool found = false;\r\n    for (uint i = 0; i < whereBytes.length - whatBytes.length; i++) {\r\n        bool flag = true;\r\n        for (uint j = 0; j < whatBytes.length; j++)\r\n            if (whereBytes [i + j] != whatBytes [j]) {\r\n                flag = false;\r\n                break;\r\n            }\r\n        if (flag) {\r\n            found = true;\r\n            break;\r\n        }\r\n    }\r\n  \r\n    return found;\r\n    \r\n}\r\n\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_a\",\"type\":\"string\"},{\"name\":\"_b\",\"type\":\"string\"}],\"name\":\"compare\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_a\",\"type\":\"string\"},{\"name\":\"_b\",\"type\":\"string\"}],\"name\":\"equal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_haystack\",\"type\":\"string\"},{\"name\":\"_needle\",\"type\":\"string\"}],\"name\":\"indexOf\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StringUtils","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://e61ee39c0ed5b03946d39fceea77d6d7ed45f27fb0d3221e4a9f939afb593dbf"}]}