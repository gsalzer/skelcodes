{"status":"1","message":"OK","result":[{"SourceCode":"/**\n\nDeployed by Ren Project, https://renproject.io\n\nCommit hash: 4bbb3f4\nRepository: https://github.com/renproject/darknode-sol\nIssues: https://github.com/renproject/darknode-sol/issues\n\nLicenses\nopenzeppelin-solidity: (MIT) https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/LICENSE\ndarknode-sol: (GNU GPL V3) https://github.com/renproject/darknode-sol/blob/master/LICENSE\n\n*/\n\npragma solidity ^0.5.8;\n\n\nlibrary SafeMath {\n    \n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    \n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    \n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        \n        \n        \n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    \n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        \n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        \n\n        return c;\n    }\n\n    \n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n}\n\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    \n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    \n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    \n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    \n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    \n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    \n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    \n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\nlibrary ECDSA {\n    \n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        \n        if (signature.length != 65) {\n            return (address(0));\n        }\n\n        \n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        \n        \n        \n        assembly {\n            r := mload(add(signature, 0x20))\n            s := mload(add(signature, 0x40))\n            v := byte(0, mload(add(signature, 0x60)))\n        }\n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return address(0);\n        }\n\n        if (v != 27 && v != 28) {\n            return address(0);\n        }\n\n        \n        return ecrecover(hash, v, r, s);\n    }\n\n    \n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        \n        \n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n}\n\nlibrary String {\n\n    \n    function fromBytes32(bytes32 _value) internal pure returns(string memory) {\n        bytes32 value = bytes32(uint256(_value));\n        bytes memory alphabet = \"0123456789abcdef\";\n\n        bytes memory str = new bytes(32 * 2 + 2);\n        str[0] = '0';\n        str[1] = 'x';\n        for (uint i = 0; i < 32; i++) {\n            str[2+i*2] = alphabet[uint(uint8(value[i] >> 4))];\n            str[3+i*2] = alphabet[uint(uint8(value[i] & 0x0f))];\n        }\n        return string(str);\n    }\n\n    \n    function fromAddress(address _addr) internal pure returns(string memory) {\n        bytes32 value = bytes32(uint256(_addr));\n        bytes memory alphabet = \"0123456789abcdef\";\n\n        bytes memory str = new bytes(20 * 2 + 2);\n        str[0] = '0';\n        str[1] = 'x';\n        for (uint i = 0; i < 20; i++) {\n            str[2+i*2] = alphabet[uint(uint8(value[i + 12] >> 4))];\n            str[3+i*2] = alphabet[uint(uint8(value[i + 12] & 0x0f))];\n        }\n        return string(str);\n    }\n\n    \n    function add4(string memory a, string memory b, string memory c, string memory d) internal pure returns (string memory) {\n        return string(abi.encodePacked(a, b, c, d));\n    }\n}\n\ninterface IERC20 {\n    \n    function totalSupply() external view returns (uint256);\n\n    \n    function balanceOf(address account) external view returns (uint256);\n\n    \n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    \n    function allowance(address owner, address spender) external view returns (uint256);\n\n    \n    function approve(address spender, uint256 amount) external returns (bool);\n\n    \n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    \n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    \n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    \n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    \n    function transfer(address recipient, uint256 amount) public returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    \n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    \n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    \n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n        return true;\n    }\n\n    \n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    \n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    \n    function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _balances[sender] = _balances[sender].sub(amount);\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    \n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n     \n    function _burn(address account, uint256 value) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    \n    function _approve(address owner, address spender, uint256 value) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    \n    function _burnFrom(address account, uint256 amount) internal {\n        _burn(account, amount);\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n    }\n}\n\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    \n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    \n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    \n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    \n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\ncontract Claimable {\n    address private _pendingOwner;\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    \n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    \n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    \n    modifier onlyOwner() {\n        require(isOwner(), \"caller is not the owner\");\n        _;\n    }\n\n    \n    modifier onlyPendingOwner() {\n      require(msg.sender == _pendingOwner, \"caller is not the pending owner\");\n      _;\n    }\n\n    \n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    \n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    \n    function transferOwnership(address newOwner) public onlyOwner {\n      _pendingOwner = newOwner;\n    }\n\n    \n    function claimOwnership() public onlyPendingOwner {\n      emit OwnershipTransferred(_owner, _pendingOwner);\n      _owner = _pendingOwner;\n      _pendingOwner = address(0);\n    }\n}\n\ncontract ERC20Shifted is ERC20, ERC20Detailed, Claimable {\n\n    \n    constructor(string memory _name, string memory _symbol, uint8 _decimals) public ERC20Detailed(_name, _symbol, _decimals) {}\n\n    function burn(address _from, uint256 _amount) public onlyOwner {\n        _burn(_from, _amount);\n    }\n\n    function mint(address _to, uint256 _amount) public onlyOwner {\n        _mint(_to, _amount);\n    }\n}\n\ncontract Shifter is Ownable {\n    using SafeMath for uint256;\n\n    uint8 public version = 2;\n\n    uint256 constant BIPS_DENOMINATOR = 10000;\n    uint256 public minShiftAmount;\n\n    \n    ERC20Shifted public token;\n\n    \n    address public mintAuthority;\n\n    \n    \n    \n    \n    address public feeRecipient;\n\n    \n    uint16 public fee;\n\n    \n    mapping (bytes32=>bool) public status;\n\n    \n    \n    uint256 public nextShiftID = 0;\n\n    event LogShiftIn(\n        address indexed _to,\n        uint256 _amount,\n        uint256 indexed _shiftID\n    );\n    event LogShiftOut(\n        bytes _to,\n        uint256 _amount,\n        uint256 indexed _shiftID,\n        bytes indexed _indexedTo\n    );\n\n    \n    \n    \n    \n    \n    \n    constructor(ERC20Shifted _token, address _feeRecipient, address _mintAuthority, uint16 _fee, uint256 _minShiftOutAmount) public {\n        minShiftAmount = _minShiftOutAmount;\n        token = _token;\n        mintAuthority = _mintAuthority;\n        fee = _fee;\n        updateFeeRecipient(_feeRecipient);\n    }\n\n    \n\n    \n    \n    \n    function claimTokenOwnership() public {\n        token.claimOwnership();\n    }\n\n    \n    function transferTokenOwnership(Shifter _nextTokenOwner) public onlyOwner {\n        token.transferOwnership(address(_nextTokenOwner));\n        _nextTokenOwner.claimTokenOwnership();\n    }\n\n    \n    \n    \n    function updateMintAuthority(address _nextMintAuthority) public onlyOwner {\n        mintAuthority = _nextMintAuthority;\n    }\n\n    \n    \n    \n    function updateMinimumShiftOutAmount(uint256 _minShiftOutAmount) public onlyOwner {\n        minShiftAmount = _minShiftOutAmount;\n    }\n\n    \n    \n    \n    function updateFeeRecipient(address _nextFeeRecipient) public onlyOwner {\n        \n        require(_nextFeeRecipient != address(0x0), \"fee recipient cannot be 0x0\");\n\n        feeRecipient = _nextFeeRecipient;\n    }\n\n    \n    \n    \n    function updateFee(uint16 _nextFee) public onlyOwner {\n        fee = _nextFee;\n    }\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    function shiftIn(bytes32 _pHash, uint256 _amount, bytes32 _nHash, bytes memory _sig) public returns (uint256) {\n        \n        bytes32 signedMessageHash = hashForSignature(_pHash, _amount, msg.sender, _nHash);\n        require(status[signedMessageHash] == false, \"nonce hash already spent\");\n        if (!verifySignature(signedMessageHash, _sig)) {\n            \n            \n            \n            revert(\n                String.add4(\n                    \"invalid signature - hash: \",\n                    String.fromBytes32(signedMessageHash),\n                    \", signer: \",\n                    String.fromAddress(ECDSA.recover(signedMessageHash, _sig))\n                )\n            );\n        }\n        status[signedMessageHash] = true;\n\n        \n        uint256 absoluteFee = (_amount.mul(fee)).div(BIPS_DENOMINATOR);\n        uint256 receivedAmount = _amount.sub(absoluteFee);\n        token.mint(msg.sender, receivedAmount);\n        token.mint(feeRecipient, absoluteFee);\n\n        \n        emit LogShiftIn(msg.sender, receivedAmount, nextShiftID);\n        nextShiftID += 1;\n\n        return receivedAmount;\n    }\n\n    \n    \n    \n    \n    \n    \n    \n    \n    function shiftOut(bytes memory _to, uint256 _amount) public returns (uint256) {\n        \n        \n        require(_to.length != 0, \"to address is empty\");\n        require(_amount >= minShiftAmount, \"amount is less than the minimum shiftOut amount\");\n\n        \n        uint256 absoluteFee = (_amount.mul(fee)).div(BIPS_DENOMINATOR);\n        token.burn(msg.sender, _amount);\n        token.mint(feeRecipient, absoluteFee);\n\n        \n        uint256 receivedValue = _amount.sub(absoluteFee);\n        emit LogShiftOut(_to, receivedValue, nextShiftID, _to);\n        nextShiftID += 1;\n\n        return receivedValue;\n    }\n\n    \n    \n    function verifySignature(bytes32 _signedMessageHash, bytes memory _sig) public view returns (bool) {\n        return mintAuthority == ECDSA.recover(_signedMessageHash, _sig);\n    }\n\n    \n    function hashForSignature(bytes32 _pHash, uint256 _amount, address _to, bytes32 _nHash) public view returns (bytes32) {\n        return keccak256(abi.encode(_pHash, _amount, address(token), _to, _nHash));\n    }\n}\n\ncontract BTCShifter is Shifter {\n    constructor(ERC20Shifted _token, address _feeRecipient, address _mintAuthority, uint16 _fee, uint256 _minShiftOutAmount)\n        Shifter(_token, _feeRecipient, _mintAuthority, _fee, _minShiftOutAmount) public {\n        }\n}\n\ncontract ZECShifter is Shifter {\n    constructor(ERC20Shifted _token, address _feeRecipient, address _mintAuthority, uint16 _fee, uint256 _minShiftOutAmount)\n        Shifter(_token, _feeRecipient, _mintAuthority, _fee, _minShiftOutAmount) public {\n        }\n}\n\ncontract DEXReserve is ERC20 {\n    uint256 FeeInBIPS;\n    ERC20 public BaseToken;\n    ERC20 public Token;\n    event LogAddLiquidity(address _liquidityProvider, uint256 _tokenAmount, uint256 _baseTokenAmount);\n    event LogDebug(uint256 _rcvAmount);\n\n    constructor (ERC20 _baseToken, ERC20 _token, uint256 _feeInBIPS) public {\n        BaseToken = _baseToken;\n        Token = _token;\n        FeeInBIPS = _feeInBIPS;\n    }\n\n    function buy(address _to, address _from, uint256 _baseTokenAmount) external returns (uint256)  {\n        require(totalSupply() != 0, \"reserve has no funds\");\n        uint256 rcvAmount = calculateBuyRcvAmt(_baseTokenAmount);\n        BaseToken.transferFrom(_from, address(this), _baseTokenAmount);\n        require(rcvAmount <= Token.balanceOf(address(this)), \"insufficient balance\");\n        require(Token.transfer(_to, rcvAmount), \"failed to transfer quote token\");\n        return rcvAmount;\n    }\n\n    function sell(address _to, address _from, uint256 _tokenAmount) external returns (uint256) {\n        require(totalSupply() != 0, \"reserve has no funds\");\n        uint256 rcvAmount = calculateSellRcvAmt(_tokenAmount);\n        Token.transferFrom(_from, address(this), _tokenAmount);\n        require(BaseToken.transfer(_to, rcvAmount), \"failed to transfer base token\");\n        return rcvAmount;\n    }\n\n    function calculateBuyRcvAmt(uint256 _sendAmt) public view returns (uint256) {\n        uint256 baseReserve = BaseToken.balanceOf(address(this));\n        uint256 tokenReserve = Token.balanceOf(address(this));\n        uint256 finalQuoteTokenAmount = (baseReserve.mul(tokenReserve)).div(baseReserve.add(_sendAmt));\n        uint256 rcvAmt = tokenReserve.sub(finalQuoteTokenAmount);\n        return _removeFees(rcvAmt);\n    }\n\n    function calculateSellRcvAmt(uint256 _sendAmt) public view returns (uint256) {\n        uint256 baseReserve = BaseToken.balanceOf(address(this));\n        uint256 tokenReserve = Token.balanceOf(address(this));\n        uint256 finalBaseTokenAmount = (baseReserve.mul(tokenReserve)).div(tokenReserve.add(_sendAmt));\n        uint256 rcvAmt = baseReserve.sub(finalBaseTokenAmount);\n        return _removeFees(rcvAmt);\n    }\n\n    function removeLiquidity(uint256 _liquidity) external returns (uint256, uint256) {\n        require(balanceOf(msg.sender) >= _liquidity, \"insufficient balance\");\n        uint256 baseTokenAmount = calculateBaseTokenValue(_liquidity);\n        uint256 quoteTokenAmount = calculateQuoteTokenValue(_liquidity);\n        _burn(msg.sender, _liquidity);\n        BaseToken.transfer(msg.sender, baseTokenAmount);\n        Token.transfer(msg.sender, quoteTokenAmount);\n        return (baseTokenAmount, quoteTokenAmount);\n    }\n\n    function addLiquidity(\n        address _liquidityProvider, uint256 _maxBaseToken, uint256 _tokenAmount, uint256 _deadline\n        ) external returns (uint256) {\n        require(block.number <= _deadline, \"addLiquidity request expired\");\n        if (totalSupply() > 0) {\n            require(_tokenAmount > 0, \"token amount is less than allowed min amount\");\n            uint256 baseAmount = expectedBaseTokenAmount(_tokenAmount);\n            require(baseAmount <= _maxBaseToken, \"calculated base amount exceeds the maximum amount set\");\n            require(BaseToken.transferFrom(_liquidityProvider, address(this), baseAmount), \"failed to transfer base token\");\n            emit LogAddLiquidity(_liquidityProvider, _tokenAmount, baseAmount);\n        } else {\n            require(BaseToken.transferFrom(_liquidityProvider, address(this), _maxBaseToken), \"failed to transfer base token\");\n            emit LogAddLiquidity(_liquidityProvider, _tokenAmount, _maxBaseToken);\n        }\n        Token.transferFrom(msg.sender, address(this), _tokenAmount);\n        _mint(_liquidityProvider, _tokenAmount*2);\n        return _tokenAmount*2;\n    }\n\n    function calculateBaseTokenValue(uint256 _liquidity) public view returns (uint256) {\n        require(totalSupply() != 0, \"Division by Zero\");\n        uint256 baseReserve = BaseToken.balanceOf(address(this));\n        return (_liquidity * baseReserve)/totalSupply();\n    }\n\n    function calculateQuoteTokenValue(uint256 _liquidity) public view returns (uint256) {\n        require(totalSupply() != 0, \"Division by Zero\");\n        uint256 tokenReserve = Token.balanceOf(address(this));\n        return (_liquidity * tokenReserve)/totalSupply();\n    }\n\n    function expectedBaseTokenAmount(uint256 _quoteTokenAmount) public view returns (uint256) {\n        uint256 baseReserve = BaseToken.balanceOf(address(this));\n        uint256 tokenReserve = Token.balanceOf(address(this));\n        return (_quoteTokenAmount * baseReserve)/tokenReserve;\n    }\n\n    function _removeFees(uint256 _amount) internal view returns (uint256) {\n        return (_amount * (10000 - FeeInBIPS))/10000;\n    }\n}\n\ncontract BTC_DAI_Reserve is DEXReserve {\n    constructor (ERC20 _baseToken, ERC20 _token, uint256 _feeInBIPS) public DEXReserve(_baseToken, _token, _feeInBIPS) {\n    }\n}\n\ncontract ZEC_DAI_Reserve is DEXReserve {\n    constructor (ERC20 _baseToken, ERC20 _token, uint256 _feeInBIPS) public DEXReserve(_baseToken, _token, _feeInBIPS) {\n    }\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_baseTokenAmount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_liquidityProvider\",\"type\":\"address\"},{\"name\":\"_maxBaseToken\",\"type\":\"uint256\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_liquidity\",\"type\":\"uint256\"}],\"name\":\"calculateQuoteTokenValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_quoteTokenAmount\",\"type\":\"uint256\"}],\"name\":\"expectedBaseTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BaseToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_liquidity\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sendAmt\",\"type\":\"uint256\"}],\"name\":\"calculateSellRcvAmt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_liquidity\",\"type\":\"uint256\"}],\"name\":\"calculateBaseTokenValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sendAmt\",\"type\":\"uint256\"}],\"name\":\"calculateBuyRcvAmt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_baseToken\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_feeInBIPS\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_liquidityProvider\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_baseTokenAmount\",\"type\":\"uint256\"}],\"name\":\"LogAddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_rcvAmount\",\"type\":\"uint256\"}],\"name\":\"LogDebug\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"BTC_DAI_Reserve","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000089d24a6b4ccb1b6faa2625fe562bdd9a23260359000000000000000000000000c04956c6472cdd58766614f8d47f6826ac477fb90000000000000000000000000000000000000000000000000000000000000014","Library":"","LicenseType":"","SwarmSource":"bzzr://04d59fa2b8d82fb6dc1f8207e31e97154a33f829d26b0d44703b1ecbac60e792"}]}