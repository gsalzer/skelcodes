{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.8; \r\n\r\n/**\r\n  * @title DSMath\r\n  * @author MakerDAO\r\n  * @notice Safe math contracts from Maker.\r\n  */\r\ncontract DSMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function max(uint x, uint y) internal pure returns (uint z) {\r\n        return x >= y ? x : y;\r\n    }\r\n    function imin(int x, int y) internal pure returns (int z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function imax(int x, int y) internal pure returns (int z) {\r\n        return x >= y ? x : y;\r\n    }\r\n}\r\n\r\n/**\r\n  * @title Owned\r\n  * @author BetProtocol\r\n  * @notice Basic owner properties.\r\n  */\r\ncontract Owned {\r\n    address public owner = msg.sender;\r\n\r\n    modifier isOwner {\r\n        assert(msg.sender == owner); _;\r\n    }\r\n\r\n    function changeOwner(address account) external isOwner {\r\n        owner = account;\r\n    }\r\n}\r\n\r\n/**\r\n  * @title Authorized\r\n  * @author BetProtocol\r\n  * @notice Allows a second tier of authrozed accounts. In this case will be the server keys.\r\n  * Only the Owner multisig can authorize new accounts.\r\n  */\r\ncontract Authorized is Owned {\r\n    mapping(address => bool) public authorized;\r\n\r\n    modifier isAuthorized {\r\n        assert(authorized[msg.sender] == true); _;\r\n    }\r\n\r\n    function authorizeAccount(address account) external isOwner {\r\n        authorized[account] = true;\r\n    }\r\n\r\n    function unauthorizeAccount(address account) external isOwner {\r\n        authorized[account] = false;\r\n    }\r\n}\r\n\r\n/**\r\n  * @title TimeRelease\r\n  * @author BetProtocol\r\n  * @notice Controls the generic release time for authorized transactions.\r\n  */\r\ncontract TimeRelease is Owned {\r\n    uint256 public releaseTime = 0;\r\n    \r\n    function changeReleaseTime(uint256 time) external isOwner {\r\n        releaseTime = time;\r\n    }\r\n}\r\n\r\n/**\r\n  * @title Pausable\r\n  * @author BetProtocol\r\n  * @notice Primitive events, methods, properties for a contract which can be\r\n        paused by a single owner.\r\n  */\r\ncontract Pausable is Owned {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused;\r\n\r\n    modifier pausable {\r\n        assert(!paused); _;\r\n    }\r\n\r\n    function pause() external isOwner {\r\n        paused = true;\r\n\r\n        emit Pause();\r\n    }\r\n\r\n    function unpause() external isOwner {\r\n        paused = false;\r\n\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\n/**\r\n  * @title ERC20Events\r\n  * @author EIP20 Authors\r\n  * @notice Primitive events for the ERC20 event specification.\r\n  */\r\ncontract ERC20Events {\r\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\r\n}\r\n\r\n/**\r\n  * @title ERC20\r\n  * @author EIP/ERC20 Authors\r\n  * @author BokkyPooBah / Bok Consulting Pty Ltd 2018.\r\n  * @notice The ERC20 standard contract interface.\r\n  */\r\ncontract ERC20 is ERC20Events {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint);\r\n    function allowance(address tokenOwner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint amount) public returns (bool);\r\n    function transfer(address to, uint amount) external returns (bool);\r\n    function transferFrom(\r\n        address from, address to, uint amount\r\n    ) public returns (bool);\r\n}\r\n\r\n/**\r\n  * @title SingleTokenBank\r\n  * @author EIP/ERC20 Authors\r\n  * @author BokkyPooBah / Bok Consulting Pty Ltd 2018.\r\n  * @notice The ERC20 standard contract interface.\r\n  */\r\ncontract SingleTokenBank is Owned, Pausable, TimeRelease, Authorized, DSMath {\r\n    struct Withdrawal {\r\n        uint256 amount;\r\n        uint256 timestamp;\r\n    }\r\n\r\n    ERC20 public token;\r\n    uint256 public maxWithdrawal = 0;\r\n    uint256 public maxDeposit = 0;\r\n    uint256 public totalPlayerBalance;\r\n    mapping(address => uint256) public balances;\r\n    mapping(address => Withdrawal) public withdrawals;\r\n\r\n\t// informs listeners how many tokens were deposited for a player\r\n\tevent Deposit(address _player, uint256 _amount);\r\n\r\n\t// informs listeners how many tokens were withdrawn from the player to the receiver address\r\n\tevent WithdrawalEvent(address _player, uint256 _amount);\r\n\t\r\n\t// set withdrawal\r\n\tevent WithdrawalSet(address _player, uint256 _amount);\r\n\t\r\n\t// balances changed\r\n\tevent BalancesChanged(uint256 _totalPlayerBalance);\r\n\t\r\n\t// max withdrawal changed\r\n\tevent MaxWithdrawalChange(uint256 _maxWithdrawal);\r\n\t\r\n\t// max withdrawal changed\r\n\tevent MaxDepositChange(uint256 _maxDeposit);\r\n\r\n\tconstructor(address _token, address _authorized, address _owner) public {\r\n\t   token = ERC20(_token);\r\n\t   owner = _owner; // multisig\r\n\t   authorized[_authorized] = true; // your server address\r\n\t   authorized[owner] = true; // also multisig\r\n\t}\r\n\r\n\tfunction deposit(uint256 _amount) external pausable {\r\n        uint256 allowance = token.allowance(msg.sender, address(this));\r\n        require(_amount > 0);\r\n        require(_amount <= allowance);\r\n        require(_amount <= maxDeposit);\r\n        require(token.transferFrom(msg.sender, address(this), _amount));\r\n        balances[msg.sender] = add(balances[msg.sender], _amount);\r\n        emit Deposit(msg.sender, allowance);\r\n\t}\r\n\r\n    // change one or many player balances\r\n\tfunction changeBalances(address[] calldata _player, uint256[] calldata  _amount, uint256 _totalPlayerBalance) external pausable isAuthorized {\r\n\t\tfor (uint256 i = 0; i < _player.length; i++) {\r\n\t\t    balances[_player[i]] = _amount[i];\r\n\t\t}\r\n\t\t\r\n\t\ttotalPlayerBalance = _totalPlayerBalance;\r\n\t\temit BalancesChanged(_totalPlayerBalance);\r\n\t}\r\n    \r\n\t/**\r\n\t * returns the current bankroll in tokens with 0 decimals\r\n\t **/\r\n\tfunction bankroll() view public returns(uint) {\r\n\t\treturn sub(token.balanceOf(address(this)), totalPlayerBalance);\r\n\t}\r\n\r\n    // set a withdrawal amount for a player\r\n\tfunction setUserWithdrawal(address _player, uint256 _amount) external pausable isAuthorized {\r\n\t    require(_amount <= maxWithdrawal); // check max withdrawal\r\n        require(add(withdrawals[_player].amount, _amount) <= maxWithdrawal);\r\n        withdrawals[_player].amount = add(withdrawals[_player].amount, _amount);\r\n        withdrawals[_player].timestamp = block.timestamp;\r\n        emit WithdrawalSet(_player, _amount);\r\n\t}\r\n\r\n        // set a withdrawal amount for a player\r\n\tfunction setOwnerWithdrawal(address _player, uint256 _totalPlayerBalance, uint256 _amount) external pausable isAuthorized {\r\n        totalPlayerBalance = _totalPlayerBalance;\r\n        withdrawals[_player].amount = add(withdrawals[_player].amount, _amount);\r\n        withdrawals[_player].timestamp = block.timestamp;\r\n\t\temit BalancesChanged(_amount);\r\n        emit WithdrawalSet(_player, _amount);\r\n\t}\r\n\r\n\tfunction withdraw(uint256 _amount) external pausable {\r\n        require(_amount <= withdrawals[msg.sender].amount);\r\n        require(_amount <= maxWithdrawal);\r\n        require(block.timestamp >= add(withdrawals[msg.sender].timestamp, releaseTime));\r\n        \r\n\t\tbalances[msg.sender] = sub(balances[msg.sender], _amount);\r\n\t\twithdrawals[msg.sender].amount = sub(withdrawals[msg.sender].amount, _amount);\r\n\t\t\r\n\t\trequire(token.transfer(msg.sender, _amount));\r\n\t\temit WithdrawalEvent(msg.sender, _amount);\r\n\t}\r\n\r\n\tfunction changeMaxDeposit(uint256 _max) external pausable isOwner {\r\n\t    maxDeposit = _max;\r\n\t    emit MaxDepositChange(_max);\r\n\t}\r\n\r\n\tfunction changeMaxWithdrawal(uint256 _max) external pausable isOwner {\r\n\t    maxWithdrawal = _max;\r\n\t    emit MaxWithdrawalChange(_max);\r\n\t}\r\n\r\n\tfunction ownerWithdrawalEther(address payable _destination, uint256 _amount) external isOwner {\r\n\t\t_destination.transfer(_amount);\r\n\t}\r\n\r\n\tfunction ownerWithdrawalTokens(address _destination, uint256 _amount) external isOwner {\r\n        require(_amount <= withdrawals[msg.sender].amount);\r\n\t    require((paused == false && _amount <= bankroll()) // only house winnings\r\n\t        || paused == true); // or take entire balance if paused..\r\n\t\trequire(token.transfer(_destination, _amount));\r\n\r\n\t\twithdrawals[msg.sender].amount = sub(withdrawals[msg.sender].amount, _amount);\r\n\t\temit WithdrawalEvent(address(this), _amount);\r\n\t}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"},{\"name\":\"_totalPlayerBalance\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setOwnerWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bankroll\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_destination\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ownerWithdrawalTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_destination\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ownerWithdrawalEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"changeReleaseTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"changeMaxWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"changeMaxDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPlayerBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawals\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxWithdrawal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"authorizeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unauthorizeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releaseTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_player\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256[]\"},{\"name\":\"_totalPlayerBalance\",\"type\":\"uint256\"}],\"name\":\"changeBalances\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setUserWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_authorized\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_totalPlayerBalance\",\"type\":\"uint256\"}],\"name\":\"BalancesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_maxWithdrawal\",\"type\":\"uint256\"}],\"name\":\"MaxWithdrawalChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_maxDeposit\",\"type\":\"uint256\"}],\"name\":\"MaxDepositChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]","ContractName":"SingleTokenBank","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000089d24a6b4ccb1b6faa2625fe562bdd9a23260359000000000000000000000000bb11096ea0139eb82418142754710332a1f280050000000000000000000000001dd3488a85e56764ff3ba6952fff8807f907c4b3","Library":"","LicenseType":"None","SwarmSource":"bzzr://5c90725024d6880fd77fbfb71fa467c7f8e6ad66814dc4f2153ea519b27b2a48"}]}