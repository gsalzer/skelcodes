{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed from, address indexed _to);\r\n\r\n    constructor(address _owner) public {\r\n        owner = _owner;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\ncontract Pausable is Owned {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    modifier whenNotPaused() {\r\n      require(!paused);\r\n      _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n      require(paused);\r\n      _;\r\n    }\r\n\r\n    function pause() onlyOwner whenNotPaused public {\r\n      paused = true;\r\n      emit Pause();\r\n    }\r\n\r\n    function unpause() onlyOwner whenPaused public {\r\n      paused = false;\r\n      emit Unpause();\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n // modifiers\r\n\r\n // mitigate short address attack\r\n // thanks to https://github.com/numerai/contract/blob/c182465f82e50ced8dacb3977ec374a892f5fa8c/contracts/Safe.sol#L30-L34.\r\n // TODO: doublecheck implication of >= compared to ==\r\n    modifier onlyPayloadSize(uint numWords) {\r\n        assert(msg.data.length >= numWords * 32 + 4);\r\n        _;\r\n    }\r\n\r\n    uint256 public totalSupply;\r\n    /*\r\n      *  Public functions\r\n      */\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n\r\n    /*\r\n      *  Events\r\n      */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Burn(address indexed from, uint256 value);\r\n    event SaleContractActivation(address saleContract, uint256 tokensForSale);\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20 {\r\n    using SafeMath for uint256;\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n    mapping(address => uint256) balances;\r\n\r\n  /// @dev Returns number of tokens owned by given address\r\n  /// @param _owner Address of token owner\r\n  /// @return Balance of owner\r\n\r\n  // it is recommended to define functions which can read the state of blockchain but cannot write in it as view instead of constant\r\n\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n  /// @dev Transfers sender's tokens to a given address. Returns success\r\n  /// @param _to Address of token receiver\r\n  /// @param _value Number of tokens to transfer\r\n  /// @return Was transfer successful?\r\n\r\n    function transfer(address _to, uint256 _value) public onlyPayloadSize(2) returns (bool success) {\r\n        if (balances[msg.sender] >= _value && _value > 0 && balances[_to].add(_value) > balances[_to]) {\r\n            balances[msg.sender] = balances[msg.sender].sub(_value);\r\n            balances[_to] = balances[_to].add(_value);\r\n            emit Transfer(msg.sender, _to, _value); // solhint-disable-line\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success\r\n    /// @param _from Address from where tokens are withdrawn\r\n    /// @param _to Address to where tokens are sent\r\n    /// @param _value Number of tokens to transfer\r\n    /// @return Was transfer successful?\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value); // solhint-disable-line\r\n        return true;\r\n    }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n\r\n\r\n    function approve(address _spender, uint256 _value) public onlyPayloadSize(2) returns (bool) {\r\n      // To change the approve amount you first have to reduce the addresses`\r\n      //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n      //  already 0 to mitigate the race condition described here:\r\n      //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\r\n        require(_value == 0 || (allowed[msg.sender][_spender] == 0));\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value); // solhint-disable-line\r\n        return true;\r\n    }\r\n\r\n    function changeApproval(address _spender, uint256 _oldValue, uint256 _newValue) public onlyPayloadSize(3) returns (bool success) {\r\n        require(allowed[msg.sender][_spender] == _oldValue);\r\n        allowed[msg.sender][_spender] = _newValue;\r\n        emit Approval(msg.sender, _spender, _newValue); // solhint-disable-line\r\n        return true;\r\n    }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n /**\r\n  * @dev Burns a specific amount of tokens.\r\n  * @param _value The amount of token to be burned.\r\n  */\r\n    function burn(uint256 _value) public returns (bool burnSuccess) {\r\n        require(_value > 0);\r\n        require(_value <= balances[msg.sender]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        emit Burn(burner, _value); // solhint-disable-line\r\n        return true;\r\n    }\r\n    \r\n    \r\n\r\n}\r\n\r\n /**\r\n * @title Synapse\r\n */\r\ncontract Synapse is StandardToken, Owned, Pausable {\r\n    \r\n    using SafeMath for uint256;\r\n    string public symbol;\r\n    string public name;\r\n    uint8 public decimals;\r\n\r\n    uint256 public tokensForSale = 495000000 * 1 ether;//50% total of Supply for crowdsale   \r\n    uint256 public vestingTokens = 227700000 * 1 ether;//23% of total Supply will be freeze(10% team, 8% reserve and 5% others) \r\n    uint256 public managementTokens = 267300000 * 1 ether;//27% total Supply(12% Marketing, 9% Expansion, 3% Bounty, 3% Advisor)\r\n\r\n    mapping(address => bool) public investorIsVested; \r\n    uint256 public vestingTime = 15552000;// 6 months  \r\n\r\n    uint256 public bountyTokens = 29700000 * 1 ether;\r\n    uint256 public marketingTokens = 118800000 * 1 ether;\r\n    uint256 public expansionTokens = 89100000 * 1 ether;\r\n    uint256 public advisorTokens = 29700000 * 1 ether;    \r\n\r\n    uint256 public icoStartTime;\r\n    uint256 public icoFinalizedTime;\r\n\r\n    address public tokenOwner;\r\n    address public crowdSaleOwner;\r\n    address public vestingOwner;\r\n\r\n    address public saleContract;\r\n    address public vestingContract;\r\n    bool public fundraising = true;\r\n\r\n    mapping (address => bool) public frozenAccounts;\r\n    event FrozenFund(address target, bool frozen);\r\n\r\n\r\n    modifier onlyPayloadSize(uint numWords) {\r\n        assert(msg.data.length >= numWords * 32 + 4);\r\n        _;\r\n    }\r\n\r\n    modifier manageTransfer() {\r\n        if (msg.sender == owner) {\r\n            _;\r\n        } else {\r\n            require(fundraising == false);\r\n            _;\r\n        }\r\n    }\r\n    \r\n    /**\r\n    * @dev constructor of a token contract\r\n    * @param _tokenOwner address of the owner of contract.\r\n    */\r\n    constructor(address _tokenOwner,address _crowdSaleOwner, address _vestingOwner ) public Owned(_tokenOwner) {\r\n\r\n        symbol =\"SYP\";\r\n        name = \"Synapsecoin\";\r\n        decimals = 18;\r\n        tokenOwner = _tokenOwner; \r\n        crowdSaleOwner = _crowdSaleOwner;\r\n        vestingOwner = _vestingOwner;\r\n        totalSupply = 990000000 * 1 ether;\r\n        balances[_tokenOwner] = balances[_tokenOwner].add(managementTokens);\r\n        balances[_crowdSaleOwner] = balances[_crowdSaleOwner].add(tokensForSale);        \r\n        balances[_vestingOwner] = balances[_vestingOwner].add(vestingTokens);\r\n        emit Transfer(address(0), _tokenOwner, managementTokens);\r\n        emit Transfer(address(0), _crowdSaleOwner, tokensForSale);    \r\n        emit Transfer(address(0), _vestingOwner, vestingTokens);        \r\n    }\r\n\r\n    /**\r\n    * @dev  Investor can Transfer token from this method\r\n    * @param _to address of the reciever\r\n    * @param _value amount of tokens to transfer\r\n    */\r\n    function transfer(address _to, uint256 _value) public manageTransfer whenNotPaused onlyPayloadSize(2) returns (bool success) {\r\n        \r\n        require(_value>0);\r\n        require(_to != address(0));\r\n        require(!frozenAccounts[msg.sender]);\r\n        if(investorIsVested[msg.sender]==true )\r\n        {\r\n            require(now >= icoFinalizedTime.add(vestingTime)); \r\n            super.transfer(_to,_value);\r\n            return true;\r\n\r\n        }\r\n        else {\r\n            super.transfer(_to,_value);\r\n            return true;\r\n        }\r\n\r\n    }\r\n    \r\n    /**\r\n    * @dev  Transfer from allow to trasfer token \r\n    * @param _from address of sender \r\n    * @param _to address of the reciever\r\n    * @param _value amount of tokens to transfer\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value) public manageTransfer whenNotPaused onlyPayloadSize(3) returns (bool) {\r\n        require(_value>0);\r\n        require(_to != address(0));\r\n        require(_from != address(0));\r\n        require(!frozenAccounts[_from]);\r\n        if(investorIsVested[_from]==true )\r\n        {\r\n            require(now >= icoFinalizedTime.add(vestingTime));//15552000\r\n            super.transferFrom(_from,_to,_value);\r\n            return true;\r\n\r\n        }\r\n        else {\r\n            \r\n           super.transferFrom(_from,_to,_value);\r\n           return true;\r\n        }    }\r\n    \r\n\r\n    /**\r\n    * activates the sale contract (i.e. transfers saleable contracts)\r\n    * @param _saleContract ,address of crowdsale contract\r\n    */\r\n    function activateSaleContract(address _saleContract) public whenNotPaused {\r\n        require(msg.sender == crowdSaleOwner);\r\n        require(_saleContract != address(0));\r\n        require(saleContract == address(0));        \r\n        saleContract = _saleContract;\r\n        icoStartTime = now;\r\n\r\n    }\r\n     \r\n    /**\r\n    * activates the sale contract (i.e. transfers saleable contracts)\r\n    * @param _vestingContract ,address of crowdsale contract\r\n    */\r\n    function activateVestingContract(address _vestingContract) public whenNotPaused  {\r\n        require(msg.sender == vestingOwner);        \r\n        require(_vestingContract != address(0));\r\n        require(vestingContract == address(0));\r\n        vestingContract = _vestingContract;\r\n        \r\n    }\r\n    \r\n    /**\r\n    * @dev this function will send the bounty tokens to given address\r\n    * @param _to ,address of the bounty receiver.\r\n    * @param _value , number of tokens to be sent.\r\n    */\r\n    function sendBounty(address _to, uint256 _value) public whenNotPaused onlyOwner returns (bool) {\r\n\r\n        require(_to != address(0));\r\n        require(_value > 0 );        \r\n        require(bountyTokens >= _value);\r\n        bountyTokens = bountyTokens.sub(_value);\r\n        return super.transfer(_to, _value);  \r\n        }    \r\n\r\n    /**\r\n    * @dev this function will send the Marketing tokens to given address\r\n    * @param _to ,address of the bounty receiver.\r\n    * @param _value , number of tokens to be sent.\r\n    */\r\n    function sendMarketingTokens(address _to, uint256 _value) public whenNotPaused onlyOwner returns (bool) {\r\n\r\n        require(_to != address(0));\r\n        require(_value > 0 );        \r\n        require(marketingTokens >= _value);\r\n        marketingTokens = marketingTokens.sub(_value);\r\n        return super.transfer(_to, _value);  \r\n   }    \r\n\r\n    /**\r\n    * @dev this function will send the expansion tokens to given address\r\n    * @param _to ,address of the bounty receiver.\r\n    * @param _value , number of tokens to be sent.\r\n    */\r\n    function sendExpansionTokens(address _to, uint256 _value) public whenNotPaused onlyOwner returns (bool) {\r\n\r\n        require(_to != address(0));\r\n        require(_value > 0 );        \r\n        require(expansionTokens >= _value);\r\n        expansionTokens = expansionTokens.sub(_value);\r\n        return super.transfer(_to, _value);  \r\n   }    \r\n\r\n    /**\r\n    * @dev this function will send the expansion tokens to given address\r\n    * @param _to ,address of the bounty receiver.\r\n    * @param _value , number of tokens to be sent.\r\n    */\r\n    function sendAdvisorTokens(address _to, uint256 _value) public whenNotPaused onlyOwner returns (bool) {\r\n\r\n        require(_to != address(0));\r\n        require(_value > 0 );        \r\n        require(advisorTokens >= _value);\r\n        advisorTokens = advisorTokens.sub(_value);\r\n        return super.transfer(_to, _value);  \r\n   }    \r\n\r\n    /**\r\n    * @dev function to check whether passed address is a contract address\r\n    */\r\n    function isContract(address _address) private view returns (bool is_contract) {\r\n        uint256 length;\r\n        assembly {\r\n        //retrieve the size of the code on target address, this needs assembly\r\n            length := extcodesize(_address)\r\n        }\r\n        return (length > 0);\r\n    }\r\n    \r\n    /**\r\n    * @dev this function can only be called by crowdsale contract to transfer tokens to investor\r\n    * @param _to address The address of the investor.\r\n    * @param _value uint256 The amount of tokens to be send\r\n    */\r\n    function saleTransfer(address _to, uint256 _value) external whenNotPaused returns (bool) {\r\n        require(saleContract != address(0),'sale address is not activated');\r\n        require(msg.sender == saleContract,'caller is not crowdsale contract');\r\n        require(!frozenAccounts[_to],'account is freezed');\r\n        return super.transferFrom(crowdSaleOwner,_to, _value);\r\n            \r\n    }\r\n\r\n    /**\r\n    * @dev this function can only be called by  contract to transfer tokens to vesting beneficiary\r\n    * @param _to address The address of the beneficiary.\r\n    * @param _value uint256 The amount of tokens to be send\r\n    */\r\n    function vestingTransfer(address _to, uint256 _value) external whenNotPaused returns (bool) {\r\n        require(icoFinalizedTime == 0,'ico is finalised');\r\n        require(vestingContract != address(0));\r\n        require(msg.sender == vestingContract,'caller is not a vesting contract');\r\n        investorIsVested[_to] = true;\r\n        return super.transferFrom(vestingOwner,_to, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev this function will closes the sale ,after this anyone can transfer their tokens to others.\r\n    */\r\n    function finalize() external whenNotPaused returns(bool){\r\n        require(fundraising != false); \r\n        require(msg.sender == saleContract);\r\n        fundraising = false;\r\n        icoFinalizedTime = now;\r\n        return true;\r\n    }\r\n\r\n   /**\r\n   * @dev this function will freeze the any account so that the frozen account will not able to participate in crowdsale.\r\n   * @param target ,address of the target account \r\n   * @param freeze ,boolean value to freeze or unfreeze the account ,true to freeze and false to unfreeze\r\n   */\r\n   function freezeAccount (address target, bool freeze) public onlyOwner {\r\n        require(target != 0x0);\r\n        frozenAccounts[target] = freeze;\r\n        emit FrozenFund(target, freeze); // solhint-disable-line\r\n    }\r\n\r\n    /**\r\n    * @dev Function to transfer any ERC20 token  to owner address which gets accidentally transferred to this contract\r\n    * @param tokenAddress The address of the ERC20 contract\r\n    * @param tokens The amount of tokens to transfer.\r\n    * @return A boolean that indicates if the operation was successful.\r\n    */\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public whenNotPaused onlyOwner returns (bool success) {\r\n        require(tokenAddress != address(0));\r\n        require(isContract(tokenAddress));\r\n        return ERC20(tokenAddress).transfer(owner, tokens);\r\n    }\r\n    \r\n    function () external payable {\r\n        revert();\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoFinalizedTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendAdvisorTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisorTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendBounty\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"burnSuccess\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendMarketingTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"managementTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketingTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_oldValue\",\"type\":\"uint256\"},{\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"changeApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"saleTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendExpansionTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundraising\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investorIsVested\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expansionTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"vestingTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdSaleOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vestingContract\",\"type\":\"address\"}],\"name\":\"activateVestingContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_saleContract\",\"type\":\"address\"}],\"name\":\"activateSaleContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"name\":\"_crowdSaleOwner\",\"type\":\"address\"},{\"name\":\"_vestingOwner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"saleContract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensForSale\",\"type\":\"uint256\"}],\"name\":\"SaleContractActivation\",\"type\":\"event\"}]","ContractName":"Synapse","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000085eb28ddc089aad8b5f640a4d27b933bcfdd5fb5000000000000000000000000a8c7e144aae8e824e3c7efba7368e7623dd6a53f00000000000000000000000085eb28ddc089aad8b5f640a4d27b933bcfdd5fb5","Library":"","SwarmSource":"bzzr://aa5a3cdb91a4525f886bbaa60f0acb073913b5fbb9821431c4a6c7aebbfce38d"}]}