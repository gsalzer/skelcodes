{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/interfaces/TokenConverter.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\ninterface TokenConverter {\r\n    function convertFrom(\r\n        IERC20 _fromToken,\r\n        IERC20 _toToken,\r\n        uint256 _fromAmount,\r\n        uint256 _minReceive\r\n    ) external payable returns (uint256 _received);\r\n\r\n    function convertTo(\r\n        IERC20 _fromToken,\r\n        IERC20 _toToken,\r\n        uint256 _toAmount,\r\n        uint256 _maxSpend\r\n    ) external payable returns (uint256 _spend);\r\n\r\n    function getPriceConvertFrom(\r\n        IERC20 _fromToken,\r\n        IERC20 _toToken,\r\n        uint256 _fromAmount\r\n    ) external view returns (uint256 _receive);\r\n\r\n    function getPriceConvertTo(\r\n        IERC20 _fromToken,\r\n        IERC20 _toToken,\r\n        uint256 _toAmount\r\n    ) external view returns (uint256 _spend);\r\n}\r\n\r\n// File: contracts/interfaces/uniswap/UniswapExchange.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n/// https:///docs.uniswap.io/smart-contract-integration/interface\r\ncontract UniswapExchange {\r\n    /// Address of ERC20 token sold on this exchange\r\n    function tokenAddress() external view returns (address token);\r\n    /// Address of Uniswap Factory\r\n    function factoryAddress() external view returns (address factory);\r\n    /// Provide Liquidity\r\n    function addLiquidity(uint256 minLiquidity, uint256 maxTokens, uint256 deadline) external payable returns (uint256);\r\n    function removeLiquidity(uint256 amount, uint256 minEth, uint256 minTokens, uint256 deadline) external returns (uint256, uint256);\r\n    /// Get Prices\r\n    function getEthToTokenInputPrice(uint256 ethSold) external view returns (uint256 tokensBought);\r\n    function getEthToTokenOutputPrice(uint256 tokensBought) external view returns (uint256 ethSold);\r\n    function getTokenToEthInputPrice(uint256 tokensSold) external view returns (uint256 ethBought);\r\n    function getTokenToEthOutputPrice(uint256 ethBought) external view returns (uint256 tokensSold);\r\n    /// Trade ETH to ERC20\r\n    function ethToTokenSwapInput(uint256 minTokens, uint256 deadline) external payable returns (uint256  tokensBought);\r\n    function ethToTokenTransferInput(uint256 minTokens, uint256 deadline, address recipient) external payable returns (uint256  tokensBought);\r\n    function ethToTokenSwapOutput(uint256 tokensBought, uint256 deadline) external payable returns (uint256  ethSold);\r\n    function ethToTokenTransferOutput(uint256 tokensBought, uint256 deadline, address recipient) external payable returns (uint256  ethSold);\r\n    /// Trade ERC20 to ETH\r\n    function tokenToEthSwapInput(uint256 tokensSold, uint256 minEth, uint256 deadline) external returns (uint256  ethBought);\r\n    function tokenToEthTransferInput(uint256 tokensSold, uint256 minTokens, uint256 deadline, address recipient) external returns (uint256  ethBought);\r\n    function tokenToEthSwapOutput(uint256 ethBought, uint256 maxTokens, uint256 deadline) external returns (uint256  tokensSold);\r\n    function tokenToEthTransferOutput(uint256 ethBought, uint256 maxTokens, uint256 deadline, address recipient) external returns (uint256  tokensSold);\r\n    /// Trade ERC20 to ERC20\r\n    function tokenToTokenSwapInput(uint256 tokensSold, uint256 minTokensBought, uint256 minEthBought, uint256 deadline, address tokenAddr) external returns (uint256  tokensBought);\r\n    function tokenToTokenTransferInput(uint256 tokensSold, uint256 minTokensBought, uint256 minEthBought, uint256 deadline, address recipient, address tokenAddr) external returns (uint256  tokensBought);\r\n    function tokenToTokenSwapOutput(uint256 tokensBought, uint256 maxTokensSold, uint256 maxEthSold, uint256 deadline, address tokenAddr) external returns (uint256  tokensSold);\r\n    function tokenToTokenTransferOutput(uint256 tokensBought, uint256 maxTokensSold, uint256 maxEthSold, uint256 deadline, address recipient, address tokenAddr) external returns (uint256  tokensSold);\r\n    /// Trade ERC20 to Custom Pool\r\n    function tokenToExchangeSwapInput(uint256 tokensSold, uint256 minTokensBought, uint256 minEthBought, uint256 deadline, address exchangeAddr) external returns (uint256  tokensBought);\r\n    function tokenToExchangeTransferInput(uint256 tokensSold, uint256 minTokensBought, uint256 minEthBought, uint256 deadline, address recipient, address exchangeAddr) external returns (uint256  tokensBought);\r\n    function tokenToExchangeSwapOutput(uint256 tokensBought, uint256 maxTokensSold, uint256 maxEthSold, uint256 deadline, address exchangeAddr) external returns (uint256  tokensSold);\r\n    function tokenToExchangeTransferOutput(uint256 tokensBought, uint256 maxTokensSold, uint256 maxEthSold, uint256 deadline, address recipient, address exchangeAddr) external returns (uint256  tokensSold);\r\n    /// ERC20 comaptibility for liquidity tokens\r\n    bytes32 public name;\r\n    bytes32 public symbol;\r\n    uint256 public decimals;\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 value) external returns (bool);\r\n    function approve(address _spender, uint256 _value) external returns (bool);\r\n    function allowance(address _owner, address _spender) external view returns (uint256);\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    /// Never use\r\n    function setup(address tokenAddr) external;\r\n}\r\n\r\n// File: contracts/interfaces/uniswap/UniswapFactory.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\n\r\n/// https://docs.uniswap.io/smart-contract-integration/interface\r\ncontract UniswapFactory {\r\n    /// Public Variables\r\n    address public exchangeTemplate;\r\n    uint256 public tokenCount;\r\n    /// Create Exchange\r\n    function createExchange(IERC20 token) external returns (UniswapExchange exchange);\r\n    /// Get Exchange and Token Info\r\n    function getExchange(IERC20 token) external view returns (UniswapExchange exchange);\r\n    function getToken(address exchange) external view returns (IERC20 token);\r\n    function getTokenWithId(uint256 tokenId) external view returns (IERC20 token);\r\n    /// Never use\r\n    function initializeFactory(address template) external;\r\n}\r\n\r\n// File: contracts/utils/SafeERC20.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n\r\n/**\r\n* @dev Library to perform safe calls to standard method for ERC20 tokens.\r\n*\r\n* Why Transfers: transfer methods could have a return value (bool), throw or revert for insufficient funds or\r\n* unathorized value.\r\n*\r\n* Why Approve: approve method could has a return value (bool) or does not accept 0 as a valid value (BNB token).\r\n* The common strategy used to clean approvals.\r\n*\r\n* We use the Solidity call instead of interface methods because in the case of transfer, it will fail\r\n* for tokens with an implementation without returning a value.\r\n* Since versions of Solidity 0.4.22 the EVM has a new opcode, called RETURNDATASIZE.\r\n* This opcode stores the size of the returned data of an external call. The code checks the size of the return value\r\n* after an external call and reverts the transaction in case the return data is shorter than expected\r\n* https://github.com/nachomazzara/SafeERC20/blob/master/contracts/libs/SafeERC20.sol\r\n*/\r\nlibrary SafeERC20 {\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param _token erc20 The address of the ERC20 contract\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the _value of tokens to be transferred\r\n    * @return bool whether the transfer was successful or not\r\n    */\r\n    function safeTransfer(IERC20 _token, address _to, uint256 _value) internal returns (bool) {\r\n        uint256 prevBalance = _token.balanceOf(address(this));\r\n\r\n        if (prevBalance < _value) {\r\n            // Insufficient funds\r\n            return false;\r\n        }\r\n\r\n        (bool success,) = address(_token).call(\r\n            abi.encodeWithSignature(\"transfer(address,uint256)\", _to, _value)\r\n        );\r\n\r\n        if (!success || prevBalance - _value != _token.balanceOf(address(this))) {\r\n            // Transfer failed\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another\r\n    * @param _token erc20 The address of the ERC20 contract\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the _value of tokens to be transferred\r\n    * @return bool whether the transfer was successful or not\r\n    */\r\n    function safeTransferFrom(\r\n        IERC20 _token,\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) internal returns (bool)\r\n    {\r\n        uint256 prevBalance = _token.balanceOf(_from);\r\n\r\n        if (prevBalance < _value) {\r\n            // Insufficient funds\r\n            return false;\r\n        }\r\n\r\n        if (_token.allowance(_from, address(this)) < _value) {\r\n            // Insufficient allowance\r\n            return false;\r\n        }\r\n\r\n        (bool success,) = address(_token).call(\r\n            abi.encodeWithSignature(\"transferFrom(address,address,uint256)\", _from, _to, _value)\r\n        );\r\n\r\n        if (!success || prevBalance - _value != _token.balanceOf(_from)) {\r\n            // Transfer failed\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n   /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender\"s allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * @param _token erc20 The address of the ERC20 contract\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   * @return bool whether the approve was successful or not\r\n   */\r\n    function safeApprove(IERC20 _token, address _spender, uint256 _value) internal returns (bool) {\r\n        (bool success,) = address(_token).call(\r\n            abi.encodeWithSignature(\"approve(address,uint256)\",_spender, _value)\r\n        );\r\n\r\n        if (!success && _token.allowance(address(this), _spender) != _value) {\r\n            // Approve failed\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n   /**\r\n   * @dev Clear approval\r\n   * Note that if 0 is not a valid value it will be set to 1.\r\n   * @param _token erc20 The address of the ERC20 contract\r\n   * @param _spender The address which will spend the funds.\r\n   */\r\n    function clearApprove(IERC20 _token, address _spender) internal returns (bool) {\r\n        bool success = safeApprove(_token, _spender, 0);\r\n\r\n        if (!success) {\r\n            success = safeApprove(_token, _spender, 1);\r\n        }\r\n\r\n        return success;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/utils/SafeExchange.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n\r\n\r\n\r\nlibrary SafeExchange {\r\n    using SafeMath for uint256;\r\n\r\n    modifier swaps(uint256 _value, IERC20 _token) {\r\n        uint256 nextBalance = _token.balanceOf(address(this)).add(_value);\r\n        _;\r\n        require(\r\n            _token.balanceOf(address(this)) >= nextBalance,\r\n            \"Balance validation failed after swap.\"\r\n        );\r\n    }\r\n\r\n    function swapTokens(\r\n        UniswapExchange _exchange,\r\n        uint256 _outValue,\r\n        uint256 _inValue,\r\n        uint256 _ethValue,\r\n        uint256 _deadline,\r\n        IERC20 _outToken\r\n    ) internal swaps(_outValue, _outToken) {\r\n        _exchange.tokenToTokenSwapOutput(\r\n            _outValue,\r\n            _inValue,\r\n            _ethValue,\r\n            _deadline,\r\n            address(_outToken)\r\n        );\r\n    }\r\n\r\n    function swapEther(\r\n        UniswapExchange _exchange,\r\n        uint256 _outValue,\r\n        uint256 _ethValue,\r\n        uint256 _deadline,\r\n        IERC20 _outToken\r\n    ) internal swaps(_outValue, _outToken) {\r\n        _exchange.ethToTokenSwapOutput.value(_ethValue)(_outValue, _deadline);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/converter/UniswapConverter.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @notice proxy between ConverterRamp and Uniswap\r\n///         accepts tokens and ether, converts these to the desired token,\r\n///         and makes approve calls to allow the recipient to transfer those\r\n///         tokens from the contract.\r\n/// @author Joaquin Pablo Gonzalez (jpgonzalezra@gmail.com) & Agustin Aguilar (agusxrun@gmail.com)\r\ncontract UniswapConverter is TokenConverter, Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeExchange for UniswapExchange;\r\n    using SafeERC20 for IERC20;\r\n\r\n    /// @notice address to identify operations with ETH\r\n    IERC20 constant internal ETH_TOKEN_ADDRESS = IERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\r\n\r\n    /// @notice registry of ERC20 tokens that have been added to the system\r\n    ///         and the exchange to which they are associated.\r\n    UniswapFactory public factory;\r\n\r\n    constructor (address _uniswapFactory) public {\r\n        factory = UniswapFactory(_uniswapFactory);\r\n    }\r\n\r\n    function convertFrom(\r\n        IERC20 _fromToken,\r\n        IERC20 _toToken,\r\n        uint256 _fromAmount,\r\n        uint256 _minReceive\r\n    ) external payable returns (uint256 _received) {\r\n        _pull(_fromToken, _fromAmount);\r\n\r\n        UniswapFactory _factory = factory;\r\n\r\n        if (_fromToken == ETH_TOKEN_ADDRESS) {\r\n            // Convert ETH to TOKEN\r\n            // and send directly to msg.sender\r\n            _received = _factory.getExchange(_toToken).ethToTokenTransferInput.value(\r\n                _fromAmount\r\n            )(\r\n                1,\r\n                uint(-1),\r\n                msg.sender\r\n            );\r\n        } else if (_toToken == ETH_TOKEN_ADDRESS) {\r\n            // Load Uniswap exchange\r\n            UniswapExchange exchange = _factory.getExchange(_fromToken);\r\n            // Convert TOKEN to ETH\r\n            // and send directly to msg.sender\r\n            _approveOnlyOnce(_fromToken, address(exchange), _fromAmount);\r\n            _received = exchange.tokenToEthTransferInput(\r\n                _fromAmount,\r\n                1,\r\n                uint(-1),\r\n                msg.sender\r\n            );\r\n        } else {\r\n            // Load Uniswap exchange\r\n            UniswapExchange exchange = _factory.getExchange(_fromToken);\r\n            // Convert TOKENA to ETH\r\n            // and send it to this contract\r\n            _approveOnlyOnce(_fromToken, address(exchange), _fromAmount);\r\n            _received = exchange.tokenToTokenTransferInput(\r\n                _fromAmount,\r\n                1,\r\n                1,\r\n                uint(-1),\r\n                msg.sender,\r\n                address(_toToken)\r\n            );\r\n        }\r\n\r\n        require(_received >= _minReceive, \"_received is not enought\");\r\n    }\r\n\r\n    function convertTo(\r\n        IERC20 _fromToken,\r\n        IERC20 _toToken,\r\n        uint256 _toAmount,\r\n        uint256 _maxSpend\r\n    ) external payable returns (uint256 _spent) {\r\n        _pull(_fromToken, _maxSpend);\r\n\r\n        UniswapFactory _factory = factory;\r\n\r\n        if (_fromToken == ETH_TOKEN_ADDRESS) {\r\n            // Convert ETH to TOKEN\r\n            // and send directly to msg.sender\r\n            _spent = _factory.getExchange(_toToken).ethToTokenTransferOutput.value(\r\n                _maxSpend\r\n            )(\r\n                _toAmount,\r\n                uint(-1),\r\n                msg.sender\r\n            );\r\n        } else if (_toToken == ETH_TOKEN_ADDRESS) {\r\n            // Load Uniswap exchange\r\n            UniswapExchange exchange = _factory.getExchange(_fromToken);\r\n            // Convert TOKEN to ETH\r\n            // and send directly to msg.sender\r\n            _approveOnlyOnce(_fromToken, address(exchange), _maxSpend);\r\n            _spent = exchange.tokenToEthTransferOutput(\r\n                _toAmount,\r\n                _maxSpend,\r\n                uint(-1),\r\n                msg.sender\r\n            );\r\n        } else {\r\n            // Load Uniswap exchange\r\n            UniswapExchange exchange = _factory.getExchange(_fromToken);\r\n            // Convert TOKEN to ETH\r\n            // and send directly to msg.sender\r\n            _approveOnlyOnce(_fromToken, address(exchange), _maxSpend);\r\n            _spent = exchange.tokenToTokenTransferOutput(\r\n                _toAmount,\r\n                _maxSpend,\r\n                uint(-1),\r\n                uint(-1),\r\n                msg.sender,\r\n                address(_toToken)\r\n            );\r\n        }\r\n\r\n        require(_spent <= _maxSpend, \"_maxSpend exceed\");\r\n        if (_spent < _maxSpend) {\r\n            _transfer(_fromToken, msg.sender, _maxSpend - _spent);\r\n        }\r\n    }\r\n\r\n    function getPriceConvertFrom(\r\n        IERC20 _fromToken,\r\n        IERC20 _toToken,\r\n        uint256 _fromAmount\r\n    ) external view returns (uint256 _receive) {\r\n        UniswapFactory _factory = factory;\r\n\r\n        if (_fromToken == ETH_TOKEN_ADDRESS) {\r\n            // ETH -> TOKEN convertion\r\n            _receive = _factory.getExchange(_toToken).getEthToTokenInputPrice(_fromAmount);\r\n        } else if (_toToken == ETH_TOKEN_ADDRESS) {\r\n            // TOKEN -> ETH convertion\r\n            _receive = _factory.getExchange(_fromToken).getTokenToEthInputPrice(_fromAmount);\r\n        } else {\r\n            // TOKENA -> TOKENB convertion\r\n            //   equals to: TOKENA -> ETH -> TOKENB\r\n            uint256 ethBought = _factory.getExchange(_fromToken).getTokenToEthInputPrice(_fromAmount);\r\n            _receive = _factory.getExchange(_toToken).getEthToTokenInputPrice(ethBought);\r\n        }\r\n    }\r\n\r\n    function getPriceConvertTo(\r\n        IERC20 _fromToken,\r\n        IERC20 _toToken,\r\n        uint256 _toAmount\r\n    ) external view returns (uint256 _spend) {\r\n        UniswapFactory _factory = factory;\r\n\r\n        if (_fromToken == ETH_TOKEN_ADDRESS) {\r\n            // ETH -> TOKEN convertion\r\n            _spend = _factory.getExchange(_toToken).getEthToTokenOutputPrice(_toAmount);\r\n        } else if (_toToken == ETH_TOKEN_ADDRESS) {\r\n            // TOKEN -> ETH convertion\r\n            _spend = _factory.getExchange(_fromToken).getTokenToEthOutputPrice(_toAmount);\r\n        } else {\r\n            // TOKENA -> TOKENB convertion\r\n            //   equals to: TOKENA -> ETH -> TOKENB\r\n            uint256 ethSpend = _factory.getExchange(_toToken).getEthToTokenOutputPrice(_toAmount);\r\n            _spend = _factory.getExchange(_fromToken).getTokenToEthOutputPrice(ethSpend);\r\n        }\r\n    }\r\n\r\n    function _pull(\r\n        IERC20 _token,\r\n        uint256 _amount\r\n    ) private {\r\n        if (_token == ETH_TOKEN_ADDRESS) {\r\n            require(msg.value == _amount, \"sent eth is not enought\");\r\n        } else {\r\n            require(msg.value == 0, \"method is not payable\");\r\n            require(_token.transferFrom(msg.sender, address(this), _amount), \"error pulling tokens\");\r\n        }\r\n    }\r\n\r\n    function _transfer(\r\n        IERC20 _token,\r\n        address payable _to,\r\n        uint256 _amount\r\n    ) private {\r\n        if (_token == ETH_TOKEN_ADDRESS) {\r\n            _to.transfer(_amount);\r\n        } else {\r\n            require(_token.transfer(_to, _amount), \"error sending tokens\");\r\n        }\r\n    }\r\n\r\n    function _approveOnlyOnce(\r\n        IERC20 _token,\r\n        address _spender,\r\n        uint256 _amount\r\n    ) private {\r\n        uint256 allowance = _token.allowance(address(this), _spender);\r\n        if (allowance < _amount) {\r\n            if (allowance != 0) {\r\n                _token.clearApprove(_spender);\r\n            }\r\n\r\n            _token.approve(_spender, uint(-1));\r\n        }\r\n    }\r\n\r\n    function() external payable {}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapFactory\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minReceive\",\"type\":\"uint256\"}],\"name\":\"convertFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_received\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_toAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSpend\",\"type\":\"uint256\"}],\"name\":\"convertTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_spent\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract UniswapFactory\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromAmount\",\"type\":\"uint256\"}],\"name\":\"getPriceConvertFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_receive\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_toAmount\",\"type\":\"uint256\"}],\"name\":\"getPriceConvertTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_spend\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"UniswapConverter","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c0a47dfe034b400b47bdad5fecda2621de6c4d95","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://cb28903525d625c7f7d9b64c8fabb4a72efa19b4fdce58f2adc7e725880075c9"}]}