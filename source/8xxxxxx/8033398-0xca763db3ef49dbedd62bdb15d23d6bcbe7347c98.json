{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://eips.ethereum.org/EIPS/eip-20\r\n * Originally based on code by FirstBlood:\r\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n *\r\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\r\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\r\n * compliant implementations may not do it.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev Total number of tokens in existence\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param owner The address to query the balance of.\r\n     * @return A uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token to a specified address\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _transfer(from, to, value);\r\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token for a specified addresses\r\n     * @param from The address to transfer from.\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that mints an amount of the token and assigns it to\r\n     * an account. This encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param account The account that will receive the created tokens.\r\n     * @param value The amount that will be created.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve an address to spend another addresses' tokens.\r\n     * @param owner The address that owns the tokens.\r\n     * @param spender The address that will spend the tokens.\r\n     * @param value The number of tokens that can be spent.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(spender != address(0));\r\n        require(owner != address(0));\r\n\r\n        _allowed[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account, deducting from the sender's allowance for said account. Uses the\r\n     * internal burn function.\r\n     * Emits an Approval event (reflecting the reduced allowance).\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burnFrom(address account, uint256 value) internal {\r\n        _burn(account, value);\r\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/Roles.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev give an account access to this role\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(!has(role, account));\r\n\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove an account's access to this role\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(has(role, account));\r\n\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev check if an account has this role\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0));\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/roles/MinterRole.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\ncontract MinterRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n\r\n    Roles.Role private _minters;\r\n\r\n    constructor () internal {\r\n        _addMinter(msg.sender);\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(isMinter(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minters.has(account);\r\n    }\r\n\r\n    function addMinter(address account) public onlyMinter {\r\n        _addMinter(account);\r\n    }\r\n\r\n    function renounceMinter() public {\r\n        _removeMinter(msg.sender);\r\n    }\r\n\r\n    function _addMinter(address account) internal {\r\n        _minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    function _removeMinter(address account) internal {\r\n        _minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Mintable\r\n * @dev ERC20 minting logic\r\n */\r\ncontract ERC20Mintable is ERC20, MinterRole {\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param to The address that will receive the minted tokens.\r\n     * @param value The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address to, uint256 value) public onlyMinter returns (bool) {\r\n        _mint(to, value);\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts/ownership/PayableOwnable.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n/**\r\n * @title PayableOwnable\r\n * @dev The PayableOwnable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n * PayableOwnable is extended from open-zeppelin Ownable smart contract, with the difference of making the owner\r\n * a payable address.\r\n */\r\ncontract PayableOwnable {\r\n    address payable private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address payable) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address payable newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address payable newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/PumaPayPullPaymentV2.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\n\r\ncontract PumaPayPullPayment is PayableOwnable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /// ===============================================================================================================\r\n    ///                                      Events\r\n    /// ===============================================================================================================\r\n\r\n    event LogExecutorAdded(address executor);\r\n    event LogExecutorRemoved(address executor);\r\n    event LogSetConversionRate(string currency, uint256 conversionRate);\r\n\r\n    event LogPullPaymentRegistered(\r\n        address customerAddress,\r\n        bytes32 paymentID,\r\n        string uniqueReferenceID\r\n    );\r\n\r\n    event LogPullPaymentCancelled(\r\n        address customerAddress,\r\n        bytes32 paymentID,\r\n        string uniqueReferenceID\r\n    );\r\n\r\n    event LogPullPaymentExecuted(\r\n        address customerAddress,\r\n        bytes32 paymentID,\r\n        string uniqueReferenceID,\r\n        uint256 pmaAmountTransferred\r\n    );\r\n\r\n    /// ===============================================================================================================\r\n    ///                                      Constants\r\n    /// ===============================================================================================================\r\n\r\n    uint256 constant private DECIMAL_FIXER = 10 ** 10;              /// 1e^10 - This transforms the Rate from decimals to uint256\r\n    uint256 constant private FIAT_TO_CENT_FIXER = 100;              /// Fiat currencies have 100 cents in 1 basic monetary unit.\r\n    uint256 constant private OVERFLOW_LIMITER_NUMBER = 10 ** 20;    /// 1e^20 - Prevent numeric overflows\r\n\r\n    uint256 constant private ONE_ETHER = 1 ether;                               /// PumaPay token has 18 decimals - same as one ETHER\r\n    uint256 constant private FUNDING_AMOUNT = 0.5 ether;                          /// Amount to transfer to owner/executor\r\n    uint256 constant private MINIMUM_AMOUNT_OF_ETH_FOR_OPERATORS = 0.15 ether;  /// min amount of ETH for owner/executor\r\n\r\n    /// ===============================================================================================================\r\n    ///                                      Members\r\n    /// ===============================================================================================================\r\n\r\n    IERC20 public token;\r\n\r\n    mapping(string => uint256) private conversionRates;\r\n    mapping(address => bool) public executors;\r\n    mapping(address => mapping(address => PullPayment)) public pullPayments;\r\n\r\n    struct PullPayment {\r\n        bytes32 paymentID;                      /// ID of the payment\r\n        bytes32 businessID;                     /// ID of the business\r\n        string uniqueReferenceID;               /// unique reference ID the business is adding on the pull payment\r\n        string currency;                        /// 3-letter abbr i.e. 'EUR' / 'USD' etc.\r\n        uint256 initialPaymentAmountInCents;    /// initial payment amount in fiat in cents\r\n        uint256 fiatAmountInCents;              /// payment amount in fiat in cents\r\n        uint256 frequency;                      /// how often merchant can pull - in seconds\r\n        uint256 numberOfPayments;               /// amount of pull payments merchant can make\r\n        uint256 startTimestamp;                 /// when subscription starts - in seconds\r\n        uint256 nextPaymentTimestamp;           /// timestamp of next payment\r\n        uint256 lastPaymentTimestamp;           /// timestamp of last payment\r\n        uint256 cancelTimestamp;                /// timestamp the payment was cancelled\r\n        address treasuryAddress;                /// address which pma tokens will be transfer to on execution\r\n    }\r\n\r\n    /// ===============================================================================================================\r\n    ///                                      Modifiers\r\n    /// ===============================================================================================================\r\n    modifier isExecutor() {\r\n        require(executors[msg.sender], \"msg.sender not an executor\");\r\n        _;\r\n    }\r\n\r\n    modifier executorExists(address _executor) {\r\n        require(executors[_executor], \"Executor does not exists.\");\r\n        _;\r\n    }\r\n\r\n    modifier executorDoesNotExists(address _executor) {\r\n        require(!executors[_executor], \"Executor already exists.\");\r\n        _;\r\n    }\r\n\r\n    modifier paymentExists(address _customer, address _pullPaymentExecutor) {\r\n        require(doesPaymentExist(_customer, _pullPaymentExecutor), \"Pull Payment does not exists\");\r\n        _;\r\n    }\r\n\r\n    modifier paymentNotCancelled(address _customer, address _pullPaymentExecutor) {\r\n        require(pullPayments[_customer][_pullPaymentExecutor].cancelTimestamp == 0, \"Pull Payment is cancelled.\");\r\n        _;\r\n    }\r\n\r\n    modifier isValidPullPaymentExecutionRequest(address _customer, address _pullPaymentExecutor, bytes32 _paymentID) {\r\n        require(\r\n            (pullPayments[_customer][_pullPaymentExecutor].initialPaymentAmountInCents > 0 ||\r\n        (now >= pullPayments[_customer][_pullPaymentExecutor].startTimestamp &&\r\n        now >= pullPayments[_customer][_pullPaymentExecutor].nextPaymentTimestamp)\r\n            ), \"Invalid pull payment execution request - Time of execution is invalid.\"\r\n        );\r\n        require(pullPayments[_customer][_pullPaymentExecutor].numberOfPayments > 0,\r\n            \"Invalid pull payment execution request - Number of payments is zero.\");\r\n\r\n        require((pullPayments[_customer][_pullPaymentExecutor].cancelTimestamp == 0 ||\r\n        pullPayments[_customer][_pullPaymentExecutor].cancelTimestamp > pullPayments[_customer][_pullPaymentExecutor].nextPaymentTimestamp),\r\n            \"Invalid pull payment execution request - Pull payment is cancelled\");\r\n        require(keccak256(\r\n            abi.encodePacked(pullPayments[_customer][_pullPaymentExecutor].paymentID)\r\n        ) == keccak256(abi.encodePacked(_paymentID)),\r\n            \"Invalid pull payment execution request - Payment ID not matching.\");\r\n        _;\r\n    }\r\n\r\n    modifier isValidDeletionRequest(bytes32 _paymentID, address _customer, address _pullPaymentExecutor) {\r\n        require(_customer != address(0), \"Invalid deletion request - Client address is ZERO_ADDRESS.\");\r\n        require(_pullPaymentExecutor != address(0), \"Invalid deletion request - Beneficiary address is ZERO_ADDRESS.\");\r\n        require(_paymentID.length != 0, \"Invalid deletion request - Payment ID is empty.\");\r\n        _;\r\n    }\r\n\r\n    modifier isValidAddress(address _address) {\r\n        require(_address != address(0), \"Invalid address - ZERO_ADDRESS provided\");\r\n        _;\r\n    }\r\n\r\n    modifier validConversionRate(string memory _currency) {\r\n        require(bytes(_currency).length != 0, \"Invalid conversion rate - Currency is empty.\");\r\n        require(conversionRates[_currency] > 0, \"Invalid conversion rate - Must be higher than zero.\");\r\n        _;\r\n    }\r\n\r\n    modifier validAmount(uint256 _fiatAmountInCents) {\r\n        require(_fiatAmountInCents > 0, \"Invalid amount - Must be higher than zero\");\r\n        _;\r\n    }\r\n\r\n    /// ===============================================================================================================\r\n    ///                                      Constructor\r\n    /// ===============================================================================================================\r\n\r\n    /// @dev Contract constructor - sets the token address that the contract facilitates.\r\n    /// @param _token Token Address.\r\n    constructor (address _token)\r\n    public {\r\n        require(_token != address(0), \"Invalid address for token - ZERO_ADDRESS provided\");\r\n        token = IERC20(_token);\r\n    }\r\n\r\n    // @notice Will receive any eth sent to the contract\r\n    function() external payable {\r\n    }\r\n\r\n    /// ===============================================================================================================\r\n    ///                                      Public Functions - Owner Only\r\n    /// ===============================================================================================================\r\n\r\n    /// @dev Adds a new executor. - can be executed only by the onwer.\r\n    /// When adding a new executor 1 ETH is tranferred to allow the executor to pay for gas.\r\n    /// The balance of the owner is also checked and if funding is needed 1 ETH is transferred.\r\n    /// @param _executor - address of the executor which cannot be zero address.\r\n\r\n    function addExecutor(address payable _executor)\r\n    public\r\n    onlyOwner\r\n    isValidAddress(_executor)\r\n    executorDoesNotExists(_executor)\r\n    {\r\n        _executor.transfer(FUNDING_AMOUNT);\r\n        executors[_executor] = true;\r\n\r\n        if (isFundingNeeded(owner())) {\r\n            owner().transfer(FUNDING_AMOUNT);\r\n        }\r\n\r\n        emit LogExecutorAdded(_executor);\r\n    }\r\n\r\n    /// @dev Removes a new executor. - can be executed only by the onwer.\r\n    /// The balance of the owner is checked and if funding is needed 1 ETH is transferred.\r\n    /// @param _executor - address of the executor which cannot be zero address.\r\n    function removeExecutor(address payable _executor)\r\n    public\r\n    onlyOwner\r\n    isValidAddress(_executor)\r\n    executorExists(_executor)\r\n    {\r\n        executors[_executor] = false;\r\n        if (isFundingNeeded(owner())) {\r\n            owner().transfer(FUNDING_AMOUNT);\r\n        }\r\n        emit LogExecutorRemoved(_executor);\r\n    }\r\n\r\n    /// @dev Sets the exchange rate for a currency. - can be executed only by the onwer.\r\n    /// Emits 'LogSetConversionRate' with the currency and the updated rate.\r\n    /// The balance of the owner is checked and if funding is needed 1 ETH is transferred.\r\n    /// @param _currency - address of the executor which cannot be zero address\r\n    /// @param _rate - address of the executor which cannot be zero address\r\n    function setRate(string memory _currency, uint256 _rate)\r\n    public\r\n    onlyOwner\r\n    returns (bool) {\r\n        conversionRates[_currency] = _rate;\r\n        emit LogSetConversionRate(_currency, _rate);\r\n\r\n        if (isFundingNeeded(owner())) {\r\n            owner().transfer(FUNDING_AMOUNT);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /// ===============================================================================================================\r\n    ///                                      Public Functions - Executors Only\r\n    /// ===============================================================================================================\r\n\r\n    /// @dev Registers a new pull payment to the PumaPay Pull Payment Contract - The registration can be executed only\r\n    /// by one of the executors of the PumaPay Pull Payment Contract\r\n    /// and the PumaPay Pull Payment Contract checks that the pull payment has been singed by the customer of the account.\r\n    /// The balance of the executor (msg.sender) is checked and if funding is needed 1 ETH is transferred.\r\n    /// Emits 'LogPullPaymentRegistered' with customer address, beneficiary address and paymentID.\r\n    /// @param v - recovery ID of the ETH signature. - https://github.com/ethereum/EIPs/issues/155\r\n    /// @param r - R output of ECDSA signature.\r\n    /// @param s - S output of ECDSA signature.\r\n    /// @param _ids - array with the IDs for the payment ([0] paymentID, [1] businessID).\r\n    /// @param _addresses - all the relevant addresses for the payment.\r\n    /// @param _currency - currency of the payment / 3-letter abbr i.e. 'EUR'.\r\n    /// @param _uniqueReferenceID - unique reference ID is the id that the business uses within their system.\r\n    /// @param _fiatAmountInCents - payment amount in fiat in cents.\r\n    /// @param _frequency - how often merchant can pull - in seconds.\r\n    /// @param _numberOfPayments - amount of pull payments merchant can make\r\n    /// @param _startTimestamp - when subscription starts - in seconds.\r\n    function registerPullPayment(\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        bytes32[2] memory _ids, // [0] paymentID, [1] businessID\r\n        address[3] memory _addresses, // [0] customer, [1] pull payment executor, [2] treasury wallet\r\n        string memory _currency,\r\n        string memory _uniqueReferenceID,\r\n        uint256 _initialPaymentAmountInCents,\r\n        uint256 _fiatAmountInCents,\r\n        uint256 _frequency,\r\n        uint256 _numberOfPayments,\r\n        uint256 _startTimestamp\r\n    )\r\n    public\r\n    isExecutor()\r\n    {\r\n        require(_ids[0].length > 0, \"Payment ID is empty.\");\r\n        require(_ids[1].length > 0, \"Business ID is empty.\");\r\n        require(bytes(_currency).length > 0, \"Currency is empty.\");\r\n        require(bytes(_uniqueReferenceID).length > 0, \"Unique Reference ID is empty.\");\r\n        require(_addresses[0] != address(0), \"Customer Address is ZERO_ADDRESS.\");\r\n        require(_addresses[1] != address(0), \"Beneficiary Address is ZERO_ADDRESS.\");\r\n        require(_addresses[2] != address(0), \"Treasury Address is ZERO_ADDRESS.\");\r\n        require(_fiatAmountInCents > 0, \"Payment amount in fiat is zero.\");\r\n        require(_frequency > 0, \"Payment frequency is zero.\");\r\n        require(_frequency < OVERFLOW_LIMITER_NUMBER, \"Payment frequency is higher thant the overflow limit.\");\r\n        require(_numberOfPayments > 0, \"Payment number of payments is zero.\");\r\n        require(_numberOfPayments < OVERFLOW_LIMITER_NUMBER, \"Payment number of payments is higher thant the overflow limit.\");\r\n        require(_startTimestamp > 0, \"Payment start time is zero.\");\r\n        require(_startTimestamp < OVERFLOW_LIMITER_NUMBER, \"Payment start time is higher thant the overflow limit.\");\r\n\r\n        pullPayments[_addresses[0]][_addresses[1]].currency = _currency;\r\n        pullPayments[_addresses[0]][_addresses[1]].initialPaymentAmountInCents = _initialPaymentAmountInCents;\r\n        pullPayments[_addresses[0]][_addresses[1]].fiatAmountInCents = _fiatAmountInCents;\r\n        pullPayments[_addresses[0]][_addresses[1]].frequency = _frequency;\r\n        pullPayments[_addresses[0]][_addresses[1]].startTimestamp = _startTimestamp;\r\n        pullPayments[_addresses[0]][_addresses[1]].numberOfPayments = _numberOfPayments;\r\n        pullPayments[_addresses[0]][_addresses[1]].paymentID = _ids[0];\r\n        pullPayments[_addresses[0]][_addresses[1]].businessID = _ids[1];\r\n        pullPayments[_addresses[0]][_addresses[1]].uniqueReferenceID = _uniqueReferenceID;\r\n        pullPayments[_addresses[0]][_addresses[1]].treasuryAddress = _addresses[2];\r\n\r\n        require(isValidRegistration(\r\n                v,\r\n                r,\r\n                s,\r\n                _addresses[0],\r\n                _addresses[1],\r\n                pullPayments[_addresses[0]][_addresses[1]]),\r\n            \"Invalid pull payment registration - ECRECOVER_FAILED\"\r\n        );\r\n\r\n        pullPayments[_addresses[0]][_addresses[1]].nextPaymentTimestamp = _startTimestamp;\r\n        pullPayments[_addresses[0]][_addresses[1]].lastPaymentTimestamp = 0;\r\n        pullPayments[_addresses[0]][_addresses[1]].cancelTimestamp = 0;\r\n\r\n        if (isFundingNeeded(msg.sender)) {\r\n            msg.sender.transfer(FUNDING_AMOUNT);\r\n        }\r\n\r\n        emit LogPullPaymentRegistered(\r\n            _addresses[0],\r\n            _ids[0],\r\n            _uniqueReferenceID\r\n        );\r\n    }\r\n\r\n    /// @dev Deletes a pull payment for a beneficiary - The deletion needs can be executed only by one of the\r\n    /// executors of the PumaPay Pull Payment Contract\r\n    /// and the PumaPay Pull Payment Contract checks that the beneficiary and the paymentID have\r\n    /// been singed by the customer of the account.\r\n    /// This method sets the cancellation of the pull payment in the pull payments array for this beneficiary specified.\r\n    /// The balance of the executor (msg.sender) is checked and if funding is needed 1 ETH is transferred.\r\n    /// Emits 'LogPullPaymentCancelled' with beneficiary address and paymentID.\r\n    /// @param v - recovery ID of the ETH signature. - https://github.com/ethereum/EIPs/issues/155\r\n    /// @param r - R output of ECDSA signature.\r\n    /// @param s - S output of ECDSA signature.\r\n    /// @param _paymentID - ID of the payment.\r\n    /// @param _customer - customer address that is linked to this pull payment.\r\n    /// @param _pullPaymentExecutor - address that is allowed to execute this pull payment.\r\n    function deletePullPayment(\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        bytes32 _paymentID,\r\n        address _customer,\r\n        address _pullPaymentExecutor\r\n    )\r\n    public\r\n    isExecutor()\r\n    paymentExists(_customer, _pullPaymentExecutor)\r\n    paymentNotCancelled(_customer, _pullPaymentExecutor)\r\n    isValidDeletionRequest(_paymentID, _customer, _pullPaymentExecutor)\r\n    {\r\n        require(isValidDeletion(v, r, s, _paymentID, _customer, _pullPaymentExecutor), \"Invalid deletion - ECRECOVER_FAILED.\");\r\n\r\n        pullPayments[_customer][_pullPaymentExecutor].cancelTimestamp = now;\r\n\r\n        if (isFundingNeeded(msg.sender)) {\r\n            msg.sender.transfer(FUNDING_AMOUNT);\r\n        }\r\n\r\n        emit LogPullPaymentCancelled(\r\n            _customer,\r\n            _paymentID,\r\n            pullPayments[_customer][_pullPaymentExecutor].uniqueReferenceID\r\n        );\r\n    }\r\n\r\n    /// ===============================================================================================================\r\n    ///                                      Public Functions\r\n    /// ===============================================================================================================\r\n\r\n    /// @dev Executes a pull payment for the msg.sender - The pull payment should exist and the payment request\r\n    /// should be valid in terms of when it can be executed.\r\n    /// Emits 'LogPullPaymentExecuted' with customer address, msg.sender as the beneficiary address and the paymentID.\r\n    /// Use Case 1: Single/Recurring Fixed Pull Payment (initialPaymentAmountInCents == 0 )\r\n    /// ------------------------------------------------\r\n    /// We calculate the amount in PMA using the rate for the currency specified in the pull payment\r\n    /// and the 'fiatAmountInCents' and we transfer from the customer account the amount in PMA.\r\n    /// After execution we set the last payment timestamp to NOW, the next payment timestamp is incremented by\r\n    /// the frequency and the number of payments is decreased by 1.\r\n    /// Use Case 2: Recurring Fixed Pull Payment with initial fee (initialPaymentAmountInCents > 0)\r\n    /// ------------------------------------------------------------------------------------------------\r\n    /// We calculate the amount in PMA using the rate for the currency specified in the pull payment\r\n    /// and the 'initialPaymentAmountInCents' and we transfer from the customer account the amount in PMA.\r\n    /// After execution we set the last payment timestamp to NOW and the 'initialPaymentAmountInCents to ZERO.\r\n    /// @param _customer - address of the customer from which the msg.sender requires to pull funds.\r\n    /// @param _paymentID - ID of the payment.\r\n    function executePullPayment(address _customer, bytes32 _paymentID)\r\n    public\r\n    paymentExists(_customer, msg.sender)\r\n    isValidPullPaymentExecutionRequest(_customer, msg.sender, _paymentID)\r\n    {\r\n        uint256 amountInPMA;\r\n\r\n        if (pullPayments[_customer][msg.sender].initialPaymentAmountInCents > 0) {\r\n            amountInPMA = calculatePMAFromFiat(\r\n                pullPayments[_customer][msg.sender].initialPaymentAmountInCents,\r\n                pullPayments[_customer][msg.sender].currency\r\n            );\r\n            pullPayments[_customer][msg.sender].initialPaymentAmountInCents = 0;\r\n        } else {\r\n            amountInPMA = calculatePMAFromFiat(\r\n                pullPayments[_customer][msg.sender].fiatAmountInCents,\r\n                pullPayments[_customer][msg.sender].currency\r\n            );\r\n\r\n            pullPayments[_customer][msg.sender].nextPaymentTimestamp =\r\n            pullPayments[_customer][msg.sender].nextPaymentTimestamp + pullPayments[_customer][msg.sender].frequency;\r\n            pullPayments[_customer][msg.sender].numberOfPayments = pullPayments[_customer][msg.sender].numberOfPayments - 1;\r\n        }\r\n\r\n        pullPayments[_customer][msg.sender].lastPaymentTimestamp = now;\r\n        token.transferFrom(\r\n            _customer,\r\n            pullPayments[_customer][msg.sender].treasuryAddress,\r\n            amountInPMA\r\n        );\r\n\r\n        emit LogPullPaymentExecuted(\r\n            _customer,\r\n            pullPayments[_customer][msg.sender].paymentID,\r\n            pullPayments[_customer][msg.sender].uniqueReferenceID,\r\n            amountInPMA\r\n        );\r\n    }\r\n\r\n    function getRate(string memory _currency) public view returns (uint256) {\r\n        return conversionRates[_currency];\r\n    }\r\n\r\n    /// ===============================================================================================================\r\n    ///                                      Internal Functions\r\n    /// ===============================================================================================================\r\n\r\n    /// @dev Calculates the PMA Rate for the fiat currency specified - The rate is set every 10 minutes by our PMA server\r\n    /// for the currencies specified in the smart contract.\r\n    /// @param _fiatAmountInCents - payment amount in fiat CENTS so that is always integer\r\n    /// @param _currency - currency in which the payment needs to take place\r\n    /// RATE CALCULATION EXAMPLE\r\n    /// ------------------------\r\n    /// RATE ==> 1 PMA = 0.01 USD$\r\n    /// 1 USD$ = 1/0.01 PMA = 100 PMA\r\n    /// Start the calculation from one ether - PMA Token has 18 decimals\r\n    /// Multiply by the DECIMAL_FIXER (1e+10) to fix the multiplication of the rate\r\n    /// Multiply with the fiat amount in cents\r\n    /// Divide by the Rate of PMA to Fiat in cents\r\n    /// Divide by the FIAT_TO_CENT_FIXER to fix the _fiatAmountInCents\r\n    function calculatePMAFromFiat(uint256 _fiatAmountInCents, string memory _currency)\r\n    internal\r\n    view\r\n    validConversionRate(_currency)\r\n    validAmount(_fiatAmountInCents)\r\n    returns (uint256) {\r\n        return ONE_ETHER.mul(DECIMAL_FIXER).mul(_fiatAmountInCents).div(conversionRates[_currency]).div(FIAT_TO_CENT_FIXER);\r\n    }\r\n\r\n    /// @dev Checks if a registration request is valid by comparing the v, r, s params\r\n    /// and the hashed params with the customer address.\r\n    /// @param v - recovery ID of the ETH signature. - https://github.com/ethereum/EIPs/issues/155\r\n    /// @param r - R output of ECDSA signature.\r\n    /// @param s - S output of ECDSA signature.\r\n    /// @param _customer - customer address that is linked to this pull payment.\r\n    /// @param _pullPaymentExecutor - address that is allowed to execute this pull payment.\r\n    /// @param _pullPayment - pull payment to be validated.\r\n    /// @return bool - if the v, r, s params with the hashed params match the customer address\r\n    function isValidRegistration(\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        address _customer,\r\n        address _pullPaymentExecutor,\r\n        PullPayment memory _pullPayment\r\n    )\r\n    internal\r\n    pure\r\n    returns (bool)\r\n    {\r\n        return ecrecover(\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    _pullPaymentExecutor,\r\n                    _pullPayment.paymentID,\r\n                    _pullPayment.businessID,\r\n                    _pullPayment.uniqueReferenceID,\r\n                    _pullPayment.treasuryAddress,\r\n                    _pullPayment.currency,\r\n                    _pullPayment.initialPaymentAmountInCents,\r\n                    _pullPayment.fiatAmountInCents,\r\n                    _pullPayment.frequency,\r\n                    _pullPayment.numberOfPayments,\r\n                    _pullPayment.startTimestamp\r\n                )\r\n            ),\r\n            v, r, s) == _customer;\r\n    }\r\n\r\n    /// @dev Checks if a deletion request is valid by comparing the v, r, s params\r\n    /// and the hashed params with the customer address.\r\n    /// @param v - recovery ID of the ETH signature. - https://github.com/ethereum/EIPs/issues/155\r\n    /// @param r - R output of ECDSA signature.\r\n    /// @param s - S output of ECDSA signature.\r\n    /// @param _paymentID - ID of the payment.\r\n    /// @param _customer - customer address that is linked to this pull payment.\r\n    /// @param _pullPaymentExecutor - address that is allowed to execute this pull payment.\r\n    /// @return bool - if the v, r, s params with the hashed params match the customer address\r\n    function isValidDeletion(\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        bytes32 _paymentID,\r\n        address _customer,\r\n        address _pullPaymentExecutor\r\n    )\r\n    internal\r\n    view\r\n    returns (bool)\r\n    {\r\n        return ecrecover(\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    _paymentID,\r\n                    _pullPaymentExecutor\r\n                )\r\n            ), v, r, s) == _customer\r\n        && keccak256(\r\n            abi.encodePacked(pullPayments[_customer][_pullPaymentExecutor].paymentID)\r\n        ) == keccak256(abi.encodePacked(_paymentID)\r\n        );\r\n    }\r\n\r\n    /// @dev Checks if a payment for a beneficiary of a customer exists.\r\n    /// @param _customer - customer address that is linked to this pull payment.\r\n    /// @param _pullPaymentExecutor - address to execute a pull payment.\r\n    /// @return bool - whether the beneficiary for this customer has a pull payment to execute.\r\n    function doesPaymentExist(address _customer, address _pullPaymentExecutor)\r\n    internal\r\n    view\r\n    returns (bool) {\r\n        return (\r\n        bytes(pullPayments[_customer][_pullPaymentExecutor].currency).length > 0 &&\r\n        pullPayments[_customer][_pullPaymentExecutor].fiatAmountInCents > 0 &&\r\n        pullPayments[_customer][_pullPaymentExecutor].frequency > 0 &&\r\n        pullPayments[_customer][_pullPaymentExecutor].startTimestamp > 0 &&\r\n        pullPayments[_customer][_pullPaymentExecutor].numberOfPayments > 0 &&\r\n        pullPayments[_customer][_pullPaymentExecutor].nextPaymentTimestamp > 0\r\n        );\r\n    }\r\n\r\n    /// @dev Checks if the address of an owner/executor needs to be funded.\r\n    /// The minimum amount the owner/executors should always have is 0.001 ETH\r\n    /// @param _address - address of owner/executors that the balance is checked against.\r\n    /// @return bool - whether the address needs more ETH.\r\n    function isFundingNeeded(address _address)\r\n    private\r\n    view\r\n    returns (bool) {\r\n        return address(_address).balance <= MINIMUM_AMOUNT_OF_ETH_FOR_OPERATORS;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"addExecutor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"removeExecutor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_currency\",\"type\":\"string\"}],\"name\":\"getRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pullPayments\",\"outputs\":[{\"name\":\"paymentID\",\"type\":\"bytes32\"},{\"name\":\"businessID\",\"type\":\"bytes32\"},{\"name\":\"uniqueReferenceID\",\"type\":\"string\"},{\"name\":\"currency\",\"type\":\"string\"},{\"name\":\"initialPaymentAmountInCents\",\"type\":\"uint256\"},{\"name\":\"fiatAmountInCents\",\"type\":\"uint256\"},{\"name\":\"frequency\",\"type\":\"uint256\"},{\"name\":\"numberOfPayments\",\"type\":\"uint256\"},{\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"name\":\"nextPaymentTimestamp\",\"type\":\"uint256\"},{\"name\":\"lastPaymentTimestamp\",\"type\":\"uint256\"},{\"name\":\"cancelTimestamp\",\"type\":\"uint256\"},{\"name\":\"treasuryAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_customer\",\"type\":\"address\"},{\"name\":\"_paymentID\",\"type\":\"bytes32\"}],\"name\":\"executePullPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"executors\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"_ids\",\"type\":\"bytes32[2]\"},{\"name\":\"_addresses\",\"type\":\"address[3]\"},{\"name\":\"_currency\",\"type\":\"string\"},{\"name\":\"_uniqueReferenceID\",\"type\":\"string\"},{\"name\":\"_initialPaymentAmountInCents\",\"type\":\"uint256\"},{\"name\":\"_fiatAmountInCents\",\"type\":\"uint256\"},{\"name\":\"_frequency\",\"type\":\"uint256\"},{\"name\":\"_numberOfPayments\",\"type\":\"uint256\"},{\"name\":\"_startTimestamp\",\"type\":\"uint256\"}],\"name\":\"registerPullPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_currency\",\"type\":\"string\"},{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"_paymentID\",\"type\":\"bytes32\"},{\"name\":\"_customer\",\"type\":\"address\"},{\"name\":\"_pullPaymentExecutor\",\"type\":\"address\"}],\"name\":\"deletePullPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"LogExecutorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"LogExecutorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"currency\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"conversionRate\",\"type\":\"uint256\"}],\"name\":\"LogSetConversionRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"paymentID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"uniqueReferenceID\",\"type\":\"string\"}],\"name\":\"LogPullPaymentRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"paymentID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"uniqueReferenceID\",\"type\":\"string\"}],\"name\":\"LogPullPaymentCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"paymentID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"uniqueReferenceID\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"pmaAmountTransferred\",\"type\":\"uint256\"}],\"name\":\"LogPullPaymentExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"PumaPayPullPayment","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000846c66cf71c43f80403b51fe3906b3599d63336f","Library":"","SwarmSource":"bzzr://3847214175ae8c14eb9ce63bbcd24c840cf1fca4e0e11463cd4c45dce27e2c6c"}]}