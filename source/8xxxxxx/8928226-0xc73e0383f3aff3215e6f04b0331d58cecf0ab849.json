{"status":"1","message":"OK","result":[{"SourceCode":"// hevm: flattened sources of /nix/store/nrmi9gk7q94ba1fbhq9bphlbpqd1y8hw-scd-mcd-migration-e730e63/src/ScdMcdMigration.sol\r\npragma solidity =0.5.12;\r\n\r\n////// /nix/store/nrmi9gk7q94ba1fbhq9bphlbpqd1y8hw-scd-mcd-migration-e730e63/src/Interfaces.sol\r\n/* pragma solidity 0.5.12; */\r\n\r\ncontract GemLike {\r\n    function allowance(address, address) public returns (uint);\r\n    function approve(address, uint) public;\r\n    function transfer(address, uint) public returns (bool);\r\n    function transferFrom(address, address, uint) public returns (bool);\r\n}\r\n\r\ncontract ValueLike {\r\n    function peek() public returns (uint, bool);\r\n}\r\n\r\ncontract SaiTubLike {\r\n    function skr() public view returns (GemLike);\r\n    function gem() public view returns (GemLike);\r\n    function gov() public view returns (GemLike);\r\n    function sai() public view returns (GemLike);\r\n    function pep() public view returns (ValueLike);\r\n    function vox() public view returns (VoxLike);\r\n    function bid(uint) public view returns (uint);\r\n    function ink(bytes32) public view returns (uint);\r\n    function tag() public view returns (uint);\r\n    function tab(bytes32) public returns (uint);\r\n    function rap(bytes32) public returns (uint);\r\n    function draw(bytes32, uint) public;\r\n    function shut(bytes32) public;\r\n    function exit(uint) public;\r\n    function give(bytes32, address) public;\r\n}\r\n\r\ncontract VoxLike {\r\n    function par() public returns (uint);\r\n}\r\n\r\ncontract JoinLike {\r\n    function ilk() public returns (bytes32);\r\n    function gem() public returns (GemLike);\r\n    function dai() public returns (GemLike);\r\n    function join(address, uint) public;\r\n    function exit(address, uint) public;\r\n}\r\ncontract VatLike {\r\n    function ilks(bytes32) public view returns (uint, uint, uint, uint, uint);\r\n    function hope(address) public;\r\n    function frob(bytes32, address, address, address, int, int) public;\r\n}\r\n\r\ncontract ManagerLike {\r\n    function vat() public view returns (address);\r\n    function urns(uint) public view returns (address);\r\n    function open(bytes32, address) public returns (uint);\r\n    function frob(uint, int, int) public;\r\n    function give(uint, address) public;\r\n    function move(uint, address, uint) public;\r\n}\r\n\r\ncontract OtcLike {\r\n    function getPayAmount(address, address, uint) public view returns (uint);\r\n    function buyAllAmount(address, uint, address, uint) public;\r\n}\r\n\r\n////// /nix/store/nrmi9gk7q94ba1fbhq9bphlbpqd1y8hw-scd-mcd-migration-e730e63/src/ScdMcdMigration.sol\r\n/* pragma solidity 0.5.12; */\r\n\r\n/* import { JoinLike, ManagerLike, SaiTubLike, VatLike } from \"./Interfaces.sol\"; */\r\n\r\ncontract ScdMcdMigration {\r\n    SaiTubLike                  public tub;\r\n    VatLike                     public vat;\r\n    ManagerLike                 public cdpManager;\r\n    JoinLike                    public saiJoin;\r\n    JoinLike                    public wethJoin;\r\n    JoinLike                    public daiJoin;\r\n\r\n    constructor(\r\n        address tub_,           // SCD tub contract address\r\n        address cdpManager_,    // MCD manager contract address\r\n        address saiJoin_,       // MCD SAI collateral adapter contract address\r\n        address wethJoin_,      // MCD ETH collateral adapter contract address\r\n        address daiJoin_        // MCD DAI adapter contract address\r\n    ) public {\r\n        tub = SaiTubLike(tub_);\r\n        cdpManager = ManagerLike(cdpManager_);\r\n        vat = VatLike(cdpManager.vat());\r\n        saiJoin = JoinLike(saiJoin_);\r\n        wethJoin = JoinLike(wethJoin_);\r\n        daiJoin = JoinLike(daiJoin_);\r\n\r\n        require(wethJoin.gem() == tub.gem(), \"non-matching-weth\");\r\n        require(saiJoin.gem() == tub.sai(), \"non-matching-sai\");\r\n\r\n        tub.gov().approve(address(tub), uint(-1));\r\n        tub.skr().approve(address(tub), uint(-1));\r\n        tub.sai().approve(address(tub), uint(-1));\r\n        tub.sai().approve(address(saiJoin), uint(-1));\r\n        wethJoin.gem().approve(address(wethJoin), uint(-1));\r\n        daiJoin.dai().approve(address(daiJoin), uint(-1));\r\n        vat.hope(address(daiJoin));\r\n    }\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"add-overflow\");\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"sub-underflow\");\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"mul-overflow\");\r\n    }\r\n\r\n    function toInt(uint x) internal pure returns (int y) {\r\n        y = int(x);\r\n        require(y >= 0, \"int-overflow\");\r\n    }\r\n\r\n    // Function to swap SAI to DAI\r\n    // This function is to be used by users that want to get new DAI in exchange of old one (aka SAI)\r\n    // wad amount has to be <= the value pending to reach the debt ceiling (the minimum between general and ilk one)\r\n    function swapSaiToDai(\r\n        uint wad\r\n    ) external {\r\n        // Get wad amount of SAI from user's wallet:\r\n        saiJoin.gem().transferFrom(msg.sender, address(this), wad);\r\n        // Join the SAI wad amount to the `vat`:\r\n        saiJoin.join(address(this), wad);\r\n        // Lock the SAI wad amount to the CDP and generate the same wad amount of DAI\r\n        vat.frob(saiJoin.ilk(), address(this), address(this), address(this), toInt(wad), toInt(wad));\r\n        // Send DAI wad amount as a ERC20 token to the user's wallet\r\n        daiJoin.exit(msg.sender, wad);\r\n    }\r\n\r\n    // Function to swap DAI to SAI\r\n    // This function is to be used by users that want to get SAI in exchange of DAI\r\n    // wad amount has to be <= the amount of SAI locked (and DAI generated) in the migration contract SAI CDP\r\n    function swapDaiToSai(\r\n        uint wad\r\n    ) external {\r\n        // Get wad amount of DAI from user's wallet:\r\n        daiJoin.dai().transferFrom(msg.sender, address(this), wad);\r\n        // Join the DAI wad amount to the vat:\r\n        daiJoin.join(address(this), wad);\r\n        // Payback the DAI wad amount and unlocks the same value of SAI collateral\r\n        vat.frob(saiJoin.ilk(), address(this), address(this), address(this), -toInt(wad), -toInt(wad));\r\n        // Send SAI wad amount as a ERC20 token to the user's wallet\r\n        saiJoin.exit(msg.sender, wad);\r\n    }\r\n\r\n    // Function to migrate a SCD CDP to MCD one (needs to be used via a proxy so the code can be kept simpler). Check MigrationProxyActions.sol code for usage.\r\n    // In order to use migrate function, SCD CDP debtAmt needs to be <= SAI previously deposited in the SAI CDP * (100% - Collateralization Ratio)\r\n    function migrate(\r\n        bytes32 cup\r\n    ) external returns (uint cdp) {\r\n        // Get values\r\n        uint debtAmt = tub.tab(cup);    // CDP SAI debt\r\n        uint pethAmt = tub.ink(cup);    // CDP locked collateral\r\n        uint ethAmt = tub.bid(pethAmt); // CDP locked collateral equiv in ETH\r\n\r\n        // Take SAI out from MCD SAI CDP. For this operation is necessary to have a very low collateralization ratio\r\n        // This is not actually a problem as this ilk will only be accessed by this migration contract,\r\n        // which will make sure to have the amounts balanced out at the end of the execution.\r\n        vat.frob(\r\n            bytes32(saiJoin.ilk()),\r\n            address(this),\r\n            address(this),\r\n            address(this),\r\n            -toInt(debtAmt),\r\n            0\r\n        );\r\n        saiJoin.exit(address(this), debtAmt); // SAI is exited as a token\r\n\r\n        // Shut SAI CDP and gets WETH back\r\n        tub.shut(cup);      // CDP is closed using the SAI just exited and the MKR previously sent by the user (via the proxy call)\r\n        tub.exit(pethAmt);  // Converts PETH to WETH\r\n\r\n        // Open future user's CDP in MCD\r\n        cdp = cdpManager.open(wethJoin.ilk(), address(this));\r\n\r\n        // Join WETH to Adapter\r\n        wethJoin.join(cdpManager.urns(cdp), ethAmt);\r\n\r\n        // Lock WETH in future user's CDP and generate debt to compensate the SAI used to paid the SCD CDP\r\n        (, uint rate,,,) = vat.ilks(wethJoin.ilk());\r\n        cdpManager.frob(\r\n            cdp,\r\n            toInt(ethAmt),\r\n            toInt(mul(debtAmt, 10 ** 27) / rate + 1) // To avoid rounding issues we add an extra wei of debt\r\n        );\r\n        // Move DAI generated to migration contract (to recover the used funds)\r\n        cdpManager.move(cdp, address(this), mul(debtAmt, 10 ** 27));\r\n        // Re-balance MCD SAI migration contract's CDP\r\n        vat.frob(\r\n            bytes32(saiJoin.ilk()),\r\n            address(this),\r\n            address(this),\r\n            address(this),\r\n            0,\r\n            -toInt(debtAmt)\r\n        );\r\n\r\n        // Set ownership of CDP to the user\r\n        cdpManager.give(cdp, msg.sender);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tub_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cdpManager_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"saiJoin_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wethJoin_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daiJoin_\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"cdpManager\",\"outputs\":[{\"internalType\":\"contract ManagerLike\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"daiJoin\",\"outputs\":[{\"internalType\":\"contract JoinLike\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"cup\",\"type\":\"bytes32\"}],\"name\":\"migrate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saiJoin\",\"outputs\":[{\"internalType\":\"contract JoinLike\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"swapDaiToSai\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"swapSaiToDai\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tub\",\"outputs\":[{\"internalType\":\"contract SaiTubLike\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vat\",\"outputs\":[{\"internalType\":\"contract VatLike\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wethJoin\",\"outputs\":[{\"internalType\":\"contract JoinLike\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ScdMcdMigration","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000448a5065aebb8e423f0896e6c5d525c040f59af30000000000000000000000005ef30b9986345249bc32d8928b7ee64de9435e39000000000000000000000000ad37fd42185ba63009177058208dd1be4b136e6b0000000000000000000000002f0b23f53734252bda2277357e97e1517d6b042a0000000000000000000000009759a6ac90977b93b58547b4a71c78317f391a28","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://ed961f9966adeb2f3e92648b8df9d098e965317ea8308e455b5b43b4585d0cff"}]}