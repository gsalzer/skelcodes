{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n//SafeMath library for calculations.\r\ncontract SafeMath {\r\n    function safeAdd(uint a, uint b) internal pure returns (uint c){\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function safeSub(uint a, uint b) internal pure returns (uint c){\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function safeMul(uint a, uint b) internal pure returns (uint c){\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function safeDiv(uint a, uint b) internal pure returns (uint c){\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n//ERC Function declaration\r\ncontract ERC20Interface {\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n//Onwer function declaration.\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n}\r\n\r\n//Main contract code.\r\ncontract ErgoPostToken is ERC20Interface, Owned, SafeMath{\r\n    \r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals;\r\n    uint  totalsupply;\r\n    uint initialBalance;\r\n    uint public reserved;\r\n    uint public team;\r\n    uint public ico;\r\n    uint public bounty;\r\n    uint public total_presale_token;\r\n    uint public total_crowdsale_token;\r\n    uint public total_sale_token;\r\n    uint public total_purchase_token;\r\n    uint public total_earning;\r\n    uint decimal_price;\r\n    \r\n    struct presale{\r\n        uint startDate;\r\n        uint endDate;\r\n        uint pretoken;\r\n        uint price;\r\n    }\r\n    \r\n    struct crowdsale{\r\n        uint crowd_startdate;\r\n        uint crowd_enddate;\r\n        uint crowd_token;\r\n        uint price;\r\n       \r\n    }\r\n    \r\n  \r\n    presale[] public presale_detail;\r\n    \r\n    crowdsale public crowdsale_detail;\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n\r\n    constructor() public{\r\n        symbol = \"EPT\";\r\n        name = \"ErgoPostToken\";\r\n        decimals = 18;\r\n        decimal_price = 1000000000000000000;\r\n        initialBalance = 3000000000*decimal_price;\r\n        balances[owner] = initialBalance;\r\n        totalsupply += initialBalance;\r\n        reserved =  totalsupply * 25/100;\r\n        team =  totalsupply * 8/100;\r\n        ico =  totalsupply * 65/100;\r\n        bounty = totalsupply * 2/100;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    //Code to Transfer the Ownership\r\n    function transferOwnership(address newOwner) public onlyOwner{\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        uint _value = balances[msg.sender];\r\n        balances[msg.sender] -= _value;\r\n        balances[newOwner] += _value;\r\n        emit Transfer(msg.sender, newOwner, _value);\r\n    }\r\n  \r\n    //code to Start Pre-Sale.\r\n    function start_presale(uint _startdate,uint _enddate,uint token_for_presale,uint price) public onlyOwner{\r\n        \r\n        if(_startdate <= _enddate && _startdate > now && token_for_presale < ico){\r\n            for(uint start=0; start < presale_detail.length; start++)\r\n            {\r\n                if(presale_detail[start].endDate >= _startdate)\r\n                {   \r\n                    revert(\"Another Sale is running\");\r\n                }\r\n            }\r\n            presale memory p= presale(_startdate,_enddate,token_for_presale*decimal_price,price);\r\n            presale_detail.push(p);\r\n            total_presale_token += token_for_presale*decimal_price;\r\n            balances[owner] -= token_for_presale*decimal_price;\r\n            total_crowdsale_token = ico-total_presale_token;\r\n            crowdsale_detail.crowd_token = total_crowdsale_token;\r\n        }\r\n        else{\r\n            revert(\"Presale not set\");\r\n        }\r\n    }\r\n    \r\n    //code to Start Pre-Sale.\r\n    function start_crowdsale(uint _startdate,uint _enddate,uint _price) public onlyOwner{\r\n        if(_startdate <= _enddate && _startdate > now){\r\n            crowdsale_detail.crowd_startdate = _startdate;\r\n            crowdsale_detail.crowd_enddate = _enddate;\r\n            crowdsale_detail.price = _price;\r\n            balances[owner] -= total_crowdsale_token;\r\n        }\r\n        else{\r\n            revert(\"Crowdasale not set\");\r\n        }\r\n    }\r\n    \r\n    //Function to get total supply.\r\n    function totalSupply() public view returns (uint) {\r\n        return totalsupply  - balances[address(0)];\r\n    }\r\n\r\n    //Function to check balance.\r\n    function balanceOf(address tokenOwner) public view returns (uint balance){\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n    //Function to transfer token by owner.\r\n    function transfer(address to, uint tokens) public onlyOwner returns (bool success){\r\n        balances[msg.sender] = safeSub(balances[msg.sender], tokens*decimal_price);\r\n        balances[to] = safeAdd(balances[to], tokens*decimal_price);\r\n        total_sale_token += tokens*decimal_price;\r\n        emit Transfer(msg.sender, to, tokens*decimal_price);\r\n        return true;\r\n    }\r\n    \r\n    //Approve function.\r\n    function approve(address spender, uint tokens) public returns (bool success){\r\n        allowed[msg.sender][spender] = tokens*decimal_price;\r\n        emit Approval(msg.sender, spender, tokens*decimal_price);\r\n        return true;\r\n    }\r\n    \r\n    //Fucntion to transfer token from address.\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success){\r\n        balances[from] = safeSub(balances[from], tokens*decimal_price);\r\n        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens*decimal_price);\r\n        balances[to] = safeAdd(balances[to], tokens*decimal_price);\r\n        emit Transfer(from, to, tokens*decimal_price);\r\n        return true;\r\n    }\r\n\r\n    //Allowance function.\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining){\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n    //Code to purchase token.\r\n    function purchase (address _account,uint256 _token,uint amount) public payable{\r\n        for (uint i=0; i < presale_detail.length; i++){\r\n            if (now >= presale_detail[i].startDate && now <=presale_detail[i].endDate){\r\n                if(_token*decimal_price <= presale_detail[i].pretoken){\r\n                    uint256 payment= _token * presale_detail[i].price;\r\n                    if(payment == amount){\r\n                        presale_detail[i].pretoken -= _token*decimal_price;\r\n                        balances[_account] = safeAdd(balances[_account], _token*decimal_price);\r\n                        total_earning += payment;\r\n                        total_purchase_token += _token*decimal_price;\r\n                        total_sale_token += _token*decimal_price;\r\n                    }\r\n                    else{\r\n                        revert(\"Invalid amount\");\r\n                    }\r\n                    return;\r\n                }\r\n                else{\r\n                    revert();\r\n                }\r\n            }\r\n        }\r\n            \r\n        if(now >= crowdsale_detail.crowd_startdate && now <= crowdsale_detail.crowd_enddate){\r\n            require(_token < total_crowdsale_token);\r\n            uint256 payment_for_crowdsale= _token * crowdsale_detail.price;\r\n            if(payment_for_crowdsale == amount){\r\n                balances[_account] = safeAdd(balances[_account], _token*decimal_price);\r\n                if(crowdsale_detail.crowd_token > 0 ){\r\n                    crowdsale_detail.crowd_token -= _token*decimal_price;\r\n                    total_earning += payment_for_crowdsale;\r\n                    total_purchase_token += _token*decimal_price;\r\n                    total_sale_token += _token*decimal_price;\r\n                }\r\n                else{\r\n                    revert(\"Check available token balances\");\r\n                }\r\n            }\r\n            else{\r\n                revert(\"Invalid amount\");\r\n            }\r\n        }\r\n        else{\r\n            revert(\"Sale is not started\");\r\n        }\r\n        emit Transfer(address(0), _account, _token*decimal_price);\r\n    }\r\n\r\n    //Function to pay from bounty.\r\n    function  pay_from_bounty(uint tokens, address to) public onlyOwner returns (bool success){\r\n        bounty = safeSub(bounty, tokens*decimal_price);\r\n        balances[owner] -= tokens*decimal_price;\r\n        balances[to] = safeAdd(balances[to], tokens*decimal_price);\r\n        total_sale_token += tokens*decimal_price;\r\n        emit Transfer(msg.sender, to, tokens*decimal_price);\r\n        return true;\r\n    }\r\n\r\n    //Function to pay from reserved.\r\n    function pay_from_reserved(uint tokens, address to) public onlyOwner returns(bool success){\r\n        reserved = safeSub(reserved,tokens*decimal_price);\r\n        balances[owner] -= tokens*decimal_price;\r\n         balances[to] = safeAdd(balances[to], tokens*decimal_price);\r\n         total_sale_token += tokens*decimal_price;\r\n         emit Transfer(msg.sender, to, tokens*decimal_price);\r\n        return true;\r\n    }\r\n\r\n    //Function to pay from team.\r\n    function pay_from_team(uint tokens , address to) public onlyOwner returns(bool success){\r\n        team = safeSub(team,tokens*decimal_price); \r\n        balances[owner] -= tokens*decimal_price;\r\n        balances[to] = safeAdd(balances[to], tokens*decimal_price);\r\n         total_sale_token += tokens*decimal_price;\r\n        emit Transfer(msg.sender,to,tokens*decimal_price);\r\n        return true;\r\n    }\r\n    \r\n    //Function to get contract balance.\r\n    function get_contrct_balance() public view returns (uint256){\r\n        return address(this).balance;\r\n    }\r\n    \r\n    //ETH Transfer\r\n    function ethTransfer(address payable to, uint value_in_eth) onlyOwner public returns(bool success){\r\n        uint256 contractblc = address(this).balance;\r\n        contractblc -= value_in_eth;\r\n        uint wi = 1000000000000000000;\r\n        uint finalamt = value_in_eth * wi;\r\n        to.transfer(finalamt);\r\n        return true;\r\n    }   \r\n    \r\n    //User functionality to burn the token from his account.\r\n    function burnFrom(address payable to, uint256 value) public returns (bool success){\r\n        require(balances[msg.sender] >= value*decimal_price);\r\n        balances[msg.sender] -= value*decimal_price;\r\n        emit Transfer(msg.sender, address(0), value*decimal_price); //solhint-disable-line indent, no-unused-vars\r\n        return true;\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"pay_from_team\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_contrct_balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"presale_detail\",\"outputs\":[{\"name\":\"startDate\",\"type\":\"uint256\"},{\"name\":\"endDate\",\"type\":\"uint256\"},{\"name\":\"pretoken\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value_in_eth\",\"type\":\"uint256\"}],\"name\":\"ethTransfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"pay_from_bounty\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"team\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bounty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_sale_token\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsale_detail\",\"outputs\":[{\"name\":\"crowd_startdate\",\"type\":\"uint256\"},{\"name\":\"crowd_enddate\",\"type\":\"uint256\"},{\"name\":\"crowd_token\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_crowdsale_token\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"pay_from_reserved\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_purchase_token\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startdate\",\"type\":\"uint256\"},{\"name\":\"_enddate\",\"type\":\"uint256\"},{\"name\":\"token_for_presale\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"start_presale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_presale_token\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startdate\",\"type\":\"uint256\"},{\"name\":\"_enddate\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"start_crowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_earning\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserved\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ErgoPostToken","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2cb5b4d29622165d219d9b0f626011013f3464bd1666991ac0a7821b0a3bf4d2"}]}