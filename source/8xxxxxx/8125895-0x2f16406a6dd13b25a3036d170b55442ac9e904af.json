{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    function getOwner() public view returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    function getOwnerStatic(address ownableContract) internal view returns (address) {\r\n        bytes memory callcodeOwner = abi.encodeWithSignature(\"getOwner()\");\r\n        (bool success, bytes memory returnData) = address(ownableContract).staticcall(callcodeOwner);\r\n        require(success, \"input address has to be a valid ownable contract\");\r\n        return parseAddr(returnData);\r\n    }\r\n\r\n    function getTokenVestingStatic(address tokenFactoryContract) internal view returns (address) {\r\n        bytes memory callcodeTokenVesting = abi.encodeWithSignature(\"getTokenVesting()\");\r\n        (bool success, bytes memory returnData) = address(tokenFactoryContract).staticcall(callcodeTokenVesting);\r\n        require(success, \"input address has to be a valid TokenFactory contract\");\r\n        return parseAddr(returnData);\r\n    }\r\n\r\n\r\n    function parseAddr(bytes memory data) public pure returns (address parsed){\r\n        assembly {parsed := mload(add(data, 32))}\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Registry contract for storing token proposals\r\n * @dev For storing token proposals. This can be understood as a state contract with minimal CRUD logic.\r\n * @author Jake Goh Si Yuan @ jakegsy, jake@jakegsy.com\r\n */\r\ncontract Registry is Ownable {\r\n\r\n    struct Creator {\r\n        address token;\r\n        string name;\r\n        string symbol;\r\n        uint8 decimals;\r\n        uint256 totalSupply;\r\n        address proposer;\r\n        address vestingBeneficiary;\r\n        uint8 initialPercentage;\r\n        uint256 vestingPeriodInWeeks;\r\n        bool approved;\r\n    }\r\n\r\n    mapping(bytes32 => Creator) public rolodex;\r\n    mapping(string => bytes32)  nameToIndex;\r\n    mapping(string => bytes32)  symbolToIndex;\r\n\r\n    event LogProposalSubmit(string name, string symbol, address proposer, bytes32 indexed hashIndex);\r\n    event LogProposalApprove(string name, address indexed tokenAddress);\r\n\r\n    /**\r\n     * @dev Submit token proposal to be stored, only called by Owner, which is set to be the Manager contract\r\n     * @param _name string Name of token\r\n     * @param _symbol string Symbol of token\r\n     * @param _decimals uint8 Decimals of token\r\n     * @param _totalSupply uint256 Total Supply of token\r\n     * @param _initialPercentage uint8 Initial Percentage of total supply to Vesting Beneficiary\r\n     * @param _vestingPeriodInWeeks uint256 Number of weeks that the remaining of total supply will be linearly vested for\r\n     * @param _vestingBeneficiary address Address of Vesting Beneficiary\r\n     * @param _proposer address Address of Proposer of Token, also the msg.sender of function call in Manager contract\r\n     * @return bytes32 It will return a hash index which is calculated as keccak256(_name, _symbol, _proposer)\r\n     */\r\n    function submitProposal(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint8 _decimals,\r\n        uint256 _totalSupply,\r\n        uint8 _initialPercentage,\r\n        uint256 _vestingPeriodInWeeks,\r\n        address _vestingBeneficiary,\r\n        address _proposer\r\n    )\r\n    public\r\n    onlyOwner\r\n    returns (bytes32 hashIndex)\r\n    {\r\n        nameDoesNotExist(_name);\r\n        symbolDoesNotExist(_symbol);\r\n        hashIndex = keccak256(abi.encodePacked(_name, _symbol, _proposer));\r\n        rolodex[hashIndex] = Creator({\r\n            token : address(0),\r\n            name : _name,\r\n            symbol : _symbol,\r\n            decimals : _decimals,\r\n            totalSupply : _totalSupply,\r\n            proposer : _proposer,\r\n            vestingBeneficiary : _vestingBeneficiary,\r\n            initialPercentage : _initialPercentage,\r\n            vestingPeriodInWeeks : _vestingPeriodInWeeks,\r\n            approved : false\r\n        });\r\n        emit LogProposalSubmit(_name, _symbol, msg.sender, hashIndex);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve token proposal, only called by Owner, which is set to be the Manager contract\r\n     * @param _hashIndex bytes32 Hash Index of Token proposal\r\n     * @param _token address Address of Token which has already been launched\r\n     * @return bool Whether it has completed the function\r\n     * @dev Notice that the only things that have changed from an approved proposal to one that is not\r\n     * is simply the .token and .approved object variables.\r\n     */\r\n    function approveProposal(\r\n        bytes32 _hashIndex,\r\n        address _token\r\n    )\r\n    external\r\n    onlyOwner\r\n    returns (bool)\r\n    {\r\n        Creator memory c = rolodex[_hashIndex];\r\n        nameDoesNotExist(c.name);\r\n        symbolDoesNotExist(c.symbol);\r\n        rolodex[_hashIndex].token = _token;\r\n        rolodex[_hashIndex].approved = true;\r\n        nameToIndex[c.name] = _hashIndex;\r\n        symbolToIndex[c.symbol] = _hashIndex;\r\n        emit LogProposalApprove(c.name, _token);\r\n        return true;\r\n    }\r\n\r\n    //Getters\r\n\r\n    function getIndexByName(\r\n        string memory _name\r\n        )\r\n    public\r\n    view\r\n    returns (bytes32)\r\n    {\r\n        return nameToIndex[_name];\r\n    }\r\n\r\n    function getIndexSymbol(\r\n        string memory _symbol\r\n        )\r\n    public\r\n    view\r\n    returns (bytes32)\r\n    {\r\n        return symbolToIndex[_symbol];\r\n    }\r\n\r\n    function getCreatorByIndex(\r\n        bytes32 _hashIndex\r\n    )\r\n    external\r\n    view\r\n    returns (Creator memory)\r\n    {\r\n        return rolodex[_hashIndex];\r\n    }\r\n\r\n\r\n\r\n    //Assertive functions\r\n\r\n    function nameDoesNotExist(string memory _name) internal view {\r\n        require(nameToIndex[_name] == 0x0, \"Name already exists\");\r\n    }\r\n\r\n    function symbolDoesNotExist(string memory _name) internal view {\r\n        require(symbolToIndex[_name] == 0x0, \"Symbol already exists\");\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_hashIndex\",\"type\":\"bytes32\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"approveProposal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"rolodex\",\"outputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"decimals\",\"type\":\"uint8\"},{\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"name\":\"proposer\",\"type\":\"address\"},{\"name\":\"vestingBeneficiary\",\"type\":\"address\"},{\"name\":\"initialPercentage\",\"type\":\"uint8\"},{\"name\":\"vestingPeriodInWeeks\",\"type\":\"uint256\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"getIndexSymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_hashIndex\",\"type\":\"bytes32\"}],\"name\":\"getCreatorByIndex\",\"outputs\":[{\"components\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"decimals\",\"type\":\"uint8\"},{\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"name\":\"proposer\",\"type\":\"address\"},{\"name\":\"vestingBeneficiary\",\"type\":\"address\"},{\"name\":\"initialPercentage\",\"type\":\"uint8\"},{\"name\":\"vestingPeriodInWeeks\",\"type\":\"uint256\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"parseAddr\",\"outputs\":[{\"name\":\"parsed\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getIndexByName\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"name\":\"_initialPercentage\",\"type\":\"uint8\"},{\"name\":\"_vestingPeriodInWeeks\",\"type\":\"uint256\"},{\"name\":\"_vestingBeneficiary\",\"type\":\"address\"},{\"name\":\"_proposer\",\"type\":\"address\"}],\"name\":\"submitProposal\",\"outputs\":[{\"name\":\"hashIndex\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"hashIndex\",\"type\":\"bytes32\"}],\"name\":\"LogProposalSubmit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"LogProposalApprove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Registry","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://f72af5066d590df2988ce464b87e3b9c0d4f61e3b1563ee41b710867343cb492"}]}