{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n// Interface to ERC20 functions used in this contract\r\ninterface ERC20token {\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\ncontract ExoTokensSwap{\r\n    ERC20token TokenFrom;\r\n    ERC20token TokenTo;\r\n    address owner;\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function setERC20TokenFrom(address tokenAddr) public onlyOwner  {\r\n        TokenFrom = ERC20token(tokenAddr);\r\n    }\r\n\r\n    function getERC20TokenFrom() public view returns(address) {\r\n        return TokenFrom;\r\n    }\r\n\r\n    function setERC20TokenTo(address tokenAddr) public onlyOwner  {\r\n        TokenTo = ERC20token(tokenAddr);\r\n    }\r\n\r\n    function getERC20TokenTo() public view returns(address) {\r\n        return TokenTo;\r\n    }\r\n    function getERC20BalanceFrom() public view returns(uint256) {\r\n        return TokenFrom.balanceOf(this);\r\n    }\r\n    function getERC20BalanceTo() public view returns(uint256) {\r\n        return TokenTo.balanceOf(this);\r\n    }\r\n    function swapERC20Token(uint256 fromAmount) public returns(uint){\r\n        require(fromAmount > 0);\r\n        require (TokenFrom.allowance(msg.sender, this) >= fromAmount);\r\n        uint256 wallet_tokenTo_balance = TokenTo.balanceOf(this);\r\n        require(wallet_tokenTo_balance >= fromAmount); // must be more in the contract than what user wants to swap\r\n        require(TokenFrom.transferFrom(msg.sender, this, fromAmount)); // Take erc20 tokens from sender\r\n        require(TokenTo.transfer(msg.sender, fromAmount)); // send erc20 to sender\r\n    }\r\n\r\n    function moveERC20Tokens(address _tokenContract, address _to, uint _val) public onlyOwner {\r\n        ERC20token token = ERC20token(_tokenContract);\r\n        require(token.transfer(_to, _val));\r\n    }\r\n\r\n    // Allows the owner to move any ether on address \r\n    function moveEther(address _target, uint256 _amount) public onlyOwner {\r\n        require(_amount <= address(this).balance);\r\n        _target.transfer(_amount);\r\n    }\r\n        // change the owner\r\n    function setOwner(address _owner) public onlyOwner {\r\n        owner = _owner;    \r\n    }\r\n\r\n    // empty fallback payable to allow ETH deposits to the contract    \r\n    function() public payable{\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getERC20TokenTo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getERC20BalanceTo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fromAmount\",\"type\":\"uint256\"}],\"name\":\"swapERC20Token\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"moveEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"setERC20TokenFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getERC20TokenFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"setERC20TokenTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"moveERC20Tokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getERC20BalanceFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"ExoTokensSwap","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU GPLv2","SwarmSource":"bzzr://e5907925a221fdf5f08b891927692716160b16801e9b9704a44d9448fd7c292e"}]}