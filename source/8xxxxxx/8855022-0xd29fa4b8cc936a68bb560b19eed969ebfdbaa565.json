{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *This is the only live Ace Wins Contract. The previous contract is not used any longer. ACW is the new ticker. The old ticker ACE is no longer in use.\r\n*/\r\n\r\npragma solidity ^0.4.16;\r\n\r\n\r\ncontract Ownable {\r\n    \r\n    address public owner;\r\n\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract AceWins is Ownable {\r\n    \r\n    uint256 public totalSupply;\r\n    mapping(address => uint256) startBalances;\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n    mapping(address => uint256) startBlocks;\r\n    \r\n    string public constant name = \"Ace Wins\";\r\n    string public constant symbol = \"ACW\";\r\n    uint32 public constant decimals = 10;\r\n    uint256 public calc = 951839;\r\n\r\n    function AceWins() public {\r\n        totalSupply = 12500000 * 10**uint256(decimals);\r\n        startBalances[owner] = totalSupply;\r\n        startBlocks[owner] = block.number;\r\n        Transfer(address(0), owner, totalSupply);\r\n    }\r\n\r\n\r\n    function fracExp(uint256 k, uint256 q, uint256 n, uint256 p) pure public returns (uint256) {\r\n        uint256 s = 0;\r\n        uint256 N = 1;\r\n        uint256 B = 1;\r\n        for (uint256 i = 0; i < p; ++i) {\r\n            s += k * N / B / (q**i);\r\n            N = N * (n-i);\r\n            B = B * (i+1);\r\n        }\r\n        return s;\r\n    }\r\n\r\n\r\n    function compoundInterest(address tokenOwner) view public returns (uint256) {\r\n        require(startBlocks[tokenOwner] > 0);\r\n        uint256 start = startBlocks[tokenOwner];\r\n        uint256 current = block.number;\r\n        uint256 blockCount = current - start;\r\n        uint256 balance = startBalances[tokenOwner];\r\n        return fracExp(balance, calc, blockCount, 8) - balance;\r\n    }\r\n\r\n\r\n    function balanceOf(address tokenOwner) public constant returns (uint256 balance) {\r\n        return startBalances[tokenOwner] + compoundInterest(tokenOwner);\r\n    }\r\n\r\n    \r\n\r\n    function updateBalance(address tokenOwner) private {\r\n        if (startBlocks[tokenOwner] == 0) {\r\n            startBlocks[tokenOwner] = block.number;\r\n        }\r\n        uint256 ci = compoundInterest(tokenOwner);\r\n        startBalances[tokenOwner] = startBalances[tokenOwner] + ci;\r\n        totalSupply = totalSupply + ci;\r\n        startBlocks[tokenOwner] = block.number;\r\n    }\r\n    \r\n\r\n \r\n    function transfer(address to, uint256 tokens) returns (bool success) {\r\n        updateBalance(msg.sender);\r\n        updateBalance(to);\r\n        require(tokens <= startBalances[msg.sender]);\r\n\r\n        startBalances[msg.sender] = startBalances[msg.sender] - tokens;\r\n        startBalances[to] = startBalances[to] + tokens;\r\n        Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 tokens) returns (bool success) {\r\n        updateBalance(from);\r\n        updateBalance(to);\r\n        if (startBalances[from] >= tokens && allowed[from][msg.sender] >= tokens && tokens > 0) {\r\n            startBalances[to] = startBalances[to] + tokens;\r\n            startBalances[from] = startBalances[from] - tokens;\r\n            allowed[from][msg.sender] -= tokens;\r\n            Transfer(from, to, tokens);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    \r\n\r\n   \r\n     function setCalc(uint256 _Calc) public {\r\n      require(msg.sender==owner);\r\n      calc = _Calc;\r\n    }\r\n    \r\n     \r\n    function approve(address spender, uint256 tokens) public returns (bool) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    } \r\n    \r\n\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint256 remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n   \r\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n    event Approval(address indexed owner, address indexed spender, uint256 tokens);\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_Calc\",\"type\":\"uint256\"}],\"name\":\"setCalc\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calc\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"compoundInterest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"k\",\"type\":\"uint256\"},{\"name\":\"q\",\"type\":\"uint256\"},{\"name\":\"n\",\"type\":\"uint256\"},{\"name\":\"p\",\"type\":\"uint256\"}],\"name\":\"fracExp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"AceWins","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU LGPLv3","SwarmSource":"bzzr://c24fe66c9360217b8e78c8a7ee1d661e9c16d39655a098fe27657b412aca7a19"}]}