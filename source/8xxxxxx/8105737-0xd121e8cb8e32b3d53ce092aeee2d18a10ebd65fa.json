{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint supply);\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    function decimals() external view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ncontract KotowarsChallenge \r\n{\r\n    mapping(address => bool) admins;\r\n    \r\n    modifier adminsOnly\r\n    {\r\n        require(admins[msg.sender] == true, \"Not an admin\");\r\n        _;\r\n    }\r\n  \r\n    address WCKAddress;\r\n  \r\n    uint256 challenge_ttl; \r\n    uint256 fee;\r\n    uint256 min_buy_in;\r\n   \r\n    enum ChallengeStatus { Created, Accepted, Resolved}\r\n  \r\n    struct Challenge\r\n    {\r\n        address creator;\r\n        address acceptor;\r\n        address winner;\r\n        uint256 buy_in;\r\n        ChallengeStatus status;\r\n        uint256 accepted_at;\r\n    }\r\n\r\n    Challenge[] challenges;\r\n\r\n    event Created(uint256 challenge_id, address creator,  uint256 buy_in);\r\n    event Accepted(uint256 challenge_id, address acceptor);\r\n    event Resolved(uint256 challenge_id, address winner, uint256 reward);\r\n    event Revoked(uint256 challenge_id, address revoker);\r\n\r\n    function create_challenge(uint256 buy_in) public {\r\n        ERC20 WCK = ERC20(WCKAddress);\r\n        require(WCK.transferFrom(msg.sender, address(this), (buy_in + fee) * (10**WCK.decimals())));\r\n        \r\n        Challenge memory challenge = Challenge({\r\n            creator: msg.sender,\r\n            acceptor: address(0),\r\n            winner: address(0),\r\n            buy_in: buy_in,\r\n            status: ChallengeStatus.Created,\r\n            accepted_at: 0\r\n        });\r\n        uint256 challenge_id = challenges.push(challenge) - 1;\r\n        \r\n        emit Created(challenge_id, challenge.creator, challenge.buy_in);\r\n    }\r\n     \r\n    function accept_challenge(uint256 challenge_id) public\r\n    {\r\n        require(challenge_id < challenges.length);\r\n     \r\n        Challenge memory challenge = challenges[challenge_id];\r\n        require(challenge.status == ChallengeStatus.Created);\r\n     \r\n        ERC20 WCK = ERC20(WCKAddress);\r\n        require(WCK.transferFrom(msg.sender, address(this), (challenge.buy_in + fee) * (10**WCK.decimals())));\r\n     \r\n        challenge.acceptor = msg.sender;   \r\n        challenge.status = ChallengeStatus.Accepted;\r\n        challenge.accepted_at = now;\r\n        \r\n        challenges[challenge_id] = challenge;\r\n        \r\n        emit Accepted(challenge_id, challenge.acceptor);\r\n    }\r\n   \r\n    function resolve(uint256 challenge_id, address winner) public adminsOnly\r\n    {\r\n        require(challenge_id < challenges.length);\r\n        \r\n        Challenge memory challenge = challenges[challenge_id];\r\n        require(challenge.status == ChallengeStatus.Accepted);\r\n        \r\n        challenge.winner = winner;\r\n        challenge.status = ChallengeStatus.Resolved;\r\n        \r\n        challenges[challenge_id] = challenge;\r\n        \r\n        uint256 reward = challenge.buy_in * 2;\r\n        ERC20 WCK = ERC20(WCKAddress);\r\n        require(WCK.transferFrom(address(this), challenge.winner, reward * (10**WCK.decimals())));\r\n     \r\n        emit Resolved(challenge_id, challenge.winner, reward);\r\n    }\r\n   \r\n    function unlock_funds(uint256 challenge_id) public\r\n    {\r\n        require(challenge_id < challenges.length);\r\n        \r\n        Challenge memory challenge = challenges[challenge_id];\r\n        require(challenge.status != ChallengeStatus.Resolved);\r\n        require(challenge.accepted_at + challenge_ttl < now);\r\n        \r\n        ERC20 WCK = ERC20(WCKAddress);\r\n        \r\n        if (challenge.status == ChallengeStatus.Created)\r\n        {\r\n            require(WCK.transferFrom(address(this), challenge.creator, challenge.buy_in * (10**WCK.decimals())));\r\n        }\r\n        else if (challenge.status == ChallengeStatus.Accepted)\r\n        {\r\n            require(WCK.transferFrom(address(this), challenge.creator, challenge.buy_in * (10**WCK.decimals())));\r\n            require(WCK.transferFrom(address(this), challenge.acceptor, challenge.buy_in * (10**WCK.decimals())));\r\n        }\r\n        \r\n        challenge.status = ChallengeStatus.Resolved;\r\n        \r\n        emit Revoked(challenge_id, msg.sender);\r\n    }\r\n    \r\n    function set_challenge_ttl(uint256 value) public adminsOnly\r\n    {\r\n        challenge_ttl = value;\r\n    }\r\n    \r\n    function set_min_buy_in(uint256 value) public adminsOnly\r\n    {\r\n        min_buy_in = value;\r\n    }\r\n    \r\n    function set_fee(uint256 value) public adminsOnly\r\n    {\r\n        fee = value;\r\n    }\r\n    \r\n    function set_wck_address(address value) public adminsOnly\r\n    {\r\n        WCKAddress = value;\r\n    }\r\n    \r\n    function add_admin(address admin) public adminsOnly\r\n    {\r\n        admins[admin] = true;\r\n    }\r\n    \r\n    function remove_admin(address admin) public adminsOnly\r\n    {\r\n        admins[admin] = false;\r\n    }\r\n    \r\n    function withdraw() public adminsOnly\r\n    {\r\n        ERC20 WCK = ERC20(WCKAddress);\r\n        WCK.transfer(msg.sender, WCK.balanceOf(address(this)));\r\n    }\r\n    \r\n    constructor() public \r\n    {\r\n        admins[msg.sender] = true;\r\n        \r\n        WCKAddress = address(0x09fE5f0236F0Ea5D930197DCE254d77B04128075);\r\n        \r\n        challenge_ttl = 60; \r\n        fee = 0;\r\n        min_buy_in = 0;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"add_admin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"set_challenge_ttl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"set_min_buy_in\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"set_fee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"challenge_id\",\"type\":\"uint256\"}],\"name\":\"unlock_funds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"address\"}],\"name\":\"set_wck_address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"remove_admin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"challenge_id\",\"type\":\"uint256\"}],\"name\":\"accept_challenge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"challenge_id\",\"type\":\"uint256\"},{\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"resolve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buy_in\",\"type\":\"uint256\"}],\"name\":\"create_challenge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"challenge_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"buy_in\",\"type\":\"uint256\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"challenge_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"acceptor\",\"type\":\"address\"}],\"name\":\"Accepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"challenge_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Resolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"challenge_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"revoker\",\"type\":\"address\"}],\"name\":\"Revoked\",\"type\":\"event\"}]","ContractName":"KotowarsChallenge","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://09c0899f1f02515658ee236d5790fbb8983b1f620f4da7912c5a0165cc9a00d7"}]}