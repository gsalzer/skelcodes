{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\n\ncontract Ownable {\n\n    address payable public owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function setOwner(address payable _owner) public onlyOwner {\n        owner = _owner;\n    }\n\n    function getOwner() public view returns (address payable) {\n        return owner;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner, \"must be owner to call this function\");\n        _;\n    }\n\n}\n\n// from OZ\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\ncontract Referrals is Ownable {\n\n    using SafeMath for uint;\n\n    uint public discountLimit;\n    uint public defaultDiscount;\n    uint public defaultRefer;\n\n    mapping(address => Split) public splits;\n\n    struct Split {\n        bool set;\n        uint8 discountPercentage;\n        uint8 referrerPercentage;\n    }\n\n    event SplitChanged(address user, uint8 discount, uint8 referrer);\n\n    constructor(uint _discountLimit, uint _defaultDiscount, uint _defaultRefer) public {   \n        setDiscountLimit(_discountLimit);\n        setDefaults(_defaultDiscount, _defaultRefer);\n    }\n\n    // sets the discount and referral percentages for the current user\n    // this is deliberately user-customisable\n    function setSplit(uint8 discount, uint8 referrer) public {\n        require(discountLimit >= discount + referrer, \"can't give more than the limit\");\n        require(discount + referrer >= discount, \"can't overflow\");\n        splits[msg.sender] = Split({\n            discountPercentage: discount,\n            referrerPercentage: referrer,\n            set: true\n        });\n        emit SplitChanged(msg.sender, discount, referrer);\n    }\n\n    // override a user's split\n    function overrideSplit(address user, uint8 discount, uint8 referrer) public onlyOwner {\n        require(discountLimit >= discount + referrer, \"can't give more than the limit\");\n        require(discount + referrer >= discount, \"can't overflow\");\n        splits[user] = Split({\n            discountPercentage: discount,\n            referrerPercentage: referrer,\n            set: true\n        });\n        emit SplitChanged(user, discount, referrer);\n    }\n\n    // sets the max purchase total discount\n    function setDiscountLimit(uint _limit) public onlyOwner {\n        require(_limit <= 100, \"discount limit must be <= 100\");\n        discountLimit = _limit;\n    }\n\n    // sets the default discount and referral percentages\n    function setDefaults(uint _discount, uint _refer) public onlyOwner {\n        require(discountLimit >= _discount + _refer, \"can't be more than the limit\");\n        require(_discount + _refer >= _discount, \"can't overflow\");\n        defaultDiscount = _discount;\n        defaultRefer = _refer;\n    }\n\n    // gets the discount and referral rates for a particular user\n    function getSplit(address user) public view returns (uint8 discount, uint8 referrer) {\n        if (user == address(0)) {\n            return (0, 0);\n        }\n        Split memory s = splits[user];\n        if (!s.set) {\n            return (uint8(defaultDiscount), uint8(defaultRefer));\n        }\n        return (s.discountPercentage, s.referrerPercentage);\n    }\n\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_discount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_refer\",\"type\":\"uint256\"}],\"name\":\"setDefaults\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"splits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"set\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"discountPercentage\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"referrerPercentage\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getSplit\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"discount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"referrer\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"discountLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultRefer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"discount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"referrer\",\"type\":\"uint8\"}],\"name\":\"overrideSplit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"discount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"referrer\",\"type\":\"uint8\"}],\"name\":\"setSplit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultDiscount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"setDiscountLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_discountLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_defaultDiscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_defaultRefer\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"discount\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"referrer\",\"type\":\"uint8\"}],\"name\":\"SplitChanged\",\"type\":\"event\"}]","ContractName":"Referrals","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a","Library":"","LicenseType":"","SwarmSource":"bzzr://72ff5e2d42006c11ebf07b304c273e7b9f92ef13045fdacf434fe5440b408b5d"}]}