{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.8;\r\n\r\ncontract Ownable {\r\n\r\n    address owner;\r\n\r\n    constructor () public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract Moderated is Ownable {\r\n\r\n    address moderator;\r\n\r\n    constructor () public {\r\n      \r\n        moderator = owner;\r\n    }\r\n\r\n    modifier onlyModerator() {\r\n        require(msg.sender == moderator);\r\n        _;\r\n    }\r\n    \r\n     modifier onlyModeratorOrOwner() {\r\n        require(msg.sender == moderator || msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function setModerator (address newModerator) public onlyOwner {\r\n        \r\n        moderator = newModerator;\r\n        \r\n    }\r\n\r\n}\r\n\r\ncontract Lottery is Moderated {\r\n    struct Draw\r\n    {\r\n        uint timestamp;  \r\n        uint membersCount; \r\n        string hash;\r\n        uint winner;\r\n    }\r\n        \r\n    mapping (string => Draw) drawsByHash;\r\n    \r\n    \r\n    \r\n    function createDraw (uint membersCount, string memory hash) public onlyModeratorOrOwner {\r\n       \r\n        require(drawsByHash[hash].timestamp == 0);\r\n        uint winner = rand(membersCount, now);\r\n        Draw memory d = Draw ({timestamp : now, membersCount: membersCount, hash : hash, winner: winner });         \r\n        drawsByHash[hash] = d;\r\n    \r\n    }\r\n\r\n    function getWinnerNumber(string memory hash) public view returns (uint) {\r\n        \r\n        return drawsByHash[hash].winner;\r\n        \r\n    }\r\n    \r\n    function getTime(string memory hash) public view returns (uint) {\r\n        \r\n        return drawsByHash[hash].timestamp;\r\n        \r\n    }\r\n    function getMembersCount(string memory hash) public view returns (uint) {\r\n        \r\n        return drawsByHash[hash].membersCount;\r\n        \r\n    }\r\n    \r\n    //Generate random number between 1 & max\r\n    function rand(uint max, uint256 seed) private returns (uint256 result){\r\n        \r\n        uint256 factor = seed * 100 / max;\r\n        uint256 lastBlockNumber = block.number - 1;\r\n        uint256 hashVal = uint256(blockhash(lastBlockNumber));\r\n        return (uint256((uint256(hashVal) / factor)) % max) + 1;\r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"membersCount\",\"type\":\"uint256\"},{\"name\":\"hash\",\"type\":\"string\"}],\"name\":\"createDraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newModerator\",\"type\":\"address\"}],\"name\":\"setModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hash\",\"type\":\"string\"}],\"name\":\"getTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hash\",\"type\":\"string\"}],\"name\":\"getWinnerNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hash\",\"type\":\"string\"}],\"name\":\"getMembersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Lottery","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6d5decb4204b59d4f86f23aa32e1bd1f717041c8776821f9321eacd9764b726d"}]}