{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ninterface EtheleGenerator {\r\n    function fire() external view returns(address);\r\n}\r\ninterface Token {\r\n    function balanceOf(address) external view returns (uint256);\r\n}\r\n\r\n/**\r\n * Reward to garner some interest in Ethereum Elements\r\n */\r\ncontract EtheleReward {\r\n    address private constant _generator = 0x3e3D41DA3273D4A56c8a04Ba0ae6a8F0E4B63601;\r\n    \r\n    constructor() public payable {\r\n    }\r\n    \r\n    function claimReward() public  {\r\n        EtheleGenerator generator = EtheleGenerator(_generator);\r\n        Token token = Token(generator.fire());\r\n        \r\n        // token has 18 decimal places, hence 10**18.\r\n        require(token.balanceOf(msg.sender) > 1000000 * 10**18, \"Insufficient balance to claim reward\");\r\n        \r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"}]","ContractName":"EtheleReward","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://63fee4946c9cc013fe061af5dabe47471ebf2ab14ae177ed1843355b1ec47b44"}]}