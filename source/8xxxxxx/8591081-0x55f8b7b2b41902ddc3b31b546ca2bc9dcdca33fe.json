{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.11;\r\n\r\ncontract digitalNotary\r\n{\r\n    \r\n    address payable private manager;\r\n    \r\n    bool private contractactive;\r\n    \r\n    uint private hashfee;\r\n    \r\n    uint private changehashownerfee;\r\n    \r\n    struct HashRegistration \r\n    {\r\n        address owner;\r\n        uint registrationtime;\r\n    }\r\n    \r\n    mapping(bytes32 => HashRegistration[]) HashList;\r\n    \r\n    uint private HashListLength;\r\n    \r\n    event  RegisterHashEvent(address indexed msgsender, bytes32 indexed hash, uint timestamp);\r\n    \r\n    event  ChangeHashOwnershipEvent(address indexed msgsender, address indexed newowner, bytes32 indexed hash, uint timestamp);\r\n    \r\n    constructor() public\r\n    {\r\n\r\n        manager = msg.sender;\r\n        \r\n        contractactive = true;\r\n        \r\n        hashfee = 5000000000000000;\r\n        \r\n        changehashownerfee = 25000000000000000;\r\n        \r\n        HashListLength = 0;\r\n        \r\n    }\r\n    \r\n    modifier onlyManager()\r\n    {\r\n        require(msg.sender == manager);\r\n        _;\r\n    }\r\n    \r\n    \r\n    function gethashfee() external view returns(uint)\r\n    {\r\n        return hashfee;\r\n    }\r\n    \r\n    function sethashfee(uint newfee) external onlyManager\r\n    {\r\n        require(newfee >= 0);\r\n        \r\n        hashfee = newfee;\r\n    }\r\n    \r\n    function getchangehashownerfee() external view returns(uint)\r\n    {\r\n        return changehashownerfee;\r\n    }\r\n    \r\n     function setchangehashownerfee(uint newfee) external onlyManager\r\n    {\r\n        require(newfee >= 0);\r\n        \r\n        changehashownerfee = newfee;\r\n    }\r\n    \r\n    function getcontractactive() external view returns (bool)\r\n    {\r\n        return contractactive;\r\n    }\r\n    \r\n    function setcontractactive(bool contactive) external onlyManager\r\n    {\r\n        contractactive = contactive;\r\n    }\r\n    \r\n     function getmanager() external view returns(address)\r\n    {\r\n        return manager;\r\n    }\r\n    \r\n    function setmanager(address payable newmngr) external onlyManager\r\n    {\r\n        require(newmngr.balance > 0);\r\n        manager = newmngr;\r\n    }\r\n    \r\n    function getcontractbalance() public view returns(uint)\r\n    {\r\n       \r\n        return address(this).balance;\r\n    }\r\n    \r\n    function transfercontractbalance() external onlyManager\r\n    {\r\n        uint cb = address(this).balance;\r\n        \r\n        require(cb > 0);\r\n        \r\n        manager.transfer(cb);\r\n    }\r\n    \r\n    function getHashOwnersCount(bytes32 hash) public view returns(uint)\r\n    {\r\n        return HashList[hash].length;\r\n    }\r\n    \r\n    function getNumberofHashesRegistered() external view returns(uint)\r\n    {\r\n        return HashListLength;\r\n    }\r\n    \r\n     function getHashDetails(bytes32 hash,uint indx) external view returns (address,uint)\r\n    {\r\n\r\n        uint owncount = getHashOwnersCount(hash);\r\n        require(owncount > 0);\r\n        require(indx < owncount);\r\n        \r\n        return (HashList[hash][indx].owner,HashList[hash][indx].registrationtime);\r\n    }\r\n    \r\n    function registerHash(bytes32 hash) external payable\r\n    {\r\n      \r\n        require(contractactive == true);\r\n        require(getHashOwnersCount(hash) == 0);\r\n        require(msg.value == hashfee);\r\n        \r\n        HashRegistration memory thisregistration;\r\n        thisregistration.owner = msg.sender;\r\n        thisregistration.registrationtime = now;\r\n        \r\n        HashList[hash].push(thisregistration);\r\n        \r\n        HashListLength++;\r\n        \r\n        emit RegisterHashEvent(thisregistration.owner, hash, thisregistration.registrationtime);\r\n        \r\n    }\r\n    \r\n    function changeHashOwnership(bytes32 hash, address newowner) external payable\r\n    {\r\n        \r\n        require(contractactive == true);\r\n        uint owncount = getHashOwnersCount(hash);\r\n        require(owncount > 0);\r\n        require(msg.sender == HashList[hash][owncount - 1].owner); \r\n        require(msg.value == changehashownerfee);\r\n        \r\n        HashRegistration memory thisregistration;\r\n        thisregistration.owner = newowner;\r\n        thisregistration.registrationtime = now;\r\n        \r\n        HashList[hash].push(thisregistration);\r\n        \r\n        emit ChangeHashOwnershipEvent(msg.sender, thisregistration.owner, hash, thisregistration.registrationtime);\r\n    }\r\n    \r\n    function () external\r\n    {\r\n      \t\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newfee\",\"type\":\"uint256\"}],\"name\":\"setchangehashownerfee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumberofHashesRegistered\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getchangehashownerfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"newowner\",\"type\":\"address\"}],\"name\":\"changeHashOwnership\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gethashfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"contactive\",\"type\":\"bool\"}],\"name\":\"setcontractactive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"registerHash\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newfee\",\"type\":\"uint256\"}],\"name\":\"sethashfee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transfercontractbalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"indx\",\"type\":\"uint256\"}],\"name\":\"getHashDetails\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"getHashOwnersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getcontractbalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getmanager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newmngr\",\"type\":\"address\"}],\"name\":\"setmanager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getcontractactive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"msgsender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RegisterHashEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"msgsender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newowner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ChangeHashOwnershipEvent\",\"type\":\"event\"}]","ContractName":"digitalNotary","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://c81a3a362bfc079ebd979749a0e020c7d88e69dda7c4a980d8e9e350158885aa"}]}