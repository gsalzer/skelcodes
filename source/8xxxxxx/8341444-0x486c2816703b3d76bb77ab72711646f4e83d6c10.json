{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity =0.5.10;\r\n\r\n// * Gods Unchained Raffle Token Exchange\r\n//\r\n// * Version 1.0\r\n//\r\n// * A dedicated contract for listing (selling) and buying raffle tokens.\r\n//\r\n// * https://gu.cards\r\n\r\ncontract ERC20Interface {\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n}\r\n\r\ncontract IERC20Interface {\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ncontract RaffleToken is ERC20Interface, IERC20Interface {}\r\n\r\ncontract RaffleTokenExchange {\r\n\r\n    //////// V A R I A B L E S\r\n    //\r\n    // The raffle token contract\r\n    //\r\n    RaffleToken constant public raffleContract = RaffleToken(0x0C8cDC16973E88FAb31DD0FCB844DdF0e1056dE2);\r\n    //\r\n    // In case the exchange is paused.\r\n    //\r\n    bool public paused;\r\n    //\r\n    // Standard contract ownership.\r\n    //\r\n    address payable public owner;\r\n    //\r\n    // Next id for the next listing\r\n    //\r\n    uint public nextListingId;\r\n    //\r\n    // All raffle token listings mapped by id\r\n    //\r\n    mapping (uint => Listing) public listingsById;\r\n    //\r\n    // All purchases\r\n    //\r\n    mapping (uint => Purchase) public purchasesById;\r\n    //\r\n    // Next id for the next purche\r\n    //\r\n    uint public nextPurchaseId;\r\n\r\n    //////// S T R U C T S\r\n    //\r\n    //  A listing of raffle tokens\r\n    //\r\n    struct Listing {\r\n        //\r\n        // price per token (in wei).\r\n        //\r\n        uint pricePerToken;\r\n        //\r\n        //\r\n        // How many tokens? (Original Amount)\r\n        //\r\n        uint initialAmount;\r\n        //\r\n        // How many tokens left? (Maybe altered due to partial sales)\r\n        //\r\n        uint amountLeft;\r\n        //\r\n        // Listed by whom?\r\n        //\r\n        address payable seller;\r\n        //\r\n        // Active/Inactive listing?\r\n        //\r\n        bool active;\r\n    }\r\n    //\r\n    //  A purchase of raffle tokens\r\n    //\r\n    struct Purchase {\r\n        //\r\n        // How many tokens?\r\n        //\r\n        uint totalAmount;\r\n        //\r\n        // total price payed\r\n        //\r\n        uint totalAmountPayed;\r\n        //\r\n        // When did the purchase happen?\r\n        //\r\n        uint timestamp;\r\n    }\r\n\r\n    //////// EVENTS\r\n    //\r\n    //\r\n    //\r\n    event Listed(uint id, uint pricePerToken, uint initialAmount, address seller);\r\n    event Canceled(uint id);\r\n    event Purchased(uint id, uint totalAmount, uint totalAmountPayed, uint timestamp);\r\n\r\n    //////// M O D I F I E R S\r\n    //\r\n    // Invokable only by contract owner.\r\n    //\r\n    modifier onlyContractOwner {\r\n        require(msg.sender == owner, \"Function called by non-owner.\");\r\n        _;\r\n    }\r\n    //\r\n    // Invokable only if exchange is not paused.\r\n    //\r\n    modifier onlyUnpaused {\r\n        require(paused == false, \"Exchange is paused.\");\r\n        _;\r\n    }\r\n\r\n    //////// C O N S T R U C T O R\r\n    //\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        nextListingId = 1;\r\n        nextPurchaseId = 1;\r\n    }\r\n\r\n    //////// F U N C T I O N S\r\n    //\r\n    // buyRaffle\r\n    //\r\n    function buyRaffle(uint[] calldata amounts, uint[] calldata listingIds) payable external onlyUnpaused {\r\n        require(amounts.length == listingIds.length, \"You have to provide amounts for every single listing!\");\r\n        uint totalAmount;\r\n        uint totalAmountPayed;\r\n        for (uint i = 0; i < listingIds.length; i++) {\r\n            uint id = listingIds[i];\r\n            uint amount = amounts[i];\r\n            Listing storage listing = listingsById[id];\r\n            require(listing.active, \"Listing is not active anymore!\");\r\n            listing.amountLeft -= amount;\r\n            require(listing.amountLeft >= 0, \"Amount left needs to be higher than 0.\");\r\n            if(listing.amountLeft == 0) { listing.active = false; }\r\n            uint amountToPay = listing.pricePerToken * amount;\r\n            listing.seller.transfer(amountToPay);\r\n            totalAmountPayed += amountToPay;\r\n            totalAmount += amount;\r\n            require(raffleContract.transferFrom(listing.seller, msg.sender, amount), 'Token transfer failed!');\r\n        }\r\n        require(totalAmountPayed <= msg.value, 'Overpayed!');\r\n        uint id = nextPurchaseId++;\r\n        Purchase storage purchase = purchasesById[id];\r\n        purchase.totalAmount = totalAmount;\r\n        purchase.totalAmountPayed = totalAmountPayed;\r\n        purchase.timestamp = now;\r\n        emit Purchased(id, totalAmount, totalAmountPayed, now);\r\n    }\r\n    //\r\n    // Add listing\r\n    //\r\n    function addListing(uint initialAmount, uint pricePerToken) external onlyUnpaused {\r\n        require(raffleContract.balanceOf(msg.sender) >= initialAmount, \"Amount to sell is higher than balance!\");\r\n        require(raffleContract.allowance(msg.sender, address(this)) >= initialAmount, \"Allowance is to small (increase allowance)!\");\r\n        uint id = nextListingId++;\r\n        Listing storage listing = listingsById[id];\r\n        listing.initialAmount = initialAmount;\r\n        listing.amountLeft = initialAmount;\r\n        listing.pricePerToken = pricePerToken;\r\n        listing.seller = msg.sender;\r\n        listing.active = true;\r\n        emit Listed(id, listing.pricePerToken, listing.initialAmount, listing.seller);\r\n    }\r\n    //\r\n    // Cancel listing\r\n    //\r\n    function cancelListing(uint id) external {\r\n        Listing storage listing = listingsById[id];\r\n        require(listing.active, \"This listing was turned inactive already!\");\r\n        require(listing.seller == msg.sender || owner == msg.sender, \"Only the listing owner or the contract owner can cancel the listing!\");\r\n        listing.active = false;\r\n        emit Canceled(id);\r\n    }\r\n    //\r\n    // Set paused\r\n    //\r\n    function setPaused(bool value) external onlyContractOwner {\r\n        paused = value;\r\n    }\r\n    //\r\n    // Funds withdrawal to cover operational costs\r\n    //\r\n    function withdrawFunds(uint withdrawAmount) external onlyContractOwner {\r\n        owner.transfer(withdrawAmount);\r\n    }\r\n    //\r\n    // Contract may be destroyed only when there is nothing else going on. \r\n    // All funds are transferred to contract owner.\r\n    //\r\n    function kill() external onlyContractOwner {\r\n        selfdestruct(owner);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listingsById\",\"outputs\":[{\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"name\":\"initialAmount\",\"type\":\"uint256\"},{\"name\":\"amountLeft\",\"type\":\"uint256\"},{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"active\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextPurchaseId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"cancelListing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"name\":\"listingIds\",\"type\":\"uint256[]\"}],\"name\":\"buyRaffle\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raffleContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"initialAmount\",\"type\":\"uint256\"},{\"name\":\"pricePerToken\",\"type\":\"uint256\"}],\"name\":\"addListing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextListingId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"purchasesById\",\"outputs\":[{\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"name\":\"totalAmountPayed\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"initialAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"Listed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Canceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalAmountPayed\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Purchased\",\"type\":\"event\"}]","ContractName":"RaffleTokenExchange","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ad6fe5ad44498f67b9ab5888ef4cfe19532601fc4e94ce92d4251ab7863cedaa"}]}