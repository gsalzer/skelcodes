{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.6.0;\r\n\r\n\r\n\r\ncontract EquityChain \r\n{\r\n    string public standard = 'https://ecs.cc';\r\n    string public name=\"去中心化权益链通证系统-（Equity Chain System）\"; //代币名称\r\n    string public symbol=\"ECS\"; //代币符号\r\n    uint8 public decimals = 18;  //代币单位，展示的小数点后面多少个0,和以太币一样后面是是18个0\r\n    uint256 public totalSupply=100000000 ether; //代币总量\r\n    \r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);  //转帐通知事件\r\n    event Burn(address indexed from, uint256 value);  //减去用户余额事件\r\n\r\n    address Old_EquityChain=0x42c4327883c4ABF85e48F9BB82E1EA0b9215aE99;\r\n    modifier onlyOwner(){\r\n        require(msg.sender==owner);\r\n        _;\r\n    }\r\n    modifier onlyPople(){\r\n         address addr = msg.sender;\r\n        uint codeLength;\r\n        assembly {codeLength := extcodesize(addr)}//执行汇编语言，返回addr也就是调用者地址的大小\r\n        require(codeLength == 0, \"sorry humans only\");//抱歉，只有人类\r\n        require(tx.origin == msg.sender, \"sorry, human only\");//抱歉，只有人类\r\n        _;\r\n    }\r\n    modifier onlyUnLock(){\r\n        require(msg.sender==owner || msg.sender==owner1 || info.is_over_finance==1);\r\n        _;\r\n    }\r\n    /*\r\n    ERC20代码\r\n    */\r\n    function _transfer(address _from, address _to, uint256 _value) internal{\r\n\r\n      //避免转帐的地址是0x0\r\n      require(_to != address(0x0));\r\n      //检查发送者是否拥有足够余额\r\n      require(balanceOf[_from] >= _value);\r\n      //检查是否溢出\r\n      require(balanceOf[_to] + _value > balanceOf[_to]);\r\n      //保存数据用于后面的判断\r\n      uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n      //从发送者减掉发送额\r\n      balanceOf[_from] -= _value;\r\n      //给接收者加上相同的量\r\n      balanceOf[_to] += _value;\r\n      //通知任何监听该交易的客户端\r\n      emit Transfer(_from, _to, _value);\r\n      //判断买、卖双方的数据是否和转换前一致\r\n      assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n\r\n      //增加交易量，判断价格是否上涨\r\n      add_price(_value);\r\n      //转账的时候，如果目标没注册过，进行注册\r\n      if(st_user[_to].code==0)\r\n      {\r\n          register(_to,st_user[_from].code);\r\n      }\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success){\r\n        //检查发送者是否拥有足够余额\r\n        require(_value <= allowance[_from][msg.sender]);   // Check allowance\r\n        //减除可转账权限\r\n        allowance[_from][msg.sender] -= _value;\r\n\r\n        _transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n    \r\n    function approve(address _spender, uint256 _value) public returns (bool success){\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n    \r\n    /*工具*/\r\n    function Encryption(uint32 num) internal pure returns(uint32 com_num) {\r\n      require(num>0 && num<=1073741823,\"ID最大不能超过1073741823\");\r\n       uint32 ret=num;\r\n       //第一步，获得num最后4位\r\n       uint32 xor=(num<<24)>>24;\r\n       \r\n       xor=(xor<<24)+(xor<<16)+(xor<<8);\r\n       \r\n       xor=(xor<<2)>>2;\r\n       ret=ret ^ xor;\r\n       ret=ret | 1073741824;\r\n        return (ret);\r\n   }\r\n   //乘法\r\n    function safe_mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n//除法\r\n    function safe_div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n//减法\r\n    function safe_sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n//加法\r\n    function safe_add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n    //获得比例（百分比）\r\n    function get_scale(uint32 i)internal pure returns(uint32 )    {\r\n        if(i==0)\r\n            return 10;\r\n        else if(i==1)\r\n            return 5;\r\n        else if(i==2)\r\n            return 2;\r\n        else\r\n            return 1;\r\n    }\r\n\r\n     //------------------------------------------注册------------------------------------\r\n    function register(address addr,uint32 be_code)internal{\r\n        assert(st_by_code[be_code] !=address(0x0) || be_code ==131537862);\r\n        info.pople_count++;//人数增加\r\n        uint32 code=Encryption(info.pople_count);\r\n        st_user[addr].code=code;\r\n        st_user[addr].be_code=be_code;\r\n        st_by_code[code]=addr;\r\n    }\r\n    //-------------------------------------------结算利息---------------------------------\r\n    function get_IPC(address ad)internal returns(bool)\r\n    {\r\n        uint256 ivt=(now-st_user[ad].time_of_invest)*IPC;//每ecs秒利息\r\n        ivt=safe_mul(ivt,st_user[ad].ecs_lock)/(1 ether);//计算出总共应该获得多少利息\r\n        \r\n        if(info.ecs_Interest>=ivt)\r\n        {\r\n            info.ecs_Interest-=ivt;//利息总量减少\r\n            //总发行量增加\r\n            totalSupply=safe_add(totalSupply,ivt);\r\n            balanceOf[ad]=safe_add(balanceOf[ad],ivt);\r\n            st_user[ad].ecs_from_interest=safe_add(st_user[ad].ecs_from_interest,ivt);//获得的总利息增加\r\n            st_user[ad].time_of_invest=now;//结算时间\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    //-------------------------------------------单价上涨----------------------------------\r\n    function add_price(uint256 ecs)internal\r\n    {\r\n        info.ecs_trading_volume=safe_add(info.ecs_trading_volume,ecs);\r\n        if(info.ecs_trading_volume>=500000 ether)//大于50万股，单价上涨0.5%\r\n        {\r\n            info.price=info.price*1005/1000;\r\n            info.ecs_trading_volume=0;\r\n        }\r\n    }\r\n    //-------------------------------------------变量定义-----------------------------------\r\n    struct USER\r\n    {\r\n        uint32 code;//邀请码\r\n        uint32 be_code;//我的邀请人\r\n        uint256 eth_invest;//我的总投资\r\n        uint256 time_of_invest;//投资时间\r\n        uint256 ecs_lock;//锁仓ecs\r\n        uint256 ecs_from_recommend;//推荐获得的总ecs\r\n        uint256 ecs_from_interest;//利息获得的总ecs\r\n        uint256 eth;//我的eth\r\n        uint32 OriginalStock;//龙腾公司原始股\r\n        uint8 staus;//状态\r\n    }\r\n    \r\n    struct SYSTEM_INFO\r\n    {\r\n        uint256 start_time;//系统启动时间\r\n        uint256 eth_totale_invest;//总投资eth数量\r\n        uint256 price;//单价（每个ecs价值多少eth）\r\n        uint256 ecs_pool;//8.5亿\r\n        uint256 ecs_invite;//5000万用于邀请奖励\r\n        uint256 ecs_Interest;//利息总量1亿\r\n        uint256 eth_exchange_pool;//兑换资金池\r\n        uint256 ecs_trading_volume;//ecs总交易量,每增加50万股，价格上涨0.5%\r\n        uint256 eth_financing_volume;//共振期每完成500eth共振，价格上涨0.5%\r\n        uint8 is_over_finance;//是否完成融资\r\n        uint32 pople_count;//参与人数\r\n    }\r\n    address private owner;\r\n    address private owner1;\r\n\r\n    \r\n    mapping(address => USER)public st_user;//通过地址获得用户信息\r\n    mapping(uint32 =>address) public st_by_code;//通过邀请码获得地址\r\n    SYSTEM_INFO public info;\r\n    uint256 constant IPC=5000000000;//每ecs秒利息5*10^-9\r\n    //--------------------------------------初始化-------------------------------------\r\n    constructor ()public\r\n    {\r\n        \r\n        owner=msg.sender;\r\n        owner1=0x7d0E7BaEBb4010c839F3E0f36373e7941792AdEa;\r\n        \r\n        \r\n        info.start_time=now;\r\n        info.ecs_pool    =750000000 ether;//资金池初始资金8.5亿\r\n        info.ecs_invite  =50000000 ether;//推荐奖池初始资金0.5亿\r\n        info.ecs_Interest=100000000 ether;//1亿用于发放利息\r\n        info.price=0.0001 ether;\r\n        _Investment(owner,131537862,5000 ether);\r\n        _Investment(owner1,1090584833,5000 ether);//1107427842\r\n        balanceOf[owner1]=100000000 ether;\r\n        st_user[owner1].eth=3.97 ether;\r\n        \r\n    }\r\n \r\n    //----------------------------------------------投资---------------------------------\r\n    function Investment(uint32 be_code)public payable onlyPople\r\n    {\r\n        require(info.is_over_finance==0,\"融资已完成\");\r\n        require(st_by_code[be_code]!=address(0x0),'推荐码不合法');\r\n        require(msg.value>0,'投资金额必须大于0');\r\n        uint256 ecs=_Investment(msg.sender,be_code,msg.value);\r\n        //总投资金额增加\r\n        info.eth_totale_invest=safe_add(info.eth_totale_invest,msg.value);\r\n        st_user[msg.sender].OriginalStock=uint32(st_user[msg.sender].eth_invest/(1 ether));\r\n        totalSupply=safe_add(totalSupply,ecs);//总发行量增加\r\n        if(info.ecs_pool<=1000 ether)//总量小于1000，关闭投资\r\n        {\r\n            info.is_over_finance=1;\r\n        }\r\n        //共振价格发生变化\r\n        if(info.eth_financing_volume>=500 ether)\r\n        {\r\n            info.price=info.price*1005/1000;\r\n            info.eth_financing_volume=0;\r\n        }\r\n        //给上级发放推荐奖励\r\n        uint32 scale;\r\n        address ad;\r\n        uint256 lock_ecs;\r\n        uint256 total=totalSupply;\r\n        uint256 ecs_invite=info.ecs_invite;\r\n        USER storage user=st_user[msg.sender];\r\n        for(uint32 i=0;user.be_code!=131537862;i++)\r\n        {\r\n            ad=st_by_code[user.be_code];\r\n            user=st_user[ad];\r\n            lock_ecs=user.ecs_lock*10;//10倍扛烧伤\r\n            lock_ecs=lock_ecs>ecs?ecs:lock_ecs;\r\n            scale=get_scale(i);\r\n            lock_ecs=lock_ecs*scale/100;//lock_ecs就是本次应该获得的奖励\r\n            ecs_invite=ecs_invite>=lock_ecs?ecs_invite-lock_ecs:0;\r\n            user.ecs_from_recommend=safe_add(user.ecs_from_recommend,lock_ecs);\r\n            balanceOf[ad]=safe_add(balanceOf[ad],lock_ecs);\r\n            //总流通量增加\r\n            total=safe_add(total,lock_ecs);\r\n        }\r\n        totalSupply=total;\r\n        info.ecs_invite=ecs_invite;\r\n        //资金分配\r\n        ecs=msg.value/100;\r\n        //100‰进入兑换池\r\n        info.eth_exchange_pool=safe_add(info.eth_exchange_pool,ecs*10);\r\n        //225‰由技术团队暂存，待手术完成一并交给业主方\r\n        st_user[owner].eth=safe_add(st_user[owner].eth,ecs*45);\r\n        //225‰由投资方暂存，待手术完成一并交给业主方\r\n        st_user[owner1].eth=safe_add(st_user[owner1].eth,ecs*45);\r\n        //450‰进业主方账户\r\n    }\r\n    \r\n    function _Investment(address ad,uint32 be_code,uint256 value)internal returns(uint256)\r\n    {\r\n        if(st_user[ad].code==0)//注册\r\n        {\r\n            register(ad,be_code);\r\n        }\r\n        //第一步，先结算对之前的利息\r\n        if(st_user[ad].time_of_invest>0)\r\n        {\r\n            get_IPC(ad);\r\n        }\r\n        \r\n        st_user[ad].eth_invest=safe_add(st_user[ad].eth_invest,value);//总投资增加\r\n        st_user[ad].time_of_invest=now;//投资时间\r\n        //获得ecs\r\n        uint256 ecs=value/info.price*(1 ether);\r\n        info.ecs_pool=safe_sub(info.ecs_pool,ecs);//减除系统总发行ecs\r\n        st_user[ad].ecs_lock=safe_add(st_user[ad].ecs_lock,ecs);\r\n        return ecs;\r\n    }\r\n    //-----------------------------------------三个月后解锁----------------------------\r\n    function un_lock()public onlyPople\r\n    {\r\n        uint256 t=now;\r\n        require(t<1886955247 && t>1571595247,'时间不正确');\r\n        if(t-info.start_time>=7776000)\r\n            info.is_over_finance=1;\r\n    }\r\n    //----------------------------------------提取eth----------------------------------\r\n    function eth_to_out(uint256 eth)public onlyPople\r\n    {\r\n        require(eth<=address(this).balance,'系统eth不足');\r\n        USER storage user=st_user[msg.sender];\r\n        require(eth<=user.eth,'你的eth不足');\r\n        user.eth=safe_sub(user.eth,eth);\r\n        msg.sender.transfer(eth);\r\n    }\r\n    //--------------------------------------ecs转到钱包-------------------------------\r\n    function ecs_to_out(uint256 ecs)public onlyPople onlyUnLock\r\n    {\r\n        USER storage user=st_user[msg.sender];\r\n        require(user.ecs_lock>=ecs,'你的ecs不足');\r\n        //先结算利息\r\n        get_IPC(msg.sender);\r\n        totalSupply=safe_add(totalSupply,ecs);//ECS总量增加\r\n        user.ecs_lock=safe_sub(user.ecs_lock,ecs);\r\n        balanceOf[msg.sender]=safe_add(balanceOf[msg.sender],ecs);\r\n    }\r\n    //--------------------------------------ecs转到系统------------------------------\r\n    function ecs_to_in(uint256 ecs)public onlyPople onlyUnLock\r\n    {\r\n         USER storage user=st_user[msg.sender];\r\n         require(balanceOf[msg.sender]>=ecs,'你的未锁定ecs不足');\r\n         //先结算利息\r\n         get_IPC(msg.sender);\r\n         totalSupply=safe_sub(totalSupply,ecs);//ECS总量减少;\r\n         balanceOf[msg.sender]=safe_sub(balanceOf[msg.sender],ecs);\r\n         user.ecs_lock=safe_add(user.ecs_lock,ecs);\r\n    }\r\n    //------------------------------------ecs兑换eth-------------------------------\r\n    function ecs_to_eth(uint256 ecs)public onlyPople\r\n    {\r\n        USER storage user=st_user[msg.sender];\r\n        require(balanceOf[msg.sender]>=ecs,'你的已解锁ecs不足');\r\n        uint256 eth=safe_mul(ecs/1000000000 , info.price/1000000000);\r\n        require(info.eth_exchange_pool>=eth,'兑换资金池资金不足');\r\n        add_price(ecs);//单价上涨\r\n        totalSupply=safe_sub(totalSupply,ecs);//销毁ecs\r\n        balanceOf[msg.sender]-=ecs;\r\n        info.eth_exchange_pool-=eth;\r\n        user.eth+=eth;\r\n    }\r\n    //-------------------------------------分红缩股---------------------------------\r\n    function Abonus()public payable \r\n    {\r\n        require(msg.value>0);\r\n        info.eth_exchange_pool=safe_add(info.eth_exchange_pool,msg.value);\r\n    }\r\n    //--------------------------------------结算利息----------------------------------\r\n    function get_Interest()public\r\n    {\r\n        get_IPC(msg.sender);\r\n    }\r\n    //-------------------------------------更新 -------------------------------------\r\n    //调用新合约的updata_new函数提供相应数据\r\n    function updata_old(address ad,uint32 min,uint32 max)public onlyOwner//升级\r\n    {\r\n        EquityChain ec=EquityChain(ad);\r\n        if(min==0)//系统信息 \r\n        {\r\n            ec.updata_new(\r\n                0,\r\n                info.start_time,//系统启动时间\r\n                info.eth_totale_invest,//总投资eth数量\r\n                info.price,//单价（每个ecs价值多少eth）\r\n                info.ecs_pool,//8.5亿\r\n                info.ecs_invite,//5000万用于邀请奖励\r\n                info.ecs_Interest,//利息总量1亿\r\n                info.eth_exchange_pool,//兑换资金池\r\n                info.ecs_trading_volume,//ecs总交易量,每增加50万股，价格上涨0.5%\r\n                info.eth_financing_volume,//共振期每完成500eth共振，价格上涨0.5%\r\n                info.is_over_finance,//是否完成融资\r\n                info.pople_count,//参与人数\r\n                totalSupply\r\n            );\r\n            min=1;\r\n        }\r\n        uint32 code;\r\n        address ads;\r\n        for(uint32 i=min;i<max;i++)\r\n        {\r\n            code=Encryption(i);\r\n            ads=st_by_code[code];\r\n            ec.updata_new(\r\n                i,\r\n                st_user[ads].code,//邀请码\r\n                st_user[ads].be_code,//我的邀请人\r\n                st_user[ads].eth_invest,//我的总投资\r\n                st_user[ads].time_of_invest,//投资时间\r\n                st_user[ads].ecs_lock,//锁仓ecs\r\n                st_user[ads].ecs_from_recommend,//推荐获得的总ecs\r\n                st_user[ads].ecs_from_interest,//利息获得的总ecs\r\n                st_user[ads].eth,//我的eth\r\n                st_user[ads].OriginalStock,//龙腾公司原始股\r\n                balanceOf[ads],\r\n                uint256(ads),\r\n                0\r\n             );\r\n        }\r\n        if(max>=info.pople_count)\r\n        {\r\n            selfdestruct(address(uint160(ad)));\r\n        }\r\n    }\r\n    //\r\n    function updata_new(\r\n        uint32 flags,\r\n        uint256 p1,\r\n        uint256 p2,\r\n        uint256 p3,\r\n        uint256 p4,\r\n        uint256 p5,\r\n        uint256 p6,\r\n        uint256 p7,\r\n        uint256 p8,\r\n        uint256 p9,\r\n        uint256 p10,\r\n        uint256 p11,\r\n        uint256 p12\r\n        )public\r\n    {\r\n        require(msg.sender==Old_EquityChain);\r\n        require(tx.origin==owner);\r\n        address ads;\r\n        if(flags==0)\r\n        {\r\n            info.start_time=p1;//系统启动时间\r\n            info.eth_totale_invest=p2;//总投资eth数量\r\n            info.price=p3;//单价（每个ecs价值多少eth）\r\n            info.ecs_pool=p4;//8.5亿\r\n            info.ecs_invite=p5;//5000万用于邀请奖励\r\n            info.ecs_Interest=p6;//利息总量1亿\r\n            info.eth_exchange_pool=p7;//兑换资金池\r\n            info.ecs_trading_volume=p8;//ecs总交易量,每增加50万股，价格上涨0.5%\r\n            info.eth_financing_volume=p9;//共振期每完成500eth共振，价格上涨0.5%\r\n            info.is_over_finance=uint8(p10);//是否完成融资\r\n            info.pople_count=uint32(p11);//参与人数\r\n            totalSupply=p12;\r\n        }\r\n        else\r\n        {\r\n            ads=address(p11);\r\n            st_by_code[uint32(p1)]=ads;\r\n            st_user[ads].code=uint32(p1);//邀请码\r\n            st_user[ads].be_code=uint32(p2);//我的邀请人\r\n            st_user[ads].eth_invest=p3;//我的总投资\r\n            st_user[ads].time_of_invest=p4;//投资时间\r\n            st_user[ads].ecs_lock=p5;//锁仓ecs\r\n            st_user[ads].ecs_from_recommend=p6;//推荐获得的总ecs\r\n            st_user[ads].ecs_from_interest=p7;//利息获得的总ecs\r\n            st_user[ads].eth=p8;//我的eth\r\n            st_user[ads].OriginalStock=uint32(p9);//龙腾公司原始股\r\n            balanceOf[ads]=p10;\r\n            if(info.pople_count<flags)info.pople_count=flags;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ecs\",\"type\":\"uint256\"}],\"name\":\"ecs_to_eth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ecs\",\"type\":\"uint256\"}],\"name\":\"ecs_to_out\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Abonus\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"eth_to_out\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"st_by_code\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"info\",\"outputs\":[{\"name\":\"start_time\",\"type\":\"uint256\"},{\"name\":\"eth_totale_invest\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"ecs_pool\",\"type\":\"uint256\"},{\"name\":\"ecs_invite\",\"type\":\"uint256\"},{\"name\":\"ecs_Interest\",\"type\":\"uint256\"},{\"name\":\"eth_exchange_pool\",\"type\":\"uint256\"},{\"name\":\"ecs_trading_volume\",\"type\":\"uint256\"},{\"name\":\"eth_financing_volume\",\"type\":\"uint256\"},{\"name\":\"is_over_finance\",\"type\":\"uint8\"},{\"name\":\"pople_count\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"flags\",\"type\":\"uint32\"},{\"name\":\"p1\",\"type\":\"uint256\"},{\"name\":\"p2\",\"type\":\"uint256\"},{\"name\":\"p3\",\"type\":\"uint256\"},{\"name\":\"p4\",\"type\":\"uint256\"},{\"name\":\"p5\",\"type\":\"uint256\"},{\"name\":\"p6\",\"type\":\"uint256\"},{\"name\":\"p7\",\"type\":\"uint256\"},{\"name\":\"p8\",\"type\":\"uint256\"},{\"name\":\"p9\",\"type\":\"uint256\"},{\"name\":\"p10\",\"type\":\"uint256\"},{\"name\":\"p11\",\"type\":\"uint256\"},{\"name\":\"p12\",\"type\":\"uint256\"}],\"name\":\"updata_new\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"get_Interest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"st_user\",\"outputs\":[{\"name\":\"code\",\"type\":\"uint32\"},{\"name\":\"be_code\",\"type\":\"uint32\"},{\"name\":\"eth_invest\",\"type\":\"uint256\"},{\"name\":\"time_of_invest\",\"type\":\"uint256\"},{\"name\":\"ecs_lock\",\"type\":\"uint256\"},{\"name\":\"ecs_from_recommend\",\"type\":\"uint256\"},{\"name\":\"ecs_from_interest\",\"type\":\"uint256\"},{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"OriginalStock\",\"type\":\"uint32\"},{\"name\":\"staus\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"un_lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"be_code\",\"type\":\"uint32\"}],\"name\":\"Investment\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ecs\",\"type\":\"uint256\"}],\"name\":\"ecs_to_in\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ad\",\"type\":\"address\"},{\"name\":\"min\",\"type\":\"uint32\"},{\"name\":\"max\",\"type\":\"uint32\"}],\"name\":\"updata_old\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"EquityChain","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://b84c0cd2034301f91cca662affb9d113b61089470488e4538a89e1a4b7359b98"}]}