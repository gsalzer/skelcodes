{"status":"1","message":"OK","result":[{"SourceCode":"{\"ERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\u0027./ERC20Interface.sol\\u0027;\\nimport \\u0027./SafeMath.sol\\u0027;\\n\\n/**\\n * @title Standard ERC20 token\\n * @dev Implementation of the basic standard token.\\n */\\ncontract ERC20 is IERC20 {\\n    \\n    using SafeMath for uint256;\\n\\n    mapping (address =\\u003e uint256) private _balances;\\n\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowed;\\n    \\n    mapping (address =\\u003e uint256) private _freezeOf;\\n    \\n    uint256 private _totalSupply;\\n\\n    /**\\n     * @dev Total number of tokens in existence.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev Gets the balance of the specified address.\\n     * @param tokenOwner The address to query the balance of.\\n     * @return A uint256 representing the amount owned by the passed address.\\n     */\\n    function balanceOf(address tokenOwner) public view returns (uint256 balance) {\\n        return _balances[tokenOwner];\\n    }\\n    \\n    /**\\n     * @dev Gets the balance of the specified freeze address.\\n     * @param tokenOwner The address to query the balance of.\\n     * @return A uint256 representing the amount owned by the freeze address.\\n     */\\n    function freezeOf(address tokenOwner) public view returns (uint256) {\\n        return _freezeOf[tokenOwner];\\n    }\\n\\n    /**\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n     * @param tokenOwner address The address which owns the funds.\\n     * @param spender address The address which will spend the funds.\\n     * @return A uint256 specifying the amount of tokens still available for the spender.\\n     */\\n    function allowance(address tokenOwner, address spender) public view returns (uint256) {\\n        return _allowed[tokenOwner][spender];\\n    }\\n    \\n    /**\\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n     * race condition is to first reduce the spender\\u0027s allowance to 0 and set the desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     */\\n    function approve(address spender, uint256 value) public returns (bool success) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Approve an address to spend another addresses\\u0027 tokens.\\n     * @param tokenOwner The address that owns the tokens.\\n     * @param spender The address that will spend the tokens.\\n     * @param value The number of tokens that can be spent.\\n     */\\n    function _approve(address tokenOwner, address spender, uint256 value) internal {\\n        \\n\\t\\trequire(tokenOwner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowed[tokenOwner][spender] = value;\\n\\t\\t\\n        emit Approval(tokenOwner, spender, value);\\n        \\n    }\\n    \\n    /**\\n     * @dev Transfer token to a specified address.\\n     * @param to The address to transfer to.\\n     * @param value The amount to be transferred.\\n     */\\n    function transfer(address to, uint256 value) public returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Transfer tokens from one address to another.\\n     * Note that while this function emits an Approval event, this is not required as per the specification,\\n     * and other compliant implementations may not emit the event.\\n     * @param from address The address which you want to send tokens from\\n     * @param to address The address which you want to transfer to\\n     * @param value uint256 the amount of tokens to be transferred\\n     */\\n    function transferFrom(address from, address to, uint256 value) public returns (bool success) {\\n        _transfer(from, to, value);\\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Transfer token for a specified addresses.\\n     * @param from The address to transfer from.\\n     * @param to The address to transfer to.\\n     * @param value The amount to be transferred.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        \\n\\t\\trequire(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\t\\t\\n        _balances[from] = _balances[from].sub(value);\\n        _balances[to] = _balances[to].add(value);\\n        \\n        emit Transfer(from, to, value);\\n    }\\n    \\n    /**\\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\\n     * approve should be called when _allowed[msg.sender][spender] == 0. \\n     * To increment allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined)\\n     * Emits an Approval event.\\n     * @param spender The address which will spend the funds.\\n     * @param addedValue The amount of tokens to increase the allowance by.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool success) {\\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n     * approve should be called when _allowed[msg.sender][spender] == 0. \\n     * To decrement allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined)\\n\\t * Emits an Approval event.\\n     * @param spender The address which will spend the funds.\\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool success) {\\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Internal function that mints an amount of the token and assigns it to an account. \\n\\t * This encapsulates the modification of balances such that the\\n     * Emits a Transfer event.\\n     * @param account The account that will receive the created tokens.\\n     * @param value The amount that will be created.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n\\t\\t\\n\\t\\trequire(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\t\\t\\n        _totalSupply = _totalSupply.add(value);\\n        _balances[account] = _balances[account].add(value);\\n\\t\\t\\n        emit Transfer(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Internal function that burns an amount of the token of a given account.\\n     * @param account The account whose tokens will be burnt.\\n     * @param value The amount that will be burnt.\\n     */\\n    function _burn(address account, uint256 value) internal {\\n\\t\\t\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n        \\n        _totalSupply = _totalSupply.sub(value);\\n        _balances[account] = _balances[account].sub(value);\\n\\t\\t\\n        emit Transfer(account, address(0), value);\\n    }\\n    \\n    function _freeze(uint256 value) internal {\\n\\t\\t\\n        require(_balances[msg.sender] \\u003e= value,\\\"ERC20: balance is not enough\\\"); \\n        require(value \\u003e 0,\\\"ERC20: value must be greater than 0\\\");\\n\\t\\t\\n        _balances[msg.sender] = _balances[msg.sender].sub(value);\\n        _freezeOf[msg.sender] = _freezeOf[msg.sender].add(value);\\n\\t\\t\\n        emit Freeze(msg.sender, value);\\n    }\\n    \\n    function _unfreeze(uint256 value) internal{\\n\\t\\t\\n\\t\\trequire(_freezeOf[msg.sender] \\u003e= value,\\\"ERC20: balance is not enough\\\"); \\n\\t\\trequire(value \\u003e 0,\\\"ERC20: value must be greater than 0\\\");\\n\\t\\t\\n        _freezeOf[msg.sender] = _freezeOf[msg.sender].sub(value); \\n\\t\\t_balances[msg.sender] = _balances[msg.sender].add(value);\\n\\t\\t\\n        emit Unfreeze(msg.sender, value);\\n\\n    }\\n    \\n}\"},\"ERC20Detailed.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\u0027./ERC20Interface.sol\\u0027;\\n\\n/**\\n * @title ERC20Detailed token\\n * @dev The decimals are only for visualization purposes.\\n * All the operations are done using the smallest and indivisible token unit,\\n * just as on Ethereum all the operations are done in wei.\\n */\\ncontract ERC20Detailed is IERC20 {\\n    \\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = decimals;\\n    }\\n\\n    /**\\n     * @return the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @return the symbol of the token.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @return the number of decimals of the token.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n}\"},\"ERC20Interface.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface IERC20 {\\n    \\n    function balanceOf(address tokenOwner) external view returns (uint256);\\n\\n    function allowance(address tokenOwner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 tokens) external returns (bool success);\\n\\n    function transfer(address to, uint256 tokens) external returns (bool success);\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n\\n    function totalSupply() external view returns (uint256 total);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\\n\\t\\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\\n\\t\\n    event Freeze(address indexed from, uint256 tokens);\\n\\t\\n    event Unfreeze(address indexed from, uint256 tokens);\\n    \\n}\"},\"ERC20Pausable.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\u0027./ERC20.sol\\u0027;\\nimport \\u0027./Pausable.sol\\u0027;\\nimport \\u0027./Lockable.sol\\u0027;\\n\\n/**\\n * @title Pausable token\\n * @dev ERC20 modified with pausable transfers. \\n */\\ncontract ERC20Pausable is ERC20, Pausable,Lockable {\\n    \\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\\n        require(!isLock(msg.sender));\\n        require(!isLock(to));\\n        return super.transfer(to, value);\\n    }\\n\\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\\n        require(!isLock(msg.sender));\\n        require(!isLock(from));\\n        require(!isLock(to));\\n        return super.transferFrom(from, to, value);\\n    }\\n\\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\\n        require(!isLock(msg.sender));\\n        require(!isLock(spender));\\n        return super.approve(spender, value);\\n    }\\n\\n    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool) {\\n        require(!isLock(msg.sender));\\n        require(!isLock(spender));\\n        return super.increaseAllowance(spender, addedValue);\\n    }\\n\\n    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool) {\\n        require(!isLock(msg.sender));\\n        require(!isLock(spender));\\n        return super.decreaseAllowance(spender, subtractedValue);\\n    }\\n}\\n\"},\"IOTF.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\u0027./ERC20.sol\\u0027;\\nimport \\u0027./ERC20Detailed.sol\\u0027;\\nimport \\u0027./ERC20Pausable.sol\\u0027;\\n\\n\\ncontract IOTF is ERC20, ERC20Detailed, ERC20Pausable {\\n    \\n    constructor(string memory name, string memory symbol, uint8 decimals,uint256 _totalSupply) ERC20Pausable()  ERC20Detailed(name, symbol, decimals) ERC20() public {\\n        require(_totalSupply \\u003e 0);\\n        _mint(msg.sender, _totalSupply * 10 ** uint256(decimals));\\n    }\\n    \\n    /**\\n     * @dev Burns a specific amount of tokens.\\n     * @param value The amount of token to be burned.\\n     */\\n    function burn(uint256 value) public whenNotPaused {\\n        require(!isLock(msg.sender));\\n        _burn(msg.sender, value);\\n    }\\n    \\n    /**\\n     * @dev Freeze a specific amount of tokens.\\n     * @param value The amount of token to be Freeze.\\n     */\\n    function freeze(uint256 value) public whenNotPaused {\\n        require(!isLock(msg.sender));\\n        _freeze(value);\\n    }\\n    \\n        /**\\n     * @dev unFreeze a specific amount of tokens.\\n     * @param value The amount of token to be unFreeze.\\n     */\\n    function unfreeze(uint256 value) public whenNotPaused {\\n        require(!isLock(msg.sender));\\n        _unfreeze(value);\\n    }\\n    \\n}\"},\"Lockable.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\u0027./PauserRole.sol\\u0027;\\n\\n/**\\n * @title Lockable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Lockable is PauserRole{\\n\\n    mapping (address =\\u003e bool) private lockers;\\n    \\n    event LockAccount(address account, bool islock);\\n    \\n    /**\\n     * @dev Check if the account is locked.\\n     * @param account specific account address.\\n     */\\n    function isLock(address account) public view returns (bool) {\\n        return lockers[account];\\n    }\\n    \\n    /**\\n     * @dev Lock or thaw account address\\n     * @param account specific account address.\\n     * @param islock true lock, false thaw.\\n     */\\n    function lock(address account, bool islock)  public onlyPauser {\\n        lockers[account] = islock;\\n        emit LockAccount(account, islock);\\n    }\\n}\"},\"Pausable.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\u0027./PauserRole.sol\\u0027;\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is PauserRole {\\n    \\n    event Paused(address account);\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @return True if the contract is paused, false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Called by a pauser to pause, triggers stopped state.\\n     */\\n    function pause() public onlyPauser whenNotPaused {\\n        _paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Called by a pauser to unpause, returns to normal state.\\n     */\\n    function unpause() public onlyPauser whenPaused {\\n        _paused = false;\\n        emit Unpaused(msg.sender);\\n    }\\n\\t\\n}\"},\"PauserRole.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\u0027./Roles.sol\\u0027;\\n\\ncontract PauserRole {\\n\\t\\n    using Roles for Roles.Role;\\n\\n    event PauserAdded(address indexed account);\\n    event PauserRemoved(address indexed account);\\n\\n    Roles.Role private _pausers;\\n\\n    constructor () internal {\\n        _addPauser(msg.sender);\\n    }\\n\\n    modifier onlyPauser() {\\n        require(isPauser(msg.sender), \\\"PauserRole: caller does not have the Pauser role\\\");\\n        _;\\n    }\\n\\n    function isPauser(address account) public view returns (bool) {\\n        return _pausers.has(account);\\n    }\\n\\n    function addPauser(address account) public onlyPauser {\\n        _addPauser(account);\\n    }\\n\\n    function renouncePauser() public {\\n        _removePauser(msg.sender);\\n    }\\n\\n    function _addPauser(address account) internal {\\n        _pausers.add(account);\\n        emit PauserAdded(account);\\n    }\\n\\n    function _removePauser(address account) internal {\\n        _pausers.remove(account);\\n        emit PauserRemoved(account);\\n    }\\n\\t\\n}\"},\"Roles.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @title Roles\\n * @dev Library for managing addresses assigned to a Role.\\n */\\nlibrary Roles {\\n\\t\\n    struct Role {\\n        mapping (address =\\u003e bool) bearer;\\n    }\\n\\n    /**\\n     * @dev Give an account access to this role.\\n     */\\n    function add(Role storage role, address account) internal {\\n        require(!has(role, account));\\n\\n        role.bearer[account] = true;\\n    }\\n\\n    /**\\n     * @dev Remove an account\\u0027s access to this role.\\n     */\\n    function remove(Role storage role, address account) internal {\\n        require(has(role, account));\\n\\n        role.bearer[account] = false;\\n    }\\n\\n    /**\\n     * @dev Check if an account has this role.\\n     * @return bool\\n     */\\n    function has(Role storage role, address account) internal view returns (bool) {\\n        require(account != address(0));\\n        return role.bearer[account];\\n    }\\n\\t\\n}\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\t\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\t\\n        require(b \\u003c= a, \\\"SafeMath: subtraction overflow\\\");\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b \\u003e 0, \\\"SafeMath: division by zero\\\");\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\t\\n        require(b != 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\t\\n}\"}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"islock\",\"type\":\"bool\"}],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"unfreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"freezeOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"freeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"decimals\",\"type\":\"uint8\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"islock\",\"type\":\"bool\"}],\"name\":\"LockAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Unfreeze\",\"type\":\"event\"}]","ContractName":"IOTF","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000000000000000000a494f544620546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004494f544600000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://677b80260ff3e901129eb5bb184b9364a239b8d55b0cf706fac95fac4ecfc64f"}]}