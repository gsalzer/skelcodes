{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title tokenRecipient\r\n * @dev An interface capable of calling `receiveApproval`, which is used by `approveAndCall` to notify the contract from this interface\r\n */\r\ninterface tokenRecipient { function receiveApproval(address from, uint256 value, address token, bytes extraData) external; }\r\n\r\n/**\r\n * @title TokenERC20\r\n * @dev A simple ERC20 standard token with burnable function\r\n */\r\ncontract TokenERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    // Total number of tokens in existence\r\n    uint256 public totalSupply;\r\n\r\n    // This creates an array with all balances\r\n    mapping(address => uint256) internal balances;\r\n    mapping(address => mapping(address => uint256)) internal allowed;\r\n\r\n    // This notifies clients about the amount burnt/transferred/approved\r\n    event Burn(address indexed from, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address\r\n     * @param _owner The address to query\r\n     * @return Token balance of `_owner`\r\n     */\r\n    function balanceOf(address _owner) view public returns(uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Gets a spender's allowance from a token holder\r\n     * @param _owner The address which allows spender to spend\r\n     * @param _spender The address being allowed\r\n     * @return Approved amount for `spender` to spend from `_owner`\r\n     */\r\n    function allowance(address _owner, address _spender) view public returns(uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Basic transfer of all transfer-related functions\r\n     * @param _from The address of sender\r\n     * @param _to The address of recipient\r\n     * @param _value The amount sender want to transfer to recipient\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer( _from, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer tokens\r\n     * @dev Send `_value` tokens to `_to` from your account\r\n     * @param _to The address of the recipient\r\n     * @param _value The amount to send\r\n     * @return True if the transfer is done without error\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns(bool) {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer tokens from other address\r\n     * @dev Send `_value` tokens to `_to` on behalf of `_from`\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value The amount to send\r\n     * @return True if the transfer is done without error\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Set allowance for other address\r\n     * @dev Allows `_spender` to spend no more than `_value` tokens on your behalf\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     * @return True if the approval is done without error\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns(bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Set allowance for other address and notify\r\n     * @dev Allows contract `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\r\n     * @param _spender The contract address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     * @param _extraData some extra information to send to the approved contract\r\n     * @return True if it is done without error\r\n     */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns(bool) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @notice Destroy tokens\r\n     * @dev Remove `_value` tokens from the system irreversibly\r\n     * @param _value The amount of money will be burned\r\n     * @return True if `_value` is burned successfully\r\n     */\r\n    function burn(uint256 _value) public returns(bool) {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Destroy tokens from other account\r\n     * @dev Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n     * @param _from The address of the burner\r\n     * @param _value The amount of token will be burned\r\n     * @return True if `_value` is burned successfully\r\n     */\r\n    function burnFrom(address _from, uint256 _value) public returns(bool) {\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        emit Burn(_from, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer tokens to multiple account\r\n     * @dev Send `_value` tokens to corresponding `_to` from your account\r\n     * @param _to The array of ddress of the recipients\r\n     * @param _value The array of amount to send\r\n     * @return True if the transfer is done without error\r\n     */\r\n    function transferMultiple(address[] _to, uint256[] _value) external returns(bool) {\r\n        require(_to.length == _value.length);\r\n        uint256 i = 0;\r\n        while (i < _to.length) {\r\n           _transfer(msg.sender, _to[i], _value[i]);\r\n           i += 1;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * @title EventSponsorshipToken\r\n * @author Ping Chen\r\n */\r\ncontract EventSponsorshipToken is TokenERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    // Token Info.\r\n    string public constant name = \"EventSponsorshipToken\";\r\n    string public constant symbol = \"EST\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    /**\r\n     * @dev contract constructor\r\n     * @param _wallet The address where initial supply goes to\r\n     * @param _totalSupply initial supply\r\n     */\r\n    constructor(address _wallet, uint256 _totalSupply) public {\r\n        totalSupply = _totalSupply;\r\n        balances[_wallet] = _totalSupply;\r\n    }\r\n\r\n}\r\n\r\ncontract ESTVault is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    struct vault {\r\n        uint256 amount;\r\n        uint256 unlockTime;\r\n        bool claimed;\r\n    }\r\n\r\n    mapping(address => vault[]) public vaults;\r\n\r\n    EventSponsorshipToken EST = EventSponsorshipToken(0xD427c628C5f72852965fADAf1231b618c0C82395);\r\n\r\n    event Lock(address to, uint256 value, uint256 time);\r\n    event Revoke(address to, uint256 index);\r\n    event Redeem(address to, uint256 index);\r\n\r\n    function lock(address to, uint256 value, uint256 time) external {\r\n        _lock(to, value, time);\r\n    }\r\n\r\n    function lockMultiple(address[] to, uint256[] value, uint256[] time) external {\r\n        require(to.length == value.length && to.length == time.length);\r\n        for(uint256 i = 0 ; i < to.length ; i++)\r\n            _lock(to[i], value[i], time[i]);\r\n    }\r\n\r\n    function revoke(address to, uint256 index) public onlyOwner {\r\n        vault storage v = vaults[to][index];\r\n        require(now >= v.unlockTime);\r\n        require(!v.claimed);\r\n        v.claimed = true;\r\n        require(EST.transfer(msg.sender, v.amount));\r\n        emit Revoke(to, index);\r\n    }\r\n\r\n    function _lock(address to, uint256 value, uint256 time) internal {\r\n        require(EST.transferFrom(msg.sender, address(this), value));\r\n        vault memory v;\r\n        v.amount = value;\r\n        v.unlockTime = time;\r\n        vaults[to].push(v);\r\n        emit Lock(to, value, time);\r\n    }\r\n\r\n    function redeem(uint256 index) external {\r\n        vault storage v = vaults[msg.sender][index];\r\n        require(now >= v.unlockTime);\r\n        require(!v.claimed);\r\n        v.claimed = true;\r\n        require(EST.transfer(msg.sender, v.amount));\r\n        emit Redeem(msg.sender, index);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaults\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"name\":\"claimed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address[]\"},{\"name\":\"value\",\"type\":\"uint256[]\"},{\"name\":\"time\",\"type\":\"uint256[]\"}],\"name\":\"lockMultiple\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"revoke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Revoke\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ESTVault","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b13b2d6696a8e5a90acf5d7266faad42720a8a0f4f86290773d957ae7878c796"}]}