{"status":"1","message":"OK","result":[{"SourceCode":"// pragma solidity >=0.4.22 <0.6.0;\r\npragma solidity  ^0.5.8;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n        return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface tokenRecipient { \r\n    function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; \r\n}\r\n\r\ncontract Base {\r\n    using SafeMath for uint256;\r\n\r\n    address public owner;\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function setOwner(address _newOwner)  external  onlyOwner {\r\n        require(_newOwner != address(0x0));\r\n        owner = _newOwner;\r\n    }\r\n\r\n    bool public IsStopped = false;\r\n\r\n    function setStop(bool isStop) external onlyOwner {\r\n        IsStopped = isStop;\r\n    }\r\n\r\n    modifier onlyNoStopped {\r\n        require(!IsStopped);\r\n        _;\r\n    }\r\n\r\n}\r\n\r\ncontract TokenERC20 is Base {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 6;//18;\r\n    uint256 public totalSupply;\r\n\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Burn(address indexed from, uint256 value);\r\n     \r\n    //Fix for short address attack against ERC20\r\n\tmodifier onlyPayloadSize(uint size) {\r\n\t\tassert(msg.data.length == size + 4);\r\n\t\t_;\r\n\t}\r\n\r\n    function _transfer(address _from, address _to, uint _value) internal onlyNoStopped returns (bool success) {\r\n        require(_to != address(0x0));\r\n        require(balanceOf[_from] >= _value);\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value)  onlyPayloadSize(2*32) public returns (bool success) {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) onlyPayloadSize(2*32) public returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool success) \r\n    {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, address(this), _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);                               // Check if the sender has enough\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);              // Subtract from the sender\r\n        totalSupply = totalSupply.sub(_value);                                  // Updates totalSupply\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(1 == 2);\r\n        emit Burn(_from, _value);\r\n        return false;\r\n    }\r\n}\r\n\r\n\r\ncontract TokenFC is TokenERC20 {\r\n    \r\n    constructor(address _owner) public {\r\n        require(_owner != address(0x0));\r\n        owner = _owner;\r\n\r\n        totalSupply = 200000000 * 10 ** uint256(decimals);     // Update total supply with the decimal amount\r\n        balanceOf[address(this)] = totalSupply;\r\n\r\n        name = \"FCToken\";                                 // Set the name for display purposes\r\n        symbol = \"FC\";                                         // Set the symbol for display purposes\r\n    }\r\n\r\n    \r\n    function batchTransfer1(address[] calldata _tos, uint256 _amount) external  {\r\n        require(_batchTransfer1(msg.sender, _tos, _amount));\r\n    }\r\n\r\n    function _batchTransfer1(address _from, address[] memory _tos, uint256 _amount) internal returns (bool _result) {\r\n        require(_amount > 0);\r\n        require(_tos.length > 0);\r\n        for(uint i = 0; i < _tos.length; i++){\r\n            address to = _tos[i];\r\n            require(to != address(0x0));\r\n            require(_transfer(_from, to, _amount));\r\n        }\r\n        _result = true;\r\n    }\r\n\r\n    function batchTransfer2(address[] calldata _tos, uint256[] calldata _amounts) external  {\r\n        require(_batchTransfer2(msg.sender, _tos, _amounts));\r\n    }\r\n\r\n    function _batchTransfer2(address _from, address[] memory _tos, uint256[] memory _amounts) internal returns (bool _result)  {\r\n        require(_amounts.length > 0);\r\n        require(_tos.length > 0);\r\n        require(_amounts.length == _tos.length );\r\n        for(uint i = 0; i < _tos.length; i++){\r\n            require(_tos[i] != address(0x0) && _amounts[i] > 0);\r\n            require(_transfer(_from, _tos[i], _amounts[i]));\r\n        }\r\n        _result = true;\r\n    }\r\n    \r\n    event OnIssue1(address[]  _tos, uint256 _amount, address _sender);\r\n\r\n    function issue1(address[] calldata _tos, uint256 _amount) external onlyOwner \r\n    {\r\n        //require(msg.sender == tx.origin);\r\n        require(_amount > 0);\r\n        for(uint i = 0; i < _tos.length; i++){\r\n            address to = _tos[i];\r\n            require(to != address(0x0));\r\n\r\n            require(_transfer(address(this), to, _amount));\r\n        }\r\n        emit OnIssue1(_tos, _amount, msg.sender);\r\n    }\r\n\r\n    event OnIssue2(address[]  _tos, uint256[]  _amounts, address _sender);\r\n\r\n    function issue2(address[] calldata _tos, uint256[] calldata _amounts) external onlyOwner \r\n    {\r\n        require(_tos.length == _amounts.length);\r\n        for(uint i = 0; i < _tos.length; i++){\r\n            address to = _tos[i];\r\n            require(to != address(0x0));\r\n            require(_amounts[i] > 0);\r\n\r\n            require(_transfer(address(this), to,  _amounts[i]));\r\n        }\r\n        emit OnIssue2(_tos, _amounts, msg.sender);\r\n    }\r\n\r\n    \r\n    function() payable external {\r\n        // require(1 == 2);    //selfdestruct(_to);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tos\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"issue2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tos\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"batchTransfer1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"isStop\",\"type\":\"bool\"}],\"name\":\"setStop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tos\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"issue1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tos\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IsStopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tos\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"OnIssue1\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tos\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"OnIssue2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"TokenFC","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000822f16c5d0de0a9fdf35178703bfac5de2a46713","Library":"","LicenseType":"None","SwarmSource":"bzzr://79a56802df60623de5aecfcc2e2bd384eb3a8188cfda1b953fb681c94c63e021"}]}