{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/Ownable.sol\r\n\r\npragma solidity >0.4.0 <0.6.0;\r\n\r\ncontract Ownable {\r\n\r\n  address payable public owner;\r\n\r\n  constructor () public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n  \r\n  \r\n  function transferOwnership(address payable newOwner) external onlyOwner {\r\n    require(newOwner != address(0));      \r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/ReentrancyGuard.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ncontract ReentrancyGuard {\r\n    // counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private _guardCounter;\r\n\r\n    constructor () internal {\r\n        // The counter starts at one to prevent changing it from zero to a non-zero\r\n        // value, which is a more expensive operation.\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n}\r\n\r\n// File: contracts/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\nlibrary SafeMath {\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n   \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/EthMaximalist.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\ninterface Invest2Fulcrum1xShortBTC {\r\n    function LetsInvest2Fulcrum1xShortBTC(address _towhomtoissue) external payable;\r\n}\r\n\r\ninterface Invest2Fulcrum {\r\n    function LetsInvest2Fulcrum(address _towhomtoissue) external payable;\r\n}\r\n\r\n\r\n// through this contract we are putting 90% allocation to cDAI and 10% to 2xLongETH\r\ncontract ETHMaximalist is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint;\r\n    \r\n    // state variables\r\n    \r\n    \r\n    // - variables in relation to the percentages\r\n    uint public ShortBTCAllocation = 50;\r\n    Invest2Fulcrum public Invest2FulcrumContract = Invest2Fulcrum(0xAB58BBF6B6ca1B064aa59113AeA204F554E8fBAe);\r\n    Invest2Fulcrum1xShortBTC public Invest2Fulcrum1xShortBTCContract = Invest2Fulcrum1xShortBTC(0xa2C3e380E6c082A003819a2a69086748fe3D15Dd);\r\n\r\n    \r\n    \r\n    // - in relation to the ETH held by this contract\r\n    uint public balance = address(this).balance;\r\n    \r\n    // - in relation to the emergency functioning of this contract\r\n    bool private stopped = false;\r\n\r\n    \r\n    // circuit breaker modifiers\r\n    modifier stopInEmergency {if (!stopped) _;}\r\n    modifier onlyInEmergency {if (stopped) _;}\r\n\r\n    constructor () public {\r\n    }\r\n    \r\n    function toggleContractActive() onlyOwner public {\r\n    stopped = !stopped;\r\n    }\r\n    \r\n    function change_cDAIAllocation(uint _numberPercentageValue) public onlyOwner {\r\n        require(_numberPercentageValue > 1 && _numberPercentageValue < 100);\r\n        ShortBTCAllocation = _numberPercentageValue;\r\n    }\r\n    \r\n    \r\n    // this function lets you deposit ETH into this wallet \r\n    function ETHMaximalistZAP() stopInEmergency payable public returns (bool) {\r\n        require(msg.value>10000000000000);\r\n        uint investment_amt = msg.value;\r\n        uint investAmt2ShortBTC = SafeMath.div(SafeMath.mul(investment_amt,ShortBTCAllocation), 100);\r\n        uint investAmt2c1xLongETH = SafeMath.sub(investment_amt, investAmt2ShortBTC);\r\n        require (SafeMath.sub(investment_amt,SafeMath.add(investAmt2ShortBTC, investAmt2c1xLongETH)) == 0);\r\n        Invest2Fulcrum1xShortBTCContract.LetsInvest2Fulcrum1xShortBTC.value(investAmt2ShortBTC)(msg.sender);\r\n        Invest2FulcrumContract.LetsInvest2Fulcrum.value(investAmt2c1xLongETH)(msg.sender);\r\n        \r\n    }\r\n    // - this function lets you deposit ETH into this wallet\r\n    function depositETH() payable public onlyOwner returns (uint) {\r\n        balance += msg.value;\r\n    }\r\n    \r\n    // - fallback function let you / anyone send ETH to this wallet without the need to call any function\r\n    function() external payable {\r\n        if (msg.sender == owner) {\r\n            depositETH();\r\n        } else {\r\n            ETHMaximalistZAP();\r\n        }\r\n    }\r\n    \r\n    // - to withdraw any ETH balance sitting in the contract\r\n    function withdraw() onlyOwner public{\r\n        owner.transfer(address(this).balance);\r\n    }\r\n    \r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"toggleContractActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numberPercentageValue\",\"type\":\"uint256\"}],\"name\":\"change_cDAIAllocation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Invest2Fulcrum1xShortBTCContract\",\"outputs\":[{\"internalType\":\"contract Invest2Fulcrum1xShortBTC\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ShortBTCAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ETHMaximalistZAP\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Invest2FulcrumContract\",\"outputs\":[{\"internalType\":\"contract Invest2Fulcrum\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"ETHMaximalist","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU GPLv2","SwarmSource":"bzzr://d6469b7583de25ff390675a1f1095d2682cb89d1878ac23cf79444b97d6663f6"}]}