{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/interfaces/IERC20Token.sol\r\n\r\npragma solidity ^0.4.23;\r\n\r\n/*\r\n    ERC20 Standard Token interface\r\n*/\r\ncontract IERC20Token {\r\n    // these functions aren't abstract since the compiler emits automatically generated getter functions as external\r\n    function name() public view returns (string) {}\r\n    function symbol() public view returns (string) {}\r\n    function decimals() public view returns (uint8) {}\r\n    function totalSupply() public view returns (uint256) {}\r\n    function balanceOf(address _owner) public view returns (uint256) { _owner; }\r\n    function allowance(address _owner, address _spender) public view returns (uint256) { _owner; _spender; }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n}\r\n\r\n// File: contracts/interfaces/IContractRegistry.sol\r\n\r\npragma solidity ^0.4.23;\r\n\r\n/*\r\n    Contract Registry interface\r\n*/\r\ncontract IContractRegistry {\r\n    function addressOf(bytes32 _contractName) public view returns (address);\r\n}\r\n\r\n// File: contracts/interfaces/IVault.sol\r\n\r\npragma solidity ^0.4.23;\r\n\r\n\r\n\r\ncontract IVault {\r\n\r\n    function registry() public view returns (IContractRegistry);\r\n\r\n    function auctions(address _borrower) public view returns (address) { _borrower; }\r\n    function vaultExists(address _vault) public view returns (bool) { _vault; }\r\n    function totalBorrowed(address _vault) public view returns (uint256) { _vault; }\r\n    function rawBalanceOf(address _vault) public view returns (uint256) { _vault; }\r\n    function rawDebt(address _vault) public view returns (uint256) { _vault; }\r\n    function rawTotalBalance() public view returns (uint256);\r\n    function rawTotalDebt() public view returns (uint256);\r\n    function collateralBorrowedRatio() public view returns (uint256);\r\n    function amountMinted() public view returns (uint256);\r\n\r\n    function debtScalePrevious() public view returns (uint256);\r\n    function debtScaleTimestamp() public view returns (uint256);\r\n    function debtScaleRate() public view returns (int256);\r\n    function balScalePrevious() public view returns (uint256);\r\n    function balScaleTimestamp() public view returns (uint256);\r\n    function balScaleRate() public view returns (int256);\r\n\r\n    function liquidationRatio() public view returns (uint32);\r\n    function maxBorrowLTV() public view returns (uint32);\r\n\r\n    function borrowingEnabled() public view returns (bool);\r\n    function biddingTime() public view returns (uint);\r\n\r\n    function setType(bool _type) public;\r\n    function create(address _vault) public;\r\n    function setCollateralBorrowedRatio(uint _newRatio) public;\r\n    function setAmountMinted(uint _amountMinted) public;\r\n    function setLiquidationRatio(uint32 _liquidationRatio) public;\r\n    function setMaxBorrowLTV(uint32 _maxBorrowLTV) public;\r\n    function setDebtScalingRate(int256 _debtScalingRate) public;\r\n    function setBalanceScalingRate(int256 _balanceScalingRate) public;\r\n    function setBiddingTime(uint _biddingTime) public;\r\n    function setRawTotalDebt(uint _rawTotalDebt) public;\r\n    function setRawTotalBalance(uint _rawTotalBalance) public;\r\n    function setRawBalanceOf(address _borrower, uint _rawBalance) public;\r\n    function setRawDebt(address _borrower, uint _rawDebt) public;\r\n    function setTotalBorrowed(address _borrower, uint _totalBorrowed) public;\r\n    function debtScalingFactor() public view returns (uint256);\r\n    function balanceScalingFactor() public view returns (uint256);\r\n    function debtRawToActual(uint256 _raw) public view returns (uint256);\r\n    function debtActualToRaw(uint256 _actual) public view returns (uint256);\r\n    function balanceRawToActual(uint256 _raw) public view returns (uint256);\r\n    function balanceActualToRaw(uint256 _actual) public view returns (uint256);\r\n    function getVaults(address _vault, uint256 _balanceOf) public view returns(address[]);\r\n    function transferERC20Token(IERC20Token _token, address _to, uint256 _amount) public;\r\n    function oracleValue() public view returns(uint256);\r\n    function emitBorrow(address _borrower, uint256 _amount) public;\r\n    function emitRepay(address _borrower, uint256 _amount) public;\r\n    function emitDeposit(address _borrower, uint256 _amount) public;\r\n    function emitWithdraw(address _borrower, address _to, uint256 _amount) public;\r\n    function emitLiquidate(address _borrower) public;\r\n    function emitAuctionStarted(address _borrower) public;\r\n    function emitAuctionEnded(address _borrower, address _highestBidder, uint256 _highestBid) public;\r\n    function setAuctionAddress(address _borrower, address _auction) public;\r\n}\r\n\r\n// File: contracts/interfaces/IPegSettings.sol\r\n\r\npragma solidity ^0.4.23;\r\n\r\n\r\ncontract IPegSettings {\r\n\r\n    function authorized(address _address) public view returns (bool) { _address; }\r\n\r\n    function authorize(address _address, bool _auth) public;\r\n    function transferERC20Token(IERC20Token _token, address _to, uint256 _amount) public;\r\n\r\n}\r\n\r\n// File: contracts/interfaces/IPegOracle.sol\r\n\r\npragma solidity ^0.4.23;\r\n\r\ncontract IPegOracle {\r\n    function getValue() public view returns (uint256);\r\n}\r\n\r\n// File: contracts/library/SafeMath.sol\r\n\r\npragma solidity ^0.4.23;\r\n\r\nlibrary SafeMath {\r\n    function plus(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        uint256 c = _a + _b;\r\n        assert(c >= _a);\r\n        return c;\r\n    }\r\n\r\n    function plus(int256 _a, int256 _b) internal pure returns (int256) {\r\n        int256 c = _a + _b;\r\n        assert((_b >= 0 && c >= _a) || (_b < 0 && c < _a));\r\n        return c;\r\n    }\r\n\r\n    function minus(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        assert(_a >= _b);\r\n        return _a - _b;\r\n    }\r\n\r\n    function minus(int256 _a, int256 _b) internal pure returns (int256) {\r\n        int256 c = _a - _b;\r\n        assert((_b >= 0 && c <= _a) || (_b < 0 && c > _a));\r\n        return c;\r\n    }\r\n\r\n    function times(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = _a * _b;\r\n        assert(c / _a == _b);\r\n        return c;\r\n    }\r\n\r\n    function times(int256 _a, int256 _b) internal pure returns (int256) {\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n        int256 c = _a * _b;\r\n        assert(c / _a == _b);\r\n        return c;\r\n    }\r\n\r\n    function toInt256(uint256 _a) internal pure returns (int256) {\r\n        assert(_a <= 2 ** 255);\r\n        return int256(_a);\r\n    }\r\n\r\n    function toUint256(int256 _a) internal pure returns (uint256) {\r\n        assert(_a >= 0);\r\n        return uint256(_a);\r\n    }\r\n\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        return _a / _b;\r\n    }\r\n\r\n    function div(int256 _a, int256 _b) internal pure returns (int256) {\r\n        return _a / _b;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IOwned.sol\r\n\r\npragma solidity ^0.4.23;\r\n\r\n/*\r\n    Owned contract interface\r\n*/\r\ncontract IOwned {\r\n    // this function isn't abstract since the compiler emits automatically generated getter functions as external\r\n    function owner() public view returns (address) {}\r\n\r\n    function transferOwnership(address _newOwner) public;\r\n    function acceptOwnership() public;\r\n    function setOwner(address _newOwner) public;\r\n}\r\n\r\n// File: contracts/interfaces/ISmartToken.sol\r\n\r\npragma solidity ^0.4.23;\r\n\r\n\r\n\r\n/*\r\n    Smart Token interface\r\n*/\r\ncontract ISmartToken is IOwned, IERC20Token {\r\n    function disableTransfers(bool _disable) public;\r\n    function issue(address _to, uint256 _amount) public;\r\n    function destroy(address _from, uint256 _amount) public;\r\n}\r\n\r\n// File: contracts/interfaces/IStableToken.sol\r\n\r\npragma solidity ^0.4.23;\r\n\r\n\r\n\r\ncontract IStableToken is ISmartToken {\r\n\r\n    function transferERC20Token(IERC20Token _token, address _to, uint256 _amount) public;\r\n\r\n}\r\n\r\n// File: contracts/interfaces/IPegLogic.sol\r\n\r\npragma solidity ^0.4.23;\r\n\r\n\r\n\r\n\r\ncontract IPegLogic {\r\n\r\n    function adjustCollateralBorrowingRate() public;\r\n    function isInsolvent(IVault _vault, address _borrower) public view returns (bool);\r\n    function actualDebt(IVault _vault, address _address) public view returns(uint256);\r\n    function excessCollateral(IVault _vault, address _borrower) public view returns (int256);\r\n    function availableCredit(IVault _vault, address _borrower) public view returns (int256);\r\n    function getCollateralToken(IVault _vault) public view returns(IERC20Token);\r\n    function getDebtToken(IVault _vault) public view returns(IStableToken);\r\n\r\n}\r\n\r\n// File: contracts/interfaces/IAuctionActions.sol\r\n\r\npragma solidity ^0.4.23;\r\n\r\n\r\ncontract IAuctionActions {\r\n\r\n    function startAuction(IVault _vault, address _borrower) public;\r\n    function endAuction(IVault _vault, address _borrower) public;\r\n\r\n}\r\n\r\n// File: contracts/ContractIds.sol\r\n\r\npragma solidity ^0.4.23;\r\n\r\ncontract ContractIds {\r\n    bytes32 public constant STABLE_TOKEN = \"StableToken\";\r\n    bytes32 public constant COLLATERAL_TOKEN = \"CollateralToken\";\r\n\r\n    bytes32 public constant PEGUSD_TOKEN = \"PEGUSD\";\r\n\r\n    bytes32 public constant VAULT_A = \"VaultA\";\r\n    bytes32 public constant VAULT_B = \"VaultB\";\r\n\r\n    bytes32 public constant PEG_LOGIC = \"PegLogic\";\r\n    bytes32 public constant PEG_LOGIC_ACTIONS = \"LogicActions\";\r\n    bytes32 public constant AUCTION_ACTIONS = \"AuctionActions\";\r\n\r\n    bytes32 public constant PEG_SETTINGS = \"PegSettings\";\r\n    bytes32 public constant ORACLE = \"Oracle\";\r\n    bytes32 public constant FEE_RECIPIENT = \"StabilityFeeRecipient\";\r\n}\r\n\r\n// File: contracts/Helpers.sol\r\n\r\npragma solidity ^0.4.23;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Helpers is ContractIds {\r\n\r\n    IContractRegistry public registry;\r\n\r\n    constructor(IContractRegistry _registry) public {\r\n        registry = _registry;\r\n    }\r\n\r\n    modifier authOnly() {\r\n        require(settings().authorized(msg.sender));\r\n        _;\r\n    }\r\n\r\n    modifier validate(IVault _vault, address _borrower) {\r\n        require(address(_vault) == registry.addressOf(ContractIds.VAULT_A) || address(_vault) == registry.addressOf(ContractIds.VAULT_B));\r\n        _vault.create(_borrower);\r\n        _;\r\n    }\r\n\r\n    function stableToken() internal returns(IStableToken) {\r\n        return IStableToken(registry.addressOf(ContractIds.STABLE_TOKEN));\r\n    }\r\n\r\n    function collateralToken() internal returns(IERC20Token) {\r\n        return IERC20Token(registry.addressOf(ContractIds.COLLATERAL_TOKEN));\r\n    }\r\n\r\n    function PEGUSD() internal returns(IERC20Token) {\r\n        return IERC20Token(registry.addressOf(ContractIds.PEGUSD_TOKEN));\r\n    }\r\n\r\n    function vaultA() internal returns(IVault) {\r\n        return IVault(registry.addressOf(ContractIds.VAULT_A));\r\n    }\r\n\r\n    function vaultB() internal returns(IVault) {\r\n        return IVault(registry.addressOf(ContractIds.VAULT_B));\r\n    }\r\n\r\n    function oracle() internal returns(IPegOracle) {\r\n        return IPegOracle(registry.addressOf(ContractIds.ORACLE));\r\n    }\r\n\r\n    function settings() internal returns(IPegSettings) {\r\n        return IPegSettings(registry.addressOf(ContractIds.PEG_SETTINGS));\r\n    }\r\n\r\n    function pegLogic() internal returns(IPegLogic) {\r\n        return IPegLogic(registry.addressOf(ContractIds.PEG_LOGIC));\r\n    }\r\n\r\n    function auctionActions() internal returns(IAuctionActions) {\r\n        return IAuctionActions(registry.addressOf(ContractIds.AUCTION_ACTIONS));\r\n    }\r\n\r\n    function transferERC20Token(IERC20Token _token, address _to, uint256 _amount) public authOnly {\r\n        _token.transfer(_to, _amount);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/interfaces/ILogicActions.sol\r\n\r\npragma solidity ^0.4.23;\r\n\r\n\r\ncontract ILogicActions {\r\n\r\n    function deposit(IVault _vault, uint256 _amount) public;\r\n    function withdraw(IVault _vault, address _to, uint256 _amount) public;\r\n    function borrow(IVault _vault, uint256 _amount) public;\r\n    function repay(IVault _vault, address _borrower, uint256 _amount) public;\r\n    function repayAuction(IVault _vault, address _borrower, uint256 _amount) public;\r\n    function repayAll(IVault _vault, address _borrower) public;\r\n\r\n}\r\n\r\n// File: contracts/Auction.sol\r\n\r\npragma solidity ^0.4.23;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Auction is ContractIds {\r\n    address public borrower;\r\n    IVault public vault;\r\n    IContractRegistry public registry;\r\n    uint public auctionEndTime;\r\n    uint public auctionStartTime;\r\n    address public highestBidder;\r\n    uint256 public highestBid;\r\n    uint256 public lowestBidRelay;\r\n    uint256 public amountToPay;\r\n    bool ended;\r\n\r\n    event HighestBidIncreased(address indexed _bidder, uint256 _amount, uint256 _amountRelay);\r\n\r\n    constructor(IContractRegistry _registry, IVault _vault, address _borrower) public {\r\n        registry = _registry;\r\n        borrower = _borrower;\r\n        vault = _vault;\r\n    }\r\n\r\n    modifier authOnly() {\r\n        require(IPegSettings(registry.addressOf(ContractIds.PEG_SETTINGS)).authorized(msg.sender), \"Unauthorized\");\r\n        _;\r\n    }\r\n\r\n    function validateBid(uint256 _amount, uint256 _amountRelay) internal view {\r\n        if(auctionEndTime > 0)\r\n            require(now <= auctionEndTime, \"Auction has already ended\");\r\n        else {\r\n            auctionStartTime = now;\r\n            auctionEndTime = now + vault.biddingTime();\r\n        }\r\n        require(_amount == 0 || _amountRelay == 0, \"Can't refund collateral and mint relay tokens\");\r\n        if(highestBidder != address(0))\r\n            require(_amount > highestBid || _amountRelay < lowestBidRelay, \"There already is a higher bid\");\r\n        require(vault.balanceActualToRaw(_amount) <= vault.rawBalanceOf(address(this)), \"Can't refund more than 100%\");\r\n    }\r\n\r\n    function bid(uint256 _amount, uint256 _amountRelay) public {\r\n        validateBid(_amount, _amountRelay);\r\n        if(_amountRelay > 0)\r\n            auctionEndTime = auctionStartTime + 172800; // extends to 48 hours auction\r\n        IPegLogic pegLogic = IPegLogic(registry.addressOf(ContractIds.PEG_LOGIC));\r\n        if(amountToPay == 0) amountToPay = pegLogic.actualDebt(vault, address(this));\r\n        IERC20Token token = pegLogic.getDebtToken(vault);\r\n        token.transferFrom(msg.sender, address(this), amountToPay);\r\n        if (highestBidder != address(0)) {\r\n            require(token.transfer(highestBidder, amountToPay), \"Error transferring token to last highest bidder.\");\r\n        } else {\r\n            ILogicActions logicActions = ILogicActions(registry.addressOf(ContractIds.PEG_LOGIC_ACTIONS));\r\n            if (address(vault) == registry.addressOf(ContractIds.VAULT_B))\r\n                token.approve(address(logicActions), amountToPay);\r\n            logicActions.repayAuction(vault, borrower, amountToPay);\r\n        }\r\n        highestBidder = msg.sender;\r\n        highestBid = _amount;\r\n        lowestBidRelay = _amountRelay;\r\n        emit HighestBidIncreased(msg.sender, _amount, _amountRelay);\r\n    }\r\n\r\n    function auctionEnd() public authOnly {\r\n        require(auctionEndTime > 0, \"Bidding has not started yet\");\r\n        require(now >= auctionEndTime, \"Auction end time is in the future\");\r\n        require(!ended, \"Auction already ended\");\r\n        ended = true;\r\n    }\r\n\r\n    function hasEnded() public view returns (bool) {\r\n        return auctionEndTime > 0 && now >= auctionEndTime;\r\n    }\r\n\r\n    function transferERC20Token(IERC20Token _token, address _to, uint256 _amount) public authOnly {\r\n        _token.transfer(_to, _amount);\r\n    }\r\n}\r\n\r\n// File: contracts/Vault.sol\r\n\r\npragma solidity ^0.4.23;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Vault is Helpers {\r\n    using SafeMath for uint256;\r\n    using SafeMath for int256;\r\n\r\n    IContractRegistry public registry;\r\n\r\n    address[] public vaults;\r\n    mapping (address => address) public auctions;\r\n    mapping (address => bool) public vaultExists;\r\n    mapping (address => uint256) public totalBorrowed;\r\n    mapping (address => uint256) public rawBalanceOf;\r\n    mapping (address => uint256) public rawDebt;\r\n    uint256 public rawTotalBalance;\r\n    uint256 public rawTotalDebt;\r\n    uint256 public collateralBorrowedRatio;\r\n    uint256 public amountMinted;\r\n\r\n    uint256 public debtScalePrevious = 1e18;\r\n    uint256 public debtScaleTimestamp = now;\r\n    int256 public debtScaleRate;\r\n\r\n    uint256 public balScalePrevious = 1e18;\r\n    uint256 public balScaleTimestamp = now;\r\n    int256 public balScaleRate;\r\n\r\n    uint32 public liquidationRatio = 850000;\r\n    uint32 public maxBorrowLTV = 500000;\r\n\r\n    bool public borrowingEnabled = true;\r\n\r\n    uint public biddingTime = 10800; // 3 hours\r\n\r\n    event AmountMinted(uint256 _old, uint256 _new);\r\n    event Create(address indexed _borrower);\r\n    event DebtScalingRateUpdate(int _old, int _new);\r\n    event BalanceScalingRateUpdate(int _old, int _new);\r\n    event CollateralBorrowedRatio(uint _old, uint _new);\r\n    event LiquidationRatioUpdate(int _old, int _new);\r\n    event MaxBorrowUpdate(uint32 _old, uint32 _new);\r\n    event Deposit(address indexed _borrower, uint256 _amount);\r\n    event Liquidate(address indexed _borrower);\r\n    event Borrow(address indexed _borrower, uint256 _amount);\r\n    event Repay(address indexed _borrower, uint256 _amount);\r\n    event Withdraw(address indexed _borrower, address indexed _to, uint256 _amount);\r\n    event AuctionStarted(address indexed _borrower);\r\n    event AuctionEnded(address indexed _borrower, address indexed _highestBidder, uint256 _highestBid);\r\n\r\n    constructor(IContractRegistry _registry) public Helpers(_registry) {\r\n        registry = _registry;\r\n    }\r\n\r\n    function setBorrowingEnabled(bool _enabled) public authOnly {\r\n        borrowingEnabled = _enabled;\r\n    }\r\n\r\n    function create(address _borrower) public authOnly {\r\n        if(vaultExists[_borrower] == false) {\r\n            vaults.push(_borrower);\r\n            vaultExists[_borrower] = true;\r\n            emit Create(_borrower);\r\n        }\r\n    }\r\n\r\n    function setCollateralBorrowedRatio(uint _newRatio) public authOnly {\r\n        emit CollateralBorrowedRatio(collateralBorrowedRatio, _newRatio);\r\n        collateralBorrowedRatio = _newRatio;\r\n    }\r\n\r\n    function setAmountMinted(uint _amountMinted) public authOnly {\r\n        emit AmountMinted(amountMinted, _amountMinted);\r\n        amountMinted = _amountMinted;\r\n    }\r\n\r\n    function setLiquidationRatio(uint32 _liquidationRatio) public authOnly {\r\n        emit LiquidationRatioUpdate(liquidationRatio, _liquidationRatio);\r\n        liquidationRatio = _liquidationRatio;\r\n    }\r\n\r\n    function setMaxBorrowLTV(uint32 _maxBorrowLTV) public authOnly {\r\n        emit MaxBorrowUpdate(maxBorrowLTV, _maxBorrowLTV);\r\n        maxBorrowLTV = _maxBorrowLTV;\r\n    }\r\n\r\n    function setDebtScalingRate(int256 _debtScalingRate) public authOnly {\r\n        emit DebtScalingRateUpdate(debtScaleRate, _debtScalingRate);\r\n        debtScalePrevious = debtScalingFactor();\r\n        debtScaleTimestamp = now;\r\n        debtScaleRate = _debtScalingRate;\r\n    }\r\n\r\n    function setBalanceScalingRate(int256 _balanceScalingRate) public authOnly {\r\n        emit BalanceScalingRateUpdate(balScaleRate, _balanceScalingRate);\r\n        balScalePrevious = balanceScalingFactor();\r\n        balScaleTimestamp = now;\r\n        balScaleRate = _balanceScalingRate;\r\n    }\r\n\r\n    function setBiddingTime(uint _biddingTime) public authOnly {\r\n        biddingTime = _biddingTime;\r\n    }\r\n\r\n    function setRawTotalBalance(uint _rawTotalBalance) public authOnly {\r\n        rawTotalBalance = _rawTotalBalance;\r\n    }\r\n\r\n    function setRawTotalDebt(uint _rawTotalDebt) public authOnly {\r\n        rawTotalDebt = _rawTotalDebt;\r\n    }\r\n\r\n    function setRawBalanceOf(address _borrower, uint _rawBalance) public authOnly {\r\n        rawBalanceOf[_borrower] = _rawBalance;\r\n    }\r\n\r\n    function setRawDebt(address _borrower, uint _rawDebt) public authOnly {\r\n        rawDebt[_borrower] = _rawDebt;\r\n    }\r\n\r\n    function setTotalBorrowed(address _borrower, uint _totalBorrowed) public authOnly {\r\n        totalBorrowed[_borrower] = _totalBorrowed;\r\n    }\r\n\r\n    function debtScalingFactor() public view returns (uint) {\r\n        return uint(int(debtScalePrevious).plus(debtScaleRate.times(int(now.minus(debtScaleTimestamp)))));\r\n    }\r\n\r\n    function balanceScalingFactor() public view returns (uint) {\r\n        return uint(int(balScalePrevious).plus(balScaleRate.times(int(now.minus(balScaleTimestamp)))));\r\n    }\r\n\r\n    function debtRawToActual(uint256 _raw) public view returns(uint256) {\r\n        return _raw.times(1e18) / debtScalingFactor();\r\n    }\r\n\r\n    function debtActualToRaw(uint256 _actual) public view returns(uint256) {\r\n        return _actual.times(debtScalingFactor()) / 1e18;\r\n    }\r\n\r\n    function balanceRawToActual(uint256 _raw) public view returns(uint256) {\r\n        return _raw.times(1e18) / balanceScalingFactor();\r\n    }\r\n\r\n    function balanceActualToRaw(uint256 _actual) public view returns(uint256) {\r\n        return _actual.times(balanceScalingFactor()) / 1e18;\r\n    }\r\n\r\n    function getVaults() public view returns (address[]) {\r\n        return vaults;\r\n    }\r\n\r\n    function transferERC20Token(IERC20Token _token, address _to, uint256 _amount) public authOnly {\r\n        _token.transfer(_to, _amount);\r\n    }\r\n\r\n    function oracleValue() public view returns(uint) {\r\n        if (address(this) == address(vaultA())) {\r\n            return oracle().getValue();\r\n        } else {\r\n            return 1e12 / oracle().getValue();\r\n        }\r\n    }\r\n\r\n    function emitRepay(address _borrower, uint256 _amount) public authOnly {\r\n        emit Repay(_borrower, _amount);\r\n    }\r\n\r\n    function emitDeposit(address _borrower, uint256 _amount) public authOnly {\r\n        emit Deposit(_borrower, _amount);\r\n    }\r\n\r\n    function emitWithdraw(address _borrower, address _to, uint256 _amount) public authOnly {\r\n        emit Withdraw(_borrower, _to, _amount);\r\n    }\r\n\r\n    function emitBorrow(address _borrower, uint256 _amount) public authOnly {\r\n        emit Borrow(_borrower, _amount);\r\n    }\r\n\r\n    function emitLiquidate(address _borrower) public authOnly {\r\n        emit Liquidate(_borrower);\r\n    }\r\n\r\n    function emitAuctionStarted(address _borrower) public authOnly {\r\n        emit AuctionStarted(_borrower);\r\n    }\r\n\r\n    function emitAuctionEnded(address _borrower, address _highestBidder, uint256 _highestBid) public authOnly {\r\n        emit AuctionEnded(_borrower, _highestBidder, _highestBid);\r\n    }\r\n\r\n    function setAuctionAddress(address _borrower, address _auction) public authOnly {\r\n        auctions[_borrower] = _auction;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_rawTotalBalance\",\"type\":\"uint256\"}],\"name\":\"setRawTotalBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_actual\",\"type\":\"uint256\"}],\"name\":\"debtActualToRaw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_borrower\",\"type\":\"address\"},{\"name\":\"_highestBidder\",\"type\":\"address\"},{\"name\":\"_highestBid\",\"type\":\"uint256\"}],\"name\":\"emitAuctionEnded\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"debtScalePrevious\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VAULT_B\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"rawBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PEG_LOGIC_ACTIONS\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_borrower\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emitRepay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaultExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquidationRatio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceScalingFactor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"auctions\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"debtScaleTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collateralBorrowedRatio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_borrower\",\"type\":\"address\"},{\"name\":\"_totalBorrowed\",\"type\":\"uint256\"}],\"name\":\"setTotalBorrowed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_borrower\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emitDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracleValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balScaleRate\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ORACLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rawTotalDebt\",\"type\":\"uint256\"}],\"name\":\"setRawTotalDebt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_borrower\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emitBorrow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_raw\",\"type\":\"uint256\"}],\"name\":\"debtRawToActual\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_biddingTime\",\"type\":\"uint256\"}],\"name\":\"setBiddingTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_borrower\",\"type\":\"address\"},{\"name\":\"_rawBalance\",\"type\":\"uint256\"}],\"name\":\"setRawBalanceOf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"debtScaleRate\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVaults\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"emitAuctionStarted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VAULT_A\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STABLE_TOKEN\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountMinted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"emitLiquidate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaults\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferERC20Token\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AUCTION_ACTIONS\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"debtScalingFactor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"create\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"borrowingEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"rawDebt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_borrower\",\"type\":\"address\"},{\"name\":\"_auction\",\"type\":\"address\"}],\"name\":\"setAuctionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PEG_SETTINGS\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountMinted\",\"type\":\"uint256\"}],\"name\":\"setAmountMinted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_debtScalingRate\",\"type\":\"int256\"}],\"name\":\"setDebtScalingRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balScaleTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balScalePrevious\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxBorrowLTV\",\"type\":\"uint32\"}],\"name\":\"setMaxBorrowLTV\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_balanceScalingRate\",\"type\":\"int256\"}],\"name\":\"setBalanceScalingRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"biddingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRatio\",\"type\":\"uint256\"}],\"name\":\"setCollateralBorrowedRatio\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rawTotalBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PEG_LOGIC\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalBorrowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_actual\",\"type\":\"uint256\"}],\"name\":\"balanceActualToRaw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_liquidationRatio\",\"type\":\"uint32\"}],\"name\":\"setLiquidationRatio\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rawTotalDebt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FEE_RECIPIENT\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_borrower\",\"type\":\"address\"},{\"name\":\"_rawDebt\",\"type\":\"uint256\"}],\"name\":\"setRawDebt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setBorrowingEnabled\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_borrower\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emitWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBorrowLTV\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COLLATERAL_TOKEN\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_raw\",\"type\":\"uint256\"}],\"name\":\"balanceRawToActual\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PEGUSD_TOKEN\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_old\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"AmountMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"Create\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_old\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"_new\",\"type\":\"int256\"}],\"name\":\"DebtScalingRateUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_old\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"_new\",\"type\":\"int256\"}],\"name\":\"BalanceScalingRateUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_old\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"CollateralBorrowedRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_old\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"_new\",\"type\":\"int256\"}],\"name\":\"LiquidationRatioUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_old\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"_new\",\"type\":\"uint32\"}],\"name\":\"MaxBorrowUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"AuctionStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_highestBidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_highestBid\",\"type\":\"uint256\"}],\"name\":\"AuctionEnded\",\"type\":\"event\"}]","ContractName":"Vault","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e68ebda2488c213cf4ba25a7a7da179f96ce0baf","Library":"","SwarmSource":"bzzr://c1397b69eaa69a4dcce4ff110591e0938d7a8df3dfefe4c9895a77106340872c"}]}