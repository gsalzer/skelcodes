{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.11;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable {\r\n    \r\n    address private _owner;\r\n    \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() public {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n    \r\n    modifier onlyOwner {\r\n        require(msg.sender == _owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"New owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n    \r\n    function owner() public view returns(address) {\r\n        return _owner;\r\n    }\r\n}\r\n\r\n\r\ncontract Whitelist is Ownable {\r\n    \r\n    mapping(address => bool) private _whitelist;\r\n\r\n    event WhitelistedAddressAdded(address addr);\r\n    event WhitelistedAddressRemoved(address addr);\r\n    \r\n    constructor() public {\r\n        _whitelist[owner()] = true;\r\n    }\r\n\r\n    modifier onlyWhitelisted() {\r\n        require(_whitelist[msg.sender]);\r\n        _;\r\n        \r\n    }\r\n  \r\n    function addAddressToWhitelist(address _addr) onlyOwner public returns(bool) {\r\n        if (!_whitelist[_addr]) {\r\n            _whitelist[_addr] = true;\r\n            emit WhitelistedAddressAdded(_addr);\r\n            return true; \r\n        }\r\n    }\r\n\r\n    function removeAddressFromWhitelist(address _addr) onlyOwner public returns(bool) {\r\n        require(_addr != owner());\r\n        if (_whitelist[_addr]) {\r\n            _whitelist[_addr] = false;\r\n            emit WhitelistedAddressRemoved(_addr);\r\n            return true;\r\n        }\r\n    }\r\n    \r\n    function whitelist(address _addr) public view returns (bool) {\r\n        return _whitelist[_addr];\r\n    }\r\n}\r\n\r\n\r\ncontract Allowed is Whitelist {\r\n    \r\n    mapping(address => bool) private _allowed;\r\n\r\n    event Allow(address addr);\r\n    event Disallow(address addr);\r\n\r\n    modifier onlyAllowed(address _buyer) {\r\n        require(_allowed[msg.sender] && _allowed[_buyer]);\r\n        _;\r\n        \r\n    }\r\n  \r\n    function allow(address _addr) onlyWhitelisted public returns(bool) {\r\n        if (!_allowed[_addr]) {\r\n            _allowed[_addr] = true;\r\n            emit Allow(_addr);\r\n            return true; \r\n        }\r\n    }\r\n\r\n    function disallow(address _addr) onlyWhitelisted public returns(bool) {\r\n        if (_allowed[_addr]) {\r\n            _allowed[_addr] = false;\r\n            emit Disallow(_addr);\r\n            return true;\r\n        }\r\n    }\r\n    \r\n    function allowed(address _addr) public view returns (bool) {\r\n        return _allowed[_addr];\r\n    }\r\n}\r\n\r\n\r\ninterface ECOSCU {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n\r\ncontract ECO is Allowed {\r\n    using SafeMath for uint256;\r\n    \r\n    ECOSCU private ECOSCU_token = ECOSCU(0xFD1ccd0f8FABAB9B5b81173De82DE4A1566aC53f);\r\n    \r\n    struct Deal {\r\n        address seller;\r\n        address buyer;\r\n        uint256 securityDeposit;\r\n        uint256 dealAmount;\r\n        string data;\r\n    }\r\n    \r\n    uint256 private _dealIdCounter;\r\n    mapping (uint256 => Deal) private _Deals;\r\n    mapping (uint256 => bytes32 []) private _Docs;\r\n    mapping (uint256 => uint) private _Penalties;\r\n    mapping (uint256 => bool) private _IsDealCancelled;\r\n    mapping (uint256 => bool) private _IsDealCompleted;\r\n    \r\n    event AddDeal(uint256 indexed dealId, address indexed seller, address indexed buyer, uint256  securityDeposit, uint256 dealAmount, string data, uint256 fee);\r\n    event AddDocs(uint256 indexed dealId, bytes32 [] docs);\r\n    event CancelDeal(uint256 indexed dealId);\r\n    event ImposePenalty(uint256 indexed dealId, uint256 penaltyAmount);\r\n    event CompleteDeal(uint256 indexed dealId);\r\n    \r\n    modifier isSeller(uint256 _dealId) {\r\n        require(_Deals[_dealId].seller == msg.sender, 'You do not have access');\r\n        _;\r\n    }\r\n    \r\n    modifier isBuyerOrSeller(uint256 _dealId) {\r\n        require(_Deals[_dealId].seller == msg.sender || _Deals[_dealId].buyer == msg.sender, 'You do not have access');\r\n        _;\r\n    }\r\n    \r\n    modifier checkDealStatus(uint256 _dealId) {\r\n        require(!_IsDealCompleted[_dealId], 'Deal is completed');\r\n        _;\r\n    }\r\n       \r\n    function deal(uint256 dealAmount, address buyer, string memory data, uint securityDeposit, uint fee) public onlyAllowed(buyer) onlyAllowed(msg.sender) returns(bool) {\r\n        _Deals[_dealIdCounter] = Deal(msg.sender, buyer, securityDeposit, dealAmount, data);\r\n        require(ECOSCU_token.transferFrom(msg.sender, owner(), fee));\r\n        require(ECOSCU_token.transferFrom(msg.sender, address(this), securityDeposit));\r\n        require(ECOSCU_token.transferFrom(buyer, owner(), fee));\r\n        require(ECOSCU_token.transferFrom(buyer, address(this), dealAmount));\r\n        emit AddDeal(_dealIdCounter, msg.sender, buyer, securityDeposit, dealAmount, data, fee);\r\n        _dealIdCounter++;\r\n        return true;\r\n    }\r\n    \r\n    function addDocs(uint256 dealId, bytes32 [] memory docs) public checkDealStatus(dealId) isBuyerOrSeller(dealId) returns(bool) {\r\n        for(uint256 i = 0; i < docs.length; i++) {\r\n            _Docs[dealId].push(docs[i]);\r\n        }\r\n        emit AddDocs(dealId, docs);\r\n        return true;\r\n    }\r\n    \r\n    function cancelDeal(uint256 dealId) isSeller(dealId) public checkDealStatus(dealId) returns(bool) {\r\n        uint256 _securityDeposit = _Deals[dealId].securityDeposit;\r\n        address _buyer = _Deals[dealId].buyer;\r\n        uint256 _dealAmount =  _Deals[dealId].dealAmount;\r\n        ECOSCU_token.transfer(_buyer, (_securityDeposit.add(_dealAmount)));\r\n        _IsDealCancelled[dealId] = true;\r\n        _IsDealCompleted[dealId] = true;\r\n        emit CancelDeal(dealId);\r\n        return true;\r\n        \r\n    }\r\n    \r\n    function imposePenalty(uint256 dealId, uint256 penaltyAmount) public checkDealStatus(dealId) onlyWhitelisted returns(bool) {\r\n        _Penalties[dealId] = penaltyAmount;\r\n        emit ImposePenalty(dealId, penaltyAmount);\r\n        return true;\r\n    }\r\n    \r\n    function completeDeal (uint256 dealId) public checkDealStatus(dealId) onlyWhitelisted returns(bool) {\r\n        address _seller = _Deals[dealId].seller;\r\n        uint256 _securityDeposit = _Deals[dealId].securityDeposit;\r\n        uint256 _penaltyAmount = _Penalties[dealId];\r\n        uint256 _dealAmount = _Deals[dealId].dealAmount;\r\n        require(ECOSCU_token.transfer(_seller, (_dealAmount.add(_securityDeposit).sub(_penaltyAmount))));\r\n        if(_penaltyAmount > 0) {\r\n            address _buyer = _Deals[dealId].buyer;\r\n            ECOSCU_token.transfer(_buyer, _penaltyAmount);\r\n        }\r\n        _IsDealCompleted[dealId] = true;\r\n        emit CompleteDeal(dealId);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dealAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"securityDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"deal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeAddressFromWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dealId\",\"type\":\"uint256\"}],\"name\":\"cancelDeal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addAddressToWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dealId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penaltyAmount\",\"type\":\"uint256\"}],\"name\":\"imposePenalty\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dealId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"docs\",\"type\":\"bytes32[]\"}],\"name\":\"addDocs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"disallow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dealId\",\"type\":\"uint256\"}],\"name\":\"completeDeal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"allow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dealId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"securityDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dealAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"AddDeal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dealId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"docs\",\"type\":\"bytes32[]\"}],\"name\":\"AddDocs\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dealId\",\"type\":\"uint256\"}],\"name\":\"CancelDeal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dealId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"penaltyAmount\",\"type\":\"uint256\"}],\"name\":\"ImposePenalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dealId\",\"type\":\"uint256\"}],\"name\":\"CompleteDeal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"Allow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"Disallow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"WhitelistedAddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"WhitelistedAddressRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ECO","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://72e816d92c92b7ebee8b3c5633419d9c1206d798a286bfb4137d209922ea6657"}]}