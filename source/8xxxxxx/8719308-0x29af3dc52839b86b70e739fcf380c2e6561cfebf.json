{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.5.10;\r\n\r\nlibrary SafeMath {\r\n  function add(uint a, uint b) internal pure returns (uint c) {\r\n    c = a + b;\r\n    require(c >= a);\r\n  }\r\n  function sub(uint a, uint b) internal pure returns (uint c) {\r\n    require(b <= a);\r\n    c = a - b;\r\n  }\r\n  function mul(uint a, uint b) internal pure returns (uint c) {\r\n    c = a * b;\r\n    require(a == 0 || c / a == b);\r\n  }\r\n  function div(uint a, uint b) internal pure returns (uint c) {\r\n    require(b > 0);\r\n    c = a / b;\r\n  }\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Owned {\r\n  address public owner;\r\n  address public newOwner;\r\n\r\n  event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    newOwner = _newOwner;\r\n  }\r\n  function acceptOwnership() public {\r\n    require(msg.sender == newOwner);\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n    newOwner = address(0);\r\n  }\r\n}\r\n\r\ncontract ShittyDice is Owned {\r\n    using SafeMath for uint;\r\n\r\n    event playerRoll(address player, uint256 amount, uint256 outcome);\r\n    event playerWithdrawal(address player, uint256 amount);\r\n    event playerDeposit(address player, uint256 amount);\r\n\r\n    struct sidestruct {\r\n        bool win;\r\n        uint256 m;\r\n        uint256 d;\r\n    }\r\n\r\n    uint256 sides;\r\n\r\n    mapping(uint256 => sidestruct) sideoutcome;\r\n    mapping(address => uint256) balance;\r\n\r\n    uint256 seed;\r\n\r\n    IERC20 SHIT = IERC20(0xaa7FB1c8cE6F18d4fD4Aabb61A2193d4D441c54F);\r\n\r\n    //PLAYER FUNCTIONS\r\n    function Roll(uint256 amount) public {\r\n        require(amount <= balance[msg.sender]);\r\n        require(balance[address(this)] >= amount * 5);\r\n        uint256 _rnum = Random() % sides + 1;\r\n\r\n        if (sideoutcome[_rnum].win == true) {\r\n            balance[msg.sender] = balance[msg.sender].add(amount * sideoutcome[_rnum].m / sideoutcome[_rnum].d);\r\n            balance[address(this)] = balance[address(this)].sub(amount * sideoutcome[_rnum].m / sideoutcome[_rnum].d);\r\n        }\r\n        else {\r\n            balance[msg.sender] = balance[msg.sender].sub(amount * sideoutcome[_rnum].m / sideoutcome[_rnum].d);\r\n            balance[address(this)] = balance[address(this)].add(amount * sideoutcome[_rnum].m / sideoutcome[_rnum].d);\r\n        }\r\n        emit playerRoll(msg.sender, amount, _rnum);\r\n    }\r\n\r\n    function deposit(uint256 amount) public {\r\n        SHIT.transferFrom(msg.sender, address(this), amount);\r\n        balance[msg.sender] = balance[msg.sender].add(amount);\r\n        emit playerDeposit(msg.sender, amount);\r\n    }\r\n\r\n    function withdrawal(uint256 amount) public {\r\n        require(balance[msg.sender] >= amount);\r\n        balance[msg.sender] = balance[msg.sender].sub(amount);\r\n        SHIT.transfer(msg.sender, amount);\r\n        emit playerWithdrawal(msg.sender, amount);\r\n    }\r\n    //VIEW FUNCTIONS\r\n    function viewbal(address _addr) public view returns(uint256){\r\n        return(balance[_addr]);\r\n    }\r\n    //INTERNAL FUNCTIONS\r\n    function Random() internal returns(uint256) {\r\n        uint256 _seed = uint256(keccak256(abi.encodePacked(seed, msg.sender, block.timestamp, block.difficulty)));\r\n        seed = _seed;\r\n        return(_seed);\r\n    }\r\n    //ADMIN ONLY FUNCTIONS\r\n    function setsides(uint256 _sides) public onlyOwner() {\r\n        sides = _sides;\r\n    }\r\n    function setsideoutcome(uint256 _side, bool _win, uint256 _m, uint256 _d) public onlyOwner() {\r\n        sideoutcome[_side].win = _win;\r\n        sideoutcome[_side].m = _m;\r\n        sideoutcome[_side].d = _d;\r\n    }\r\n    function admindeposit(IERC20 token, uint256 amount) public onlyOwner() {\r\n        token.transferFrom(msg.sender, address(this), amount);\r\n        if (token == SHIT) {\r\n            balance[address(this)] = balance[address(this)].add(amount);\r\n        }\r\n    }\r\n    function adminwithdrawal(IERC20 token, uint256 amount) public onlyOwner() {\r\n        if (token == SHIT) {\r\n            require(balance[address(this)] >= amount);\r\n            balance[address(this)] = balance[address(this)].sub(amount);\r\n        }\r\n        token.transfer(msg.sender, amount);\r\n    }\r\n    function clearETH() public onlyOwner() {\r\n      address payable _owner = msg.sender;\r\n      _owner.transfer(address(this).balance);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"clearETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sides\",\"type\":\"uint256\"}],\"name\":\"setsides\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"adminwithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Roll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"viewbal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"admindeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_side\",\"type\":\"uint256\"},{\"name\":\"_win\",\"type\":\"bool\"},{\"name\":\"_m\",\"type\":\"uint256\"},{\"name\":\"_d\",\"type\":\"uint256\"}],\"name\":\"setsideoutcome\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"outcome\",\"type\":\"uint256\"}],\"name\":\"playerRoll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"playerWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"playerDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ShittyDice","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://dc42d0e59088e0545f2e79f9409ab44b7bdc7952a113b0d1e539cbb4580f9c34"}]}