{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n    Visit RePrize.io to sign up!\r\n\r\n    Earn ETH in the most rewarding crypto MLM.\r\n    Win prizes each week!\r\n\r\n    Build your network and earn Ethereum from referrals\r\n    Collect guaranteed or weekly prizes: new TV, phones, money.\r\n\r\n    Tokens are your reward for influencing others and level upgrade.\r\n    \r\n    Exchange them for amazing prizes at any time.\r\n\r\n    Join our Telegram channel https://t.me/RePrize\r\n\r\n       ▄▓██▓▌▄▓     ▐▓▓▓▓▓▄   ▓▓▓▓▓▓  ▓▓▓▓▓▓▄  █▓▓▓▓▓▄   ▓▓▓  ▓▓▓▓▓▓▓▓  ▓▓▓▓▓▌\r\n     ▓▓     █▓▓     ▐▓▓  ▓▓▌  ▓▓▓     ▓▓▓ ▀▓▓▌ ▓▓▓ ▀▓▓▌  ▓▓▓     ▐▓▓▓   ▓▓▌\r\n    ▐▓        ▄▄    ▐▓▓▓▓▓▓   ▓▓▓▓▓▌  ▓▓▓▓▓▓▓  ▓▓▓▓▓▓▓   ▓▓▓    ▄▓▓▀    ▓▓▓▓▓\r\n    ▐▓        ▓▌    ▐▓▓ ▓▓▓   ▓▓▓     ▓▓▓▀▀    ▓▓▓▐▓▓▌   ▓▓▓   ▓▓▓      ▓▓▌\r\n      █▓▓▓▓▓▓▀      ▐▓▓  ▓▓▓  ▓▓▓▓▓▓  ▓▓▓      ▓▓▓  ▓▓▓  ▓▓▓ ▐▓▓▓▓▓▓▓▓  ▓▓▓▓▓▓\r\n        ▀▀▀\r\n*/\r\npragma solidity ^0.5.7;\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal pure returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\ncontract Ownable {\r\n\r\n  address owner;\r\n  address main_address;\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n    main_address = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, \"Only for owner\");\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address _owner) public onlyOwner {\r\n    owner = _owner;\r\n  }\r\n\r\n}\r\n\r\ncontract RePrize is Ownable {\r\n    \r\n    event Register(uint indexed _user, uint indexed _referrer, uint indexed _introducer, uint _time);\r\n    event Upgrade(uint indexed _user, uint _level, uint _price, uint _time);\r\n    event Payment(uint indexed _user, uint indexed _referrer, uint indexed _type, uint _level, uint _money, uint _time);\r\n    event Lost(uint indexed _sponsor, uint indexed _user, uint _level, uint _money, uint _time);\r\n    event LostI(uint indexed _introducer, uint indexed _user, uint _level, uint _money, uint _time);\r\n    event TokensEarned(uint indexed _user, uint _amount, uint indexed _type, uint indexed _time);\r\n    event PrizePurchased(uint indexed _user, uint _amount, uint _time);\r\n    event PrizeSpecial(uint indexed _user, uint _amount, uint _time);\r\n    event Redemption(uint indexed _user, uint _amount, uint _time);\r\n\r\n    mapping (uint => uint) public LEVEL_PRICE;\r\n    mapping (uint => uint) public PRIZE;\r\n    mapping (uint => uint) public PRIZE_SPECIAL;\r\n    mapping (uint => uint) TOKENS;\r\n    mapping (uint => uint) FEE;\r\n    uint REFERRAL_LIMIT = 4;\r\n\r\n    struct UserStruct {\r\n        bool isExist;\r\n        uint level;\r\n        uint referrerID;\r\n        uint introducerID;\r\n        uint tokens;\r\n        address wallet;\r\n        uint[] referrals;\r\n    }\r\n\r\n    mapping (uint => UserStruct) public users;\r\n    mapping (address => uint) public userList;\r\n    mapping (uint => bool) public blocked;\r\n    mapping (uint => uint) public stats_level;\r\n    \r\n    uint public currentUserID = 0;\r\n    uint public stats_total = 0 ether;\r\n    uint public stats_fees = 0 ether;\r\n    bool public paused = false;\r\n    bool public paidRedemption = false;\r\n\r\n    constructor() public {\r\n\r\n        LEVEL_PRICE[0.1 ether] = 1;\r\n        LEVEL_PRICE[0.15 ether] = 2;\r\n        LEVEL_PRICE[0.2 ether] = 3;\r\n        LEVEL_PRICE[0.25 ether] = 4;\r\n        LEVEL_PRICE[0.3 ether] = 5;\r\n        LEVEL_PRICE[0.4 ether] = 6;\r\n        LEVEL_PRICE[0.5 ether] = 7;\r\n        LEVEL_PRICE[0.6 ether] = 8;\r\n        LEVEL_PRICE[0.75 ether] = 9;\r\n        LEVEL_PRICE[0.9 ether] = 10;\r\n        LEVEL_PRICE[1.05 ether] = 11;\r\n        LEVEL_PRICE[1.2 ether] = 12;\r\n        LEVEL_PRICE[1.4 ether] = 13;\r\n        LEVEL_PRICE[1.6 ether] = 14;\r\n        LEVEL_PRICE[1.8 ether] = 15;\r\n        LEVEL_PRICE[2.1 ether] = 16;\r\n        LEVEL_PRICE[2.5 ether] = 17;\r\n        LEVEL_PRICE[3 ether] = 18;\r\n\r\n        PRIZE[0.01 finney] = 10;\r\n        PRIZE[0.05 finney] = 50;\r\n        PRIZE[0.12 finney] = 120;\r\n        PRIZE[0.25 finney] = 120;\r\n        PRIZE[0.5 finney] = 500;\r\n        PRIZE[0.6 finney] = 600;\r\n        PRIZE[0.8 finney] = 800;\r\n\r\n        TOKENS[1] = 10;\r\n        TOKENS[2] = 5;\r\n\r\n        UserStruct memory userStruct;\r\n        currentUserID++;\r\n\r\n        userStruct = UserStruct({\r\n            isExist: true,\r\n            level: 18,\r\n            referrerID: 0,\r\n            introducerID: 0,\r\n            tokens: 0,\r\n            wallet: main_address,\r\n            referrals: new uint[](0)\r\n        });\r\n\r\n        users[currentUserID] = userStruct;\r\n        userList[main_address] = currentUserID;\r\n    }\r\n\r\n    function setMainAddress(address _main_address) public onlyOwner {\r\n        require(userList[_main_address] == 0, 'Address is already in use by another user');\r\n        \r\n        delete userList[main_address];\r\n        userList[_main_address] = uint(1);\r\n        main_address = _main_address;\r\n        users[1].wallet = _main_address;\r\n    }\r\n\r\n    function setPaused(bool _paused) public onlyOwner {\r\n        paused = _paused;\r\n    }\r\n\r\n    function setPaidRedemption(bool _paid) public onlyOwner {\r\n        paidRedemption = _paid;\r\n    }\r\n    \r\n    function setBlock(uint _id, bool _block) public onlyOwner {\r\n        require(_id > 1);\r\n        blocked[_id] = _block;\r\n    }\r\n\r\n    //https://etherconverter.online to Ether\r\n    function setLevelPrice(uint _price, uint _level) public onlyOwner {\r\n        LEVEL_PRICE[_price] = _level;\r\n    }\r\n\r\n    //https://etherconverter.online to Ether\r\n    function setPrizePrice(uint _price, uint _tokens) public onlyOwner {\r\n        PRIZE[_price] = _tokens;\r\n    }\r\n\r\n    //https://etherconverter.online to Ether\r\n    function setPrizeSpecial(uint _price, uint _amount) public onlyOwner {\r\n        PRIZE_SPECIAL[_price] = _amount;\r\n    }\r\n\r\n    //https://etherconverter.online to Ether\r\n    function setFee(uint _price, uint _fee) public onlyOwner {\r\n        FEE[_price] = _fee;\r\n    }\r\n\r\n    function setCurrentUserID(uint _currentUserID) public onlyOwner {\r\n        currentUserID = _currentUserID;\r\n    }\r\n    \r\n    function setTokensAmount(uint _type, uint _tokens) public onlyOwner {\r\n\r\n        require(_type > 0, 'Invalid type');\r\n        require(_tokens >= 0, 'Invalid tokens');\r\n\r\n        TOKENS[_type] = _tokens;\r\n    }\r\n    \r\n    function setTokens(uint _userID, uint _tokens) public onlyOwner {\r\n\r\n        require(_userID > 0, 'Invalid user ID');\r\n        require(users[_userID].isExist, 'User does not exist');\r\n        require(_tokens >= 0, 'Invalid tokens');\r\n\r\n        users[_userID].tokens = _tokens;\r\n    }\r\n\r\n    function setUserData(uint _userID, address _wallet, uint _referrerID, uint _introducerID, uint _tokens, uint _referral1, uint _referral2, uint _referral3, uint _referral4, uint _level) public onlyOwner {\r\n\r\n        require(_userID > 1, 'Invalid user ID');\r\n        require(_level > 0, 'Invalid level');\r\n        require(_wallet != address(0), 'Invalid user wallet');\r\n        require(_tokens >= 0, 'Invalid tokens');\r\n        require(_referrerID > 0, 'Invalid referrer ID');\r\n        require(_introducerID > 0, 'Invalid introducer ID');\r\n\r\n        if(_userID > currentUserID){\r\n            currentUserID++;\r\n        }\r\n\r\n        if(users[_userID].isExist){\r\n            delete userList[users[_userID].wallet];\r\n            delete users[_userID];\r\n        }\r\n\r\n        UserStruct memory userStruct;\r\n\r\n        userStruct = UserStruct({\r\n            isExist: true,\r\n            level: _level,\r\n            referrerID: _referrerID,\r\n            introducerID: _introducerID,\r\n            tokens: _tokens,\r\n            wallet: _wallet,\r\n            referrals: new uint[](0)\r\n        });\r\n    \r\n        users[_userID] = userStruct;\r\n        userList[_wallet] = _userID;\r\n\r\n        if(_referral1 != uint(0)){\r\n            users[_userID].referrals.push(_referral1);\r\n        }\r\n           \r\n        if(_referral2 != uint(0)){\r\n            users[_userID].referrals.push(_referral2);\r\n        }\r\n\r\n        if(_referral3 != uint(0)){\r\n            users[_userID].referrals.push(_referral3);\r\n        }\r\n\r\n        if(_referral4 != uint(0)){\r\n            users[_userID].referrals.push(_referral4);\r\n        }\r\n    }\r\n\r\n    function () external payable {\r\n\r\n        require(!paused);\r\n        require(LEVEL_PRICE[msg.value] > 0 || PRIZE[msg.value] > 0, 'You have sent incorrect payment amount');\r\n\r\n        if(PRIZE[msg.value] > 0){\r\n\r\n            require(users[userList[msg.sender]].isExist);\r\n            require(blocked[userList[msg.sender]] != true);\r\n\r\n            if(msg.value == 0.01 finney){\r\n                if(paidRedemption){\r\n                    require(users[userList[msg.sender]].tokens >= PRIZE[msg.value], 'You do not have enough tokens');\r\n                    users[userList[msg.sender]].tokens = SafeMath.sub(users[userList[msg.sender]].tokens, PRIZE[msg.value]);\r\n                    emit Redemption(userList[msg.sender], PRIZE[msg.value], now);\r\n                } else {\r\n                    emit Redemption(userList[msg.sender], uint(0), now);\r\n                }\r\n            } else {\r\n                require(users[userList[msg.sender]].tokens >= PRIZE[msg.value], 'You do not have enough tokens');\r\n\r\n                users[userList[msg.sender]].tokens = SafeMath.sub(users[userList[msg.sender]].tokens, PRIZE[msg.value]);\r\n\r\n                if(PRIZE_SPECIAL[msg.value] > 0){\r\n                    PRIZE_SPECIAL[msg.value] = SafeMath.sub(PRIZE_SPECIAL[msg.value], uint(1));\r\n                    emit PrizeSpecial(userList[msg.sender], PRIZE[msg.value], now);\r\n                    if(PRIZE_SPECIAL[msg.value] == 1){\r\n                        PRIZE[msg.value] = 0;\r\n                    }\r\n                } else {\r\n                    emit PrizePurchased(userList[msg.sender], PRIZE[msg.value], now);\r\n                }\r\n            }\r\n\r\n            address(uint160(msg.sender)).transfer(msg.value);\r\n\r\n        } else if(LEVEL_PRICE[msg.value] == 1){\r\n\r\n            uint referrerID = 0;\r\n            address referrer = bytesToAddress(msg.data);\r\n\r\n            if(referrer == address(0)){\r\n                referrerID = 1;\r\n            } else if (userList[referrer] > 0 && userList[referrer] <= currentUserID){\r\n                referrerID = userList[referrer];\r\n            } else {\r\n                revert('Incorrect referrer');\r\n            }\r\n\r\n            if(users[userList[msg.sender]].isExist){\r\n                revert('You are already signed up');\r\n            } else {\r\n                registerUser(referrerID);\r\n            }\r\n        } else if(users[userList[msg.sender]].isExist){\r\n            upgradeUser(LEVEL_PRICE[msg.value]);\r\n        } else {\r\n            revert(\"Please buy first level\");\r\n        }\r\n    }\r\n\r\n    function registerUser(uint _referrerID) internal {\r\n\r\n        require(!users[userList[msg.sender]].isExist, 'You are already signed up');\r\n        require(_referrerID > 0 && _referrerID <= currentUserID, 'Incorrect referrer ID');\r\n        require(LEVEL_PRICE[msg.value] == 1, 'You have sent incorrect payment amount');\r\n\r\n        uint _introducerID = _referrerID;\r\n\r\n        if(_referrerID != 1 && users[_referrerID].referrals.length >= REFERRAL_LIMIT)\r\n        {\r\n            _referrerID = findFreeReferrer(_referrerID);\r\n        }\r\n\r\n        UserStruct memory userStruct;\r\n        currentUserID++;\r\n\r\n        userStruct = UserStruct({\r\n            isExist : true,\r\n            level: 1,\r\n            referrerID : _referrerID,\r\n            introducerID : _introducerID,\r\n            tokens: 0,\r\n            wallet : msg.sender,\r\n            referrals : new uint[](0)\r\n        });\r\n\r\n        users[currentUserID] = userStruct;\r\n        userList[msg.sender] = currentUserID;\r\n\r\n        if(TOKENS[1] > 0){\r\n            users[_introducerID].tokens = SafeMath.add(users[_introducerID].tokens, TOKENS[1]);\r\n            emit TokensEarned(_introducerID, TOKENS[1], uint(1), now);\r\n        }\r\n\r\n        if(TOKENS[msg.value] > 0){\r\n            users[currentUserID].tokens = TOKENS[msg.value];\r\n            emit TokensEarned(currentUserID, TOKENS[msg.value], uint(4), now);\r\n        }\r\n\r\n        if(_referrerID != 1){\r\n            users[_referrerID].referrals.push(currentUserID);\r\n        }\r\n\r\n        stats_level[1] = SafeMath.add(stats_level[1], uint(1));\r\n\r\n        processPayment(currentUserID, 1);\r\n\r\n        emit Register(currentUserID, _referrerID, _introducerID, now);\r\n    }\r\n\r\n    function upgradeUser(uint _level) internal {\r\n\r\n        require(users[userList[msg.sender]].isExist, 'You are not signed up yet');\r\n        require( _level >= 2 && _level <= 18, 'Incorrect level');\r\n        require(LEVEL_PRICE[msg.value] == _level, 'You have sent incorrect payment amount');\r\n        require(users[userList[msg.sender]].level < _level, 'You have already activated this level');\r\n\r\n        uint level_previous = SafeMath.sub(_level, uint(1));\r\n\r\n        require(users[userList[msg.sender]].level == level_previous, 'Buy the previous level first');\r\n        \r\n        users[userList[msg.sender]].level = _level;\r\n\r\n        if(TOKENS[2] > 0){\r\n            users[userList[msg.sender]].tokens = SafeMath.add(users[userList[msg.sender]].tokens, TOKENS[2]);\r\n            emit TokensEarned(userList[msg.sender], TOKENS[2], uint(2), now);\r\n        }\r\n\r\n        if(TOKENS[3] > 0){\r\n            users[users[userList[msg.sender]].introducerID].tokens = SafeMath.add(users[users[userList[msg.sender]].introducerID].tokens, TOKENS[3]);\r\n            emit TokensEarned(users[userList[msg.sender]].introducerID, TOKENS[3], uint(3), now);\r\n        }\r\n\r\n        if(TOKENS[msg.value] > 0){\r\n            users[userList[msg.sender]].tokens = SafeMath.add(users[userList[msg.sender]].tokens, TOKENS[msg.value]);\r\n            emit TokensEarned(userList[msg.sender], TOKENS[msg.value], uint(4), now);\r\n        }\r\n\r\n        stats_level[level_previous] = SafeMath.sub(stats_level[level_previous], uint(1));\r\n        stats_level[_level] = SafeMath.add(stats_level[_level], uint(1));\r\n\r\n        processPayment(userList[msg.sender], _level);\r\n        \r\n        emit Upgrade(userList[msg.sender], _level, msg.value, now);\r\n    }\r\n\r\n    function processPayment(uint _user, uint _level) internal {\r\n\r\n        uint sponsor_id;\r\n        uint introducer_id = users[_user].introducerID;\r\n        uint money_left = msg.value;\r\n\r\n        if(FEE[msg.value] > 0){\r\n            address(uint160(main_address)).transfer(FEE[msg.value]);\r\n            money_left = SafeMath.sub(money_left,FEE[msg.value]);\r\n            stats_fees = SafeMath.add(stats_fees,FEE[msg.value]);\r\n        }\r\n\r\n        uint money_sponsor = SafeMath.div(money_left,2);\r\n        uint money_introducer = money_sponsor;\r\n\r\n        if(_level == 1 || _level == 4 || _level == 7 || _level == 10 || _level == 13 || _level == 16){\r\n            money_sponsor = money_left;\r\n            money_introducer = 0;\r\n            sponsor_id = users[_user].referrerID;\r\n        } else if(_level == 2 || _level == 5 || _level == 8 || _level == 11 || _level == 14 || _level == 17){\r\n            sponsor_id = users[users[_user].referrerID].referrerID;\r\n        } else if(_level == 3 || _level == 6 || _level == 9 || _level == 12 || _level == 15 || _level == 18){\r\n            sponsor_id = users[users[users[_user].referrerID].referrerID].referrerID;\r\n        }\r\n\r\n        stats_total = SafeMath.add(stats_total,msg.value);\r\n\r\n        if(!users[sponsor_id].isExist || users[sponsor_id].level < _level || blocked[sponsor_id] == true){\r\n            if(users[_user].referrerID != 1){\r\n                emit Lost(sponsor_id, _user, _level, money_sponsor, now);\r\n            }\r\n        } else {\r\n                address(uint160(users[sponsor_id].wallet)).transfer(money_sponsor);\r\n                money_left = SafeMath.sub(money_left,money_sponsor);\r\n                emit Payment(_user, sponsor_id, uint(1), _level, money_sponsor, now);\r\n        }\r\n\r\n        if(money_introducer > 0){\r\n            if(!users[introducer_id].isExist || users[introducer_id].level < _level || blocked[introducer_id] == true){\r\n                if(users[_user].introducerID != 1){\r\n                    emit LostI(introducer_id, _user, _level, money_introducer, now);\r\n                }\r\n            } else {\r\n                address(uint160(users[introducer_id].wallet)).transfer(money_introducer);\r\n                money_left = SafeMath.sub(money_left,money_introducer);\r\n                emit Payment(_user, introducer_id, uint(2), _level, money_introducer, now);\r\n            }\r\n        }\r\n\r\n        if(money_left > 0){\r\n            address(uint160(main_address)).transfer(money_left);\r\n            stats_fees = SafeMath.add(stats_fees,money_left);\r\n        }\r\n    }\r\n\r\n    function findFreeReferrer(uint _user) public view returns(uint) {\r\n\r\n        require(users[_user].isExist, 'User does not exist');\r\n\r\n        if(users[_user].referrals.length < REFERRAL_LIMIT){\r\n            return _user;\r\n        }\r\n\r\n        uint[] memory referrals = new uint[](340);\r\n        referrals[0] = users[_user].referrals[0]; \r\n        referrals[1] = users[_user].referrals[1];\r\n        referrals[2] = users[_user].referrals[2];\r\n        referrals[3] = users[_user].referrals[3];\r\n\r\n        uint freeReferrer;\r\n        bool noFreeReferrer = true;\r\n        \r\n        for(uint i = 0; i < 340; i++){\r\n            if(users[referrals[i]].referrals.length == REFERRAL_LIMIT){\r\n                if(i < 84){\r\n                    referrals[(i+1)*4] = users[referrals[i]].referrals[0];\r\n                    referrals[(i+1)*4+1] = users[referrals[i]].referrals[1];\r\n                    referrals[(i+1)*4+2] = users[referrals[i]].referrals[2];\r\n                    referrals[(i+1)*4+3] = users[referrals[i]].referrals[3];\r\n                }\r\n            } else {\r\n                noFreeReferrer = false;\r\n                freeReferrer = referrals[i];\r\n                break;\r\n            }\r\n        }\r\n        if(noFreeReferrer){\r\n            freeReferrer = 1;\r\n        }\r\n        return freeReferrer;\r\n    }\r\n\r\n    function viewUserReferrals(uint _user) public view returns(uint[] memory) {\r\n        return users[_user].referrals;\r\n    }\r\n\r\n    function viewUserLevel(uint _user) public view returns(uint) {\r\n        return users[_user].level;\r\n    }\r\n\r\n    function bytesToAddress(bytes memory bys) private pure returns (address  addr) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_paid\",\"type\":\"bool\"}],\"name\":\"setPaidRedemption\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stats_level\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_block\",\"type\":\"bool\"}],\"name\":\"setBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PRIZE_SPECIAL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"isExist\",\"type\":\"bool\"},{\"name\":\"level\",\"type\":\"uint256\"},{\"name\":\"referrerID\",\"type\":\"uint256\"},{\"name\":\"introducerID\",\"type\":\"uint256\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setPrizeSpecial\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"uint256\"}],\"name\":\"viewUserLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_type\",\"type\":\"uint256\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"setTokensAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LEVEL_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userID\",\"type\":\"uint256\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"setTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paidRedemption\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stats_total\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentUserID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userID\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_referrerID\",\"type\":\"uint256\"},{\"name\":\"_introducerID\",\"type\":\"uint256\"},{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_referral1\",\"type\":\"uint256\"},{\"name\":\"_referral2\",\"type\":\"uint256\"},{\"name\":\"_referral3\",\"type\":\"uint256\"},{\"name\":\"_referral4\",\"type\":\"uint256\"},{\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"setUserData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_currentUserID\",\"type\":\"uint256\"}],\"name\":\"setCurrentUserID\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_main_address\",\"type\":\"address\"}],\"name\":\"setMainAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"uint256\"}],\"name\":\"viewUserReferrals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PRIZE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"setPrizePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"uint256\"}],\"name\":\"findFreeReferrer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"setLevelPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stats_fees\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_referrer\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_introducer\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Register\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_referrer\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_type\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_money\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Payment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sponsor\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_user\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_money\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Lost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_introducer\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_user\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_money\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"LostI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_type\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"TokensEarned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"PrizePurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"PrizeSpecial\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Redemption\",\"type\":\"event\"}]","ContractName":"RePrize","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://56c1c62fd53c2e4c4a474d56a1d45200aaf0ad2d7260737730f446ca437dc7f2"}]}