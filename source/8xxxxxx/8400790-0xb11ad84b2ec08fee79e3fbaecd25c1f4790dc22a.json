{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ncontract Ownable {\r\n  address payable private _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == _owner, \"Forbidden\");\r\n    _;\r\n  }\r\n\r\n  constructor() public {\r\n    _owner = msg.sender;\r\n  }\r\n\r\n  function owner() public view returns (address payable) {\r\n    return _owner;\r\n  }\r\n\r\n  function transferOwnership(address payable newOwner) public onlyOwner {\r\n    require(newOwner != address(0), \"Non-zero address required.\");\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = _a * _b;\r\n    require(c / _a == _b, \"Invalid argument.\");\r\n\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    require(_b > 0, \"Invalid argument.\");\r\n    uint256 c = _a / _b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    require(_b <= _a, \"Invalid argument.\");\r\n    uint256 c = _a - _b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    uint256 c = _a + _b;\r\n    require(c >= _a, \"Invalid argument.\");\r\n\r\n    return c;\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0, \"Invalid argument.\");\r\n    return a % b;\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n * Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\r\n */\r\ninterface IERC20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract TicketDistribution is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 private _price;\r\n  uint256 private _startDistribution;\r\n  uint256 private _endDistribution;\r\n  address payable private _wallet;\r\n  uint256 private _startRefund;\r\n  uint256 private _fees;\r\n  uint256 private _donation;\r\n\r\n  uint256 private _secureHash;\r\n  string private _secureDataURL;\r\n\r\n  struct Deposit {\r\n    address payable from;\r\n    bool refunded;\r\n    bool selected;\r\n  }\r\n\r\n  Deposit[] private _deposits;\r\n  mapping(address => uint256[]) _depositsMap;\r\n\r\n  modifier underDistribution {\r\n    require((_startDistribution <= now) && (_endDistribution == 0 || _endDistribution > now), \"Distribution has not started\");\r\n    _;\r\n  }\r\n\r\n  modifier afterDistribution {\r\n    require((_endDistribution > 0) && (_endDistribution <= now), \"Distribution has not ended\");\r\n    _;\r\n  }\r\n\r\n  modifier refundHasStarted {\r\n    require(_startRefund > 0, \"Refund has not started\");\r\n    _;\r\n  }\r\n\r\n  event DepositReceived(address indexed from);\r\n  event DepositSelected(address indexed from);\r\n  event DepositRefunded(address indexed to, uint256 amount);\r\n  event DepositWithdrawed(uint256 amount);\r\n  event RefundStarted();\r\n  event DistributionClosed();\r\n\r\n  constructor(uint256 price, address payable wallet, uint256 secureHash, uint256 startDistribution, uint256 endDistribution) public {\r\n    _price = price;\r\n    _donation = price.div(100).mul(2);\r\n    _wallet = wallet;\r\n    _secureHash = secureHash;\r\n    _startDistribution = startDistribution;\r\n    _endDistribution = endDistribution;\r\n\r\n    if (_startDistribution == 0) {\r\n      _startDistribution = now;\r\n    }\r\n\r\n    require(_wallet != address(0), \"Wallet must be a valid address\");\r\n  }\r\n\r\n  function price() public view returns (uint256) {\r\n    return _price;\r\n  }\r\n\r\n  function donation() public view returns (uint256) {\r\n    return _donation;\r\n  }\r\n\r\n  function wallet() public view returns (address payable) {\r\n    return _wallet;\r\n  }\r\n\r\n  function fees() public view returns (uint256) {\r\n    return _fees;\r\n  }\r\n\r\n  function numberOfDeposits() public view returns (uint256) {\r\n    return _deposits.length;\r\n  }\r\n\r\n  function startOfDistribution() public view returns (uint256) {\r\n    return _startDistribution;\r\n  }\r\n\r\n  function endOfDistribution() public view returns (uint256) {\r\n    return _endDistribution;\r\n  }\r\n\r\n  function startOfRefund() public view returns (uint256) {\r\n    return _startRefund;\r\n  }\r\n\r\n  function secureDataURL() public view returns (string memory) {\r\n    return _secureDataURL;\r\n  }\r\n\r\n  function secureHash() public view returns (uint256) {\r\n    return _secureHash;\r\n  }\r\n\r\n  function deposit(uint256 index) public view returns (address, bool, bool) {\r\n    require((index >= 0) && (index < _deposits.length), \"Invalid index\");\r\n    Deposit memory p = _deposits[index];\r\n    return (p.from, p.refunded, p.selected);\r\n  }\r\n\r\n  function numberOfDepositsByAddress(address addr) public view returns (uint256) {\r\n    return _depositsMap[addr].length;\r\n  }\r\n\r\n  function depositByAddress(address addr, uint256 index) public view returns (address, bool, bool) {\r\n    require((index >= 0) && (index < _depositsMap[addr].length), \"Invalid index\");\r\n    Deposit memory p = _deposits[_depositsMap[addr][index]];\r\n    return (p.from, p.refunded, p.selected);\r\n  }\r\n\r\n  function closeDistribution() public onlyOwner underDistribution {\r\n    if (_endDistribution == 0) {\r\n      _endDistribution = now;\r\n      emit DistributionClosed();\r\n    }\r\n  }\r\n\r\n  function distributionIsStarted() public view returns (bool) {\r\n    return (_startDistribution <= now) && (_endDistribution == 0 || _endDistribution > now);\r\n  }\r\n\r\n  function distributionIsClosed() public view returns (bool) {\r\n    return (_endDistribution > 0) && (_endDistribution <= now);\r\n  }\r\n\r\n  function startRefund() public onlyOwner afterDistribution {\r\n    _startRefund = now;\r\n    emit RefundStarted();\r\n  }\r\n\r\n  function refundIsStarted() public view returns (bool) {\r\n    return _startRefund > 0;\r\n  }\r\n\r\n  function() external payable underDistribution {\r\n    require(msg.value == _price, \"Invalid value\");\r\n\r\n    uint pos = _deposits.push(Deposit({\r\n      from: msg.sender,\r\n      refunded: false,\r\n      selected: false\r\n    }));\r\n\r\n    _depositsMap[msg.sender].push(pos - 1);\r\n\r\n    emit DepositReceived(msg.sender);\r\n  }\r\n\r\n  function setSecureDataURL(string memory dataURL) public onlyOwner afterDistribution {\r\n    _secureDataURL = dataURL;\r\n  }\r\n\r\n  function reveal(uint256[] memory indices) public onlyOwner afterDistribution {\r\n    uint256 amount = 0;\r\n\r\n    uint256 length = indices.length;\r\n    for (uint256 idx = 0; idx < length; idx++) {\r\n      uint256 index = indices[idx];\r\n      if (index < _deposits.length) {\r\n        Deposit storage p = _deposits[index];\r\n        if (p.refunded == false) {\r\n          amount = amount.add(_price);\r\n        }\r\n        p.selected = true;\r\n        p.refunded = true;\r\n\r\n        emit DepositSelected(p.from);\r\n      }\r\n    }\r\n\r\n    _fees = _fees.add(amount);\r\n  }\r\n\r\n  function refund() public afterDistribution refundHasStarted {\r\n    uint256[] memory indices = _depositsMap[msg.sender];\r\n    uint256 amount = 0;\r\n    uint256 length = _deposits.length;\r\n    for (uint256 idx = 0; idx < indices.length; idx++) {\r\n      if (idx < length) {\r\n        Deposit storage p = _deposits[indices[idx]];\r\n        if (p.refunded == false && p.selected == false) {\r\n          p.refunded = true;\r\n          amount = amount.add(_price.sub(_donation));\r\n          _fees = _fees.add(_donation);\r\n        }\r\n      }\r\n    }\r\n\r\n    msg.sender.transfer(amount);\r\n    emit DepositRefunded(msg.sender, amount);\r\n  }\r\n\r\n  function withdraw() public onlyOwner afterDistribution refundHasStarted {\r\n    uint256 amount = _fees;\r\n\r\n    if (now > _startRefund + 30 days) {\r\n      amount = address(this).balance;\r\n    }\r\n\r\n    _fees = 0;\r\n    _wallet.transfer(amount);\r\n    emit DepositWithdrawed(amount);\r\n  }\r\n\r\n  function transferAnyERC20Token(address tokenAddress, uint256 amount) public onlyOwner afterDistribution returns (bool) {\r\n    return IERC20(tokenAddress).transfer(owner(), amount);\r\n  }\r\n\r\n  function transferOwnership(address payable) public onlyOwner {\r\n    require(false, \"Ownership transfer do not allowed\");\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"secureDataURL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"depositByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"numberOfDepositsByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeDistribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secureHash\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endOfDistribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"donation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributionIsStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fees\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributionIsClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"indices\",\"type\":\"uint256[]\"}],\"name\":\"reveal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startOfDistribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dataURL\",\"type\":\"string\"}],\"name\":\"setSecureDataURL\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refundIsStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startOfRefund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"name\":\"secureHash\",\"type\":\"uint256\"},{\"name\":\"startDistribution\",\"type\":\"uint256\"},{\"name\":\"endDistribution\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"}],\"name\":\"DepositReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"}],\"name\":\"DepositSelected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositWithdrawed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RefundStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DistributionClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TicketDistribution","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000510bd90ef04800000000000000000000000000006a1517622feb74a242e68a26f423ae38e020a0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005d5eca10000000000000000000000000000000000000000000000000000000005d616d10","Library":"","SwarmSource":"bzzr://96b7514ccf63a7c676e469db29ab7bf389a3c2caa25c93d8c5fb9bd367a2536e"}]}