{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.11; // optimization runs: 200, evm version: petersburg\r\n\r\n\r\n/**\r\n * @title AdharmaSmartWalletImplementation\r\n * @author 0age\r\n * @notice The Adharma smart wallet is an emergency implementation wallet that\r\n * can be immediately upgraded to by the Upgrade Beacon Controller Manager in\r\n * the event of a critical-severity exploit, or after a 90-day period of\r\n * inactivity by Dharma. It gives the user direct, sole custody and control over\r\n * their smart wallet until the Upgrade Beacon Controller Manager issues another\r\n * upgrade to the implementation contract.\r\n */\r\ncontract AdharmaSmartWalletImplementation {\r\n  // The key is still held in storage slot zero.\r\n  address private _key;\r\n\r\n  // The smart wallet can receive funds, though it is inadvisable.\r\n  function () external payable {}\r\n\r\n  // Keep the initializer function on the contract in case a smart wallet has\r\n  // not yet been deployed but the account still contains funds.\r\n  function initialize(address key) external {\r\n    // Ensure that this function is only callable during contract construction.\r\n    assembly { if extcodesize(address) { revert(0, 0) } }\r\n\r\n    // Ensure that a key is set on this smart wallet.\r\n    require(key != address(0), \"No key provided.\");\r\n\r\n    // Set up the key.\r\n    _key = key;\r\n  }\r\n\r\n  // The key's owner has sole authority to make calls from the smart wallet.\r\n  function performCall(\r\n    address payable to, uint256 amount, bytes calldata data\r\n  ) external payable returns (\r\n    bool ok, bytes memory returnData\r\n  ) {\r\n    require(msg.sender == _key, \"Caller prohibited.\");\r\n    (ok, returnData) = to.call.value(amount)(data);\r\n    require(ok, string(returnData));\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"performCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"key\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"AdharmaSmartWalletImplementation","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://41646861726d61536d61727457616c6c6574496d706c656d656e746174696f6e"}]}