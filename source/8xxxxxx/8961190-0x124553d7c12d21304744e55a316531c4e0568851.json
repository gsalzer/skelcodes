{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.5.0 <0.6.0; \r\n\r\nlibrary SafeMath {\r\n    \r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n    \r\n}\r\n\r\n\r\ncontract MiningBitcoinToken {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    string constant private _name = \"MiningBitcoinAndTradingToken\";\r\n    string constant private _symbol = \"MBT\";\r\n    uint8 constant private _decimals = 18;\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    uint256 constant private _totalSupply = 2*(10**9)*(10**18);\r\n    \r\n    address private _owner;\r\n    address constant public TX_MINING = 0x1C4E479B1962b3AC4D4FCeB2feE85930F314F842;\r\n    address constant public PRIV_SELL = 0x9Cf4cAfC51eAEc3cee22d72dE7f26B94a8622d23;\r\n    address constant public IEO_SELL = 0xC494c313F93e1FA089B7954a8cd36947BD972244;\r\n    address constant public PUB_SELL = 0xbeBdf273fE1BaA392adBaFA949D89588fdCB9022;\r\n    address constant public TEAM_PRIZE = 0xaA2BfF48Ce4EB319bFb6770357D44dec70b79C25;\r\n    address constant public FUND_LOCK = 0x697DE66cC4556c48f225677b38b6D5088FA84BE2;\r\n    address constant public MARKET_OP = 0x01528bcFe4Ec473C3c2BC55578005868c39E32cE;\r\n    \r\n    // if an addr in private sell, it cannot in public sell, should use another addr.\r\n    mapping (address => uint256) private _privAmount;\r\n    mapping (address => uint256) private _ethAmount;\r\n    uint256 private _privStart;\r\n    uint256 private _privEnd;\r\n    uint256 private _pubStart;\r\n    uint256 private _pubEnd;\r\n    uint256 private _pubSellRound;\r\n    uint256 private _nthInThisRound;\r\n    uint256 private _privPrice;\r\n    uint256 private _pubPrice;\r\n    uint256 private _pubFactor = 100;\r\n    bool private _privSetable = true;\r\n    bool private _pubSetable = true;\r\n    uint256 constant public WAIT_TIME = 72 hours;\r\n    uint256 constant public UNIT_TIME = 1 weeks;\r\n    uint256 constant public PRIV_TIME = UNIT_TIME;\r\n    uint256 constant public PUB_TIME = 3*UNIT_TIME;\r\n    uint256 constant public PRIVE_LOCK_TIME = 22*UNIT_TIME; // About 5 month, 150days.\r\n    \r\n    function viewPrivStart() public view returns (uint256) {\r\n        return _privStart;\r\n    }\r\n    \r\n    function viewPubStart() public view returns (uint256) {\r\n        return _pubStart;\r\n    }\r\n    \r\n    function viewPrivEnd() public view returns (uint256) {\r\n        return _privEnd;\r\n    }\r\n    \r\n    function viewPubEnd() public view returns (uint256) {\r\n        return _pubEnd;\r\n    }\r\n    \r\n    function viewPrivPrice() public view returns (uint256) {\r\n        return _privPrice;\r\n    }\r\n    \r\n    function viewPubPrice() public view returns (uint256) {\r\n        return _pubPrice;\r\n    }\r\n    \r\n    function viewPubFactor() public view returns (uint256) {\r\n        return _pubFactor;\r\n    }\r\n    \r\n    function viewPubSellRound() public view returns (uint256) {\r\n        return _pubSellRound;\r\n    }\r\n    \r\n    function viewNthInThisRound() public view returns (uint256) {\r\n        return _nthInThisRound;\r\n    }\r\n    \r\n    function viewPrivSetable() public view returns (bool) {\r\n        return _privSetable;\r\n    }\r\n    \r\n    function viewPubSetable() public view returns (bool) {\r\n        return _pubSetable;\r\n    }\r\n    \r\n    function viewEthAmount(address addr) public view returns (uint256) {\r\n        return _ethAmount[addr];\r\n    }\r\n    \r\n    constructor() public {\r\n        _owner = msg.sender;\r\n        \r\n        _balances[TX_MINING] = _totalSupply*30/100; // For Tx Mining.\r\n        _balances[PRIV_SELL] = _totalSupply*5/100;  // For Private Sell.\r\n        _balances[IEO_SELL] = _totalSupply*5/100;  // For IEO_SELL.\r\n        _balances[PUB_SELL] = _totalSupply*25/100; // For Public Sell.\r\n        _balances[TEAM_PRIZE] = _totalSupply*15/100; // For Team Prize.\r\n        _balances[FUND_LOCK] = _totalSupply*12/100; // For Fund Lock.\r\n        _balances[MARKET_OP] = _totalSupply*8/100;  // For Market and Operation.\r\n        \r\n        _privStart = block.timestamp.add(200*UNIT_TIME);\r\n        _privEnd = _privStart + PRIV_TIME;\r\n        \r\n        _pubStart = _privStart.add(200*UNIT_TIME);\r\n        _pubEnd = _pubStart +  PUB_TIME;\r\n        \r\n        _privPrice = 2000;\r\n        _pubPrice = 1000;\r\n    }\r\n    \r\n    function() external payable {\r\n        if(msg.value == 0 && msg.sender == _owner) {\r\n            _handleAdmin();\r\n        } else if(msg.value > 0) {\r\n            if(block.timestamp > _privStart &&  block.timestamp < _privEnd) {\r\n                _handlePrivSell();\r\n            } else if(block.timestamp > _pubStart && block.timestamp < _pubEnd) {\r\n                _handlePubSell();\r\n            } else {\r\n                revert();\r\n            }\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n    \r\n    // Withdraw eth; Set start-time; Set pub-sell-price; Set MBP???\r\n    function _handleAdmin() internal {\r\n        require(msg.sender == _owner);\r\n        if(msg.data.length == 0) {\r\n            msg.sender.transfer(address(this).balance);\r\n        } else {\r\n            uint8 command = uint8(msg.data[0]);\r\n            if(command == 0xFF && _privSetable) {\r\n                _privStart = block.timestamp + WAIT_TIME;\r\n                _privEnd = _privStart + PRIV_TIME;\r\n                if(msg.data.length == 3) {\r\n                    _privPrice = (uint256(uint8(msg.data[1])) << 8) + (uint256(uint8(msg.data[2])));\r\n                }\r\n            } else if(command == 0xFE && _pubSetable) {\r\n                _pubStart = block.timestamp +  WAIT_TIME;\r\n                _pubEnd = _pubStart +  PUB_TIME;\r\n                if(msg.data.length == 3) {\r\n                    _pubPrice = (uint256(uint8(msg.data[1])) << 8) + (uint256(uint8(msg.data[2])));\r\n                }\r\n            } else if(command == 0xFD) {\r\n                _privSetable = false;\r\n            } else if(command == 0xFC) {\r\n                _pubSetable = false;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function _handlePrivSell() internal {\r\n        require(msg.value >= 5 ether);\r\n        uint256 temp = msg.value.mul(_privPrice);\r\n        _balances[PRIV_SELL] = _balances[PRIV_SELL].sub(temp);\r\n        _balances[msg.sender] = _balances[msg.sender].add(temp);\r\n        _privAmount[msg.sender] = _privAmount[msg.sender].add(temp);\r\n        _ethAmount[msg.sender] = _ethAmount[msg.sender].add(msg.value);\r\n    }\r\n    \r\n    function _handlePubSell() internal {\r\n        require(_privAmount[msg.sender] == 0);\r\n        uint256 temp =  block.timestamp.sub(_pubStart).div(UNIT_TIME);\r\n        if(temp > _pubSellRound) {\r\n            _pubSellRound = temp;\r\n            _nthInThisRound = 0;\r\n            _pubFactor = _pubFactor.sub(10);  // 100 90 80\r\n        }\r\n        uint256 foo;\r\n        if(msg.value >= 1 ether) {\r\n            _nthInThisRound = _nthInThisRound.add(1);\r\n            if(_nthInThisRound <= 1000) {\r\n                // 2th round: B(m) = 90% * (1001-m) / 1000 * ETH * pubPrice;  \r\n                foo = msg.value.mul(_pubPrice).mul(_pubFactor).mul(1001-_nthInThisRound).div(100000);\r\n            }\r\n        }\r\n        temp = msg.value.mul(_pubPrice).add(foo);\r\n        _balances[PUB_SELL] = _balances[PUB_SELL].sub(temp);\r\n        _balances[msg.sender] = _balances[msg.sender].add(temp);\r\n        _ethAmount[msg.sender] = _ethAmount[msg.sender].add(msg.value);\r\n    }\r\n    \r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n    \r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    \r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    \r\n    function totalSupply() public pure returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n \r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        if(block.timestamp < _pubEnd.add(PRIVE_LOCK_TIME)) {  // _pubEnd + 5 month(22 weeks);\r\n            require(_privAmount[recipient] == 0); // cannot transfer to priv_addr in 5 month\r\n            if(_privAmount[sender] > 0) {         // if msg.sender is priv_addr, need to control the amount.\r\n                require(block.timestamp > _pubEnd);\r\n                require(\r\n                    _privAmount[sender].sub(_balances[sender]).add(amount) <= \r\n                    block.timestamp.sub(_pubEnd).mul(_privAmount[sender]).div(PRIVE_LOCK_TIME)\r\n                );\r\n            }\r\n        }\r\n        \r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(block.timestamp < _pubEnd.add(PRIVE_LOCK_TIME));\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n    \r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"viewPrivStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"viewEthAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewPrivSetable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IEO_SELL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewPubStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UNIT_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRIV_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WAIT_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewPrivEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewPubSellRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewPubSetable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewNthInThisRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PUB_SELL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PUB_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FUND_LOCK\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TX_MINING\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MARKET_OP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewPubPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewPrivPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewPubEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEAM_PRIZE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRIVE_LOCK_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRIV_SELL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewPubFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"MiningBitcoinToken","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://1e385804631e56da93bf4594ecf9e0eb80056d6953b1a917a08b4ec682f8fed5"}]}