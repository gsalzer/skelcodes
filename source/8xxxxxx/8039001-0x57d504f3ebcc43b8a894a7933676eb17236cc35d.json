{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.7;\r\n\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account));\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account));\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0));\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n\r\ninterface SecondaryStorageInterface {\r\n    function addProject() external returns (uint256 projectId);\r\n    function setControllerStateToProject(\r\n        uint256 pid,\r\n        address payable latestProjectCtrl,\r\n        address payable latestRefundCtrl,\r\n        address payable latestDisputeCtrl,\r\n        address payable latestUtilityCtrl,\r\n        bytes32 cntrllrs\r\n    )\r\n    external;\r\n}\r\n\r\n\r\n/* Hybrid Storage A */\r\n\r\ncontract PrimaryStorage {\r\n\r\n    address payable private projectController;\r\n    address payable private refundController;\r\n    address payable private disputeController;\r\n    address payable private utilityController;\r\n    bytes32 private controllersHash;\r\n\r\n    struct GlobalState {\r\n        address payable projectController;\r\n        address payable disputeController;\r\n        address payable refundController;\r\n        address payable utilityController;\r\n    }\r\n\r\n    GlobalState private dAppState;\r\n\r\n    mapping (bytes32 => GlobalState) private globalControllerStates;\r\n    mapping (address => address payable) private dAppContract;\r\n\r\n    address payable private main;\r\n    address private secondaryStorage;\r\n    address payable private refundEtherToken;\r\n    address payable private refundPool;\r\n    address payable private affiliatesEscrow;\r\n    address payable private moderationResources;\r\n    address private eventLogger;\r\n\r\n    using Roles for Roles.Role;\r\n    Roles.Role private CommunityModerators;\r\n    Roles.Role private PlatformModerators;\r\n    Roles.Role private Investors;\r\n    Roles.Role private ProjectOwners;\r\n    Roles.Role private Arbiters;\r\n\r\n    bool private isNetworkDeployed;\r\n    uint256 private minProtectionPercentage = 75;\r\n    uint256 private maxProtectionPercentage = 95;\r\n    uint256 private policyDuration = 4505144;\r\n    uint256 private basePolicyDuration = 2252572;\r\n    uint256 private minOwnerContribution = 3 ether;\r\n    uint256 private minInvestorContribution = 180000000000000000;\r\n    uint256 private maxInvestorContribution = 42000000000000000000;\r\n    uint256 private regularContributionPercentage = 20;\r\n\r\n    ProtectedInvestment[] private insurance;\r\n\r\n    struct ProtectedInvestment {\r\n        uint256 investmentId;\r\n        bytes32 controllerState;\r\n        address investmentOwner;\r\n        uint256 projectId;\r\n        uint256 poolContribution;\r\n        uint256 insuranceRate;\r\n        uint256 etherSecured;\r\n        uint256 timeOfTheRequest;\r\n        bool votedForARefund;\r\n        bool votedAfterFailedVoting;\r\n        bool isRefunded;\r\n        bool isCanceled;\r\n    }\r\n\r\n    ProjectDispute[] private dispute;\r\n\r\n    struct ProjectDispute {\r\n        uint256 disputeId;\r\n        uint256 pid;\r\n        address payable creator;\r\n        uint256 disputeVotePeriod;\r\n        uint256 resultCountPeriod;\r\n        uint256 numberOfVotesForRefundState;\r\n        uint256 numberOfVotesAgainstRefundState;\r\n        uint256 votingPrize;\r\n        uint256 entryFee;\r\n        uint256[] numbers;\r\n        bytes publicDisputeUrl;\r\n        address disputeController;\r\n        address payable[] voters;\r\n        mapping (address => bytes32) hiddenVote;\r\n        mapping (address => bool) revealedVote;\r\n    }\r\n\r\n    address[] private investors;\r\n    mapping (address => Investor) private investorData;\r\n    struct Investor {\r\n        uint256 investorId;\r\n        mapping (uint256 => uint256) withdrawable;\r\n        address referrer;\r\n    }\r\n\r\n    mapping (address => mapping(uint256 => uint256)) private payment;\r\n    mapping (address => uint256) private validationToken;\r\n\r\n    constructor() public {\r\n        PlatformModerators.add(msg.sender);\r\n    }\r\n\r\n    modifier onlyNetworkContracts {\r\n        if (_onlyDappContracts(msg.sender)) {\r\n            _;\r\n        } else {\r\n            revert(\"Not allowed to modify storage\");\r\n        }\r\n    }\r\n\r\n    modifier onlyValidInsuranceControllers(uint256 ins) {\r\n        bytes32 ctrl = insurance[ins].controllerState;\r\n        if (_verifyInsuranceControllers(msg.sender, ins)) {\r\n            _;\r\n        } else {\r\n            revert(\"Controller is not valid\");\r\n        }\r\n    }\r\n\r\n    modifier onlyValidProjectControllers (uint256 disputeId) {\r\n        _verifyDisputeController(disputeId);\r\n        _;\r\n    }\r\n\r\n    function setNetworkDeployed() external onlyNetworkContracts {\r\n        isNetworkDeployed = true;\r\n    }\r\n\r\n    function addNewContract(address payable dAppContractAddress) public onlyNetworkContracts {\r\n        dAppContract[dAppContractAddress] = dAppContractAddress;\r\n    }\r\n\r\n    function setProjectController(address payable controllerAddress)\r\n        external\r\n        onlyNetworkContracts\r\n    {\r\n        projectController = controllerAddress;\r\n        addNewContract(controllerAddress);\r\n        dAppState.projectController = controllerAddress;\r\n        globalControllerStates[_updateControllersHash()] = dAppState;\r\n    }\r\n\r\n    function setRefundController(address payable controllerAddress)\r\n        external\r\n        onlyNetworkContracts\r\n    {\r\n        refundController = controllerAddress;\r\n        addNewContract(controllerAddress);\r\n        dAppState.refundController = controllerAddress;\r\n        globalControllerStates[_updateControllersHash()] = dAppState;\r\n    }\r\n\r\n    function setDisputeController(address payable controllerAddress)\r\n        external\r\n        onlyNetworkContracts\r\n    {\r\n        disputeController = controllerAddress;\r\n        dAppState.disputeController = controllerAddress;\r\n        addNewContract(controllerAddress);\r\n        globalControllerStates[_updateControllersHash()] = dAppState;\r\n    }\r\n\r\n    function setUtilityController(address payable controllerAddress)\r\n        external\r\n        onlyNetworkContracts\r\n    {\r\n        utilityController = controllerAddress;\r\n        dAppState.utilityController = controllerAddress;\r\n        addNewContract(controllerAddress);\r\n        globalControllerStates[_updateControllersHash()] = dAppState;\r\n    }\r\n\r\n    function setMainContract(address payable mainContract)\r\n        external\r\n        onlyNetworkContracts\r\n    {\r\n        main = mainContract;\r\n        addNewContract(mainContract);\r\n    }\r\n\r\n    function setSecondaryStorage(address payable secondaryStorageContract)\r\n        external\r\n        onlyNetworkContracts\r\n    {\r\n        require(secondaryStorage == address(0), \"Secondary storage already set\");\r\n        secondaryStorage = secondaryStorageContract;\r\n        addNewContract(secondaryStorageContract);\r\n    }\r\n\r\n    function setRefundEtherContract(address payable refundEtherContract)\r\n        external\r\n        onlyNetworkContracts\r\n    {\r\n        require(refundEtherToken == address(0), \"This address is already set\");\r\n        refundEtherToken = refundEtherContract;\r\n        addNewContract(refundEtherContract);\r\n    }\r\n\r\n    function setAffiliateEscrow(address payable affiliateEscrowAddress)\r\n        external\r\n        onlyNetworkContracts\r\n    {\r\n        require (affiliatesEscrow == address(0), \"This address is already set\");\r\n        affiliatesEscrow = affiliateEscrowAddress;\r\n        addNewContract(affiliateEscrowAddress);\r\n    }\r\n\r\n    function setModerationResources(address payable modResourcesAddr)\r\n        external\r\n        onlyNetworkContracts\r\n    {\r\n        moderationResources = modResourcesAddr;\r\n        addNewContract(modResourcesAddr);\r\n    }\r\n\r\n    function setRefundPool(address payable refundPoolAddress)\r\n        external\r\n        onlyNetworkContracts\r\n    {\r\n        require(refundPool == address(0), \"Refund Pool address is already set\");\r\n        refundPool = refundPoolAddress;\r\n        addNewContract(refundPoolAddress);\r\n    }\r\n\r\n    function setEventLogger(address payable loggerAddress)\r\n        external\r\n        onlyNetworkContracts\r\n    {\r\n        eventLogger = loggerAddress;\r\n        addNewContract(loggerAddress);\r\n    }\r\n\r\n    function setMinInvestorContribution(uint256 newMinInvestorContribution)\r\n        external\r\n        onlyNetworkContracts\r\n    {\r\n        minInvestorContribution = newMinInvestorContribution;\r\n    }\r\n\r\n    function setMaxInvestorContribution(uint256 newMaxInvestorContribution)\r\n        external\r\n        onlyNetworkContracts\r\n    {\r\n        maxInvestorContribution = newMaxInvestorContribution;\r\n    }\r\n\r\n    function setMinProtectionPercentage(uint256 newPercentage) external onlyNetworkContracts\r\n    {\r\n        minProtectionPercentage = newPercentage;\r\n    }\r\n\r\n    function setMaxProtectionPercentage(uint256 newPercentage) external onlyNetworkContracts\r\n    {\r\n        maxProtectionPercentage = newPercentage;\r\n    }\r\n\r\n    function setMinOwnerContribution(uint256 newMinOwnContrib) external onlyNetworkContracts\r\n    {\r\n        minOwnerContribution = newMinOwnContrib;\r\n    }\r\n\r\n    function setDefaultBasePolicyDuration(uint256 newBasePolicyPeriod)\r\n        external\r\n        onlyNetworkContracts\r\n    {\r\n        basePolicyDuration = newBasePolicyPeriod;\r\n    }\r\n\r\n    function setDefaultPolicyDuration(uint256 newPolicyPeriod)\r\n        external\r\n        onlyNetworkContracts\r\n    {\r\n        policyDuration = newPolicyPeriod;\r\n    }\r\n\r\n    function setDefaultRateLimits(uint256 newMinLimit, uint256 newMaxLimit)\r\n        external\r\n        onlyNetworkContracts\r\n    {\r\n        (minProtectionPercentage, maxProtectionPercentage) = (newMinLimit, newMaxLimit);\r\n    }\r\n\r\n    function setRegularContributionPercentage(uint256 newPercentage)\r\n        external\r\n        onlyNetworkContracts\r\n    {\r\n        regularContributionPercentage = newPercentage;\r\n    }\r\n\r\n    function addProject() external onlyNetworkContracts returns (uint256 pid) {\r\n        SecondaryStorageInterface secondStorage = SecondaryStorageInterface(secondaryStorage);\r\n        return secondStorage.addProject();\r\n    }\r\n\r\n    function setControllerStateToProject(uint256 pid) external onlyNetworkContracts {\r\n        SecondaryStorageInterface secondStorage = SecondaryStorageInterface(secondaryStorage);\r\n        secondStorage.setControllerStateToProject(\r\n            pid, projectController, refundController,\r\n            disputeController, utilityController, controllersHash\r\n        );\r\n    }\r\n\r\n    function addInsurance()\r\n        external\r\n        onlyNetworkContracts\r\n        returns (uint256 insuranceId)\r\n    {\r\n        return insurance.length++;\r\n    }\r\n\r\n    function setControllerStateToInsurance(uint256 insId, bytes32 cntrllrs)\r\n        external\r\n        onlyNetworkContracts\r\n    {\r\n        require(insurance[insId].controllerState == bytes32(0), \"Controllers are already set\");\r\n        insurance[insId].controllerState = cntrllrs;\r\n    }\r\n\r\n    function setInsuranceId(uint256 insId)\r\n        external\r\n        onlyValidInsuranceControllers(insId)\r\n    {\r\n        insurance[insId].investmentId = insId;\r\n    }\r\n\r\n    function setInsuranceProjectId(uint256 insId, uint256 pid)\r\n        external\r\n        onlyValidInsuranceControllers(insId)\r\n    {\r\n        insurance[insId].projectId = pid;\r\n    }\r\n\r\n    function setInsuranceOwner(uint256 insId, address insOwner)\r\n        external\r\n        onlyValidInsuranceControllers(insId)\r\n    {\r\n        insurance[insId].investmentOwner = insOwner;\r\n    }\r\n\r\n    function setEtherSecured(uint256 insId, uint256 amount)\r\n        external\r\n        onlyValidInsuranceControllers(insId)\r\n    {\r\n        insurance[insId].etherSecured = amount;\r\n    }\r\n\r\n    function setTimeOfTheRequest(uint256 insId)\r\n        external\r\n        onlyValidInsuranceControllers(insId)\r\n    {\r\n        insurance[insId].timeOfTheRequest = block.number;\r\n    }\r\n\r\n    function setInsuranceRate(\r\n        uint256 insId,\r\n        uint256 protectionPercentage\r\n    )\r\n        external\r\n        onlyValidInsuranceControllers(insId)\r\n    {\r\n        insurance[insId].insuranceRate = protectionPercentage;\r\n    }\r\n\r\n    function setPoolContribution(\r\n        uint256 insId,\r\n        uint256 amount\r\n    )\r\n        external\r\n        onlyValidInsuranceControllers(insId)\r\n    {\r\n        insurance[insId].poolContribution = amount;\r\n    }\r\n\r\n    function setVotedForARefund(uint256 insId)\r\n        external\r\n        onlyValidInsuranceControllers(insId)\r\n    {\r\n        insurance[insId].votedForARefund = true;\r\n    }\r\n\r\n    function setVotedAfterFailedVoting(uint256 insId)\r\n        external\r\n        onlyValidInsuranceControllers(insId)\r\n    {\r\n        insurance[insId].votedAfterFailedVoting = true;\r\n    }\r\n\r\n    function setIsRefunded(uint256 insId)\r\n        external\r\n        onlyValidInsuranceControllers(insId)\r\n    {\r\n        insurance[insId].isRefunded = true;\r\n    }\r\n\r\n    function cancelInsurance(uint256 insId)\r\n        external\r\n        onlyValidInsuranceControllers(insId)\r\n    {\r\n        insurance[insId].isCanceled = true;\r\n    }\r\n\r\n    function addNewInvestor(address newInvestorAddress)\r\n        external\r\n        onlyNetworkContracts\r\n        returns (uint256 numberOfInvestors)\r\n    {\r\n        return investors.push(newInvestorAddress);\r\n    }\r\n\r\n    function setInvestorId(address newInvestor, uint256 investorId)\r\n        external\r\n        onlyNetworkContracts\r\n    {\r\n        investorData[newInvestor].investorId = investorId;\r\n    }\r\n\r\n    function setInvestor(address newInvestor)\r\n        external\r\n        onlyNetworkContracts\r\n    {\r\n        Investors.add(newInvestor);\r\n    }\r\n\r\n    function setAmountAvailableForWithdraw(address userAddr, uint256 pid, uint256 amount)\r\n        external\r\n        onlyNetworkContracts\r\n        returns (uint256)\r\n    {\r\n        investorData[userAddr].withdrawable[pid] = amount;\r\n    }\r\n\r\n    function setReferrer(address newInvestor, address referrerAddress)\r\n        external\r\n        onlyNetworkContracts\r\n    {\r\n        investorData[newInvestor].referrer = referrerAddress;\r\n    }\r\n\r\n    function setPlatformModerator(\r\n        address newPlModAddr\r\n    )\r\n        public\r\n        onlyNetworkContracts\r\n    {\r\n        PlatformModerators.add(newPlModAddr);\r\n    }\r\n\r\n    function setCommunityModerator(\r\n        address newCommunityModAddr\r\n    )\r\n        external\r\n        onlyNetworkContracts\r\n    {\r\n        CommunityModerators.add(newCommunityModAddr);\r\n    }\r\n\r\n    function setArbiter(\r\n        address newArbiterAddr\r\n    )\r\n        external\r\n        onlyNetworkContracts\r\n    {\r\n        Arbiters.add(newArbiterAddr);\r\n    }\r\n\r\n    function setProjectOwner(\r\n        address newOwnerAddr\r\n    )\r\n        external\r\n        onlyNetworkContracts\r\n    {\r\n        ProjectOwners.add(newOwnerAddr);\r\n    }\r\n\r\n    function setPayment(address payee, uint256 did, uint256 amount)\r\n        external\r\n        onlyNetworkContracts\r\n    {\r\n        payment[payee][did] = amount;\r\n    }\r\n\r\n    function setValidationToken(address verificatedUser, uint256 validationNumber)\r\n        external\r\n        onlyNetworkContracts\r\n    {\r\n        require(validationToken[verificatedUser] == 0, \"Validation token is already set\");\r\n        validationToken[verificatedUser] = validationNumber;\r\n    }\r\n\r\n    function addDispute() external onlyNetworkContracts returns (uint256 disputeId) {\r\n        return dispute.length++;\r\n    }\r\n\r\n    function addDisputeIds(uint256 disputeId, uint256 pid)\r\n        external\r\n        onlyValidProjectControllers(disputeId)\r\n    {\r\n        dispute[disputeId].disputeId = disputeId;\r\n        dispute[disputeId].pid = pid;\r\n    }\r\n\r\n    function setDisputeVotePeriod(uint256 disputeId, uint256 numberOfBlock)\r\n        external\r\n        onlyValidProjectControllers(disputeId)\r\n    {\r\n        dispute[disputeId].disputeVotePeriod = numberOfBlock;\r\n    }\r\n\r\n    function setDisputeControllerOfProject(uint256 disputeId, address disputeCtrlAddr)\r\n        external\r\n        onlyNetworkContracts\r\n    {\r\n        require(dispute[disputeId].disputeController == address(0), \"This address is already set\");\r\n        dispute[disputeId].disputeController = disputeCtrlAddr;\r\n    }\r\n\r\n    function setVotedForRefundState(uint256 disputeId, uint256 numberOfBlock)\r\n        external\r\n        onlyValidProjectControllers(disputeId)\r\n    {\r\n        dispute[disputeId].resultCountPeriod = numberOfBlock;\r\n    }\r\n\r\n    function setResultCountPeriod(uint256 disputeId, uint256 numberOfBlock)\r\n        external\r\n        onlyValidProjectControllers(disputeId)\r\n    {\r\n        dispute[disputeId].resultCountPeriod = numberOfBlock;\r\n    }\r\n\r\n    function setNumberOfVotesForRefundState(uint256 disputeId)\r\n        external\r\n        onlyValidProjectControllers(disputeId)\r\n    {\r\n        dispute[disputeId].numberOfVotesForRefundState++;\r\n    }\r\n\r\n    function setNumberOfVotesAgainstRefundState(uint256 disputeId)\r\n        external\r\n        onlyValidProjectControllers(disputeId)\r\n    {\r\n        dispute[disputeId].numberOfVotesAgainstRefundState++;\r\n    }\r\n\r\n    function setDisputeLotteryPrize(uint256 disputeId, uint256 amount)\r\n        external\r\n        onlyValidProjectControllers(disputeId)\r\n    {\r\n        dispute[disputeId].votingPrize = amount;\r\n    }\r\n\r\n    function setEntryFee(uint256 disputeId, uint256 amount)\r\n        external\r\n        onlyValidProjectControllers(disputeId)\r\n    {\r\n        dispute[disputeId].entryFee = amount;\r\n    }\r\n\r\n    function setDisputeCreator(uint256 disputeId, address payable creator)\r\n        external\r\n        onlyValidProjectControllers(disputeId)\r\n    {\r\n        dispute[disputeId].creator = creator;\r\n    }\r\n\r\n    function addToRandomNumberBase(uint256 disputeId, uint256 number)\r\n        external\r\n        onlyValidProjectControllers(disputeId)\r\n    {\r\n        dispute[disputeId].numbers.push(number);\r\n    }\r\n\r\n    function setPublicDisputeURL(uint256 disputeId, bytes calldata disputeUrl)\r\n        external\r\n        onlyValidProjectControllers(disputeId)\r\n    {\r\n        dispute[disputeId].publicDisputeUrl = disputeUrl;\r\n    }\r\n\r\n    function addDisputeVoter(uint256 disputeId, address payable voterAddress)\r\n        external\r\n        onlyValidProjectControllers(disputeId)\r\n        returns (uint256 voterId)\r\n    {\r\n        return dispute[disputeId].voters.push(voterAddress);\r\n    }\r\n\r\n    function removeDisputeVoter(uint256 disputeId, uint256 voterIndex)\r\n        external\r\n        onlyValidProjectControllers(disputeId)\r\n    {\r\n        uint256 lastVoter = dispute[disputeId].voters.length - 1;\r\n        dispute[disputeId].voters[voterIndex] = dispute[disputeId].voters[lastVoter];\r\n        dispute[disputeId].voters.length--;\r\n    }\r\n\r\n    function addHiddenVote(uint256 disputeId, address voter, bytes32 voteHash)\r\n        external\r\n        onlyValidProjectControllers(disputeId)\r\n    {\r\n        dispute[disputeId].hiddenVote[voter] = voteHash;\r\n    }\r\n\r\n    function addRevealedVote(uint256 disputeId, address voter, bool vote)\r\n        external\r\n        onlyValidProjectControllers(disputeId)\r\n    {\r\n        dispute[disputeId].revealedVote[voter] = vote;\r\n    }\r\n\r\n    function randomNumberGenerator(uint256 disputeId)\r\n        external\r\n        view\r\n        onlyValidProjectControllers(disputeId)\r\n        returns (uint256 rng)\r\n    {\r\n        rng = dispute[disputeId].numbers[0];\r\n        for (uint256 i = 1; dispute[disputeId].numbers.length > i; i++) {\r\n            rng ^= dispute[disputeId].numbers[i];\r\n        }\r\n    }\r\n\r\n    function getCurrentControllersHash() external view returns (bytes32) {\r\n        return controllersHash;\r\n    }\r\n\r\n    function getProjectController() external view returns (address payable) {\r\n        return projectController;\r\n    }\r\n\r\n    function getRefundController() external view returns (address payable) {\r\n        return refundController;\r\n    }\r\n\r\n    function getDisputeController() external view returns (address payable) {\r\n        return disputeController;\r\n    }\r\n\r\n    function getUtilityController() external view returns (address payable) {\r\n        return utilityController;\r\n    }\r\n\r\n    function getRefundEtherTokenAddress() external view returns (address payable) {\r\n        return refundEtherToken;\r\n    }\r\n\r\n    function getAffiliateEscrow() external view returns (address payable) {\r\n        return affiliatesEscrow;\r\n    }\r\n\r\n    function getRefundPool() external view returns (address payable) {\r\n        return refundPool;\r\n    }\r\n\r\n    function getEventLogger() external view returns (address) {\r\n        return eventLogger;\r\n    }\r\n\r\n    function getModerationResources() external view returns (address payable) {\r\n        return moderationResources;\r\n    }\r\n\r\n    function getMainContract() external view returns (address payable) {\r\n        return main;\r\n    }\r\n\r\n    function getSecondaryStorage() external view returns (address) {\r\n        return secondaryStorage;\r\n    }\r\n\r\n    function getPrimaryStorage() external view returns(address) {\r\n        return address(this);\r\n    }\r\n\r\n    function getdAppState(bytes32 cntrllrs)\r\n        external\r\n        view\r\n        returns (\r\n            address payable projectCtrl,\r\n            address payable refundCtrl,\r\n            address payable disputeCtrl,\r\n            address payable utilityCtrl\r\n        )\r\n    {\r\n        return (globalControllerStates[cntrllrs].projectController,\r\n                globalControllerStates[cntrllrs].refundController,\r\n                globalControllerStates[cntrllrs].disputeController,\r\n                globalControllerStates[cntrllrs].utilityController\r\n        );\r\n    }\r\n\r\n    function oldProjectCtrl(bytes32 cntrllrs)\r\n        external\r\n        view\r\n        returns (address payable)\r\n    {\r\n        return globalControllerStates[cntrllrs].projectController;\r\n    }\r\n\r\n    function oldRefundCtrl(bytes32 cntrllrs)\r\n        external\r\n        view\r\n        returns (address payable)\r\n    {\r\n        return globalControllerStates[cntrllrs].refundController;\r\n    }\r\n\r\n    function oldDisputeCtrl(bytes32 cntrllrs)\r\n        external\r\n        view\r\n        returns (address payable)\r\n    {\r\n        return globalControllerStates[cntrllrs].disputeController;\r\n    }\r\n\r\n    function oldUtilityCtrl(bytes32 cntrllrs)\r\n        external\r\n        view\r\n        returns (address payable)\r\n    {\r\n        return globalControllerStates[cntrllrs].utilityController;\r\n    }\r\n\r\n    function getIsNetworkDeployed() external view returns (bool) {\r\n        return isNetworkDeployed;\r\n    }\r\n\r\n    function getMinInvestorContribution() external view returns (uint256) {\r\n        return minInvestorContribution;\r\n    }\r\n\r\n    function getMaxInvestorContribution() external view returns (uint256) {\r\n        return maxInvestorContribution;\r\n    }\r\n\r\n    function getNumberOfInvestors() external view returns (uint256) {\r\n        return investors.length;\r\n    }\r\n\r\n    function getNumberOfInvestments() external view returns (uint256) {\r\n        return insurance.length;\r\n    }\r\n\r\n    function getMinProtectionPercentage() external view returns (uint256) {\r\n        return minProtectionPercentage;\r\n    }\r\n\r\n    function getMaxProtectionPercentage() external view returns (uint256) {\r\n        return maxProtectionPercentage;\r\n    }\r\n\r\n    function getMinOwnerContribution() external view returns (uint256)\r\n    {\r\n        return minOwnerContribution;\r\n    }\r\n\r\n    function getDefaultPolicyDuration() external view returns (uint256) {\r\n        return policyDuration;\r\n    }\r\n\r\n    function getDefaultBasePolicyDuration() external view returns (uint256) {\r\n        return basePolicyDuration;\r\n    }\r\n\r\n    function getRegularContributionPercentage() external view returns (uint256) {\r\n        return regularContributionPercentage;\r\n    }\r\n\r\n    function getInsuranceControllerState(uint256 insId) external view returns(bytes32) {\r\n        return insurance[insId].controllerState;\r\n    }\r\n\r\n    function getPoolContribution(uint256 insId) external view returns (uint256) {\r\n        return insurance[insId].poolContribution;\r\n    }\r\n\r\n    function getInsuranceRate(uint256 insId) external view returns (uint256) {\r\n        return insurance[insId].insuranceRate;\r\n    }\r\n\r\n    function isCanceled(uint256 insId) external view returns (bool) {\r\n        return insurance[insId].isCanceled;\r\n    }\r\n\r\n    function getProjectOfInvestment(uint256 insId)\r\n        external\r\n        view\r\n        returns (uint256 projectId)\r\n    {\r\n        return insurance[insId].projectId;\r\n    }\r\n\r\n    function getEtherSecured(uint256 insId) external view returns (uint256) {\r\n        return insurance[insId].etherSecured;\r\n    }\r\n\r\n    function getInsuranceOwner(uint256 insId) external view returns (address) {\r\n        return insurance[insId].investmentOwner;\r\n    }\r\n\r\n    function getTimeOfTheRequest(uint256 insId) external view returns (uint256) {\r\n        return insurance[insId].timeOfTheRequest;\r\n    }\r\n\r\n    function getVotedForARefund(uint256 insId) external view returns (bool) {\r\n        return insurance[insId].votedForARefund;\r\n    }\r\n\r\n    function getVotedAfterFailedVoting(uint256 insId) external view returns (bool) {\r\n        return insurance[insId].votedAfterFailedVoting;\r\n    }\r\n\r\n    function getIsRefunded(uint256 insId) external view returns (bool) {\r\n        return insurance[insId].isRefunded;\r\n    }\r\n\r\n    function getDisputeProjectId(uint256 disputeId) external view returns (uint256) {\r\n        return dispute[disputeId].pid;\r\n    }\r\n\r\n    function getDisputesOfProject(uint256 pid) external view returns (uint256[] memory disputeIds) {\r\n        for (uint256 i = 0; i < dispute.length; i++) {\r\n            uint256 ids;\r\n            if (dispute[i].pid == pid) {\r\n                disputeIds[ids] = pid;\r\n                ids++;\r\n            }\r\n        }\r\n        return disputeIds;\r\n    }\r\n\r\n    function getDisputeControllerOfProject(uint256 disputeId) external view returns (address) {\r\n        return dispute[disputeId].disputeController;\r\n    }\r\n\r\n    function getDisputeVotePeriod(uint256 disputeId) external view returns (uint256) {\r\n        return dispute[disputeId].disputeVotePeriod;\r\n    }\r\n\r\n    function getResultCountPeriod(uint256 disputeId) external view returns (uint256) {\r\n        return dispute[disputeId].resultCountPeriod;\r\n    }\r\n\r\n    function getDisputeLotteryPrize(uint256 disputeId) external view returns (uint256 votingPrize) {\r\n        return dispute[disputeId].votingPrize;\r\n    }\r\n\r\n    function getNumberOfVotesForRefundState(uint256 disputeId)\r\n        external\r\n        view\r\n        onlyNetworkContracts\r\n        returns (uint256)\r\n    {\r\n        return dispute[disputeId].numberOfVotesForRefundState;\r\n    }\r\n\r\n    function getNumberOfVotesAgainstRefundState(uint256 disputeId)\r\n\t\texternal\r\n\t\tview\r\n\t\tonlyNetworkContracts\r\n\t\treturns (uint256)\r\n\t{\r\n        return dispute[disputeId].numberOfVotesAgainstRefundState;\r\n    }\r\n\r\n    function getEntryFee(uint256 disputeId) external view returns (uint256) {\r\n        return dispute[disputeId].entryFee;\r\n    }\r\n\r\n    function getDisputeCreator(uint256 disputeId) external view returns (address payable) {\r\n        return dispute[disputeId].creator;\r\n    }\r\n\r\n    function getRandomNumberBaseLength(uint256 disputeId) external view returns (uint256) {\r\n        return dispute[disputeId].numbers.length;\r\n    }\r\n\r\n    function getPublicDisputeURL(uint256 disputeId) external view returns (bytes memory) {\r\n        return dispute[disputeId].publicDisputeUrl;\r\n    }\r\n\r\n    function getDisputeVoter(uint256 disputeId, uint256 voterId) external view returns (address payable) {\r\n        return dispute[disputeId].voters[voterId];\r\n    }\r\n\r\n    function getDisputeNumberOfVoters(uint256 disputeId) external view returns (uint256) {\r\n        return dispute[disputeId].voters.length;\r\n    }\r\n\r\n    function getHiddenVote(uint256 disputeId, address voter)\r\n        external\r\n        view\r\n        onlyNetworkContracts\r\n        returns (bytes32)\r\n    {\r\n        return dispute[disputeId].hiddenVote[voter];\r\n    }\r\n\r\n    function getRevealedVote(uint256 disputeId, address voter)\r\n\t\t    external\r\n\t\t\t\tview\r\n\t\t\t\tonlyNetworkContracts\r\n\t\t\t\treturns (bool) {\r\n        return dispute[disputeId].revealedVote[voter];\r\n    }\r\n\r\n    function isVoteRevealed(uint256 disputeId, address voter)\r\n        external\r\n        view\r\n        onlyNetworkContracts\r\n        returns (bool)\r\n    {\r\n        for (uint256 i = 0; i < dispute[disputeId].voters.length; i++) {\r\n            if (dispute[disputeId].voters[i] == voter) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function getInvestorAddressByInsurance(uint256 insId) external view returns (address) {\r\n        return insurance[insId].investmentOwner;\r\n    }\r\n\r\n    function getInvestorAddressById(uint256 investorId) external view returns (address) {\r\n        return investors[investorId];\r\n    }\r\n\r\n    function getInvestorId(address investor) external view returns (uint256) {\r\n        return investorData[investor].investorId;\r\n    }\r\n\r\n    function getAmountAvailableForWithdraw(address userAddr, uint256 pid) external view returns (uint256) {\r\n        return investorData[userAddr].withdrawable[pid];\r\n    }\r\n\r\n    function getReferrer(address investor) external view returns (address) {\r\n        return investorData[investor].referrer;\r\n    }\r\n\r\n    function isInvestor(address who) external view returns (bool) {\r\n        return Investors.has(who);\r\n    }\r\n\r\n    function isPlatformModerator(address who) public view returns (bool) {\r\n        return PlatformModerators.has(who);\r\n    }\r\n\r\n    function isCommunityModerator(address who) external view returns (bool) {\r\n        return CommunityModerators.has(who);\r\n    }\r\n\r\n    function isProjectOwner(address who) external view returns (bool) {\r\n        return ProjectOwners.has(who);\r\n    }\r\n\r\n    function isArbiter(address who) external view returns (bool) {\r\n        return Arbiters.has(who);\r\n    }\r\n\r\n    function getPayment(address payee, uint256 did) external view returns (uint256) {\r\n        return payment[payee][did];\r\n    }\r\n\r\n    function onlyInsuranceControllers(address caller, uint256 ins) external view returns (bool) {\r\n        return _verifyInsuranceControllers(caller, ins);\r\n    }\r\n\r\n    function getValidationToken(address verificatedUser) external view returns (uint256) {\r\n        return validationToken[verificatedUser];\r\n    }\r\n\r\n    function _updateControllersHash() internal returns (bytes32) {\r\n        return controllersHash = keccak256(\r\n            abi.encodePacked(\r\n                projectController,\r\n                refundController,\r\n                disputeController,\r\n                utilityController\r\n        ));\r\n    }\r\n\r\n    function _verifyInsuranceControllers(address caller, uint256 ins) internal view returns (bool) {\r\n        bytes32 ctrl = insurance[ins].controllerState;\r\n        if (caller != globalControllerStates[ctrl].projectController &&\r\n            caller != globalControllerStates[ctrl].refundController  &&\r\n            caller != globalControllerStates[ctrl].disputeController &&\r\n            caller != globalControllerStates[ctrl].utilityController) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function _verifyDisputeController(uint256 disputeId) internal view {\r\n        if (msg.sender != dispute[disputeId].disputeController) {\r\n            revert(\"Invalid dispute controller\");\r\n        }\r\n    }\r\n\r\n    function _onlyDappContracts(address caller) internal view returns (bool) {\r\n        if (isPlatformModerator(caller)) {\r\n            return (isNetworkDeployed == false);\r\n        } else {\r\n            return(dAppContract[caller] != address(0));\r\n        }\r\n    }\r\n\r\n    function allowOnlyDappContracts(address caller) external view returns (bool) {\r\n        return _onlyDappContracts(caller);\r\n    }\r\n\r\n\r\n   /**\r\n    *\r\n    * Additional Amenable to evolution, extensible, flat key-value pair storage.\r\n    * To be used for major dApp upgrades requiring additional data structures.\r\n    *\r\n    */\r\n\r\n    mapping(bytes32 => uint256)         private uintStorage;\r\n    mapping(bytes32 => address)         private addressStorage;\r\n    mapping(bytes32 => bytes)           private bytesStorage;\r\n    mapping(bytes32 => bool)            private boolStorage;\r\n    mapping(bytes32 => string)          private stringStorage;\r\n    mapping(bytes32 => int256)          private intStorage;\r\n    mapping(bytes32 => address payable) private payableAddressStorage;\r\n\r\n    function getAddress(bytes32 key) external view returns (address) {\r\n        return addressStorage[key];\r\n    }\r\n\r\n    function getUint(bytes32 key) external view returns (uint) {\r\n        return uintStorage[key];\r\n    }\r\n\r\n    function getBytes(bytes32 key) external view returns (bytes memory) {\r\n        return bytesStorage[key];\r\n    }\r\n\r\n    function getBool(bytes32 key) external view returns (bool) {\r\n        return boolStorage[key];\r\n    }\r\n\r\n    function getString(bytes32 key) external view returns (string memory) {\r\n        return stringStorage[key];\r\n    }\r\n\r\n    function getInt(bytes32 key) external view returns (int) {\r\n        return intStorage[key];\r\n    }\r\n\r\n    function getPayableAddress(bytes32 key) external view returns (address payable) {\r\n        return payableAddressStorage[key];\r\n    }\r\n\r\n    function setAddress(bytes32 key, address value) external onlyNetworkContracts {\r\n        addressStorage[key] = value;\r\n    }\r\n\r\n    function setUint(bytes32 key, uint value) external onlyNetworkContracts {\r\n        uintStorage[key] = value;\r\n    }\r\n\r\n    function setBytes(bytes32 key, bytes calldata value) external onlyNetworkContracts {\r\n        bytesStorage[key] = value;\r\n    }\r\n\r\n    function setBool(bytes32 key, bool value) external onlyNetworkContracts {\r\n        boolStorage[key] = value;\r\n    }\r\n\r\n    function setString(bytes32 key, string calldata value) external onlyNetworkContracts {\r\n        stringStorage[key] = value;\r\n    }\r\n\r\n    function setInt(bytes32 key, int value) external onlyNetworkContracts {\r\n        intStorage[key] = value;\r\n    }\r\n\r\n    function setPayableAddress(bytes32 key, address payable value) external onlyNetworkContracts {\r\n        payableAddressStorage[key] = value;\r\n    }\r\n\r\n    function deleteAddress(bytes32 key) external onlyNetworkContracts {\r\n        delete addressStorage[key];\r\n    }\r\n\r\n    function deleteUint(bytes32 key) external onlyNetworkContracts {\r\n        delete uintStorage[key];\r\n    }\r\n\r\n    function deleteString(bytes32 key) external onlyNetworkContracts {\r\n        delete stringStorage[key];\r\n    }\r\n\r\n    function deleteBytes(bytes32 key) external onlyNetworkContracts {\r\n        delete bytesStorage[key];\r\n    }\r\n\r\n    function deleteBool(bytes32 key) external onlyNetworkContracts {\r\n        delete boolStorage[key];\r\n    }\r\n\r\n    function deleteInt(bytes32 key) external onlyNetworkContracts {\r\n        delete intStorage[key];\r\n    }\r\n\r\n    function deletePayableAddress(bytes32 key) external onlyNetworkContracts {\r\n        delete payableAddressStorage[key];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"disputeId\",\"type\":\"uint256\"},{\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"getHiddenVote\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPercentage\",\"type\":\"uint256\"}],\"name\":\"setMinProtectionPercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"disputeId\",\"type\":\"uint256\"},{\"name\":\"voterIndex\",\"type\":\"uint256\"}],\"name\":\"removeDisputeVoter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"setControllerStateToProject\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"deleteAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"disputeId\",\"type\":\"uint256\"}],\"name\":\"getDisputeCreator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"},{\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setPayableAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"insId\",\"type\":\"uint256\"}],\"name\":\"setInsuranceId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getIsNetworkDeployed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSecondaryStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cntrllrs\",\"type\":\"bytes32\"}],\"name\":\"oldRefundCtrl\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"insId\",\"type\":\"uint256\"}],\"name\":\"getProjectOfInvestment\",\"outputs\":[{\"name\":\"projectId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cntrllrs\",\"type\":\"bytes32\"}],\"name\":\"oldUtilityCtrl\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newArbiterAddr\",\"type\":\"address\"}],\"name\":\"setArbiter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"disputeId\",\"type\":\"uint256\"}],\"name\":\"randomNumberGenerator\",\"outputs\":[{\"name\":\"rng\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"disputeId\",\"type\":\"uint256\"}],\"name\":\"setNumberOfVotesForRefundState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"verificatedUser\",\"type\":\"address\"}],\"name\":\"getValidationToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"insId\",\"type\":\"uint256\"}],\"name\":\"getInvestorAddressByInsurance\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"insId\",\"type\":\"uint256\"}],\"name\":\"setVotedAfterFailedVoting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"payee\",\"type\":\"address\"},{\"name\":\"did\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"disputeId\",\"type\":\"uint256\"},{\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"setDisputeCreator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"insId\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setPoolContribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRefundController\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"deleteBool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"},{\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"setBytes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"disputeId\",\"type\":\"uint256\"},{\"name\":\"numberOfBlock\",\"type\":\"uint256\"}],\"name\":\"setResultCountPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPolicyPeriod\",\"type\":\"uint256\"}],\"name\":\"setDefaultPolicyDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"setUtilityController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinOwnContrib\",\"type\":\"uint256\"}],\"name\":\"setMinOwnerContribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"disputeId\",\"type\":\"uint256\"}],\"name\":\"getDisputeProjectId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addDispute\",\"outputs\":[{\"name\":\"disputeId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"disputeId\",\"type\":\"uint256\"},{\"name\":\"disputeCtrlAddr\",\"type\":\"address\"}],\"name\":\"setDisputeControllerOfProject\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"disputeId\",\"type\":\"uint256\"}],\"name\":\"getResultCountPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"insId\",\"type\":\"uint256\"}],\"name\":\"isCanceled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinInvestorContribution\",\"type\":\"uint256\"}],\"name\":\"setMinInvestorContribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"secondaryStorageContract\",\"type\":\"address\"}],\"name\":\"setSecondaryStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mainContract\",\"type\":\"address\"}],\"name\":\"setMainContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"disputeId\",\"type\":\"uint256\"}],\"name\":\"setNumberOfVotesAgainstRefundState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"},{\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"setInt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"deletePayableAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cntrllrs\",\"type\":\"bytes32\"}],\"name\":\"oldProjectCtrl\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getModerationResources\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"affiliateEscrowAddress\",\"type\":\"address\"}],\"name\":\"setAffiliateEscrow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"refundEtherContract\",\"type\":\"address\"}],\"name\":\"setRefundEtherContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"insId\",\"type\":\"uint256\"},{\"name\":\"protectionPercentage\",\"type\":\"uint256\"}],\"name\":\"setInsuranceRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"disputeId\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setDisputeLotteryPrize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addProject\",\"outputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"getReferrer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEventLogger\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxInvestorContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"verificatedUser\",\"type\":\"address\"},{\"name\":\"validationNumber\",\"type\":\"uint256\"}],\"name\":\"setValidationToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"getInvestorId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"insId\",\"type\":\"uint256\"},{\"name\":\"cntrllrs\",\"type\":\"bytes32\"}],\"name\":\"setControllerStateToInsurance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"disputeId\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setEntryFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"disputeId\",\"type\":\"uint256\"}],\"name\":\"getDisputeControllerOfProject\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPercentage\",\"type\":\"uint256\"}],\"name\":\"setMaxProtectionPercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPercentage\",\"type\":\"uint256\"}],\"name\":\"setRegularContributionPercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"disputeId\",\"type\":\"uint256\"}],\"name\":\"getNumberOfVotesForRefundState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cntrllrs\",\"type\":\"bytes32\"}],\"name\":\"getdAppState\",\"outputs\":[{\"name\":\"projectCtrl\",\"type\":\"address\"},{\"name\":\"refundCtrl\",\"type\":\"address\"},{\"name\":\"disputeCtrl\",\"type\":\"address\"},{\"name\":\"utilityCtrl\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newInvestor\",\"type\":\"address\"},{\"name\":\"investorId\",\"type\":\"uint256\"}],\"name\":\"setInvestorId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"insId\",\"type\":\"uint256\"},{\"name\":\"insOwner\",\"type\":\"address\"}],\"name\":\"setInsuranceOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"deleteBytes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddr\",\"type\":\"address\"},{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setAmountAvailableForWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentControllersHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isPlatformModerator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"insId\",\"type\":\"uint256\"}],\"name\":\"getVotedAfterFailedVoting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"},{\"name\":\"value\",\"type\":\"string\"}],\"name\":\"setString\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"setRefundController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newInvestorAddress\",\"type\":\"address\"}],\"name\":\"addNewInvestor\",\"outputs\":[{\"name\":\"numberOfInvestors\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRegularContributionPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"loggerAddress\",\"type\":\"address\"}],\"name\":\"setEventLogger\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newInvestor\",\"type\":\"address\"}],\"name\":\"setInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"modResourcesAddr\",\"type\":\"address\"}],\"name\":\"setModerationResources\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDisputeController\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"disputeId\",\"type\":\"uint256\"},{\"name\":\"voter\",\"type\":\"address\"},{\"name\":\"voteHash\",\"type\":\"bytes32\"}],\"name\":\"addHiddenVote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxProtectionPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getBool\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"disputeId\",\"type\":\"uint256\"},{\"name\":\"voterId\",\"type\":\"uint256\"}],\"name\":\"getDisputeVoter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"setDisputeController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addInsurance\",\"outputs\":[{\"name\":\"insuranceId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"disputeId\",\"type\":\"uint256\"},{\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"isVoteRevealed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCommunityModAddr\",\"type\":\"address\"}],\"name\":\"setCommunityModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPlModAddr\",\"type\":\"address\"}],\"name\":\"setPlatformModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"disputeId\",\"type\":\"uint256\"}],\"name\":\"getDisputeLotteryPrize\",\"outputs\":[{\"name\":\"votingPrize\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"insId\",\"type\":\"uint256\"}],\"name\":\"cancelInsurance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"deleteInt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMainContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"insId\",\"type\":\"uint256\"}],\"name\":\"getInsuranceOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"disputeId\",\"type\":\"uint256\"},{\"name\":\"numberOfBlock\",\"type\":\"uint256\"}],\"name\":\"setDisputeVotePeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"insId\",\"type\":\"uint256\"},{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"setInsuranceProjectId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"insId\",\"type\":\"uint256\"}],\"name\":\"getInsuranceControllerState\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"insId\",\"type\":\"uint256\"}],\"name\":\"getTimeOfTheRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"payee\",\"type\":\"address\"},{\"name\":\"did\",\"type\":\"uint256\"}],\"name\":\"getPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"disputeId\",\"type\":\"uint256\"}],\"name\":\"getEntryFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getString\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isCommunityModerator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dAppContractAddress\",\"type\":\"address\"}],\"name\":\"addNewContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwnerAddr\",\"type\":\"address\"}],\"name\":\"setProjectOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"investorId\",\"type\":\"uint256\"}],\"name\":\"getInvestorAddressById\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setNetworkDeployed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"insId\",\"type\":\"uint256\"}],\"name\":\"getIsRefunded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"insId\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setEtherSecured\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrimaryStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRefundEtherTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMinInvestorContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"},{\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setBool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"insId\",\"type\":\"uint256\"}],\"name\":\"setVotedForARefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"allowOnlyDappContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"disputeId\",\"type\":\"uint256\"},{\"name\":\"disputeUrl\",\"type\":\"bytes\"}],\"name\":\"setPublicDisputeURL\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"insId\",\"type\":\"uint256\"}],\"name\":\"setIsRefunded\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddr\",\"type\":\"address\"},{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getAmountAvailableForWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumberOfInvestments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getDisputesOfProject\",\"outputs\":[{\"name\":\"disputeIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"insId\",\"type\":\"uint256\"}],\"name\":\"getVotedForARefund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"disputeId\",\"type\":\"uint256\"},{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"addDisputeIds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"setProjectController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDefaultBasePolicyDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUtilityController\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newInvestor\",\"type\":\"address\"},{\"name\":\"referrerAddress\",\"type\":\"address\"}],\"name\":\"setReferrer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getUint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getBytes\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"disputeId\",\"type\":\"uint256\"}],\"name\":\"getPublicDisputeURL\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBasePolicyPeriod\",\"type\":\"uint256\"}],\"name\":\"setDefaultBasePolicyDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cntrllrs\",\"type\":\"bytes32\"}],\"name\":\"oldDisputeCtrl\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinLimit\",\"type\":\"uint256\"},{\"name\":\"newMaxLimit\",\"type\":\"uint256\"}],\"name\":\"setDefaultRateLimits\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"},{\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"insId\",\"type\":\"uint256\"}],\"name\":\"getEtherSecured\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"refundPoolAddress\",\"type\":\"address\"}],\"name\":\"setRefundPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"disputeId\",\"type\":\"uint256\"},{\"name\":\"voter\",\"type\":\"address\"},{\"name\":\"vote\",\"type\":\"bool\"}],\"name\":\"addRevealedVote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"insId\",\"type\":\"uint256\"}],\"name\":\"setTimeOfTheRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getProjectController\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isProjectOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getInt\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"disputeId\",\"type\":\"uint256\"},{\"name\":\"voterAddress\",\"type\":\"address\"}],\"name\":\"addDisputeVoter\",\"outputs\":[{\"name\":\"voterId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"disputeId\",\"type\":\"uint256\"},{\"name\":\"numberOfBlock\",\"type\":\"uint256\"}],\"name\":\"setVotedForRefundState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setUint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"deleteUint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"insId\",\"type\":\"uint256\"}],\"name\":\"getInsuranceRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumberOfInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"disputeId\",\"type\":\"uint256\"}],\"name\":\"getDisputeNumberOfVoters\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"insId\",\"type\":\"uint256\"}],\"name\":\"getPoolContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getPayableAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAffiliateEscrow\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMinOwnerContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"disputeId\",\"type\":\"uint256\"}],\"name\":\"getRandomNumberBaseLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDefaultPolicyDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"disputeId\",\"type\":\"uint256\"}],\"name\":\"getDisputeVotePeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"caller\",\"type\":\"address\"},{\"name\":\"ins\",\"type\":\"uint256\"}],\"name\":\"onlyInsuranceControllers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isArbiter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRefundPool\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"deleteString\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"disputeId\",\"type\":\"uint256\"}],\"name\":\"getNumberOfVotesAgainstRefundState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMinProtectionPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMaxInvestorContribution\",\"type\":\"uint256\"}],\"name\":\"setMaxInvestorContribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"disputeId\",\"type\":\"uint256\"},{\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"getRevealedVote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"disputeId\",\"type\":\"uint256\"},{\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"addToRandomNumberBase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"PrimaryStorage","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"500000","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e1c458dacd5d89027c1ab2a2231e1067ee757b5410525dfb5a20a563ef191530"}]}