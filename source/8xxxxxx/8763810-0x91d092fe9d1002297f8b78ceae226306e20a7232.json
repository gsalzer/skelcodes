{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.11;\r\n\r\ncontract LegendreBounty {\r\n\r\n    struct Challenge {\r\n        uint check_value;\r\n        uint check_length;\r\n        uint prime;\r\n        uint bounty;\r\n        bool redeemed;\r\n    }\r\n\r\n    uint constant LEGENDRE_BIT_MULTI_MAX = 256;\r\n    uint constant HOUR = 3600;\r\n    uint constant DAY = 24 * HOUR;\r\n    uint constant CLAIM_DELAY = 1 * DAY;\r\n\r\n    address owner;\r\n\r\n    mapping(uint => Challenge) public challenges;\r\n    uint public challenges_length;\r\n\r\n    mapping(bytes32 => uint256) public claims;\r\n\r\n\r\n    constructor () public payable {\r\n        owner = msg.sender;\r\n        // Real challenges\r\n        challenges[0] = Challenge({check_value: 0x00000000000000000000000000000000574fb3b032a69799873a3335cf928752,\r\n                            check_length: 128,\r\n                            prime: 0x000000000000000000000000000000000000000000000000ffffffffffffffc5,\r\n                            bounty: 1000000000000000000,\r\n                            redeemed: true});\r\n        challenges[1] = Challenge({check_value: 0x0000000000000000000000000005bfc5abb616dcb96eb812884d9be93ef9f42e,\r\n                            check_length: 148,\r\n                            prime: 0x0000000000000000000000000000000000000000000003ffffffffffffffffdd,\r\n                            bounty: 2000000000000000000,\r\n                            redeemed: false});\r\n        challenges[2] = Challenge({check_value: 0x000000000000000000000000000bafca94ade9b5201633be31512efcaec7cbe6,\r\n                            check_length: 148,\r\n                            prime: 0x0000000000000000000000000000000000000000000fffffffffffffffffffdd,\r\n                            bounty: 4000000000000000000,\r\n                            redeemed: false});\r\n        challenges[3] = Challenge({check_value: 0x0000000000000000000000000008544ea9871766a120112b6106bb0a2e6e34c5,\r\n                            check_length: 148,\r\n                            prime: 0x000000000000000000000000000000000000000ffffffffffffffffffffffff1,\r\n                            bounty: 8000000000000000000,\r\n                            redeemed: false});\r\n        challenges[4] = Challenge({check_value: 0x000000000000000000000000000aaf064eee3a15f46755777368a8abc00f274e,\r\n                            check_length: 148,\r\n                            prime: 0x000000000000000000000000000fffffffffffffffffffffffffffffffffff59,\r\n                            bounty: 16000000000000000000,\r\n                            redeemed: false});\r\n        challenges_length = 5;\r\n    }\r\n\r\n\r\n    function expmod(uint base, uint e, uint m) private view returns (uint o) {\r\n        assembly {\r\n            // define pointer\r\n            let p := mload(0x40)\r\n            // store data assembly-favouring ways\r\n            mstore(p, 0x20)             // Length of Base\r\n            mstore(add(p, 0x20), 0x20)  // Length of Exponent\r\n            mstore(add(p, 0x40), 0x20)  // Length of Modulus\r\n            mstore(add(p, 0x60), base)  // Base\r\n            mstore(add(p, 0x80), e)     // Exponent\r\n            mstore(add(p, 0xa0), m)     // Modulus\r\n            if iszero(staticcall(sub(gas, 2000), 0x05, p, 0xc0, p, 0x20)) {\r\n                revert(0, 0)\r\n            }\r\n            // data\r\n            o := mload(p)\r\n        }\r\n    }\r\n    \r\n    \r\n    function legendre_bit(uint input_a, uint q) private view returns (uint) {\r\n        uint a = input_a;\r\n        if(a >= q) {\r\n            a = a % q;\r\n        }\r\n        if(a == 0) {\r\n            return 1;\r\n        }\r\n    \r\n        require(q > a && q & 1 == 1);\r\n    \r\n        uint e = (q - 1) / 2;\r\n    \r\n        // Call expmod precompile\r\n        uint c = expmod(a, e, q);\r\n    \r\n        if(c == q - 1) {\r\n            return 0;\r\n        }\r\n        return 1;\r\n    }\r\n    \r\n    \r\n    function legendre_bit_multi(uint input_a, uint q, uint n) public view returns (uint) {\r\n        uint a = input_a;\r\n        uint r = 0;\r\n        require(n < LEGENDRE_BIT_MULTI_MAX);\r\n        for(uint i = 0; i < n; i++) {\r\n            r = r << 1;\r\n            r = r ^ legendre_bit(a, q);\r\n            a += 1;\r\n        }\r\n        return r;\r\n    }\r\n    \r\n    \r\n    function claim_bounty(bytes32 claim_hash) public {\r\n        require(claims[claim_hash] == 0);\r\n        claims[claim_hash] = block.timestamp + CLAIM_DELAY;\r\n    }\r\n    \r\n    \r\n    function redeem_bounty(uint challenge_no, uint key) public {\r\n        require(challenge_no < challenges_length);\r\n        require(!challenges[challenge_no].redeemed);\r\n    \r\n        bytes32 claim_hash = sha256(abi.encodePacked(bytes32(key), bytes32(uint256(msg.sender))));\r\n        require(claims[claim_hash] > 0);\r\n        require(claims[claim_hash] < block.timestamp);\r\n    \r\n        uint check_value = legendre_bit_multi(key, challenges[challenge_no].prime, challenges[challenge_no].check_length);\r\n        require(check_value == challenges[challenge_no].check_value);\r\n        challenges[challenge_no].redeemed = true;\r\n        msg.sender.transfer(challenges[challenge_no].bounty);\r\n    }\r\n    \r\n    \r\n    function terminate_contract() public {\r\n        require(msg.sender == owner);\r\n        selfdestruct(msg.sender);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"challenges_length\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"challenge_no\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"}],\"name\":\"redeem_bounty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"claim_hash\",\"type\":\"bytes32\"}],\"name\":\"claim_bounty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"terminate_contract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"challenges\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"check_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"check_length\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"redeemed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"input_a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"q\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"legendre_bit_multi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"claims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"}]","ContractName":"LegendreBounty","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"BSD-3-Clause","SwarmSource":"bzzr://0bc11bc407eb003523ce76c8447d5dee517b9f278abd7a83a6134d55991d13df"}]}