{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n\r\n/**\r\n * Abstract contract, requires implementation to specify who can commit blocks and what\r\n *   happens when a successful proof is presented\r\n * Verifies Merkle-tree inclusion proofs that show that certain address has\r\n *   certain earnings balance, according to hash published (\"signed\") by a\r\n *   sidechain operator or similar authority\r\n *\r\n * ABOUT Merkle-tree inclusion proof: Merkle-tree inclusion proof is an algorithm to prove memebership\r\n * in a set using minimal [ie log(N)] inputs. The hashes of the items are arranged by hash value in a binary Merkle tree where \r\n * each node contains a hash of the hashes of nodes below. The root node (ie \"root hash\") contains hash information \r\n * about the entire set, and that is the data that BalanceVerifier posts to the blockchain. To prove membership, you walk up the \r\n * tree from the node in question, and use the supplied hashes (the \"proof\") to fill in the hashes from the adjacent nodes. The proof  \r\n * succeeds iff you end up with the known root hash when you get to the top of the tree. \r\n * See https://medium.com/crypto-0-nite/merkle-proofs-explained-6dd429623dc5\r\n *\r\n * Merkle-tree inclusion proof is a RELATED concept to the blockchain Merkle tree, but a somewhat DIFFERENT application. \r\n * BalanceVerifier posts the root hash of the CURRENT ledger only, and this does NOT depend on the hash of previous ledgers.\r\n * This is different from the blockchain, where each block contains the hash of the previous block. \r\n *\r\n * TODO: see if it could be turned into a library, so many contracts could use it\r\n */\r\ncontract BalanceVerifier {\r\n    event BlockCreated(uint blockNumber, bytes32 rootHash, string ipfsHash);\r\n\r\n    /**\r\n     * Sidechain \"blocks\" are simply root hashes of merkle-trees constructed from its balances\r\n     * @param uint root-chain block number after which the balances were recorded\r\n     * @return bytes32 root of the balances merkle-tree at that time\r\n     */\r\n    mapping (uint => bytes32) public blockHash;\r\n\r\n    /**\r\n     * Handler for proof of sidechain balances\r\n     * It is up to the implementing contract to actually distribute out the balances\r\n     * @param blockNumber the block whose hash was used for verification\r\n     * @param account whose balances were successfully verified\r\n     * @param balance the side-chain account balance\r\n     */\r\n    function onVerifySuccess(uint blockNumber, address account, uint balance) internal;\r\n\r\n    /**\r\n     * Implementing contract should should do access checks for committing\r\n     */\r\n    function onCommit(uint blockNumber, bytes32 rootHash, string ipfsHash) internal;\r\n\r\n    /**\r\n     * Side-chain operator submits commitments to main chain. These\r\n     * For convenience, also publish the ipfsHash of the balance book JSON object\r\n     * @param blockNumber the block after which the balances were recorded\r\n     * @param rootHash root of the balances merkle-tree\r\n     * @param ipfsHash where the whole balances object can be retrieved in JSON format\r\n     */\r\n    function commit(uint blockNumber, bytes32 rootHash, string ipfsHash) external {\r\n        require(blockHash[blockNumber] == 0, \"error_overwrite\");\r\n        string memory _hash = ipfsHash;\r\n        onCommit(blockNumber, rootHash, _hash);\r\n        blockHash[blockNumber] = rootHash;\r\n        emit BlockCreated(blockNumber, rootHash, _hash);\r\n    }\r\n\r\n    /**\r\n     * Proving can be used to record the sidechain balances permanently into root chain\r\n     * @param blockNumber the block after which the balances were recorded\r\n     * @param account whose balances will be verified\r\n     * @param balance side-chain account balance\r\n     * @param proof list of hashes to prove the totalEarnings\r\n     */\r\n    function prove(uint blockNumber, address account, uint balance, bytes32[] memory proof) public {\r\n        require(proofIsCorrect(blockNumber, account, balance, proof), \"error_proof\");\r\n        onVerifySuccess(blockNumber, account, balance);\r\n    }\r\n\r\n    /**\r\n     * Check the merkle proof of balance in the given side-chain block for given account\r\n     */\r\n    function proofIsCorrect(uint blockNumber, address account, uint balance, bytes32[] memory proof) public view returns(bool) {\r\n        bytes32 hash = keccak256(abi.encodePacked(account, balance));\r\n        bytes32 rootHash = blockHash[blockNumber];\r\n        require(rootHash != 0x0, \"error_blockNotFound\");\r\n        return rootHash == calculateRootHash(hash, proof);\r\n    }\r\n\r\n    /**\r\n     * Calculate root hash of a Merkle tree, given\r\n     * @param hash of the leaf to verify\r\n     * @param others list of hashes of \"other\" branches\r\n     */\r\n    function calculateRootHash(bytes32 hash, bytes32[] memory others) public pure returns (bytes32 root) {\r\n        root = hash;\r\n        for (uint8 i = 0; i < others.length; i++) {\r\n            bytes32 other = others[i];\r\n            if (other == 0x0) continue;     // odd branch, no need to hash\r\n            if (root < other) {\r\n                root = keccak256(abi.encodePacked(root, other));\r\n            } else {\r\n                root = keccak256(abi.encodePacked(other, root));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n    address public pendingOwner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"onlyOwner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to set the pendingOwner address.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        pendingOwner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the pendingOwner address to finalize the transfer.\r\n     */\r\n    function claimOwnership() public {\r\n        require(msg.sender == pendingOwner, \"onlyPendingOwner\");\r\n        emit OwnershipTransferred(owner, pendingOwner);\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * Monoplasma that is managed by an owner, likely the side-chain operator\r\n * Owner can add and remove recipients.\r\n */\r\ncontract Monoplasma is BalanceVerifier, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    event OperatorChanged(address indexed newOperator);\r\n    event AdminFeeChanged(uint adminFee);\r\n    /**\r\n     * Freeze period during which all side-chain participants should be able to\r\n     *   acquire the whole balance book from IPFS (or HTTP server, or elsewhere)\r\n     *   and validate that the published rootHash is correct\r\n     * In case of incorrect rootHash, all members should issue withdrawals from the\r\n     *   latest block they have validated (that is older than blockFreezeSeconds)\r\n     * So: too short freeze period + bad availability => ether (needlessly) spent withdrawing earnings\r\n     *     long freeze period == lag between purchase and withdrawal => bad UX\r\n     * Blocks older than blockFreezeSeconds can be used to withdraw funds\r\n     */\r\n    uint public blockFreezeSeconds;\r\n\r\n    /**\r\n     * Block number => timestamp\r\n     * Publish time of a block, where the block freeze period starts from.\r\n     * Note that block number points to the block after which the root hash is calculated,\r\n     *   not the block where BlockCreated was emitted (event must come later)\r\n     */\r\n    mapping (uint => uint) public blockTimestamp;\r\n\r\n    address public operator;\r\n\r\n    //fee fraction = adminFee/10^18\r\n    uint public adminFee;\r\n\r\n    IERC20 public token;\r\n\r\n    mapping (address => uint) public earnings;\r\n    mapping (address => uint) public withdrawn;\r\n    uint public totalWithdrawn;\r\n    uint public totalProven;\r\n\r\n    constructor(address tokenAddress, uint blockFreezePeriodSeconds, uint _adminFee) public {\r\n        blockFreezeSeconds = blockFreezePeriodSeconds;\r\n        token = IERC20(tokenAddress);\r\n        operator = msg.sender;\r\n        setAdminFee(_adminFee);\r\n    }\r\n\r\n    function setOperator(address newOperator) public onlyOwner {\r\n        operator = newOperator;\r\n        emit OperatorChanged(newOperator);\r\n    }\r\n\r\n    /**\r\n     * Admin fee as a fraction of revenue\r\n     * Fixed-point decimal in the same way as ether: 50% === 0.5 ether\r\n     * Smart contract doesn't use it, it's here just for storing purposes\r\n     */\r\n    function setAdminFee(uint _adminFee) public onlyOwner {\r\n        require(adminFee <= 1 ether, \"Admin fee cannot be greater than 1\");\r\n        adminFee = _adminFee;\r\n        emit AdminFeeChanged(_adminFee);\r\n    }\r\n\r\n    /**\r\n     * Operator creates the side-chain blocks\r\n     */\r\n    function onCommit(uint blockNumber, bytes32, string) internal {\r\n        require(msg.sender == operator, \"error_notPermitted\");\r\n        blockTimestamp[blockNumber] = now;\r\n    }\r\n\r\n    /**\r\n     * Called from BalanceVerifier.prove\r\n     * Prove can be called directly to withdraw less than the whole share,\r\n     *   or just \"cement\" the earnings so far into root chain even without withdrawing\r\n     */\r\n    function onVerifySuccess(uint blockNumber, address account, uint newEarnings) internal {\r\n        uint blockFreezeStart = blockTimestamp[blockNumber];\r\n        require(now > blockFreezeStart + blockFreezeSeconds, \"error_frozen\");\r\n        require(earnings[account] < newEarnings, \"error_oldEarnings\");\r\n        totalProven = totalProven.add(newEarnings).sub(earnings[account]);\r\n        require(totalProven.sub(totalWithdrawn) <= token.balanceOf(this), \"error_missingBalance\");\r\n        earnings[account] = newEarnings;\r\n    }\r\n\r\n    /**\r\n     * Prove and withdraw the whole revenue share from sidechain in one transaction\r\n     * @param blockNumber of the leaf to verify\r\n     * @param totalEarnings in the side-chain\r\n     * @param proof list of hashes to prove the totalEarnings\r\n     */\r\n    function withdrawAll(uint blockNumber, uint totalEarnings, bytes32[] proof) external {\r\n        withdrawAllFor(msg.sender, blockNumber, totalEarnings, proof);\r\n    }\r\n\r\n    /**\r\n     * Prove and withdraw the whole revenue share for someone else\r\n     * Validator needs to exit those it's watching out for, in case\r\n     *   it detects Operator malfunctioning\r\n     * @param recipient the address we're proving and withdrawing\r\n     * @param blockNumber of the leaf to verify\r\n     * @param totalEarnings in the side-chain\r\n     * @param proof list of hashes to prove the totalEarnings\r\n     */\r\n    function withdrawAllFor(address recipient, uint blockNumber, uint totalEarnings, bytes32[] proof) public {\r\n        prove(blockNumber, recipient, totalEarnings, proof);\r\n        uint withdrawable = totalEarnings.sub(withdrawn[recipient]);\r\n        withdrawTo(recipient, recipient, withdrawable);\r\n    }\r\n\r\n    /**\r\n     * \"Donate withdraw\" function that allows you to prove and transfer\r\n     *   your earnings to a another address in one transaction\r\n     * @param recipient the address the tokens will be sent to (instead of msg.sender)\r\n     * @param blockNumber of the leaf to verify\r\n     * @param totalEarnings in the side-chain\r\n     * @param proof list of hashes to prove the totalEarnings\r\n     */\r\n    function withdrawAllTo(address recipient, uint blockNumber, uint totalEarnings, bytes32[] proof) external {\r\n        prove(blockNumber, msg.sender, totalEarnings, proof);\r\n        uint withdrawable = totalEarnings.sub(withdrawn[msg.sender]);\r\n        withdrawTo(recipient, msg.sender, withdrawable);\r\n    }\r\n\r\n    /**\r\n     * Withdraw a specified amount of your own proven earnings (see `function prove`)\r\n     */\r\n    function withdraw(uint amount) public {\r\n        withdrawTo(msg.sender, msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * Do the withdrawal on behalf of someone else\r\n     * Validator needs to exit those it's watching out for, in case\r\n     *   it detects Operator malfunctioning\r\n     */\r\n    function withdrawFor(address recipient, uint amount) public {\r\n        withdrawTo(recipient, recipient, amount);\r\n    }\r\n\r\n    /**\r\n     * Execute token withdrawal into specified recipient address from specified member account\r\n     * @dev It is up to the sidechain implementation to make sure\r\n     * @dev  always token balance >= sum of earnings - sum of withdrawn\r\n     */\r\n    function withdrawTo(address recipient, address account, uint amount) public {\r\n        require(amount > 0, \"error_zeroWithdraw\");\r\n        uint w = withdrawn[account].add(amount);\r\n        require(w <= earnings[account], \"error_overdraft\");\r\n        withdrawn[account] = w;\r\n        totalWithdrawn = totalWithdrawn.add(amount);\r\n        require(token.transfer(recipient, amount), \"error_transfer\");\r\n    }\r\n}\r\n\r\n\r\ncontract CommunityProduct is Monoplasma {\r\n\r\n    string public joinPartStream;\r\n\r\n    constructor(address operator, string joinPartStreamId, address tokenAddress, uint blockFreezePeriodSeconds, uint adminFeeFraction)\r\n    Monoplasma(tokenAddress, blockFreezePeriodSeconds, adminFeeFraction) public {\r\n        setOperator(operator);\r\n        joinPartStream = joinPartStreamId;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"name\":\"totalEarnings\",\"type\":\"uint256\"},{\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"withdrawAllTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"prove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"name\":\"totalEarnings\",\"type\":\"uint256\"},{\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"joinPartStream\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"earnings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"name\":\"totalEarnings\",\"type\":\"uint256\"},{\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"withdrawAllFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"others\",\"type\":\"bytes32[]\"}],\"name\":\"calculateRootHash\",\"outputs\":[{\"name\":\"root\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blockFreezeSeconds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blockTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blockHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adminFee\",\"type\":\"uint256\"}],\"name\":\"setAdminFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalProven\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"name\":\"ipfsHash\",\"type\":\"string\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"proofIsCorrect\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"operator\",\"type\":\"address\"},{\"name\":\"joinPartStreamId\",\"type\":\"string\"},{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"blockFreezePeriodSeconds\",\"type\":\"uint256\"},{\"name\":\"adminFeeFraction\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"OperatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"adminFee\",\"type\":\"uint256\"}],\"name\":\"AdminFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"ipfsHash\",\"type\":\"string\"}],\"name\":\"BlockCreated\",\"type\":\"event\"}]","ContractName":"CommunityProduct","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c0aa4dc0763550161a6b59fa430361b5a26df28c00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000cf0ee63788a0849fe5297f3407f701e122cc02300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000429d069189e0000000000000000000000000000000000000000000000000000000000000000001667543467305a6b69513947425f65574b4e37444d397700000000000000000000","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://f639b0bb3911390662ef6be207c48280821a3429d59a459fb7a3ee0326255460"}]}