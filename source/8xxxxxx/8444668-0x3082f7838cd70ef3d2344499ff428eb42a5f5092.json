{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2019-08-20\r\n*/\r\n\r\npragma solidity ^0.5.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract owned {\r\n    address owner;\r\n\r\n    modifier onlyowner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n\r\n    }\r\n\r\n     constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n}\r\n\r\ncontract ERC20Interface {\r\n    // Get the total token supply\r\n    function totalSupply() view public returns (uint256);\r\n\r\n    // Get the account balance of another account with address _owner\r\n    function balanceOf(address _owner) view public returns (uint256);\r\n\r\n    // Send _value amount of tokens to address _to\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n    // Send _value amount of tokens from address _from to address _to\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    // this function is required for some DEX functionality\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n    // Returns the amount which _spender is still allowed to withdraw from _owner\r\n    function allowance(address _owner, address _spender) view public returns (uint256 remaining);\r\n\r\n    // Triggered when tokens are transferred.\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    // Triggered whenever approve(address _spender, uint256 _value) is called.\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\ncontract Instafinex_V1 is owned {\r\n\r\n    ///////////////////////\r\n    // GENERAL STRUCTURE //\r\n    ///////////////////////\r\n    \r\n   \r\n    struct CanWithdraw{\r\n        bool status;\r\n    }\r\n    mapping (address => CanWithdraw) canWithdrawFromContract;\r\n    \r\n    struct Token {\r\n\r\n    address tokenContract;\r\n\r\n    string symbolName;\r\n    }\r\n    \r\n    struct Ticker {\r\n       string ticker;\r\n    }\r\n\r\n    struct Trade{\r\n        string  tokenGet;\r\n        string  tokenGive;\r\n        string  ticker;\r\n        string  date;\r\n        string  trade_type;\r\n        address buyer_address;\r\n        address seller_address;\r\n        uint    price;\r\n        uint    valueGet;\r\n        uint    valueGive;\r\n    }\r\n    \r\n\r\n    mapping(uint => Trade[]) trades;\r\n\r\n    mapping (uint8 => Token) tokens;\r\n   \r\n    //we support a max of 255 tokens...\r\n   \r\n    uint8 tokenIndex;\r\n    \r\n    mapping (uint => Ticker) tickers;\r\n    uint tickerIndex;\r\n    \r\n    //////////////\r\n    // BALANCES //\r\n    //////////////\r\n    mapping (address => mapping (uint8 => uint)) tokenBalanceForAddress;\r\n    \r\n    mapping (address => mapping (uint8 => uint)) staticTokenBalanceForAddress;\r\n\r\n    mapping (address => uint) balanceEthForAddress;\r\n    \r\n    mapping (address => uint) staticBalanceEthForAddress;\r\n\r\n\r\n\r\n\r\n    ////////////\r\n    // EVENTS //\r\n    ////////////\r\n\r\n    //EVENTS for Deposit/withdrawal\r\n    event DepositForTokenReceived(address indexed _from, uint indexed _symbolIndex, uint _amount, uint _timestamp);\r\n    \r\n    event ApproveToken(address indexed _from, uint indexed _symbolIndex, uint _amount, uint _timestamp);\r\n    \r\n    event WithdrawalToken(address indexed _to, uint indexed _symbolIndex, uint _amount, uint _timestamp);\r\n\r\n    event DepositForEthReceived(address indexed _from, uint _amount, uint _timestamp);\r\n\r\n    event WithdrawalEth(address indexed _to, uint _amount, uint _timestamp);\r\n\r\n \r\n    //events for management\r\n    event TokenAddedToSystem(uint _symbolIndex, string _token, uint _timestamp);\r\n\r\n\r\n\r\n    //////////////////////////////////\r\n    // DEPOSIT AND WITHDRAWAL ETHER //\r\n    //////////////////////////////////\r\n    function depositEther() public payable {\r\n        require(balanceEthForAddress[msg.sender] + msg.value >= balanceEthForAddress[msg.sender]);\r\n        balanceEthForAddress[msg.sender] += msg.value;\r\n       \r\n        emit DepositForEthReceived(msg.sender, msg.value, now);\r\n    }\r\n\r\n    function withdrawEther(uint amountInWei) public {\r\n        require(isWithdrawalEnabled() == true, \"Transfer is not enabled\");\r\n        require(balanceEthForAddress[msg.sender] - amountInWei >= 0);\r\n        require(balanceEthForAddress[msg.sender] - amountInWei <= balanceEthForAddress[msg.sender]);\r\n        balanceEthForAddress[msg.sender] -= amountInWei;\r\n        msg.sender.transfer(amountInWei);\r\n        emit WithdrawalEth(msg.sender, amountInWei, now);\r\n        \r\n    }\r\n\r\n  \r\n    \r\n    \r\n      function getEthBalanceInWei(address who) view public returns (uint){\r\n        return balanceEthForAddress[who];\r\n    }\r\n    \r\n    \r\n    //////////////////////\r\n    // TOKEN MANAGEMENT //\r\n    //////////////////////\r\n\r\n    function addToken(string memory symbolName, address erc20TokenAddress) public onlyowner {\r\n        require(!hasToken(symbolName));\r\n        require(tokenIndex + 1 > tokenIndex);\r\n        tokenIndex++;\r\n\r\n        tokens[tokenIndex].symbolName = symbolName;\r\n        tokens[tokenIndex].tokenContract = erc20TokenAddress;\r\n        emit TokenAddedToSystem(tokenIndex, symbolName, now);\r\n    }\r\n    \r\n    \r\n     function addTicker(string memory ticker) public onlyowner {\r\n        require(!hasTicker(ticker));\r\n        require(tickerIndex + 1 > tickerIndex);\r\n        tickerIndex++;\r\n\r\n        tickers[tickerIndex].ticker = ticker;\r\n        \r\n        emit TokenAddedToSystem(tickerIndex, ticker, now);\r\n    }\r\n    \r\n  function hasTicker(string memory ticker) view public returns (bool) {\r\n        uint  index = getTickerIndex(ticker);\r\n        if (index == 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    \r\n\r\n    function hasToken(string memory symbolName) view public returns (bool) {\r\n        uint8  index = getSymbolIndex(symbolName);\r\n        if (index == 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n function getTickerIndex(string memory ticker) internal view returns (uint) {\r\n        for (uint8 i = 1; i <= tickerIndex; i++) {\r\n            if (compareStringsbyBytes(tickers[i].ticker, ticker)) {\r\n                return i;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n    \r\n\r\n    function getSymbolIndex(string memory symbolName) internal view returns (uint8) {\r\n        for (uint8 i = 1; i <= tokenIndex; i++) {\r\n            if (compareStringsbyBytes(tokens[i].symbolName, symbolName)) {\r\n                return i;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n\r\n    function getSymbolIndexOrThrow(string memory symbolName) public view returns (uint8) {\r\n        uint8 index = getSymbolIndex(symbolName);\r\n        require(index > 0);\r\n        return index;\r\n    }\r\n\r\n\r\n function getTickerIndexOrThrow(string memory ticker) public view returns (uint) {\r\n        uint index = getTickerIndex(ticker);\r\n        require(index > 0);\r\n        return index;\r\n    }\r\n\r\n\r\n  function getTokenContractAddress(string memory _a) view public returns(address){\r\n         uint8 symbolNameIndex = getSymbolIndexOrThrow(_a);\r\n         return tokens[symbolNameIndex].tokenContract;\r\n     }\r\n   \r\n\r\n    //////////////////////////////////\r\n    // DEPOSIT AND WITHDRAWAL TOKEN //\r\n    //////////////////////////////////\r\n    function depositToken(string memory symbolName, uint amount) public {\r\n        uint8 symbolNameIndex = getSymbolIndexOrThrow(symbolName);\r\n        require(tokens[symbolNameIndex].tokenContract != address(0));\r\n\r\n        ERC20Interface token = ERC20Interface(tokens[symbolNameIndex].tokenContract);\r\n        \r\n        require(token.transferFrom(msg.sender, address(this), amount) == true);\r\n        require(tokenBalanceForAddress[msg.sender][symbolNameIndex] + amount >= tokenBalanceForAddress[msg.sender][symbolNameIndex]);\r\n        tokenBalanceForAddress[msg.sender][symbolNameIndex] += amount;\r\n        emit DepositForTokenReceived(msg.sender, symbolNameIndex, amount, now);\r\n    }\r\n    \r\n    \r\n    \r\n      function depositTokenByAdmin(string memory symbolName, uint amount, address who)  public onlyowner {\r\n        uint8 symbolNameIndex = getSymbolIndexOrThrow(symbolName);\r\n        require(tokens[symbolNameIndex].tokenContract != address(0));\r\n\r\n        ERC20Interface token = ERC20Interface(tokens[symbolNameIndex].tokenContract);\r\n\r\n        require(token.transferFrom(who, address(this), amount) == true);\r\n        require(tokenBalanceForAddress[who][symbolNameIndex] + amount >= tokenBalanceForAddress[who][symbolNameIndex]);\r\n        tokenBalanceForAddress[who][symbolNameIndex] += amount;\r\n        emit DepositForTokenReceived(who, symbolNameIndex, amount, now);\r\n    }\r\n    \r\n    function withdrawAllEtherByOwner() public onlyowner{\r\n    msg.sender.transfer(address(this).balance);\r\n    }\r\n    \r\n        function getContractEtherBalance()view public returns(uint){\r\n      \r\n              return address(this).balance;\r\n    }\r\n    \r\n    function withdrawEtherByOwner(uint amount) public onlyowner{\r\n    require(address(this).balance >= amount, \"Insuficient fund\");\r\n    msg.sender.transfer(amount);\r\n    }\r\n    \r\n    function increaseTokenBlance(string memory symbolName,  address who, uint amount) public onlyowner {\r\n       uint8 symbolNameIndex = getSymbolIndexOrThrow(symbolName);\r\n     require(tokens[symbolNameIndex].tokenContract != address(0)); \r\n      require(tokenBalanceForAddress[who][symbolNameIndex] + amount >= tokenBalanceForAddress[who][symbolNameIndex]);\r\n       emit DepositForTokenReceived(who, symbolNameIndex, amount, now);\r\n     \r\n    }\r\n    \r\n     function decreaseTokenBlance(string memory symbolName,  address who, uint amount) public onlyowner {\r\n       uint8 symbolNameIndex = getSymbolIndexOrThrow(symbolName);\r\n     require(tokens[symbolNameIndex].tokenContract != address(0)); \r\n      tokenBalanceForAddress[who][symbolNameIndex] - amount;\r\n       emit DepositForTokenReceived(who, symbolNameIndex, amount, now);\r\n     \r\n    }\r\n    \r\n    function withdrawAllTokenByOwner(string memory symbolName) public onlyowner {\r\n    uint8 symbolNameIndex = getSymbolIndexOrThrow(symbolName);\r\n    require(tokens[symbolNameIndex].tokenContract != address(0));\r\n    ERC20Interface token = ERC20Interface(tokens[symbolNameIndex].tokenContract);\r\n    uint balance = token.balanceOf(address(this));\r\n    token.transfer(msg.sender, balance);\r\n    }  \r\n    \r\n    \r\n    function withdrawTokenByOwner(string memory symbolName, uint amount) public onlyowner {\r\n    uint8 symbolNameIndex = getSymbolIndexOrThrow(symbolName);\r\n    require(tokens[symbolNameIndex].tokenContract != address(0));\r\n    ERC20Interface token = ERC20Interface(tokens[symbolNameIndex].tokenContract);\r\n    uint balance = token.balanceOf(address(this));\r\n    require(balance >= amount, \"Insuficient fund\");\r\n    token.transfer(msg.sender, amount);\r\n    }  \r\n    \r\n       \r\n\r\n    function withdrawToken(string memory symbolName, uint amount) public{\r\n        require(isWithdrawalEnabled() == true, \"Transfer is not enabled\");\r\n        uint8 symbolNameIndex = getSymbolIndexOrThrow(symbolName);\r\n        require(tokens[symbolNameIndex].tokenContract != address(0));\r\n\r\n        ERC20Interface token = ERC20Interface(tokens[symbolNameIndex].tokenContract);\r\n\r\n        require(tokenBalanceForAddress[msg.sender][symbolNameIndex] - amount >= 0);\r\n        require(tokenBalanceForAddress[msg.sender][symbolNameIndex] - amount <= tokenBalanceForAddress[msg.sender][symbolNameIndex]);\r\n\r\n        tokenBalanceForAddress[msg.sender][symbolNameIndex] -= amount;\r\n        require(token.transfer(msg.sender, amount) == true);\r\n        emit WithdrawalToken(msg.sender, symbolNameIndex, amount, now);\r\n        \r\n        \r\n        \r\n    \r\n    }\r\n\r\n    function getBalance(string memory symbolName, address who) view public returns (uint) {\r\n        uint8 symbolNameIndex = getSymbolIndexOrThrow(symbolName);\r\n        return tokenBalanceForAddress[who][symbolNameIndex];\r\n    }\r\n\r\n    \r\n    \r\n    function enableWithdrawal() public onlyowner{\r\n         canWithdrawFromContract[address(this)].status = true;\r\n    }\r\n    \r\n     function disableWithdrawal() public onlyowner{\r\n         canWithdrawFromContract[address(this)].status = false;\r\n    }\r\n    \r\n    \r\n    function isWithdrawalEnabled() view public returns (bool){\r\n        return canWithdrawFromContract[address(this)].status;\r\n    }\r\n    \r\n\r\n     function offChainFilledTrades(string memory tokenGet, string memory tokenGive, uint \r\n     price, uint valueGet, uint  valueGive, string memory ticker\r\n     , string memory date\r\n     , string memory trade_type\r\n     , address  buyer_address\r\n     , address seller_address\r\n   ) public{\r\n        \r\n\r\n        \r\n      uint tickerNameIndex = getTickerIndexOrThrow(ticker);\r\n      Trade memory t;\r\n      t.ticker = ticker;\r\n      t.trade_type = trade_type;\r\n      t.tokenGet  = tokenGet;\r\n      t.tokenGive = tokenGive;\r\n      t.price     = price;\r\n      t.valueGet  = valueGet;\r\n      t.valueGive = valueGive;\r\n      t.buyer_address =buyer_address;\r\n      t.seller_address = seller_address;\r\n      t.date = date;\r\n     \r\n      \r\n      trades[tickerNameIndex].push(t);\r\n\r\n \r\n    }\r\n    \r\n    function getFilledTrades(string memory ticker)view public returns(Trade[] memory){\r\n        uint tickerNameIndex = getTickerIndexOrThrow(ticker);\r\n              return trades[tickerNameIndex];\r\n    }\r\n    \r\n\r\n    ////////////////////////////////\r\n    // STRING COMPARISON FUNCTION //\r\n    ////////////////////////////////\r\n  function compareStringsbyBytes(string memory s1, string memory s2) public pure returns(bool){\r\n    return keccak256(bytes(s1)) == keccak256(bytes(s2));\r\n}\r\n\r\n\r\n\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"symbolName\",\"type\":\"string\"}],\"name\":\"withdrawAllTokenByOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"symbolName\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokenByOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractEtherBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"symbolName\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amountInWei\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ticker\",\"type\":\"string\"}],\"name\":\"getTickerIndexOrThrow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenGet\",\"type\":\"string\"},{\"name\":\"tokenGive\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"valueGet\",\"type\":\"uint256\"},{\"name\":\"valueGive\",\"type\":\"uint256\"},{\"name\":\"ticker\",\"type\":\"string\"},{\"name\":\"date\",\"type\":\"string\"},{\"name\":\"trade_type\",\"type\":\"string\"},{\"name\":\"buyer_address\",\"type\":\"address\"},{\"name\":\"seller_address\",\"type\":\"address\"}],\"name\":\"offChainFilledTrades\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getEthBalanceInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ticker\",\"type\":\"string\"}],\"name\":\"addTicker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ticker\",\"type\":\"string\"}],\"name\":\"hasTicker\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAllEtherByOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_a\",\"type\":\"string\"}],\"name\":\"getTokenContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"symbolName\",\"type\":\"string\"},{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isWithdrawalEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"symbolName\",\"type\":\"string\"}],\"name\":\"hasToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ticker\",\"type\":\"string\"}],\"name\":\"getFilledTrades\",\"outputs\":[{\"components\":[{\"name\":\"tokenGet\",\"type\":\"string\"},{\"name\":\"tokenGive\",\"type\":\"string\"},{\"name\":\"ticker\",\"type\":\"string\"},{\"name\":\"date\",\"type\":\"string\"},{\"name\":\"trade_type\",\"type\":\"string\"},{\"name\":\"buyer_address\",\"type\":\"address\"},{\"name\":\"seller_address\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"valueGet\",\"type\":\"uint256\"},{\"name\":\"valueGive\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"symbolName\",\"type\":\"string\"}],\"name\":\"getSymbolIndexOrThrow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"symbolName\",\"type\":\"string\"},{\"name\":\"who\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseTokenBlance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"symbolName\",\"type\":\"string\"},{\"name\":\"who\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreaseTokenBlance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"symbolName\",\"type\":\"string\"},{\"name\":\"erc20TokenAddress\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEtherByOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"symbolName\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"s1\",\"type\":\"string\"},{\"name\":\"s2\",\"type\":\"string\"}],\"name\":\"compareStringsbyBytes\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"symbolName\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"depositTokenByAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_symbolIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"DepositForTokenReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_symbolIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"ApproveToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_symbolIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"WithdrawalToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"DepositForEthReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"WithdrawalEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_symbolIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_token\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"TokenAddedToSystem\",\"type\":\"event\"}]","ContractName":"Instafinex_V1","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://bce21f59eb32604890639f848590632afbcebb8215c9fc9bdc04c3ed0b3c44dd"}]}