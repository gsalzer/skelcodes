{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.3;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, rounding up and truncating the quotient\r\n  */\r\n  function divCeil(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    return ((_a - 1) / _b) + 1;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Helps contracts guard against reentrancy attacks.\r\n * @author Remco Bloemen <remco@2Ï€.com>, Eenae <alexey@mixbytes.io>\r\n * @dev If you mark a function `nonReentrant`, you should also\r\n * mark it `external`.\r\n */\r\ncontract ReentrancyGuard {\r\n\r\n  /// @dev Constant for unlocked guard state - non-zero to prevent extra gas costs.\r\n  /// See: https://github.com/OpenZeppelin/openzeppelin-solidity/issues/1056\r\n  uint256 internal constant REENTRANCY_GUARD_FREE = 1;\r\n\r\n  /// @dev Constant for locked guard state\r\n  uint256 internal constant REENTRANCY_GUARD_LOCKED = 2;\r\n\r\n  /**\r\n   * @dev We use a single lock for the whole contract.\r\n   */\r\n  uint256 internal reentrancyLock = REENTRANCY_GUARD_FREE;\r\n\r\n  /**\r\n   * @dev Prevents a contract from calling itself, directly or indirectly.\r\n   * If you mark a function `nonReentrant`, you should also\r\n   * mark it `external`. Calling one `nonReentrant` function from\r\n   * another is not supported. Instead, you can implement a\r\n   * `private` function doing the actual work, and an `external`\r\n   * wrapper marked as `nonReentrant`.\r\n   */\r\n  modifier nonReentrant() {\r\n    require(reentrancyLock == REENTRANCY_GUARD_FREE);\r\n    reentrancyLock = REENTRANCY_GUARD_LOCKED;\r\n    _;\r\n    reentrancyLock = REENTRANCY_GUARD_FREE;\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\ncontract BZRxOTCSwapSimpleV2 is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    struct SwapDetail {\r\n        address payable tokenBuyer;\r\n        address payable tokenSeller;\r\n        uint256 ethAmountFromBuyer;\r\n        uint256 tokenAmountFromSeller;\r\n        bool buyerDeposit;\r\n        bool sellerDeposit;\r\n        bool active;\r\n    }\r\n\r\n    ERC20 public token;\r\n\r\n    mapping (bytes32 => SwapDetail) public swapDetail;\r\n\r\n    bool public contractDisabled = false;\r\n\r\n    modifier usageAllowed() {\r\n        require(!contractDisabled,\r\n        \"usage not allowed\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address tokenAddress)\r\n        public\r\n    {\r\n        token = ERC20(tokenAddress);\r\n    }\r\n\r\n    function()\r\n        external\r\n    {\r\n        revert(\"invalid\");\r\n    }\r\n\r\n    function depositEtherAsBuyer(\r\n        address payable tokenSeller,\r\n        uint256 tokenAmountFromSeller)\r\n        external\r\n        payable\r\n        nonReentrant\r\n        usageAllowed\r\n        returns (bytes32)\r\n    {\r\n        address payable tokenBuyer = msg.sender;\r\n        uint256 ethAmountFromBuyer = msg.value;\r\n\r\n        require(\r\n            ethAmountFromBuyer != 0 &&\r\n            tokenSeller != address(0) &&\r\n            tokenAmountFromSeller != 0,\r\n            \"invalid swap\"\r\n        );\r\n\r\n        require(token.balanceOf(msg.sender) != 0, \"buyer is not a holder\");\r\n\r\n        return _handleSwap(\r\n            tokenBuyer,\r\n            tokenSeller,\r\n            ethAmountFromBuyer,\r\n            tokenAmountFromSeller,\r\n            true // isBuyer\r\n        );\r\n    }\r\n\r\n    function depositTokenAsSeller(\r\n        address payable tokenBuyer,\r\n        uint256 tokenAmountFromSeller,\r\n        uint256 ethAmountFromBuyer)\r\n        external\r\n        nonReentrant\r\n        usageAllowed\r\n        returns (bytes32)\r\n    {\r\n        address payable tokenSeller = msg.sender;\r\n\r\n        require(\r\n            ethAmountFromBuyer != 0 &&\r\n            tokenBuyer != address(0) &&\r\n            tokenAmountFromSeller != 0,\r\n            \"invalid swap\"\r\n        );\r\n\r\n        require(token.transferFrom(\r\n            tokenSeller,\r\n            address(this),\r\n            tokenAmountFromSeller),\r\n            \"transfer failed\"\r\n        );\r\n\r\n        return _handleSwap(\r\n            tokenBuyer,\r\n            tokenSeller,\r\n            ethAmountFromBuyer,\r\n            tokenAmountFromSeller,\r\n            false // isBuyer\r\n        );\r\n    }\r\n\r\n    function cancelSwap(\r\n        address tokenBuyer,\r\n        address tokenSeller,\r\n        uint256 ethAmountFromBuyer,\r\n        uint256 tokenAmountFromSeller)\r\n        external\r\n        nonReentrant\r\n    {\r\n        bytes32 hash = keccak256(abi.encodePacked(\r\n            tokenBuyer,\r\n            tokenSeller,\r\n            ethAmountFromBuyer,\r\n            tokenAmountFromSeller\r\n        ));\r\n\r\n        SwapDetail storage swap = swapDetail[hash];\r\n        require(swap.active, \"invalid swap\");\r\n\r\n        if (swap.buyerDeposit) {\r\n            swap.tokenBuyer.transfer(swap.ethAmountFromBuyer);\r\n            swap.buyerDeposit = false;\r\n        }\r\n        if (swap.sellerDeposit) {\r\n            require(token.transfer(\r\n                swap.tokenSeller,\r\n                swap.tokenAmountFromSeller),\r\n                \"transfer failed\"\r\n            );\r\n            swap.sellerDeposit = false;\r\n        }\r\n        if (!swap.buyerDeposit && !swap.sellerDeposit) {\r\n            swap.active = false;\r\n        }\r\n    }\r\n\r\n    function toggleUsageAllowed(\r\n        bool isAllowed)\r\n        external\r\n        onlyOwner\r\n    {\r\n        contractDisabled = !isAllowed;\r\n    }\r\n\r\n    function recoverEther(\r\n        address payable receiver,\r\n        uint256 amount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        receiver.transfer(amount);\r\n    }\r\n\r\n    function recoverToken(\r\n        address receiver,\r\n        uint256 amount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(token.transfer(\r\n            receiver,\r\n            amount),\r\n            \"transfer failed\"\r\n        );\r\n    }\r\n\r\n    function adminTransfer(\r\n        address sender,\r\n        address receiver,\r\n        uint256 amount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(token.transferFrom(\r\n            sender,\r\n            receiver,\r\n            amount),\r\n            \"transfer failed\"\r\n        );\r\n    }\r\n\r\n    function _handleSwap(\r\n        address payable tokenBuyer,\r\n        address payable tokenSeller,\r\n        uint256 ethAmountFromBuyer,\r\n        uint256 tokenAmountFromSeller,\r\n        bool isBuyer)\r\n        internal\r\n        returns (bytes32 hash)\r\n    {\r\n        hash = keccak256(abi.encodePacked(\r\n            tokenBuyer,\r\n            tokenSeller,\r\n            ethAmountFromBuyer,\r\n            tokenAmountFromSeller\r\n        ));\r\n\r\n        SwapDetail storage swap = swapDetail[hash];\r\n        if (swap.active) {\r\n            require((isBuyer && !swap.buyerDeposit) ||\r\n                (!isBuyer && !swap.sellerDeposit),\r\n                \"duplicate deposit\"\r\n            );\r\n\r\n            swap.tokenSeller.transfer(swap.ethAmountFromBuyer);\r\n            require(token.transfer(\r\n                swap.tokenBuyer,\r\n                swap.tokenAmountFromSeller),\r\n                \"transfer failed\"\r\n            );\r\n            swap.buyerDeposit = false;\r\n            swap.sellerDeposit = false;\r\n            swap.active = false;\r\n        } else {\r\n            swap.tokenBuyer = tokenBuyer;\r\n            swap.tokenSeller = tokenSeller;\r\n            swap.ethAmountFromBuyer = ethAmountFromBuyer;\r\n            swap.tokenAmountFromSeller = tokenAmountFromSeller;\r\n            swap.buyerDeposit = isBuyer;\r\n            swap.sellerDeposit = !isBuyer;\r\n            swap.active = true;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"tokenSeller\",\"type\":\"address\"},{\"name\":\"tokenAmountFromSeller\",\"type\":\"uint256\"}],\"name\":\"depositEtherAsBuyer\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractDisabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"isAllowed\",\"type\":\"bool\"}],\"name\":\"toggleUsageAllowed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"swapDetail\",\"outputs\":[{\"name\":\"tokenBuyer\",\"type\":\"address\"},{\"name\":\"tokenSeller\",\"type\":\"address\"},{\"name\":\"ethAmountFromBuyer\",\"type\":\"uint256\"},{\"name\":\"tokenAmountFromSeller\",\"type\":\"uint256\"},{\"name\":\"buyerDeposit\",\"type\":\"bool\"},{\"name\":\"sellerDeposit\",\"type\":\"bool\"},{\"name\":\"active\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenBuyer\",\"type\":\"address\"},{\"name\":\"tokenSeller\",\"type\":\"address\"},{\"name\":\"ethAmountFromBuyer\",\"type\":\"uint256\"},{\"name\":\"tokenAmountFromSeller\",\"type\":\"uint256\"}],\"name\":\"cancelSwap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenBuyer\",\"type\":\"address\"},{\"name\":\"tokenAmountFromSeller\",\"type\":\"uint256\"},{\"name\":\"ethAmountFromBuyer\",\"type\":\"uint256\"}],\"name\":\"depositTokenAsSeller\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"adminTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BZRxOTCSwapSimpleV2","CompilerVersion":"v0.5.3+commit.10d17f24","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001c74cff0376fb4031cd7492cd6db2d66c3f2c6b9","Library":"","LicenseType":"None","SwarmSource":"bzzr://da0dab9a9cd8b7c314f398bbde964881f7fcfaf3c6bb208023848aa2a96b5f04"}]}