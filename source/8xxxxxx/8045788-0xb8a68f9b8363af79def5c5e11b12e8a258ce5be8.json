{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/Onigiri.sol\r\n\r\npragma solidity ^0.5.8;\r\n\r\n\r\n\r\ncontract Onigiri is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    struct InvestorInfo {\r\n        uint256 invested;\r\n        uint256 lockbox;\r\n        uint256 withdrawn;\r\n        uint256 lastInvestmentTime;\r\n    }\r\n    \r\n    mapping (address => InvestorInfo) public investors;\r\n    mapping (address => uint256) public affiliateCommission;\r\n    mapping (address => uint256) public devCommission;\r\n    mapping (address => uint256) public amountForAddressToMigrate;\r\n\r\n    uint256 public investorsCount;\r\n    uint256 public lockboxTotal;\r\n    uint256 public withdrawnProfitTotal;\r\n    uint256 public affiliateCommissionWithdrawnTotal;\r\n    \r\n    uint256 public donatedTotal;\r\n    uint256 public gamesIncomeTotal;\r\n    \r\n    address private constant dev_0_master = 0x6a5D9648381b90AF0e6881c26739efA4379c19B2;\r\n    address private constant dev_1_master = 0xDBd32Ef31Fcd7fc1EF028A7471a7A9BFC39ab609;\r\n    address private dev_0_escrow = 0xF57924672D6dBF0336c618fDa50E284E02715000;\r\n    address private dev_1_escrow = 0xE4Cf94e5D30FB4406A2B139CD0e872a1C8012dEf;\r\n\r\n    uint256 public constant minInvest = 0.025 ether;\r\n    uint256 public constant whaleLimitLockbox = 500 ether;\r\n    uint256 public constant whaleLimitInvest = 50 ether;\r\n\r\n    event Migrated(address indexed investor, uint256 amount);\r\n    event Invested(address indexed investor, uint256 amount);\r\n    event Reinvested(address indexed investor, uint256 amount);\r\n    event WithdrawnAffiliateCommission(address indexed affiliate, uint256 amount);\r\n    event WithdrawnProfit(address indexed investor, uint256 amount);\r\n    event WithdrawnLockBoxPartially(address indexed investor, uint256 amount);\r\n    event WithdrawnLockboxAndClosed(address indexed investor, uint256 amount);\r\n\r\n    /**\r\n     * PUBLIC\r\n     */\r\n\r\n    //  MIGRATION\r\n    /**\r\n     * @dev Adds addresses and corresponding deposit amounts to be migrated from OB 1.0\r\n     * @param _addressList List of addresses.\r\n     * @param _amountList List of corresponding deposit amounts.\r\n    */\r\n    function addAddressesAndAmountsToMigrate(address[] memory _addressList, uint256[] memory _amountList) public onlyOwner {\r\n        require(_addressList.length == _amountList.length, \"length is not equal\");\r\n        \r\n        for (uint256 i = 0; i < _addressList.length; i ++) {\r\n            amountForAddressToMigrate[_addressList[i]] = _amountList[i];\r\n        }\r\n    }\r\n\r\n    function migrateFunds() public payable {\r\n        require(amountForAddressToMigrate[msg.sender] > 0, \"not allowed\");\r\n        require(msg.value == amountForAddressToMigrate[msg.sender], \"wrong amount\");\r\n\r\n        amountForAddressToMigrate[msg.sender] = 0;\r\n\r\n        if(getLastInvestmentTime(msg.sender) == 0) {\r\n            investorsCount = investorsCount.add(1);\r\n        }\r\n\r\n        investors[msg.sender].lockbox = investors[msg.sender].lockbox.add(msg.value);\r\n        investors[msg.sender].invested = investors[msg.sender].invested.add(msg.value);\r\n        investors[msg.sender].lastInvestmentTime = now;\r\n        delete investors[msg.sender].withdrawn;\r\n        \r\n        lockboxTotal = lockboxTotal.add(msg.value);\r\n\r\n        emit Migrated(msg.sender, msg.value);\r\n    }\r\n    //  MIGRATION\r\n\r\n     function() external payable {\r\n        donate();\r\n     }\r\n\r\n     /**\r\n     * @dev Donation for Onigiry ecosystem.\r\n     * TESTED\r\n     */\r\n    function donate() public payable {\r\n        //  2% - to developers\r\n        uint256 devFee = msg.value.div(100);\r\n        devCommission[dev_0_escrow] = devCommission[dev_0_escrow].add(devFee);\r\n        devCommission[dev_1_escrow] = devCommission[dev_1_escrow].add(devFee);\r\n        \r\n        donatedTotal = donatedTotal.add(msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev Accepts income from games for Onigiry ecosystem.\r\n     * TESTED\r\n     */\r\n    function fromGame() external payable {\r\n        //  4% - to developers\r\n        uint256 devFee = msg.value.div(100).mul(2);\r\n        devCommission[dev_0_escrow] = devCommission[dev_0_escrow].add(devFee);\r\n        devCommission[dev_1_escrow] = devCommission[dev_1_escrow].add(devFee);\r\n        \r\n        gamesIncomeTotal = gamesIncomeTotal.add(msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns invested amount for investor.\r\n     * @param _address Investor address.\r\n     * @return invested amount.\r\n     * TESTED\r\n     */\r\n    function getInvested(address _address) public view returns(uint256) {\r\n        return investors[_address].invested;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns lockbox amount for investor.\r\n     * @param _address Investor address.\r\n     * @return lockbox amount.\r\n     * TESTED\r\n     */\r\n    function getLockBox(address _address) public view returns(uint256) {\r\n        return investors[_address].lockbox;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns withdrawn amount for investor.\r\n     * @param _address Investor address.\r\n     * @return withdrawn amount.\r\n     * TESTED\r\n     */\r\n    function getWithdrawn(address _address) public view returns(uint256) {\r\n        return investors[_address].withdrawn;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns last investment time amount for investor.\r\n     * @param _address Investor address.\r\n     * @return last investment time.\r\n     * TESTED\r\n     */\r\n    function getLastInvestmentTime(address _address) public view returns(uint256) {\r\n        return investors[_address].lastInvestmentTime;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets balance for current contract.\r\n     * @return balance for current contract.\r\n     * TESTED\r\n     */\r\n    function getBalance() public view returns(uint256){\r\n        return address(this).balance;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates sum for lockboxes and dev fees.\r\n     * @return Amount of guaranteed balance by constract.\r\n     * TESTED\r\n     */\r\n    function guaranteedBalance() public view returns(uint256) {\r\n        return lockboxTotal.add(devCommission[dev_0_escrow]).add(devCommission[dev_1_escrow]);\r\n    }\r\n\r\n    /**\r\n     * @dev User invests funds.\r\n     * @param _affiliate affiliate address.\r\n     * TESTED\r\n     */\r\n    function invest(address _affiliate) public payable {\r\n        require(msg.value >= minInvest, \"min 0.025 eth\");\r\n        if(lockboxTotal <= whaleLimitLockbox) {\r\n            require(msg.value <= whaleLimitInvest, \"max invest 50 eth\");\r\n        }\r\n\r\n        if(calculateProfit(msg.sender) > 0){\r\n            withdrawProfit();\r\n        }\r\n\r\n        //  1% - to affiliateCommission\r\n        if(_affiliate != msg.sender && _affiliate != address(0)) {\r\n            uint256 commission = msg.value.div(100);\r\n            affiliateCommission[_affiliate] = affiliateCommission[_affiliate].add(commission);\r\n        }\r\n\r\n        if(getLastInvestmentTime(msg.sender) == 0) {\r\n            investorsCount = investorsCount.add(1);\r\n        }\r\n\r\n        uint256 lockboxAmount = msg.value.div(100).mul(84);\r\n        investors[msg.sender].lockbox = investors[msg.sender].lockbox.add(lockboxAmount);\r\n        investors[msg.sender].invested = investors[msg.sender].invested.add(msg.value);\r\n        investors[msg.sender].lastInvestmentTime = now;\r\n        delete investors[msg.sender].withdrawn;\r\n        \r\n        lockboxTotal = lockboxTotal.add(lockboxAmount);\r\n        \r\n        //  4% - to developers\r\n        uint256 devFee = msg.value.div(100).mul(2);\r\n        devCommission[dev_0_escrow] = devCommission[dev_0_escrow].add(devFee);\r\n        devCommission[dev_1_escrow] = devCommission[dev_1_escrow].add(devFee);\r\n\r\n        emit Invested(msg.sender, msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates escrow address for developer.\r\n     * @param _address Address of escrow to be used.\r\n     * TESTED\r\n     */\r\n    function updateDevEscrow(address _address) public {\r\n        require(msg.sender == dev_0_master || msg.sender == dev_1_master, \"not dev\");\r\n        (msg.sender == dev_0_master) ? dev_0_escrow = _address : dev_1_escrow = _address;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows developer to withdraw commission.\r\n     * TESTED\r\n     */\r\n    function withdrawDevCommission() public {\r\n        uint256 commission = devCommission[msg.sender];\r\n        require(commission > 0, \"no dev commission\");\r\n        require(address(this).balance.sub(commission) >= lockboxTotal, \"not enough funds\");\r\n\r\n        delete devCommission[msg.sender];\r\n        msg.sender.transfer(commission);\r\n    }\r\n    \r\n    /**\r\n     * @dev Withdraws affiliate commission for current address.\r\n     * TESTED\r\n     */\r\n    function withdrawAffiliateCommission() public {\r\n        uint256 commission = affiliateCommission[msg.sender];\r\n        require(commission > 0, \"no commission\");\r\n        require(address(this).balance.sub(commission) >= guaranteedBalance(), \"not enough funds\");\r\n\r\n        delete affiliateCommission[msg.sender];\r\n        affiliateCommissionWithdrawnTotal = affiliateCommissionWithdrawnTotal.add(commission);\r\n\r\n        msg.sender.transfer(commission);\r\n\r\n        emit WithdrawnAffiliateCommission(msg.sender, commission);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraws profit.\r\n     * TESTED\r\n     */\r\n    function withdrawProfit() public {\r\n        uint256 profit = calculateProfit(msg.sender);\r\n        require(profit > 0, \"No profit\");\r\n        require(address(this).balance.sub(profit) >= guaranteedBalance(), \"Not enough funds\");\r\n        \r\n        investors[msg.sender].withdrawn = investors[msg.sender].withdrawn.add(profit);\r\n        withdrawnProfitTotal = withdrawnProfitTotal.add(profit);\r\n        investors[msg.sender].lastInvestmentTime = now;\r\n        \r\n        //  2% - to developers\r\n        uint256 devFee = profit.div(100);\r\n        devCommission[dev_0_escrow] = devCommission[dev_0_escrow].add(devFee);\r\n        devCommission[dev_1_escrow] = devCommission[dev_1_escrow].add(devFee);\r\n        \r\n        //  3% - stay in contract\r\n        msg.sender.transfer(profit.div(100).mul(95));\r\n\r\n        emit WithdrawnProfit(msg.sender, profit);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows investor to withdraw lockbox funds, close deposit and clear all data.\r\n     * @notice Pending profit stays in contract.\r\n     * TESTED\r\n     */\r\n    function withdrawLockBoxAndClose() public {\r\n        uint256 lockboxAmount = getLockBox(msg.sender);\r\n        require(lockboxAmount > 0, \"No investments\");\r\n\r\n        delete investors[msg.sender];\r\n        investorsCount = investorsCount.sub(1);\r\n        lockboxTotal = lockboxTotal.sub(lockboxAmount);\r\n\r\n        msg.sender.transfer(lockboxAmount);\r\n\r\n        emit WithdrawnLockboxAndClosed(msg.sender, lockboxAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows investor to withdraw part of lockbox funds.\r\n     * @param _amount Amount to withdraw.\r\n     * TESTED\r\n     */\r\n    function withdrawLockBoxPartially(uint256 _amount) public {\r\n        require(_amount > 0, \"No amount\");\r\n\r\n        uint256 lockboxAmount = getLockBox(msg.sender);\r\n        require(lockboxAmount > 0, \"No investments\");\r\n        require(_amount <= lockboxAmount, \"Not enough lockBox\");\r\n\r\n        if (_amount == lockboxAmount) {\r\n            withdrawLockBoxAndClose();\r\n            return;\r\n        }\r\n\r\n        investors[msg.sender].lockbox = investors[msg.sender].lockbox.sub(_amount);\r\n        lockboxTotal = lockboxTotal.sub(_amount);\r\n        msg.sender.transfer(_amount);\r\n\r\n        emit WithdrawnLockBoxPartially(msg.sender, _amount);\r\n    }\r\n    \r\n    /**\r\n     * @dev Reinvests pending profit.\r\n     * TESTED\r\n     */\r\n    function reinvestProfit() public {\r\n        uint256 profit = calculateProfit(msg.sender);\r\n        require(profit > 0, \"No profit\");\r\n        require(address(this).balance.sub(profit) >= guaranteedBalance(), \"not enough funds\");\r\n        \r\n        uint256 lockboxFromProfit = profit.div(100).mul(84);\r\n        investors[msg.sender].lockbox = investors[msg.sender].lockbox.add(lockboxFromProfit);\r\n        investors[msg.sender].invested = investors[msg.sender].invested.add(profit);\r\n        investors[msg.sender].lastInvestmentTime = now;\r\n        delete investors[msg.sender].withdrawn;\r\n\r\n        lockboxTotal = lockboxTotal.add(lockboxFromProfit);\r\n\r\n        emit Reinvested(msg.sender, profit);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates pending profit for provided customer.\r\n     * @param _investor Address of investor.\r\n     * @return pending profit.\r\n     * TESTED\r\n     */\r\n    function calculateProfit(address _investor) public view returns(uint256){\r\n        uint256 hourDifference = now.sub(investors[_investor].lastInvestmentTime).div(3600);\r\n        uint256 rate = percentRateInternal(investors[_investor].lockbox);\r\n        uint256 calculatedPercent = hourDifference.mul(rate);\r\n        return investors[_investor].lockbox.div(100000).mul(calculatedPercent);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates rate for lockbox balance for msg.sender.\r\n     * @param _balance Balance to calculate percentage.\r\n     * @return rate for lockbox balance.\r\n     * TESTED\r\n     */\r\n    function percentRateInternal(uint256 _balance) private pure returns(uint256) {\r\n        /**\r\n            ~ .99 -    - 0.6%\r\n            1 ~ 50     - 0.72% \r\n            51 ~ 100   - 0.84% \r\n            100 ~ 250  - 0.96% \r\n            250 ~      - 1.08% \r\n         */\r\n        uint256 step_1 = .99 ether;\r\n        uint256 step_2 = 50 ether;\r\n        uint256 step_3 = 100 ether;\r\n        uint256 step_4 = 250 ether;\r\n\r\n        uint256 dailyPercent_0 = 25;   //  0.6%\r\n        uint256 dailyPercent_1 = 30;   //  0.72%\r\n        uint256 dailyPercent_2 = 35;   //  0.84%\r\n        uint256 dailyPercent_3 = 40;   //  0.96%\r\n        uint256 dailyPercent_4 = 45;   //  1.08%\r\n\r\n        if (_balance >= step_4) {\r\n            return dailyPercent_4;\r\n        } else if (_balance >= step_3 && _balance < step_4) {\r\n            return dailyPercent_3;\r\n        } else if (_balance >= step_2 && _balance < step_3) {\r\n            return dailyPercent_2;\r\n        } else if (_balance >= step_1 && _balance < step_2) {\r\n            return dailyPercent_1;\r\n        }\r\n\r\n        return dailyPercent_0;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates rate for lockbox balance for msg.sender. User for public\r\n     * @param _balance Balance to calculate percentage.\r\n     * @return rate for lockbox balance.\r\n     * TESTED\r\n     */\r\n    function percentRatePublic(uint256 _balance) public pure returns(uint256) {\r\n        /**\r\n            ~ .99 -    - 0.6%\r\n            1 ~ 50     - 0.72% \r\n            51 ~ 100   - 0.84% \r\n            100 ~ 250  - 0.96% \r\n            250 ~      - 1.08% \r\n         */\r\n        uint256 step_1 = .99 ether;\r\n        uint256 step_2 = 50 ether;\r\n        uint256 step_3 = 100 ether;\r\n        uint256 step_4 = 250 ether;\r\n\r\n        uint256 dailyPercent_0 = 60;   //  0.6%\r\n        uint256 dailyPercent_1 = 72;   //  0.72%\r\n        uint256 dailyPercent_2 = 84;   //  0.84%\r\n        uint256 dailyPercent_3 = 96;   //  0.96%\r\n        uint256 dailyPercent_4 = 108;   //  1.08%\r\n\r\n        if (_balance >= step_4) {\r\n            return dailyPercent_4;\r\n        } else if (_balance >= step_3 && _balance < step_4) {\r\n            return dailyPercent_3;\r\n        } else if (_balance >= step_2 && _balance < step_3) {\r\n            return dailyPercent_2;\r\n        } else if (_balance >= step_1 && _balance < step_2) {\r\n            return dailyPercent_1;\r\n        }\r\n\r\n        return dailyPercent_0;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_affiliate\",\"type\":\"address\"}],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whaleLimitInvest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateDevEscrow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockboxTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addressList\",\"type\":\"address[]\"},{\"name\":\"_amountList\",\"type\":\"uint256[]\"}],\"name\":\"addAddressesAndAmountsToMigrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawLockBoxPartially\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"guaranteedBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getLockBox\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whaleLimitLockbox\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountForAddressToMigrate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minInvest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawDevCommission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getLastInvestmentTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"invested\",\"type\":\"uint256\"},{\"name\":\"lockbox\",\"type\":\"uint256\"},{\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"name\":\"lastInvestmentTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawnProfitTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"migrateFunds\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawProfit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"devCommission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fromGame\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"calculateProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAffiliateCommission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawLockBoxAndClose\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"donatedTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"affiliateCommission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"affiliateCommissionWithdrawnTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gamesIncomeTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"percentRatePublic\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvestProfit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"donate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Migrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Invested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reinvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"affiliate\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawnAffiliateCommission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawnProfit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawnLockBoxPartially\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawnLockboxAndClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Onigiri","CompilerVersion":"v0.5.9+commit.e560f70d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://66b93cc05faccf44a887880349c6ae9d19cc77a45b8b22bff3c956e9042387dd"}]}