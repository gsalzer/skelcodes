{"status":"1","message":"OK","result":[{"SourceCode":"// File: @gnosis.pm/util-contracts/contracts/Token.sol\r\n\r\n/// Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\npragma solidity ^0.5.2;\r\n\r\n/// @title Abstract token contract - Functions to be implemented by token contracts\r\ncontract Token {\r\n    /*\r\n     *  Events\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n\r\n    /*\r\n     *  Public functions\r\n     */\r\n    function transfer(address to, uint value) public returns (bool);\r\n    function transferFrom(address from, address to, uint value) public returns (bool);\r\n    function approve(address spender, uint value) public returns (bool);\r\n    function balanceOf(address owner) public view returns (uint);\r\n    function allowance(address owner, address spender) public view returns (uint);\r\n    function totalSupply() public view returns (uint);\r\n}\r\n\r\n// File: contracts/Disbursement.sol\r\n\r\npragma solidity ^0.5.8;\r\n\r\n\r\n\r\n/// @title Disbursement contract - allows to distribute tokens over time\r\n/// @author Stefan George - <stefan@gnosis.pm>\r\ncontract Disbursement {\r\n\r\n    /*\r\n     *  Storage\r\n     */\r\n    address public owner;\r\n    address public receiver;\r\n    address public wallet;\r\n    uint public disbursementPeriod;\r\n    uint public startDate;\r\n    uint public withdrawnTokens;\r\n    Token public token;\r\n\r\n    /*\r\n     *  Modifiers\r\n     */\r\n    modifier isOwner() {\r\n        if (msg.sender != owner)\r\n            revert(\"Only owner is allowed to proceed\");\r\n        _;\r\n    }\r\n\r\n    modifier isReceiver() {\r\n        if (msg.sender != receiver)\r\n            revert(\"Only receiver is allowed to proceed\");\r\n        _;\r\n    }\r\n\r\n    modifier isWallet() {\r\n        if (msg.sender != wallet)\r\n            revert(\"Only wallet is allowed to proceed\");\r\n        _;\r\n    }\r\n\r\n    modifier isSetUp() {\r\n        if (address(token) == address(0))\r\n            revert(\"Contract is not set up\");\r\n        _;\r\n    }\r\n\r\n    /*\r\n     *  Public functions\r\n     */\r\n    /// @dev Constructor function sets contract owner and wallet address, which is allowed to withdraw all tokens anytime\r\n    /// @param _receiver Receiver of vested tokens\r\n    /// @param _wallet Gnosis multisig wallet address\r\n    /// @param _disbursementPeriod Vesting period in seconds\r\n    /// @param _startDate Start date of disbursement period (cliff)\r\n    constructor(address _receiver, address _wallet, uint _disbursementPeriod, uint _startDate)\r\n        public\r\n    {\r\n        if (_receiver == address(0) || _wallet == address(0) || _disbursementPeriod == 0)\r\n            revert(\"Arguments are null\");\r\n        owner = msg.sender;\r\n        receiver = _receiver;\r\n        wallet = _wallet;\r\n        disbursementPeriod = _disbursementPeriod;\r\n        startDate = _startDate;\r\n        if (startDate == 0){\r\n          startDate = now;\r\n        }\r\n    }\r\n\r\n    /// @dev Setup function sets external contracts' addresses\r\n    /// @param _token Token address\r\n    function setup(Token _token)\r\n        public\r\n        isOwner\r\n    {\r\n        if (address(token) != address(0) || address(_token) == address(0))\r\n            revert(\"Setup was executed already or address is null\");\r\n        token = _token;\r\n    }\r\n\r\n    /// @dev Transfers tokens to a given address\r\n    /// @param _to Address of token receiver\r\n    /// @param _value Number of tokens to transfer\r\n    function withdraw(address _to, uint256 _value)\r\n        public\r\n        isReceiver\r\n        isSetUp\r\n    {\r\n        uint maxTokens = calcMaxWithdraw();\r\n        if (_value > maxTokens){\r\n          revert(\"Withdraw amount exceeds allowed tokens\");\r\n        }\r\n        withdrawnTokens += _value;\r\n        token.transfer(_to, _value);\r\n    }\r\n\r\n    /// @dev Transfers all tokens to multisig wallet\r\n    function walletWithdraw()\r\n        public\r\n        isWallet\r\n        isSetUp\r\n    {\r\n        uint balance = token.balanceOf(address(this));\r\n        withdrawnTokens += balance;\r\n        token.transfer(wallet, balance);\r\n    }\r\n\r\n    /// @dev Calculates the maximum amount of vested tokens\r\n    /// @return Number of vested tokens to withdraw\r\n    function calcMaxWithdraw()\r\n        public\r\n        view\r\n        returns (uint)\r\n    {\r\n        uint maxTokens = (token.balanceOf(address(this)) + withdrawnTokens) * (now - startDate) / disbursementPeriod;\r\n        if (withdrawnTokens >= maxTokens || startDate > now){\r\n          return 0;\r\n        }\r\n        return maxTokens - withdrawnTokens;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"withdrawnTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calcMaxWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"walletWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"disbursementPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"receiver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_disbursementPeriod\",\"type\":\"uint256\"},{\"name\":\"_startDate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Disbursement","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000224cf0b963c59b95623b3dd6ce07b4ce40f7b13400000000000000000000000052df85e9de71aa1c210873bcf37ec46d36c99dc2000000000000000000000000000000000000000000000000000000000197c5dd0000000000000000000000000000000000000000000000000000000000000000","Library":"","LicenseType":"GNU LGPLv3","SwarmSource":"bzzr://e9b6ad4af28fbccad7b5537d923f35ef4f87f29a69a90823ccd9eb99e5b02630"}]}