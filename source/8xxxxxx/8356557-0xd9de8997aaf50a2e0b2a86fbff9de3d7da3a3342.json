{"status":"1","message":"OK","result":[{"SourceCode":"// This code is taken from https://gist.github.com/holiman/069de8d056a531575d2b786df3345665\r\n\r\npragma solidity ^0.5.11;\r\n\r\n\r\nlibrary Cloneable {\r\n    function clone(address a)\r\n        external\r\n        returns (address)\r\n    {\r\n\r\n    /*\r\n    Assembly of the code that we want to use as init-code in the new contract,\r\n    along with stack values:\r\n                    # bottom [ STACK ] top\r\n     PUSH1 00       # [ 0 ]\r\n     DUP1           # [ 0, 0 ]\r\n     PUSH20\r\n     <address>      # [0,0, address]\r\n     DUP1           # [0,0, address ,address]\r\n     EXTCODESIZE    # [0,0, address, size ]\r\n     DUP1           # [0,0, address, size, size]\r\n     SWAP4          # [ size, 0, address, size, 0]\r\n     DUP1           # [ size, 0, address ,size, 0,0]\r\n     SWAP2          # [ size, 0, address, 0, 0, size]\r\n     SWAP3          # [ size, 0, size, 0, 0, address]\r\n     EXTCODECOPY    # [ size, 0]\r\n     RETURN\r\n\r\n    The code above weighs in at 33 bytes, which is _just_ above fitting into a uint.\r\n    So a modified version is used, where the initial PUSH1 00 is replaced by `PC`.\r\n    This is one byte smaller, and also a bit cheaper Wbase instead of Wverylow. It only costs 2 gas.\r\n\r\n     PC             # [ 0 ]\r\n     DUP1           # [ 0, 0 ]\r\n     PUSH20\r\n     <address>      # [0,0, address]\r\n     DUP1           # [0,0, address ,address]\r\n     EXTCODESIZE    # [0,0, address, size ]\r\n     DUP1           # [0,0, address, size, size]\r\n     SWAP4          # [ size, 0, address, size, 0]\r\n     DUP1           # [ size, 0, address ,size, 0,0]\r\n     SWAP2          # [ size, 0, address, 0, 0, size]\r\n     SWAP3          # [ size, 0, size, 0, 0, address]\r\n     EXTCODECOPY    # [ size, 0]\r\n     RETURN\r\n\r\n    The opcodes are:\r\n    58 80 73 <address> 80 3b 80 93 80 91 92 3c F3\r\n    We get <address> in there by OR:ing the upshifted address into the 0-filled space.\r\n      5880730000000000000000000000000000000000000000803b80938091923cF3\r\n     +000000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx000000000000000000\r\n     -----------------------------------------------------------------\r\n      588073xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx00000803b80938091923cF3\r\n\r\n    This is simply stored at memory position 0, and create is invoked.\r\n    */\r\n        address retval;\r\n        assembly{\r\n            mstore(0x0, or (0x5880730000000000000000000000000000000000000000803b80938091923cF3 ,mul(a,0x1000000000000000000)))\r\n            retval := create(0,0, 32)\r\n        }\r\n        return retval;\r\n    }\r\n}","ABI":"[]","ContractName":"Cloneable","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c38e0fe89bf00436597cc10fa8bb5fc5f32f05ca2f3a18e4ddae0cb25f642050"}]}