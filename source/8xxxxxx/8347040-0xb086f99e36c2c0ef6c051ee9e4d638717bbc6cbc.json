{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.10;\r\n\r\n/**\r\n * @title Guardian node nest storage\r\n */\r\ncontract NEST_NodeSave {\r\n    IBMapping mappingContract;                      \r\n    IBNEST nestContract;                             \r\n    \r\n    /**\r\n    * @dev Initialization method\r\n    * @param map Mapping contract address\r\n    */\r\n    constructor (address map) public {\r\n        mappingContract = IBMapping(address(map));              \r\n        nestContract = IBNEST(address(mappingContract.checkAddress(\"nest\")));            \r\n    }\r\n    \r\n    /**\r\n    * @dev Change mapping contract\r\n    * @param map Mapping contract address\r\n    */\r\n    function changeMapping(address map) public onlyOwner {\r\n        mappingContract = IBMapping(address(map));              \r\n        nestContract = IBNEST(address(mappingContract.checkAddress(\"nest\")));            \r\n    }\r\n    \r\n    /**\r\n    * @dev Transfer out nest\r\n    * @param amount Transfer out quantity\r\n    * @param to Transfer out target\r\n    * @return Actual transfer out quantity\r\n    */\r\n    function turnOut(uint256 amount, address to) public onlyMiningCalculation returns(uint256) {\r\n        uint256 leftNum = nestContract.balanceOf(address(this));\r\n        if (leftNum >= amount) {\r\n            nestContract.transfer(to, amount);\r\n            return amount;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n    \r\n    modifier onlyOwner(){\r\n        require(mappingContract.checkOwners(msg.sender) == true);\r\n        _;\r\n    }\r\n\r\n    modifier onlyMiningCalculation(){\r\n        require(address(mappingContract.checkAddress(\"nodeAssignment\")) == msg.sender);\r\n        _;\r\n    }\r\n    \r\n}\r\n\r\n/**\r\n * @title Guardian node receives data\r\n */\r\ncontract NEST_NodeAssignmentData {\r\n    using SafeMath for uint256;\r\n    IBMapping mappingContract;              \r\n    uint256 nodeAllAmount = 9546345842385995696603;                                 \r\n    mapping(address => uint256) nodeLatestAmount;               \r\n    \r\n    /**\r\n    * @dev Initialization method\r\n    * @param map Mapping contract address\r\n    */\r\n    constructor (address map) public {\r\n        mappingContract = IBMapping(map); \r\n    }\r\n    \r\n    /**\r\n    * @dev Change mapping contract\r\n    * @param map Mapping contract address\r\n    */\r\n    function changeMapping(address map) public onlyOwner{\r\n        mappingContract = IBMapping(map); \r\n    }\r\n    \r\n    //  Add nest\r\n    function addNest(uint256 amount) public onlyNodeAssignment {\r\n        nodeAllAmount = nodeAllAmount.add(amount);\r\n    }\r\n    \r\n    //  View cumulative total\r\n    function checkNodeAllAmount() public view returns (uint256) {\r\n        return nodeAllAmount;\r\n    }\r\n    \r\n    //  Record last received quantity\r\n    function addNodeLatestAmount(address add ,uint256 amount) public onlyNodeAssignment {\r\n        nodeLatestAmount[add] = amount;\r\n    }\r\n    \r\n    //  View last received quantity\r\n    function checkNodeLatestAmount(address add) public view returns (uint256) {\r\n        return nodeLatestAmount[address(add)];\r\n    }\r\n    \r\n    modifier onlyOwner(){\r\n        require(mappingContract.checkOwners(msg.sender) == true);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyNodeAssignment(){\r\n        require(address(msg.sender) == address(mappingContract.checkAddress(\"nodeAssignment\")));\r\n        _;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Guardian node assignment\r\n */\r\ncontract NEST_NodeAssignment {\r\n    \r\n    using SafeMath for uint256;\r\n    IBMapping mappingContract;  \r\n    IBNEST nestContract;                                   \r\n    SuperMan supermanContract;                              \r\n    NEST_NodeSave nodeSave;\r\n    NEST_NodeAssignmentData nodeAssignmentData;\r\n\r\n    /**\r\n    * @dev Initialization method\r\n    * @param map Mapping contract address\r\n    */\r\n    constructor (address map) public {\r\n        mappingContract = IBMapping(map); \r\n        nestContract = IBNEST(address(mappingContract.checkAddress(\"nest\")));\r\n        supermanContract = SuperMan(address(mappingContract.checkAddress(\"nestNode\")));\r\n        nodeSave = NEST_NodeSave(address(mappingContract.checkAddress(\"nestNodeSave\")));\r\n        nodeAssignmentData = NEST_NodeAssignmentData(address(mappingContract.checkAddress(\"nodeAssignmentData\")));\r\n    }\r\n    \r\n    /**\r\n    * @dev Change mapping contract\r\n    * @param map Mapping contract address\r\n    */\r\n    function changeMapping(address map) public onlyOwner{\r\n        mappingContract = IBMapping(map); \r\n        nestContract = IBNEST(address(mappingContract.checkAddress(\"nest\")));\r\n        supermanContract = SuperMan(address(mappingContract.checkAddress(\"nestNode\")));\r\n        nodeSave = NEST_NodeSave(address(mappingContract.checkAddress(\"nestNodeSave\")));\r\n        nodeAssignmentData = NEST_NodeAssignmentData(address(mappingContract.checkAddress(\"nodeAssignmentData\")));\r\n    }\r\n    \r\n    /**\r\n    * @dev Deposit in nest\r\n    * @param amount Quantity deposited in nest\r\n    */\r\n    function bookKeeping(uint256 amount) public {\r\n        require(amount > 0);\r\n        require(nestContract.balanceOf(address(msg.sender)) >= amount);\r\n        require(nestContract.allowance(address(msg.sender), address(this)) >= amount);\r\n        require(nestContract.transferFrom(address(msg.sender), address(nodeSave), amount));\r\n        nodeAssignmentData.addNest(amount);\r\n    }\r\n    \r\n    /**\r\n    * @dev Guardian node collection\r\n    */\r\n    function nodeGet() public {\r\n        require(address(msg.sender) == address(tx.origin));\r\n        require(supermanContract.balanceOf(address(msg.sender)) > 0);\r\n        uint256 allAmount = nodeAssignmentData.checkNodeAllAmount();\r\n        uint256 amount = allAmount.sub(nodeAssignmentData.checkNodeLatestAmount(address(msg.sender)));\r\n        uint256 getAmount = amount.mul(supermanContract.balanceOf(address(msg.sender))).div(1500);\r\n        require(nestContract.balanceOf(address(nodeSave)) >= getAmount);\r\n        nodeSave.turnOut(getAmount,address(msg.sender));\r\n        nodeAssignmentData.addNodeLatestAmount(address(msg.sender),allAmount);\r\n    }\r\n    \r\n    /**\r\n    * @dev Transfer settlement\r\n    * @param fromAdd Transfer out address\r\n    * @param toAdd Transfer in address\r\n    */\r\n    function nodeCount(address fromAdd, address toAdd) public {\r\n        require(address(supermanContract) == address(msg.sender));\r\n        require(supermanContract.balanceOf(address(fromAdd)) > 0);\r\n        uint256 allAmount = nodeAssignmentData.checkNodeAllAmount();\r\n        \r\n        uint256 amountFrom = allAmount.sub(nodeAssignmentData.checkNodeLatestAmount(address(fromAdd)));\r\n        uint256 getAmountFrom = amountFrom.mul(supermanContract.balanceOf(address(fromAdd))).div(1500);\r\n        require(nestContract.balanceOf(address(nodeSave)) >= getAmountFrom);\r\n        nodeSave.turnOut(getAmountFrom,address(fromAdd));\r\n        nodeAssignmentData.addNodeLatestAmount(address(fromAdd),allAmount);\r\n        \r\n        uint256 amountTo = allAmount.sub(nodeAssignmentData.checkNodeLatestAmount(address(toAdd)));\r\n        uint256 getAmountTo = amountTo.mul(supermanContract.balanceOf(address(toAdd))).div(1500);\r\n        require(nestContract.balanceOf(address(nodeSave)) >= getAmountTo);\r\n        nodeSave.turnOut(getAmountTo,address(toAdd));\r\n        nodeAssignmentData.addNodeLatestAmount(address(toAdd),allAmount);\r\n    }\r\n    \r\n    //  Amount available to the guardian node\r\n    function checkNodeNum() public view returns (uint256) {\r\n         uint256 allAmount = nodeAssignmentData.checkNodeAllAmount();\r\n         uint256 amount = allAmount.sub(nodeAssignmentData.checkNodeLatestAmount(address(msg.sender)));\r\n         uint256 getAmount = amount.mul(supermanContract.balanceOf(address(msg.sender))).div(1500);\r\n         return getAmount;\r\n    }\r\n    \r\n    modifier onlyOwner(){\r\n        require(mappingContract.checkOwners(msg.sender) == true);\r\n        _;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    \r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n *\r\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\r\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\r\n * compliant implementations may not do it.\r\n */\r\ncontract SuperMan is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n    \r\n    IBMapping mappingContract;  //映射合约\r\n\r\n    uint256 private _totalSupply = 1500;\r\n    string public name = \"NestNode\";\r\n    string public symbol = \"NN\";\r\n    uint8 public decimals = 0;\r\n\r\n    constructor (address map) public {\r\n    \t_balances[msg.sender] = _totalSupply;\r\n    \tmappingContract = IBMapping(map); \r\n    }\r\n    \r\n    function changeMapping(address map) public onlyOwner{\r\n        mappingContract = IBMapping(map);\r\n    }\r\n    \r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param owner The address to query the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified addresses\r\n    * @param from The address to transfer from.\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n        \r\n        NEST_NodeAssignment nodeAssignment = NEST_NodeAssignment(address(mappingContract.checkAddress(\"nodeAssignment\")));\r\n        nodeAssignment.nodeCount(from, to);\r\n        \r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n        \r\n        \r\n    }\r\n    \r\n    modifier onlyOwner(){\r\n        require(mappingContract.checkOwners(msg.sender) == true);\r\n        _;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    int256 constant private INT256_MIN = -2**255;\r\n\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Multiplies two signed integers, reverts on overflow.\r\n    */\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        require(!(a == -1 && b == INT256_MIN)); // This is the only case of overflow not detected by the check below\r\n\r\n        int256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        require(b != 0); // Solidity only automatically asserts when dividing by 0\r\n        require(!(b == -1 && a == INT256_MIN)); // This is the only case of overflow\r\n\r\n        int256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two signed integers, reverts on overflow.\r\n    */\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two signed integers, reverts on overflow.\r\n    */\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract IBMapping {\r\n\tfunction checkAddress(string memory name) public view returns (address contractAddress);\r\n\tfunction checkOwners(address man) public view returns (bool);\r\n}\r\n\r\ncontract IBNEST {\r\n    function totalSupply() public view returns (uint supply);\r\n    function balanceOf( address who ) public view returns (uint value);\r\n    function allowance( address owner, address spender ) public view returns (uint _allowance);\r\n\r\n    function transfer( address to, uint256 value) external;\r\n    function transferFrom( address from, address to, uint value) public returns (bool ok);\r\n    function approve( address spender, uint value ) public returns (bool ok);\r\n\r\n    event Transfer( address indexed from, address indexed to, uint value);\r\n    event Approval( address indexed owner, address indexed spender, uint value);\r\n    \r\n    function balancesStart() public view returns(uint256);\r\n    function balancesGetBool(uint256 num) public view returns(bool);\r\n    function balancesGetNext(uint256 num) public view returns(uint256);\r\n    function balancesGetValue(uint256 num) public view returns(address, uint256);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addNest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkNodeAllAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"map\",\"type\":\"address\"}],\"name\":\"changeMapping\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"add\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addNodeLatestAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"add\",\"type\":\"address\"}],\"name\":\"checkNodeLatestAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"map\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"NEST_NodeAssignmentData","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005e7db2ffc5b2c7c47103e4f21c702bc402603fbf","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://6c795cb186f7f318191ca14ddfcaa103e66bb46ec88ad5e9d051e21f94b42f08"}]}