{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.7;\r\n\r\n/**\r\n  * @title The GXToken Governance Contract\r\n  * @author NvestTechnologies\r\n  * @notice The GXToken Governance Contract is the core contract governing the allocation and withdrawals through a simple multi-sig mechanism.\r\n  */\r\n\r\n/**\r\n * Copyright Â©2019 Nvest Technologies. All rights reserved. Code contained within or this file cannot be copied, modified and / or distributed \r\n * without the express written permission. Unauthorized copying or use of this file, via any medium is strictly prohibited.\r\n */\r\n\r\n\r\ncontract ERC20Interface {\r\n\r\n    function totalSupply() public view returns (uint);\r\n\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n\r\n}\r\n\r\n\r\n\r\n\r\ncontract GX_Governance{\r\n    \r\n    \r\n    struct Holder{\r\n        \r\n        uint256  origin_timestamp;\r\n        uint256  lockperiod;\r\n        uint256  break_point_timestamp; // used only  for TeamFunds\r\n\r\n        uint256  request_init_timestamp;\r\n        uint256  request_end_timestamp;\r\n        \r\n        \r\n        uint256  allocation_percentage;\r\n        uint256  allocated_volume;\r\n        uint256  current_volume;\r\n\r\n        uint256  voting_count ;\r\n        uint256  transfer_volume;\r\n        \r\n        mapping (address => bool) voting_validator;\r\n        \r\n        bool valid;\r\n    }\r\n    uint256 public gx_total_supply = 350000000;\r\n    \r\n    uint256 public decimal_factor = (10 ** 18);\r\n\r\n    mapping (address => Holder) public holders;\r\n    \r\n    address public token_address = 0x60c87297A1fEaDC3C25993FfcadC54e99971e307;\r\n\r\n    address public admin1 = 0x3f7af1681465eED50772221f2Ff1D4395EC05b4a;\r\n    address public admin2 = 0x7cd63a912577D485312Df3b8Dde2b9D4Dc7030f2;\r\n    address public admin3 = 0x3481A3E8895Aa246890B0373AaCBC2Df84d34DbD;\r\n\r\n/**\r\n * @notice team_funds: These funds are only locked funds for over a period of two years and will be un-locked at the rate of 25% approximately for every 6 months.\r\n */\r\n\r\n    \r\n    address public team_funds ;\r\n    address public development_funds;\r\n    address public exchanges;\r\n    address public public_sale;\r\n    address public legal_compliance_stragtegic_partners;\r\n    \r\n    constructor() public{\r\n        \r\n    }\r\n    \r\n    event Message(string _message);\r\n    \r\n    function set_funding_address (address _team_funds, address _development_funds, address _public_sale, address _exchanges, address _legal_compliance_stragtegic_partners) public {\r\n        \r\n        require(msg.sender == admin1 || msg.sender == admin2 || msg.sender == admin3 , \"Not an admin\");\r\n        \r\n        \r\n        team_funds =_team_funds;\r\n        holders[team_funds].allocation_percentage = 12; //to be locked\r\n        holders[team_funds].allocated_volume = (gx_total_supply * 12)/100;\r\n        holders[team_funds].current_volume = (gx_total_supply * 12)/100;\r\n        holders[team_funds].valid = true;\r\n        holders[team_funds].origin_timestamp = now;\r\n        holders[team_funds].lockperiod = 6 * 30 * 24 * 60 * 60;\r\n        holders[team_funds].break_point_timestamp = now;\r\n        \r\n\r\n        development_funds = _development_funds;\r\n        holders[development_funds].allocation_percentage = 8;\r\n        holders[development_funds].allocated_volume = (gx_total_supply * 8)/100;\r\n        holders[development_funds].current_volume = (gx_total_supply * 8)/100;\r\n        holders[development_funds].valid = true;\r\n        holders[development_funds].origin_timestamp = now;\r\n        holders[development_funds].lockperiod = 0;\r\n\r\n        exchanges = _exchanges;\r\n        holders[exchanges].allocation_percentage = 10;\r\n        holders[exchanges].allocated_volume = (gx_total_supply * 10)/100;\r\n        holders[exchanges].current_volume = (gx_total_supply * 10)/100 - 20000;\r\n        holders[exchanges].valid = true;\r\n        holders[exchanges].origin_timestamp = now;\r\n        holders[exchanges].lockperiod = 0;\r\n\r\n        public_sale = _public_sale;\r\n        holders[public_sale].allocation_percentage = 55;\r\n        holders[public_sale].allocated_volume = (gx_total_supply * 55)/100;\r\n        holders[public_sale].current_volume = (gx_total_supply * 55)/100 - 7505015;\r\n        holders[public_sale].valid = true;\r\n        holders[public_sale].origin_timestamp = now;\r\n        holders[public_sale].lockperiod = 0;\r\n\r\n        legal_compliance_stragtegic_partners = _legal_compliance_stragtegic_partners;\r\n        holders[legal_compliance_stragtegic_partners].allocation_percentage = 15;\r\n        holders[legal_compliance_stragtegic_partners].allocated_volume = (gx_total_supply * 15)/100;\r\n        holders[legal_compliance_stragtegic_partners].current_volume = (gx_total_supply * 15)/100;\r\n        holders[legal_compliance_stragtegic_partners].valid = true;\r\n        holders[legal_compliance_stragtegic_partners].origin_timestamp = now;\r\n        holders[legal_compliance_stragtegic_partners].lockperiod = 0;\r\n    }\r\n    \r\n    /**\r\n     * @param  _holder --> Contract address which holds the distributed funds.\r\n     * @param  _to --> Address to which the funds are to be transferred.\r\n     * @param  _volume --> Value of Funds to be transferred.\r\n    */\r\n    \r\n    function approve_transfer(address _holder, address _to, uint256 _volume) public returns(string memory){\r\n        ERC20Interface token = ERC20Interface(token_address);\r\n        \r\n        require(msg.sender == admin1 || msg.sender == admin2 || msg.sender == admin3 , \"Not an admin\");\r\n        require(holders[_holder].valid == true,\"Invalid Holder\");\r\n        require(holders[_holder].current_volume > 0, \"All allocated supply is already taken/transfered\");\r\n        require(_volume > 0,\"Enter greater than zero\");\r\n        require(token.balanceOf(_holder) >= _volume);\r\n        \r\n        if(_holder == team_funds){\r\n            require(now > holders[_holder].break_point_timestamp + holders[_holder].lockperiod,\"Try after lockin period elapsed\");\r\n            _volume = (holders[_holder].allocated_volume * 25)/ 100;  \r\n        } \r\n        \r\n        require(_volume <= holders[_holder].current_volume,\"Insufficient Volume\");\r\n        require(holders[_holder].voting_validator[msg.sender] == false ,\"Already voted\");\r\n\r\n        \r\n        if(holders[_holder].voting_count ==  0){\r\n            holders[_holder].voting_count = holders[_holder].voting_count + 1;\r\n            \r\n            holders[_holder].transfer_volume = _volume;\r\n            holders[_holder].voting_validator[msg.sender] = true;\r\n            holders[_holder].request_init_timestamp = now;\r\n            holders[_holder].request_end_timestamp = now + (24 * 60 * 60); // 1 day validity of any request\r\n            emit Message(\"Vote Counted !!!\");\r\n            return \"Vote Counted !!!\";\r\n        }\r\n        else{\r\n            require(holders[_holder].transfer_volume == _volume, \"Please agree upon the same volume\");\r\n            holders[_holder].voting_count = holders[_holder].voting_count + 1;\r\n            \r\n            if(holders[_holder].voting_count >= 2){\r\n                \r\n                if(now > holders[_holder].request_init_timestamp && now <= holders[_holder].request_end_timestamp){\r\n                \r\n                    \r\n                    token.transferFrom(_holder, _to, (holders[_holder].transfer_volume ) * decimal_factor);\r\n\r\n                    holders[_holder].current_volume = holders[_holder].current_volume - holders[_holder].transfer_volume;\r\n                    if(_holder == team_funds){\r\n                        holders[_holder].break_point_timestamp = holders[_holder].break_point_timestamp + holders[_holder].lockperiod;\r\n                    }\r\n                    clear_values(_holder);\r\n                    emit Message(\"Approve & Transfer Successfull\");\r\n                    return \"true\";\r\n\r\n                }\r\n                else {\r\n                    clear_values(_holder);\r\n                    emit Message(\"Request Expired\");\r\n                    return \"Request Expired\";\r\n                }             \r\n             \r\n            }\r\n        } \r\n    }\r\n\r\n    function clear_values(address _holder) internal {\r\n\r\n                holders[_holder].voting_count = 0;\r\n                holders[_holder].transfer_volume = 0;\r\n                holders[_holder].voting_validator[admin1]  = false;\r\n                holders[_holder].voting_validator[admin2]  = false;\r\n                holders[_holder].voting_validator[admin3]  = false;\r\n                holders[_holder].request_init_timestamp = 0;\r\n                holders[_holder].request_end_timestamp = 0;\r\n\r\n    }\r\n    \r\n    \r\n    function distribute_funds () public {\r\n        require(msg.sender == admin1 || msg.sender == admin2 || msg.sender == admin3 , \"Not an admin\");\r\n        \r\n        ERC20Interface token = ERC20Interface(token_address);\r\n        \r\n        token.transfer(team_funds, holders[team_funds].current_volume * decimal_factor);\r\n        token.transfer(development_funds, holders[development_funds].current_volume * decimal_factor);\r\n        token.transfer(public_sale, holders[public_sale].current_volume * decimal_factor);\r\n        token.transfer(exchanges, holders[exchanges].current_volume * decimal_factor);\r\n        token.transfer(legal_compliance_stragtegic_partners, holders[legal_compliance_stragtegic_partners].current_volume * decimal_factor);\r\n        \r\n        emit Message (\"Funds Dispensed!!! \");\r\n    }\r\n    \r\n    \r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"team_funds\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimal_factor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"development_funds\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"holders\",\"outputs\":[{\"name\":\"origin_timestamp\",\"type\":\"uint256\"},{\"name\":\"lockperiod\",\"type\":\"uint256\"},{\"name\":\"break_point_timestamp\",\"type\":\"uint256\"},{\"name\":\"request_init_timestamp\",\"type\":\"uint256\"},{\"name\":\"request_end_timestamp\",\"type\":\"uint256\"},{\"name\":\"allocation_percentage\",\"type\":\"uint256\"},{\"name\":\"allocated_volume\",\"type\":\"uint256\"},{\"name\":\"current_volume\",\"type\":\"uint256\"},{\"name\":\"voting_count\",\"type\":\"uint256\"},{\"name\":\"transfer_volume\",\"type\":\"uint256\"},{\"name\":\"valid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchanges\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_team_funds\",\"type\":\"address\"},{\"name\":\"_development_funds\",\"type\":\"address\"},{\"name\":\"_public_sale\",\"type\":\"address\"},{\"name\":\"_exchanges\",\"type\":\"address\"},{\"name\":\"_legal_compliance_stragtegic_partners\",\"type\":\"address\"}],\"name\":\"set_funding_address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"public_sale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"legal_compliance_stragtegic_partners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_volume\",\"type\":\"uint256\"}],\"name\":\"approve_transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gx_total_supply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"distribute_funds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"Message\",\"type\":\"event\"}]","ContractName":"GX_Governance","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://ab4076c343ead63eb2d7f70aebfa2d7b6b340dfdd138777815b5cfc05b1c5003"}]}