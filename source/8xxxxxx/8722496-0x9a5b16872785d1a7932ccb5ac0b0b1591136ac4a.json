{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n|| DIGITAL DOLLAR RETAINER REGISTRY (DDRR) ||\r\n\r\nDEAR MSG.SENDER(S):\r\n\r\n/ DDRR is a project in beta.\r\n// Please audit and use at your own risk.\r\n/// Entry into DDRR shall not create an attorney/client relationship.\r\n//// Likewise, DDRR should not be construed as legal advice or replacement for professional counsel.\r\n\r\n///// STEAL THIS C0D3SL4W ( . . . But tipping is also cool! See tip0E function below ;-0)\r\n\r\n|| Open, ESQ LLC/DAO ||\r\n*/\r\n\r\npragma solidity 0.5.9;\r\n\r\n/***************\r\nDDRR CONTRACT\r\n***************/\r\n\r\ncontract DigitalDollarRetainerRegistry {\r\n    \r\n\tmapping (uint256 => DDR) public rddr; // **mapping registered rddr call numbers**\r\n\r\n\tstruct DDR {\r\n        \taddress client; // **client ethereum address**\r\n        \taddress provider; // **ethereum address that receives payments in exchange for goods or services**\r\n        \tERC20 ddrToken; // **ERC-20 digital token address used to transfer value on ethereum under rddr / e.g., DAI 'digital dollar' - 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359**\r\n        \tstring deliverable; // **goods or services (deliverable) retained for benefit of ethereum payments**\r\n        \tstring governingLawForum; // **choice of law and forum for retainer relationship (or similar legal description)**\r\n        \tuint256 ddrNumber; // **rddr number generated on registration / identifies rddr for payDDR calls**\r\n        \tuint256 timeStamp; // **block.timestamp of registration used to calculate retainerTermination UnixTime**\r\n        \tuint256 retainerDuration; // **duration of rddr in seconds**\r\n        \tuint256 retainerTermination; // **termination date of rddr in UnixTime**\r\n        \tuint256 deliverableRate; // **rate for rddr deliverables in digital dollar wei amount / 1 = 1000000000000000000**\r\n        \tuint256 paid; // **tracking amount of designated ERC-20 paid under rddr in wei amount**\r\n        \tuint256 payCap; // **cap in wei amount to limit payments under rddr**;\r\n    \t}\r\n\r\n\t// **template legal wrapper stating general human-readable DDR terms for rddr to inherit**\r\n\tstring public ddrTerms = \"|| Establishing a digital retainer hereby as [[ddrNumber]] and acknowledging mutual consideration and agreement, Client, identified by ethereum address 0x[[client]], commits to perform under this digital payment transactional script capped at $[[payCap]] digital dollar value denominated in 0x[[ddrToken]] for benefit of Provider, identified by ethereum address 0x[[provider]], in exchange for prompt satisfaction of the following, [[deliverable]], to Client by Provider upon scripted payments set at the rate of $[[deliverableRate]] per deliverable, with such retainer relationship not to exceed [[retainerDuration]] seconds and to be governed by choice of [[governingLawForum]] law and 'either/or' arbitration rules in [[governingLawForum]]. ||\";\r\n\tuint256 public RDDR; // **number of DDRs registered hereby**\r\n\r\n\tevent Registered(address indexed client, address indexed provider); // **triggered on successful registration**\r\n\tevent Paid(uint256 ratePaid, uint256 totalPaid, address indexed client); // **triggered on successful rddr payments**\r\n\r\n\tfunction registerDDR(\r\n    \taddress client,\r\n    \taddress provider,\r\n    \tERC20 ddrToken,\r\n    \tstring memory deliverable,\r\n    \tstring memory governingLawForum,\r\n    \tuint256 retainerDuration,\r\n    \tuint256 deliverableRate,\r\n    \tuint256 payCap) public {\r\n        \trequire(deliverableRate <= payCap, \"constructor: deliverableRate cannot exceed payCap\"); // **program safety check / economics**\r\n        \tuint256 ddrNumber = RDDR + 1; // **reflects new rddr value for tracking payments**\r\n        \tuint256 paid = 0; // **initial zero value for rddr** \r\n        \tuint256 timeStamp = now; // **block.timestamp of rddr**\r\n        \tuint256 retainerTermination = timeStamp + retainerDuration; // **rddr termination date in UnixTime**\r\n    \r\n        \tRDDR = RDDR + 1; // counts new entry to RDDR\r\n    \r\n        \trddr[ddrNumber] = DDR( // populate rddr data \r\n                \tclient,\r\n                \tprovider,\r\n                \tddrToken,\r\n                \tdeliverable,\r\n                \tgoverningLawForum,\r\n                \tddrNumber,\r\n                \ttimeStamp,\r\n                \tretainerDuration,\r\n                \tretainerTermination,\r\n                \tdeliverableRate,\r\n                \tpaid,\r\n                \tpayCap);\r\n        \t \r\n            \temit Registered(client, provider); \r\n        \t}\r\n\r\n\tfunction payDDR(uint256 ddrNumber) public { // **forwards approved ddrToken deliverableRate amount to provider ethereum address**\r\n    \tDDR storage ddr = rddr[ddrNumber]; // **retrieve rddr data**\r\n    \trequire (now <= ddr.retainerTermination); // **program safety check / time**\r\n    \trequire(address(msg.sender) == ddr.client); // program safety check / authorization\r\n    \trequire(ddr.paid + ddr.deliverableRate <= ddr.payCap, \"payDAI: payCap exceeded\"); // **program safety check / economics**\r\n    \tddr.ddrToken.transferFrom(msg.sender, ddr.provider, ddr.deliverableRate); // **executes ERC-20 transfer**\r\n    \tddr.paid = ddr.paid + ddr.deliverableRate; // **tracks amount paid under rddr**\r\n        \temit Paid(ddr.deliverableRate, ddr.paid, msg.sender); \r\n    \t}\r\n   \t \r\n\tfunction tipOpenESQ() public payable { // **tip Open, ESQ LLC/DAO ether (Îž) value for legal engineering R+D / LEETH**\r\n    \t0xBBE222Ef97076b786f661246232E41BE0DFf6cc4.transfer(msg.value); // forwards value to OE-DAO ethereum address\r\n    \t}\r\n}\r\n\r\n/***************\r\nERC-20 CONTRACT - DDRR REFERENCE ATTACHMENT\r\n***************/\r\n\r\n/**\r\n* @title ERC-20 Contract\r\n* @dev see https://github.com/ethereum/EIPs/issues/20\r\n*/\r\ncontract ERC20 {\r\n\tuint256 public totalSupply;\r\n\r\n\tfunction balanceOf(address who) public view returns (uint256);\r\n\tfunction transfer(address to, uint256 value) public returns (bool);\r\n\tfunction allowance(address owner, address spender) public view returns (uint256);\r\n\tfunction transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\tfunction approve(address spender, uint256 value) public returns (bool);\r\n\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"tipOpenESQ\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rddr\",\"outputs\":[{\"name\":\"client\",\"type\":\"address\"},{\"name\":\"provider\",\"type\":\"address\"},{\"name\":\"ddrToken\",\"type\":\"address\"},{\"name\":\"deliverable\",\"type\":\"string\"},{\"name\":\"governingLawForum\",\"type\":\"string\"},{\"name\":\"ddrNumber\",\"type\":\"uint256\"},{\"name\":\"timeStamp\",\"type\":\"uint256\"},{\"name\":\"retainerDuration\",\"type\":\"uint256\"},{\"name\":\"retainerTermination\",\"type\":\"uint256\"},{\"name\":\"deliverableRate\",\"type\":\"uint256\"},{\"name\":\"paid\",\"type\":\"uint256\"},{\"name\":\"payCap\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ddrNumber\",\"type\":\"uint256\"}],\"name\":\"payDDR\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RDDR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"client\",\"type\":\"address\"},{\"name\":\"provider\",\"type\":\"address\"},{\"name\":\"ddrToken\",\"type\":\"address\"},{\"name\":\"deliverable\",\"type\":\"string\"},{\"name\":\"governingLawForum\",\"type\":\"string\"},{\"name\":\"retainerDuration\",\"type\":\"uint256\"},{\"name\":\"deliverableRate\",\"type\":\"uint256\"},{\"name\":\"payCap\",\"type\":\"uint256\"}],\"name\":\"registerDDR\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ddrTerms\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"client\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ratePaid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalPaid\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"client\",\"type\":\"address\"}],\"name\":\"Paid\",\"type\":\"event\"}]","ContractName":"DigitalDollarRetainerRegistry","CompilerVersion":"v0.5.9+commit.e560f70d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://3ed59896f2307d45ae54cf36a0af9a289d0b9e4c1da614f73b85e838e243f166"}]}