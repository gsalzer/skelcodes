{"status":"1","message":"OK","result":[{"SourceCode":"//                               __     __               __\r\n//    _________ ___  ____ ______/ /_   / /__ _   _____  / /\r\n//   / ___/ __ `__ \\/ __ `/ ___/ __/  / / _ \\ | / / _ \\/ / \r\n//  (__  ) / / / / / /_/ / /  / /_   / /  __/ |/ /  __/ /  \r\n// /____/_/ /_/ /_/\\__,_/_/   \\__/  /_/\\___/|___/\\___/_/   \r\n//\r\n//\r\n// Telegram: @smartlvl\r\n// hashtag: #smartlvl\r\n\r\n\r\npragma solidity ^0.5.11;\r\n\r\ncontract Smartlevel {\r\n\taddress public creator;\r\n\tuint public currentUserID;\r\n\r\n\tmapping(uint => uint) public levelPrice;\r\n\tmapping(address => User) public users;\r\n\tmapping(uint => address) public userAddresses;\r\n\r\n\tuint MAX_LEVEL = 10;\r\n\tuint REFERRALS_LIMIT = 3;\r\n\tuint LEVEL_DURATION = 15 days;\r\n\r\n\tstruct User {\r\n\t\tuint id;\r\n\t\tuint referrerID;\r\n\t\taddress[] referrals;\r\n\t\tmapping (uint => uint) levelExpiresAt;\r\n\t}\r\n\r\n\tevent RegisterUserEvent(address indexed user, address indexed referrer, uint time, uint id, uint expires);\r\n\tevent BuyLevelEvent(address indexed user, uint indexed level, uint time, uint expires);\r\n\tevent GetLevelProfitEvent(address indexed user, address indexed referral, uint indexed level, uint time);\r\n\tevent LostLevelProfitEvent(address indexed user, address indexed referral, uint indexed level, uint time);\r\n\r\n\tmodifier userNotRegistered() {\r\n\t\trequire(users[msg.sender].id == 0, 'User is already registered');\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier userRegistered() {\r\n\t\trequire(users[msg.sender].id != 0, 'User does not exist');\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier validReferrerID(uint _referrerID) {\r\n\t\trequire(_referrerID > 0 && _referrerID <= currentUserID, 'Invalid referrer ID');\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier validLevel(uint _level) {\r\n\t\trequire(_level > 0 && _level <= MAX_LEVEL, 'Invalid level');\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier validLevelAmount(uint _level) {\r\n\t\trequire(msg.value == levelPrice[_level], 'Invalid level amount');\r\n\t\t_;\r\n\t}\r\n\r\n\tconstructor() public {\r\n\t\tlevelPrice[1] = 0.03 ether;\r\n\t\tlevelPrice[2] = 0.09 ether;\r\n\t\tlevelPrice[3] = 0.15 ether;\r\n\t\tlevelPrice[4] = 0.3 ether;\r\n\t\tlevelPrice[5] = 0.35 ether;\r\n\t\tlevelPrice[6] = 0.6 ether;\r\n\t\tlevelPrice[7] = 1 ether;\r\n\t\tlevelPrice[8] = 2 ether;\r\n\t\tlevelPrice[9] = 5 ether;\r\n\t\tlevelPrice[10] = 10 ether;\r\n\r\n\t\tcurrentUserID++;\r\n\r\n\t\tcreator = 0x91c59276d6f1360BEB35e7e5105FE6A0BD26df2c;\r\n\r\n\t\tusers[creator] = createNewUser(0);\r\n\t\tuserAddresses[currentUserID] = creator;\r\n\r\n\t\tfor(uint i = 1; i <= MAX_LEVEL; i++) {\r\n\t\t\tusers[creator].levelExpiresAt[i] = 1893456000;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction() external payable {\r\n\t\tuint level;\r\n\r\n\t\tfor(uint i = 1; i <= MAX_LEVEL; i++) {\r\n\t\t\tif(msg.value == levelPrice[i]) {\r\n\t\t\t\tlevel = i;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\trequire(level > 0, 'Invalid amount has sent');\r\n\r\n\t\tif(users[msg.sender].id != 0) {\r\n\t\t\tbuyLevel(level);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif(level != 1) {\r\n\t\t\trevert('Buy first level for 0.03 ETH');\r\n\t\t}\r\n\r\n\t\taddress referrer = bytesToAddress(msg.data);\r\n\t\tregisterUser(users[referrer].id);\r\n\t}\r\n\t\r\n\tfunction registerUser(uint _referrerID) public payable userNotRegistered() validReferrerID(_referrerID) validLevelAmount(1) {\r\n\t\tif(users[userAddresses[_referrerID]].referrals.length >= REFERRALS_LIMIT) {\r\n\t\t\t_referrerID = users[findReferrer(userAddresses[_referrerID])].id;\r\n\t\t}\r\n\r\n\t\tcurrentUserID++;\r\n\r\n\t\tusers[msg.sender] = createNewUser(_referrerID);\r\n\t\tuserAddresses[currentUserID] = msg.sender;\r\n\t\tusers[msg.sender].levelExpiresAt[1] = now + LEVEL_DURATION;\r\n\r\n\t\tusers[userAddresses[_referrerID]].referrals.push(msg.sender);\r\n\r\n\t\ttransferLevelPayment(1, msg.sender);\r\n\t\temit RegisterUserEvent(msg.sender, userAddresses[_referrerID], now, currentUserID, users[msg.sender].levelExpiresAt[1]);\r\n\t}\r\n\r\n\tfunction buyLevel(uint _level) public payable userRegistered() validLevel(_level) validLevelAmount(_level) {\r\n\t\tfor(uint l = _level - 1; l > 0; l--) {\r\n\t\t\trequire(getUserLevelExpiresAt(msg.sender, l) >= now, 'Buy the previous level');\r\n\t\t}\r\n\r\n\t\tif(getUserLevelExpiresAt(msg.sender, _level) < now) {\r\n\t\t\tusers[msg.sender].levelExpiresAt[_level] = now + LEVEL_DURATION;\r\n\t\t} else {\r\n\t\t\tusers[msg.sender].levelExpiresAt[_level] += LEVEL_DURATION;\r\n\t\t}\r\n\r\n\t\ttransferLevelPayment(_level, msg.sender);\r\n\t\temit BuyLevelEvent(msg.sender, _level, now, users[msg.sender].levelExpiresAt[_level]);\r\n\t}\r\n\r\n\tfunction findReferrer(address _user) public view returns(address) {\r\n\t\tif(users[_user].referrals.length < REFERRALS_LIMIT) {\r\n\t\t\treturn _user;\r\n\t\t}\r\n\r\n\t\taddress[1200] memory referrals;\r\n\t\treferrals[0] = users[_user].referrals[0];\r\n\t\treferrals[1] = users[_user].referrals[1];\r\n\t\treferrals[2] = users[_user].referrals[2];\r\n\r\n\t\taddress referrer;\r\n\r\n\t\tfor(uint i = 0; i < 1200; i++) {\r\n\t\t\tif(users[referrals[i]].referrals.length < REFERRALS_LIMIT) {\r\n\t\t\t\treferrer = referrals[i];\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tif(i >= 400) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\treferrals[(i + 1) * 3] = users[referrals[i]].referrals[0];\r\n\t\t\treferrals[(i + 1) * 3 + 1] = users[referrals[i]].referrals[1];\r\n\t\t\treferrals[(i + 1) * 3 + 2] = users[referrals[i]].referrals[2];\r\n\t\t}\r\n\r\n\t\trequire(referrer != address(0), 'Referrer was not found');\r\n\r\n\t\treturn referrer;\r\n\t}\r\n\r\n\tfunction transferLevelPayment(uint _level, address _user) internal {\r\n\t\tuint height = _level % 2 == 0 ? 2 : 1;\r\n\t\taddress referrer = getUserUpline(_user, height);\r\n\r\n\t\tif(referrer == address(0)) {\r\n\t\t\treferrer = creator;\r\n\t\t}\r\n\r\n\t\tif(getUserLevelExpiresAt(referrer, _level) < now) {\r\n\t\t\temit LostLevelProfitEvent(referrer, msg.sender, _level, now);\r\n\t\t\ttransferLevelPayment(_level, referrer);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif(addressToPayable(referrer).send(msg.value)) {\r\n\t\t\temit GetLevelProfitEvent(referrer, msg.sender, _level, now);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tfunction getUserUpline(address _user, uint height) public view returns(address) {\r\n\t\tif(height <= 0 || _user == address(0)) {\r\n\t\t\treturn _user;\r\n\t\t}\r\n\r\n\t\treturn this.getUserUpline(userAddresses[users[_user].referrerID], height - 1);\r\n\t}\r\n\r\n\tfunction getUserReferrals(address _user) public view returns(address[] memory) {\r\n\t\treturn users[_user].referrals;\r\n\t}\r\n\r\n\tfunction getUserLevelExpiresAt(address _user, uint _level) public view returns(uint) {\r\n\t\treturn users[_user].levelExpiresAt[_level];\r\n\t}\r\n\r\n\r\n\tfunction createNewUser(uint _referrerID) private view returns(User memory) {\r\n\t\treturn User({ id: currentUserID, referrerID: _referrerID, referrals: new address[](0) });\r\n\t}\r\n\r\n\tfunction bytesToAddress(bytes memory _addr) private pure returns(address addr) {\r\n\t\tassembly {\r\n\t\t\taddr := mload(add(_addr, 20))\r\n\t\t}\r\n\t}\r\n\r\n\tfunction addressToPayable(address _addr) private pure returns(address payable) {\r\n\t\treturn address(uint160(_addr));\r\n\t}\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"}],\"name\":\"BuyLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"GetLevelProfitEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"LostLevelProfitEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"}],\"name\":\"RegisterUserEvent\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"buyLevel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"findReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getUserLevelExpiresAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserReferrals\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"}],\"name\":\"getUserUpline\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referrerID\",\"type\":\"uint256\"}],\"name\":\"registerUser\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Smartlevel","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://785ddfd40bacab9bd1b08cbe21802854b6052f65563f9b4934472a8f2a05e93f"}]}