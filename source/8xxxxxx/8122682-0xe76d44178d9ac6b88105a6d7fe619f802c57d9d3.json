{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnerTransferred(\r\n        address indexed oldOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Owner account is required\");\r\n        _;\r\n    }\r\n\r\n    function transferOwner(address newOwner)\r\n    public\r\n    onlyOwner {\r\n        require(newOwner != owner, \"New Owner cannot be the current owner\");\r\n        require(newOwner != address(0), \"New Owner cannot be zero address\");\r\n        address prevOwner = owner;\r\n        owner = newOwner;\r\n        emit OwnerTransferred(prevOwner, newOwner);\r\n    }\r\n}\r\n\r\nlibrary AdditiveMath {\r\n    function add(uint256 x, uint256 y)\r\n    internal\r\n    pure\r\n    returns (uint256) {\r\n        uint256 sum = x + y;\r\n        require(sum >= x, \"Results in overflow\");\r\n        return sum;\r\n    }\r\n\r\n    function subtract(uint256 x, uint256 y)\r\n    internal\r\n    pure\r\n    returns (uint256) {\r\n        require(y <= x, \"Results in underflow\");\r\n        return x - y;\r\n    }\r\n}\r\n\r\nlibrary AddressMap {\r\n    struct Data {\r\n        int256 count;\r\n        mapping(address => int256) indices;\r\n        mapping(int256 => address) items;\r\n    }\r\n\r\n    address constant ZERO_ADDRESS = address(0);\r\n\r\n    function append(Data storage self, address addr)\r\n    internal\r\n    returns (bool) {\r\n        if (addr == ZERO_ADDRESS) {\r\n            return false;\r\n        }\r\n\r\n        int256 index = self.indices[addr] - 1;\r\n        if (index >= 0 && index < self.count) {\r\n            return false;\r\n        }\r\n\r\n        self.count++;\r\n        self.indices[addr] = self.count;\r\n        self.items[self.count] = addr;\r\n        return true;\r\n    }\r\n\r\n    function remove(Data storage self, address addr)\r\n    internal\r\n    returns (bool) {\r\n        int256 oneBasedIndex = self.indices[addr];\r\n        if (oneBasedIndex < 1 || oneBasedIndex > self.count) {\r\n            return false;  // address doesn't exist, or zero.\r\n        }\r\n\r\n        // When the item being removed is not the last item in the collection,\r\n        // replace that item with the last one, otherwise zero it out.\r\n        //\r\n        //  If {2} is the item to be removed\r\n        //     [0, 1, 2, 3, 4]\r\n        //  The result would be:\r\n        //     [0, 1, 4, 3]\r\n        //\r\n        if (oneBasedIndex < self.count) {\r\n            // Replace with last item\r\n            address last = self.items[self.count];  // Get the last item\r\n            self.indices[last] = oneBasedIndex;     // Update last items index to current index\r\n            self.items[oneBasedIndex] = last;       // Update current index to last item\r\n            delete self.items[self.count];          // Delete the last item, since it's moved\r\n        } else {\r\n            // Delete the address\r\n            delete self.items[oneBasedIndex];\r\n        }\r\n\r\n        delete self.indices[addr];\r\n        self.count--;\r\n        return true;\r\n    }\r\n\r\n    function clear(Data storage self)\r\n    internal {\r\n        self.count = 0;\r\n    }\r\n\r\n    function at(Data storage self, int256 index)\r\n    internal\r\n    view\r\n    returns (address) {\r\n        require(index >= 0 && index < self.count, \"Index outside of bounds.\");\r\n        return self.items[index + 1];\r\n    }\r\n\r\n    function indexOf(Data storage self, address addr)\r\n    internal\r\n    view\r\n    returns (int256) {\r\n        if (addr == ZERO_ADDRESS) {\r\n            return -1;\r\n        }\r\n\r\n        int256 index = self.indices[addr] - 1;\r\n        if (index < 0 || index >= self.count) {\r\n            return -1;\r\n        }\r\n        return index;\r\n    }\r\n\r\n    function exists(Data storage self, address addr)\r\n    internal\r\n    view\r\n    returns (bool) {\r\n        int256 index = self.indices[addr] - 1;\r\n        return index >= 0 && index < self.count;\r\n    }\r\n\r\n}\r\n\r\ninterface ERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\ncontract ERC1404 is ERC20 {\r\n    function detectTransferRestriction (address from, address to, uint256 value) public view returns (uint8);\r\n    function messageForTransferRestriction (uint8 restrictionCode) public view returns (string);\r\n}\r\n\r\ncontract NT1404 is ERC1404, Ownable {\r\n\r\n    // ------------------------------- Variables -------------------------------\r\n\r\n    using AdditiveMath for uint256;\r\n    using AddressMap for AddressMap.Data;\r\n\r\n    address constant internal ZERO_ADDRESS = address(0);\r\n    string public constant name = \"NEWTOUCH BCL LAB TEST\";\r\n    string public constant symbol = \"NTBCLTEST\";\r\n    uint8 public constant decimals = 0;\r\n\r\n    AddressMap.Data public shareholders;\r\n    bool public issuingFinished = false;\r\n\r\n    mapping(address => uint256) internal balances;\r\n    uint256 internal totalSupplyTokens;\r\n    \r\n    uint8 public constant SUCCESS_CODE = 0;\r\n    string public constant SUCCESS_MESSAGE = \"SUCCESS\";\r\n\r\n    // ------------------------------- Modifiers -------------------------------\r\n\r\n    modifier canIssue() {\r\n        require(!issuingFinished, \"Issuing is already finished\");\r\n        _;\r\n    }\r\n\r\n    modifier hasFunds(address addr, uint256 tokens) {\r\n        require(tokens <= balances[addr], \"Insufficient funds\");\r\n        _;\r\n    }\r\n    \r\n    modifier notRestricted (address from, address to, uint256 value) {\r\n        uint8 restrictionCode = detectTransferRestriction(from, to, value);\r\n        require(restrictionCode == SUCCESS_CODE, messageForTransferRestriction(restrictionCode));\r\n        _;\r\n    }\r\n\r\n    // -------------------------------- Events ---------------------------------\r\n\r\n    event Issue(address indexed to, uint256 tokens);\r\n    event IssueFinished();\r\n    event ShareholderAdded(address shareholder);\r\n    event ShareholderRemoved(address shareholder);\r\n\r\n    // -------------------------------------------------------------------------\r\n\r\n    function detectTransferRestriction (address from, address to, uint256 value)\r\n        public\r\n        view\r\n        returns (uint8 restrictionCode)\r\n    {\r\n        restrictionCode = SUCCESS_CODE;\r\n    }\r\n        \r\n    function messageForTransferRestriction (uint8 restrictionCode)\r\n        public\r\n        view\r\n        returns (string message)\r\n    {\r\n        if (restrictionCode == SUCCESS_CODE) {\r\n            message = SUCCESS_MESSAGE;\r\n        }\r\n    }\r\n    \r\n    function transfer (address to, uint256 value)\r\n        public\r\n        hasFunds(msg.sender, value)\r\n        notRestricted(msg.sender, to, value)\r\n        returns (bool success)\r\n    {\r\n        transferTokens(msg.sender, to, value);\r\n        success = true;\r\n    }\r\n\r\n    /**\r\n     * (not used)\r\n     */\r\n    function transferFrom (address from, address to, uint256 value)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        success = false;\r\n    }\r\n\r\n    function issueTokens(uint256 quantity)\r\n    external\r\n    onlyOwner\r\n    canIssue\r\n    returns (bool) {\r\n        // Avoid doing any state changes for zero quantities\r\n        if (quantity > 0) {\r\n            totalSupplyTokens = totalSupplyTokens.add(quantity);\r\n            balances[owner] = balances[owner].add(quantity);\r\n            shareholders.append(owner);\r\n        }\r\n        emit Issue(owner, quantity);\r\n        emit Transfer(ZERO_ADDRESS, owner, quantity);\r\n        return true;\r\n    }\r\n\r\n    function finishIssuing()\r\n    external\r\n    onlyOwner\r\n    canIssue\r\n    returns (bool) {\r\n        issuingFinished = true;\r\n        emit IssueFinished();\r\n        return issuingFinished;\r\n    }\r\n\r\n    /**\r\n     * (not used)\r\n     */\r\n    function approve(address spender, uint256 tokens)\r\n    external\r\n    returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    // -------------------------------- Getters --------------------------------\r\n\r\n    function totalSupply()\r\n    external\r\n    view\r\n    returns (uint256) {\r\n        return totalSupplyTokens;\r\n    }\r\n\r\n    function balanceOf(address addr)\r\n    external\r\n    view\r\n    returns (uint256) {\r\n        return balances[addr];\r\n    }\r\n\r\n    /**\r\n     *  (not used)\r\n     */\r\n    function allowance(address addrOwner, address spender)\r\n    external\r\n    view\r\n    returns (uint256) {\r\n        return 0;\r\n    }\r\n\r\n    function holderAt(int256 index)\r\n    external\r\n    view\r\n    returns (address){\r\n        return shareholders.at(index);\r\n    }\r\n\r\n    function isHolder(address addr)\r\n    external\r\n    view\r\n    returns (bool) {\r\n        return shareholders.exists(addr);\r\n    }\r\n\r\n\r\n    // -------------------------------- Private --------------------------------\r\n\r\n    function transferTokens(address from, address to, uint256 tokens)\r\n    private {\r\n        // Update balances\r\n        balances[from] = balances[from].subtract(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(from, to, tokens);\r\n\r\n        // Adds the shareholder if they don't already exist.\r\n        if (balances[to] > 0 && shareholders.append(to)) {\r\n            emit ShareholderAdded(to);\r\n        }\r\n        // Remove the shareholder if they no longer hold tokens.\r\n        if (balances[from] == 0 && shareholders.remove(from)) {\r\n            emit ShareholderRemoved(from);\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SUCCESS_CODE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"shareholders\",\"outputs\":[{\"name\":\"count\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issuingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishIssuing\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"restrictionCode\",\"type\":\"uint8\"}],\"name\":\"messageForTransferRestriction\",\"outputs\":[{\"name\":\"message\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"int256\"}],\"name\":\"holderAt\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"issueTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"detectTransferRestriction\",\"outputs\":[{\"name\":\"restrictionCode\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addrOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SUCCESS_MESSAGE\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"IssueFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"ShareholderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"ShareholderRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"NT1404","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://de8a37c0ee4e452a5a0b0229a536f36b259ad458560346939a0faa47ef3cc2c3"}]}