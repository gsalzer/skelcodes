{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.7;\r\n\r\n\r\ncontract ReentrancyGuard {\r\n    uint256 private _guardCounter;\r\n\r\n    constructor () internal {\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter);\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\ninterface PrimaryStorage {\r\n    function isPlatformModerator(address who) external view returns (bool);\r\n    function isCommunityModerator(address who) external view returns (bool);\r\n    function getProjectController() external view returns (address);\r\n    function getRefundController() external view returns (address);\r\n    function getDisputeController() external view returns (address);\r\n    function getUtilityController() external view returns (address);\r\n    function getAffiliateEscrow() external view returns (address payable);\r\n    function getRefundPool() external view returns (address payable);\r\n    function getdAppState(bytes32 controllersHash) external view returns (address projectController, address refundController, address disputeController, address maintenanceController);\r\n    function getInsuranceControllerState(uint256 insId) external view returns (bytes32);\r\n    function oldProjectCtrl(bytes32 controllersHash) external view returns (address payable);\r\n    function oldRefundCtrl(bytes32 controllersHash) external view returns (address payable);\r\n    function oldDisputeCtrl(bytes32 cntrllrs) external view  returns (address payable);\r\n    function oldUtilityCtrl(bytes32 cntrllrs) external view  returns (address payable);\r\n    function getIsNetworkDeployed() external view returns (bool);\r\n    function getCurrentControllersHash() external view returns (bytes32 controllerState);\r\n    function getProjectCurrentState(uint256) external view returns (uint8);\r\n    function setEventLogger(address loggerAddress) external;\r\n    function setModerationResources(address payable modResourcesAddr) external;\r\n    function setMainContract(address mainContract) external;\r\n    function setProjectController(address payable controllerAddress) external;\r\n    function setRefundController(address payable controllerAddress) external;\r\n    function setDisputeController(address payable controllerAddress) external;\r\n    function setUtilityController(address payable controllerAddress) external;\r\n    function addNewContract(address payable dAppContractAddress) external;\r\n    function setPlatformModerator(address newPlModAddr) external;\r\n    function setMinInvestorContribution(uint256 newMinInvestorContribution) external;\r\n    function setMaxInvestorContribution(uint256 newMaxInvestorContribution) external;\r\n    function setMinProtectionPercentage(uint256 newPercentage) external;\r\n    function setMaxProtectionPercentage(uint256 newPercentage) external;\r\n    function setMinOwnerContribution(uint256 newMinOwnContrib) external;\r\n    function setDefaultBasePolicyDuration(uint256 newBasePolicyPeriod) external;\r\n    function setDefaultPolicyDuration(uint256 newPolicyPeriod) external;\r\n    function setRegularContributionPercentage(uint256 newPercentage) external;\r\n    function getDisputeProjectId(uint256 disputeId) external view returns (uint256);\r\n    function setValidationToken(address verificatedUser, uint256 validationNumber) external;\r\n    function getDisputeControllerOfProject(uint256 disputeId) external view returns (address);\r\n}\r\n\r\n\r\ninterface SecondaryStorage {\r\n    function getRefundControllerOfProject(uint256 pid) external view returns (address);\r\n    function getDisputeControllerOfProject(uint256 pid) external view returns (address);\r\n    function getUitilityControllerOfProject(uint256 pid) external view returns (address);\r\n    function getProjectControllerOfProject(uint256 pid) external view returns (address);\r\n    function getProjectCurrentState(uint256 pid) external view returns (uint8);\r\n    function getVoteEnd(uint256 pid) external view returns (uint256);\r\n    function getProjectControllerState(uint256 pid) external view returns (bytes32);\r\n    function getUtilityControllerOfProject(uint256 pid) external view returns (address);\r\n}\r\n\r\n\r\ninterface ProjectController {\r\n    function newProject(\r\n\t\t\t\tbytes calldata projectName,\r\n\t\t\t\taddress tokenAddress,\r\n\t\t\t\tuint256 crowdsaleEnd,\r\n\t\t\t\tuint256 highestCrowdsalePrice,\r\n\t\t\t\tuint8 tokenDecimals\r\n\t\t)\r\n\t\t\t\texternal\r\n\t\t\t\tpayable;\r\n    function newInsurance(\r\n\t\t\t\taddress payable insOwner,\r\n\t\t\t\tuint256 pid,\r\n\t\t\t\taddress referrer\r\n\t\t)\r\n\t\t\t\texternal\r\n\t\t\t\tpayable\r\n\t\t\t\treturns (bool success);\r\n    function newOwnerContribution(uint256 pid, address ownerAddr) external payable;\r\n    function close(uint256 pid) external;\r\n    function setNewProjectTokenPrice(\r\n\t\t\t\tuint256 pid,\r\n\t\t\t\tuint256 newPrice,\r\n\t\t\t\tuint256 insuranceId\r\n\t\t)\r\n\t\t\t\texternal\r\n\t\t\t\treturns (uint256 numberOfChanges);\r\n    function isOpen(uint256 projectId) external returns (bool);\r\n    function upgrade(uint256 insId) external;\r\n}\r\n\r\n\r\ninterface RefundController {\r\n     function cancel(uint256 ins, uint256 pid, address insOwner) external returns (bool);\r\n     function voteForRefundState(address owner, uint256 ins, uint256 pid) external returns (bool);\r\n     function withdraw(address owner, uint256 ins, uint256 pid) external returns (bool);\r\n     function forceRefundState(address moderator, uint256 pid) external;\r\n     function finalizeVote(uint256 pid) external;\r\n}\r\n\r\n\r\ninterface DisputeController {\r\n    function createNewDispute(\r\n\t\t\t\taddress caller,\r\n\t\t\t\tuint256 pid,\r\n\t\t\t\tbytes calldata publicDisputeUrl\r\n\t\t)\r\n\t\t\t\texternal\r\n\t\t\t\tpayable\r\n\t\t\t\treturns (bool);\r\n    function addPublicVote(address voter, uint256 did, bytes32 hiddenVote) external payable returns (bool);\r\n    function decryptVote(address voter, uint256 did, bool isProjectFailed, uint64 pin) external returns (bool);\r\n    function finalizeDispute(uint256 did) external returns (bool);\r\n}\r\n\r\n\r\ninterface UtilityController {\r\n    function withdraw(uint256 pid, address payable owner, uint256 insuranceId) external;\r\n    function withdrawInsuranceFee(uint256 pid, address payable owner, uint256 insuranceId) external;\r\n    function ownerWithdraw(address owner, address sendTo, uint256 pid) external returns (bool);\r\n    function withdrawDisputePayment(address payable caller, uint256 did) external;\r\n    function cancelInvalid(uint256 pid, uint256[8] calldata invalidInsuranceId) external;\r\n    function cancelProjectCovarage(uint256 pid) external;\r\n    function managePolicies(uint256 startFromn, uint256 umberOfProjects) external;\r\n    function voteMaintenance(uint256 startFrom, uint256 numberOfProjects) external;\r\n    function affiliatePayment(address owner) external;\r\n    function removeCanceled(uint256 pid, uint256[8] calldata canceledInsIdx) external;\r\n}\r\n\r\n\r\ninterface AffiliateEscrow {\r\n    function deposit(address affiliate) external payable;\r\n    function getAffiliatePayment (address affiliate) external view returns (uint256);\r\n    function withdraw(address to) external;\r\n    function updateControllerState(\r\n\t\t\t\taddress payable projectCtrl,\r\n\t\t\t\taddress payable refundCtrl,\r\n\t\t\t\taddress payable disputeCtrl,\r\n\t\t\t\taddress payable utilityCtrl\r\n\t\t)\r\n\t\t\t\texternal;\r\n}\r\n\r\n\r\ninterface RefundPool {\r\n    function cleanIfNoProjects() external;\r\n}\r\n\r\n\r\n/**\r\n  *\r\n  *  Refundable Token Offerings - RTO\r\n  *  DAO platform for insurance of investments\r\n  *  in token offerings with a refund option.\r\n  *\r\n  *  Autonomous, open source and completely transparent\r\n  *  dApp for decentralized investment insurances in blockchain\r\n  *  projects (ICOs, STOs, IEOs, etc) managed entirely by smart\r\n  *  contracts and governed by the participants in it.\r\n  *\r\n  */\r\n\r\n\r\ncontract RefundableTokenOffering is ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    PrimaryStorage    private masterStorage;\r\n    SecondaryStorage  private secondStorage;\r\n    RefundPool        private pool;\r\n\r\n    ProjectController private projectController;\r\n    RefundController  private refundController;\r\n    DisputeController private disputeController;\r\n    UtilityController private utilityController;\r\n\r\n    AffiliateEscrow private affiliate;\r\n\r\n    bytes32 private controllersHash;\r\n    address payable private refundPool;\r\n\r\n\r\n    event CommunityAidReceived(address sender, uint256 value);\r\n    event ControllerUpgrade(address newController);\r\n\r\n    constructor(\r\n        address primaryStorage,\r\n        address secondaryStorage,\r\n        address payable refundPoolAddress,\r\n        address payable affiliateEscrow\r\n    )\r\n        public\r\n    {\r\n        masterStorage = PrimaryStorage(primaryStorage);\r\n        secondStorage = SecondaryStorage(secondaryStorage);\r\n        refundPool = refundPoolAddress;\r\n        affiliate = AffiliateEscrow(affiliateEscrow);\r\n    }\r\n\r\n    function() external payable {\r\n        emit CommunityAidReceived(msg.sender, msg.value);\r\n    }\r\n\r\n    ///////////////////////////////////////////////////\r\n    //  Access modifiers\r\n    //////////////////////////////////////////////////\r\n\r\n    modifier onlyModerators {\r\n        if (!masterStorage.isPlatformModerator(msg.sender)) {\r\n            revert(\"Not allowed\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlyOpen(uint256 pid) {\r\n        if (secondStorage.getProjectCurrentState(pid) == 0) {\r\n            _;\r\n        } else {\r\n            revert(\"The project is not open\");\r\n        }\r\n    }\r\n\r\n    modifier onlyExternalAccounts(address sender) {\r\n        if (_isContract(sender)) {\r\n            revert(\"Not allowed\");\r\n        } else {\r\n            _;\r\n        }\r\n\r\n    }\r\n\r\n    ///////////////////////////////////////////////////\r\n    //  Main View\r\n    //////////////////////////////////////////////////\r\n\r\n    function addCoveredProject(\r\n        bytes   memory projectName,\r\n        address tokenAddress,\r\n        uint256 crowdsaleEnd,\r\n        uint256 highestCrowdsalePrice,\r\n        uint8   tokenDecimals\r\n    )\r\n        public\r\n        payable\r\n        onlyModerators\r\n    {\r\n        projectController.newProject.value(msg.value)(\r\n            projectName,\r\n            tokenAddress,\r\n            crowdsaleEnd,\r\n            highestCrowdsalePrice,\r\n            tokenDecimals\r\n        );\r\n    }\r\n\r\n    function newInvestmentProtection(uint256 pid, address referrer)\r\n        external\r\n        payable\r\n        nonReentrant\r\n        onlyOpen(pid)\r\n        onlyExternalAccounts(msg.sender)\r\n    {\r\n        ProjectController project = _projectControllerOfProject(pid);\r\n        project.newInsurance.value(msg.value)(msg.sender, pid, referrer);\r\n    }\r\n\r\n    function projectOwnerContribution(uint256 pid)\r\n        external\r\n        payable\r\n        nonReentrant\r\n        onlyOpen(pid)\r\n    {\r\n        ProjectController project = _projectControllerOfProject(pid);\r\n        project.newOwnerContribution.value(msg.value)(pid, msg.sender);\r\n    }\r\n\r\n    function closeProject(uint256 pid)\r\n        public\r\n        payable\r\n        onlyModerators\r\n    {\r\n        ProjectController project = _projectControllerOfProject(pid);\r\n        project.close(pid);\r\n    }\r\n\r\n    function setProjectTokenPrice(uint256 pid, uint256 newPrice, uint256 insuranceId)\r\n        public\r\n        payable\r\n        onlyModerators\r\n    {\r\n        ProjectController project = _projectControllerOfProject(pid);\r\n        project.setNewProjectTokenPrice(pid, newPrice, insuranceId);\r\n    }\r\n\r\n    function cancelInsurance(uint256 ins, uint256 pid) external nonReentrant {\r\n        RefundController refund = _refundControllerOfInsurance(ins);\r\n        refund.cancel(ins, pid, msg.sender);\r\n    }\r\n\r\n    function voteForRefundState(uint256 ins, uint256 pid) external nonReentrant {\r\n        RefundController refund = _refundControllerOfInsurance(ins);\r\n        refund.voteForRefundState(msg.sender, ins, pid);\r\n    }\r\n\r\n    function requestRefundWithdraw(uint256 ins, uint256 pid) external nonReentrant {\r\n        RefundController refund = _refundControllerOfInsurance(ins);\r\n        refund.withdraw(msg.sender, ins, pid);\r\n    }\r\n\r\n    function finishInternalVote(uint256 pid) public {\r\n        uint8 pcs = secondStorage.getProjectCurrentState(pid);\r\n        uint256 voteEndDate = secondStorage.getVoteEnd(pid);\r\n        require(pcs == 2 && block.number > voteEndDate, \"The project is not in a internal vote period, or it is not finished\");\r\n        RefundController refund = _refundControllerOfProject(pid);\r\n        refund.finalizeVote(pid);\r\n    }\r\n\r\n    function forceRefundState(uint256 pid) public onlyModerators {\r\n        RefundController refund = _refundControllerOfProject(pid);\r\n        refund.forceRefundState(msg.sender, pid);\r\n    }\r\n\r\n    function createPublicDispute(uint256 pid, bytes calldata publicDisputeUrl)\r\n        external\r\n        payable\r\n        nonReentrant\r\n        onlyExternalAccounts(msg.sender)\r\n    {\r\n        DisputeController dispute = _disputeControllerOfProject(pid);\r\n        dispute.createNewDispute.value(msg.value)(msg.sender, pid, publicDisputeUrl);\r\n    }\r\n\r\n    function newPublicVote(uint256 did, bytes32 encryptedVote)\r\n        external\r\n        payable\r\n        nonReentrant\r\n        onlyExternalAccounts(msg.sender)\r\n    {\r\n        DisputeController dispute = _disputeControllerOfDispute(did);\r\n        dispute.addPublicVote.value(msg.value)(msg.sender, did, encryptedVote);\r\n    }\r\n\r\n    function revealPublicVote(\r\n        uint256 did,\r\n        bool isProjectFailed,\r\n        uint64 pin\r\n    )\r\n        external\r\n        returns (bool)\r\n    {\r\n        DisputeController dispute = _disputeControllerOfDispute(did);\r\n        dispute.decryptVote(msg.sender, did, isProjectFailed, pin);\r\n    }\r\n\r\n    function finishPublicDispute(uint256 did)\r\n        external\r\n        nonReentrant\r\n    {\r\n        DisputeController dispute = _disputeControllerOfDispute(did);\r\n        dispute.finalizeDispute(did);\r\n    }\r\n\r\n    function withdrawDisputePayment(uint256 did) external nonReentrant {\r\n        uint256 pid = masterStorage.getDisputeProjectId(did);\r\n        UtilityController utility = _utilityControllerOfProject(pid);\r\n        utility.withdrawDisputePayment(msg.sender, did);\r\n    }\r\n\r\n    function setValidationToken(address verificatedUser, uint256 validationNumber) public onlyModerators {\r\n        masterStorage.setValidationToken(verificatedUser, validationNumber);\r\n    }\r\n\r\n    function withdraw(uint256 pid, uint256 insuranceId) external nonReentrant {\r\n        UtilityController utility = _utilityControllerOfInsurance(insuranceId);\r\n        utility.withdraw(pid, msg.sender, insuranceId);\r\n    }\r\n\r\n    function withdrawFee(uint256 pid, uint256 insuranceId) external nonReentrant {\r\n        UtilityController utility = _utilityControllerOfInsurance(insuranceId);\r\n        utility.withdrawInsuranceFee(pid, msg.sender, insuranceId);\r\n    }\r\n\r\n    function affiliatePayment() external nonReentrant {\r\n        affiliate.withdraw(msg.sender);\r\n    }\r\n\r\n    function cancelInvalidInsurances(uint256 projectId, uint256[8] memory invalidInsuranceId) public\r\n    {\r\n        UtilityController utility = _utilityControllerOfProject(projectId);\r\n        utility.cancelInvalid(projectId, invalidInsuranceId);\r\n    }\r\n\r\n    function removeCanceledInsurances(\r\n        uint256 pid,\r\n        uint256[8] memory invalidInsuranceId\r\n    )\r\n        public\r\n    {\r\n        UtilityController utility = _utilityControllerOfProject(pid);\r\n        utility.removeCanceled(pid, invalidInsuranceId);\r\n    }\r\n\r\n    function withdrawOwnerFunds(uint256 pid, address sendTo) external nonReentrant returns (bool) {\r\n        UtilityController utility = _utilityControllerOfProject(pid);\r\n        return utility.ownerWithdraw(msg.sender, sendTo, pid);\r\n    }\r\n\r\n    function cancelProjectCovarage(uint256 pid) public {\r\n        UtilityController utility = _utilityControllerOfProject(pid);\r\n        return utility.cancelProjectCovarage(pid);\r\n    }\r\n\r\n    function policyMaintenance(uint256 startFrom, uint256 numberOfProjects) external nonReentrant {\r\n        return utilityController.managePolicies(startFrom, numberOfProjects);\r\n    }\r\n\r\n    function voteMaintenance(uint256 startFrom, uint256 endBefore) external {\r\n        return utilityController.voteMaintenance(startFrom, endBefore);\r\n    }\r\n\r\n    ///////////////////////////////////////////////////\r\n    //  State & Contracts\r\n    //////////////////////////////////////////////////\r\n\r\n    function updateControllerState() public onlyModerators {\r\n        projectController = ProjectController(masterStorage.getProjectController());\r\n        refundController  = RefundController(masterStorage.getRefundController());\r\n        disputeController = DisputeController(masterStorage.getDisputeController());\r\n        utilityController = UtilityController(masterStorage.getUtilityController());\r\n        controllersHash   = masterStorage.getCurrentControllersHash();\r\n    }\r\n\r\n    function transferAidToRefundPool() public onlyModerators {\r\n        address(refundPool).transfer(address(this).balance);\r\n    }\r\n\r\n    function changeModerationResourcesAddress(address payable newModRsrcAddr)\r\n        public\r\n        onlyModerators\r\n    {\r\n        masterStorage.setModerationResources(newModRsrcAddr);\r\n    }\r\n\r\n    function upgradeEventLogger(address newLogger) public onlyModerators {\r\n        masterStorage.setEventLogger(newLogger);\r\n    }\r\n\r\n    function upgradeMain(address payable newMainContract) public onlyModerators {\r\n        masterStorage.setMainContract(newMainContract);\r\n    }\r\n\r\n    function upgradeUtilityController(address payable newUtilityController)\r\n        public\r\n        onlyModerators\r\n    {\r\n        masterStorage.setUtilityController(newUtilityController);\r\n        emit ControllerUpgrade(newUtilityController);\r\n    }\r\n\r\n    function upgradeDisputeController(address payable newDisputeController)\r\n        public\r\n        onlyModerators\r\n    {\r\n        masterStorage.setDisputeController(newDisputeController);\r\n        emit ControllerUpgrade(newDisputeController);\r\n\r\n    }\r\n\r\n    function upgradeRefundController(address payable newRefundController)\r\n        public\r\n        onlyModerators\r\n    {\r\n        masterStorage.setRefundController(newRefundController);\r\n        emit ControllerUpgrade(newRefundController);\r\n\r\n    }\r\n\r\n    function upgradeProjectController(address payable newProjectController)\r\n        public\r\n        onlyModerators\r\n    {\r\n        masterStorage.setProjectController(newProjectController);\r\n        emit ControllerUpgrade(newProjectController);\r\n    }\r\n\r\n    function addNetworkContract(address payable newNetworkContract)\r\n        public\r\n        onlyModerators\r\n    {\r\n        masterStorage.addNewContract(newNetworkContract);\r\n    }\r\n\r\n    function setPlatformModerator(address newMod) public onlyModerators {\r\n        masterStorage.setPlatformModerator(newMod);\r\n    }\r\n\r\n    function setMinInvestorContribution(uint256 newMinInvestorContr) public onlyModerators {\r\n        masterStorage.setMinInvestorContribution(newMinInvestorContr);\r\n    }\r\n\r\n    function setMaxInvestorContribution(uint256 newMaxInvestorContr) public onlyModerators {\r\n        masterStorage.setMaxInvestorContribution(newMaxInvestorContr);\r\n    }\r\n\r\n    function setMinProtectionPercentage(uint256 newPercentage) public onlyModerators {\r\n        masterStorage.setMinProtectionPercentage(newPercentage);\r\n    }\r\n\r\n    function setMaxProtectionPercentage(uint256 newPercentage) public onlyModerators\r\n    {\r\n        masterStorage.setMaxProtectionPercentage(newPercentage);\r\n    }\r\n\r\n    function setMinOwnerContribution(uint256 newMinOwnContrib) public onlyModerators {\r\n        masterStorage.setMinOwnerContribution(newMinOwnContrib);\r\n    }\r\n\r\n    function setDefaultBasePolicy(uint256 newBasePolicy) public onlyModerators {\r\n        masterStorage.setDefaultBasePolicyDuration(newBasePolicy);\r\n    }\r\n\r\n    function setDefaultPolicy(uint256 newPolicy) public onlyModerators {\r\n        masterStorage.setDefaultPolicyDuration(newPolicy);\r\n    }\r\n\r\n    function setRegularContributionPercentage(uint256 newPercentage) public onlyModerators {\r\n        masterStorage.setRegularContributionPercentage(newPercentage);\r\n    }\r\n\r\n    function cleanIfNoProjects() public onlyModerators {\r\n        pool.cleanIfNoProjects();\r\n    }\r\n\r\n    function _projectControllerOfProject(uint256 pid)\r\n        internal\r\n        view\r\n        returns (ProjectController)\r\n    {\r\n        return ProjectController(secondStorage.getProjectControllerOfProject(pid));\r\n    }\r\n\r\n    function _refundControllerOfProject(uint256 pid)\r\n        internal\r\n        view\r\n        returns (RefundController)\r\n    {\r\n        return RefundController(secondStorage.getRefundControllerOfProject(pid));\r\n    }\r\n\r\n    function _disputeControllerOfProject(uint256 pid)\r\n        internal\r\n        view\r\n        returns (DisputeController)\r\n    {\r\n        return DisputeController(secondStorage.getDisputeControllerOfProject(pid));\r\n    }\r\n\r\n    function _disputeControllerOfDispute(uint256 did)\r\n        internal\r\n        view\r\n        returns (DisputeController)\r\n    {\r\n        return DisputeController(masterStorage.getDisputeControllerOfProject(did));\r\n    }\r\n\r\n    function _utilityControllerOfProject(uint256 pid)\r\n        internal\r\n        view\r\n        returns (UtilityController)\r\n    {\r\n        return UtilityController(secondStorage.getUtilityControllerOfProject(pid));\r\n    }\r\n\r\n    function _refundControllerOfInsurance(uint256 ins)\r\n        internal\r\n        view\r\n        returns (RefundController) {\r\n        bytes32 insCtrlState = masterStorage.getInsuranceControllerState(ins);\r\n\r\n        if (controllersHash != insCtrlState) {\r\n            return RefundController(masterStorage.oldRefundCtrl(insCtrlState));\r\n        } else {\r\n            return refundController;\r\n        }\r\n    }\r\n\r\n    function _utilityControllerOfInsurance(uint256 ins)\r\n        internal\r\n        view\r\n        returns (UtilityController) {\r\n        bytes32 insCtrlState = masterStorage.getInsuranceControllerState(ins);\r\n\r\n        if (controllersHash != insCtrlState) {\r\n            return UtilityController(masterStorage.oldUtilityCtrl(insCtrlState));\r\n        } else {\r\n            return utilityController;\r\n        }\r\n    }\r\n\r\n    function _isContract(address sender) internal view returns (bool) {\r\n        uint codeSize;\r\n        assembly {\r\n            codeSize := extcodesize(sender)\r\n        }\r\n        return(codeSize != 0);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"ins\",\"type\":\"uint256\"},{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"cancelInsurance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferAidToRefundPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPercentage\",\"type\":\"uint256\"}],\"name\":\"setMinProtectionPercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"insuranceId\",\"type\":\"uint256\"}],\"name\":\"withdrawFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"projectId\",\"type\":\"uint256\"},{\"name\":\"invalidInsuranceId\",\"type\":\"uint256[8]\"}],\"name\":\"cancelInvalidInsurances\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"did\",\"type\":\"uint256\"}],\"name\":\"finishPublicDispute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"projectName\",\"type\":\"bytes\"},{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"crowdsaleEnd\",\"type\":\"uint256\"},{\"name\":\"highestCrowdsalePrice\",\"type\":\"uint256\"},{\"name\":\"tokenDecimals\",\"type\":\"uint8\"}],\"name\":\"addCoveredProject\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newModRsrcAddr\",\"type\":\"address\"}],\"name\":\"changeModerationResourcesAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"affiliatePayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newUtilityController\",\"type\":\"address\"}],\"name\":\"upgradeUtilityController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"newPrice\",\"type\":\"uint256\"},{\"name\":\"insuranceId\",\"type\":\"uint256\"}],\"name\":\"setProjectTokenPrice\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinOwnContrib\",\"type\":\"uint256\"}],\"name\":\"setMinOwnerContribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanIfNoProjects\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"startFrom\",\"type\":\"uint256\"},{\"name\":\"endBefore\",\"type\":\"uint256\"}],\"name\":\"voteMaintenance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinInvestorContr\",\"type\":\"uint256\"}],\"name\":\"setMinInvestorContribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDisputeController\",\"type\":\"address\"}],\"name\":\"upgradeDisputeController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"insuranceId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"startFrom\",\"type\":\"uint256\"},{\"name\":\"numberOfProjects\",\"type\":\"uint256\"}],\"name\":\"policyMaintenance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"did\",\"type\":\"uint256\"}],\"name\":\"withdrawDisputePayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"verificatedUser\",\"type\":\"address\"},{\"name\":\"validationNumber\",\"type\":\"uint256\"}],\"name\":\"setValidationToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ins\",\"type\":\"uint256\"},{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"voteForRefundState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPercentage\",\"type\":\"uint256\"}],\"name\":\"setMaxProtectionPercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPercentage\",\"type\":\"uint256\"}],\"name\":\"setRegularContributionPercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newProjectController\",\"type\":\"address\"}],\"name\":\"upgradeProjectController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"finishInternalVote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"projectOwnerContribution\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPolicy\",\"type\":\"uint256\"}],\"name\":\"setDefaultPolicy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMod\",\"type\":\"address\"}],\"name\":\"setPlatformModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMainContract\",\"type\":\"address\"}],\"name\":\"upgradeMain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"closeProject\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"withdrawOwnerFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"did\",\"type\":\"uint256\"},{\"name\":\"encryptedVote\",\"type\":\"bytes32\"}],\"name\":\"newPublicVote\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"invalidInsuranceId\",\"type\":\"uint256[8]\"}],\"name\":\"removeCanceledInsurances\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateControllerState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newRefundController\",\"type\":\"address\"}],\"name\":\"upgradeRefundController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"newInvestmentProtection\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newLogger\",\"type\":\"address\"}],\"name\":\"upgradeEventLogger\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ins\",\"type\":\"uint256\"},{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"requestRefundWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newNetworkContract\",\"type\":\"address\"}],\"name\":\"addNetworkContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"cancelProjectCovarage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBasePolicy\",\"type\":\"uint256\"}],\"name\":\"setDefaultBasePolicy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"publicDisputeUrl\",\"type\":\"bytes\"}],\"name\":\"createPublicDispute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"forceRefundState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"did\",\"type\":\"uint256\"},{\"name\":\"isProjectFailed\",\"type\":\"bool\"},{\"name\":\"pin\",\"type\":\"uint64\"}],\"name\":\"revealPublicVote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMaxInvestorContr\",\"type\":\"uint256\"}],\"name\":\"setMaxInvestorContribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"primaryStorage\",\"type\":\"address\"},{\"name\":\"secondaryStorage\",\"type\":\"address\"},{\"name\":\"refundPoolAddress\",\"type\":\"address\"},{\"name\":\"affiliateEscrow\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"CommunityAidReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"ControllerUpgrade\",\"type\":\"event\"}]","ContractName":"RefundableTokenOffering","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"500000","ConstructorArguments":"00000000000000000000000057d504f3ebcc43b8a894a7933676eb17236cc35d000000000000000000000000ac5ae06a85b710c1c68708bb04b80f2d81c00617000000000000000000000000df4fdbf83329be988491b047140b37bba12bc4c1000000000000000000000000eddbae4ba377f490b0d7331d135d147855d0f86a","Library":"","SwarmSource":"bzzr://ab114855c68b8b47c15a4e5d54511d18b235e2b158a0f954a0bf99990828dd11"}]}