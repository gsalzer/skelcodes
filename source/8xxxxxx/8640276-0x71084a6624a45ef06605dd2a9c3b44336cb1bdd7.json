{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(\r\n    address previousOwner,\r\n    address newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner || msg.sender == address(this));\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause(bool isPause);\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause(paused);\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Pause(paused);\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic, Pausable {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n  uint256 totalSupply_;\r\n  address public contractAddress;\r\n  address public setPriceAccount;\r\n  address public setReferralAccount;\r\n  uint256 public tokenPrice;\r\n  uint256 public managersFee;\r\n  uint256 public referralFee;\r\n  uint256 public supportFee;\r\n  uint256 public withdrawFee;\r\n\r\n  address public ethAddress;\r\n  address public supportWallet;\r\n  address public fundManagers;\r\n  event Deposit(address indexed buyer, uint256 weiAmount, uint256 tokensAmount, uint256 tokenPrice, address referral, uint256 referralFee, uint256 managersFee, uint256 supportFee);\r\n  event Withdraw(address indexed buyer, uint256 tokensAmount, uint256 tokenPrice, uint256 commission);\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) whenNotPaused public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    if (_to == contractAddress) {\r\n      emit Withdraw(msg.sender, _value, tokenPrice, withdrawFee);\r\n    }\r\n    \r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    uint256 availableTokens = balances[_owner];\r\n    return availableTokens;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    if (_to == contractAddress) {\r\n      emit Withdraw(msg.sender, _value, tokenPrice, withdrawFee);\r\n    }\r\n    \r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract CrescoFinanceToken is StandardToken {\r\n\r\n  string constant public name = \"CrescoFinanceToken\";\r\n  uint256 constant public decimals = 4;\r\n  string constant public symbol = \"CFT\";\r\n  mapping (address => address) public referrals;\r\n\r\n  event NewTokenPrice(uint256 tokenPrice);\r\n  event AddTokens(address indexed user, uint256 tokensAmount, uint256 _price);\r\n  event DeleteTokens(address indexed user, uint256 tokensAmount, uint256 tokenPrice);\r\n  event SupportFee(uint256 supportFee);\r\n  event ManagersFee(uint256 managersFee);\r\n  event ReferralFee(uint256 referralFee);\r\n  event WithdrawFee(uint256 withdrawFee);\r\n  event PaymentDone(address _user, uint256 ethAmount, uint256 tokenPrice, uint256 tokenBurned, uint256 successFee, uint256 withdrawFee);\r\n\r\n  event NewEthAddress(address ethAddress);\r\n  event NewFundManagers(address fundManagers);\r\n  event NewSupportWallet (address supportWallet);\r\n  event NewSetPriceAccount (address setPriceAccount);\r\n  event NewSetRefferalAccount (address referral);\r\n\r\n  constructor() public {\r\n    contractAddress = address(this);\r\n    tokenPrice = 5041877658000000;\r\n    newManagersFee(0);\r\n    newSupportFee(0);\r\n    newReferralFee(0);\r\n    newWithdrawFee(0);\r\n    newEthAddress(0x3075fc666FA2c3667083aF9bCEa9C62467dE6C78);\r\n    newFundManagers(0xE72484208B359AD2AB9b31e454BfeFB81f922DB5);\r\n    newSupportWallet(0x18DD6bE30CdE8E753a25dc139F29463f040B0A76);\r\n    newPriceAccount(0xAA50E4651572a9c655e014C567596Cc4c79Fb909);\r\n    newReferralAccount(0xAA50E4651572a9c655e014C567596Cc4c79Fb909);\r\n  }\r\n\r\n  //Modifiers\r\n  modifier onlySetPriceAccount {\r\n      if (msg.sender != setPriceAccount) revert();\r\n      _;\r\n  }\r\n\r\n  modifier onlySetReferralAccount {\r\n      if (msg.sender != setReferralAccount) revert();\r\n      _;\r\n  }\r\n\r\n  function priceOf() external view returns(uint256) {\r\n    return tokenPrice;\r\n  }\r\n\r\n  function () payable external whenNotPaused {\r\n    uint depositFee = managersFee.add(referralFee).add(supportFee);\r\n    uint256 tokens = msg.value.mul(uint256(10000)).mul(100-depositFee).div(uint256(100)).div(tokenPrice);\r\n\r\n    totalSupply_ = totalSupply_.add(tokens);\r\n    balances[msg.sender] = balances[msg.sender].add(tokens);\r\n\r\n    fundManagers.transfer(msg.value.mul(managersFee).div(100));\r\n    supportWallet.transfer(msg.value.mul(supportFee).div(100));\r\n    if (referrals[msg.sender]!=0){\r\n        referrals[msg.sender].transfer(msg.value.mul(referralFee).div(100));\r\n    }\r\n    else {\r\n        fundManagers.transfer(msg.value.mul(referralFee).div(100));\r\n    }\r\n    \r\n    ethAddress.transfer(msg.value.mul(uint256(100).sub(depositFee)).div(100));\r\n    emit Deposit(msg.sender, msg.value, tokens, tokenPrice, referrals[msg.sender], referralFee, managersFee, supportFee);\r\n    emit Transfer(contractAddress, msg.sender, tokens);\r\n  }\r\n\r\n\r\n  function airdrop(address[] receiver, uint256[] amount) external onlyOwner {\r\n    require(receiver.length > 0 && receiver.length == amount.length);\r\n    for(uint256 i = 0; i < receiver.length; i++) {\r\n      uint256 tokens = amount[i];\r\n      totalSupply_ = totalSupply_.add(tokens);\r\n      balances[receiver[i]] = balances[receiver[i]].add(tokens);\r\n      emit Transfer(address(this), receiver[i], tokens);\r\n      emit AddTokens(receiver[i], tokens, tokenPrice);\r\n    }\r\n  }\r\n  \r\n  function deleteInvestorTokens(address[] user, uint256[] amount) external onlyOwner {\r\n    require(user.length > 0 && user.length == amount.length);\r\n    \r\n    for(uint256 i = 0; i < user.length; i++) {\r\n      uint256 tokens = amount[i];\r\n      require(tokens <= balances[user[i]]);\r\n      totalSupply_ = totalSupply_.sub(tokens);\r\n      balances[user[i]] = balances[user[i]].sub(tokens);\r\n      emit Transfer(user[i], address(this), tokens);\r\n      emit DeleteTokens(user[i], tokens, tokenPrice);\r\n    }\r\n  }\r\n  \r\n  function manualDeposit(address investor, uint256 weiAmount) external onlyOwner{\r\n    uint depositFee = managersFee.add(referralFee).add(supportFee);\r\n    uint256 tokens = weiAmount.mul(uint256(10000)).mul(100-depositFee).div(uint256(100)).div(tokenPrice);\r\n\r\n    totalSupply_ = totalSupply_.add(tokens);\r\n    balances[investor] = balances[investor].add(tokens);\r\n    \r\n    emit Deposit(investor, weiAmount, tokens, tokenPrice, referrals[investor], referralFee, managersFee, supportFee);\r\n    emit Transfer(contractAddress, investor, tokens);\r\n  }\r\n \r\n  \r\n  function takeSuccessFee(address[] user, uint256[] amount) external onlyOwner{\r\n    require(user.length > 0 && user.length == amount.length);\r\n    \r\n    for(uint256 i = 0; i < user.length; i++) {\r\n      uint256 tokens = amount[i];\r\n      require(tokens <= balances[user[i]]);\r\n      balances[user[i]] = balances[user[i]].sub(tokens);\r\n      balances[fundManagers] = balances[fundManagers].add(tokens);\r\n      emit Transfer(user[i], address(fundManagers), tokens);\r\n    }\r\n      \r\n  }\r\n\r\n  function setTokenPrice(uint256 _tokenPrice) public onlySetPriceAccount {\r\n    tokenPrice = _tokenPrice;\r\n    emit NewTokenPrice(tokenPrice);\r\n  }\r\n  \r\n  function setReferral(address client, address referral)\r\n        public\r\n        onlySetReferralAccount\r\n    {\r\n        referrals[client] = referral;\r\n    }\r\n\r\n  function getReferral(address client)\r\n        public\r\n        constant\r\n        returns (address)\r\n    {\r\n        return referrals[client];\r\n    }\r\n\r\n    function estimateTokens(uint256 valueInWei)\r\n        public\r\n        constant\r\n        returns (uint256)\r\n    {\r\n        uint256 depositFee = managersFee.add(referralFee).add(supportFee);\r\n        return valueInWei.mul(uint256(10000)).mul(100-depositFee).div(uint256(100)).div(tokenPrice);\r\n    }\r\n    \r\n    function estimateEthers(uint256 tokenCount)\r\n        public\r\n        constant\r\n        returns (uint256)\r\n    {\r\n        uint256 weiAmount = tokenCount.mul(uint256(100).sub(withdrawFee)).div(100).mul(tokenPrice).div(uint256(10000));\r\n        return weiAmount;\r\n    }\r\n\r\n  function newSupportFee(uint256 _supportFee) public onlyOwner {\r\n    supportFee = _supportFee;\r\n    emit SupportFee(supportFee);\r\n  }\r\n\r\n  function newManagersFee(uint256 _managersFee) public onlyOwner {\r\n    managersFee = _managersFee;\r\n    emit ManagersFee(managersFee);\r\n  }\r\n\r\n  function newReferralFee(uint256 _referralFee) public onlyOwner {\r\n    referralFee = _referralFee;\r\n    emit ReferralFee(referralFee);\r\n  }\r\n\r\n  function newWithdrawFee(uint256 _newWithdrawFee) public onlyOwner {\r\n    withdrawFee = _newWithdrawFee;\r\n    emit WithdrawFee(withdrawFee);\r\n  }\r\n\r\n  function newEthAddress(address _ethAddress) public onlyOwner {\r\n    ethAddress = _ethAddress;\r\n    emit NewEthAddress(ethAddress);\r\n  }\r\n\r\n  function newFundManagers(address _fundManagers) public onlyOwner {\r\n    fundManagers = _fundManagers;\r\n    emit NewFundManagers(fundManagers);\r\n  }\r\n  \r\n  function newSupportWallet(address _supportWallet) public onlyOwner {\r\n    supportWallet = _supportWallet;\r\n    emit NewSupportWallet(supportWallet);\r\n  }\r\n  \r\n  function newPriceAccount(address _setPriceAccount) public onlyOwner {\r\n    setPriceAccount = _setPriceAccount;\r\n    emit NewSetPriceAccount(setPriceAccount);\r\n  }\r\n  \r\n  function newReferralAccount(address _setReferralAccount) public onlyOwner {\r\n    setReferralAccount = _setReferralAccount;\r\n    emit NewSetRefferalAccount(setReferralAccount);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"tokenCount\",\"type\":\"uint256\"}],\"name\":\"estimateEthers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"setReferralAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ethAddress\",\"type\":\"address\"}],\"name\":\"newEthAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"client\",\"type\":\"address\"}],\"name\":\"getReferral\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_setReferralAccount\",\"type\":\"address\"}],\"name\":\"newReferralAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundManagers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_managersFee\",\"type\":\"uint256\"}],\"name\":\"newManagersFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address[]\"},{\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenPrice\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"client\",\"type\":\"address\"},{\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"setReferral\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"},{\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"manualDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"managersFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address[]\"},{\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"takeSuccessFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_supportWallet\",\"type\":\"address\"}],\"name\":\"newSupportWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_supportFee\",\"type\":\"uint256\"}],\"name\":\"newSupportFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supportWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_setPriceAccount\",\"type\":\"address\"}],\"name\":\"newPriceAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supportFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referralFee\",\"type\":\"uint256\"}],\"name\":\"newReferralFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"setPriceAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newWithdrawFee\",\"type\":\"uint256\"}],\"name\":\"newWithdrawFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address[]\"},{\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"deleteInvestorTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"valueInWei\",\"type\":\"uint256\"}],\"name\":\"estimateTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fundManagers\",\"type\":\"address\"}],\"name\":\"newFundManagers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenPrice\",\"type\":\"uint256\"}],\"name\":\"NewTokenPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"AddTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenPrice\",\"type\":\"uint256\"}],\"name\":\"DeleteTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"supportFee\",\"type\":\"uint256\"}],\"name\":\"SupportFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"managersFee\",\"type\":\"uint256\"}],\"name\":\"ManagersFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"referralFee\",\"type\":\"uint256\"}],\"name\":\"ReferralFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"withdrawFee\",\"type\":\"uint256\"}],\"name\":\"WithdrawFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"successFee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"withdrawFee\",\"type\":\"uint256\"}],\"name\":\"PaymentDone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ethAddress\",\"type\":\"address\"}],\"name\":\"NewEthAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"fundManagers\",\"type\":\"address\"}],\"name\":\"NewFundManagers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"supportWallet\",\"type\":\"address\"}],\"name\":\"NewSupportWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"setPriceAccount\",\"type\":\"address\"}],\"name\":\"NewSetPriceAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"NewSetRefferalAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"referralFee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"managersFee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"supportFee\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"commission\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"isPause\",\"type\":\"bool\"}],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"CrescoFinanceToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://135da871a98290dc6fe9687e7038217feced43a9421a67e2548ddcc40d4024e6"}]}