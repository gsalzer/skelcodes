{"status":"1","message":"OK","result":[{"SourceCode":"// File: ../../mosaic-contracts/contracts/lib/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n// Copyright 2019 OpenST Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//    http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n// ----------------------------------------------------------------------------\r\n//\r\n// http://www.simpletoken.org/\r\n//\r\n// Based on the SafeMath library by the OpenZeppelin team.\r\n// Copyright (c) 2018 Smart Contract Solutions, Inc.\r\n// https://github.com/OpenZeppelin/zeppelin-solidity\r\n// The MIT License.\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\n/**\r\n * @title SafeMath library.\r\n *\r\n * @notice Based on the SafeMath library by the OpenZeppelin team.\r\n *\r\n * @dev Math operations with safety checks that revert on error.\r\n */\r\nlibrary SafeMath {\r\n\r\n    /* Internal Functions */\r\n\r\n    /**\r\n     * @notice Multiplies two numbers, reverts on overflow.\r\n     *\r\n     * @param a Unsigned integer multiplicand.\r\n     * @param b Unsigned integer multiplier.\r\n     *\r\n     * @return uint256 Product.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        /*\r\n         * Gas optimization: this is cheaper than requiring 'a' not being zero,\r\n         * but the benefit is lost if 'b' is also tested.\r\n         * See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n         */\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(\r\n            c / a == b,\r\n            \"Overflow when multiplying.\"\r\n        );\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @notice Integer division of two numbers truncating the quotient, reverts\r\n     *         on division by zero.\r\n     *\r\n     * @param a Unsigned integer dividend.\r\n     * @param b Unsigned integer divisor.\r\n     *\r\n     * @return uint256 Quotient.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0.\r\n        require(\r\n            b > 0,\r\n            \"Cannot do attempted division by less than or equal to zero.\"\r\n        );\r\n        uint256 c = a / b;\r\n\r\n        // There is no case in which the following doesn't hold:\r\n        // assert(a == b * c + a % b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @notice Subtracts two numbers, reverts on underflow (i.e. if subtrahend\r\n     *         is greater than minuend).\r\n     *\r\n     * @param a Unsigned integer minuend.\r\n     * @param b Unsigned integer subtrahend.\r\n     *\r\n     * @return uint256 Difference.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(\r\n            b <= a,\r\n            \"Underflow when subtracting.\"\r\n        );\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @notice Adds two numbers, reverts on overflow.\r\n     *\r\n     * @param a Unsigned integer augend.\r\n     * @param b Unsigned integer addend.\r\n     *\r\n     * @return uint256 Sum.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(\r\n            c >= a,\r\n            \"Overflow when adding.\"\r\n        );\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @notice Divides two numbers and returns the remainder (unsigned integer\r\n     *         modulo), reverts when dividing by zero.\r\n     *\r\n     * @param a Unsigned integer dividend.\r\n     * @param b Unsigned integer divisor.\r\n     *\r\n     * @return uint256 Remainder.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(\r\n            b != 0,\r\n            \"Cannot do attempted division by zero (in `mod()`).\"\r\n        );\r\n\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: ../../mosaic-contracts/contracts/lib/OrganizationInterface.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n// Copyright 2019 OpenST Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//    http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n//\r\n// ----------------------------------------------------------------------------\r\n//\r\n// http://www.simpletoken.org/\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\n/**\r\n *  @title OrganizationInterface provides methods to check if an address is\r\n *         currently registered as an active participant in the organization.\r\n */\r\ninterface OrganizationInterface {\r\n\r\n    /**\r\n     * @notice Checks if an address is currently registered as the organization.\r\n     *\r\n     * @param _organization Address to check.\r\n     *\r\n     * @return isOrganization_ True if the given address represents the\r\n     *                         organization. Returns false otherwise.\r\n     */\r\n    function isOrganization(\r\n        address _organization\r\n    )\r\n        external\r\n        view\r\n        returns (bool isOrganization_);\r\n\r\n    /**\r\n     * @notice Checks if an address is currently registered as an active worker.\r\n     *\r\n     * @param _worker Address to check.\r\n     *\r\n     * @return isWorker_ True if the given address is a registered, active\r\n     *                   worker. Returns false otherwise.\r\n     */\r\n    function isWorker(address _worker) external view returns (bool isWorker_);\r\n\r\n}\r\n\r\n// File: ../../mosaic-contracts/contracts/lib/Organization.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n// Copyright 2019 OpenST Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//    http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n//\r\n// ----------------------------------------------------------------------------\r\n//\r\n// http://www.simpletoken.org/\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Organization contract handles an organization and its workers.\r\n *\r\n * @notice The organization represents an entity that manages other contracts\r\n *         and therefore the `Organization.sol` contract holds all the keys\r\n *         required to administer the other contracts.\r\n *         This contract supports the notion of an \"admin\" that can act on\r\n *         behalf of the organization. When seen from the outside by consumers\r\n *         of the `OrganizationInterface`, a notion of an admin does not exist.\r\n */\r\ncontract Organization is OrganizationInterface {\r\n\r\n\r\n    /* Using */\r\n\r\n    using SafeMath for uint256;\r\n\r\n\r\n    /* Events */\r\n\r\n    /** Emitted when a current owner initiates a change of ownership. */\r\n    event OwnershipTransferInitiated(\r\n        address indexed proposedOwner,\r\n        address currentOwner\r\n    );\r\n\r\n    /** Emitted when a new owner accepts the ownership transfer. */\r\n    event OwnershipTransferCompleted(address newOwner, address previousOwner);\r\n\r\n    /** Emitted whenever an owner or admin changes the address of the admin. */\r\n    event AdminAddressChanged(address indexed newAdmin, address previousAdmin);\r\n\r\n    /** Emitted when a worker address was set. */\r\n    event WorkerSet(address indexed worker, uint256 expirationHeight);\r\n\r\n    /** Emitted when a worker address is deleted from the contract. */\r\n    event WorkerUnset(address worker);\r\n\r\n\r\n    /* Storage */\r\n\r\n    /** Address for which private key will be owned by the organization. */\r\n    address public owner;\r\n\r\n    /**\r\n     * Proposed Owner is the newly proposed address that was proposed by the\r\n     * current owner for ownership transfer.\r\n     */\r\n    address public proposedOwner;\r\n\r\n    /**\r\n     * Admin address set by owner to facilitate operations of an economy on\r\n     * behalf of the owner.\r\n     * While this contract includes details that regard the admin, e.g. a\r\n     * modifier, when looking at the `OrganizationInterface`, the existence of\r\n     * an admin is a concrete implementation detail and not known to the\r\n     * consumers of the interface.\r\n     */\r\n    address public admin;\r\n\r\n    /**\r\n     *  Map of whitelisted worker addresses to their expiration block height.\r\n     */\r\n    mapping(address => uint256) public workers;\r\n\r\n\r\n    /* Modifiers */\r\n\r\n    /**\r\n     * onlyOwner functions can only be called from the address that is\r\n     * registered as the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(\r\n            msg.sender == owner,\r\n            \"Only owner is allowed to call this method.\"\r\n        );\r\n\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * onlyOwnerOrAdmin functions can only be called from an address that is\r\n     * registered as owner or as admin.\r\n     */\r\n    modifier onlyOwnerOrAdmin() {\r\n        require(\r\n            msg.sender == owner || msg.sender == admin,\r\n            \"Only owner and admin are allowed to call this method.\"\r\n        );\r\n\r\n        _;\r\n    }\r\n\r\n\r\n    /* Constructor */\r\n\r\n    /**\r\n     * @notice Creates a new organization. When you first initialize the\r\n     *         organization, you can specify owner, admin, and workers. The\r\n     *         owner is mandatory as it will be the only address able to make\r\n     *         all later changes. An admin and workers can be added at\r\n     *         construction or they can be set by the owner later.\r\n     *\r\n     * @param _owner The address that shall be registered as the owner of the\r\n     *               organization.\r\n     * @param _admin The address that shall be registered as the admin of the\r\n     *               organization. Can be address(0) if no admin is desired.\r\n     * @param _workers An array of initial worker addresses. Can be an empty\r\n     *                 array if no workers are desired or known at construction.\r\n     * @param _expirationHeight If any workers are given, this will be the\r\n     *                          block height at which they expire.\r\n     */\r\n    constructor(\r\n        address _owner,\r\n        address _admin,\r\n        address[] memory _workers,\r\n        uint256 _expirationHeight\r\n    )\r\n        public\r\n    {\r\n        require(\r\n            _owner != address(0),\r\n            \"The owner must not be the zero address.\"\r\n        );\r\n\r\n        owner = _owner;\r\n        admin = _admin;\r\n\r\n        for(uint256 i = 0; i < _workers.length; i++) {\r\n            setWorkerInternal(_workers[i], _expirationHeight);\r\n        }\r\n    }\r\n\r\n\r\n    /* External Functions */\r\n\r\n    /**\r\n     * @notice Proposes a new owner of this contract. Ownership will not be\r\n     *         transferred until the new, proposed owner accepts the proposal.\r\n     *         Allows resetting of proposed owner to address(0).\r\n     *\r\n     * @param _proposedOwner Proposed owner address.\r\n     *\r\n     * @return success_ True on successful execution.\r\n     */\r\n    function initiateOwnershipTransfer(\r\n        address _proposedOwner\r\n    )\r\n        external\r\n        onlyOwner\r\n        returns (bool success_)\r\n    {\r\n        require(\r\n            _proposedOwner != owner,\r\n            \"Proposed owner address can't be current owner address.\"\r\n        );\r\n\r\n        proposedOwner = _proposedOwner;\r\n\r\n        emit OwnershipTransferInitiated(_proposedOwner, owner);\r\n\r\n        success_ = true;\r\n    }\r\n\r\n    /**\r\n     * @notice Complete ownership transfer to proposed owner. Must be called by\r\n     *         the proposed owner.\r\n     *\r\n     * @return success_ True on successful execution.\r\n     */\r\n    function completeOwnershipTransfer() external returns (bool success_)\r\n    {\r\n        require(\r\n            msg.sender == proposedOwner,\r\n            \"Caller is not proposed owner address.\"\r\n        );\r\n\r\n        emit OwnershipTransferCompleted(proposedOwner, owner);\r\n\r\n        owner = proposedOwner;\r\n        proposedOwner = address(0);\r\n\r\n        success_ = true;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the admin address. Can only be called by owner or current\r\n     *         admin. If called by the current admin, adminship is transferred\r\n     *         to the given address immediately.\r\n     *         It is discouraged to set the admin address to be the same as the\r\n     *         address of the owner. The point of the admin is to act on behalf\r\n     *         of the organization without requiring the possibly very safely\r\n     *         stored owner key(s).\r\n     *         Admin can be set to `address(0)` if no admin is desired.\r\n     *\r\n     * @param _admin Admin address to be set.\r\n     *\r\n     * @return success_ True on successful execution.\r\n     */\r\n    function setAdmin(\r\n        address _admin\r\n    )\r\n        external\r\n        onlyOwnerOrAdmin\r\n        returns (bool success_)\r\n    {\r\n        /*\r\n         * If the address does not change, the call is considered a success,\r\n         * but we don't need to emit an event as it did not actually change.\r\n         */\r\n        if (admin != _admin) {\r\n            emit AdminAddressChanged(_admin, admin);\r\n            admin = _admin;\r\n        }\r\n\r\n        success_ = true;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets worker and its expiration block height.\r\n     *         Admin/Owner has the flexibility to extend/reduce worker\r\n     *         expiration height. This way, a worker activation/deactivation\r\n     *         can be controlled without adding/removing worker keys.\r\n     *\r\n     * @param _worker Worker address to be added.\r\n     * @param _expirationHeight Expiration block height of worker.\r\n     *\r\n     * @return remainingBlocks_ Remaining number of blocks for which worker is\r\n     *                          active.\r\n     */\r\n    function setWorker(\r\n        address _worker,\r\n        uint256 _expirationHeight\r\n    )\r\n        external\r\n        onlyOwnerOrAdmin\r\n    {\r\n        setWorkerInternal(_worker, _expirationHeight);\r\n    }\r\n\r\n    /**\r\n     * @notice Removes a worker.\r\n     *\r\n     * @param _worker Worker address to be removed.\r\n     *\r\n     * @return isUnset_ True if the worker existed else returns false.\r\n     */\r\n    function unsetWorker(\r\n        address _worker\r\n    )\r\n        external\r\n        onlyOwnerOrAdmin\r\n        returns (bool isUnset_)\r\n    {\r\n        if (workers[_worker] > 0) {\r\n            delete workers[_worker];\r\n            emit WorkerUnset(_worker);\r\n\r\n            isUnset_ = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Checks if an address is currently registered as the organization.\r\n     *\r\n     * @dev It is an implementation detail of this contract that the admin can\r\n     *      act on behalf of the organization. To the outside, an \"admin\"\r\n     *      doesn't exist. See also the `admin` storage variable.\r\n     *\r\n     * @param _organization Address to check.\r\n     *\r\n     * @return isOrganization_ True if the given address represents the\r\n     *                         organization. Returns false otherwise.\r\n     */\r\n    function isOrganization(\r\n        address _organization\r\n    )\r\n        external\r\n        view\r\n        returns (bool isOrganization_)\r\n    {\r\n        isOrganization_ = _organization == owner || _organization == admin;\r\n    }\r\n\r\n    /**\r\n     * @notice Checks if an address is currently registered as an active worker.\r\n     *\r\n     * @param _worker Address to check.\r\n     *\r\n     * @return isWorker_ True if the worker is already added and expiration\r\n     *                   height is more than or equal to current block number.\r\n     *                   Returns false otherwise.\r\n     */\r\n    function isWorker(address _worker) external view returns (bool isWorker_)\r\n    {\r\n        isWorker_ = workers[_worker] > block.number;\r\n    }\r\n\r\n\r\n    /* Private Functions */\r\n\r\n    /**\r\n     * @notice Sets worker and its expiration block height. If the worker\r\n     *         already exists, then its expiration height will be overwritten\r\n     *         with the given one.\r\n     *\r\n     * @param _worker Worker address to be added.\r\n     * @param _expirationHeight Expiration block height of worker.\r\n     *\r\n     * @return remainingBlocks_ Remaining number of blocks for which worker is\r\n     *                          active.\r\n     */\r\n    function setWorkerInternal(\r\n        address _worker,\r\n        uint256 _expirationHeight\r\n    )\r\n        private\r\n    {\r\n        require(\r\n            _worker != address(0),\r\n            \"Worker address cannot be null.\"\r\n        );\r\n\r\n        require(\r\n            _expirationHeight > block.number,\r\n            \"Expiration height must be in the future.\"\r\n        );\r\n\r\n        workers[_worker] = _expirationHeight;\r\n\r\n        emit WorkerSet(_worker, _expirationHeight);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"workers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[{\"name\":\"success_\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_worker\",\"type\":\"address\"}],\"name\":\"unsetWorker\",\"outputs\":[{\"name\":\"isUnset_\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_worker\",\"type\":\"address\"}],\"name\":\"isWorker\",\"outputs\":[{\"name\":\"isWorker_\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_organization\",\"type\":\"address\"}],\"name\":\"isOrganization\",\"outputs\":[{\"name\":\"isOrganization_\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposedOwner\",\"type\":\"address\"}],\"name\":\"initiateOwnershipTransfer\",\"outputs\":[{\"name\":\"success_\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposedOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"completeOwnershipTransfer\",\"outputs\":[{\"name\":\"success_\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_worker\",\"type\":\"address\"},{\"name\":\"_expirationHeight\",\"type\":\"uint256\"}],\"name\":\"setWorker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_admin\",\"type\":\"address\"},{\"name\":\"_workers\",\"type\":\"address[]\"},{\"name\":\"_expirationHeight\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"proposedOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"currentOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newAdmin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"previousAdmin\",\"type\":\"address\"}],\"name\":\"AdminAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"worker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"expirationHeight\",\"type\":\"uint256\"}],\"name\":\"WorkerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"worker\",\"type\":\"address\"}],\"name\":\"WorkerUnset\",\"type\":\"event\"}]","ContractName":"Organization","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e975cc9ce337b4c25ca75cb00f8f63e4bb65fa72000000000000000000000000d08db251dcd167d6c34b999d7282cd2014c442bb0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000003b9aca0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000007f715eecfe5512d72f8051a85c465e6c02e04359","Library":"","LicenseType":"Apache-2.0","SwarmSource":"bzzr://b0c005a885ca66aef9c4c03f0675bacc9fe42875def77fc608c71e8f7f7138f9"}]}