{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.11;\r\n\r\nlibrary SafeMath {\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tc = a * b;\r\n\t\tassert(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn a / b;\r\n\t}\r\n\t\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n\t\tc = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n}\r\n\r\ncontract Ownable {\r\n\taddress public owner;\r\n\taddress public newOwner;\r\n\r\n\tevent OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\r\n\r\n\tmodifier onlyOwner() {\r\n\t\trequire(msg.sender == owner, \"msg.sender == owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction transferOwnership(address _newOwner) public onlyOwner {\r\n\t\trequire(address(0) != _newOwner, \"address(0) != _newOwner\");\r\n\t\tnewOwner = _newOwner;\r\n\t}\r\n\r\n\tfunction acceptOwnership() public {\r\n\t\trequire(msg.sender == newOwner, \"msg.sender == newOwner\");\r\n\t\temit OwnershipTransferred(owner, msg.sender);\r\n\t\towner = msg.sender;\r\n\t\tnewOwner = address(0);\r\n\t}\r\n}\r\n\r\ncontract tokenInterface {\r\n\tfunction balanceOf(address _owner) public view returns (uint256 balance);\r\n\tfunction transfer(address _to, uint256 _value) public returns (bool);\r\n    uint8 public decimals;\r\n}\r\n\r\ncontract medianizerInterface {\r\n\tfunction read() public view returns(bytes32);\r\n}\r\n\r\ncontract STO is Ownable {\r\n    using SafeMath for uint256;\r\n\t\r\n\ttokenInterface public tokenContract;\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n    \r\n    address payable public wallet;\r\n    \r\n    uint256 public etherMinimum;\r\n    uint256 public tknLocked;\r\n    uint256 public tknUnlocked;\r\n\t\r\n\tmapping(address => uint256) public tknUserPending; // address => token amount that will be claimed after KYC\r\n\r\n    bool internal initialized = true;\r\n    function init(address _tokenContract, address payable _wallet, string memory _name, string memory _symbol, uint8 _decimals, uint256 _startTime, uint256 _endTime, uint256 _etherMinimum, address _priceFeedContract, uint256 _priceTknUsd) public {\r\n        require(!initialized, \"!initialized\");\r\n        initialized = true;\r\n        \r\n        tokenContract = tokenInterface(_tokenContract);\r\n        wallet = _wallet;\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n        startTime = _startTime;\r\n        endTime = _endTime;\r\n        etherMinimum = _etherMinimum;\r\n        priceFeedContract = medianizerInterface(_priceFeedContract);\r\n        priceTknUsd = _priceTknUsd;\r\n        \r\n        owner = msg.sender;\r\n    }\r\n    \r\n    uint256 public priceTknUsd;\r\n    medianizerInterface public priceFeedContract;\r\n    \r\n    function priceUsd() public view returns(uint256) {\r\n        return uint256(priceFeedContract.read());\r\n    }\r\n    \r\n    function priceTknEth() public view returns(uint256) {\r\n        return priceTknUsd.mul(1e18).div(priceUsd());\r\n    }\r\n\r\n\t/***\r\n\t * Start ERC20 Implementation\r\n\t ***/\r\n\t \r\n \tstring public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n\t\r\n    function totalSupply() view public returns(uint256){\r\n        return tknLocked;\r\n    }\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    function transfer(address , uint256 ) public pure returns (bool) {\r\n        require(false, \"false\");\r\n    }\r\n\r\n    function balanceOf(address _tknHolder) public view returns (uint256 balance) {\r\n        return tknUserPending[_tknHolder];\r\n    }\r\n\t \r\n\t/***\r\n\t * End ERC20 Implementation\r\n\t ***/\r\n    \r\n    /***\r\n     * Start Functions for Owner\r\n     ***/\r\n    \r\n    function withdrawTokens(address to, uint256 value) public onlyOwner returns (bool) {\r\n        return tokenContract.transfer(to, value);\r\n    }\r\n    \r\n    function changeSettings(address _tokenContract, address payable _wallet, string memory _name, string memory _symbol, uint8 _decimals, uint256 _startTime, uint256 _endTime, uint256 _etherMinimum, address _priceFeedContract, uint256 _priceTknUsd) public onlyOwner {\r\n        if(_tokenContract != address(0)) tokenContract = tokenInterface(_tokenContract);\r\n        if(_wallet != address(0)) wallet = _wallet;\r\n        if(keccak256(abi.encodePacked(_name)) != keccak256(abi.encodePacked(\"\"))) name = _name;\r\n        if(keccak256(abi.encodePacked(_symbol)) != keccak256(abi.encodePacked(\"\"))) symbol = _symbol;\r\n        if(_decimals != 0) decimals = _decimals;\r\n        if(_startTime != 0) startTime = _startTime;\r\n        if(_endTime != 0) endTime = _endTime;\r\n        if(_etherMinimum != 0) etherMinimum = _etherMinimum;\r\n        if(_priceFeedContract != address(0)) priceFeedContract = medianizerInterface(_priceFeedContract);\r\n        if(_priceTknUsd != 0) priceTknUsd = _priceTknUsd;\r\n    }\r\n    \r\n    function authorizeUsers(address[] memory  _users) onlyOwner public {\r\n        for( uint256 i = 0; i < _users.length; i += 1 ) {\r\n            giveToken(_users[i]);\r\n        }\r\n    }\r\n    \r\n    function refundBuyer(address _buyer) public onlyOwner {\r\n        emit Transfer(_buyer, address(0), tknUserPending[_buyer]);\r\n        tknLocked = tknLocked.sub(tknUserPending[_buyer]);\r\n        tknUserPending[_buyer] = 0;\r\n    }\r\n    \r\n    /***\r\n     * End Functions for Owner\r\n     ***/\r\n     \r\n    /***\r\n    * Start internal Functions \r\n    ***/\r\n    \r\n\tfunction takeEther(address payable _buyer) internal {\r\n\t    require( now > startTime, \"now > startTime\" );\r\n\t\trequire( now < endTime, \"now < endTime\");\r\n        require( msg.value >= etherMinimum, \"msg.value >= etherMinimum\"); \r\n        uint256 remainingTokens = tokenContract.balanceOf(address(this));\r\n        require( remainingTokens > 0, \"remainingTokens > 0\" );\r\n        \r\n        uint256 oneToken = 10 ** uint256(tokenContract.decimals());\r\n        uint256 tokenAmount = msg.value.mul( oneToken ).div( priceTknEth() );\r\n        \r\n        uint256 refund = 0;\r\n        if ( remainingTokens < tokenAmount ) {\r\n            refund = (tokenAmount - remainingTokens).mul(priceTknEth()).div(oneToken);\r\n            tokenAmount = remainingTokens;\r\n\t\t\tremainingTokens = 0; // set remaining token to 0\r\n            _buyer.transfer(refund);\r\n        } else {\r\n\t\t\tremainingTokens = remainingTokens.sub(tokenAmount); // update remaining token without bonus\r\n        }\r\n        \r\n        uint256 funds = msg.value.sub(refund);\r\n        wallet.transfer(funds);\r\n        \r\n        tknUserPending[_buyer] = tknUserPending[_buyer].add(tokenAmount);\t\r\n        \r\n        tknLocked = tknLocked.add(tokenAmount);\r\n        \r\n        emit Transfer(address(0), _buyer, tokenAmount);\r\n\t}\r\n\t\r\n\tfunction giveToken(address _buyer) internal {\r\n\t    require( tknUserPending[_buyer] > 0, \"tknUserPending[_buyer] > 0\" );\r\n\t\r\n\t\ttknUnlocked = tknUnlocked.add(tknUserPending[_buyer]);\r\n\t\ttknLocked = tknLocked.sub(tknUserPending[_buyer]);\r\n\r\n\t\ttokenContract.transfer(_buyer, tknUserPending[_buyer]);\r\n        emit Transfer(_buyer, address(0), tknUserPending[_buyer]);\r\n        \r\n\t\ttknUserPending[_buyer] = 0;\r\n\t}\r\n\t\r\n    /***\r\n    * End internal Functions \r\n    ***/\r\n    \r\n\tfunction () external payable{\r\n\t    takeEther(msg.sender);\r\n\t}\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"authorizeUsers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tknHolder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_etherMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_priceFeedContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_priceTknUsd\",\"type\":\"uint256\"}],\"name\":\"changeSettings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherMinimum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_etherMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_priceFeedContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_priceTknUsd\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceFeedContract\",\"outputs\":[{\"internalType\":\"contract medianizerInterface\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceTknEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceTknUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"refundBuyer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tknLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tknUnlocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tknUserPending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"internalType\":\"contract tokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"STO","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://7c046737b329749c7699b1a2b70e2ffb0d1d823ee987b388480aeaf5a2909ed0"}]}