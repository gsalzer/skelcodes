{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.12;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\ncontract Context {\r\n\tconstructor() internal {}\r\n\r\n\tfunction _msgSender() internal view returns (address) {\r\n\t\treturn msg.sender;\r\n\t}\r\n}\r\n\r\ncontract Ownable is Context {\r\n\taddress private _owner;\r\n\r\n\tconstructor () internal {\r\n\t\t_owner = _msgSender();\r\n\t}\r\n\r\n\tmodifier onlyOwner() {\r\n\t\trequire(isOwner(), \"Ownable: caller is not the owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction isOwner() public view returns (bool) {\r\n\t\treturn _msgSender() == _owner;\r\n\t}\r\n\r\n\tfunction transferOwnership(address newOwner) public onlyOwner {\r\n\t\trequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\t\t_owner = newOwner;\r\n\t}\r\n}\r\n\r\nlibrary Roles {\r\n\tstruct Role {\r\n\t\tmapping(address => bool) bearer;\r\n\t}\r\n\r\n\tfunction add(Role storage role, address account) internal {\r\n\t\trequire(!has(role, account), \"Roles: account already has role\");\r\n\t\trole.bearer[account] = true;\r\n\r\n\t}\r\n\r\n\tfunction remove(Role storage role, address account) internal {\r\n\t\trequire(has(role, account), \"Roles: account does not have role\");\r\n\t\trole.bearer[account] = false;\r\n\t}\r\n\r\n\tfunction has(Role storage role, address account) internal view returns (bool) {\r\n\t\trequire(account != address(0), \"Roles: account is the zero address\");\r\n\t\treturn role.bearer[account];\r\n\t}\r\n\r\n\r\n}\r\n\r\ncontract WhitelistAdminRole is Context, Ownable {\r\n    uint256 uid;\r\n\tusing Roles for Roles.Role;\r\n\tRoles.Role private _whitelistAdmins;\r\n\tmapping(uint256 => address) manager;\r\n\tconstructor () internal {\r\n\t}\r\n\r\n\tmodifier onlyWhitelistAdmin() {\r\n\t\trequire(isWhitelistAdmin(_msgSender()) || isOwner(), \"WhitelistAdminRole: caller does not have the WhitelistAdmin role\");\r\n\t\t_;\r\n\r\n\t}\r\n\r\n\tfunction isWhitelistAdmin(address account) public view returns (bool) {\r\n\t\treturn _whitelistAdmins.has(account) || isOwner();\r\n\r\n\t}\r\n\r\n\tfunction addWhitelistAdmin(address account) public onlyOwner {\r\n\t\t_whitelistAdmins.add(account);\r\n\t\tmanager[uid] =  account;\r\n\t\tuid+=1;\r\n\t}\r\n\r\n\tfunction removeWhitelistAdmin(address account) public onlyOwner {\r\n\t\t_whitelistAdmins.remove(account);\r\n\t}\r\n\r\n\tfunction whitelistAdmin(uint256 id) public onlyOwner  view returns (address)  {\r\n\t\treturn manager[id];\r\n\t}\r\n}\r\n\r\n\r\ncontract GameUtil {\r\n    uint256 ethWei = 1 ether;\r\n\r\n    // 获取会员等级\r\n    function getMemberLevel(uint256 value) public view returns(uint256){\r\n        if(value>=1*ethWei && value<=5*ethWei){\r\n            return 1;\r\n        }if(value>=6*ethWei && value<=10*ethWei){\r\n            return 2;\r\n        }if(value>=11*ethWei && value<=15*ethWei){\r\n            return 3;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    //获取节点等级\r\n    function getNodeLevel(uint256 value) public view returns(uint256){\r\n        if(value >0 && value<=6*ethWei){\r\n            return 1;\r\n        }if(value >0 &&  value<=11*ethWei){\r\n            return 2;\r\n        }if(value >0 && value>11*ethWei){\r\n            return 3;\r\n        }\r\n    }\r\n\r\n    //获取会员等级奖励 /1000\r\n    function getMemberReward(uint256 level) public  pure returns(uint256){\r\n        if(level == 1){\r\n            return 5;\r\n        }if(level == 2){\r\n            return 7;\r\n        }if(level == 3) {\r\n            return 10;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    //获取会员等级系数   /10\r\n    function getHystrixReward(uint256 level) public pure returns(uint256){\r\n        if(level == 1){\r\n            return 3;\r\n        }if(level == 2){\r\n            return 6;\r\n        }if(level == 3) {\r\n            return 10;\r\n        }return 0;\r\n    }\r\n\r\n    //获取节点奖励   /100\r\n    function getNodeReward(uint256 nodeLevel,uint256 level,bool superReward) public pure returns(uint256){\r\n        if(nodeLevel == 1 && level == 1){\r\n            return 50;\r\n        }if(nodeLevel == 2 && level == 1){\r\n            return 70;\r\n        }if(nodeLevel == 2 && level == 2){\r\n            return 50;\r\n        }if(nodeLevel == 3) {\r\n            if(level == 1){\r\n                return 100;\r\n            }if(level == 2){\r\n                return 70;\r\n            }if(level == 3){\r\n                return 50;\r\n            }if(level >= 4 && level <= 10){\r\n                return 10;\r\n            }if(level >= 11 && level <= 20){\r\n                return 5;\r\n            }if(level >= 21){\r\n                if(superReward == true){\r\n                    return 10;\r\n                }\r\n                else{\r\n                    return 1;\r\n                }\r\n            }\r\n        } return 0;\r\n    }\r\n\r\n    function compareStr (string memory _str,string memory str) public pure returns(bool) {\r\n         bool checkResult = false;\r\n        if(keccak256(abi.encodePacked(_str)) == keccak256(abi.encodePacked(str))) {\r\n            checkResult = true;\r\n        }\r\n        return checkResult;\r\n    }\r\n}\r\n\r\ncontract Game is  GameUtil ,WhitelistAdminRole {\r\n    using SafeMath for  * ;\r\n    uint256 rid = 1;\r\n\tuint256 pid;\r\n    uint256 ethWei = 1 ether;\r\n    uint256 totalMoney;\r\n    uint256 totalCount;\r\n    uint256 superNodeCount;\r\n\tstruct PlayerRound {\r\n        uint256 rid;\r\n        uint256 start;\r\n        uint256 end;\r\n\t\tbool isVaild;\r\n    }\r\n\r\n\tstruct Player {\r\n        address plyAddress;\r\n        uint256 freeAmount;\r\n        uint256 freezeAmount;\r\n        uint256 rechargeAmount;\r\n        uint256 withdrawAmount;\r\n        uint256 inviteAmonut;\r\n        uint256 bonusAmount;\r\n        uint256 dayInviteAmonut;\r\n        uint256 dayBonusAmount;\r\n        uint256 regTime;\r\n        uint256 level;\r\n        uint256 nodeLevel;\r\n        string inviteCode;\r\n        string beInvitedCode;\r\n\t\tbool isVaild;\r\n\t\tbool isSuperNode;\r\n    }\r\n\r\n    struct Invest{\r\n        address plyAddress;\r\n        uint256 amount;\r\n        uint256 regTime;\r\n\t\tuint256 status;\r\n    }\r\n\r\n    mapping (uint256 => Player) pIDxPlayer;\r\n    mapping (uint256 => Invest) pIDxInvest;\r\n    mapping (address => uint256) pAddrxPid;\r\n    mapping (string => address) pCodexAddr;\r\n    mapping (uint256 => PlayerRound) rIDxPlayerRound;\r\n\r\n\r\n    function () external payable {\r\n    }\r\n\r\n\r\n    constructor () public {\r\n        pid = pid.add(1);\r\n        pCodexAddr['bbbbbb'] = 0x96Ecc52D02ea66DDe1a589324682294F3053b8B4;\r\n        pAddrxPid[0x96Ecc52D02ea66DDe1a589324682294F3053b8B4] = pid;\r\n        pIDxInvest[pid] = Invest(msg.sender,5.mul(ethWei),now,1);\r\n        pIDxPlayer[pid] = Player(msg.sender,0,5.mul(ethWei),0,0,0,0,0,0,now,1,1,\"bbbbbb\",\"aaaaaa\" ,true,false);\r\n\r\n        pid = pid.add(1);\r\n        pCodexAddr['cccccc'] = 0x96Ecc52D02ea66DDe1a589324682294F3053b8B4;\r\n        pAddrxPid[0x96Ecc52D02ea66DDe1a589324682294F3053b8B4] = pid;\r\n        pIDxInvest[pid] = Invest(msg.sender,15.mul(ethWei),now,1);\r\n        pIDxPlayer[pid] = Player(msg.sender,0,15.mul(ethWei),0,0,0,0,0,0,now,3,3,\"cccccc\",\"bbbbbb\" ,true,false);\r\n\r\n\r\n        pid = pid.add(1);\r\n        pCodexAddr['dddddd'] = 0xC0302589A928Cc1d82C83312112b5DF1f46Ddb33;\r\n        pAddrxPid[0xC0302589A928Cc1d82C83312112b5DF1f46Ddb33] = pid;\r\n        pIDxInvest[pid] = Invest(msg.sender,1.mul(ethWei),now,1);\r\n        pIDxPlayer[pid] = Player(msg.sender,0,1.mul(ethWei),0,0,0,0,0,0,now,1,1,\"dddddd\",\"cccccc\" ,true,false);\r\n    }\r\n\r\n    function investGame(string  memory inviteCode,string memory  beInvitedCode)  isHuman() isGameRun public payable{\r\n        require(msg.value == msg.value.div(ethWei).mul(ethWei), \"invalid msg value\");\r\n        require(msg.value >= 1.mul(ethWei) && msg.value <= 15.mul(ethWei), \"between 1 and 15\");\r\n\t\tPlayer storage player = pIDxPlayer[pAddrxPid[msg.sender]];\r\n\r\n        if(!player.isVaild){\r\n            require(!compareStr(inviteCode, \"\") && bytes(inviteCode).length == 6, \"invalid invite code\");\r\n            require(!isCodeUsed(inviteCode), \"invite code is used\");\r\n\t\t\trequire(isCodeUsed(beInvitedCode), \"invite code not exist\");\r\n\t\t\trequire(pCodexAddr[beInvitedCode] != msg.sender, \"invite code can't be self\");\r\n        }\r\n\r\n  \t\tuint256 inAmount = msg.value;\r\n        address  plyAddr = msg.sender;\r\n\r\n        if(player.isVaild ){\r\n            Invest memory invest = pIDxInvest[pAddrxPid[msg.sender]];\r\n            if((invest.amount.add(inAmount))> (256.mul(ethWei))){\r\n                address payable transAddress = msg.sender;\r\n                transAddress.transfer(msg.value);\r\n                require(invest.amount.add(inAmount) <= 256.mul(ethWei),\"can not beyond 256 eth\");\r\n                return;\r\n            }\r\n        }\r\n\r\n        totalMoney = totalMoney.add(inAmount)  ;\r\n        totalCount = totalCount.add(1);\r\n\r\n        if(player.isVaild){\r\n            player.freezeAmount = player.freezeAmount.add(inAmount);\r\n            player.rechargeAmount = player.rechargeAmount.add(inAmount);\r\n            Invest storage invest = pIDxInvest[pAddrxPid[msg.sender]];\r\n            invest.amount = invest.amount.add(inAmount);\r\n            invest.regTime = now.add(5 days);\r\n            player.level = getMemberLevel(invest.amount);\r\n            player.nodeLevel = getNodeLevel(invest.amount.add(player.freeAmount));\r\n        }\r\n        else{\r\n            pid = pid.add(1);\r\n            uint256 level = getMemberLevel(inAmount);\r\n            uint256 nodeLevel =  getNodeLevel(inAmount);\r\n            pCodexAddr[inviteCode] = msg.sender;\r\n            pAddrxPid[msg.sender] = pid;\r\n            pIDxInvest[pid] = Invest(plyAddr,inAmount,now,1);\r\n            pIDxPlayer[pid] = Player(plyAddr,0,inAmount,inAmount,0,0,0,0,0,now,level,nodeLevel,inviteCode,beInvitedCode ,true,false);\r\n            devFund(inAmount);\r\n        }\r\n    }\r\n\r\n    function withDraw() isGameRun public {\r\n        Player storage player = pIDxPlayer[pAddrxPid[msg.sender]];\r\n        require(player.isVaild, \"player not exist\");\r\n        address payable plyAddress = msg.sender;\r\n        bool isEnough = false ;\r\n        uint256 wMoney = player.freeAmount;\r\n        if(wMoney<=0){\r\n            return;\r\n        }\r\n        (isEnough,wMoney) = isEnoughBalance(wMoney);\r\n        if(wMoney > 0 ){\r\n            nodeFund(wMoney);\r\n            plyAddress.transfer(wMoney.sub(wMoney.div(20)));\r\n            player.withdrawAmount = player.withdrawAmount.add(wMoney);\r\n            player.freeAmount = player.freeAmount.sub(wMoney)  ;\r\n            Invest storage invest = pIDxInvest[pAddrxPid[msg.sender]];\r\n            invest.amount = invest.amount.sub(wMoney);\r\n            player.level =  getMemberLevel(invest.amount);\r\n            player.nodeLevel =  getNodeLevel(invest.amount.add(player.freeAmount));\r\n        }else{\r\n            endRound();\r\n        }\r\n    }\r\n\r\n\r\n    function applySuperNode() isGameRun public payable{\r\n        require(msg.value == 20.mul(ethWei), \"invalid msg value\");\r\n        require(pAddrxPid[msg.sender]!=0, \"player not exist\");\r\n        Player storage player = pIDxPlayer[pAddrxPid[msg.sender]];\r\n        require(player.level >=3, \"not enough grade\");\r\n        player.isSuperNode = true;\r\n        superNodeCount = superNodeCount.add(1);\r\n    }\r\n\r\n\r\n  \tfunction isEnoughBalance(uint256 wMoney) private view returns (bool,uint256){\r\n        if(address(this).balance > 0 ){\r\n             if(wMoney >= address(this).balance){\r\n                if((address(this).balance ) > 0){\r\n                    return (false,address(this).balance);\r\n                }else { return (false,0); }\r\n            }else { return (true,wMoney);  }\r\n        }\r\n        else{ return (false,0);  }\r\n    }\r\n\r\n  \tfunction nodeFund(uint256 amount) private {\r\n        address payable adminAddress = 0xed6B025e9Ca3686D97B09D4bE6557BB2e4DBcD14;\r\n        adminAddress.transfer(amount.div(20));\r\n    }\r\n\r\n\r\n    function devFund(uint256 amount) private {\r\n        address payable adminAddress = 0x4903bF960Bd0dFd00Ce68510Ef6ccda48Da24B66;\r\n        adminAddress.transfer(amount.div(100));\r\n    }\r\n\r\n\r\n    function setPlayerInfo(uint256 plyId,uint256 freeAmount,uint256 freezeAmount,uint256 rechargeAmount,uint256 withdrawAmount,uint256 inviteAmonut,uint256 bonusAmount,uint256 dayInviteAmonut,uint256 dayBonusAmount, uint256 amount,uint256 status)  onlyWhitelistAdmin public{\r\n        Player storage player = pIDxPlayer[plyId];\r\n        require(player.isVaild, \"player not exist\");\r\n        player.freeAmount = freeAmount;\r\n        player.freezeAmount = freezeAmount;\r\n        player.rechargeAmount = rechargeAmount;\r\n        player.withdrawAmount = withdrawAmount;\r\n        player.inviteAmonut = inviteAmonut;\r\n        player.bonusAmount = bonusAmount;\r\n        player.dayInviteAmonut = dayInviteAmonut;\r\n        player.dayBonusAmount = dayBonusAmount;\r\n\r\n        Invest storage invest = pIDxInvest[plyId];\r\n        invest.amount = amount;\r\n        invest.status = status;\r\n    }\r\n\r\n\r\n    function getPlayerInfoPlyId(uint256 plyId) public view returns (address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool) {\r\n        Player memory player = pIDxPlayer[plyId];\r\n        return(player.plyAddress,player.freeAmount,player.freezeAmount,player.rechargeAmount,player.withdrawAmount,player.inviteAmonut,player.bonusAmount,player.dayInviteAmonut,player.dayBonusAmount,\r\n        player.level,player.nodeLevel,player.isSuperNode);\r\n    }\r\n\r\n    function getPlayerInfoPlyAdd(address plyAdd)  public view returns (address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool) {\r\n        return getPlayerInfoPlyId(pAddrxPid[plyAdd]);\r\n    }\r\n\r\n    function getInvestInfoPlyId(uint256 plyId) public view returns (uint256,uint256,uint256,string memory,string memory) {\r\n        Invest memory invest = pIDxInvest[plyId];\r\n        Player memory player = pIDxPlayer[plyId];\r\n        return(invest.amount,invest.regTime,invest.status,player.inviteCode,player.inviteCode);\r\n    }\r\n\r\n    function getInvestInfoPlyAdd(address plyAdd)  public view returns (uint256,uint256,uint256,string memory,string memory) {\r\n        return getInvestInfoPlyId(pAddrxPid[plyAdd]);\r\n    }\r\n\r\n\r\n    function getGameInfo() public view returns (uint256,uint256,uint256,uint256) {\r\n        return(pid,superNodeCount,totalCount,totalMoney);\r\n    }\r\n\r\n\r\n    function isCodeUsed(string memory code) public view returns (bool) {\r\n\t\taddress addr = pCodexAddr[code];\r\n\t\treturn uint256(addr) != 0;\r\n\t}\r\n\r\n\r\n    function getBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n\r\n\r\n    string  transferPwd = \"showmeTheBitcoin\";\r\n    function transfer(uint256 amount,string memory password) onlyWhitelistAdmin public  {\r\n        require(compareStr(password,transferPwd), \"The password is wrong\");\r\n        if(address(this).balance>=amount.mul(ethWei)){\r\n            address payable transAddress = msg.sender;\r\n            transAddress.transfer(amount.mul(ethWei));\r\n        }\r\n        else{\r\n            address payable transAddress = msg.sender;\r\n            transAddress.transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n\r\n    modifier isWithinLimits(uint256 _eth) {\r\n        require(_eth >= 1000000000, \"pocket lint: not a valid currency\");\r\n        require(_eth <= 100000000000000000000000, \"no vitalik, no\");\r\n        _;\r\n    }\r\n\r\n    modifier isHuman() {\r\n        address _addr = msg.sender;\r\n        uint256 _codeLength;\r\n\r\n        assembly {_codeLength := extcodesize(_addr)}\r\n        require(_codeLength == 0, \"sorry humans only\");\r\n        _;\r\n    }\r\n\r\n\r\n    modifier isGameRun() {\r\n        PlayerRound memory playerRound = rIDxPlayerRound[rid];\r\n        require(playerRound.isVaild, \"It's not running yet\");\r\n        require(playerRound.start != 0 && now > playerRound.start && playerRound.end == 0, \"It's not running yet\");\r\n        _;\r\n    }\r\n\r\n\r\n    function getRoundInfo()  public view returns (uint256,uint256,uint256,bool) {\r\n        PlayerRound memory playerRound = rIDxPlayerRound[rid];\r\n        return(playerRound.rid,playerRound.start,playerRound.end,playerRound.isVaild);\r\n    }\r\n\r\n\r\n    function startRound(uint256 startTime) onlyWhitelistAdmin  public {\r\n\t\trequire(!rIDxPlayerRound[rid].isVaild, \"has been running\");\r\n\t\trequire(startTime>(now + 1 hours), \"must be greater than the current time\");\r\n\t\tPlayerRound storage playerRound = rIDxPlayerRound[rid];\r\n\t\tplayerRound.rid = rid;\r\n\t\tplayerRound.start = startTime;\r\n\t\tplayerRound.end = 0;\r\n\t    playerRound.isVaild = true;\r\n\t}\r\n\r\n\r\n    function endRound()   public {\r\n\t\trequire(address(this).balance <= 0 ether, \"contract balance must be lower than 1 ether\");\r\n\t\tPlayerRound storage playerRound = rIDxPlayerRound[rid];\r\n\t\tplayerRound.end = now;\r\n\t    playerRound.isVaild = false;\r\n\t\trid = rid.add(1);\r\n\t    rIDxPlayerRound[rid] = PlayerRound(rid,0,0,false);\r\n\t}\r\n\r\n\tfunction initialize(uint256 start ,uint256 end) onlyWhitelistAdmin public {\r\n        uint256 len = pid;\r\n        if(len <= end){\r\n            end = len;\r\n        }\r\n        superNodeCount = 0;\r\n        for(uint256 i = start; i <= end; i++ ) {\r\n            Player storage player = pIDxPlayer[i];\r\n            player.freezeAmount = 0;\r\n            player.rechargeAmount = 0;\r\n            player.withdrawAmount = 0;\r\n            player.inviteAmonut = 0;\r\n            player.bonusAmount = 0;\r\n            player.dayInviteAmonut = 0;\r\n            player.dayBonusAmount = 0;\r\n            player.level = 0;\r\n            player.nodeLevel = 0;\r\n    \t\tplayer.isSuperNode = false;\r\n\r\n            Invest storage invest = pIDxInvest[i];\r\n            invest.amount = 0;\r\n            invest.regTime = 0;\r\n    \t\tinvest.status = 1;\r\n        }\r\n    }\r\n\r\n\r\n\r\n\tfunction investAward(uint256 start ,uint256 end) onlyWhitelistAdmin public {\r\n        uint256 len = pid;\r\n        if(len <= end){\r\n            end = len;\r\n        }\r\n\r\n        for(uint256 i = start; i <= end; i++ ) {\r\n            Invest storage invest = pIDxInvest[i];\r\n            Player storage player = pIDxPlayer[i];\r\n\r\n            //不同的会员有不同的分红奖励，V1 为 0.5%，V2 为 0.7%，V3 为 1%。\r\n            uint256 memberReward =  getMemberReward(player.level);\r\n            player.dayBonusAmount = memberReward.mul(invest.amount.div(1000) ) ;\r\n            player.bonusAmount =  player.bonusAmount.add(memberReward.mul(invest.amount.div(1000)));\r\n            player.freeAmount = player.freeAmount.add(player.dayBonusAmount);\r\n            player.level =  getMemberLevel(invest.amount);\r\n            player.nodeLevel =  getNodeLevel(invest.amount.add(player.freeAmount));\r\n\r\n            if(invest.status == 1 && ( now >= (invest.regTime.add(4 days)))){\r\n                player.freezeAmount = player.freezeAmount.sub(invest.amount);\r\n                player.freeAmount = player.freeAmount.add(invest.amount)  ;\r\n                player.level =  getMemberLevel(invest.amount);\r\n                player.nodeLevel =  getNodeLevel(invest.amount.add(player.freeAmount));\r\n                invest.status = 2;\r\n            }\r\n            //invest.regTime = invest.regTime.sub(1 days);\r\n        }\r\n    }\r\n\r\n\r\n    function shareAward(uint256 start ,uint256 end) onlyWhitelistAdmin  public {\r\n        uint256 len = pid;\r\n        if(len <= end){\r\n            end = len;\r\n        }\r\n        for(uint256 i = start; i <= end; i++ ) {\r\n            Player memory player = pIDxPlayer[i];\r\n            Invest memory invest = pIDxInvest[i];\r\n            award(player.beInvitedCode, invest.amount,getMemberReward(player.level),player.isSuperNode);\r\n        }\r\n    }\r\n\r\n    function award(string memory beInvitedCode, uint256 money, uint256 memberReward,bool isSuperNode) private {\r\n\t\tstring memory referrer = beInvitedCode;\r\n\t\tfor (uint256 i = 1; i <= 25; i++ ) {\r\n\t\t\tif (compareStr(referrer, \"\")) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tPlayer storage player = pIDxPlayer[pAddrxPid[pCodexAddr[referrer]]] ;\r\n            Invest storage invest =  pIDxInvest[pAddrxPid[pCodexAddr[referrer]]] ;\r\n\t\t\tif (invest.amount.add(player.freeAmount) == 0) {\r\n\t\t\t\treferrer = player.beInvitedCode;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n            uint256 hystrixReward = getHystrixReward(player.nodeLevel);\r\n            bool isSuperReward = false;\r\n            if(isSuperNode==true&&player.isSuperNode==false){\r\n                isSuperReward = true;\r\n            }\r\n            uint256 nodeReward = getNodeReward(player.nodeLevel,i,isSuperReward);\r\n            uint256  basicMoney = 0;\r\n\r\n            if(money <= (invest.amount.add(player.freeAmount))){\r\n                basicMoney = money;\r\n            }else{\r\n                basicMoney = invest.amount.add(player.freeAmount) ;\r\n            }\r\n\r\n            if(memberReward != 0){\r\n                uint256 inviteAmonut =  basicMoney.mul(memberReward).mul(hystrixReward).mul(nodeReward);\r\n                inviteAmonut =  inviteAmonut.div(1000).div(10).div(100);\r\n                player.dayInviteAmonut = player.dayInviteAmonut.add(inviteAmonut);\r\n                player.inviteAmonut = player.inviteAmonut.add(inviteAmonut);\r\n                player.freeAmount = player.freeAmount.add(player.dayInviteAmonut);\r\n                player.level =  getMemberLevel(invest.amount);\r\n                player.nodeLevel =  getNodeLevel(invest.amount.add(player.freeAmount));\r\n            }\r\n\t\t\treferrer = player.beInvitedCode;\r\n\t\t}\r\n\t}\r\n\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"applySuperNode\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_str\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"compareStr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGameInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"getHystrixReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"plyAdd\",\"type\":\"address\"}],\"name\":\"getInvestInfoPlyAdd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"plyId\",\"type\":\"uint256\"}],\"name\":\"getInvestInfoPlyId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getMemberLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"getMemberReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getNodeLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nodeLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"superReward\",\"type\":\"bool\"}],\"name\":\"getNodeReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"plyAdd\",\"type\":\"address\"}],\"name\":\"getPlayerInfoPlyAdd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"plyId\",\"type\":\"uint256\"}],\"name\":\"getPlayerInfoPlyId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRoundInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"investAward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"inviteCode\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"beInvitedCode\",\"type\":\"string\"}],\"name\":\"investGame\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"code\",\"type\":\"string\"}],\"name\":\"isCodeUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelistAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"plyId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freezeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rechargeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inviteAmonut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dayInviteAmonut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dayBonusAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"setPlayerInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"shareAward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"startRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"password\",\"type\":\"string\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"whitelistAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withDraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Game","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://991e4d1a026b8cbf7fa7fe5fb0a425121a8a6b0066dcbd3bd54d6979517b7420"}]}