{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity \"0.5.10\";\r\n\r\n/* =========================================================================================================*/\r\n// ----------------------------------------------------------------------------\r\n// Bit-Bet (BBT) token contract\r\n//\r\n// Total supply: 10M\r\n// Decimals    : 18\r\n// ----------------------------------------------------------------------------\r\n// Coding and Development by Crypterx.com\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n    \r\n    function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\r\n        uint256 c = add(a,m);\r\n        uint256 d = sub(c,1);\r\n        return div(mul(d,m),m);\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20 Token, with the addition of symbol, name and decimals and assisted\r\n// token transfers\r\n// ----------------------------------------------------------------------------\r\ncontract BBT is ERC20Interface, Owned {\r\n    using SafeMath for uint;\r\n    \r\n    string public symbol = \"BBT\";\r\n    string public  name = \"Bit-Bet\";\r\n    uint8 public decimals = 18;\r\n    uint internal _totalSupply;\r\n    uint256 internal extras = 100;\r\n    \r\n    address public donation;\r\n    address public distribution;\r\n    \r\n    mapping(address => uint) public balances;\r\n    mapping(address => mapping(address => uint)) public allowed;\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    constructor(address _owner, address _donation, address _distribution) public {\r\n        _mint(_owner, 10e6 * 10**uint(decimals));\r\n        owner = _owner;\r\n        distribution = _distribution;\r\n        donation = _donation;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Don't Accepts ETH\r\n    // ------------------------------------------------------------------------\r\n    function () external payable {\r\n        revert();\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Calculates onePercent of the uint256 amount sent\r\n    // ------------------------------------------------------------------------\r\n    function onePercent(uint256 _tokens) internal view returns (uint256){\r\n        uint roundValue = _tokens.ceil(extras);\r\n        uint onePercentofTokens = roundValue.mul(extras).div(extras * 10**uint(2));\r\n        return onePercentofTokens;\r\n    }\r\n     \r\n    // ------------------------------------------------------------------------\r\n    // @dev Destroys `amount` tokens from `account`, reducing the total supply.\r\n    // Emits a {Transfer} event with `to` set to the zero address.\r\n    //\r\n    // Requirements\r\n    // - `account` cannot be the zero address.\r\n    // - `account` must have at least `amount` tokens.\r\n    // ------------------------------------------------------------------------\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n     \r\n    // ------------------------------------------------------------------------\r\n    // @dev Creates `amount` tokens and assigns them to `account`, increasing the total supply.\r\n    // Emits a {Transfer} event with `from` set to the zero address.\r\n    //\r\n    // Requirements\r\n    // - `to` cannot be the zero address.\r\n    // ------------------------------------------------------------------------\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        balances[account] = balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // @dev keep 'amount' of tokens into 'to' wallet\r\n    // ------------------------------------------------------------------------\r\n    function _transfer(address from, address to, uint256 amount) internal {\r\n        balances[from] =  balances[from].sub(amount);\r\n        balances[to] = balances[to].add(amount);\r\n        emit Transfer(from, address(to), amount);\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Get the total Supply\r\n    // ------------------------------------------------------------------------\r\n    function totalSupply() public view returns (uint){\r\n       return _totalSupply;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Get the token balance for account `tokenOwner`\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from token owner's account to `to` account\r\n    // - Owner's account must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // Deductions apply\r\n    // keep 1% of the sent amount for donation\r\n    // keep 1% for token holders to send them later\r\n    // burn 1% of the sent amount of tokens\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n        // prevent transfer to 0x0, use burn instead\r\n        require(to != address(0));\r\n        require(balances[msg.sender] >= tokens );\r\n        \r\n        __transfer(to, msg.sender, tokens);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // internal function applies Deductions upon transfer function\r\n    // ------------------------------------------------------------------------\r\n    function __transfer(address to, address from, uint tokens) internal {\r\n        // calculate 1% of the tokens\r\n        uint256 onePercentofTokens = onePercent(tokens);\r\n        \r\n        // burn 1% of tokens\r\n        _burn(from, onePercentofTokens);\r\n        \r\n        // transfer 1% to donation wallet\r\n        _transfer(from, donation, onePercentofTokens);\r\n        \r\n        // distribute 1% to token holders\r\n        _transfer(from, distribution, onePercentofTokens);\r\n        \r\n        balances[from] = balances[from].sub(tokens.sub(onePercentofTokens.mul(3)));\r\n        \r\n        // transfer rest of the tokens to the receipient\r\n        require(balances[to] + tokens.sub(onePercentofTokens.mul(3)) >= balances[to]);\r\n        \r\n        // Transfer the tokens to \"to\" address\r\n        balances[to] = balances[to].add(tokens.sub(onePercentofTokens.mul(3)));\r\n        \r\n        // emit Transfer event to \"to\" address\r\n        emit Transfer(from,to,tokens.sub(onePercentofTokens.mul(3)));\r\n    }\r\n    \r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Transfer `tokens` from the `from` account to the `to` account\r\n    // \r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n    // for spending from the `from` account and\r\n    // - From account must have sufficient balance to transfer\r\n    // - Spender must have sufficient allowance to transfer\r\n    // - 0 value transfers are allowed\r\n    // Deductions apply\r\n    // keep 1% of the sent amount for donation\r\n    // keep 1% for token holders to send them later\r\n    // burn 1% of the sent amount of tokens\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success){\r\n        require(from != address(0));\r\n        require(to != address(0));\r\n        require(tokens <= allowed[from][msg.sender]); //check allowance\r\n        require(balances[from] >= tokens); // check if sufficient balance exist or not\r\n        \r\n        __transfer(to, from, tokens);\r\n        \r\n        \r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        return true;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account\r\n    // ------------------------------------------------------------------------\r\n    function approve(address spender, uint tokens) public returns (bool success){\r\n        require(spender != address(0));\r\n        require(tokens <= balances[msg.sender]);\r\n        require(tokens >= 0);\r\n        require(allowed[msg.sender][spender] == 0 || tokens == 0);\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender,spender,tokens);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ------------------------------------------------------------------------\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distribution\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"donation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_donation\",\"type\":\"address\"},{\"name\":\"_distribution\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"BBT","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000033d6e5010408a5822c98326dca7f88b65ed2ec5500000000000000000000000017c2220b055bfe300a34f5933e5a0332b9d5050700000000000000000000000059a0cd6187da96bfb66d1a2e7621f93bedeef115","Library":"","SwarmSource":"bzzr://0cf0fd4bfd3de3f5ae6a3a994f5274402442c71f2897fda825be46a6805215e7"}]}