{"status":"1","message":"OK","result":[{"SourceCode":"{\"CoinExchangeRates.sol\":{\"content\":\"pragma solidity ^0.5.6;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./IManagement.sol\\\";\\nimport \\\"./Constants.sol\\\";\\nimport \\\"./ICoinExchangeRates.sol\\\";\\n\\n\\n/*solium-disable-next-line*/\\ncontract CoinExchangeRates is ICoinExchangeRates, IManagement, Constants, Ownable {\\n    using SafeMath for uint256;\\n\\n    uint256 private blobCoinPrice_;\\n\\n    address[] private permittedCoinsAddresses_;\\n\\n    mapping(address =\\u003e uint256) public stableCoinsPrices;\\n    mapping(address =\\u003e uint256) public stableCoinsDecimals;\\n    mapping(address =\\u003e uint256) public priceUpdatedAt;\\n    mapping(address =\\u003e uint256) public stableCoinsToProportion;\\n\\n    mapping(address =\\u003e uint256) public permittedTokensToId;\\n\\n    modifier requirePermission(uint256 _permissionBit) {\\n        require(\\n            hasPermission(msg.sender, _permissionBit),\\n            ERROR_ACCESS_DENIED\\n        );\\n        _;\\n    }\\n\\n    event PriceUpdated(uint256 newPrice);\\n\\n    constructor(uint256 _blobCoinPrice)\\n    public\\n    {\\n        blobCoinPrice_ = _blobCoinPrice;\\n        permittedCoinsAddresses_.push(address(0));\\n    }\\n\\n    // 5 00000\\n    function setBlobCoinPrice(uint256 _blobCoinPrice)\\n    public\\n    requirePermission(CAN_REGISTER_COINS)\\n    {\\n        blobCoinPrice_ = _blobCoinPrice;\\n        emit PriceUpdated(_blobCoinPrice);\\n    }\\n\\n    function setCoinsPricesInUSD(\\n        address[] memory _coinsAddresses,\\n        uint256[] memory _prices\\n    )\\n    public\\n    requirePermission(CAN_REGISTER_COINS)\\n    returns(bool)\\n    {\\n        require(\\n            _coinsAddresses.length == _prices.length,\\n            ERROR_WRONG_AMOUNT\\n        );\\n\\n        for (uint256 i = 0; i \\u003c _coinsAddresses.length; i++) {\\n            setCoinPrice(_coinsAddresses[i], _prices[i]);\\n        }\\n        return true;\\n    }\\n\\n    function setCoinsCoverageProportion(\\n        address[] memory _coinsAddresses,\\n        uint256[] memory _percentageProportion\\n    )\\n    public\\n    requirePermission(CAN_REGISTER_COINS)\\n    returns(bool)\\n    {\\n        require(\\n            _coinsAddresses.length == _percentageProportion.length,\\n            ERROR_WRONG_AMOUNT\\n        );\\n        uint256 totalProportion;\\n        for (uint256 i = 0; i \\u003c _coinsAddresses.length; i++) {\\n            require(\\n                hasPermission(_coinsAddresses[i], PERMITTED_COINS),\\n                ERROR_ACCESS_DENIED\\n            );\\n            stableCoinsToProportion[\\n            _coinsAddresses[i]\\n            ] = _percentageProportion[i];\\n            totalProportion = totalProportion.add(_percentageProportion[i]);\\n        }\\n        require(totalProportion == PERCENTS_ABS_MAX, ERROR_WRONG_AMOUNT);\\n        return true;\\n    }\\n\\n    function calculateUSDByBlobs(uint256 _blobsAmount)\\n    public\\n    view\\n    returns(uint256)\\n    {\\n        uint256 coefficientWithoutFee = PERCENTS_ABS_MAX\\n        .sub(getFeePercentage());\\n\\n        return _blobsAmount\\n        .mul(blobCoinPrice())\\n        .mul(coefficientWithoutFee)\\n        .div(PERCENTS_ABS_MAX);\\n    }\\n\\n    function calculateUsdByCoin(\\n        address _stableCoinAddress,\\n        uint256 _coinsAmount\\n    )\\n    public\\n    view\\n    returns (uint256)\\n    {\\n        uint256 coinDecimals = stableCoinsDecimals[_stableCoinAddress];\\n        uint256 coinsAmount = _coinsAmount;\\n        if (coinDecimals \\u003c 18) {\\n            coinsAmount = _coinsAmount.mul(1e18).div(10 ** coinDecimals);\\n        }\\n        return getCoinPrice(_stableCoinAddress).mul(coinsAmount);\\n    }\\n\\n    function calculateCoinsAmountByUSD(\\n        uint256 _usdAmount\\n    )\\n    public\\n    view\\n    returns (address[] memory, uint256[] memory)\\n    {\\n        uint256[] memory coinsAmount = new uint[](\\n            permittedCoinsAddresses_.length\\n        );\\n        for (uint256 i = 1; i \\u003c permittedCoinsAddresses_.length; i++) {\\n            coinsAmount[i] = _usdAmount\\n            .mul(10**stableCoinsDecimals[permittedCoinsAddresses_[i]])\\n            .mul(stableCoinsToProportion[permittedCoinsAddresses_[i]])\\n            .div(getCoinPrice(permittedCoinsAddresses_[i]))\\n            .div(PERCENTS_ABS_MAX);\\n        }\\n        return (permittedCoinsAddresses_, coinsAmount);\\n    }\\n\\n    function calculateBlobsAmount(\\n        address _stableCoinAddress,\\n        uint256 _coinsAmount\\n    )\\n    public\\n    view\\n    returns (uint256)\\n    {\\n\\n        return calculateUsdByCoin(_stableCoinAddress, _coinsAmount)\\n        .div(blobCoinPrice());\\n    }\\n\\n    function coinPriceUpdatedAt(address _stableCoinAddress)\\n    public\\n    view\\n    returns(uint256)\\n    {\\n        return priceUpdatedAt[_stableCoinAddress];\\n    }\\n\\n    function getCoinPrice(address _stableCoinAddress)\\n    public\\n    view\\n    returns(uint256)\\n    {\\n        return stableCoinsPrices[_stableCoinAddress];\\n    }\\n\\n    function permittedCoinsAddresses()\\n    public\\n    view\\n    returns (address[] memory)\\n    {\\n        return permittedCoinsAddresses_;\\n    }\\n\\n    function blobCoinPrice()\\n    public\\n    view\\n    returns (uint256)\\n    {\\n        return blobCoinPrice_;\\n    }\\n\\n    function setCoinPrice(address _stableCoinAddress, uint256 _price)\\n    internal\\n    {\\n        require(\\n            hasPermission(_stableCoinAddress, PERMITTED_COINS),\\n            ERROR_ACCESS_DENIED\\n        );\\n        stableCoinsPrices[_stableCoinAddress] = _price;\\n        priceUpdatedAt[_stableCoinAddress] = block.timestamp;\\n    }\\n\\n    function internalSetPermissionsForCoins(\\n        address _address,\\n        bool _value,\\n        uint256 _decimals\\n    )\\n    internal\\n    {\\n        stableCoinsDecimals[_address] = _decimals;\\n        if (true == _value) {\\n            require(permittedTokensToId[_address] == 0, ERROR_COIN_REGISTERED);\\n            permittedTokensToId[_address] = permittedCoinsAddresses_.length;\\n            permittedCoinsAddresses_.push(_address);\\n        }\\n        if (false == _value) {\\n            uint256 coinIndex = permittedTokensToId[_address];\\n            require(coinIndex != 0, ERROR_NO_CONTRACT);\\n            uint256 lastCoinIndex = permittedCoinsAddresses_.length.sub(1);\\n            permittedCoinsAddresses_[coinIndex] = permittedCoinsAddresses_[\\n            lastCoinIndex\\n            ];\\n            permittedTokensToId[permittedCoinsAddresses_[coinIndex]] = coinIndex;\\n            delete permittedCoinsAddresses_[lastCoinIndex];\\n            permittedTokensToId[_address] = 0;\\n            permittedCoinsAddresses_.length = permittedCoinsAddresses_.length.sub(1);\\n        }\\n    }\\n\\n    function hasPermission(\\n        address _subject,\\n        uint256 _permissionBit\\n    )\\n    internal\\n    view\\n    returns (bool)\\n    {\\n        return permissions(_subject, _permissionBit);\\n    }\\n}\\n\"},\"Constants.sol\":{\"content\":\"pragma solidity ^0.5.7;\\n\\n\\ncontract Constants {\\n\\n    // Permissions constants\\n    uint256 public constant CAN_EXCHANGE_COINS = 1;\\n    uint256 public constant CAN_REGISTER_COINS = 2;\\n    uint256 public constant CAN_MINT_COINS = 3;\\n    uint256 public constant CAN_BURN_COINS = 4;\\n    uint256 public constant CAN_LOCK_COINS = 5;\\n    uint256 public constant PERMITTED_COINS = 6;\\n\\n    // Contract Registry keys\\n\\n    //public block-chain\\n    uint256 public constant CONTRACT_TOKEN = 1;\\n    uint256 public constant CONTRACT_EXCHANGE = 2;\\n    uint256 public constant CONTRACT_WITHDRAW = 3;\\n    uint256 public constant COIN_HOLDER = 4;\\n\\n\\n\\n    uint256 public constant PERCENTS_ABS_MAX = 1e4;\\n    uint256 public constant USD_PRECISION = 1e5;\\n\\n    string public constant ERROR_ACCESS_DENIED = \\\"ERROR_ACCESS_DENIED\\\";\\n    string public constant ERROR_NO_CONTRACT = \\\"ERROR_NO_CONTRACT\\\";\\n    string public constant ERROR_NOT_AVAILABLE = \\\"ERROR_NOT_AVAILABLE\\\";\\n    string public constant ERROR_WRONG_AMOUNT = \\\"ERROR_WRONG_AMOUNT\\\";\\n    /*solium-disable-next-line*/\\n    string public constant ERROR_NOT_PERMITTED_COIN = \\\"ERROR_NOT_PERMITTED_COIN\\\";\\n    /*solium-disable-next-line*/\\n    string public constant ERROR_BALANCE_IS_NOT_ALLOWED = \\\"BALANCE_IS_NOT_ALLOWED\\\";\\n    string public constant ERROR_COIN_REGISTERED = \\\"ERROR_COIN_REGISTERED\\\";\\n\\n    // Campaign Sates\\n    enum RequestState{\\n        Pending,\\n        PaidPartially,\\n        FullyPaid,\\n        Rejected,\\n        Refunded,\\n        Undefined,\\n        Canceled\\n    }\\n}\\n\\n\"},\"ICoinExchangeRates.sol\":{\"content\":\"pragma solidity ^0.5.6;\\n\\n\\ncontract ICoinExchangeRates {\\n\\n    /**\\n    * @dev Function to set CoinsPrices In USD\\n    * @param _coinsAddresses The array of addresses of stablecoins.\\n    * @param _prices The array of prices for stablecoins.\\n    * @return A boolean that indicates if the operation was successful.\\n    */\\n    function setCoinsPricesInUSD(\\n        address[] memory _coinsAddresses,\\n        uint256[] memory _prices\\n    )\\n    public\\n    returns(bool);\\n\\n    /**\\n    * @dev Function to set backed up proportions for permitted coins\\n    * @param _coinsAddresses The array of addresses of stablecoins.\\n    * @param _percentageProportion percents proportions\\n    * @return A boolean that indicates if the operation was successful.\\n    */\\n    function setCoinsCoverageProportion(\\n        address[] memory _coinsAddresses,\\n        uint256[] memory _percentageProportion\\n    )\\n    public\\n    returns(bool);\\n\\n    /**\\n       * @dev sets or unset permissions to make some actions\\n       * @param _address address stablecoin which is allowed/disalwed\\n       * @param _decimals adecimals value of stablecoin\\n       * @param _value bool sets/unsets _permission\\n    */\\n    function setPermissionsForCoins(\\n        address _address,\\n        bool _value,\\n        uint256 _decimals\\n    )\\n    public;\\n\\n    /**\\n    * @dev Function to get USD amount from converting blobs\\n    * @param _blobsAmount the amount of blobs to be converted\\n    * @return A number of coins you can receive by converting blobs\\n    */\\n    function calculateUSDByBlobs(uint256 _blobsAmount)\\n    public\\n    view\\n    returns(uint256);\\n\\n    /**\\n    * @dev Function to get amount of each stable coin based on proportion and price\\n    * which user can receive by blobs dissolveing\\n    * @param _usdAmount the amount to get stable coins\\n    * @return two arrays: stable coins and appropriate balances\\n    */\\n    function calculateCoinsAmountByUSD(\\n        uint256 _usdAmount\\n    )\\n    public\\n    view\\n    returns (address[] memory, uint256[] memory);\\n\\n    /**\\n    * @dev Function to get amount of usd by converting stable coins\\n    * @param _stableCoinAddress stable coin address\\n    * @param _coinsAmount amount of coins to exchange\\n    * @return A usd amount you can receive by exchanging coin\\n    */\\n    function calculateUsdByCoin(\\n        address _stableCoinAddress,\\n        uint256 _coinsAmount\\n    )\\n    public\\n    view\\n    returns(uint256);\\n\\n    /**\\n    * @dev Function to get amount of blobs by converting stable coins\\n    * @param _stableCoinAddress stable coin address\\n    * @param _coinsAmount amount of coins to exchange\\n    * @return A usd amount you can receive by exchanging coin\\n    */\\n    function calculateBlobsAmount(\\n        address _stableCoinAddress,\\n        uint256 _coinsAmount\\n    )\\n    public\\n    view\\n    returns (uint256);\\n\\n    /**\\n    * @dev Function to get timestamp of last price update\\n    * @param _stableCoinAddress stable coin address\\n    * @return A timestamp of last update\\n    */\\n    function coinPriceUpdatedAt(address _stableCoinAddress)\\n    public\\n    view\\n    returns(uint256);\\n\\n    /**\\n    * @dev Function to get price of stablecoin\\n    * @param _stableCoinAddress stable coin address\\n    * @return A price in usd\\n    */\\n    function getCoinPrice(address _stableCoinAddress)\\n    public\\n    view\\n    returns(uint256);\\n\\n    /**\\n    * @dev Function to return permitted coins List\\n    * @return An array of coins addresses\\n    */\\n    function permittedCoinsAddresses()\\n    public\\n    view\\n    returns (address[] memory);\\n\\n    /**\\n    * @dev Function to get price of blob coin\\n    * @return A price in usd\\n    */\\n    function blobCoinPrice()\\n    public\\n    view\\n    returns (uint256);\\n\\n    /**\\n    * @dev Function to set price in usd for exact stable coin\\n    * @param _stableCoinAddress stable coin address\\n    * @param _price coin price in usd\\n    */\\n    function setCoinPrice(address _stableCoinAddress, uint256 _price) internal;\\n\\n}\\n\"},\"IManagement.sol\":{\"content\":\"pragma solidity ^0.5.7;\\n\\n\\ncontract IManagement {\\n\\n    /**\\n        * @dev sets or unset permissions to make some actions\\n        * @param _address address Address which  is allowed/disallowed to run function\\n        * @param _permission uint256 constant value describes one of the permission\\n        * @param _value bool sets/unsets _permission\\n    */\\n    function setPermission(\\n        address _address,\\n        uint256 _permission,\\n        bool _value\\n    )\\n    public;\\n\\n    /**\\n      * @dev register contract with ID\\n      * @param _key uint256 constant value, indicates the contract\\n      * @param _target address Address of the contract\\n    */\\n    function registerContract(uint256 _key, address _target) public;\\n\\n    /**\\n     * @dev updates the percentage fee amount for dissolve request\\n     * @param _valueInPercentage uint256 fee amount which  should receive Platform per each dissolve\\n    */\\n    function setFeePercentage(\\n        uint256 _valueInPercentage\\n    )\\n    public;\\n\\n    /**\\n      * @dev gets the fee percentage value for dissolve\\n      * @return uint256 the fee percentage value for dissolve\\n    */\\n    function getFeePercentage()\\n    public\\n    view\\n    returns (uint256);\\n\\n    /**\\n      * @dev checks if permissions is specified for exact address\\n      * @return bool identifier of permissions\\n    */\\n    function permissions(address _subject, uint256 _permissionBit)\\n    public\\n    view\\n    returns (bool);\\n}\\n\"},\"Management.sol\":{\"content\":\"pragma solidity ^0.5.7;\\n\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./IManagement.sol\\\";\\nimport \\\"./CoinExchangeRates.sol\\\";\\nimport \\\"./Constants.sol\\\";\\n\\ncontract Management is CoinExchangeRates{\\n\\n    uint256 private feeValueInPercentage_;\\n\\n    mapping(address =\\u003e mapping(uint256 =\\u003e bool)) private permissions_;\\n\\n    mapping(uint256 =\\u003e address) public contractRegistry;\\n\\n    event PermissionsSet(address subject, uint256 permission, bool value);\\n    event ContractRegistered(uint256 key, address target);\\n    event FeeUpdated(uint256 valueInPercentage);\\n\\n    constructor(uint256 _blobCoinPrice, uint256 _feeInPercentage)\\n    public\\n    CoinExchangeRates(_blobCoinPrice)\\n    {\\n        feeValueInPercentage_ = _feeInPercentage;\\n        permissions_[msg.sender][CAN_EXCHANGE_COINS] = true;\\n        permissions_[msg.sender][CAN_REGISTER_COINS] = true;\\n        permissions_[msg.sender][CAN_MINT_COINS] = true;\\n        permissions_[msg.sender][CAN_BURN_COINS] = true;\\n        permissions_[msg.sender][CAN_LOCK_COINS] = true;\\n    }\\n\\n    function setPermission(\\n        address _address,\\n        uint256 _permission,\\n        bool _value\\n    )\\n    public\\n    onlyOwner\\n    {\\n        require(\\n            PERMITTED_COINS != _permission,\\n            ERROR_ACCESS_DENIED\\n        );\\n        permissions_[_address][_permission] = _value;\\n        emit PermissionsSet(_address, _permission, _value);\\n    }\\n\\n    function setPermissionsForCoins(\\n        address _address,\\n        bool _value,\\n        uint256 _decimals\\n    )\\n    public\\n    onlyOwner\\n    {\\n        permissions_[_address][PERMITTED_COINS] = _value;\\n        internalSetPermissionsForCoins(_address, _value, _decimals);\\n        emit PermissionsSet(_address, PERMITTED_COINS, _value);\\n    }\\n\\n    function registerContract(uint256 _key, address _target) public onlyOwner {\\n        contractRegistry[_key] = _target;\\n        emit ContractRegistered(_key, _target);\\n    }\\n\\n    function setFeePercentage(\\n        uint256 _valueInPercentage\\n    )\\n    public\\n    onlyOwner\\n    {\\n        require(_valueInPercentage \\u003c= PERCENTS_ABS_MAX, ERROR_WRONG_AMOUNT);\\n        feeValueInPercentage_ = _valueInPercentage;\\n        emit FeeUpdated(_valueInPercentage);\\n    }\\n\\n    function getFeePercentage()\\n    public\\n    view\\n    returns (uint256)\\n    {\\n        return feeValueInPercentage_;\\n    }\\n\\n    function coinsHolder()\\n    public\\n    view\\n    returns (address)\\n    {\\n        if (contractRegistry[COIN_HOLDER] != address(0)) {\\n            return contractRegistry[COIN_HOLDER];\\n        }\\n        return owner();\\n    }\\n\\n    function permissions(address _subject, uint256 _permissionBit)\\n    public\\n    view\\n    returns (bool)\\n    {\\n        return permissions_[_subject][_permissionBit];\\n    }\\n}\\n\"},\"Ownable.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n     * account.\\n     */\\n    constructor () internal {\\n        _owner = msg.sender;\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /**\\n     * @return the address of the owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner());\\n        _;\\n    }\\n\\n    /**\\n     * @return true if `msg.sender` is the owner of the contract.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return msg.sender == _owner;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to relinquish control of the contract.\\n     * @notice Renouncing to ownership will leave the contract without an owner.\\n     * It will not be possible to call the functions with the `onlyOwner`\\n     * modifier anymore.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers control of the contract to a newOwner.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0));\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @title SafeMath\\n * @dev Unsigned math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n    /**\\n    * @dev Multiplies two unsigned integers, reverts on overflow.\\n    */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\n    */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b \\u003e 0);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003c= a);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Adds two unsigned integers, reverts on overflow.\\n    */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\n    * reverts when dividing by zero.\\n    */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0);\\n        return a % b;\\n    }\\n}\\n\"}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_WITHDRAW\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERMITTED_COINS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFeePercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blobCoinPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"stableCoinsToProportion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"bool\"},{\"name\":\"_decimals\",\"type\":\"uint256\"}],\"name\":\"setPermissionsForCoins\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_BURN_COINS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_LOCK_COINS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_coinsAddresses\",\"type\":\"address[]\"},{\"name\":\"_percentageProportion\",\"type\":\"uint256[]\"}],\"name\":\"setCoinsCoverageProportion\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_REGISTER_COINS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_usdAmount\",\"type\":\"uint256\"}],\"name\":\"calculateCoinsAmountByUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"USD_PRECISION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coinsHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERROR_BALANCE_IS_NOT_ALLOWED\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_MINT_COINS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_stableCoinAddress\",\"type\":\"address\"},{\"name\":\"_coinsAmount\",\"type\":\"uint256\"}],\"name\":\"calculateUsdByCoin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERROR_NOT_AVAILABLE\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_stableCoinAddress\",\"type\":\"address\"},{\"name\":\"_coinsAmount\",\"type\":\"uint256\"}],\"name\":\"calculateBlobsAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_stableCoinAddress\",\"type\":\"address\"}],\"name\":\"coinPriceUpdatedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"priceUpdatedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_EXCHANGE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_valueInPercentage\",\"type\":\"uint256\"}],\"name\":\"setFeePercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COIN_HOLDER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_EXCHANGE_COINS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contractRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERROR_COIN_REGISTERED\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"permittedCoinsAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_permission\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERROR_WRONG_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_coinsAddresses\",\"type\":\"address[]\"},{\"name\":\"_prices\",\"type\":\"uint256[]\"}],\"name\":\"setCoinsPricesInUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERCENTS_ABS_MAX\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"permittedTokensToId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERROR_NOT_PERMITTED_COIN\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"stableCoinsDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_stableCoinAddress\",\"type\":\"address\"}],\"name\":\"getCoinPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"stableCoinsPrices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERROR_NO_CONTRACT\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_subject\",\"type\":\"address\"},{\"name\":\"_permissionBit\",\"type\":\"uint256\"}],\"name\":\"permissions\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blobCoinPrice\",\"type\":\"uint256\"}],\"name\":\"setBlobCoinPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_blobsAmount\",\"type\":\"uint256\"}],\"name\":\"calculateUSDByBlobs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"uint256\"},{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"registerContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_TOKEN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERROR_ACCESS_DENIED\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_blobCoinPrice\",\"type\":\"uint256\"},{\"name\":\"_feeInPercentage\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"subject\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"permission\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"PermissionsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"key\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"}],\"name\":\"ContractRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"valueInPercentage\",\"type\":\"uint256\"}],\"name\":\"FeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Management","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000186a00000000000000000000000000000000000000000000000000000000000030d40","Library":"","SwarmSource":"bzzr://3339537ac1d71afcf017a83657186972d9225352f2228e4a59028f0c267fe035"}]}