{"status":"1","message":"OK","result":[{"SourceCode":"/**\nAuthor: Authereum Labs, Inc.\n*/\n\npragma solidity 0.5.12;\n\n\ncontract Owned {\n\n    // The owner\n    address public owner;\n\n    event OwnerChanged(address indexed _newOwner);\n\n    /// @dev Throws if the sender is not the owner\n    modifier onlyOwner {\n        require(msg.sender == owner, \"Must be owner\");\n        _;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /// @dev Return the ownership status of an address\n    /// @param _potentialOwner Address being checked\n    /// @return True if the _potentialOwner is the owner\n    function isOwner(address _potentialOwner) external view returns (bool) {\n        return owner == _potentialOwner;\n    }\n\n    /// @dev Lets the owner transfer ownership of the contract to a new owner\n    /// @param _newOwner The new owner\n    function changeOwner(address _newOwner) external onlyOwner {\n        require(_newOwner != address(0), \"Address must not be null\");\n        owner = _newOwner;\n        emit OwnerChanged(_newOwner);\n    }\n}\n\ncontract Managed is Owned {\n\n    // The managers\n    mapping (address => bool) public managers;\n\n    /// @dev Throws if the sender is not a manager\n    modifier onlyManager {\n        require(managers[msg.sender] == true, \"Must be manager\");\n        _;\n    }\n\n    event ManagerAdded(address indexed _manager);\n    event ManagerRevoked(address indexed _manager);\n\n    /// @dev Adds a manager\n    /// @param _manager The address of the manager\n    function addManager(address _manager) external onlyOwner {\n        require(_manager != address(0), \"Address must not be null\");\n        if(managers[_manager] == false) {\n            managers[_manager] = true;\n            emit ManagerAdded(_manager);\n        }\n    }\n\n    /// @dev Revokes a manager\n    /// @param _manager The address of the manager\n    function revokeManager(address _manager) external onlyOwner {\n        require(managers[_manager] == true, \"Target must be an existing manager\");\n        delete managers[_manager];\n        emit ManagerRevoked(_manager);\n    }\n}\n\ncontract EnsRegistry {\n\n    struct Record {\n        address owner;\n        address resolver;\n        uint64 ttl;\n    }\n\n    mapping(bytes32=>Record) records;\n\n    // Logged when the owner of a node assigns a new owner to a subnode.\n    event NewOwner(bytes32 indexed _node, bytes32 indexed _label, address _owner);\n\n    // Logged when the owner of a node transfers ownership to a new account.\n    event Transfer(bytes32 indexed _node, address _owner);\n\n    // Logged when the resolver for a node changes.\n    event NewResolver(bytes32 indexed _node, address _resolver);\n\n    // Logged when the TTL of a node changes\n    event NewTTL(bytes32 indexed _node, uint64 _ttl);\n\n    // Permits modifications only by the owner of the specified node.\n    modifier only_owner(bytes32 _node) {\n        require(records[_node].owner == msg.sender, \"ENSTest: this method needs to be called by the owner of the node\");\n        _;\n    }\n\n    /**\n     * Constructs a new ENS registrar.\n     */\n    constructor() public {\n        records[bytes32(0)].owner = msg.sender;\n    }\n\n    /**\n     * Returns the address that owns the specified node.\n     */\n    function owner(bytes32 _node) public view returns (address) {\n        return records[_node].owner;\n    }\n\n    /**\n     * Returns the address of the resolver for the specified node.\n     */\n    function resolver(bytes32 _node) public view returns (address) {\n        return records[_node].resolver;\n    }\n\n    /**\n     * Returns the TTL of a node, and any records associated with it.\n     */\n    function ttl(bytes32 _node) public view returns (uint64) {\n        return records[_node].ttl;\n    }\n\n    /**\n     * Transfers ownership of a node to a new address. May only be called by the current\n     * owner of the node.\n     * @param _node The node to transfer ownership of.\n     * @param _owner The address of the new owner.\n     */\n    function setOwner(bytes32 _node, address _owner) public only_owner(_node) {\n        emit Transfer(_node, _owner);\n        records[_node].owner = _owner;\n    }\n\n    /**\n     * Transfers ownership of a subnode sha3(node, label) to a new address. May only be\n     * called by the owner of the parent node.\n     * @param _node The parent node.\n     * @param _label The hash of the label specifying the subnode.\n     * @param _owner The address of the new owner.\n     */\n    function setSubnodeOwner(bytes32 _node, bytes32 _label, address _owner) public only_owner(_node) {\n        bytes32 subnode = keccak256(abi.encodePacked(_node, _label));\n        emit NewOwner(_node, _label, _owner);\n        records[subnode].owner = _owner;\n    }\n\n    /**\n     * Sets the resolver address for the specified node.\n     * @param _node The node to update.\n     * @param _resolver The address of the resolver.\n     */\n    function setResolver(bytes32 _node, address _resolver) public only_owner(_node) {\n        emit NewResolver(_node, _resolver);\n        records[_node].resolver = _resolver;\n    }\n\n    /**\n     * Sets the TTL for the specified node.\n     * @param _node The node to update.\n     * @param _ttl The TTL in seconds.\n     */\n    function setTTL(bytes32 _node, uint64 _ttl) public only_owner(_node) {\n        emit NewTTL(_node, _ttl);\n        records[_node].ttl = _ttl;\n    }\n}\n\ncontract EnsResolver {\n    function setName(bytes32 _node, string calldata _name) external {}\n}\n\ncontract EnsReverseRegistrar {\n\n    string constant public ensReverseRegistrarVersion = \"2019102500\";\n\n   // namehash('addr.reverse')\n    bytes32 constant ADDR_REVERSE_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\n\n    EnsRegistry public ens;\n    EnsResolver public defaultResolver;\n\n    /**\n     * @dev Constructor\n     * @param ensAddr The address of the ENS registry.\n     * @param resolverAddr The address of the default reverse resolver.\n     */\n    constructor(address ensAddr, address resolverAddr) public {\n        ens = EnsRegistry(ensAddr);\n        defaultResolver = EnsResolver(resolverAddr);\n    }\n\n    /**\n     * @dev Transfers ownership of the reverse ENS record associated with the\n     *      calling account.\n     * @param owner The address to set as the owner of the reverse record in ENS.\n     * @return The ENS node hash of the reverse record.\n     */\n    function claim(address owner) public returns (bytes32) {\n        return claimWithResolver(owner, address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the reverse ENS record associated with the\n     *      calling account.\n     * @param owner The address to set as the owner of the reverse record in ENS.\n     * @param resolver The address of the resolver to set; 0 to leave unchanged.\n     * @return The ENS node hash of the reverse record.\n     */\n    function claimWithResolver(address owner, address resolver) public returns (bytes32) {\n        bytes32 label = sha3HexAddress(msg.sender);\n        bytes32 node = keccak256(abi.encodePacked(ADDR_REVERSE_NODE, label));\n        address currentOwner = ens.owner(node);\n\n        // Update the resolver if required\n        if(resolver != address(0) && resolver != address(ens.resolver(node))) {\n            // Transfer the name to us first if it's not already\n            if(currentOwner != address(this)) {\n                ens.setSubnodeOwner(ADDR_REVERSE_NODE, label, address(this));\n                currentOwner = address(this);\n            }\n            ens.setResolver(node, resolver);\n        }\n\n        // Update the owner if required\n        if(currentOwner != owner) {\n            ens.setSubnodeOwner(ADDR_REVERSE_NODE, label, owner);\n        }\n\n        return node;\n    }\n\n    /**\n     * @dev Sets the `name()` record for the reverse ENS record associated with\n     * the calling account. First updates the resolver to the default reverse\n     * resolver if necessary.\n     * @param name The name to set for this address.\n     * @return The ENS node hash of the reverse record.\n     */\n    function setName(string memory name) public returns (bytes32 node) {\n        node = claimWithResolver(address(this), address(defaultResolver));\n        defaultResolver.setName(node, name);\n        return node;\n    }\n\n    /**\n     * @dev Returns the node hash for a given account's reverse records.\n     * @param addr The address to hash\n     * @return The ENS node hash.\n     */\n    function node(address addr) public returns (bytes32 ret) {\n        return keccak256(abi.encodePacked(ADDR_REVERSE_NODE, sha3HexAddress(addr)));\n    }\n\n    /**\n     * @dev An optimised function to compute the sha3 of the lower-case\n     *      hexadecimal representation of an Ethereum address.\n     * @param addr The address to hash\n     * @return The SHA3 hash of the lower-case hexadecimal encoding of the\n     *         input address.\n     */\n    function sha3HexAddress(address addr) private returns (bytes32 ret) {\n        assembly {\n            let lookup := 0x3031323334353637383961626364656600000000000000000000000000000000\n            let i := 40\n\n            for { } gt(i, 0) { } {\n                i := sub(i, 1)\n                mstore8(i, byte(and(addr, 0xf), lookup))\n                addr := div(addr, 0x10)\n                i := sub(i, 1)\n                mstore8(i, byte(and(addr, 0xf), lookup))\n                addr := div(addr, 0x10)\n            }\n            ret := keccak256(0, 40)\n        }\n    }\n}\n\ncontract AuthereumEnsResolverStateV1 {\n\n    EnsRegistry ens;\n    address public timelockContract;\n\n    mapping (bytes32 => address) public addrs;\n    mapping(bytes32 => string) public names;\n    mapping(bytes32 => mapping(string => string)) public texts;\n    mapping(bytes32 => bytes) public hashes;\n}\n\ncontract AuthereumEnsResolverState is AuthereumEnsResolverStateV1 {}\n\ncontract AuthereumEnsResolver is Managed, AuthereumEnsResolverState {\n\n    string constant public authereumEnsResolverVersion = \"2019111500\";\n\n    bytes4 constant private INTERFACE_META_ID = 0x01ffc9a7;\n    bytes4 constant private ADDR_INTERFACE_ID = 0x3b3b57de;\n    bytes4 constant private NAME_INTERFACE_ID = 0x691f3431;\n    bytes4 constant private TEXT_INTERFACE_ID = 0x59d1d43c;\n    bytes4 constant private CONTENT_HASH_INTERFACE_ID = 0xbc1c58d1;\n\n    event AddrChanged(bytes32 indexed node, address a);\n    event NameChanged(bytes32 indexed node, string name);\n    event TextChanged(bytes32 indexed node, string indexed indexedKey, string key, string value);\n    event ContenthashChanged(bytes32 indexed node, bytes hash);\n\n    /// @dev Constructor\n    /// @param _ensAddr The ENS registrar contract\n    /// @param _timelockContract Authereum timelock contract address\n    constructor(EnsRegistry _ensAddr, address _timelockContract) public {\n        ens = _ensAddr;\n        timelockContract = _timelockContract;\n    }\n\n    /**\n     * Setters\n     */\n\n    /// @dev Sets the address associated with an ENS node\n    /// @notice May only be called by the owner of that node in the ENS registry\n    /// @param _node The node to update\n    /// @param _addr The address to set\n    function setAddr(bytes32 _node, address _addr) public onlyManager {\n        addrs[_node]= _addr;\n        emit AddrChanged(_node, _addr);\n    }\n\n    /// @dev Sets the name associated with an ENS node, for reverse records\n    /// @notice May only be called by the owner of that node in the ENS registry\n    /// @param _node The node to update\n    /// @param _name The name to set\n    function setName(bytes32 _node, string memory _name) public onlyManager {\n        names[_node] = _name;\n        emit NameChanged(_node, _name);\n    }\n\n    /// @dev Sets the text data associated with an ENS node and key\n    /// @notice May only be called by the owner of that node in the ENS registry\n    /// @param node The node to update\n    /// @param key The key to set\n    /// @param value The text data value to set\n    function setText(bytes32 node, string memory key, string memory value) public onlyManager {\n        texts[node][key] = value;\n        emit TextChanged(node, key, key, value);\n    }\n\n    /// @dev Sets the contenthash associated with an ENS node\n    /// @notice May only be called by the owner of that node in the ENS registry\n    /// @param node The node to update\n    /// @param hash The contenthash to set\n    function setContenthash(bytes32 node, bytes memory hash) public onlyManager {\n        hashes[node] = hash;\n        emit ContenthashChanged(node, hash);\n    }\n\n    /**\n     * Getters\n     */\n\n    /// @dev Returns the address associated with an ENS node\n    /// @param _node The ENS node to query\n    /// @return The associated address\n    function addr(bytes32 _node) public view returns (address) {\n        return addrs[_node];\n    }\n\n    /// @dev Returns the name associated with an ENS node, for reverse records\n    /// @notice Defined in EIP181\n    /// @param _node The ENS node to query\n    /// @return The associated name\n    function name(bytes32 _node) public view returns (string memory) {\n        return names[_node];\n    }\n\n    /// @dev Returns the text data associated with an ENS node and key\n    /// @param node The ENS node to query\n    /// @param key The text data key to query\n    ///@return The associated text data\n    function text(bytes32 node, string memory key) public view returns (string memory) {\n        return texts[node][key];\n    }\n\n    /// @dev Returns the contenthash associated with an ENS node\n    /// @param node The ENS node to query\n    /// @return The associated contenthash\n    function contenthash(bytes32 node) public view returns (bytes memory) {\n        return hashes[node];\n    }\n\n    /// @dev Returns true if the resolver implements the interface specified by the provided hash\n    /// @param _interfaceID The ID of the interface to check for\n    /// @return True if the contract implements the requested interface\n    function supportsInterface(bytes4 _interfaceID) public pure returns (bool) {\n        return _interfaceID == INTERFACE_META_ID ||\n        _interfaceID == ADDR_INTERFACE_ID ||\n        _interfaceID == NAME_INTERFACE_ID ||\n        _interfaceID == TEXT_INTERFACE_ID ||\n        _interfaceID == CONTENT_HASH_INTERFACE_ID;\n    }\n}\n\nlibrary strings {\n    struct slice {\n        uint _len;\n        uint _ptr;\n    }\n\n    function memcpy(uint dest, uint src, uint len) private pure {\n        // Copy word-length chunks while possible\n        for(; len >= 32; len -= 32) {\n            assembly {\n                mstore(dest, mload(src))\n            }\n            dest += 32;\n            src += 32;\n        }\n\n        // Copy remaining bytes\n        uint mask = 256 ** (32 - len) - 1;\n        assembly {\n            let srcpart := and(mload(src), not(mask))\n            let destpart := and(mload(dest), mask)\n            mstore(dest, or(destpart, srcpart))\n        }\n    }\n\n    /*\n     * @dev Returns a slice containing the entire string.\n     * @param self The string to make a slice from.\n     * @return A newly allocated slice containing the entire string.\n     */\n    function toSlice(string memory self) internal pure returns (slice memory) {\n        uint ptr;\n        assembly {\n            ptr := add(self, 0x20)\n        }\n        return slice(bytes(self).length, ptr);\n    }\n\n    /*\n     * @dev Returns the length of a null-terminated bytes32 string.\n     * @param self The value to find the length of.\n     * @return The length of the string, from 0 to 32.\n     */\n    function len(bytes32 self) internal pure returns (uint) {\n        uint ret;\n        if (self == 0)\n            return 0;\n        if (uint256(self) & 0xffffffffffffffffffffffffffffffff == 0) {\n            ret += 16;\n            self = bytes32(uint(self) / 0x100000000000000000000000000000000);\n        }\n        if (uint256(self) & 0xffffffffffffffff == 0) {\n            ret += 8;\n            self = bytes32(uint(self) / 0x10000000000000000);\n        }\n        if (uint256(self) & 0xffffffff == 0) {\n            ret += 4;\n            self = bytes32(uint(self) / 0x100000000);\n        }\n        if (uint256(self) & 0xffff == 0) {\n            ret += 2;\n            self = bytes32(uint(self) / 0x10000);\n        }\n        if (uint256(self) & 0xff == 0) {\n            ret += 1;\n        }\n        return 32 - ret;\n    }\n\n    /*\n     * @dev Returns a slice containing the entire bytes32, interpreted as a\n     *      null-terminated utf-8 string.\n     * @param self The bytes32 value to convert to a slice.\n     * @return A new slice containing the value of the input argument up to the\n     *         first null.\n     */\n    function toSliceB32(bytes32 self) internal pure returns (slice memory ret) {\n        // Allocate space for `self` in memory, copy it there, and point ret at it\n        assembly {\n            let ptr := mload(0x40)\n            mstore(0x40, add(ptr, 0x20))\n            mstore(ptr, self)\n            mstore(add(ret, 0x20), ptr)\n        }\n        ret._len = len(self);\n    }\n\n    /*\n     * @dev Returns a new slice containing the same data as the current slice.\n     * @param self The slice to copy.\n     * @return A new slice containing the same data as `self`.\n     */\n    function copy(slice memory self) internal pure returns (slice memory) {\n        return slice(self._len, self._ptr);\n    }\n\n    /*\n     * @dev Copies a slice to a new string.\n     * @param self The slice to copy.\n     * @return A newly allocated string containing the slice's text.\n     */\n    function toString(slice memory self) internal pure returns (string memory) {\n        string memory ret = new string(self._len);\n        uint retptr;\n        assembly { retptr := add(ret, 32) }\n\n        memcpy(retptr, self._ptr, self._len);\n        return ret;\n    }\n\n    /*\n     * @dev Returns the length in runes of the slice. Note that this operation\n     *      takes time proportional to the length of the slice; avoid using it\n     *      in loops, and call `slice.empty()` if you only need to know whether\n     *      the slice is empty or not.\n     * @param self The slice to operate on.\n     * @return The length of the slice in runes.\n     */\n    function len(slice memory self) internal pure returns (uint l) {\n        // Starting at ptr-31 means the LSB will be the byte we care about\n        uint ptr = self._ptr - 31;\n        uint end = ptr + self._len;\n        for (l = 0; ptr < end; l++) {\n            uint8 b;\n            assembly { b := and(mload(ptr), 0xFF) }\n            if (b < 0x80) {\n                ptr += 1;\n            } else if(b < 0xE0) {\n                ptr += 2;\n            } else if(b < 0xF0) {\n                ptr += 3;\n            } else if(b < 0xF8) {\n                ptr += 4;\n            } else if(b < 0xFC) {\n                ptr += 5;\n            } else {\n                ptr += 6;\n            }\n        }\n    }\n\n    /*\n     * @dev Returns true if the slice is empty (has a length of 0).\n     * @param self The slice to operate on.\n     * @return True if the slice is empty, False otherwise.\n     */\n    function empty(slice memory self) internal pure returns (bool) {\n        return self._len == 0;\n    }\n\n    /*\n     * @dev Returns a positive number if `other` comes lexicographically after\n     *      `self`, a negative number if it comes before, or zero if the\n     *      contents of the two slices are equal. Comparison is done per-rune,\n     *      on unicode codepoints.\n     * @param self The first slice to compare.\n     * @param other The second slice to compare.\n     * @return The result of the comparison.\n     */\n    function compare(slice memory self, slice memory other) internal pure returns (int) {\n        uint shortest = self._len;\n        if (other._len < self._len)\n            shortest = other._len;\n\n        uint selfptr = self._ptr;\n        uint otherptr = other._ptr;\n        for (uint idx = 0; idx < shortest; idx += 32) {\n            uint a;\n            uint b;\n            assembly {\n                a := mload(selfptr)\n                b := mload(otherptr)\n            }\n            if (a != b) {\n                // Mask out irrelevant bytes and check again\n                uint256 mask = uint256(-1); // 0xffff...\n                if(shortest < 32) {\n                  mask = ~(2 ** (8 * (32 - shortest + idx)) - 1);\n                }\n                uint256 diff = (a & mask) - (b & mask);\n                if (diff != 0)\n                    return int(diff);\n            }\n            selfptr += 32;\n            otherptr += 32;\n        }\n        return int(self._len) - int(other._len);\n    }\n\n    /*\n     * @dev Returns true if the two slices contain the same text.\n     * @param self The first slice to compare.\n     * @param self The second slice to compare.\n     * @return True if the slices are equal, false otherwise.\n     */\n    function equals(slice memory self, slice memory other) internal pure returns (bool) {\n        return compare(self, other) == 0;\n    }\n\n    /*\n     * @dev Extracts the first rune in the slice into `rune`, advancing the\n     *      slice to point to the next rune and returning `self`.\n     * @param self The slice to operate on.\n     * @param rune The slice that will contain the first rune.\n     * @return `rune`.\n     */\n    function nextRune(slice memory self, slice memory rune) internal pure returns (slice memory) {\n        rune._ptr = self._ptr;\n\n        if (self._len == 0) {\n            rune._len = 0;\n            return rune;\n        }\n\n        uint l;\n        uint b;\n        // Load the first byte of the rune into the LSBs of b\n        assembly { b := and(mload(sub(mload(add(self, 32)), 31)), 0xFF) }\n        if (b < 0x80) {\n            l = 1;\n        } else if(b < 0xE0) {\n            l = 2;\n        } else if(b < 0xF0) {\n            l = 3;\n        } else {\n            l = 4;\n        }\n\n        // Check for truncated codepoints\n        if (l > self._len) {\n            rune._len = self._len;\n            self._ptr += self._len;\n            self._len = 0;\n            return rune;\n        }\n\n        self._ptr += l;\n        self._len -= l;\n        rune._len = l;\n        return rune;\n    }\n\n    /*\n     * @dev Returns the first rune in the slice, advancing the slice to point\n     *      to the next rune.\n     * @param self The slice to operate on.\n     * @return A slice containing only the first rune from `self`.\n     */\n    function nextRune(slice memory self) internal pure returns (slice memory ret) {\n        nextRune(self, ret);\n    }\n\n    /*\n     * @dev Returns the number of the first codepoint in the slice.\n     * @param self The slice to operate on.\n     * @return The number of the first codepoint in the slice.\n     */\n    function ord(slice memory self) internal pure returns (uint ret) {\n        if (self._len == 0) {\n            return 0;\n        }\n\n        uint word;\n        uint length;\n        uint divisor = 2 ** 248;\n\n        // Load the rune into the MSBs of b\n        assembly { word:= mload(mload(add(self, 32))) }\n        uint b = word / divisor;\n        if (b < 0x80) {\n            ret = b;\n            length = 1;\n        } else if(b < 0xE0) {\n            ret = b & 0x1F;\n            length = 2;\n        } else if(b < 0xF0) {\n            ret = b & 0x0F;\n            length = 3;\n        } else {\n            ret = b & 0x07;\n            length = 4;\n        }\n\n        // Check for truncated codepoints\n        if (length > self._len) {\n            return 0;\n        }\n\n        for (uint i = 1; i < length; i++) {\n            divisor = divisor / 256;\n            b = (word / divisor) & 0xFF;\n            if (b & 0xC0 != 0x80) {\n                // Invalid UTF-8 sequence\n                return 0;\n            }\n            ret = (ret * 64) | (b & 0x3F);\n        }\n\n        return ret;\n    }\n\n    /*\n     * @dev Returns the keccak-256 hash of the slice.\n     * @param self The slice to hash.\n     * @return The hash of the slice.\n     */\n    function keccak(slice memory self) internal pure returns (bytes32 ret) {\n        assembly {\n            ret := keccak256(mload(add(self, 32)), mload(self))\n        }\n    }\n\n    /*\n     * @dev Returns true if `self` starts with `needle`.\n     * @param self The slice to operate on.\n     * @param needle The slice to search for.\n     * @return True if the slice starts with the provided text, false otherwise.\n     */\n    function startsWith(slice memory self, slice memory needle) internal pure returns (bool) {\n        if (self._len < needle._len) {\n            return false;\n        }\n\n        if (self._ptr == needle._ptr) {\n            return true;\n        }\n\n        bool equal;\n        assembly {\n            let length := mload(needle)\n            let selfptr := mload(add(self, 0x20))\n            let needleptr := mload(add(needle, 0x20))\n            equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\n        }\n        return equal;\n    }\n\n    /*\n     * @dev If `self` starts with `needle`, `needle` is removed from the\n     *      beginning of `self`. Otherwise, `self` is unmodified.\n     * @param self The slice to operate on.\n     * @param needle The slice to search for.\n     * @return `self`\n     */\n    function beyond(slice memory self, slice memory needle) internal pure returns (slice memory) {\n        if (self._len < needle._len) {\n            return self;\n        }\n\n        bool equal = true;\n        if (self._ptr != needle._ptr) {\n            assembly {\n                let length := mload(needle)\n                let selfptr := mload(add(self, 0x20))\n                let needleptr := mload(add(needle, 0x20))\n                equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\n            }\n        }\n\n        if (equal) {\n            self._len -= needle._len;\n            self._ptr += needle._len;\n        }\n\n        return self;\n    }\n\n    /*\n     * @dev Returns true if the slice ends with `needle`.\n     * @param self The slice to operate on.\n     * @param needle The slice to search for.\n     * @return True if the slice starts with the provided text, false otherwise.\n     */\n    function endsWith(slice memory self, slice memory needle) internal pure returns (bool) {\n        if (self._len < needle._len) {\n            return false;\n        }\n\n        uint selfptr = self._ptr + self._len - needle._len;\n\n        if (selfptr == needle._ptr) {\n            return true;\n        }\n\n        bool equal;\n        assembly {\n            let length := mload(needle)\n            let needleptr := mload(add(needle, 0x20))\n            equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\n        }\n\n        return equal;\n    }\n\n    /*\n     * @dev If `self` ends with `needle`, `needle` is removed from the\n     *      end of `self`. Otherwise, `self` is unmodified.\n     * @param self The slice to operate on.\n     * @param needle The slice to search for.\n     * @return `self`\n     */\n    function until(slice memory self, slice memory needle) internal pure returns (slice memory) {\n        if (self._len < needle._len) {\n            return self;\n        }\n\n        uint selfptr = self._ptr + self._len - needle._len;\n        bool equal = true;\n        if (selfptr != needle._ptr) {\n            assembly {\n                let length := mload(needle)\n                let needleptr := mload(add(needle, 0x20))\n                equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\n            }\n        }\n\n        if (equal) {\n            self._len -= needle._len;\n        }\n\n        return self;\n    }\n\n    // Returns the memory address of the first byte of the first occurrence of\n    // `needle` in `self`, or the first byte after `self` if not found.\n    function findPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private pure returns (uint) {\n        uint ptr = selfptr;\n        uint idx;\n\n        if (needlelen <= selflen) {\n            if (needlelen <= 32) {\n                bytes32 mask = bytes32(~(2 ** (8 * (32 - needlelen)) - 1));\n\n                bytes32 needledata;\n                assembly { needledata := and(mload(needleptr), mask) }\n\n                uint end = selfptr + selflen - needlelen;\n                bytes32 ptrdata;\n                assembly { ptrdata := and(mload(ptr), mask) }\n\n                while (ptrdata != needledata) {\n                    if (ptr >= end)\n                        return selfptr + selflen;\n                    ptr++;\n                    assembly { ptrdata := and(mload(ptr), mask) }\n                }\n                return ptr;\n            } else {\n                // For long needles, use hashing\n                bytes32 hash;\n                assembly { hash := keccak256(needleptr, needlelen) }\n\n                for (idx = 0; idx <= selflen - needlelen; idx++) {\n                    bytes32 testHash;\n                    assembly { testHash := keccak256(ptr, needlelen) }\n                    if (hash == testHash)\n                        return ptr;\n                    ptr += 1;\n                }\n            }\n        }\n        return selfptr + selflen;\n    }\n\n    // Returns the memory address of the first byte after the last occurrence of\n    // `needle` in `self`, or the address of `self` if not found.\n    function rfindPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private pure returns (uint) {\n        uint ptr;\n\n        if (needlelen <= selflen) {\n            if (needlelen <= 32) {\n                bytes32 mask = bytes32(~(2 ** (8 * (32 - needlelen)) - 1));\n\n                bytes32 needledata;\n                assembly { needledata := and(mload(needleptr), mask) }\n\n                ptr = selfptr + selflen - needlelen;\n                bytes32 ptrdata;\n                assembly { ptrdata := and(mload(ptr), mask) }\n\n                while (ptrdata != needledata) {\n                    if (ptr <= selfptr)\n                        return selfptr;\n                    ptr--;\n                    assembly { ptrdata := and(mload(ptr), mask) }\n                }\n                return ptr + needlelen;\n            } else {\n                // For long needles, use hashing\n                bytes32 hash;\n                assembly { hash := keccak256(needleptr, needlelen) }\n                ptr = selfptr + (selflen - needlelen);\n                while (ptr >= selfptr) {\n                    bytes32 testHash;\n                    assembly { testHash := keccak256(ptr, needlelen) }\n                    if (hash == testHash)\n                        return ptr + needlelen;\n                    ptr -= 1;\n                }\n            }\n        }\n        return selfptr;\n    }\n\n    /*\n     * @dev Modifies `self` to contain everything from the first occurrence of\n     *      `needle` to the end of the slice. `self` is set to the empty slice\n     *      if `needle` is not found.\n     * @param self The slice to search and modify.\n     * @param needle The text to search for.\n     * @return `self`.\n     */\n    function find(slice memory self, slice memory needle) internal pure returns (slice memory) {\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\n        self._len -= ptr - self._ptr;\n        self._ptr = ptr;\n        return self;\n    }\n\n    /*\n     * @dev Modifies `self` to contain the part of the string from the start of\n     *      `self` to the end of the first occurrence of `needle`. If `needle`\n     *      is not found, `self` is set to the empty slice.\n     * @param self The slice to search and modify.\n     * @param needle The text to search for.\n     * @return `self`.\n     */\n    function rfind(slice memory self, slice memory needle) internal pure returns (slice memory) {\n        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\n        self._len = ptr - self._ptr;\n        return self;\n    }\n\n    /*\n     * @dev Splits the slice, setting `self` to everything after the first\n     *      occurrence of `needle`, and `token` to everything before it. If\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\n     *      and `token` is set to the entirety of `self`.\n     * @param self The slice to split.\n     * @param needle The text to search for in `self`.\n     * @param token An output parameter to which the first token is written.\n     * @return `token`.\n     */\n    function split(slice memory self, slice memory needle, slice memory token) internal pure returns (slice memory) {\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\n        token._ptr = self._ptr;\n        token._len = ptr - self._ptr;\n        if (ptr == self._ptr + self._len) {\n            // Not found\n            self._len = 0;\n        } else {\n            self._len -= token._len + needle._len;\n            self._ptr = ptr + needle._len;\n        }\n        return token;\n    }\n\n    /*\n     * @dev Splits the slice, setting `self` to everything after the first\n     *      occurrence of `needle`, and returning everything before it. If\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\n     *      and the entirety of `self` is returned.\n     * @param self The slice to split.\n     * @param needle The text to search for in `self`.\n     * @return The part of `self` up to the first occurrence of `delim`.\n     */\n    function split(slice memory self, slice memory needle) internal pure returns (slice memory token) {\n        split(self, needle, token);\n    }\n\n    /*\n     * @dev Splits the slice, setting `self` to everything before the last\n     *      occurrence of `needle`, and `token` to everything after it. If\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\n     *      and `token` is set to the entirety of `self`.\n     * @param self The slice to split.\n     * @param needle The text to search for in `self`.\n     * @param token An output parameter to which the first token is written.\n     * @return `token`.\n     */\n    function rsplit(slice memory self, slice memory needle, slice memory token) internal pure returns (slice memory) {\n        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\n        token._ptr = ptr;\n        token._len = self._len - (ptr - self._ptr);\n        if (ptr == self._ptr) {\n            // Not found\n            self._len = 0;\n        } else {\n            self._len -= token._len + needle._len;\n        }\n        return token;\n    }\n\n    /*\n     * @dev Splits the slice, setting `self` to everything before the last\n     *      occurrence of `needle`, and returning everything after it. If\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\n     *      and the entirety of `self` is returned.\n     * @param self The slice to split.\n     * @param needle The text to search for in `self`.\n     * @return The part of `self` after the last occurrence of `delim`.\n     */\n    function rsplit(slice memory self, slice memory needle) internal pure returns (slice memory token) {\n        rsplit(self, needle, token);\n    }\n\n    /*\n     * @dev Counts the number of nonoverlapping occurrences of `needle` in `self`.\n     * @param self The slice to search.\n     * @param needle The text to search for in `self`.\n     * @return The number of occurrences of `needle` found in `self`.\n     */\n    function count(slice memory self, slice memory needle) internal pure returns (uint cnt) {\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr) + needle._len;\n        while (ptr <= self._ptr + self._len) {\n            cnt++;\n            ptr = findPtr(self._len - (ptr - self._ptr), ptr, needle._len, needle._ptr) + needle._len;\n        }\n    }\n\n    /*\n     * @dev Returns True if `self` contains `needle`.\n     * @param self The slice to search.\n     * @param needle The text to search for in `self`.\n     * @return True if `needle` is found in `self`, false otherwise.\n     */\n    function contains(slice memory self, slice memory needle) internal pure returns (bool) {\n        return rfindPtr(self._len, self._ptr, needle._len, needle._ptr) != self._ptr;\n    }\n\n    /*\n     * @dev Returns a newly allocated string containing the concatenation of\n     *      `self` and `other`.\n     * @param self The first slice to concatenate.\n     * @param other The second slice to concatenate.\n     * @return The concatenation of the two strings.\n     */\n    function concat(slice memory self, slice memory other) internal pure returns (string memory) {\n        string memory ret = new string(self._len + other._len);\n        uint retptr;\n        assembly { retptr := add(ret, 32) }\n        memcpy(retptr, self._ptr, self._len);\n        memcpy(retptr + self._len, other._ptr, other._len);\n        return ret;\n    }\n\n    /*\n     * @dev Joins an array of slices, using `self` as a delimiter, returning a\n     *      newly allocated string.\n     * @param self The delimiter to use.\n     * @param parts A list of slices to join.\n     * @return A newly allocated string containing all the slices in `parts`,\n     *         joined with `self`.\n     */\n    function join(slice memory self, slice[] memory parts) internal pure returns (string memory) {\n        if (parts.length == 0)\n            return \"\";\n\n        uint length = self._len * (parts.length - 1);\n        for(uint i = 0; i < parts.length; i++)\n            length += parts[i]._len;\n\n        string memory ret = new string(length);\n        uint retptr;\n        assembly { retptr := add(ret, 32) }\n\n        for(uint i = 0; i < parts.length; i++) {\n            memcpy(retptr, parts[i]._ptr, parts[i]._len);\n            retptr += parts[i]._len;\n            if (i < parts.length - 1) {\n                memcpy(retptr, self._ptr, self._len);\n                retptr += self._len;\n            }\n        }\n\n        return ret;\n    }\n}\n\ncontract AuthereumEnsManager is Owned {\n    using strings for *;\n\n    string constant public authereumEnsManagerVersion = \"2019111500\";\n\n    // namehash('addr.reverse')\n    bytes32 constant public ADDR_REVERSE_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\n    address ensRegistry;\n\n    // The managed root name\n    string public rootName;\n    // The managed root node\n    bytes32 public rootNode;\n    // The address of the authereumEnsResolver\n    address public authereumEnsResolver;\n    // The address of the Authereum factory\n    address public authereumFactoryAddress;\n    // A mapping of the runtimeCodeHash to creationCodeHash\n    mapping(bytes32 => bytes32) public authereumProxyBytecodeHashMapping;\n\n    event RootnodeOwnerChanged(bytes32 indexed rootnode, address indexed newOwner);\n    event RootnodeResolverChanged(bytes32 indexed rootnode, address indexed newResolver);\n    event RootnodeTTLChanged(bytes32 indexed rootnode, uint64 indexed newTtl);\n    event RootnodeTextChanged(bytes32 indexed node, string indexed indexedKey, string key, string value);\n    event RootnodeContenthashChanged(bytes32 indexed node, bytes hash);\n    event AuthereumEnsResolverChanged(address indexed authereumEnsResolver);\n    event AuthereumFactoryAddressChanged(address indexed authereumFactoryAddress);\n    event AuthereumProxyBytecodeHashChanged(bytes32 indexed authereumProxyRuntimeCodeHash, bytes32 indexed authereumProxyCreationCodeHash);\n    event Registered(address indexed owner, string ens);\n\n    /// @dev Throws if the sender is not the Authereum factory.\n    modifier onlyAuthereumFactory() {\n        require(msg.sender == authereumFactoryAddress, \"Must be sent form the authereumFactoryAddress\");\n        _;\n    }\n\n    /// @dev Constructor that sets the ENS root name and root node to manage\n    /// @param _rootName The root name (e.g. authereum.eth)\n    /// @param _rootNode The node of the root name (e.g. namehash(authereum.eth))\n    /// @param _ensRegistry Public ENS Registry address\n    /// @param _authereumEnsResolver Custom Autheruem ENS Resolver address\n    constructor(\n        string memory _rootName,\n        bytes32 _rootNode,\n        address _ensRegistry,\n        address _authereumEnsResolver\n    )\n        public\n    {\n        rootName = _rootName;\n        rootNode = _rootNode;\n        ensRegistry = _ensRegistry;\n        authereumEnsResolver = _authereumEnsResolver;\n    }\n\n    /**\n     * Canonical ENS\n     */\n\n    /// @dev Gets the official ENS registry\n    /// @return The official ENS registry address\n    function getEnsRegistry() public view returns (EnsRegistry) {\n        return EnsRegistry(ensRegistry);\n    }\n\n    /// @dev Gets the official ENS reverse registrar\n    /// @return The official ENS reverse registrar address\n    function getEnsReverseRegistrar() public view returns (EnsReverseRegistrar) {\n        return EnsReverseRegistrar(getEnsRegistry().owner(ADDR_REVERSE_NODE));\n    }\n\n    /**\n     *  Rootnode - Registry\n     */\n\n    /// @dev This function is used when the rootnode owner is updated\n    /// @param _newOwner The address of the new ENS manager that will manage the root node.\n    function changeRootnodeOwner(address _newOwner) external onlyOwner {\n        require(_newOwner != address(0), \"Address cannot be null\");\n        getEnsRegistry().setOwner(rootNode, _newOwner);\n        emit RootnodeOwnerChanged(rootNode, _newOwner);\n    }\n\n    /// @dev This function is used when the rootnode resolver is updated\n    /// @param _newResolver The address of the new ENS Resolver that will manage the root node.\n    function changeRootnodeResolver(address _newResolver) external onlyOwner {\n        require(_newResolver != address(0), \"Address cannot be null\");\n        getEnsRegistry().setResolver(rootNode, _newResolver);\n        emit RootnodeResolverChanged(rootNode, _newResolver);\n    }\n\n    /// @dev This function is used when the rootnode TTL is updated\n    /// @param _newTtl The address of the new TTL that will manage the root node\n    function changeRootnodeTTL(uint64 _newTtl) external onlyOwner {\n        getEnsRegistry().setTTL(rootNode, _newTtl);\n        emit RootnodeTTLChanged(rootNode, _newTtl);\n    }\n\n    /**\n     *  Rootnode - Resolver\n     */\n\n    /// @dev This function is used when the rootnode text record is updated\n    /// @param _newKey The key of the new text record for the root node\n    /// @param _newValue The value of the new text record for the root node\n    function changeRootnodeText(string calldata _newKey, string calldata _newValue) external onlyOwner {\n        AuthereumEnsResolver(authereumEnsResolver).setText(rootNode, _newKey, _newValue);\n        emit RootnodeTextChanged(rootNode, _newKey, _newKey, _newValue);\n    }\n\n    /// @dev This function is used when the rootnode contenthash is updated\n    /// @param _newHash The new contenthash of the root node\n    function changeRootnodeContenthash(bytes calldata _newHash) external onlyOwner {\n        AuthereumEnsResolver(authereumEnsResolver).setContenthash(rootNode, _newHash);\n        emit RootnodeContenthashChanged(rootNode, _newHash);\n    }\n\n    /**\n     * State\n     */\n\n    /// @dev Lets the owner change the address of the Authereum ENS resolver contract\n    /// @param _authereumEnsResolver The address of the Authereun ENS resolver contract\n    function changeAuthereumEnsResolver(address _authereumEnsResolver) external onlyOwner {\n        require(_authereumEnsResolver != address(0), \"Address cannot be null\");\n        authereumEnsResolver = _authereumEnsResolver;\n        emit AuthereumEnsResolverChanged(_authereumEnsResolver);\n    }\n\n    /// @dev Lets the owner change the address of the Authereum factory\n    /// @param _authereumFactoryAddress The address of the Authereum factory\n    function changeAuthereumFactoryAddress(address _authereumFactoryAddress) external onlyOwner {\n        require(_authereumFactoryAddress != address(0), \"Address cannot be null\");\n        authereumFactoryAddress = _authereumFactoryAddress;\n        emit AuthereumFactoryAddressChanged(authereumFactoryAddress);\n    }\n\n    /**\n     * Register\n     */\n\n    /// @dev Lets the manager assign an ENS subdomain of the root node to a target address.\n    /// @notice Registers both the forward and reverse ENS\n    /// @param _label The subdomain label\n    /// @param _owner The owner of the subdomain\n    function register(\n        string calldata _label,\n        address _owner\n    )\n        external\n        onlyAuthereumFactory\n    {\n        bytes32 labelNode = keccak256(abi.encodePacked(_label));\n        bytes32 node = keccak256(abi.encodePacked(rootNode, labelNode));\n        address currentOwner = getEnsRegistry().owner(node);\n        require(currentOwner == address(0), \"Label is already owned\");\n\n        // Forward ENS\n        getEnsRegistry().setSubnodeOwner(rootNode, labelNode, address(this));\n        getEnsRegistry().setResolver(node, authereumEnsResolver);\n        getEnsRegistry().setOwner(node, _owner);\n        AuthereumEnsResolver(authereumEnsResolver).setAddr(node, _owner);\n\n        // Reverse ENS\n        strings.slice[] memory parts = new strings.slice[](2);\n        parts[0] = _label.toSlice();\n        parts[1] = rootName.toSlice();\n        string memory name = \".\".toSlice().join(parts);\n        bytes32 reverseNode = EnsReverseRegistrar(getEnsReverseRegistrar()).node(_owner);\n        AuthereumEnsResolver(authereumEnsResolver).setName(reverseNode, name);\n\n        emit Registered(_owner, name);\n    }\n\n    /**\n     *  Public functions\n     */\n\n    /// @dev Returns true is a given subnode is available\n    /// @param _subnode The target subnode\n    /// @return True if the subnode is available\n    function isAvailable(bytes32 _subnode) public view returns (bool) {\n        bytes32 node = keccak256(abi.encodePacked(rootNode, _subnode));\n        address currentOwner = getEnsRegistry().owner(node);\n        if(currentOwner == address(0)) {\n            return true;\n        }\n        return false;\n    }\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_rootName\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_rootNode\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_ensRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_authereumEnsResolver\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authereumEnsResolver\",\"type\":\"address\"}],\"name\":\"AuthereumEnsResolverChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authereumFactoryAddress\",\"type\":\"address\"}],\"name\":\"AuthereumFactoryAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"authereumProxyRuntimeCodeHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"authereumProxyCreationCodeHash\",\"type\":\"bytes32\"}],\"name\":\"AuthereumProxyBytecodeHashChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"ens\",\"type\":\"string\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"}],\"name\":\"RootnodeContenthashChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"rootnode\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"RootnodeOwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"rootnode\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newResolver\",\"type\":\"address\"}],\"name\":\"RootnodeResolverChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"rootnode\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"newTtl\",\"type\":\"uint64\"}],\"name\":\"RootnodeTTLChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"indexedKey\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"RootnodeTextChanged\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"ADDR_REVERSE_NODE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authereumEnsManagerVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authereumEnsResolver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authereumFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"authereumProxyBytecodeHashMapping\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authereumEnsResolver\",\"type\":\"address\"}],\"name\":\"changeAuthereumEnsResolver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authereumFactoryAddress\",\"type\":\"address\"}],\"name\":\"changeAuthereumFactoryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_newHash\",\"type\":\"bytes\"}],\"name\":\"changeRootnodeContenthash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeRootnodeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newResolver\",\"type\":\"address\"}],\"name\":\"changeRootnodeResolver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_newTtl\",\"type\":\"uint64\"}],\"name\":\"changeRootnodeTTL\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_newValue\",\"type\":\"string\"}],\"name\":\"changeRootnodeText\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEnsRegistry\",\"outputs\":[{\"internalType\":\"contract EnsRegistry\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEnsReverseRegistrar\",\"outputs\":[{\"internalType\":\"contract EnsReverseRegistrar\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_subnode\",\"type\":\"bytes32\"}],\"name\":\"isAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_potentialOwner\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_label\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rootName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rootNode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"AuthereumEnsManager","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000080c88a4bce4d8278bb10352e65786a8ae4e1aaea9e781a387082211ebdfc7e9ee6000000000000000000000000314159265dd8dbb310642f98f50c066173c1259b0000000000000000000000004da86a24e30a188608e1364a2d262166a87fcb7c000000000000000000000000000000000000000000000000000000000000000d61757468657265756d2e65746800000000000000000000000000000000000000","Library":"","LicenseType":"","SwarmSource":"bzzr://e03ef4b2b2bace594f7346d5242acd438f0339eb1db8f8ac4088df2830e9b730"}]}