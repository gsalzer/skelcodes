{"status":"1","message":"OK","result":[{"SourceCode":"/**\nAuthor: Authereum Labs, Inc.\n*/\n\npragma solidity 0.5.12;\n\n\ncontract Owned {\n\n    // The owner\n    address public owner;\n\n    event OwnerChanged(address indexed _newOwner);\n\n    /// @dev Throws if the sender is not the owner\n    modifier onlyOwner {\n        require(msg.sender == owner, \"Must be owner\");\n        _;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /// @dev Return the ownership status of an address\n    /// @param _potentialOwner Address being checked\n    /// @return True if the _potentialOwner is the owner\n    function isOwner(address _potentialOwner) external view returns (bool) {\n        return owner == _potentialOwner;\n    }\n\n    /// @dev Lets the owner transfer ownership of the contract to a new owner\n    /// @param _newOwner The new owner\n    function changeOwner(address _newOwner) external onlyOwner {\n        require(_newOwner != address(0), \"Address must not be null\");\n        owner = _newOwner;\n        emit OwnerChanged(_newOwner);\n    }\n}\n\ncontract Managed is Owned {\n\n    // The managers\n    mapping (address => bool) public managers;\n\n    /// @dev Throws if the sender is not a manager\n    modifier onlyManager {\n        require(managers[msg.sender] == true, \"Must be manager\");\n        _;\n    }\n\n    event ManagerAdded(address indexed _manager);\n    event ManagerRevoked(address indexed _manager);\n\n    /// @dev Adds a manager\n    /// @param _manager The address of the manager\n    function addManager(address _manager) external onlyOwner {\n        require(_manager != address(0), \"Address must not be null\");\n        if(managers[_manager] == false) {\n            managers[_manager] = true;\n            emit ManagerAdded(_manager);\n        }\n    }\n\n    /// @dev Revokes a manager\n    /// @param _manager The address of the manager\n    function revokeManager(address _manager) external onlyOwner {\n        require(managers[_manager] == true, \"Target must be an existing manager\");\n        delete managers[_manager];\n        emit ManagerRevoked(_manager);\n    }\n}\n\ncontract EnsRegistry {\n\n    struct Record {\n        address owner;\n        address resolver;\n        uint64 ttl;\n    }\n\n    mapping(bytes32=>Record) records;\n\n    // Logged when the owner of a node assigns a new owner to a subnode.\n    event NewOwner(bytes32 indexed _node, bytes32 indexed _label, address _owner);\n\n    // Logged when the owner of a node transfers ownership to a new account.\n    event Transfer(bytes32 indexed _node, address _owner);\n\n    // Logged when the resolver for a node changes.\n    event NewResolver(bytes32 indexed _node, address _resolver);\n\n    // Logged when the TTL of a node changes\n    event NewTTL(bytes32 indexed _node, uint64 _ttl);\n\n    // Permits modifications only by the owner of the specified node.\n    modifier only_owner(bytes32 _node) {\n        require(records[_node].owner == msg.sender, \"ENSTest: this method needs to be called by the owner of the node\");\n        _;\n    }\n\n    /**\n     * Constructs a new ENS registrar.\n     */\n    constructor() public {\n        records[bytes32(0)].owner = msg.sender;\n    }\n\n    /**\n     * Returns the address that owns the specified node.\n     */\n    function owner(bytes32 _node) public view returns (address) {\n        return records[_node].owner;\n    }\n\n    /**\n     * Returns the address of the resolver for the specified node.\n     */\n    function resolver(bytes32 _node) public view returns (address) {\n        return records[_node].resolver;\n    }\n\n    /**\n     * Returns the TTL of a node, and any records associated with it.\n     */\n    function ttl(bytes32 _node) public view returns (uint64) {\n        return records[_node].ttl;\n    }\n\n    /**\n     * Transfers ownership of a node to a new address. May only be called by the current\n     * owner of the node.\n     * @param _node The node to transfer ownership of.\n     * @param _owner The address of the new owner.\n     */\n    function setOwner(bytes32 _node, address _owner) public only_owner(_node) {\n        emit Transfer(_node, _owner);\n        records[_node].owner = _owner;\n    }\n\n    /**\n     * Transfers ownership of a subnode sha3(node, label) to a new address. May only be\n     * called by the owner of the parent node.\n     * @param _node The parent node.\n     * @param _label The hash of the label specifying the subnode.\n     * @param _owner The address of the new owner.\n     */\n    function setSubnodeOwner(bytes32 _node, bytes32 _label, address _owner) public only_owner(_node) {\n        bytes32 subnode = keccak256(abi.encodePacked(_node, _label));\n        emit NewOwner(_node, _label, _owner);\n        records[subnode].owner = _owner;\n    }\n\n    /**\n     * Sets the resolver address for the specified node.\n     * @param _node The node to update.\n     * @param _resolver The address of the resolver.\n     */\n    function setResolver(bytes32 _node, address _resolver) public only_owner(_node) {\n        emit NewResolver(_node, _resolver);\n        records[_node].resolver = _resolver;\n    }\n\n    /**\n     * Sets the TTL for the specified node.\n     * @param _node The node to update.\n     * @param _ttl The TTL in seconds.\n     */\n    function setTTL(bytes32 _node, uint64 _ttl) public only_owner(_node) {\n        emit NewTTL(_node, _ttl);\n        records[_node].ttl = _ttl;\n    }\n}\n\ncontract EnsResolver {\n    function setName(bytes32 _node, string calldata _name) external {}\n}\n\ncontract EnsReverseRegistrar {\n\n    string constant public ensReverseRegistrarVersion = \"2019102500\";\n\n   // namehash('addr.reverse')\n    bytes32 constant ADDR_REVERSE_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\n\n    EnsRegistry public ens;\n    EnsResolver public defaultResolver;\n\n    /**\n     * @dev Constructor\n     * @param ensAddr The address of the ENS registry.\n     * @param resolverAddr The address of the default reverse resolver.\n     */\n    constructor(address ensAddr, address resolverAddr) public {\n        ens = EnsRegistry(ensAddr);\n        defaultResolver = EnsResolver(resolverAddr);\n    }\n\n    /**\n     * @dev Transfers ownership of the reverse ENS record associated with the\n     *      calling account.\n     * @param owner The address to set as the owner of the reverse record in ENS.\n     * @return The ENS node hash of the reverse record.\n     */\n    function claim(address owner) public returns (bytes32) {\n        return claimWithResolver(owner, address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the reverse ENS record associated with the\n     *      calling account.\n     * @param owner The address to set as the owner of the reverse record in ENS.\n     * @param resolver The address of the resolver to set; 0 to leave unchanged.\n     * @return The ENS node hash of the reverse record.\n     */\n    function claimWithResolver(address owner, address resolver) public returns (bytes32) {\n        bytes32 label = sha3HexAddress(msg.sender);\n        bytes32 node = keccak256(abi.encodePacked(ADDR_REVERSE_NODE, label));\n        address currentOwner = ens.owner(node);\n\n        // Update the resolver if required\n        if(resolver != address(0) && resolver != address(ens.resolver(node))) {\n            // Transfer the name to us first if it's not already\n            if(currentOwner != address(this)) {\n                ens.setSubnodeOwner(ADDR_REVERSE_NODE, label, address(this));\n                currentOwner = address(this);\n            }\n            ens.setResolver(node, resolver);\n        }\n\n        // Update the owner if required\n        if(currentOwner != owner) {\n            ens.setSubnodeOwner(ADDR_REVERSE_NODE, label, owner);\n        }\n\n        return node;\n    }\n\n    /**\n     * @dev Sets the `name()` record for the reverse ENS record associated with\n     * the calling account. First updates the resolver to the default reverse\n     * resolver if necessary.\n     * @param name The name to set for this address.\n     * @return The ENS node hash of the reverse record.\n     */\n    function setName(string memory name) public returns (bytes32 node) {\n        node = claimWithResolver(address(this), address(defaultResolver));\n        defaultResolver.setName(node, name);\n        return node;\n    }\n\n    /**\n     * @dev Returns the node hash for a given account's reverse records.\n     * @param addr The address to hash\n     * @return The ENS node hash.\n     */\n    function node(address addr) public returns (bytes32 ret) {\n        return keccak256(abi.encodePacked(ADDR_REVERSE_NODE, sha3HexAddress(addr)));\n    }\n\n    /**\n     * @dev An optimised function to compute the sha3 of the lower-case\n     *      hexadecimal representation of an Ethereum address.\n     * @param addr The address to hash\n     * @return The SHA3 hash of the lower-case hexadecimal encoding of the\n     *         input address.\n     */\n    function sha3HexAddress(address addr) private returns (bytes32 ret) {\n        assembly {\n            let lookup := 0x3031323334353637383961626364656600000000000000000000000000000000\n            let i := 40\n\n            for { } gt(i, 0) { } {\n                i := sub(i, 1)\n                mstore8(i, byte(and(addr, 0xf), lookup))\n                addr := div(addr, 0x10)\n                i := sub(i, 1)\n                mstore8(i, byte(and(addr, 0xf), lookup))\n                addr := div(addr, 0x10)\n            }\n            ret := keccak256(0, 40)\n        }\n    }\n}\n\ncontract AuthereumEnsResolverStateV1 {\n\n    EnsRegistry ens;\n    address public timelockContract;\n\n    mapping (bytes32 => address) public addrs;\n    mapping(bytes32 => string) public names;\n    mapping(bytes32 => mapping(string => string)) public texts;\n    mapping(bytes32 => bytes) public hashes;\n}\n\ncontract AuthereumEnsResolverState is AuthereumEnsResolverStateV1 {}\n\ncontract AuthereumEnsResolver is Managed, AuthereumEnsResolverState {\n\n    string constant public authereumEnsResolverVersion = \"2019111500\";\n\n    bytes4 constant private INTERFACE_META_ID = 0x01ffc9a7;\n    bytes4 constant private ADDR_INTERFACE_ID = 0x3b3b57de;\n    bytes4 constant private NAME_INTERFACE_ID = 0x691f3431;\n    bytes4 constant private TEXT_INTERFACE_ID = 0x59d1d43c;\n    bytes4 constant private CONTENT_HASH_INTERFACE_ID = 0xbc1c58d1;\n\n    event AddrChanged(bytes32 indexed node, address a);\n    event NameChanged(bytes32 indexed node, string name);\n    event TextChanged(bytes32 indexed node, string indexed indexedKey, string key, string value);\n    event ContenthashChanged(bytes32 indexed node, bytes hash);\n\n    /// @dev Constructor\n    /// @param _ensAddr The ENS registrar contract\n    /// @param _timelockContract Authereum timelock contract address\n    constructor(EnsRegistry _ensAddr, address _timelockContract) public {\n        ens = _ensAddr;\n        timelockContract = _timelockContract;\n    }\n\n    /**\n     * Setters\n     */\n\n    /// @dev Sets the address associated with an ENS node\n    /// @notice May only be called by the owner of that node in the ENS registry\n    /// @param _node The node to update\n    /// @param _addr The address to set\n    function setAddr(bytes32 _node, address _addr) public onlyManager {\n        addrs[_node]= _addr;\n        emit AddrChanged(_node, _addr);\n    }\n\n    /// @dev Sets the name associated with an ENS node, for reverse records\n    /// @notice May only be called by the owner of that node in the ENS registry\n    /// @param _node The node to update\n    /// @param _name The name to set\n    function setName(bytes32 _node, string memory _name) public onlyManager {\n        names[_node] = _name;\n        emit NameChanged(_node, _name);\n    }\n\n    /// @dev Sets the text data associated with an ENS node and key\n    /// @notice May only be called by the owner of that node in the ENS registry\n    /// @param node The node to update\n    /// @param key The key to set\n    /// @param value The text data value to set\n    function setText(bytes32 node, string memory key, string memory value) public onlyManager {\n        texts[node][key] = value;\n        emit TextChanged(node, key, key, value);\n    }\n\n    /// @dev Sets the contenthash associated with an ENS node\n    /// @notice May only be called by the owner of that node in the ENS registry\n    /// @param node The node to update\n    /// @param hash The contenthash to set\n    function setContenthash(bytes32 node, bytes memory hash) public onlyManager {\n        hashes[node] = hash;\n        emit ContenthashChanged(node, hash);\n    }\n\n    /**\n     * Getters\n     */\n\n    /// @dev Returns the address associated with an ENS node\n    /// @param _node The ENS node to query\n    /// @return The associated address\n    function addr(bytes32 _node) public view returns (address) {\n        return addrs[_node];\n    }\n\n    /// @dev Returns the name associated with an ENS node, for reverse records\n    /// @notice Defined in EIP181\n    /// @param _node The ENS node to query\n    /// @return The associated name\n    function name(bytes32 _node) public view returns (string memory) {\n        return names[_node];\n    }\n\n    /// @dev Returns the text data associated with an ENS node and key\n    /// @param node The ENS node to query\n    /// @param key The text data key to query\n    ///@return The associated text data\n    function text(bytes32 node, string memory key) public view returns (string memory) {\n        return texts[node][key];\n    }\n\n    /// @dev Returns the contenthash associated with an ENS node\n    /// @param node The ENS node to query\n    /// @return The associated contenthash\n    function contenthash(bytes32 node) public view returns (bytes memory) {\n        return hashes[node];\n    }\n\n    /// @dev Returns true if the resolver implements the interface specified by the provided hash\n    /// @param _interfaceID The ID of the interface to check for\n    /// @return True if the contract implements the requested interface\n    function supportsInterface(bytes4 _interfaceID) public pure returns (bool) {\n        return _interfaceID == INTERFACE_META_ID ||\n        _interfaceID == ADDR_INTERFACE_ID ||\n        _interfaceID == NAME_INTERFACE_ID ||\n        _interfaceID == TEXT_INTERFACE_ID ||\n        _interfaceID == CONTENT_HASH_INTERFACE_ID;\n    }\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract EnsRegistry\",\"name\":\"_ensAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timelockContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"AddrChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"}],\"name\":\"ContenthashChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"ManagerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"ManagerRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"NameChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"indexedKey\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"TextChanged\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_node\",\"type\":\"bytes32\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"addrs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authereumEnsResolverVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"contenthash\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"hashes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_potentialOwner\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"managers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_node\",\"type\":\"bytes32\"}],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"names\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"revokeManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"}],\"name\":\"setContenthash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"setText\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"text\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"texts\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timelockContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"AuthereumEnsResolver","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000314159265dd8dbb310642f98f50c066173c1259b000000000000000000000000a80000228cf1a6d4d267aa7ea2ba5841d1952d1c","Library":"","LicenseType":"","SwarmSource":"bzzr://f00c516c6ace323c38425dba8ed3735ac3b323a99e7666ecdedb3e85fa8aa337"}]}