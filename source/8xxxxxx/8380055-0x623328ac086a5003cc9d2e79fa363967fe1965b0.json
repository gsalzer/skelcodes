{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.1;\r\n\r\ncontract Lotto {\r\n\r\n    struct Round {\r\n        uint entries;               // number of total entries in the round\r\n        address[] activePlayers;    // list of active players (can be multiple of same player)\r\n        uint256 ticketCost;         // cost of one ticket in the lotto\r\n        bool drawn;                 // has the lotto been drawn yet?\r\n        uint256 fee;                // fee to go to hosts\r\n        bytes32 hashOfSecret;       // hash of the secret\r\n        bytes32 secret;             // what is the secret\r\n        uint256 closesOn;           // entries close on block #\r\n        uint256 winner;             // winner of round\r\n        uint256 prizePool;\r\n    }\r\n\r\n    address payable drawer;\r\n    uint256 public roundCount;\r\n    mapping(address => uint256) public owed;  // how much is that address owed (from winnings)\r\n    Round[] public rounds;  // list of rounds\r\n\r\n    constructor () public {\r\n        drawer = msg.sender;\r\n        roundCount = 0;\r\n    }\r\n\r\n    modifier isDrawer {\r\n        require(msg.sender==drawer);\r\n        _;\r\n    }\r\n    \r\n    function Drawer() public view returns (address _drawer){\r\n        _drawer = drawer;\r\n    }\r\n    \r\n    function createRound(uint256 _ticketCost, uint256 _fee, bytes32 _hashOfSecret, uint256 _closesOn) public isDrawer {\r\n        require(_closesOn > block.number);\r\n        Round memory round;\r\n        round.ticketCost = _ticketCost;\r\n        round.fee = _fee;\r\n        round.hashOfSecret = _hashOfSecret;\r\n        round.closesOn = _closesOn;\r\n        rounds.push(round);\r\n        roundCount++;\r\n    }\r\n    \r\n    function getBlockNumber() public view returns (uint256 bn){ bn = block.number; }\r\n    \r\n    function buyTicket(uint256 _roundNumber) public payable {\r\n        require(block.number < rounds[_roundNumber].closesOn); // this is crucial for two reasons\r\n        require(msg.value == rounds[_roundNumber].ticketCost);\r\n        require(!rounds[_roundNumber].drawn);\r\n        rounds[_roundNumber].entries++;\r\n        rounds[_roundNumber].activePlayers.push(msg.sender);\r\n        rounds[_roundNumber].prizePool += (rounds[_roundNumber].ticketCost-rounds[_roundNumber].fee);\r\n    }    \r\n    \r\n    function checkHash(bytes32 testSecret) public pure returns(bytes32 hout) { hout = sha256(abi.encodePacked(testSecret)); }\r\n    function checkWinner(bytes32 testSecret, uint256 testEntries) public pure returns (uint256 testWinner) {\r\n        testWinner = uint256(testSecret) % testEntries;\r\n    }\r\n    \r\n    function checkRoundWinner(uint256 round) public view returns(address win){\r\n        require(rounds[round].drawn);\r\n        win = rounds[round].activePlayers[rounds[round].winner];\r\n    }\r\n    \r\n    function drawWinner(uint256 _roundNumber, bytes32 secret) public isDrawer {\r\n        require(rounds[_roundNumber].entries>0);\r\n        require(block.number >= rounds[_roundNumber].closesOn);\r\n        require(!rounds[_roundNumber].drawn);\r\n        require(sha256(abi.encodePacked(secret))==(rounds[_roundNumber].hashOfSecret));\r\n        uint256 winner = checkWinner(secret,rounds[_roundNumber].entries);\r\n        rounds[_roundNumber].drawn = true;\r\n        rounds[_roundNumber].winner = winner;\r\n        rounds[_roundNumber].secret = secret;\r\n        owed[rounds[_roundNumber].activePlayers[winner]] += rounds[_roundNumber].prizePool;\r\n        drawer.transfer(rounds[_roundNumber].ticketCost*rounds[_roundNumber].entries-rounds[_roundNumber].prizePool);\r\n    }\r\n    \r\n    function collectPrize() public {\r\n        require(owed[msg.sender]>0);\r\n        msg.sender.transfer(owed[msg.sender]);\r\n        owed[msg.sender] = 0;\r\n    }\r\n    \r\n    function sendPrize(address payable _who) public {\r\n        require(owed[_who]>0);\r\n        _who.transfer(owed[_who]);\r\n        owed[_who] = 0;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_ticketCost\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_hashOfSecret\",\"type\":\"bytes32\"},{\"name\":\"_closesOn\",\"type\":\"uint256\"}],\"name\":\"createRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roundCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"sendPrize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Drawer\",\"outputs\":[{\"name\":\"_drawer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"name\":\"bn\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_roundNumber\",\"type\":\"uint256\"}],\"name\":\"buyTicket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"name\":\"entries\",\"type\":\"uint256\"},{\"name\":\"ticketCost\",\"type\":\"uint256\"},{\"name\":\"drawn\",\"type\":\"bool\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"hashOfSecret\",\"type\":\"bytes32\"},{\"name\":\"secret\",\"type\":\"bytes32\"},{\"name\":\"closesOn\",\"type\":\"uint256\"},{\"name\":\"winner\",\"type\":\"uint256\"},{\"name\":\"prizePool\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"testSecret\",\"type\":\"bytes32\"},{\"name\":\"testEntries\",\"type\":\"uint256\"}],\"name\":\"checkWinner\",\"outputs\":[{\"name\":\"testWinner\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"collectPrize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_roundNumber\",\"type\":\"uint256\"},{\"name\":\"secret\",\"type\":\"bytes32\"}],\"name\":\"drawWinner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"testSecret\",\"type\":\"bytes32\"}],\"name\":\"checkHash\",\"outputs\":[{\"name\":\"hout\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"owed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"checkRoundWinner\",\"outputs\":[{\"name\":\"win\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Lotto","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7108561f3243e48e6cd71a09ae3a8c9cf4d58f4272c0513ebf1313dbefce04bf"}]}