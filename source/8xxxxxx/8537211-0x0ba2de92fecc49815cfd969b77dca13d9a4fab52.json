{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts\\token\\ERCToken.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\ncontract ERCToken {\r\n  uint256 internal _totalSupply;\r\n  function totalSupply() public view returns (uint256) {\r\n\treturn _totalSupply;\r\n  }\r\n\r\n  // Fix for the ERC20 short address attack\r\n  modifier onlyPayloadSize(uint size) {\r\n       require(msg.data.length >= size + 4);\r\n       _;\r\n  }\r\n}\r\n\r\n// File: contracts\\token\\ERC20\\ERC20Basic.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic is ERCToken {\r\n  function name() public view returns (string memory);\r\n  function symbol() public  view returns (string memory);\r\n  function decimals() public view returns (uint8 _decimals);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts\\token\\ERC20\\ERC20.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts\\SafeMath.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n    \r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n \r\n  function div(uint256 a, uint256 b) internal pure  returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n \r\n  function sub(uint256 a, uint256 b) internal pure  returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n \r\n  function add(uint256 a, uint256 b) internal pure  returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n \r\n}\r\n\r\n// File: contracts\\token\\TokenDeliverer.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\ncontract TokenDeliverer {\r\n\tfunction _delivery( address recipient, uint256 amount ) internal returns (bool);\r\n}\r\n\r\n// File: contracts\\token\\ERC20\\BasicToken.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic, TokenDeliverer {\r\n    \r\n  using SafeMath for uint256;\r\n \r\n  struct Balance {\r\n\t\tuint256 value;\r\n\t\tbool    exists;\r\n  }\r\n  \r\n  mapping(address => Balance) balances;\r\n\r\n  address[] public \t\t\t  accounts;\r\n  /*\r\n  mapping(address => uint256) balances;\r\n   */\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public onlyPayloadSize(2 * 32) returns (bool) {\r\n\r\n    require(_to != address(0), \"BasicToken: transfer to the zero address\");\r\n    require(_to != address(this), \"BasicToken: transfer address\");\r\n \r\n    balances[msg.sender].value = balances[msg.sender].value.sub(_value);\r\n\tif( balances[_to].exists != true )\r\n\t{\r\n\t\taccounts.push( _to );\r\n\t\tbalances[_to].exists = true;\r\n\t}\r\n    balances[_to].value = balances[_to].value.add(_value);\r\n\t\r\n    emit Transfer(msg.sender, _to, _value );\r\n    return true;\r\n  }\r\n\r\n  function _delivery(address _to, uint256 _value) internal returns (bool) {\r\n   \t\tbalances[address(this)].value = balances[address(this)].value.sub(_value);\r\n\r\n\t\tif( balances[_to].exists != true )\r\n\t\t{\r\n\t\t\taccounts.push( _to );\r\n\t\t\tbalances[_to].exists = true;\r\n\t\t}\r\n    \tbalances[_to].value = balances[_to].value.add(_value);\r\n    \temit Transfer( address(this), _to, _value);\r\n    \treturn true;\r\n  }\r\n \r\n  function _create_balance( uint256 _value ) internal {\r\n\r\n    \tbalances[address(this)].value  = _value;\r\n\t\tbalances[address(this)].exists = true;\r\n\r\n\t\temit Transfer( address(0), address(this), _totalSupply );\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n\r\n  function balanceOf(address _owner) view public returns (uint256 balance) {\r\n    return balances[_owner].value;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts\\token\\ERC20\\StandardToken.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  using SafeMath for uint256;\r\n \r\n  mapping (address => mapping (address => uint256)) allowed;\r\n \r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3 * 32) returns (bool) {\r\n\r\n    require(_from != address(0), \"StandardToken: transfer from the zero address\");\r\n    require(_to   != address(0), \"StandardToken: transfer to the zero address\");\r\n\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n \r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\tif( balances[_to].exists != true )\r\n\t{\r\n\t\taccounts.push( _to );\r\n\t\tbalances[_to].exists = true;\r\n\t}\r\n    balances[_to].value = balances[_to].value.add(_value);\r\n    balances[_from].value = balances[_from].value.sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n \r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n\r\n    require(_spender != address(0), \"StandardToken: approve to the zero address\");\r\n \r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n \r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n \r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n \r\n}\r\n\r\n// File: contracts\\token\\ERC20\\BurnableToken.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is StandardToken {\r\n \r\n  using SafeMath for uint256;\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint _value) public {\r\n    require(_value > 0);\r\n\trequire( msg.sender != address(0), \"Burnable: burn from the zero address\" );\r\n    address burner = msg.sender;\r\n    balances[burner].value = balances[burner].value.sub(_value);\r\n    _totalSupply = _totalSupply.sub(_value);\r\n    emit Transfer(burner, address(0), _value);\r\n  }\r\n\r\n  function burn_from( address burner, uint _value) internal {\r\n    require(_value > 0);\r\n\trequire( burner != address(0), \"Burnable: burn from the zero address\" );\r\n    balances[burner].value = balances[burner].value.sub(_value);\r\n    _totalSupply = _totalSupply.sub(_value);\r\n    emit Transfer( burner, address(0), _value );\r\n  }\r\n}\r\n\r\n// File: contracts\\token\\Ownable.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    \r\n  address public owner;\r\n \r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor()  public {\r\n    owner = msg.sender;\r\n  }\r\n \r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n \r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));      \r\n    owner = newOwner;\r\n  }\r\n \r\n}\r\n\r\n// File: contracts\\utils\\Address.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   \r\n        return address(uint160(account));\r\n    }\r\n}\r\n\r\n// File: contracts\\EmbededCrowdsale.sol\r\n\r\n/*\r\nThis file is part of the WellCoinCrowdsale Contract.\r\nThe WellCoinCrowdsale Contract is free software: you can redistribute it and/or\r\nmodify it under the terms of the GNU lesser General Public License as published\r\nby the Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\nThe WellCoinCrowdsale Contract is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\nGNU lesser General Public License for more details.\r\nYou should have received a copy of the GNU lesser General Public License\r\nalong with the WellCoinCrowdsale Contract. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\npragma solidity ^0.5.11;\r\n\r\n\r\n\r\n\r\n\r\ncontract EmbededCrowdsale is Ownable, TokenDeliverer {\r\n    \r\n    // counter to allow mutex lock with only one SSTORE operation\r\n    uint256 internal _guardCounter;\r\n\r\n    using SafeMath for uint256;\r\n    \r\n\r\n\tuint256 public ether_coef;\r\n    uint public    presale_start;\r\n    uint public    presale_finish;\r\n   \r\n    uint public    presale_hardcap;\r\n    uint256 public presale_rate;\r\n    uint public    presale_softcap;\r\n\r\n    uint public    sale_start;\r\n    uint public    sale_finish;\r\n\r\n    uint public    sale_hardcap;\r\n    uint public    sale_softcap;\r\n    \r\n    uint256 public sale_rate;\r\n\r\n    constructor() public {\r\n\r\n\t  _guardCounter = 1;\r\n\r\n   \t  ether_coef = 1000000000000000000 / 1 ether;\r\n      presale_rate    = 1000 * ether_coef;\r\n\r\n      presale_start   = 1567123200; /*30.08.2019 0:0:0.000*/ \r\n      presale_finish  = 1569888000; /*01.10.2019 0:0:0.000*/ \r\n\r\n      presale_hardcap = 50000 * 1000000000000000000;\r\n      presale_softcap = 10000 * 1000000000000000000;\r\n\r\n      sale_start      = 1569888000; /*01.10.2019 0:0:0.000*/ \r\n\t  sale_finish     = 1576800000; /*20.12.2019 0:0:0.000*/ \r\n\r\n      sale_rate       = 200    * ether_coef;\r\n      sale_hardcap    = 200000 * 1000000000000000000;\r\n      sale_softcap    = 40000  * 1000000000000000000;\r\n\r\n    }\r\n    \r\n\r\n    function fpreSaleIsOn() internal view returns (bool) {\r\n\t  return now > presale_start && now < presale_finish;\r\n    }\r\n\r\n    function fsaleIsOn() internal view returns (bool) {\r\n\t  return now > sale_start && now < sale_finish;\r\n    }\r\n\r\n    modifier saleIsOn() {\r\n      require( (now > sale_start && now < sale_finish) || (now > presale_start && now < presale_finish), \"Crowdsale: sales closed\" );\r\n      _;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n\r\n  modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n\r\n/*\r\n\r\n1567123200 30.08.2019\r\n1568505600 15.09.2019 17 days\r\n1569456000 26.09.2019 28 days\r\n\r\n1569888000 01.10.2019 \r\n1571529600 20.10.2019 20 days\r\n1573257600 09.11.2019 39 days\r\n\r\n5% for WLX 100 - WLX 499\r\n10% for WLX 500 - WLX 999\r\n20% for WLX 1,000 - WLX 9,999\r\n50% for WLX 10,000 and above\r\n\r\n*/\r\n\r\n\r\n\tfunction calc_tokens( uint256 amount ) internal returns (uint) {\r\n      uint tokens = 0;\r\n      uint earlyBonus = 0;\r\n      uint salebonus = 0;\r\n\r\n\t  if( fpreSaleIsOn() )\r\n\t  {\r\n\t\ttokens = presale_rate.mul(msg.value);\r\n\t  \tassert(tokens >= 40000000000000000000 );\r\n        if(now < presale_start + (17 * 1 days)) {\r\n        \tearlyBonus = tokens;\r\n      \t} else if(now < presale_start + (28 * 1 days)) {\r\n        \tearlyBonus = tokens.div(2);\r\n      \t}\r\n      \t\r\n\t  }\r\n\t  else if( fsaleIsOn() )\r\n\t  {\r\n\t\ttokens = sale_rate.mul(msg.value);\r\n\t\tassert(tokens >= 10000000000000000000);\r\n      \tif(now < sale_start + (20 * 1 days)) {\r\n        \tearlyBonus = tokens.div(5);\r\n      \t} else if(now < sale_start + (39 * 1 days)) {\r\n        \tearlyBonus = tokens.div(10);\r\n      \t}\r\n\t  }\r\n\r\n\t  if( tokens >= 10000000000000000000000 ) // 10 000 wlx\r\n\t  {\r\n\t\tsalebonus = tokens.div( 2 );\r\n\t  }\r\n\t  else if( tokens >=  1000000000000000000000 ) // 1 000 wlx\r\n\t  {\r\n\t\tsalebonus = tokens.div( 5 );\r\n\t  }\r\n\t  else if( tokens >=   500000000000000000000 ) // 500 wlx\r\n\t  {\r\n\t\tsalebonus = tokens.div( 10 );\r\n\t  }\r\n\t  else if( tokens >=        100000000000000000000 ) // 100 wlx\r\n\t  {\r\n\t\tsalebonus = tokens.div( 20 );\r\n\t  }\r\n\t  \r\n\t  // 5% for WLX 100 - WLX 499\r\n\t  // 10% for WLX 500 - WLX 999\r\n\t  // 20% for WLX 1,000 - WLX 9,999\r\n\t  // 50% for WLX 10,000 and above\r\n\r\n      tokens += earlyBonus;\r\n      tokens += salebonus;\r\n\r\n\t  return tokens;\r\n\t}\r\n\r\n\r\n\tfunction createTokens() internal saleIsOn nonReentrant {\r\n      uint tokens = calc_tokens( msg.value );\r\n      Address.toPayable(owner).transfer(msg.value);\r\n\t  _delivery( msg.sender, tokens );\r\n    }\r\n \r\n    function() external payable {\r\n\t   createTokens();\r\n    }\r\n\r\n}\r\n\r\n// File: contracts\\WellCoin.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract WellCoin is BurnableToken, EmbededCrowdsale {\r\n\r\n\tusing SafeMath for uint256;    \r\n\r\n    string private constant _name = \"WELLCoin\";\r\n    \r\n    string private constant _symbol = \"WLX\";\r\n    \r\n    uint8 private constant _decimals = 18;\r\n\r\n\r\n    address public team;\r\n    address public bounty;\r\n\taddress public refferals;\r\n\taddress public marketing;\r\n\r\n\taddress owner;\r\n\r\n\tuint256 public INITIAL_SUPPLY                   = 120000000 * 1 ether;\r\n\tuint256 public TEAM_ADVISORS_SUPPLY             =  12000000 * 1 ether;\r\n\tuint256 public BOUNTY_SUPPLY \t           \t    =  10000000 * 1 ether;\r\n\tuint256 public MARKETING_AND_ADVERTISING_SUPPLY =   3000000 * 1 ether;\r\n\tuint256 public REFFERALS_SUPPLY                 =   5000000 * 1 ether;\r\n\tuint    public sales_off;\r\n\r\n\taddress public sale_address;\r\n\r\n    modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n    }\r\n    \r\n  \r\n\tconstructor() public {\r\n\t\towner = msg.sender;\r\n\t\t//!! sale_address  = a_sale_address;\r\n\t\tsale_address  = address(0);\r\n\r\n    \t_totalSupply = INITIAL_SUPPLY;\r\n\t\t_create_balance( INITIAL_SUPPLY );\r\n\r\n    \tteam       = 0x7c6d125130B740EaE82c9e9d23075348B9016A1E;\r\n    \tbounty     = 0x70533B6086BD917355638D2822Db4BDf5c02A5bF;\r\n\t\trefferals  = 0xE8469C048cB0a3FF75417b7D80d631A8cf1120aa;\r\n\t\tmarketing  = 0xE8469C048cB0a3FF75417b7D80d631A8cf1120aa;\r\n\r\n\t\t_delivery( team, TEAM_ADVISORS_SUPPLY );\r\n\t\t_delivery( bounty, BOUNTY_SUPPLY );\r\n\t\t_delivery( refferals, REFFERALS_SUPPLY );\r\n\t\t_delivery( marketing, MARKETING_AND_ADVERTISING_SUPPLY );\r\n\r\n\t\tsales_off =  1576800000; // 12.20.2019 00:00:00\r\n  \t}    \r\n\r\n    function name() public view returns (string memory) {\r\n\t\treturn _name;\r\n\t}\r\n\r\n\tfunction symbol() public view returns (string memory) {\r\n\t\treturn _symbol;\r\n\t}\r\n\r\n\tfunction decimals() public view returns (uint8) {\r\n\t\treturn _decimals;\r\n\t}\r\n\r\n  \tfunction accountsLength() public view returns ( uint ) {\r\n\t\treturn accounts.length;\r\n  \t}\r\n\r\n  \tfunction accountsOf(uint index) public  view returns ( address ) {\r\n\t\treturn accounts[index];\r\n  \t}\r\n\r\n    function delivery(address _to, uint256 _value) external payable returns (bool) {\r\n\t\trequire( now < sales_off, \"Wellcoin: sales off\" );\r\n\t\tif( msg.sender == owner )\r\n\t\t{\r\n    \t\treturn _delivery( _to, _value );\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n    \t\trequire( sale_address != address(0) && sale_address == msg.sender, \"WellCoin: delivery token from saller address\");\r\n    \t\treturn _delivery( _to, _value );\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tfunction close() public onlyOwner {\r\n\t\tburn_from( address(this), balances[address(this)].value );\r\n  \t}\r\n\r\n // ------------------------------------------------------------------------\r\n // Owner can transfer out any accidentally sent ERC220 tokens\r\n // ------------------------------------------------------------------------\r\n\r\n  \tfunction transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n        return ERC20(tokenAddress).transfer(owner, tokens);\r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sale_softcap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sale_finish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presale_softcap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presale_finish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ether_coef\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sale_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"accountsOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sale_start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presale_start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sale_rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REFFERALS_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BOUNTY_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MARKETING_AND_ADVERTISING_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accountsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"team\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bounty\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presale_hardcap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sales_off\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"delivery\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sale_hardcap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presale_rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refferals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accounts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEAM_ADVISORS_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"WellCoin","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://7140d555440a533d9b7120e3fb5050ebfdd354d886518a709ff89b9af562231c"}]}