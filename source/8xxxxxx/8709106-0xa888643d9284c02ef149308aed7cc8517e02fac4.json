{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.11;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error.\r\n */\r\n library SafeMath {\r\n\r\n     function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n         if (a == 0) {\r\n             return 0;\r\n         }\r\n\r\n         uint256 c = a * b;\r\n         require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n         return c;\r\n     }\r\n\r\n     function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n         require(b > 0, \"SafeMath: division by zero\");\r\n         uint256 c = a / b;\r\n\r\n         return c;\r\n     }\r\n\r\n     function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n         require(b <= a, \"SafeMath: subtraction overflow\");\r\n         uint256 c = a - b;\r\n\r\n         return c;\r\n     }\r\n\r\n     function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n         uint256 c = a + b;\r\n         require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n         return c;\r\n     }\r\n }\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor(address initialOwner) internal {\r\n        _owner = initialOwner;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"Caller has no permission\");\r\n        _;\r\n    }\r\n\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == _owner;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"New owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract AdminRole is Ownable {\r\n    using Roles for Roles.Role;\r\n\r\n    event AdminAdded(address indexed account);\r\n    event AdminRemoved(address indexed account);\r\n\r\n    Roles.Role private _admins;\r\n\r\n    constructor() internal {\r\n        _admins.add(_owner);\r\n        emit AdminAdded(_owner);\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(isAdmin(msg.sender), \"Caller has no permission\");\r\n        _;\r\n    }\r\n\r\n    function isAdmin(address account) public view returns (bool) {\r\n        return(_admins.has(account) || isOwner(account));\r\n    }\r\n\r\n    function addAdmin(address account) public onlyOwner {\r\n        _admins.add(account);\r\n        emit AdminAdded(account);\r\n    }\r\n\r\n    function removeAdmin(address account) public onlyOwner {\r\n        _admins.remove(account);\r\n        emit AdminRemoved(account);\r\n    }\r\n}\r\n\r\ncontract MinterRole is Ownable {\r\n    using Roles for Roles.Role;\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n\r\n    Roles.Role private _minters;\r\n\r\n    constructor() internal {\r\n        _minters.add(_owner);\r\n        emit MinterAdded(_owner);\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(isMinter(msg.sender), \"Caller has no permission\");\r\n        _;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return(_minters.has(account) || isOwner(account));\r\n    }\r\n\r\n    function addMinter(address account) public onlyOwner {\r\n        _minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    function removeMinter(address account) public onlyOwner {\r\n        _minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Crowdsale interface\r\n */\r\ninterface ICrowdsale {\r\n    function hardcap() external view returns (uint256);\r\n    function isEnded() external view returns(bool);\r\n}\r\n\r\n/**\r\n * @title Exchange interface\r\n */\r\n interface IExchange {\r\n     function enlisted(address account) external view returns(bool);\r\n     function reserveAddress() external view returns(address payable);\r\n }\r\n\r\n/**\r\n * @title ApproveAndCall Interface.\r\n * @dev ApproveAndCall system allows to communicate with smart-contracts.\r\n */\r\ninterface IApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 amount, address token, bytes calldata extraData) external;\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * See https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _transfer(from, to, value);\r\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(from != address(0));\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(spender != address(0));\r\n        require(owner != address(0));\r\n\r\n        _allowed[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @dev Extension of `ERC20` that adds a set of accounts with the `MinterRole`,\r\n * which have permission to mint (create) new tokens as they see fit.\r\n * At construction, the deployer of the contract is the only minter.\r\n */\r\ncontract ERC20Mintable is ERC20, MinterRole {\r\n\r\n    function mint(address account, uint256 amount) public onlyMinter returns (bool) {\r\n        _mint(account, amount);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title LockableToken\r\n */\r\ncontract LockableToken is ERC20Mintable, AdminRole {\r\n\r\n    // tokens state\r\n    bool private _released;\r\n\r\n    // crowdsale address\r\n    ICrowdsale internal _crowdsale;\r\n    IExchange internal _exchange;\r\n\r\n    // variables to store info about locked addresses\r\n    mapping (address => bool) private _unlocked;\r\n    mapping (address => Lock) private _locked;\r\n    struct Lock {\r\n        uint256 amount;\r\n        uint256 time;\r\n    }\r\n\r\n    /**\r\n     * @dev prevent any transfer of locked tokens.\r\n     */\r\n    modifier canTransfer(address from, address to, uint256 value) {\r\n        if (!_released && !isAdmin(from) && !_unlocked[from]) {\r\n            if (address(_exchange) != address(0)) {\r\n                require(_exchange.enlisted(from));\r\n                require(to == address(_exchange) || to == _exchange.reserveAddress());\r\n            }\r\n        }\r\n        if (_locked[from].amount > 0 && block.timestamp < _locked[from].time) {\r\n            require(value <= balanceOf(from).sub(_locked[from].amount));\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev set crowdsale address.\r\n     * Available only to the owner.\r\n     * @param addr crowdsale address.\r\n     */\r\n    function setCrowdsaleAddr(address addr) external {\r\n        require(isContract(addr));\r\n\r\n        if (address(_crowdsale) != address(0)) {\r\n            removeMinter(address(_crowdsale));\r\n        }\r\n\r\n        addMinter(addr);\r\n\r\n        _crowdsale = ICrowdsale(addr);\r\n    }\r\n\r\n    /**\r\n     * @dev lock an amount of tokens of specific addresses.\r\n     * Available only to the owner and admin.\r\n     * @param account address.\r\n     * @param amount amount of tokens.\r\n     * @param time period (Unix time).\r\n     */\r\n    function lock(address account, uint256 amount, uint256 time) external onlyAdmin {\r\n        require(account != address(0) && amount != 0);\r\n        _locked[account] = Lock(amount, block.timestamp.add(time));\r\n        _unlocked[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev unlock tokens of specific address.\r\n     * Available only to the owner and admin.\r\n     * @param account address.\r\n     */\r\n    function unlock(address account) external onlyAdmin {\r\n        require(account != address(0));\r\n        if (_locked[account].amount > 0) {\r\n            delete _locked[account];\r\n        }\r\n        _unlocked[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev unlock tokens of array of addresses.\r\n     * Available only to the owner and admin.\r\n     * @param accounts array of addresses.\r\n     */\r\n    function unlockList(address[] calldata accounts) external onlyAdmin {\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            require(accounts[i] != address(0));\r\n            if (_locked[accounts[i]].amount > 0) {\r\n                delete _locked[accounts[i]];\r\n            }\r\n            _unlocked[accounts[i]] = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev allow any address to transfer tokens\r\n     * Available only to the owner and admin.\r\n     */\r\n    function release() external onlyAdmin {\r\n        if (address(_crowdsale) != address(0)) {\r\n            require(_crowdsale.isEnded());\r\n            _crowdsale = ICrowdsale(address(0));\r\n        }\r\n        _released = true;\r\n    }\r\n\r\n    /**\r\n     * @dev modified internal transfer function that prevents any transfer of locked tokens.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function _transfer(address from, address to, uint256 value) internal canTransfer(from, to, value) {\r\n        super._transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @return true if tokens are released.\r\n     */\r\n    function released() external view returns(bool) {\r\n        return _released;\r\n    }\r\n\r\n    /**\r\n     * @return address of Crowdsale.\r\n     */\r\n    function crowdsale() external view returns(address) {\r\n        return address(_crowdsale);\r\n    }\r\n\r\n    /**\r\n     * @return true if the address is a сontract\r\n     */\r\n    function isContract(address addr) public view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title The main project contract.\r\n */\r\ncontract BTALToken is LockableToken {\r\n\r\n    // name of the token\r\n    string private _name = \"Bital Token\";\r\n    // symbol of the token\r\n    string private _symbol = \"BTAL\";\r\n    // decimals of the token\r\n    uint8 private _decimals = 18;\r\n\r\n    // initial supply\r\n    uint256 internal constant INITIAL_SUPPLY = 155000000 * (10 ** 18);\r\n\r\n    // registered contracts (to prevent loss of token via transfer function)\r\n    mapping (address => bool) private _contracts;\r\n\r\n    // emission limit\r\n    uint256 private _hardcap = 1000000000 * (10 ** 18);\r\n\r\n    event ContractAdded(address indexed admin, address contractAddr);\r\n    event ContractRemoved(address indexed admin, address contractAddr);\r\n\r\n    /**\r\n     * @dev constructor function that is called once at deployment of the contract.\r\n     * @param recipient Address to receive initial supply.\r\n     * @param initialOwner Address of owner of the contract.\r\n     */\r\n    constructor(address recipient, address initialOwner) public Ownable(initialOwner) {\r\n\r\n        _mint(recipient, INITIAL_SUPPLY);\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Allows to send tokens (via Approve and TransferFrom) to other smart contracts.\r\n     * @param spender Address of smart contracts to work with.\r\n     * @param amount Amount of tokens to send.\r\n     * @param extraData Any extra data.\r\n     */\r\n    function approveAndCall(address spender, uint256 amount, bytes memory extraData) public returns (bool) {\r\n        require(approve(spender, amount));\r\n\r\n        IApproveAndCallFallBack(spender).receiveApproval(msg.sender, amount, address(this), extraData);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev upgraded isAdmin function:\r\n     * @return true if account is owner/minter/admin.\r\n     */\r\n     function isAdmin(address account) public view returns (bool) {\r\n         return(super.isAdmin(account) || isMinter(account));\r\n     }\r\n\r\n    /**\r\n     * @dev set exchange address.\r\n     * Available only to the owner and admin.\r\n     * @param addr Exchange address.\r\n     */\r\n    function setExchangeAddr(address addr) external onlyAdmin {\r\n        require(isContract(addr));\r\n        registerContract(addr);\r\n\r\n        _exchange = IExchange(addr);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows to register other smart contracts (to prevent loss of tokens via transfer function).\r\n     * @param addr Address of smart contracts to work with.\r\n     */\r\n    function registerContract(address addr) public onlyAdmin {\r\n        require(isContract(addr));\r\n        _contracts[addr] = true;\r\n        emit ContractAdded(msg.sender, addr);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows to unregister registered smart contracts.\r\n     * @param addr Address of smart contracts to work with.\r\n     */\r\n    function unregisterContract(address addr) external onlyAdmin {\r\n        _contracts[addr] = false;\r\n        emit ContractRemoved(msg.sender, addr);\r\n    }\r\n\r\n    /**\r\n     * @dev modified transfer function that allows to safely send tokens to smart contract.\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n\r\n        if (_contracts[to]) {\r\n            approveAndCall(to, value, new bytes(0));\r\n        } else {\r\n            super.transfer(to, value);\r\n        }\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev modified transferFrom function that allows to safely send tokens to exchange contract.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n\r\n        if (_contracts[to] && !_contracts[msg.sender]) {\r\n            IApproveAndCallFallBack(to).receiveApproval(msg.sender, value, address(this), new bytes(0));\r\n        } else {\r\n            super.transferFrom(from, to, value);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev upgraded 'mint' function to prevent exceeding of hardcap.\r\n     * @param account The address which you want to mint tokens to.\r\n     * @param amount the amount of tokens to be minted.\r\n     */\r\n    function mint(address account, uint256 amount) public returns (bool) {\r\n        require(totalSupply().add(amount) <= _hardcap);\r\n\r\n        return super.mint(account, amount);\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Allows to any owner of the contract withdraw needed ERC20 token from this contract (promo or bounties for example).\r\n     * @param ERC20Token Address of ERC20 token.\r\n     * @param recipient Account to receive tokens.\r\n     */\r\n    function withdrawERC20(address ERC20Token, address recipient) external onlyAdmin {\r\n\r\n        uint256 amount = IERC20(ERC20Token).balanceOf(address(this));\r\n        require(amount > 0);\r\n        IERC20(ERC20Token).transfer(recipient, amount);\r\n\r\n    }\r\n\r\n    /**\r\n     * @return the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @return the symbol of the token.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @return the number of decimals of the token.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @return emission limit\r\n     */\r\n    function hardcap() public view returns(uint256) {\r\n        return _hardcap;\r\n    }\r\n\r\n    /**\r\n     * @return true if the address is registered as contract\r\n     */\r\n    function isRegistered(address addr) public view returns (bool) {\r\n        return _contracts[addr];\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"registerContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setExchangeAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"ERC20Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"released\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsale\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardcap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setCrowdsaleAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"unlockList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"unregisterContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"}],\"name\":\"ContractAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"}],\"name\":\"ContractRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"BTALToken","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000782563d21e8704c2f7f937b7b2d27a1a3a37fd700000000000000000000000007f9a148af3839adbb0cd218f351249c916f4ce9d","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://c631a31dfe9b81521bc508a549d15b2aa4a6e17fe5bfe138a0be4a2e65e9ed79"}]}