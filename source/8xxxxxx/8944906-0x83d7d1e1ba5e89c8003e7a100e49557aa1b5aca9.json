{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.11;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n\ncontract InscribableToken {\n\n    mapping(bytes32 => bytes32) public properties;\n\n    event ClassPropertySet(\n        bytes32 indexed key,\n        bytes32 value\n    );\n\n    event TokenPropertySet(\n        uint indexed id,\n        bytes32 indexed key,\n        bytes32 value\n    );\n\n    function _setProperty(\n        uint _id,\n        bytes32 _key,\n        bytes32 _value\n    )\n        internal\n    {\n        properties[getTokenKey(_id, _key)] = _value;\n        emit TokenPropertySet(_id, _key, _value);\n    }\n\n    function getProperty(\n        uint _id,\n        bytes32 _key\n    )\n        public\n        view\n        returns (bytes32 _value)\n    {\n        return properties[getTokenKey(_id, _key)];\n    }\n\n    function _setClassProperty(\n        bytes32 _key,\n        bytes32 _value\n    )\n        internal\n    {\n        emit ClassPropertySet(_key, _value);\n        properties[getClassKey(_key)] = _value;\n    }\n\n    function getTokenKey(\n        uint _tokenId,\n        bytes32 _key\n    )\n        public\n        pure\n        returns (bytes32)\n    {\n        // one prefix to prevent collisions\n        return keccak256(abi.encodePacked(uint(1), _tokenId, _key));\n    }\n\n    function getClassKey(bytes32 _key)\n        public\n        pure\n        returns (bytes32)\n    {\n        // zero prefix to prevent collisions\n        return keccak256(abi.encodePacked(uint(0), _key));\n    }\n\n    function getClassProperty(bytes32 _key)\n        public\n        view\n        returns (bytes32)\n    {\n        return properties[getClassKey(_key)];\n    }\n\n}\n\n\n\nlibrary String {\n\n    /**\n     * @dev Converts a `uint256` to a `string`.\n     * via OraclizeAPI - MIT licence\n     * https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n     */\n    function fromUint(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        uint256 index = digits - 1;\n        temp = value;\n        while (temp != 0) {\n            buffer[index--] = byte(uint8(48 + temp % 10));\n            temp /= 10;\n        }\n        return string(buffer);\n    }\n\n    bytes constant alphabet = \"0123456789abcdef\";\n\n    function fromAddress(address _addr) internal pure returns(string memory) {\n        bytes32 value = bytes32(uint256(_addr));\n        bytes memory str = new bytes(42);\n        str[0] = '0';\n        str[1] = 'x';\n        for (uint i = 0; i < 20; i++) {\n            str[2+i*2] = alphabet[uint(uint8(value[i + 12] >> 4))];\n            str[3+i*2] = alphabet[uint(uint8(value[i + 12] & 0x0F))];\n        }\n        return string(str);\n    }\n\n}\n\n// solium-disable security/no-inline-assembly\n\n\nlibrary StorageWrite {\n\n    using SafeMath for uint256;\n\n    function _getStorageArraySlot(uint _dest, uint _index) internal view returns (uint result) {\n        uint slot = _getArraySlot(_dest, _index);\n        assembly { result := sload(slot) }\n    }\n\n    function _getArraySlot(uint _dest, uint _index) internal pure returns (uint slot) {\n        assembly {\n            let free := mload(0x40)\n            mstore(free, _dest)\n            slot := add(keccak256(free, 32), _index)\n        }\n    }\n\n    function _setArraySlot(uint _dest, uint _index, uint _value) internal {\n        uint slot = _getArraySlot(_dest, _index);\n        assembly { sstore(slot, _value) }\n    }\n\n    function _loadSlots(\n        uint _slot,\n        uint _offset,\n        uint _perSlot,\n        uint _length\n    )\n        internal\n        view\n        returns (uint[] memory slots)\n    {\n        uint slotCount = _slotCount(_offset, _perSlot, _length);\n        slots = new uint[](slotCount);\n        // top and tail the slots\n        uint firstPos = _pos(_offset, _perSlot); // _offset.div(_perSlot);\n        slots[0] = _getStorageArraySlot(_slot, firstPos);\n        if (slotCount > 1) {\n            uint lastPos = _pos(_offset.add(_length), _perSlot); // .div(_perSlot);\n            slots[slotCount-1] = _getStorageArraySlot(_slot, lastPos);\n        }\n    }\n\n    function _pos(uint items, uint perPage) internal pure returns (uint) {\n        return items / perPage;\n    }\n\n    function _slotCount(uint _offset, uint _perSlot, uint _length) internal pure returns (uint) {\n        uint start = _offset / _perSlot;\n        uint end = (_offset + _length) / _perSlot;\n        return (end - start) + 1;\n    }\n\n    function _saveSlots(uint _slot, uint _offset, uint _size, uint[] memory _slots) internal {\n        uint offset = _offset.div((256/_size));\n        for (uint i = 0; i < _slots.length; i++) {\n            _setArraySlot(_slot, offset + i, _slots[i]);\n        }\n    }\n\n    function _write(uint[] memory _slots, uint _offset, uint _size, uint _index, uint _value) internal pure {\n        uint perSlot = 256 / _size;\n        uint initialOffset = _offset % perSlot;\n        uint slotPosition = (initialOffset + _index) / perSlot;\n        uint withinSlot = ((_index + _offset) % perSlot) * _size;\n        // evil bit shifting magic\n        for (uint q = 0; q < _size; q += 8) {\n            _slots[slotPosition] |= ((_value >> q) & 0xFF) << (withinSlot + q);\n        }\n    }\n\n    function repeatUint16(uint _slot, uint _offset, uint _length, uint16 _item) internal {\n        uint[] memory slots = _loadSlots(_slot, _offset, 16, _length);\n        for (uint i = 0; i < _length; i++) {\n            _write(slots, _offset, 16, i, _item);\n        }\n        _saveSlots(_slot, _offset, 16, slots);\n    }\n\n    function uint16s(uint _slot, uint _offset, uint16[] memory _items) internal {\n        uint[] memory slots = _loadSlots(_slot, _offset, 16, _items.length);\n        for (uint i = 0; i < _items.length; i++) {\n            _write(slots, _offset, 16, i, _items[i]);\n        }\n        _saveSlots(_slot, _offset, 16, slots);\n    }\n\n    function uint8s(uint _slot, uint _offset, uint8[] memory _items) internal {\n        uint[] memory slots = _loadSlots(_slot, _offset, 32, _items.length);\n        for (uint i = 0; i < _items.length; i++) {\n            _write(slots, _offset, 8, i, _items[i]);\n        }\n        _saveSlots(_slot, _offset, 8, slots);\n    }\n\n}\n\ncontract ImmutableToken {\n\n    string public constant baseURI = \"https://api.immutable.com/asset/\";\n\n    function tokenURI(uint256 tokenId) external view returns (string memory) {\n        return string(abi.encodePacked(\n            baseURI,\n            String.fromAddress(address(this)),\n            \"/\",\n            String.fromUint(tokenId)\n        ));\n    }\n\n}\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts may inherit from this and call {_registerInterface} to declare\n * their support of an interface.\n */\ncontract ERC165 is IERC165 {\n    /*\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n     */\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n\n    /**\n     * @dev Mapping of interface ids to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    constructor () internal {\n        // Derived contracts need only register support for their own interfaces,\n        // we register support for ERC165 itself here\n        _registerInterface(_INTERFACE_ID_ERC165);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     *\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ncontract IERC721Receiver {\n    /**\n     * @notice Handle the receipt of an NFT\n     * @dev The ERC721 smart contract calls this function on the recipient\n     * after a {IERC721-safeTransferFrom}. This function MUST return the function selector,\n     * otherwise the caller will revert the transaction. The selector to be\n     * returned can be obtained as `this.onERC721Received.selector`. This\n     * function MAY throw to revert and reject the transfer.\n     * Note: the ERC721 contract address is always the message sender.\n     * @param operator The address which called `safeTransferFrom` function\n     * @param from The address which previously owned the token\n     * @param tokenId The NFT identifier which is being transferred\n     * @param data Additional data with no specified format\n     * @return bytes4 `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\n    public returns (bytes4);\n}\n\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * This test is non-exhaustive, and there may be false-negatives: during the\n     * execution of a contract's constructor, its address will be reported as\n     * not containing a contract.\n     *\n     * IMPORTANT: It is unsafe to assume that an address for which this\n     * function returns false is an externally-owned account (EOA) and not a\n     * contract.\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != 0x0 && codehash != accountHash);\n    }\n\n    /**\n     * @dev Converts an `address` into `address payable`. Note that this is\n     * simply a type cast: the actual underlying value is not changed.\n     *\n     * _Available since v2.4.0._\n     */\n    function toPayable(address account) internal pure returns (address payable) {\n        return address(uint160(account));\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     *\n     * _Available since v2.4.0._\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-call-value\n        (bool success, ) = recipient.call.value(amount)(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\n * directly accessed.\n */\nlibrary Counters {\n    using SafeMath for uint256;\n\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        counter._value += 1;\n    }\n\n    function decrement(Counter storage counter) internal {\n        counter._value = counter._value.sub(1);\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        _owner = _msgSender();\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ncontract IERC721 is IERC165 {\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of NFTs in `owner`'s account.\n     */\n    function balanceOf(address owner) public view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the NFT specified by `tokenId`.\n     */\n    function ownerOf(uint256 tokenId) public view returns (address owner);\n\n    /**\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\n     * another (`to`).\n     *\n     *\n     *\n     * Requirements:\n     * - `from`, `to` cannot be zero.\n     * - `tokenId` must be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this\n     * NFT by either {approve} or {setApprovalForAll}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n    /**\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\n     * another (`to`).\n     *\n     * Requirements:\n     * - If the caller is not `from`, it must be approved to move this NFT by\n     * either {approve} or {setApprovalForAll}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public;\n    function approve(address to, uint256 tokenId) public;\n    function getApproved(uint256 tokenId) public view returns (address operator);\n\n    function setApprovalForAll(address operator, bool _approved) public;\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\n\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\n}\n\n\n\n\n\n\n\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://eips.ethereum.org/EIPS/eip-721\n */\ncontract ERC721 is Context, ERC165, IERC721 {\n    using SafeMath for uint256;\n    using Address for address;\n    using Counters for Counters.Counter;\n\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n    // Mapping from token ID to owner\n    mapping (uint256 => address) private _tokenOwner;\n\n    // Mapping from token ID to approved address\n    mapping (uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to number of owned token\n    mapping (address => Counters.Counter) private _ownedTokensCount;\n\n    // Mapping from owner to operator approvals\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n    /*\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\n     *\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\n     *        0xa22cb465 ^ 0xe985e9c ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n\n    constructor () public {\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(_INTERFACE_ID_ERC721);\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param owner address to query the balance of\n     * @return uint256 representing the amount owned by the passed address\n     */\n    function balanceOf(address owner) public view returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n\n        return _ownedTokensCount[owner].current();\n    }\n\n    /**\n     * @dev Gets the owner of the specified token ID.\n     * @param tokenId uint256 ID of the token to query the owner of\n     * @return address currently marked as the owner of the given token ID\n     */\n    function ownerOf(uint256 tokenId) public view returns (address) {\n        address owner = _tokenOwner[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n\n        return owner;\n    }\n\n    /**\n     * @dev Approves another address to transfer the given token ID\n     * The zero address indicates there is no approved address.\n     * There can only be one approved address per token at a given time.\n     * Can only be called by the token owner or an approved operator.\n     * @param to address to be approved for the given token ID\n     * @param tokenId uint256 ID of the token to be approved\n     */\n    function approve(address to, uint256 tokenId) public {\n        address owner = ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _tokenApprovals[tokenId] = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    /**\n     * @dev Gets the approved address for a token ID, or zero if no address set\n     * Reverts if the token ID does not exist.\n     * @param tokenId uint256 ID of the token to query the approval of\n     * @return address currently approved for the given token ID\n     */\n    function getApproved(uint256 tokenId) public view returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev Sets or unsets the approval of a given operator\n     * An operator is allowed to transfer all tokens of the sender on their behalf.\n     * @param to operator address to set the approval\n     * @param approved representing the status of the approval to be set\n     */\n    function setApprovalForAll(address to, bool approved) public {\n        require(to != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][to] = approved;\n        emit ApprovalForAll(_msgSender(), to, approved);\n    }\n\n    /**\n     * @dev Tells whether an operator is approved by a given owner.\n     * @param owner owner address which you want to query the approval of\n     * @param operator operator address which you want to query the approval of\n     * @return bool whether the given operator is approved by the given owner\n     */\n    function isApprovedForAll(address owner, address operator) public view returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev Transfers the ownership of a given token ID to another address.\n     * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     * Requires the msg.sender to be the owner, approved, or operator.\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transferFrom(from, to, tokenId);\n    }\n\n    /**\n     * @dev Safely transfers the ownership of a given token ID to another address\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * Requires the msg.sender to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Safely transfers the ownership of a given token ID to another address\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * Requires the _msgSender() to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes data to send along with a safe transfer check\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransferFrom(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers the ownership of a given token ID to another address\n     * If the target address is a contract, it must implement `onERC721Received`,\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * Requires the msg.sender to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes data to send along with a safe transfer check\n     */\n    function _safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) internal {\n        _transferFrom(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether the specified token exists.\n     * @param tokenId uint256 ID of the token to query the existence of\n     * @return bool whether the token exists\n     */\n    function _exists(uint256 tokenId) internal view returns (bool) {\n        address owner = _tokenOwner[tokenId];\n        return owner != address(0);\n    }\n\n    /**\n     * @dev Returns whether the given spender can transfer a given token ID.\n     * @param spender address of the spender to query\n     * @param tokenId uint256 ID of the token to be transferred\n     * @return bool whether the msg.sender is approved for the given token ID,\n     * is an operator of the owner, or is the owner of the token\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Internal function to safely mint a new token.\n     * Reverts if the given token ID already exists.\n     * If the target address is a contract, it must implement `onERC721Received`,\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * @param to The address that will own the minted token\n     * @param tokenId uint256 ID of the token to be minted\n     */\n    function _safeMint(address to, uint256 tokenId) internal {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Internal function to safely mint a new token.\n     * Reverts if the given token ID already exists.\n     * If the target address is a contract, it must implement `onERC721Received`,\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * @param to The address that will own the minted token\n     * @param tokenId uint256 ID of the token to be minted\n     * @param _data bytes data to send along with a safe transfer check\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal {\n        _mint(to, tokenId);\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Internal function to mint a new token.\n     * Reverts if the given token ID already exists.\n     * @param to The address that will own the minted token\n     * @param tokenId uint256 ID of the token to be minted\n     */\n    function _mint(address to, uint256 tokenId) internal {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _tokenOwner[tokenId] = to;\n        _ownedTokensCount[to].increment();\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to burn a specific token.\n     * Reverts if the token does not exist.\n     * Deprecated, use {_burn} instead.\n     * @param owner owner of the token to burn\n     * @param tokenId uint256 ID of the token being burned\n     */\n    function _burn(address owner, uint256 tokenId) internal {\n        require(ownerOf(tokenId) == owner, \"ERC721: burn of token that is not own\");\n\n        _clearApproval(tokenId);\n\n        _ownedTokensCount[owner].decrement();\n        _tokenOwner[tokenId] = address(0);\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Internal function to burn a specific token.\n     * Reverts if the token does not exist.\n     * @param tokenId uint256 ID of the token being burned\n     */\n    function _burn(uint256 tokenId) internal {\n        _burn(ownerOf(tokenId), tokenId);\n    }\n\n    /**\n     * @dev Internal function to transfer ownership of a given token ID to another address.\n     * As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function _transferFrom(address from, address to, uint256 tokenId) internal {\n        require(ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _clearApproval(tokenId);\n\n        _ownedTokensCount[from].decrement();\n        _ownedTokensCount[to].increment();\n\n        _tokenOwner[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * This function is deprecated.\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n        internal returns (bool)\n    {\n        if (!to.isContract()) {\n            return true;\n        }\n\n        bytes4 retval = IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data);\n        return (retval == _ERC721_RECEIVED);\n    }\n\n    /**\n     * @dev Private function to clear current approval of a given token ID.\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function _clearApproval(uint256 tokenId) private {\n        if (_tokenApprovals[tokenId] != address(0)) {\n            _tokenApprovals[tokenId] = address(0);\n        }\n    }\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ncontract IERC721Metadata is IERC721 {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n\n\ncontract MultiTransfer is IERC721 {\n\n    function transferBatch(\n        address from,\n        address to,\n        uint256 start,\n        uint256 end\n    )\n        public\n    {\n        for (uint i = start; i < end; i++) {\n            transferFrom(from, to, i);\n        }\n    }\n\n    function transferAllFrom(\n        address from,\n        address to,\n        uint256[] memory tokenIDs\n    )\n        public\n    {\n        for (uint i = 0; i < tokenIDs.length; i++) {\n            transferFrom(from, to, tokenIDs[i]);\n        }\n    }\n\n    function safeTransferBatch(\n        address from,\n        address to,\n        uint256 start,\n        uint256 end\n    )\n        public\n    {\n        for (uint i = start; i < end; i++) {\n            safeTransferFrom(from, to, i);\n        }\n    }\n\n    function safeTransferAllFrom(\n        address from,\n        address to,\n        uint256[] memory tokenIDs\n    )\n        public\n    {\n        for (uint i = 0; i < tokenIDs.length; i++) {\n            safeTransferFrom(from, to, tokenIDs[i]);\n        }\n    }\n\n}\n\ncontract ICards is IERC721 {\n\n    struct Batch {\n        uint48 userID;\n        uint16 size;\n    }\n\n    function batches(uint index) public view returns (uint48 userID, uint16 size);\n\n    function userIDToAddress(uint48 id) public view returns (address);\n\n    function getDetails(\n        uint tokenId\n    )\n        public\n        view\n        returns (\n        uint16 proto,\n        uint8 quality\n    );\n\n    function setQuality(\n        uint tokenId,\n        uint8 quality\n    ) public;\n\n    function mintCards(\n        address to,\n        uint16[] memory _protos,\n        uint8[] memory _qualities\n    )\n        public\n        returns (uint);\n\n    function mintCard(\n        address to,\n        uint16 _proto,\n        uint8 _quality\n    )\n        public\n        returns (uint);\n\n    function burn(uint tokenId) public;\n\n    function batchSize()\n        public\n        view\n        returns (uint);\n}\n\n\n\n\ncontract ERC721Metadata is Context, ERC165, ERC721, IERC721Metadata {\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    /*\n     *     bytes4(keccak256('name()')) == 0x06fdde03\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\n     *\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\n\n    /**\n     * @dev Constructor function\n     */\n    constructor (string memory name, string memory symbol) public {\n        _name = name;\n        _symbol = symbol;\n\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\n    }\n\n    /**\n     * @dev Gets the token name.\n     * @return string representing the token name\n     */\n    function name() external view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Gets the token symbol.\n     * @return string representing the token symbol\n     */\n    function symbol() external view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns an URI for a given token ID.\n     * Throws if the token ID does not exist. May return an empty string.\n     * @param tokenId uint256 ID of the token to query\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n        return _tokenURIs[tokenId];\n    }\n\n    /**\n     * @dev Internal function to set the token URI for a given token.\n     * Reverts if the token ID does not exist.\n     * @param tokenId uint256 ID of the token to set its URI\n     * @param uri string URI to assign\n     */\n    function _setTokenURI(uint256 tokenId, string memory uri) internal {\n        require(_exists(tokenId), \"ERC721Metadata: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = uri;\n    }\n\n    /**\n     * @dev Internal function to burn a specific token.\n     * Reverts if the token does not exist.\n     * Deprecated, use _burn(uint256) instead.\n     * @param owner owner of the token to burn\n     * @param tokenId uint256 ID of the token being burned by the msg.sender\n     */\n    function _burn(address owner, uint256 tokenId) internal {\n        super._burn(owner, tokenId);\n\n        // Clear metadata (if any)\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n\n\n\ncontract BatchToken is ERC721Metadata {\n\n    using SafeMath for uint256;\n\n    struct Batch {\n        uint48 userID;\n        uint16 size;\n    }\n\n    mapping(uint48 => address) public userIDToAddress;\n    mapping(address => uint48) public addressToUserID;\n\n    uint256 public batchSize;\n    uint256 public nextBatch;\n    uint256 public tokenCount;\n\n    uint48[] internal ownerIDs;\n    uint48[] internal approvedIDs;\n\n    mapping(uint => Batch) public batches;\n\n    uint48 internal userCount = 1;\n\n    mapping(address => uint) internal _balances;\n\n    uint256 internal constant MAX_LENGTH = uint(2**256 - 1);\n\n    constructor(\n        uint256 _batchSize,\n        string memory name,\n        string memory symbol\n    )\n        public\n        ERC721Metadata(name, symbol)\n    {\n        batchSize = _batchSize;\n        ownerIDs.length = MAX_LENGTH;\n        approvedIDs.length = MAX_LENGTH;\n    }\n\n    function _getUserID(address to)\n        internal\n        returns (uint48)\n    {\n        if (to == address(0)) {\n            return 0;\n        }\n        uint48 uID = addressToUserID[to];\n        if (uID == 0) {\n            require(\n                userCount + 1 > userCount,\n                \"BT: must not overflow\"\n            );\n            uID = userCount++;\n            userIDToAddress[uID] = to;\n            addressToUserID[to] = uID;\n        }\n        return uID;\n    }\n\n    function _batchMint(\n        address to,\n        uint16 size\n    )\n        internal\n        returns (uint)\n    {\n        require(\n            to != address(0),\n            \"BT: must not be null\"\n        );\n\n        require(\n            size > 0 && size <= batchSize,\n            \"BT: size must be within limits\"\n        );\n\n        uint256 start = nextBatch;\n        uint48 uID = _getUserID(to);\n        batches[start] = Batch({\n            userID: uID,\n            size: size\n        });\n        uint256 end = start.add(size);\n        for (uint256 i = start; i < end; i++) {\n            emit Transfer(address(0), to, i);\n        }\n        nextBatch = nextBatch.add(batchSize);\n        _balances[to] = _balances[to].add(size);\n        tokenCount = tokenCount.add(size);\n        return start;\n    }\n\n    function getBatchStart(uint256 tokenId) public view returns (uint) {\n        return tokenId.div(batchSize).mul(batchSize);\n    }\n\n    function getBatch(uint256 index) public view returns (uint48 userID, uint16 size) {\n        return (batches[index].userID, batches[index].size);\n    }\n\n    // Overridden ERC721 functions\n    // @OZ: please stop making variables/functions private\n\n    function ownerOf(uint256 tokenId)\n        public\n        view\n        returns (address)\n    {\n        uint48 uID = ownerIDs[tokenId];\n        if (uID == 0) {\n            uint256 start = getBatchStart(tokenId);\n            Batch memory b = batches[start];\n\n            require(\n                start + b.size > tokenId,\n                \"BT: token does not exist\"\n            );\n\n            uID = b.userID;\n            require(\n                uID != 0,\n                \"BT: bad batch owner\"\n            );\n        }\n        return userIDToAddress[uID];\n    }\n\n    function _transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    )\n        internal\n    {\n        require(\n            ownerOf(tokenId) == from,\n            \"BT: transfer of token that is not own\"\n        );\n\n        require(\n            to != address(0),\n            \"BT: transfer to the zero address\"\n        );\n\n        require(\n            _isApprovedOrOwner(msg.sender, tokenId),\n            \"BT: caller is not owner nor approved\"\n        );\n\n        _cancelApproval(tokenId);\n        _balances[from] = _balances[from].sub(1);\n        _balances[to] = _balances[to].add(1);\n        ownerIDs[tokenId] = _getUserID(to);\n        emit Transfer(from, to, tokenId);\n    }\n\n    function _burn(uint256 tokenId) internal {\n\n        require(\n            _isApprovedOrOwner(msg.sender, tokenId),\n            \"BT: caller is not owner nor approved\"\n        );\n\n        _cancelApproval(tokenId);\n        address owner = ownerOf(tokenId);\n        _balances[owner] = _balances[owner].sub(1);\n        ownerIDs[tokenId] = 0;\n        tokenCount = tokenCount.sub(1);\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    function _cancelApproval(uint256 tokenId) internal {\n        if (approvedIDs[tokenId] != 0) {\n            approvedIDs[tokenId] = 0;\n        }\n    }\n\n    function approve(address to, uint256 tokenId) public {\n        address owner = ownerOf(tokenId);\n\n        require(\n            to != owner,\n            \"BT: approval to current owner\"\n        );\n\n        require(\n            msg.sender == owner || isApprovedForAll(owner, msg.sender),\n            \"BT: approve caller is not owner nor approved for all\"\n        );\n\n        approvedIDs[tokenId] = _getUserID(to);\n        emit Approval(owner, to, tokenId);\n    }\n\n    function _exists(uint256 tokenId)\n        internal\n        view\n        returns (bool)\n    {\n        return ownerOf(tokenId) != address(0);\n    }\n\n    function getApproved(uint256 tokenId)\n        public\n        view\n        returns (address)\n    {\n        require(\n            _exists(tokenId),\n            \"BT: approved query for nonexistent token\"\n        );\n\n        return userIDToAddress[approvedIDs[tokenId]];\n    }\n\n    function totalSupply()\n        public\n        view\n        returns (uint)\n    {\n        return tokenCount;\n    }\n\n    function balanceOf(address _owner)\n        public\n        view\n        returns (uint256)\n    {\n        return _balances[_owner];\n    }\n\n}\n\n// solium-disable security/no-inline-assembly\n\n\n\n\n\n\n\n\n\ncontract NewCards is Ownable, MultiTransfer, BatchToken, InscribableToken {\n\n    uint16 private constant MAX_UINT16 = 2**16 - 1;\n\n    uint16[] internal cardProtos;\n    uint8[] internal cardQualities;\n\n    struct Season {\n        uint16 high;\n        uint16 low;\n    }\n\n    struct Proto {\n        bool locked;\n        bool exists;\n        uint8 god;\n        uint8 cardType;\n        uint8 rarity;\n        uint8 mana;\n        uint8 attack;\n        uint8 health;\n        uint8 tribe;\n    }\n\n    event ProtoUpdated(\n        uint16 indexed id\n    );\n\n    event SeasonStarted(\n        uint16 indexed id,\n        string name,\n        uint16 indexed low,\n        uint16 indexed high\n    );\n\n    event QualityChanged(\n        uint256 indexed tokenId,\n        uint8 quality,\n        address factory\n    );\n\n    event CardsMinted(\n        uint256 indexed start,\n        address to,\n        uint16[] protos,\n        uint8[] qualities\n    );\n\n    // Value of index proto = season\n    uint16[] public protoToSeason;\n\n    address public propertyManager;\n\n    // Array containing all protos\n    Proto[] public protos;\n\n    // Array containing all seasons\n    Season[] public seasons;\n\n    // Map whether a season is tradeable or not\n    mapping(uint256 => bool) public seasonTradable;\n\n    // Map whether a factory has been authorised or not\n    mapping(address => mapping(uint256 => bool)) public factoryApproved;\n\n    // Whether a factory is approved to create a particular mythic\n    mapping(uint16 => mapping(address => bool)) public mythicApproved;\n\n    // Whether a mythic is tradable\n    mapping(uint16 => bool) public mythicTradable;\n\n    // Map whether a mythic exists or not\n    mapping(uint16 => bool) public mythicCreated;\n\n    uint16 public constant MYTHIC_THRESHOLD = 65000;\n\n    constructor(\n        uint256 _batchSize,\n        string memory _name,\n        string memory _symbol\n    )\n        public\n        BatchToken(_batchSize, _name, _symbol)\n    {\n        cardProtos.length = MAX_LENGTH;\n        cardQualities.length = MAX_LENGTH;\n        protoToSeason.length = MAX_LENGTH;\n        protos.length = MAX_LENGTH;\n        propertyManager = msg.sender;\n    }\n\n    function getDetails(\n        uint256 tokenId\n    )\n        public\n        view\n        returns (uint16 proto, uint8 quality)\n    {\n        return (cardProtos[tokenId], cardQualities[tokenId]);\n    }\n\n    function mintCard(\n        address to,\n        uint16 _proto,\n        uint8 _quality\n    )\n        public\n        returns (uint id)\n    {\n        id = _batchMint(to, 1);\n        _validateProto(_proto);\n        cardProtos[id] = _proto;\n        cardQualities[id] = _quality;\n\n        uint16[] memory ps = new uint16[](1);\n        ps[0] = _proto;\n\n        uint8[] memory qs = new uint8[](1);\n        qs[0] = _quality;\n\n        emit CardsMinted(id, to, ps, qs);\n        return id;\n    }\n\n    function mintCards(\n        address to,\n        uint16[] memory _protos,\n        uint8[] memory _qualities\n    )\n        public\n        returns (uint)\n    {\n        require(\n            _protos.length > 0,\n            \"Core: must be some protos\"\n        );\n\n        require(\n            _protos.length == _qualities.length,\n            \"Core: must be the same number of protos/qualities\"\n        );\n\n        uint256 start = _batchMint(to, uint16(_protos.length));\n        _validateAndSaveDetails(start, _protos, _qualities);\n\n        emit CardsMinted(start, to, _protos, _qualities);\n\n        return start;\n    }\n\n    function addFactory(\n        address _factory,\n        uint256 _season\n    )\n        public\n        onlyOwner\n    {\n        require(\n            seasons.length >= _season,\n            \"Core: season must exist\"\n        );\n\n        require(\n            _season > 0,\n            \"Core: season must not be 0\"\n        );\n\n        require(\n            !factoryApproved[_factory][_season],\n            \"Core: this factory is already approved\"\n        );\n\n        require(\n            !seasonTradable[_season],\n            \"Core: season must not be tradable\"\n        );\n\n        factoryApproved[_factory][_season] = true;\n    }\n\n    function approveForMythic(\n        address _factory,\n        uint16 _mythic\n    )\n        public\n        onlyOwner\n    {\n        require(\n            _mythic >= MYTHIC_THRESHOLD,\n            \"not a mythic\"\n        );\n\n        require(\n            !mythicApproved[_mythic][_factory],\n            \"Core: this factory is already approved for this mythic\"\n        );\n\n        mythicApproved[_mythic][_factory] = true;\n    }\n\n    function makeMythicTradable(\n        uint16 _mythic\n    )\n        public\n        onlyOwner\n    {\n        require(\n            _mythic >= MYTHIC_THRESHOLD,\n            \"Core: not a mythic\"\n        );\n\n        require(\n            !mythicTradable[_mythic],\n            \"Core: must not be tradable already\"\n        );\n\n        mythicTradable[_mythic] = true;\n    }\n\n    function unlockTrading(\n        uint256 _season\n    )\n        public\n        onlyOwner\n    {\n        require(\n            _season > 0 && _season <= seasons.length,\n            \"Core: must be a current season\"\n        );\n\n        require(\n            !seasonTradable[_season],\n            \"Core: season must not be tradable\"\n        );\n\n        seasonTradable[_season] = true;\n    }\n\n    function _transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    )\n        internal\n    {\n        require(\n            isTradable(tokenId),\n            \"Core: not yet tradable\"\n        );\n\n        super._transferFrom(from, to, tokenId);\n    }\n\n    function burn(uint256 _tokenId) public {\n        require(\n            isTradable(_tokenId),\n            \"Core: not yet tradable\"\n        );\n\n        super._burn(_tokenId);\n    }\n\n    function burnAll(uint256[] memory tokenIDs) public {\n        for (uint256 i = 0; i < tokenIDs.length; i++) {\n            burn(tokenIDs[i]);\n        }\n    }\n\n    function isTradable(uint256 _tokenId) public view returns (bool) {\n        uint16 proto = cardProtos[_tokenId];\n        if (proto >= MYTHIC_THRESHOLD) {\n            return mythicTradable[proto];\n        }\n        return seasonTradable[protoToSeason[proto]];\n    }\n\n    function startSeason(\n        string memory name,\n        uint16 low,\n        uint16 high\n    )\n        public\n        onlyOwner\n        returns (uint)\n    {\n        require(\n            low > 0,\n            \"Core: must not be zero proto\"\n        );\n\n        require(\n            high > low,\n            \"Core: must be a valid range\"\n        );\n\n        require(\n            seasons.length == 0 || low > seasons[seasons.length - 1].high,\n            \"Core: seasons cannot overlap\"\n        );\n\n        require(\n            MYTHIC_THRESHOLD > high,\n            \"Core: cannot go into mythic territory\"\n        );\n\n        // seasons start at 1\n        uint16 id = uint16(seasons.push(Season({ high: high, low: low })));\n\n        uint256 cp;\n        assembly { cp := protoToSeason_slot }\n        StorageWrite.repeatUint16(cp, low, (high - low) + 1, id);\n\n        emit SeasonStarted(id, name, low, high);\n\n        return id;\n    }\n\n    function updateProtos(\n        uint16[] memory _ids,\n        uint8[] memory _gods,\n        uint8[] memory _cardTypes,\n        uint8[] memory _rarities,\n        uint8[] memory _manas,\n        uint8[] memory _attacks,\n        uint8[] memory _healths,\n        uint8[] memory _tribes\n    ) public onlyOwner {\n        for (uint256 i = 0; i < _ids.length; i++) {\n            uint16 id = _ids[i];\n\n            require(\n                id > 0,\n                \"Core: proto must not be zero\"\n            );\n\n            Proto memory proto = protos[id];\n            require(\n                !proto.locked,\n                \"Core: proto is locked\"\n            );\n\n            protos[id] = Proto({\n                locked: false,\n                exists: true,\n                god: _gods[i],\n                cardType: _cardTypes[i],\n                rarity: _rarities[i],\n                mana: _manas[i],\n                attack: _attacks[i],\n                health: _healths[i],\n                tribe: _tribes[i]\n            });\n            emit ProtoUpdated(id);\n        }\n    }\n\n    function lockProtos(uint16[] memory _ids) public onlyOwner {\n        require(\n            _ids.length > 0,\n            \"must lock some\"\n        );\n\n        for (uint256 i = 0; i < _ids.length; i++) {\n            uint16 id = _ids[i];\n            require(\n                id > 0,\n                \"proto must not be zero\"\n            );\n\n            Proto storage proto = protos[id];\n\n            require(\n                !proto.locked,\n                \"proto is locked\"\n            );\n\n            require(\n                proto.exists,\n                \"proto must exist\"\n            );\n\n            proto.locked = true;\n            emit ProtoUpdated(id);\n        }\n    }\n\n    function _validateAndSaveDetails(\n        uint256 start,\n        uint16[] memory _protos,\n        uint8[] memory _qualities\n    )\n        internal\n    {\n        _validateProtos(_protos);\n\n        uint256 cp;\n        assembly { cp := cardProtos_slot }\n        StorageWrite.uint16s(cp, start, _protos);\n        uint256 cq;\n        assembly { cq := cardQualities_slot }\n        StorageWrite.uint8s(cq, start, _qualities);\n    }\n\n    function _validateProto(uint16 proto) internal {\n        if (proto >= MYTHIC_THRESHOLD) {\n            _checkCanCreateMythic(proto);\n        } else {\n\n            uint256 season = protoToSeason[proto];\n\n            require(\n                season != 0,\n                \"Core: must have season set\"\n            );\n\n            require(\n                factoryApproved[msg.sender][season],\n                \"Core: must be approved factory for this season\"\n            );\n        }\n    }\n\n    function _validateProtos(uint16[] memory _protos) internal {\n        uint16 maxProto = 0;\n        uint16 minProto = MAX_UINT16;\n        for (uint256 i = 0; i < _protos.length; i++) {\n            uint16 proto = _protos[i];\n            if (proto >= MYTHIC_THRESHOLD) {\n                _checkCanCreateMythic(proto);\n            } else {\n                if (proto > maxProto) {\n                    maxProto = proto;\n                }\n                if (minProto > proto) {\n                    minProto = proto;\n                }\n            }\n        }\n\n        if (maxProto != 0) {\n            uint256 season = protoToSeason[maxProto];\n            // cards must be from the same season\n            require(\n                season != 0,\n                \"Core: must have season set\"\n            );\n\n            require(\n                season == protoToSeason[minProto],\n                \"Core: can only create cards from the same season\"\n            );\n\n            require(\n                factoryApproved[msg.sender][season],\n                \"Core: must be approved factory for this season\"\n            );\n        }\n    }\n\n    function _checkCanCreateMythic(uint16 proto) internal {\n\n        require(\n            mythicApproved[proto][msg.sender],\n            \"Core: not approved to create this mythic\"\n        );\n\n        require(\n            !mythicCreated[proto],\n            \"Core: mythic has already been created\"\n        );\n\n        mythicCreated[proto] = true;\n    }\n\n    function setQuality(\n        uint256 _tokenId,\n        uint8 _quality\n    )\n        public\n    {\n        uint16 proto = cardProtos[_tokenId];\n        // wont' be able to change mythic season\n        uint256 season = protoToSeason[proto];\n\n        require(\n            factoryApproved[msg.sender][season],\n            \"Core: factory can't change quality of this season\"\n        );\n\n        cardQualities[_tokenId] = _quality;\n        emit QualityChanged(_tokenId, _quality, msg.sender);\n    }\n\n    function setPropertyManager(address _manager) public onlyOwner {\n        propertyManager = _manager;\n    }\n\n    function setProperty(uint256 _id, bytes32 _key, bytes32 _value) public {\n        require(\n            msg.sender == propertyManager,\n            \"Core: must be property manager\"\n        );\n\n        _setProperty(_id, _key, _value);\n    }\n\n    function setClassProperty(bytes32 _key, bytes32 _value) public {\n        require(\n            msg.sender == propertyManager,\n            \"Core: must be property manager\"\n        );\n\n        _setClassProperty(_key, _value);\n    }\n\n    string public baseURI = \"https://api.immutable.com/asset/\";\n\n    function setBaseURI(string memory uri) public onlyOwner {\n        baseURI = uri;\n    }\n\n    function tokenURI(uint256 tokenId) external view returns (string memory) {\n        return string(abi.encodePacked(\n            baseURI,\n            String.fromAddress(address(this)),\n            \"/\",\n            String.fromUint(tokenId)\n        ));\n    }\n\n}\n\n\n// solium-disable security/no-inline-assembly\n\n\n\n\n\n\n\n\n\ncontract Cards is Ownable, MultiTransfer, BatchToken, ImmutableToken, InscribableToken {\n\n    uint16 private constant MAX_UINT16 = 2**16 - 1;\n\n    uint16[] public cardProtos;\n    uint8[] public cardQualities;\n\n    struct Season {\n        uint16 high;\n        uint16 low;\n    }\n\n    struct Proto {\n        bool locked;\n        bool exists;\n        uint8 god;\n        uint8 cardType;\n        uint8 rarity;\n        uint8 mana;\n        uint8 attack;\n        uint8 health;\n        uint8 tribe;\n    }\n\n    event ProtoUpdated(\n        uint16 indexed id\n    );\n\n    event SeasonStarted(\n        uint16 indexed id,\n        string name,\n        uint16 indexed low,\n        uint16 indexed high\n    );\n\n    event QualityChanged(\n        uint256 indexed tokenId,\n        uint8 quality,\n        address factory\n    );\n\n    event CardsMinted(\n        uint256 indexed start,\n        address to,\n        uint16[] protos,\n        uint8[] qualities\n    );\n\n    // Value of index proto = season\n    uint16[] public protoToSeason;\n\n    address public propertyManager;\n\n    // Array containing all protos\n    Proto[] public protos;\n\n    // Array containing all seasons\n    Season[] public seasons;\n\n    // Map whether a season is tradeable or not\n    mapping(uint256 => bool) public seasonTradable;\n\n    // Map whether a factory has been authorised or not\n    mapping(address => mapping(uint256 => bool)) public factoryApproved;\n\n    // Whether a factory is approved to create a particular mythic\n    mapping(uint16 => mapping(address => bool)) public mythicApproved;\n\n    // Whether a mythic is tradable\n    mapping(uint16 => bool) public mythicTradable;\n\n    // Map whether a mythic exists or not\n    mapping(uint16 => bool) public mythicCreated;\n\n    uint16 public constant MYTHIC_THRESHOLD = 65000;\n\n    constructor(\n        uint256 _batchSize,\n        string memory _name,\n        string memory _symbol\n    )\n        public\n        BatchToken(_batchSize, _name, _symbol)\n    {\n        cardProtos.length = MAX_LENGTH;\n        cardQualities.length = MAX_LENGTH;\n        protoToSeason.length = MAX_LENGTH;\n        protos.length = MAX_LENGTH;\n        propertyManager = msg.sender;\n    }\n\n    function getDetails(\n        uint256 tokenId\n    )\n        public\n        view\n        returns (uint16 proto, uint8 quality)\n    {\n        return (cardProtos[tokenId], cardQualities[tokenId]);\n    }\n\n    function mintCard(\n        address to,\n        uint16 _proto,\n        uint8 _quality\n    )\n        external\n        returns (uint id)\n    {\n        id = _batchMint(to, 1);\n        _validateProto(_proto);\n        cardProtos[id] = _proto;\n        cardQualities[id] = _quality;\n\n        uint16[] memory ps = new uint16[](1);\n        ps[0] = _proto;\n\n        uint8[] memory qs = new uint8[](1);\n        qs[0] = _quality;\n\n        emit CardsMinted(id, to, ps, qs);\n        return id;\n    }\n\n    function mintCards(\n        address to,\n        uint16[] calldata _protos,\n        uint8[] calldata _qualities\n    )\n        external\n        returns (uint)\n    {\n        require(\n            _protos.length > 0,\n            \"Core: must be some protos\"\n        );\n\n        require(\n            _protos.length == _qualities.length,\n            \"Core: must be the same number of protos/qualities\"\n        );\n\n        uint256 start = _batchMint(to, uint16(_protos.length));\n        _validateAndSaveDetails(start, _protos, _qualities);\n\n        emit CardsMinted(start, to, _protos, _qualities);\n\n        return start;\n    }\n\n    function addFactory(\n        address _factory,\n        uint256 _season\n    )\n        public\n        onlyOwner\n    {\n        require(\n            seasons.length >= _season,\n            \"Core: season must exist\"\n        );\n\n        require(\n            _season > 0,\n            \"Core: season must not be 0\"\n        );\n\n        require(\n            !factoryApproved[_factory][_season],\n            \"Core: this factory is already approved\"\n        );\n\n        require(\n            !seasonTradable[_season],\n            \"Core: season must not be tradable\"\n        );\n\n        factoryApproved[_factory][_season] = true;\n    }\n\n    function approveForMythic(\n        address _factory,\n        uint16 _mythic\n    )\n        public\n        onlyOwner\n    {\n        require(\n            _mythic >= MYTHIC_THRESHOLD,\n            \"not a mythic\"\n        );\n\n        require(\n            !mythicApproved[_mythic][_factory],\n            \"Core: this factory is already approved for this mythic\"\n        );\n\n        mythicApproved[_mythic][_factory] = true;\n    }\n\n    function makeMythicTradable(\n        uint16 _mythic\n    )\n        public\n        onlyOwner\n    {\n        require(\n            _mythic >= MYTHIC_THRESHOLD,\n            \"Core: not a mythic\"\n        );\n\n        require(\n            !mythicTradable[_mythic],\n            \"Core: must not be tradable already\"\n        );\n\n        mythicTradable[_mythic] = true;\n    }\n\n    function unlockTrading(\n        uint256 _season\n    )\n        public\n        onlyOwner\n    {\n        require(\n            _season > 0 && _season <= seasons.length,\n            \"Core: must be a current season\"\n        );\n\n        require(\n            !seasonTradable[_season],\n            \"Core: season must not be tradable\"\n        );\n\n        seasonTradable[_season] = true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    )\n        public\n    {\n        require(\n            isTradable(tokenId),\n            \"Core: not yet tradable\"\n        );\n\n        super.transferFrom(from, to, tokenId);\n    }\n\n    function burn(uint256 _tokenId) public {\n        require(\n            isTradable(_tokenId),\n            \"Core: not yet tradable\"\n        );\n\n        super._burn(_tokenId);\n    }\n\n    function burnAll(uint256[] memory tokenIDs) public {\n        for (uint256 i = 0; i < tokenIDs.length; i++) {\n            burn(tokenIDs[i]);\n        }\n    }\n\n    function isTradable(uint256 _tokenId) public view returns (bool) {\n        uint16 proto = cardProtos[_tokenId];\n        if (proto >= MYTHIC_THRESHOLD) {\n            return mythicTradable[proto];\n        }\n        return seasonTradable[protoToSeason[proto]];\n    }\n\n    function startSeason(\n        string memory name,\n        uint16 low,\n        uint16 high\n    )\n        public\n        onlyOwner\n        returns (uint)\n    {\n        require(\n            low > 0,\n            \"Core: must not be zero proto\"\n        );\n\n        require(\n            high > low,\n            \"Core: must be a valid range\"\n        );\n\n        require(\n            seasons.length == 0 || low > seasons[seasons.length - 1].high,\n            \"Core: seasons cannot overlap\"\n        );\n\n        require(\n            MYTHIC_THRESHOLD > high,\n            \"Core: cannot go into mythic territory\"\n        );\n\n        // seasons start at 1\n        uint16 id = uint16(seasons.push(Season({ high: high, low: low })));\n\n        uint256 cp;\n        assembly { cp := protoToSeason_slot }\n        StorageWrite.repeatUint16(cp, low, (high - low) + 1, id);\n\n        emit SeasonStarted(id, name, low, high);\n\n        return id;\n    }\n\n    function updateProtos(\n        uint16[] memory _ids,\n        uint8[] memory _gods,\n        uint8[] memory _cardTypes,\n        uint8[] memory _rarities,\n        uint8[] memory _manas,\n        uint8[] memory _attacks,\n        uint8[] memory _healths,\n        uint8[] memory _tribes\n    ) public onlyOwner {\n        for (uint256 i = 0; i < _ids.length; i++) {\n            uint16 id = _ids[i];\n\n            require(\n                id > 0,\n                \"Core: proto must not be zero\"\n            );\n\n            Proto memory proto = protos[id];\n            require(\n                !proto.locked,\n                \"Core: proto is locked\"\n            );\n\n            protos[id] = Proto({\n                locked: false,\n                exists: true,\n                god: _gods[i],\n                cardType: _cardTypes[i],\n                rarity: _rarities[i],\n                mana: _manas[i],\n                attack: _attacks[i],\n                health: _healths[i],\n                tribe: _tribes[i]\n            });\n            emit ProtoUpdated(id);\n        }\n    }\n\n    function lockProtos(uint16[] memory _ids) public onlyOwner {\n        require(\n            _ids.length > 0,\n            \"must lock some\"\n        );\n\n        for (uint256 i = 0; i < _ids.length; i++) {\n            uint16 id = _ids[i];\n            require(\n                id > 0,\n                \"proto must not be zero\"\n            );\n\n            Proto storage proto = protos[id];\n\n            require(\n                !proto.locked,\n                \"proto is locked\"\n            );\n\n            require(\n                proto.exists,\n                \"proto must exist\"\n            );\n\n            proto.locked = true;\n            emit ProtoUpdated(id);\n        }\n    }\n\n    function _validateAndSaveDetails(\n        uint256 start,\n        uint16[] memory _protos,\n        uint8[] memory _qualities\n    )\n        internal\n    {\n        _validateProtos(_protos);\n\n        uint256 cp;\n        assembly { cp := cardProtos_slot }\n        StorageWrite.uint16s(cp, start, _protos);\n        uint256 cq;\n        assembly { cq := cardQualities_slot }\n        StorageWrite.uint8s(cq, start, _qualities);\n    }\n\n    function _validateProto(uint16 proto) internal {\n        if (proto >= MYTHIC_THRESHOLD) {\n            _checkCanCreateMythic(proto);\n        } else {\n\n            uint256 season = protoToSeason[proto];\n\n            require(\n                season != 0,\n                \"Core: must have season set\"\n            );\n\n            require(\n                factoryApproved[msg.sender][season],\n                \"Core: must be approved factory for this season\"\n            );\n        }\n    }\n\n    function _validateProtos(uint16[] memory _protos) internal {\n        uint16 maxProto = 0;\n        uint16 minProto = MAX_UINT16;\n        for (uint256 i = 0; i < _protos.length; i++) {\n            uint16 proto = _protos[i];\n            if (proto >= MYTHIC_THRESHOLD) {\n                _checkCanCreateMythic(proto);\n            } else {\n                if (proto > maxProto) {\n                    maxProto = proto;\n                }\n                if (minProto > proto) {\n                    minProto = proto;\n                }\n            }\n        }\n\n        if (maxProto != 0) {\n            uint256 season = protoToSeason[maxProto];\n            // cards must be from the same season\n            require(\n                season != 0,\n                \"Core: must have season set\"\n            );\n\n            require(\n                season == protoToSeason[minProto],\n                \"Core: can only create cards from the same season\"\n            );\n\n            require(\n                factoryApproved[msg.sender][season],\n                \"Core: must be approved factory for this season\"\n            );\n        }\n    }\n\n    function _checkCanCreateMythic(uint16 proto) internal {\n\n        require(\n            mythicApproved[proto][msg.sender],\n            \"Core: not approved to create this mythic\"\n        );\n\n        require(\n            !mythicCreated[proto],\n            \"Core: mythic has already been created\"\n        );\n\n        mythicCreated[proto] = true;\n    }\n\n    function setQuality(\n        uint256 _tokenId,\n        uint8 _quality\n    )\n        public\n    {\n        uint16 proto = cardProtos[_tokenId];\n        // wont' be able to change mythic season\n        uint256 season = protoToSeason[proto];\n\n        require(\n            factoryApproved[msg.sender][season],\n            \"Core: factory can't change quality of this season\"\n        );\n\n        cardQualities[_tokenId] = _quality;\n        emit QualityChanged(_tokenId, _quality, msg.sender);\n    }\n\n    function setPropertyManager(address _manager) public onlyOwner {\n        propertyManager = _manager;\n    }\n\n    function setProperty(uint256 _id, bytes32 _key, bytes32 _value) public {\n        require(\n            msg.sender == propertyManager,\n            \"Core: must be property manager\"\n        );\n\n        _setProperty(_id, _key, _value);\n    }\n\n    function setClassProperty(bytes32 _key, bytes32 _value) public {\n        require(\n            msg.sender == propertyManager,\n            \"Core: must be property manager\"\n        );\n\n        _setClassProperty(_key, _value);\n    }\n\n}\n\n\n\ncontract BatchWrapper is NewCards {\n\n    uint16 private constant MAX_UINT16 = 2**16 - 1;\n    Cards public old;\n    bool public migrating;\n\n    constructor(\n        Cards _old,\n        uint256 _batchSize,\n        string memory _name,\n        string memory _symbol\n    ) public NewCards(_batchSize, _name, _symbol) {\n        old = _old;\n    }\n\n    function setMigrating(bool _migrating) public onlyOwner {\n        migrating = _migrating;\n    }\n\n    function copyUntil(uint gasThreshold) public {\n        while (gasleft() > gasThreshold) {\n            copyNextBatch();\n        }\n    }\n\n    function mintCards(address _to, uint16[] memory _protos, uint8[] memory _qualities) public returns (uint id) {\n        require(!migrating, \"must not be migrating\");\n        super.mintCards(_to, _protos, _qualities);\n    }\n\n    function mintCard(address _to, uint16 _proto, uint8 _quality) public returns (uint id) {\n        require(!migrating, \"must not be migrating\");\n        super.mintCard(_to, _proto, _quality);\n    }\n\n    // copy all batches from the old contracts\n    // leave ids intact\n    function copyNextBatch() public {\n        require(migrating, \"must be migrating\");\n        uint256 start = nextBatch;\n        if (old.cardProtos(start) != 0) {\n            (uint48 userID, uint16 size) = old.batches(start);\n            address to = old.userIDToAddress(userID);\n            uint48 uID = _getUserID(to);\n            require(size > 0 && uID > 0, \"incorrect batch or limit reached\");\n            batches[start] = Batch({\n                userID: uID,\n                size: size\n            });\n            uint256 end = start.add(size);\n            for (uint256 i = start; i < end; i++) {\n                emit Transfer(address(0), to, i);\n            }\n            nextBatch = nextBatch.add(batchSize);\n            _balances[to] = _balances[to].add(size);\n            tokenCount = tokenCount.add(size);\n        }\n        nextBatch += batchSize;\n    }\n\n    function isOld(uint _tokenId) public view returns (bool) {\n        require(_exists(_tokenId), \"card does not exist\");\n        return cardProtos[_tokenId] == 0;\n    }\n\n    function getProto(uint _tokenId) public view returns (uint16) {\n        return isOld(_tokenId) ? old.cardProtos(_tokenId) : cardProtos[_tokenId];\n    }\n\n    function getQuality(uint _tokenId) public view returns (uint8) {\n        return isOld(_tokenId) ? old.cardQualities(_tokenId) : cardQualities[_tokenId];\n    }\n\n    function getDetails(uint256 tokenId) public view returns (uint16 proto, uint8 quality) {\n        return isOld(tokenId) ? old.getDetails(tokenId) : (cardProtos[tokenId], cardQualities[tokenId]);\n    }\n\n    function isTradable(uint256 _tokenId) public view returns (bool) {\n        uint16 proto = getProto(_tokenId);\n        if (proto >= MYTHIC_THRESHOLD) {\n            return mythicTradable[proto];\n        }\n        return seasonTradable[protoToSeason[proto]];\n    }\n\n    function _transferFrom(address from, address to, uint tokenId) internal {\n        require(\n            isTradable(tokenId),\n            \"BW: not yet tradable\"\n        );\n        super._transferFrom(from, to, tokenId);\n    }\n\n    // update validate protos to check if a proto is 0\n    // prevent untradable cards\n    function _validateProtos(uint16[] memory _protos) internal {\n\n        uint16 maxProto = 0;\n        uint16 minProto = MAX_UINT16;\n        for (uint256 i = 0; i < _protos.length; i++) {\n            uint16 proto = _protos[i];\n            if (proto >= MYTHIC_THRESHOLD) {\n                _checkCanCreateMythic(proto);\n            } else {\n                require(proto != 0, \"proto is zero\");\n                if (proto > maxProto) {\n                    maxProto = proto;\n                }\n                if (minProto > proto) {\n                    minProto = proto;\n                }\n            }\n        }\n\n        if (maxProto != 0) {\n            uint256 season = protoToSeason[maxProto];\n            // cards must be from the same season\n            require(\n                season != 0,\n                \"Core: must have season set\"\n            );\n\n            require(\n                season == protoToSeason[minProto],\n                \"Core: can only create cards from the same season\"\n            );\n\n            require(\n                factoryApproved[msg.sender][season],\n                \"Core: must be approved factory for this season\"\n            );\n        }\n    }\n\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"mythicTradable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIDs\",\"type\":\"uint256[]\"}],\"name\":\"transferAllFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIDs\",\"type\":\"uint256[]\"}],\"name\":\"burnAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getProto\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"_ids\",\"type\":\"uint16[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_gods\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_cardTypes\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_rarities\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_manas\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_attacks\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_healths\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_tribes\",\"type\":\"uint8[]\"}],\"name\":\"updateProtos\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setPropertyManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToUserID\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mythicApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isOld\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"factoryApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MYTHIC_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"_ids\",\"type\":\"uint16[]\"}],\"name\":\"lockProtos\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getTokenKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getClassKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasThreshold\",\"type\":\"uint256\"}],\"name\":\"copyUntil\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrating\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_value\",\"type\":\"bytes32\"}],\"name\":\"setProperty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getBatch\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"userID\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"size\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_proto\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"_quality\",\"type\":\"uint8\"}],\"name\":\"mintCard\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_mythic\",\"type\":\"uint16\"}],\"name\":\"approveForMythic\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"name\":\"userIDToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIDs\",\"type\":\"uint256[]\"}],\"name\":\"safeTransferAllFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getBatchStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"low\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"high\",\"type\":\"uint16\"}],\"name\":\"startSeason\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getClassProperty\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_value\",\"type\":\"bytes32\"}],\"name\":\"setClassProperty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"protos\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"god\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"cardType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"rarity\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"mana\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"attack\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"health\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tribe\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"safeTransferBatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"seasonTradable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"batches\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"userID\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"size\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"protoToSeason\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"old\",\"outputs\":[{\"internalType\":\"contract Cards\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getDetails\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"proto\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"quality\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_season\",\"type\":\"uint256\"}],\"name\":\"unlockTrading\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"properties\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"transferBatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint16[]\",\"name\":\"_protos\",\"type\":\"uint16[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_qualities\",\"type\":\"uint8[]\"}],\"name\":\"mintCards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getProperty\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_value\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"copyNextBatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"mythicCreated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isTradable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_quality\",\"type\":\"uint8\"}],\"name\":\"setQuality\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"propertyManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextBatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_mythic\",\"type\":\"uint16\"}],\"name\":\"makeMythicTradable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getQuality\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_season\",\"type\":\"uint256\"}],\"name\":\"addFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"batchSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"seasons\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"high\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"low\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_migrating\",\"type\":\"bool\"}],\"name\":\"setMigrating\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Cards\",\"name\":\"_old\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_batchSize\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"id\",\"type\":\"uint16\"}],\"name\":\"ProtoUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"id\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"low\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"high\",\"type\":\"uint16\"}],\"name\":\"SeasonStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"quality\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"QualityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16[]\",\"name\":\"protos\",\"type\":\"uint16[]\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"qualities\",\"type\":\"uint8[]\"}],\"name\":\"CardsMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"ClassPropertySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"TokenPropertySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BatchWrapper","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000629cdec6acc980ebeebea9e5003bcd44db9fc5ce00000000000000000000000000000000000000000000000000000000000004e3000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000014476f647320556e636861696e656420436172647300000000000000000000000000000000000000000000000000000000000000000000000000000000000000044341524400000000000000000000000000000000000000000000000000000000","Library":"","LicenseType":"","SwarmSource":"bzzr://b4a2806e5e4bb54a4b19ea00e5318576a2f716985ad1f20b129320d7703b834c"}]}