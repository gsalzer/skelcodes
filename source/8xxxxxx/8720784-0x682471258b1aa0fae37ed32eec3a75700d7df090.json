{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2019-10-11\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2019-10-11\r\n*/\r\n\r\npragma solidity ^0.5.11;\r\n\r\ncontract ERC20 {\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  function transfer(address to, uint value) public returns(bool);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ERC223 {\r\n    function transfer(address to, uint value, bytes memory data) public returns(bool);\r\n    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\r\n}\r\n\r\ncontract ERC223ReceivingContract { \r\n    function tokenFallback(address _from, uint _value, bytes memory _data) public;\r\n}\r\n\r\n\r\ncontract Configics is ERC20, ERC223 {\r\n    \r\n    string internal _name;\r\n    string internal _symbol;\r\n    uint8 internal _decimals;\r\n    uint256 internal _totalSupply;\r\n    uint256 internal lockedBalance;\r\n    address internal  _admin;\r\n\r\n    mapping (address => uint256) internal balances;\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n    \r\n    \r\n    struct vestingDetails {\r\n        address user;\r\n        uint256 amount;\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        bool vestingStatus;\r\n    }\r\n    \r\n    mapping (address=> vestingDetails) public vesting;\r\n\r\n    constructor() public {\r\n        \r\n        _admin = msg.sender;\r\n        _symbol = \"Configics\";  \r\n        _name = \"CNG\"; \r\n        _decimals = 18; \r\n        _totalSupply = 377777777777* 10**uint(_decimals);\r\n        balances[msg.sender] = _totalSupply;\r\n    }\r\n    \r\n    //Safe Math functions\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        if (a == 0) {\r\n        return 0;}\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function name() public view returns (string memory) \r\n    {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) \r\n    {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) \r\n    {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) \r\n    {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    modifier onlyOwner(){\r\n        require(msg.sender == _admin);\r\n        _;\r\n    }\r\n    \r\n    //ERC20 functions\r\n   function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0) && _value > 0);\r\n        require(_value <= balances[msg.sender]);\r\n        balances[msg.sender] = sub(balances[msg.sender], _value);\r\n        balances[_to] = add(balances[_to], _value);\r\n        emit ERC20.Transfer(msg.sender, _to, _value);\r\n        return true;\r\n   }\r\n   \r\n  function openVesting(address _user,uint256 _amount, uint256 _eTime) onlyOwner public returns(bool)  {\r\n      lockTokens(_amount);\r\n      vesting[_user].user = _user;\r\n      vesting[_user].amount= _amount;\r\n      vesting[_user].startTime = now;\r\n      vesting[_user].endTime = _eTime;\r\n      vesting[_user].vestingStatus = true;\r\n      return true;\r\n  }\r\n  \r\n  function releaseVesting(address _user) onlyOwner public returns(bool) {\r\n      require(now > vesting[_user].endTime);\r\n      vesting[_user].vestingStatus = false;\r\n      unlockTokens(vesting[_user].amount);\r\n      return true;\r\n  }\r\n\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n        require(_owner != address(0));\r\n        return balances[_owner];\r\n   }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0) && _from != address(0) && _value > 0);\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        \r\n        balances[_from] = sub(balances[_from], _value);\r\n        balances[_to] = add(balances[_to], _value);\r\n        allowed[_from][msg.sender] = sub(allowed[_from][msg.sender], _value);\r\n        emit ERC20.Transfer(_from, _to, _value);\r\n        return true;\r\n   }\r\n\r\n   function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit ERC20.Approval(msg.sender, _spender, _value);\r\n        return true;\r\n   }\r\n\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n   }\r\n\r\n  function mint(uint256 _amount) onlyOwner public returns (bool) {\r\n        require( _amount > 0 );\r\n        _totalSupply = add(_totalSupply,_amount);\r\n        balances[_admin] +=_amount;\r\n        return true;\r\n  }\r\n  \r\n  function lockTokens(uint256 _amount) onlyOwner public returns(bool){\r\n        require( balances[_admin]>=_amount);\r\n        balances[_admin] = sub(balances[_admin],_amount);\r\n        lockedBalance = add(lockedBalance,_amount);\r\n        return true;\r\n  }\r\n\r\n  function unlockTokens(uint256 _amount) onlyOwner public returns (bool) {\r\n        require(lockedBalance >= _amount);\r\n        balances[_admin] = add(balances[_admin],  _amount);\r\n        lockedBalance = sub(lockedBalance,_amount);\r\n        return true;\r\n  }\r\n \r\n  function  viewLockedBalance() onlyOwner public view returns(uint256) {\r\n        return lockedBalance;\r\n  } \r\n  \r\n  //ERC223 functions\r\n    function transfer(address _to, uint _value, bytes memory _data) public returns (bool ){\r\n        require(_value > 0 );\r\n        if(isContract(_to)) {\r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n            receiver.tokenFallback(msg.sender, _value, _data);\r\n        }\r\n        balances[msg.sender] = sub(balances[msg.sender],_value);\r\n        balances[_to] = add(balances[_to],(_value));\r\n        emit Transfer(msg.sender, _to, _value, _data);\r\n        return true;\r\n    }\r\n    \r\n  function isContract(address _addr) private view returns (bool is_contract) {\r\n      uint length;\r\n      assembly {\r\n            //retrieve the size of the code on target address, this needs assembly\r\n            length := extcodesize(_addr)\r\n      }\r\n      return (length>0);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_eTime\",\"type\":\"uint256\"}],\"name\":\"openVesting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"lockTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unlockTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"releaseVesting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vesting\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"vestingStatus\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewLockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Configics","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://49597293f9d1d1e7b05b33ff3b212de69bc03adb9fbcb2b4006c2429013b3a75"}]}