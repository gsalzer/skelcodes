{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.7;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error.\r\n */\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor(address initialOwner) internal {\r\n        require(initialOwner != address(0));\r\n        _owner = initialOwner;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"New owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function balanceOf(address who) external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n */\r\ncontract ReentrancyGuard {\r\n    uint256 private _guardCounter;\r\n\r\n    constructor () internal {\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n}\r\n\r\n/**\r\n * @title GoldRubleBonusStorage interface\r\n */\r\n interface GoldRubleBonusStorage {\r\n     function sendBonus(address account, uint256 amount) external;\r\n     function RS_transferOwnership(address newOwner) external;\r\n     function RS_changeInterval(uint256 newInterval) external;\r\n     function RS_addReferrer(address referrer) external;\r\n     function RS_referrerOf(address player) external view returns(address);\r\n     function RS_interval() external view returns(uint256);\r\n }\r\n\r\n\r\n/**\r\n * @title Invest contract.\r\n */\r\ncontract INVEST is ReentrancyGuard, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // The token being sold\r\n    IERC20 private _token;\r\n\r\n    // GoldRubleBonusStorage contract\r\n    GoldRubleBonusStorage private _GRBS;\r\n\r\n    // Address where funds are collected\r\n    address payable private _wallet;\r\n\r\n    // Amount of wei raised\r\n    uint256 private _weiRaised;\r\n\r\n    // Amount of reserved tokens\r\n    uint256 private _reserve;\r\n\r\n    // How many token units a buyer gets per 1 ether\r\n    uint256 private _rate = 2e15;\r\n\r\n    // Minimum amount of wei to invest\r\n    uint256 private _minimum = 0.5 ether;\r\n\r\n    // Token amount set as share\r\n    uint256 private _share = 1000000000000000;\r\n\r\n    // Ref Bonus per share\r\n    uint256 private _bonusPerShare = 50000000000000;\r\n\r\n    // Delay period (UNIX time)\r\n    uint256 private _delay;\r\n\r\n    // User data\r\n    mapping (address => User) users;\r\n    struct User {\r\n        Deposit[] deposits;\r\n        uint256 checkpoint;\r\n        uint256 reserved;\r\n    }\r\n    struct Deposit {\r\n        uint256 amount;\r\n        uint256 endtime;\r\n        uint256 delay;\r\n    }\r\n\r\n    // Pause of recieving new deposits\r\n    bool public paused;\r\n\r\n    modifier notPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    // Requiring of referrer\r\n    bool public refRequired;\r\n\r\n    // Enable of referral programm\r\n    enum ReferrerSystem {OFF, ON}\r\n    ReferrerSystem public RS = ReferrerSystem.OFF;\r\n\r\n    // Sending bonus to referral\r\n    bool public referralMode;\r\n\r\n    // Events\r\n    event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount, uint256 delay);\r\n    event Withdrawn(address indexed account, uint256 amount);\r\n\r\n    /**\r\n     * @param rate Number of token units a buyer gets per wei\r\n     * @param wallet Address where collected funds will be forwarded to\r\n     * @param token Address of the token being sold\r\n     */\r\n    constructor(uint256 rate, address payable wallet, IERC20 token, address initialOwner, address GRBSAddr) public Ownable(initialOwner) {\r\n        require(rate != 0, \"Rate is 0\");\r\n        require(wallet != address(0), \"Wallet is the zero address\");\r\n        require(address(token) != address(0), \"Token is the zero address\");\r\n\r\n        _rate = rate;\r\n        _wallet = wallet;\r\n        _token = token;\r\n        _GRBS = GoldRubleBonusStorage(GRBSAddr);\r\n    }\r\n\r\n    /**\r\n     * @dev fallback function\r\n     */\r\n    function() external payable {\r\n        if (msg.value > 0) {\r\n            buyTokens(msg.sender);\r\n        } else {\r\n            withdraw();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev low level token purchase\r\n     * This function has a non-reentrancy guard\r\n     * @param beneficiary Recipient of the token purchase\r\n     */\r\n    function buyTokens(address beneficiary) public notPaused nonReentrant payable {\r\n        require(beneficiary != address(0), \"Beneficiary is the zero address\");\r\n        require(msg.value >= _minimum, \"Wei amount is less than minimum\");\r\n        if (refRequired) {\r\n            require(_GRBS.RS_referrerOf(beneficiary) != address(0));\r\n        }\r\n\r\n        uint256 weiAmount = msg.value;\r\n\r\n        uint256 tokens = getTokenAmount(weiAmount);\r\n        require(tokens <= _token.balanceOf(address(this)).sub(_reserve));\r\n\r\n        _weiRaised = _weiRaised.add(weiAmount);\r\n\r\n        _wallet.transfer(weiAmount);\r\n\r\n        if (_delay == 0) {\r\n            _token.transfer(beneficiary, tokens);\r\n        } else {\r\n            createDeposit(beneficiary, tokens);\r\n        }\r\n\r\n        if (_GRBS.RS_referrerOf(beneficiary) != address(0)) {\r\n            if (RS == ReferrerSystem.ON) {\r\n                _GRBS.sendBonus(_GRBS.RS_referrerOf(beneficiary), tokens.div(_share).mul(_bonusPerShare));\r\n                if (referralMode) {\r\n                    _GRBS.sendBonus(beneficiary, tokens.div(_share).mul(_bonusPerShare));\r\n                }\r\n            }\r\n        } else if (msg.data.length == 20) {\r\n            addReferrer();\r\n        }\r\n\r\n        emit TokensPurchased(msg.sender, beneficiary, weiAmount, tokens, _delay);\r\n    }\r\n\r\n    /**\r\n     * @dev internal invest function\r\n     * @param account address of users\r\n     * @param amount amount of tokens to deposit\r\n     */\r\n    function createDeposit(address account, uint256 amount) internal {\r\n        if (users[account].checkpoint > 0) {\r\n            users[account].reserved += getDividends(account);\r\n        }\r\n        users[account].checkpoint = block.timestamp;\r\n        users[account].deposits.push(Deposit(amount, block.timestamp.add(_delay), _delay));\r\n\r\n        _reserve = _reserve.add(amount);\r\n    }\r\n\r\n    /**\r\n     * @dev withdraw available dividens\r\n     */\r\n    function withdraw() public {\r\n        uint256 payout = getDividends(msg.sender);\r\n        if (users[msg.sender].reserved > 0) {\r\n            users[msg.sender].reserved = 0;\r\n        }\r\n        if (payout != 0) {\r\n            users[msg.sender].checkpoint = block.timestamp;\r\n            _token.transfer(msg.sender, payout);\r\n\r\n            _reserve = _reserve.sub(payout);\r\n            emit Withdrawn(msg.sender, payout);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev internal addReferrer function\r\n     */\r\n    function addReferrer() internal {\r\n        address referrer = bytesToAddress(bytes(msg.data));\r\n        if (referrer != msg.sender) {\r\n            uint256 interval = _GRBS.RS_interval();\r\n            _GRBS.RS_changeInterval(0);\r\n            _GRBS.RS_addReferrer(referrer);\r\n            _GRBS.RS_changeInterval(interval);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev internal function to convert bytes type to address\r\n     */\r\n    function bytesToAddress(bytes memory source) internal pure returns(address parsedReferrer) {\r\n        assembly {\r\n            parsedReferrer := mload(add(source,0x14))\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate amount of tokens to recieve for a given amount of wei\r\n     * @param weiAmount Value in wei to be converted into tokens\r\n     * @return Number of tokens that can be purchased with the specified _weiAmount\r\n     */\r\n    function getTokenAmount(uint256 weiAmount) public view returns(uint256) {\r\n        return weiAmount.mul(_rate).div(1e18);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate amount of tokens to recieve for a given account at current time\r\n     * @param account Address of user\r\n     * @return Number of tokens that can be withdrawn\r\n     */\r\n    function getDividends(address account) public view returns(uint256) {\r\n        uint256 payout = users[account].reserved;\r\n        for (uint256 i = 0; i < users[account].deposits.length; i++) {\r\n            if (block.timestamp < users[account].deposits[i].endtime) {\r\n                payout += (users[account].deposits[i].amount).mul(block.timestamp.sub(users[account].checkpoint)).div(users[account].deposits[i].delay);\r\n            } else if (users[account].checkpoint < users[account].deposits[i].endtime) {\r\n                payout += (users[account].deposits[i].amount).mul(users[account].deposits[i].endtime.sub(users[account].checkpoint)).div(users[account].deposits[i].delay);\r\n            }\r\n        }\r\n        return payout;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to change the rate.\r\n     * Available only to the owner.\r\n     * @param newRate new value.\r\n     */\r\n    function setRate(uint256 newRate) external onlyOwner {\r\n        require(newRate != 0, \"New rate is 0\");\r\n\r\n        _rate = newRate;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to change the share value\r\n     * Available only to the owner.\r\n     * @param newShare new value.\r\n     */\r\n    function setShare(uint256 newShare) external onlyOwner {\r\n        require(newShare != 0, \"New share value is 0\");\r\n\r\n        _share = newShare;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to change the bonusPerShare value\r\n     * Available only to the owner.\r\n     * @param newBonus new value.\r\n     */\r\n    function setBonus(uint256 newBonus) external onlyOwner {\r\n        require(newBonus != 0, \"New bonus value is 0\");\r\n\r\n        _bonusPerShare = newBonus;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to change the address to receive ether.\r\n     * Available only to the owner.\r\n     * @param newWallet new address.\r\n     */\r\n    function setWallet(address payable newWallet) external onlyOwner {\r\n        require(newWallet != address(0), \"New wallet is the zero address\");\r\n\r\n        _wallet = newWallet;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to change the delay period of recieving tokens.\r\n     * Available only to the owner.\r\n     * @param newDelay new value (UNIX time).\r\n     */\r\n    function setDelayPeriod(uint256 newDelay) external onlyOwner {\r\n\r\n        _delay = newDelay;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to change the minimum amount (wei).\r\n     * Available only to the owner.\r\n     * @param newMinimum new minimum value (wei).\r\n     */\r\n    function setMinimum(uint256 newMinimum) external onlyOwner {\r\n        require(newMinimum != 0, \"New parameter value is 0\");\r\n\r\n        _minimum = newMinimum;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to pause recieving of deposits.\r\n     * Available only to the owner.\r\n     */\r\n    function pause() external onlyOwner {\r\n\r\n        paused = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to unpause recieving of deposits.\r\n     * Available only to the owner.\r\n     */\r\n    function unpause() external onlyOwner {\r\n\r\n        paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to switch if referrer is required.\r\n     * Available only to the owner.\r\n     */\r\n    function switchRefSys() external onlyOwner {\r\n\r\n        if (RS == ReferrerSystem.ON) {\r\n            RS = ReferrerSystem.OFF;\r\n        } else {\r\n            RS = ReferrerSystem.ON;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Function to switch the requiring of referrers state\r\n     * Available only to the owner.\r\n     */\r\n    function switchRequiringOfRef() external onlyOwner {\r\n\r\n        if (refRequired == true) {\r\n            refRequired = false;\r\n        } else {\r\n            refRequired = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Function to switch if referral gets bonus\r\n     * Available only to the owner.\r\n     */\r\n    function switchReferralMode() external onlyOwner {\r\n\r\n        if (referralMode == true) {\r\n            referralMode = false;\r\n        } else {\r\n            referralMode = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Allows to withdraw needed ERC20 token from this contract (promo or bounties for example).\r\n    * Available only to the owner.\r\n    * @param ERC20Token Address of ERC20 token.\r\n    * @param recipient Account to receive tokens.\r\n    */\r\n    function withdrawERC20(address ERC20Token, address recipient) external onlyOwner {\r\n\r\n        uint256 amount = IERC20(ERC20Token).balanceOf(address(this));\r\n        IERC20(ERC20Token).transfer(recipient, amount);\r\n\r\n    }\r\n\r\n    /**\r\n     * @return the token being sold.\r\n     */\r\n    function token() public view returns (IERC20) {\r\n        return _token;\r\n    }\r\n\r\n    /**\r\n     * @return address of GoldRubleBonusStorage.\r\n     */\r\n    function GRBS() public view returns (GoldRubleBonusStorage) {\r\n        return _GRBS;\r\n    }\r\n\r\n    /**\r\n     * @return the address where funds are collected.\r\n     */\r\n    function wallet() public view returns (address payable) {\r\n        return _wallet;\r\n    }\r\n\r\n    /**\r\n     * @return the number of token units a buyer gets per wei.\r\n     */\r\n    function rate() public view returns (uint256) {\r\n        return _rate;\r\n    }\r\n\r\n    /**\r\n     * @return the number of token set as share.\r\n     */\r\n    function share() public view returns (uint256) {\r\n        return _share;\r\n    }\r\n\r\n    /**\r\n     * @return the number of token units a referrer gets per share.\r\n     */\r\n    function bonusPerShare() public view returns (uint256) {\r\n        return _bonusPerShare;\r\n    }\r\n\r\n    /**\r\n     * @return minimum amount of wei to invest.\r\n     */\r\n    function minimum() public view returns (uint256) {\r\n        return _minimum;\r\n    }\r\n\r\n    /**\r\n     * @return the amount of wei raised.\r\n     */\r\n    function weiRaised() public view returns (uint256) {\r\n        return _weiRaised;\r\n    }\r\n\r\n    /**\r\n     * @return the amount of reserved tokens.\r\n     */\r\n    function reserved() public view returns (uint256) {\r\n        return _reserve;\r\n    }\r\n\r\n    /**\r\n     * @return delay time (UNIX time).\r\n     */\r\n    function delay() public view returns (uint256) {\r\n        return _delay;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newBonus\",\"type\":\"uint256\"}],\"name\":\"setBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"switchRequiringOfRef\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinimum\",\"type\":\"uint256\"}],\"name\":\"setMinimum\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDelay\",\"type\":\"uint256\"}],\"name\":\"setDelayPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"switchRefSys\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GRBS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"delay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusPerShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refRequired\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ERC20Token\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newShare\",\"type\":\"uint256\"}],\"name\":\"setShare\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"switchReferralMode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralMode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"share\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"getTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserved\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"initialOwner\",\"type\":\"address\"},{\"name\":\"GRBSAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"INVEST","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000071afd498d000000000000000000000000000060e055a85cc5d0c4740a4e84f6f1a3ffb1e59dca0000000000000000000000009f9efdd09e915c1950c5ca7252fa5c4f65ab049b000000000000000000000000446b9bc432efe4f4b5dc318b9cc353b6dd815db0000000000000000000000000010103c776b7da1bc5508f4a3e7f76c864c2ad7e","Library":"","LicenseType":"None","SwarmSource":"bzzr://e22846bb6e3e33d80692a41c627a76b6835e4feec35b4c8bd29aa96e6e020026"}]}