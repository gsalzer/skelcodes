{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.11;\r\n\r\nlibrary SafeMath {\r\n \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;}\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");}\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;}\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {return 0;}\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;}\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");}\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;}\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface USDContract{\r\n     function sendFunds() external payable;\r\n     function ethPricerAddress() external view returns (address);\r\n     function multiplier() external view returns (uint256);\r\n     function assetContracts(address input) external view returns (bool);\r\n     function USDtrade(address sender,uint amount) external;\r\n     function primary() external view returns (address);\r\n}\r\n\r\ncontract USDable {\r\n    \r\n    address payable private _USDcontractaddress = 0x7c0AFD49D40Ec308d49E2926E5c99B037d54EE7e;\r\n    \r\n    function USDcontractaddress() internal view returns (address){\r\n        return _USDcontractaddress;\r\n    }\r\n    \r\n    function setUSDcontractaddress(address payable input) public {\r\n        require(msg.sender == USDContract(USDcontractaddress()).primary(), \"Secondary: caller is not the primary account\");\r\n        require(input != address(this));\r\n        require(!assetContracts(input));\r\n        require(input != msg.sender);\r\n        require(input != address(0));\r\n        require(msg.sender == USDContract(input).primary());\r\n        \r\n        _USDcontractaddress = input;\r\n    }\r\n    \r\n    modifier onlyUSDContract() {\r\n        require(msg.sender == _USDcontractaddress, \"You cannot call this function!\");\r\n        _;\r\n    }\r\n    \r\n    function sendFunds(uint amount) internal {\r\n        USDContract(_USDcontractaddress).sendFunds.value(amount)();\r\n    }\r\n    \r\n    function ethPricerAddress() internal view returns (address) {\r\n        return USDContract(_USDcontractaddress).ethPricerAddress();\r\n    }\r\n    \r\n    function multiplier() internal view returns (uint256) {\r\n        return USDContract(_USDcontractaddress).multiplier();}\r\n    \r\n    function assetContracts(address input) internal view returns (bool) {\r\n        return USDContract(_USDcontractaddress).assetContracts(input);\r\n    }\r\n    \r\n    function USDtrade(address sender,uint amount) internal {\r\n        return USDContract(_USDcontractaddress).USDtrade(sender,amount);\r\n    }\r\n    \r\n}\r\n\r\ncontract Secondary is USDable{\r\n    \r\n    modifier onlyPrimary() {\r\n        require(msg.sender == USDContract(USDcontractaddress()).primary(), \"Secondary: caller is not the primary account\");\r\n        _;\r\n    }\r\n\r\n    function primary() internal view returns (address) {\r\n        return USDContract(USDcontractaddress()).primary();\r\n    }\r\n}\r\n\r\ninterface EthPricer{\r\n    function ethUpper() external view returns (uint256);\r\n    function ethLower() external view returns (uint256);\r\n}\r\n\r\ncontract EthPriceable is Secondary{\r\n    \r\n    function ethUpper() internal view returns (uint256) {\r\n        return EthPricer(ethPricerAddress()).ethUpper();\r\n    }\r\n    \r\n    function ethLower() internal view returns (uint256) {\r\n        return EthPricer(ethPricerAddress()).ethLower();\r\n    }\r\n}\r\n\r\ninterface AssetPricer{\r\n    function updateAssetPrice() external payable returns (bytes32);\r\n    function Fee() external returns (uint256);\r\n    function assetUpper(bool isShort) external view returns (uint256);\r\n    function assetLower(bool isShort) external view returns (uint256);\r\n    function updateGasPrice() external;\r\n}\r\n\r\ncontract AssetPriceable is Secondary{\r\n    using SafeMath for uint256;\r\n    \r\n    address payable private _assetPricerAddress;\r\n    \r\n    bool constant private _isShort = false;\r\n    \r\n    function setAssetPricerAddress(address payable input) public onlyPrimary {\r\n        require(input != USDcontractaddress());\r\n        require(input != address(this));\r\n        require(!assetContracts(input));\r\n        require(input != msg.sender);\r\n        require(input != address(0));\r\n    \r\n        _assetPricerAddress = input;\r\n    }\r\n    \r\n    modifier onlyAssetPricer() {\r\n        require(msg.sender == _assetPricerAddress, \"You cannot call this function!\");\r\n        _;\r\n    }\r\n    \r\n    function Fee() internal returns (uint256) {\r\n        AssetPricer(_assetPricerAddress).updateGasPrice();\r\n        uint fee = AssetPricer(_assetPricerAddress).Fee();\r\n        return (fee.mul(multiplier().add(100))).div(100);\r\n    }\r\n    \r\n    function assetUpper() internal view returns (uint256) {\r\n        return AssetPricer(_assetPricerAddress).assetUpper(_isShort);\r\n    }\r\n    \r\n    function assetLower() internal view returns (uint256) {\r\n        return AssetPricer(_assetPricerAddress).assetLower(_isShort);\r\n    }\r\n    \r\n    function updateAssetPrice() internal returns (bytes32) {\r\n        AssetPricer(_assetPricerAddress).updateGasPrice();\r\n        uint fee = AssetPricer(_assetPricerAddress).Fee();\r\n        return AssetPricer(_assetPricerAddress).updateAssetPrice.value(fee)();\r\n    }\r\n    \r\n    function assetPricerAddress() public view onlyUSDContract returns (address) {\r\n        return _assetPricerAddress;\r\n    }\r\n    \r\n    function isShort() public view onlyUSDContract returns (bool) {\r\n        return _isShort;\r\n    }\r\n\r\n}\r\n\r\ncontract ERC20 is IERC20, EthPriceable, AssetPriceable {\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(recipient != USDcontractaddress(), \"You can only send tokens to their own contract!\");\r\n        \r\n        if(recipient == address(this)){\r\n            require(amount > (Fee().mul(ethUpper())).div(assetLower()), \"Amount sent is too small\");\r\n            _burn(sender,amount);\r\n            USDtrade(sender,amount);\r\n            \r\n        }else{\r\n             require(!assetContracts(recipient), \"You can only send tokens to their own contract!\");\r\n            _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n        }\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(this), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(value, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(value);\r\n    }\r\n    \r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n}\r\n\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\ninterface token {\r\n    function balanceOf(address input) external returns (uint256);\r\n    function transfer(address input, uint amount) external;\r\n}\r\n\r\ncontract AssetToken is ERC20, ERC20Detailed {\r\n    \r\n    mapping(bytes32=>customer) private Customers;\r\n    \r\n    struct customer {\r\n        address myAddress;\r\n        uint256 valuesent;\r\n    }\r\n    \r\n    constructor () public ERC20Detailed(\"Onyx S&P 500\", \"OSPV\", 18) {\r\n        _mint(primary(),10**18);\r\n    }\r\n    \r\n    function () external payable {\r\n        uint total = address(this).balance;\r\n        bytes32 customerId = updateAssetPrice();\r\n        uint amount = msg.value.sub(total.sub(address(this).balance));\r\n        Customers[customerId] = customer(msg.sender, amount);\r\n    }\r\n\r\n    function assetPriceUpdated(bytes32 customerId, bool marketOpen) public onlyAssetPricer {\r\n        uint valuesent = Customers[customerId].valuesent;\r\n        address myAddress = Customers[customerId].myAddress;\r\n         \r\n        if(marketOpen){\r\n            uint amount = (ethLower().mul(valuesent)).div(assetUpper());\r\n            _mint(myAddress, amount);\r\n            sendFunds(valuesent);\r\n             \r\n        }else{\r\n            address payable sendto = address(uint160(myAddress));\r\n            sendto.transfer(valuesent);\r\n        }   \r\n    }\r\n  \r\n    function AssetMint(address to, uint256 valuesent) public {\r\n        require(msg.sender == USDcontractaddress() || msg.sender == primary(), \"You cannot call this function!\");\r\n        _mint(to,valuesent);\r\n    }\r\n    \r\n    function AssetBurn(address to, uint256 valuesent) public  onlyPrimary{\r\n        _burn(to,valuesent);\r\n        emit Transfer(to, address(this), valuesent);\r\n    }\r\n    \r\n    function getStuckTokens(address _tokenAddress) public {\r\n        token(_tokenAddress).transfer(primary(), token(_tokenAddress).balanceOf(address(this)));\r\n    }\r\n\r\n    function getLostFunds() public onlyPrimary {\r\n        sendFunds(address(this).balance);\r\n    } \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"input\",\"type\":\"address\"}],\"name\":\"setAssetPricerAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getStuckTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"customerId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"marketOpen\",\"type\":\"bool\"}],\"name\":\"assetPriceUpdated\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getLostFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"assetPricerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"input\",\"type\":\"address\"}],\"name\":\"setUSDcontractaddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valuesent\",\"type\":\"uint256\"}],\"name\":\"AssetMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isShort\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valuesent\",\"type\":\"uint256\"}],\"name\":\"AssetBurn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"AssetToken","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://35bba0bd75a85e2e6be69e76fee5424a93898c82a12944da9e375e3e2c581cf2"}]}