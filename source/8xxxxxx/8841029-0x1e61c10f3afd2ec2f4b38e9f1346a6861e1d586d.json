{"status":"1","message":"OK","result":[{"SourceCode":"/**************************************************************************\r\n *            ____        _                              \r\n *           / ___|      | |     __ _  _   _   ___  _ __ \r\n *          | |    _____ | |    / _` || | | | / _ \\| '__|\r\n *          | |___|_____|| |___| (_| || |_| ||  __/| |   \r\n *           \\____|      |_____|\\__,_| \\__, | \\___||_|   \r\n *                                     |___/             \r\n * \r\n ************************************************************************** *\r\n *  The MIT License (MIT)\r\n *\r\n * Copyright (c) 2016-2019 Cyril Lapinte\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included\r\n * in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n **************************************************************************\r\n *\r\n * Flatten Contract: TokenFactory\r\n *\r\n * Git Commit:\r\n * https://github.com/c-layer/contracts/tree/43925ba24cc22f42d0ff7711d0e169e8c2a0e09f\r\n *\r\n **************************************************************************/\r\n\r\n// File: contracts/util/convert/BytesConvert.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n/**\r\n * @title BytesConvert\r\n * @dev Convert bytes into different types\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n *\r\n * Error Messages:\r\n *   BC01: source must be a valid 32-bytes length\r\n *   BC02: source must not be greater than 32-bytes\r\n **/\r\nlibrary BytesConvert {\r\n\r\n  /**\r\n  * @dev toUint256\r\n  */\r\n  function toUint256(bytes memory _source) internal pure returns (uint256 result) {\r\n    require(_source.length == 32, \"BC01\");\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {\r\n      result := mload(add(_source, 0x20))\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev toBytes32\r\n  */\r\n  function toBytes32(bytes memory _source) internal pure returns (bytes32 result) {\r\n    require(_source.length <= 32, \"BC02\");\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {\r\n      result := mload(add(_source, 0x20))\r\n    }\r\n  }\r\n}\r\n\r\n// File: contracts/abstract/Factory.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @title Factory\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n *\r\n * Error messages\r\n **/\r\ncontract Factory {\r\n  using BytesConvert for bytes;\r\n\r\n  bytes internal proxyCode_;\r\n\r\n  /**\r\n   * @dev proxyCode\r\n   */\r\n  function proxyCode() public view returns (bytes memory) {\r\n    return proxyCode_;\r\n  }\r\n\r\n  /**\r\n   * @dev defineProxyCodeInternal\r\n   */\r\n  function defineProxyCodeInternal(address _core, bytes memory _proxyCode)\r\n    internal returns (bool)\r\n  {\r\n    bytes32 coreAddress = abi.encode(_core).toBytes32();\r\n    proxyCode_ = abi.encodePacked(_proxyCode, coreAddress);\r\n    emit ProxyCodeDefined(keccak256(_proxyCode));\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev deployProxyInternal\r\n   */\r\n  function deployProxyInternal()\r\n    internal returns (address address_)\r\n  {\r\n    bytes memory code = proxyCode_;\r\n    assembly {\r\n      address_ := create(0, add(code, 0x20), mload(code))\r\n    }\r\n  }\r\n\r\n  event ProxyCodeDefined(bytes32 codeHash);\r\n}\r\n\r\n// File: contracts/interface/IOperableCore.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n/**\r\n * @title IOperableCore\r\n * @dev The Operable contract enable the restrictions of operations to a set of operators\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n *\r\n * Error messages\r\n */\r\ncontract IOperableCore {\r\n  bytes32 constant ALL_PRIVILEGES = bytes32(\"AllPrivileges\");\r\n  address constant ALL_PROXIES = address(0x416c6c50726f78696573); // \"AllProxies\"\r\n\r\n  function coreRole(address _address) public view returns (bytes32);\r\n  function proxyRole(address _proxy, address _address) public view returns (bytes32);\r\n  function rolePrivilege(bytes32 _role, bytes4 _privilege) public view returns (bool);\r\n  function roleHasPrivilege(bytes32 _role, bytes4 _privilege) public view returns (bool);\r\n  function hasCorePrivilege(address _address, bytes4 _privilege) public view returns (bool);\r\n  function hasProxyPrivilege(address _address, address _proxy, bytes4 _privilege) public view returns (bool);\r\n\r\n  function defineRole(bytes32 _role, bytes4[] memory _privileges) public returns (bool);\r\n  function assignOperators(bytes32 _role, address[] memory _operators) public returns (bool);\r\n  function assignProxyOperators(\r\n    address _proxy, bytes32 _role, address[] memory _operators) public returns (bool);\r\n  function revokeOperators(address[] memory _operators) public returns (bool);\r\n\r\n  event RoleDefined(bytes32 role);\r\n  event OperatorAssigned(bytes32 role, address operator);\r\n  event ProxyOperatorAssigned(address proxy, bytes32 role, address operator);\r\n  event OperatorRevoked(address operator);\r\n}\r\n\r\n// File: contracts/operable/OperableAsCore.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @title TokenFactory\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n *\r\n * Error messages\r\n *   OA01: Missing the core privilege\r\n *   OA02: Missing the proxy privilege\r\n **/\r\ncontract OperableAsCore {\r\n\r\n  IOperableCore public core;\r\n\r\n  modifier onlyCoreOperator() {\r\n    require(core.hasCorePrivilege(\r\n      msg.sender, msg.sig), \"OA01\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyProxyOperator(address _proxy) {\r\n    require(core.hasProxyPrivilege(\r\n      msg.sender, _proxy, msg.sig), \"OA02\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev constructor\r\n   **/\r\n  constructor(address _core) public {\r\n    core = IOperableCore(_core);\r\n  }\r\n\r\n  /**\r\n   * @dev hasCorePrivilege\r\n   */\r\n  function hasCorePrivilege(address _operator, bytes4 _privilege)\r\n    public view returns (bool)\r\n  {\r\n    return core.hasCorePrivilege(_operator, _privilege);\r\n  }\r\n\r\n  /**\r\n   * @dev hasProxyPrivilege\r\n   */\r\n  function hasProxyPrivilege(address _operator, address _proxy, bytes4 _privilege)\r\n    public view returns (bool)\r\n  {\r\n    return core.hasProxyPrivilege(_operator, _proxy, _privilege);\r\n  }\r\n}\r\n\r\n// File: contracts/interface/IERC20.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev ERC20 interface\r\n */\r\ncontract IERC20 {\r\n\r\n  function name() public view returns (string memory);\r\n  function symbol() public view returns (string memory);\r\n  function decimals() public view returns (uint256);\r\n\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _owner) public view returns (uint256);\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  function increaseApproval(address _spender, uint _addedValue)\r\n    public returns (bool);\r\n  function decreaseApproval(address _spender, uint _subtractedValue)\r\n    public returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n\r\n}\r\n\r\n// File: contracts/interface/IUserRegistry.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n/**\r\n * @title IUserRegistry\r\n * @dev IUserRegistry interface\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n **/\r\ncontract IUserRegistry {\r\n\r\n  event UserRegistered(uint256 indexed userId);\r\n  event AddressAttached(uint256 indexed userId, address address_);\r\n  event AddressDetached(uint256 indexed userId, address address_);\r\n\r\n  function registerManyUsersExternal(address[] calldata _addresses, uint256 _validUntilTime)\r\n    external returns (bool);\r\n  function registerManyUsersFullExternal(\r\n    address[] calldata _addresses,\r\n    uint256 _validUntilTime,\r\n    uint256[] calldata _values) external returns (bool);\r\n  function attachManyAddressesExternal(uint256[] calldata _userIds, address[] calldata _addresses)\r\n    external returns (bool);\r\n  function detachManyAddressesExternal(address[] calldata _addresses)\r\n    external returns (bool);\r\n  function suspendManyUsers(uint256[] calldata _userIds) external returns (bool);\r\n  function unsuspendManyUsersExternal(uint256[] calldata _userIds) external returns (bool);\r\n  function updateManyUsersExternal(\r\n    uint256[] calldata _userIds,\r\n    uint256 _validUntilTime,\r\n    bool _suspended) external returns (bool);\r\n  function updateManyUsersExtendedExternal(\r\n    uint256[] calldata _userIds,\r\n    uint256 _key, uint256 _value) external returns (bool);\r\n  function updateManyUsersAllExtendedExternal(\r\n    uint256[] calldata _userIds,\r\n    uint256[] calldata _values) external returns (bool);\r\n  function updateManyUsersFullExternal(\r\n    uint256[] calldata _userIds,\r\n    uint256 _validUntilTime,\r\n    bool _suspended,\r\n    uint256[] calldata _values) external returns (bool);\r\n\r\n  function name() public view returns (string memory);\r\n  function currency() public view returns (bytes32);\r\n\r\n  function userCount() public view returns (uint256);\r\n  function userId(address _address) public view returns (uint256);\r\n  function validUserId(address _address) public view returns (uint256);\r\n  function validUser(address _address, uint256[] memory _keys)\r\n    public view returns (uint256, uint256[] memory);\r\n  function validity(uint256 _userId) public view returns (uint256, bool);\r\n\r\n  function extendedKeys() public view returns (uint256[] memory);\r\n  function extended(uint256 _userId, uint256 _key)\r\n    public view returns (uint256);\r\n  function manyExtended(uint256 _userId, uint256[] memory _key)\r\n    public view returns (uint256[] memory);\r\n\r\n  function isAddressValid(address _address) public view returns (bool);\r\n  function isValid(uint256 _userId) public view returns (bool);\r\n\r\n  function defineExtendedKeys(uint256[] memory _extendedKeys) public returns (bool);\r\n\r\n  function registerUser(address _address, uint256 _validUntilTime)\r\n    public returns (bool);\r\n  function registerUserFull(\r\n    address _address,\r\n    uint256 _validUntilTime,\r\n    uint256[] memory _values) public returns (bool);\r\n\r\n  function attachAddress(uint256 _userId, address _address) public returns (bool);\r\n  function detachAddress(address _address) public returns (bool);\r\n  function detachSelf() public returns (bool);\r\n  function detachSelfAddress(address _address) public returns (bool);\r\n  function suspendUser(uint256 _userId) public returns (bool);\r\n  function unsuspendUser(uint256 _userId) public returns (bool);\r\n  function updateUser(uint256 _userId, uint256 _validUntilTime, bool _suspended)\r\n    public returns (bool);\r\n  function updateUserExtended(uint256 _userId, uint256 _key, uint256 _value)\r\n    public returns (bool);\r\n  function updateUserAllExtended(uint256 _userId, uint256[] memory _values)\r\n    public returns (bool);\r\n  function updateUserFull(\r\n    uint256 _userId,\r\n    uint256 _validUntilTime,\r\n    bool _suspended,\r\n    uint256[] memory _values) public returns (bool);\r\n}\r\n\r\n// File: contracts/interface/IRatesProvider.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n/**\r\n * @title IRatesProvider\r\n * @dev IRatesProvider interface\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n */\r\ncontract IRatesProvider {\r\n\r\n  function defineRatesExternal(uint256[] calldata _rates) external returns (bool);\r\n\r\n  function name() public view returns (string memory);\r\n\r\n  function rate(bytes32 _currency) public view returns (uint256);\r\n\r\n  function currencies() public view\r\n    returns (bytes32[] memory, uint256[] memory, uint256);\r\n  function rates() public view returns (uint256, uint256[] memory);\r\n\r\n  function convert(uint256 _amount, bytes32 _fromCurrency, bytes32 _toCurrency)\r\n    public view returns (uint256);\r\n\r\n  function defineCurrencies(\r\n    bytes32[] memory _currencies,\r\n    uint256[] memory _decimals,\r\n    uint256 _rateOffset) public returns (bool);\r\n  function defineRates(uint256[] memory _rates) public returns (bool);\r\n\r\n  event RateOffset(uint256 rateOffset);\r\n  event Currencies(bytes32[] currencies, uint256[] decimals);\r\n  event Rate(uint256 at, bytes32 indexed currency, uint256 rate);\r\n}\r\n\r\n// File: contracts/interface/IRule.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n/**\r\n * @title IRule\r\n * @dev IRule interface\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n **/\r\ninterface IRule {\r\n  function isAddressValid(address _address) external view returns (bool);\r\n  function isTransferValid(address _from, address _to, uint256 _amount)\r\n    external view returns (bool);\r\n}\r\n\r\n// File: contracts/interface/IClaimable.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n/**\r\n * @title IClaimable\r\n * @dev IClaimable interface\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n **/\r\ncontract IClaimable {\r\n  function hasClaimsSince(address _address, uint256 at)\r\n    external view returns (bool);\r\n}\r\n\r\n// File: contracts/util/math/SafeMath.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/abstract/Storage.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n/**\r\n * @title Storage\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n *\r\n * Error messages\r\n **/\r\ncontract Storage {\r\n\r\n  mapping(address => address) public proxyDelegates;\r\n  address[] public delegates;\r\n}\r\n\r\n// File: contracts/util/governance/Ownable.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n *\r\n * Error messages\r\n *   OW01: Only accessible as owner\r\n *   OW02: New owner must be non null\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, \"OW01\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0), \"OW02\");\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/operable/OperableStorage.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @title OperableStorage\r\n * @dev The Operable contract enable the restrictions of operations to a set of operators\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n *\r\n * Error messages\r\n */\r\ncontract OperableStorage is Ownable, Storage {\r\n\r\n  // Hardcoded role granting all - non sysop - privileges\r\n  bytes32 constant internal ALL_PRIVILEGES = bytes32(\"AllPrivileges\");\r\n  address constant internal ALL_PROXIES = address(0x416c6c50726f78696573); // \"AllProxies\"\r\n\r\n  struct RoleData {\r\n    mapping(bytes4 => bool) privileges;\r\n  }\r\n\r\n  struct OperatorData {\r\n    bytes32 coreRole;\r\n    mapping(address => bytes32) proxyRoles;\r\n  }\r\n\r\n  // Mapping address => role\r\n  // Mapping role => bytes4 => bool\r\n  mapping (address => OperatorData) internal operators;\r\n  mapping (bytes32 => RoleData) internal roles;\r\n\r\n  /**\r\n   * @dev core role\r\n   * @param _address operator address\r\n   */\r\n  function coreRole(address _address) public view returns (bytes32) {\r\n    return operators[_address].coreRole;\r\n  }\r\n\r\n  /**\r\n   * @dev proxy role\r\n   * @param _address operator address\r\n   */\r\n  function proxyRole(address _proxy, address _address)\r\n    public view returns (bytes32)\r\n  {\r\n    return operators[_address].proxyRoles[_proxy];\r\n  }\r\n\r\n  /**\r\n   * @dev has role privilege\r\n   * @dev low level access to role privilege\r\n   * @dev ignores ALL_PRIVILEGES role\r\n   */\r\n  function rolePrivilege(bytes32 _role, bytes4 _privilege)\r\n    public view returns (bool)\r\n  {\r\n    return roles[_role].privileges[_privilege];\r\n  }\r\n\r\n  /**\r\n   * @dev roleHasPrivilege\r\n   */\r\n  function roleHasPrivilege(bytes32 _role, bytes4 _privilege) public view returns (bool) {\r\n    return (_role == ALL_PRIVILEGES) || roles[_role].privileges[_privilege];\r\n  }\r\n\r\n  /**\r\n   * @dev hasCorePrivilege\r\n   * @param _address operator address\r\n   */\r\n  function hasCorePrivilege(address _address, bytes4 _privilege) public view returns (bool) {\r\n    bytes32 role = operators[_address].coreRole;\r\n    return (role == ALL_PRIVILEGES) || roles[role].privileges[_privilege];\r\n  }\r\n\r\n  /**\r\n   * @dev hasProxyPrivilege\r\n   * @dev the default proxy role can be set with proxy address(0)\r\n   * @param _address operator address\r\n   */\r\n  function hasProxyPrivilege(address _address, address _proxy, bytes4 _privilege) public view returns (bool) {\r\n    OperatorData storage data = operators[_address];\r\n    bytes32 role = (data.proxyRoles[_proxy] != bytes32(0)) ?\r\n      data.proxyRoles[_proxy] : data.proxyRoles[ALL_PROXIES];\r\n    return (role == ALL_PRIVILEGES) || roles[role].privileges[_privilege];\r\n  }\r\n}\r\n\r\n// File: contracts/TokenStorage.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Token storage\r\n * @dev Token storage\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n */\r\ncontract TokenStorage is OperableStorage {\r\n  using SafeMath for uint256;\r\n\r\n  enum TransferCode {\r\n    UNKNOWN,\r\n    OK,\r\n    INVALID_SENDER,\r\n    NO_RECIPIENT,\r\n    INSUFFICIENT_TOKENS,\r\n    LOCKED,\r\n    FROZEN,\r\n    RULE,\r\n    LIMITED_RECEPTION\r\n  }\r\n\r\n  struct Proof {\r\n    uint256 amount;\r\n    uint64 startAt;\r\n    uint64 endAt;\r\n  }\r\n\r\n  struct AuditData {\r\n    uint64 createdAt;\r\n    uint64 lastTransactionAt;\r\n    uint64 lastEmissionAt;\r\n    uint64 lastReceptionAt;\r\n    uint256 cumulatedEmission;\r\n    uint256 cumulatedReception;\r\n  }\r\n\r\n  struct AuditStorage {\r\n    mapping (address => bool) selector;\r\n\r\n    AuditData sharedData;\r\n    mapping(uint256 => AuditData) userData;\r\n    mapping(address => AuditData) addressData;\r\n  }\r\n\r\n  struct Lock {\r\n    uint256 startAt;\r\n    uint256 endAt;\r\n    mapping(address => bool) exceptions;\r\n  }\r\n\r\n  struct TokenData {\r\n    string name;\r\n    string symbol;\r\n    uint256 decimals;\r\n\r\n    uint256 totalSupply;\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    bool mintingFinished;\r\n\r\n    uint256 allTimeIssued; // potential overflow\r\n    uint256 allTimeRedeemed; // potential overflow\r\n    uint256 allTimeSeized; // potential overflow\r\n\r\n    mapping (address => Proof[]) proofs;\r\n    mapping (address => uint256) frozenUntils;\r\n\r\n    Lock lock;\r\n    IRule[] rules;\r\n    IClaimable[] claimables;\r\n  }\r\n  mapping (address => TokenData) internal tokens_;\r\n  mapping (address => mapping (uint256 => AuditStorage)) internal audits;\r\n\r\n  IUserRegistry internal userRegistry;\r\n  IRatesProvider internal ratesProvider;\r\n\r\n  bytes32 internal currency;\r\n  uint256[] internal userKeys;\r\n\r\n  string internal name_;\r\n\r\n  /**\r\n   * @dev currentTime()\r\n   */\r\n  function currentTime() internal view returns (uint64) {\r\n    // solhint-disable-next-line not-rely-on-time\r\n    return uint64(now);\r\n  }\r\n\r\n  event OraclesDefined(\r\n    IUserRegistry userRegistry,\r\n    IRatesProvider ratesProvider,\r\n    bytes32 currency,\r\n    uint256[] userKeys);\r\n  event AuditSelectorDefined(\r\n    address indexed scope, uint256 scopeId, address[] addresses, bool[] values);\r\n  event Issue(address indexed token, uint256 amount);\r\n  event Redeem(address indexed token, uint256 amount);\r\n  event Mint(address indexed token, uint256 amount);\r\n  event MintFinished(address indexed token);\r\n  event ProofCreated(address indexed token, address indexed holder, uint256 proofId);\r\n  event RulesDefined(address indexed token, IRule[] rules);\r\n  event LockDefined(\r\n    address indexed token,\r\n    uint256 startAt,\r\n    uint256 endAt,\r\n    address[] exceptions\r\n  );\r\n  event Seize(address indexed token, address account, uint256 amount);\r\n  event Freeze(address address_, uint256 until);\r\n  event ClaimablesDefined(address indexed token, IClaimable[] claimables);\r\n  event TokenDefined(\r\n    address indexed token,\r\n    uint256 delegateId,\r\n    string name,\r\n    string symbol,\r\n    uint256 decimals);\r\n  event TokenRemoved(address indexed token);\r\n}\r\n\r\n// File: contracts/interface/ITokenCore.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ITokenCore\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n *\r\n * Error messages\r\n **/\r\ncontract ITokenCore is IOperableCore {\r\n\r\n  function name() public view returns (string memory);\r\n  function oracles() public view returns\r\n    (IUserRegistry, IRatesProvider, bytes32, uint256[] memory);\r\n\r\n  function auditSelector(\r\n    address _scope,\r\n    uint256 _scopeId,\r\n    address[] memory _addresses)\r\n    public view returns (bool[] memory);\r\n  function auditShared(\r\n    address _scope,\r\n    uint256 _scopeId) public view returns (\r\n    uint64 createdAt,\r\n    uint64 lastTransactionAt,\r\n    uint64 lastEmissionAt,\r\n    uint64 lastReceptionAt,\r\n    uint256 cumulatedEmission,\r\n    uint256 cumulatedReception);\r\n  function auditUser(\r\n    address _scope,\r\n    uint256 _scopeId,\r\n    uint256 _userId) public view returns (\r\n    uint64 createdAt,\r\n    uint64 lastTransactionAt,\r\n    uint64 lastEmissionAt,\r\n    uint64 lastReceptionAt,\r\n    uint256 cumulatedEmission,\r\n    uint256 cumulatedReception);\r\n  function auditAddress(\r\n    address _scope,\r\n    uint256 _scopeId,\r\n    address _holder) public view returns (\r\n    uint64 createdAt,\r\n    uint64 lastTransactionAt,\r\n    uint64 lastEmissionAt,\r\n    uint64 lastReceptionAt,\r\n    uint256 cumulatedEmission,\r\n    uint256 cumulatedReception);\r\n\r\n  /***********  TOKEN DATA   ***********/\r\n  function token(address _token) public view returns (\r\n    bool mintingFinished,\r\n    uint256 allTimeIssued,\r\n    uint256 allTimeRedeemed,\r\n    uint256 allTimeSeized,\r\n    uint256[2] memory lock,\r\n    uint256 freezedUntil,\r\n    IRule[] memory,\r\n    IClaimable[] memory);\r\n  function tokenProofs(address _token, address _holder, uint256 _proofId)\r\n    public view returns (uint256, uint64, uint64);\r\n  function canTransfer(address, address, uint256)\r\n    public returns (uint256);\r\n\r\n  /***********  TOKEN ADMIN  ***********/\r\n  function issue(address, uint256)\r\n    public returns (bool);\r\n  function redeem(address, uint256)\r\n    public returns (bool);\r\n  function mint(address, address, uint256)\r\n    public returns (bool);\r\n  function finishMinting(address)\r\n    public returns (bool);\r\n  function mintAtOnce(address, address[] memory, uint256[] memory)\r\n    public returns (bool);\r\n  function seize(address _token, address, uint256)\r\n    public returns (bool);\r\n  function freezeManyAddresses(\r\n    address _token,\r\n    address[] memory _addresses,\r\n    uint256 _until) public returns (bool);\r\n  function createProof(address, address)\r\n    public returns (bool);\r\n  function defineLock(address, uint256, uint256, address[] memory)\r\n    public returns (bool);\r\n  function defineRules(address, IRule[] memory) public returns (bool);\r\n  function defineClaimables(address, IClaimable[] memory) public returns (bool);\r\n\r\n  /************  CORE ADMIN  ************/\r\n  function defineToken(\r\n    address _token,\r\n    uint256 _delegateId,\r\n    string memory _name,\r\n    string memory _symbol,\r\n    uint256 _decimals) public returns (bool);\r\n  function removeToken(address _token) public returns (bool);\r\n  function defineOracles(\r\n    IUserRegistry _userRegistry,\r\n    IRatesProvider _ratesProvider,\r\n    uint256[] memory _userKeys) public returns (bool);\r\n  function defineAuditSelector(\r\n    address _scope,\r\n    uint256 _scopeId,\r\n    address[] memory _selectorAddresses,\r\n    bool[] memory _selectorValues) public returns (bool);\r\n\r\n\r\n  event OraclesDefined(\r\n    IUserRegistry userRegistry,\r\n    IRatesProvider ratesProvider,\r\n    bytes32 currency,\r\n    uint256[] userKeys);\r\n  event AuditSelectorDefined(\r\n    address indexed scope, uint256 scopeId, address[] addresses, bool[] values);\r\n  event Issue(address indexed token, uint256 amount);\r\n  event Redeem(address indexed token, uint256 amount);\r\n  event Mint(address indexed token, uint256 amount);\r\n  event MintFinished(address indexed token);\r\n  event ProofCreated(address indexed token, address holder, uint256 proofId);\r\n  event RulesDefined(address indexed token, IRule[] rules);\r\n  event LockDefined(\r\n    address indexed token,\r\n    uint256 startAt,\r\n    uint256 endAt,\r\n    address[] exceptions\r\n  );\r\n  event Seize(address indexed token, address account, uint256 amount);\r\n  event Freeze(address address_, uint256 until);\r\n  event ClaimablesDefined(address indexed token, IClaimable[] claimables);\r\n  event TokenDefined(\r\n    address indexed token,\r\n    uint256 delegateId,\r\n    string name,\r\n    string symbol,\r\n    uint256 decimals);\r\n  event TokenRemoved(address indexed token);\r\n}\r\n\r\n// File: contracts/interface/ITokenFactory.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n/**\r\n * @title TokenFactory\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n *\r\n * Error messages\r\n **/\r\ncontract ITokenFactory {\r\n\r\n  function hasCoreAccess() public view returns (bool access);\r\n\r\n  function defineProxyCode(bytes memory _code) public returns (bool);\r\n  function deployToken(\r\n    uint256 _delegateId,\r\n    string memory _name,\r\n    string memory _symbol,\r\n    uint256 _decimals,\r\n    uint256 _lockEnd,\r\n    address[] memory _vaults,\r\n    uint256[] memory _supplies,\r\n    address[] memory _proxyOperators\r\n  ) public returns (address);\r\n  function reviewToken(address _token,\r\n    address[] memory _auditSelectors) public returns (bool);\r\n  function configureTokensales(address _token,\r\n    address[] memory _tokensales, uint256[] memory _allowances) public returns (bool);\r\n  function updateAllowances(address _token,\r\n    address[] memory _spenders, uint256[] memory _allowances) public returns (bool);\r\n\r\n  event TokenDeployed(address token);\r\n  event TokenReviewed(address token);\r\n  event TokensalesConfigured(address token, address[] tokensales);\r\n  event AllowanceUpdated(address token, address spender, uint256 allowance);\r\n}\r\n\r\n// File: contracts/TokenFactory.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title TokenFactory\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n *\r\n * Error messages\r\n *   TF01: Required privileges must be granted from the core to the factory\r\n *   TF02: There must be the same number of vault and supplies\r\n *   TF03: A proxy code must defined\r\n *   TF04: Token proxy must deployed\r\n *   TF05: Token must be defined in the core\r\n *   TF06: Factory role must be granted on the proxy\r\n *   TF07: Issuer role must be granted on the proxy\r\n *   TF08: The rule must be set\r\n *   TF09: The token must be locked\r\n *   TF10: Token must be minted\r\n *   TF11: The selector must be set\r\n *   TF12: The rule must be removed\r\n *   TF13: Same number of tokensales and allowances must be provided\r\n *   TF14: Exceptions must be added to the lock\r\n *   TF15: Allowances must be lower than the token balance\r\n *   TF16: Allowance must be successfull\r\n **/\r\ncontract TokenFactory is ITokenFactory, Factory, OperableAsCore {\r\n\r\n  bytes4[] private REQUIRED_CORE_PRIVILEGES = [\r\n    bytes4(keccak256(\"assignProxyOperators(address,bytes32,address[])\")),\r\n    bytes4(keccak256(\"defineToken(address,uint256,string,string,uint256)\")),\r\n    bytes4(keccak256(\"defineAuditSelector(address,uint256,address[],bool[])\"))\r\n  ];\r\n  bytes4[] private REQUIRED_PROXY_PRIVILEGES = [\r\n    bytes4(keccak256(\"mintAtOnce(address,address[],uint256[])\")),\r\n    bytes4(keccak256(\"defineLock(address,uint256,uint256,address[])\")),\r\n    bytes4(keccak256(\"defineRules(address,address[])\"))\r\n  ];\r\n\r\n  bytes32 constant FACTORY_PROXY_ROLE = bytes32(\"FactoryProxyRole\");\r\n  bytes32 constant ISSUER_PROXY_ROLE = bytes32(\"IssuerProxyRole\");\r\n\r\n  /**\r\n   * @dev constructor\r\n   **/\r\n  constructor(address _core) public OperableAsCore(_core) {}\r\n\r\n  /**\r\n   * @dev defineProxyCode\r\n   */\r\n  function defineProxyCode(bytes memory _code)\r\n    public onlyCoreOperator returns (bool)\r\n  {\r\n    return defineProxyCodeInternal(address(core), _code);\r\n  }\r\n\r\n  /**\r\n   * @dev has core access\r\n   */\r\n  function hasCoreAccess() public view returns (bool access) {\r\n    access = true;\r\n    for (uint256 i=0; i<REQUIRED_CORE_PRIVILEGES.length; i++) {\r\n      access = access && hasCorePrivilege(\r\n        address(this), REQUIRED_CORE_PRIVILEGES[i]);\r\n    }\r\n    for (uint256 i=0; i<REQUIRED_PROXY_PRIVILEGES.length; i++) {\r\n      access = access && core.rolePrivilege(\r\n        FACTORY_PROXY_ROLE, REQUIRED_PROXY_PRIVILEGES[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev deploy token\r\n   */\r\n  function deployToken(\r\n    uint256 _delegateId,\r\n    string memory _name,\r\n    string memory _symbol,\r\n    uint256 _decimals,\r\n    uint256 _lockEnd,\r\n    address[] memory _vaults,\r\n    uint256[] memory _supplies,\r\n    address[] memory _proxyOperators\r\n  ) public returns (address) {\r\n    require(hasCoreAccess(), \"TF01\");\r\n    require(_vaults.length == _supplies.length, \"TF02\");\r\n    require(proxyCode_.length != 0, \"TF03\");\r\n\r\n    // 1- Creating a proxy\r\n    address token = deployProxyInternal();\r\n    require(token != address(0), \"TF04\");\r\n\r\n    // 2- Defining the token in the core\r\n    ITokenCore tokenCore = ITokenCore(address(core));\r\n    require(tokenCore.defineToken(\r\n      token, _delegateId, _name, _symbol, _decimals), \"TF05\");\r\n\r\n    // 3- Assign roles\r\n    address[] memory factoryAddress = new address[](1);\r\n    factoryAddress[0] = address(this);\r\n    require(tokenCore.assignProxyOperators(token, FACTORY_PROXY_ROLE, factoryAddress), \"TF06\");\r\n    require(tokenCore.assignProxyOperators(token, ISSUER_PROXY_ROLE, _proxyOperators), \"TF07\");\r\n\r\n    // 4- Define rules\r\n    // Token is locked for review by core operators\r\n    // Removing the token factory from the rules will unlocked the token\r\n    IRule[] memory factoryRules = new IRule[](1);\r\n    factoryRules[0] = IRule(address(this));\r\n    require(tokenCore.defineRules(token, factoryRules), \"TF08\");\r\n\r\n    // 5- Locking the token\r\n    if (_lockEnd > now) {\r\n      require(tokenCore.defineLock(token, 0, _lockEnd, new address[](0)), \"TF09\");\r\n    }\r\n\r\n    // 6- Minting the token\r\n    require(tokenCore.mintAtOnce(token, _vaults, _supplies), \"TF10\");\r\n\r\n    emit TokenDeployed(token);\r\n    return token;\r\n  }\r\n\r\n  /**\r\n   * @dev reviewToken\r\n   */\r\n  function reviewToken(address _token, address[] memory _auditSelectors)\r\n    public onlyCoreOperator returns (bool)\r\n  {\r\n    require(hasCoreAccess(), \"TF01\");\r\n\r\n    bool[] memory values = new bool[](_auditSelectors.length);\r\n    for(uint256 i=0; i < values.length; i++) {\r\n      values[i] = true;\r\n    }\r\n\r\n    ITokenCore tokenCore = ITokenCore(address(core));\r\n    require(tokenCore.defineAuditSelector(address(core), 0, _auditSelectors, values), \"TF11\");\r\n    require(tokenCore.defineRules(_token, new IRule[](0)), \"TF12\");\r\n    emit TokenReviewed(_token);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev configureTokensales\r\n   */\r\n  function configureTokensales(address _token,\r\n    address[] memory _tokensales, uint256[] memory _allowances)\r\n    public onlyProxyOperator(_token) returns (bool)\r\n  {\r\n    require(hasCoreAccess(), \"TF01\");\r\n    require(_tokensales.length == _allowances.length, \"TF13\");\r\n\r\n    ITokenCore tokenCore = ITokenCore(address(core));\r\n    (,,,,uint256[2] memory schedule,,,) = tokenCore.token(_token);\r\n    require(tokenCore.defineLock(_token, schedule[0], schedule[1], _tokensales), \"TF14\");\r\n\r\n    updateAllowances(_token, _tokensales, _allowances);\r\n    emit TokensalesConfigured(_token, _tokensales);\r\n  }\r\n\r\n  /**\r\n   * @dev updateAllowance\r\n   */\r\n  function updateAllowances(address _token, address[] memory _spenders, uint256[] memory _allowances)\r\n    public onlyProxyOperator(_token) returns (bool)\r\n  {\r\n    uint256 balance = IERC20(_token).balanceOf(address(this));\r\n    for(uint256 i=0; i < _spenders.length; i++) {\r\n      require(_allowances[i] <= balance, \"TF15\");\r\n      require(IERC20(_token).approve(_spenders[i], _allowances[i]), \"TF16\");\r\n      emit AllowanceUpdated(_token, _spenders[i], _allowances[i]);\r\n    }\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_core\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"}],\"name\":\"AllowanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"codeHash\",\"type\":\"bytes32\"}],\"name\":\"ProxyCodeDefined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenReviewed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokensales\",\"type\":\"address[]\"}],\"name\":\"TokensalesConfigured\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokensales\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_allowances\",\"type\":\"uint256[]\"}],\"name\":\"configureTokensales\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"core\",\"outputs\":[{\"internalType\":\"contract IOperableCore\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_code\",\"type\":\"bytes\"}],\"name\":\"defineProxyCode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delegateId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockEnd\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_vaults\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_supplies\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_proxyOperators\",\"type\":\"address[]\"}],\"name\":\"deployToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasCoreAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"access\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_privilege\",\"type\":\"bytes4\"}],\"name\":\"hasCorePrivilege\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_privilege\",\"type\":\"bytes4\"}],\"name\":\"hasProxyPrivilege\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxyCode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_auditSelectors\",\"type\":\"address[]\"}],\"name\":\"reviewToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_spenders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_allowances\",\"type\":\"uint256[]\"}],\"name\":\"updateAllowances\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TokenFactory","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"000000000000000000000000e9e10a5de4a4920d9a5fd6f0c2f205eb575fd7d6","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://963879fdf10c5bc173c0f3d7ef4615eed8aa46800eca8f76f01a6989ac070866"}]}