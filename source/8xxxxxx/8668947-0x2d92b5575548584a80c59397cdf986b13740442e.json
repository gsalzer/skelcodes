{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.10;\r\n\r\ncontract ERC20TokenInterface {\r\n  function totalSupply() public view returns (uint256 _totalSupply);\r\n  function balanceOf(address _owner) public view returns (uint256 balance);\r\n  function transfer(address _to, uint256 _value) public returns (bool success);\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n  function approve(address _spender, uint256 _value) public returns (bool success);\r\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract tokenRecipientInterface {\r\n  function receiveApproval(address _from, uint256 _value, address _token, bytes memory _extraData) public;\r\n}\r\n\r\ncontract Owned {\r\n    address payable public owner;\r\n    address payable public newOwner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address payable _newOwner) public onlyOwner {\r\n        require(_newOwner != owner);\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnerUpdate(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0x0);\r\n    }\r\n\r\n    event OwnerUpdate(address _prevOwner, address _newOwner);\r\n}\r\n\r\ncontract SafeMath {\r\n    \r\n    uint256 constant public MAX_UINT256 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    function safeAdd(uint256 x, uint256 y) pure internal returns (uint256 z) {\r\n        require(x <= MAX_UINT256 - y);\r\n        return x + y;\r\n    }\r\n\r\n    function safeSub(uint256 x, uint256 y) pure internal returns (uint256 z) {\r\n        require(x >= y);\r\n        return x - y;\r\n    }\r\n\r\n    function safeMul(uint256 x, uint256 y) pure internal returns (uint256 z) {\r\n        if (y == 0) {\r\n            return 0;\r\n        }\r\n        require(x <= (MAX_UINT256 / y));\r\n        return x * y;\r\n    }\r\n}\r\n\r\ncontract Lockable is Owned {\r\n\r\n    uint256 public lockedUntilBlock;\r\n\r\n    event ContractLocked(uint256 _untilBlock);\r\n\r\n    modifier lockAffected {\r\n        require(block.number > lockedUntilBlock);\r\n        _;\r\n    }\r\n\r\n    function lockFromSelf(uint256 _untilBlock) internal {\r\n        lockedUntilBlock = _untilBlock;\r\n        emit ContractLocked(_untilBlock);\r\n    }\r\n\r\n\r\n    function lockUntil(uint256 _untilBlock) onlyOwner public {\r\n        lockedUntilBlock = _untilBlock;\r\n        emit ContractLocked(_untilBlock);\r\n    }\r\n}\r\n\r\ncontract ERC20Token is ERC20TokenInterface, SafeMath, Owned, Lockable {\r\n\r\n    // Name of token\r\n    string public name;\r\n    // Abbreviation of tokens name\r\n    string public symbol;\r\n    // Number of decimals token has\r\n    uint8 public decimals;\r\n    // Address of the contract with minting logic\r\n    address public mintingContractAddress;\r\n\r\n    // Current supply of tokens\r\n    uint256 supply = 0;\r\n    // Map of users balances\r\n    mapping (address => uint256) balances;\r\n    // Map of users allowances\r\n    mapping (address => mapping (address => uint256)) allowances;\r\n    // Accounts with no ability to transfer tokens\r\n    mapping(address => bool) frozenAccounts;\r\n\r\n    // Event that shows that new tokens were created\r\n    event Mint(address indexed _to, uint256 _value);\r\n    // Event that shows that old tokens were destroyed\r\n    event Burn(address indexed _from, uint _value);\r\n\r\n    /**\r\n    * @dev Returns number of tokens in circulation\r\n    *\r\n    * @return total number od tokens\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return supply;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the balance of specific account\r\n    *\r\n    * @param _owner The account that caller wants to querry\r\n    * @return the balance on this account\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n    * @dev User can transfer tokens with this method, method is disabled if emergencyLock is activated\r\n    *\r\n    * @param _to Reciever of tokens\r\n    * @param _value The amount of tokens that will be sent \r\n    * @return if successful returns true\r\n    */\r\n    function transfer(address _to, uint256 _value) lockAffected public returns (bool success) {\r\n        require(frozenAccounts[msg.sender] == false);\r\n        require(_to != address(0x0) && _to != address(this));\r\n        balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\r\n        balances[_to] = safeAdd(balanceOf(_to), _value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev This is used to allow some account to utilise transferFrom and sends tokens on your behalf, this method is disabled if emergencyLock is activated\r\n    *\r\n    * @param _spender Who can send tokens on your behalf\r\n    * @param _value The amount of tokens that are allowed to be sent \r\n    * @return if successful returns true\r\n    */\r\n    function approve(address _spender, uint256 _value) lockAffected public returns (bool success) {\r\n        require(frozenAccounts[msg.sender] == false);\r\n        allowances[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev This is used to send tokens and execute code on other smart contract, this method is disabled if emergencyLock is activated\r\n    *\r\n    * @param _spender Contract that is receiving tokens\r\n    * @param _value The amount that msg.sender is sending\r\n    * @param _extraData Additional params that can be used on reciving smart contract\r\n    * @return if successful returns true\r\n    */\r\n    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData) lockAffected public returns (bool success) {\r\n        tokenRecipientInterface spender = tokenRecipientInterface(_spender);\r\n        approve(_spender, _value);\r\n        spender.receiveApproval(msg.sender, _value, address(this), _extraData);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Sender can transfer tokens on others behalf, this method is disabled if emergencyLock is activated\r\n    *\r\n    * @param _from The account that will send tokens\r\n    * @param _to Account that will recive the tokens\r\n    * @param _value The amount that msg.sender is sending\r\n    * @return if successful returns true\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value) lockAffected public returns (bool success) {\r\n        require(frozenAccounts[msg.sender] == false);\r\n        require(_to != address(0x0) && _to != address(this));\r\n        balances[_from] = safeSub(balanceOf(_from), _value);\r\n        balances[_to] = safeAdd(balanceOf(_to), _value);\r\n        allowances[_from][msg.sender] = safeSub(allowances[_from][msg.sender], _value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the amount od tokens that can be sent from this addres by spender\r\n    *\r\n    * @param _owner Account that has tokens\r\n    * @param _spender Account that can spend tokens\r\n    * @return remaining balance to spend\r\n    */\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowances[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Creates new tokens as long as total supply does not reach limit\r\n    *\r\n    * @param _to Reciver od newly created tokens\r\n    * @param _amount Amount of tokens to be created;\r\n    */\r\n    function mint(address _to, uint256 _amount) public {\r\n        require(msg.sender == mintingContractAddress);\r\n        supply = safeAdd(supply, _amount);\r\n        balances[_to] = safeAdd(balances[_to], _amount);\r\n        emit Mint(_to, _amount);\r\n        emit Transfer(address(0x0), _to, _amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Destroys the amount of tokens and lowers total supply\r\n    *\r\n    * @param _amount Number of tokens user wants to destroy\r\n    */\r\n    function burn(uint _amount) public {\r\n        require(frozenAccounts[msg.sender] == false);\r\n        balances[msg.sender] = safeSub(balanceOf(msg.sender), _amount);\r\n        supply = safeSub(supply, _amount);\r\n        emit Burn(msg.sender, _amount);\r\n        emit Transfer(msg.sender, address(0x0), _amount);\r\n    }\r\n    \r\n    /**\r\n    * @dev Owner disables one address so it cannot transfer tokens\r\n    *\r\n    * @param _target Address to freeze\r\n    */\r\n    function freezeUnfreezeAccount(address _target) onlyOwner public {\r\n        frozenAccounts[_target] = !frozenAccounts[_target];\r\n    }\r\n    \r\n    /**\r\n    * @dev Owner can trasnfer tokens of the frozen accounts\r\n    *\r\n    * @param _from The account that will send tokens\r\n    * @param _value The amount that msg.sender is sending\r\n    * @return if successful returns true\r\n    */\r\n    function transferFromFrozenAccount(address _from, uint256 _value) onlyOwner public returns (bool success) {\r\n        require(frozenAccounts[_from] == true);\r\n        balances[_from] = safeSub(balanceOf(_from), _value);\r\n        balances[owner] = safeAdd(balanceOf(owner), _value);\r\n        emit Transfer(_from, owner, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Saves exidentaly sent tokens to this contract, can be used only by owner\r\n    *\r\n    * @param _tokenAddress Address of tokens smart contract\r\n    * @param _to Where to send the tokens\r\n    * @param _amount The amount of tokens that we are salvaging\r\n    */\r\n    function salvageTokensFromContract(address _tokenAddress, address _to, uint _amount) onlyOwner public {\r\n        ERC20TokenInterface(_tokenAddress).transfer(_to, _amount);\r\n    }\r\n    \r\n    /**\r\n    * @dev Owner can set the minting contract\r\n    *\r\n    * @param _mintingContractAddress Address to freeze\r\n    */\r\n    function setMintingContract(address _mintingContractAddress) onlyOwner public {\r\n        mintingContractAddress = _mintingContractAddress;\r\n    }\r\n\r\n    /**\r\n    * @dev Disables the contract and wipes all the balances, can be used only by owner\r\n    */\r\n    function killContract() public onlyOwner {\r\n        selfdestruct(owner);\r\n    }\r\n}\r\n\r\n\r\ncontract x8cTokenContract is ERC20Token {\r\n\r\n    /**\r\n    * @dev Intialises token and all the necesary variable\r\n    */\r\n   constructor() public {\r\n        name = \"X8C token\";\r\n        symbol = \"X8C\";\r\n        decimals = 18;\r\n        mintingContractAddress = 0x546BdB5eDA549dD3a1e43108A79e9a05BA07e527;\r\n        lockFromSelf(0);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_untilBlock\",\"type\":\"uint256\"}],\"name\":\"lockUntil\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"killContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_UINT256\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"salvageTokensFromContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mintingContractAddress\",\"type\":\"address\"}],\"name\":\"setMintingContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFromFrozenAccount\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedUntilBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"freezeUnfreezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_untilBlock\",\"type\":\"uint256\"}],\"name\":\"ContractLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"x8cTokenContract","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://b62075d96bfccae1ba3f724fa0a45f677208eb503baf4c1d24b63dde2c9370a6"}]}