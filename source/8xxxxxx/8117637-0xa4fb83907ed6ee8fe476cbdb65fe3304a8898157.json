{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n\r\nSTAYK.ME\r\n\r\n(STAYK)\r\n\r\nwebsite:  https://stayk.me\r\n\r\ndiscord:  https://discord.gg/bpt8Paj\r\n\r\ntwitter:  https://twitter.com/STAYK_TOKEN\r\n\r\nMaximum Supply:  Ethereum Block.number * 10\r\n\r\n1% Token Burn on Every Transfer\r\n\r\nEach Token Holder Can request payout in STAYK tokens\r\nonce per day\r\n\r\nSTAYK payouts are in proportion to your holdings\r\n\r\nETH can be sent directly to the contract to purchase tokens\r\nwhen a sale is open\r\n\r\n*DO NOT SEND ETH from an exchange wallet.   Only send ETH from a wallet\r\nyou control directly.  Otherwise you will lose your tokens.\r\n\r\n*/\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\r\n    uint256 c = add(a,m);\r\n    uint256 d = sub(c,1);\r\n    return mul(div(d,m),m);\r\n  }\r\n}\r\n\r\ncontract ERC20Detailed is IERC20 {\r\n\r\n  uint8 private _Tokendecimals;\r\n  string private _Tokenname;\r\n  string private _Tokensymbol;\r\n\r\n  constructor(string memory name, string memory symbol, uint8 decimals) public {\r\n   \r\n   _Tokendecimals = decimals;\r\n    _Tokenname = name;\r\n    _Tokensymbol = symbol;\r\n    \r\n  }\r\n\r\n  function name() public view returns(string memory) {\r\n    return _Tokenname;\r\n  }\r\n\r\n  function symbol() public view returns(string memory) {\r\n    return _Tokensymbol;\r\n  }\r\n\r\n  function decimals() public view returns(uint8) {\r\n    return _Tokendecimals;\r\n  }\r\n}\r\n\r\n/**end here**/\r\n\r\ncontract STAYK is ERC20Detailed {\r\n\r\n  using SafeMath for uint256;\r\n  bool public allowSale = true;\r\n  uint256 public minPurchase = 0.01 ether;\r\n  uint256 public salePrice = 0.0001 ether;\r\n  uint256 public currentSaleAmount = 0;\r\n  uint256 public saleHardCap = 3000000e18;\r\n  uint256 public payFreq = 5900;\r\n  uint256 public burnFactor = 100;  //1%\r\n  uint256 tokenFactor = 10;    \r\n  mapping(address => uint256) public lastPay;\r\n  mapping (address => uint256) public _STAYKTokenBalances;\r\n  mapping (address => mapping (address => uint256)) private _allowed;\r\n  string constant tokenName = \"STAYK.ME\";\r\n  string constant tokenSymbol = \"STAYK\";\r\n  uint8  constant tokenDecimals = 18;\r\n  uint256 _totalSupply = block.number * tokenFactor * 1e18;\r\n  address public admin;\r\n  uint256 public _STAYKFund = _totalSupply;    \r\n\r\n  constructor() public payable ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) {\r\n    \r\n    admin = msg.sender;\r\n  }\r\n\r\n  \r\n  function totalSupply() public view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  function myTokens() public view returns (uint256) {\r\n    return _STAYKTokenBalances[msg.sender];\r\n  }\r\n\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n    return _STAYKTokenBalances[owner];\r\n  }\r\n\r\n  function allowance(address owner, address spender) public view returns (uint256) {\r\n    return _allowed[owner][spender];\r\n  }\r\n\r\n  function setPayFrequency(uint256 _input) public {\r\n    require(msg.sender == admin);\r\n    payFreq = _input;\r\n  }\r\n\r\n  function setBurnFactor(uint256 _input) public {\r\n    require(msg.sender == admin);\r\n    burnFactor = _input;\r\n  }\r\n\r\n  function() payable external {\r\n\r\n    if (msg.value == 0){\r\n\r\n      getPaid();\r\n\r\n    } else {\r\n\r\n      _buyTokens(msg.value);\r\n\r\n    }\r\n  }\r\n\r\n  function resetSale(uint256 _hardCap) public {\r\n     require(msg.sender == admin);\r\n     require(_hardCap <= _STAYKFund);\r\n     currentSaleAmount = 0;\r\n     saleHardCap = _hardCap;\r\n  }\r\n\r\n  function setAllowSale(bool _allow) public {\r\n     require(msg.sender == admin);\r\n     allowSale = _allow;\r\n  }\r\n\r\n  function setMinPurcchae(uint256 _amount) public {\r\n     require(msg.sender == admin);\r\n     minPurchase = _amount;\r\n  }\r\n\r\n  function setSalePrice(uint256 _amount) public {\r\n     require(msg.sender == admin);\r\n     salePrice = _amount;\r\n  }\r\n\r\n  function buyTokens() public payable{\r\n      _buyTokens(msg.value);\r\n  }\r\n\r\n  function _buyTokens(uint256 _incomingEthereum) internal {\r\n     require(allowSale);\r\n     require(_incomingEthereum >= minPurchase);\r\n     uint256 tokensToBuy = _incomingEthereum.div(salePrice).mul(1e18);\r\n     require(tokensToBuy <= block.number * tokenFactor - _totalSupply);\r\n     require(tokensToBuy <= saleHardCap.sub(currentSaleAmount));\r\n     require(tokensToBuy <= _STAYKFund);\r\n     _STAYKTokenBalances[msg.sender] = _STAYKTokenBalances[msg.sender].add(tokensToBuy);\r\n     _STAYKFund = _STAYKFund.sub(tokensToBuy);\r\n     lastPay[msg.sender] = block.number;\r\n     currentSaleAmount = currentSaleAmount.add(tokensToBuy);\r\n     emit Transfer(address(this), msg.sender, tokensToBuy);\r\n  }\r\n\r\n\r\n  function getPaid() public {\r\n\r\n     require(_STAYKTokenBalances[msg.sender] > 0);\r\n     require(lastPay[msg.sender] + payFreq <= block.number);\r\n     uint256 availableTokens = ((block.number).mul(tokenFactor * 1e18)).sub(_totalSupply);\r\n     uint256 payAmountSender = (_STAYKTokenBalances[msg.sender].mul(availableTokens)).div(_totalSupply);\r\n     _totalSupply = _totalSupply.add(payAmountSender);\r\n     _STAYKTokenBalances[msg.sender] = _STAYKTokenBalances[msg.sender].add(payAmountSender);\r\n     lastPay[msg.sender] = block.number;\r\n     emit Transfer(address(this), msg.sender, payAmountSender);\r\n  }\r\n\r\n  function withdraw() public {\r\n    require(msg.sender == admin);\r\n    msg.sender.transfer(address(this).balance);\r\n  }\r\n\r\n  function withdrawPartial(uint256 _amount) public {\r\n    require(msg.sender == admin);\r\n    require(_amount <= address(this).balance);\r\n    msg.sender.transfer(_amount);\r\n  }\r\n\r\n  function distributeETH(address payable _to, uint256 _amount) public {\r\n     require(msg.sender == admin);\r\n     require(_amount <= address(this).balance);\r\n     require(_to != address(0));\r\n     _to.transfer(_amount);\r\n  }\r\n\r\n\r\n  function transfer(address to, uint256 value) public returns (bool) {\r\n    require(value <= _STAYKTokenBalances[msg.sender]);\r\n    require(to != address(0));\r\n\r\n    uint256 STAYKTokenDecay = 0;\r\n    if (burnFactor != 0) {\r\n       STAYKTokenDecay = value.div(burnFactor); \r\n    }\r\n    uint256 tokensToTransfer = value.sub(STAYKTokenDecay);\r\n\r\n    _STAYKTokenBalances[msg.sender] = _STAYKTokenBalances[msg.sender].sub(value);\r\n    _STAYKTokenBalances[to] = _STAYKTokenBalances[to].add(tokensToTransfer);\r\n\r\n    _totalSupply = _totalSupply.sub(STAYKTokenDecay);\r\n\r\n    emit Transfer(msg.sender, to, tokensToTransfer);\r\n    if (burnFactor != 0) {\r\n       emit Transfer(msg.sender, address(0), STAYKTokenDecay);\r\n    }\r\n    \r\n    return true;\r\n  }\r\n\r\n  function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {\r\n    for (uint256 i = 0; i < receivers.length; i++) {\r\n      transfer(receivers[i], amounts[i]);\r\n    }\r\n  }\r\n\r\n function multiSend(address[] memory receivers, uint256[] memory amounts) public {  \r\n    require(msg.sender == admin);\r\n    for (uint256 i = 0; i < receivers.length; i++) {\r\n      _STAYKTokenBalances[receivers[i]] = _STAYKTokenBalances[receivers[i]].add(amounts[i]);\r\n      _STAYKFund = _STAYKFund.sub(amounts[i]);\r\n      emit Transfer(address(this), receivers[i], amounts[i]);\r\n    }\r\n  }\r\n\r\n  function approve(address spender, uint256 value) public returns (bool) {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = value;\r\n    emit Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n    require(value <= _STAYKTokenBalances[from]);\r\n    require(value <= _allowed[from][msg.sender]);\r\n    require(to != address(0));\r\n\r\n    _STAYKTokenBalances[from] = _STAYKTokenBalances[from].sub(value);\r\n\r\n    uint256 STAYKTokenDecay =0;\r\n    if (burnFactor != 0) {\r\n       STAYKTokenDecay = value.div(burnFactor); \r\n    } else {\r\n      STAYKTokenDecay = 0;\r\n    }\r\n    uint256 tokensToTransfer = value.sub(STAYKTokenDecay);\r\n\r\n    _STAYKTokenBalances[to] = _STAYKTokenBalances[to].add(tokensToTransfer);\r\n    _totalSupply = _totalSupply.sub(STAYKTokenDecay);\r\n\r\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n\r\n    //lastPay[to] = block.number;\r\n\r\n    emit Transfer(from, to, tokensToTransfer);\r\n    if (burnFactor != 0) {\r\n       emit Transfer(from, address(0), STAYKTokenDecay);\r\n    }\r\n    \r\n\r\n    return true;\r\n  }\r\n\r\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  function burn(uint256 amount) public {\r\n    _burn(msg.sender, amount);\r\n  }\r\n\r\n  function _burn(address account, uint256 amount) internal {\r\n    require(amount != 0);\r\n    require(amount <= _STAYKTokenBalances[account]);\r\n    _totalSupply = _totalSupply.sub(amount);\r\n    _STAYKTokenBalances[account] = _STAYKTokenBalances[account].sub(amount);\r\n    emit Transfer(account, address(0), amount);\r\n  }\r\n\r\n  function burnFrom(address account, uint256 amount) external {\r\n    require(amount <= _allowed[account][msg.sender]);\r\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);\r\n    _burn(account, amount);\r\n  }\r\n\r\n  function distributeFund(address _to, uint256 _amount) public {\r\n      require(msg.sender == admin);\r\n      require(_amount <= _STAYKFund);\r\n      _STAYKFund = _STAYKFund.sub(_amount);\r\n      lastPay[_to] = block.number;\r\n      _STAYKTokenBalances[_to] = _STAYKTokenBalances[_to].add(_amount);\r\n      emit Transfer(address(this), _to, _amount);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawPartial\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSalePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hardCap\",\"type\":\"uint256\"}],\"name\":\"resetSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receivers\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payFreq\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minPurchase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleHardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_input\",\"type\":\"uint256\"}],\"name\":\"setBurnFactor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"distributeETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_input\",\"type\":\"uint256\"}],\"name\":\"setPayFrequency\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"distributeFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_STAYKFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnFactor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receivers\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMinPurcchae\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getPaid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastPay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_STAYKTokenBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_allow\",\"type\":\"bool\"}],\"name\":\"setAllowSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentSaleAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"salePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"STAYK","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6c912b99a962a5a109725746707a7700b030359897509b4e5d3a830d404d3d88"}]}