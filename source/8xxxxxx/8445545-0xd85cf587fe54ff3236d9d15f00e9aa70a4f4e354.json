{"status":"1","message":"OK","result":[{"SourceCode":"//////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////// import \"./IERC20.sol\";\n/////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see `ERC20Detailed`.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a `Transfer` event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\n     * zero by default.\n     *\n     * This value changes when `approve` or `transferFrom` are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * > Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an `Approval` event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a `Transfer` event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to `approve`. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n//////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////// import \"../Roles.sol\";\n/////////////////////////////////////////////////////////////////////////////////\npragma solidity ^0.5.0;\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev Give an account access to this role.\n     */\n    function add(Role storage role, address account) internal {\n        require(!has(role, account), \"Roles: account already has role\");\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev Remove an account's access to this role.\n     */\n    function remove(Role storage role, address account) internal {\n        require(has(role, account), \"Roles: account does not have role\");\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev Check if an account has this role.\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0), \"Roles: account is the zero address\");\n        return role.bearer[account];\n    }\n}\n\n\n\n//////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////// \n/////////////////////////////////////////////////////////////////////////////////\n\n\ncontract TrustedRole {\n    using Roles for Roles.Role;\n\n    event TrustedAdded(address indexed account);\n    event TrustedRemoved(address indexed account);\n\n    Roles.Role private _trusted;\n\n    constructor () internal {\n        _addTrusted(msg.sender);\n    }\n\n    modifier onlyTrusted() {\n        require(isTrusted(msg.sender), \"TrusRole: caller does not have the Minter role\");\n        _;\n    }\n\n    function isTrusted(address account) public view returns (bool) {\n        return _trusted.has(account);\n    }\n\n    function addTrusted(address account) public onlyTrusted {\n        _addTrusted(account);\n    }\n\n    function renounceMinter() public {\n        _removeTrusted(msg.sender);\n    }\n\n    function _addTrusted(address account) internal {\n        _trusted.add(account);\n        emit TrustedAdded(account);\n    }\n\n    function _removeTrusted(address account) internal {\n        _trusted.remove(account);\n        emit TrustedRemoved(account);\n    }\n}\n\n//////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////// PiramidTemplate Interface\n/////////////////////////////////////////////////////////////////////////////////\ninterface IPiramid{\n    //using SafeMath for uint;\n    \n    function addTrustedByOwner(address account) external;\n    \n    function addTrusted(address account) external;\n     \n    function setOwner(address account) external payable ;\n        \n    function transferAnyERC20Token(IERC20 tokenAddress, address toaddr, uint tokens) external returns (bool success) ;\n    \n    function setTrustDoInit(address account) external payable ;\n    \n    function initValue(string calldata _namepiramid, int _levels, int _countatlevel, address _feeaddr, address _feeaddr2, address _firstaddr) external ;\n    \n    function setSumLevel(int _level, uint sum) external ;\n    \n    function setFeeAddr(address _addr) external payable ;\n    \n    function setFeeAddr2(address _addr) external payable ;\n    \n    function setFeeFirstPercent(uint _perc) external payable ;\n    \n    function getFeeSums() external view returns(uint _Payments1, uint _Payments2) ;\n    \n    function setBlockPayment(address _addr) external payable ;\n    \n    function unsetBlockPayment(address _addr) external payable ;\n    \n    function getBlockPayment(address _addr) external view returns(bool _Result) ;\n    \n    function getName() external view returns(string memory) ;\n    \n    function getLevels() external view returns(int) ;\n    \n    function getSlotsOnLevel() external view returns(int _SlotsOnLevel) ;\n    \n    function getSumOneLevel(int _level) external view returns(uint) ;\n    \n    function getInfoByAddr(address _addr) external view returns(address _parentaddr, address _realpositionaddr, address _thisaddr, int _countchildren, uint _countallref) ;\n    \n    function getInfoByAddrAnLevel(address _addr, int _level) external view returns(address _thisaddr, uint _allslots, uint _freeslots, uint _paidslots, uint _paidamount) ;\n    \n    function getPaymentInfoByLevel(int _level, address _parentaddr) external view returns(int _retLevel, uint _retSum, address _retAddress, uint _retAllSlots, uint _retFreeSlots) ;\n    \n    function addPartner(address _addrPartner, uint _percentPartner) external payable returns(int _idPartner) ;\n    \n    function getPartner(int _idPartner) external view returns(address _addrPartner, uint _percentPartner, int _idPartnerRet, uint _Paid) ;\n    \n    function changePartnerInfo(int _idPartner, address _addrPartner, uint _Percent) external payable ;\n    \n    function getNeadPaymentCount(address _addr) external view returns (int _countNead) ;\n    \n    function getNeadPaymentAddr(address _addr, int _pos) external view returns (address _NeadAddr) ;\n    \n    function getNeadPaymentSum(address _addr, int _pos) external view returns (uint _NeadAddr) ;\n    \n    function destroyNeadPayment(address _addr) external ;\n    \n    function setComlitePay(address _addr) external ;\n    \n    function addPayment(address _addrParent, address _addrPayer, int _idPartner) external payable returns(address _realposition) ;\n    \n    function getDownAddrWithFreeSlots(address _addrParrent) external view returns(address _freeAddr) ;\n    \n    function checkPresentAddr(address _addr) external view returns(bool _retPresent) ;\n    \n    function checkComplitePay(address _addr) external view returns(bool _retPresent) ;\n    \n    function checkCompliteGenerateTable(address _addr) external view returns(bool _retPresent) ;\n    \n    function getFullSumPay() external view returns(uint retSum) ;\n}\n\n\n\n//////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////// PiramidTemplate\n/////////////////////////////////////////////////////////////////////////////////\ncontract PiramidV1Manadge is TrustedRole{\n    \n    event SetNewOwner(address Who, address What);\n    \n    address private _owner;\n    mapping (string=>IPiramid) Piramids;\n    bool private initComplite = false;\n    \n    constructor() public payable{\n        _owner = msg.sender;\n    }\n    \n    function () external payable {\n        \n        if(msg.value>0){\n            address payable owner = address(uint160(_owner));\n            owner.transfer(address(this).balance);\n            //address(uint160(owner)).transfer(address(this).balance);\n        }\n    }\n    \n    modifier onlyOwner() {\n        require(_owner!=msg.sender, \"Piramid: caller not owner\");\n        _;\n    }\n    \n    function addTrustedByOwner(address account) public onlyTrusted {\n        _addTrusted(account);\n    }\n     \n    function setOwner(address account) public onlyTrusted payable {\n        emit SetNewOwner(msg.sender, account);\n        _owner = address(account);\n    }\n    \n    \n    function initAll(address _pir1, address _pir2, address _pir3) public onlyTrusted payable{\n        require(!initComplite, 'Already initialization!');\n        \n        string memory NamePir = 'beginner';\n        Piramids[NamePir] = IPiramid(_pir1);\n        pirSetTrustDoInit(NamePir, address(this));\n        pirInitValue(NamePir, NamePir, 6, 5, _owner, _owner, _owner);\n        pirSetSumLevel(NamePir, 0, uint(500000000000000));\n        pirSetSumLevel(NamePir, 1, uint(750000000000000));\n        pirSetSumLevel(NamePir, 2, uint(350000000000000));\n        pirSetSumLevel(NamePir, 3, uint(500000000000000));\n        pirSetSumLevel(NamePir, 4, uint(750000000000000));\n        pirSetSumLevel(NamePir, 5, uint(900000000000000));\n        pirSetSumLevel(NamePir, 6, uint(1250000000000000));\n        \n        NamePir = 'middle';\n        Piramids[NamePir] = IPiramid(_pir2);\n        pirSetTrustDoInit(NamePir, address(this));\n        pirInitValue(NamePir, NamePir, 8, 4, _owner, _owner, _owner);\n        pirSetSumLevel(NamePir, 0, uint(2000000000000000));\n        pirSetSumLevel(NamePir, 1, uint(3500000000000000));\n        pirSetSumLevel(NamePir, 2, uint(1250000000000000));\n        pirSetSumLevel(NamePir, 3, uint(1750000000000000));\n        pirSetSumLevel(NamePir, 4, uint(2000000000000000));\n        pirSetSumLevel(NamePir, 5, uint(2750000000000000));\n        pirSetSumLevel(NamePir, 6, uint(3250000000000000));\n        pirSetSumLevel(NamePir, 7, uint(3500000000000000));\n        pirSetSumLevel(NamePir, 8, uint(5000000000000000));\n        \n        NamePir = 'big';\n        Piramids[NamePir] = IPiramid(_pir3);\n        pirSetTrustDoInit(NamePir, address(this));\n        pirInitValue(NamePir, NamePir, 7, 7, _owner, _owner, _owner);\n        pirSetSumLevel(NamePir, 0, uint(40000000000000000));\n        pirSetSumLevel(NamePir, 1, uint(60000000000000000));\n        pirSetSumLevel(NamePir, 2, uint(25000000000000000));\n        pirSetSumLevel(NamePir, 3, uint(35000000000000000));\n        pirSetSumLevel(NamePir, 4, uint(45000000000000000));\n        pirSetSumLevel(NamePir, 5, uint(65000000000000000));\n        pirSetSumLevel(NamePir, 6, uint(90000000000000000));\n        pirSetSumLevel(NamePir, 7, uint(140000000000000000));\n        initComplite = true;\n    }\n        \n    \n    function initAllSmall(address _pir1, address _pir2, address _pir3) public onlyTrusted payable{\n        require(!initComplite, 'Already initialization!');\n        \n        string memory NamePir = 'beginner';\n        Piramids[NamePir] = IPiramid(_pir1);\n        \n        NamePir = 'middle';\n        Piramids[NamePir] = IPiramid(_pir2);\n        \n        NamePir = 'big';\n        Piramids[NamePir] = IPiramid(_pir3);\n        \n        initComplite = true;\n    }\n    \n    function GameOver() public onlyOwner payable {\n        selfdestruct(address(uint160(_owner)));\n    }\n    \n    function transferAnyERC20Token(IERC20 tokenAddress, address toaddr, uint tokens) public onlyTrusted returns (bool success) {\n        return IERC20(tokenAddress).transfer(toaddr, tokens);\n    }\n    \n    function setNewAddressPir(string memory _namepirm, address _account) public onlyTrusted {\n        \n        Piramids[_namepirm] = IPiramid(_account);\n    }\n    \n    function getAddreesPir(string memory _namepir) public view returns (address AddressPiramid){\n        \n        return address(Piramids[_namepir]);\n    }\n    \n    \n    function addTrustedToAll(address account) public onlyTrusted{\n        \n        pirAddTrusted('beginner', account);\n        \n        pirAddTrusted('middle', account);\n        \n        pirAddTrusted('big', account);\n    }\n    \n    function pirSetTrustDoInit(string memory _namepir, address account) public onlyTrusted {\n        \n        require(!initComplite, 'Already complite');\n        bytes memory data = abi.encodeWithSelector(Piramids[_namepir].setTrustDoInit.selector, account);\n        (bool success, bytes memory returndata) = address(Piramids[_namepir]).call(data);\n        require(success, \"PiramidV3.setTrustDoInit: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            //////\n        }\n    }\n    \n    \n    function pirAddTrusted(string memory _namepir, address account) public onlyTrusted returns (bool result){\n        \n        bytes memory data = abi.encodeWithSelector(Piramids[_namepir].addTrusted.selector, account);\n        (bool success, bytes memory returndata) = address(Piramids[_namepir]).call(data);\n        require(success, \"PiramidV3.addTrusted: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            return abi.decode(returndata, (bool));\n        }\n    }\n    \n    function pirInitValue(string memory _namepir, string memory _namepiramid, int _levels, int _countatlevel, address _feeaddr, address _feeaddr2, address _firstaddr) internal {\n        \n        bytes memory data = abi.encodeWithSelector(Piramids[_namepir].initValue.selector, _namepiramid, _levels, _countatlevel, _feeaddr, _feeaddr2, _firstaddr);\n        (bool success, bytes memory returndata) = address(Piramids[_namepir]).call(data);\n        require(success, \"PiramidV3.initValue: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            /////\n        }\n    }\n    \n    function pirSetSumLevel(string memory _namepir, int _level, uint sum) internal {\n        \n        bytes memory data = abi.encodeWithSelector(Piramids[_namepir].setSumLevel.selector, _level, sum);\n        (bool success, bytes memory returndata) = address(Piramids[_namepir]).call(data);\n        require(success, \"PiramidV3.setSumLevel: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            //////\n        }\n        \n    }\n    \n    function pirGetFullSumPay(string memory _namepir) public returns(uint retSum){\n        \n        bytes memory data = abi.encodeWithSelector(Piramids[_namepir].getFullSumPay.selector);\n        (bool success, bytes memory returndata) = address(Piramids[_namepir]).call(data);\n        require(success, \"PiramidV3.getFullSumPay: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            return abi.decode(returndata, (uint));\n        }\n    }\n    \n    \n    function pirCheckPresentAddr(string memory _namepir, address account) public returns (bool result){\n        \n        bytes memory data = abi.encodeWithSelector(Piramids[_namepir].checkPresentAddr.selector, account);\n        (bool success, bytes memory returndata) = address(Piramids[_namepir]).call(data);\n        require(success, \"PiramidV3.checkPresentAddr: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            return abi.decode(returndata, (bool));\n        }\n    }\n    \n    function pirGetName(string memory _namepir) public returns (string memory name){\n        \n        bytes memory data = abi.encodeWithSelector(Piramids[_namepir].getName.selector);\n        (bool success, bytes memory returndata) = address(Piramids[_namepir]).call(data);\n        require(success, \"PiramidV3.getName: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            return abi.decode(returndata, (string));\n        }\n    }\n    \n    \n    function pirGetLevels(string memory _namepir) public returns (int _Levels){\n        \n        bytes memory data = abi.encodeWithSelector(Piramids[_namepir].getLevels.selector);\n        (bool success, bytes memory returndata) = address(Piramids[_namepir]).call(data);\n        require(success, \"PiramidV3.getLevels: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            return abi.decode(returndata, (int));\n        }\n    }\n    \n    \n    function pirGetSlotsOnLevel(string memory _namepir) public returns(int _SlotsOnLevel){\n        \n        bytes memory data = abi.encodeWithSelector(Piramids[_namepir].getSlotsOnLevel.selector);\n        (bool success, bytes memory returndata) = address(Piramids[_namepir]).call(data);\n        require(success, \"PiramidV3.getSlotsOnLevel: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            return abi.decode(returndata, (int));\n        }\n    }\n    \n    \n    function pirGetSumOneLevel(string memory _namepir, int _level) public returns(uint _SlotsOnLevel){\n        \n        bytes memory data = abi.encodeWithSelector(Piramids[_namepir].getSumOneLevel.selector, _level);\n        (bool success, bytes memory returndata) = address(Piramids[_namepir]).call(data);\n        require(success, \"PiramidV3.getSumOneLevel: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            return abi.decode(returndata, (uint));\n        }\n    }\n    \n    \n    function pirGetInfoByAddr(string memory _namepir, address _addr) public returns(address _parentaddr, address _realpositionaddr, address _thisaddr, int _countchildren, uint _countallref){\n        \n        bytes memory data = abi.encodeWithSelector(Piramids[_namepir].getInfoByAddr.selector, _addr);\n        (bool success, bytes memory returndata) = address(Piramids[_namepir]).call(data);\n        require(success, \"PiramidV3.getInfoByAddr: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            return abi.decode(returndata, (address, address, address, int, uint));\n        }\n    }\n    \n    \n    \n    function pirGetInfoByAddrAnLevel(string memory _namepir, address _addr, int _level) public returns(address _thisaddr, uint _allslots, uint _freeslots, uint _paidslots, uint _paidamount){\n        \n        bytes memory data = abi.encodeWithSelector(Piramids[_namepir].getInfoByAddrAnLevel.selector, _addr, _level);\n        (bool success, bytes memory returndata) = address(Piramids[_namepir]).call(data);\n        require(success, \"PiramidV3.getInfoByAddrAnLevel: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            return abi.decode(returndata, (address, uint, uint, uint, uint));\n        }\n    }\n\n    \n    function pirGetPartner(string memory _namepir, int _idPartner) public returns(address _addrPartner, uint _percentPartner, int _idPartnerRet, uint _Paid){\n        \n        bytes memory data = abi.encodeWithSelector(Piramids[_namepir].getPartner.selector, _idPartner);\n        (bool success, bytes memory returndata) = address(Piramids[_namepir]).call(data);\n        require(success, \"PiramidV3.getPartner: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            return abi.decode(returndata, (address, uint, int, uint));\n        }\n    }\n    \n    function pirGetFeeSums(string memory _namepir) public returns(uint _Payments1, uint _Payments2){\n        \n        bytes memory data = abi.encodeWithSelector(Piramids[_namepir].getFeeSums.selector);\n        (bool success, bytes memory returndata) = address(Piramids[_namepir]).call(data);\n        require(success, \"PiramidV3.getFeeSums: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            return abi.decode(returndata, (uint, uint));\n        }\n    }\n    \n    \n    function pirGetBlockPayment(string memory _namepir, address _addr) public returns(bool _Result){\n        \n        bytes memory data = abi.encodeWithSelector(Piramids[_namepir].getBlockPayment.selector, _addr);\n        (bool success, bytes memory returndata) = address(Piramids[_namepir]).call(data);\n        require(success, \"PiramidV3.getBlockPayment: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            return abi.decode(returndata, (bool));\n        }\n    }\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_namepir\",\"type\":\"string\"}],\"name\":\"pirGetLevels\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"_Levels\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_namepir\",\"type\":\"string\"},{\"internalType\":\"int256\",\"name\":\"_level\",\"type\":\"int256\"}],\"name\":\"pirGetSumOneLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_SlotsOnLevel\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_namepirm\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"setNewAddressPir\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_namepir\",\"type\":\"string\"}],\"name\":\"pirGetFullSumPay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"retSum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_namepir\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"pirGetBlockPayment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_Result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_namepir\",\"type\":\"string\"},{\"internalType\":\"int256\",\"name\":\"_idPartner\",\"type\":\"int256\"}],\"name\":\"pirGetPartner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_addrPartner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_percentPartner\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_idPartnerRet\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_Paid\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addTrustedByOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_namepir\",\"type\":\"string\"}],\"name\":\"pirGetName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pir1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pir2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pir3\",\"type\":\"address\"}],\"name\":\"initAllSmall\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_namepir\",\"type\":\"string\"}],\"name\":\"pirGetSlotsOnLevel\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"_SlotsOnLevel\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_namepir\",\"type\":\"string\"}],\"name\":\"pirGetFeeSums\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_Payments1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_Payments2\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_namepir\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"pirCheckPresentAddr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_namepir\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"pirAddTrusted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isTrusted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_namepir\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"pirGetInfoByAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_parentaddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_realpositionaddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_thisaddr\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"_countchildren\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_countallref\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addTrustedToAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_namepir\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"pirSetTrustDoInit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pir1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pir2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pir3\",\"type\":\"address\"}],\"name\":\"initAll\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_namepir\",\"type\":\"string\"}],\"name\":\"getAddreesPir\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"AddressPiramid\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toaddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addTrusted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_namepir\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"_level\",\"type\":\"int256\"}],\"name\":\"pirGetInfoByAddrAnLevel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_thisaddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allslots\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_freeslots\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_paidslots\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_paidamount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"GameOver\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"What\",\"type\":\"address\"}],\"name\":\"SetNewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"TrustedAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"TrustedRemoved\",\"type\":\"event\"}]","ContractName":"PiramidV1Manadge","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0838a34c963f3170d4cbce60d8742e13e275a5fede67559e67b6e76c8b774f95"}]}