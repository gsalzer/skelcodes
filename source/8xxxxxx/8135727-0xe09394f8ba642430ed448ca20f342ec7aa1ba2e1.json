{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.0;\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed from, address indexed _to);\r\n\r\n    constructor(address _owner) public {\r\n        owner = _owner;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\ncontract Pausable is Owned {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    modifier whenNotPaused() {\r\n      require(!paused);\r\n      _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n      require(paused);\r\n      _;\r\n    }\r\n\r\n    function pause() onlyOwner whenNotPaused public {\r\n      paused = true;\r\n      emit Pause();\r\n    }\r\n\r\n    function unpause() onlyOwner whenPaused public {\r\n      paused = false;\r\n      emit Unpause();\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @dev Implementation of the `IERC20` interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using `_mint`.\r\n * For a generic mechanism see `ERC20Mintable`.\r\n *\r\n * *For a detailed writeup see our guide [How to implement supply\r\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See `IERC20.approve`.\r\n */\r\ncontract ERC20 is IERC20, Pausable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See `IERC20.totalSupply`.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.balanceOf`.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev See `IERC20.allowance`.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.approve`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to `transfer`, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a `Transfer` event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n     /**\r\n     * @dev Destoys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a `Transfer` event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transferFrom`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of `ERC20`;\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `value`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal whenNotPaused returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an `Approval` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n}\r\n\r\ncontract FessChain is ERC20 {\r\n\r\n    using SafeMath for uint256;\r\n    string  public constant name = \"FESS\";\r\n    string  public constant symbol = \"FESS\";\r\n    uint8   public constant decimals = 18;\r\n\r\n    uint256 public tokenForSale = 600000000 ether;\r\n    uint256 public teamTokens = 2400000000 ether; \r\n    uint256 public maintainanceTokens = 1000000000 ether ;  \r\n    uint256 public marketingTokens = 10000000 ether ; \r\n    uint256 public airDropInIEO = 20000000 ether;  \r\n    uint256 public bountyInIEO = 30000000 ether;  \r\n    uint256 public mintingTokens = 2250000000 ether;\r\n    uint256 public airDropWithDapps = 3690000000 ether;\r\n\r\n    mapping(address => bool) public marketingTokenHolder;\r\n    mapping(address => uint256) public marketingLockPeriodStart;\r\n\r\n    mapping(address => bool) public teamTokenHolder;\r\n    mapping(address => uint256) public teamLockPeriodStart;\r\n    mapping(address => uint256) public teamTokenInitially;\r\n    mapping(address => uint256) public teamTokenSent;\r\n\r\n    uint256 public totalReleased = 0;\r\n\r\n    constructor(address _owner) public Owned(_owner) {\r\n \r\n        _mint(address(this), 10000000000 ether);\r\n        super._transfer(address(this),owner,tokenForSale);\r\n        totalReleased = totalReleased.add(tokenForSale);\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transfer`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public whenNotPaused returns (bool) {\r\n\r\n       if (marketingTokenHolder[msg.sender] == true)\r\n       { \r\n        \r\n        require(now >= (marketingLockPeriodStart[msg.sender]).add(20736000)); // 8 months, taken 30 days in each month\r\n        super._transfer(msg.sender, recipient, amount);           \r\n\r\n       }\r\n\r\n      else \r\n      {\r\n        super._transfer(msg.sender, recipient, amount);\r\n      } \r\n\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transferFrom`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of `ERC20`;\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `value`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public whenNotPaused returns (bool) {\r\n\r\n       if (marketingTokenHolder[msg.sender] == true)\r\n       { \r\n        \r\n        require(now >= (marketingLockPeriodStart[msg.sender]).add(20736000),'Lock period is not completed'); // 8 months, taken 30 days in each month\r\n        super._transferFrom(sender, recipient, amount);           \r\n\r\n       }\r\n\r\n      else \r\n      {\r\n        super._transferFrom(sender, recipient, amount);\r\n      } \r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev this function will send the Team tokens to given address\r\n    * @param _teamAddress ,address of the bounty receiver.\r\n    * @param _value , number of tokens to be sent.\r\n    */\r\n    function sendTeamTokens(address _teamAddress, uint256 _value) external whenNotPaused onlyOwner returns (bool) {\r\n\r\n        require(teamTokens >= _value);\r\n        totalReleased = totalReleased.add(_value);\r\n        require(totalReleased <= totalSupply());\r\n        teamTokens = teamTokens.sub(_value);\r\n        teamTokenHolder[_teamAddress] = true;\r\n        teamTokenInitially[_teamAddress] = teamTokenInitially[_teamAddress].add((_value.mul(95)).div(100));\r\n        teamLockPeriodStart[_teamAddress] = now; \r\n        super._transfer(address(this),_teamAddress,(_value.mul(5)).div(100));\r\n        return true;\r\n\r\n   }\r\n\r\n    /**\r\n    * @dev this function will send the Team tokens to given address\r\n    * @param _marketingAddress ,address of the bounty receiver.\r\n    * @param _value , number of tokens to be sent.\r\n    */\r\n    function sendMarketingTokens(address _marketingAddress, uint256 _value) external whenNotPaused onlyOwner returns (bool) {\r\n\r\n        require(marketingTokens >= _value);\r\n        totalReleased = totalReleased.add(_value);\r\n        require(totalReleased <= totalSupply());\r\n        marketingTokens = marketingTokens.sub(_value);\r\n        marketingTokenHolder[_marketingAddress] = true;\r\n        marketingLockPeriodStart[_marketingAddress] = now;\r\n        super._transfer(address(this),_marketingAddress,_value);\r\n        return true;\r\n\r\n   }\r\n\r\n    \r\n    /**\r\n    * @dev this function will send the Team tokens to given address\r\n    * @param _maintainanceAddress ,address of the bounty receiver.\r\n    * @param _value , number of tokens to be sent.\r\n    */\r\n    function sendMaintainanceTokens(address _maintainanceAddress, uint256 _value) external whenNotPaused onlyOwner returns (bool) {\r\n\r\n        require(maintainanceTokens >= _value);\r\n        totalReleased = totalReleased.add(_value);\r\n        require(totalReleased <= totalSupply());\r\n        maintainanceTokens = maintainanceTokens.sub(_value);\r\n        super._transfer(address(this),_maintainanceAddress,_value);\r\n        return true;\r\n\r\n   }\r\n    \r\n    /**\r\n    * @dev this function will send the Team tokens to given address\r\n    * @param _airDropAddress ,address of the bounty receiver.\r\n    * @param _value , number of tokens to be sent.\r\n    */\r\n    function sendAirDropIEO(address _airDropAddress, uint256 _value) external whenNotPaused onlyOwner returns (bool) {\r\n\r\n        require(airDropInIEO >= _value);\r\n        totalReleased = totalReleased.add(_value);\r\n        require(totalReleased <= totalSupply());\r\n        airDropInIEO = airDropInIEO.sub(_value);\r\n        super._transfer(address(this),_airDropAddress,_value);\r\n        return true;\r\n\r\n   }\r\n\r\n    /**\r\n    * @dev this function will send the Team tokens to given address\r\n    * @param _bountyAddress ,address of the bounty receiver.\r\n    * @param _value , number of tokens to be sent.\r\n    */\r\n    function sendBountyIEO(address _bountyAddress, uint256 _value) external whenNotPaused onlyOwner returns (bool) {\r\n\r\n        require(bountyInIEO >= _value);\r\n        totalReleased = totalReleased.add(_value);\r\n        require(totalReleased <= totalSupply());\r\n        bountyInIEO = bountyInIEO.sub(_value);\r\n        super._transfer(address(this),_bountyAddress,_value);\r\n        return true;\r\n\r\n   }\r\n\r\n    \r\n    /**.\r\n    * @dev this function will send the Team tokens to given address\r\n    * @param _airDropWithDapps ,address of the bounty receiver.\r\n    * @param _value , number of tokens to be sent.\r\n    */\r\n    function sendAirDropAndBountyDapps(address _airDropWithDapps, uint256 _value) external whenNotPaused onlyOwner returns (bool) {\r\n\r\n        require(airDropWithDapps >= _value);\r\n        totalReleased = totalReleased.add(_value);\r\n        require(totalReleased <= totalSupply());\r\n        airDropWithDapps = airDropWithDapps.sub(_value);\r\n        super._transfer(address(this),_airDropWithDapps,_value);\r\n        return true;\r\n\r\n   }\r\n\r\n    /**\r\n    * @dev this function will send the Team tokens to given address\r\n    * @param _mintingAddress ,address of the bounty receiver.\r\n    * @param _value , number of tokens to be sent.\r\n    */\r\n    function sendMintingTokens(address _mintingAddress, uint256 _value) external whenNotPaused onlyOwner returns (bool) {\r\n\r\n        require(mintingTokens >= _value);\r\n        totalReleased = totalReleased.add(_value);\r\n        require(totalReleased <= totalSupply());\r\n        mintingTokens = mintingTokens.sub(_value);\r\n        super._transfer(address(this),_mintingAddress,_value);\r\n        return true;\r\n\r\n   }\r\n    \r\n\r\n    /**\r\n    * @dev Destoys `amount` tokens from the caller.\r\n    *\r\n    * See `ERC20._burn`.\r\n    */\r\n    function burn(uint256 amount) external whenNotPaused{\r\n\r\n        _burn(msg.sender, amount);\r\n    }\r\n\r\n    function withdrawTeamTokens(uint256 amount) external whenNotPaused returns(bool) {\r\n\r\n        require(teamTokenHolder[msg.sender] == true,'not a team member');\r\n        require(now.sub(teamLockPeriodStart[msg.sender]).div(2592000)>=3,'Lock period is not above 3 months');\r\n        uint256 monthsNow = now.sub(teamLockPeriodStart[msg.sender]).div(2592000);\r\n\r\n        if(monthsNow >=3 && monthsNow < 6) \r\n        {\r\n           require(teamTokenSent[msg.sender].add(amount) <= (teamTokenInitially[msg.sender].mul(10)).div(100),'already withdraw 10 % tokens');   \r\n           teamTokenSent[msg.sender] = teamTokenSent[msg.sender].add(amount);\r\n           require(teamTokenSent[msg.sender] <= teamTokenInitially[msg.sender],'tokens sent is larger then initial tokens');\r\n           super._transfer(address(this),msg.sender,amount);      \r\n        } \r\n\r\n        else if(monthsNow >=6 && monthsNow < 9) \r\n        {\r\n           require(teamTokenSent[msg.sender].add(amount) <= (teamTokenInitially[msg.sender].mul(20)).div(100),'already withdraw 20 % tokens');\r\n           teamTokenSent[msg.sender] = teamTokenSent[msg.sender].add(amount);\r\n           require(teamTokenSent[msg.sender] <= teamTokenInitially[msg.sender]);\r\n           super._transfer(address(this),msg.sender,amount);           \r\n        } \r\n\r\n        else if(monthsNow >=9 && monthsNow < 12) \r\n        {\r\n           require(teamTokenSent[msg.sender].add(amount) <= (teamTokenInitially[msg.sender].mul(30)).div(100),'already withdraw 30 % tokens');\r\n           teamTokenSent[msg.sender] = teamTokenSent[msg.sender].add(amount);\r\n           require(teamTokenSent[msg.sender] <= teamTokenInitially[msg.sender]);\r\n           super._transfer(address(this),msg.sender,amount);\r\n        } \r\n\r\n        else if(monthsNow >=12 && monthsNow < 15) \r\n        {\r\n           require(teamTokenSent[msg.sender].add(amount) <= (teamTokenInitially[msg.sender].mul(40)).div(100),'already withdraw 40 % tokens');\r\n           teamTokenSent[msg.sender] = teamTokenSent[msg.sender].add(amount);\r\n           require(teamTokenSent[msg.sender] <= teamTokenInitially[msg.sender]);\r\n           super._transfer(address(this),msg.sender,amount);           \r\n        } \r\n\r\n        else if(monthsNow >=15 && monthsNow < 18) \r\n        {\r\n           require(teamTokenSent[msg.sender].add(amount) <= (teamTokenInitially[msg.sender].mul(50)).div(100),'already withdraw 50 % tokens');\r\n           teamTokenSent[msg.sender] = teamTokenSent[msg.sender].add(amount);\r\n           require(teamTokenSent[msg.sender] <= teamTokenInitially[msg.sender]);\r\n           super._transfer(address(this),msg.sender,amount);           \r\n        } \r\n\r\n        else if(monthsNow >=18 && monthsNow < 21) \r\n        {\r\n           require(teamTokenSent[msg.sender].add(amount) <= (teamTokenInitially[msg.sender].mul(60)).div(100),'already withdraw 60 % tokens');\r\n           teamTokenSent[msg.sender] = teamTokenSent[msg.sender].add(amount);\r\n           require(teamTokenSent[msg.sender] <= teamTokenInitially[msg.sender]);\r\n           super._transfer(address(this),msg.sender,amount);           \r\n        } \r\n\r\n        else if(monthsNow >=21 && monthsNow < 24) \r\n        {\r\n           require(teamTokenSent[msg.sender].add(amount) <= (teamTokenInitially[msg.sender].mul(70)).div(100),'already withdraw 70 % tokens');\r\n           teamTokenSent[msg.sender] = teamTokenSent[msg.sender].add(amount);\r\n           require(teamTokenSent[msg.sender] <= teamTokenInitially[msg.sender]);\r\n           super._transfer(address(this),msg.sender,amount);           \r\n        } \r\n\r\n        else if(monthsNow >=24 && monthsNow < 27) \r\n        {\r\n           require(teamTokenSent[msg.sender].add(amount) <= (teamTokenInitially[msg.sender].mul(80)).div(100),'already withdraw 80 % tokens');\r\n           teamTokenSent[msg.sender] = teamTokenSent[msg.sender].add(amount);\r\n           require(teamTokenSent[msg.sender] <= teamTokenInitially[msg.sender]);\r\n           super._transfer(address(this),msg.sender,amount);           \r\n        } \r\n\r\n        else if(monthsNow >=27 && monthsNow < 30) \r\n        {\r\n           require(teamTokenSent[msg.sender].add(amount) <= (teamTokenInitially[msg.sender].mul(90)).div(100),'already withdraw 90 % tokens');\r\n           teamTokenSent[msg.sender] = teamTokenSent[msg.sender].add(amount);\r\n           require(teamTokenSent[msg.sender] <= teamTokenInitially[msg.sender]);           \r\n           super._transfer(address(this),msg.sender,amount);           \r\n        } \r\n\r\n        else if(monthsNow >=30) \r\n        {\r\n           require(teamTokenSent[msg.sender].add(amount) <= teamTokenInitially[msg.sender],'already withdraw 100 % tokens');\r\n           teamTokenSent[msg.sender] = teamTokenSent[msg.sender].add(amount);\r\n           super._transfer(address(this),msg.sender,amount);           \r\n        } \r\n\r\n    }      \r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamTokenHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingTokenHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_teamAddress\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendTeamTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airDropInIEO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamTokenInitially\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingLockPeriodStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mintingAddress\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendMintingTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamLockPeriodStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_marketingAddress\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendMarketingTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamTokenSent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketingTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bountyAddress\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendBountyIEO\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyInIEO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airDropWithDapps\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_airDropWithDapps\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendAirDropAndBountyDapps\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maintainanceAddress\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendMaintainanceTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTeamTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_airDropAddress\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendAirDropIEO\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalReleased\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maintainanceTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"FessChain","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000008ce1ab2ee8c1fef5afd65abf3aa3b49963a74266","Library":"","SwarmSource":"bzzr://6dacd2c9cebb8242f4739de5a8987ad684f83ed60d7e1926363a7b8d293e5d64"}]}