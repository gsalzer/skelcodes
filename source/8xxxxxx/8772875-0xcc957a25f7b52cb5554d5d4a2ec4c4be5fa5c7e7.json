{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.2;\r\nlibrary SafeMath {\r\n\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n\r\n        c = a + b;\r\n\r\n        require(c >= a);\r\n\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n\r\n        require(b <= a);\r\n\r\n        c = a - b;\r\n\r\n    }\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n\r\n        c = a * b;\r\n\r\n        require(a == 0 || c / a == b);\r\n\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n\r\n        require(b > 0);\r\n\r\n        c = a / b;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nlibrary ExtendedMath {\r\n\r\n\r\n    function limitLessThan(uint a, uint b) internal pure returns (uint c) {\r\n\r\n        if(a > b) return b;\r\n\r\n        return a;\r\n\r\n    }\r\n}\r\n\r\ncontract ERC20Interface {\r\n\r\n    function totalSupply() public view returns (uint);\r\n\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n\r\n}\r\ncontract ApproveAndCallFallBack {\r\n\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\r\n\r\n}\r\ncontract Owned {\r\n\r\n    address public owner;\r\n\r\n    address public newOwner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n\r\n    constructor () public {\r\n\r\n        owner = msg.sender;\r\n\r\n    }\r\n\r\n\r\n    modifier onlyOwner {\r\n\r\n        require(msg.sender == owner);\r\n\r\n        _;\r\n\r\n    }\r\n\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n\r\n        newOwner = _newOwner;\r\n\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n\r\n        require(msg.sender == newOwner);\r\n\r\n        emit OwnershipTransferred(owner, newOwner);\r\n\r\n        owner = newOwner;\r\n\r\n        newOwner = address(0);\r\n\r\n    }\r\n\r\n}\r\n\r\ncontract OneBlockToken is ERC20Interface, Owned {\r\n\r\n    using SafeMath for uint;\r\n    using ExtendedMath for uint;\r\n\r\n\r\n    string public symbol;\r\n\r\n    string public  name;\r\n\r\n    uint8 public decimals;\r\n\r\n    uint public _totalSupply;\r\n\r\n uint public project_funding;\r\n\r\n\r\n\r\n     uint public latestDifficultyPeriodStarted;\r\n\r\n\r\n\r\n    uint public epochCount;\r\n\r\n\r\n    uint public _BLOCKS_PER_READJUSTMENT = 1024;\r\n\r\n\r\n    uint public  _MINIMUM_TARGET = 2**10*234;\r\n\r\n\r\n    uint public  _MAXIMUM_TARGET = 2**160;\r\n\r\n\r\n    uint public miningTarget;\r\n\r\n    bytes32 public challengeNumber;   \r\n\r\n\r\n\r\n    uint public rewardEra;\r\n    uint public maxSupplyForEra;\r\n\r\n\r\n    address public lastRewardTo;\r\n    uint public lastRewardAmount;\r\n    uint public lastRewardEthBlockNumber;\r\n\r\n    bool locked = false;\r\n\r\n    mapping(bytes32 => bytes32) solutionForChallenge;\r\n\r\n    uint public tokensMinted;\r\n\r\n    mapping(address => uint) balances;\r\n\r\n\r\n    mapping(address => mapping(address => uint)) allowed;\r\n\r\n\r\n    event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\r\n\r\n   \r\n    constructor () public onlyOwner{\r\n\r\n\r\n\r\n        symbol = \"OneB\";\r\n\r\n        name = \"One Block Token\";\r\n\r\n        decimals = 8;\r\n\r\n        _totalSupply = 5000000 * 10**uint(decimals);\r\nproject_funding = 1000000 * 10**uint(decimals);\r\n        if(locked) revert();\r\n        locked = true;\r\n\r\n        tokensMinted = 0;\r\n\r\n        rewardEra = 0;\r\n        \r\n        balances[owner] = _totalSupply;\r\n        emit Transfer(address(0), owner, project_funding);\r\n_totalSupply =  _totalSupply.sub(balances[owner]);\r\n        maxSupplyForEra = _totalSupply.div(2);\r\n\r\n        miningTarget = _MAXIMUM_TARGET;\r\n\r\n        latestDifficultyPeriodStarted = block.number;\r\n        \r\n        _startNewMiningEpoch();\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n        function mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success) {\r\n\r\n\r\n            bytes32 digest =  keccak256(abi.encodePacked(challengeNumber, msg.sender, nonce ));\r\n\r\n            if (digest != challenge_digest) revert();\r\n\r\n            if(uint256(digest) > miningTarget) revert();\r\n\r\n\r\n             bytes32 solution = solutionForChallenge[challengeNumber];\r\n             solutionForChallenge[challengeNumber] = digest;\r\n             if(solution != 0x0) revert();  \r\n\r\n            uint reward_amount = getMiningReward();\r\n\r\n            balances[msg.sender] = balances[msg.sender].add(reward_amount);\r\n\r\n            tokensMinted = tokensMinted.add(reward_amount);\r\n\r\n\r\n            assert(tokensMinted <= maxSupplyForEra);\r\n\r\n            lastRewardTo = msg.sender;\r\n            lastRewardAmount = reward_amount;\r\n            lastRewardEthBlockNumber = block.number;\r\n\r\n\r\n             _startNewMiningEpoch();\r\n\r\n              emit Mint(msg.sender, reward_amount, epochCount, challengeNumber );\r\n\r\n           return true;\r\n\r\n        }\r\n\r\n\r\n    function _startNewMiningEpoch() internal {\r\n\r\n      if( tokensMinted.add(getMiningReward()) > maxSupplyForEra && rewardEra < 1)\r\n      {\r\n        rewardEra = rewardEra + 1;\r\n      }\r\n\r\n      maxSupplyForEra = _totalSupply - _totalSupply.div( 2**(rewardEra + 1));\r\n\r\n      epochCount = epochCount.add(1);\r\n\r\n     \r\n      if(epochCount % _BLOCKS_PER_READJUSTMENT == 0)\r\n      {\r\n        _reAdjustDifficulty();\r\n      }\r\n\r\n    challengeNumber = blockhash(block.number - 1);\r\n\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    function _reAdjustDifficulty() internal {\r\n\r\n\r\n        uint ethBlocksSinceLastDifficultyPeriod = block.number - latestDifficultyPeriodStarted;\r\n       \r\n        uint epochsMined = _BLOCKS_PER_READJUSTMENT; \r\n\r\n        uint targetEthBlocksPerDiffPeriod = epochsMined * 600 * 24; \r\n\r\n        if( ethBlocksSinceLastDifficultyPeriod < targetEthBlocksPerDiffPeriod )\r\n        {\r\n          uint excess_block_pct = (targetEthBlocksPerDiffPeriod.mul(100)).div( ethBlocksSinceLastDifficultyPeriod );\r\n\r\n          uint excess_block_pct_extra = excess_block_pct.sub(100).limitLessThan(1000);\r\n        \r\n          miningTarget = miningTarget.sub(miningTarget.div(2000).mul(excess_block_pct_extra));   \r\n        }else{\r\n          uint shortage_block_pct = (ethBlocksSinceLastDifficultyPeriod.mul(100)).div( targetEthBlocksPerDiffPeriod );\r\n\r\n          uint shortage_block_pct_extra = shortage_block_pct.sub(100).limitLessThan(1000);           miningTarget = miningTarget.add(miningTarget.div(2000).mul(shortage_block_pct_extra));\r\n        }\r\n\r\n\r\n\r\n        latestDifficultyPeriodStarted = block.number;\r\n\r\n        if(miningTarget < _MINIMUM_TARGET)\r\n        {\r\n          miningTarget = _MINIMUM_TARGET;\r\n        }\r\n\r\n        if(miningTarget > _MAXIMUM_TARGET)       {\r\n          miningTarget = _MAXIMUM_TARGET;\r\n        }\r\n    }\r\n\r\n\r\n    function getChallengeNumber() public view returns (bytes32) {\r\n        return challengeNumber;\r\n    }\r\n\r\n     function getMiningDifficulty() public view returns (uint) {\r\n        return _MAXIMUM_TARGET.div(miningTarget);\r\n    }\r\n\r\n    function getMiningTarget() public view returns (uint) {\r\n       return miningTarget;\r\n   }\r\n\r\n\r\n    function getMiningReward() public view returns (uint) {\r\n         return (5 * 10**uint(decimals) ).div( 2**rewardEra ) ;\r\n\r\n    }\r\n    function getMintDigest(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number) public view returns (bytes32 digesttest) {\r\nbytes32 diges=challenge_digest;\r\ndiges = challenge_number;\r\n        bytes32 digest = keccak256(abi.encodePacked(challenge_number,msg.sender,nonce));\r\n\r\n        return digest;\r\n\r\n      }\r\n      function checkMintSolution(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number, uint testTarget) public view returns (bool success) {\r\n\r\n          bytes32 digest = keccak256(abi.encodePacked(challenge_number,msg.sender,nonce));\r\n\r\n          if(uint256(digest) > testTarget) revert();\r\n\r\n          return (digest == challenge_digest);\r\n\r\n        }\r\n\r\n\r\n\r\n    function totalSupply() public view returns (uint) {\r\n\r\n        return _totalSupply  - balances[address(0)];\r\n\r\n    }\r\n\r\n\r\n\r\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\r\n\r\n        return balances[tokenOwner];\r\n\r\n    }\r\n\r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n\r\n        balances[to] = balances[to].add(tokens);\r\n\r\n        emit Transfer(msg.sender, to, tokens);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n\r\n        allowed[msg.sender][spender] = tokens;\r\n\r\n        emit Approval(msg.sender, spender, tokens);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n  \r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n\r\n        balances[from] = balances[from].sub(tokens);\r\n\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n\r\n        balances[to] = balances[to].add(tokens);\r\n\r\n        emit Transfer(from, to, tokens);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\r\n\r\n        return allowed[tokenOwner][spender];\r\n\r\n    }\r\n\r\n\r\n\r\n \r\n    function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\r\n\r\n        allowed[msg.sender][spender] = tokens;\r\n\r\n        emit Approval(msg.sender, spender, tokens);\r\n\r\n      ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n\r\n        return true;\r\n\r\n    }\r\n   function () external payable {\r\n\r\n        revert();\r\n\r\n    }\r\n\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n\r\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"newChallengeNumber\",\"type\":\"bytes32\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"_BLOCKS_PER_READJUSTMENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_MAXIMUM_TARGET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_MINIMUM_TARGET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"challengeNumber\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"challenge_digest\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"challenge_number\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"testTarget\",\"type\":\"uint256\"}],\"name\":\"checkMintSolution\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"epochCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getChallengeNumber\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMiningDifficulty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMiningReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMiningTarget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"challenge_digest\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"challenge_number\",\"type\":\"bytes32\"}],\"name\":\"getMintDigest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"digesttest\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastRewardEthBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastRewardTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"latestDifficultyPeriodStarted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupplyForEra\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"miningTarget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"challenge_digest\",\"type\":\"bytes32\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"project_funding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardEra\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"OneBlockToken","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://54c47647a42d05be3fdc833dde311ab22ac1b2866f72f82d430ddc35b521382b"}]}