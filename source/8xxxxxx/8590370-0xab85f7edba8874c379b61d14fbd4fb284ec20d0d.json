{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n\r\nlibrary SafeMath {\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n   \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        \r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n   \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n       \r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        \r\n        return c;\r\n    }\r\n\r\n    \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n   \r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    \r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    \r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    \r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n   \r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    \r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract Operable is Ownable {\r\n  event OperatorAdded(address indexed account);\r\n  event OperatorRemoved(address indexed account);\r\n\r\n  mapping (address => bool) private _operators;\r\n\r\n  constructor() public {\r\n    _addOperator(msg.sender);\r\n  }\r\n\r\n  modifier onlyOperator() {\r\n    require(isOperator(msg.sender));\r\n    _;\r\n  }\r\n\r\n  function isOperator(address account)\r\n    public\r\n    view\r\n    returns (bool) \r\n  {\r\n    require(account != address(0));\r\n    return _operators[account];\r\n  }\r\n\r\n  function addOperator(address account)\r\n    public\r\n    onlyOwner\r\n  {\r\n    _addOperator(account);\r\n  }\r\n\r\n  function removeOperator(address account)\r\n    public\r\n    onlyOwner\r\n  {\r\n    _removeOperator(account);\r\n  }\r\n\r\n  function _addOperator(address account)\r\n    internal\r\n  {\r\n    require(account != address(0));\r\n    _operators[account] = true;\r\n    emit OperatorAdded(account);\r\n  }\r\n\r\n  function _removeOperator(address account)\r\n    internal\r\n  {\r\n    require(account != address(0));\r\n    _operators[account] = false;\r\n    emit OperatorRemoved(account);\r\n  }\r\n}\r\n\r\ncontract TimestampNotary is Operable {\r\n  struct Time {\r\n    uint32 declared;\r\n    uint32 recorded;\r\n  }\r\n  mapping (bytes32 => Time) _hashTime;\r\n\r\n  event Timestamp(\r\n    bytes32 indexed hash,\r\n    uint32 declaredTime,\r\n    uint32 recordedTime\r\n  );\r\n\r\n  /**\r\n   * @dev Allows an operator to timestamp a new hash value.\r\n   * @param hash bytes32 The hash value to be stamped in the contract storage\r\n   * @param declaredTime uint The timestamp associated with the given hash value\r\n   */\r\n  function addTimestamp(bytes32 hash, uint32 declaredTime)\r\n    public\r\n    onlyOperator\r\n    returns (bool)\r\n  {\r\n    _addTimestamp(hash, declaredTime);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Registers the timestamp hash value in the contract storage, along with\r\n   * the current and declared timestamps.\r\n   * @param hash bytes32 The hash value to be registered\r\n   * @param declaredTime uint32 The declared timestamp of the hash value\r\n   */\r\n  function _addTimestamp(bytes32 hash, uint32 declaredTime) internal {\r\n    uint32 recordedTime = uint32(block.timestamp);\r\n    _hashTime[hash] = Time(declaredTime, recordedTime);\r\n    emit Timestamp(hash, declaredTime, recordedTime);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows anyone to verify the declared timestamp for any given hash.\r\n   */\r\n  function verifyDeclaredTime(bytes32 hash)\r\n    public\r\n    view\r\n    returns (uint32)\r\n  {\r\n    return _hashTime[hash].declared;\r\n  }\r\n\r\n\r\n  function verifyRecordedTime(bytes32 hash)\r\n    public\r\n    view\r\n    returns (uint32)\r\n  {\r\n    return _hashTime[hash].recorded;\r\n  }\r\n}\r\n\r\n\r\ncontract LinkedTokenAbstract {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address account) public view returns (uint256);\r\n}\r\n\r\n\r\ncontract LinkedToken is Ownable {\r\n  address internal _token;\r\n  event TokenChanged(address indexed token);\r\n  \r\n\r\n  function tokenAddress() public view returns (address) {\r\n    return _token;\r\n  }\r\n\r\n\r\n  function setToken(address token) \r\n    public\r\n    onlyOwner\r\n    returns (bool)\r\n  {\r\n    _setToken(token);\r\n    emit TokenChanged(token);\r\n    return true;\r\n  }\r\n\r\n\r\n  function _setToken(address token) internal {\r\n    require(token != address(0));\r\n    _token = token;\r\n  }\r\n}\r\n\r\n\r\ncontract QUANTLCA is TimestampNotary, LinkedToken {\r\n  string public constant name = 'QUANTL Certification Authority';\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"verifyDeclaredTime\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"verifyRecordedTime\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"declaredTime\",\"type\":\"uint32\"}],\"name\":\"addTimestamp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"declaredTime\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"recordedTime\",\"type\":\"uint32\"}],\"name\":\"Timestamp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OperatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OperatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"QUANTLCA","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://7f5286716bfc4e30d5e0aa5d898ed4b32332e31b0684247f57c577c59dd9f331"}]}