{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n// File: SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {    \r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n   \r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n \r\n}\r\n\r\n// File: BACCToken.sol\r\n\r\ncontract BACCToken {\r\n\r\n    using SafeMath for uint256;   \r\n\r\n    mapping (address => uint256) internal balances;\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    //--------------------------------  Basic Info  -------------------------------------//\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n\r\n    //--------------------------------  Basic Info  -------------------------------------//\r\n\r\n\r\n  \r\n    \r\n    //--------------------------------  Admin Info  -------------------------------------//\r\n\r\n    address internal admin;  //Admin address\r\n     \r\n    event ChangeAdmin(address indexed admin, address indexed newAdmin);\r\n  \r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin); \r\n        _;\r\n    }\r\n  \r\n  \r\n    /**\r\n     * @dev Change admin address\r\n     * @param newAdmin New admin address\r\n     */\r\n    function changeAdmin(address newAdmin) public onlyAdmin returns (bool)  {\r\n        require(newAdmin != address(0));\r\n        uint256 balAdmin = balances[admin];\r\n        balances[newAdmin] = balances[newAdmin].add(balAdmin);\r\n        balances[admin] = 0;\r\n        emit Transfer(admin, newAdmin, balAdmin);\r\n        emit ChangeAdmin(admin, newAdmin);\r\n        admin = newAdmin;          \r\n        return true;\r\n    }\r\n\r\n    //--------------------------------  Admin Info  -------------------------------------//\r\n    \r\n    //-----------------------------  Transfer switch  ----------------------------------//\r\n\r\n    bool public allowedTransfer;     //Whether transfering token is allowed\r\n    bool public allowedMultiTransfer;     //Whether multi transfering token is allowed\r\n    \r\n    /**\r\n     * @dev Change allowedTransfer flag\r\n     * @param newAllowedTransfer whether transfering token is allowed\r\n     */\r\n    function changeAllowedTransfer(bool newAllowedTransfer) public onlyAdmin returns (bool)  {\r\n       // require(msg.sender == admin);        \r\n        allowedTransfer = newAllowedTransfer;\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Change allowedMultiTransfer flag\r\n     * @param newAllowedMultiTransfer whether multi transfering token is allowed\r\n     */\r\n    function changeAllowedMultiTransfer(bool newAllowedMultiTransfer) public onlyAdmin returns (bool)  {\r\n      //  require(msg.sender == admin);        \r\n        allowedMultiTransfer = newAllowedMultiTransfer;\r\n        return true;\r\n    }\r\n    \r\n    //-----------------------------  Transfer switch  ----------------------------------//\r\n\r\n    //--------------------------  Events & Constructor  ------------------------------//\r\n    \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    // constructor\r\n    constructor(string tokenName, string tokenSymbol, uint8 tokenDecimals, uint256 totalTokenSupply) public {\r\n        name = tokenName;\r\n        symbol = tokenSymbol;\r\n        decimals = tokenDecimals;\r\n        totalSupply = totalTokenSupply;\r\n        admin = msg.sender;\r\n        balances[msg.sender] = totalTokenSupply;\r\n        allowedTransfer = true;\r\n        allowedMultiTransfer = true;\r\n        emit Transfer(address(0x0), msg.sender, totalTokenSupply); \r\n\r\n    }\r\n\r\n    //--------------------------  Events & Constructor  ------------------------------//\r\n    \r\n    //------------------------------ Account lock  -----------------------------------//\r\n\r\n    // The same account is frozen if it satisfies any freezing conditions\r\n    mapping (address => bool)  public frozenAccount; //Accounts frozen indefinitely\r\n    mapping (address => uint256) public frozenTimestamp; // Accounts frozen for a limited period\r\n\r\n   \r\n\r\n    /**\r\n     * Lock accounts\r\n     */\r\n    function freeze(address _target, bool _freeze) public onlyAdmin returns (bool) {\r\n      //  require(msg.sender == admin);          \r\n        require(_target != admin);\r\n        frozenAccount[_target] = _freeze;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Locking accounts through timestamps\r\n     */\r\n    function freezeWithTimestamp(address _target, uint256 _timestamp) public onlyAdmin returns (bool) {\r\n     //   require(msg.sender == admin);          \r\n        require(_target != admin); \r\n        frozenTimestamp[_target] = _timestamp;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Batch Lock-in Account\r\n     */\r\n    function multiFreeze(address[] _targets, bool[] _freezes) public onlyAdmin returns (bool) {\r\n      //  require(msg.sender == admin);         \r\n        require(_targets.length == _freezes.length);\r\n        uint256 len = _targets.length;\r\n        require(len > 0);\r\n        for (uint256 i = 0; i < len; i = i.add(1)) {\r\n            address _target = _targets[i];\r\n            require(_target != admin);\r\n            bool _freeze = _freezes[i];\r\n            frozenAccount[_target] = _freeze;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Lock accounts in batches through timestamps\r\n     */\r\n    function multiFreezeWithTimestamp(address[] _targets, uint256[] _timestamps) public onlyAdmin returns (bool) {\r\n       // require(msg.sender == admin);        \r\n       // require(_targets.length == _timestamps.length);    \r\n        require(_targets.length > 0 && _targets.length == _timestamps.length);\r\n        uint256 len = _targets.length;           \r\n        for (uint256 i = 0; i < len; i = i.add(1)) {\r\n            address _target = _targets[i];\r\n            require(_target != admin);\r\n            uint256 _timestamp = _timestamps[i];\r\n            frozenTimestamp[_target] = _timestamp;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    //------------------------------  Account lock  -----------------------------------//\r\n\r\n\r\n    //-------------------------  Standard ERC20 Interfaces  --------------------------//\r\n\r\n    function multiTransfer(address[] _tos, uint256[] _values) public returns (bool) {\r\n        require(allowedMultiTransfer);\r\n        require(!frozenAccount[msg.sender]);\r\n        require(now > frozenTimestamp[msg.sender]);\r\n       // require(_tos.length == _values.length);     \r\n        require(_tos.length > 0 && _tos.length == _values.length);\r\n        uint256 len = _tos.length;\r\n        uint256 amount = 0;\r\n        for (uint256 i = 0; i < len; i = i.add(1)) {\r\n            amount = amount.add(_values[i]);\r\n        }\r\n        require(balances[msg.sender] >= amount);\r\n        for (uint256 j = 0; j < len; j = j.add(1)) {\r\n            address _to = _tos[j];        \r\n            require(_to != address(0));\r\n            balances[_to] = balances[_to].add(_values[j]);\r\n            balances[msg.sender] = balances[msg.sender].sub(_values[j]);\r\n            emit Transfer(msg.sender, _to, _values[j]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(allowedTransfer);\r\n        require(!frozenAccount[msg.sender]);\r\n        require(now > frozenTimestamp[msg.sender]);\r\n        require(balances[msg.sender].sub(_value) >= 0);    \r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) { \r\n        require(_to != address(0));\r\n        require(allowedTransfer);\r\n        require(!frozenAccount[_from]);\r\n        require(now > frozenTimestamp[_from]);\r\n        require(balances[_from].sub(_value) >= 0);    \r\n        require(allowed[_from][msg.sender] >= _value);   \r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) { \r\n        require(_value == 0 || allowed[msg.sender][_spender] == 0);\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param _owner The address to query the the balance of.\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    //-------------------------  Standard ERC20 Interfaces  --------------------------//\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tos\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAllowedMultiTransfer\",\"type\":\"bool\"}],\"name\":\"changeAllowedMultiTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAllowedTransfer\",\"type\":\"bool\"}],\"name\":\"changeAllowedTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowedTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowedMultiTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_freeze\",\"type\":\"bool\"}],\"name\":\"freeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targets\",\"type\":\"address[]\"},{\"name\":\"_freezes\",\"type\":\"bool[]\"}],\"name\":\"multiFreeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"freezeWithTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targets\",\"type\":\"address[]\"},{\"name\":\"_timestamps\",\"type\":\"uint256[]\"}],\"name\":\"multiFreezeWithTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"tokenDecimals\",\"type\":\"uint8\"},{\"name\":\"totalTokenSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"ChangeAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"BACCToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000204fce5e3e25026110000000000000000000000000000000000000000000000000000000000000000000001f426c6f636b636861696e20414920436f6e74656e7420436f6d6d756e6974790000000000000000000000000000000000000000000000000000000000000000044241434300000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://24dc52f93f3f78b6e919c7307e02b878edade569ff075056ba480dd7c091f61a"}]}