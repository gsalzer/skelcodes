{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.9;\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract IERC721 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    function balanceOf(address owner) public view returns (uint256 balance);\r\n\r\n    function ownerOf(uint256 tokenId) public view returns (address owner);\r\n\r\n    function approve(address to, uint256 tokenId) public;\r\n\r\n    function getApproved(uint256 tokenId) public view returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) public;\r\n\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\r\n\r\n    function transfer(address to, uint256 tokenId) public;\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId) public;\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\r\n}\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20BasicInterface {\r\n    function totalSupply() public view returns (uint256);\r\n\r\n    function balanceOf(address who) public view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    uint8 public decimals;\r\n}\r\n\r\ncontract Bussiness is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n    address public ceoAddress = address(0xFce92D4163AA532AA096DE8a3C4fEf9f875Bc55F);\r\n    ERC20BasicInterface public hbwalletToken = ERC20BasicInterface(0xEc7ba74789694d0d03D458965370Dc7cF2FE75Ba);\r\n    // address public ceoAddress = address(0xFce92D4163AA532AA096DE8a3C4fEf9f875Bc55F);\r\n    // ERC20BasicInterface public hbwalletToken = ERC20BasicInterface(0x91013928b1C4dbd0D5cB21BA5b052BfD840A7a7F);\r\n    uint256 public Percen = 1000;\r\n    uint256 public HBWALLETExchange = 21;\r\n\r\n    struct Price {\r\n        address payable tokenOwner;\r\n        uint256 price;\r\n        uint256 fee;\r\n        uint256 hbfee;\r\n        uint isHightlight;\r\n        uint isHightlightByHb;\r\n    }\r\n    // new code =======================\r\n    struct Game {\r\n        mapping(uint256 => Price) tokenPrice;\r\n        uint[] tokenIdSale;\r\n        uint256 ETHFee;\r\n        uint256 limitETHFee;\r\n        uint256 limitHBWALLETFee;\r\n        uint256 hightLightFee;\r\n    }\r\n\r\n    mapping(address => Game) public Games;\r\n    address[] public arrGames;\r\n    constructor() public {\r\n        arrGames = [\r\n        // 0x5D00d312e171Be5342067c09BaE883f9Bcb2003B,\r\n        0xdceaf1652a131F32a821468Dc03A92df0edd86Ea,\r\n        0x273f7F8E6489682Df756151F5525576E322d51A3,\r\n        0x06012c8cf97BEaD5deAe237070F9587f8E7A266d,\r\n        0x1276dce965ADA590E42d62B3953dDc1DDCeB0392,\r\n        0xE60D2325f996e197EEdDed8964227a0c6CA82D0f,\r\n        0x617913Dd43dbDf4236B85Ec7BdF9aDFD7E35b340,\r\n        0xECd6b4A2f82b0c9FB283A4a8a1ef5ADf555f794b,\r\n        0xf26A23019b4699068bb54457f32dAFCF22A9D371,\r\n        0x8c9b261Faef3b3C2e64ab5E58e04615F8c788099,\r\n        0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab,\r\n        0x5D00d312e171Be5342067c09BaE883f9Bcb2003B,\r\n        0xBfdE6246Df72d3ca86419628CaC46a9d2B60393C,\r\n        0x71C118B00759B0851785642541Ceb0F4CEea0BD5,\r\n        0xF5b0A3eFB8e8E4c201e2A935F110eAaF3FFEcb8d,\r\n        0xbc5370374FE08d699cf7fcd2e625A93BF393cCC4,\r\n        0x31AF195dB332bc9203d758C74dF5A5C5e597cDb7,\r\n        0x1a94fce7ef36Bc90959E206bA569a12AFBC91ca1\r\n        ];\r\n        for(uint i = 0; i< arrGames.length; i++) {\r\n            if(arrGames[i] == address(0xF5b0A3eFB8e8E4c201e2A935F110eAaF3FFEcb8d)\r\n            || arrGames[i] == address(0xbc5370374FE08d699cf7fcd2e625A93BF393cCC4)) {\r\n                Games[arrGames[i]].ETHFee = 10;\r\n                Games[arrGames[i]].limitETHFee = 1000000000000000;\r\n                Games[arrGames[i]].limitHBWALLETFee = 1;\r\n                Games[arrGames[i]].hightLightFee = 100000000000000;\r\n            } else {\r\n                Games[arrGames[i]].ETHFee = 0;\r\n                Games[arrGames[i]].limitETHFee = 0;\r\n                Games[arrGames[i]].limitHBWALLETFee = 0;\r\n                Games[arrGames[i]].hightLightFee = 30000000000000000;\r\n            }\r\n\r\n        }\r\n\r\n        // Games[address(0xac9D8D6dB95828259069226456DDe98d8E296c5f)].ETHFee = 10;\r\n        // Games[address(0xac9D8D6dB95828259069226456DDe98d8E296c5f)].limitETHFee = 1000000000000000;\r\n        // Games[address(0xac9D8D6dB95828259069226456DDe98d8E296c5f)].limitHBWALLETFee = 1;\r\n        // Games[address(0xac9D8D6dB95828259069226456DDe98d8E296c5f)].hightLightFee = 10000000000000000;\r\n        // arrGames.push(address(0xac9D8D6dB95828259069226456DDe98d8E296c5f));\r\n    }\r\n\r\n    function getTokenPrice(address _game, uint256 _tokenId) public returns (address owner, uint256 price, uint256 fee, uint256 hbfee, uint isHightlight, uint isHBHightlight) {\r\n        IERC721 erc721Address = IERC721(_game);\r\n        if(erc721Address.ownerOf(_tokenId) != Games[_game].tokenPrice[_tokenId].tokenOwner\r\n        && erc721Address.ownerOf(_tokenId) != address(this)) resetPrice(_game, _tokenId);\r\n        return (Games[_game].tokenPrice[_tokenId].tokenOwner,\r\n        Games[_game].tokenPrice[_tokenId].price, Games[_game].tokenPrice[_tokenId].fee,\r\n        Games[_game].tokenPrice[_tokenId].hbfee, Games[_game].tokenPrice[_tokenId].isHightlight,\r\n        Games[_game].tokenPrice[_tokenId].isHightlightByHb);\r\n    }\r\n    // new code =======================\r\n    /**\r\n     * @dev Throws if called by any account other than the ceo address.\r\n     */\r\n    modifier onlyCeoAddress() {\r\n        require(msg.sender == ceoAddress);\r\n        _;\r\n    }\r\n    modifier isOwnerOf(address _game, uint256 _tokenId) {\r\n        IERC721 erc721Address = IERC721(_game);\r\n        require(erc721Address.ownerOf(_tokenId) == msg.sender);\r\n        _;\r\n    }\r\n    event _setPrice(address _game, uint256 _tokenId, uint256 _ethPrice, uint _isHightLight, uint8 _type);\r\n    event _resetPrice(address _game, uint256 _tokenId);\r\n    function ownerOf(address _game, uint256 _tokenId) public view returns (address){\r\n        IERC721 erc721Address = IERC721(_game);\r\n        return erc721Address.ownerOf(_tokenId);\r\n    }\r\n\r\n    function balanceOf() public view returns (uint256){\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getApproved(address _game, uint256 _tokenId) public view returns (address){\r\n        IERC721 erc721Address = IERC721(_game);\r\n        return erc721Address.getApproved(_tokenId);\r\n    }\r\n\r\n    function setPrice(address _game, uint256 _tokenId, uint256 _ethPrice, uint256 _ethfee, uint _hbfee, uint _isHightLight, uint _isHightLightByHb) internal {\r\n        Games[_game].tokenPrice[_tokenId] = Price(msg.sender, _ethPrice, _ethfee, _hbfee, _isHightLight, _isHightLightByHb);\r\n        Games[_game].tokenIdSale.push(_tokenId);\r\n        bool flag = false;\r\n        for(uint i = 0; i< arrGames.length; i++) {\r\n            if(arrGames[i] == _game) flag = true;\r\n        }\r\n        if(!flag) arrGames.push(_game);\r\n    }\r\n    function calFeeHB(address _game, uint256 _ethPrice) public view returns (uint256){\r\n        uint256 ethfee = _ethPrice.mul(Games[_game].ETHFee).div(Percen);\r\n        uint256 fee = ethfee.mul(HBWALLETExchange).div(2).div(10 ** 16);\r\n        return fee;\r\n    }\r\n    function calFee(address _game, uint256 _ethPrice) public view returns (uint256){\r\n        return _ethPrice.mul(Games[_game].ETHFee).div(Percen);\r\n    }\r\n    function calPriceFeeEth(address _game, uint256 _tokenId, uint256 _ethPrice, uint _isHightLight) public view\r\n    returns(uint256 _ethNeed, uint256 hightLightFee, uint256 _totalFee) {\r\n        uint256 ethfee;\r\n        uint256 _hightLightFee = 0;\r\n        uint256 ethNeed;\r\n        uint256 totalFee;\r\n        if (_isHightLight == 1 && (Games[_game].tokenPrice[_tokenId].price == 0 || Games[_game].tokenPrice[_tokenId].isHightlight != 1)) {\r\n            _hightLightFee = Games[_game].hightLightFee;\r\n        }\r\n        if (Games[_game].tokenPrice[_tokenId].price < _ethPrice) {\r\n            ethfee = calFee(_game, _ethPrice.sub(Games[_game].tokenPrice[_tokenId].price));\r\n            totalFee = calFee(_game, _ethPrice);\r\n            if(Games[_game].tokenPrice[_tokenId].price == 0 && ethfee < Games[_game].limitETHFee) {\r\n                ethNeed = Games[_game].limitETHFee.add(_hightLightFee);\r\n            } else if(Games[_game].tokenPrice[_tokenId].price > 0 && totalFee < Games[_game].limitETHFee) {\r\n                ethNeed = _hightLightFee;\r\n            } else ethNeed = totalFee.add(_hightLightFee).sub(Games[_game].tokenPrice[_tokenId].fee);\r\n\r\n        } else {\r\n            ethNeed = _hightLightFee;\r\n        }\r\n        return (ethNeed, _hightLightFee, totalFee);\r\n    }\r\n    function setPriceFeeEth(address _game, uint256 _tokenId, uint256 _ethPrice, uint _isHightLight) public payable isOwnerOf(_game, _tokenId) {\r\n        require(Games[_game].tokenPrice[_tokenId].price != _ethPrice);\r\n        uint256 ethfee;\r\n        uint256 _hightLightFee = 0;\r\n        if (_isHightLight == 1 && (Games[_game].tokenPrice[_tokenId].price == 0 || Games[_game].tokenPrice[_tokenId].isHightlight != 1)) {\r\n            _hightLightFee = Games[_game].hightLightFee;\r\n        }\r\n        if (Games[_game].tokenPrice[_tokenId].price < _ethPrice) {\r\n            ethfee = calFee(_game, _ethPrice.sub(Games[_game].tokenPrice[_tokenId].price));\r\n            uint256 totalFee = calFee(_game, _ethPrice);\r\n            if(Games[_game].tokenPrice[_tokenId].price == 0 && ethfee < Games[_game].limitETHFee) {\r\n                require(msg.value >= Games[_game].limitETHFee.add(_hightLightFee));\r\n                ethfee = Games[_game].limitETHFee;\r\n            } else if(Games[_game].tokenPrice[_tokenId].price > 0 && totalFee < Games[_game].limitETHFee) {\r\n                require(msg.value >= _hightLightFee);\r\n                ethfee = Games[_game].tokenPrice[_tokenId].fee;\r\n            } else {\r\n                require(msg.value >= ethfee.add(_hightLightFee));\r\n                ethfee = totalFee.sub(Games[_game].tokenPrice[_tokenId].fee);\r\n            }\r\n\r\n        } else {\r\n            require(msg.value >= _hightLightFee);\r\n            ethfee = Games[_game].tokenPrice[_tokenId].fee;\r\n        }\r\n\r\n        setPrice(_game, _tokenId, _ethPrice, ethfee, 0, _isHightLight, 0);\r\n        emit _setPrice(_game, _tokenId, _ethPrice, _isHightLight, 1);\r\n    }\r\n\r\n    function calPriceFeeHBWALLET(address _game, uint256 _tokenId, uint256 _ethPrice, uint _isHightLight) public view returns (uint256){\r\n        uint256 fee;\r\n        uint256 _hightLightFee = 0;\r\n        uint256 hbNeed;\r\n        address local_game = _game;\r\n        uint256 local_tokenId = _tokenId;\r\n        if (_isHightLight == 1 && (Games[_game].tokenPrice[_tokenId].price == 0 || Games[_game].tokenPrice[_tokenId].isHightlightByHb != 1)) {\r\n            _hightLightFee = Games[local_game].hightLightFee.mul(HBWALLETExchange).div(2).div(10 ** 16);\r\n        }\r\n        if (Games[_game].tokenPrice[_tokenId].price < _ethPrice) {\r\n            fee = calFeeHB(_game, _ethPrice.sub(Games[local_game].tokenPrice[local_tokenId].price));\r\n            uint256 totalFeeHB = calFeeHB(_game, _ethPrice);\r\n            if(fee < Games[local_game].limitHBWALLETFee && Games[local_game].tokenPrice[_tokenId].price == 0) {\r\n                hbNeed = Games[local_game].limitHBWALLETFee.add(_hightLightFee);\r\n            } else if(Games[local_game].tokenPrice[_tokenId].price > 0 && totalFeeHB < Games[_game].limitHBWALLETFee) {\r\n                hbNeed = _hightLightFee;\r\n            } else hbNeed = totalFeeHB.add(_hightLightFee).sub(Games[_game].tokenPrice[_tokenId].hbfee);\r\n        } else {\r\n            hbNeed = _hightLightFee;\r\n        }\r\n        return hbNeed;\r\n    }\r\n\r\n    function setPriceFeeHBWALLET(address _game, uint256 _tokenId, uint256 _ethPrice, uint _isHightLight) public isOwnerOf(_game, _tokenId) {\r\n        require(Games[_game].tokenPrice[_tokenId].price != _ethPrice);\r\n        uint fee;\r\n        uint _hightLightFee = 0;\r\n        address local_game = _game;\r\n        uint256 local_tokenId = _tokenId;\r\n        if (_isHightLight == 1 && (Games[_game].tokenPrice[_tokenId].price == 0 || Games[_game].tokenPrice[_tokenId].isHightlightByHb != 1)) {\r\n            _hightLightFee = Games[local_game].hightLightFee.mul(HBWALLETExchange).div(2).div(10 ** 16);\r\n        }\r\n        if (Games[_game].tokenPrice[_tokenId].price < _ethPrice) {\r\n            fee = calFeeHB(_game, _ethPrice.sub(Games[local_game].tokenPrice[local_tokenId].price));\r\n            uint256 totalFeeHB = calFeeHB(_game, _ethPrice);\r\n            if(fee < Games[local_game].limitHBWALLETFee && Games[local_game].tokenPrice[_tokenId].price == 0) {\r\n                require(hbwalletToken.transferFrom(msg.sender, address(this), Games[local_game].limitHBWALLETFee.add(_hightLightFee)));\r\n                fee = Games[_game].limitHBWALLETFee;\r\n            } else if(Games[local_game].tokenPrice[_tokenId].price > 0 && totalFeeHB < Games[_game].limitHBWALLETFee) {\r\n                require(hbwalletToken.transferFrom(msg.sender, address(this), _hightLightFee));\r\n                fee = Games[_game].tokenPrice[_tokenId].hbfee;\r\n            } else {\r\n                require(hbwalletToken.transferFrom(msg.sender, address(this), fee.add(_hightLightFee)));\r\n                fee = totalFeeHB.sub(Games[_game].tokenPrice[_tokenId].hbfee);\r\n            }\r\n            fee = fee.add(Games[local_game].tokenPrice[_tokenId].hbfee);\r\n        } else {\r\n            require(hbwalletToken.transferFrom(msg.sender, address(this), _hightLightFee));\r\n            fee = Games[_game].tokenPrice[_tokenId].hbfee;\r\n        }\r\n\r\n        setPrice(_game, _tokenId, _ethPrice, 0, fee, 0, _isHightLight);\r\n        emit _setPrice(_game, _tokenId, _ethPrice, _isHightLight, 2);\r\n    }\r\n\r\n    function removePrice(address _game, uint256 _tokenId) public isOwnerOf(_game, _tokenId){\r\n        if (Games[_game].tokenPrice[_tokenId].fee > 0) msg.sender.transfer(Games[_game].tokenPrice[_tokenId].fee);\r\n        else if (Games[_game].tokenPrice[_tokenId].hbfee > 0) hbwalletToken.transfer(msg.sender, Games[_game].tokenPrice[_tokenId].hbfee);\r\n        if(Games[_game].tokenPrice[_tokenId].tokenOwner == address(this)) {\r\n            IERC721 erc721Address = IERC721(_game);\r\n            erc721Address.transfer(Games[_game].tokenPrice[_tokenId].tokenOwner, _tokenId);\r\n        }\r\n        resetPrice(_game, _tokenId);\r\n    }\r\n\r\n    function setHBWALLETExchange(uint _HBWALLETExchange) public onlyOwner{\r\n        require(_HBWALLETExchange >= 1);\r\n\r\n        HBWALLETExchange = _HBWALLETExchange;\r\n    }\r\n\r\n    function setLimitFee(address _game, uint256 _ethFee, uint256 _ethlimitFee, uint _hbWalletlimitFee, uint256 _hightLightFee) public onlyOwner {\r\n        require(_ethFee >= 0 && _ethlimitFee >= 0 && _hbWalletlimitFee >= 0 && _hightLightFee >= 0);\r\n        Games[_game].ETHFee = _ethFee;\r\n        Games[_game].limitETHFee = _ethlimitFee;\r\n        Games[_game].limitHBWALLETFee = _hbWalletlimitFee;\r\n        Games[_game].hightLightFee = _hightLightFee;\r\n    }\r\n\r\n    function _withdraw(uint256 amount, uint256 _amountHB) internal {\r\n        require(address(this).balance >= amount && hbwalletToken.balanceOf(address(this)) >= _amountHB);\r\n        if(amount > 0) {\r\n            msg.sender.transfer(amount);\r\n        }\r\n        if(_amountHB > 0) {\r\n            hbwalletToken.transfer(msg.sender, _amountHB);\r\n        }\r\n    }\r\n    function withdraw(uint256 amount, uint8 _amountHB) public onlyCeoAddress {\r\n        _withdraw(amount, _amountHB);\r\n    }\r\n    function cancelBussinessByGameId(address _game, uint256 _tokenId) private {\r\n        IERC721 erc721Address = IERC721(_game);\r\n        if (Games[_game].tokenPrice[_tokenId].tokenOwner == erc721Address.ownerOf(_tokenId)\r\n        || Games[_game].tokenPrice[_tokenId].tokenOwner == address(this)) {\r\n\r\n            uint256 eth = Games[_game].tokenPrice[_tokenId].fee;\r\n            if(Games[_game].tokenPrice[_tokenId].isHightlight == 1) eth = eth.add(Games[_game].hightLightFee);\r\n            if(eth > 0 && address(this).balance >= eth) {\r\n                Games[_game].tokenPrice[_tokenId].tokenOwner.transfer(eth);\r\n            }\r\n\r\n            uint256 hb = Games[_game].tokenPrice[_tokenId].hbfee;\r\n            if(Games[_game].tokenPrice[_tokenId].isHightlightByHb == 1) hb = hb.add(Games[_game].hightLightFee.mul(HBWALLETExchange).div(2).div(10 ** 16));\r\n            if(hb > 0 && hbwalletToken.balanceOf(address(this)) >= hb) {\r\n                hbwalletToken.transfer(Games[_game].tokenPrice[_tokenId].tokenOwner, hb);\r\n            }\r\n            if(Games[_game].tokenPrice[_tokenId].tokenOwner == address(this)) erc721Address.transfer(Games[_game].tokenPrice[_tokenId].tokenOwner, _tokenId);\r\n            resetPrice(_game, _tokenId);\r\n        }\r\n    }\r\n\r\n    function cancelBussinessByGame(address _game) private {\r\n        uint256[] memory _arrTokenId = Games[_game].tokenIdSale;\r\n        for (uint i = 0; i < _arrTokenId.length; i++) {\r\n            cancelBussinessByGameId(_game, _arrTokenId[i]);\r\n        }\r\n\r\n    }\r\n    function cancelBussiness() public onlyCeoAddress {\r\n        for(uint j = 0; j< arrGames.length; j++) {\r\n            address _game = arrGames[j];\r\n            cancelBussinessByGame(_game);\r\n        }\r\n        _withdraw(address(this).balance, hbwalletToken.balanceOf(address(this)));\r\n    }\r\n\r\n    function revenue() public view returns (uint256, uint){\r\n\r\n        uint256 ethfee;\r\n        uint256 hbfee;\r\n        for(uint j = 0; j< arrGames.length; j++) {\r\n\r\n            address _game = arrGames[j];\r\n            IERC721 erc721Address = IERC721(arrGames[j]);\r\n            for (uint i = 0; i < Games[_game].tokenIdSale.length; i++) {\r\n                uint256 _tokenId = Games[_game].tokenIdSale[i];\r\n                if (Games[_game].tokenPrice[_tokenId].tokenOwner == erc721Address.ownerOf(_tokenId)) {\r\n\r\n                    ethfee = ethfee.add(Games[_game].tokenPrice[_tokenId].fee);\r\n                    if(Games[_game].tokenPrice[_tokenId].isHightlight == 1) ethfee = ethfee.add(Games[_game].hightLightFee);\r\n\r\n                    hbfee = hbfee.add(Games[_game].tokenPrice[_tokenId].hbfee);\r\n                    if(Games[_game].tokenPrice[_tokenId].isHightlightByHb == 1) hbfee = hbfee.add(Games[_game].hightLightFee.mul(HBWALLETExchange).div(2).div(10 ** 16));\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n        uint256 eth = address(this).balance.sub(ethfee);\r\n        uint256 hb = hbwalletToken.balanceOf(address(this)).sub(hbfee);\r\n        return (eth, hb);\r\n    }\r\n\r\n    function changeCeo(address _address) public onlyCeoAddress {\r\n        require(_address != address(0));\r\n        ceoAddress = _address;\r\n\r\n    }\r\n\r\n    function buy(address _game, uint256 tokenId) public payable {\r\n        IERC721 erc721Address = IERC721(_game);\r\n        require(getApproved(_game, tokenId) == address(this));\r\n        require(Games[_game].tokenPrice[tokenId].price > 0 && Games[_game].tokenPrice[tokenId].price == msg.value);\r\n        erc721Address.transferFrom(Games[_game].tokenPrice[tokenId].tokenOwner, msg.sender, tokenId);\r\n        Games[_game].tokenPrice[tokenId].tokenOwner.transfer(msg.value);\r\n        resetPrice(_game, tokenId);\r\n    }\r\n\r\n    function buyWithoutCheckApproved(address _game, uint256 tokenId) public payable {\r\n        IERC721 erc721Address = IERC721(_game);\r\n        require(Games[_game].tokenPrice[tokenId].price > 0 && Games[_game].tokenPrice[tokenId].price == msg.value);\r\n        erc721Address.transferFrom(Games[_game].tokenPrice[tokenId].tokenOwner, msg.sender, tokenId);\r\n        Games[_game].tokenPrice[tokenId].tokenOwner.transfer(msg.value);\r\n        resetPrice(_game, tokenId);\r\n    }\r\n\r\n    // function buyFromSmartcontract(address _game, uint256 _tokenId) public payable {\r\n    //     IERC721 erc721Address = IERC721(_game);\r\n    //     require(Games[_game].tokenPrice[_tokenId].price == msg.value);\r\n    //     require(erc721Address.ownerOf(_tokenId) == address(this));\r\n    //     erc721Address.transfer(msg.sender, _tokenId);\r\n    //     Games[_game].tokenPrice[_tokenId].tokenOwner.transfer(msg.value);\r\n    //     resetPrice(_game, _tokenId);\r\n    // }\r\n    function buyFromSmartcontractViaTransfer(address _game, uint256 _tokenId) public payable {\r\n        IERC721 erc721Address = IERC721(_game);\r\n        require(Games[_game].tokenPrice[_tokenId].price == msg.value);\r\n        require(erc721Address.ownerOf(_tokenId) == address(this));\r\n        erc721Address.transfer(msg.sender, _tokenId);\r\n        Games[_game].tokenPrice[_tokenId].tokenOwner.transfer(msg.value);\r\n        resetPrice(_game, _tokenId);\r\n    }\r\n    // Move the last element to the deleted spot.\r\n    // Delete the last element, then correct the length.\r\n    function _burnArrayTokenIdSale(address _game, uint256 index)  internal {\r\n        if (index >= Games[_game].tokenIdSale.length) return;\r\n\r\n        for (uint i = index; i<Games[_game].tokenIdSale.length-1; i++){\r\n            Games[_game].tokenIdSale[i] = Games[_game].tokenIdSale[i+1];\r\n        }\r\n        delete Games[_game].tokenIdSale[Games[_game].tokenIdSale.length-1];\r\n        Games[_game].tokenIdSale.length--;\r\n    }\r\n\r\n    function resetPrice(address _game, uint256 _tokenId) private {\r\n        Games[_game].tokenPrice[_tokenId] = Price(address(0), 0, 0, 0, 0, 0);\r\n        for (uint8 i = 0; i < Games[_game].tokenIdSale.length; i++) {\r\n            if (Games[_game].tokenIdSale[i] == _tokenId) {\r\n                _burnArrayTokenIdSale(_game, i);\r\n            }\r\n        }\r\n        emit _resetPrice(_game, _tokenId);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_game\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_game\",\"type\":\"address\"},{\"name\":\"_ethPrice\",\"type\":\"uint256\"}],\"name\":\"calFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_game\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HBWALLETExchange\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_game\",\"type\":\"address\"},{\"name\":\"_ethPrice\",\"type\":\"uint256\"}],\"name\":\"calFeeHB\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_game\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_ethPrice\",\"type\":\"uint256\"},{\"name\":\"_isHightLight\",\"type\":\"uint256\"}],\"name\":\"calPriceFeeHBWALLET\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_game\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_ethPrice\",\"type\":\"uint256\"},{\"name\":\"_isHightLight\",\"type\":\"uint256\"}],\"name\":\"setPriceFeeHBWALLET\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"revenue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_game\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"removePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_game\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buyWithoutCheckApproved\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_game\",\"type\":\"address\"},{\"name\":\"_ethFee\",\"type\":\"uint256\"},{\"name\":\"_ethlimitFee\",\"type\":\"uint256\"},{\"name\":\"_hbWalletlimitFee\",\"type\":\"uint256\"},{\"name\":\"_hightLightFee\",\"type\":\"uint256\"}],\"name\":\"setLimitFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Percen\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_game\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"buyFromSmartcontractViaTransfer\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_game\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_ethPrice\",\"type\":\"uint256\"},{\"name\":\"_isHightLight\",\"type\":\"uint256\"}],\"name\":\"calPriceFeeEth\",\"outputs\":[{\"name\":\"_ethNeed\",\"type\":\"uint256\"},{\"name\":\"hightLightFee\",\"type\":\"uint256\"},{\"name\":\"_totalFee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"arrGames\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_HBWALLETExchange\",\"type\":\"uint256\"}],\"name\":\"setHBWALLETExchange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"_amountHB\",\"type\":\"uint8\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_game\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_ethPrice\",\"type\":\"uint256\"},{\"name\":\"_isHightLight\",\"type\":\"uint256\"}],\"name\":\"setPriceFeeEth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"changeCeo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_game\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenPrice\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"hbfee\",\"type\":\"uint256\"},{\"name\":\"isHightlight\",\"type\":\"uint256\"},{\"name\":\"isHBHightlight\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_game\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelBussiness\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Games\",\"outputs\":[{\"name\":\"ETHFee\",\"type\":\"uint256\"},{\"name\":\"limitETHFee\",\"type\":\"uint256\"},{\"name\":\"limitHBWALLETFee\",\"type\":\"uint256\"},{\"name\":\"hightLightFee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hbwalletToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_game\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_ethPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_isHightLight\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"_setPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_game\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"_resetPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Bussiness","CompilerVersion":"v0.5.9+commit.e560f70d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5ae27e7c03aaf8edabfbfd03e5c7d829e12a123b53e3adf9d1215a97dd01f27a"}]}