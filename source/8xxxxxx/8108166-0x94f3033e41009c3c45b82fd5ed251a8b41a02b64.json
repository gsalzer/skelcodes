{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.6.0;\r\n\r\n/**\r\n  interface :\r\n */\r\ninterface tokenRecipient{\r\n  function receiveApproval(address _from, uint256 _value,  address _token,   bytes calldata _extraData) external;\r\n}\r\n\r\n\r\ncontract owned{\r\n  //the token owner\r\n  address public owner;\r\n  \r\n  constructor() public{\r\n      owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n//   function transferOwnerShip(address newOwner) onlyOwner public  {\r\n//     owner = newOwner;\r\n//   }\r\n}\r\n\r\n\r\ncontract BNB is owned {\r\n    string public name;  //token name\r\n    string public symbol; //token symbol\r\n    uint8 public decimals = 18; //Tokens to support the number of decimal digits\r\n    uint256 public totalSupply; //token total nums\r\n\r\n    mapping (address => uint256) public balanceOf;//mapping address balance\r\n    mapping (address => mapping(address => uint256)) public allowance;//\r\n    mapping (address => bool) public frozenAccount;//\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value); //transfer event\r\n    event Approval(address indexed _owner,address indexed _spender,uint256 _value);\r\n    event Burn(address indexed from, uint256 value);\r\n    event FrozenFunds(address target, bool frozen);\r\n\r\n   \r\n    constructor(uint256 initialSupply,string memory tokenName,string memory tokenSymbol) public {\r\n       totalSupply = initialSupply * 10 ** uint256(decimals);\r\n       balanceOf[msg.sender] = totalSupply;\r\n       name = tokenName;\r\n       symbol = tokenSymbol; \r\n    }\r\n\r\n    /**\r\n      freeze or unfreeze account\r\n     */\r\n    function freezeAccount(address target, bool freeze) onlyOwner public {\r\n      frozenAccount[target] = freeze;\r\n      emit FrozenFunds(target,freeze);\r\n    }\r\n\r\n    /**\r\n       Internal transfer,only can be called by this contract \r\n     */\r\n    function _transfer(address _from,address _to, uint _value) internal{\r\n      require(_to != address(0x0));\r\n      require(_from != address(0x0));\r\n      require(balanceOf[_from] >= _value); //check if the sender has enough\r\n      require(balanceOf[_to] + _value >= balanceOf[_to]);//check for overflows\r\n      require(!frozenAccount[_from]);\r\n      require(!frozenAccount[_to]);\r\n\r\n      uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n      balanceOf[_from] -= _value;\r\n      balanceOf[_to] += _value;\r\n      emit Transfer(_from, _to, _value); //send transfer event\r\n      // the  num mast equals after transfer\r\n      assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    /**\r\n      send '_value' tokens to '_to' from your account\r\n     */\r\n    function transfer(address _to , uint256 _value) public  returns(bool success){\r\n      _transfer(msg.sender, _to, _value);\r\n      return true;\r\n    }\r\n    \r\n    /**\r\n        send '_value' tokens to '_to' on behalf to '_from'\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool success){\r\n      require(_value <= allowance[_from][msg.sender]);\r\n      allowance[_from][msg.sender] -= _value;\r\n      _transfer(_from, _to, _value); \r\n      return true;\r\n    }\r\n\r\n    /**\r\n     * \r\n      set allowance for other address\r\n      allows '_spender' to spend no more than '_value' tokens on you behalf\r\n     */\r\n    function approve(address _spender, uint256 _value)  public returns (bool success) {\r\n      allowance[msg.sender][_spender] = _value;\r\n      emit Approval(msg.sender, _spender, _value);     \r\n      return true;\r\n    }\r\n\r\n    /**\r\n     set allowance for other address and nofity\r\n\r\n     allows '_spender' to spend no more than '_value' tokens on you behalf,and then ping the contract about it\r\n     */\r\n    function approveAndCall(address _spender,uint256 _value, bytes memory _extraData) public returns (bool success) {\r\n      tokenRecipient spender = tokenRecipient(_spender);\r\n      if(approve(_spender,_value)){\r\n        spender.receiveApproval(msg.sender, _value, address(this),_extraData);\r\n        return true;\r\n      }\r\n    }\r\n    \r\n    /**\r\n      Destroy tokens\r\n      remove '_value' tokens from the system irreversibly\r\n     */\r\n    function burn(uint256 _value) onlyOwner public returns (bool success) {\r\n      require(balanceOf[msg.sender] >= _value);\r\n      balanceOf[msg.sender] -= _value;\r\n      totalSupply -= _value;\r\n      emit Burn(msg.sender, _value);\r\n      return true;\r\n    }\r\n    \r\n    /**\r\n     destroy tokens from other account\r\n     remove '_value' tokens from the system irreversibly or '_from' \r\n    */\r\n    function burnFrom(address _from, uint256 _value) onlyOwner public returns(bool success){\r\n      require(balanceOf[_from] >= _value);\r\n      require(_value <= allowance[_from][msg.sender]);\r\n      balanceOf[_from] -= _value;\r\n      allowance[_from][msg.sender] -= _value;\r\n      totalSupply -= _value;\r\n      emit Burn(_from, _value);\r\n      return true;\r\n    }\r\n    \r\n    /**\r\n      Increase the total tokens\r\n    */\r\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\r\n      uint256 number = mintedAmount * 10 * uint256(decimals);    \r\n      balanceOf[target] += number;\r\n      totalSupply += number;\r\n      emit Transfer(address(0x0),owner,mintedAmount);\r\n      emit Transfer(owner,target,mintedAmount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"}]","ContractName":"BNB","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000bebc200000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003424e4e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003424e4e0000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://97fe3e79787b53e9c6737678095bc534c71e9ee9a874483787dfc48fc7d13f64"}]}