{"status":"1","message":"OK","result":[{"SourceCode":"/**************************************************************************\r\n *            ____        _                              \r\n *           / ___|      | |     __ _  _   _   ___  _ __ \r\n *          | |    _____ | |    / _` || | | | / _ \\| '__|\r\n *          | |___|_____|| |___| (_| || |_| ||  __/| |   \r\n *           \\____|      |_____|\\__,_| \\__, | \\___||_|   \r\n *                                     |___/             \r\n * \r\n **************************************************************************\r\n *\r\n *  The MIT License (MIT)\r\n *\r\n * Copyright (c) 2016-2019 Cyril Lapinte\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included\r\n * in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n **************************************************************************\r\n *\r\n * Flatten Contract: TokenCore\r\n *\r\n * Git Commit:\r\n * https://github.com/c-layer/contracts/tree/43925ba24cc22f42d0ff7711d0e169e8c2a0e09f\r\n *\r\n **************************************************************************/\r\n\r\n// File: contracts/abstract/Storage.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n/**\r\n * @title Storage\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n *\r\n * Error messages\r\n **/\r\ncontract Storage {\r\n\r\n  mapping(address => address) public proxyDelegates;\r\n  address[] public delegates;\r\n}\r\n\r\n// File: contracts/util/governance/Ownable.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n *\r\n * Error messages\r\n *   OW01: Only accessible as owner\r\n *   OW02: New owner must be non null\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, \"OW01\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0), \"OW02\");\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/operable/OperableStorage.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @title OperableStorage\r\n * @dev The Operable contract enable the restrictions of operations to a set of operators\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n *\r\n * Error messages\r\n */\r\ncontract OperableStorage is Ownable, Storage {\r\n\r\n  // Hardcoded role granting all - non sysop - privileges\r\n  bytes32 constant internal ALL_PRIVILEGES = bytes32(\"AllPrivileges\");\r\n  address constant internal ALL_PROXIES = address(0x416c6c50726f78696573); // \"AllProxies\"\r\n\r\n  struct RoleData {\r\n    mapping(bytes4 => bool) privileges;\r\n  }\r\n\r\n  struct OperatorData {\r\n    bytes32 coreRole;\r\n    mapping(address => bytes32) proxyRoles;\r\n  }\r\n\r\n  // Mapping address => role\r\n  // Mapping role => bytes4 => bool\r\n  mapping (address => OperatorData) internal operators;\r\n  mapping (bytes32 => RoleData) internal roles;\r\n\r\n  /**\r\n   * @dev core role\r\n   * @param _address operator address\r\n   */\r\n  function coreRole(address _address) public view returns (bytes32) {\r\n    return operators[_address].coreRole;\r\n  }\r\n\r\n  /**\r\n   * @dev proxy role\r\n   * @param _address operator address\r\n   */\r\n  function proxyRole(address _proxy, address _address)\r\n    public view returns (bytes32)\r\n  {\r\n    return operators[_address].proxyRoles[_proxy];\r\n  }\r\n\r\n  /**\r\n   * @dev has role privilege\r\n   * @dev low level access to role privilege\r\n   * @dev ignores ALL_PRIVILEGES role\r\n   */\r\n  function rolePrivilege(bytes32 _role, bytes4 _privilege)\r\n    public view returns (bool)\r\n  {\r\n    return roles[_role].privileges[_privilege];\r\n  }\r\n\r\n  /**\r\n   * @dev roleHasPrivilege\r\n   */\r\n  function roleHasPrivilege(bytes32 _role, bytes4 _privilege) public view returns (bool) {\r\n    return (_role == ALL_PRIVILEGES) || roles[_role].privileges[_privilege];\r\n  }\r\n\r\n  /**\r\n   * @dev hasCorePrivilege\r\n   * @param _address operator address\r\n   */\r\n  function hasCorePrivilege(address _address, bytes4 _privilege) public view returns (bool) {\r\n    bytes32 role = operators[_address].coreRole;\r\n    return (role == ALL_PRIVILEGES) || roles[role].privileges[_privilege];\r\n  }\r\n\r\n  /**\r\n   * @dev hasProxyPrivilege\r\n   * @dev the default proxy role can be set with proxy address(0)\r\n   * @param _address operator address\r\n   */\r\n  function hasProxyPrivilege(address _address, address _proxy, bytes4 _privilege) public view returns (bool) {\r\n    OperatorData storage data = operators[_address];\r\n    bytes32 role = (data.proxyRoles[_proxy] != bytes32(0)) ?\r\n      data.proxyRoles[_proxy] : data.proxyRoles[ALL_PROXIES];\r\n    return (role == ALL_PRIVILEGES) || roles[role].privileges[_privilege];\r\n  }\r\n}\r\n\r\n// File: contracts/util/convert/BytesConvert.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n/**\r\n * @title BytesConvert\r\n * @dev Convert bytes into different types\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n *\r\n * Error Messages:\r\n *   BC01: source must be a valid 32-bytes length\r\n *   BC02: source must not be greater than 32-bytes\r\n **/\r\nlibrary BytesConvert {\r\n\r\n  /**\r\n  * @dev toUint256\r\n  */\r\n  function toUint256(bytes memory _source) internal pure returns (uint256 result) {\r\n    require(_source.length == 32, \"BC01\");\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {\r\n      result := mload(add(_source, 0x20))\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev toBytes32\r\n  */\r\n  function toBytes32(bytes memory _source) internal pure returns (bytes32 result) {\r\n    require(_source.length <= 32, \"BC02\");\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {\r\n      result := mload(add(_source, 0x20))\r\n    }\r\n  }\r\n}\r\n\r\n// File: contracts/abstract/Core.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Core\r\n * @dev Solidity version 0.5.x prevents to mark as view\r\n * @dev functions using delegate call.\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n *\r\n * Error messages\r\n *   CO01: Only Proxy may access the function\r\n *   CO02: The proxy has no delegates\r\n *   CO03: Delegatecall should be successfull\r\n *   CO04: Invalid delegateId\r\n *   CO05: Proxy must exist\r\n **/\r\ncontract Core is Storage {\r\n  using BytesConvert for bytes;\r\n\r\n  modifier onlyProxy {\r\n    require(proxyDelegates[msg.sender] != address(0), \"CO01\");\r\n    _;\r\n  }\r\n\r\n  function delegateCall(address _proxy) internal returns (bool status)\r\n  {\r\n    address delegate = proxyDelegates[_proxy];\r\n    require(delegate != address(0), \"CO02\");\r\n    // solhint-disable-next-line avoid-low-level-calls\r\n    (status, ) = delegate.delegatecall(msg.data);\r\n    require(status, \"CO03\");\r\n  }\r\n\r\n  function delegateCallUint256(address _proxy)\r\n    internal returns (uint256)\r\n  {\r\n    return delegateCallBytes(_proxy).toUint256();\r\n  }\r\n\r\n  function delegateCallBytes(address _proxy)\r\n    internal returns (bytes memory result)\r\n  {\r\n    bool status;\r\n    address delegate = proxyDelegates[_proxy];\r\n    require(delegate != address(0), \"CO04\");\r\n    // solhint-disable-next-line avoid-low-level-calls\r\n    (status, result) = delegate.delegatecall(msg.data);\r\n    require(status, \"CO03\");\r\n  }\r\n\r\n  function defineProxy(\r\n    address _proxy,\r\n    uint256 _delegateId)\r\n    internal returns (bool)\r\n  {\r\n    require(_delegateId < delegates.length, \"CO04\");\r\n    address delegate = delegates[_delegateId];\r\n\r\n    require(_proxy != address(0), \"CO05\");\r\n    proxyDelegates[_proxy] = delegate;\r\n    return true;\r\n  }\r\n\r\n  function removeProxy(address _proxy)\r\n    internal returns (bool)\r\n  {\r\n    delete proxyDelegates[_proxy];\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts/operable/OperableCore.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title OperableCore\r\n * @dev The Operable contract enable the restrictions of operations to a set of operators\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n *\r\n * Error messages\r\n *   OC01: Sender is not a system operator\r\n *   OC02: Sender is not a core operator\r\n *   OC03: Sender is not a proxy operator\r\n *   OC04: AllPrivileges is a reserved role\r\n */\r\ncontract OperableCore is Core, OperableStorage {\r\n\r\n  constructor() public {\r\n    operators[msg.sender].coreRole = ALL_PRIVILEGES;\r\n    operators[msg.sender].proxyRoles[ALL_PROXIES] = ALL_PRIVILEGES;\r\n  }\r\n\r\n  /**\r\n   * @dev onlySysOp modifier\r\n   * @dev for safety reason, core owner\r\n   * @dev can always define roles and assign or revoke operatos\r\n   */\r\n  modifier onlySysOp() {\r\n    require(msg.sender == owner || hasCorePrivilege(msg.sender, msg.sig), \"OC01\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev onlyCoreOp modifier\r\n   */\r\n  modifier onlyCoreOp() {\r\n    require(hasCorePrivilege(msg.sender, msg.sig), \"OC02\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev onlyProxyOp modifier\r\n   */\r\n  modifier onlyProxyOp(address _proxy) {\r\n    require(hasProxyPrivilege(msg.sender, _proxy, msg.sig), \"OC03\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev defineRoles\r\n   * @param _role operator role\r\n   * @param _privileges as 4 bytes of the method\r\n   */\r\n  function defineRole(bytes32 _role, bytes4[] memory _privileges)\r\n    public onlySysOp returns (bool)\r\n  {\r\n    require(_role != ALL_PRIVILEGES, \"OC04\");\r\n    delete roles[_role];\r\n    for (uint256 i=0; i < _privileges.length; i++) {\r\n      roles[_role].privileges[_privileges[i]] = true;\r\n    }\r\n    emit RoleDefined(_role);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev assignOperators\r\n   * @param _role operator role. May be a role not defined yet.\r\n   * @param _operators addresses\r\n   */\r\n  function assignOperators(bytes32 _role, address[] memory _operators)\r\n    public onlySysOp returns (bool)\r\n  {\r\n    for (uint256 i=0; i < _operators.length; i++) {\r\n      operators[_operators[i]].coreRole = _role;\r\n      emit OperatorAssigned(_role, _operators[i]);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev assignProxyOperators\r\n   * @param _role operator role. May be a role not defined yet.\r\n   * @param _operators addresses\r\n   */\r\n  function assignProxyOperators(\r\n    address _proxy, bytes32 _role, address[] memory _operators)\r\n    public onlySysOp returns (bool)\r\n  {\r\n    for (uint256 i=0; i < _operators.length; i++) {\r\n      operators[_operators[i]].proxyRoles[_proxy] = _role;\r\n      emit ProxyOperatorAssigned(_proxy, _role, _operators[i]);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev removeOperator\r\n   * @param _operators addresses\r\n   */\r\n  function revokeOperators(address[] memory _operators)\r\n    public onlySysOp returns (bool)\r\n  {\r\n    for (uint256 i=0; i < _operators.length; i++) {\r\n      delete operators[_operators[i]];\r\n      emit OperatorRevoked(_operators[i]);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  event RoleDefined(bytes32 role);\r\n  event OperatorAssigned(bytes32 role, address operator);\r\n  event ProxyOperatorAssigned(address proxy, bytes32 role, address operator);\r\n  event OperatorRevoked(address operator);\r\n}\r\n\r\n// File: contracts/util/math/SafeMath.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/interface/IRule.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n/**\r\n * @title IRule\r\n * @dev IRule interface\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n **/\r\ninterface IRule {\r\n  function isAddressValid(address _address) external view returns (bool);\r\n  function isTransferValid(address _from, address _to, uint256 _amount)\r\n    external view returns (bool);\r\n}\r\n\r\n// File: contracts/interface/IClaimable.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n/**\r\n * @title IClaimable\r\n * @dev IClaimable interface\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n **/\r\ncontract IClaimable {\r\n  function hasClaimsSince(address _address, uint256 at)\r\n    external view returns (bool);\r\n}\r\n\r\n// File: contracts/interface/IUserRegistry.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n/**\r\n * @title IUserRegistry\r\n * @dev IUserRegistry interface\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n **/\r\ncontract IUserRegistry {\r\n\r\n  event UserRegistered(uint256 indexed userId);\r\n  event AddressAttached(uint256 indexed userId, address address_);\r\n  event AddressDetached(uint256 indexed userId, address address_);\r\n\r\n  function registerManyUsersExternal(address[] calldata _addresses, uint256 _validUntilTime)\r\n    external returns (bool);\r\n  function registerManyUsersFullExternal(\r\n    address[] calldata _addresses,\r\n    uint256 _validUntilTime,\r\n    uint256[] calldata _values) external returns (bool);\r\n  function attachManyAddressesExternal(uint256[] calldata _userIds, address[] calldata _addresses)\r\n    external returns (bool);\r\n  function detachManyAddressesExternal(address[] calldata _addresses)\r\n    external returns (bool);\r\n  function suspendManyUsers(uint256[] calldata _userIds) external returns (bool);\r\n  function unsuspendManyUsersExternal(uint256[] calldata _userIds) external returns (bool);\r\n  function updateManyUsersExternal(\r\n    uint256[] calldata _userIds,\r\n    uint256 _validUntilTime,\r\n    bool _suspended) external returns (bool);\r\n  function updateManyUsersExtendedExternal(\r\n    uint256[] calldata _userIds,\r\n    uint256 _key, uint256 _value) external returns (bool);\r\n  function updateManyUsersAllExtendedExternal(\r\n    uint256[] calldata _userIds,\r\n    uint256[] calldata _values) external returns (bool);\r\n  function updateManyUsersFullExternal(\r\n    uint256[] calldata _userIds,\r\n    uint256 _validUntilTime,\r\n    bool _suspended,\r\n    uint256[] calldata _values) external returns (bool);\r\n\r\n  function name() public view returns (string memory);\r\n  function currency() public view returns (bytes32);\r\n\r\n  function userCount() public view returns (uint256);\r\n  function userId(address _address) public view returns (uint256);\r\n  function validUserId(address _address) public view returns (uint256);\r\n  function validUser(address _address, uint256[] memory _keys)\r\n    public view returns (uint256, uint256[] memory);\r\n  function validity(uint256 _userId) public view returns (uint256, bool);\r\n\r\n  function extendedKeys() public view returns (uint256[] memory);\r\n  function extended(uint256 _userId, uint256 _key)\r\n    public view returns (uint256);\r\n  function manyExtended(uint256 _userId, uint256[] memory _key)\r\n    public view returns (uint256[] memory);\r\n\r\n  function isAddressValid(address _address) public view returns (bool);\r\n  function isValid(uint256 _userId) public view returns (bool);\r\n\r\n  function defineExtendedKeys(uint256[] memory _extendedKeys) public returns (bool);\r\n\r\n  function registerUser(address _address, uint256 _validUntilTime)\r\n    public returns (bool);\r\n  function registerUserFull(\r\n    address _address,\r\n    uint256 _validUntilTime,\r\n    uint256[] memory _values) public returns (bool);\r\n\r\n  function attachAddress(uint256 _userId, address _address) public returns (bool);\r\n  function detachAddress(address _address) public returns (bool);\r\n  function detachSelf() public returns (bool);\r\n  function detachSelfAddress(address _address) public returns (bool);\r\n  function suspendUser(uint256 _userId) public returns (bool);\r\n  function unsuspendUser(uint256 _userId) public returns (bool);\r\n  function updateUser(uint256 _userId, uint256 _validUntilTime, bool _suspended)\r\n    public returns (bool);\r\n  function updateUserExtended(uint256 _userId, uint256 _key, uint256 _value)\r\n    public returns (bool);\r\n  function updateUserAllExtended(uint256 _userId, uint256[] memory _values)\r\n    public returns (bool);\r\n  function updateUserFull(\r\n    uint256 _userId,\r\n    uint256 _validUntilTime,\r\n    bool _suspended,\r\n    uint256[] memory _values) public returns (bool);\r\n}\r\n\r\n// File: contracts/interface/IRatesProvider.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n/**\r\n * @title IRatesProvider\r\n * @dev IRatesProvider interface\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n */\r\ncontract IRatesProvider {\r\n\r\n  function defineRatesExternal(uint256[] calldata _rates) external returns (bool);\r\n\r\n  function name() public view returns (string memory);\r\n\r\n  function rate(bytes32 _currency) public view returns (uint256);\r\n\r\n  function currencies() public view\r\n    returns (bytes32[] memory, uint256[] memory, uint256);\r\n  function rates() public view returns (uint256, uint256[] memory);\r\n\r\n  function convert(uint256 _amount, bytes32 _fromCurrency, bytes32 _toCurrency)\r\n    public view returns (uint256);\r\n\r\n  function defineCurrencies(\r\n    bytes32[] memory _currencies,\r\n    uint256[] memory _decimals,\r\n    uint256 _rateOffset) public returns (bool);\r\n  function defineRates(uint256[] memory _rates) public returns (bool);\r\n\r\n  event RateOffset(uint256 rateOffset);\r\n  event Currencies(bytes32[] currencies, uint256[] decimals);\r\n  event Rate(uint256 at, bytes32 indexed currency, uint256 rate);\r\n}\r\n\r\n// File: contracts/TokenStorage.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Token storage\r\n * @dev Token storage\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n */\r\ncontract TokenStorage is OperableStorage {\r\n  using SafeMath for uint256;\r\n\r\n  enum TransferCode {\r\n    UNKNOWN,\r\n    OK,\r\n    INVALID_SENDER,\r\n    NO_RECIPIENT,\r\n    INSUFFICIENT_TOKENS,\r\n    LOCKED,\r\n    FROZEN,\r\n    RULE,\r\n    LIMITED_RECEPTION\r\n  }\r\n\r\n  struct Proof {\r\n    uint256 amount;\r\n    uint64 startAt;\r\n    uint64 endAt;\r\n  }\r\n\r\n  struct AuditData {\r\n    uint64 createdAt;\r\n    uint64 lastTransactionAt;\r\n    uint64 lastEmissionAt;\r\n    uint64 lastReceptionAt;\r\n    uint256 cumulatedEmission;\r\n    uint256 cumulatedReception;\r\n  }\r\n\r\n  struct AuditStorage {\r\n    mapping (address => bool) selector;\r\n\r\n    AuditData sharedData;\r\n    mapping(uint256 => AuditData) userData;\r\n    mapping(address => AuditData) addressData;\r\n  }\r\n\r\n  struct Lock {\r\n    uint256 startAt;\r\n    uint256 endAt;\r\n    mapping(address => bool) exceptions;\r\n  }\r\n\r\n  struct TokenData {\r\n    string name;\r\n    string symbol;\r\n    uint256 decimals;\r\n\r\n    uint256 totalSupply;\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    bool mintingFinished;\r\n\r\n    uint256 allTimeIssued; // potential overflow\r\n    uint256 allTimeRedeemed; // potential overflow\r\n    uint256 allTimeSeized; // potential overflow\r\n\r\n    mapping (address => Proof[]) proofs;\r\n    mapping (address => uint256) frozenUntils;\r\n\r\n    Lock lock;\r\n    IRule[] rules;\r\n    IClaimable[] claimables;\r\n  }\r\n  mapping (address => TokenData) internal tokens_;\r\n  mapping (address => mapping (uint256 => AuditStorage)) internal audits;\r\n\r\n  IUserRegistry internal userRegistry;\r\n  IRatesProvider internal ratesProvider;\r\n\r\n  bytes32 internal currency;\r\n  uint256[] internal userKeys;\r\n\r\n  string internal name_;\r\n\r\n  /**\r\n   * @dev currentTime()\r\n   */\r\n  function currentTime() internal view returns (uint64) {\r\n    // solhint-disable-next-line not-rely-on-time\r\n    return uint64(now);\r\n  }\r\n\r\n  event OraclesDefined(\r\n    IUserRegistry userRegistry,\r\n    IRatesProvider ratesProvider,\r\n    bytes32 currency,\r\n    uint256[] userKeys);\r\n  event AuditSelectorDefined(\r\n    address indexed scope, uint256 scopeId, address[] addresses, bool[] values);\r\n  event Issue(address indexed token, uint256 amount);\r\n  event Redeem(address indexed token, uint256 amount);\r\n  event Mint(address indexed token, uint256 amount);\r\n  event MintFinished(address indexed token);\r\n  event ProofCreated(address indexed token, address indexed holder, uint256 proofId);\r\n  event RulesDefined(address indexed token, IRule[] rules);\r\n  event LockDefined(\r\n    address indexed token,\r\n    uint256 startAt,\r\n    uint256 endAt,\r\n    address[] exceptions\r\n  );\r\n  event Seize(address indexed token, address account, uint256 amount);\r\n  event Freeze(address address_, uint256 until);\r\n  event ClaimablesDefined(address indexed token, IClaimable[] claimables);\r\n  event TokenDefined(\r\n    address indexed token,\r\n    uint256 delegateId,\r\n    string name,\r\n    string symbol,\r\n    uint256 decimals);\r\n  event TokenRemoved(address indexed token);\r\n}\r\n\r\n// File: contracts/interface/ITokenCore.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ITokenCore\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n *\r\n * Error messages\r\n **/\r\ncontract ITokenCore {\r\n\r\n  function name() public view returns (string memory);\r\n  function oracles() public view returns\r\n    (IUserRegistry, IRatesProvider, bytes32, uint256[] memory);\r\n\r\n  function auditSelector(\r\n    address _scope,\r\n    uint256 _scopeId,\r\n    address[] memory _addresses)\r\n    public view returns (bool[] memory);\r\n  function auditShared(\r\n    address _scope,\r\n    uint256 _scopeId) public view returns (\r\n    uint64 createdAt,\r\n    uint64 lastTransactionAt,\r\n    uint64 lastEmissionAt,\r\n    uint64 lastReceptionAt,\r\n    uint256 cumulatedEmission,\r\n    uint256 cumulatedReception);\r\n  function auditUser(\r\n    address _scope,\r\n    uint256 _scopeId,\r\n    uint256 _userId) public view returns (\r\n    uint64 createdAt,\r\n    uint64 lastTransactionAt,\r\n    uint64 lastEmissionAt,\r\n    uint64 lastReceptionAt,\r\n    uint256 cumulatedEmission,\r\n    uint256 cumulatedReception);\r\n  function auditAddress(\r\n    address _scope,\r\n    uint256 _scopeId,\r\n    address _holder) public view returns (\r\n    uint64 createdAt,\r\n    uint64 lastTransactionAt,\r\n    uint64 lastEmissionAt,\r\n    uint64 lastReceptionAt,\r\n    uint256 cumulatedEmission,\r\n    uint256 cumulatedReception);\r\n\r\n  /***********  TOKEN DATA   ***********/\r\n  function token(address _token) public view returns (\r\n    bool mintingFinished,\r\n    uint256 allTimeIssued,\r\n    uint256 allTimeRedeemed,\r\n    uint256 allTimeSeized,\r\n    uint256[2] memory lock,\r\n    uint256 freezedUntil,\r\n    IRule[] memory,\r\n    IClaimable[] memory);\r\n  function tokenProofs(address _token, address _holder, uint256 _proofId)\r\n    public view returns (uint256, uint64, uint64);\r\n  function canTransfer(address, address, uint256)\r\n    public returns (uint256);\r\n\r\n  /***********  TOKEN ADMIN  ***********/\r\n  function issue(address, uint256)\r\n    public returns (bool);\r\n  function redeem(address, uint256)\r\n    public returns (bool);\r\n  function mint(address, address, uint256)\r\n    public returns (bool);\r\n  function finishMinting(address)\r\n    public returns (bool);\r\n  function mintAtOnce(address, address[] memory, uint256[] memory)\r\n    public returns (bool);\r\n  function seize(address _token, address, uint256)\r\n    public returns (bool);\r\n  function freezeManyAddresses(\r\n    address _token,\r\n    address[] memory _addresses,\r\n    uint256 _until) public returns (bool);\r\n  function createProof(address, address)\r\n    public returns (bool);\r\n  function defineLock(address, uint256, uint256, address[] memory)\r\n    public returns (bool);\r\n  function defineRules(address, IRule[] memory) public returns (bool);\r\n  function defineClaimables(address, IClaimable[] memory) public returns (bool);\r\n\r\n  /************  CORE ADMIN  ************/\r\n  function defineToken(\r\n    address _token,\r\n    uint256 _delegateId,\r\n    string memory _name,\r\n    string memory _symbol,\r\n    uint256 _decimals) public returns (bool);\r\n  function removeToken(address _token) public returns (bool);\r\n  function defineOracles(\r\n    IUserRegistry _userRegistry,\r\n    IRatesProvider _ratesProvider,\r\n    uint256[] memory _userKeys) public returns (bool);\r\n  function defineAuditSelector(\r\n    address _scope,\r\n    uint256 _scopeId,\r\n    address[] memory _selectorAddresses,\r\n    bool[] memory _selectorValues) public returns (bool);\r\n\r\n\r\n  event OraclesDefined(\r\n    IUserRegistry userRegistry,\r\n    IRatesProvider ratesProvider,\r\n    bytes32 currency,\r\n    uint256[] userKeys);\r\n  event AuditSelectorDefined(\r\n    address indexed scope, uint256 scopeId, address[] addresses, bool[] values);\r\n  event Issue(address indexed token, uint256 amount);\r\n  event Redeem(address indexed token, uint256 amount);\r\n  event Mint(address indexed token, uint256 amount);\r\n  event MintFinished(address indexed token);\r\n  event ProofCreated(address indexed token, address holder, uint256 proofId);\r\n  event RulesDefined(address indexed token, IRule[] rules);\r\n  event LockDefined(\r\n    address indexed token,\r\n    uint256 startAt,\r\n    uint256 endAt,\r\n    address[] exceptions\r\n  );\r\n  event Seize(address indexed token, address account, uint256 amount);\r\n  event Freeze(address address_, uint256 until);\r\n  event ClaimablesDefined(address indexed token, IClaimable[] claimables);\r\n  event TokenDefined(\r\n    address indexed token,\r\n    uint256 delegateId,\r\n    string name,\r\n    string symbol,\r\n    uint256 decimals);\r\n  event TokenRemoved(address indexed token);\r\n}\r\n\r\n// File: contracts/TokenCore.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title TokenCore\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n *\r\n * Error messages\r\n *   TC01: Currency stored values must remain consistent\r\n *   TC02: The audit selector definition requires the same number of addresses and values\r\n **/\r\ncontract TokenCore is ITokenCore, OperableCore, TokenStorage {\r\n\r\n  /**\r\n   * @dev constructor\r\n   *\r\n   * @dev It is desired for now that delegates\r\n   * @dev cannot be changed once the core has been deployed.\r\n   */\r\n  constructor(string memory _name, address[] memory _delegates) public {\r\n    name_ = _name;\r\n    delegates = _delegates;\r\n  }\r\n\r\n  function name() public view returns (string memory) {\r\n    return name_;\r\n  }\r\n\r\n  function oracles() public view returns\r\n    (IUserRegistry, IRatesProvider, bytes32, uint256[] memory)\r\n  {\r\n    return (userRegistry, ratesProvider, currency, userKeys);\r\n  }\r\n\r\n  function auditSelector(\r\n    address _scope,\r\n    uint256 _scopeId,\r\n    address[] memory _addresses)\r\n    public view returns (bool[] memory)\r\n  {\r\n    AuditStorage storage auditStorage = audits[_scope][_scopeId];\r\n    bool[] memory selector = new bool[](_addresses.length);\r\n    for (uint256 i=0; i < _addresses.length; i++) {\r\n      selector[i] = auditStorage.selector[_addresses[i]];\r\n    }\r\n    return selector;\r\n  }\r\n\r\n  function auditShared(\r\n    address _scope,\r\n    uint256 _scopeId) public view returns (\r\n    uint64 createdAt,\r\n    uint64 lastTransactionAt,\r\n    uint64 lastEmissionAt,\r\n    uint64 lastReceptionAt,\r\n    uint256 cumulatedEmission,\r\n    uint256 cumulatedReception)\r\n  {\r\n    AuditData memory audit = audits[_scope][_scopeId].sharedData;\r\n    createdAt = audit.createdAt;\r\n    lastTransactionAt = audit.lastTransactionAt;\r\n    lastReceptionAt = audit.lastReceptionAt;\r\n    lastEmissionAt = audit.lastEmissionAt;\r\n    cumulatedReception = audit.cumulatedReception;\r\n    cumulatedEmission = audit.cumulatedEmission;\r\n  }\r\n\r\n  function auditUser(\r\n    address _scope,\r\n    uint256 _scopeId,\r\n    uint256 _userId) public view returns (\r\n    uint64 createdAt,\r\n    uint64 lastTransactionAt,\r\n    uint64 lastEmissionAt,\r\n    uint64 lastReceptionAt,\r\n    uint256 cumulatedEmission,\r\n    uint256 cumulatedReception)\r\n  {\r\n    AuditData memory audit = audits[_scope][_scopeId].userData[_userId];\r\n    createdAt = audit.createdAt;\r\n    lastTransactionAt = audit.lastTransactionAt;\r\n    lastReceptionAt = audit.lastReceptionAt;\r\n    lastEmissionAt = audit.lastEmissionAt;\r\n    cumulatedReception = audit.cumulatedReception;\r\n    cumulatedEmission = audit.cumulatedEmission;\r\n  }\r\n\r\n  function auditAddress(\r\n    address _scope,\r\n    uint256 _scopeId,\r\n    address _holder) public view returns (\r\n    uint64 createdAt,\r\n    uint64 lastTransactionAt,\r\n    uint64 lastEmissionAt,\r\n    uint64 lastReceptionAt,\r\n    uint256 cumulatedEmission,\r\n    uint256 cumulatedReception)\r\n  {\r\n    AuditData memory audit = audits[_scope][_scopeId].addressData[_holder];\r\n    createdAt = audit.createdAt;\r\n    lastTransactionAt = audit.lastTransactionAt;\r\n    lastReceptionAt = audit.lastReceptionAt;\r\n    lastEmissionAt = audit.lastEmissionAt;\r\n    cumulatedReception = audit.cumulatedReception;\r\n    cumulatedEmission = audit.cumulatedEmission;\r\n  }\r\n\r\n  /**************  ERC20  **************/\r\n  function tokenName() public view returns (string memory) {\r\n    return tokens_[msg.sender].name;\r\n  }\r\n\r\n  function tokenSymbol() public view returns (string memory) {\r\n    return tokens_[msg.sender].symbol;\r\n  }\r\n\r\n  function tokenDecimals() public view returns (uint256) {\r\n    return tokens_[msg.sender].decimals;\r\n  }\r\n\r\n  function tokenTotalSupply() public view returns (uint256) {\r\n    return tokens_[msg.sender].totalSupply;\r\n  }\r\n\r\n  function tokenBalanceOf(address _owner) public view returns (uint256) {\r\n    return tokens_[msg.sender].balances[_owner];\r\n  }\r\n\r\n  function tokenAllowance(address _owner, address _spender)\r\n    public view returns (uint256)\r\n  {\r\n    return tokens_[msg.sender].allowed[_owner][_spender];\r\n  }\r\n\r\n  function transfer(address, address, uint256)\r\n    public onlyProxy returns (bool status)\r\n  {\r\n    return delegateCall(msg.sender);\r\n  }\r\n\r\n  function transferFrom(address, address, address, uint256)\r\n    public onlyProxy returns (bool status)\r\n  {\r\n    return delegateCall(msg.sender);\r\n  }\r\n\r\n  function approve(address, address, uint256)\r\n    public onlyProxy returns (bool status)\r\n  {\r\n    return delegateCall(msg.sender);\r\n  }\r\n\r\n  function increaseApproval(address, address, uint256)\r\n    public onlyProxy returns (bool status)\r\n  {\r\n    return delegateCall(msg.sender);\r\n  }\r\n\r\n  function decreaseApproval(address, address, uint256)\r\n    public onlyProxy returns (bool status)\r\n  {\r\n    return delegateCall(msg.sender);\r\n  }\r\n\r\n  function canTransfer(address, address, uint256)\r\n    public onlyProxy returns (uint256)\r\n  {\r\n    return delegateCallUint256(msg.sender);\r\n  }\r\n\r\n  /***********  TOKEN DATA   ***********/\r\n  function token(address _token) public view returns (\r\n    bool mintingFinished,\r\n    uint256 allTimeIssued,\r\n    uint256 allTimeRedeemed,\r\n    uint256 allTimeSeized,\r\n    uint256[2] memory lock,\r\n    uint256 frozenUntil,\r\n    IRule[] memory rules,\r\n    IClaimable[] memory claimables) {\r\n    TokenData storage tokenData = tokens_[_token];\r\n\r\n    mintingFinished = tokenData.mintingFinished;\r\n    allTimeIssued = tokenData.allTimeIssued;\r\n    allTimeRedeemed = tokenData.allTimeRedeemed;\r\n    allTimeSeized = tokenData.allTimeSeized;\r\n    lock = [ tokenData.lock.startAt, tokenData.lock.endAt ];\r\n    frozenUntil = tokenData.frozenUntils[msg.sender];\r\n    rules = tokenData.rules;\r\n    claimables = tokenData.claimables;\r\n  }\r\n\r\n  function tokenProofs(address _token, address _holder, uint256 _proofId)\r\n    public view returns (uint256, uint64, uint64)\r\n  {\r\n    Proof[] storage proofs = tokens_[_token].proofs[_holder];\r\n    if (_proofId < proofs.length) {\r\n      Proof storage proof = proofs[_proofId];\r\n      return (proof.amount, proof.startAt, proof.endAt);\r\n    }\r\n    return (uint256(0), uint64(0), uint64(0));\r\n  }\r\n\r\n  /***********  TOKEN ADMIN  ***********/\r\n  function issue(address _token, uint256)\r\n    public onlyProxyOp(_token) returns (bool)\r\n  {\r\n    return delegateCall(_token);\r\n  }\r\n\r\n  function redeem(address _token, uint256)\r\n    public onlyProxyOp(_token) returns (bool)\r\n  {\r\n    return delegateCall(_token);\r\n  }\r\n\r\n  function mint(address _token, address, uint256)\r\n    public onlyProxyOp(_token) returns (bool)\r\n  {\r\n    return delegateCall(_token);\r\n  }\r\n\r\n  function finishMinting(address _token)\r\n    public onlyProxyOp(_token) returns (bool)\r\n  {\r\n    return delegateCall(_token);\r\n  }\r\n\r\n  function mintAtOnce(address _token, address[] memory, uint256[] memory)\r\n    public onlyProxyOp(_token) returns (bool)\r\n  {\r\n    return delegateCall(_token);\r\n  }\r\n\r\n  function seize(address _token, address, uint256)\r\n    public onlyProxyOp(_token) returns (bool)\r\n  {\r\n    return delegateCall(_token);\r\n  }\r\n\r\n  function freezeManyAddresses(\r\n    address _token,\r\n    address[] memory,\r\n    uint256) public onlyProxyOp(_token) returns (bool)\r\n  {\r\n    return delegateCall(_token);\r\n  }\r\n\r\n  function createProof(address _token, address)\r\n    public returns (bool)\r\n  {\r\n    return delegateCall(_token);\r\n  }\r\n\r\n  function defineLock(address _token, uint256, uint256, address[] memory)\r\n    public onlyProxyOp(_token) returns (bool)\r\n  {\r\n    return delegateCall(_token);\r\n  }\r\n\r\n  function defineRules(address _token, IRule[] memory)\r\n    public onlyProxyOp(_token) returns (bool)\r\n  {\r\n    return delegateCall(_token);\r\n  }\r\n\r\n  function defineClaimables(address _token, IClaimable[] memory)\r\n    public onlyProxyOp(_token) returns (bool)\r\n  {\r\n    return delegateCall(_token);\r\n  }\r\n\r\n  /************  CORE ADMIN  ************/\r\n  function defineToken(\r\n    address _token,\r\n    uint256 _delegateId,\r\n    string memory _name,\r\n    string memory _symbol,\r\n    uint256 _decimals)\r\n    public onlyCoreOp returns (bool)\r\n  {\r\n    defineProxy(_token, _delegateId);\r\n    TokenData storage tokenData = tokens_[_token];\r\n    tokenData.name = _name;\r\n    tokenData.symbol = _symbol;\r\n    tokenData.decimals = _decimals;\r\n\r\n    emit TokenDefined(_token, _delegateId, _name, _symbol, _decimals);\r\n    return true;\r\n  }\r\n\r\n  function removeToken(address _token)\r\n    public onlyCoreOp returns (bool)\r\n  {\r\n    removeProxy(_token);\r\n    delete tokens_[_token];\r\n\r\n    emit TokenRemoved(_token);\r\n    return true;\r\n  }\r\n\r\n  function defineOracles(\r\n    IUserRegistry _userRegistry,\r\n    IRatesProvider _ratesProvider,\r\n    uint256[] memory _userKeys)\r\n    public onlyCoreOp returns (bool)\r\n  {\r\n    if (currency != bytes32(0)) {\r\n      // Updating the core currency is not yet supported\r\n      require(_userRegistry.currency() == currency, \"TC01\");\r\n    } else {\r\n      currency = _userRegistry.currency();\r\n    }\r\n    userRegistry = _userRegistry;\r\n    ratesProvider = _ratesProvider;\r\n    userKeys = _userKeys;\r\n\r\n    emit OraclesDefined(userRegistry, ratesProvider, currency, userKeys);\r\n    return true;\r\n  }\r\n\r\n  function defineAuditSelector(\r\n    address _scope,\r\n    uint256 _scopeId,\r\n    address[] memory _selectorAddresses,\r\n    bool[] memory _selectorValues) public onlyCoreOp returns (bool)\r\n  {\r\n    require(_selectorAddresses.length == _selectorValues.length, \"TC02\");\r\n\r\n    AuditStorage storage auditStorage = audits[_scope][_scopeId];\r\n    for (uint256 i=0; i < _selectorAddresses.length; i++) {\r\n      auditStorage.selector[_selectorAddresses[i]] = _selectorValues[i];\r\n    }\r\n\r\n    emit AuditSelectorDefined(_scope, _scopeId, _selectorAddresses, _selectorValues);\r\n    return true;\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_delegates\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"scope\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scopeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"values\",\"type\":\"bool[]\"}],\"name\":\"AuditSelectorDefined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IClaimable[]\",\"name\":\"claimables\",\"type\":\"address[]\"}],\"name\":\"ClaimablesDefined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"until\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"exceptions\",\"type\":\"address[]\"}],\"name\":\"LockDefined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IUserRegistry\",\"name\":\"userRegistry\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IRatesProvider\",\"name\":\"ratesProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"userKeys\",\"type\":\"uint256[]\"}],\"name\":\"OraclesDefined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proofId\",\"type\":\"uint256\"}],\"name\":\"ProofCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ProxyOperatorAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"RoleDefined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IRule[]\",\"name\":\"rules\",\"type\":\"address[]\"}],\"name\":\"RulesDefined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Seize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delegateId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"TokenDefined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenRemoved\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_operators\",\"type\":\"address[]\"}],\"name\":\"assignOperators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_operators\",\"type\":\"address[]\"}],\"name\":\"assignProxyOperators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_scope\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_scopeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"auditAddress\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"createdAt\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lastTransactionAt\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lastEmissionAt\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lastReceptionAt\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"cumulatedEmission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cumulatedReception\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_scope\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_scopeId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"auditSelector\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_scope\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_scopeId\",\"type\":\"uint256\"}],\"name\":\"auditShared\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"createdAt\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lastTransactionAt\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lastEmissionAt\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lastReceptionAt\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"cumulatedEmission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cumulatedReception\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_scope\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_scopeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userId\",\"type\":\"uint256\"}],\"name\":\"auditUser\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"createdAt\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lastTransactionAt\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lastEmissionAt\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lastReceptionAt\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"cumulatedEmission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cumulatedReception\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"canTransfer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"coreRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"createProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_scope\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_scopeId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_selectorAddresses\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_selectorValues\",\"type\":\"bool[]\"}],\"name\":\"defineAuditSelector\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract IClaimable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"name\":\"defineClaimables\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"name\":\"defineLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IUserRegistry\",\"name\":\"_userRegistry\",\"type\":\"address\"},{\"internalType\":\"contract IRatesProvider\",\"name\":\"_ratesProvider\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_userKeys\",\"type\":\"uint256[]\"}],\"name\":\"defineOracles\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4[]\",\"name\":\"_privileges\",\"type\":\"bytes4[]\"}],\"name\":\"defineRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract IRule[]\",\"name\":\"\",\"type\":\"address[]\"}],\"name\":\"defineRules\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_delegateId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"}],\"name\":\"defineToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"finishMinting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"freezeManyAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_privilege\",\"type\":\"bytes4\"}],\"name\":\"hasCorePrivilege\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_privilege\",\"type\":\"bytes4\"}],\"name\":\"hasProxyPrivilege\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"name\":\"mintAtOnce\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracles\",\"outputs\":[{\"internalType\":\"contract IUserRegistry\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IRatesProvider\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"proxyDelegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"proxyRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_operators\",\"type\":\"address[]\"}],\"name\":\"revokeOperators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"_privilege\",\"type\":\"bytes4\"}],\"name\":\"roleHasPrivilege\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"_privilege\",\"type\":\"bytes4\"}],\"name\":\"rolePrivilege\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"seize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"token\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"mintingFinished\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"allTimeIssued\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allTimeRedeemed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allTimeSeized\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"lock\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"frozenUntil\",\"type\":\"uint256\"},{\"internalType\":\"contract IRule[]\",\"name\":\"rules\",\"type\":\"address[]\"},{\"internalType\":\"contract IClaimable[]\",\"name\":\"claimables\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"tokenAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_proofId\",\"type\":\"uint256\"}],\"name\":\"tokenProofs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TokenCore","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000a416c74636f696e6f6d7900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000047cbe9981e5c197e4b13e38fb79edee8d5da5ccf000000000000000000000000aa00c46deb9d01606e541d7e481bfc533dfef4bc","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://41e16e810be2a43805356deb79137aba7806ef95cebfbd2d97ee338769cf1a15"}]}