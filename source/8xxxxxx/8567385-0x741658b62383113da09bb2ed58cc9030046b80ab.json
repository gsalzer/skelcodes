{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\n\n\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    \n    uint256 c = a / b;\r\n    \n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\n\ncontract TokenController {\r\n    \n    \n    \n    function proxyPayment(address _owner) payable returns(bool);\r\n\r\n    \n    \n    \n    \n    \n    \n    function onTransfer(address _from, address _to, uint _amount) returns(bool);\r\n\r\n    \n    \n    \n    \n    \n    \n    function onApprove(address _owner, address _spender, uint _amount)\r\n        returns(bool);\r\n}\n\ncontract Controlled {\r\n    \n    \n    modifier onlyController { require(msg.sender == controller); _; }\r\n\r\n    address public controller;\r\n\r\n    function Controlled() { controller = msg.sender;}\r\n\r\n    \n    \n    function changeController(address _newController) onlyController {\r\n        controller = _newController;\r\n    }\r\n}\n\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\r\n}\n\ncontract MiniMeTokenFactory {\r\n\r\n    function MiniMeTokenFactory() {\r\n    }\r\n\r\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    function createCloneToken(\r\n        address _parentToken,\r\n        uint _snapshotBlock,\r\n        string _tokenName,\r\n        uint8 _decimalUnits,\r\n        string _tokenSymbol,\r\n        bool _transfersEnabled\r\n    ) returns (MiniMeToken)\r\n    {\r\n        MiniMeToken newToken = new MiniMeToken(\r\n            this,\r\n            _parentToken,\r\n            _snapshotBlock,\r\n            _tokenName,\r\n            _decimalUnits,\r\n            _tokenSymbol,\r\n            _transfersEnabled\r\n            );\r\n\r\n        newToken.changeController(msg.sender);\r\n        return newToken;\r\n    }\r\n}\n\ncontract MiniMeToken is Controlled {\r\n\r\n    string public name;                \n    uint8 public decimals;             \n    string public symbol;              \n    string public version = 'MMT_0.1'; \n\r\n\r\n    \n    \n    \n    struct  Checkpoint {\r\n\r\n        \n        uint128 fromBlock;\r\n\r\n        \n        uint128 value;\r\n    }\r\n\r\n    \n    \n    MiniMeToken public parentToken;\r\n\r\n    \n    \n    uint public parentSnapShotBlock;\r\n\r\n    \n    uint public creationBlock;\r\n\r\n    \n    \n    \n    mapping (address => Checkpoint[]) balances;\r\n\r\n    \n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    \n    Checkpoint[] totalSupplyHistory;\r\n\r\n    \n    bool public transfersEnabled;\r\n\r\n    \n    MiniMeTokenFactory public tokenFactory;\r\n\r\n\n\n\n\r\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    function MiniMeToken(\r\n        address _tokenFactory,\r\n        address _parentToken,\r\n        uint _parentSnapShotBlock,\r\n        string _tokenName,\r\n        uint8 _decimalUnits,\r\n        string _tokenSymbol,\r\n        bool _transfersEnabled\r\n    )\r\n    Controlled()\r\n    {\r\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\r\n        name = _tokenName;                                 \n        decimals = _decimalUnits;                          \n        symbol = _tokenSymbol;                             \n        parentToken = MiniMeToken(_parentToken);\r\n        parentSnapShotBlock = _parentSnapShotBlock;\r\n        transfersEnabled = _transfersEnabled;\r\n        creationBlock = block.number;\r\n    }\r\n\r\n\r\n\n\n\n\r\n    \n    \n    \n    \n    function transfer(address _to, uint256 _amount) returns (bool success) {\r\n        require(transfersEnabled);\r\n        return doTransfer(msg.sender, _to, _amount);\r\n    }\r\n\r\n    \n    \n    \n    \n    \n    \n    function transferFrom(address _from, address _to, uint256 _amount\r\n    ) returns (bool success) {\r\n\r\n        \n        \n        \n        \n        if (msg.sender != controller) {\r\n            require(transfersEnabled);\r\n\r\n            \n            if (allowed[_from][msg.sender] < _amount) return false;\r\n            allowed[_from][msg.sender] -= _amount;\r\n        }\r\n        return doTransfer(_from, _to, _amount);\r\n    }\r\n\r\n    \n    \n    \n    \n    \n    \n    function doTransfer(address _from, address _to, uint _amount\r\n    ) internal returns(bool) {\r\n\r\n           if (_amount == 0) {\r\n               return true;\r\n           }\r\n\r\n           require(parentSnapShotBlock < block.number);\r\n\r\n           \n           require((_to != 0) && (_to != address(this)));\r\n\r\n           \n           \n           var previousBalanceFrom = balanceOfAt(_from, block.number);\r\n           if (previousBalanceFrom < _amount) {\r\n               return false;\r\n           }\r\n\r\n           \n           \n           updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\r\n\r\n           \n           \n           var previousBalanceTo = balanceOfAt(_to, block.number);\r\n           require(previousBalanceTo + _amount >= previousBalanceTo); \n           updateValueAtNow(balances[_to], previousBalanceTo + _amount);\r\n\r\n           \n           Transfer(_from, _to, _amount);\r\n\r\n           return true;\r\n    }\r\n\r\n    \n    \n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balanceOfAt(_owner, block.number);\r\n    }\r\n\r\n    \n    \n    \n    \n    \n    \n    function approve(address _spender, uint256 _amount) returns (bool success) {\r\n        require(transfersEnabled);\r\n\r\n        \n        \n        \n        \n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    \n    \n    \n    \n    \n    function allowance(address _owner, address _spender\r\n    ) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    \n    \n    \n    \n    \n    \n    \n    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\r\n    ) returns (bool success) {\r\n        require(approve(_spender, _amount));\r\n\r\n        ApproveAndCallFallBack(_spender).receiveApproval(\r\n            msg.sender,\r\n            _amount,\r\n            this,\r\n            _extraData\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    \n    \n    function totalSupply() constant returns (uint) {\r\n        return totalSupplyAt(block.number);\r\n    }\r\n\r\n\r\n\n\n\n\r\n    \n    \n    \n    \n    function balanceOfAt(address _owner, uint _blockNumber) constant\r\n        returns (uint) {\r\n\r\n        \n        \n        \n        \n        \n        if ((balances[_owner].length == 0)\r\n            || (balances[_owner][0].fromBlock > _blockNumber)) {\r\n            if (address(parentToken) != 0) {\r\n                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\r\n            } else {\r\n                \n                return 0;\r\n            }\r\n\r\n        \n        } else {\r\n            return getValueAt(balances[_owner], _blockNumber);\r\n        }\r\n    }\r\n\r\n    \n    \n    \n    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\r\n\r\n        \n        \n        \n        \n        \n        if ((totalSupplyHistory.length == 0)\r\n            || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\r\n            if (address(parentToken) != 0) {\r\n                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\r\n            } else {\r\n                return 0;\r\n            }\r\n\r\n        \n        } else {\r\n            return getValueAt(totalSupplyHistory, _blockNumber);\r\n        }\r\n    }\r\n\r\n\n\n\n\r\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    function createCloneToken(\r\n        string _cloneTokenName,\r\n        uint8 _cloneDecimalUnits,\r\n        string _cloneTokenSymbol,\r\n        uint _snapshotBlock,\r\n        bool _transfersEnabled\r\n        ) returns(address) {\r\n        if (_snapshotBlock == 0) _snapshotBlock = block.number;\r\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\r\n            this,\r\n            _snapshotBlock,\r\n            _cloneTokenName,\r\n            _cloneDecimalUnits,\r\n            _cloneTokenSymbol,\r\n            _transfersEnabled\r\n            );\r\n\r\n        cloneToken.changeController(msg.sender);\r\n\r\n        \n        NewCloneToken(address(cloneToken), _snapshotBlock);\r\n        return address(cloneToken);\r\n    }\r\n\r\n\n\n\n\r\n\r\n    \n    \n    \n    \n    function generateTokens(address _owner, uint _amount\r\n    ) onlyController returns (bool) {\r\n        uint curTotalSupply = totalSupply();\r\n        require(curTotalSupply + _amount >= curTotalSupply); \n        uint previousBalanceTo = balanceOf(_owner);\r\n        require(previousBalanceTo + _amount >= previousBalanceTo); \n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\r\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\r\n        Transfer(0, _owner, _amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    \n    \n    \n    \n    function destroyTokens(address _owner, uint _amount\r\n    ) onlyController returns (bool) {\r\n        uint curTotalSupply = totalSupply();\r\n        require(curTotalSupply >= _amount);\r\n        uint previousBalanceFrom = balanceOf(_owner);\r\n        require(previousBalanceFrom >= _amount);\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\r\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\r\n        Transfer(_owner, 0, _amount);\r\n        return true;\r\n    }\r\n\r\n\n\n\n\r\n\r\n    \n    \n    function enableTransfers(bool _transfersEnabled) onlyController {\r\n        transfersEnabled = _transfersEnabled;\r\n    }\r\n\r\n\n\n\n\r\n    \n    \n    \n    \n    function getValueAt(Checkpoint[] storage checkpoints, uint _block\r\n    ) constant internal returns (uint) {\r\n        if (checkpoints.length == 0) return 0;\r\n\r\n        \n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\r\n            return checkpoints[checkpoints.length-1].value;\r\n        if (_block < checkpoints[0].fromBlock) return 0;\r\n\r\n        \n        uint min = 0;\r\n        uint max = checkpoints.length-1;\r\n        while (max > min) {\r\n            uint mid = (max + min + 1)/ 2;\r\n            if (checkpoints[mid].fromBlock<=_block) {\r\n                min = mid;\r\n            } else {\r\n                max = mid-1;\r\n            }\r\n        }\r\n        return checkpoints[min].value;\r\n    }\r\n\r\n    \n    \n    \n    \n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\r\n    ) internal  {\r\n        if ((checkpoints.length == 0)\r\n        || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\r\n               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\r\n               newCheckPoint.fromBlock =  uint128(block.number);\r\n               newCheckPoint.value = uint128(_value);\r\n           } else {\r\n               Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\r\n               oldCheckPoint.value = uint128(_value);\r\n           }\r\n    }\r\n\r\n    \n    \n    \n    function isContract(address _addr) constant internal returns(bool) {\r\n        uint size;\r\n        if (_addr == 0) return false;\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n        return size>0;\r\n    }\r\n\r\n    \n    function min(uint a, uint b) internal returns (uint) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    \n    \n    \n    function () payable {\r\n        \n        require(false);\r\n    }\r\n\r\n\n\n\n\r\n    \n    \n    \n    \n    function claimTokens(address _token) onlyController {\r\n        if (_token == 0x0) {\r\n            controller.transfer(this.balance);\r\n            return;\r\n        }\r\n\r\n        MiniMeToken token = MiniMeToken(_token);\r\n        uint balance = token.balanceOf(this);\r\n        token.transfer(controller, balance);\r\n        ClaimedTokens(_token, controller, balance);\r\n    }\r\n\r\n\n\n\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\r\n    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _amount\r\n        );\r\n\r\n}\n\ncontract MiniMeMintableToken is MiniMeToken {\r\n  using SafeMath for uint256;\r\n\r\n  \n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  \n  bool public mintingFinished = false;\r\n\r\n  \n  \n  mapping (address => uint256) issuedTokens;\r\n\r\n  \n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  \n  function MiniMeMintableToken(\r\n    address _tokenFactory,\r\n    address _parentToken,\r\n    uint _parentSnapShotBlock,\r\n    string _tokenName,\r\n    uint8 _decimalUnits,\r\n    string _tokenSymbol,\r\n    bool _transfersEnabled\r\n  )\r\n  MiniMeToken(\r\n    _tokenFactory,\r\n    _parentToken,\r\n    _parentSnapShotBlock,\r\n    _tokenName,\r\n    _decimalUnits,\r\n    _tokenSymbol,\r\n    _transfersEnabled\r\n  )\r\n  {\r\n  }\r\n\r\n  \r\n  function mint(address _to, uint256 _amount) onlyController canMint returns (bool) {\r\n\r\n    \n    generateTokens(_to, _amount);\r\n\r\n    \n    issuedTokens[_to] = issuedTokens[_to].add(_amount);\r\n\r\n    \n    Mint(_to, _amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  \r\n  function finishMinting() onlyController canMint returns (bool) {\r\n\r\n    \n    \n    mintingFinished = true;\r\n\r\n    \n    MintFinished();\r\n\r\n    return true;\r\n  }\r\n}\n\ncontract MiniMeVestedToken is MiniMeMintableToken {\r\n  using SafeMath for uint256;\r\n\r\n  \n  \n  uint256 public vestingStartTime = 0;\r\n\r\n  \n  uint256 public vestingPeriodTime = 42 days;\r\n  uint256 public vestingTotalPeriods = 8;\r\n\r\n  \n  function MiniMeVestedToken(\r\n    address _tokenFactory,\r\n    address _parentToken,\r\n    uint _parentSnapShotBlock,\r\n    string _tokenName,\r\n    uint8 _decimalUnits,\r\n    string _tokenSymbol,\r\n    bool _transfersEnabled\r\n  )\r\n  MiniMeMintableToken(\r\n    _tokenFactory,\r\n    _parentToken,\r\n    _parentSnapShotBlock,\r\n    _tokenName,\r\n    _decimalUnits,\r\n    _tokenSymbol,\r\n    _transfersEnabled\r\n  )\r\n  {\r\n  }\r\n\r\n\n\n\n\r\n  \r\n  modifier canTransfer(address _sender, uint _value) {\r\n    require(mintingFinished);\r\n    require(_value <= vestedBalanceOf(_sender));\r\n    _;\r\n  }\r\n\r\n  \r\n  function transfer(address _to, uint _value)\r\n    canTransfer(msg.sender, _value)\r\n    public\r\n    returns (bool success)\r\n  {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  \r\n  function transferFrom(address _from, address _to, uint _value)\r\n    canTransfer(_from, _value)\r\n    public\r\n    returns (bool success)\r\n  {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n\n\n\n\r\n  \r\n  function setVestingParams(uint256 _vestingStartTime, uint256 _vestingTotalPeriods, uint256 _vestingPeriodTime) onlyController {\r\n    vestingStartTime = _vestingStartTime;\r\n    vestingTotalPeriods = _vestingTotalPeriods;\r\n    vestingPeriodTime = _vestingPeriodTime;\r\n  }\r\n\r\n  \r\n  function getVestingPeriodsCompleted(uint256 _vestingStartTime, uint256 _currentTime) public constant returns (uint256) {\r\n      return _currentTime.sub(_vestingStartTime).div(vestingPeriodTime);\r\n  }\r\n\r\n  \r\n  function getVestedBalance(uint256 _initialBalance, uint256 _currentBalance, uint256 _vestingStartTime, uint256 _currentTime)\r\n      public constant returns (uint256)\r\n  {\r\n      \n      if (_currentTime < _vestingStartTime) {\r\n        return 0;\r\n      }\r\n\r\n      \n      if (_currentTime >= _vestingStartTime.add(vestingPeriodTime.mul(vestingTotalPeriods))) {\r\n          return _currentBalance;\r\n      }\r\n\r\n      \n      uint256 vestedPeriodsCompleted = getVestingPeriodsCompleted(_vestingStartTime, _currentTime);\r\n\r\n      \n      uint256 vestingPeriodsRemaining = vestingTotalPeriods.sub(vestedPeriodsCompleted);\r\n      uint256 unvestedBalance = _initialBalance.mul(vestingPeriodsRemaining).div(vestingTotalPeriods);\r\n\r\n      \n      return _currentBalance.sub(unvestedBalance);\r\n  }\r\n\r\n  \r\n  function vestedBalanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return getVestedBalance(issuedTokens[_owner], balanceOf(_owner), vestingStartTime, block.timestamp);\r\n  }\r\n\r\n  \r\n  function finishMinting() onlyController canMint returns (bool) {\r\n    \n    vestingStartTime = block.timestamp;\r\n\r\n    return super.finishMinting();\r\n  }\r\n}\n\ncontract GreyzBTRCoin is MiniMeMintableToken {\r\n\r\n  \r\n\r\n  string private _kya;\r\n\r\n   event DocumentUpdated(string _kya);\r\n\r\n  function GreyzBTRCoin(address _tokenFactory)\r\n    MiniMeMintableToken(\r\n      _tokenFactory,\r\n      0x0,\r\n      0,\r\n      \"Greyz BTR Coin\",\r\n      0,\r\n      \"GBTR\",\r\n      true\r\n    )\r\n    {}\r\n\r\n    \r\n    function getDocument() external view returns (string) {\r\n        return (_kya);\r\n    }\r\n\r\n    \r\n    function updateDocument(string kya) external onlyController returns (bool) {\r\n        return _updateDocument(kya);\r\n    }\r\n\r\n    \r\n    function _updateDocument(string kya) internal returns (bool) {\r\n        _kya = kya;\r\n\r\n        emit DocumentUpdated(kya);\r\n\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"kya\",\"type\":\"string\"}],\"name\":\"updateDocument\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"changeController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cloneTokenName\",\"type\":\"string\"},{\"name\":\"_cloneDecimalUnits\",\"type\":\"uint8\"},{\"name\":\"_cloneTokenSymbol\",\"type\":\"string\"},{\"name\":\"_snapshotBlock\",\"type\":\"uint256\"},{\"name\":\"_transfersEnabled\",\"type\":\"bool\"}],\"name\":\"createCloneToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"parentToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"generateTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDocument\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transfersEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"parentSnapShotBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"destroyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transfersEnabled\",\"type\":\"bool\"}],\"name\":\"enableTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenFactory\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_kya\",\"type\":\"string\"}],\"name\":\"DocumentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_controller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_cloneToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_snapshotBlock\",\"type\":\"uint256\"}],\"name\":\"NewCloneToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"GreyzBTRCoin","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000021c045ac2e2f1d6321c8230bfebaaef2ff0f7619","Library":"","LicenseType":"","SwarmSource":"bzzr://dba9620cb7b1f8a3d79030794c52a9afc8e99640f9b18fbb27b5fc4501ceaca6"}]}