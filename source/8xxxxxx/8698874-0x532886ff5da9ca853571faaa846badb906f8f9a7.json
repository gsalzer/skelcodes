{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.8;\n\n\ninterface IERC20 {\n    \n    function totalSupply() external view returns (uint256);\n\n    \n    function balanceOf(address account) external view returns (uint256);\n\n    \n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    \n    function allowance(address owner, address spender) external view returns (uint256);\n\n    \n    function approve(address spender, uint256 amount) external returns (bool);\n\n    \n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    \n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n    \n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    \n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    \n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        \n        \n        \n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    \n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        \n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        \n\n        return c;\n    }\n\n    \n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n}\n\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    \n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    \n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    \n    function transfer(address recipient, uint256 amount) public returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    \n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    \n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    \n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n        return true;\n    }\n\n    \n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    \n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    \n    function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _balances[sender] = _balances[sender].sub(amount);\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    \n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n     \n    function _burn(address account, uint256 value) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    \n    function _approve(address owner, address spender, uint256 value) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    \n    function _burnFrom(address account, uint256 amount) internal {\n        _burn(account, amount);\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n    }\n}\n\ninterface FundsInterface {\n    function lender(bytes32) external view returns (address);\n    function custom(bytes32) external view returns (bool);\n    function deposit(bytes32, uint256) external;\n    function decreaseTotalBorrow(uint256) external;\n    function calcGlobalInterest() external;\n}\n\ninterface SalesInterface {\n    function saleIndexByLoan(bytes32, uint256) external returns(bytes32);\n    function settlementExpiration(bytes32) external view returns (uint256);\n    function accepted(bytes32) external view returns (bool);\n    function next(bytes32) external view returns (uint256);\n    function create(bytes32, address, address, address, address, bytes32, bytes32, bytes32, bytes32, bytes20) external returns(bytes32);\n}\n\ncontract DSMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x);\n    }\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x);\n    }\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n    function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n\n    function min(uint x, uint y) internal pure returns (uint z) {\n        return x <= y ? x : y;\n    }\n    function max(uint x, uint y) internal pure returns (uint z) {\n        return x >= y ? x : y;\n    }\n    function imin(int x, int y) internal pure returns (int z) {\n        return x <= y ? x : y;\n    }\n    function imax(int x, int y) internal pure returns (int z) {\n        return x >= y ? x : y;\n    }\n\n    uint constant COL  = 10 ** 8;\n    uint constant WAD  = 10 ** 18;\n    uint constant RAY  = 10 ** 27;\n\n    function cmul(uint x, uint y) public pure returns (uint z) {\n        z = add(mul(x, y), COL / 2) / COL;\n    }\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n    function rmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n    function cdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, COL), y / 2) / y;\n    }\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    function rpow(uint x, uint n) internal pure returns (uint z) {\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }\n}\n\ncontract Medianizer {\n    function peek() public view returns (bytes32, bool);\n    function read() public returns (bytes32);\n    function poke() public;\n    function poke(bytes32) public;\n    function fund (uint256 amount, ERC20 token) public;\n}\n\ncontract Loans is DSMath {\n    FundsInterface funds;\n    Medianizer med;\n    SalesInterface sales;\n\n    uint256 public constant APPROVE_EXP_THRESHOLD = 2 hours;    \n    uint256 public constant ACCEPT_EXP_THRESHOLD = 2 days;      \n    uint256 public constant LIQUIDATION_EXP_THRESHOLD = 7 days; \n    uint256 public constant SEIZURE_EXP_THRESHOLD = 2 days;     \n    uint256 public constant LIQUIDATION_DISCOUNT = 930000000000000000; \n\n    mapping (bytes32 => Loan)         public loans;\n    mapping (bytes32 => PubKeys)      public pubKeys;      \n    mapping (bytes32 => SecretHashes) public secretHashes; \n    mapping (bytes32 => Bools)        public bools;        \n    mapping (bytes32 => bytes32)      public fundIndex;    \n    mapping (bytes32 => ERC20)        public tokes;        \n    mapping (bytes32 => uint256)      public repayments;   \n    uint256                           public loanIndex;    \n\n    mapping (address => bytes32[])    public borrowerLoans;\n    mapping (address => bytes32[])    public lenderLoans;\n\n    ERC20 public token; \n    uint256 public decimals;\n\n    address deployer;\n\n    \n    struct Loan {\n    \taddress borrower;\n        address lender;\n        address arbiter;\n        uint256 createdAt;\n        uint256 loanExpiration;\n        uint256 requestTimestamp;\n        uint256 closedTimestamp;\n        uint256 principal;\n        uint256 interest;\n        uint256 penalty;\n        uint256 fee;\n        uint256 collateral;\n        uint256 liquidationRatio;\n    }\n\n    \n    struct PubKeys {\n        bytes   borrowerPubKey;\n        bytes   lenderPubKey;\n        bytes   arbiterPubKey;\n    }\n\n    \n    struct SecretHashes {\n    \tbytes32    secretHashA1;\n    \tbytes32[3] secretHashAs;\n    \tbytes32    secretHashB1;\n    \tbytes32[3] secretHashBs;\n    \tbytes32    secretHashC1;\n    \tbytes32[3] secretHashCs;\n        bytes32    withdrawSecret;\n        bytes32    acceptSecret;\n    \tbool       set;\n    }\n\n    \n    struct Bools {\n    \tbool funded;\n    \tbool approved;\n    \tbool withdrawn;\n    \tbool sale;\n    \tbool paid;\n    \tbool off;\n    }\n\n    event Create(bytes32 loan);\n\n    function borrower(bytes32 loan) public view returns (address) {\n        return loans[loan].borrower;\n    }\n\n    function lender(bytes32 loan) public view returns (address) {\n        return loans[loan].lender;\n    }\n\n    function arbiter(bytes32 loan)  public view returns (address) {\n        return loans[loan].arbiter;\n    }\n\n    function approveExpiration(bytes32 loan) public view returns (uint256) { \n        return add(loans[loan].createdAt, APPROVE_EXP_THRESHOLD);\n    }\n\n    \n\n    function acceptExpiration(bytes32 loan) public view returns (uint256) { \n        return add(loans[loan].loanExpiration, ACCEPT_EXP_THRESHOLD);\n    }\n\n    function liquidationExpiration(bytes32 loan) public view returns (uint256) { \n        return add(loans[loan].loanExpiration, LIQUIDATION_EXP_THRESHOLD);\n    }\n\n    function seizureExpiration(bytes32 loan) public view returns (uint256) {\n        return add(liquidationExpiration(loan), SEIZURE_EXP_THRESHOLD);\n    }\n\n    function principal(bytes32 loan) public view returns (uint256) {\n        return loans[loan].principal;\n    }\n\n    function interest(bytes32 loan) public view returns (uint256) {\n        return loans[loan].interest;\n    }\n\n    function fee(bytes32 loan) public view returns (uint256) {\n        return loans[loan].fee;\n    }\n\n    function penalty(bytes32 loan) public view returns (uint256) {\n        return loans[loan].penalty;\n    }\n\n    function collateral(bytes32 loan) public view returns (uint256) {\n        return loans[loan].collateral;\n    }\n\n    function repaid(bytes32 loan) public view returns (uint256) { \n        return repayments[loan];\n    }\n\n    function liquidationRatio(bytes32 loan) public view returns (uint256) {\n        return loans[loan].liquidationRatio;\n    }\n\n    function owedToLender(bytes32 loan) public view returns (uint256) { \n        return add(principal(loan), interest(loan));\n    }\n\n    function owedForLoan(bytes32 loan) public view returns (uint256) { \n        return add(owedToLender(loan), fee(loan));\n    }\n\n    function owedForLiquidation(bytes32 loan) public view returns (uint256) { \n        return add(owedForLoan(loan), penalty(loan));\n    }\n\n    function owing(bytes32 loan) public view returns (uint256) {\n        return sub(owedForLoan(loan), repaid(loan));\n    }\n\n    function funded(bytes32 loan) public view returns (bool) {\n        return bools[loan].funded;\n    }\n\n    function approved(bytes32 loan) public view returns (bool) {\n        return bools[loan].approved;\n    }\n\n    function withdrawn(bytes32 loan) public view returns (bool) {\n        return bools[loan].withdrawn;\n    }\n\n    function sale(bytes32 loan) public view returns (bool) {\n        return bools[loan].sale;\n    }\n\n    function paid(bytes32 loan) public view returns (bool) {\n        return bools[loan].paid;\n    }\n\n    function off(bytes32 loan) public view returns (bool) {\n        return bools[loan].off;\n    }\n\n    function dmul(uint x) public view returns (uint256) {\n        return mul(x, (10 ** sub(18, decimals)));\n    }\n\n    function ddiv(uint x) public view returns (uint256) {\n        return div(x, (10 ** sub(18, decimals)));\n    }\n\n    function borrowerLoanCount(address borrower_) public view returns (uint256) {\n        return borrowerLoans[borrower_].length;\n    }\n\n    function lenderLoanCount(address lender_) public view returns (uint256) {\n        return lenderLoans[lender_].length;\n    }\n\n    function collateralValue(bytes32 loan) public view returns (uint256) { \n        (bytes32 val, bool set) = med.peek();\n        require(set);\n        uint256 price = uint(val);\n        return cmul(price, collateral(loan)); \n    }\n\n    function minCollateralValue(bytes32 loan) public view returns (uint256) {  \n        return rmul(dmul(sub(principal(loan), repaid(loan))), liquidationRatio(loan));\n    }\n\n    function discountCollateralValue(bytes32 loan) public view returns (uint256) {\n        return wmul(collateralValue(loan), LIQUIDATION_DISCOUNT);\n    }\n\n    function safe(bytes32 loan) public view returns (bool) { \n        return collateralValue(loan) >= minCollateralValue(loan);\n    }\n\n    constructor (FundsInterface funds_, Medianizer med_, ERC20 token_, uint256 decimals_) public {\n        deployer = msg.sender;\n    \tfunds    = funds_;\n    \tmed      = med_;\n        token    = token_;\n        decimals = decimals_;\n        require(token.approve(address(funds), 2**256-1));\n    }\n\n    \n    function setSales(SalesInterface sales_) external {\n        require(msg.sender == deployer);\n        require(address(sales) == address(0));\n        sales = sales_;\n    }\n    \n    \n    function create(\n        uint256             loanExpiration_,\n        address[3] calldata usrs_,\n        uint256[7] calldata vals_,\n        bytes32             fundIndex_\n    ) external returns (bytes32 loan) {\n        if (fundIndex_ != bytes32(0)) { require(funds.lender(fundIndex_) == usrs_[1]); }\n        loanIndex = add(loanIndex, 1);\n        loan = bytes32(loanIndex);\n        loans[loan].createdAt        = now;\n        loans[loan].loanExpiration   = loanExpiration_;\n        loans[loan].borrower         = usrs_[0];\n        loans[loan].lender           = usrs_[1];\n        loans[loan].arbiter          = usrs_[2];\n        loans[loan].principal        = vals_[0];\n        loans[loan].interest         = vals_[1];\n        loans[loan].penalty          = vals_[2];\n        loans[loan].fee              = vals_[3];\n        loans[loan].collateral       = vals_[4];\n        loans[loan].liquidationRatio = vals_[5];\n        loans[loan].requestTimestamp = vals_[6];\n        fundIndex[loan]              = fundIndex_;\n        secretHashes[loan].set       = false;\n        borrowerLoans[usrs_[0]].push(bytes32(loanIndex));\n        lenderLoans[usrs_[1]].push(bytes32(loanIndex));\n\n        emit Create(loan);\n    }\n\n    \n    function setSecretHashes(\n    \tbytes32             loan,\n        bytes32[4] calldata borrowerSecretHashes,\n        bytes32[4] calldata lenderSecretHashes,\n        bytes32[4] calldata arbiterSecretHashes,\n\t\tbytes      calldata borrowerPubKey_,\n        bytes      calldata lenderPubKey_,\n        bytes      calldata arbiterPubKey_\n\t) external returns (bool) {\n\t\trequire(!secretHashes[loan].set);\n\t\trequire(msg.sender == loans[loan].borrower || msg.sender == loans[loan].lender || msg.sender == address(funds));\n\t\tsecretHashes[loan].secretHashA1 = borrowerSecretHashes[0];\n\t\tsecretHashes[loan].secretHashAs = [ borrowerSecretHashes[1], borrowerSecretHashes[2], borrowerSecretHashes[3] ];\n\t\tsecretHashes[loan].secretHashB1 = lenderSecretHashes[0];\n\t\tsecretHashes[loan].secretHashBs = [ lenderSecretHashes[1], lenderSecretHashes[2], lenderSecretHashes[3] ];\n\t\tsecretHashes[loan].secretHashC1 = arbiterSecretHashes[0];\n\t\tsecretHashes[loan].secretHashCs = [ arbiterSecretHashes[1], arbiterSecretHashes[2], arbiterSecretHashes[3] ];\n\t\tpubKeys[loan].borrowerPubKey    = borrowerPubKey_;\n\t\tpubKeys[loan].lenderPubKey      = lenderPubKey_;\n        pubKeys[loan].arbiterPubKey       = arbiterPubKey_;\n        secretHashes[loan].set          = true;\n\t}\n\n    \n\tfunction fund(bytes32 loan) external {\n\t\trequire(secretHashes[loan].set);\n    \trequire(bools[loan].funded == false);\n    \trequire(token.transferFrom(msg.sender, address(this), principal(loan)));\n    \tbools[loan].funded = true;\n    }\n\n    \n    function approve(bytes32 loan) external { \n    \trequire(bools[loan].funded == true);\n    \trequire(loans[loan].lender == msg.sender);\n    \trequire(now                <= approveExpiration(loan));\n    \tbools[loan].approved = true;\n    }\n\n    \n    function withdraw(bytes32 loan, bytes32 secretA1) external {\n    \trequire(!off(loan));\n    \trequire(bools[loan].funded == true);\n    \trequire(bools[loan].approved == true);\n        require(bools[loan].withdrawn == false);\n    \trequire(sha256(abi.encodePacked(secretA1)) == secretHashes[loan].secretHashA1);\n    \trequire(token.transfer(loans[loan].borrower, principal(loan)));\n    \tbools[loan].withdrawn = true;\n        secretHashes[loan].withdrawSecret = secretA1;\n    }\n\n    \n    function repay(bytes32 loan, uint256 amount) external {\n    \trequire(!off(loan));\n        require(!sale(loan));\n    \trequire(bools[loan].withdrawn     == true);\n    \trequire(now                       <= loans[loan].loanExpiration);\n        require(add(amount, repaid(loan)) <= owedForLoan(loan));\n    \trequire(token.transferFrom(msg.sender, address(this), amount));\n    \trepayments[loan] = add(amount, repayments[loan]);\n    \tif (repaid(loan) == owedForLoan(loan)) {\n    \t\tbools[loan].paid = true;\n    \t}\n    }\n\n    \n    function refund(bytes32 loan) external {\n    \trequire(!off(loan));\n        require(!sale(loan));\n    \trequire(now              >  acceptExpiration(loan));\n    \trequire(bools[loan].paid == true);\n    \trequire(msg.sender       == loans[loan].borrower);\n        bools[loan].off = true;\n        loans[loan].closedTimestamp = now;\n    \trequire(token.transfer(loans[loan].borrower, owedForLoan(loan)));\n        if (funds.custom(fundIndex[loan]) == false) {\n            funds.decreaseTotalBorrow(loans[loan].principal);\n            funds.calcGlobalInterest();\n        }\n    }\n\n    \n    function cancel(bytes32 loan, bytes32 secret) external {\n        accept(loan, secret);\n    }\n\n    \n    function accept(bytes32 loan, bytes32 secret) public {\n        require(!off(loan));\n        require(bools[loan].withdrawn == false   || bools[loan].paid == true);\n        require(msg.sender == loans[loan].lender || msg.sender == loans[loan].arbiter);\n        require(sha256(abi.encodePacked(secret)) == secretHashes[loan].secretHashB1 || sha256(abi.encodePacked(secret)) == secretHashes[loan].secretHashC1);\n        require(now                              <= acceptExpiration(loan));\n        require(bools[loan].sale                 == false);\n        bools[loan].off = true;\n        loans[loan].closedTimestamp = now;\n        secretHashes[loan].acceptSecret = secret;\n        if (bools[loan].withdrawn == false) {\n            if (fundIndex[loan] == bytes32(0)) {\n                require(token.transfer(loans[loan].lender, loans[loan].principal));\n            } else {\n                if (funds.custom(fundIndex[loan]) == false) {\n                    funds.decreaseTotalBorrow(loans[loan].principal);\n                }\n                funds.deposit(fundIndex[loan], loans[loan].principal);\n            }\n        } else if (bools[loan].withdrawn == true) {\n            if (fundIndex[loan] == bytes32(0)) {\n                require(token.transfer(loans[loan].lender, owedToLender(loan)));\n            } else {\n                if (funds.custom(fundIndex[loan]) == false) {\n                    funds.decreaseTotalBorrow(loans[loan].principal);\n                }\n                funds.deposit(fundIndex[loan], owedToLender(loan));\n            }\n            require(token.transfer(loans[loan].arbiter, fee(loan)));\n        }\n    }\n\n    \n    function liquidate(bytes32 loan, bytes32 secretHash, bytes20 pubKeyHash) external returns (bytes32 sale_) {\n    \trequire(!off(loan));\n        require(bools[loan].withdrawn == true);\n        require(msg.sender != loans[loan].borrower && msg.sender != loans[loan].lender);\n    \tif (sales.next(loan) == 0) {\n    \t\tif (now > loans[loan].loanExpiration) {\n\t    \t\trequire(bools[loan].paid == false);\n\t\t\t} else {\n\t\t\t\trequire(!safe(loan));\n\t\t\t}\n            if (funds.custom(fundIndex[loan]) == false) {\n                funds.decreaseTotalBorrow(loans[loan].principal);\n                funds.calcGlobalInterest();\n            }\n\t\t} else {\n\t\t\trequire(sales.next(loan) < 3);\n            require(now > sales.settlementExpiration(sales.saleIndexByLoan(loan, sales.next(loan) - 1))); \n            require(!sales.accepted(sales.saleIndexByLoan(loan, sales.next(loan) - 1))); \n\t\t}\n        require(token.balanceOf(msg.sender) >= ddiv(discountCollateralValue(loan)));\n        require(token.transferFrom(msg.sender, address(sales), ddiv(discountCollateralValue(loan))));\n        SecretHashes storage h = secretHashes[loan];\n        uint256 i = sales.next(loan);\n\t\tsale_ = sales.create(loan, loans[loan].borrower, loans[loan].lender, loans[loan].arbiter, msg.sender, h.secretHashAs[i], h.secretHashBs[i], h.secretHashCs[i], secretHash, pubKeyHash);\n        if (bools[loan].sale == false) { require(token.transfer(address(sales), repaid(loan))); }\n\t\tbools[loan].sale = true;\n    }\n}\n\ninterface CTokenInterface {\n    function redeem(uint redeemTokens) external returns (uint);\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\n    function borrow(uint borrowAmount) external returns (uint);\n    function liquidateBorrow(address borrower, uint repayAmount, address cTokenCollateral) external returns (uint);\n    function liquidateBorrow(address borrower, address cTokenCollateral) external payable;\n    function exchangeRateCurrent() external returns (uint);\n    function getCash() external view returns (uint);\n    function totalBorrowsCurrent() external returns (uint);\n    function borrowRatePerBlock() external view returns (uint);\n    function supplyRatePerBlock() external view returns (uint);\n    function totalReserves() external view returns (uint);\n    function reserveFactorMantissa() external view returns (uint);\n\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address owner) external view returns (uint256 balance);\n    function allowance(address, address) external view returns (uint);\n    function approve(address, uint) external;\n    function transfer(address, uint) external returns (bool);\n    function transferFrom(address, address, uint) external returns (bool);\n}\n\ninterface CERC20Interface {\n    function mint(uint mintAmount) external returns (uint); \n    function repayBorrow(uint repayAmount) external returns (uint); \n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint); \n    function borrowBalanceCurrent(address account) external returns (uint);\n}\n\ninterface ERC20Interface {\n    function allowance(address, address) external view returns (uint);\n    function balanceOf(address) external view returns (uint);\n    function approve(address, uint) external;\n    function transfer(address, uint) external returns (bool);\n    function transferFrom(address, address, uint) external returns (bool);\n}\n\ninterface ComptrollerInterface {\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\n    function exitMarket(address cTokenAddress) external returns (uint);\n    function getAssetsIn(address account) external view returns (address[] memory);\n    function getAccountLiquidity(address account) external view returns (uint, uint, uint);\n}\n\ncontract Helpers is DSMath {\n\n    address public comptroller;\n\n    \n    function getComptrollerAddress() public view returns (address) {\n        \n        \n        \n        return comptroller;\n    }\n\n    function enterMarket(address cErc20) internal {\n        ComptrollerInterface troller = ComptrollerInterface(getComptrollerAddress());\n        address[] memory markets = troller.getAssetsIn(address(this));\n        bool isEntered = false;\n        for (uint i = 0; i < markets.length; i++) {\n            if (markets[i] == cErc20) {\n                isEntered = true;\n            }\n        }\n        if (!isEntered) {\n            address[] memory toEnter = new address[](1);\n            toEnter[0] = cErc20;\n            troller.enterMarkets(toEnter);\n        }\n    }\n\n    \n    function setApproval(address erc20, uint srcAmt, address to) internal {\n        ERC20Interface erc20Contract = ERC20Interface(erc20);\n        uint tokenAllowance = erc20Contract.allowance(address(this), to);\n        if (srcAmt > tokenAllowance) {\n            erc20Contract.approve(to, 2**255);\n        }\n    }\n\n}\n\ncontract ALCompound is Helpers {\n    \n    function mintCToken(address erc20, address cErc20, uint tokenAmt) internal {\n        enterMarket(cErc20);\n        ERC20Interface token = ERC20Interface(erc20);\n        uint toDeposit = token.balanceOf(address(this));\n        if (toDeposit > tokenAmt) {\n            toDeposit = tokenAmt;\n        }\n        CERC20Interface cToken = CERC20Interface(cErc20);\n        setApproval(erc20, toDeposit, cErc20);\n        assert(cToken.mint(toDeposit) == 0);\n    }\n\n    \n    function redeemUnderlying(address cErc20, uint tokenAmt) internal {\n        CTokenInterface cToken = CTokenInterface(cErc20);\n        setApproval(cErc20, 10**50, cErc20);\n        uint toBurn = cToken.balanceOf(address(this));\n        uint tokenToReturn = wmul(toBurn, cToken.exchangeRateCurrent());\n        if (tokenToReturn > tokenAmt) {\n            tokenToReturn = tokenAmt;\n        }\n        require(cToken.redeemUnderlying(tokenToReturn) == 0, \"something went wrong\");\n    }\n\n    \n    function redeemCToken(address cErc20, uint cTokenAmt) internal {\n        CTokenInterface cToken = CTokenInterface(cErc20);\n        uint toBurn = cToken.balanceOf(address(this));\n        if (toBurn > cTokenAmt) {\n            toBurn = cTokenAmt;\n        }\n        setApproval(cErc20, toBurn, cErc20);\n        require(cToken.redeem(toBurn) == 0, \"something went wrong\");\n    }\n}\n\ncontract Funds is DSMath, ALCompound {\n    Loans loans;\n\n    uint256 public constant DEFAULT_LIQUIDATION_RATIO = 1400000000000000000000000000;   \n    uint256 public constant DEFAULT_LIQUIDATION_PENALTY = 1000000000937303470807876289; \n    uint256 public constant DEFAULT_MIN_LOAN_AMT = 10 ether; \n    uint256 public constant DEFAULT_MAX_LOAN_AMT = 2**256-1; \n    uint256 public constant DEFAULT_MIN_LOAN_DUR = 6 hours;  \n    uint256 public constant NUM_SECONDS_IN_YEAR = 365 days;\n\n    mapping (address => bytes32[]) public secretHashes;    \n    mapping (address => uint256)   public secretHashIndex; \n\n    mapping (address => bytes)     public pubKeys;  \n    \n    mapping (bytes32 => Fund)      public funds;\n    mapping (address => bytes32)   public fundOwner;\n    mapping (bytes32 => Bools)     public bools;\n    uint256                        public fundIndex;\n\n    uint256 public lastGlobalInterestUpdated;\n    uint256 public tokenMarketLiquidity;\n    uint256 public cTokenMarketLiquidity;\n    uint256 public marketLiquidity;\n    uint256 public totalBorrow;\n    uint256 public globalInterestRateNumerator;\n    uint256 public lastUtilizationRatio;\n    uint256 public globalInterestRate;\n    uint256 public maxUtilizationDelta;\n    uint256 public utilizationInterestDivisor;\n    uint256 public maxInterestRateNumerator;\n    uint256 public minInterestRateNumerator;\n    uint256 public interestUpdateDelay;\n    uint256 public defaultArbiterFee;\n\n    ERC20 public token;\n    uint256 public decimals;\n    CTokenInterface public cToken;\n    bool compoundSet;\n\n    address deployer;\n\n    \n    struct Fund {\n        address  lender;\n        uint256  minLoanAmt;\n        uint256  maxLoanAmt;\n        uint256  minLoanDur;\n        uint256  maxLoanDur;\n        uint256  fundExpiry;\n        uint256  interest;\n        uint256  penalty;\n        uint256  fee;\n        uint256  liquidationRatio;\n        address  arbiter;\n        uint256  balance;\n        uint256  cBalance;\n    }\n\n    struct Bools {\n        bool     custom;\n        bool     compoundEnabled;\n    }\n\n    event Create(bytes32 fund);\n\n    constructor(\n        ERC20   token_,\n        uint256 decimals_\n    ) public {\n        deployer = msg.sender;\n        token = token_;\n        decimals = decimals_;\n        utilizationInterestDivisor = 10531702972595856680093239305; \n        maxUtilizationDelta = 95310179948351216961192521; \n        globalInterestRateNumerator =  95310179948351216961192521; \n        maxInterestRateNumerator    = 182321557320989604265864303; \n        minInterestRateNumerator    =  24692612600038629323181834; \n        interestUpdateDelay = 86400; \n        defaultArbiterFee = 1000000000236936036262880196; \n        globalInterestRate = add(RAY, div(globalInterestRateNumerator, NUM_SECONDS_IN_YEAR)); \n\n        \n        \n        \n        \n    }\n\n    \n    function setLoans(Loans loans_) public {\n        require(msg.sender == deployer);\n        require(address(loans) == address(0));\n        loans = loans_;\n        require(token.approve(address(loans_), 2**256-1));\n    }\n\n    \n    function setCompound(CTokenInterface cToken_, address comptroller_) public {\n        require(msg.sender == deployer);\n        require(!compoundSet);\n        cToken = cToken_;\n        comptroller = comptroller_;\n        compoundSet = true;\n    }\n\n    \n    \n    \n    \n    \n    \n    \n\n    \n    function setUtilizationInterestDivisor(uint256 utilizationInterestDivisor_) external {\n        require(msg.sender == deployer);\n        utilizationInterestDivisor = utilizationInterestDivisor_;\n    }\n\n    \n    function setMaxUtilizationDelta(uint256 maxUtilizationDelta_) external {\n        require(msg.sender == deployer);\n        maxUtilizationDelta = maxUtilizationDelta_;\n    }\n\n    \n    function setGlobalInterestRateNumerator(uint256 globalInterestRateNumerator_) external {\n        require(msg.sender == deployer);\n        globalInterestRateNumerator = globalInterestRateNumerator_;\n    }\n\n    \n    function setGlobalInterestRate(uint256 globalInterestRate_) external {\n        require(msg.sender == deployer);\n        globalInterestRate = globalInterestRate_;\n    }\n\n    \n    function setMaxInterestRateNumerator(uint256 maxInterestRateNumerator_) external {\n        require(msg.sender == deployer);\n        maxInterestRateNumerator = maxInterestRateNumerator_;\n    }\n\n    \n    function setMinInterestRateNumerator(uint256 minInterestRateNumerator_) external {\n        require(msg.sender == deployer);\n        minInterestRateNumerator = minInterestRateNumerator_;\n    }\n\n    \n    function setInterestUpdateDelay(uint256 interestUpdateDelay_) external {\n        require(msg.sender == deployer);\n        interestUpdateDelay = interestUpdateDelay_;\n    }\n\n    \n    function setDefaultArbiterFee(uint256 defaultArbiterFee_) external {\n        require(msg.sender == deployer);\n        require(defaultArbiterFee_ <= 1000000000315522921573372069); \n        defaultArbiterFee = defaultArbiterFee_;\n    }\n    \n\n    \n    function lender(bytes32 fund) public view returns (address) {\n        return funds[fund].lender;\n    }\n\n    \n    function minLoanAmt(bytes32 fund) public view returns (uint256) {\n        if (bools[fund].custom) { return funds[fund].minLoanAmt; }\n        else                    { return div(DEFAULT_MIN_LOAN_AMT, (10 ** sub(18, decimals))); }\n    }\n\n    \n    function maxLoanAmt(bytes32 fund) public view returns (uint256) {\n        if (bools[fund].custom) { return funds[fund].maxLoanAmt; }\n        else                    { return DEFAULT_MAX_LOAN_AMT; }\n    }\n\n    \n    function minLoanDur(bytes32 fund) public view returns (uint256) {\n        if (bools[fund].custom) { return funds[fund].minLoanDur; }\n        else                    { return DEFAULT_MIN_LOAN_DUR; }\n    }\n\n    \n    function maxLoanDur(bytes32 fund) public view returns (uint256) {\n        return funds[fund].maxLoanDur;\n    }\n\n    \n    function fundExpiry(bytes32 fund) public view returns (uint256) {\n        return funds[fund].fundExpiry;\n    }\n\n    \n    function interest(bytes32 fund) public view returns (uint256) {\n        if (bools[fund].custom) { return funds[fund].interest; }\n        else                    { return globalInterestRate; }\n    }\n\n    \n    function penalty(bytes32 fund) public view returns (uint256) {\n        if (bools[fund].custom) { return funds[fund].penalty; }\n        else                    { return DEFAULT_LIQUIDATION_PENALTY; }\n    }\n\n    \n    function fee(bytes32 fund) public view returns (uint256) {\n        if (bools[fund].custom) { return funds[fund].fee; }\n        else                    { return defaultArbiterFee; }\n    }\n\n    \n    function liquidationRatio(bytes32 fund) public view returns (uint256) {\n        if (bools[fund].custom) { return funds[fund].liquidationRatio; }\n        else                    { return DEFAULT_LIQUIDATION_RATIO; }\n    }\n\n    \n    function arbiter(bytes32 fund)   public view returns (address) {\n        return funds[fund].arbiter;\n    }\n\n    \n    function balance(bytes32 fund) public returns (uint256) {\n        if (bools[fund].compoundEnabled) {\n            return wmul(funds[fund].cBalance, cToken.exchangeRateCurrent());\n        } else {\n            return funds[fund].balance;\n        }\n    }\n\n    \n    function custom(bytes32 fund) public view returns (bool) {\n        return bools[fund].custom;\n    }\n\n    \n    function secretHashesCount(address addr_) external view returns (uint256) {\n        return secretHashes[addr_].length;\n    }\n\n    \n    function create(\n        uint256  maxLoanDur_,\n        uint256  fundExpiry_,\n        address  arbiter_,\n        bool     compoundEnabled_,\n        uint256  amount_\n    ) external returns (bytes32 fund) { \n        require(funds[fundOwner[msg.sender]].lender != msg.sender || msg.sender == deployer); \n        require(ensureNotZero(maxLoanDur_) != 2**256-1 || ensureNotZero(fundExpiry_) != 2**256-1); \n        if (!compoundSet) { require(compoundEnabled_ == false); }\n        fundIndex = add(fundIndex, 1);\n        fund = bytes32(fundIndex);\n        funds[fund].lender           = msg.sender;\n        funds[fund].maxLoanDur       = ensureNotZero(maxLoanDur_);\n        funds[fund].fundExpiry       = ensureNotZero(fundExpiry_);\n        funds[fund].arbiter          = arbiter_;\n        bools[fund].custom           = false;\n        bools[fund].compoundEnabled  = compoundEnabled_;\n        fundOwner[msg.sender]        = bytes32(fundIndex);\n        if (amount_ > 0) { deposit(fund, amount_); }\n\n        emit Create(fund);\n    }\n\n    \n    function createCustom(\n        uint256  minLoanAmt_,\n        uint256  maxLoanAmt_,\n        uint256  minLoanDur_,\n        uint256  maxLoanDur_,\n        uint256  fundExpiry_,\n        uint256  liquidationRatio_,\n        uint256  interest_,\n        uint256  penalty_,\n        uint256  fee_,\n        address  arbiter_,\n        bool     compoundEnabled_,\n        uint256  amount_\n    ) external returns (bytes32 fund) {\n        require(funds[fundOwner[msg.sender]].lender != msg.sender || msg.sender == deployer); \n        require(ensureNotZero(maxLoanDur_) != 2**256-1 || ensureNotZero(fundExpiry_) != 2**256-1); \n        if (!compoundSet) { require(compoundEnabled_ == false); }\n        fundIndex = add(fundIndex, 1);\n        fund = bytes32(fundIndex);\n        funds[fund].lender           = msg.sender;\n        funds[fund].minLoanAmt       = minLoanAmt_;\n        funds[fund].maxLoanAmt       = maxLoanAmt_;\n        funds[fund].minLoanDur       = minLoanDur_;\n        funds[fund].maxLoanDur       = ensureNotZero(maxLoanDur_);\n        funds[fund].fundExpiry       = ensureNotZero(fundExpiry_);\n        funds[fund].interest         = interest_;\n        funds[fund].penalty          = penalty_;\n        funds[fund].fee              = fee_;\n        funds[fund].liquidationRatio = liquidationRatio_;\n        funds[fund].arbiter          = arbiter_;\n        bools[fund].custom           = true;\n        bools[fund].compoundEnabled  = compoundEnabled_;\n        fundOwner[msg.sender]        = bytes32(fundIndex);\n        if (amount_ > 0) { deposit(fund, amount_); }\n\n        emit Create(fund);\n    }\n\n    \n    function deposit(bytes32 fund, uint256 amount) public {\n        require(token.transferFrom(msg.sender, address(this), amount));\n        if (bools[fund].compoundEnabled) {\n            mintCToken(address(token), address(cToken), amount);\n            uint256 cTokenToAdd = div(mul(amount, WAD), cToken.exchangeRateCurrent());\n            funds[fund].cBalance = add(funds[fund].cBalance, cTokenToAdd);\n            if (!custom(fund)) { cTokenMarketLiquidity = add(cTokenMarketLiquidity, cTokenToAdd); }\n        } else {\n            funds[fund].balance = add(funds[fund].balance, amount);\n            if (!custom(fund)) { tokenMarketLiquidity = add(tokenMarketLiquidity, amount); }\n        }\n        if (!custom(fund)) { calcGlobalInterest(); }\n    }\n\n    \n    function update(\n        bytes32  fund,\n        uint256  maxLoanDur_,\n        uint256  fundExpiry_,\n        address  arbiter_\n    ) public {\n        require(msg.sender == lender(fund));\n        require(ensureNotZero(maxLoanDur_) != 2**256-1 || ensureNotZero(fundExpiry_) != 2**256-1); \n        funds[fund].maxLoanDur       = maxLoanDur_;\n        funds[fund].fundExpiry       = fundExpiry_;\n        funds[fund].arbiter          = arbiter_;\n    }\n\n    \n    function updateCustom(\n        bytes32  fund,\n        uint256  minLoanAmt_,\n        uint256  maxLoanAmt_,\n        uint256  minLoanDur_,\n        uint256  maxLoanDur_,\n        uint256  fundExpiry_,\n        uint256  interest_,\n        uint256  penalty_,\n        uint256  fee_,\n        uint256  liquidationRatio_,\n        address  arbiter_\n    ) external {\n        require(bools[fund].custom);\n        update(fund, maxLoanDur_, fundExpiry_, arbiter_);\n        funds[fund].minLoanAmt       = minLoanAmt_;\n        funds[fund].maxLoanAmt       = maxLoanAmt_;\n        funds[fund].minLoanDur       = minLoanDur_;\n        funds[fund].interest         = interest_;\n        funds[fund].penalty          = penalty_;\n        funds[fund].fee              = fee_;\n        funds[fund].liquidationRatio = liquidationRatio_;\n    }\n\n    \n    function request(\n        bytes32             fund,\n        address             borrower_,\n        uint256             amount_,\n        uint256             collateral_,\n        uint256             loanDur_,\n        uint256             requestTimestamp_,\n        bytes32[8] calldata secretHashes_,\n        bytes      calldata pubKeyA_,\n        bytes      calldata pubKeyB_\n    ) external returns (bytes32 loanIndex) {\n        require(msg.sender == lender(fund));\n        require(amount_    <= balance(fund));\n        require(amount_    >= minLoanAmt(fund));\n        require(amount_    <= maxLoanAmt(fund));\n        require(loanDur_   >= minLoanDur(fund));\n        require(loanDur_   <= sub(fundExpiry(fund), now) && loanDur_ <= maxLoanDur(fund));\n\n        loanIndex = createLoan(fund, borrower_, amount_, collateral_, loanDur_, requestTimestamp_);\n        loanSetSecretHashes(fund, loanIndex, secretHashes_, pubKeyA_, pubKeyB_);\n        loanUpdateMarketLiquidity(fund, amount_);\n        loans.fund(loanIndex);\n    }\n\n    \n    function withdraw(bytes32 fund, uint256 amount) external {\n        withdrawTo(fund, amount, msg.sender);\n    }\n\n    \n    function withdrawTo(bytes32 fund, uint256 amount, address recipient) public {\n        require(msg.sender     == lender(fund));\n        require(balance(fund)  >= amount);\n        if (bools[fund].compoundEnabled) {\n            uint256 cBalanceBefore = cToken.balanceOf(address(this));\n            redeemUnderlying(address(cToken), amount);\n            uint256 cBalanceAfter = cToken.balanceOf(address(this));\n            uint256 cTokenToRemove = sub(cBalanceBefore, cBalanceAfter);\n            funds[fund].cBalance = sub(funds[fund].cBalance, cTokenToRemove);\n            require(token.transfer(recipient, amount));\n            if (!custom(fund)) { cTokenMarketLiquidity = sub(cTokenMarketLiquidity, cTokenToRemove); }\n        } else {\n            funds[fund].balance = sub(funds[fund].balance, amount);\n            require(token.transfer(recipient, amount));\n            if (!custom(fund)) { tokenMarketLiquidity = sub(tokenMarketLiquidity, amount); }\n        }\n        if (!custom(fund)) { calcGlobalInterest(); }\n    }\n\n    \n    function generate(bytes32[] calldata secretHashes_) external {\n        for (uint i = 0; i < secretHashes_.length; i++) {\n            secretHashes[msg.sender].push(secretHashes_[i]);\n        }\n    }\n\n    \n    function setPubKey(bytes calldata pubKey) external { \n        pubKeys[msg.sender] = pubKey;\n    }\n\n    \n    function enableCompound(bytes32 fund) external {\n        require(compoundSet);\n        require(bools[fund].compoundEnabled == false);\n        require(msg.sender == lender(fund));\n        uint256 cBalanceBefore = cToken.balanceOf(address(this));\n        mintCToken(address(token), address(cToken), funds[fund].balance);\n        uint256 cBalanceAfter = cToken.balanceOf(address(this));\n        uint256 cTokenToReturn = sub(cBalanceAfter, cBalanceBefore);\n        tokenMarketLiquidity = sub(tokenMarketLiquidity, funds[fund].balance);\n        cTokenMarketLiquidity = add(cTokenMarketLiquidity, cTokenToReturn);\n        bools[fund].compoundEnabled = true;\n        funds[fund].balance = 0;\n        funds[fund].cBalance = cTokenToReturn;\n    }\n\n    \n    function disableCompound(bytes32 fund) external {\n        require(bools[fund].compoundEnabled);\n        require(msg.sender == lender(fund));\n        uint256 balanceBefore = token.balanceOf(address(this));\n        redeemCToken(address(cToken), funds[fund].cBalance);\n        uint256 balanceAfter = token.balanceOf(address(this));\n        uint256 tokenToReturn = sub(balanceAfter, balanceBefore);\n        tokenMarketLiquidity = add(tokenMarketLiquidity, tokenToReturn);\n        cTokenMarketLiquidity = sub(cTokenMarketLiquidity, funds[fund].cBalance);\n        bools[fund].compoundEnabled = false;\n        funds[fund].cBalance = 0;\n        funds[fund].balance = tokenToReturn;\n    }\n\n    \n    function decreaseTotalBorrow(uint256 amount) external {\n        require(msg.sender == address(loans));\n        totalBorrow = sub(totalBorrow, amount);\n    }\n\n    \n    function calcGlobalInterest() public {\n        marketLiquidity = add(tokenMarketLiquidity, wmul(cTokenMarketLiquidity, cToken.exchangeRateCurrent()));\n\n        if (now > (lastGlobalInterestUpdated + interestUpdateDelay)) {\n            uint256 utilizationRatio;\n            if (totalBorrow != 0) { utilizationRatio = rdiv(totalBorrow, add(marketLiquidity, totalBorrow)); }\n\n            if (utilizationRatio > lastUtilizationRatio) {\n                uint256 changeUtilizationRatio = sub(utilizationRatio, lastUtilizationRatio);\n                globalInterestRateNumerator = min(maxInterestRateNumerator, add(globalInterestRateNumerator, rdiv(min(maxUtilizationDelta, changeUtilizationRatio), utilizationInterestDivisor)));\n            } else {\n                uint256 changeUtilizationRatio = sub(lastUtilizationRatio, utilizationRatio);\n                globalInterestRateNumerator = max(minInterestRateNumerator, sub(globalInterestRateNumerator, rdiv(min(maxUtilizationDelta, changeUtilizationRatio), utilizationInterestDivisor)));\n            }\n\n            globalInterestRate = add(RAY, div(globalInterestRateNumerator, NUM_SECONDS_IN_YEAR));\n\n            lastGlobalInterestUpdated = now;\n            lastUtilizationRatio = utilizationRatio;\n        }\n    }\n\n    \n    function calcInterest(uint256 amount, uint256 rate, uint256 loanDur) public pure returns (uint256) {\n        return sub(rmul(amount, rpow(rate, loanDur)), amount);\n    }\n\n    \n    function ensureNotZero(uint256 value) public pure returns (uint256) {\n        if (value == 0) { return 2**256-1; }\n        else            { return value; }\n    }\n\n    \n    function createLoan(\n        bytes32  fund,\n        address  borrower_,\n        uint256  amount_,\n        uint256  collateral_,\n        uint256  loanDur_,\n        uint256  requestTimestamp_\n    ) private returns (bytes32 loanIndex) {\n        loanIndex = loans.create(\n            now + loanDur_,\n            [ borrower_, lender(fund), funds[fund].arbiter],\n            [ amount_, calcInterest(amount_, interest(fund), loanDur_), calcInterest(amount_, penalty(fund), loanDur_), calcInterest(amount_, fee(fund), loanDur_), collateral_, liquidationRatio(fund), requestTimestamp_],\n            fund\n        );\n    }\n\n    \n    function loanSetSecretHashes(\n        bytes32           fund,\n        bytes32           loan,\n        bytes32[8] memory secretHashes_,\n        bytes      memory pubKeyA_,\n        bytes      memory pubKeyB_\n    ) private {\n        loans.setSecretHashes(\n            loan,\n            [ secretHashes_[0], secretHashes_[1], secretHashes_[2], secretHashes_[3] ],\n            [ secretHashes_[4], secretHashes_[5], secretHashes_[6], secretHashes_[7] ],\n            getSecretHashesForLoan(arbiter(fund)),\n            pubKeyA_,\n            pubKeyB_,\n            pubKeys[arbiter(fund)]\n        );\n    }\n\n    \n    function loanUpdateMarketLiquidity(bytes32 fund, uint256 amount) private {\n        if (bools[fund].compoundEnabled) {\n            uint256 cBalanceBefore = cToken.balanceOf(address(this));\n            redeemUnderlying(address(cToken), amount);\n            uint256 cBalanceAfter = cToken.balanceOf(address(this));\n            uint256 cTokenToRemove = sub(cBalanceBefore, cBalanceAfter);\n            funds[fund].cBalance = sub(funds[fund].cBalance, cTokenToRemove);\n            if (!custom(fund)) { cTokenMarketLiquidity = sub(cTokenMarketLiquidity, cTokenToRemove); }\n        } else {\n            funds[fund].balance = sub(funds[fund].balance, amount);\n            if (!custom(fund)) { tokenMarketLiquidity = sub(tokenMarketLiquidity, amount); }\n        }\n        if (!custom(fund)) {\n            totalBorrow = add(totalBorrow, amount);\n            calcGlobalInterest();\n        }\n    }\n\n    \n    function getSecretHashesForLoan(address addr) private returns (bytes32[4] memory) {\n        secretHashIndex[addr] = add(secretHashIndex[addr], 4);\n        return [\n            secretHashes[addr][sub(secretHashIndex[addr], 4)],\n            secretHashes[addr][sub(secretHashIndex[addr], 3)],\n            secretHashes[addr][sub(secretHashIndex[addr], 2)],\n            secretHashes[addr][sub(secretHashIndex[addr], 1)]\n        ];\n    }\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"secretHashIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxUtilizationDelta\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"fund\",\"type\":\"bytes32\"}],\"name\":\"minLoanAmt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fund\",\"type\":\"bytes32\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultArbiterFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ensureNotZero\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cTokenMarketLiquidity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFAULT_LIQUIDATION_RATIO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"defaultArbiterFee_\",\"type\":\"uint256\"}],\"name\":\"setDefaultArbiterFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globalInterestRateNumerator\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"globalInterestRateNumerator_\",\"type\":\"uint256\"}],\"name\":\"setGlobalInterestRateNumerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fund\",\"type\":\"bytes32\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"fund\",\"type\":\"bytes32\"}],\"name\":\"penalty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"fund\",\"type\":\"bytes32\"}],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastGlobalInterestUpdated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"calcGlobalInterest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"fund\",\"type\":\"bytes32\"}],\"name\":\"maxLoanAmt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"fund\",\"type\":\"bytes32\"}],\"name\":\"arbiter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFAULT_MIN_LOAN_AMT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fund\",\"type\":\"bytes32\"},{\"name\":\"maxLoanDur_\",\"type\":\"uint256\"},{\"name\":\"fundExpiry_\",\"type\":\"uint256\"},{\"name\":\"arbiter_\",\"type\":\"address\"}],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getComptrollerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"utilizationInterestDivisor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fund\",\"type\":\"bytes32\"},{\"name\":\"minLoanAmt_\",\"type\":\"uint256\"},{\"name\":\"maxLoanAmt_\",\"type\":\"uint256\"},{\"name\":\"minLoanDur_\",\"type\":\"uint256\"},{\"name\":\"maxLoanDur_\",\"type\":\"uint256\"},{\"name\":\"fundExpiry_\",\"type\":\"uint256\"},{\"name\":\"interest_\",\"type\":\"uint256\"},{\"name\":\"penalty_\",\"type\":\"uint256\"},{\"name\":\"fee_\",\"type\":\"uint256\"},{\"name\":\"liquidationRatio_\",\"type\":\"uint256\"},{\"name\":\"arbiter_\",\"type\":\"address\"}],\"name\":\"updateCustom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"interestUpdateDelay_\",\"type\":\"uint256\"}],\"name\":\"setInterestUpdateDelay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"secretHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globalInterestRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketLiquidity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minInterestRateNumerator\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"funds\",\"outputs\":[{\"name\":\"lender\",\"type\":\"address\"},{\"name\":\"minLoanAmt\",\"type\":\"uint256\"},{\"name\":\"maxLoanAmt\",\"type\":\"uint256\"},{\"name\":\"minLoanDur\",\"type\":\"uint256\"},{\"name\":\"maxLoanDur\",\"type\":\"uint256\"},{\"name\":\"fundExpiry\",\"type\":\"uint256\"},{\"name\":\"interest\",\"type\":\"uint256\"},{\"name\":\"penalty\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"liquidationRatio\",\"type\":\"uint256\"},{\"name\":\"arbiter\",\"type\":\"address\"},{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"cBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"maxLoanDur_\",\"type\":\"uint256\"},{\"name\":\"fundExpiry_\",\"type\":\"uint256\"},{\"name\":\"arbiter_\",\"type\":\"address\"},{\"name\":\"compoundEnabled_\",\"type\":\"bool\"},{\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[{\"name\":\"fund\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"bools\",\"outputs\":[{\"name\":\"custom\",\"type\":\"bool\"},{\"name\":\"compoundEnabled\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"fund\",\"type\":\"bytes32\"}],\"name\":\"maxLoanDur\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"fund\",\"type\":\"bytes32\"}],\"name\":\"liquidationRatio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fund\",\"type\":\"bytes32\"}],\"name\":\"disableCompound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBorrow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fund\",\"type\":\"bytes32\"}],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"globalInterestRate_\",\"type\":\"uint256\"}],\"name\":\"setGlobalInterestRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"rate\",\"type\":\"uint256\"},{\"name\":\"loanDur\",\"type\":\"uint256\"}],\"name\":\"calcInterest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"loans_\",\"type\":\"address\"}],\"name\":\"setLoans\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"fund\",\"type\":\"bytes32\"}],\"name\":\"lender\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"fund\",\"type\":\"bytes32\"}],\"name\":\"custom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"maxUtilizationDelta_\",\"type\":\"uint256\"}],\"name\":\"setMaxUtilizationDelta\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fund\",\"type\":\"bytes32\"}],\"name\":\"enableCompound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"fund\",\"type\":\"bytes32\"}],\"name\":\"minLoanDur\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFAULT_MIN_LOAN_DUR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"fund\",\"type\":\"bytes32\"}],\"name\":\"fundExpiry\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"utilizationInterestDivisor_\",\"type\":\"uint256\"}],\"name\":\"setUtilizationInterestDivisor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFAULT_LIQUIDATION_PENALTY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFAULT_MAX_LOAN_AMT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pubKeys\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr_\",\"type\":\"address\"}],\"name\":\"secretHashesCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minInterestRateNumerator_\",\"type\":\"uint256\"}],\"name\":\"setMinInterestRateNumerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"secretHashes_\",\"type\":\"bytes32[]\"}],\"name\":\"generate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cToken_\",\"type\":\"address\"},{\"name\":\"comptroller_\",\"type\":\"address\"}],\"name\":\"setCompound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NUM_SECONDS_IN_YEAR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"interestUpdateDelay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fund\",\"type\":\"bytes32\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pubKey\",\"type\":\"bytes\"}],\"name\":\"setPubKey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreaseTotalBorrow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"fund\",\"type\":\"bytes32\"}],\"name\":\"interest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxInterestRateNumerator\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUtilizationRatio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fund\",\"type\":\"bytes32\"},{\"name\":\"borrower_\",\"type\":\"address\"},{\"name\":\"amount_\",\"type\":\"uint256\"},{\"name\":\"collateral_\",\"type\":\"uint256\"},{\"name\":\"loanDur_\",\"type\":\"uint256\"},{\"name\":\"requestTimestamp_\",\"type\":\"uint256\"},{\"name\":\"secretHashes_\",\"type\":\"bytes32[8]\"},{\"name\":\"pubKeyA_\",\"type\":\"bytes\"},{\"name\":\"pubKeyB_\",\"type\":\"bytes\"}],\"name\":\"request\",\"outputs\":[{\"name\":\"loanIndex\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minLoanAmt_\",\"type\":\"uint256\"},{\"name\":\"maxLoanAmt_\",\"type\":\"uint256\"},{\"name\":\"minLoanDur_\",\"type\":\"uint256\"},{\"name\":\"maxLoanDur_\",\"type\":\"uint256\"},{\"name\":\"fundExpiry_\",\"type\":\"uint256\"},{\"name\":\"liquidationRatio_\",\"type\":\"uint256\"},{\"name\":\"interest_\",\"type\":\"uint256\"},{\"name\":\"penalty_\",\"type\":\"uint256\"},{\"name\":\"fee_\",\"type\":\"uint256\"},{\"name\":\"arbiter_\",\"type\":\"address\"},{\"name\":\"compoundEnabled_\",\"type\":\"bool\"},{\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"createCustom\",\"outputs\":[{\"name\":\"fund\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"cmul\",\"outputs\":[{\"name\":\"z\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"maxInterestRateNumerator_\",\"type\":\"uint256\"}],\"name\":\"setMaxInterestRateNumerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenMarketLiquidity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"token_\",\"type\":\"address\"},{\"name\":\"decimals_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"fund\",\"type\":\"bytes32\"}],\"name\":\"Create\",\"type\":\"event\"}]","ContractName":"Funds","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000089d24a6b4ccb1b6faa2625fe562bdd9a232603590000000000000000000000000000000000000000000000000000000000000012","Library":"","LicenseType":"","SwarmSource":"bzzr://515f15079de49b3b09ca127653f39b513701797f398964e4c990bcb92a86fe00"}]}