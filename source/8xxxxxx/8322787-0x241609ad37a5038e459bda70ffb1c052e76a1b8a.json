{"status":"1","message":"OK","result":[{"SourceCode":"{\"ERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the `IERC20` interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using `_mint`.\\n * For a generic mechanism see `ERC20Mintable`.\\n *\\n * *For a detailed writeup see our guide [How to implement supply\\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn\\u0027t required by the specification.\\n *\\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See `IERC20.approve`.\\n */\\ncontract ERC20 is IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address =\\u003e uint256) private _balances;\\n\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    /**\\n     * @dev See `IERC20.totalSupply`.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See `IERC20.balanceOf`.\\n     */\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See `IERC20.transfer`.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See `IERC20.allowance`.\\n     */\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See `IERC20.approve`.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See `IERC20.transferFrom`.\\n     *\\n     * Emits an `Approval` event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of `ERC20`;\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `value`.\\n     * - the caller must have allowance for `sender`\\u0027s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to `approve` that can be used as a mitigation for\\n     * problems described in `IERC20.approve`.\\n     *\\n     * Emits an `Approval` event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to `approve` that can be used as a mitigation for\\n     * problems described in `IERC20.approve`.\\n     *\\n     * Emits an `Approval` event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to `transfer`, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a `Transfer` event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _balances[sender] = _balances[sender].sub(amount);\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a `Transfer` event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n     /**\\n     * @dev Destoys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a `Transfer` event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _totalSupply = _totalSupply.sub(value);\\n        _balances[account] = _balances[account].sub(value);\\n        emit Transfer(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an `Approval` event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\\n     * from the caller\\u0027s allowance.\\n     *\\n     * See `_burn` and `_approve`.\\n     */\\n    function _burnFrom(address account, uint256 amount) internal {\\n        _burn(account, amount);\\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\\n    }\\n}\\n\"},\"EtheleGenerator.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\nimport \\\"./EtheleToken.sol\\\";\\r\\n\\r\\n/**\\r\\n * Generator of all 7 Etherem Elements (Ethele) ERC20 Token Contracts.\\r\\n * There are 5 Ethele Elements Tokens: Fire, Earth, Metal, Water, Wood.\\r\\n * There are 2 Ethele YinYang Tokens: Yin, Yang.\\r\\n */\\r\\ncontract EtheleGenerator {\\r\\n    address private _fire;\\r\\n    address private _earth;\\r\\n    address private _metal;\\r\\n    address private _water;\\r\\n    address private _wood;\\r\\n    address private _yin;\\r\\n    address private _yang;\\r\\n\\r\\n    uint256 private _step; // The deploy process has to be completed in steps, because the gas needed is too large.\\r\\n\\r\\n    uint256 private constant LAUNCH_TIME = 1565438400; // Ethele Token address will only be able to be created after mainnet launch.\\r\\n\\r\\n    // Set step to 0. Step function can be called after launch time for creation of all 7 Ethele Tokens\\r\\n    // and assignment of Ethele token transmuteSources and allowBurnsFrom for interaction between the contracts.\\r\\n    constructor() public {\\r\\n        _step = 0;\\r\\n    }\\r\\n\\r\\n    function getLaunchTime() public pure returns (uint256) {\\r\\n        return LAUNCH_TIME;\\r\\n    }\\r\\n\\r\\n    function step() public {\\r\\n        require(_step \\u003c= 3 \\u0026\\u0026 LAUNCH_TIME \\u003c block.timestamp);\\r\\n\\r\\n        if (_step == 0) {\\r\\n            _fire = address(new EtheleToken(\\\"Ethele Fire\\\", \\\"EEFI\\\"));\\r\\n            _earth = address(new EtheleToken(\\\"Ethele Earth\\\", \\\"EEEA\\\"));\\r\\n        } else if (_step == 1) {\\r\\n            _metal = address(new EtheleToken(\\\"Ethele Metal\\\", \\\"EEME\\\"));\\r\\n            _water = address(new EtheleToken(\\\"Ethele Water\\\", \\\"EEWA\\\"));\\r\\n        } else if (_step == 2) {\\r\\n            _wood = address(new EtheleToken(\\\"Ethele Wood\\\", \\\"EEWO\\\"));\\r\\n            _yin = address(new EtheleToken(\\\"Ethele Yin\\\", \\\"EEYI\\\"));\\r\\n        } else if (_step == 3) {\\r\\n            _yang = address(new EtheleToken(\\\"Ethele Yang\\\", \\\"EEYA\\\"));\\r\\n            // Each of the 5 elements has 2 elements which create it. \\r\\n            EtheleToken(_fire).setTransmuteSources12(_metal, _wood);\\r\\n            EtheleToken(_earth).setTransmuteSources12(_water, _fire);\\r\\n            EtheleToken(_metal).setTransmuteSources12(_wood, _earth);\\r\\n            EtheleToken(_water).setTransmuteSources12(_fire, _metal);\\r\\n            EtheleToken(_wood).setTransmuteSources12(_earth, _water);\\r\\n            \\r\\n            // 1 Yin and 1 Yang creates 1 of any element of choice.\\r\\n            EtheleToken(_fire).setTransmuteSources34(_yin, _yang);\\r\\n            EtheleToken(_earth).setTransmuteSources34(_yin, _yang);\\r\\n            EtheleToken(_metal).setTransmuteSources34(_yin, _yang);\\r\\n            EtheleToken(_water).setTransmuteSources34(_yin, _yang);\\r\\n            EtheleToken(_wood).setTransmuteSources34(_yin, _yang);\\r\\n\\r\\n            // Allow each element to burn the components that are transmuted to it.\\r\\n            EtheleToken(_metal).allowBurnsFrom(_fire);\\r\\n            EtheleToken(_wood).allowBurnsFrom(_fire);\\r\\n            EtheleToken(_water).allowBurnsFrom(_earth);\\r\\n            EtheleToken(_fire).allowBurnsFrom(_earth);\\r\\n            EtheleToken(_wood).allowBurnsFrom(_metal);\\r\\n            EtheleToken(_earth).allowBurnsFrom(_metal);\\r\\n            EtheleToken(_fire).allowBurnsFrom(_water);\\r\\n            EtheleToken(_metal).allowBurnsFrom(_water);\\r\\n            EtheleToken(_earth).allowBurnsFrom(_wood);\\r\\n            EtheleToken(_water).allowBurnsFrom(_wood);\\r\\n\\r\\n            // All 5 elements are allowed to burn yin and yang.\\r\\n            // Because Yin + Yang can transmute to any of the 5 elements. \\r\\n            EtheleToken(_yin).allowBurnsFrom(_fire);\\r\\n            EtheleToken(_yin).allowBurnsFrom(_earth);\\r\\n            EtheleToken(_yin).allowBurnsFrom(_metal);\\r\\n            EtheleToken(_yin).allowBurnsFrom(_water);\\r\\n            EtheleToken(_yin).allowBurnsFrom(_wood);\\r\\n            EtheleToken(_yang).allowBurnsFrom(_fire);\\r\\n            EtheleToken(_yang).allowBurnsFrom(_earth);\\r\\n            EtheleToken(_yang).allowBurnsFrom(_metal);\\r\\n            EtheleToken(_yang).allowBurnsFrom(_water);\\r\\n            EtheleToken(_yang).allowBurnsFrom(_wood);\\r\\n        }\\r\\n\\r\\n        _step += 1;\\r\\n    }\\r\\n\\r\\n    function getStep() public view returns (uint256) {\\r\\n        return _step;\\r\\n    }\\r\\n    function fire() public view returns (address) {\\r\\n        return _fire;\\r\\n    }\\r\\n    function earth() public view returns (address) {\\r\\n        return _earth;\\r\\n    }\\r\\n    function metal() public view returns (address) {\\r\\n        return _metal;\\r\\n    }\\r\\n    function water() public view returns (address) {\\r\\n        return _water;\\r\\n    }\\r\\n    function wood() public view returns (address) {\\r\\n        return _wood;\\r\\n    }\\r\\n    function yin() public view returns (address) {\\r\\n        return _yin;\\r\\n    }\\r\\n    function yang() public view returns (address) {\\r\\n        return _yang;\\r\\n    }\\r\\n}\\r\\n\"},\"EtheleToken.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\nimport \\\"./ERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * Implementation for Etherem Elements (Ethele) ERC20 Token.\\r\\n * Enables the token to be lock-harvested.\\r\\n * Contains the functions for Transmutation of other Ethele tokens to this token. (Only for 5 elements, not Yin and Yang)\\r\\n */\\r\\ncontract EtheleToken is ERC20 {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n    address private _creator;\\r\\n    // Ethele token Transmute process:\\r\\n    // By burning one token each of transmuteSource1 and transmuteSource2, one token (of this contract) can be minted.\\r\\n    // By burning one token each of transmuteSource3 and transmuteSource4, one token (of this contract) can be minted.\\r\\n    // Only applies to the 5 elements, not Yin and Yang.\\r\\n    address private _transmuteSource1;\\r\\n    address private _transmuteSource2;\\r\\n    address private _transmuteSource3;\\r\\n    address private _transmuteSource4;\\r\\n    mapping (address =\\u003e bool) private _allowBurnsFrom; // Address mapped to true are allowed to burn this contract\\u0027s tokens\\r\\n\\r\\n    uint256 private _totalLocked;\\r\\n    mapping (address =\\u003e uint256) private _lockedBalance;\\r\\n    mapping (address =\\u003e uint256) private _harvestStartPeriod;\\r\\n    mapping (address =\\u003e uint256) private _unlockTime;\\r\\n\\r\\n    uint256 private constant PERIOD_LENGTH = 1 days; \\r\\n    uint256 private constant MINT_AMOUNT = 100000 ether; // \\u0027ether\\u0027 is equivalent to 10^18. This is used since this token has same number of decimals as ETH.\\r\\n    uint256 private _currentPeriod;\\r\\n    uint256 private _contractStartTime;\\r\\n    uint256[] private _cumulTokenPerEth; // Across periods, tracks cumulative harvestable amount of this token per each Eth locked.\\r\\n\\r\\n    constructor(\\r\\n        string memory name,\\r\\n        string memory symbol\\r\\n    ) public {\\r\\n         // only creator is allowed to set transmuteSources and burner addresses. \\r\\n         // The creator is the EtheleGenerator contract.\\r\\n        _creator = msg.sender;\\r\\n\\r\\n        _name = name;\\r\\n        _symbol = symbol;\\r\\n\\r\\n        _currentPeriod = 1;\\r\\n        _cumulTokenPerEth.push(0);\\r\\n        _contractStartTime = block.timestamp;\\r\\n    }\\r\\n\\r\\n\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n    function decimals() public pure returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n    function getCreator() public view returns (address) {\\r\\n    \\treturn _creator;\\r\\n    }\\r\\n\\r\\n    function getTransmuteSource1() public view returns (address) {\\r\\n\\t\\treturn _transmuteSource1;\\r\\n    }\\r\\n    function getTransmuteSource2() public view returns (address) {\\r\\n    \\treturn _transmuteSource2;\\r\\n    }\\r\\n    function getTransmuteSource3() public view returns (address) {\\r\\n    \\treturn _transmuteSource3;\\r\\n    }\\r\\n    function getTransmuteSource4() public view returns (address) {\\r\\n    \\treturn _transmuteSource4;\\r\\n    }\\r\\n    function getAllowBurnsFrom(address addr) public view returns (bool) {\\r\\n    \\treturn _allowBurnsFrom[addr];\\r\\n    }\\r\\n\\r\\n    function getTotalLocked() public view returns (uint256) {\\r\\n    \\treturn _totalLocked;\\r\\n    }\\r\\n    function getLockedBalance(address addr) public view returns (uint256) {\\r\\n    \\treturn _lockedBalance[addr];\\r\\n    }    \\r\\n    function getHarvestStartPeriod(address addr) public view returns (uint256) {\\r\\n    \\treturn _harvestStartPeriod[addr];\\r\\n    }    \\r\\n    function getUnlockTime(address addr) public view returns (uint256) {\\r\\n    \\treturn _unlockTime[addr];\\r\\n    }\\r\\n    // convenience function for checking how many tokens an address can harvest.\\r\\n    // some complexity comes from the fact that _currentPeriod may not reflect the intended current period at this point in time.\\r\\n    function getHarvestableAmount(address addr) public view returns (uint256) {\\r\\n        uint256 intendedPeriod = (block.timestamp).sub(_contractStartTime).div(PERIOD_LENGTH).add(1);\\r\\n        uint256 harvestStartPeriod = _harvestStartPeriod[addr];\\r\\n        uint256 lockedBalance = _lockedBalance[addr];\\r\\n\\r\\n        if (harvestStartPeriod \\u003e= intendedPeriod.sub(1) ||\\r\\n            lockedBalance == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        else {\\r\\n            uint256 harvestableTokenPerEth = MINT_AMOUNT.mul(1 ether).div(_totalLocked);\\r\\n            uint256 harvestableAmount;\\r\\n             // handle edge case where harvestStartPeriod == currentPeriod\\r\\n            if (harvestStartPeriod == _currentPeriod) {\\r\\n                // In this case we count the number of harvestable periods as the difference between harvestStartPeriod and (intendedPeriod-1).\\r\\n                uint256 periodDiff = intendedPeriod.sub(1).sub(harvestStartPeriod);\\r\\n                harvestableAmount = periodDiff\\r\\n                                          .mul(harvestableTokenPerEth)\\r\\n                                          .mul(lockedBalance)\\r\\n                                          .div(1 ether);\\r\\n            } else {\\r\\n                // need to take into account the additional harvested amount for period that has not yet been updated.\\r\\n                uint256 periodDiff = intendedPeriod.sub(_currentPeriod);\\r\\n                uint256 tokenPerEthInPeriodDiff = harvestableTokenPerEth.mul(periodDiff);\\r\\n\\r\\n                // compute harvestable amount\\r\\n                harvestableAmount = tokenPerEthInPeriodDiff\\r\\n                                            .add(_cumulTokenPerEth[_currentPeriod.sub(1)])\\r\\n                                            .sub(_cumulTokenPerEth[harvestStartPeriod])\\r\\n                                            .mul(lockedBalance)\\r\\n                                            .div(1 ether);\\r\\n            }\\r\\n\\r\\n            return harvestableAmount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getPeriodLength() public pure returns (uint256) {\\r\\n        return PERIOD_LENGTH; \\r\\n    }\\r\\n    function getMintAmount() public pure returns (uint256) {\\r\\n        return MINT_AMOUNT; \\r\\n    }\\r\\n    function getCurrentPeriod() public view returns (uint256) {\\r\\n        return _currentPeriod; \\r\\n    }\\r\\n    function getContractStartTime() public view returns (uint256) {\\r\\n        return _contractStartTime; \\r\\n    }\\r\\n    function getCumulTokenPerEth(uint256 period) public view returns (uint256) {\\r\\n    \\treturn _cumulTokenPerEth[period];\\r\\n    }\\r\\n\\r\\n    // any address can burn their own tokens.\\r\\n    function burn(uint256 amount) public {\\r\\n        _burn(msg.sender, amount);\\r\\n    }\\r\\n    function burnFrom(address account, uint256 amount) public {\\r\\n    \\t// special case for whitelisted burner addresses to bypass need for approval to burn.\\r\\n        // this special right is only granted to other Ethele tokens.\\r\\n    \\tif (_allowBurnsFrom[msg.sender]) {\\r\\n    \\t\\t_burn(account, amount);\\r\\n    \\t} else {\\r\\n        \\t_burnFrom(account, amount);\\r\\n    \\t}\\r\\n    }\\r\\n\\r\\n    function setTransmuteSources12(address transmuteSource1, address transmuteSource2) public {\\r\\n        require(msg.sender == _creator);\\r\\n        _transmuteSource1 = transmuteSource1;\\r\\n        _transmuteSource2 = transmuteSource2;\\r\\n    } \\r\\n\\r\\n    function setTransmuteSources34(address transmuteSource3, address transmuteSource4) public {\\r\\n        require(msg.sender == _creator);\\r\\n        _transmuteSource3 = transmuteSource3;\\r\\n        _transmuteSource4 = transmuteSource4;\\r\\n    } \\r\\n\\r\\n    function allowBurnsFrom(address burner) public {\\r\\n    \\trequire(msg.sender == _creator);\\r\\n    \\t_allowBurnsFrom[burner] = true;\\r\\n    }\\r\\n\\r\\n\\r\\n    // transmute will mint this token by consuming its transmuteSource tokens.\\r\\n    function transmute(uint256 amount, uint256 transmuteType) public {\\r\\n    \\trequire(transmuteType == 0 || transmuteType == 1, \\\"EtheleToken: Transmute type should be 0 or 1.\\\");\\r\\n    \\tif (transmuteType == 0) {\\r\\n\\t\\t\\trequire(_transmuteSource1 != address(0) \\u0026\\u0026 _transmuteSource2 != address(0), \\\"EtheleToken: Cannot transmute this.\\\");\\r\\n    \\t\\tEtheleToken(_transmuteSource1).burnFrom(msg.sender, amount);\\r\\n    \\t\\tEtheleToken(_transmuteSource2).burnFrom(msg.sender, amount);\\r\\n    \\t\\t_mint(msg.sender, amount);\\r\\n\\t\\t} else if (transmuteType == 1) {\\r\\n\\t\\t\\trequire(_transmuteSource3 != address(0) \\u0026\\u0026 _transmuteSource4 != address(0), \\\"EtheleToken: Cannot transmute this.\\\");\\r\\n    \\t\\tEtheleToken(_transmuteSource3).burnFrom(msg.sender, amount);\\r\\n    \\t\\tEtheleToken(_transmuteSource4).burnFrom(msg.sender, amount);\\r\\n    \\t\\t_mint(msg.sender, amount);\\r\\n\\t\\t}\\r\\n    }\\r\\n\\r\\n    // Updates the period of this token by \\u0027steps\\u0027 number of periods.\\r\\n    // Put steps = -1 for unlimited steps\\r\\n    function updatePeriod(int256 steps) public {\\r\\n    \\tuint256 intendedPeriod = (block.timestamp).sub(_contractStartTime).div(PERIOD_LENGTH).add(1);\\r\\n    \\tif (_currentPeriod \\u003c intendedPeriod) {\\r\\n\\t\\t\\tuint256 harvestableTokenPerEth;\\r\\n    \\t\\tif (_totalLocked == 0) {\\r\\n    \\t\\t\\tharvestableTokenPerEth = 0;\\r\\n    \\t\\t} else {\\r\\n    \\t\\t\\tharvestableTokenPerEth = MINT_AMOUNT.mul(1 ether).div(_totalLocked);\\r\\n    \\t\\t}\\r\\n\\r\\n    \\t\\t// update for all periods\\r\\n    \\t\\twhile (_currentPeriod \\u003c intendedPeriod \\u0026\\u0026 steps != 0) {\\r\\n    \\t\\t\\t_cumulTokenPerEth.push(_cumulTokenPerEth[_currentPeriod-1].add(harvestableTokenPerEth));\\r\\n    \\t\\t\\t_currentPeriod += 1;\\r\\n    \\t\\t\\tsteps -= 1;\\r\\n    \\t\\t}\\r\\n    \\t}\\r\\n    }\\r\\n\\r\\n    // Lock up ETH so that you can harvest Ethele Tokens.\\r\\n    // To lock, you must not have any ETH locked. \\r\\n    // This is because the computation for amount harvested cannot handle varying amounts \\r\\n    // of locked ETH across periods. \\r\\n    function lock() public payable {\\r\\n    \\trequire(_lockedBalance[msg.sender] == 0, \\\"EtheleToken: To lock, you must not have any existing locked ETH.\\\");\\r\\n    \\tupdatePeriod(-1);\\r\\n\\r\\n    \\t_totalLocked = _totalLocked.add(msg.value);\\r\\n    \\t_lockedBalance[msg.sender] = msg.value;\\r\\n    \\t_harvestStartPeriod[msg.sender] = _currentPeriod;\\r\\n    \\t_unlockTime[msg.sender] = block.timestamp.add(PERIOD_LENGTH);\\r\\n    }\\r\\n\\r\\n    function harvest() public {\\r\\n    \\trequire(_lockedBalance[msg.sender] \\u003e 0, \\\"EtheleToken: Require locked balance to harvest.\\\");\\r\\n    \\tupdatePeriod(-1);\\r\\n\\r\\n    \\trequire(_harvestStartPeriod[msg.sender] \\u003c _currentPeriod-1, \\\"EtheleToken: Nothing to harvest - Lock start period should be before previous currentPeriod.\\\");\\r\\n    \\tuint256 amountHarvested = _cumulTokenPerEth[_currentPeriod-1]\\r\\n    \\t\\t\\t\\t\\t\\t\\t.sub(_cumulTokenPerEth[_harvestStartPeriod[msg.sender]])\\r\\n    \\t\\t\\t\\t\\t\\t\\t.mul(_lockedBalance[msg.sender])\\r\\n    \\t\\t\\t\\t\\t\\t\\t.div(1 ether);\\r\\n    \\t_harvestStartPeriod[msg.sender] = _currentPeriod-1;\\r\\n    \\t_mint(msg.sender, amountHarvested);\\t\\r\\n    }\\r\\n\\r\\n    function unlock() public {\\r\\n    \\trequire(_lockedBalance[msg.sender] \\u003e 0, \\\"EtheleToken: Require locked balance to unlock.\\\");\\r\\n    \\tupdatePeriod(-1);\\r\\n\\r\\n    \\trequire(_unlockTime[msg.sender] \\u003c block.timestamp, \\\"EtheleToken: Minimum lock time not yet reached.\\\");\\r\\n    \\tuint256 amount = _lockedBalance[msg.sender];\\r\\n    \\t_lockedBalance[msg.sender] = 0;\\r\\n    \\t_totalLocked = _totalLocked.sub(amount);\\r\\n    \\tmsg.sender.transfer(amount);\\r\\n    }\\r\\n}\\r\\n\"},\"IERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see `ERC20Detailed`.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\n     * zero by default.\\n     *\\n     * This value changes when `approve` or `transferFrom` are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * \\u003e Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an `Approval` event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to `approve`. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003c= a, \\\"SafeMath: subtraction overflow\\\");\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b \\u003e 0, \\\"SafeMath: division by zero\\\");\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n}\\n\"}}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getAllowBurnsFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCreator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"burner\",\"type\":\"address\"}],\"name\":\"allowBurnsFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transmuteSource1\",\"type\":\"address\"},{\"name\":\"transmuteSource2\",\"type\":\"address\"}],\"name\":\"setTransmuteSources12\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"getCumulTokenPerEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"transmuteType\",\"type\":\"uint256\"}],\"name\":\"transmute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPeriodLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTransmuteSource2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTransmuteSource3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMintAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transmuteSource3\",\"type\":\"address\"},{\"name\":\"transmuteSource4\",\"type\":\"address\"}],\"name\":\"setTransmuteSources34\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTransmuteSource4\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getLockedBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getHarvestableAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getHarvestStartPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUnlockTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTransmuteSource1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"steps\",\"type\":\"int256\"}],\"name\":\"updatePeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"EtheleToken","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000b457468656c65204669726500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044545464900000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://c76f7dbee15ff54bad7d738a9e3303e3ab794b883673861e3a507f1c157cdb7b"}]}