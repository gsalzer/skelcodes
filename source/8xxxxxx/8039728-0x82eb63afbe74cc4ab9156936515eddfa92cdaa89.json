{"status":"1","message":"OK","result":[{"SourceCode":"// File: node_modules\\openzeppelin-solidity\\contracts\\ownership\\Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts\\LAND\\ILANDRegistry.sol\r\n\r\n// solium-disable linebreak-style\r\npragma solidity ^0.5.0;\r\n\r\ninterface ILANDRegistry {\r\n\r\n  // LAND can be assigned by the owner\r\n  function assignNewParcel(int x, int y, address beneficiary) external;\r\n  function assignMultipleParcels(int[] calldata x, int[] calldata y, address beneficiary) external;\r\n\r\n  // After one year, LAND can be claimed from an inactive public key\r\n  function ping() external;\r\n\r\n  // LAND-centric getters\r\n  function encodeTokenId(int x, int y) external pure returns (uint256);\r\n  function decodeTokenId(uint value) external pure returns (int, int);\r\n  function exists(int x, int y) external view returns (bool);\r\n  function ownerOfLand(int x, int y) external view returns (address);\r\n  function ownerOfLandMany(int[] calldata x, int[] calldata y) external view returns (address[] memory);\r\n  function landOf(address owner) external view returns (int[] memory, int[] memory);\r\n  function landData(int x, int y) external view returns (string memory);\r\n\r\n  // Transfer LAND\r\n  function transferLand(int x, int y, address to) external;\r\n  function transferManyLand(int[] calldata x, int[] calldata y, address to) external;\r\n\r\n  // Update LAND\r\n  function updateLandData(int x, int y, string calldata data) external;\r\n  function updateManyLandData(int[] calldata x, int[] calldata y, string calldata data) external;\r\n\r\n  //operators\r\n  function setUpdateOperator(uint256 assetId, address operator) external;\r\n\r\n  // Events\r\n\r\n  event Update(\r\n    uint256 indexed assetId,\r\n    address indexed holder,\r\n    address indexed operator,\r\n    string data\r\n  );\r\n\r\n  event UpdateOperator(\r\n    uint256 indexed assetId,\r\n    address indexed operator\r\n  );\r\n\r\n  event DeployAuthorized(\r\n    address indexed _caller,\r\n    address indexed _deployer\r\n  );\r\n\r\n  event DeployForbidden(\r\n    address indexed _caller,\r\n    address indexed _deployer\r\n  );\r\n}\r\n\r\n// File: contracts\\AetheriaFirstStageProxy.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract AetheriaFirstStageProxy is Ownable {\r\n    ILANDRegistry private landContract;\r\n\taddress private delegatedSigner;\r\n\tmapping(uint256 => uint) private replayProtection;\r\n\tuint public currentNonce;\r\n\r\n\tconstructor (address landContractAddress) public {\r\n        landContract = ILANDRegistry(landContractAddress);\r\n\t\tdelegatedSigner = owner();\r\n\t\tcurrentNonce = 1;\r\n    }\r\n\r\n\tfunction setDelegatedSigner(address newDelegate) external onlyOwner {\r\n\t\tdelegatedSigner = newDelegate;\r\n\t\temit DelegateChanged(delegatedSigner);\r\n\t}\r\n\r\n\tfunction getDelegatedSigner() public view returns (address ){\r\n\t\treturn delegatedSigner;\r\n\t}\r\n\r\n\tfunction getMessageHash(address userAddress, uint256[] memory plotIds, uint nonce) public pure returns (bytes32)\r\n\t{\r\n\t\treturn keccak256(abi.encode(userAddress, plotIds, nonce));\r\n\t}\r\n\r\n\tfunction buildPrefixedHash(bytes32 msgHash) public pure returns (bytes32)\r\n\t{\r\n\t\tbytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\r\n\t\treturn keccak256(abi.encodePacked(prefix, msgHash));\r\n\t}\r\n\r\n\tfunction verifySender(bytes32 msgHash, uint8 _v, bytes32 _r, bytes32 _s) private view returns (bool)\r\n\t{\r\n\t\tbytes32 prefixedHash = buildPrefixedHash(msgHash);\r\n\t\treturn ecrecover(prefixedHash, _v, _r, _s) == delegatedSigner;\r\n\t}\r\n\r\n\tfunction updatePlot(address userAddress, uint256[] calldata plotIds, uint nonce, uint8 _v, bytes32 _r, bytes32 _s) external {\r\n\t\tbytes32 msgHash = getMessageHash(userAddress, plotIds, nonce);\r\n\t\trequire(verifySender(msgHash, _v, _r, _s), \"Invalid Sig\");\r\n        for (uint i = 0; i<plotIds.length; i++) {\r\n\t\t\tif(replayProtection[plotIds[i]] > nonce) {\r\n\t\t\t\tlandContract.setUpdateOperator(plotIds[i], userAddress);\r\n\t\t\t\treplayProtection[plotIds[i]]++;\r\n\t\t\t}\r\n        }\r\n        if (currentNonce <= nonce)\r\n        {\r\n            currentNonce = nonce+1;\r\n        }\r\n\t\temit PlotOwnerUpdate(\r\n\t\t\tuserAddress,\r\n\t\t\tplotIds\r\n\t\t);\r\n\t}\r\n\r\n\tevent DelegateChanged(\r\n\t\taddress newDelegatedAddress\r\n\t);\r\n\r\n\tevent PlotOwnerUpdate(\r\n\t\taddress newOperator,\r\n\t\tuint256[] plotIds\r\n\t);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"plotIds\",\"type\":\"uint256[]\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"updatePlot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDelegatedSigner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDelegate\",\"type\":\"address\"}],\"name\":\"setDelegatedSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentNonce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"plotIds\",\"type\":\"uint256[]\"},{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"getMessageHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"msgHash\",\"type\":\"bytes32\"}],\"name\":\"buildPrefixedHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"landContractAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newDelegatedAddress\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newOperator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"plotIds\",\"type\":\"uint256[]\"}],\"name\":\"PlotOwnerUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"AetheriaFirstStageProxy","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000f87e31492faf9a91b02ee0deaad50d51d56d5d4d","Library":"","SwarmSource":"bzzr://ac671e2b46a6b7a8b0790c2b4ba228f54e868db780a4b31eab955314fa54fc05"}]}