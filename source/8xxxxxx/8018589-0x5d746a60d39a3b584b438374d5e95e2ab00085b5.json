{"status":"1","message":"OK","result":[{"SourceCode":"/* solium-disable-next-line linebreak-style */\r\npragma solidity 0.4.24;\r\n\r\n// ----------------------------------------------------------------------------\r\n// Math - Implement Math Library\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 r = a + b;\r\n\r\n        require(r >= a, 'Require r >= a');\r\n\r\n        return r;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(a >= b, 'Require a >= b');\r\n\r\n        return a - b;\r\n    }\r\n\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 r = a * b;\r\n\r\n        require(r / a == b, 'Require r / a == b');\r\n\r\n        return r;\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20Interface - Standard ERC20 Interface Definition\r\n// Based on the final ERC20 specification at:\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20Token - Standard ERC20 Implementation\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Token is ERC20Interface {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    string public  name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n\r\n    mapping(address => uint256) internal balances;\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n\r\n\r\n    constructor(string _name, string _symbol, uint8 _decimals, uint256 _totalSupply, address _initialTokenHolder) public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n        totalSupply = _totalSupply;\r\n\r\n        // The initial balance of tokens is assigned to the given token holder address.\r\n        balances[_initialTokenHolder] = _totalSupply;\r\n        allowed[_initialTokenHolder][_initialTokenHolder] = balances[_initialTokenHolder];\r\n\r\n        // Per EIP20, the constructor should fire a Transfer event if tokens are assigned to an account.\r\n        emit Transfer(0x0, _initialTokenHolder, _totalSupply);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value)  public returns (bool success) {\r\n        require(balances[msg.sender] >= _value, 'Sender`s balance is not enough');\r\n        require(balances[_to] + _value > balances[_to], 'Value is invalid');\r\n        require(_to != address(0), '_to address is invalid');\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n        emit Transfer(msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(balances[_from] >= _value, 'Owner`s balance is not enough');\r\n        require(allowed[_from][msg.sender] >= _value, 'Sender`s allowance is not enough');\r\n        require(balances[_to] + _value > balances[_to], 'Token amount value is invalid');\r\n        require(_to != address(0), '_to address is invalid');\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\r\n        emit Transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n\r\n        emit Approval(msg.sender, _spender, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     */\r\n    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool success) {\r\n        uint256 oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n// Implements a simple ownership model with 2-phase transfer.\r\ncontract Owned {\r\n\r\n    address public owner;\r\n    address public proposedOwner;\r\n\r\n    constructor() public\r\n    {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender) == true, 'Require owner to execute transaction');\r\n        _;\r\n    }\r\n\r\n\r\n    function isOwner(address _address) public view returns (bool result) {\r\n        return (_address == owner);\r\n    }\r\n\r\n\r\n    function initiateOwnershipTransfer(address _proposedOwner) public onlyOwner returns (bool success) {\r\n        require(_proposedOwner != address(0), 'Require proposedOwner != address(0)');\r\n        require(_proposedOwner != address(this), 'Require proposedOwner != address(this)');\r\n        require(_proposedOwner != owner, 'Require proposedOwner != owner');\r\n\r\n        proposedOwner = _proposedOwner;\r\n        return true;\r\n    }\r\n\r\n\r\n    function completeOwnershipTransfer() public returns (bool success) {\r\n        require(msg.sender == proposedOwner, 'Require msg.sender == proposedOwner');\r\n\r\n        owner = msg.sender;\r\n        proposedOwner = address(0);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// OpsManaged - Implements an Owner and Ops Permission Model\r\n// ----------------------------------------------------------------------------\r\ncontract OpsManaged is Owned {\r\n\r\n    address public opsAddress;\r\n\r\n\r\n    constructor() public\r\n        Owned()\r\n    {\r\n    }\r\n\r\n\r\n    modifier onlyOwnerOrOps() {\r\n        require(isOwnerOrOps(msg.sender), 'Require only owner or ops');\r\n        _;\r\n    }\r\n\r\n\r\n    function isOps(address _address) public view returns (bool result) {\r\n        return (opsAddress != address(0) && _address == opsAddress);\r\n    }\r\n\r\n\r\n    function isOwnerOrOps(address _address) public view returns (bool result) {\r\n        return (isOwner(_address) || isOps(_address));\r\n    }\r\n\r\n\r\n    function setOpsAddress(address _newOpsAddress) public onlyOwner returns (bool success) {\r\n        require(_newOpsAddress != owner, 'Require newOpsAddress != owner');\r\n        require(_newOpsAddress != address(this), 'Require newOpsAddress != address(this)');\r\n\r\n        opsAddress = _newOpsAddress;\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Finalizable - Implement Finalizable (Crowdsale) model\r\n// ----------------------------------------------------------------------------\r\ncontract Finalizable is OpsManaged {\r\n\r\n    FinalizeState public finalized;\r\n\r\n    enum FinalizeState {\r\n        None,\r\n        Finalized\r\n    }\r\n\r\n    event Finalized();\r\n\r\n\r\n    constructor() public OpsManaged()\r\n    {\r\n        finalized = FinalizeState.None;\r\n    }\r\n\r\n\r\n    function finalize() public onlyOwner returns (bool success) {\r\n        require(finalized == FinalizeState.None, 'Require !finalized');\r\n\r\n        finalized = FinalizeState.Finalized;\r\n\r\n        emit Finalized();\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// FinalizableToken - Extension to ERC20Token with ops and finalization\r\n// ----------------------------------------------------------------------------\r\n//\r\n// ERC20 token with the following additions:\r\n//    1. Owner/Ops Ownership\r\n//    2. Finalization\r\n//\r\ncontract FinalizableToken is ERC20Token, Finalizable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n\r\n    // The constructor will assign the initial token supply to the owner (msg.sender).\r\n    constructor(string _name, string _symbol, uint8 _decimals, uint256 _totalSupply) public\r\n        ERC20Token(_name, _symbol, _decimals, _totalSupply, msg.sender)\r\n        Finalizable()\r\n    {\r\n    }\r\n\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        validateTransfer(msg.sender, _to);\r\n\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        validateTransfer(msg.sender, _to);\r\n\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n\r\n    function validateTransfer(address _sender, address _to) internal view {\r\n        // Once the token is finalized, everybody can transfer tokens.\r\n        if (finalized == FinalizeState.Finalized) {\r\n            return;\r\n        }\r\n\r\n        if (isOwner(_to)) {\r\n            return;\r\n        }\r\n\r\n        require(_to != opsAddress, 'Ops cannot recieve token');\r\n\r\n        // Before the token is finalized, only owner and ops are allowed to initiate transfers.\r\n        // This allows them to move tokens while the sale is still in private sale.\r\n        require(isOwnerOrOps(_sender), 'Require is owner or ops allowed to initiate transfer');\r\n    }\r\n}\r\n\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Token Contract Configuration\r\n// ----------------------------------------------------------------------------\r\ncontract TokenConfig {\r\n\r\n    string  internal constant TOKEN_SYMBOL      = 'SLS';\r\n    string  internal constant TOKEN_NAME        = 'SKILLSH';\r\n    uint8   internal constant TOKEN_DECIMALS    = 8;\r\n\r\n    uint256 internal constant DECIMALS_FACTOR    = 10 ** uint256(TOKEN_DECIMALS);\r\n    uint256 internal constant TOKEN_TOTAL_SUPPLY = 500000000 * DECIMALS_FACTOR;\r\n}\r\n\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Token Contract\r\n// ----------------------------------------------------------------------------\r\ncontract SLSToken is FinalizableToken, TokenConfig {\r\n\r\n    enum HaltState {\r\n        Unhalted,\r\n        Halted\r\n    }\r\n\r\n    HaltState public halts;\r\n\r\n    constructor() public\r\n        FinalizableToken(TOKEN_NAME, TOKEN_SYMBOL, TOKEN_DECIMALS, TOKEN_TOTAL_SUPPLY)\r\n    {\r\n        halts = HaltState.Unhalted;\r\n        finalized = FinalizeState.None;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        require(halts == HaltState.Unhalted, 'Require smart contract is not in halted state');\r\n\r\n        if(isOps(msg.sender)) {\r\n            return super.transferFrom(owner, _to, _value);\r\n        }\r\n\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(halts == HaltState.Unhalted, 'Require smart contract is not in halted state');\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    // Allows a token holder to burn tokens. Once burned, tokens are permanently\r\n    // removed from the total supply.\r\n    function burn(uint256 _amount) public returns (bool success) {\r\n        require(_amount > 0, 'Token amount to burn must be larger than 0');\r\n\r\n        address account = msg.sender;\r\n        require(_amount <= balanceOf(account), 'You cannot burn token you dont have');\r\n\r\n        balances[account] = balances[account].sub(_amount);\r\n        totalSupply = totalSupply.sub(_amount);\r\n        return true;\r\n    }\r\n\r\n    /* Halts or unhalts direct trades without the sell/buy functions below */\r\n    function haltsTrades() public onlyOwnerOrOps returns (bool success) {\r\n        halts = HaltState.Halted;\r\n        return true;\r\n    }\r\n\r\n    function unhaltsTrades() public onlyOwnerOrOps returns (bool success) {\r\n        halts = HaltState.Unhalted;\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhaltsTrades\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOpsAddress\",\"type\":\"address\"}],\"name\":\"setOpsAddress\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"opsAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isOwnerOrOps\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposedOwner\",\"type\":\"address\"}],\"name\":\"initiateOwnershipTransfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"haltsTrades\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposedOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"completeOwnershipTransfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isOps\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"SLSToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f1fd0ff05e5a80bbcb216213e4bdda595af1244532b59a19d3c9ee580d614457"}]}