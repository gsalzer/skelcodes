{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.2;\r\n\r\ncontract IDFEngine {\r\n    function disableOwnership() public;\r\n    function transferOwnership(address newOwner_) public;\r\n    function acceptOwnership() public;\r\n    function setAuthority(address authority_) public;\r\n    function deposit(address _sender, address _tokenID, uint _feeTokenIdx, uint _amount) public returns (uint);\r\n    function withdraw(address _sender, address _tokenID, uint _feeTokenIdx, uint _amount) public returns (uint);\r\n    function destroy(address _sender, uint _feeTokenIdx, uint _amount) public returns (bool);\r\n    function claim(address _sender, uint _feeTokenIdx) public returns (uint);\r\n    function oneClickMinting(address _sender, uint _feeTokenIdx, uint _amount) public;\r\n}\r\n\r\ncontract DSAuthority {\r\n    function canCall(\r\n        address src, address dst, bytes4 sig\r\n    ) public view returns (bool);\r\n}\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority (address indexed authority);\r\n    event LogSetOwner     (address indexed owner);\r\n    event OwnerUpdate     (address indexed owner, address indexed newOwner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority  public  authority;\r\n    address      public  owner;\r\n    address      public  newOwner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    // Warning: you should absolutely sure you want to give up authority!!!\r\n    function disableOwnership() public onlyOwner {\r\n        owner = address(0);\r\n        emit OwnerUpdate(msg.sender, owner);\r\n    }\r\n\r\n    function transferOwnership(address newOwner_) public onlyOwner {\r\n        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\r\n        newOwner = newOwner_;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\r\n        emit OwnerUpdate(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0x0);\r\n    }\r\n\r\n    ///[snow] guard is Authority who inherit DSAuth.\r\n    function setAuthority(DSAuthority authority_)\r\n        public\r\n        onlyOwner\r\n    {\r\n        authority = authority_;\r\n        emit LogSetAuthority(address(authority));\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(isOwner(msg.sender), \"ds-auth-non-owner\");\r\n        _;\r\n    }\r\n\r\n    function isOwner(address src) internal view returns (bool) {\r\n        return bool(src == owner);\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig), \"ds-auth-unauthorized\");\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, address(this), sig);\r\n        }\r\n    }\r\n}\r\n\r\ncontract DFUpgrader is DSAuth {\r\n\r\n    // MEMBERS\r\n    // @dev  The reference to the active converter implementation.\r\n    IDFEngine public iDFEngine;\r\n\r\n    /// @dev  The map of lock ids to pending implementation changes.\r\n    address newDFEngine;\r\n\r\n    // CONSTRUCTOR\r\n    constructor () public {\r\n        iDFEngine = IDFEngine(0x0);\r\n    }\r\n\r\n    // PUBLIC FUNCTIONS\r\n    // (UPGRADE)\r\n    /** @notice  Requests a change of the active implementation associated\r\n      * with this contract.\r\n      *\r\n      * @dev  Anyone can call this function, but confirming the request is authorized\r\n      * by the custodian.\r\n      *\r\n      * @param  _newDFEngine  The address of the new active implementation.\r\n      */\r\n    function requestImplChange(address _newDFEngine) public onlyOwner {\r\n        require(_newDFEngine != address(0), \"_newDFEngine: The address is empty\");\r\n\r\n        newDFEngine = _newDFEngine;\r\n\r\n        emit ImplChangeRequested(msg.sender, _newDFEngine);\r\n    }\r\n\r\n    /** @notice  Confirms a pending change of the active implementation\r\n      * associated with this contract.\r\n      *\r\n      * @dev  the `Converter ConverterImpl` member will be updated\r\n      * with the requested address.\r\n      *\r\n      */\r\n    function confirmImplChange() public onlyOwner {\r\n        iDFEngine = IDFEngine(newDFEngine);\r\n\r\n        emit ImplChangeConfirmed(address(iDFEngine));\r\n    }\r\n\r\n    /// @dev  Emitted by successful `requestImplChange` calls.\r\n    event ImplChangeRequested(address indexed _msgSender, address indexed _proposedImpl);\r\n\r\n    /// @dev Emitted by successful `confirmImplChange` calls.\r\n    event ImplChangeConfirmed(address indexed _newImpl);\r\n}\r\n\r\ncontract DFProtocol is DFUpgrader {\r\n    /******************************************/\r\n    /* Public events that will notify clients */\r\n    /******************************************/\r\n\r\n    /**\r\n     * @dev Emmit when `_tokenAmount` tokens of `_tokenID` deposits from one account(`_sender`),\r\n     * and show the amout(`_usdxAmount`) tokens generate.\r\n     */\r\n    event Deposit (address indexed _tokenID, address indexed _sender, uint _tokenAmount, uint _usdxAmount);\r\n\r\n    /**\r\n     * @dev Emmit when `_expectedAmount` tokens of `_tokenID` withdraws from one account(`_sender`),\r\n     * and show the amount(`_actualAmount`) tokens have been withdrawed successfully.\r\n     *\r\n     * Note that `_actualAmount` may be less than or equal to `_expectedAmount`.\r\n     */\r\n    event Withdraw(address indexed _tokenID, address indexed _sender, uint _expectedAmount, uint _actualAmount);\r\n\r\n    /**\r\n     * @dev Emmit when `_amount` USDx were destroied from one account(`_sender`).\r\n     */\r\n    event Destroy (address indexed _sender, uint _usdxAmount);\r\n\r\n    /**\r\n     * @dev Emmit when `_usdxAmount` USDx were claimed from one account(`_sender`).\r\n     */\r\n    event Claim(address indexed _sender, uint _usdxAmount);\r\n\r\n    /**\r\n     * @dev Emmit when `_amount` USDx were minted from one account(`_sender`).\r\n     */\r\n    event OneClickMinting(address indexed _sender, uint _usdxAmount);\r\n\r\n    /******************************************/\r\n    /*            User interfaces             */\r\n    /******************************************/\r\n\r\n    /**\r\n     * @dev The caller deposits `_tokenAmount` tokens of `_tokenID`,\r\n     * and the caller would like to use `_feeTokenIdx` as the transaction fee.\r\n     *\r\n     * Note that: 1)For `_tokenID`: it should be one of the supported stabel currencies.\r\n     *            2)For `_feeTokenIdx`: 0 is DF, and 1 is USDx.\r\n     *\r\n     * Returns a uint value indicating the total amount that generating USDx.\r\n     *\r\n     * Emits a `Deposit` event.\r\n     */\r\n    function deposit(address _tokenID, uint _feeTokenIdx, uint _tokenAmount) public returns (uint){\r\n        uint _usdxAmount = iDFEngine.deposit(msg.sender, _tokenID, _feeTokenIdx, _tokenAmount);\r\n        emit Deposit(_tokenID, msg.sender, _tokenAmount, _usdxAmount);\r\n        return _usdxAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev The caller withdraws `_expectedAmount` tokens of `_tokenID`,\r\n     * and the caller would like to use `_feeTokenIdx` as the transaction fee.\r\n     *\r\n     * Returns a uint value indicating the total amount of the caller has withdrawed successfully.\r\n     *\r\n     * Emits a `Withdraw` event.\r\n     */\r\n    function withdraw(address _tokenID, uint _feeTokenIdx, uint _expectedAmount) public returns (uint) {\r\n        uint _actualAmount = iDFEngine.withdraw(msg.sender, _tokenID, _feeTokenIdx, _expectedAmount);\r\n        emit Withdraw(_tokenID, msg.sender, _expectedAmount, _actualAmount);\r\n        return _actualAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev The caller destroies `_usdxAmount` USDx,\r\n     * and the caller would like to use `_feeTokenIdx` as the transaction fee.\r\n     *\r\n     * Emits a `Destroy` event.\r\n     */\r\n    function destroy(uint _feeTokenIdx, uint _usdxAmount) public {\r\n        iDFEngine.destroy(msg.sender, _feeTokenIdx, _usdxAmount);\r\n        emit Destroy(msg.sender, _usdxAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev The caller claims to get spare USDx he can get,\r\n     * and the caller would like to use `_feeTokenIdx` as the transaction fee.\r\n     *\r\n     * Returns a uint value indicating the total amount of the caller has claimed.\r\n     *\r\n     * Emits a `Claim` event.\r\n     */\r\n    function claim(uint _feeTokenIdx) public returns (uint) {\r\n        uint _usdxAmount = iDFEngine.claim(msg.sender, _feeTokenIdx);\r\n        emit Claim(msg.sender, _usdxAmount);\r\n        return _usdxAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev The caller mints `_usdxAmount` USDx directly,\r\n     * and the caller would like to use `_feeTokenIdx` as the transaction fee.\r\n     *\r\n     * Emits a `OneClickMinting` event.\r\n     */\r\n    function oneClickMinting(uint _feeTokenIdx, uint _usdxAmount) public {\r\n        iDFEngine.oneClickMinting(msg.sender, _feeTokenIdx, _usdxAmount);\r\n        emit OneClickMinting(msg.sender, _usdxAmount);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_tokenID\",\"type\":\"address\"},{\"name\":\"_feeTokenIdx\",\"type\":\"uint256\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmImplChange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feeTokenIdx\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"iDFEngine\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDFEngine\",\"type\":\"address\"}],\"name\":\"requestImplChange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feeTokenIdx\",\"type\":\"uint256\"},{\"name\":\"_usdxAmount\",\"type\":\"uint256\"}],\"name\":\"oneClickMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenID\",\"type\":\"address\"},{\"name\":\"_feeTokenIdx\",\"type\":\"uint256\"},{\"name\":\"_expectedAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feeTokenIdx\",\"type\":\"uint256\"},{\"name\":\"_usdxAmount\",\"type\":\"uint256\"}],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenID\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_usdxAmount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenID\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_expectedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_actualAmount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_usdxAmount\",\"type\":\"uint256\"}],\"name\":\"Destroy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_usdxAmount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_usdxAmount\",\"type\":\"uint256\"}],\"name\":\"OneClickMinting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_msgSender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_proposedImpl\",\"type\":\"address\"}],\"name\":\"ImplChangeRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_newImpl\",\"type\":\"address\"}],\"name\":\"ImplChangeConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"}]","ContractName":"DFProtocol","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6ed68f52864ac7a354ac444bb8286fce04d39af249b78d0ac72e682e3ce1815b"}]}