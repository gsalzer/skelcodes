{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.7;\r\n\r\ninterface CTokenInterface {\r\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\r\n    function borrow(uint borrowAmount) external returns (uint);\r\n    function exchangeRateCurrent() external returns (uint);\r\n    function borrowBalanceCurrent(address account) external returns (uint);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function allowance(address, address) external view returns (uint);\r\n    function approve(address, uint) external;\r\n    function transfer(address, uint) external returns (bool);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n}\r\n\r\ninterface CERC20Interface {\r\n    function mint(uint mintAmount) external returns (uint); // For ERC20\r\n    function repayBorrow(uint repayAmount) external returns (uint); // For ERC20\r\n    function borrowBalanceCurrent(address account) external returns (uint);\r\n}\r\n\r\ninterface CETHInterface {\r\n    function mint() external payable; // For ETH\r\n    function repayBorrow() external payable; // For ETH\r\n    function borrowBalanceCurrent(address account) external returns (uint);\r\n}\r\n\r\ninterface ERC20Interface {\r\n    function allowance(address, address) external view returns (uint);\r\n    function balanceOf(address) external view returns (uint);\r\n    function approve(address, uint) external;\r\n    function transfer(address, uint) external returns (bool);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n}\r\n\r\ninterface ComptrollerInterface {\r\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\r\n    function getAssetsIn(address account) external view returns (address[] memory);\r\n    function getAccountLiquidity(address account) external view returns (uint, uint, uint);\r\n}\r\n\r\ninterface CompOracleInterface {\r\n    function getUnderlyingPrice(address) external view returns (uint);\r\n}\r\n\r\ninterface SplitSwapInterface {\r\n    function getBest(address src, address dest, uint srcAmt) external view returns (uint bestExchange, uint destAmt);\r\n    function ethToDaiSwap(uint splitAmt, uint slippageAmt) external payable returns (uint destAmt);\r\n    function daiToEthSwap(uint srcAmt, uint splitAmt, uint slippageAmt) external returns (uint destAmt);\r\n}\r\n\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        z = x - y <= x ? x - y : 0;\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Helpers is DSMath {\r\n\r\n    /**\r\n     * @dev get ethereum address for trade\r\n     */\r\n    function getAddressETH() public pure returns (address eth) {\r\n        eth = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    }\r\n\r\n    /**\r\n     * @dev get ethereum address for trade\r\n     */\r\n    function getAddressDAI() public pure returns (address dai) {\r\n        dai = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\r\n    }\r\n\r\n    /**\r\n     * @dev get Compound Comptroller Address\r\n     */\r\n    function getComptrollerAddress() public pure returns (address troller) {\r\n        troller = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\r\n    }\r\n\r\n    /**\r\n     * @dev get Compound Comptroller Address\r\n     */\r\n    function getCompOracleAddress() public pure returns (address troller) {\r\n        troller = 0xe7664229833AE4Abf4E269b8F23a86B657E2338D;\r\n    }\r\n\r\n    /**\r\n     * @dev get Compound Comptroller Address\r\n     */\r\n    function getCETHAddress() public pure returns (address cEth) {\r\n        cEth = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\r\n    }\r\n\r\n    /**\r\n     * @dev get Compound Comptroller Address\r\n     */\r\n    function getCDAIAddress() public pure returns (address cDai) {\r\n        cDai = 0xF5DCe57282A584D2746FaF1593d3121Fcac444dC;\r\n    }\r\n\r\n    /**\r\n     * @dev get admin address\r\n     */\r\n    function getAddressSplitSwap() public pure returns (address payable splitSwap) {\r\n        splitSwap = 0xa4BCA645f9cB9e6F9ad8C56D90a65b07C2f4e1Dd;\r\n    }\r\n\r\n    function enterMarket(address cErc20) internal {\r\n        ComptrollerInterface troller = ComptrollerInterface(getComptrollerAddress());\r\n        address[] memory markets = troller.getAssetsIn(address(this));\r\n        bool isEntered = false;\r\n        for (uint i = 0; i < markets.length; i++) {\r\n            if (markets[i] == cErc20) {\r\n                isEntered = true;\r\n            }\r\n        }\r\n        if (!isEntered) {\r\n            address[] memory toEnter = new address[](1);\r\n            toEnter[0] = cErc20;\r\n            troller.enterMarkets(toEnter);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev setting allowance to compound for the \"user proxy\" if required\r\n     */\r\n    function setApproval(address erc20, uint srcAmt, address to) internal {\r\n        ERC20Interface erc20Contract = ERC20Interface(erc20);\r\n        uint tokenAllowance = erc20Contract.allowance(address(this), to);\r\n        if (srcAmt > tokenAllowance) {\r\n            erc20Contract.approve(to, 2**255);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract CompoundHelper is Helpers {\r\n\r\n    /**\r\n     * @dev get users overall details for Compound\r\n     */\r\n    function getCompStats(\r\n        address user,\r\n        address[] memory cTokenAddr,\r\n        uint[] memory cTokenFactor\r\n    ) public returns (uint totalSupply, uint totalBorrow, uint maxBorrow, uint borrowRemain, uint maxWithdraw, uint ratio)\r\n    {\r\n        for (uint i = 0; i < cTokenAddr.length; i++) {\r\n            address cTokenAdd = cTokenAddr[i];\r\n            uint factor = cTokenFactor[i];\r\n            (uint supplyInEth, uint borrowInEth) = compSupplyBorrow(cTokenAdd, user);\r\n            totalSupply += supplyInEth;\r\n            totalBorrow += borrowInEth;\r\n            maxBorrow += wmul(supplyInEth, factor);\r\n        }\r\n        borrowRemain = sub(maxBorrow, totalBorrow);\r\n        maxWithdraw = sub(wdiv(borrowRemain, 750000000000000000), 10); // divide it by 0.75 (ETH Factor)\r\n        uint userEthSupply = getEthSupply(user);\r\n        maxWithdraw = userEthSupply > maxWithdraw ? maxWithdraw : userEthSupply;\r\n        ratio = wdiv(totalBorrow, totalSupply);\r\n    }\r\n\r\n    /**\r\n     * @dev get user's token supply and borrow in ETH\r\n     */\r\n    function compSupplyBorrow(address cTokenAdd, address user) internal returns(uint supplyInEth, uint borrowInEth) {\r\n        CTokenInterface cTokenContract = CTokenInterface(cTokenAdd);\r\n        uint tokenPriceInEth = CompOracleInterface(getCompOracleAddress()).getUnderlyingPrice(cTokenAdd);\r\n        uint cTokenBal = sub(cTokenContract.balanceOf(user), 1);\r\n        uint cTokenExchangeRate = cTokenContract.exchangeRateCurrent();\r\n        uint tokenSupply = sub(wmul(cTokenBal, cTokenExchangeRate), 1);\r\n        supplyInEth = sub(wmul(tokenSupply, tokenPriceInEth), 10);\r\n        uint tokenBorrowed = cTokenContract.borrowBalanceCurrent(user);\r\n        borrowInEth = add(wmul(tokenBorrowed, tokenPriceInEth), 10);\r\n    }\r\n\r\n    function getEthSupply(address user) internal returns (uint ethSupply) {\r\n        CTokenInterface cTokenContract = CTokenInterface(getCETHAddress());\r\n        uint cTokenBal = sub(cTokenContract.balanceOf(user), 1);\r\n        uint cTokenExchangeRate = cTokenContract.exchangeRateCurrent();\r\n        ethSupply = wmul(cTokenBal, cTokenExchangeRate);\r\n    }\r\n\r\n    function daiBorrowed(address user) internal returns (uint daiAmt) {\r\n        CTokenInterface cTokenContract = CTokenInterface(getCDAIAddress());\r\n        daiAmt = cTokenContract.borrowBalanceCurrent(user);\r\n    }\r\n\r\n    function getDaiRemainBorrow(uint daiInEth) internal view returns (uint daiAmt) {\r\n        uint tokenPriceInEth = CompOracleInterface(getCompOracleAddress()).getUnderlyingPrice(getCDAIAddress());\r\n        daiAmt = sub(wdiv(daiInEth, tokenPriceInEth), 10);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract CompoundResolver is CompoundHelper {\r\n\r\n    event LogMint(address erc20, address cErc20, uint tokenAmt, address owner);\r\n    event LogRedeem(address erc20, address cErc20, uint tokenAmt, address owner);\r\n    event LogBorrow(address erc20, address cErc20, uint tokenAmt, address owner);\r\n    event LogRepay(address erc20, address cErc20, uint tokenAmt, address owner);\r\n\r\n    function getSave(\r\n        address user,\r\n        uint ethToFree,\r\n        address[] memory cTokenAddr,\r\n        uint[] memory ctokenFactor\r\n    ) public returns (uint finalColInEth, uint finalDebtInEth, uint daiDebt, bool isOk)\r\n    {\r\n        (uint totalSupply, uint totalBorrow,,,uint maxWithdraw,) = getCompStats(user, cTokenAddr, ctokenFactor);\r\n        uint ethToSwap = ethToFree < maxWithdraw ? ethToFree : maxWithdraw;\r\n        (, uint expectedDAI) = SplitSwapInterface(getAddressSplitSwap()).getBest(getAddressETH(), getAddressDAI(), ethToSwap);\r\n        uint daiBorrowed = daiBorrowed(user);\r\n        uint daiInEth = CompOracleInterface(getCompOracleAddress()).getUnderlyingPrice(getCDAIAddress());\r\n        if (daiBorrowed < expectedDAI) {\r\n            finalColInEth = sub(totalSupply, ethToSwap);\r\n            finalDebtInEth = sub(totalBorrow, wmul(daiBorrowed, daiInEth));\r\n            daiDebt = 0;\r\n            isOk = false;\r\n        } else {\r\n            finalColInEth = sub(totalSupply, ethToSwap);\r\n            finalDebtInEth = sub(totalBorrow, wmul(expectedDAI, daiInEth));\r\n            daiDebt = sub(daiBorrowed, expectedDAI);\r\n            isOk = true;\r\n        }\r\n    }\r\n\r\n    function getLeverage(\r\n        address user,\r\n        uint daiToBorrow,\r\n        address[] memory cTokenAddr,\r\n        uint[] memory ctokenFactor\r\n    ) public returns (uint finalColInEth, uint finalDebtInEth, uint ethCol)\r\n    {\r\n        (uint totalSupply, uint totalBorrow,, uint borrowRemain,,) = getCompStats(user, cTokenAddr, ctokenFactor);\r\n        uint daiToSwap = getDaiRemainBorrow(borrowRemain);\r\n        daiToSwap = daiToSwap < daiToBorrow ? daiToSwap : daiToBorrow;\r\n        (, uint expectedETH) = SplitSwapInterface(getAddressSplitSwap()).getBest(getAddressDAI(), getAddressETH(), daiToSwap);\r\n        uint daiInEth = CompOracleInterface(getCompOracleAddress()).getUnderlyingPrice(getCDAIAddress());\r\n        finalColInEth = add(totalSupply, expectedETH);\r\n        finalDebtInEth = add(totalBorrow, wmul(daiToSwap, daiInEth));\r\n        ethCol = add(getEthSupply(user), expectedETH);\r\n    }\r\n\r\n    /**\r\n     * @dev Deposit ETH/ERC20 and mint Compound Tokens\r\n     */\r\n    function mintCEth(uint tokenAmt) internal {\r\n        CETHInterface cToken = CETHInterface(getCETHAddress());\r\n        cToken.mint.value(tokenAmt)();\r\n        emit LogMint(\r\n            getAddressETH(),\r\n            getCETHAddress(),\r\n            tokenAmt,\r\n            msg.sender\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Redeem ETH/ERC20 and mint Compound Tokens\r\n     * @param tokenAmt Amount of token To Redeem\r\n     */\r\n    function redeemEth(uint tokenAmt) internal {\r\n        CTokenInterface cToken = CTokenInterface(getCETHAddress());\r\n        setApproval(getCETHAddress(), 10**30, getCETHAddress());\r\n        require(cToken.redeemUnderlying(tokenAmt) == 0, \"something went wrong\");\r\n        emit LogRedeem(\r\n            getAddressETH(),\r\n            getCETHAddress(),\r\n            tokenAmt,\r\n            address(this)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev borrow ETH/ERC20\r\n     */\r\n    function borrow(uint tokenAmt) internal {\r\n        require(CTokenInterface(getCDAIAddress()).borrow(tokenAmt) == 0, \"got collateral?\");\r\n        emit LogBorrow(\r\n            getAddressDAI(),\r\n            getCDAIAddress(),\r\n            tokenAmt,\r\n            address(this)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Pay Debt ETH/ERC20\r\n     */\r\n    function repayDai(uint tokenAmt) internal {\r\n        CERC20Interface cToken = CERC20Interface(getCDAIAddress());\r\n        setApproval(getAddressDAI(), tokenAmt, getCDAIAddress());\r\n        require(cToken.repayBorrow(tokenAmt) == 0, \"transfer approved?\");\r\n        emit LogRepay(\r\n            getAddressDAI(),\r\n            getCDAIAddress(),\r\n            tokenAmt,\r\n            address(this)\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract CompoundSave is CompoundResolver {\r\n\r\n    event LogSaveCompound(uint srcETH, uint destDAI);\r\n\r\n    event LogLeverageCompound(uint srcDAI,uint destETH);\r\n\r\n    function save(\r\n        uint ethToFree,\r\n        address[] memory ctokenAddr,\r\n        uint[] memory ctokenFactor,\r\n        uint splitAmt,\r\n        uint slippageAmt\r\n    ) public\r\n    {\r\n        enterMarket(getCETHAddress());\r\n        enterMarket(getCDAIAddress());\r\n        (,,,,uint maxWithdraw,) = getCompStats(address(this), ctokenAddr, ctokenFactor);\r\n        uint ethToSwap = ethToFree < maxWithdraw ? ethToFree : maxWithdraw;\r\n        redeemEth(ethToSwap);\r\n        uint destAmt = SplitSwapInterface(getAddressSplitSwap()).ethToDaiSwap.value(ethToSwap)(splitAmt, slippageAmt);\r\n        repayDai(destAmt);\r\n        emit LogSaveCompound(ethToSwap, destAmt);\r\n    }\r\n\r\n    function leverage(\r\n        uint daiToBorrow,\r\n        address[] memory cTokenAddr,\r\n        uint[] memory ctokenFactor,\r\n        uint splitAmt,\r\n        uint slippageAmt\r\n    ) public\r\n    {\r\n        enterMarket(getCETHAddress());\r\n        enterMarket(getCDAIAddress());\r\n        (,,,uint borrowRemain,,) = getCompStats(address(this), cTokenAddr, ctokenFactor);\r\n        uint daiToSwap = getDaiRemainBorrow(borrowRemain);\r\n        daiToSwap = daiToSwap < daiToBorrow ? daiToSwap : daiToBorrow;\r\n        borrow(daiToSwap);\r\n        setApproval(getAddressDAI(), daiToSwap, getAddressSplitSwap());\r\n        uint destAmt = SplitSwapInterface(getAddressSplitSwap()).daiToEthSwap(daiToSwap, splitAmt, slippageAmt);\r\n        mintCEth(destAmt);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract InstaCompSave is CompoundSave {\r\n\r\n    uint public version;\r\n\r\n    /**\r\n     * @dev setting up variables on deployment\r\n     * 1...2...3 versioning in each subsequent deployments\r\n     */\r\n    constructor(uint _version) public {\r\n        version = _version;\r\n    }\r\n\r\n    function() external payable {}\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"daiToBorrow\",\"type\":\"uint256\"},{\"name\":\"cTokenAddr\",\"type\":\"address[]\"},{\"name\":\"ctokenFactor\",\"type\":\"uint256[]\"},{\"name\":\"splitAmt\",\"type\":\"uint256\"},{\"name\":\"slippageAmt\",\"type\":\"uint256\"}],\"name\":\"leverage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getComptrollerAddress\",\"outputs\":[{\"name\":\"troller\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"ethToFree\",\"type\":\"uint256\"},{\"name\":\"cTokenAddr\",\"type\":\"address[]\"},{\"name\":\"ctokenFactor\",\"type\":\"uint256[]\"}],\"name\":\"getSave\",\"outputs\":[{\"name\":\"finalColInEth\",\"type\":\"uint256\"},{\"name\":\"finalDebtInEth\",\"type\":\"uint256\"},{\"name\":\"daiDebt\",\"type\":\"uint256\"},{\"name\":\"isOk\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCompOracleAddress\",\"outputs\":[{\"name\":\"troller\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"daiToBorrow\",\"type\":\"uint256\"},{\"name\":\"cTokenAddr\",\"type\":\"address[]\"},{\"name\":\"ctokenFactor\",\"type\":\"uint256[]\"}],\"name\":\"getLeverage\",\"outputs\":[{\"name\":\"finalColInEth\",\"type\":\"uint256\"},{\"name\":\"finalDebtInEth\",\"type\":\"uint256\"},{\"name\":\"ethCol\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAddressETH\",\"outputs\":[{\"name\":\"eth\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAddressDAI\",\"outputs\":[{\"name\":\"dai\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCETHAddress\",\"outputs\":[{\"name\":\"cEth\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ethToFree\",\"type\":\"uint256\"},{\"name\":\"ctokenAddr\",\"type\":\"address[]\"},{\"name\":\"ctokenFactor\",\"type\":\"uint256[]\"},{\"name\":\"splitAmt\",\"type\":\"uint256\"},{\"name\":\"slippageAmt\",\"type\":\"uint256\"}],\"name\":\"save\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"cTokenAddr\",\"type\":\"address[]\"},{\"name\":\"cTokenFactor\",\"type\":\"uint256[]\"}],\"name\":\"getCompStats\",\"outputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"name\":\"totalBorrow\",\"type\":\"uint256\"},{\"name\":\"maxBorrow\",\"type\":\"uint256\"},{\"name\":\"borrowRemain\",\"type\":\"uint256\"},{\"name\":\"maxWithdraw\",\"type\":\"uint256\"},{\"name\":\"ratio\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAddressSplitSwap\",\"outputs\":[{\"name\":\"splitSwap\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCDAIAddress\",\"outputs\":[{\"name\":\"cDai\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_version\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"srcETH\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"destDAI\",\"type\":\"uint256\"}],\"name\":\"LogSaveCompound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"srcDAI\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"destETH\",\"type\":\"uint256\"}],\"name\":\"LogLeverageCompound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"erc20\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cErc20\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"erc20\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cErc20\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogRedeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"erc20\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cErc20\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"erc20\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cErc20\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogRepay\",\"type\":\"event\"}]","ContractName":"InstaCompSave","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000001","Library":"","SwarmSource":"bzzr://2b7428ddf76488443cdc3e2138e1a6965e0a010c8b4cecc9fad0d804ff96f18b"}]}