{"status":"1","message":"OK","result":[{"SourceCode":"/**\nAuthor: Blockrocket.tech.\n\n*/\n\npragma solidity ^0.5.12;\n\n\nlibrary SafeMath {\n    \n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    \n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    \n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        \n        \n        \n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    \n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        \n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        \n\n        return c;\n    }\n\n    \n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n}\n\ncontract ITwistedSisterArtistCommissionRegistry {\n    function getCommissionSplits() external view returns (uint256[] memory _percentages, address payable[] memory _artists);\n    function getMaxCommission() external view returns (uint256);\n}\n\ncontract ITwistedSisterAccessControls {\n    function isWhitelisted(address account) public view returns (bool);\n\n    function isWhitelistAdmin(address account) public view returns (bool);\n}\n\ncontract TwistedSisterArtistCommissionRegistry is ITwistedSisterArtistCommissionRegistry {\n    using SafeMath for uint256;\n\n    ITwistedSisterAccessControls public accessControls;\n\n    address payable[] public artists;\n\n    uint256 public maxCommission = 10000;\n\n    \n    mapping(address => uint256) public artistCommissionSplit;\n\n    modifier isWhitelisted() {\n        require(accessControls.isWhitelisted(msg.sender), \"Caller not whitelisted\");\n        _;\n    }\n\n    constructor(ITwistedSisterAccessControls _accessControls) public {\n        accessControls = _accessControls;\n    }\n\n    function setCommissionSplits(uint256[] calldata _percentages, address payable[] calldata _artists) external isWhitelisted returns (bool) {\n        require(_percentages.length == _artists.length, \"Differing percentage or recipient sizes\");\n\n        \n        for(uint256 i = 0; i < artists.length; i++) {\n            address payable artist = artists[i];\n            delete artistCommissionSplit[artist];\n            delete artists[i];\n        }\n        artists.length = 0;\n\n        uint256 total;\n\n        for(uint256 i = 0; i < _artists.length; i++) {\n            address payable artist = _artists[i];\n            require(artist != address(0x0), \"Invalid address\");\n            artists.push(artist);\n            artistCommissionSplit[artist] = _percentages[i];\n            total = total.add(_percentages[i]);\n        }\n\n        require(total == maxCommission, \"Total commission does not match allowance\");\n\n        return true;\n    }\n\n    function getCommissionSplits() external view returns (uint256[] memory _percentages, address payable[] memory _artists) {\n        require(artists.length > 0, \"No artists have been registered\");\n        _percentages = new uint256[](artists.length);\n        _artists = new address payable[](artists.length);\n\n        for(uint256 i = 0; i < artists.length; i++) {\n            address payable artist = artists[i];\n            _percentages[i] = artistCommissionSplit[artist];\n            _artists[i] = artist;\n        }\n    }\n\n    function getMaxCommission() external view returns (uint256) {\n        return maxCommission;\n    }\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ITwistedSisterAccessControls\",\"name\":\"_accessControls\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"accessControls\",\"outputs\":[{\"internalType\":\"contract ITwistedSisterAccessControls\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"artistCommissionSplit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"artists\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCommissionSplits\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_percentages\",\"type\":\"uint256[]\"},{\"internalType\":\"address payable[]\",\"name\":\"_artists\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxCommission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxCommission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_percentages\",\"type\":\"uint256[]\"},{\"internalType\":\"address payable[]\",\"name\":\"_artists\",\"type\":\"address[]\"}],\"name\":\"setCommissionSplits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TwistedSisterArtistCommissionRegistry","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000095a825196046f2322943d06119eb530b1bb064bb","Library":"","LicenseType":"","SwarmSource":"bzzr://ed1b8900b8634615c75479dc6b9f341098ace6bdd681194363a2ef1bccdf0833"}]}