{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/equity/IERC20.sol\r\n\r\n/**\t\r\n* MIT License\t\r\n*\t\r\n* Copyright (c) 2016-2019 zOS Global Limited\t\r\n*\t\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\t\r\n* of this software and associated documentation files (the \"Software\"), to deal\t\r\n* in the Software without restriction, including without limitation the rights\t\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\t\r\n* copies of the Software, and to permit persons to whom the Software is\t\r\n* furnished to do so, subject to the following conditions:\t\r\n*\t\r\n* The above copyright notice and this permission notice shall be included in all\t\r\n* copies or substantial portions of the Software.\t\r\n*\t\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\t\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\t\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\t\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\t\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\t\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\t\r\n* SOFTWARE.\t\r\n*/\r\n\r\npragma solidity 0.5.10;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/Roles.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/roles/PauserRole.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract PauserRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event PauserAdded(address indexed account);\r\n    event PauserRemoved(address indexed account);\r\n\r\n    Roles.Role private _pausers;\r\n\r\n    constructor () internal {\r\n        _addPauser(msg.sender);\r\n    }\r\n\r\n    modifier onlyPauser() {\r\n        require(isPauser(msg.sender), \"PauserRole: caller does not have the Pauser role\");\r\n        _;\r\n    }\r\n\r\n    function isPauser(address account) public view returns (bool) {\r\n        return _pausers.has(account);\r\n    }\r\n\r\n    function addPauser(address account) public onlyPauser {\r\n        _addPauser(account);\r\n    }\r\n\r\n    function renouncePauser() public {\r\n        _removePauser(msg.sender);\r\n    }\r\n\r\n    function _addPauser(address account) internal {\r\n        _pausers.add(account);\r\n        emit PauserAdded(account);\r\n    }\r\n\r\n    function _removePauser(address account) internal {\r\n        _pausers.remove(account);\r\n        emit PauserRemoved(account);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract Pausable is PauserRole {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\r\n     * to the deployer.\r\n     */\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to pause, triggers stopped state.\r\n     */\r\n    function pause() public onlyPauser whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to unpause, returns to normal state.\r\n     */\r\n    function unpause() public onlyPauser whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n}\r\n\r\n// File: contracts/dispenser/ShareDispenser.sol\r\n\r\n/**\r\n* MIT License with Automated License Fee Payments\r\n*\r\n* Copyright (c) 2019 Equility AG (alethena.com)\r\n*\r\n* Permission is hereby granted to any person obtaining a copy of this software\r\n* and associated documentation files (the \"Software\"), to deal in the Software\r\n* without restriction, including without limitation the rights to use, copy,\r\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n* Software, and to permit persons to whom the Software is furnished to do so,\r\n* subject to the following conditions:\r\n*\r\n* - The above copyright notice and this permission notice shall be included in\r\n*   all copies or substantial portions of the Software.\r\n* - All automated license fee payments integrated into this and related Software\r\n*   are preserved.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\npragma solidity 0.5.10;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Alethena Share Dispenser for Draggable ServiceHunter Shares (DSHS)\r\n * @author Benjamin Rickenbacher, benjamin@alethena.com\r\n * @dev This contract uses the open-zeppelin library.\r\n *\r\n * This smart contract is intended to serve as a tool that ServiceHunter AG can use to\r\n * provide liquidity for their DSHS.\r\n *\r\n * The currency used for payment is the Crypto Franc XCHF (https://www.swisscryptotokens.ch/)\r\n * which makes it possible to quote DSHS prices directly in Swiss Francs.\r\n *\r\n * ServiceHunter AG can allocate a certain number of DSHS and (optionally) also some XCHF\r\n * to the Share Dispenser and defines a linear price dependency.\r\n **/\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function transfer(address to, uint tokens) external returns (bool success);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool success);\r\n    function totalShares() external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n}\r\n\r\n\r\ncontract ShareDispenser is Ownable, Pausable {\r\n    constructor(\r\n        address initialXCHFContractAddress,\r\n        address initialDSHSContractAddress,\r\n        address initialusageFeeAddress,\r\n        address initialBackendAddress\r\n        ) public {\r\n\r\n        require(initialXCHFContractAddress != address(0), \"XCHF does not reside at address 0!\");\r\n        require(initialDSHSContractAddress != address(0), \"DSHS does not reside at address 0!\");\r\n        require(initialusageFeeAddress != address(0), \"Usage fee address cannot be 0!\");\r\n\r\n        XCHFContractAddress = initialXCHFContractAddress;\r\n        DSHSContractAddress = initialDSHSContractAddress;\r\n        usageFeeAddress = initialusageFeeAddress;\r\n        backendAddress = initialBackendAddress;\r\n    }\r\n\r\n    /*\r\n     * Fallback function to prevent accidentally sending Ether to the contract\r\n     * It is still possible to force Ether into the contract as this cannot be prevented fully.\r\n     * Sending Ether to this contract does not create any problems for the contract, but the Ether will be lost.\r\n    */\r\n\r\n    function () external payable {\r\n        revert(\"This contract does not accept Ether.\");\r\n    }\r\n\r\n    using SafeMath for uint256;\r\n\r\n    // Variables\r\n\r\n    address public XCHFContractAddress;     // Address where XCHF is deployed\r\n    address public DSHSContractAddress;     // Address where DSHS is deployed\r\n    address public usageFeeAddress;         // Address where usage fee is collected\r\n    address public backendAddress;          // Address used by backend server (triggers buy/sell)\r\n\r\n    uint256 public usageFeeBSP  = 0;       // 0.9% usage fee (10000 basis points = 100%)\r\n    uint256 public minVolume = 1;          // Minimum number of shares to buy/sell\r\n\r\n    uint256 public minPriceInXCHF = 200*10**18; // Minimum price\r\n    uint256 public maxPriceInXCHF = 600*10**18; // Maximum price\r\n    uint256 public initialNumberOfShares = 400; //Price slope (TBD)\r\n\r\n    bool public buyEnabled = true;\r\n    bool public sellEnabled = true;\r\n\r\n    // Events\r\n\r\n    event XCHFContractAddressSet(address newXCHFContractAddress);\r\n    event DSHSContractAddressSet(address newDSHSContractAddress);\r\n    event UsageFeeAddressSet(address newUsageFeeAddress);\r\n\r\n    event SharesPurchased(address indexed buyer, uint256 amount, uint256 price, uint256 nextPrice);\r\n    event SharesSold(address indexed seller, uint256 amount, uint256 buyBackPrice, uint256 nextPrice);\r\n\r\n    event TokensRetrieved(address contractAddress, address indexed to, uint256 amount);\r\n\r\n    event UsageFeeSet(uint256 usageFee);\r\n    event MinVolumeSet(uint256 minVolume);\r\n    event MinPriceSet(uint256 minPrice);\r\n    event MaxPriceSet(uint256 maxPrice);\r\n    event InitialNumberOfSharesSet(uint256 initialNumberOfShares);\r\n\r\n    event BuyStatusChanged(bool newStatus);\r\n    event SellStatusChanged(bool newStatus);\r\n\r\n\r\n    // Function for buying shares\r\n\r\n    function buyShares(address buyer, uint256 numberOfSharesToBuy) public whenNotPaused() returns (bool) {\r\n\r\n        // Check that buying is enabled\r\n        require(buyEnabled, \"Buying is currenty disabled\");\r\n        require(numberOfSharesToBuy >= minVolume, \"Volume too low\");\r\n\r\n        // Check user is allowed to trigger buy\r\n        require(msg.sender == buyer || msg.sender == backendAddress, \"You do not have permission to trigger buying shares for someone else.\");\r\n\r\n        // Fetch the price (excluding the usage fee)\r\n        uint256 sharesAvailable = getERC20Balance(DSHSContractAddress);\r\n        uint256 price = getCumulatedPrice(numberOfSharesToBuy, sharesAvailable);\r\n\r\n        // Check that there are enough shares available\r\n        require(sharesAvailable >= numberOfSharesToBuy, \"Not enough shares available\");\r\n\r\n       // Compute usage fee\r\n        uint256 usageFee = price.mul(usageFeeBSP).div(10000);\r\n\r\n        // Check that allowance is set XCHF balance is sufficient to cover price + usage fee\r\n        require(getERC20Available(XCHFContractAddress, buyer) >= price.add(usageFee), \"Payment not authorized or funds insufficient\");\r\n\r\n        // Instantiate contracts\r\n        ERC20 DSHS = ERC20(DSHSContractAddress);\r\n        ERC20 XCHF = ERC20(XCHFContractAddress);\r\n\r\n        // Transfer usage fee and total price\r\n        require(XCHF.transferFrom(buyer, usageFeeAddress, usageFee), \"Usage fee transfer failed\");\r\n        require(XCHF.transferFrom(buyer, address(this), price), \"XCHF payment failed\");\r\n\r\n        // Transfer the shares\r\n        require(DSHS.transfer(buyer, numberOfSharesToBuy), \"Share transfer failed\");\r\n        uint256 nextPrice = getCumulatedPrice(1, sharesAvailable.sub(numberOfSharesToBuy));\r\n        emit SharesPurchased(buyer, numberOfSharesToBuy, price, nextPrice);\r\n        return true;\r\n    }\r\n\r\n    // Function for selling shares\r\n\r\n    function sellShares(address seller, uint256 numberOfSharesToSell, uint256 limitInXCHF) public whenNotPaused() returns (bool) {\r\n\r\n        // Check that selling is enabled\r\n        require(sellEnabled, \"Selling is currenty disabled\");\r\n        require(numberOfSharesToSell >= minVolume, \"Volume too low\");\r\n\r\n        // Check user is allowed to trigger sale;\r\n        require(msg.sender == seller || msg.sender == backendAddress, \"You do not have permission to trigger selling shares for someone else.\");\r\n\r\n        uint256 XCHFAvailable = getERC20Balance(XCHFContractAddress);\r\n        uint256 sharesAvailable = getERC20Balance(DSHSContractAddress);\r\n\r\n        // The full price. The usage fee is deducted from this to obtain the seller's payout\r\n        uint256 price = getCumulatedBuyBackPrice(numberOfSharesToSell, sharesAvailable);\r\n        require(limitInXCHF <= price, \"Price too low\");\r\n\r\n        // Check that XCHF reserve is sufficient\r\n        require(XCHFAvailable >= price, \"Reserves to small to buy back this amount of shares\");\r\n\r\n        // Check that seller has sufficient shares and allowance is set\r\n        require(getERC20Available(DSHSContractAddress, seller) >= numberOfSharesToSell, \"Seller doesn't have enough shares\");\r\n\r\n        // Instantiate contracts\r\n        ERC20 DSHS = ERC20(DSHSContractAddress);\r\n        ERC20 XCHF = ERC20(XCHFContractAddress);\r\n\r\n        // Transfer the shares\r\n        require(DSHS.transferFrom(seller, address(this), numberOfSharesToSell), \"Share transfer failed\");\r\n\r\n        // Compute usage fee\r\n        uint256 usageFee = price.mul(usageFeeBSP).div(10000);\r\n\r\n        // Transfer usage fee and buyback price\r\n        require(XCHF.transfer(usageFeeAddress, usageFee), \"Usage fee transfer failed\");\r\n        require(XCHF.transfer(seller, price.sub(usageFee)), \"XCHF payment failed\");\r\n        uint256 nextPrice = getCumulatedBuyBackPrice(1, sharesAvailable.add(numberOfSharesToSell));\r\n        emit SharesSold(seller, numberOfSharesToSell, price, nextPrice);\r\n        return true;\r\n    }\r\n\r\n    // Getters for ERC20 balances (for convenience)\r\n\r\n    function getERC20Balance(address contractAddress) public view returns (uint256) {\r\n        ERC20 contractInstance = ERC20(contractAddress);\r\n        return contractInstance.balanceOf(address(this));\r\n    }\r\n\r\n    function getERC20Available(address contractAddress, address owner) public view returns (uint256) {\r\n        ERC20 contractInstance = ERC20(contractAddress);\r\n        uint256 allowed = contractInstance.allowance(owner, address(this));\r\n        uint256 bal = contractInstance.balanceOf(owner);\r\n        return (allowed <= bal) ? allowed : bal;\r\n    }\r\n\r\n    // Price getters\r\n\r\n    function getCumulatedPrice(uint256 amount, uint256 supply) public view returns (uint256) {\r\n        uint256 cumulatedPrice = 0;\r\n        if (supply <= initialNumberOfShares) {\r\n            uint256 first = initialNumberOfShares.add(1).sub(supply);\r\n            uint256 last = first.add(amount).sub(1);\r\n            cumulatedPrice = helper(first, last);\r\n        } else if (supply.sub(amount) >= initialNumberOfShares) {\r\n            cumulatedPrice = minPriceInXCHF.mul(amount);\r\n        } else {\r\n            cumulatedPrice = supply.sub(initialNumberOfShares).mul(minPriceInXCHF);\r\n            uint256 first = 1;\r\n            uint256 last = amount.sub(supply.sub(initialNumberOfShares));\r\n            cumulatedPrice = cumulatedPrice.add(helper(first,last));\r\n        }\r\n\r\n        return cumulatedPrice;\r\n    }\r\n\r\n    function getCumulatedBuyBackPrice(uint256 amount, uint256 supply) public view returns (uint256) {\r\n        return getCumulatedPrice(amount, supply.add(amount)); // For symmetry reasons\r\n    }\r\n\r\n    // Function to retrieve DSHS or XCHF from contract\r\n    // This can also be used to retrieve any other ERC-20 token sent to the smart contract by accident\r\n\r\n    function retrieveERC20(address contractAddress, address to, uint256 amount) public onlyOwner() returns(bool) {\r\n        ERC20 contractInstance = ERC20(contractAddress);\r\n        require(contractInstance.transfer(to, amount), \"Transfer failed\");\r\n        emit TokensRetrieved(contractAddress, to, amount);\r\n        return true;\r\n    }\r\n\r\n    // Setters for addresses\r\n\r\n    function setXCHFContractAddress(address newXCHFContractAddress) public onlyOwner() {\r\n        require(newXCHFContractAddress != address(0), \"XCHF does not reside at address 0\");\r\n        XCHFContractAddress = newXCHFContractAddress;\r\n        emit XCHFContractAddressSet(XCHFContractAddress);\r\n    }\r\n\r\n    function setDSHSContractAddress(address newDSHSContractAddress) public onlyOwner() {\r\n        require(newDSHSContractAddress != address(0), \"DSHS does not reside at address 0\");\r\n        DSHSContractAddress = newDSHSContractAddress;\r\n        emit DSHSContractAddressSet(DSHSContractAddress);\r\n    }\r\n\r\n    function setUsageFeeAddress(address newUsageFeeAddress) public onlyOwner() {\r\n        require(newUsageFeeAddress != address(0), \"DSHS does not reside at address 0\");\r\n        usageFeeAddress = newUsageFeeAddress;\r\n        emit UsageFeeAddressSet(usageFeeAddress);\r\n    }\r\n\r\n    function setBackendAddress(address newBackendAddress) public onlyOwner() {\r\n        backendAddress = newBackendAddress;\r\n    }\r\n\r\n    // Setters for constants\r\n\r\n    function setUsageFee(uint256 newUsageFeeInBSP) public onlyOwner() {\r\n        require(newUsageFeeInBSP <= 10000, \"Usage fee must be given in basis points\");\r\n        usageFeeBSP = newUsageFeeInBSP;\r\n        emit UsageFeeSet(usageFeeBSP);\r\n    }\r\n\r\n    function setMinVolume(uint256 newMinVolume) public onlyOwner() {\r\n        require(newMinVolume > 0, \"Minimum volume can't be zero\");\r\n        minVolume = newMinVolume;\r\n        emit MinVolumeSet(minVolume);\r\n    }\r\n\r\n    function setminPriceInXCHF(uint256 newMinPriceInRappen) public onlyOwner() {\r\n        require(newMinPriceInRappen > 0, \"Price must be positive number\");\r\n        minPriceInXCHF = newMinPriceInRappen.mul(10**16);\r\n        require(minPriceInXCHF <= maxPriceInXCHF, \"Minimum price cannot exceed maximum price\");\r\n        emit MinPriceSet(minPriceInXCHF);\r\n    }\r\n\r\n    function setmaxPriceInXCHF(uint256 newMaxPriceInRappen) public onlyOwner() {\r\n        require(newMaxPriceInRappen > 0, \"Price must be positive number\");\r\n        maxPriceInXCHF = newMaxPriceInRappen.mul(10**16);\r\n        require(minPriceInXCHF <= maxPriceInXCHF, \"Minimum price cannot exceed maximum price\");\r\n        emit MaxPriceSet(maxPriceInXCHF);\r\n    }\r\n\r\n    function setInitialNumberOfShares(uint256 newInitialNumberOfShares) public onlyOwner() {\r\n        require(newInitialNumberOfShares > 0, \"Initial number of shares must be positive\");\r\n        initialNumberOfShares = newInitialNumberOfShares;\r\n        emit InitialNumberOfSharesSet(initialNumberOfShares);\r\n    }\r\n\r\n    // Enable buy and sell separately\r\n\r\n    function buyStatus(bool newStatus) public onlyOwner() {\r\n        buyEnabled = newStatus;\r\n        emit BuyStatusChanged(newStatus);\r\n    }\r\n\r\n    function sellStatus(bool newStatus) public onlyOwner() {\r\n        sellEnabled = newStatus;\r\n        emit SellStatusChanged(newStatus);\r\n    }\r\n\r\n    // Helper functions\r\n\r\n    function helper(uint256 first, uint256 last) internal view returns (uint256) {\r\n        uint256 tempa = last.sub(first).add(1).mul(minPriceInXCHF);                                   // (l-m+1)*p_min\r\n        uint256 tempb = maxPriceInXCHF.sub(minPriceInXCHF).div(initialNumberOfShares.sub(1)).div(2);  // (p_max-p_min)/(2(N-1))\r\n        uint256 tempc = last.mul(last).add(first.mul(3)).sub(last).sub(first.mul(first)).sub(2);      // l*l+3*m-l-m*m-2)\r\n        return tempb.mul(tempc).add(tempa);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/uniswap/UniswapExchangeInterface.sol\r\n\r\npragma solidity 0.5.10;\r\n\r\ncontract UniswapExchangeInterface {\r\n    // Address of ERC20 token sold on this exchange\r\n    function tokenAddress() external view returns (address token);\r\n    // Address of Uniswap Factory\r\n    function factoryAddress() external view returns (address factory);\r\n    // Provide Liquidity\r\n    function addLiquidity(uint256 min_liquidity, uint256 max_tokens, uint256 deadline) external payable returns (uint256);\r\n    function removeLiquidity(uint256 amount, uint256 min_eth, uint256 min_tokens, uint256 deadline) external returns (uint256, uint256);\r\n    // Get Prices\r\n    function getEthToTokenInputPrice(uint256 eth_sold) external view returns (uint256 tokens_bought);\r\n    function getEthToTokenOutputPrice(uint256 tokens_bought) external view returns (uint256 eth_sold);\r\n    function getTokenToEthInputPrice(uint256 tokens_sold) external view returns (uint256 eth_bought);\r\n    function getTokenToEthOutputPrice(uint256 eth_bought) external view returns (uint256 tokens_sold);\r\n    // Trade ETH to ERC20\r\n    function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline) external payable returns (uint256  tokens_bought);\r\n    function ethToTokenTransferInput(uint256 min_tokens, uint256 deadline, address recipient) external payable returns (uint256  tokens_bought);\r\n    function ethToTokenSwapOutput(uint256 tokens_bought, uint256 deadline) external payable returns (uint256  eth_sold);\r\n    function ethToTokenTransferOutput(uint256 tokens_bought, uint256 deadline, address recipient) external payable returns (uint256  eth_sold);\r\n    // Trade ERC20 to ETH\r\n    function tokenToEthSwapInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline) external returns (uint256  eth_bought);\r\n    function tokenToEthTransferInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline, address recipient) external returns (uint256  eth_bought);\r\n    function tokenToEthSwapOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline) external returns (uint256  tokens_sold);\r\n    function tokenToEthTransferOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline, address recipient) external returns (uint256  tokens_sold);\r\n    // Trade ERC20 to ERC20\r\n    function tokenToTokenSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address token_addr) external returns (uint256  tokens_bought);\r\n    function tokenToTokenTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_bought);\r\n    function tokenToTokenSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address token_addr) external returns (uint256  tokens_sold);\r\n    function tokenToTokenTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_sold);\r\n    // Trade ERC20 to Custom Pool\r\n    function tokenToExchangeSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address exchange_addr) external returns (uint256  tokens_bought);\r\n    function tokenToExchangeTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_bought);\r\n    function tokenToExchangeSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address exchange_addr) external returns (uint256  tokens_sold);\r\n    function tokenToExchangeTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_sold);\r\n    // ERC20 comaptibility for liquidity tokens\r\n    bytes32 public name;\r\n    bytes32 public symbol;\r\n    uint256 public decimals;\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 value) external returns (bool);\r\n    function approve(address _spender, uint256 _value) external returns (bool);\r\n    function allowance(address _owner, address _spender) external view returns (uint256);\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    // Never use\r\n    function setup(address token_addr) external;\r\n}\r\n\r\n// File: contracts/DispenserAdapter.sol\r\n\r\n/**\r\n* MIT License with Automated License Fee Payments\r\n*\r\n* Copyright (c) 2019 Equility AG (alethena.com)\r\n*\r\n* Permission is hereby granted to any person obtaining a copy of this software\r\n* and associated documentation files (the \"Software\"), to deal in the Software\r\n* without restriction, including without limitation the rights to use, copy,\r\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n* Software, and to permit persons to whom the Software is furnished to do so,\r\n* subject to the following conditions:\r\n*\r\n* - The above copyright notice and this permission notice shall be included in\r\n*   all copies or substantial portions of the Software.\r\n* - All automated license fee payments integrated into this and related Software\r\n*   are preserved.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Dispenser Adapter\r\n * @author Benjamin Rickenbacher, benjamin@alethena.com\r\n *\r\n * This contract serves as a bridge between the Alethena Share Dispenser and Uniswap (https://uniswap.io/).\r\n * By calling the function 'buySharesWithEther', users can pay for shares directly in native Ether.\r\n * The adapter then calls the Uniswap Crypto Francs (XCHF) instance to swap the Ether amount for XCHF.\r\n * This way, the user never needs to know about XCHF and the Share Dispenser never directly has to accept Ether.\r\n * In principle, this process could fail (e.g. if the price in Uniswap slips due to another transaction). In this case\r\n * the transaction would fail entirely but the gas used up to that point would be lost.\r\n */\r\n\r\npragma solidity 0.5.10;\r\n\r\ncontract DispenserAdapter {\r\n\r\n    IERC20 private currency;\r\n    IERC20 private tradedToken;\r\n    ShareDispenser private dispenser;\r\n    UniswapExchangeInterface private uniswap;\r\n\r\n    constructor(address currencyAddress, address tradedTokenAddress, address payable dispenserAddress, address uniswapAddress) public {\r\n        currency = IERC20(currencyAddress);\r\n        tradedToken = IERC20(tradedTokenAddress);\r\n        dispenser = ShareDispenser(dispenserAddress);\r\n        uniswap = UniswapExchangeInterface(uniswapAddress);\r\n    }\r\n\r\n    function getBuyPriceInXCHF(uint256 numberToBuy) public view returns (uint256) {\r\n        uint256 supply = tradedToken.balanceOf(address(dispenser));\r\n        uint256 priceInXCHF = dispenser.getCumulatedPrice(numberToBuy, supply);\r\n        return priceInXCHF;\r\n    }\r\n\r\n    function getBuyPriceInWei(uint256 numberToBuy) public view returns (uint256) {\r\n        uint256 priceInXCHF = getBuyPriceInXCHF(numberToBuy);\r\n        uint256 priceInEther = uniswap.getEthToTokenOutputPrice(priceInXCHF);\r\n        return priceInEther;\r\n    }\r\n\r\n    function buySharesWithEther(uint256 numberToBuy) public payable returns (bool) {\r\n        uint256 priceInXCHF = getBuyPriceInXCHF(numberToBuy);\r\n        uint256 priceInEther = uniswap.getEthToTokenOutputPrice(priceInXCHF);\r\n        require(msg.value >= priceInEther, \"Insufficient Ether\");\r\n        require(uniswap.ethToTokenSwapOutput.value(priceInEther)(priceInXCHF, block.timestamp) >= priceInEther, \"Swap at Uniswap failed\");\r\n        require(currency.approve(address(dispenser), priceInXCHF), \"Allowance failed\");\r\n        require(dispenser.buyShares(address(this), numberToBuy), \"Dispenser transaction failed\");\r\n        require(tradedToken.transfer(msg.sender, numberToBuy), \"Token transfer failed\");\r\n        uint256 contractEtherBalance = address(this).balance;\r\n        msg.sender.transfer(contractEtherBalance);\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"numberToBuy\",\"type\":\"uint256\"}],\"name\":\"buySharesWithEther\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"numberToBuy\",\"type\":\"uint256\"}],\"name\":\"getBuyPriceInXCHF\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"numberToBuy\",\"type\":\"uint256\"}],\"name\":\"getBuyPriceInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"currencyAddress\",\"type\":\"address\"},{\"name\":\"tradedTokenAddress\",\"type\":\"address\"},{\"name\":\"dispenserAddress\",\"type\":\"address\"},{\"name\":\"uniswapAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"DispenserAdapter","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b4272071ecadd69d933adcd19ca99fe80664fc08000000000000000000000000414324b0aba49fb14cbfb37be40d8d78a2edf4470000000000000000000000006666f4aac97c9a9d40ef04f086805a6fb54de3950000000000000000000000008de0d002dc83478f479dc31f76cb0a8aa7ccea17","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://bc7643bcc30d810576ed1234c9f35732d68886ecbb53b0291ff37afebddf7f45"}]}