{"status":"1","message":"OK","result":[{"SourceCode":"//diversified currency basket generation\r\n//Slightly similar to  Facebook's proposed Libra (Chinese Yuan replaced with CHF, as Synthetix does not support Chinese Yuan as of publication)\r\n//Will be available on www.structuredeth.com soon\r\n//Synthetix enforces a low gas price to prevent front-running, so be sure to check that, or the transaction will fail. At the time of this publication, 2 gwei usally worked, but you can get the value from Synthetix's smart contract\r\n\r\n/*\r\nBasket Generated from Eth:\r\n\r\nUSD - 42%\r\nEUR - 32%\r\nSwiss Franc (CHF) - 11%\r\nJPY - 8%\r\nSterling (GBP) - 7%\r\n\r\n\r\n*/\r\n\r\ninterface ERC20 {\r\n    function totalSupply() public view returns (uint supply);\r\n    function balanceOf(address _owner) public view returns (uint balance);\r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n    function approve(address _spender, uint _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint remaining);\r\n    function decimals() public view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n\r\ncontract synthMainInterface{\r\n    function minimumDepositAmount (  ) external view returns ( uint256 );\r\n  function exchangeEtherForSynthsAtRate ( uint256 guaranteedRate ) external payable returns ( uint256 );\r\n  function synthsReceivedForEther ( uint256 amount ) external view returns ( uint256 );\r\n  function synth (  ) external view returns ( address );\r\n  function exchangeSynthsForSynthetix ( uint256 synthAmount ) external returns ( uint256 );\r\n  function nominateNewOwner ( address _owner ) external;\r\n  function setPaused ( bool _paused ) external;\r\n  function initiationTime (  ) external view returns ( uint256 );\r\n  function exchangeEtherForSynths (  ) external payable returns ( uint256 );\r\n  function setSelfDestructBeneficiary ( address _beneficiary ) external;\r\n  function fundsWallet (  ) external view returns ( address );\r\n  function priceStalePeriod (  ) external view returns ( uint256 );\r\n  function setPriceStalePeriod ( uint256 _time ) external;\r\n  function terminateSelfDestruct (  ) external;\r\n  function setSynth ( address _synth ) external;\r\n  function pricesAreStale (  ) external view returns ( bool );\r\n  function updatePrices ( uint256 newEthPrice, uint256 newSynthetixPrice, uint256 timeSent ) external;\r\n  function lastPriceUpdateTime (  ) external view returns ( uint256 );\r\n  function totalSellableDeposits (  ) external view returns ( uint256 );\r\n  function nominatedOwner (  ) external view returns ( address );\r\n  function exchangeSynthsForSynthetixAtRate ( uint256 synthAmount, uint256 guaranteedRate ) external returns ( uint256 );\r\n  function paused (  ) external view returns ( bool );\r\n  function setFundsWallet ( address _fundsWallet ) external;\r\n  function depositStartIndex (  ) external view returns ( uint256 );\r\n  function synthetix (  ) external view returns ( address );\r\n  function acceptOwnership (  ) external;\r\n  function exchangeEtherForSynthetix (  ) external payable returns ( uint256 );\r\n  function setOracle ( address _oracle ) external;\r\n  function exchangeEtherForSynthetixAtRate ( uint256 guaranteedEtherRate, uint256 guaranteedSynthetixRate ) external payable returns ( uint256 );\r\n  function oracle (  ) external view returns ( address );\r\n  function withdrawMyDepositedSynths (  ) external;\r\n  function owner (  ) external view returns ( address );\r\n  function lastPauseTime (  ) external view returns ( uint256 );\r\n  function selfDestruct (  ) external;\r\n  function synthetixReceivedForSynths ( uint256 amount ) external view returns ( uint256 );\r\n  function SELFDESTRUCT_DELAY (  ) external view returns ( uint256 );\r\n  function setMinimumDepositAmount ( uint256 _amount ) external;\r\n  function feePool (  ) external view returns ( address );\r\n  function deposits ( uint256 ) external view returns ( address user, uint256 amount );\r\n  function selfDestructInitiated (  ) external view returns ( bool );\r\n  function usdToEthPrice (  ) external view returns ( uint256 );\r\n  function initiateSelfDestruct (  ) external;\r\n  function tokenFallback ( address from, uint256 amount, bytes data ) external returns ( bool );\r\n  function selfDestructBeneficiary (  ) external view returns ( address );\r\n  function smallDeposits ( address ) external view returns ( uint256 );\r\n  function synthetixReceivedForEther ( uint256 amount ) external view returns ( uint256 );\r\n  function depositSynths ( uint256 amount ) external;\r\n  function withdrawSynthetix ( uint256 amount ) external;\r\n  function usdToSnxPrice (  ) external view returns ( uint256 );\r\n  function ORACLE_FUTURE_LIMIT (  ) external view returns ( uint256 );\r\n  function depositEndIndex (  ) external view returns ( uint256 );\r\n  function setSynthetix ( address _synthetix ) external;\r\n}\r\n\r\ncontract synthConvertInterface{\r\n    function name (  ) external view returns ( string );\r\n  function setGasPriceLimit ( uint256 _gasPriceLimit ) external;\r\n  function approve ( address spender, uint256 value ) external returns ( bool );\r\n  function removeSynth ( bytes32 currencyKey ) external;\r\n  function issueSynths ( bytes32 currencyKey, uint256 amount ) external;\r\n  function mint (  ) external returns ( bool );\r\n  function setIntegrationProxy ( address _integrationProxy ) external;\r\n  function nominateNewOwner ( address _owner ) external;\r\n  function initiationTime (  ) external view returns ( uint256 );\r\n  function totalSupply (  ) external view returns ( uint256 );\r\n  function setFeePool ( address _feePool ) external;\r\n  function exchange ( bytes32 sourceCurrencyKey, uint256 sourceAmount, bytes32 destinationCurrencyKey, address destinationAddress ) external returns ( bool );\r\n  function setSelfDestructBeneficiary ( address _beneficiary ) external;\r\n  function transferFrom ( address from, address to, uint256 value ) external returns ( bool );\r\n  function decimals (  ) external view returns ( uint8 );\r\n  function synths ( bytes32 ) external view returns ( address );\r\n  function terminateSelfDestruct (  ) external;\r\n  function rewardsDistribution (  ) external view returns ( address );\r\n  function exchangeRates (  ) external view returns ( address );\r\n  function nominatedOwner (  ) external view returns ( address );\r\n  function setExchangeRates ( address _exchangeRates ) external;\r\n  function effectiveValue ( bytes32 sourceCurrencyKey, uint256 sourceAmount, bytes32 destinationCurrencyKey ) external view returns ( uint256 );\r\n  function transferableSynthetix ( address account ) external view returns ( uint256 );\r\n  function validateGasPrice ( uint256 _givenGasPrice ) external view;\r\n  function balanceOf ( address account ) external view returns ( uint256 );\r\n  function availableCurrencyKeys (  ) external view returns ( bytes32[] );\r\n  function acceptOwnership (  ) external;\r\n  function remainingIssuableSynths ( address issuer, bytes32 currencyKey ) external view returns ( uint256 );\r\n  function availableSynths ( uint256 ) external view returns ( address );\r\n  function totalIssuedSynths ( bytes32 currencyKey ) external view returns ( uint256 );\r\n  function addSynth ( address synth ) external;\r\n  function owner (  ) external view returns ( address );\r\n  function setExchangeEnabled ( bool _exchangeEnabled ) external;\r\n  function symbol (  ) external view returns ( string );\r\n  function gasPriceLimit (  ) external view returns ( uint256 );\r\n  function setProxy ( address _proxy ) external;\r\n  function selfDestruct (  ) external;\r\n  function integrationProxy (  ) external view returns ( address );\r\n  function setTokenState ( address _tokenState ) external;\r\n  function collateralisationRatio ( address issuer ) external view returns ( uint256 );\r\n  function rewardEscrow (  ) external view returns ( address );\r\n  function SELFDESTRUCT_DELAY (  ) external view returns ( uint256 );\r\n  function collateral ( address account ) external view returns ( uint256 );\r\n  function maxIssuableSynths ( address issuer, bytes32 currencyKey ) external view returns ( uint256 );\r\n  function transfer ( address to, uint256 value ) external returns ( bool );\r\n  function synthInitiatedExchange ( address from, bytes32 sourceCurrencyKey, uint256 sourceAmount, bytes32 destinationCurrencyKey, address destinationAddress ) external returns ( bool );\r\n  function transferFrom ( address from, address to, uint256 value, bytes data ) external returns ( bool );\r\n  function feePool (  ) external view returns ( address );\r\n  function selfDestructInitiated (  ) external view returns ( bool );\r\n  function setMessageSender ( address sender ) external;\r\n  function initiateSelfDestruct (  ) external;\r\n  function transfer ( address to, uint256 value, bytes data ) external returns ( bool );\r\n  function supplySchedule (  ) external view returns ( address );\r\n  function selfDestructBeneficiary (  ) external view returns ( address );\r\n  function setProtectionCircuit ( bool _protectionCircuitIsActivated ) external;\r\n  function debtBalanceOf ( address issuer, bytes32 currencyKey ) external view returns ( uint256 );\r\n  function synthetixState (  ) external view returns ( address );\r\n  function availableSynthCount (  ) external view returns ( uint256 );\r\n  function allowance ( address owner, address spender ) external view returns ( uint256 );\r\n  function escrow (  ) external view returns ( address );\r\n  function tokenState (  ) external view returns ( address );\r\n  function burnSynths ( bytes32 currencyKey, uint256 amount ) external;\r\n  function proxy (  ) external view returns ( address );\r\n  function issueMaxSynths ( bytes32 currencyKey ) external;\r\n  function exchangeEnabled (  ) external view returns ( bool );\r\n}\r\n\r\n\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n   \r\n    contract Portfolio1 {\r\n\r\n       \r\n       synthMainInterface sInt = synthMainInterface(0x172e09691dfbbc035e37c73b62095caa16ee2388);\r\n\r\n       synthConvertInterface sIntJPY = synthConvertInterface(0x42d03f506c2308ecd06ae81d8fa22352bc7a8f2b);\r\n       synthConvertInterface sIntEUR = synthConvertInterface(0xc011a72400e58ecd99ee497cf89e3775d4bd732f);\r\n        synthConvertInterface sIntCHF = synthConvertInterface(0xc011a72400e58ecd99ee497cf89e3775d4bd732f);\r\n         synthConvertInterface sIntGBP = synthConvertInterface(0xc011a72400e58ecd99ee497cf89e3775d4bd732f);\r\n       \r\n       \r\n\r\n       address jpyTokenAddress = 0xf6b1c627e95bfc3c1b4c9b825a032ff0fbf3e07d;\r\n       address eurTokenAddress = 0xd71ecff9342a5ced620049e616c5035f1db98620;\r\n       address chfTokenAddress = 0x0f83287ff768d1c1e17a42f44d644d7f22e8ee1d;\r\n       address gbpTokenAddress = 0x97fe22e7341a0cd8db6f6c021a24dc8f4dad855f;\r\n       address usdTokenAddress = 0x57ab1e02fee23774580c119740129eac7081e9d3;\r\n\r\n       ERC20 jpyToken = ERC20(jpyTokenAddress);\r\n       ERC20 eurToken = ERC20(eurTokenAddress);\r\n       ERC20 chfToken = ERC20(chfTokenAddress);\r\n       ERC20 gbpToken = ERC20(gbpTokenAddress);\r\n       ERC20 usdToken = ERC20(usdTokenAddress);\r\n\r\n      \r\n        //sUSD code\r\n        bytes32 sourceKey= 0x7355534400000000000000000000000000000000000000000000000000000000;\r\n\r\n        //sJPY code\r\n        bytes32 destKeyJPY = 0x734a505900000000000000000000000000000000000000000000000000000000;\r\n\r\n\r\n         //sEUR code\r\n        bytes32 destKeyEUR = 0x7345555200000000000000000000000000000000000000000000000000000000;\r\n\r\n         //sCHF code\r\n        bytes32 destKeyCHF = 0x7343484600000000000000000000000000000000000000000000000000000000;\r\n\r\n\r\n         //sCHF code\r\n        bytes32 destKeyGBP = 0x7347425000000000000000000000000000000000000000000000000000000000;\r\n\r\n\r\n\r\n    \r\n        uint256 sUSDBack = 0;\r\n\r\n        using SafeMath for uint256;\r\n        \r\n       \r\n    \r\n\r\n       \r\n        function () payable{\r\n\r\n          buyPackage();\r\n          \r\n        }\r\n        \r\n        \r\n        function getLastUSDBack() constant returns (uint256){\r\n            return sUSDBack;\r\n        }\r\n\r\n       \r\n\r\n\r\n        function buyPackage() payable returns(bool){\r\n\r\n         \r\n\r\n\r\n           \r\n            uint256 amountEthUsing = msg.value;\r\n            \r\n            \r\n\r\n            sUSDBack= sInt.exchangeEtherForSynths.value(amountEthUsing)();\r\n\r\n            uint256 usdPortion = sUSDBack.mul(42).div(100);\r\n            uint256 eurPortion = sUSDBack.mul(32).div(100);\r\n            uint256 chfPortion = sUSDBack.mul(11).div(100);\r\n            uint256 jpyPortion = sUSDBack.mul(8).div(100);\r\n            uint256 gbpPortion = sUSDBack.mul(7).div(100);\r\n\r\n\r\n            sIntEUR.exchange(sourceKey, eurPortion, destKeyEUR, this);\r\n            sIntCHF.exchange(sourceKey, chfPortion, destKeyCHF, this);\r\n            sIntJPY.exchange(sourceKey, jpyPortion, destKeyJPY, this);\r\n            sIntGBP.exchange(sourceKey, gbpPortion, destKeyGBP, this);\r\n\r\n           \r\n            uint256 amountUSD= usdToken.balanceOf(this);\r\n            usdToken.transfer(msg.sender, amountUSD);\r\n\r\n            uint256 amountEUR = eurToken.balanceOf(this);\r\n            eurToken.transfer(msg.sender, amountEUR);\r\n\r\n            uint256 amountCHF = chfToken.balanceOf(this);\r\n            chfToken.transfer(msg.sender, amountCHF);\r\n\r\n            uint256 amountJPY = jpyToken.balanceOf(this);\r\n            jpyToken.transfer(msg.sender, amountJPY);\r\n\r\n            uint256 amountGBP = gbpToken.balanceOf(this);\r\n            gbpToken.transfer(msg.sender, amountGBP);\r\n\r\n\r\n            return true;\r\n\r\n        }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getLastUSDBack\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyPackage\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Portfolio1","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://43b6d953440ec7de2cd1d4a2b9bf5a17b93918e5d32847cd74817a1aa5ed2834"}]}