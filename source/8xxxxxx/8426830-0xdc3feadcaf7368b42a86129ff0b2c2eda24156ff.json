{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.11;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address payable public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), owner);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address payable newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address payable newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract x2jpCredit is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    uint public depositAmount;\r\n    uint public minCreditAmount;\r\n    uint public currentPaymentIndex;\r\n\r\n    uint public depPercent;\r\n    uint public ownerPercent;\r\n    uint public jpPercent;\r\n    uint public creditPercent;\r\n\r\n    uint public lastWinnerPeriod;\r\n    uint public jackpotAmount;\r\n\r\n    uint public amountRaised;\r\n\r\n    struct Deposit {\r\n        address payable depositor;\r\n        uint amount;\r\n        uint payout;\r\n        uint paymentTime;\r\n        uint payoutTime;\r\n    }\r\n\r\n    // list of all deposites\r\n    Deposit[] public deposits;\r\n    // list of user deposits\r\n    mapping (address => uint[]) public depositors;\r\n\r\n    struct Credit {\r\n        address payable creditor;\r\n        uint amount;\r\n        uint payout;\r\n        uint paid;\r\n    }\r\n\r\n    struct CreditPayout {\r\n        address creditor;\r\n        uint payout;\r\n        uint paymentTime;\r\n    }\r\n\r\n    Credit[] public credits;\r\n    CreditPayout[] public creditPayouts;\r\n\r\n    mapping (address => uint[]) public creditors;\r\n    uint public currentCreditIndex;\r\n\r\n    mapping(address => address payable) public userReferral;\r\n\r\n    bool public paused;\r\n    uint public betPeriod;\r\n    uint public lastPayoutTime;\r\n    uint public lastDepId;\r\n\r\n    struct Jack {\r\n        address winner;\r\n        uint amount;\r\n        uint time;\r\n    }\r\n\r\n    Jack public lastJack;\r\n\r\n    event OnDepositReceived(address investorAddress, uint value);\r\n    event OnPaymentSent(address investorAddress, uint value);\r\n    event OnCreditReceived(address investorAddress, uint value);\r\n    event OnCreditPaid(address investorAddress, uint value);\r\n    event OnJackpotAdd(uint value);\r\n\r\n    constructor () public {\r\n        depositAmount = 10000000000000000; // 0.01 eth\r\n        minCreditAmount = 10000000000000000;\r\n        depPercent = 130;\r\n        ownerPercent = 10;\r\n        jpPercent = 10;\r\n        creditPercent = 120;\r\n        lastWinnerPeriod = 1800;\r\n        betPeriod = 1800;\r\n    }\r\n\r\n\r\n    function () external payable {\r\n        if (msg.value > 0) {\r\n            uint betsCount = msg.value.div(depositAmount);\r\n            uint weiAmount =  depositAmount.mul(betsCount);\r\n            uint _diff = msg.value.sub(weiAmount);\r\n\r\n            if (_diff > 0) {\r\n                msg.sender.transfer(_diff);\r\n            }\r\n\r\n            payoutJackpot(weiAmount);\r\n            if (!paused) {\r\n                makeDeposit(weiAmount, betsCount);\r\n            } else {\r\n                msg.sender.transfer(weiAmount);\r\n            }\r\n        } else {\r\n            payDeposits(0);\r\n            payoutJackpot(0);\r\n        }\r\n    }\r\n\r\n\r\n    function makeDeposit(uint weiAmount, uint betsCount) internal {\r\n        require(weiAmount >= depositAmount);\r\n        require(!paused);\r\n        //        payout();\r\n\r\n        amountRaised = amountRaised.add(weiAmount);\r\n        owner.transfer(weiAmount.mul(ownerPercent).div(100));\r\n\r\n        address payable referrer = bytesToAddress(msg.data);\r\n        if (referrer != msg.sender) userReferral[msg.sender] = referrer;\r\n\r\n        if (userReferral[msg.sender] != address(0)) {\r\n            userReferral[msg.sender].transfer(weiAmount.mul(5).div(100));\r\n        }\r\n\r\n        if (credits.length > 0 && currentCreditIndex < credits.length) {\r\n            uint val = weiAmount.mul(jpPercent).div(100);\r\n\r\n            for (uint i = currentCreditIndex; i < credits.length && val > 0; i++) {\r\n                if (credits[i].payout > credits[i].paid) {\r\n\r\n                    uint payout;\r\n\r\n                    if (credits[i].paid.add(val) <= credits[i].payout) {\r\n                        payout = val;\r\n                        val = 0;\r\n                        credits[i].creditor.send(payout);\r\n                        credits[i].paid = credits[i].paid.add(payout);\r\n                        CreditPayout memory newCreditPayout = CreditPayout(credits[i].creditor, payout, now);\r\n                        creditPayouts.push(newCreditPayout);\r\n\r\n                    } else {\r\n                        payout = credits[i].payout.sub(credits[i].paid);\r\n                        val = val.sub(payout);\r\n                        credits[i].creditor.send(payout);\r\n                        credits[i].paid = credits[i].paid.add(payout);\r\n                        CreditPayout memory newCreditPayout = CreditPayout(credits[i].creditor, payout, now);\r\n                        creditPayouts.push(newCreditPayout);\r\n                    }\r\n\r\n                    if (credits[i].paid == credits[i].payout) {\r\n                        currentCreditIndex += 1;\r\n                    }\r\n\r\n                    emit OnCreditPaid(credits[i].creditor, payout);\r\n                }\r\n\r\n            }\r\n\r\n            if (val > 0) {\r\n                jackpotAmount = jackpotAmount.add(val);\r\n                emit OnJackpotAdd(val);\r\n            }\r\n\r\n        } else {\r\n            uint jpVal = weiAmount.mul(jpPercent).div(100);\r\n            jackpotAmount = jackpotAmount.add(jpVal);\r\n            emit OnJackpotAdd(jpVal);\r\n        }\r\n\r\n\r\n\r\n        for (uint i = 0; i < betsCount; i++) {\r\n            uint paymentTime = now + i * betPeriod;\r\n            Deposit memory newDeposit = Deposit(msg.sender, depositAmount, depositAmount.mul(depPercent).div(100), paymentTime, 0);\r\n            deposits.push(newDeposit);\r\n            depositors[msg.sender].push(deposits.length - 1);\r\n            emit OnDepositReceived(msg.sender, depositAmount);\r\n\r\n            if (paymentTime > lastPayoutTime) {\r\n                lastPayoutTime = paymentTime;\r\n                lastDepId = deposits.length - 1;\r\n            }\r\n        }\r\n\r\n        payDeposits(0);\r\n    }\r\n\r\n\r\n    function payDeposits(uint _iterations) public{\r\n        _iterations = _iterations == 0 ? deposits.length: _iterations;\r\n\r\n        bool changePaymentIndex = true;\r\n\r\n        for (uint i = currentPaymentIndex;\r\n            i < _iterations && address(this).balance.sub(jackpotAmount) >= deposits[i].payout;\r\n            i++)\r\n        {\r\n            if (deposits[i].paymentTime <= now && deposits[i].payoutTime == 0) {\r\n                deposits[i].payoutTime = now;\r\n                deposits[i].depositor.send(deposits[i].payout);\r\n                emit OnPaymentSent(deposits[i].depositor, deposits[i].payout);\r\n            } else {\r\n                changePaymentIndex = false;\r\n            }\r\n\r\n            if (changePaymentIndex) currentPaymentIndex += 1;\r\n        }\r\n    }\r\n\r\n\r\n    function payoutJackpot(uint weiAmount) internal {\r\n        if (deposits.length > 0 && lastPayoutTime + lastWinnerPeriod < now && jackpotAmount > 0) {\r\n            uint val = jackpotAmount;\r\n            jackpotAmount = 0;\r\n\r\n            deposits[lastDepId].payoutTime = now;\r\n            deposits[lastDepId].payout = val;\r\n            deposits[lastDepId].depositor.send(val);\r\n            emit OnPaymentSent(deposits[lastDepId].depositor, val);\r\n            currentPaymentIndex = deposits.length; //if need pay jp + dep set to deposits.length -1\r\n            owner.transfer(address(this).balance - weiAmount);\r\n\r\n            lastJack.winner =  deposits[lastDepId].depositor;\r\n            lastJack.amount = val;\r\n            lastJack.time = now;\r\n            lastDepId = 0;\r\n            paused = true;\r\n        }\r\n    }\r\n\r\n\r\n    function getDepositsCount() public view returns (uint) {\r\n        return deposits.length;\r\n    }\r\n\r\n    function lastDepositId() public view returns (uint) {\r\n        return deposits.length - 1;\r\n    }\r\n\r\n    function getDeposit(uint _id) public view returns (address, uint, uint, uint, uint){\r\n        return (deposits[_id].depositor, deposits[_id].amount, deposits[_id].payout,\r\n        deposits[_id].paymentTime, deposits[_id].payoutTime);\r\n    }\r\n\r\n    function getUserDepositsCount(address depositor) public view returns (uint) {\r\n        return depositors[depositor].length;\r\n    }\r\n\r\n    function getUserDeposit(address depositor, uint depositNumber) public view returns(uint, uint, uint, uint, bool) {\r\n        bool nulled;\r\n        if (deposits[depositors[depositor][depositNumber]].payoutTime == 0\r\n        && depositors[depositor][depositNumber] < currentPaymentIndex) nulled = true;\r\n\r\n        return (deposits[depositors[depositor][depositNumber]].amount,\r\n        deposits[depositors[depositor][depositNumber]].payout,\r\n        deposits[depositors[depositor][depositNumber]].paymentTime,\r\n        deposits[depositors[depositor][depositNumber]].payoutTime,\r\n        nulled);\r\n    }\r\n\r\n\r\n    function getUserCreditsCount(address creditor) public view returns (uint) {\r\n        return creditors[creditor].length;\r\n    }\r\n\r\n    function getUserCredit(address creditor, uint creditNumber) public view returns(uint, uint, uint) {\r\n        return (credits[creditors[creditor][creditNumber]].amount,\r\n        credits[creditors[creditor][creditNumber]].payout,\r\n        credits[creditors[creditor][creditNumber]].paid);\r\n    }\r\n\r\n    // lastIndex from the end of payments lest (0 - last payment), returns: address of depositor, payment time, payment amount\r\n    function getPayment(uint lastIndex) public view returns (address, uint, uint, uint, uint) {\r\n        uint depositIndex = currentPaymentIndex.sub(lastIndex + 1);\r\n\r\n        return (deposits[depositIndex].depositor,\r\n        deposits[depositIndex].amount,\r\n        deposits[depositIndex].payout,\r\n        deposits[depositIndex].paymentTime,\r\n        deposits[depositIndex].payoutTime);\r\n    }\r\n\r\n\r\n    function getLastTenPayments() public view returns (\r\n        address[] memory dprs, uint[] memory paymentTime, uint[] memory payouts, uint )\r\n    {\r\n\r\n        dprs = new address[](10);\r\n        paymentTime = new uint[](10);\r\n        payouts = new uint[](10);\r\n\r\n        uint counter;\r\n        for (uint i = 0; counter < 10 && currentPaymentIndex - i > 0; i++) {\r\n            uint depositIndex = currentPaymentIndex.sub(i + 1);\r\n            if (deposits[depositIndex].payoutTime != 0) {\r\n                dprs[i] = deposits[depositIndex].depositor;\r\n                paymentTime[i] = deposits[depositIndex].paymentTime;\r\n                payouts[i] = deposits[depositIndex].payout;\r\n                counter++;\r\n            }\r\n        }\r\n\r\n        return (dprs, paymentTime, payouts, currentPaymentIndex);\r\n    }\r\n\r\n    function getNextTenPayouts() public view returns (address[] memory dprs, uint[] memory payouts, uint[] memory payoutsTime, uint) {\r\n        dprs = new address[](300);\r\n        payouts = new uint[](300);\r\n        payoutsTime = new uint[](300);\r\n        for (uint i = 0; i < 300 && currentPaymentIndex + i < deposits.length; i++) {\r\n            dprs[i] = deposits[currentPaymentIndex + i].depositor;\r\n            payouts[i] = deposits[currentPaymentIndex + i].payout;\r\n            payoutsTime[i] = deposits[currentPaymentIndex + i].paymentTime;\r\n        }\r\n\r\n        return (dprs, payouts, payoutsTime, currentPaymentIndex);\r\n    }\r\n\r\n    function getLastTenCreditPayments() public view returns (\r\n        address[] memory crds, uint[] memory paymentTime, uint[] memory payouts, uint )\r\n    {\r\n\r\n        crds = new address[](10);\r\n        paymentTime = new uint[](10);\r\n        payouts = new uint[](10);\r\n\r\n\r\n        for (uint i = 0; i < 10 && creditPayouts.length - i > 0 ; i++) {\r\n            uint payoutIndex = creditPayouts.length - (i + 1);\r\n            crds[i] = creditPayouts[payoutIndex].creditor;\r\n            paymentTime[i] = creditPayouts[payoutIndex].paymentTime;\r\n            payouts[i] = creditPayouts[payoutIndex].payout;\r\n        }\r\n\r\n        return (crds, paymentTime, payouts, creditPayouts.length);\r\n    }\r\n\r\n    function getNextTenCreditPayouts() public view returns (address[] memory crds, uint[] memory crdsAmounts, uint[] memory paid, uint[] memory payouts, uint) {\r\n        crds = new address[](10);\r\n        crdsAmounts = new uint[](10);\r\n        paid = new uint[](10);\r\n        payouts = new uint[](10);\r\n        for (uint i = 0; i < 10 && currentCreditIndex + i < credits.length; i++) {\r\n            crds[i] = credits[currentCreditIndex + i].creditor;\r\n            crdsAmounts[i] = credits[currentCreditIndex + i].amount;\r\n            paid[i] = credits[currentCreditIndex + i].paid;\r\n            payouts[i] = credits[currentCreditIndex + i].payout;\r\n        }\r\n\r\n        return (crds, crdsAmounts, paid, payouts, currentCreditIndex);\r\n    }\r\n\r\n\r\n    function getLastJack() public view returns (address, uint, uint) {\r\n        return (lastJack.winner, lastJack.amount, lastJack.time);\r\n    }\r\n\r\n    //_interval in seconds\r\n    function setLastWinnerPeriod(uint _interval) onlyOwner public {\r\n        require(_interval > 0);\r\n        lastWinnerPeriod = _interval;\r\n    }\r\n\r\n\r\n    function addJP(address payable _creditor) public payable returns (bool) {\r\n        require(msg.value >= minCreditAmount);\r\n        uint op = msg.value.mul(ownerPercent).div(100);\r\n        owner.transfer(op);\r\n\r\n        jackpotAmount = jackpotAmount.add(msg.value.sub(op));\r\n        Credit memory newCredit = Credit(_creditor, msg.value, msg.value.mul(creditPercent).div(100), 0);\r\n        credits.push(newCredit);\r\n\r\n        creditors[_creditor].push(credits.length - 1);\r\n        emit OnCreditReceived(_creditor, msg.value);\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    function bytesToAddress(bytes memory bys) private pure returns (address payable addr) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n\r\n    function start() onlyOwner public {\r\n        paused = false;\r\n    }\r\n}\r\n\r\n\r\ncontract addJp {\r\n    x2jpCredit public gameContract;\r\n\r\n    constructor(address payable _gameContract) public {\r\n        gameContract = x2jpCredit(_gameContract);\r\n    }\r\n\r\n    function() external payable {\r\n        if (msg.value > 0) {\r\n            require(gameContract.addJP.value(msg.value)(msg.sender));\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"credits\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"creditor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastDepositId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNextTenCreditPayouts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"crds\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"crdsAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"paid\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"payouts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastJack\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lastIndex\",\"type\":\"uint256\"}],\"name\":\"getPayment\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userReferral\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"creditPayouts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creditor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastDepId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"creditor\",\"type\":\"address\"}],\"name\":\"getUserCreditsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastWinnerPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDepositsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPayoutTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositNumber\",\"type\":\"uint256\"}],\"name\":\"getUserDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNextTenPayouts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"dprs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"payouts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"payoutsTime\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPaymentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"creditor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creditNumber\",\"type\":\"uint256\"}],\"name\":\"getUserCredit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minCreditAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastTenPayments\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"dprs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"paymentTime\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"payouts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_creditor\",\"type\":\"address\"}],\"name\":\"addJP\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getDeposit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_iterations\",\"type\":\"uint256\"}],\"name\":\"payDeposits\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoutTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastJack\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentCreditIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"betPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"getUserDepositsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastTenCreditPayments\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"crds\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"paymentTime\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"payouts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"}],\"name\":\"setLastWinnerPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jpPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creditPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"creditors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"investorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"OnDepositReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"investorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"OnPaymentSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"investorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"OnCreditReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"investorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"OnCreditPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"OnJackpotAdd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"x2jpCredit","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1315a47291691e90282104cfbd2ae96e6bef0a96bfe2acde0806868fc1b637fd"}]}