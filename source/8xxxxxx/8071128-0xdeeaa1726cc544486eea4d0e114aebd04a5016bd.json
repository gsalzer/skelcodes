{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.8;\r\n\r\ncontract IBNEST {\r\n    function totalSupply() public view returns (uint supply);\r\n    function balanceOf( address who ) public view returns (uint value);\r\n    function allowance( address owner, address spender ) public view returns (uint _allowance);\r\n\r\n    function transfer( address to, uint256 value) external;\r\n    function transferFrom( address from, address to, uint value) public returns (bool ok);\r\n    function approve( address spender, uint value ) public returns (bool ok);\r\n\r\n    event Transfer( address indexed from, address indexed to, uint value);\r\n    event Approval( address indexed owner, address indexed spender, uint value);\r\n    \r\n    function balancesStart() public view returns(uint256);\r\n    function balancesGetBool(uint256 num) public view returns(bool);\r\n    function balancesGetNext(uint256 num) public view returns(uint256);\r\n    function balancesGetValue(uint256 num) public view returns(address, uint256);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = _a / _b;\r\n    assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n//  映射合约\r\ncontract IBMapping {\r\n    //  查询地址\r\n\tfunction checkAddress(string memory name) public view returns (address contractAddress);\r\n\t//  查看是否管理员\r\n\tfunction checkOwners(address man) public view returns (bool);\r\n}\r\n\r\nlibrary address_make_payable {\r\n   function make_payable(address x) internal pure returns (address payable) {\r\n      return address(uint160(x));\r\n   }\r\n}\r\n\r\ncontract NESTSave {\r\n    function takeOut(uint256 num) public;\r\n    function depositIn(uint256 num) public;\r\n    function takeOutPrivate() public;\r\n    function checkAmount(address sender) public view returns(uint256);\r\n}\r\n\r\ncontract Abonus {\r\n    function getETH(uint256 num) public;    \r\n    function getETHNum() public view returns (uint256);\r\n}\r\n\r\ncontract NESTAbonus {\r\n    using address_make_payable for address;\r\n    using SafeMath for uint256;\r\n    IBNEST nestContract;\r\n    IBMapping mappingContract;                  \r\n    NESTSave baseMapping;\r\n    Abonus abonusContract;\r\n    \r\n    uint256 timeLimit = 168 hours;                    \r\n    uint256 nextTime = 1562299200;                   \r\n    uint256 getAbonusTimeLimit = 60 hours;           \r\n    \r\n    uint256 ethNum = 0;                         \r\n    uint256 nestAllValue = 0;                   \r\n    uint256 times = 0;                          \r\n    \r\n    mapping(uint256 => mapping(address => bool)) getMapping;\r\n    constructor (address map) public {\r\n        mappingContract = IBMapping(map); \r\n        nestContract = IBNEST(address(mappingContract.checkAddress(\"nest\")));\r\n        baseMapping = NESTSave(address(mappingContract.checkAddress(\"nestSave\")));\r\n        address payable addr = address(mappingContract.checkAddress(\"abonus\")).make_payable();\r\n        abonusContract = Abonus(addr);\r\n    }\r\n\r\n    function changeMapping(address map) public {\r\n        mappingContract = IBMapping(map); \r\n        nestContract = IBNEST(address(mappingContract.checkAddress(\"nest\")));\r\n        baseMapping = NESTSave(address(mappingContract.checkAddress(\"nestSave\")));\r\n        address payable addr = address(mappingContract.checkAddress(\"abonus\")).make_payable();\r\n        abonusContract = Abonus(addr);\r\n    }\r\n    \r\n    function depositIn(uint256 amount) public {\r\n        require(isContract(address(msg.sender)) == false);          \r\n        uint256 nowTime = now;\r\n        if (nowTime < nextTime) {\r\n            require(!(nowTime >= nextTime.sub(timeLimit) && nowTime <= nextTime.sub(timeLimit).add(getAbonusTimeLimit)));\r\n        } else {\r\n            require(!(nowTime >= nextTime && nowTime <= nextTime.add(getAbonusTimeLimit)));\r\n            uint256 time = (nowTime.sub(nextTime)).div(timeLimit);\r\n            uint256 startTime = nextTime.add((time).mul(timeLimit));         \r\n            uint256 endTime = startTime.add(getAbonusTimeLimit);                     \r\n            require(!(nowTime >= startTime && nowTime <= endTime));\r\n        }\r\n        baseMapping.depositIn(amount);                              \r\n    }\r\n    \r\n    function takeOut(uint256 amount) public {\r\n        require(isContract(address(msg.sender)) == false);          \r\n        require(amount != 0);                                       \r\n        require(amount <= baseMapping.checkAmount(address(msg.sender)));\r\n        baseMapping.takeOut(amount);                         \r\n    }r\n    \r\n    function getETH() public {\r\n        require(isContract(address(msg.sender)) == false);          \r\n        reloadTimeAndMapping ();                \r\n        uint256 nowTime = now;\r\n        require(nowTime >= nextTime.sub(timeLimit) && nowTime <= nextTime.sub(timeLimit).add(getAbonusTimeLimit));\r\n        require(getMapping[times.sub(1)][address(msg.sender)] != true);     \r\n        uint256 nestAmount = baseMapping.checkAmount(address(msg.sender));\r\n        require(nestAmount > 0);\r\n        require(nestAllValue > 0);\r\n        uint256 selfEth = nestAmount.mul(ethNum).div(nestAllValue);\r\n        require(selfEth > 0);\r\n        \r\n        getMapping[times.sub(1)][address(msg.sender)] = true;\r\n        abonusContract.getETH(selfEth);                           \r\n    }\r\n    \r\n    function reloadTimeAndMapping () private {\r\n        require(isContract(address(msg.sender)) == false);          \r\n        uint256 nowTime = now;\r\n        if (nowTime >= nextTime) {                                                      \r\n            uint256 time = (nowTime.sub(nextTime)).div(timeLimit);\r\n            uint256 startTime = nextTime.add((time).mul(timeLimit));         \r\n            uint256 endTime = startTime.add(getAbonusTimeLimit);                     \r\n            if (nowTime >= startTime && nowTime <= endTime) {\r\n                nextTime = getNextTime();                               \r\n                times = times.add(1);                                   \r\n                ethNum = abonusContract.getETHNum();                    \r\n                nestAllValue = allValue();                              \r\n            }\r\n        }\r\n    }\r\n    \r\n    function getInfo() public view returns (uint256 _nextTime, uint256 _getAbonusTime, uint256 _ethNum, uint256 _nestValue, uint256 _myJoinNest, uint256 _getEth, uint256 _allowNum, uint256 _leftNum, bool allowAbonus)  {\r\n        uint256 nowTime = now;\r\n        if (nowTime >= nextTime.sub(timeLimit) && nowTime <= nextTime.sub(timeLimit).add(getAbonusTimeLimit)) {\r\n            allowAbonus = getMapping[times.sub(1)][address(msg.sender)];\r\n            _ethNum = ethNum;\r\n            _nestValue = nestAllValue;\r\n            \r\n        } else {\r\n            _ethNum = abonusContract.getETHNum();\r\n            _nestValue = allValue();\r\n            allowAbonus = getMapping[times][address(msg.sender)];\r\n        }\r\n        _myJoinNest = baseMapping.checkAmount(address(msg.sender));\r\n        if (allowAbonus == true) {\r\n            _getEth = 0; \r\n        } else {\r\n            _getEth = _myJoinNest.mul(_ethNum).div(_nestValue);\r\n        }\r\n        \r\n       \r\n        _nextTime = getNextTime();\r\n        _getAbonusTime = _nextTime.sub(timeLimit).add(getAbonusTimeLimit);\r\n        _allowNum = nestContract.allowance(address(msg.sender), address(baseMapping));\r\n        _leftNum = nestContract.balanceOf(address(msg.sender));\r\n        \r\n    }\r\n    \r\n    function getNextTime() public view returns (uint256) {\r\n        uint256 nowTime = now;\r\n        if (nextTime >= nowTime) { \r\n            return nextTime; \r\n        } else {\r\n            uint256 time = (nowTime.sub(nextTime)).div(timeLimit);\r\n            return nextTime.add(timeLimit.mul(time.add(1)));\r\n        }\r\n    }\r\n    \r\n    function allValue() public view returns (uint256) {\r\n        uint256 all = 10000000000 ether;\r\n        uint256 leftNum = all.sub(nestContract.balanceOf(address(mappingContract.checkAddress(\"miningSave\"))));\r\n        return leftNum;\r\n    }\r\n    function changeTimeLimit(uint256 hour) public onlyOwner {\r\n        require(hour > 0);\r\n        timeLimit = hour.mul(1 hours);\r\n    }\r\n\r\n    function changeGetAbonusTimeLimit(uint256 hour) public onlyOwner {\r\n        require(hour > 0);\r\n        getAbonusTimeLimit = hour;\r\n    }\r\n\r\n    modifier onlyOwner(){\r\n        require(mappingContract.checkOwners(msg.sender) == true);\r\n        _;\r\n    }\r\n    function isContract(address addr) public view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"getETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositIn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInfo\",\"outputs\":[{\"name\":\"_nextTime\",\"type\":\"uint256\"},{\"name\":\"_getAbonusTime\",\"type\":\"uint256\"},{\"name\":\"_ethNum\",\"type\":\"uint256\"},{\"name\":\"_nestValue\",\"type\":\"uint256\"},{\"name\":\"_myJoinNest\",\"type\":\"uint256\"},{\"name\":\"_getEth\",\"type\":\"uint256\"},{\"name\":\"_allowNum\",\"type\":\"uint256\"},{\"name\":\"_leftNum\",\"type\":\"uint256\"},{\"name\":\"allowAbonus\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hour\",\"type\":\"uint256\"}],\"name\":\"changeTimeLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNextTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"map\",\"type\":\"address\"}],\"name\":\"changeMapping\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"takeOut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hour\",\"type\":\"uint256\"}],\"name\":\"changeGetAbonusTimeLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"map\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"NESTAbonus","CompilerVersion":"v0.5.9+commit.e560f70d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005e7db2ffc5b2c7c47103e4f21c702bc402603fbf","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://5678cb3a0dce46e12ef57b2a0dbe1fcb8e1a6ac6f2bd723b23b935b442793881"}]}