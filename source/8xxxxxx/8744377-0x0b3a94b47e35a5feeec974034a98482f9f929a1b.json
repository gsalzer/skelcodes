{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.11;\r\n\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint supply);\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    function decimals() external view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n\r\ninterface KyberReserveIf {\r\n    function getConversionRate(ERC20 src, ERC20 dest, uint srcQty, uint blockNumber) external view returns(uint);\r\n}\r\n\r\n\r\ncontract KyberNetworkIf { \r\n    mapping(address=>address[]) public reservesPerTokenSrc; //reserves supporting token to eth\r\n    mapping(address=>address[]) public reservesPerTokenDest;//reserves support eth to token\r\n}\r\n\r\n\r\ncontract KyberProxy {\r\n    address public kyberNetworkContract;\r\n}\r\n\r\n\r\ncontract CheckReserveSplit {\r\n    \r\n    ERC20 constant ETH = ERC20(address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE));\r\n    KyberNetworkIf public constant kyber = KyberNetworkIf(0x9ae49C0d7F8F9EF4B864e004FE86Ac8294E20950);\r\n    ERC20 public constant dai = ERC20(0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359);\r\n    ERC20 public constant usdc = ERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n    uint constant minSplitValueEthDAI = 30;\r\n    uint constant maxSplitValueEthDAI = 140;\r\n    uint constant minSplitValueEthUsdc = 10;\r\n    uint constant maxSplitValueEthUsdc = 70;\r\n    \r\n    uint numSplitRateCalls = 4;\r\n    \r\n    mapping(address=>address[]) public reservesPerTokenDest;//reserves supporting eth to token\r\n    mapping(address=>address[]) public reservesPerTokenDestBest;//reserves supporting eth to token\r\n\r\n    constructor () public {\r\n    }\r\n    \r\n    function setNumSplitRateCalls (uint num) public {\r\n        \r\n        numSplitRateCalls = num;\r\n    }\r\n    \r\n    function copyReserves(ERC20 token) public {\r\n    \r\n        KyberReserveIf reserve;\r\n        uint index = 0;\r\n        \r\n        // fetch resereves find reserve with best rate and with 2nd best.\r\n        while (true) {   \r\n            \r\n            reserve = KyberReserveIf(getReserveTokenDest(address(token), index++));\r\n            if (reserve == KyberReserveIf(address(0x0))) break;\r\n            reservesPerTokenDest[address(token)].push(address(reserve));\r\n        }\r\n    }\r\n    \r\n    function copyBestReserves(ERC20 token, uint[] memory reserveIds) public {\r\n        \r\n        for (uint i = 0; i < reserveIds.length; i++) {\r\n            reservesPerTokenDestBest[address(token)].push(reservesPerTokenDest[address(token)][reserveIds[i]]);\r\n        }        \r\n    }\r\n\r\n    function getBestReservesEthToToken(ERC20 token) public view \r\n        returns(KyberReserveIf best, KyberReserveIf second, uint bestRate, uint secondRate, uint index) \r\n    {\r\n        \r\n        KyberReserveIf reserve;\r\n        uint rate;\r\n        index = 0;\r\n        \r\n        // fetch resereves find reserve with best rate and with 2nd best.\r\n        for(uint i = 0; i < reservesPerTokenDestBest[address(token)].length; i++) {\r\n        \r\n            reserve = KyberReserveIf(reservesPerTokenDestBest[address(token)][i]);\r\n            if (reserve == KyberReserveIf(address(0x0))) break;\r\n            rate = reserve.getConversionRate(ETH, token, 1 ether, block.number);\r\n            \r\n            if(rate > bestRate) {\r\n                \r\n                if (bestRate > secondRate) {\r\n                    secondRate = bestRate;\r\n                    second = best;\r\n                }\r\n                \r\n                bestRate = rate;\r\n                best = reserve;\r\n            } else if (rate > secondRate) {\r\n                secondRate = rate;\r\n                second = reserve;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function getReserveTokenDest (address token, uint index) internal view returns (address reserve) {\r\n\r\n        (bool success, bytes memory returnData) = \r\n            address(kyber).staticcall(\r\n                abi.encodePacked( // This encodes the function to call and the parameters to pass to that function\r\n                        kyber.reservesPerTokenDest.selector, \r\n                        abi.encode(token, index) \r\n                    )\r\n                );\r\n        \r\n        if (success) {\r\n            reserve = abi.decode(returnData, (address));\r\n        } else { // transferFrom reverted. However, the complete tx did not revert and we can handle the case here.\r\n            reserve = address(0x0);\r\n        }\r\n    }\r\n\r\n    function getBestEthToDaiReserves() public view \r\n        returns(KyberReserveIf best, KyberReserveIf second, uint bestRate, uint secondRate, uint index) \r\n    {\r\n        return getBestReservesEthToToken(dai);\r\n    }\r\n    \r\n    function getBestEthToUsdcReserves() public view \r\n        returns(KyberReserveIf best, KyberReserveIf second, uint bestRate, uint secondRate, uint index) \r\n    {\r\n        return getBestReservesEthToToken(usdc);\r\n    }\r\n    \r\n    // which eth trade value 2nd best reserve has better rate then best reserve\r\n    function getSplitThreshold(ERC20 token) public view \r\n        returns(uint splitThresholdEth, KyberReserveIf best, KyberReserveIf second) \r\n    {\r\n        uint[] memory rates = new uint[](3);\r\n        \r\n        (best, second, rates[0], rates[1], )  = getBestReservesEthToToken(token);\r\n        \r\n        (uint stepSizeWei, uint splitValueEthWei) = getBasicStepSizes(token);\r\n        \r\n        uint numSplitCalls = numSplitRateCalls;\r\n\r\n        while (numSplitCalls-- > 0) {\r\n            rates[2] = best.getConversionRate(ETH, token, splitValueEthWei, block.number);\r\n            \r\n            stepSizeWei /= 2;\r\n            splitValueEthWei += rates[2] < rates[1] ? (- stepSizeWei) : stepSizeWei;\r\n        }\r\n        \r\n        if(rates[2] == 0) {\r\n            splitValueEthWei -= (stepSizeWei * 2);\r\n\r\n            rates[2] = best.getConversionRate(ETH, token, splitValueEthWei, block.number);\r\n        }\r\n        \r\n        splitThresholdEth = splitValueEthWei / 10 ** 18;\r\n    }\r\n    \r\n    function getBasicStepSizes (ERC20 token) internal pure returns(uint stepSizeWei, uint splitValueEthWei) {\r\n        if(token == usdc) {\r\n            stepSizeWei = (maxSplitValueEthUsdc - minSplitValueEthUsdc) * 10 ** 18 / 2;\r\n            splitValueEthWei = minSplitValueEthUsdc * 10 ** 18 + stepSizeWei;\r\n        } else {\r\n            stepSizeWei = (maxSplitValueEthDAI - minSplitValueEthDAI) * 10 ** 18 / 2;\r\n            splitValueEthWei = minSplitValueEthDAI * 10 ** 18 + stepSizeWei;            \r\n        }\r\n    }\r\n\r\n    function getDaiSplitThreshold() public view returns (uint splitThresholdEth) {\r\n        (splitThresholdEth, , ) = getSplitThreshold(dai);\r\n    }\r\n   \r\n    function getDaiSplitValues() public view \r\n        returns (KyberReserveIf bestReserve, uint bestRate, KyberReserveIf secondBest, uint secondRate, uint splitThresholdEth, uint rateBestAfterSplitValue) \r\n    {\r\n        (splitThresholdEth, bestReserve, secondBest) = getSplitThreshold(dai);\r\n        bestRate = bestReserve.getConversionRate(ETH, dai, 1 ether, block.number);\r\n        secondRate = secondBest.getConversionRate(ETH, dai, 1 ether, block.number);\r\n        rateBestAfterSplitValue = bestReserve.getConversionRate(ETH, dai, (splitThresholdEth + 1) * 10 ** 18, block.number);\r\n    }\r\n    \r\n    function getUsdcSplitThreshold() public view returns (uint splitThresholdEth) {\r\n        (splitThresholdEth, , ) = getSplitThreshold(usdc);\r\n    }\r\n    \r\n    function getUsdcSplitValues() public view \r\n        returns (KyberReserveIf bestReserve, uint rate1, KyberReserveIf secondBest, uint rate2, uint splitThresholdEth, uint rateBestAfterSplitValue) \r\n    {\r\n        (splitThresholdEth, bestReserve, secondBest) = getSplitThreshold(usdc);\r\n        rate1 = bestReserve.getConversionRate(ETH, usdc, 1 ether, block.number);\r\n        rate2 = secondBest.getConversionRate(ETH, usdc, 1 ether, block.number);\r\n        rateBestAfterSplitValue = bestReserve.getConversionRate(ETH, usdc, (splitThresholdEth + 1) *10 ** 18, block.number);\r\n    }\r\n    \r\n    function compareSplitTrade(ERC20 token, uint tradeValueEth) public view \r\n        returns(uint rateSingleReserve, uint rateTwoReserves, uint daiAmountSingleReserve, uint daiAmountTwoRes) \r\n    {\r\n        KyberReserveIf reserveBest;\r\n        KyberReserveIf reseve2nd;\r\n        uint splitThresholdEth;\r\n        uint[] memory rates = new uint[](2);\r\n        \r\n        (splitThresholdEth, reserveBest, reseve2nd) = getSplitThreshold(token);\r\n        if (splitThresholdEth > tradeValueEth) return (0, 0, splitThresholdEth, 0);\r\n        if (splitThresholdEth < tradeValueEth * 2 / 3) {\r\n            splitThresholdEth = tradeValueEth * 2 / 3;\r\n        }\r\n        \r\n        rateSingleReserve = reserveBest.getConversionRate(ETH, token, tradeValueEth * 10 ** 18, block.number);\r\n        rates[0] = reserveBest.getConversionRate(ETH, token, splitThresholdEth * 10 ** 18, block.number);\r\n        rates[1] = reseve2nd.getConversionRate(ETH, token, (tradeValueEth - splitThresholdEth) * 10 ** 18, block.number);\r\n        rateTwoReserves = (rates[0] * splitThresholdEth + rates[1] * (tradeValueEth - splitThresholdEth)) / tradeValueEth;\r\n        \r\n        daiAmountSingleReserve = (rateSingleReserve / 10 ** 18) * tradeValueEth;\r\n        daiAmountTwoRes = (rateTwoReserves / 10 ** 18) * tradeValueEth;\r\n    }\r\n    \r\n    function getDaiSplitThresholdGas() public returns (uint splitThresholdEth) {\r\n        return getDaiSplitThreshold();\r\n    }\r\n    \r\n    function viewSplitTradeEthToDai(uint tradeValueEth)\r\n        public view \r\n        returns(uint rateSingleRes, uint rateTwoReserves, uint daiReceivedSingle, uint daiReceivedTwo) \r\n    {\r\n        return compareSplitTrade(dai, tradeValueEth);\r\n    }\r\n    \r\n    function viewSplitTradeEthToUsdc(uint tradeValueEth)\r\n        public view \r\n        returns(uint rateSingleRes, uint rateTwoReserves, uint daiReceivedSingle, uint daiReceivedTwo) \r\n    {\r\n        return compareSplitTrade(usdc, tradeValueEth);\r\n    }\r\n    \r\n    function getAllReserves (ERC20 token) public view returns (KyberReserveIf [] memory reserves, uint [] memory rates) {\r\n        \r\n        reserves = new KyberReserveIf[](reservesPerTokenDest[address(token)].length);\r\n        rates = new uint[](reservesPerTokenDest[address(token)].length);\r\n        \r\n        // fetch resereves find reserve with best rate and with 2nd best.\r\n        for(uint i = 0; i < reservesPerTokenDest[address(token)].length; i++) {\r\n        \r\n            reserves[i] = KyberReserveIf(reservesPerTokenDest[address(token)][i]);\r\n            rates[i] = reserves[i].getConversionRate(ETH, token, 1 ether, block.number);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getDaiSplitThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"splitThresholdEth\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradeValueEth\",\"type\":\"uint256\"}],\"name\":\"viewSplitTradeEthToDai\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rateSingleRes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateTwoReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daiReceivedSingle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daiReceivedTwo\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradeValueEth\",\"type\":\"uint256\"}],\"name\":\"compareSplitTrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rateSingleReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateTwoReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daiAmountSingleReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daiAmountTwoRes\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"setNumSplitRateCalls\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradeValueEth\",\"type\":\"uint256\"}],\"name\":\"viewSplitTradeEthToUsdc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rateSingleRes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateTwoReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daiReceivedSingle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daiReceivedTwo\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getAllReserves\",\"outputs\":[{\"internalType\":\"contract KyberReserveIf[]\",\"name\":\"reserves\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rates\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"reserveIds\",\"type\":\"uint256[]\"}],\"name\":\"copyBestReserves\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBestEthToDaiReserves\",\"outputs\":[{\"internalType\":\"contract KyberReserveIf\",\"name\":\"best\",\"type\":\"address\"},{\"internalType\":\"contract KyberReserveIf\",\"name\":\"second\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reservesPerTokenDest\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getSplitThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"splitThresholdEth\",\"type\":\"uint256\"},{\"internalType\":\"contract KyberReserveIf\",\"name\":\"best\",\"type\":\"address\"},{\"internalType\":\"contract KyberReserveIf\",\"name\":\"second\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kyber\",\"outputs\":[{\"internalType\":\"contract KyberNetworkIf\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reservesPerTokenDestBest\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDaiSplitValues\",\"outputs\":[{\"internalType\":\"contract KyberReserveIf\",\"name\":\"bestReserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bestRate\",\"type\":\"uint256\"},{\"internalType\":\"contract KyberReserveIf\",\"name\":\"secondBest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"secondRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"splitThresholdEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateBestAfterSplitValue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getDaiSplitThresholdGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"splitThresholdEth\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBestEthToUsdcReserves\",\"outputs\":[{\"internalType\":\"contract KyberReserveIf\",\"name\":\"best\",\"type\":\"address\"},{\"internalType\":\"contract KyberReserveIf\",\"name\":\"second\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"copyReserves\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUsdcSplitValues\",\"outputs\":[{\"internalType\":\"contract KyberReserveIf\",\"name\":\"bestReserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rate1\",\"type\":\"uint256\"},{\"internalType\":\"contract KyberReserveIf\",\"name\":\"secondBest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rate2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"splitThresholdEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateBestAfterSplitValue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUsdcSplitThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"splitThresholdEth\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getBestReservesEthToToken\",\"outputs\":[{\"internalType\":\"contract KyberReserveIf\",\"name\":\"best\",\"type\":\"address\"},{\"internalType\":\"contract KyberReserveIf\",\"name\":\"second\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"CheckReserveSplit","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://df294a82cbf7b71fb7d0c2c7b350ad007054a87b07ca4ac5b1b5b84e8faeffc6"}]}