{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.10;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath \r\n{\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) \r\n  {\r\n    if (a == 0) \r\n    {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) \r\n  {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) \r\n  {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) \r\n  {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable \r\n{\r\n    address public owner;\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public\r\n    {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() \r\n    {\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner public\r\n    {\r\n        assert(newOwner != address(0));\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Token\r\n{\r\n   mapping(address => mapping (address => uint256)) allowed;\r\n   function transfer(address to, uint256 value) public returns (bool);\r\n   function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n}\r\n\r\ncontract CraftrEscrow is Ownable\r\n{\r\n    using SafeMath for uint256;\r\n    \r\n    Token CRAFTRToken;\r\n\r\n    mapping (uint256 => Escrow) inEscrow;\r\n    mapping (address => bool) public admins;\r\n\r\n    uint256 round_interval = 12 hours;\r\n\r\n    struct Escrow\r\n    {\r\n        address _from;\r\n        address _to;\r\n        uint256 _amount;\r\n        uint256 _expiryTime;\r\n        bool _accepted;\r\n        bool _released;\r\n        bool _denied;\r\n    }\r\n\r\n    modifier onlyVendor(address vendor, uint256 depositID)\r\n    {\r\n        assert(inEscrow[depositID]._to == vendor);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyBuyer(address buyer, uint256 depositID)\r\n    {\r\n        assert(inEscrow[depositID]._from == buyer);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin()\r\n    {\r\n        assert(msg.sender == owner || admins[msg.sender]);\r\n        _;\r\n    }\r\n    \r\n    event Deposit(address buyer, uint256 amount, uint256 depositID);\r\n    event Accepted(address vendor, uint256 depositID);\r\n    event Declined(address vendor, uint256 depositID);\r\n    event Released(address buyer, address vendor, uint256 amount, uint256 depositID);\r\n    event DepositReverted(address buyer, uint256 amount, uint256 depositID, address reverter);\r\n    event DepositRevertedByOwner();\r\n    event TokensReleasedByOwner(address vendor, uint256 amount, uint256 depositID);\r\n    event AdminAdded(address admin);\r\n    event AdminRemoved(address admin);\r\n    \r\n    constructor(address _tokenContract) public\r\n    {\r\n        CRAFTRToken = Token(_tokenContract);\r\n    }\r\n    \r\n    /**\r\n     * @dev Allows a BUYER to deposit tokens into the contract. Useful information are mapped and \r\n     * the countdown for the VENDOR is initialized. \r\n     * @param amount The amount of tokens to deposit\r\n     * @param to The VENDOR address\r\n     * @return The deposit ID\r\n     */\r\n    function deposit(uint256 amount, address to) public returns(uint256)\r\n    {\r\n        uint256 depositID = amount.add(now);\r\n        inEscrow[depositID]._from = msg.sender;\r\n        inEscrow[depositID]._to = to;\r\n        inEscrow[depositID]._amount = amount;\r\n        inEscrow[depositID]._expiryTime = now.add(round_interval);\r\n        inEscrow[depositID]._accepted = false;\r\n        inEscrow[depositID]._denied = false;\r\n        inEscrow[depositID]._released = false;\r\n        CRAFTRToken.transferFrom(msg.sender,address(this),amount);\r\n        emit Deposit(msg.sender, amount, depositID);\r\n        \r\n        return depositID;\r\n    }\r\n    \r\n    /**\r\n     * @dev VENDOR accepts the deposit before the expiration\r\n     * @param depositID The deposit ID\r\n     */\r\n    function acceptDeposit(uint256 depositID) public onlyVendor(msg.sender, depositID)\r\n    {\r\n        require(\r\n            now <= inEscrow[depositID]._expiryTime \r\n            && !inEscrow[depositID]._denied \r\n            && !inEscrow[depositID]._accepted\r\n        );\r\n        inEscrow[depositID]._accepted = true;\r\n        emit Accepted(msg.sender, depositID);\r\n    }\r\n\r\n    /**\r\n     * @dev VENDOR cancels the deposit before the expiration\r\n     * @param depositID The deposit ID\r\n     */\r\n    function declineDeposit(uint256 depositID) public onlyVendor(msg.sender, depositID)\r\n    {\r\n        require(\r\n            now <= inEscrow[depositID]._expiryTime \r\n            && !inEscrow[depositID]._denied \r\n            && !inEscrow[depositID]._accepted\r\n        );\r\n        inEscrow[depositID]._denied = true;\r\n        emit Declined(msg.sender, depositID);\r\n    }\r\n    \r\n    /**\r\n     * @dev BUYER releases the deposit to the VENDOR\r\n     * @param depositID The deposit ID\r\n     */\r\n    function releaseTokens(uint256 depositID) public onlyBuyer(msg.sender, depositID) \r\n    {\r\n        require(\r\n            inEscrow[depositID]._accepted \r\n            && !inEscrow[depositID]._denied \r\n            && !inEscrow[depositID]._released\r\n        );\r\n        CRAFTRToken.transfer(inEscrow[depositID]._to, inEscrow[depositID]._amount);\r\n        inEscrow[depositID]._released = true;\r\n        emit Released(msg.sender, inEscrow[depositID]._to, inEscrow[depositID]._amount, depositID);\r\n    }\r\n    \r\n    /**\r\n     * @dev BUYER reverts the deposit to itself\r\n     * @param depositID The deposit ID\r\n     */\r\n    function revertDeposit(uint256 depositID) public onlyBuyer(msg.sender, depositID)\r\n    {\r\n        require(\r\n            (\r\n                now > inEscrow[depositID]._expiryTime \r\n                && !inEscrow[depositID]._accepted \r\n                && !inEscrow[depositID]._released \r\n                && !inEscrow[depositID]._denied\r\n            ) || (\r\n                inEscrow[depositID]._denied\r\n            )\r\n        );\r\n\r\n        CRAFTRToken.transfer(msg.sender,inEscrow[depositID]._amount);\r\n        emit DepositReverted(msg.sender, inEscrow[depositID]._amount, depositID, msg.sender);\r\n        inEscrow[depositID]._released = true;\r\n    }\r\n    \r\n    /**\r\n     * @dev ADMIN reverts tokens to BUYER after a dispute resolution\r\n     * @param depositID The deposit ID\r\n     */\r\n    function adminRevertDeposit(uint256 depositID) public onlyAdmin\r\n    {\r\n        require(\r\n            inEscrow[depositID]._accepted \r\n            && !inEscrow[depositID]._released \r\n            && !inEscrow[depositID]._denied\r\n        );\r\n        CRAFTRToken.transfer(inEscrow[depositID]._from,inEscrow[depositID]._amount);\r\n        emit DepositReverted(inEscrow[depositID]._from, inEscrow[depositID]._amount, depositID, msg.sender);\r\n        inEscrow[depositID]._released = true;\r\n        emit DepositRevertedByOwner();\r\n    }\r\n    \r\n    /**\r\n     * @dev ADMIN releases tokens to VENDOR after a dispute resolution\r\n     * @param depositID The deposit ID\r\n     */\r\n    function adminReleaseTokens(uint256 depositID) public onlyAdmin\r\n    {\r\n        require(\r\n            inEscrow[depositID]._accepted \r\n            && !inEscrow[depositID]._released \r\n            && !inEscrow[depositID]._denied\r\n        );\r\n        CRAFTRToken.transfer(inEscrow[depositID]._to, inEscrow[depositID]._amount);\r\n        inEscrow[depositID]._released = true;\r\n        emit TokensReleasedByOwner(inEscrow[depositID]._to, inEscrow[depositID]._amount, depositID);\r\n    }\r\n\r\n    /**\r\n     * @dev OWNER sets a new ADMIN\r\n     * @param admin The address of the ADMIN\r\n     */\r\n    function setAdmin(address admin) public onlyOwner \r\n    {\r\n        admins[admin] = true;\r\n        emit AdminAdded(admin);\r\n    }\r\n\r\n    /**\r\n     * @dev OWNER removes an ADMIN\r\n     * @param admin The address of the ADMIN\r\n     */\r\n    function unsetAdmin(address admin) public onlyOwner \r\n    {\r\n        admins[admin] = false;\r\n        emit AdminRemoved(admin);\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"depositID\",\"type\":\"uint256\"}],\"name\":\"adminRevertDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"depositID\",\"type\":\"uint256\"}],\"name\":\"revertDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"depositID\",\"type\":\"uint256\"}],\"name\":\"acceptDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"depositID\",\"type\":\"uint256\"}],\"name\":\"releaseTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"unsetAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"depositID\",\"type\":\"uint256\"}],\"name\":\"declineDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"depositID\",\"type\":\"uint256\"}],\"name\":\"adminReleaseTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"depositID\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"vendor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"depositID\",\"type\":\"uint256\"}],\"name\":\"Accepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"vendor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"depositID\",\"type\":\"uint256\"}],\"name\":\"Declined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"vendor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"depositID\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"depositID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"reverter\",\"type\":\"address\"}],\"name\":\"DepositReverted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DepositRevertedByOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"vendor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"depositID\",\"type\":\"uint256\"}],\"name\":\"TokensReleasedByOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"}]","ContractName":"CraftrEscrow","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000002784dcd08f4b1bb25af84fd0b702e2aa5d5d1d64","Library":"","SwarmSource":"bzzr://9c032037bda61d2814c7a479b70a38ea0d20303bd777cd68cd5b2d54cbec9e20"}]}