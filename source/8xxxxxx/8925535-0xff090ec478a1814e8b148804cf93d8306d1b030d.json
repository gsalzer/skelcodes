{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract auid{\r\n    uint ethWei = 1 ether;\r\n    //getlevel\r\n    function getlevel(uint value) public view returns(uint){\r\n        if(value>=1*ethWei && value<=5*ethWei){\r\n            return 1;\r\n        }if(value>=6*ethWei && value<=10*ethWei){\r\n            return 2;\r\n        }if(value>=11*ethWei && value<=20*ethWei){\r\n            return 3;\r\n        }\r\n        if(value>=21*ethWei){\r\n            return 4;\r\n        }\r\n            return 0;\r\n    }\r\n    //getLinelevel\r\n    function getLineLevel(uint value) public view returns(uint){\r\n        if(value>=1*ethWei && value<=5*ethWei){\r\n            return 1;\r\n        }if(value>=6*ethWei && value<=10*ethWei){\r\n            return 2;\r\n        }if(value>=11*ethWei&& value<=20*ethWei){\r\n            return 3;\r\n        }\r\n        if(value>=21*ethWei){\r\n            return 4;\r\n        }\r\n    }\r\n    //level-commend  /1000\r\n    function getScBylevel(uint level) public view returns(uint){\r\n        if(level == 1){\r\n            return 6;\r\n        }if(level == 2){\r\n            return 8;\r\n        }if(level == 3)\r\n        {\r\n            return 10;\r\n        }\r\n        if(level == 4){\r\n            return 13;\r\n        }\r\n        return 0;\r\n    }\r\n    //level fire scale   /10\r\n    function getFireScBylevel(uint level) public view returns(uint){\r\n    if(level == 1){\r\n            return 3;\r\n        }if(level == 2){\r\n            return 5;\r\n        }if(level == 3) {\r\n            return 8;\r\n        }if(level==4)\r\n        {\r\n            return 10;\r\n         }return 0;\r\n    }\r\n       //level and times => invite scale /100\r\n    function getRecommendScaleBylevelandTim(uint level,uint times) public view returns(uint){\r\n        if(level == 1 && times == 1){\r\n            return 500;\r\n        }if(level == 2 && times == 1){\r\n            return 700;\r\n        }if(level == 2 && times == 2){\r\n            return 500;\r\n        }if(level == 3) {\r\n            if(times == 1){\r\n                return 1000;\r\n            }if(times == 2){\r\n                return 700;\r\n            }if(times == 3){\r\n                return 500;\r\n            }if(times >= 4 && times <= 10){\r\n                return 100;\r\n            }if(times >= 11 && times <= 20){\r\n                return 50;\r\n            }if(times >= 21&& times <= 30){\r\n                return  5;\r\n            }        } if(level == 4) {\r\n            if(times == 1){\r\n                return 1000;\r\n            }if(times == 2){\r\n                return 700;\r\n            }if(times == 3){\r\n                return 500;\r\n            }if(times >= 4 && times <= 10){\r\n                return 100;\r\n            }if(times >= 11 && times <= 20){\r\n                return 50;\r\n            }if(times >= 21&& times <= 30){\r\n                return 5;\r\n            }\r\n            if(times>=31){\r\n                return 1;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n      function compareStr (string  memory _str,string memory str) public view returns(bool) {\r\n         bool checkResult = false;\r\n        if(keccak256(abi.encodePacked(_str)) == keccak256(abi.encodePacked(str))) {\r\n            checkResult = true;\r\n        }\r\n        return checkResult;\r\n    }\r\n }","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getlevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getLineLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"getFireScBylevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"level\",\"type\":\"uint256\"},{\"name\":\"times\",\"type\":\"uint256\"}],\"name\":\"getRecommendScaleBylevelandTim\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"getScBylevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_str\",\"type\":\"string\"},{\"name\":\"str\",\"type\":\"string\"}],\"name\":\"compareStr\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"auid","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://f9f24b1d5e1f02dfeeef786074a125929b577cdcf5b0d32e51bdf9dcf8c7f9c1"}]}