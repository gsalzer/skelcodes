{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2019-06-24\r\n*/\r\n\r\npragma solidity 0.4.25;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary UnitConverter {\r\n    using SafeMath for uint256;\r\n\r\n    function stringToBytes24(string memory source)\r\n    internal\r\n    pure\r\n    returns (bytes24 result)\r\n    {\r\n        bytes memory tempEmptyStringTest = bytes(source);\r\n        if (tempEmptyStringTest.length == 0) {\r\n            return 0x0;\r\n        }\r\n\r\n        assembly {\r\n            result := mload(add(source, 24))\r\n        }\r\n    }\r\n}\r\n\r\nlibrary StringUtil {\r\n    struct slice {\r\n        uint _length;\r\n        uint _pointer;\r\n    }\r\n\r\n    function validateUserName(string memory _username)\r\n    internal\r\n    pure\r\n    returns (bool)\r\n    {\r\n        uint8 len = uint8(bytes(_username).length);\r\n        if ((len < 4) || (len > 18)) return false;\r\n\r\n        // only contain A-Z 0-9\r\n        for (uint8 i = 0; i < len; i++) {\r\n            if (\r\n                (uint8(bytes(_username)[i]) < 48) ||\r\n                (uint8(bytes(_username)[i]) > 57 && uint8(bytes(_username)[i]) < 65) ||\r\n                (uint8(bytes(_username)[i]) > 90)\r\n            ) return false;\r\n        }\r\n        // First char != '0'\r\n        return uint8(bytes(_username)[0]) != 48;\r\n    }\r\n}\r\n\r\ncontract Auth {\r\n\r\n    address internal mainAdmin;\r\n    address internal contractAdmin;\r\n\r\n    event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\r\n\r\n    constructor(\r\n        address _mainAdmin,\r\n        address _contractAdmin\r\n    )\r\n    internal\r\n    {\r\n        mainAdmin = _mainAdmin;\r\n        contractAdmin = _contractAdmin;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(isMainAdmin() || isContractAdmin(), \"onlyAdmin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyMainAdmin() {\r\n        require(isMainAdmin(), \"onlyMainAdmin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyContractAdmin() {\r\n        require(isContractAdmin(), \"onlyContractAdmin\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) onlyContractAdmin internal {\r\n        require(_newOwner != address(0x0));\r\n        contractAdmin = _newOwner;\r\n        emit OwnershipTransferred(msg.sender, _newOwner);\r\n    }\r\n\r\n    function isMainAdmin() public view returns (bool) {\r\n        return msg.sender == mainAdmin;\r\n    }\r\n\r\n    function isContractAdmin() public view returns (bool) {\r\n        return msg.sender == contractAdmin;\r\n    }\r\n}\r\n\r\nlibrary ArrayUtil {\r\n\r\n    function tooLargestValues(uint[] array) internal pure returns (uint max, uint subMax) {\r\n        require(array.length >= 2, \"Invalid array length\");\r\n        max = array[0];\r\n        for (uint i = 1; i < array.length; i++) {\r\n            if (array[i] > max) {\r\n                subMax = max;\r\n                max = array[i];\r\n            } else if (array[i] > subMax) {\r\n                subMax = array[i];\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface IWallet {\r\n\r\n    function bonusForAdminWhenUserBuyPackageViaDollar(uint _amount, address _admin) external;\r\n\r\n    function bonusNewRank(address _investorAddress, uint _currentRank, uint _newRank) external;\r\n\r\n    function mineToken(address _from, uint _amount) external;\r\n\r\n    function deposit(address _to, uint _deposited, uint8 _source, uint _sourceAmount) external;\r\n\r\n    function getInvestorLastDeposited(address _investor) external view returns (uint);\r\n\r\n    function getUserWallet(address _investor) external view returns (uint, uint[], uint, uint, uint, uint, uint);\r\n\r\n    function getProfitBalance(address _investor) external view returns (uint);\r\n\r\n    function increaseETHWithdrew(uint _amount) external;\r\n\r\n    function validateCanMineToken(uint _tokenAmount, address _from) external view;\r\n}\r\n\r\ncontract Citizen is Auth {\r\n    using ArrayUtil for uint256[];\r\n    using StringUtil for string;\r\n    using UnitConverter for string;\r\n    using SafeMath for uint;\r\n\r\n    enum Rank {\r\n        UnRanked,\r\n        Star1,\r\n        Star2,\r\n        Star3,\r\n        Star4,\r\n        Star5,\r\n        Star6,\r\n        Star7\r\n    }\r\n\r\n    enum DepositType {\r\n        Ether,\r\n        Token,\r\n        Dollar\r\n    }\r\n\r\n    uint[8] public rankCheckPoints = [\r\n    0,\r\n    40000000,\r\n    100000000,\r\n    300000000,\r\n    1000000000,\r\n    2000000000,\r\n    5000000000,\r\n    10000000000\r\n    ];\r\n\r\n    uint[8] public rankBonuses = [\r\n    0,\r\n    1000000, // $1k\r\n    2000000,\r\n    6000000,\r\n    20000000,\r\n    50000000,\r\n    150000000,\r\n    500000000 // $500k\r\n    ];\r\n\r\n    struct Investor {\r\n        uint id;\r\n        string userName;\r\n        address inviter;\r\n        address[] directlyInvitee;\r\n        address[] directlyInviteeHaveJoinedPackage;\r\n        uint f1Deposited;\r\n        uint networkDeposited;\r\n        uint networkDepositedViaETH;\r\n        uint networkDepositedViaToken;\r\n        uint networkDepositedViaDollar;\r\n        uint subscribers;\r\n        Rank rank;\r\n    }\r\n\r\n    address private reserveFundContract;\r\n    IWallet private walletContract;\r\n\r\n    mapping(address => Investor) private investors;\r\n    mapping(bytes24 => address) private userNameAddresses;\r\n    address[] private userAddresses;\r\n\r\n    modifier onlyWalletContract() {\r\n        require(msg.sender == address(walletContract), \"onlyWalletContract\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyReserveFundContract() {\r\n        require(msg.sender == address(reserveFundContract), \"onlyReserveFundContract\");\r\n        _;\r\n    }\r\n\r\n    event RankAchieved(address investor, uint currentRank, uint newRank);\r\n\r\n    constructor(address _mainAdmin) Auth(_mainAdmin, msg.sender) public {\r\n        setupAdminAccount();\r\n    }\r\n\r\n    // ONLY-CONTRACT-ADMIN FUNCTIONS\r\n\r\n    function setWalletContract(address _walletContract) onlyContractAdmin public {\r\n        walletContract = IWallet(_walletContract);\r\n    }\r\n\r\n    function setSFUContract(address _reserveFundContract) onlyContractAdmin public {\r\n        reserveFundContract = _reserveFundContract;\r\n    }\r\n\r\n    // ONLY-SFU-CONTRACT FUNCTIONS\r\n\r\n    function register(address _user, string memory _userName, address _inviter)\r\n    onlyReserveFundContract\r\n    public\r\n    returns\r\n    (uint)\r\n    {\r\n        require(_userName.validateUserName(), \"Invalid username\");\r\n        Investor storage investor = investors[_user];\r\n        require(!isCitizen(_user), \"Already an citizen\");\r\n        bytes24 _userNameAsKey = _userName.stringToBytes24();\r\n        require(userNameAddresses[_userNameAsKey] == address(0x0), \"Username already exist\");\r\n        userNameAddresses[_userNameAsKey] = _user;\r\n\r\n        investor.id = userAddresses.length;\r\n        investor.userName = _userName;\r\n        investor.inviter = _inviter;\r\n        investor.rank = Rank.UnRanked;\r\n        increaseInvitersSubscribers(_inviter);\r\n        increaseInviterF1(_inviter, _user);\r\n        userAddresses.push(_user);\r\n        return investor.id;\r\n    }\r\n\r\n    function showInvestorInfo(address _investorAddress)\r\n    onlyReserveFundContract\r\n    public\r\n    view\r\n    returns (uint, string memory, address, address[], uint, uint, uint, Citizen.Rank)\r\n    {\r\n        Investor storage investor = investors[_investorAddress];\r\n        return (\r\n        investor.id,\r\n        investor.userName,\r\n        investor.inviter,\r\n        investor.directlyInvitee,\r\n        investor.f1Deposited,\r\n        investor.networkDeposited,\r\n        investor.subscribers,\r\n        investor.rank\r\n        );\r\n    }\r\n\r\n    // ONLY-WALLET-CONTRACT FUNCTIONS\r\n\r\n    function addF1DepositedToInviter(address _invitee, uint _amount)\r\n    onlyWalletContract\r\n    public\r\n    {\r\n        address inviter = investors[_invitee].inviter;\r\n        investors[inviter].f1Deposited = investors[inviter].f1Deposited.add(_amount);\r\n        assert(investors[inviter].f1Deposited > 0);\r\n    }\r\n\r\n    // _source: 0-eth 1-token 2-usdt\r\n    function addNetworkDepositedToInviter(address _inviter, uint _amount, uint _source, uint _sourceAmount)\r\n    onlyWalletContract\r\n    public\r\n    {\r\n        require(_inviter != address(0x0), \"Invalid inviter address\");\r\n        require(_amount >= 0, \"Invalid deposit amount\");\r\n        require(_source >= 0 && _source <= 2, \"Invalid deposit source\");\r\n        require(_sourceAmount >= 0, \"Invalid source amount\");\r\n        investors[_inviter].networkDeposited = investors[_inviter].networkDeposited.add(_amount);\r\n        if (_source == 0) {\r\n            investors[_inviter].networkDepositedViaETH = investors[_inviter].networkDepositedViaETH.add(_sourceAmount);\r\n        } else if (_source == 1) {\r\n            investors[_inviter].networkDepositedViaToken = investors[_inviter].networkDepositedViaToken.add(_sourceAmount);\r\n        } else {\r\n            investors[_inviter].networkDepositedViaDollar = investors[_inviter].networkDepositedViaDollar.add(_sourceAmount);\r\n        }\r\n    }\r\n\r\n    function increaseInviterF1HaveJoinedPackage(address _invitee)\r\n    public\r\n    onlyWalletContract\r\n    {\r\n        address _inviter = getInviter(_invitee);\r\n        investors[_inviter].directlyInviteeHaveJoinedPackage.push(_invitee);\r\n    }\r\n\r\n    function increaseInviterF1HaveJoinedPackageForUserVIP(address userVIP, address _invitee)\r\n    public\r\n    onlyReserveFundContract\r\n    {\r\n        investors[userVIP].directlyInviteeHaveJoinedPackage.push(_invitee);\r\n    }\r\n\r\n    // PUBLIC FUNCTIONS\r\n\r\n    function updateRanking() public {\r\n        Investor storage investor = investors[msg.sender];\r\n        Rank currentRank = investor.rank;\r\n        require(investor.directlyInviteeHaveJoinedPackage.length > 2, \"Invalid condition to make ranking\");\r\n        require(currentRank < Rank.Star7, \"Congratulations! You have reached max rank\");\r\n        uint investorRevenueToCheckRank = getInvestorRankingRevenue(msg.sender);\r\n        Rank newRank;\r\n        for (uint8 k = uint8(currentRank) + 1; k <= uint8(Rank.Star7); k++) {\r\n            if (investorRevenueToCheckRank >= rankCheckPoints[k]) {\r\n                newRank = getRankFromIndex(k);\r\n            }\r\n        }\r\n        if (newRank > currentRank) {\r\n            walletContract.bonusNewRank(msg.sender, uint(currentRank), uint(newRank));\r\n            investor.rank = newRank;\r\n            emit RankAchieved(msg.sender, uint(currentRank), uint(newRank));\r\n        }\r\n    }\r\n\r\n    function getInvestorRankingRevenue(address _investor) public view returns (uint) {\r\n        Investor storage investor = investors[_investor];\r\n        if (investor.directlyInviteeHaveJoinedPackage.length <= 2) {\r\n            return 0;\r\n        }\r\n        uint[] memory f1NetworkDeposited = new uint[](investor.directlyInviteeHaveJoinedPackage.length);\r\n        uint sumF1NetworkDeposited = 0;\r\n        for (uint j = 0; j < investor.directlyInviteeHaveJoinedPackage.length; j++) {\r\n            f1NetworkDeposited[j] = investors[investor.directlyInviteeHaveJoinedPackage[j]].networkDeposited;\r\n            sumF1NetworkDeposited = sumF1NetworkDeposited.add(f1NetworkDeposited[j]);\r\n        }\r\n        uint max;\r\n        uint subMax;\r\n        (max, subMax) = f1NetworkDeposited.tooLargestValues();\r\n        return sumF1NetworkDeposited.sub(max).sub(subMax);\r\n    }\r\n\r\n    function checkInvestorsInTheSameReferralTree(address _inviter, address _invitee)\r\n    public\r\n    view\r\n    returns (bool)\r\n    {\r\n        require(_inviter != _invitee, \"They are the same\");\r\n        bool inTheSameTreeDownLine = checkInTheSameReferralTree(_inviter, _invitee);\r\n        bool inTheSameTreeUpLine = checkInTheSameReferralTree(_invitee, _inviter);\r\n        return inTheSameTreeDownLine || inTheSameTreeUpLine;\r\n    }\r\n\r\n    function getInviter(address _investor) public view returns (address) {\r\n        return investors[_investor].inviter;\r\n    }\r\n\r\n    function getDirectlyInvitee(address _investor) public view returns (address[]) {\r\n        return investors[_investor].directlyInvitee;\r\n    }\r\n\r\n    function getDirectlyInviteeHaveJoinedPackage(address _investor) public view returns (address[]) {\r\n        return investors[_investor].directlyInviteeHaveJoinedPackage;\r\n    }\r\n\r\n    function getDepositInfo(address _investor) public view returns (uint, uint, uint, uint, uint) {\r\n        return (\r\n        investors[_investor].f1Deposited,\r\n        investors[_investor].networkDeposited,\r\n        investors[_investor].networkDepositedViaETH,\r\n        investors[_investor].networkDepositedViaToken,\r\n        investors[_investor].networkDepositedViaDollar\r\n        );\r\n    }\r\n\r\n    function getF1Deposited(address _investor) public view returns (uint) {\r\n        return investors[_investor].f1Deposited;\r\n    }\r\n\r\n    function getNetworkDeposited(address _investor) public view returns (uint) {\r\n        return investors[_investor].networkDeposited;\r\n    }\r\n\r\n    function getId(address _investor) public view returns (uint) {\r\n        return investors[_investor].id;\r\n    }\r\n\r\n    function getUserName(address _investor) public view returns (string) {\r\n        return investors[_investor].userName;\r\n    }\r\n\r\n    function getRank(address _investor) public view returns (Rank) {\r\n        return investors[_investor].rank;\r\n    }\r\n\r\n    function getUserAddresses(uint _index) public view returns (address) {\r\n        require(_index >= 0 && _index < userAddresses.length, \"Index must be >= 0 or < getInvestorCount()\");\r\n        return userAddresses[_index];\r\n    }\r\n\r\n    function getSubscribers(address _investor) public view returns (uint) {\r\n        return investors[_investor].subscribers;\r\n    }\r\n\r\n    function isCitizen(address _user) view public returns (bool) {\r\n        Investor storage investor = investors[_user];\r\n        return bytes(investor.userName).length > 0;\r\n    }\r\n\r\n    function getInvestorCount() public view returns (uint) {\r\n        return userAddresses.length;\r\n    }\r\n\r\n    function getRankBonus(uint _index) public view returns (uint) {\r\n        return rankBonuses[_index];\r\n    }\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n    function setupAdminAccount() private {\r\n        string memory _mainAdminUserName = \"ADMIN\";\r\n        bytes24 _mainAdminUserNameAsKey = _mainAdminUserName.stringToBytes24();\r\n        userNameAddresses[_mainAdminUserNameAsKey] = mainAdmin;\r\n        Investor storage mainAdminInvestor = investors[mainAdmin];\r\n        mainAdminInvestor.id = userAddresses.length;\r\n        mainAdminInvestor.userName = _mainAdminUserName;\r\n        mainAdminInvestor.inviter = 0x0;\r\n        mainAdminInvestor.rank = Rank.UnRanked;\r\n        userAddresses.push(mainAdmin);\r\n    }\r\n\r\n    function increaseInviterF1(address _inviter, address _invitee) private {\r\n        investors[_inviter].directlyInvitee.push(_invitee);\r\n    }\r\n\r\n    function checkInTheSameReferralTree(address _from, address _to) private view returns (bool) {\r\n        do {\r\n            Investor storage investor = investors[_from];\r\n            if (investor.inviter == _to) {\r\n                return true;\r\n            }\r\n            _from = investor.inviter;\r\n        }\r\n        while (investor.inviter != 0x0);\r\n        return false;\r\n    }\r\n\r\n    function increaseInvitersSubscribers(address _inviter) private {\r\n        do {\r\n            investors[_inviter].subscribers += 1;\r\n            _inviter = investors[_inviter].inviter;\r\n        }\r\n        while (_inviter != address(0x0));\r\n    }\r\n\r\n    function getRankFromIndex(uint8 _index) private pure returns (Rank rank) {\r\n        require(_index >= 0 && _index <= 7, \"Invalid index\");\r\n        if (_index == 1) {\r\n            return Rank.Star1;\r\n        } else if (_index == 2) {\r\n            return Rank.Star2;\r\n        } else if (_index == 3) {\r\n            return Rank.Star3;\r\n        } else if (_index == 4) {\r\n            return Rank.Star4;\r\n        } else if (_index == 5) {\r\n            return Rank.Star5;\r\n        } else if (_index == 6) {\r\n            return Rank.Star6;\r\n        } else if (_index == 7) {\r\n            return Rank.Star7;\r\n        } else {\r\n            return Rank.UnRanked;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"getSubscribers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMainAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rankBonuses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRanking\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_inviter\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_source\",\"type\":\"uint256\"},{\"name\":\"_sourceAmount\",\"type\":\"uint256\"}],\"name\":\"addNetworkDepositedToInviter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_walletContract\",\"type\":\"address\"}],\"name\":\"setWalletContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getRankBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"getF1Deposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"getDepositInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"getRank\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_invitee\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addF1DepositedToInviter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"getId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investorAddress\",\"type\":\"address\"}],\"name\":\"showInvestorInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userVIP\",\"type\":\"address\"},{\"name\":\"_invitee\",\"type\":\"address\"}],\"name\":\"increaseInviterF1HaveJoinedPackageForUserVIP\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reserveFundContract\",\"type\":\"address\"}],\"name\":\"setSFUContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"getDirectlyInvitee\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"getDirectlyInviteeHaveJoinedPackage\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"getNetworkDeposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInvestorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_userName\",\"type\":\"string\"},{\"name\":\"_inviter\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rankCheckPoints\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_invitee\",\"type\":\"address\"}],\"name\":\"increaseInviterF1HaveJoinedPackage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"getInviter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isContractAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"getUserName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_inviter\",\"type\":\"address\"},{\"name\":\"_invitee\",\"type\":\"address\"}],\"name\":\"checkInvestorsInTheSameReferralTree\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getUserAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"getInvestorRankingRevenue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isCitizen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_mainAdmin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"currentRank\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newRank\",\"type\":\"uint256\"}],\"name\":\"RankAchieved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Citizen","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000007f464a81db1c5eb975227b6953daf6b216fbc561","Library":"","LicenseType":"None","SwarmSource":"bzzr://959b077d02f1e4c88e70707334437f4fc61a62789e6c71d4fdeb4bfa8e34d6ee"}]}