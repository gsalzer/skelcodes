{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public constant returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public constant returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\ncontract XOXOEXToken is ERC20 {\r\n\r\n    using SafeMath for uint256;\r\n    address owner = msg.sender;\r\n\r\n    bool public online = false;\r\n    uint256 public onlinetime = now;\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    mapping (address => bool) public frozenAccount;\r\n\r\n    mapping (address => uint256) onlinelocknum;\r\n    mapping (address => uint256) onlineexitnum;\r\n    mapping (address => uint256) onlinelockexitmonth;\r\n    mapping (address => uint256) onlinelockexittimes;\r\n    mapping (address => uint256) onlinelockbrunnum;\r\n\r\n    mapping (address => uint256) locktime;\r\n    mapping (address => uint256) locknum;\r\n    mapping (address => uint256) lockmonth;\r\n    mapping (address => uint256) lockexittimes;\r\n    mapping (address => uint256) lockburnnum;\r\n\r\n\r\n    string public constant name = \"XOXOEXToken\";\r\n    string public constant symbol = \"XO\";\r\n    uint public constant decimals = 3;\r\n    uint256 _Rate = 10 ** decimals;\r\n    uint256 public totalSupply = 2000000000 * _Rate;\r\n\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event FrozenFunds(address target, bool frozen);\r\n    event Burn(address target,uint256 _value);\r\n    event Online();\r\n\r\n\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyPayloadSize(uint size) {\r\n        assert(msg.data.length >= size + 4);\r\n        _;\r\n    }\r\n\r\n     function XOXOEXToken() public {\r\n        owner = msg.sender;\r\n        balances[owner] = totalSupply;\r\n    }\r\n\r\n     function nowInSeconds() public view returns (uint256){\r\n        return now;\r\n    }\r\n\r\n    //基础功能\r\n     function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {\r\n\r\n        require( frozenAccount[_to] == false && frozenAccount[msg.sender] == false);\r\n\r\n        require(_to != address(0));\r\n        require(_amount <= (balances[msg.sender].sub(lockOf(msg.sender))));\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n\r\n        Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {\r\n\r\n        require( frozenAccount[_to] == false && frozenAccount[ _from] == false);\r\n\r\n        require(_to != address(0));\r\n        require(_amount <= balances[_from]);\r\n        require(_amount <= balances[_from].sub(lockOf(msg.sender)));\r\n        require(_amount <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_amount);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant public returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function balanceOf(address _owner) constant public returns (uint256) {\r\n\t    return balances[_owner];\r\n    }\r\n\r\n //高级功能\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        if (newOwner != address(0) && newOwner != owner) {\r\n             owner = newOwner;\r\n        }\r\n    }\r\n\r\n    function freeze(address target, bool B) onlyOwner public {\r\n        frozenAccount[target] = B;\r\n        FrozenFunds(target, B);\r\n    }\r\n\r\n //定制功能\r\n //TODO\r\n\r\n    function locktransfer(address _to, uint256 _lockmonth, uint256 _month, uint256 _point) onlyOwner onlyPayloadSize(2 * 32) public returns (bool success) {\r\n        require( frozenAccount[_to] == false);\r\n        require( _point>= 0 && _point<= 10000);\r\n        uint256 amount;\r\n        amount = (totalSupply.div(10000)).mul( _point);\r\n\r\n        require(_to != address(0));\r\n\r\n        locked(_to ,_lockmonth ,_month, amount);\r\n\r\n        Transfer(msg.sender, _to, amount);\r\n        return true;\r\n    }\r\n //TODO\r\n    function onlinelocktransfer(address _to, uint256 _exitmonth, uint256 _exittime,uint256 _point,uint256 _onlineexitpoint) onlyOwner onlyPayloadSize(2 * 32) public returns (bool success) {\r\n        require( frozenAccount[_to] == false);\r\n        require( _point>= 0 && _point<= 10000);\r\n        require( _onlineexitpoint>= 0 && _onlineexitpoint<= 10000);\r\n        uint256 amount;\r\n        amount = (totalSupply.div(10000)).mul( _point);\r\n        uint256 exitamount;\r\n        exitamount = (amount.div(10000)).mul( _onlineexitpoint);\r\n\r\n        require(_to != address(0));\r\n\r\n        onlinelocked(_to, _exitmonth,_exittime, amount,exitamount);\r\n\r\n        Transfer(msg.sender, _to, amount);\r\n        return true;\r\n    }\r\n//TODO\r\n    function burn(address _owner,uint256 _amount) onlyOwner public {\r\n        uint256 lockednum = lockNum(_owner);\r\n        uint256 onlinelockednum = onlinelockNum(_owner);\r\n        require( _amount > 0);\r\n        require( lockednum > 0 || onlinelockednum > 0);\r\n\r\n        if( _amount <= lockednum.add(onlinelockednum)){\r\n            if(_amount<=lockednum){\r\n                lockburnnum[_owner] = lockburnnum[_owner].add(_amount);\r\n            }else{\r\n                lockburnnum[_owner] = lockburnnum[_owner].add(lockednum);\r\n                onlinelockbrunnum[_owner] = onlinelockbrunnum[_owner].add(_amount.sub(lockednum));\r\n            }\r\n            balances[_owner] = balances[_owner].sub(_amount);\r\n            balances[msg.sender] = balances[msg.sender].add(_amount);\r\n            Burn( _owner,_amount);\r\n        }else{\r\n            lockburnnum[_owner] = lockburnnum[_owner].add(lockednum);\r\n            onlinelockbrunnum[_owner] = onlinelockbrunnum[_owner].add(onlinelockednum);\r\n\r\n            balances[_owner] = balances[_owner].sub(lockednum.add(onlinelockednum));\r\n            balances[msg.sender] = balances[msg.sender].add(lockednum.add(onlinelockednum));\r\n            Burn( _owner,lockednum.add(onlinelockednum));\r\n\r\n        }\r\n    }\r\n\r\n//TODO\r\n    function lockOf(address _owner) constant public returns (uint256) {\r\n\t    return lockNum(_owner).add(onlinelockNum(_owner));\r\n    }\r\n\r\n    function onlineflag() onlyOwner public {\r\n        require( online == false);\r\n        online = true;\r\n        onlinetime = now;\r\n        Online();\r\n    }\r\n\r\n    function lockNum(address _owner) private returns (uint256) {\r\n        uint lockednum = 0;\r\n        uint256 nowtime = now;\r\n        uint256 exitnum = lockburnnum[_owner];\r\n\r\n        if(nowtime < locktime[_owner] + (lockmonth[_owner] + 1)*30* 1 days){\r\n            lockednum = lockednum.add(locknum[_owner]);\r\n        }\r\n        else{\r\n            if(nowtime < locktime[_owner] + (lockmonth[_owner] + lockexittimes[_owner])*30* 1 days){\r\n\t\t\t\tuint locknow = (nowtime - locktime[_owner] - lockmonth[_owner]*30* 1 days).div(30 * 1 days);\r\n                lockednum = lockednum.add (((lockexittimes[_owner] - locknow).mul(locknum[_owner])).div(lockexittimes[_owner]));\r\n            }\r\n        }\r\n        if(lockednum > exitnum){\r\n            lockednum = lockednum.sub(exitnum);\r\n        }else{\r\n            lockednum = 0;\r\n        }\r\n        return lockednum;\r\n    }\r\n\r\n    function onlinelockNum(address _owner) private returns (uint256) {\r\n        uint lockednum = 0;\r\n        uint256 nowtime = now;\r\n        uint256 exitnum = onlinelockbrunnum[_owner];\r\n        if(online){\r\n            if(onlinelockexitmonth[_owner] > 0 &&  onlinelockexittimes[_owner] > 0 ){\r\n                if(nowtime < onlinetime + onlinelockexitmonth[_owner]* 30* 1 days){\r\n                    lockednum =lockednum.add(onlinelocknum[_owner]).sub(onlineexitnum[_owner]) ;\r\n                }\r\n                else{\r\n                    if(nowtime < onlinetime + onlinelockexitmonth[_owner] * onlinelockexittimes[_owner] * 30* 1 days){\r\n\t\t\t\t        uint onlinelocknow = (now - onlinetime).div(onlinelockexitmonth[_owner] * 30 * 1 days);\r\n\t\t\t\t        uint256 num = (onlinelockexittimes[_owner].sub(onlinelocknow)).mul(onlinelocknum[_owner].sub(onlineexitnum[_owner])).div(onlinelockexittimes[_owner]);\r\n                        lockednum =lockednum.add(num);\r\n                    }\r\n                }\r\n            }\r\n        }else{\r\n            lockednum = lockednum.add(onlinelocknum[_owner].sub(onlinelockbrunnum[_owner])) ;\r\n        }\r\n        if(lockednum > exitnum){\r\n            lockednum = lockednum.sub(exitnum);\r\n        }else{\r\n            lockednum = 0;\r\n        }\r\n\t    return lockednum;\r\n    }\r\n\r\n\r\n    function locked(address _to, uint256 _lockmonth, uint256 _month, uint256 _amount) private {\r\n        uint256 lockednum = lockNum(_to);\r\n        if(lockednum< _amount){\r\n            require(_amount.sub(lockednum) <= (balances[msg.sender].sub(lockOf(msg.sender))));\r\n            locktime[_to] = now;\r\n            locknum[_to] = _amount;\r\n            lockmonth[_to] = _lockmonth;\r\n            lockexittimes[_to]= _month;\r\n            lockburnnum[_to] = 0;\r\n            balances[msg.sender] = balances[msg.sender].sub(_amount.sub(lockednum));\r\n            balances[_to] = balances[_to].add(_amount.sub(lockednum));\r\n        }else{\r\n            locktime[_to] = now;\r\n            locknum[_to] = _amount;\r\n            lockmonth[_to] = _lockmonth;\r\n            lockexittimes[_to]= _month;\r\n            lockburnnum[_to] = 0;\r\n            balances[msg.sender] = balances[msg.sender].add((lockednum.sub(_amount)));\r\n            balances[_to] = balances[_to].sub(lockednum.sub(_amount));\r\n        }\r\n\r\n    }\r\n\r\n    function onlinelocked(address _to, uint256 _exitmonth, uint256 _exittime,  uint256 _amount,  uint256 _exitamount) private {\r\n\r\n        uint256 lockednum = onlinelockNum(_to);\r\n        if(lockednum< _amount){\r\n            require(_amount.sub(lockednum) <= (balances[msg.sender].sub(lockOf(msg.sender))));\r\n            onlinelocknum[_to] = _amount;\r\n            onlineexitnum[_to] = _exitamount;\r\n            onlinelockexitmonth[_to] = _exitmonth;\r\n            onlinelockexittimes[_to]= _exittime;\r\n            onlinelockbrunnum[_to] =0;\r\n\r\n            balances[msg.sender] = balances[msg.sender].sub(_amount.sub(lockednum));\r\n            balances[_to] = balances[_to].add(_amount.sub(lockednum));\r\n        }else{\r\n            onlinelocknum[_to] = _amount;\r\n            onlinelockexitmonth[_to] = _exitmonth;\r\n            onlinelockexittimes[_to]= _exittime;\r\n            onlineexitnum[_to] = _exitamount;\r\n            onlinelockbrunnum[_to] =0;\r\n\r\n            balances[msg.sender] = balances[msg.sender].add((lockednum.sub(_amount)));\r\n            balances[_to] = balances[_to].sub(lockednum.sub(_amount));\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_lockmonth\",\"type\":\"uint256\"},{\"name\":\"_month\",\"type\":\"uint256\"},{\"name\":\"_point\",\"type\":\"uint256\"}],\"name\":\"locktransfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"onlineflag\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"onlinetime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"lockOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"online\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nowInSeconds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"B\",\"type\":\"bool\"}],\"name\":\"freeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_exitmonth\",\"type\":\"uint256\"},{\"name\":\"_exittime\",\"type\":\"uint256\"},{\"name\":\"_point\",\"type\":\"uint256\"},{\"name\":\"_onlineexitpoint\",\"type\":\"uint256\"}],\"name\":\"onlinelocktransfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Online\",\"type\":\"event\"}]","ContractName":"XOXOEXToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://4e456ff38f110ee33423ec739aa5a645f7c563535da4b4728d736e78e6fef8d0"}]}