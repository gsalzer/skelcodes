{"status":"1","message":"OK","result":[{"SourceCode":"{\"oraclizeAPI_0.4.sol\":{\"content\":\"// \\u003cORACLIZE_API\\u003e\\n/*\\nCopyright (c) 2015-2016 Oraclize SRL\\nCopyright (c) 2016 Oraclize LTD\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \\\"Software\\\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\nThe above copyright notice and this permission notice shall be included in\\nall copies or substantial portions of the Software.\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\nTHE SOFTWARE.\\n*/\\n\\npragma solidity \\u003e= 0.4.1 \\u003c 0.5;// Incompatible compiler version... please select one stated within pragma solidity or use different oraclizeAPI version\\n\\ncontract OraclizeI {\\n    address public cbAddress;\\n    function query(uint _timestamp, string _datasource, string _arg) payable returns (bytes32 _id);\\n    function query_withGasLimit(uint _timestamp, string _datasource, string _arg, uint _gaslimit) payable returns (bytes32 _id);\\n    function query2(uint _timestamp, string _datasource, string _arg1, string _arg2) payable returns (bytes32 _id);\\n    function query2_withGasLimit(uint _timestamp, string _datasource, string _arg1, string _arg2, uint _gaslimit) payable returns (bytes32 _id);\\n    function queryN(uint _timestamp, string _datasource, bytes _argN) payable returns (bytes32 _id);\\n    function queryN_withGasLimit(uint _timestamp, string _datasource, bytes _argN, uint _gaslimit) payable returns (bytes32 _id);\\n    function getPrice(string _datasource) returns (uint _dsprice);\\n    function getPrice(string _datasource, uint gaslimit) returns (uint _dsprice);\\n    function useCoupon(string _coupon);\\n    function setProofType(byte _proofType);\\n    function setConfig(bytes32 _config);\\n    function setCustomGasPrice(uint _gasPrice);\\n    function randomDS_getSessionPubKeyHash() returns(bytes32);\\n}\\n\\ncontract OraclizeAddrResolverI {\\n    function getAddress() returns (address _addr);\\n}\\n\\n/*\\nBegin solidity-cborutils\\nhttps://github.com/smartcontractkit/solidity-cborutils\\nMIT License\\nCopyright (c) 2018 SmartContract ChainLink, Ltd.\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \\\"Software\\\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n */\\n\\nlibrary Buffer {\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    function init(buffer memory buf, uint _capacity) internal constant {\\n        uint capacity = _capacity;\\n        if(capacity % 32 != 0) capacity += 32 - (capacity % 32);\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            mstore(0x40, add(ptr, capacity))\\n        }\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private constant {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    function max(uint a, uint b) private constant returns(uint) {\\n        if(a \\u003e b) {\\n            return a;\\n        }\\n        return b;\\n    }\\n\\n    /**\\n     * @dev Appends a byte array to the end of the buffer. Resizes if doing so\\n     *      would exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer.\\n     */\\n    function append(buffer memory buf, bytes data) internal constant returns(buffer memory) {\\n        if(data.length + buf.buf.length \\u003e buf.capacity) {\\n            resize(buf, max(buf.capacity, data.length) * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        uint len = data.length;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + buffer length + sizeof(buffer length)\\n            dest := add(add(bufptr, buflen), 32)\\n            // Update buffer length\\n            mstore(bufptr, add(buflen, mload(data)))\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for(; len \\u003e= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        uint mask = 256 ** (32 - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     * exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer.\\n     */\\n    function append(buffer memory buf, uint8 data) internal constant {\\n        if(buf.buf.length + 1 \\u003e buf.capacity) {\\n            resize(buf, buf.capacity * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Address = buffer address + buffer length + sizeof(buffer length)\\n            let dest := add(add(bufptr, buflen), 32)\\n            mstore8(dest, data)\\n            // Update buffer length\\n            mstore(bufptr, add(buflen, 1))\\n        }\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     * exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer.\\n     */\\n    function appendInt(buffer memory buf, uint data, uint len) internal constant returns(buffer memory) {\\n        if(len + buf.buf.length \\u003e buf.capacity) {\\n            resize(buf, max(buf.capacity, len) * 2);\\n        }\\n\\n        uint mask = 256 ** len - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Address = buffer address + buffer length + sizeof(buffer length) + len\\n            let dest := add(add(bufptr, buflen), len)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length\\n            mstore(bufptr, add(buflen, len))\\n        }\\n        return buf;\\n    }\\n}\\n\\nlibrary CBOR {\\n    using Buffer for Buffer.buffer;\\n\\n    uint8 private constant MAJOR_TYPE_INT = 0;\\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\\n    uint8 private constant MAJOR_TYPE_STRING = 3;\\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n    uint8 private constant MAJOR_TYPE_MAP = 5;\\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n    function shl8(uint8 x, uint8 y) private constant returns (uint8) {\\n        return x * (2 ** y);\\n    }\\n\\n    function encodeType(Buffer.buffer memory buf, uint8 major, uint value) private constant {\\n        if(value \\u003c= 23) {\\n            buf.append(uint8(shl8(major, 5) | value));\\n        } else if(value \\u003c= 0xFF) {\\n            buf.append(uint8(shl8(major, 5) | 24));\\n            buf.appendInt(value, 1);\\n        } else if(value \\u003c= 0xFFFF) {\\n            buf.append(uint8(shl8(major, 5) | 25));\\n            buf.appendInt(value, 2);\\n        } else if(value \\u003c= 0xFFFFFFFF) {\\n            buf.append(uint8(shl8(major, 5) | 26));\\n            buf.appendInt(value, 4);\\n        } else if(value \\u003c= 0xFFFFFFFFFFFFFFFF) {\\n            buf.append(uint8(shl8(major, 5) | 27));\\n            buf.appendInt(value, 8);\\n        }\\n    }\\n\\n    function encodeIndefiniteLengthType(Buffer.buffer memory buf, uint8 major) private constant {\\n        buf.append(uint8(shl8(major, 5) | 31));\\n    }\\n\\n    function encodeUInt(Buffer.buffer memory buf, uint value) internal constant {\\n        encodeType(buf, MAJOR_TYPE_INT, value);\\n    }\\n\\n    function encodeInt(Buffer.buffer memory buf, int value) internal constant {\\n        if(value \\u003e= 0) {\\n            encodeType(buf, MAJOR_TYPE_INT, uint(value));\\n        } else {\\n            encodeType(buf, MAJOR_TYPE_NEGATIVE_INT, uint(-1 - value));\\n        }\\n    }\\n\\n    function encodeBytes(Buffer.buffer memory buf, bytes value) internal constant {\\n        encodeType(buf, MAJOR_TYPE_BYTES, value.length);\\n        buf.append(value);\\n    }\\n\\n    function encodeString(Buffer.buffer memory buf, string value) internal constant {\\n        encodeType(buf, MAJOR_TYPE_STRING, bytes(value).length);\\n        buf.append(bytes(value));\\n    }\\n\\n    function startArray(Buffer.buffer memory buf) internal constant {\\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n    }\\n\\n    function startMap(Buffer.buffer memory buf) internal constant {\\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n    }\\n\\n    function endSequence(Buffer.buffer memory buf) internal constant {\\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n    }\\n}\\n\\n/*\\nEnd solidity-cborutils\\n */\\n\\ncontract usingOraclize {\\n    uint constant day = 60*60*24;\\n    uint constant week = 60*60*24*7;\\n    uint constant month = 60*60*24*30;\\n    byte constant proofType_NONE = 0x00;\\n    byte constant proofType_TLSNotary = 0x10;\\n    byte constant proofType_Ledger = 0x30;\\n    byte constant proofType_Android = 0x40;\\n    byte constant proofType_Native = 0xF0;\\n    byte constant proofStorage_IPFS = 0x01;\\n    uint8 constant networkID_auto = 0;\\n    uint8 constant networkID_mainnet = 1;\\n    uint8 constant networkID_testnet = 2;\\n    uint8 constant networkID_morden = 2;\\n    uint8 constant networkID_consensys = 161;\\n\\n    OraclizeAddrResolverI OAR;\\n\\n    OraclizeI oraclize;\\n    modifier oraclizeAPI {\\n        if((address(OAR)==0)||(getCodeSize(address(OAR))==0))\\n            oraclize_setNetwork(networkID_auto);\\n\\n        if(address(oraclize) != OAR.getAddress())\\n            oraclize = OraclizeI(OAR.getAddress());\\n\\n        _;\\n    }\\n    modifier coupon(string code){\\n        oraclize = OraclizeI(OAR.getAddress());\\n        oraclize.useCoupon(code);\\n        _;\\n    }\\n\\n    function oraclize_setNetwork(uint8 networkID) internal returns(bool){\\n        if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed)\\u003e0){ //mainnet\\n            OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed);\\n            oraclize_setNetworkName(\\\"eth_mainnet\\\");\\n            return true;\\n        }\\n        if (getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1)\\u003e0){ //ropsten testnet\\n            OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1);\\n            oraclize_setNetworkName(\\\"eth_ropsten3\\\");\\n            return true;\\n        }\\n        if (getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e)\\u003e0){ //kovan testnet\\n            OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e);\\n            oraclize_setNetworkName(\\\"eth_kovan\\\");\\n            return true;\\n        }\\n        if (getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48)\\u003e0){ //rinkeby testnet\\n            OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48);\\n            oraclize_setNetworkName(\\\"eth_rinkeby\\\");\\n            return true;\\n        }\\n        if (getCodeSize(0xa2998EFD205FB9D4B4963aFb70778D6354ad3A41)\\u003e0){ //goerli testnet\\n            OAR = OraclizeAddrResolverI(0xa2998EFD205FB9D4B4963aFb70778D6354ad3A41);\\n            oraclize_setNetworkName(\\\"eth_goerli\\\");\\n            return true;\\n        }\\n        if (getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475)\\u003e0){ //ethereum-bridge\\n            OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475);\\n            return true;\\n        }\\n        if (getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF)\\u003e0){ //ether.camp ide\\n            OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF);\\n            return true;\\n        }\\n        if (getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA)\\u003e0){ //browser-solidity\\n            OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA);\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function __callback(bytes32 myid, string result) {\\n        __callback(myid, result, new bytes(0));\\n    }\\n    function __callback(bytes32 myid, string result, bytes proof) {\\n    }\\n\\n    function oraclize_useCoupon(string code) oraclizeAPI internal {\\n        oraclize.useCoupon(code);\\n    }\\n\\n    function oraclize_getPrice(string datasource) oraclizeAPI internal returns (uint){\\n        return oraclize.getPrice(datasource);\\n    }\\n\\n    function oraclize_getPrice(string datasource, uint gaslimit) oraclizeAPI internal returns (uint){\\n        return oraclize.getPrice(datasource, gaslimit);\\n    }\\n\\n    function oraclize_query(string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\\n        uint price = oraclize.getPrice(datasource);\\n        if (price \\u003e 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\\n        return oraclize.query.value(price)(0, datasource, arg);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\\n        uint price = oraclize.getPrice(datasource);\\n        if (price \\u003e 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\\n        return oraclize.query.value(price)(timestamp, datasource, arg);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\\n        uint price = oraclize.getPrice(datasource, gaslimit);\\n        if (price \\u003e 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\\n        return oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit);\\n    }\\n    function oraclize_query(string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\\n        uint price = oraclize.getPrice(datasource, gaslimit);\\n        if (price \\u003e 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\\n        return oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit);\\n    }\\n    function oraclize_query(string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\\n        uint price = oraclize.getPrice(datasource);\\n        if (price \\u003e 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\\n        return oraclize.query2.value(price)(0, datasource, arg1, arg2);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\\n        uint price = oraclize.getPrice(datasource);\\n        if (price \\u003e 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\\n        return oraclize.query2.value(price)(timestamp, datasource, arg1, arg2);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\\n        uint price = oraclize.getPrice(datasource, gaslimit);\\n        if (price \\u003e 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\\n        return oraclize.query2_withGasLimit.value(price)(timestamp, datasource, arg1, arg2, gaslimit);\\n    }\\n    function oraclize_query(string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\\n        uint price = oraclize.getPrice(datasource, gaslimit);\\n        if (price \\u003e 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\\n        return oraclize.query2_withGasLimit.value(price)(0, datasource, arg1, arg2, gaslimit);\\n    }\\n    function oraclize_query(string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){\\n        uint price = oraclize.getPrice(datasource);\\n        if (price \\u003e 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\\n        bytes memory args = stra2cbor(argN);\\n        return oraclize.queryN.value(price)(0, datasource, args);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){\\n        uint price = oraclize.getPrice(datasource);\\n        if (price \\u003e 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\\n        bytes memory args = stra2cbor(argN);\\n        return oraclize.queryN.value(price)(timestamp, datasource, args);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\\n        uint price = oraclize.getPrice(datasource, gaslimit);\\n        if (price \\u003e 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\\n        bytes memory args = stra2cbor(argN);\\n        return oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit);\\n    }\\n    function oraclize_query(string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\\n        uint price = oraclize.getPrice(datasource, gaslimit);\\n        if (price \\u003e 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\\n        bytes memory args = stra2cbor(argN);\\n        return oraclize.queryN_withGasLimit.value(price)(0, datasource, args, gaslimit);\\n    }\\n    function oraclize_query(string datasource, string[1] args) oraclizeAPI internal returns (bytes32 id) {\\n        string[] memory dynargs = new string[](1);\\n        dynargs[0] = args[0];\\n        return oraclize_query(datasource, dynargs);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, string[1] args) oraclizeAPI internal returns (bytes32 id) {\\n        string[] memory dynargs = new string[](1);\\n        dynargs[0] = args[0];\\n        return oraclize_query(timestamp, datasource, dynargs);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, string[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\\n        string[] memory dynargs = new string[](1);\\n        dynargs[0] = args[0];\\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\\n    }\\n    function oraclize_query(string datasource, string[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\\n        string[] memory dynargs = new string[](1);\\n        dynargs[0] = args[0];\\n        return oraclize_query(datasource, dynargs, gaslimit);\\n    }\\n\\n    function oraclize_query(string datasource, string[2] args) oraclizeAPI internal returns (bytes32 id) {\\n        string[] memory dynargs = new string[](2);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        return oraclize_query(datasource, dynargs);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, string[2] args) oraclizeAPI internal returns (bytes32 id) {\\n        string[] memory dynargs = new string[](2);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        return oraclize_query(timestamp, datasource, dynargs);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, string[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\\n        string[] memory dynargs = new string[](2);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\\n    }\\n    function oraclize_query(string datasource, string[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\\n        string[] memory dynargs = new string[](2);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        return oraclize_query(datasource, dynargs, gaslimit);\\n    }\\n    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {\\n        string[] memory dynargs = new string[](3);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        dynargs[2] = args[2];\\n        return oraclize_query(datasource, dynargs);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {\\n        string[] memory dynargs = new string[](3);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        dynargs[2] = args[2];\\n        return oraclize_query(timestamp, datasource, dynargs);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, string[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\\n        string[] memory dynargs = new string[](3);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        dynargs[2] = args[2];\\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\\n    }\\n    function oraclize_query(string datasource, string[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\\n        string[] memory dynargs = new string[](3);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        dynargs[2] = args[2];\\n        return oraclize_query(datasource, dynargs, gaslimit);\\n    }\\n\\n    function oraclize_query(string datasource, string[4] args) oraclizeAPI internal returns (bytes32 id) {\\n        string[] memory dynargs = new string[](4);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        dynargs[2] = args[2];\\n        dynargs[3] = args[3];\\n        return oraclize_query(datasource, dynargs);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, string[4] args) oraclizeAPI internal returns (bytes32 id) {\\n        string[] memory dynargs = new string[](4);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        dynargs[2] = args[2];\\n        dynargs[3] = args[3];\\n        return oraclize_query(timestamp, datasource, dynargs);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, string[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\\n        string[] memory dynargs = new string[](4);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        dynargs[2] = args[2];\\n        dynargs[3] = args[3];\\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\\n    }\\n    function oraclize_query(string datasource, string[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\\n        string[] memory dynargs = new string[](4);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        dynargs[2] = args[2];\\n        dynargs[3] = args[3];\\n        return oraclize_query(datasource, dynargs, gaslimit);\\n    }\\n    function oraclize_query(string datasource, string[5] args) oraclizeAPI internal returns (bytes32 id) {\\n        string[] memory dynargs = new string[](5);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        dynargs[2] = args[2];\\n        dynargs[3] = args[3];\\n        dynargs[4] = args[4];\\n        return oraclize_query(datasource, dynargs);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, string[5] args) oraclizeAPI internal returns (bytes32 id) {\\n        string[] memory dynargs = new string[](5);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        dynargs[2] = args[2];\\n        dynargs[3] = args[3];\\n        dynargs[4] = args[4];\\n        return oraclize_query(timestamp, datasource, dynargs);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, string[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\\n        string[] memory dynargs = new string[](5);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        dynargs[2] = args[2];\\n        dynargs[3] = args[3];\\n        dynargs[4] = args[4];\\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\\n    }\\n    function oraclize_query(string datasource, string[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\\n        string[] memory dynargs = new string[](5);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        dynargs[2] = args[2];\\n        dynargs[3] = args[3];\\n        dynargs[4] = args[4];\\n        return oraclize_query(datasource, dynargs, gaslimit);\\n    }\\n    function oraclize_query(string datasource, bytes[] argN) oraclizeAPI internal returns (bytes32 id){\\n        uint price = oraclize.getPrice(datasource);\\n        if (price \\u003e 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\\n        bytes memory args = ba2cbor(argN);\\n        return oraclize.queryN.value(price)(0, datasource, args);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, bytes[] argN) oraclizeAPI internal returns (bytes32 id){\\n        uint price = oraclize.getPrice(datasource);\\n        if (price \\u003e 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\\n        bytes memory args = ba2cbor(argN);\\n        return oraclize.queryN.value(price)(timestamp, datasource, args);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, bytes[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\\n        uint price = oraclize.getPrice(datasource, gaslimit);\\n        if (price \\u003e 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\\n        bytes memory args = ba2cbor(argN);\\n        return oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit);\\n    }\\n    function oraclize_query(string datasource, bytes[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\\n        uint price = oraclize.getPrice(datasource, gaslimit);\\n        if (price \\u003e 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\\n        bytes memory args = ba2cbor(argN);\\n        return oraclize.queryN_withGasLimit.value(price)(0, datasource, args, gaslimit);\\n    }\\n    function oraclize_query(string datasource, bytes[1] args) oraclizeAPI internal returns (bytes32 id) {\\n        bytes[] memory dynargs = new bytes[](1);\\n        dynargs[0] = args[0];\\n        return oraclize_query(datasource, dynargs);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, bytes[1] args) oraclizeAPI internal returns (bytes32 id) {\\n        bytes[] memory dynargs = new bytes[](1);\\n        dynargs[0] = args[0];\\n        return oraclize_query(timestamp, datasource, dynargs);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, bytes[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\\n        bytes[] memory dynargs = new bytes[](1);\\n        dynargs[0] = args[0];\\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\\n    }\\n    function oraclize_query(string datasource, bytes[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\\n        bytes[] memory dynargs = new bytes[](1);\\n        dynargs[0] = args[0];\\n        return oraclize_query(datasource, dynargs, gaslimit);\\n    }\\n\\n    function oraclize_query(string datasource, bytes[2] args) oraclizeAPI internal returns (bytes32 id) {\\n        bytes[] memory dynargs = new bytes[](2);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        return oraclize_query(datasource, dynargs);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, bytes[2] args) oraclizeAPI internal returns (bytes32 id) {\\n        bytes[] memory dynargs = new bytes[](2);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        return oraclize_query(timestamp, datasource, dynargs);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, bytes[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\\n        bytes[] memory dynargs = new bytes[](2);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\\n    }\\n    function oraclize_query(string datasource, bytes[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\\n        bytes[] memory dynargs = new bytes[](2);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        return oraclize_query(datasource, dynargs, gaslimit);\\n    }\\n    function oraclize_query(string datasource, bytes[3] args) oraclizeAPI internal returns (bytes32 id) {\\n        bytes[] memory dynargs = new bytes[](3);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        dynargs[2] = args[2];\\n        return oraclize_query(datasource, dynargs);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, bytes[3] args) oraclizeAPI internal returns (bytes32 id) {\\n        bytes[] memory dynargs = new bytes[](3);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        dynargs[2] = args[2];\\n        return oraclize_query(timestamp, datasource, dynargs);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, bytes[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\\n        bytes[] memory dynargs = new bytes[](3);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        dynargs[2] = args[2];\\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\\n    }\\n    function oraclize_query(string datasource, bytes[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\\n        bytes[] memory dynargs = new bytes[](3);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        dynargs[2] = args[2];\\n        return oraclize_query(datasource, dynargs, gaslimit);\\n    }\\n\\n    function oraclize_query(string datasource, bytes[4] args) oraclizeAPI internal returns (bytes32 id) {\\n        bytes[] memory dynargs = new bytes[](4);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        dynargs[2] = args[2];\\n        dynargs[3] = args[3];\\n        return oraclize_query(datasource, dynargs);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, bytes[4] args) oraclizeAPI internal returns (bytes32 id) {\\n        bytes[] memory dynargs = new bytes[](4);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        dynargs[2] = args[2];\\n        dynargs[3] = args[3];\\n        return oraclize_query(timestamp, datasource, dynargs);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, bytes[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\\n        bytes[] memory dynargs = new bytes[](4);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        dynargs[2] = args[2];\\n        dynargs[3] = args[3];\\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\\n    }\\n    function oraclize_query(string datasource, bytes[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\\n        bytes[] memory dynargs = new bytes[](4);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        dynargs[2] = args[2];\\n        dynargs[3] = args[3];\\n        return oraclize_query(datasource, dynargs, gaslimit);\\n    }\\n    function oraclize_query(string datasource, bytes[5] args) oraclizeAPI internal returns (bytes32 id) {\\n        bytes[] memory dynargs = new bytes[](5);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        dynargs[2] = args[2];\\n        dynargs[3] = args[3];\\n        dynargs[4] = args[4];\\n        return oraclize_query(datasource, dynargs);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, bytes[5] args) oraclizeAPI internal returns (bytes32 id) {\\n        bytes[] memory dynargs = new bytes[](5);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        dynargs[2] = args[2];\\n        dynargs[3] = args[3];\\n        dynargs[4] = args[4];\\n        return oraclize_query(timestamp, datasource, dynargs);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, bytes[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\\n        bytes[] memory dynargs = new bytes[](5);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        dynargs[2] = args[2];\\n        dynargs[3] = args[3];\\n        dynargs[4] = args[4];\\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\\n    }\\n    function oraclize_query(string datasource, bytes[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\\n        bytes[] memory dynargs = new bytes[](5);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        dynargs[2] = args[2];\\n        dynargs[3] = args[3];\\n        dynargs[4] = args[4];\\n        return oraclize_query(datasource, dynargs, gaslimit);\\n    }\\n\\n    function oraclize_cbAddress() oraclizeAPI internal returns (address){\\n        return oraclize.cbAddress();\\n    }\\n    function oraclize_setProof(byte proofP) oraclizeAPI internal {\\n        return oraclize.setProofType(proofP);\\n    }\\n    function oraclize_setCustomGasPrice(uint gasPrice) oraclizeAPI internal {\\n        return oraclize.setCustomGasPrice(gasPrice);\\n    }\\n    function oraclize_setConfig(bytes32 config) oraclizeAPI internal {\\n        return oraclize.setConfig(config);\\n    }\\n\\n    function oraclize_randomDS_getSessionPubKeyHash() oraclizeAPI internal returns (bytes32){\\n        return oraclize.randomDS_getSessionPubKeyHash();\\n    }\\n\\n    function getCodeSize(address _addr) constant internal returns(uint _size) {\\n        assembly {\\n            _size := extcodesize(_addr)\\n        }\\n    }\\n\\n    function parseAddr(string _a) internal returns (address){\\n        bytes memory tmp = bytes(_a);\\n        uint160 iaddr = 0;\\n        uint160 b1;\\n        uint160 b2;\\n        for (uint i=2; i\\u003c2+2*20; i+=2){\\n            iaddr *= 256;\\n            b1 = uint160(tmp[i]);\\n            b2 = uint160(tmp[i+1]);\\n            if ((b1 \\u003e= 97)\\u0026\\u0026(b1 \\u003c= 102)) b1 -= 87;\\n            else if ((b1 \\u003e= 65)\\u0026\\u0026(b1 \\u003c= 70)) b1 -= 55;\\n            else if ((b1 \\u003e= 48)\\u0026\\u0026(b1 \\u003c= 57)) b1 -= 48;\\n            if ((b2 \\u003e= 97)\\u0026\\u0026(b2 \\u003c= 102)) b2 -= 87;\\n            else if ((b2 \\u003e= 65)\\u0026\\u0026(b2 \\u003c= 70)) b2 -= 55;\\n            else if ((b2 \\u003e= 48)\\u0026\\u0026(b2 \\u003c= 57)) b2 -= 48;\\n            iaddr += (b1*16+b2);\\n        }\\n        return address(iaddr);\\n    }\\n\\n    function strCompare(string _a, string _b) internal returns (int) {\\n        bytes memory a = bytes(_a);\\n        bytes memory b = bytes(_b);\\n        uint minLength = a.length;\\n        if (b.length \\u003c minLength) minLength = b.length;\\n        for (uint i = 0; i \\u003c minLength; i ++)\\n            if (a[i] \\u003c b[i])\\n                return -1;\\n            else if (a[i] \\u003e b[i])\\n                return 1;\\n        if (a.length \\u003c b.length)\\n            return -1;\\n        else if (a.length \\u003e b.length)\\n            return 1;\\n        else\\n            return 0;\\n    }\\n\\n    function indexOf(string _haystack, string _needle) internal returns (int) {\\n        bytes memory h = bytes(_haystack);\\n        bytes memory n = bytes(_needle);\\n        if(h.length \\u003c 1 || n.length \\u003c 1 || (n.length \\u003e h.length))\\n            return -1;\\n        else if(h.length \\u003e (2**128 -1))\\n            return -1;\\n        else\\n        {\\n            uint subindex = 0;\\n            for (uint i = 0; i \\u003c h.length; i ++)\\n            {\\n                if (h[i] == n[0])\\n                {\\n                    subindex = 1;\\n                    while(subindex \\u003c n.length \\u0026\\u0026 (i + subindex) \\u003c h.length \\u0026\\u0026 h[i + subindex] == n[subindex])\\n                    {\\n                        subindex++;\\n                    }\\n                    if(subindex == n.length)\\n                        return int(i);\\n                }\\n            }\\n            return -1;\\n        }\\n    }\\n\\n    function strConcat(string _a, string _b, string _c, string _d, string _e) internal returns (string) {\\n        bytes memory _ba = bytes(_a);\\n        bytes memory _bb = bytes(_b);\\n        bytes memory _bc = bytes(_c);\\n        bytes memory _bd = bytes(_d);\\n        bytes memory _be = bytes(_e);\\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\\n        bytes memory babcde = bytes(abcde);\\n        uint k = 0;\\n        for (uint i = 0; i \\u003c _ba.length; i++) babcde[k++] = _ba[i];\\n        for (i = 0; i \\u003c _bb.length; i++) babcde[k++] = _bb[i];\\n        for (i = 0; i \\u003c _bc.length; i++) babcde[k++] = _bc[i];\\n        for (i = 0; i \\u003c _bd.length; i++) babcde[k++] = _bd[i];\\n        for (i = 0; i \\u003c _be.length; i++) babcde[k++] = _be[i];\\n        return string(babcde);\\n    }\\n\\n    function strConcat(string _a, string _b, string _c, string _d) internal returns (string) {\\n        return strConcat(_a, _b, _c, _d, \\\"\\\");\\n    }\\n\\n    function strConcat(string _a, string _b, string _c) internal returns (string) {\\n        return strConcat(_a, _b, _c, \\\"\\\", \\\"\\\");\\n    }\\n\\n    function strConcat(string _a, string _b) internal returns (string) {\\n        return strConcat(_a, _b, \\\"\\\", \\\"\\\", \\\"\\\");\\n    }\\n\\n    // parseInt\\n    function parseInt(string _a) internal returns (uint) {\\n        return parseInt(_a, 0);\\n    }\\n\\n    // parseInt(parseFloat*10^_b)\\n    function parseInt(string _a, uint _b) internal returns (uint) {\\n        bytes memory bresult = bytes(_a);\\n        uint mint = 0;\\n        bool decimals = false;\\n        for (uint i=0; i\\u003cbresult.length; i++){\\n            if ((bresult[i] \\u003e= 48)\\u0026\\u0026(bresult[i] \\u003c= 57)){\\n                if (decimals){\\n                   if (_b == 0) break;\\n                    else _b--;\\n                }\\n                mint *= 10;\\n                mint += uint(bresult[i]) - 48;\\n            } else if (bresult[i] == 46) decimals = true;\\n        }\\n        if (_b \\u003e 0) mint *= 10**_b;\\n        return mint;\\n    }\\n\\n    function uint2str(uint i) internal returns (string){\\n        if (i == 0) return \\\"0\\\";\\n        uint j = i;\\n        uint len;\\n        while (j != 0){\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint k = len - 1;\\n        while (i != 0){\\n            bstr[k--] = byte(48 + i % 10);\\n            i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    using CBOR for Buffer.buffer;\\n    function stra2cbor(string[] arr) internal constant returns (bytes) {\\n        safeMemoryCleaner();\\n        Buffer.buffer memory buf;\\n        Buffer.init(buf, 1024);\\n        buf.startArray();\\n        for (uint i = 0; i \\u003c arr.length; i++) {\\n            buf.encodeString(arr[i]);\\n        }\\n        buf.endSequence();\\n        return buf.buf;\\n    }\\n\\n    function ba2cbor(bytes[] arr) internal constant returns (bytes) {\\n        safeMemoryCleaner();\\n        Buffer.buffer memory buf;\\n        Buffer.init(buf, 1024);\\n        buf.startArray();\\n        for (uint i = 0; i \\u003c arr.length; i++) {\\n            buf.encodeBytes(arr[i]);\\n        }\\n        buf.endSequence();\\n        return buf.buf;\\n    }\\n\\n    string oraclize_network_name;\\n    function oraclize_setNetworkName(string _network_name) internal {\\n        oraclize_network_name = _network_name;\\n    }\\n\\n    function oraclize_getNetworkName() internal returns (string) {\\n        return oraclize_network_name;\\n    }\\n\\n    function oraclize_newRandomDSQuery(uint _delay, uint _nbytes, uint _customGasLimit) internal returns (bytes32){\\n        if ((_nbytes == 0)||(_nbytes \\u003e 32)) throw;\\n\\t// Convert from seconds to ledger timer ticks\\n        _delay *= 10;\\n        bytes memory nbytes = new bytes(1);\\n        nbytes[0] = byte(_nbytes);\\n        bytes memory unonce = new bytes(32);\\n        bytes memory sessionKeyHash = new bytes(32);\\n        bytes32 sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash();\\n        assembly {\\n            mstore(unonce, 0x20)\\n            // the following variables can be relaxed\\n            // check relaxed random contract under ethereum-examples repo\\n            // for an idea on how to override and replace comit hash vars\\n            mstore(add(unonce, 0x20), xor(blockhash(sub(number, 1)), xor(coinbase, timestamp)))\\n            mstore(sessionKeyHash, 0x20)\\n            mstore(add(sessionKeyHash, 0x20), sessionKeyHash_bytes32)\\n        }\\n        bytes memory delay = new bytes(32);\\n        assembly {\\n            mstore(add(delay, 0x20), _delay)\\n        }\\n\\n        bytes memory delay_bytes8 = new bytes(8);\\n        copyBytes(delay, 24, 8, delay_bytes8, 0);\\n\\n        bytes[4] memory args = [unonce, nbytes, sessionKeyHash, delay];\\n        bytes32 queryId = oraclize_query(\\\"random\\\", args, _customGasLimit);\\n\\n        bytes memory delay_bytes8_left = new bytes(8);\\n\\n        assembly {\\n            let x := mload(add(delay_bytes8, 0x20))\\n            mstore8(add(delay_bytes8_left, 0x27), div(x, 0x100000000000000000000000000000000000000000000000000000000000000))\\n            mstore8(add(delay_bytes8_left, 0x26), div(x, 0x1000000000000000000000000000000000000000000000000000000000000))\\n            mstore8(add(delay_bytes8_left, 0x25), div(x, 0x10000000000000000000000000000000000000000000000000000000000))\\n            mstore8(add(delay_bytes8_left, 0x24), div(x, 0x100000000000000000000000000000000000000000000000000000000))\\n            mstore8(add(delay_bytes8_left, 0x23), div(x, 0x1000000000000000000000000000000000000000000000000000000))\\n            mstore8(add(delay_bytes8_left, 0x22), div(x, 0x10000000000000000000000000000000000000000000000000000))\\n            mstore8(add(delay_bytes8_left, 0x21), div(x, 0x100000000000000000000000000000000000000000000000000))\\n            mstore8(add(delay_bytes8_left, 0x20), div(x, 0x1000000000000000000000000000000000000000000000000))\\n\\n        }\\n\\n        oraclize_randomDS_setCommitment(queryId, sha3(delay_bytes8_left, args[1], sha256(args[0]), args[2]));\\n        return queryId;\\n    }\\n\\n    function oraclize_randomDS_setCommitment(bytes32 queryId, bytes32 commitment) internal {\\n        oraclize_randomDS_args[queryId] = commitment;\\n    }\\n\\n    mapping(bytes32=\\u003ebytes32) oraclize_randomDS_args;\\n    mapping(bytes32=\\u003ebool) oraclize_randomDS_sessionKeysHashVerified;\\n\\n    function verifySig(bytes32 tosignh, bytes dersig, bytes pubkey) internal returns (bool){\\n        bool sigok;\\n        address signer;\\n\\n        bytes32 sigr;\\n        bytes32 sigs;\\n\\n        bytes memory sigr_ = new bytes(32);\\n        uint offset = 4+(uint(dersig[3]) - 0x20);\\n        sigr_ = copyBytes(dersig, offset, 32, sigr_, 0);\\n        bytes memory sigs_ = new bytes(32);\\n        offset += 32 + 2;\\n        sigs_ = copyBytes(dersig, offset+(uint(dersig[offset-1]) - 0x20), 32, sigs_, 0);\\n\\n        assembly {\\n            sigr := mload(add(sigr_, 32))\\n            sigs := mload(add(sigs_, 32))\\n        }\\n\\n\\n        (sigok, signer) = safer_ecrecover(tosignh, 27, sigr, sigs);\\n        if (address(sha3(pubkey)) == signer) return true;\\n        else {\\n            (sigok, signer) = safer_ecrecover(tosignh, 28, sigr, sigs);\\n            return (address(sha3(pubkey)) == signer);\\n        }\\n    }\\n\\n    function oraclize_randomDS_proofVerify__sessionKeyValidity(bytes proof, uint sig2offset) internal returns (bool) {\\n        bool sigok;\\n\\n        // Step 6: verify the attestation signature, APPKEY1 must sign the sessionKey from the correct ledger app (CODEHASH)\\n        bytes memory sig2 = new bytes(uint(proof[sig2offset+1])+2);\\n        copyBytes(proof, sig2offset, sig2.length, sig2, 0);\\n\\n        bytes memory appkey1_pubkey = new bytes(64);\\n        copyBytes(proof, 3+1, 64, appkey1_pubkey, 0);\\n\\n        bytes memory tosign2 = new bytes(1+65+32);\\n        tosign2[0] = 1; //role\\n        copyBytes(proof, sig2offset-65, 65, tosign2, 1);\\n        bytes memory CODEHASH = hex\\\"fd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c\\\";\\n        copyBytes(CODEHASH, 0, 32, tosign2, 1+65);\\n        sigok = verifySig(sha256(tosign2), sig2, appkey1_pubkey);\\n\\n        if (sigok == false) return false;\\n\\n\\n        // Step 7: verify the APPKEY1 provenance (must be signed by Ledger)\\n        bytes memory LEDGERKEY = hex\\\"7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4\\\";\\n\\n        bytes memory tosign3 = new bytes(1+65);\\n        tosign3[0] = 0xFE;\\n        copyBytes(proof, 3, 65, tosign3, 1);\\n\\n        bytes memory sig3 = new bytes(uint(proof[3+65+1])+2);\\n        copyBytes(proof, 3+65, sig3.length, sig3, 0);\\n\\n        sigok = verifySig(sha256(tosign3), sig3, LEDGERKEY);\\n\\n        return sigok;\\n    }\\n\\n    modifier oraclize_randomDS_proofVerify(bytes32 _queryId, string _result, bytes _proof) {\\n        // Step 1: the prefix has to match \\u0027LP\\\\x01\\u0027 (Ledger Proof version 1)\\n        if ((_proof[0] != \\\"L\\\")||(_proof[1] != \\\"P\\\")||(_proof[2] != 1)) throw;\\n\\n        bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());\\n        if (proofVerified == false) throw;\\n\\n        _;\\n    }\\n\\n    function oraclize_randomDS_proofVerify__returnCode(bytes32 _queryId, string _result, bytes _proof) internal returns (uint8){\\n        // Step 1: the prefix has to match \\u0027LP\\\\x01\\u0027 (Ledger Proof version 1)\\n        if ((_proof[0] != \\\"L\\\")||(_proof[1] != \\\"P\\\")||(_proof[2] != 1)) return 1;\\n\\n        bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());\\n        if (proofVerified == false) return 2;\\n\\n        return 0;\\n    }\\n\\n    function matchBytes32Prefix(bytes32 content, bytes prefix, uint n_random_bytes) internal returns (bool){\\n        bool match_ = true;\\n\\n\\tif (prefix.length != n_random_bytes) throw;\\n\\n        for (uint256 i=0; i\\u003c n_random_bytes; i++) {\\n            if (content[i] != prefix[i]) match_ = false;\\n        }\\n\\n        return match_;\\n    }\\n\\n    function oraclize_randomDS_proofVerify__main(bytes proof, bytes32 queryId, bytes result, string context_name) internal returns (bool){\\n\\n        // Step 2: the unique keyhash has to match with the sha256 of (context name + queryId)\\n        uint ledgerProofLength = 3+65+(uint(proof[3+65+1])+2)+32;\\n        bytes memory keyhash = new bytes(32);\\n        copyBytes(proof, ledgerProofLength, 32, keyhash, 0);\\n        if (!(sha3(keyhash) == sha3(sha256(context_name, queryId)))) return false;\\n\\n        bytes memory sig1 = new bytes(uint(proof[ledgerProofLength+(32+8+1+32)+1])+2);\\n        copyBytes(proof, ledgerProofLength+(32+8+1+32), sig1.length, sig1, 0);\\n\\n        // Step 3: we assume sig1 is valid (it will be verified during step 5) and we verify if \\u0027result\\u0027 is the prefix of sha256(sig1)\\n        if (!matchBytes32Prefix(sha256(sig1), result, uint(proof[ledgerProofLength+32+8]))) return false;\\n\\n        // Step 4: commitment match verification, sha3(delay, nbytes, unonce, sessionKeyHash) == commitment in storage.\\n        // This is to verify that the computed args match with the ones specified in the query.\\n        bytes memory commitmentSlice1 = new bytes(8+1+32);\\n        copyBytes(proof, ledgerProofLength+32, 8+1+32, commitmentSlice1, 0);\\n\\n        bytes memory sessionPubkey = new bytes(64);\\n        uint sig2offset = ledgerProofLength+32+(8+1+32)+sig1.length+65;\\n        copyBytes(proof, sig2offset-64, 64, sessionPubkey, 0);\\n\\n        bytes32 sessionPubkeyHash = sha256(sessionPubkey);\\n        if (oraclize_randomDS_args[queryId] == sha3(commitmentSlice1, sessionPubkeyHash)){ //unonce, nbytes and sessionKeyHash match\\n            delete oraclize_randomDS_args[queryId];\\n        } else return false;\\n\\n\\n        // Step 5: validity verification for sig1 (keyhash and args signed with the sessionKey)\\n        bytes memory tosign1 = new bytes(32+8+1+32);\\n        copyBytes(proof, ledgerProofLength, 32+8+1+32, tosign1, 0);\\n        if (!verifySig(sha256(tosign1), sig1, sessionPubkey)) return false;\\n\\n        // verify if sessionPubkeyHash was verified already, if not.. let\\u0027s do it!\\n        if (oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] == false){\\n            oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] = oraclize_randomDS_proofVerify__sessionKeyValidity(proof, sig2offset);\\n        }\\n\\n        return oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash];\\n    }\\n\\n\\n    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\\n    function copyBytes(bytes from, uint fromOffset, uint length, bytes to, uint toOffset) internal returns (bytes) {\\n        uint minLength = length + toOffset;\\n\\n        if (to.length \\u003c minLength) {\\n            // Buffer too small\\n            throw; // Should be a better way?\\n        }\\n\\n        // NOTE: the offset 32 is added to skip the `size` field of both bytes variables\\n        uint i = 32 + fromOffset;\\n        uint j = 32 + toOffset;\\n\\n        while (i \\u003c (32 + fromOffset + length)) {\\n            assembly {\\n                let tmp := mload(add(from, i))\\n                mstore(add(to, j), tmp)\\n            }\\n            i += 32;\\n            j += 32;\\n        }\\n\\n        return to;\\n    }\\n\\n    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\\n    // Duplicate Solidity\\u0027s ecrecover, but catching the CALL return value\\n    function safer_ecrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal returns (bool, address) {\\n        // We do our own memory management here. Solidity uses memory offset\\n        // 0x40 to store the current end of memory. We write past it (as\\n        // writes are memory extensions), but don\\u0027t update the offset so\\n        // Solidity will reuse it. The memory used here is only needed for\\n        // this context.\\n\\n        // FIXME: inline assembly can\\u0027t access return values\\n        bool ret;\\n        address addr;\\n\\n        assembly {\\n            let size := mload(0x40)\\n            mstore(size, hash)\\n            mstore(add(size, 32), v)\\n            mstore(add(size, 64), r)\\n            mstore(add(size, 96), s)\\n\\n            // NOTE: we can reuse the request memory because we deal with\\n            //       the return code\\n            ret := call(3000, 1, 0, size, 128, size, 32)\\n            addr := mload(size)\\n        }\\n\\n        return (ret, addr);\\n    }\\n\\n    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\\n    function ecrecovery(bytes32 hash, bytes sig) internal returns (bool, address) {\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        if (sig.length != 65)\\n          return (false, 0);\\n\\n        // The signature format is a compact form of:\\n        //   {bytes32 r}{bytes32 s}{uint8 v}\\n        // Compact means, uint8 is not padded to 32 bytes.\\n        assembly {\\n            r := mload(add(sig, 32))\\n            s := mload(add(sig, 64))\\n\\n            // Here we are loading the last 32 bytes. We exploit the fact that\\n            // \\u0027mload\\u0027 will pad with zeroes if we overread.\\n            // There is no \\u0027mload8\\u0027 to do this, but that would be nicer.\\n            v := byte(0, mload(add(sig, 96)))\\n\\n            // Alternative solution:\\n            // \\u0027byte\\u0027 is not working due to the Solidity parser, so lets\\n            // use the second best option, \\u0027and\\u0027\\n            // v := and(mload(add(sig, 65)), 255)\\n        }\\n\\n        // albeit non-transactional signatures are not specified by the YP, one would expect it\\n        // to match the YP range of [27, 28]\\n        //\\n        // geth uses [0, 1] and some clients have followed. This might change, see:\\n        //  https://github.com/ethereum/go-ethereum/issues/2053\\n        if (v \\u003c 27)\\n          v += 27;\\n\\n        if (v != 27 \\u0026\\u0026 v != 28)\\n            return (false, 0);\\n\\n        return safer_ecrecover(hash, v, r, s);\\n    }\\n\\n    function safeMemoryCleaner() internal constant {\\n        assembly {\\n            let fmem := mload(0x40)\\n            codecopy(fmem, codesize, sub(msize, fmem))\\n        }\\n    }\\n}\\n// \\u003c/ORACLIZE_API\\u003e\\n\"},\"OZPImplementation.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./oraclizeAPI_0.4.sol\\\";\\n\\n/**\\n* @title OZPImplementation\\n* @dev this contract is a Pausable ERC20 token with Burn and Mint\\n* controleld by a central SupplyController. By implementing OZPImplementation\\n* this contract also includes external methods for setting\\n* a new implementation contract for the Proxy.\\n* NOTE: The storage defined here will actually be held in the Proxy\\n* contract and all calls to this contract should be made through\\n* the proxy, including admin actions done as owner or supplyController.\\n* Any call to transfer against this contract should fail\\n* with insufficient funds since no tokens will be issued there.\\n*/\\ncontract OZPImplementation is usingOraclize {\\n    /**\\n     * MATH\\n     */\\n    using SafeMath for uint256;\\n\\n\\n\\n\\n    /**\\n     * DATA\\n     */\\n\\n\\n\\n\\n    // INITIALIZATION DATA\\n    bool private initialized = false;\\n\\n\\n\\n\\n    // ERC20 BASIC DATA\\n    mapping(address =\\u003e uint256) internal balances;\\n    uint256 internal totalSupply_;\\n    string public constant name = \\\"OZAPHYRE\\\"; // solium-disable-line uppercase\\n    string public constant symbol = \\\"OZP\\\"; // solium-disable-line uppercase\\n    uint8 public constant decimals = 18; // solium-disable-line uppercase\\n    uint256 public constant ozpDecimal = 6;\\n    uint256 public counter = 1;\\n    \\n    uint256 public Price_OZP_Euro;\\n    uint256 public newPrice;\\n    string public supplyRegulator;\\n   event LogConstructorInitiated(string nextStep);\\n   event LogPriceUpdated(string price);\\n   event LogNewOraclizeQuery(string description);\\n\\n\\n\\n\\n    \\n\\n\\n\\n\\n    \\n    \\n\\n\\n\\n\\n    // ERC20 DATA\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) internal allowed;\\n\\n\\n\\n\\n    // OWNER DATA\\n    address public owner;\\n\\n\\n\\n\\n    // PAUSABILITY DATA\\n    bool public paused = false;\\n\\n\\n\\n\\n    // LAW ENFORCEMENT DATA\\n    address public lawEnforcementRole;\\n    mapping(address =\\u003e bool) internal frozen;\\n\\n\\n\\n\\n    // SUPPLY CONTROL DATA\\n    address public supplyController;\\n\\n\\n\\n\\n    /**\\n     * EVENTS\\n     */\\n\\n\\n\\n\\n    // ERC20 BASIC EVENTS\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\n\\n\\n    // ERC20 EVENTS\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n\\n\\n\\n    // OWNABLE EVENTS\\n    event OwnershipTransferred(\\n        address indexed oldOwner,\\n        address indexed newOwner\\n    );\\n\\n\\n\\n\\n    // PAUSABLE EVENTS\\n    event Pause();\\n    event Unpause();\\n\\n\\n\\n\\n    // LAW ENFORCEMENT EVENTS\\n    event AddressFrozen(address indexed addr);\\n    event AddressUnfrozen(address indexed addr);\\n    event FrozenAddressWiped(address indexed addr);\\n    event LawEnforcementRoleSet (\\n        address indexed oldLawEnforcementRole,\\n        address indexed newLawEnforcementRole\\n    );\\n\\n\\n\\n\\n    // SUPPLY CONTROL EVENTS\\n    event SupplyIncreased(address indexed to, uint256 value);\\n    event SupplyDecreased(address indexed from, uint256 value);\\n    event SupplyControllerSet(\\n        address indexed oldSupplyController,\\n        address indexed newSupplyController\\n    );\\n\\n\\n\\n\\n    /**\\n     * FUNCTIONALITY\\n     */\\n\\n\\n\\n\\n    // INITIALIZATION FUNCTIONALITY\\n\\n\\n\\n\\n    /**\\n     * @dev sets 0 initials tokens, the owner, and the supplyController.\\n     * this serves as the constructor for the proxy but compiles to the\\n     * memory model of the Implementation contract.\\n     */\\n    function initialize() public {\\n        require(!initialized, \\\"already initialized\\\");\\n        owner = msg.sender;\\n        lawEnforcementRole = address(0);\\n        totalSupply_ = 0;\\n        supplyController = msg.sender;\\n        initialized = true;\\n    }\\n\\n\\n\\n\\n    /**\\n     * The constructor is used here to ensure that the implementation\\n     * contract is initialized. An uncontrolled implementation\\n     * contract might lead to misleading state\\n     * for users who accidentally interact with it.\\n     */\\n    constructor() payable public {\\n        initialize();\\n        increaseSupply(1068809780000000000000000000);\\n        transfer(0xFD68F55C242f54478dFaB29BAE8111401288177E,68809780000000000000000000);\\n        decreaseSupply(68809780000000000000000000);\\n\\n        // updatePrice();\\n    }\\n\\n\\n\\n\\n    // ERC20 BASIC FUNCTIONALITY\\n    \\n    function () external payable {}\\n\\n\\n\\n\\n   function __callback(bytes32 myid, string result) public {\\n      if (msg.sender != oraclize_cbAddress()) revert();\\n          Price_OZP_Euro =1000000/(parseInt(result));\\n       emit LogPriceUpdated(result);\\n       updatePrice();\\n     emit LogNewOraclizeQuery(\\\"callback call hua \\\");\\n\\n   }\\n\\n\\n   function updatePrice()  payable public {\\n           emit LogNewOraclizeQuery(\\\"Oraclize query was sent, standing by for the answer..\\\");\\n           oraclize_query(1800,\\\"URL\\\", \\\"json(https://api.pro.coinbase.com/products/ETH-EUR/ticker).price\\\");\\n            emit LogNewOraclizeQuery(\\\"orcalize quey executed \\\");\\n          \\n   }\\n    \\n    \\n    \\n    \\n\\n    /**\\n    * @dev Total number of tokens in existence\\n    */\\n    function totalSupply() public view returns (uint256) {\\n        return totalSupply_;\\n    }\\n\\n\\n\\n\\n    /**\\n    * @dev Transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint256 _value)  public whenNotPaused returns (bool) {\\n        require(_to != address(0), \\\"cannot transfer to address zero\\\");\\n   \\trequire(!frozen[_to] \\u0026\\u0026 !frozen[msg.sender], \\\"address frozen\\\");\\n        require(_value \\u003c= balances[msg.sender], \\\"insufficient funds\\\");\\n\\n\\n\\n\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(_value);\\n        emit Transfer(msg.sender, _to, _value);\\n        return true;\\n    }\\n\\n\\n\\n\\nfunction sendCoin(address receiver, uint amount) public returns(bool sufficient) {\\n\\t\\tif (balances[msg.sender] \\u003c amount) return false;\\n\\t\\tbalances[msg.sender] -= amount;\\n\\t\\tbalances[receiver] += amount;\\n\\t\\temit Transfer(msg.sender, receiver, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\n\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _addr The address to query the the balance of.\\n    * @return An uint256 representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _addr) public view returns (uint256) {\\n        return balances[_addr];\\n    }\\n\\n\\n\\n\\n    // ERC20 FUNCTIONALITY\\n\\n\\n\\n\\n    /**\\n     * @dev Transfer tokens from one address to another\\n     * @param _from address The address which you want to send tokens from\\n     * @param _to address The address which you want to transfer to\\n     * @param _value uint256 the amount of tokens to be transferred\\n     */\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    )\\n    public\\n    returns (bool)\\n    {\\n        require(_to != address(0), \\\"cannot transfer to address zero\\\");\\n        require(!frozen[_to] \\u0026\\u0026 !frozen[_from] \\u0026\\u0026 !frozen[msg.sender], \\\"address frozen\\\");\\n        require(_value \\u003c= balances[_from], \\\"insufficient funds\\\");\\n        require(_value \\u003c= allowed[_from][msg.sender], \\\"insufficient allowance\\\");\\n\\n\\n\\n\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(_value);\\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n        emit Transfer(_from, _to, _value);\\n        return true;\\n    }\\n\\n\\n\\n\\n    /**\\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n     * race condition is to first reduce the spender\\u0027s allowance to 0 and set the desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     * @param _spender The address which will spend the funds.\\n     * @param _value The amount of tokens to be spent.\\n     */\\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\\n        require(!frozen[_spender] \\u0026\\u0026 !frozen[msg.sender], \\\"address frozen\\\");\\n        allowed[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n\\n\\n\\n    /**\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n     * @param _owner address The address which owns the funds.\\n     * @param _spender address The address which will spend the funds.\\n     * @return A uint256 specifying the amount of tokens still available for the spender.\\n     */\\n    function allowance(\\n        address _owner,\\n        address _spender\\n    )\\n    public\\n    view\\n    returns (uint256)\\n    {\\n        return allowed[_owner][_spender];\\n    }\\n    \\n\\n\\n\\n\\n\\n\\n\\n\\n  \\n    \\n\\n\\n\\n\\n    // OWNER FUNCTIONALITY\\n\\n\\n\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"onlyOwner\\\");\\n        _;\\n    }\\n\\n\\n\\n\\n    /**\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n     * @param _newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address _newOwner) public onlyOwner {\\n        require(_newOwner != address(0), \\\"cannot transfer ownership to address zero\\\");\\n        emit OwnershipTransferred(owner, _newOwner);\\n        owner = _newOwner;\\n    }\\n\\n\\n\\n\\n    // PAUSABILITY FUNCTIONALITY\\n\\n\\n\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused, \\\"whenNotPaused\\\");\\n        _;\\n    }\\n\\n\\n\\n\\n    /**\\n     * @dev called by the owner to pause, triggers stopped state\\n     */\\n    function pause() public onlyOwner {\\n        require(!paused, \\\"already paused\\\");\\n        paused = true;\\n        emit Pause();\\n    }\\n\\n\\n\\n\\n    /**\\n     * @dev called by the owner to unpause, returns to normal state\\n     */\\n    function unpause() public onlyOwner {\\n        require(paused, \\\"already unpaused\\\");\\n        paused = false;\\n        emit Unpause();\\n    }\\n\\n\\n\\n\\n    // LAW ENFORCEMENT FUNCTIONALITY\\n\\n\\n\\n\\n    /**\\n     * @dev Sets a new law enforcement role address.\\n     * @param _newLawEnforcementRole The new address allowed to freeze/unfreeze addresses and seize their tokens.\\n     */\\n    function setLawEnforcementRole(address _newLawEnforcementRole) public {\\n        require(msg.sender == lawEnforcementRole || msg.sender == owner, \\\"only lawEnforcementRole or Owner\\\");\\n        emit LawEnforcementRoleSet(lawEnforcementRole, _newLawEnforcementRole);\\n        lawEnforcementRole = _newLawEnforcementRole;\\n    }\\n\\n\\n\\n\\n    modifier onlyLawEnforcementRole() {\\n        require(msg.sender == lawEnforcementRole, \\\"onlyLawEnforcementRole\\\");\\n        _;\\n    }\\n\\n\\n\\n\\n    /**\\n     * @dev Freezes an address balance from being transferred.\\n     * @param _addr The new address to freeze.\\n     */\\n    function freeze(address _addr) public onlyLawEnforcementRole {\\n        require(!frozen[_addr], \\\"address already frozen\\\");\\n        frozen[_addr] = true;\\n        emit AddressFrozen(_addr);\\n    }\\n\\n\\n\\n\\n    /**\\n     * @dev Unfreezes an address balance allowing transfer.\\n     * @param _addr The new address to unfreeze.\\n     */\\n    function unfreeze(address _addr) public onlyLawEnforcementRole {\\n        require(frozen[_addr], \\\"address already unfrozen\\\");\\n        frozen[_addr] = false;\\n        emit AddressUnfrozen(_addr);\\n    }\\n\\n\\n\\n\\n    /**\\n     * @dev Wipes the balance of a frozen address, burning the tokens\\n     * and setting the approval to zero.\\n     * @param _addr The new frozen address to wipe.\\n     */\\n    function wipeFrozenAddress(address _addr) public onlyLawEnforcementRole {\\n        require(frozen[_addr], \\\"address is not frozen\\\");\\n        uint256 _balance = balances[_addr];\\n        balances[_addr] = 0;\\n        totalSupply_ = totalSupply_.sub(_balance);\\n        emit FrozenAddressWiped(_addr);\\n        emit SupplyDecreased(_addr, _balance);\\n        emit Transfer(_addr, address(0), _balance);\\n    }\\n\\n\\n\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _addr The address to check if frozen.\\n    * @return A bool representing whether the given address is frozen.\\n    */\\n    function isFrozen(address _addr) public view returns (bool) {\\n        return frozen[_addr];\\n    }\\n\\n\\n\\n\\n    // SUPPLY CONTROL FUNCTIONALITY\\n\\n\\n\\n\\n    /**\\n     * @dev Sets a new supply controller address.\\n     * @param _newSupplyController The address allowed to burn/mint tokens to control supply.\\n     */\\n    function setSupplyController(address _newSupplyController) public {\\n        require(msg.sender == supplyController || msg.sender == owner, \\\"only SupplyController or Owner\\\");\\n        require(_newSupplyController != address(0), \\\"cannot set supply controller to address zero\\\");\\n        emit SupplyControllerSet(supplyController, _newSupplyController);\\n        supplyController = _newSupplyController;\\n    }\\n\\n\\n\\n\\n    modifier onlySupplyController() {\\n        require(msg.sender == supplyController, \\\"onlySupplyController\\\");\\n        _;\\n    }\\n\\n\\n\\n\\n    /**\\n     * @dev Increases the total supply by minting the specified number of tokens to the supply controller account.\\n     * @param _value The number of tokens to add.\\n     * @return A boolean that indicates if the operation was successful.\\n     */\\n    function increaseSupply(uint256 _value) public onlySupplyController returns (bool success) {\\n        totalSupply_ = totalSupply_.add(_value);\\n        balances[supplyController] = balances[supplyController].add(_value);\\n        emit SupplyIncreased(supplyController, _value);\\n        emit Transfer(address(0), supplyController, _value);\\n        return true;\\n    }\\n\\n\\n\\n\\n    /**\\n     * @dev Decreases the total supply by burning the specified number of tokens from the supply controller account.\\n     * @param _value The number of tokens to remove.\\n     * @return A boolean that indicates if the operation was successful.\\n     */\\n    function decreaseSupply(uint256 _value)  public onlySupplyController returns (bool success) {\\n        require(_value \\u003c= balances[supplyController], \\\"not enough supply\\\");\\n        balances[supplyController] = balances[supplyController].sub(_value);\\n        totalSupply_ = totalSupply_.sub(_value);\\n        emit SupplyDecreased(supplyController, _value);\\n        emit Transfer(supplyController, address(0), _value);\\n        return true;\\n    }\\n}\\n\\n\\n\\n\\n\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    /**\\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003c= a);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, reverts on overflow.\\n    */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a);\\n\\n        return c;\\n    }\\n}\\n\"}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ozpDecimal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supplyRegulator\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"myid\",\"type\":\"bytes32\"},{\"name\":\"result\",\"type\":\"string\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"myid\",\"type\":\"bytes32\"},{\"name\":\"result\",\"type\":\"string\"},{\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newLawEnforcementRole\",\"type\":\"address\"}],\"name\":\"setLawEnforcementRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"unfreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSupplyController\",\"type\":\"address\"}],\"name\":\"setSupplyController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updatePrice\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Price_OZP_Euro\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"freeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendCoin\",\"outputs\":[{\"name\":\"sufficient\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"decreaseSupply\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lawEnforcementRole\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseSupply\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"wipeFrozenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isFrozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supplyController\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"nextStep\",\"type\":\"string\"}],\"name\":\"LogConstructorInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"price\",\"type\":\"string\"}],\"name\":\"LogPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"description\",\"type\":\"string\"}],\"name\":\"LogNewOraclizeQuery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AddressFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AddressUnfrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"FrozenAddressWiped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldLawEnforcementRole\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newLawEnforcementRole\",\"type\":\"address\"}],\"name\":\"LawEnforcementRoleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SupplyIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SupplyDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldSupplyController\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newSupplyController\",\"type\":\"address\"}],\"name\":\"SupplyControllerSet\",\"type\":\"event\"}]","ContractName":"OZPImplementation","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e0928db7eaa2e14f9be01d3ce992f99dfa3e9bbf97fdc53eb2b28cb32890001f"}]}