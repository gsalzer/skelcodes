{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.5;\r\n\r\ncontract Token {\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {}\r\n  function transfer(address _to, uint256 _value) public returns (bool success) {}\r\n}\r\n\r\ncontract TokenUSDT {\r\n  function transferFrom(address _from, address _to, uint256 _value) public  {}\r\n  function transfer(address _to, uint256 _value) public  {}\r\n}\r\n\r\ncontract UnionDaoShare {\r\n    address payable public owner;\r\n    address payable public shareA;//20%,Team\r\n    address payable public shareB;//30%,Liquidity management\r\n    address payable public shareC;//50%,Bank provision\r\n    uint256 public rateA;\r\n    uint256 public rateB;\r\n    uint256 public rateC;    \r\n    \r\n    /* Initializes contract*/\r\n    constructor () public {  \r\n        owner = msg.sender;\r\n        shareA = msg.sender;\r\n        shareB = msg.sender;\r\n        shareC = msg.sender;\r\n        rateA = 20;\r\n        rateB = 30;\r\n        rateC = 50;\r\n    }  \r\n\r\n    // this function called every time anyone sends a transaction to this contract\r\n    function () external payable \r\n    {\r\n        if(msg.value == 0)\r\n        {\r\n            address _add = address(this);\r\n            uint256 thisBalance = _add.balance;\r\n            if(thisBalance >= 10000000000000000)  \r\n            {\r\n                shareA.transfer(thisBalance * rateA / 100);\r\n                shareB.transfer(thisBalance * rateB / 100);\r\n                shareC.transfer(thisBalance * rateC / 100);\r\n            }\r\n        }\r\n    }\r\n\r\n    function share(address _token,uint _amount,bool _isUSDT) external payable \r\n    {\r\n        address _add = address(this);\r\n        if (_token != address(0x0)) {\r\n          if(_isUSDT)\r\n          {\r\n            uint256 thisBalance = Token(_token).balanceOf(_add);\r\n            if(thisBalance>0)\r\n            {\r\n                if (_amount < thisBalance) {thisBalance = _amount;}\r\n                TokenUSDT(_token).transfer(shareA,thisBalance * rateA / 100);\r\n                TokenUSDT(_token).transfer(shareB,thisBalance * rateB / 100);\r\n                TokenUSDT(_token).transfer(shareC,thisBalance * rateC / 100);\r\n            } \r\n          }else\r\n          {\r\n            uint256 thisBalance = Token(_token).balanceOf(_add);\r\n            if(thisBalance>0)\r\n            {\r\n                if (_amount < thisBalance) {thisBalance = _amount;}\r\n                Token(_token).transfer(shareA,thisBalance * rateA / 100);\r\n                Token(_token).transfer(shareB,thisBalance * rateB / 100);\r\n                Token(_token).transfer(shareC,thisBalance * rateC / 100);\r\n            }  \r\n          } \r\n        }else\r\n        {\r\n          uint256 thisBalance = _add.balance;\r\n          if(thisBalance>0)\r\n          {\r\n              if (_amount < thisBalance) {thisBalance = _amount;}\r\n              shareA.transfer(thisBalance * rateA / 100);\r\n              shareB.transfer(thisBalance * rateB / 100);\r\n              shareC.transfer(thisBalance * rateC / 100);\r\n          }  \r\n        }\r\n    }\r\n    \r\n    function changeShare(address payable _addA,address payable _addB,address payable _addC) public{\r\n        require(msg.sender == owner && _addA != address(0) && _addB != address(0) && _addC != address(0)) ;\t\t\t\r\n        shareA = _addA;\r\n        shareB = _addB;\r\n        shareC = _addC;        \r\n    }\r\n\r\n    function changeRate(uint256 _rateA,uint256 _rateB,uint256 _rateC) public{\r\n        require(msg.sender == owner && (_rateA+_rateB+_rateC) == 100 && _rateA<=100 && _rateB<=100 && _rateC<=100) ;\t\t\t\t\t\t\r\n        rateA = _rateA;\r\n        rateB = _rateB;\r\n        rateC = _rateC;       \r\n    }\r\n    \r\n    function changeOwner(address payable _add)public returns (bool success) {\r\n        require (msg.sender == owner) ;\r\n        require (_add != address(0x0)) ;\r\n        owner = _add ;\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"shareB\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"shareC\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rateA\",\"type\":\"uint256\"},{\"name\":\"_rateB\",\"type\":\"uint256\"},{\"name\":\"_rateC\",\"type\":\"uint256\"}],\"name\":\"changeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateA\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"shareA\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addA\",\"type\":\"address\"},{\"name\":\"_addB\",\"type\":\"address\"},{\"name\":\"_addC\",\"type\":\"address\"}],\"name\":\"changeShare\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_isUSDT\",\"type\":\"bool\"}],\"name\":\"share\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateB\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"UnionDaoShare","CompilerVersion":"v0.5.5+commit.47a71e8f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://01426aecef5ddc9d34685f7b38a521f6b96a0624fe4a0e76793a902824ddf1d2"}]}