{"status":"1","message":"OK","result":[{"SourceCode":"/*******************/\r\n// Blue Chip Cards //\r\n/*******************/\r\n\r\n// https://bluechip.cards\r\n// https://bluechip.fund\r\n\r\npragma solidity ^0.5.11;\r\n\r\ninterface BCF {\r\n\tfunction transfer(address _to, uint256 _tokens) external returns (bool);\r\n\tfunction dividendsOf(address _customer) external view returns (uint256);\r\n\tfunction balanceOf(address _customer) external view returns (uint256);\r\n\tfunction buy(address _ref) external payable returns (uint256);\r\n\tfunction reinvest() external;\r\n}\r\n\r\ncontract BlueChipCards {\r\n\r\n\tuint256 constant private BLOCKS_PER_DAY = 5760;\r\n\r\n\tstruct Card {\r\n\t\taddress owner;\r\n\t\tuint80 lastBlock;\r\n\t\tuint16 currentLevel;\r\n\t\tuint80 basePrice;\r\n\t\tuint80 cooldown;\r\n\t\tuint80 shares;\r\n\t}\r\n\r\n\tstruct Info {\r\n\t\tuint256 totalShares;\r\n\t\tmapping(address => int256) scaledPayout;\r\n\t\tuint256 cumulativeBCF;\r\n\t\tCard[] cards;\r\n\t\tBCF bcf;\r\n\t}\r\n\tInfo private info;\r\n\r\n\r\n\tevent Purchase(uint256 indexed cardIndex, address indexed buyer, uint256 ethereumPaid, uint256 tokensReceived);\r\n\tevent Withdraw(address indexed withdrawer, uint256 tokens);\r\n\r\n\r\n\tconstructor(address _BCF_address) public {\r\n\t\tinfo.bcf = BCF(_BCF_address);\r\n\t\t_createCards();\r\n\t}\r\n\r\n\tfunction buy(uint256 _index) public payable {\r\n\t\trequire(_index < info.cards.length);\r\n\t\tCard storage _card = info.cards[_index];\r\n\t\tuint256 _price;\r\n\t\tuint256 _level;\r\n\t\t(_price, _level) = _cardPrice(_index);\r\n\t\trequire(msg.value >= _price);\r\n\r\n\t\t_reinvest();\r\n\t\taddress _this = address(this);\r\n\t\tuint256 _balance = info.bcf.balanceOf(_this);\r\n\t\tinfo.bcf.buy.value(_price)(address(0x0));\r\n\t\tuint256 _bcfPurchased = info.bcf.balanceOf(_this) - _balance;\r\n\t\tif (_card.owner != address(this)) {\r\n\t\t\tinfo.bcf.transfer(_card.owner, _bcfPurchased * 4 / 5); // 80%\r\n\t\t}\r\n\t\tinfo.cumulativeBCF += _bcfPurchased / 6; // 16.66%\r\n\t\t// 3.34% will be left for the contract to gain dividends on\r\n\r\n\t\tinfo.scaledPayout[_card.owner] -= int256(info.cumulativeBCF * _card.shares);\r\n\t\tinfo.scaledPayout[msg.sender] += int256(info.cumulativeBCF * _card.shares);\r\n\r\n\t\t_card.owner = msg.sender;\r\n\t\t_card.lastBlock = uint80(block.number);\r\n\t\t_card.currentLevel = uint16(_level + 1);\r\n\r\n\t\temit Purchase(_index, msg.sender, _price, _bcfPurchased);\r\n\r\n\t\tif (msg.value > _price) {\r\n\t\t\tmsg.sender.transfer(msg.value - _price);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction withdraw() public {\r\n\t\t_reinvest();\r\n\t\tuint256 _withdrawable = withdrawableOf(msg.sender);\r\n\t\tif (_withdrawable > 0) {\r\n\t\t\tinfo.scaledPayout[msg.sender] += int256(_withdrawable * info.totalShares);\r\n\t\t\tinfo.bcf.transfer(msg.sender, _withdrawable);\r\n\t\t\temit Withdraw(msg.sender, _withdrawable);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction convertDust() public {\r\n\t\tinfo.bcf.buy.value(address(this).balance)(address(0x0));\r\n\t}\r\n\r\n\tfunction () external payable {\r\n\t\trequire(msg.sender == address(info.bcf));\r\n\t}\r\n\r\n\r\n\tfunction cardInfo(uint256 _index) public view returns (address owner, uint256 currentPrice, uint256 currentLevel, uint256 cooldown, uint256 nextCooldown, uint256 shares) {\r\n\t\trequire(_index < info.cards.length);\r\n\t\tCard memory _card = info.cards[_index];\r\n\t\tuint256 _price;\r\n\t\tuint256 _level;\r\n\t\t(_price, _level) = _cardPrice(_index);\r\n\t\tuint256 _nextCooldown = _card.cooldown - ((block.number - _card.lastBlock) % _card.cooldown);\r\n\t\treturn (_card.owner, _price, _level, _card.cooldown, _nextCooldown, _card.shares);\r\n\t}\r\n\r\n\tfunction allCardsInfo() public view returns (address[] memory owners, uint256[] memory currentPrices, uint256[] memory currentLevels, uint256[] memory cooldowns, uint256[] memory nextCooldowns, uint256[] memory shares) {\r\n\t\tuint256 _length = info.cards.length;\r\n\t\towners = new address[](_length);\r\n\t\tcurrentPrices = new uint256[](_length);\r\n\t\tcurrentLevels = new uint256[](_length);\r\n\t\tcooldowns = new uint256[](_length);\r\n\t\tnextCooldowns = new uint256[](_length);\r\n\t\tshares = new uint256[](_length);\r\n\t\tfor (uint256 i = 0; i < _length; i++) {\r\n\t\t\t(owners[i], currentPrices[i], currentLevels[i], cooldowns[i], nextCooldowns[i], shares[i]) = cardInfo(i);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction sharesOf(address _owner) public view returns (uint256) {\r\n\t\tuint256 _shares = 0;\r\n\t\tfor (uint256 i = 0; i < info.cards.length; i++) {\r\n\t\t\tCard memory _card = info.cards[i];\r\n\t\t\tif (_card.owner == _owner) {\r\n\t\t\t\t_shares += _card.shares;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn _shares;\r\n\t}\r\n\r\n\tfunction withdrawableOf(address _owner) public view returns (uint256) {\r\n\t\treturn uint256(int256(info.cumulativeBCF * sharesOf(_owner)) - info.scaledPayout[_owner]) / info.totalShares;\r\n\t}\r\n\r\n\r\n\tfunction _createCards() internal {\r\n\t\t_createCard(2.4 ether,   24 * BLOCKS_PER_DAY,      24);\r\n\t\t_createCard(0.023 ether, 23 * BLOCKS_PER_DAY / 24, 23);\r\n\t\t_createCard(0.222 ether, 15 * BLOCKS_PER_DAY,      22);\r\n\t\t_createCard(0.142 ether, 7 * BLOCKS_PER_DAY,       21);\r\n\t\t_createCard(0.012 ether, 10 * BLOCKS_PER_DAY,      20);\r\n\t\t_createCard(0.195 ether, 5 * BLOCKS_PER_DAY,       19);\r\n\t\t_createCard(0.018 ether, 2 * BLOCKS_PER_DAY,       18);\r\n\t\t_createCard(1.7 ether,   17 * BLOCKS_PER_DAY,      17);\r\n\t\t_createCard(0.096 ether, 9 * BLOCKS_PER_DAY,       16);\r\n\t\t_createCard(0.15 ether,  15 * BLOCKS_PER_DAY / 24, 15);\r\n\t\t_createCard(0.141 ether, BLOCKS_PER_DAY,           14);\r\n\t\t_createCard(0.321 ether, 3 * BLOCKS_PER_DAY,       13);\r\n\t\t_createCard(0.124 ether, 4 * BLOCKS_PER_DAY,       12);\r\n\t\t_createCard(0.011 ether, 11 * BLOCKS_PER_DAY / 24, 11);\r\n\t\t_createCard(10 ether,    50 * BLOCKS_PER_DAY,      10);\r\n\t\t_createCard(0.009 ether, 42 * BLOCKS_PER_DAY / 24,  9);\r\n\t\t_createCard(0.008 ether, 25 * BLOCKS_PER_DAY / 24,  8);\r\n\t\t_createCard(0.007 ether, 27 * BLOCKS_PER_DAY / 24,  7);\r\n\t\t_createCard(0.006 ether, 36 * BLOCKS_PER_DAY / 24,  6);\r\n\t\t_createCard(0.5 ether,   20 * BLOCKS_PER_DAY,       5);\r\n\t\t_createCard(0.004 ether, 8 * BLOCKS_PER_DAY / 24,   4);\r\n\t\t_createCard(0.003 ether, 9 * BLOCKS_PER_DAY / 24,   3);\r\n\t\t_createCard(0.002 ether, 4 * BLOCKS_PER_DAY / 24,   2);\r\n\t\t_createCard(0.001 ether, 1 * BLOCKS_PER_DAY / 24,   1);\r\n\r\n\t\tuint256 _totalShares = 0;\r\n\t\tfor (uint256 i = 0; i < info.cards.length; i++) {\r\n\t\t\t_totalShares += info.cards[i].shares;\r\n\t\t}\r\n\t\tinfo.totalShares = _totalShares;\r\n\t}\r\n\r\n\tfunction _createCard(uint256 _basePrice, uint256 _cooldown, uint256 _shares) internal {\r\n\t\tCard memory _newCard = Card({\r\n\t\t\towner: info.cards.length % 2 == 0 ? msg.sender : address(this),\r\n\t\t\tlastBlock: uint80(block.number),\r\n\t\t\tcurrentLevel: 0,\r\n\t\t\tbasePrice: uint80(_basePrice),\r\n\t\t\tcooldown: uint80(_cooldown),\r\n\t\t\tshares: uint80(_shares)\r\n\t\t});\r\n\t\tinfo.cards.push(_newCard);\r\n\t}\r\n\r\n\tfunction _reinvest() internal {\r\n\t\taddress _this = address(this);\r\n\t\tif (info.bcf.dividendsOf(_this) > 0) {\r\n\t\t\tuint256 _balance = info.bcf.balanceOf(_this);\r\n\t\t\tinfo.bcf.reinvest();\r\n\t\t\tinfo.cumulativeBCF += info.bcf.balanceOf(_this) - _balance;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tfunction _cardPrice(uint256 _index) internal view returns (uint256 price, uint256 level) {\r\n\t\tCard memory _card = info.cards[_index];\r\n\t\tuint256 _diff = (block.number - _card.lastBlock) / _card.cooldown;\r\n\t\tuint256 _level = 0;\r\n\t\tif (_card.currentLevel > _diff) {\r\n\t\t\t_level = _card.currentLevel - _diff;\r\n\t\t}\r\n\t\treturn (_card.basePrice * 2**_level, _level);\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"allCardsInfo\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"currentPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"currentLevels\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"cooldowns\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"nextCooldowns\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"convertDust\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"sharesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"cardInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cooldown\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextCooldown\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"withdrawableOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_BCF_address\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"cardIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethereumPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensReceived\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"}]","ContractName":"BlueChipCards","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000abefec93451a2cd5d864ff7b0b1604dfc60e9688","Library":"","LicenseType":"None","SwarmSource":"bzzr://978beb43e17a2f06d963fb877cb3ef2b7e435a4c99af8428bcedcb06344be488"}]}