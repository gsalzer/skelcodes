{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.6.0;\r\n\r\ncontract BWS_GAME {\r\n    address constant Operate_Team=0x7d0E7BaEBb4010c839F3E0f36373e7941792AdEa;\r\n    address constant Technical_Team=0x0ADb88DD919C4A85ed206d4438f892Fb4c9eFF70;\r\n    uint8 is_frozen;\r\n    string public standard = 'http://leeks.cc';\r\n    string public name=\"Bretton Woods system2.0\"; \r\n    string public symbol=\"BWS\"; \r\n    uint8 public decimals = 12;  \r\n    uint256 public totalSupply=100000000 szabo; \r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    event Transfer(address indexed from, address indexed to, uint256 value); \r\n    event Burn(address indexed from, uint256 value); \r\n    \r\n    uint256 public st_outer_disc;\r\n    uint256 public st_pool_bws;\r\n    uint256 public st_pool_eth;\r\n    uint256 public st_pool_a_bonus;\r\n\r\n    uint256 public st_core_value=0.0001 ether;\r\n    uint256 public st_trading_volume;\r\n    uint256 public st_in_circulation;\r\n    bool private st_frozen=false;\r\n    struct USER_MESSAGE\r\n        {\r\n            address payable addr;\r\n            uint32 ID;\r\n            uint32 faNode;\r\n            uint32 brNode;\r\n            uint32 chNode;\r\n            uint32 Subordinate;\r\n            uint256 Income;\r\n            uint256 A_bonus;\r\n            uint256 BWS;\r\n            uint256 MaxBWS;\r\n            uint64 LastSellTime;\r\n            uint256 ThisDaySellBWS;\r\n            uint64 LastOutToInTime;\r\n            uint256 ThisDayOutToInBWS;\r\n            uint256 ETH;\r\n        }\r\n\r\n    mapping (uint32 => address) st_user_id;\r\n    mapping (address => USER_MESSAGE) st_user_ad;\r\n    \r\n    mapping (address => bool) st_black_list;\r\n \r\n    uint32 public st_user_index;\r\n\r\n    event ev_luck4(address ad1,address ad2,address ad3,address ad4,uint8 luck,uint8 flags,uint256 pool_bws,uint256 a_bonus);\r\n\r\n    event ev_luck1000(address luck_ad,uint32 luck_id,uint8 flags,uint256 pool_bws,uint256 a_bonus);\r\n\r\n    event ev_buy_bws(address buy_ad,uint256 bws,uint256 pool_bws,uint256 a_bonus,uint256 pool_eth);\r\n \r\n    event ev_sell_bws(address sell_ad,uint256 bws,uint256 pool_bws,uint256 pool_eth);\r\n\r\n    event ev_inside_to_outside(address ad,uint256 bws,uint256 in_circulation);\r\n\r\n    event ev_outside_to_inside(address ad,uint256 bws,uint256 in_circulation);\r\n\r\n    event ev_game_give_bws(address ad,uint32 luck_id,uint8 flags,uint256 bws,uint256 pool_bws,uint256 in_circulation);\r\n\r\n    event ev_register(address ad,uint32 Recommender);\r\n\r\n    event ev_buy_of_first_send(address ad,uint256 bws,uint256 unit_price);\r\n\r\n    event ev_a_bonus(uint64 ThisTime,uint256 trading_volume,uint256 bonus,uint256 a_bonus);\r\n\r\n    event ev_eth_to_outside(address ad,uint256 eth);\r\n\r\n    event ev_recharge(address ad,uint256 eth);\r\n\r\n    constructor  () public {\r\n        st_user_index=0;\r\n        \r\n        st_user_id[0]=msg.sender;\r\n        st_user_ad[msg.sender]=USER_MESSAGE(msg.sender,0,0,0,1,1,0,0,0,0,0,0,0,0,0);\r\n        \r\n        st_user_id[1]=Operate_Team;\r\n        st_user_ad[Operate_Team]=USER_MESSAGE(address(uint160(Operate_Team)),1,0,0,0,0,0,0,0,0,0,0,0,0,0);\r\n        st_user_index=1;\r\n\r\n        st_pool_bws = 60000000 szabo;\r\n        st_user_ad[msg.sender].BWS=5000000 szabo;\r\n        st_user_ad[Operate_Team].BWS=5000000 szabo;\r\n        //外盘总发行3000万股\r\n        st_outer_disc=20000000 szabo;\r\n        balanceOf[msg.sender]=10000 szabo;\r\n        balanceOf[Operate_Team]=9990000 szabo;\r\n        \r\n        st_random=uint160(msg.sender);\r\n    }\r\n\r\n    function Recharge() public payable\r\n    {\r\n\r\n        require(!st_frozen,\"The system has been frozen\");\r\n        require(st_black_list[msg.sender] ==false ,\"You have been blacklisted\");\r\n        require(st_user_ad[msg.sender].addr !=address(0),\"You haven't registered yet.\");\r\n        st_user_ad[msg.sender].ETH=safe_add(st_user_ad[msg.sender].ETH,msg.value);\r\n        emit ev_recharge(msg.sender,msg.value);\r\n    }\r\n    \r\n    function ()external payable \r\n    {\r\n        require(!st_frozen,\"The system has been frozen\");\r\n        require(st_black_list[msg.sender] ==false ,\"You have been blacklisted\");\r\n        \r\n        if(st_user_ad[msg.sender].addr == address(0x0))\r\n        {\r\n            register(16777217);\r\n        }\r\n\r\n        uint256 unit_price;\r\n        if(msg.value>0)\r\n        {\r\n            if(st_outer_disc > 17000000 szabo)\r\n            {\r\n                unit_price = 0.0001 ether;\r\n            }\r\n            else\r\n            {\r\n                unit_price = st_core_value /5 *4;\r\n            }\r\n\r\n            uint256 bws=msg.value / (unit_price /1 szabo);\r\n            if(st_outer_disc >= bws)\r\n            {\r\n                st_outer_disc = safe_sub(st_outer_disc,bws);\r\n                balanceOf[msg.sender] = safe_add(balanceOf[msg.sender],bws);\r\n\r\n                st_user_ad[st_user_id[0]].addr.transfer(msg.value /2);\r\n                st_user_ad[st_user_id[1]].addr.transfer(msg.value /2);\r\n\r\n                emit ev_buy_of_first_send(msg.sender,bws,unit_price);\r\n            }\r\n            else if(st_outer_disc >0)\r\n            {\r\n                uint256 eth=safe_multiply(unit_price / 1000000000000,st_outer_disc);\r\n\r\n                st_user_ad[st_user_id[0]].addr.transfer(eth /2);\r\n                st_user_ad[st_user_id[1]].addr.transfer(eth /2);\r\n                \r\n                st_user_ad[msg.sender].ETH=safe_add(st_user_ad[msg.sender].ETH,msg.value - eth);\r\n                \r\n                balanceOf[msg.sender]=safe_add(balanceOf[msg.sender],st_outer_disc);\r\n                st_outer_disc=0;\r\n            }\r\n            else\r\n            {\r\n                st_user_ad[msg.sender].ETH=safe_add(st_user_ad[msg.sender].ETH,msg.value );\r\n            }\r\n        }\r\n        fpr_set_random(msg.sender);\r\n    }\r\n\r\nfunction fpr_Recommender_eth(address my_ad,uint256 eth)internal\r\n{\r\n    uint32 index;\r\n    index=st_user_ad[my_ad].faNode;\r\n    uint256 percentile=eth/9;\r\n    \r\n    st_user_ad[st_user_id[index]].ETH=safe_add(st_user_ad[st_user_id[index]].ETH,percentile*5);\r\n    st_user_ad[st_user_id[index]].Income=safe_add(st_user_ad[st_user_id[index]].Income,percentile*5);\r\n\r\n    for(uint32 i=0;i<4;i++)\r\n    {\r\n        index = st_user_ad[st_user_id[index]].faNode;\r\n        st_user_ad[st_user_id[index]].ETH=safe_add(st_user_ad[st_user_id[index]].ETH,percentile);\r\n        st_user_ad[st_user_id[index]].Income=safe_add(st_user_ad[st_user_id[index]].Income,percentile);\r\n    }\r\n}\r\n\r\n   function fpr_modify_max_bws(address ad)internal\r\n   {\r\n       assert(ad != address(0));\r\n       if(st_user_ad[ad].BWS > st_user_ad[ad].MaxBWS)\r\n            st_user_ad[ad].MaxBWS=st_user_ad[ad].BWS;\r\n   }\r\n\r\n   function safe_total_price(uint256 par_bws_count) internal view returns(uint256 ret)\r\n   {\r\n       assert(par_bws_count>0);\r\n       \r\n        uint256 unit_price=st_core_value/1000000000000;\r\n        uint256 total_price=unit_price*par_bws_count*105/100;\r\n        assert(total_price /105*100/par_bws_count == unit_price);\r\n        return total_price;\r\n   }\r\n   function safe_multiply(uint256 a,uint256 b)internal pure returns(uint256)\r\n   {\r\n       uint256 m=a*b;\r\n       assert(m/a==b);\r\n       return m;\r\n   }\r\n   function safe_add(uint256 a,uint256 b) internal pure returns(uint256)\r\n   {\r\n       assert(a+b>=a);\r\n       return a+b;\r\n   }\r\n   function safe_sub(uint256 a,uint256 b) internal pure returns(uint256)\r\n   {\r\n       assert(b<a);\r\n       return a-b;\r\n   }\r\n    function fp_get_core_value()internal\r\n    {\r\n        uint256 ret=0;\r\n       uint256 num=st_trading_volume;\r\n       uint256[10] memory trad=[uint256(100000 szabo),1000000 szabo,10000000 szabo,100000000 szabo,1000000000 szabo,10000000000 szabo,100000000000 szabo,1000000000000 szabo,10000000000000 szabo,100000000000000 szabo];\r\n       uint32[10] memory tra=[uint32(10000),20000,62500,100000,200000,1000000,2000000,10000000,20000000,100000000];\r\n       uint256 [10] memory t=[uint256(1 szabo),6 szabo,40 szabo,100 szabo,600 szabo,4600 szabo,9600 szabo,49600 szabo,99600 szabo,499960 szabo];\r\n\r\n       for(uint32 i=0 ;i< 10;i++)\r\n       {\r\n           if(num < trad[i])\r\n           {\r\n               ret=num / tra[i] + t[i];\r\n               break;\r\n           }\r\n       }\r\n       if (ret==0)\r\n       {\r\n           ret=num/200000000 + 1199960 szabo;\r\n       }\r\n       ret=safe_multiply(ret,100);\r\n\r\n\t\t//if(st_core_value < ret ) \r\n\t\t \r\n\t\tst_core_value=ret;\r\n    }\r\n\r\n    function register(uint32 Recommender_Number)public\r\n    {\r\n        require(!st_frozen,\"The system has been frozen\");\r\n        require(st_black_list[msg.sender] ==false ,\"You have been blacklisted\");\r\n        require(st_user_ad[msg.sender].addr == address(0x0),\"You've already registered.\");\r\n        uint32 index;\r\n        uint32 Recommender=unEncryption(Recommender_Number);\r\n        require(Recommender>=0 && Recommender<=st_user_index,\"Recommenders do not exist\");\r\n        st_user_index+=1;\r\n\r\n        st_user_id[st_user_index]=msg.sender;\r\n        st_user_ad[msg.sender]=USER_MESSAGE(msg.sender,st_user_index,Recommender,0,0,0,0,0,0,0,0,0,0,0,0);\r\n            \r\n        if(st_user_ad[st_user_id[Recommender]].chNode==0)\r\n        {\r\n            st_user_ad[st_user_id[Recommender]].chNode=st_user_index;\r\n        }\r\n        else\r\n        {\r\n            index=st_user_ad[st_user_id[Recommender]].chNode;\r\n            while (st_user_ad[st_user_id[index]].brNode>0)\r\n            {\r\n                index=st_user_ad[st_user_id[index]].brNode;\r\n            }\r\n            st_user_ad[st_user_id[index]].brNode=st_user_index;\r\n        }\r\n        emit ev_register(msg.sender,Recommender_Number); \r\n        fpr_set_random(msg.sender);\r\n    }\r\n   \r\n    function GetMyRecommendNumber(address par_addr)public view returns(uint32)\r\n    {\r\n        uint32 index;\r\n        uint32 Number;\r\n        require(par_addr!=address(0x0));\r\n        require(st_user_ad[par_addr].addr!=address(0x0),\"You haven't registered yet.\");\r\n        \r\n        index=st_user_ad[par_addr].chNode;\r\n        if(index>0)\r\n        {\r\n            Number=1;\r\n            while (st_user_ad[st_user_id[index]].brNode>0)\r\n            {\r\n                Number++;\r\n                index=st_user_ad[st_user_id[index]].brNode;\r\n            }\r\n        }\r\n    return Number;\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////\r\n    function Encryption(uint32 num) private pure returns(uint32 com_num)\r\n   {\r\n       require(num<=8388607,\"Maximum ID should not exceed 8388607\");\r\n       uint32 flags;\r\n       uint32 p=num;\r\n       uint32 ret;\r\n       if(num<4)\r\n        {\r\n            flags=2;\r\n        }\r\n       else\r\n       {\r\n          if(num<=15)flags=7;\r\n          else if(num<=255)flags=6;\r\n          else if(num<=4095)flags=5;\r\n          else if(num<=65535)flags=4;\r\n          else if(num<=1048575)flags=3;\r\n          else flags=2;\r\n       }\r\n       ret=flags<<23;\r\n       if(flags==2)\r\n        {\r\n            p=num; \r\n        }\r\n        else\r\n        {\r\n            p=num<<((flags-2)*4-1);\r\n        }\r\n        ret=ret | p;\r\n        return (ret);\r\n   }\r\n   function unEncryption(uint32 num)private pure returns(uint32 number)\r\n   {\r\n       uint32 p;\r\n       uint32 flags;\r\n       flags=num>>23;\r\n       p=num<<9;\r\n       if(flags==2)\r\n       {\r\n           if(num==16777216)return(0);\r\n           else if(num==16777217)return(1);\r\n           else if(num==16777218)return(2);\r\n           else if(num==16777219)return(3);\r\n           else \r\n            {\r\n                require(num>= 25690112 && num<66584576 ,\"Illegal parameter, parameter position must be greater than 10 bits\");\r\n                p=p>>9;\r\n            }\r\n       }\r\n       else \r\n       {\r\n            p=p>>(9+(flags-2)*4-1);\r\n       }\r\n     return (p);\r\n   }\r\n\r\n    function _transfer(address _from, address _to, uint256 _value) internal {\r\n    require(!st_frozen,\"The system has been frozen\");\r\n    require(st_black_list[msg.sender] ==false ,\"You have been blacklisted\");\r\n      require(_to != address(0x0));\r\n      require(balanceOf[_from] >= _value);\r\n      require(balanceOf[_to] + _value > balanceOf[_to]);\r\n      uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n      balanceOf[_from] -= _value;\r\n      balanceOf[_to] += _value;\r\n      emit Transfer(_from, _to, _value);\r\n      assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) public {\r\n        require(st_black_list[msg.sender] ==false ,\"You have been blacklisted\");\r\n        _transfer(msg.sender, _to, _value);\r\n        fpr_set_random(msg.sender);\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success){\r\n\r\n        require(!st_frozen,\"The system has been frozen\");\r\n        require(st_black_list[msg.sender] ==false ,\"You have been blacklisted\");\r\n        require(_value <= allowance[_from][msg.sender]); \r\n\r\n        allowance[_from][msg.sender] -= _value;\r\n\r\n        _transfer(_from, _to, _value);\r\n        \r\n        fpr_set_random(msg.sender);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        require(!st_frozen,\"The system has been frozen\");\r\n        require(st_black_list[msg.sender] ==false ,\"You have been blacklisted\");\r\n        allowance[msg.sender][_spender] = _value;\r\n        fpr_set_random(msg.sender);\r\n        return true;\r\n    }\r\n\r\n    function fp_buy_bws(uint256 par_count)public payable\r\n    {\r\n        require(!st_frozen,\"The system has been frozen\");\r\n        require(st_black_list[msg.sender] ==false ,\"You have been blacklisted\");\r\n        require(par_count>0 && par_count<=10000 szabo,\"Buy up to 10,000 BWS at a time\");\r\n        \r\n        require(st_user_ad[msg.sender].addr !=address(0),\"You haven't registered yet.\");\r\n        require(st_pool_bws>=par_count,\"Insufficient pool_BWS\");\r\n        if(msg.value>0)\r\n            st_user_ad[msg.sender].ETH=safe_add(st_user_ad[msg.sender].ETH,msg.value);\r\n        uint256 money=safe_total_price(par_count);\r\n        require(st_user_ad[msg.sender].ETH>=money,\"Your ETH is insufficient\");\r\n        st_user_ad[msg.sender].ETH = safe_sub(st_user_ad[msg.sender].ETH,money);\r\n        st_pool_bws = safe_sub(st_pool_bws, par_count);\r\n        st_user_ad[msg.sender].BWS = safe_add(st_user_ad[msg.sender].BWS, par_count);\r\n        fpr_modify_max_bws(msg.sender);\r\n        \r\n        uint256 percentile=money/105;\r\n        st_pool_eth=safe_add(st_pool_eth,percentile*90);\r\n        st_pool_a_bonus=safe_add(st_pool_a_bonus,percentile*5);\r\n        fpr_Recommender_eth(msg.sender,percentile*10);\r\n       \r\n        st_trading_volume=safe_add(st_trading_volume,par_count);\r\n\r\n        st_in_circulation=safe_add(st_in_circulation,par_count);\r\n\r\n        emit ev_buy_bws(msg.sender,par_count,st_pool_bws,st_pool_a_bonus,st_pool_eth);\r\n        st_core_value = st_core_value+par_count;\r\n        fp_get_core_value();\r\n       fpr_set_random(msg.sender);\r\n    }\r\n    function fp_sell_bws(uint256 par_count)public\r\n    {\r\n        require(!st_frozen,\"The system has been frozen\");\r\n        require(st_black_list[msg.sender] ==false ,\"You have been blacklisted\");\r\n        require(st_user_ad[msg.sender].addr !=address(0),\"You haven't registered yet.\");\r\n        require(st_user_ad[msg.sender].BWS >= par_count,\"Your BWS is insufficient\");\r\n        if(now-st_user_ad[msg.sender].LastSellTime > 86400)\r\n            st_user_ad[msg.sender].ThisDaySellBWS=0;\r\n        uint256 SellPermit=st_user_ad[msg.sender].MaxBWS/10;\r\n        require(safe_add(par_count , st_user_ad[msg.sender].ThisDaySellBWS) <= SellPermit,\"You didn't sell enough on that day.\");\r\n        \r\n        uint256 money=safe_total_price(par_count);\r\n        money=money/105*100;\r\n  \r\n        require(st_pool_eth >= money,\"The system does not have enough ETH\");\r\n        st_user_ad[msg.sender].BWS = safe_sub(st_user_ad[msg.sender].BWS,par_count);\r\n        st_user_ad[msg.sender].ETH=safe_add(st_user_ad[msg.sender].ETH,money/100*95);\r\n        st_pool_eth=safe_sub(st_pool_eth,money);\r\n        st_pool_bws=safe_add(st_pool_bws,par_count);\r\n  \r\n        st_user_ad[msg.sender].LastSellTime=uint64(now);\r\n        st_user_ad[msg.sender].ThisDaySellBWS=safe_add(st_user_ad[msg.sender].ThisDaySellBWS,par_count);\r\n\r\n        uint256 percentile = money/100;\r\n\r\n        st_pool_a_bonus=safe_add(st_pool_a_bonus,percentile*5);\r\n        \r\n        \r\n            if(st_in_circulation>=par_count)\r\n                st_in_circulation-=par_count;\r\n            else\r\n                st_in_circulation=0;\r\n        \r\n        st_trading_volume=safe_add(st_trading_volume,par_count);\r\n        emit ev_sell_bws(msg.sender,par_count,st_pool_bws,st_pool_eth);\r\n        \r\n        st_core_value = st_core_value+par_count;\r\n        fp_get_core_value();\r\n        fpr_set_random(msg.sender);\r\n   \r\n    }\r\n \r\n    function fp_inside_to_outside(uint256 par_bws_count) public\r\n    {\r\n        require(!st_frozen,\"The system has been frozen\");\r\n        require(st_black_list[msg.sender] ==false ,\"You have been blacklisted\");\r\n        require(st_user_ad[msg.sender].addr !=address(0),\"You haven't registered yet.\");\r\n        require(st_user_ad[msg.sender].BWS >= par_bws_count,\"Your BWS is insufficient\");\r\n\r\n        st_user_ad[msg.sender].BWS = safe_sub(st_user_ad[msg.sender].BWS,par_bws_count);\r\n\r\n        balanceOf[msg.sender]=safe_add(balanceOf[msg.sender],par_bws_count);\r\n\r\n\r\n            if(st_in_circulation>=par_bws_count)\r\n                st_in_circulation-=par_bws_count;\r\n            else\r\n                st_in_circulation=0;\r\n\r\n        emit ev_inside_to_outside(msg.sender,par_bws_count,st_in_circulation);\r\n        fpr_set_random(msg.sender);\r\n    }\r\n    function fp_outside_to_inside(uint256 par_bws_count)public\r\n    {\r\n        require(!st_frozen,\"The system has been frozen\");\r\n        require(st_black_list[msg.sender] ==false ,\"You have been blacklisted\");\r\n        require(st_user_ad[msg.sender].addr !=address(0),\"You haven't registered yet.\");\r\n        require(balanceOf[msg.sender] >= par_bws_count,\"Your BWS is insufficient\");\r\n\r\n        if(st_user_ad[msg.sender].MaxBWS ==0 )\r\n        {\r\n            require(par_bws_count > balanceOf[msg.sender]/10);\r\n        }\r\n        else\r\n        {\r\n\r\n            require(st_pool_bws< 60000000 ether,\"Fission funds are inadequate to postpone foreign exchange transfer\");\r\n  \r\n            uint256 temp=60000000 ether - st_pool_bws;\r\n            temp=safe_add(temp/7*4,60000000 ether);\r\n            require(temp>safe_add(st_in_circulation,st_pool_bws));\r\n            temp=safe_sub(temp,safe_add(st_in_circulation,st_pool_bws));\r\n            \r\n            require(temp> par_bws_count,\"Inadequate transferable amount\" );\r\n            if(now-st_user_ad[msg.sender].LastOutToInTime >=86400)st_user_ad[msg.sender].ThisDayOutToInBWS=0;\r\n            require(st_user_ad[msg.sender].MaxBWS/10 >= safe_add(st_user_ad[msg.sender].ThisDayOutToInBWS,par_bws_count),\"You have insufficient transfer authority today\");\r\n            }\r\n        balanceOf[msg.sender]=safe_sub(balanceOf[msg.sender],par_bws_count);\r\n        st_user_ad[msg.sender].BWS=safe_add(st_user_ad[msg.sender].BWS,par_bws_count);\r\n        fpr_modify_max_bws(msg.sender);\r\n        st_in_circulation=safe_add(st_in_circulation,par_bws_count);\r\n        \r\n        emit ev_outside_to_inside(msg.sender,par_bws_count,st_in_circulation);\r\n        fpr_set_random(msg.sender);\r\n    }\r\n\r\n    uint160 private st_random;\r\n    uint32 private st_add_rnd=0;\r\n    function fpr_set_random(address ad)internal \r\n    {\r\n        uint256 m_block=uint256(blockhash(block.number));\r\n        st_random=uint160(ripemd160(abi.encode(st_random,ad,m_block,st_add_rnd++)));\r\n    }\r\nfunction fpr_get_random(uint32 par_rnd)internal view returns(uint32 rnd)\r\n{\r\n    return uint32(st_random % par_rnd);\r\n}\r\n\r\nfunction give_bws_to_gamer(address ad,uint256 par_eth)internal returns(uint256 r_bws) \r\n{\r\n    require(ad!=address(0));\r\n    require(par_eth > 0);\r\n    uint256 eth=par_eth/10;\r\n    uint256 bws=eth/(st_core_value /1 szabo);\r\n    if(st_pool_bws>=bws)\r\n    {\r\n        st_pool_bws=st_pool_bws-bws;\r\n        st_user_ad[ad].BWS=safe_add(st_user_ad[ad].BWS,bws);\r\n        fpr_modify_max_bws(ad);\r\n        st_in_circulation=safe_add(st_in_circulation,bws);\r\n        return bws;\r\n    }\r\n    return 0;\r\n}\r\n   mapping (uint8 => mapping (uint16 => address)) st_luck1000;\r\n    uint16[5] public st_Luck_count1000=[0,0,0,0,0];\r\n    \r\n    function fpu_luck_draw1000(uint8 par_type)public payable\r\n    {\r\n        require(!st_frozen,\"The system has been frozen\");\r\n        require(st_black_list[msg.sender] ==false ,\"You have been blacklisted\");\r\n        require (par_type <5);\r\n         require(st_user_ad[msg.sender].addr !=address(0),\"You haven't registered yet.\");\r\n         \r\n         uint256[5] memory price=[uint256(0.01 ether),0.05 ether,0.1 ether,0.5 ether,1 ether];\r\n         \r\n        if(msg.value>0)\r\n            st_user_ad[msg.sender].ETH=safe_add(st_user_ad[msg.sender].ETH,msg.value);\r\n        require(st_user_ad[msg.sender].ETH >= price[par_type],\"Your ETH is insufficient\");\r\n        st_user_ad[msg.sender].ETH = st_user_ad[msg.sender].ETH-price[par_type];\r\n        uint256 value=price[par_type]/10;\r\n        fpr_Recommender_eth(msg.sender,value);\r\n        st_pool_a_bonus=safe_add(st_pool_a_bonus,value);\r\n        fpr_set_random(msg.sender);\r\n        st_luck1000[par_type][st_Luck_count1000[par_type]]=msg.sender;\r\n        emit ev_game_give_bws(msg.sender,st_Luck_count1000[par_type],par_type+5,give_bws_to_gamer(msg.sender,price[par_type]),st_pool_bws,st_in_circulation);\r\n        \r\n        st_Luck_count1000[par_type]++;\r\n        if(st_Luck_count1000[par_type] %10 ==0 && st_Luck_count1000[par_type] !=0)\r\n        {\r\n            st_user_ad[msg.sender].ETH =safe_add( st_user_ad[msg.sender].ETH,price[par_type]*2);\r\n            emit ev_luck1000(msg.sender,st_Luck_count1000[par_type]-1,par_type+5,st_pool_bws,st_pool_a_bonus);\r\n        }\r\n        if(st_Luck_count1000[par_type]==1000)\r\n        {\r\n            st_Luck_count1000[par_type]=0;\r\n            uint16 rnd=uint16(fpr_get_random(1000));\r\n            st_user_ad[st_luck1000[par_type][rnd]].ETH += (price[par_type]*600);\r\n            emit ev_luck1000(st_luck1000[par_type][rnd],st_Luck_count1000[par_type]-1,par_type+10,st_pool_bws,st_pool_a_bonus);\r\n        }\r\n       \r\n    }\r\n\r\n    mapping (uint8 => mapping (uint8 => address)) st_luck4;\r\n    uint8[5] public st_Luck_count4=[0,0,0,0,0];\r\n    \r\n    function fpu_luck_draw4(uint8 par_type)public payable\r\n    {\r\n        require(!st_frozen,\"The system has been frozen\");\r\n        require(st_black_list[msg.sender] ==false ,\"You have been blacklisted\");\r\n        require (par_type <5);\r\n         require(st_user_ad[msg.sender].addr !=address(0),\"You haven't registered yet.\");\r\n         \r\n         uint256[5] memory price=[uint256(0.01 ether),0.05 ether,0.1 ether,0.5 ether,1 ether];\r\n         \r\n        if(msg.value>0)\r\n            st_user_ad[msg.sender].ETH=safe_add(st_user_ad[msg.sender].ETH,msg.value);\r\n        require(st_user_ad[msg.sender].ETH > price[par_type],\"Your ETH is insufficient\");\r\n        st_user_ad[msg.sender].ETH = st_user_ad[msg.sender].ETH-price[par_type];\r\n        uint256 value=price[par_type]/10;\r\n        fpr_Recommender_eth(msg.sender,value);\r\n        st_pool_a_bonus=safe_add(st_pool_a_bonus,value);\r\n        fpr_set_random(msg.sender);\r\n        st_luck4[par_type][st_Luck_count4[par_type]]=msg.sender;\r\n        emit ev_game_give_bws(msg.sender,st_Luck_count4[par_type],par_type,give_bws_to_gamer(msg.sender,price[par_type]),st_pool_bws,st_in_circulation);\r\n        \r\n        st_Luck_count4[par_type]++;\r\n       \r\n        if(st_Luck_count4[par_type]==4)\r\n        {\r\n            st_Luck_count4[par_type]=0;\r\n            uint8 rnd=uint8(fpr_get_random(4));\r\n            st_user_ad[st_luck4[par_type][rnd]].ETH += (value*32);\r\n            emit ev_luck4(st_luck4[par_type][0],\r\n                     st_luck4[par_type][1],\r\n                     st_luck4[par_type][2],\r\n                     st_luck4[par_type][3],\r\n                     rnd,\r\n                     par_type,\r\n                     st_pool_bws,\r\n                     st_pool_a_bonus\r\n                    );\r\n        }\r\n    }\r\n\r\n    function fpu_a_bonus()public\r\n    {\r\n        require(msg.sender == st_user_ad[st_user_id[0]].addr \r\n             || msg.sender == st_user_ad[st_user_id[1]].addr,\"Only Administrators Allow Operations\");\r\n        uint256 bonus=st_pool_a_bonus /2;\r\n        st_pool_a_bonus=bonus;\r\n        \r\n        st_user_ad[st_user_id[0]].ETH=safe_add(st_user_ad[st_user_id[0]].ETH,bonus / 10);\r\n        st_user_ad[st_user_id[1]].ETH=safe_add(st_user_ad[st_user_id[1]].ETH,bonus / 10);\r\n        bonus = bonus /5 * 4;\r\n        uint256 circulation=st_in_circulation + 10000000 szabo;\r\n        circulation = circulation - st_user_ad[st_user_id[0]].BWS - st_user_ad[st_user_id[1]].BWS;\r\n        require(circulation>0);\r\n        bonus /= circulation;\r\n        emit ev_a_bonus(uint64(now),st_in_circulation,bonus,st_pool_a_bonus);\r\n        for(uint32 i =2;i<=st_user_index;i++)\r\n        {\r\n            st_user_ad[st_user_id[i]].ETH =safe_add(st_user_ad[st_user_id[i]].ETH,\r\n                    safe_multiply(bonus,st_user_ad[st_user_id[i]].BWS) / 1000000000000);\r\n            \r\n        }\r\n    }\r\n\r\n    \r\n    function fpu_eth_to_outside(uint256 par_eth)public\r\n    {\r\n        require(!st_frozen,\"The system has been frozen\");\r\n        require(st_black_list[msg.sender] ==false ,\"You have been blacklisted\");\r\n        require(st_user_ad[msg.sender].addr !=address(0),\"You haven't registered yet.\");\r\n        require(st_user_ad[msg.sender].ETH >= par_eth,\"Your ETH is insufficient\");\r\n        require(par_eth >0,\"Please enter the number of ETHs to withdraw\");\r\n        st_user_ad[msg.sender].ETH -= par_eth;\r\n        msg.sender.transfer(par_eth);\r\n        emit ev_eth_to_outside(msg.sender,par_eth);\r\n    }\r\n    function fpu_set_black_list(address par_ad,bool par_black_list)public\r\n    {\r\n        if(par_black_list==true &&(msg.sender==Operate_Team || msg.sender ==Technical_Team))\r\n        {\r\n            st_black_list[par_ad]=true;\r\n            return;\r\n        }\r\n        if(msg.sender==Operate_Team)\r\n         {\r\n             if(is_frozen==0)\r\n             {\r\n                 is_frozen=2;\r\n             }\r\n             else if(is_frozen==3)\r\n             {\r\n                 st_black_list[par_ad] = false;\r\n                 is_frozen=0;\r\n             }\r\n         }\r\n         else if(msg.sender == Technical_Team)\r\n         {\r\n             if(is_frozen==0)\r\n             {\r\n                 is_frozen=3;\r\n             }\r\n             else if(is_frozen==2)\r\n             {\r\n                 st_black_list[par_ad] = false;\r\n                 is_frozen=0;\r\n             }\r\n         }\r\n    }\r\n    function fpu_set_frozen(bool par_isfrozen)public\r\n    {\r\n        if(par_isfrozen==true &&(msg.sender==Operate_Team || msg.sender ==Technical_Team))\r\n        {\r\n            st_frozen =true;\r\n            return;\r\n        }\r\n         if(msg.sender==Operate_Team)\r\n         {\r\n             if(is_frozen==0)\r\n             {\r\n                 is_frozen=2;\r\n             }\r\n             else if(is_frozen==3)\r\n             {\r\n                 st_frozen = false;\r\n                 is_frozen=0;\r\n             }\r\n         }\r\n         else if(msg.sender == Technical_Team)\r\n         {\r\n             if(is_frozen==0)\r\n             {\r\n                 is_frozen=3;\r\n             }\r\n             else if(is_frozen==2)\r\n             {\r\n                 st_frozen = false;\r\n                 is_frozen=0;\r\n             }\r\n         }\r\n    }\r\n    function fpu_get_my_message(address ad)public view returns(\r\n            uint32 ID,\r\n            uint32 faNode,\r\n            uint32 Subordinate,\r\n            uint256 Income,\r\n            uint256 A_bonus\r\n            )\r\n    {\r\n        return (\r\n            Encryption(st_user_ad[ad].ID),\r\n            Encryption(st_user_ad[ad].faNode),\r\n            st_user_ad[ad].Subordinate,\r\n            st_user_ad[ad].Income,\r\n            st_user_ad[ad].A_bonus\r\n        );\r\n    }\r\n    function fpu_get_my_message1(address ad)public view returns(\r\n            \r\n            uint256 BWS,\r\n            uint256 MaxBWS,\r\n            uint256 ThisDaySellBWS,\r\n            uint256 ThisDayOutToInBWS,\r\n            uint256 ETH\r\n            )\r\n    {\r\n        return (\r\n            st_user_ad[ad].BWS,\r\n            st_user_ad[ad].MaxBWS,\r\n            (now-st_user_ad[ad].LastSellTime >86400)?0:st_user_ad[ad].ThisDaySellBWS,\r\n            (now-st_user_ad[ad].LastOutToInTime >86400)?0:st_user_ad[ad].ThisDayOutToInBWS,\r\n            st_user_ad[ad].ETH\r\n        );\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"Recommender_Number\",\"type\":\"uint32\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"par_type\",\"type\":\"uint8\"}],\"name\":\"fpu_luck_draw1000\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"par_ad\",\"type\":\"address\"},{\"name\":\"par_black_list\",\"type\":\"bool\"}],\"name\":\"fpu_set_black_list\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"st_core_value\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"st_Luck_count1000\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"st_trading_volume\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ad\",\"type\":\"address\"}],\"name\":\"fpu_get_my_message1\",\"outputs\":[{\"name\":\"BWS\",\"type\":\"uint256\"},{\"name\":\"MaxBWS\",\"type\":\"uint256\"},{\"name\":\"ThisDaySellBWS\",\"type\":\"uint256\"},{\"name\":\"ThisDayOutToInBWS\",\"type\":\"uint256\"},{\"name\":\"ETH\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"par_bws_count\",\"type\":\"uint256\"}],\"name\":\"fp_outside_to_inside\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"st_outer_disc\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"par_eth\",\"type\":\"uint256\"}],\"name\":\"fpu_eth_to_outside\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"par_bws_count\",\"type\":\"uint256\"}],\"name\":\"fp_inside_to_outside\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"par_count\",\"type\":\"uint256\"}],\"name\":\"fp_sell_bws\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"st_pool_bws\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"st_pool_a_bonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"par_count\",\"type\":\"uint256\"}],\"name\":\"fp_buy_bws\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"st_in_circulation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"par_isfrozen\",\"type\":\"bool\"}],\"name\":\"fpu_set_frozen\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fpu_a_bonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"par_addr\",\"type\":\"address\"}],\"name\":\"GetMyRecommendNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"st_Luck_count4\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"st_pool_eth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"st_user_index\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ad\",\"type\":\"address\"}],\"name\":\"fpu_get_my_message\",\"outputs\":[{\"name\":\"ID\",\"type\":\"uint32\"},{\"name\":\"faNode\",\"type\":\"uint32\"},{\"name\":\"Subordinate\",\"type\":\"uint32\"},{\"name\":\"Income\",\"type\":\"uint256\"},{\"name\":\"A_bonus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Recharge\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"par_type\",\"type\":\"uint8\"}],\"name\":\"fpu_luck_draw4\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ad1\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ad2\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ad3\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ad4\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"luck\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"flags\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"pool_bws\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"a_bonus\",\"type\":\"uint256\"}],\"name\":\"ev_luck4\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"luck_ad\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"luck_id\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"flags\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"pool_bws\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"a_bonus\",\"type\":\"uint256\"}],\"name\":\"ev_luck1000\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buy_ad\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bws\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"pool_bws\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"a_bonus\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"pool_eth\",\"type\":\"uint256\"}],\"name\":\"ev_buy_bws\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sell_ad\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bws\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"pool_bws\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"pool_eth\",\"type\":\"uint256\"}],\"name\":\"ev_sell_bws\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ad\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bws\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"in_circulation\",\"type\":\"uint256\"}],\"name\":\"ev_inside_to_outside\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ad\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bws\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"in_circulation\",\"type\":\"uint256\"}],\"name\":\"ev_outside_to_inside\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ad\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"luck_id\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"flags\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"bws\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"pool_bws\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"in_circulation\",\"type\":\"uint256\"}],\"name\":\"ev_game_give_bws\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ad\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Recommender\",\"type\":\"uint32\"}],\"name\":\"ev_register\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ad\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bws\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"unit_price\",\"type\":\"uint256\"}],\"name\":\"ev_buy_of_first_send\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ThisTime\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"trading_volume\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bonus\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"a_bonus\",\"type\":\"uint256\"}],\"name\":\"ev_a_bonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ad\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"ev_eth_to_outside\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ad\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"ev_recharge\",\"type\":\"event\"}]","ContractName":"BWS_GAME","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://877fef42da4b7e47ccfa8c8f66e8029c397b58bc7c6dd13d41b7a4a825315de8"}]}