{"status":"1","message":"OK","result":[{"SourceCode":"## compiled with v0.1.0-beta.7 ##\r\n\r\nDEPOSIT_CONTRACT_TREE_DEPTH: constant(uint256) = 32\r\nTWO_TO_POWER_OF_TREE_DEPTH: constant(uint256) = 4294967296  # 2**32\r\nSECONDS_PER_DAY: constant(uint256) = 86400\r\n\r\nDeposit: event({previous_deposit_root: bytes32, data: bytes[2064], merkle_tree_index: bytes[8]})\r\nChainStart: event({deposit_root: bytes32, time: bytes[8]})\r\n\r\nMIN_DEPOSIT_AMOUNT: uint256\r\nMAX_DEPOSIT_AMOUNT: uint256\r\nCHAIN_START_FULL_DEPOSIT_THRESHOLD: uint256\r\ndeposit_tree: map(uint256, bytes32)\r\ndeposit_count: uint256\r\nfull_deposit_count: uint256\r\n\r\n@public\r\ndef __init__(depositThreshold: uint256,minDeposit: uint256,maxDeposit: uint256):\r\n    self.CHAIN_START_FULL_DEPOSIT_THRESHOLD = depositThreshold\r\n    self.MIN_DEPOSIT_AMOUNT = minDeposit\r\n    self.MAX_DEPOSIT_AMOUNT = maxDeposit\r\n\r\n\r\n@private\r\n@constant\r\ndef to_bytes(value: uint256) -> bytes[8]:\r\n    return slice(concat(\"\", convert(value, bytes32)), start=24, len=8)\r\n\r\n@public\r\n@constant\r\ndef get_deposit_root() -> bytes32:\r\n    return self.deposit_tree[1]\r\n\r\n@payable\r\n@public\r\ndef deposit(deposit_input: bytes[2048]):\r\n    deposit_amount: uint256 = msg.value / as_wei_value(1, \"gwei\")\r\n\r\n    assert deposit_amount >= self.MIN_DEPOSIT_AMOUNT\r\n    assert deposit_amount <= self.MAX_DEPOSIT_AMOUNT\r\n\r\n    deposit_timestamp: uint256 = as_unitless_number(block.timestamp)\r\n    deposit_data: bytes[2064] = concat(self.to_bytes(deposit_amount), self.to_bytes(deposit_timestamp), deposit_input)\r\n    index: uint256 = self.deposit_count + TWO_TO_POWER_OF_TREE_DEPTH\r\n\r\n    log.Deposit(self.get_deposit_root(), deposit_data, self.to_bytes(index))\r\n\r\n    # Add deposit to merkle tree\r\n    self.deposit_tree[index] = sha3(deposit_data)\r\n    for i in range(DEPOSIT_CONTRACT_TREE_DEPTH):\r\n        index /= 2\r\n        self.deposit_tree[index] = sha3(concat(self.deposit_tree[index * 2], self.deposit_tree[index * 2 + 1]))\r\n\r\n    self.deposit_count += 1\r\n    if deposit_amount == self.MAX_DEPOSIT_AMOUNT:\r\n        self.full_deposit_count += 1\r\n        if self.full_deposit_count == self.CHAIN_START_FULL_DEPOSIT_THRESHOLD:\r\n            # Temporarily commenting out the day boundary. \r\n            #timestamp_day_boundary: uint256 = deposit_timestamp - deposit_timestamp % SECONDS_PER_DAY + SECONDS_PER_DAY\r\n            #log.ChainStart(self.get_deposit_root(), self.to_bytes(timestamp_day_boundary))\r\n            log.ChainStart(self.get_deposit_root(), self.to_bytes(deposit_timestamp))\r\n\r\n@public\r\n@constant\r\ndef get_branch(leaf: uint256) -> bytes32[DEPOSIT_CONTRACT_TREE_DEPTH]:\r\n    branch: bytes32[32] # size is DEPOSIT_CONTRACT_TREE_DEPTH\r\n    index: uint256 = leaf + TWO_TO_POWER_OF_TREE_DEPTH\r\n    for i in range(DEPOSIT_CONTRACT_TREE_DEPTH):\r\n        branch[i] = self.deposit_tree[bitwise_xor(index, 1)]\r\n        index /= 2\r\n    return branch","ABI":"[{\"name\":\"Deposit\",\"inputs\":[{\"type\":\"bytes32\",\"name\":\"previous_deposit_root\",\"indexed\":false},{\"type\":\"bytes\",\"name\":\"data\",\"indexed\":false},{\"type\":\"bytes\",\"name\":\"merkle_tree_index\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"ChainStart\",\"inputs\":[{\"type\":\"bytes32\",\"name\":\"deposit_root\",\"indexed\":false},{\"type\":\"bytes\",\"name\":\"time\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"__init__\",\"outputs\":[],\"inputs\":[{\"type\":\"uint256\",\"name\":\"depositThreshold\"},{\"type\":\"uint256\",\"name\":\"minDeposit\"},{\"type\":\"uint256\",\"name\":\"maxDeposit\"}],\"constant\":false,\"payable\":false,\"type\":\"constructor\"},{\"name\":\"get_deposit_root\",\"outputs\":[{\"type\":\"bytes32\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":625},{\"name\":\"deposit\",\"outputs\":[],\"inputs\":[{\"type\":\"bytes\",\"name\":\"deposit_input\"}],\"constant\":false,\"payable\":true,\"type\":\"function\",\"gas\":1708189},{\"name\":\"get_branch\",\"outputs\":[{\"type\":\"bytes32[32]\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"leaf\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":20138}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.1.0b7","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":""}]}