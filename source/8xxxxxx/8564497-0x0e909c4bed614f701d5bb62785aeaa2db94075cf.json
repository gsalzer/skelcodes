{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * Copyright 2017-2019, bZeroX, LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0.\r\n */\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\ncontract UserContract {\r\n    address public owner;\r\n    mapping (address => bool) public controllers;\r\n\r\n    constructor(\r\n        address _owner,\r\n        address[] memory _controllerList)\r\n        public\r\n    {\r\n        owner = _owner;\r\n\r\n        for(uint256 i=0; i < _controllerList.length; i++) {\r\n            controllers[_controllerList[i]] = true;\r\n        }\r\n    }\r\n\r\n    function transferAsset(\r\n        address asset,\r\n        address payable to,\r\n        uint256 amount)\r\n        public\r\n        returns (uint256 transferAmount)\r\n    {\r\n        require(controllers[msg.sender] || msg.sender == owner);\r\n\r\n        bool success;\r\n        if (asset == address(0)) {\r\n            transferAmount = amount == 0 ?\r\n                address(this).balance :\r\n                amount;\r\n            (success, ) = to.call.value(transferAmount)(\"\");\r\n            require(success);\r\n        } else {\r\n            bytes memory data;\r\n            if (amount == 0) {\r\n                (,data) = asset.call(\r\n                    abi.encodeWithSignature(\r\n                        \"balanceOf(address)\",\r\n                        address(this)\r\n                    )\r\n                );\r\n                assembly {\r\n                    transferAmount := mload(add(data, 32))\r\n                }\r\n            } else {\r\n                transferAmount = amount;\r\n            }\r\n            (success,) = asset.call(\r\n                abi.encodeWithSignature(\r\n                    \"transfer(address,uint256)\",\r\n                    to,\r\n                    transferAmount\r\n                )\r\n            );\r\n            require(success);\r\n        }\r\n    }\r\n\r\n    function setControllers(\r\n        address[] memory _controllerList,\r\n        bool[] memory _toggle)\r\n        public\r\n    {\r\n        require(msg.sender == owner && _controllerList.length == _toggle.length);\r\n\r\n        for (uint256 i=0; i < _controllerList.length; i++) {\r\n            controllers[_controllerList[i]] = _toggle[i];\r\n        }\r\n    }\r\n}\r\n\r\ncontract UserContractRegistry is Ownable {\r\n\r\n    mapping (address => bool) public controllers;\r\n    mapping (address => UserContract) public userContracts;\r\n\r\n    function setControllers(\r\n        address[] memory controller,\r\n        bool[] memory toggle)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(controller.length == toggle.length, \"count mismatch\");\r\n\r\n        for (uint256 i=0; i < controller.length; i++) {\r\n            controllers[controller[i]] = toggle[i];\r\n        }\r\n    }\r\n\r\n    function setContract(\r\n        address user,\r\n        UserContract userContract)\r\n        public\r\n    {\r\n        require(controllers[msg.sender], \"unauthorized\");\r\n        userContracts[user] = userContract;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"userContract\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"controller\",\"type\":\"address[]\"},{\"name\":\"toggle\",\"type\":\"bool[]\"}],\"name\":\"setControllers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"UserContractRegistry","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://ad395b577298f1c3961c846059c88634d712f9297267518a810c4ac6c1f82a3f"}]}