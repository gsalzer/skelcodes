{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.24;\r\n/* @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/helpers/Ownable.sol\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\". This adds two-phase\r\n * ownership control to OpenZeppelin's Ownable class. In this model, the original owner \r\n * designates a new owner but does not actually transfer ownership. The new owner then accepts \r\n * ownership and completes the transfer.\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n    address public pendingOwner;\r\n\r\n\r\n    event OwnershipTransferred(\r\n      address indexed previousOwner,\r\n      address indexed newOwner\r\n    );\r\n\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        pendingOwner = address(0);\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Account is not owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == pendingOwner, \"Account is not pending owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param _newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0), \"Empty address\");\r\n        pendingOwner = _newOwner;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the pendingOwner address to finalize the transfer.\r\n    */\r\n    function claimOwnership() onlyPendingOwner public {\r\n        emit OwnershipTransferred(owner, pendingOwner);\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/token/dataStorage/AllowanceSheet.sol\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n* @title AllowanceSheet\r\n* @notice A wrapper around an allowance mapping. \r\n*/\r\ncontract AllowanceSheet is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => mapping (address => uint256)) public allowanceOf;\r\n\r\n    function addAllowance(address _tokenHolder, address _spender, uint256 _value) public onlyOwner {\r\n        allowanceOf[_tokenHolder][_spender] = allowanceOf[_tokenHolder][_spender].add(_value);\r\n    }\r\n\r\n    function subAllowance(address _tokenHolder, address _spender, uint256 _value) public onlyOwner {\r\n        allowanceOf[_tokenHolder][_spender] = allowanceOf[_tokenHolder][_spender].sub(_value);\r\n    }\r\n\r\n    function setAllowance(address _tokenHolder, address _spender, uint256 _value) public onlyOwner {\r\n        allowanceOf[_tokenHolder][_spender] = _value;\r\n    }\r\n}\r\n\r\n// File: contracts/token/dataStorage/BalanceSheet.sol\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n* @title BalanceSheet\r\n* @notice A wrapper around the balanceOf mapping. \r\n*/\r\ncontract BalanceSheet is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) public balanceOf;\r\n    uint256 public totalSupply;\r\n\r\n    function addBalance(address _addr, uint256 _value) public onlyOwner {\r\n        balanceOf[_addr] = balanceOf[_addr].add(_value);\r\n    }\r\n\r\n    function subBalance(address _addr, uint256 _value) public onlyOwner {\r\n        balanceOf[_addr] = balanceOf[_addr].sub(_value);\r\n    }\r\n\r\n    function setBalance(address _addr, uint256 _value) public onlyOwner {\r\n        balanceOf[_addr] = _value;\r\n    }\r\n\r\n    function addTotalSupply(uint256 _value) public onlyOwner {\r\n        totalSupply = totalSupply.add(_value);\r\n    }\r\n\r\n    function subTotalSupply(uint256 _value) public onlyOwner {\r\n        totalSupply = totalSupply.sub(_value);\r\n    }\r\n\r\n    function setTotalSupply(uint256 _value) public onlyOwner {\r\n        totalSupply = _value;\r\n    }\r\n}\r\n\r\n// File: contracts/token/dataStorage/TokenStorage.sol\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n* @title TokenStorage\r\n*/\r\ncontract TokenStorage {\r\n    /**\r\n        Storage\r\n    */\r\n    BalanceSheet public balances;\r\n    AllowanceSheet public allowances;\r\n\r\n\r\n    string public name;   //name of Token                \r\n    uint8  public decimals;        //decimals of Token        \r\n    string public symbol;   //Symbol of Token\r\n\r\n    /**\r\n    * @dev a TokenStorage consumer can set its storages only once, on construction\r\n    *\r\n    **/\r\n    constructor (address _balances, address _allowances, string _name, uint8 _decimals, string _symbol) public {\r\n        balances = BalanceSheet(_balances);\r\n        allowances = AllowanceSheet(_allowances);\r\n\r\n        name = _name;\r\n        decimals = _decimals;\r\n        symbol = _symbol;\r\n    }\r\n\r\n    /**\r\n    * @dev claim ownership of balance sheet passed into constructor.\r\n    **/\r\n    function claimBalanceOwnership() public {\r\n        balances.claimOwnership();\r\n    }\r\n\r\n    /**\r\n    * @dev claim ownership of allowance sheet passed into constructor.\r\n    **/\r\n    function claimAllowanceOwnership() public {\r\n        allowances.claimOwnership();\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/AddressUtils.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param _addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address _addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(_addr) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: contracts/token/AkropolisBaseToken.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n* @title AkropolisBaseToken\r\n* @notice A basic ERC20 token with modular data storage\r\n*/\r\ncontract AkropolisBaseToken is ERC20, TokenStorage, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    /** Events */\r\n    event Mint(address indexed to, uint256 value);\r\n    event MintFinished();\r\n    event Burn(address indexed burner, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n\r\n    constructor (address _balances, address _allowances, string _name, uint8 _decimals, string _symbol) public \r\n    TokenStorage(_balances, _allowances, _name, _decimals, _symbol) {}\r\n\r\n    /** Modifiers **/\r\n\r\n    modifier canMint() {\r\n        require(!isMintingFinished());\r\n        _;\r\n    }\r\n\r\n    /** Functions **/\r\n\r\n    function mint(address _to, uint256 _amount) public onlyOwner canMint {\r\n        _mint(_to, _amount);\r\n    }\r\n\r\n    function burn(uint256 _amount) public onlyOwner {\r\n        _burn(msg.sender, _amount);\r\n    }\r\n\r\n\r\n    function isMintingFinished() public view returns (bool) {\r\n        bytes32 slot = keccak256(abi.encode(\"Minting\", \"mint\"));\r\n        uint256 v;\r\n        assembly {\r\n            v := sload(slot)\r\n        }\r\n        return v != 0;\r\n    }\r\n\r\n\r\n    function setMintingFinished(bool value) internal {\r\n        bytes32 slot = keccak256(abi.encode(\"Minting\", \"mint\"));\r\n        uint256 v = value ? 1 : 0;\r\n        assembly {\r\n            sstore(slot, v)\r\n        }\r\n    }\r\n\r\n    function mintFinished() public onlyOwner {\r\n        setMintingFinished(true);\r\n        emit MintFinished();\r\n    }\r\n\r\n\r\n    function approve(address _spender, uint256 _value) \r\n    public returns (bool) {\r\n        allowances.setAllowance(msg.sender, _spender, _value);\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _amount) public returns (bool) {\r\n        require(_to != address(0),\"to address cannot be 0x0\");\r\n        require(_amount <= balanceOf(msg.sender),\"not enough balance to transfer\");\r\n\r\n        balances.subBalance(msg.sender, _amount);\r\n        balances.addBalance(_to, _amount);\r\n        emit Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _amount) \r\n    public returns (bool) {\r\n        require(_amount <= allowance(_from, msg.sender),\"not enough allowance to transfer\");\r\n        require(_to != address(0),\"to address cannot be 0x0\");\r\n        require(_amount <= balanceOf(_from),\"not enough balance to transfer\");\r\n        \r\n        allowances.subAllowance(_from, msg.sender, _amount);\r\n        balances.addBalance(_to, _amount);\r\n        balances.subBalance(_from, _amount);\r\n        emit Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @notice Implements balanceOf() as specified in the ERC20 standard.\r\n    */\r\n    function balanceOf(address who) public view returns (uint256) {\r\n        return balances.balanceOf(who);\r\n    }\r\n\r\n    /**\r\n    * @notice Implements allowance() as specified in the ERC20 standard.\r\n    */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return allowances.allowanceOf(owner, spender);\r\n    }\r\n\r\n    /**\r\n    * @notice Implements totalSupply() as specified in the ERC20 standard.\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return balances.totalSupply();\r\n    }\r\n\r\n\r\n    /** Internal functions **/\r\n\r\n    function _burn(address _tokensOf, uint256 _amount) internal {\r\n        require(_amount <= balanceOf(_tokensOf),\"not enough balance to burn\");\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n        balances.subBalance(_tokensOf, _amount);\r\n        balances.subTotalSupply(_amount);\r\n        emit Burn(_tokensOf, _amount);\r\n        emit Transfer(_tokensOf, address(0), _amount);\r\n    }\r\n\r\n    function _mint(address _to, uint256 _amount) internal {\r\n        balances.addTotalSupply(_amount);\r\n        balances.addBalance(_to, _amount);\r\n        emit Mint(_to, _amount);\r\n        emit Transfer(address(0), _to, _amount);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/helpers/Lockable.sol\r\n\r\n\r\n\r\n\r\n/**\r\n* @title Lockable\r\n* @dev Base contract which allows children to lock certain methods from being called by clients.\r\n* Locked methods are deemed unsafe by default, but must be implemented in children functionality to adhere by\r\n* some inherited standard, for example. \r\n*/\r\n\r\ncontract Lockable is Ownable {\r\n\t// Events\r\n\tevent Unlocked();\r\n\tevent Locked();\r\n\r\n\t// Modifiers\r\n\t/**\r\n\t* @dev Modifier that disables functions by default unless they are explicitly enabled\r\n\t*/\r\n\tmodifier whenUnlocked() {\r\n\t\trequire(!isLocked(), \"Contact is locked\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev called by the owner to disable method, back to normal state\r\n\t*/\r\n\tfunction lock() public  onlyOwner {\r\n\t\tsetLock(true);\r\n\t\temit Locked();\r\n\t}\r\n\r\n\t// Methods\r\n\t/**\r\n\t* @dev called by the owner to enable method\r\n\t*/\r\n\tfunction unlock() public onlyOwner  {\r\n\t\tsetLock(false);\r\n\t\temit Unlocked();\r\n\t}\r\n\r\n\tfunction setLock(bool value) internal {\r\n        bytes32 slot = keccak256(abi.encode(\"Lockable\", \"lock\"));\r\n        uint256 v = value ? 1 : 0;\r\n        assembly {\r\n            sstore(slot, v)\r\n        }\r\n    }\r\n\r\n    function isLocked() public view returns (bool) {\r\n        bytes32 slot = keccak256(abi.encode(\"Lockable\", \"lock\"));\r\n        uint256 v;\r\n        assembly {\r\n            v := sload(slot)\r\n        }\r\n        return v != 0;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/helpers/Pausable.sol\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism. Identical to OpenZeppelin version\r\n * except that it uses local Ownable contract\r\n */\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    /**\r\n    * @dev Modifier to make a function callable only when the contract is not paused.\r\n    */\r\n    modifier whenNotPaused() {\r\n        require(!isPaused(), \"Contract is paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Modifier to make a function callable only when the contract is paused.\r\n    */\r\n    modifier whenPaused() {\r\n        require(isPaused(), \"Contract is not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to pause, triggers stopped state\r\n    */\r\n    function pause() public onlyOwner  whenNotPaused  {\r\n        setPause(true);\r\n        emit Pause();\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to unpause, returns to normal state\r\n    */\r\n    function unpause() public onlyOwner  whenPaused {\r\n        setPause(false);\r\n        emit Unpause();\r\n    }\r\n\r\n    function setPause(bool value) internal {\r\n        bytes32 slot = keccak256(abi.encode(\"Pausable\", \"pause\"));\r\n        uint256 v = value ? 1 : 0;\r\n        assembly {\r\n            sstore(slot, v)\r\n        }\r\n    }\r\n\r\n    function isPaused() public view returns (bool) {\r\n        bytes32 slot = keccak256(abi.encode(\"Pausable\", \"pause\"));\r\n        uint256 v;\r\n        assembly {\r\n            v := sload(slot)\r\n        }\r\n        return v != 0;\r\n    }\r\n}\r\n\r\n// File: contracts/helpers/Whitelist.sol\r\n\r\n\r\n\r\n/**\r\n * @title Whitelist\r\n * @dev Base contract which allows children to implement an emergency whitelist mechanism. Identical to OpenZeppelin version\r\n * except that it uses local Ownable contract\r\n */\r\n \r\ncontract Whitelist is Ownable {\r\n    event AddToWhitelist(address indexed to);\r\n    event RemoveFromWhitelist(address indexed to);\r\n    event EnableWhitelist();\r\n    event DisableWhitelist();\r\n    event AddPermBalanceToWhitelist(address indexed to, uint256 balance);\r\n    event RemovePermBalanceToWhitelist(address indexed to);\r\n\r\n    mapping(address => bool) internal whitelist;\r\n    mapping (address => uint256) internal permBalancesForWhitelist;\r\n\r\n    /**\r\n    * @dev Modifier to make a function callable only when msg.sender is in whitelist.\r\n    */\r\n    modifier onlyWhitelist() {\r\n        if (isWhitelisted() == true) {\r\n            require(whitelist[msg.sender] == true, \"Address is not in whitelist\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Modifier to make a function callable only when msg.sender is in permitted balance\r\n    */\r\n    modifier checkPermBalanceForWhitelist(uint256 value) {\r\n        if (isWhitelisted() == true) {\r\n            require(permBalancesForWhitelist[msg.sender]==0 || permBalancesForWhitelist[msg.sender]>=value, \"Not permitted balance for transfer\");\r\n        }\r\n        \r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to set permitted balance for transfer\r\n    */\r\n\r\n    function addPermBalanceToWhitelist(address _owner, uint256 _balance) public onlyOwner {\r\n        permBalancesForWhitelist[_owner] = _balance;\r\n        emit AddPermBalanceToWhitelist(_owner, _balance);\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to remove permitted balance for transfer\r\n    */\r\n    function removePermBalanceToWhitelist(address _owner) public onlyOwner {\r\n        permBalancesForWhitelist[_owner] = 0;\r\n        emit RemovePermBalanceToWhitelist(_owner);\r\n    }\r\n   \r\n    /**\r\n    * @dev called by the owner to enable whitelist\r\n    */\r\n\r\n    function enableWhitelist() public onlyOwner {\r\n        setWhitelisted(true);\r\n        emit EnableWhitelist();\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev called by the owner to disable whitelist\r\n    */\r\n    function disableWhitelist() public onlyOwner {\r\n        setWhitelisted(false);\r\n        emit DisableWhitelist();\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to enable some address for whitelist\r\n    */\r\n    function addToWhitelist(address _address) public onlyOwner  {\r\n        whitelist[_address] = true;\r\n        emit AddToWhitelist(_address);\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to disable address for whitelist\r\n    */\r\n    function removeFromWhitelist(address _address) public onlyOwner {\r\n        whitelist[_address] = false;\r\n        emit RemoveFromWhitelist(_address);\r\n    }\r\n\r\n\r\n    // bool public whitelisted = false;\r\n\r\n    function setWhitelisted(bool value) internal {\r\n        bytes32 slot = keccak256(abi.encode(\"Whitelist\", \"whitelisted\"));\r\n        uint256 v = value ? 1 : 0;\r\n        assembly {\r\n            sstore(slot, v)\r\n        }\r\n    }\r\n\r\n    function isWhitelisted() public view returns (bool) {\r\n        bytes32 slot = keccak256(abi.encode(\"Whitelist\", \"whitelisted\"));\r\n        uint256 v;\r\n        assembly {\r\n            v := sload(slot)\r\n        }\r\n        return v != 0;\r\n    }\r\n}\r\n\r\n// File: contracts/token/AkropolisToken.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n* @title AkropolisToken\r\n* @notice Adds pausability and disables approve() to defend against double-spend attacks in addition\r\n* to inherited AkropolisBaseToken behavior\r\n*/\r\ncontract AkropolisToken is AkropolisBaseToken, Pausable, Lockable, Whitelist {\r\n    using SafeMath for uint256;\r\n\r\n    /** Events */\r\n\r\n    constructor (address _balances, address _allowances, string _name, uint8 _decimals, string _symbol) public \r\n    AkropolisBaseToken(_balances, _allowances, _name, _decimals, _symbol) {}\r\n\r\n    /** Modifiers **/\r\n\r\n    /** Functions **/\r\n\r\n    function mint(address _to, uint256 _amount) public {\r\n        super.mint(_to, _amount);\r\n    }\r\n\r\n    function burn(uint256 _amount) public whenUnlocked  {\r\n        super.burn(_amount);\r\n    }\r\n\r\n    /**\r\n    * @notice Implements ERC-20 standard approve function.\r\n    * double spend attacks. To modify allowances, clients should call safer increase/decreaseApproval methods.\r\n    * Upon construction, all calls to approve() will revert unless this contract owner explicitly unlocks approve()\r\n    */\r\n    function approve(address _spender, uint256 _value) \r\n    public whenNotPaused  whenUnlocked returns (bool) {\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * @notice increaseApproval should be used instead of approve when the user's allowance\r\n     * is greater than 0. Using increaseApproval protects against potential double-spend attacks\r\n     * by moving the check of whether the user has spent their allowance to the time that the transaction \r\n     * is mined, removing the user's ability to double-spend\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseApproval(address _spender, uint256 _addedValue) \r\n    public whenNotPaused returns (bool) {\r\n        increaseApprovalAllArgs(_spender, _addedValue, msg.sender);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * @notice decreaseApproval should be used instead of approve when the user's allowance\r\n     * is greater than 0. Using decreaseApproval protects against potential double-spend attacks\r\n     * by moving the check of whether the user has spent their allowance to the time that the transaction \r\n     * is mined, removing the user's ability to double-spend\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue) \r\n    public whenNotPaused returns (bool) {\r\n        decreaseApprovalAllArgs(_spender, _subtractedValue, msg.sender);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _amount) public whenNotPaused onlyWhitelist checkPermBalanceForWhitelist(_amount) returns (bool) {\r\n        return super.transfer(_to, _amount);\r\n    }\r\n\r\n    /**\r\n    * @notice Initiates a transfer operation between address `_from` and `_to`. Requires that the\r\n    * message sender is an approved spender on the _from account.\r\n    * @dev When implemented, it should use the transferFromConditionsRequired() modifier.\r\n    * @param _to The address of the recipient. This address must not be blacklisted.\r\n    * @param _from The address of the origin of funds. This address _could_ be blacklisted, because\r\n    * a regulator may want to transfer tokens out of a blacklisted account, for example.\r\n    * In order to do so, the regulator would have to add themselves as an approved spender\r\n    * on the account via `addBlacklistAddressSpender()`, and would then be able to transfer tokens out of it.\r\n    * @param _amount The number of tokens to transfer\r\n    * @return `true` if successful \r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _amount) \r\n    public whenNotPaused onlyWhitelist checkPermBalanceForWhitelist(_amount) returns (bool) {\r\n        return super.transferFrom(_from, _to, _amount);\r\n    }\r\n\r\n\r\n    /** Internal functions **/\r\n    \r\n    function decreaseApprovalAllArgs(address _spender, uint256 _subtractedValue, address _tokenHolder) internal {\r\n        uint256 oldValue = allowances.allowanceOf(_tokenHolder, _spender);\r\n        if (_subtractedValue > oldValue) {\r\n            allowances.setAllowance(_tokenHolder, _spender, 0);\r\n        } else {\r\n            allowances.subAllowance(_tokenHolder, _spender, _subtractedValue);\r\n        }\r\n        emit Approval(_tokenHolder, _spender, allowances.allowanceOf(_tokenHolder, _spender));\r\n    }\r\n\r\n    function increaseApprovalAllArgs(address _spender, uint256 _addedValue, address _tokenHolder) internal {\r\n        allowances.addAllowance(_tokenHolder, _spender, _addedValue);\r\n        emit Approval(_tokenHolder, _spender, allowances.allowanceOf(_tokenHolder, _spender));\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"removePermBalanceToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowances\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mintFinished\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimBalanceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimAllowanceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"addPermBalanceToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_balances\",\"type\":\"address\"},{\"name\":\"_allowances\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"AddToWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"RemoveFromWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EnableWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DisableWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"AddPermBalanceToWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"RemovePermBalanceToWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"AkropolisToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://7af3ab8a68634ed781b43e8977e4f21c29a3eb9dd25f71cfa710dfa674111612"}]}