{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the `nonReentrant` modifier\r\n * available, which can be aplied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n */\r\ncontract ReentrancyGuard {\r\n    /// @dev counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private _guardCounter;\r\n\r\n    constructor () internal {\r\n        // The counter starts at one to prevent changing it from zero to a non-zero\r\n        // value, which is a more expensive operation.\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/Roles.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/roles/PauserRole.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract PauserRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event PauserAdded(address indexed account);\r\n    event PauserRemoved(address indexed account);\r\n\r\n    Roles.Role private _pausers;\r\n\r\n    constructor () internal {\r\n        _addPauser(msg.sender);\r\n    }\r\n\r\n    modifier onlyPauser() {\r\n        require(isPauser(msg.sender), \"PauserRole: caller does not have the Pauser role\");\r\n        _;\r\n    }\r\n\r\n    function isPauser(address account) public view returns (bool) {\r\n        return _pausers.has(account);\r\n    }\r\n\r\n    function addPauser(address account) public onlyPauser {\r\n        _addPauser(account);\r\n    }\r\n\r\n    function renouncePauser() public {\r\n        _removePauser(msg.sender);\r\n    }\r\n\r\n    function _addPauser(address account) internal {\r\n        _pausers.add(account);\r\n        emit PauserAdded(account);\r\n    }\r\n\r\n    function _removePauser(address account) internal {\r\n        _pausers.remove(account);\r\n        emit PauserRemoved(account);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract Pausable is PauserRole {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\r\n     * to the deployer.\r\n     */\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to pause, triggers stopped state.\r\n     */\r\n    function pause() public onlyPauser whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to unpause, returns to normal state.\r\n     */\r\n    function unpause() public onlyPauser whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: multi-token-standard/contracts/interfaces/IERC165.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n/**\r\n * @title ERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface IERC165 {\r\n\r\n    /**\r\n     * @notice Query if a contract implements an interface\r\n     * @dev Interface identification is specified in ERC-165. This function\r\n     * uses less than 30,000 gas\r\n     * @param _interfaceId The interface identifier, as specified in ERC-165\r\n     */\r\n    function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\n// File: multi-token-standard/contracts/utils/SafeMath.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n   * @dev Multiplies two unsigned integers, reverts on overflow.\r\n   */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath#mul: OVERFLOW\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, \"SafeMath#div: DIVISION_BY_ZERO\");\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n   */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a, \"SafeMath#sub: UNDERFLOW\");\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Adds two unsigned integers, reverts on overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath#add: OVERFLOW\");\r\n\r\n    return c; \r\n  }\r\n\r\n  /**\r\n   * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n   * reverts when dividing by zero.\r\n   */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0, \"SafeMath#mod: DIVISION_BY_ZERO\");\r\n    return a % b;\r\n  }\r\n\r\n}\r\n\r\n// File: multi-token-standard/contracts/interfaces/IERC1155TokenReceiver.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n/**\r\n * @dev ERC-1155 interface for accepting safe transfers.\r\n */\r\ninterface IERC1155TokenReceiver {\r\n\r\n  /**\r\n   * @notice Handle the receipt of a single ERC1155 token type\r\n   * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated\r\n   * This function MAY throw to revert and reject the transfer\r\n   * Return of other amount than the magic value MUST result in the transaction being reverted\r\n   * Note: The token contract address is always the message sender\r\n   * @param _operator  The address which called the `safeTransferFrom` function\r\n   * @param _from      The address which previously owned the token\r\n   * @param _id        The id of the token being transferred\r\n   * @param _amount    The amount of tokens being transferred\r\n   * @param _data      Additional data with no specified format\r\n   * @return           `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n   */\r\n  function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _amount, bytes calldata _data) external returns(bytes4);\r\n\r\n  /**\r\n   * @notice Handle the receipt of multiple ERC1155 token types\r\n   * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated\r\n   * This function MAY throw to revert and reject the transfer\r\n   * Return of other amount than the magic value WILL result in the transaction being reverted\r\n   * Note: The token contract address is always the message sender\r\n   * @param _operator  The address which called the `safeBatchTransferFrom` function\r\n   * @param _from      The address which previously owned the token\r\n   * @param _ids       An array containing ids of each token being transferred\r\n   * @param _amounts   An array containing amounts of each token being transferred\r\n   * @param _data      Additional data with no specified format\r\n   * @return           `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n   */\r\n  function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external returns(bytes4);\r\n\r\n  /**\r\n   * @notice Indicates whether a contract implements the `ERC1155TokenReceiver` functions and so can accept ERC1155 token types.\r\n   * @param  interfaceID The ERC-165 interface ID that is queried for support.s\r\n   * @dev This function MUST return true if it implements the ERC1155TokenReceiver interface and ERC-165 interface.\r\n   *      This function MUST NOT consume more than 5,000 gas.\r\n   * @return Wheter ERC-165 or ERC1155TokenReceiver interfaces are supported.\r\n   */\r\n  function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n\r\n}\r\n\r\n// File: multi-token-standard/contracts/interfaces/IERC1155.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\ninterface IERC1155 {\r\n  // Events\r\n\r\n  /**\r\n   * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\r\n   *   Operator MUST be msg.sender\r\n   *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\r\n   *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\r\n   *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \"circulating supply\" for a given token ID\r\n   *   To broadcast the existence of a token ID with no initial balance, the contract SHOULD emit the TransferSingle event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\r\n   */\r\n  event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _amount);\r\n\r\n  /**\r\n   * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\r\n   *   Operator MUST be msg.sender\r\n   *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\r\n   *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\r\n   *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \"circulating supply\" for a given token ID\r\n   *   To broadcast the existence of multiple token IDs with no initial balance, this SHOULD emit the TransferBatch event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\r\n   */\r\n  event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _amounts);\r\n\r\n  /**\r\n   * @dev MUST emit when an approval is updated\r\n   */\r\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n  /**\r\n   * @dev MUST emit when the URI is updated for a token ID\r\n   *   URIs are defined in RFC 3986\r\n   *   The URI MUST point a JSON file that conforms to the \"ERC-1155 Metadata JSON Schema\"\r\n   */\r\n  event URI(string _amount, uint256 indexed _id);\r\n\r\n  /**\r\n   * @notice Transfers amount of an _id from the _from address to the _to address specified\r\n   * @dev MUST emit TransferSingle event on success\r\n   * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\r\n   * MUST throw if `_to` is the zero address\r\n   * MUST throw if balance of sender for token `_id` is lower than the `_amount` sent\r\n   * MUST throw on any other error\r\n   * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155Received` on `_to` and revert if the return amount is not `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n   * @param _from    Source address\r\n   * @param _to      Target address\r\n   * @param _id      ID of the token type\r\n   * @param _amount  Transfered amount\r\n   * @param _data    Additional data with no specified format, sent in call to `_to`\r\n   */\r\n  function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes calldata _data) external;\r\n\r\n  /**\r\n   * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\r\n   * @dev MUST emit TransferBatch event on success\r\n   * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\r\n   * MUST throw if `_to` is the zero address\r\n   * MUST throw if length of `_ids` is not the same as length of `_amounts`\r\n   * MUST throw if any of the balance of sender for token `_ids` is lower than the respective `_amounts` sent\r\n   * MUST throw on any other error\r\n   * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155BatchReceived` on `_to` and revert if the return amount is not `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n   * Transfers and events MUST occur in the array order they were submitted (_ids[0] before _ids[1], etc)\r\n   * @param _from     Source addresses\r\n   * @param _to       Target addresses\r\n   * @param _ids      IDs of each token type\r\n   * @param _amounts  Transfer amounts per token type\r\n   * @param _data     Additional data with no specified format, sent in call to `_to`\r\n  */\r\n  function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external;\r\n  \r\n  /**\r\n   * @notice Get the balance of an account's Tokens\r\n   * @param _owner  The address of the token holder\r\n   * @param _id     ID of the Token\r\n   * @return        The _owner's balance of the Token type requested\r\n   */\r\n  function balanceOf(address _owner, uint256 _id) external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Get the balance of multiple account/token pairs\r\n   * @param _owners The addresses of the token holders\r\n   * @param _ids    ID of the Tokens\r\n   * @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\r\n   */\r\n  function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory);\r\n\r\n  /**\r\n   * @notice Enable or disable approval for a third party (\"operator\") to manage all of caller's tokens\r\n   * @dev MUST emit the ApprovalForAll event on success\r\n   * @param _operator  Address to add to the set of authorized operators\r\n   * @param _approved  True if the operator is approved, false to revoke approval\r\n   */\r\n  function setApprovalForAll(address _operator, bool _approved) external;\r\n\r\n  /**\r\n   * @notice Queries the approval status of an operator for a given owner\r\n   * @param _owner     The owner of the Tokens\r\n   * @param _operator  Address of authorized operator\r\n   * @return           True if the operator is approved, false if not\r\n   */\r\n  function isApprovedForAll(address _owner, address _operator) external view returns (bool isOperator);\r\n\r\n}\r\n\r\n// File: multi-token-standard/contracts/utils/Address.sol\r\n\r\n/**\r\n * Copyright 2018 ZeroEx Intl.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary Address {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param account address of the account to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address account) internal view returns (bool) {\r\n    bytes32 codehash;\r\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    assembly { codehash := extcodehash(account) }\r\n    return (codehash != 0x0 && codehash != accountHash);\r\n  }\r\n\r\n}\r\n\r\n// File: multi-token-standard/contracts/tokens/ERC1155/ERC1155.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of Multi-Token Standard contract\r\n */\r\ncontract ERC1155 is IERC165 {\r\n  using SafeMath for uint256;\r\n  using Address for address;\r\n\r\n\r\n  /***********************************|\r\n  |        Variables and Events       |\r\n  |__________________________________*/\r\n\r\n  // onReceive function signatures\r\n  bytes4 constant internal ERC1155_RECEIVED_VALUE = 0xf23a6e61;\r\n  bytes4 constant internal ERC1155_BATCH_RECEIVED_VALUE = 0xbc197c81;\r\n\r\n  // Objects balances\r\n  mapping (address => mapping(uint256 => uint256)) internal balances;\r\n\r\n  // Operator Functions\r\n  mapping (address => mapping(address => bool)) internal operators;\r\n\r\n  // Events\r\n  event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _amount);\r\n  event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _amounts);\r\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n  event URI(string _uri, uint256 indexed _id);\r\n\r\n\r\n  /***********************************|\r\n  |     Public Transfer Functions     |\r\n  |__________________________________*/\r\n\r\n  /**\r\n   * @notice Transfers amount amount of an _id from the _from address to the _to address specified\r\n   * @param _from    Source address\r\n   * @param _to      Target address\r\n   * @param _id      ID of the token type\r\n   * @param _amount  Transfered amount\r\n   * @param _data    Additional data with no specified format, sent in call to `_to`\r\n   */\r\n  function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes memory _data)\r\n    public\r\n  {\r\n    require((msg.sender == _from) || operators[_from][msg.sender], \"ERC1155#safeTransferFrom: INVALID_OPERATOR\");\r\n    require(_to != address(0),\"ERC1155#safeTransferFrom: INVALID_RECIPIENT\");\r\n    // require(_amount >= balances[_from][_id]) is not necessary since checked with safemath operations\r\n\r\n    _safeTransferFrom(_from, _to, _id, _amount);\r\n    _callonERC1155Received(_from, _to, _id, _amount, _data);\r\n  }\r\n\r\n  /**\r\n   * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\r\n   * @param _from     Source addresses\r\n   * @param _to       Target addresses\r\n   * @param _ids      IDs of each token type\r\n   * @param _amounts  Transfer amounts per token type\r\n   * @param _data     Additional data with no specified format, sent in call to `_to`\r\n   */\r\n  function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data)\r\n    public\r\n  {\r\n    // Requirements\r\n    require((msg.sender == _from) || operators[_from][msg.sender], \"ERC1155#safeBatchTransferFrom: INVALID_OPERATOR\");\r\n    require(_to != address(0), \"ERC1155#safeBatchTransferFrom: INVALID_RECIPIENT\");\r\n\r\n    _safeBatchTransferFrom(_from, _to, _ids, _amounts);\r\n    _callonERC1155BatchReceived(_from, _to, _ids, _amounts, _data);\r\n  }\r\n\r\n\r\n  /***********************************|\r\n  |    Internal Transfer Functions    |\r\n  |__________________________________*/\r\n\r\n  /**\r\n   * @notice Transfers amount amount of an _id from the _from address to the _to address specified\r\n   * @param _from    Source address\r\n   * @param _to      Target address\r\n   * @param _id      ID of the token type\r\n   * @param _amount  Transfered amount\r\n   */\r\n  function _safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount)\r\n    internal\r\n  {\r\n    // Update balances\r\n    balances[_from][_id] = balances[_from][_id].sub(_amount); // Subtract amount\r\n    balances[_to][_id] = balances[_to][_id].add(_amount);     // Add amount\r\n\r\n    // Emit event\r\n    emit TransferSingle(msg.sender, _from, _to, _id, _amount);\r\n  }\r\n\r\n  /**\r\n   * @notice Verifies if receiver is contract and if so, calls (_to).onERC1155Received(...)\r\n   */\r\n  function _callonERC1155Received(address _from, address _to, uint256 _id, uint256 _amount, bytes memory _data)\r\n    internal\r\n  {\r\n    // Check if recipient is contract\r\n    if (_to.isContract()) {\r\n      bytes4 retval = IERC1155TokenReceiver(_to).onERC1155Received(msg.sender, _from, _id, _amount, _data);\r\n      require(retval == ERC1155_RECEIVED_VALUE, \"ERC1155#_callonERC1155Received: INVALID_ON_RECEIVE_MESSAGE\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\r\n   * @param _from     Source addresses\r\n   * @param _to       Target addresses\r\n   * @param _ids      IDs of each token type\r\n   * @param _amounts  Transfer amounts per token type\r\n   */\r\n  function _safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts)\r\n    internal\r\n  {\r\n    require(_ids.length == _amounts.length, \"ERC1155#_safeBatchTransferFrom: INVALID_ARRAYS_LENGTH\");\r\n\r\n    // Number of transfer to execute\r\n    uint256 nTransfer = _ids.length;\r\n\r\n    // Executing all transfers\r\n    for (uint256 i = 0; i < nTransfer; i++) {\r\n      // Update storage balance of previous bin\r\n      balances[_from][_ids[i]] = balances[_from][_ids[i]].sub(_amounts[i]);\r\n      balances[_to][_ids[i]] = balances[_to][_ids[i]].add(_amounts[i]);\r\n    }\r\n\r\n    // Emit event\r\n    emit TransferBatch(msg.sender, _from, _to, _ids, _amounts);\r\n  }\r\n\r\n  /**\r\n   * @notice Verifies if receiver is contract and if so, calls (_to).onERC1155BatchReceived(...)\r\n   */\r\n  function _callonERC1155BatchReceived(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data)\r\n    internal\r\n  {\r\n    // Pass data if recipient is contract\r\n    if (_to.isContract()) {\r\n      bytes4 retval = IERC1155TokenReceiver(_to).onERC1155BatchReceived(msg.sender, _from, _ids, _amounts, _data);\r\n      require(retval == ERC1155_BATCH_RECEIVED_VALUE, \"ERC1155#_callonERC1155BatchReceived: INVALID_ON_RECEIVE_MESSAGE\");\r\n    }\r\n  }\r\n\r\n\r\n  /***********************************|\r\n  |         Operator Functions        |\r\n  |__________________________________*/\r\n\r\n  /**\r\n   * @notice Enable or disable approval for a third party (\"operator\") to manage all of caller's tokens\r\n   * @param _operator  Address to add to the set of authorized operators\r\n   * @param _approved  True if the operator is approved, false to revoke approval\r\n   */\r\n  function setApprovalForAll(address _operator, bool _approved)\r\n    external\r\n  {\r\n    // Update operator status\r\n    operators[msg.sender][_operator] = _approved;\r\n    emit ApprovalForAll(msg.sender, _operator, _approved);\r\n  }\r\n\r\n  /**\r\n   * @notice Queries the approval status of an operator for a given owner\r\n   * @param _owner     The owner of the Tokens\r\n   * @param _operator  Address of authorized operator\r\n   * @return True if the operator is approved, false if not\r\n   */\r\n  function isApprovedForAll(address _owner, address _operator)\r\n    public view returns (bool isOperator)\r\n  {\r\n    return operators[_owner][_operator];\r\n  }\r\n\r\n\r\n  /***********************************|\r\n  |         Balance Functions         |\r\n  |__________________________________*/\r\n\r\n  /**\r\n   * @notice Get the balance of an account's Tokens\r\n   * @param _owner  The address of the token holder\r\n   * @param _id     ID of the Token\r\n   * @return The _owner's balance of the Token type requested\r\n   */\r\n  function balanceOf(address _owner, uint256 _id)\r\n    public view returns (uint256)\r\n  {\r\n    return balances[_owner][_id];\r\n  }\r\n\r\n  /**\r\n   * @notice Get the balance of multiple account/token pairs\r\n   * @param _owners The addresses of the token holders\r\n   * @param _ids    ID of the Tokens\r\n   * @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\r\n   */\r\n  function balanceOfBatch(address[] memory _owners, uint256[] memory _ids)\r\n    public view returns (uint256[] memory)\r\n  {\r\n    require(_owners.length == _ids.length, \"ERC1155#balanceOfBatch: INVALID_ARRAY_LENGTH\");\r\n\r\n    // Variables\r\n    uint256[] memory batchBalances = new uint256[](_owners.length);\r\n\r\n    // Iterate over each owner and token ID\r\n    for (uint256 i = 0; i < _owners.length; i++) {\r\n      batchBalances[i] = balances[_owners[i]][_ids[i]];\r\n    }\r\n\r\n    return batchBalances;\r\n  }\r\n\r\n\r\n  /***********************************|\r\n  |          ERC165 Functions         |\r\n  |__________________________________*/\r\n\r\n  /**\r\n   * INTERFACE_SIGNATURE_ERC165 = bytes4(keccak256(\"supportsInterface(bytes4)\"));\r\n   */\r\n  bytes4 constant private INTERFACE_SIGNATURE_ERC165 = 0x01ffc9a7;\r\n\r\n  /**\r\n   * INTERFACE_SIGNATURE_ERC1155 =\r\n   * bytes4(keccak256(\"safeTransferFrom(address,address,uint256,uint256,bytes)\")) ^\r\n   * bytes4(keccak256(\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\")) ^\r\n   * bytes4(keccak256(\"balanceOf(address,uint256)\")) ^\r\n   * bytes4(keccak256(\"balanceOfBatch(address[],uint256[])\")) ^\r\n   * bytes4(keccak256(\"setApprovalForAll(address,bool)\")) ^\r\n   * bytes4(keccak256(\"isApprovedForAll(address,address)\"));\r\n   */\r\n  bytes4 constant private INTERFACE_SIGNATURE_ERC1155 = 0xd9b67a26;\r\n\r\n  /**\r\n   * @notice Query if a contract implements an interface\r\n   * @param _interfaceID  The interface identifier, as specified in ERC-165\r\n   * @return `true` if the contract implements `_interfaceID` and\r\n   */\r\n  function supportsInterface(bytes4 _interfaceID) external view returns (bool) {\r\n    if (_interfaceID == INTERFACE_SIGNATURE_ERC165 ||\r\n        _interfaceID == INTERFACE_SIGNATURE_ERC1155) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n}\r\n\r\n// File: multi-token-standard/contracts/tokens/ERC1155/ERC1155Metadata.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n\r\n\r\n/**\r\n * @notice Contract that handles metadata related methods.\r\n * @dev Methods assume a deterministic generation of URI based on token IDs.\r\n *      Methods also assume that URI uses hex representation of token IDs.\r\n */\r\ncontract ERC1155Metadata {\r\n\r\n  // URI's default URI prefix\r\n  string internal baseMetadataURI;\r\n  event URI(string _uri, uint256 indexed _id);\r\n\r\n\r\n  /***********************************|\r\n  |     Metadata Public Function s    |\r\n  |__________________________________*/\r\n\r\n  /**\r\n   * @notice A distinct Uniform Resource Identifier (URI) for a given token.\r\n   * @dev URIs are defined in RFC 3986.\r\n   *      URIs are assumed to be deterministically generated based on token ID\r\n   *      Token IDs are assumed to be represented in their hex format in URIs\r\n   * @return URI string\r\n   */\r\n  function uri(uint256 _id) public view returns (string memory) {\r\n    return string(abi.encodePacked(baseMetadataURI, _uint2str(_id), \".json\"));\r\n  }\r\n\r\n\r\n  /***********************************|\r\n  |    Metadata Internal Functions    |\r\n  |__________________________________*/\r\n\r\n  /**\r\n   * @notice Will emit default URI log event for corresponding token _id\r\n   * @param _tokenIDs Array of IDs of tokens to log default URI\r\n   */\r\n  function _logURIs(uint256[] memory _tokenIDs) internal {\r\n    string memory baseURL = baseMetadataURI;\r\n    string memory tokenURI;\r\n\r\n    for (uint256 i = 0; i < _tokenIDs.length; i++) {\r\n      tokenURI = string(abi.encodePacked(baseURL, _uint2str(_tokenIDs[i]), \".json\"));\r\n      emit URI(tokenURI, _tokenIDs[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Will emit a specific URI log event for corresponding token\r\n   * @param _tokenIDs IDs of the token corresponding to the _uris logged\r\n   * @param _URIs    The URIs of the specified _tokenIDs\r\n   */\r\n  function _logURIs(uint256[] memory _tokenIDs, string[] memory _URIs) internal {\r\n    require(_tokenIDs.length == _URIs.length, \"ERC1155Metadata#_logURIs: INVALID_ARRAYS_LENGTH\");\r\n    for (uint256 i = 0; i < _tokenIDs.length; i++) {\r\n      emit URI(_URIs[i], _tokenIDs[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Will update the base URL of token's URI\r\n   * @param _newBaseMetadataURI New base URL of token's URI\r\n   */\r\n  function _setBaseMetadataURI(string memory _newBaseMetadataURI) internal {\r\n    baseMetadataURI = _newBaseMetadataURI;\r\n  }\r\n\r\n\r\n  /***********************************|\r\n  |    Utility Internal Functions     |\r\n  |__________________________________*/\r\n\r\n  /**\r\n   * @notice Convert uint256 to string\r\n   * @param _i Unsigned integer to convert to string\r\n   */\r\n  function _uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\r\n    if (_i == 0) {\r\n      return \"0\";\r\n    }\r\n\r\n    uint256 j = _i;\r\n    uint256 ii = _i;\r\n    uint256 len;\r\n\r\n    // Get number of bytes\r\n    while (j != 0) {\r\n      len++;\r\n      j /= 10;\r\n    }\r\n\r\n    bytes memory bstr = new bytes(len);\r\n    uint256 k = len - 1;\r\n\r\n    // Get each individual ASCII\r\n    while (ii != 0) {\r\n      bstr[k--] = byte(uint8(48 + ii % 10));\r\n      ii /= 10;\r\n    }\r\n\r\n    // Convert to string\r\n    return string(bstr);\r\n  }\r\n\r\n}\r\n\r\n// File: multi-token-standard/contracts/tokens/ERC1155/ERC1155MintBurn.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n\r\n/**\r\n * @dev Multi-Fungible Tokens with minting and burning methods. These methods assume\r\n *      a parent contract to be executed as they are `internal` functions\r\n */\r\ncontract ERC1155MintBurn is ERC1155 {\r\n\r\n\r\n  /****************************************|\r\n  |            Minting Functions           |\r\n  |_______________________________________*/\r\n\r\n  /**\r\n   * @notice Mint _amount of tokens of a given id\r\n   * @param _to      The address to mint tokens to\r\n   * @param _id      Token id to mint\r\n   * @param _amount  The amount to be minted\r\n   * @param _data    Data to pass if receiver is contract\r\n   */\r\n  function _mint(address _to, uint256 _id, uint256 _amount, bytes memory _data)\r\n    internal\r\n  {\r\n    // Add _amount\r\n    balances[_to][_id] = balances[_to][_id].add(_amount);\r\n\r\n    // Emit event\r\n    emit TransferSingle(msg.sender, address(0x0), _to, _id, _amount);\r\n\r\n    // Calling onReceive method if recipient is contract\r\n    _callonERC1155Received(address(0x0), _to, _id, _amount, _data);\r\n  }\r\n\r\n  /**\r\n   * @notice Mint tokens for each ids in _ids\r\n   * @param _to       The address to mint tokens to\r\n   * @param _ids      Array of ids to mint\r\n   * @param _amounts  Array of amount of tokens to mint per id\r\n   * @param _data    Data to pass if receiver is contract\r\n   */\r\n  function _batchMint(address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data)\r\n    internal\r\n  {\r\n    require(_ids.length == _amounts.length, \"ERC1155MintBurn#batchMint: INVALID_ARRAYS_LENGTH\");\r\n\r\n    // Number of mints to execute\r\n    uint256 nMint = _ids.length;\r\n\r\n     // Executing all minting\r\n    for (uint256 i = 0; i < nMint; i++) {\r\n      // Update storage balance\r\n      balances[_to][_ids[i]] = balances[_to][_ids[i]].add(_amounts[i]);\r\n    }\r\n\r\n    // Emit batch mint event\r\n    emit TransferBatch(msg.sender, address(0x0), _to, _ids, _amounts);\r\n\r\n    // Calling onReceive method if recipient is contract\r\n    _callonERC1155BatchReceived(address(0x0), _to, _ids, _amounts, _data);\r\n  }\r\n\r\n\r\n  /****************************************|\r\n  |            Burning Functions           |\r\n  |_______________________________________*/\r\n\r\n  /**\r\n   * @notice Burn _amount of tokens of a given token id\r\n   * @param _from    The address to burn tokens from\r\n   * @param _id      Token id to burn\r\n   * @param _amount  The amount to be burned\r\n   */\r\n  function _burn(address _from, uint256 _id, uint256 _amount)\r\n    internal\r\n  {\r\n    //Substract _amount\r\n    balances[_from][_id] = balances[_from][_id].sub(_amount);\r\n\r\n    // Emit event\r\n    emit TransferSingle(msg.sender, _from, address(0x0), _id, _amount);\r\n  }\r\n\r\n  /**\r\n   * @notice Burn tokens of given token id for each (_ids[i], _amounts[i]) pair\r\n   * @param _from     The address to burn tokens from\r\n   * @param _ids      Array of token ids to burn\r\n   * @param _amounts  Array of the amount to be burned\r\n   */\r\n  function _batchBurn(address _from, uint256[] memory _ids, uint256[] memory _amounts)\r\n    internal\r\n  {\r\n    require(_ids.length == _amounts.length, \"ERC1155MintBurn#batchBurn: INVALID_ARRAYS_LENGTH\");\r\n\r\n    // Number of mints to execute\r\n    uint256 nBurn = _ids.length;\r\n\r\n     // Executing all minting\r\n    for (uint256 i = 0; i < nBurn; i++) {\r\n      // Update storage balance\r\n      balances[_from][_ids[i]] = balances[_from][_ids[i]].sub(_amounts[i]);\r\n    }\r\n\r\n    // Emit batch mint event\r\n    emit TransferBatch(msg.sender, _from, address(0x0), _ids, _amounts);\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/Strings.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\nlibrary Strings {\r\n  // via https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\r\n  function strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) internal pure returns (string memory) {\r\n      bytes memory _ba = bytes(_a);\r\n      bytes memory _bb = bytes(_b);\r\n      bytes memory _bc = bytes(_c);\r\n      bytes memory _bd = bytes(_d);\r\n      bytes memory _be = bytes(_e);\r\n      string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\r\n      bytes memory babcde = bytes(abcde);\r\n      uint k = 0;\r\n      for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\r\n      for (uint i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\r\n      for (uint i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\r\n      for (uint i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\r\n      for (uint i = 0; i < _be.length; i++) babcde[k++] = _be[i];\r\n      return string(babcde);\r\n    }\r\n\r\n    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d) internal pure returns (string memory) {\r\n        return strConcat(_a, _b, _c, _d, \"\");\r\n    }\r\n\r\n    function strConcat(string memory _a, string memory _b, string memory _c) internal pure returns (string memory) {\r\n        return strConcat(_a, _b, _c, \"\", \"\");\r\n    }\r\n\r\n    function strConcat(string memory _a, string memory _b) internal pure returns (string memory) {\r\n        return strConcat(_a, _b, \"\", \"\", \"\");\r\n    }\r\n\r\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\r\n        if (_i == 0) {\r\n            return \"0\";\r\n        }\r\n        uint j = _i;\r\n        uint len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len - 1;\r\n        while (_i != 0) {\r\n            bstr[k--] = byte(uint8(48 + _i % 10));\r\n            _i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n}\r\n\r\n// File: contracts/ERC1155Tradable.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract OwnableDelegateProxy { }\r\n\r\ncontract ProxyRegistry {\r\n  mapping(address => OwnableDelegateProxy) public proxies;\r\n}\r\n\r\n/**\r\n * @title ERC1155Tradable\r\n * ERC1155Tradable - ERC1155 contract that whitelists an operator address, has create and mint functionality, and supports useful standards from OpenZeppelin,\r\n  like _exists(), name(), symbol(), and totalSupply()\r\n */\r\ncontract ERC1155Tradable is ERC1155, ERC1155MintBurn, ERC1155Metadata, Ownable {\r\n  using Strings for string;\r\n\r\n  address proxyRegistryAddress;\r\n  uint256 private _currentTokenID = 0;\r\n  mapping (uint256 => address) public creators;\r\n  mapping (uint256 => uint256) public tokenSupply;\r\n  // Contract name\r\n  string public name;\r\n  // Contract symbol\r\n  string public symbol;\r\n\r\n  /**\r\n   * @dev Require msg.sender to be the creator of the token id\r\n   */\r\n  modifier creatorOnly(uint256 _id) {\r\n    require(creators[_id] == msg.sender, \"ERC1155Tradable#creatorOnly: ONLY_CREATOR_ALLOWED\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Require msg.sender to own more than 0 of the token id\r\n   */\r\n  modifier ownersOnly(uint256 _id) {\r\n    require(balances[msg.sender][_id] > 0, \"ERC1155Tradable#ownersOnly: ONLY_OWNERS_ALLOWED\");\r\n    _;\r\n  }\r\n\r\n  constructor(\r\n    string memory _name,\r\n    string memory _symbol,\r\n    address _proxyRegistryAddress\r\n  ) public {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    proxyRegistryAddress = _proxyRegistryAddress;\r\n  }\r\n\r\n  function uri(\r\n    uint256 _id\r\n  ) public view returns (string memory) {\r\n    require(_exists(_id), \"ERC721Tradable#uri: NONEXISTENT_TOKEN\");\r\n    return Strings.strConcat(\r\n      baseMetadataURI,\r\n      Strings.uint2str(_id)\r\n    );\r\n  }\r\n\r\n  /**\r\n    * @dev Returns the total quantity for a token ID\r\n    * @param _id uint256 ID of the token to query\r\n    * @return amount of token in existence\r\n    */\r\n  function totalSupply(\r\n    uint256 _id\r\n  ) public view returns (uint256) {\r\n    return tokenSupply[_id];\r\n  }\r\n\r\n  /**\r\n   * @dev Will update the base URL of token's URI\r\n   * @param _newBaseMetadataURI New base URL of token's URI\r\n   */\r\n  function setBaseMetadataURI(\r\n    string memory _newBaseMetadataURI\r\n  ) public onlyOwner {\r\n    _setBaseMetadataURI(_newBaseMetadataURI);\r\n  }\r\n\r\n  /**\r\n    * @dev Creates a new token type and assigns _initialSupply to an address\r\n    * NOTE: remove onlyOwner if you want third parties to create new tokens on your contract (which may change your IDs)\r\n    * @param _initialOwner address of the first owner of the token\r\n    * @param _initialSupply amount to supply the first owner\r\n    * @param _uri Optional URI for this token type\r\n    * @param _data Data to pass if receiver is contract\r\n    * @return The newly created token ID\r\n    */\r\n  function create(\r\n    address _initialOwner,\r\n    uint256 _initialSupply,\r\n    string calldata _uri,\r\n    bytes calldata _data\r\n  ) external onlyOwner returns (uint256) {\r\n\r\n    uint256 _id = _getNextTokenID();\r\n    _incrementTokenTypeId();\r\n    creators[_id] = msg.sender;\r\n\r\n    if (bytes(_uri).length > 0) {\r\n      emit URI(_uri, _id);\r\n    }\r\n\r\n    _mint(_initialOwner, _id, _initialSupply, _data);\r\n    tokenSupply[_id] = _initialSupply;\r\n    return _id;\r\n  }\r\n\r\n  /**\r\n    * @dev Mints some amount of tokens to an address\r\n    * @param _to          Address of the future owner of the token\r\n    * @param _id          Token ID to mint\r\n    * @param _quantity    Amount of tokens to mint\r\n    * @param _data        Data to pass if receiver is contract\r\n    */\r\n  function mint(\r\n    address _to,\r\n    uint256 _id,\r\n    uint256 _quantity,\r\n    bytes memory _data\r\n  ) public creatorOnly(_id) {\r\n    _mint(_to, _id, _quantity, _data);\r\n    tokenSupply[_id] += _quantity;\r\n  }\r\n\r\n  /**\r\n    * @dev Mint tokens for each id in _ids\r\n    * @param _to          The address to mint tokens to\r\n    * @param _ids         Array of ids to mint\r\n    * @param _quantities  Array of amounts of tokens to mint per id\r\n    * @param _data        Data to pass if receiver is contract\r\n    */\r\n  function batchMint(\r\n    address _to,\r\n    uint256[] memory _ids,\r\n    uint256[] memory _quantities,\r\n    bytes memory _data\r\n  ) public {\r\n    for (uint256 i = 0; i < _ids.length; i++) {\r\n      uint256 _id = _ids[i];\r\n      require(creators[_id] == msg.sender, \"ERC1155Tradable#batchMint: ONLY_CREATOR_ALLOWED\");\r\n      uint256 quantity = _quantities[i];\r\n      tokenSupply[_id] += quantity;\r\n    }\r\n    _batchMint(_to, _ids, _quantities, _data);\r\n  }\r\n\r\n  /**\r\n   * Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-free listings.\r\n   */\r\n  function isApprovedForAll(\r\n    address _owner,\r\n    address _operator\r\n  ) public view returns (bool isOperator) {\r\n    // Whitelist OpenSea proxy contract for easy trading.\r\n    ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\r\n    if (address(proxyRegistry.proxies(_owner)) == _operator) {\r\n      return true;\r\n    }\r\n\r\n    return ERC1155.isApprovedForAll(_owner, _operator);\r\n  }\r\n\r\n  /**\r\n    * @dev Returns whether the specified token exists by checking to see if it has a creator\r\n    * @param _id uint256 ID of the token to query the existence of\r\n    * @return bool whether the token exists\r\n    */\r\n  function _exists(\r\n    uint256 _id\r\n  ) internal view returns (bool) {\r\n    return creators[_id] != address(0);\r\n  }\r\n\r\n  /**\r\n    * @dev calculates the next token ID based on value of _currentTokenID\r\n    * @return uint256 for the next token ID\r\n    */\r\n  function _getNextTokenID() private view returns (uint256) {\r\n    return _currentTokenID.add(1);\r\n  }\r\n\r\n  /**\r\n    * @dev increments the value of _currentTokenID\r\n    */\r\n  function _incrementTokenTypeId() private  {\r\n    _currentTokenID++;\r\n  }\r\n}\r\n\r\n// File: contracts/MyCollectible.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n\r\n/**\r\n * @title MyCollectible\r\n * MyCollectible - a contract for my semi-fungible tokens.\r\n */\r\ncontract MyCollectible is ERC1155Tradable {\r\n  constructor(address _proxyRegistryAddress) ERC1155Tradable(\r\n    \"MyCollectible\",\r\n    \"MCB\",\r\n    _proxyRegistryAddress\r\n  ) public {\r\n    _setBaseMetadataURI(\"https://opensea-creatures-api.herokuapp.com/api/creature/\");\r\n  }\r\n}\r\n\r\n// File: contracts/IFactory.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n/**\r\n * This is a generic factory contract that can be used to mint tokens. The configuration\r\n * for minting is specified by an _optionId, which can be used to delineate various\r\n * ways of minting.\r\n */\r\ninterface IFactory {\r\n  /**\r\n   * Returns the name of this factory.\r\n   */\r\n  function name() external view returns (string memory);\r\n\r\n  /**\r\n   * Returns the symbol for this factory.\r\n   */\r\n  function symbol() external view returns (string memory);\r\n\r\n  /**\r\n   * Number of options the factory supports.\r\n   */\r\n  function numOptions() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns whether the option ID can be minted. Can return false if the developer wishes to\r\n   * restrict a total supply per option ID (or overall).\r\n   */\r\n  function canMint(uint256 _optionId, uint256 _amount) external view returns (bool);\r\n\r\n  /**\r\n   * @dev Returns a URL specifying some metadata about the option. This metadata can be of the\r\n   * same structure as the ERC1155 metadata.\r\n   */\r\n  function uri(uint256 _optionId) external view returns (string memory);\r\n\r\n  /**\r\n   * Indicates that this is a factory contract. Ideally would use EIP 165 supportsInterface()\r\n   */\r\n  function supportsFactoryInterface() external view returns (bool);\r\n\r\n  /**\r\n   * Indicates the Wyvern schema name for assets in this lootbox, e.g. \"ERC1155\"\r\n   */\r\n  function factorySchemaName() external view returns (string memory);\r\n\r\n  /**\r\n    * @dev Mints asset(s) in accordance to a specific address with a particular \"option\". This should be\r\n    * callable only by the contract owner or the owner's Wyvern Proxy (later universal login will solve this).\r\n    * Options should also be delineated 0 - (numOptions() - 1) for convenient indexing.\r\n    * @param _optionId the option id\r\n    * @param _toAddress address of the future owner of the asset(s)\r\n    * @param _amount amount of the option to mint\r\n    * @param _data Extra data to pass during safeTransferFrom\r\n    */\r\n  function mint(uint256 _optionId, address _toAddress, uint256 _amount, bytes calldata _data) external;\r\n\r\n  ///////\r\n  // Get things to work on OpenSea with mock methods below\r\n  ///////\r\n\r\n  function safeTransferFrom(address _from, address _to, uint256 _optionId, uint256 _amount, bytes calldata _data) external;\r\n\r\n  function balanceOf(address _owner, uint256 _optionId) external view returns (uint256);\r\n\r\n  function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n}\r\n\r\n// File: contracts/MyFactory.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n\r\n\r\n\r\n\r\n// WIP\r\ncontract MyFactory is IFactory, Ownable {\r\n  using Strings for string;\r\n  using SafeMath for uint256;\r\n\r\n  address public proxyRegistryAddress;\r\n  address public nftAddress;\r\n  string constant internal baseMetadataURI = \"https://opensea-creatures-api.herokuapp.com/api/\";\r\n  uint256 constant UINT256_MAX = ~uint256(0);\r\n\r\n  /**\r\n   * Optionally set this to a small integer to enforce limited existence per option/token ID\r\n   * (Otherwise rely on sell orders on OpenSea, which can only be made by the factory owner.)\r\n   */\r\n  uint256 constant SUPPLY_PER_TOKEN_ID = UINT256_MAX;\r\n\r\n  /**\r\n   * Three different options for minting MyCollectibles (basic, premium, and gold).\r\n   */\r\n  enum Option {\r\n    Basic,\r\n    Premium,\r\n    Gold\r\n  }\r\n  uint256 constant NUM_OPTIONS = 3;\r\n  mapping (uint256 => uint256) public optionToTokenID;\r\n\r\n  constructor(address _proxyRegistryAddress, address _nftAddress) public {\r\n    proxyRegistryAddress = _proxyRegistryAddress;\r\n    nftAddress = _nftAddress;\r\n  }\r\n\r\n  /////\r\n  // IFACTORY METHODS\r\n  /////\r\n\r\n  function name() external view returns (string memory) {\r\n    return \"My Collectible Pre-Sale\";\r\n  }\r\n\r\n  function symbol() external view returns (string memory) {\r\n    return \"MCP\";\r\n  }\r\n\r\n  function supportsFactoryInterface() external view returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  function factorySchemaName() external view returns (string memory) {\r\n    return \"ERC1155\";\r\n  }\r\n\r\n  function numOptions() external view returns (uint256) {\r\n    return NUM_OPTIONS;\r\n  }\r\n\r\n  function canMint(uint256 _optionId, uint256 _amount) external view returns (bool) {\r\n    return _canMint(msg.sender, Option(_optionId), _amount);\r\n  }\r\n\r\n  function mint(uint256 _optionId, address _toAddress, uint256 _amount, bytes calldata _data) external {\r\n    return _mint(Option(_optionId), _toAddress, _amount, _data);\r\n  }\r\n\r\n  function uri(uint256 _optionId) external view returns (string memory) {\r\n    return Strings.strConcat(\r\n      baseMetadataURI,\r\n      \"factory/\",\r\n      Strings.uint2str(_optionId)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Main minting logic implemented here!\r\n   */\r\n  function _mint(\r\n    Option _option,\r\n    address _toAddress,\r\n    uint256 _amount,\r\n    bytes memory _data\r\n  ) internal {\r\n    require(_canMint(msg.sender, _option, _amount), \"MyFactory#_mint: CANNOT_MINT_MORE\");\r\n    uint256 optionId = uint256(_option);\r\n    MyCollectible nftContract = MyCollectible(nftAddress);\r\n    uint256 id = optionToTokenID[optionId];\r\n    if (id == 0) {\r\n      id = nftContract.create(_toAddress, _amount, \"\", _data);\r\n      optionToTokenID[optionId] = id;\r\n    } else {\r\n      nftContract.mint(_toAddress, id, _amount, _data);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the factory's ownership of Option.\r\n   * Should be the amount it can still mint.\r\n   * NOTE: Called by `canMint`\r\n   */\r\n  function balanceOf(\r\n    address _owner,\r\n    uint256 _optionId\r\n  ) public view returns (uint256) {\r\n    if (!_isOwnerOrProxy(_owner)) {\r\n      // Only the factory owner or owner's proxy can have supply\r\n      return 0;\r\n    }\r\n    uint256 id = optionToTokenID[_optionId];\r\n    if (id == 0) {\r\n      // Haven't minted yet\r\n      return SUPPLY_PER_TOKEN_ID;\r\n    }\r\n\r\n    MyCollectible nftContract = MyCollectible(nftAddress);\r\n    uint256 currentSupply = nftContract.totalSupply(id);\r\n    return SUPPLY_PER_TOKEN_ID.sub(currentSupply);\r\n  }\r\n\r\n  /**\r\n   * Hack to get things to work automatically on OpenSea.\r\n   * Use safeTransferFrom so the frontend doesn't have to worry about different method names.\r\n   */\r\n  function safeTransferFrom(\r\n    address /* _from */,\r\n    address _to,\r\n    uint256 _optionId,\r\n    uint256 _amount,\r\n    bytes calldata _data\r\n  ) external {\r\n    _mint(Option(_optionId), _to, _amount, _data);\r\n  }\r\n\r\n  //////\r\n  // Below methods shouldn't need to be overridden or modified\r\n  //////\r\n\r\n  function isApprovedForAll(\r\n    address _owner,\r\n    address _operator\r\n  ) public view returns (bool) {\r\n    return owner() == _owner && _isOwnerOrProxy(_operator);\r\n  }\r\n\r\n  function _canMint(\r\n    address _fromAddress,\r\n    Option _option,\r\n    uint256 _amount\r\n  ) internal view returns (bool) {\r\n    uint256 optionId = uint256(_option);\r\n    return _amount > 0 && balanceOf(_fromAddress, optionId) >= _amount;\r\n  }\r\n\r\n  function _isOwnerOrProxy(\r\n    address _address\r\n  ) internal view returns (bool) {\r\n    ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\r\n    return owner() == _address || address(proxyRegistry.proxies(owner())) == _address;\r\n  }\r\n}\r\n\r\n// File: contracts/ILootBox.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n/**\r\n * This is a generic lootbox contract that can be used to mint or sendrandom tokens. The configuration\r\n * of the contract is detailed in MyLootBox.sol\r\n */\r\ninterface ILootBox {\r\n\r\n  /**\r\n   * Returns the name of this factory.\r\n   */\r\n  function name() external view returns (string memory);\r\n\r\n  /**\r\n   * Returns the symbol for this factory.\r\n   */\r\n  function symbol() external view returns (string memory);\r\n\r\n  /**\r\n   * Number of options the factory supports.\r\n   */\r\n  function numOptions() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns whether the option ID can be minted. Can return false if the developer wishes to\r\n   * restrict a total supply per option ID (or overall).\r\n   */\r\n  function canMint(uint256 _optionId, uint256 _amount) external view returns (bool);\r\n\r\n  /**\r\n   * @dev Returns a URL specifying some metadata about the option. This metadata can be of the\r\n   * same structure as the ERC1155 metadata.\r\n   */\r\n  function uri(uint256 _optionId) external view returns (string memory);\r\n\r\n  /**\r\n   * Indicates that this is a factory contract. Ideally would use EIP 165 supportsInterface()\r\n   */\r\n  function supportsFactoryInterface() external view returns (bool);\r\n\r\n  /**\r\n   * Indicates the Wyvern schema name for assets in this lootbox, e.g. \"ERC1155\"\r\n   */\r\n  function factorySchemaName() external view returns (string memory);\r\n\r\n  /**\r\n    * @dev Mints or sends asset(s) in accordance to a specific address with a particular \"option\". This should be\r\n    * callable only by the contract owner or the owner's Wyvern Proxy (later universal login will solve this).\r\n    * Options should also be delineated 0 - (numOptions() - 1) for convenient indexing.\r\n    * @param _optionId the option id\r\n    * @param _toAddress address of the future owner of the asset(s)\r\n    * @param _amount amount of the option to mint\r\n    */\r\n  function open(uint256 _optionId, address _toAddress, uint256 _amount) external;\r\n\r\n  ////////\r\n  // ADMINISTRATION\r\n  ////////\r\n\r\n  /**\r\n   * @dev If the tokens for some class are pre-minted and owned by the\r\n   * contract owner, they can be used for a given class by setting them here\r\n   */\r\n  function setClassForTokenId(uint256 _tokenId, uint256 _classId) external;\r\n\r\n  /**\r\n   * @dev Remove all token ids for a given class, causing it to fall back to\r\n   * creating/minting into the nft address\r\n   */\r\n  function resetClass(uint256 _classId) external;\r\n\r\n  /**\r\n   * @dev Withdraw lootbox revenue\r\n   * Only accessible by contract owner\r\n   */\r\n  function withdraw() external;\r\n\r\n  ///////\r\n  // Get things to work on OpenSea with mock methods below\r\n  ///////\r\n\r\n  function safeTransferFrom(address _from, address _to, uint256 _optionId, uint256 _amount, bytes calldata _data) external;\r\n\r\n  function balanceOf(address _owner, uint256 _optionId) external view returns (uint256);\r\n\r\n  function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n}\r\n\r\n// File: contracts/MyLootBox.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title MyLootBox\r\n * MyLootBox - a randomized and openable lootbox of MyCollectibles\r\n */\r\ncontract MyLootBox is ILootBox, Ownable, Pausable, ReentrancyGuard, MyFactory {\r\n  using SafeMath for uint256;\r\n\r\n  // Event for logging lootbox opens\r\n  event LootBoxOpened(uint256 indexed optionId, address indexed buyer, uint256 boxesPurchased, uint256 itemsMinted);\r\n  event Warning(string message, address account);\r\n\r\n  // Must be sorted by rarity\r\n  enum Class {\r\n    Common,\r\n    Rare,\r\n    Epic,\r\n    Legendary,\r\n    Divine,\r\n    Hidden\r\n  }\r\n  uint256 constant NUM_CLASSES = 6;\r\n\r\n  // NOTE: Price of the lootbox is set via sell orders on OpenSea\r\n  struct OptionSettings {\r\n    // Number of items to send per open.\r\n    // Set to 0 to disable this Option.\r\n    uint256 quantityPerOpen;\r\n    // Probability in basis points (out of 10,000) of receiving each class (descending)\r\n    uint16[NUM_CLASSES] classProbabilities;\r\n  }\r\n  mapping (uint256 => OptionSettings) public optionToSettings;\r\n  mapping (uint256 => uint256[]) public classToTokenIds;\r\n  mapping (uint256 => bool) public classIsPreminted;\r\n  uint256 nonce = 0;\r\n  uint256 constant INVERSE_BASIS_POINT = 10000;\r\n\r\n  /**\r\n   * @dev Example constructor. Calls setOptionSettings for you with\r\n   *      sample settings\r\n   * @param _proxyRegistryAddress The address of the OpenSea/Wyvern proxy registry\r\n   *                              On Rinkeby: \"0xf57b2c51ded3a29e6891aba85459d600256cf317\"\r\n   *                              On mainnet: \"0xa5409ec958c83c3f309868babaca7c86dcb077c1\"\r\n   * @param _nftAddress The address of the non-fungible/semi-fungible item contract\r\n   *                    that you want to mint/transfer with each open\r\n   */\r\n  constructor(\r\n    address _proxyRegistryAddress,\r\n    address _nftAddress\r\n  ) MyFactory(\r\n    _proxyRegistryAddress,\r\n    _nftAddress\r\n  ) public {\r\n    // Example settings and probabilities\r\n    // you can also call these after deploying\r\n    setOptionSettings(Option.Basic, 3, [7300, 2100, 400, 100, 50, 50]);\r\n    setOptionSettings(Option.Premium, 5, [7200, 2100, 400, 200, 50, 50]);\r\n    setOptionSettings(Option.Gold, 7, [7000, 2100, 400, 400, 50, 50]);\r\n  }\r\n\r\n  //////\r\n  // INITIALIZATION FUNCTIONS FOR OWNER\r\n  //////\r\n\r\n  /**\r\n   * @dev If the tokens for some class are pre-minted and owned by the\r\n   * contract owner, they can be used for a given class by setting them here\r\n   */\r\n  function setClassForTokenId(\r\n    uint256 _tokenId,\r\n    uint256 _classId\r\n  ) external onlyOwner {\r\n    _checkTokenApproval();\r\n    _addTokenIdToClass(Class(_classId), _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Remove all token ids for a given class, causing it to fall back to\r\n   * creating/minting into the nft address\r\n   */\r\n  function resetClass(\r\n    uint256 _classId\r\n  ) external onlyOwner {\r\n    delete classIsPreminted[_classId];\r\n    delete classToTokenIds[_classId];\r\n  }\r\n\r\n  /**\r\n   * @dev Set token IDs for each rarity class. Bulk version of `setTokenIdForClass`\r\n   * @param _tokenIds List of token IDs to set for each class, specified above in order\r\n   */\r\n  function setTokenIdsForClasses(\r\n    uint256[NUM_CLASSES] calldata _tokenIds\r\n  ) external onlyOwner {\r\n    _checkTokenApproval();\r\n    for (uint256 i = 0; i < _tokenIds.length; i++) {\r\n      Class class = Class(i);\r\n      _addTokenIdToClass(class, _tokenIds[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Set the settings for a particular lootbox option\r\n   * @param _option The Option to set settings for\r\n   * @param _quantityPerOpen The number of items to mint per open.\r\n   *                         Set to 0 to disable this option.\r\n   * @param _classProbabilities Array of probabilities (basis points, so integers out of 10,000)\r\n   *                            of receiving each class. Should add up to 10k and be descending\r\n   *                            in value.\r\n   */\r\n  function setOptionSettings(\r\n    Option _option,\r\n    uint256 _quantityPerOpen,\r\n    uint16[NUM_CLASSES] memory _classProbabilities\r\n  ) public onlyOwner {\r\n\r\n    OptionSettings memory settings = OptionSettings({\r\n      quantityPerOpen: _quantityPerOpen,\r\n      classProbabilities: _classProbabilities\r\n    });\r\n\r\n    optionToSettings[uint256(_option)] = settings;\r\n  }\r\n\r\n  ///////\r\n  // MAIN FUNCTIONS\r\n  //////\r\n\r\n  /**\r\n   * @dev Open a lootbox manually and send what's inside to _toAddress\r\n   * Convenience method for contract owner.\r\n   */\r\n  function open(\r\n    uint256 _optionId,\r\n    address _toAddress,\r\n    uint256 _amount\r\n  ) external {\r\n    _mint(Option(_optionId), _toAddress, _amount, \"\");\r\n  }\r\n\r\n  /**\r\n   * @dev Main minting logic for lootboxes\r\n   * This is called via safeTransferFrom when MyLootBox extends MyFactory.\r\n   * NOTE: prices and fees are determined by the sell order on OpenSea.\r\n   */\r\n  function _mint(\r\n    Option _option,\r\n    address _toAddress,\r\n    uint256 _amount,\r\n    bytes memory /* _data */\r\n  ) internal whenNotPaused nonReentrant {\r\n    // Load settings for this box option\r\n    uint256 optionId = uint256(_option);\r\n    OptionSettings memory settings = optionToSettings[optionId];\r\n\r\n    require(settings.quantityPerOpen > 0, \"MyLootBox#_mint: OPTION_NOT_ALLOWED\");\r\n    require(_canMint(msg.sender, _option, _amount), \"MyLootBox#_mint: CANNOT_MINT\");\r\n\r\n    // Iterate over the quantity of boxes specified\r\n    for (uint256 i = 0; i < _amount; i++) {\r\n      // Iterate over the box's set quantity\r\n      for (uint256 j = 0; j < settings.quantityPerOpen; j++) {\r\n        Class class = _pickRandomClass(settings.classProbabilities);\r\n        _sendTokenWithClass(class, _toAddress, 1);\r\n      }\r\n    }\r\n\r\n    // Event emissions\r\n    uint256 totalMinted = _amount.mul(settings.quantityPerOpen);\r\n    emit LootBoxOpened(optionId, _toAddress, _amount, totalMinted);\r\n  }\r\n\r\n  function withdraw() public onlyOwner {\r\n    msg.sender.transfer(address(this).balance);\r\n  }\r\n\r\n  /////\r\n  // Metadata methods\r\n  /////\r\n\r\n  function name() external view returns (string memory) {\r\n    return \"My Loot Box\";\r\n  }\r\n\r\n  function symbol() external view returns (string memory) {\r\n    return \"MYLOOT\";\r\n  }\r\n\r\n  function uri(uint256 _optionId) external view returns (string memory) {\r\n    return Strings.strConcat(\r\n      baseMetadataURI,\r\n      \"box/\",\r\n      Strings.uint2str(_optionId)\r\n    );\r\n  }\r\n\r\n  /////\r\n  // HELPER FUNCTIONS\r\n  /////\r\n\r\n  // Returns the tokenId sent to _toAddress\r\n  function _sendTokenWithClass(\r\n    Class _class,\r\n    address _toAddress,\r\n    uint256 _amount\r\n  ) internal returns (uint256) {\r\n    uint256 classId = uint256(_class);\r\n    MyCollectible nftContract = MyCollectible(nftAddress);\r\n    uint256 tokenId = _pickRandomAvailableTokenIdForClass(_class, _amount);\r\n    if (classIsPreminted[classId]) {\r\n      nftContract.safeTransferFrom(\r\n        owner(),\r\n        _toAddress,\r\n        tokenId,\r\n        _amount,\r\n        \"\"\r\n      );\r\n    } else if (tokenId == 0) {\r\n      tokenId = nftContract.create(_toAddress, _amount, \"\", \"\");\r\n      classToTokenIds[classId].push(tokenId);\r\n    } else {\r\n      nftContract.mint(_toAddress, tokenId, _amount, \"\");\r\n    }\r\n    return tokenId;\r\n  }\r\n\r\n  function _pickRandomClass(\r\n    uint16[NUM_CLASSES] memory _classProbabilities\r\n  ) internal returns (Class) {\r\n    uint16 value = uint16(_random().mod(INVERSE_BASIS_POINT));\r\n    // Start at top class (length - 1)\r\n    // skip common (0), we default to it\r\n    for (uint256 i = _classProbabilities.length - 1; i > 0; i--) {\r\n      uint16 probability = _classProbabilities[i];\r\n      if (value < probability) {\r\n        return Class(i);\r\n      } else {\r\n        value = value - probability;\r\n      }\r\n    }\r\n    return Class.Common;\r\n  }\r\n\r\n  function _pickRandomAvailableTokenIdForClass(\r\n    Class _class,\r\n    uint256 _minAmount\r\n  ) internal returns (uint256) {\r\n    uint256 classId = uint256(_class);\r\n    uint256[] memory tokenIds = classToTokenIds[classId];\r\n    if (tokenIds.length == 0) {\r\n      // Unminted\r\n      require(\r\n        !classIsPreminted[classId],\r\n        \"MyLootBox#_pickRandomAvailableTokenIdForClass: NO_TOKEN_ON_PREMINTED_CLASS\"\r\n      );\r\n      return 0;\r\n    }\r\n    if (classIsPreminted[classId]) {\r\n      // Make sure owner() owns enough\r\n      MyCollectible nftContract = MyCollectible(nftAddress);\r\n      for (uint256 i = 0; i < tokenIds.length; i++) {\r\n        uint256 tokenId = tokenIds[i];\r\n        if (nftContract.balanceOf(owner(), tokenId) >= _minAmount) {\r\n          return tokenId;\r\n        }\r\n      }\r\n      revert(\"MyLootBox#_pickRandomAvailableTokenIdForClass: NOT_ENOUGH_TOKENS_FOR_CLASS\");\r\n    } else {\r\n      // For newly minted tokens, randomly pick one that we've done\r\n      uint256 index = _random().mod(tokenIds.length);\r\n      return tokenIds[index];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Pseudo-random number generator\r\n   * NOTE: to improve randomness, generate it with an oracle\r\n   */\r\n  function _random() internal returns (uint256) {\r\n    uint256 randomNumber = uint256(keccak256(abi.encodePacked(blockhash(block.number - 1), msg.sender, nonce)));\r\n    nonce++;\r\n    return randomNumber;\r\n  }\r\n\r\n  /**\r\n   * @dev emit a Warning if we're not approved to transfer nftAddress\r\n   */\r\n  function _checkTokenApproval() internal {\r\n    MyCollectible nftContract = MyCollectible(nftAddress);\r\n    if (!nftContract.isApprovedForAll(owner(), address(this))) {\r\n      emit Warning(\"Lootbox contract is not approved for trading collectible by:\", owner());\r\n    }\r\n  }\r\n\r\n  function _addTokenIdToClass(Class _class, uint256 _tokenId) internal {\r\n    uint256 classId = uint256(_class);\r\n    classIsPreminted[classId] = true;\r\n    classToTokenIds[classId].push(_tokenId);\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxyRegistryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"boxesPurchased\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemsMinted\",\"type\":\"uint256\"}],\"name\":\"LootBoxOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Warning\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_optionId\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_optionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"canMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"classIsPreminted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"classToTokenIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"factorySchemaName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_optionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nftAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numOptions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_optionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"open\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"optionToSettings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"quantityPerOpen\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"optionToTokenID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxyRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_classId\",\"type\":\"uint256\"}],\"name\":\"resetClass\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_optionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_classId\",\"type\":\"uint256\"}],\"name\":\"setClassForTokenId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"enum MyFactory.Option\",\"name\":\"_option\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_quantityPerOpen\",\"type\":\"uint256\"},{\"internalType\":\"uint16[6]\",\"name\":\"_classProbabilities\",\"type\":\"uint16[6]\"}],\"name\":\"setOptionSettings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[6]\",\"name\":\"_tokenIds\",\"type\":\"uint256[6]\"}],\"name\":\"setTokenIdsForClasses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supportsFactoryInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_optionId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MyLootBox","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a5409ec958c83c3f309868babaca7c86dcb077c1000000000000000000000000faafdc07907ff5120a76b34b731b278c38d6043c","Library":"","LicenseType":"None","SwarmSource":"bzzr://2a5b58774bbdfc195fb987c1339fcfbffc563e6f5abec1e2bbff8b3c2fb801d6"}]}