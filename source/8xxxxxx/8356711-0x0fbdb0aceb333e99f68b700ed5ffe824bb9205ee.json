{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\n\r\npragma solidity ^0.5.11;\r\n\r\n/// @title Utility Functions for uint\r\n/// @author Daniel Wang - <daniel@loopring.org>\r\nlibrary MathUint\r\n{\r\n    function mul(\r\n        uint a,\r\n        uint b\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint c)\r\n    {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b, \"MUL_OVERFLOW\");\r\n    }\r\n\r\n    function sub(\r\n        uint a,\r\n        uint b\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint)\r\n    {\r\n        require(b <= a, \"SUB_UNDERFLOW\");\r\n        return a - b;\r\n    }\r\n\r\n    function add(\r\n        uint a,\r\n        uint b\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint c)\r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"ADD_OVERFLOW\");\r\n    }\r\n\r\n    function decodeFloat(\r\n        uint f\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint value)\r\n    {\r\n        uint numBitsMantissa = 23;\r\n        uint exponent = f >> numBitsMantissa;\r\n        uint mantissa = f & ((1 << numBitsMantissa) - 1);\r\n        value = mantissa * (10 ** exponent);\r\n    }\r\n}\r\n\r\n/// @title Poseidon hash function\r\n///        See: https://eprint.iacr.org/2019/458.pdf\r\n///        Code auto-generated by generate_poseidon_EVM_code.py\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\nlibrary Poseidon\r\n{\r\n    function hash_t5f6p52(\r\n        uint t0,\r\n        uint t1,\r\n        uint t2,\r\n        uint t3,\r\n        uint t4\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint)\r\n    {\r\n        uint q = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\r\n        // Make sure the inputs can be stored in the SNARK field\r\n        require(t0 < q, \"INVALID_INPUT\");\r\n        require(t1 < q, \"INVALID_INPUT\");\r\n        require(t2 < q, \"INVALID_INPUT\");\r\n        require(t3 < q, \"INVALID_INPUT\");\r\n        require(t4 < q, \"INVALID_INPUT\");\r\n\r\n        assembly {\r\n            function mix(t0, t1, t2, t3, t4, q) -> nt0, nt1, nt2, nt3, nt4 {\r\n                nt0 := mulmod(t0, 4977258759536702998522229302103997878600602264560359702680165243908162277980, q)\r\n                nt0 := addmod(nt0, mulmod(t1, 19167410339349846567561662441069598364702008768579734801591448511131028229281, q), q)\r\n                nt0 := addmod(nt0, mulmod(t2, 14183033936038168803360723133013092560869148726790180682363054735190196956789, q), q)\r\n                nt0 := addmod(nt0, mulmod(t3, 9067734253445064890734144122526450279189023719890032859456830213166173619761, q), q)\r\n                nt0 := addmod(nt0, mulmod(t4, 16378664841697311562845443097199265623838619398287411428110917414833007677155, q), q)\r\n                nt1 := mulmod(t0, 107933704346764130067829474107909495889716688591997879426350582457782826785, q)\r\n                nt1 := addmod(nt1, mulmod(t1, 17034139127218860091985397764514160131253018178110701196935786874261236172431, q), q)\r\n                nt1 := addmod(nt1, mulmod(t2, 2799255644797227968811798608332314218966179365168250111693473252876996230317, q), q)\r\n                nt1 := addmod(nt1, mulmod(t3, 2482058150180648511543788012634934806465808146786082148795902594096349483974, q), q)\r\n                nt1 := addmod(nt1, mulmod(t4, 16563522740626180338295201738437974404892092704059676533096069531044355099628, q), q)\r\n                nt2 := mulmod(t0, 13596762909635538739079656925495736900379091964739248298531655823337482778123, q)\r\n                nt2 := addmod(nt2, mulmod(t1, 18985203040268814769637347880759846911264240088034262814847924884273017355969, q), q)\r\n                nt2 := addmod(nt2, mulmod(t2, 8652975463545710606098548415650457376967119951977109072274595329619335974180, q), q)\r\n                nt2 := addmod(nt2, mulmod(t3, 970943815872417895015626519859542525373809485973005165410533315057253476903, q), q)\r\n                nt2 := addmod(nt2, mulmod(t4, 19406667490568134101658669326517700199745817783746545889094238643063688871948, q), q)\r\n                nt3 := mulmod(t0, 2953507793609469112222895633455544691298656192015062835263784675891831794974, q)\r\n                nt3 := addmod(nt3, mulmod(t1, 19025623051770008118343718096455821045904242602531062247152770448380880817517, q), q)\r\n                nt3 := addmod(nt3, mulmod(t2, 9077319817220936628089890431129759976815127354480867310384708941479362824016, q), q)\r\n                nt3 := addmod(nt3, mulmod(t3, 4770370314098695913091200576539533727214143013236894216582648993741910829490, q), q)\r\n                nt3 := addmod(nt3, mulmod(t4, 4298564056297802123194408918029088169104276109138370115401819933600955259473, q), q)\r\n                nt4 := mulmod(t0, 8336710468787894148066071988103915091676109272951895469087957569358494947747, q)\r\n                nt4 := addmod(nt4, mulmod(t1, 16205238342129310687768799056463408647672389183328001070715567975181364448609, q), q)\r\n                nt4 := addmod(nt4, mulmod(t2, 8303849270045876854140023508764676765932043944545416856530551331270859502246, q), q)\r\n                nt4 := addmod(nt4, mulmod(t3, 20218246699596954048529384569730026273241102596326201163062133863539137060414, q), q)\r\n                nt4 := addmod(nt4, mulmod(t4, 1712845821388089905746651754894206522004527237615042226559791118162382909269, q), q)\r\n            }\r\n\r\n            function ark(t0, t1, t2, t3, t4, q, c) -> nt0, nt1, nt2, nt3, nt4 {\r\n                nt0 := addmod(t0, c, q)\r\n                nt1 := addmod(t1, c, q)\r\n                nt2 := addmod(t2, c, q)\r\n                nt3 := addmod(t3, c, q)\r\n                nt4 := addmod(t4, c, q)\r\n            }\r\n\r\n            function sbox_full(t0, t1, t2, t3, t4, q) -> nt0, nt1, nt2, nt3, nt4 {\r\n                nt0 := mulmod(t0, t0, q)\r\n                nt0 := mulmod(nt0, nt0, q)\r\n                nt0 := mulmod(t0, nt0, q)\r\n                nt1 := mulmod(t1, t1, q)\r\n                nt1 := mulmod(nt1, nt1, q)\r\n                nt1 := mulmod(t1, nt1, q)\r\n                nt2 := mulmod(t2, t2, q)\r\n                nt2 := mulmod(nt2, nt2, q)\r\n                nt2 := mulmod(t2, nt2, q)\r\n                nt3 := mulmod(t3, t3, q)\r\n                nt3 := mulmod(nt3, nt3, q)\r\n                nt3 := mulmod(t3, nt3, q)\r\n                nt4 := mulmod(t4, t4, q)\r\n                nt4 := mulmod(nt4, nt4, q)\r\n                nt4 := mulmod(t4, nt4, q)\r\n            }\r\n\r\n            function sbox_partial(t, q) -> nt {\r\n                nt := mulmod(t, t, q)\r\n                nt := mulmod(nt, nt, q)\r\n                nt := mulmod(t, nt, q)\r\n            }\r\n\r\n            // round 0\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 14397397413755236225575615486459253198602422701513067526754101844196324375522)\r\n            t0, t1, t2, t3, t4 := sbox_full(t0, t1, t2, t3, t4, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 1\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 10405129301473404666785234951972711717481302463898292859783056520670200613128)\r\n            t0, t1, t2, t3, t4 := sbox_full(t0, t1, t2, t3, t4, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 2\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 5179144822360023508491245509308555580251733042407187134628755730783052214509)\r\n            t0, t1, t2, t3, t4 := sbox_full(t0, t1, t2, t3, t4, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 3\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 9132640374240188374542843306219594180154739721841249568925550236430986592615)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 4\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 20360807315276763881209958738450444293273549928693737723235350358403012458514)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 5\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 17933600965499023212689924809448543050840131883187652471064418452962948061619)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 6\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 3636213416533737411392076250708419981662897009810345015164671602334517041153)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 7\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 2008540005368330234524962342006691994500273283000229509835662097352946198608)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 8\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 16018407964853379535338740313053768402596521780991140819786560130595652651567)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 9\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 20653139667070586705378398435856186172195806027708437373983929336015162186471)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 10\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 17887713874711369695406927657694993484804203950786446055999405564652412116765)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 11\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 4852706232225925756777361208698488277369799648067343227630786518486608711772)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 12\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 8969172011633935669771678412400911310465619639756845342775631896478908389850)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 13\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 20570199545627577691240476121888846460936245025392381957866134167601058684375)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 14\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 16442329894745639881165035015179028112772410105963688121820543219662832524136)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 15\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 20060625627350485876280451423010593928172611031611836167979515653463693899374)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 16\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 16637282689940520290130302519163090147511023430395200895953984829546679599107)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 17\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 15599196921909732993082127725908821049411366914683565306060493533569088698214)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 18\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 16894591341213863947423904025624185991098788054337051624251730868231322135455)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 19\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 1197934381747032348421303489683932612752526046745577259575778515005162320212)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 20\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 6172482022646932735745595886795230725225293469762393889050804649558459236626)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 21\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 21004037394166516054140386756510609698837211370585899203851827276330669555417)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 22\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 15262034989144652068456967541137853724140836132717012646544737680069032573006)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 23\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 15017690682054366744270630371095785995296470601172793770224691982518041139766)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 24\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 15159744167842240513848638419303545693472533086570469712794583342699782519832)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 25\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 11178069035565459212220861899558526502477231302924961773582350246646450941231)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 26\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 21154888769130549957415912997229564077486639529994598560737238811887296922114)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 27\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 20162517328110570500010831422938033120419484532231241180224283481905744633719)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 28\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 2777362604871784250419758188173029886707024739806641263170345377816177052018)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 29\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 15732290486829619144634131656503993123618032247178179298922551820261215487562)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 30\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 6024433414579583476444635447152826813568595303270846875177844482142230009826)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 31\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 17677827682004946431939402157761289497221048154630238117709539216286149983245)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 32\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 10716307389353583413755237303156291454109852751296156900963208377067748518748)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 33\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 14925386988604173087143546225719076187055229908444910452781922028996524347508)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 34\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 8940878636401797005293482068100797531020505636124892198091491586778667442523)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 35\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 18911747154199663060505302806894425160044925686870165583944475880789706164410)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 36\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 8821532432394939099312235292271438180996556457308429936910969094255825456935)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 37\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 20632576502437623790366878538516326728436616723089049415538037018093616927643)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 38\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 71447649211767888770311304010816315780740050029903404046389165015534756512)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 39\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 2781996465394730190470582631099299305677291329609718650018200531245670229393)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 40\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 12441376330954323535872906380510501637773629931719508864016287320488688345525)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 41\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 2558302139544901035700544058046419714227464650146159803703499681139469546006)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 42\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 10087036781939179132584550273563255199577525914374285705149349445480649057058)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 43\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 4267692623754666261749551533667592242661271409704769363166965280715887854739)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 44\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 4945579503584457514844595640661884835097077318604083061152997449742124905548)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 45\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 17742335354489274412669987990603079185096280484072783973732137326144230832311)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 46\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 6266270088302506215402996795500854910256503071464802875821837403486057988208)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 47\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 2716062168542520412498610856550519519760063668165561277991771577403400784706)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 48\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 19118392018538203167410421493487769944462015419023083813301166096764262134232)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 49\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 9386595745626044000666050847309903206827901310677406022353307960932745699524)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 50\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 9121640807890366356465620448383131419933298563527245687958865317869840082266)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 51\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 3078975275808111706229899605611544294904276390490742680006005661017864583210)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 52\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 7157404299437167354719786626667769956233708887934477609633504801472827442743)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 53\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 14056248655941725362944552761799461694550787028230120190862133165195793034373)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 54\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 14124396743304355958915937804966111851843703158171757752158388556919187839849)\r\n            t0 := sbox_partial(t0, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 55\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 11851254356749068692552943732920045260402277343008629727465773766468466181076)\r\n            t0, t1, t2, t3, t4 := sbox_full(t0, t1, t2, t3, t4, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 56\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 9799099446406796696742256539758943483211846559715874347178722060519817626047)\r\n            t0, t1, t2, t3, t4 := sbox_full(t0, t1, t2, t3, t4, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n            // round 57\r\n            t0, t1, t2, t3, t4 := ark(t0, t1, t2, t3, t4, q, 10156146186214948683880719664738535455146137901666656566575307300522957959544)\r\n            t0, t1, t2, t3, t4 := sbox_full(t0, t1, t2, t3, t4, q)\r\n            t0, t1, t2, t3, t4 := mix(t0, t1, t2, t3, t4, q)\r\n        }\r\n        return t0;\r\n    }\r\n}\r\n\r\n/// @title ExchangeBalances.\r\n/// @author Daniel Wang  - <daniel@loopring.org>\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\nlibrary ExchangeBalances\r\n{\r\n    using MathUint  for uint;\r\n\r\n    function verifyAccountBalance(\r\n        uint     merkleRoot,\r\n        uint24   accountID,\r\n        uint16   tokenID,\r\n        uint     pubKeyX,\r\n        uint     pubKeyY,\r\n        uint32   nonce,\r\n        uint96   balance,\r\n        uint     tradeHistoryRoot,\r\n        uint[30] calldata accountMerkleProof,\r\n        uint[12] calldata balanceMerkleProof\r\n        )\r\n        external\r\n        pure\r\n    {\r\n        bool isCorrect = isAccountBalanceCorrect(\r\n            merkleRoot,\r\n            accountID,\r\n            tokenID,\r\n            pubKeyX,\r\n            pubKeyY,\r\n            nonce,\r\n            balance,\r\n            tradeHistoryRoot,\r\n            accountMerkleProof,\r\n            balanceMerkleProof\r\n        );\r\n        require(isCorrect, \"INVALID_MERKLE_TREE_DATA\");\r\n    }\r\n\r\n    function isAccountBalanceCorrect(\r\n        uint     merkleRoot,\r\n        uint24   accountID,\r\n        uint16   tokenID,\r\n        uint     pubKeyX,\r\n        uint     pubKeyY,\r\n        uint32   nonce,\r\n        uint96   balance,\r\n        uint     tradeHistoryRoot,\r\n        uint[30] memory accountMerkleProof,\r\n        uint[12] memory balanceMerkleProof\r\n        )\r\n        public\r\n        pure\r\n        returns (bool isCorrect)\r\n    {\r\n        // Verify data\r\n        uint calculatedRoot = getBalancesRoot(\r\n            tokenID,\r\n            balance,\r\n            tradeHistoryRoot,\r\n            balanceMerkleProof\r\n        );\r\n        calculatedRoot = getAccountInternalsRoot(\r\n            accountID,\r\n            pubKeyX,\r\n            pubKeyY,\r\n            nonce,\r\n            calculatedRoot,\r\n            accountMerkleProof\r\n        );\r\n        isCorrect = (calculatedRoot == merkleRoot);\r\n    }\r\n\r\n    function getBalancesRoot(\r\n        uint16   tokenID,\r\n        uint     balance,\r\n        uint     tradeHistoryRoot,\r\n        uint[12] memory balanceMerkleProof\r\n        )\r\n        private\r\n        pure\r\n        returns (uint)\r\n    {\r\n        uint balanceItem = hashImpl(balance, tradeHistoryRoot, 0, 0);\r\n        uint _id = tokenID;\r\n        for (uint depth = 0; depth < 4; depth++) {\r\n            if (_id & 3 == 0) {\r\n                balanceItem = hashImpl(\r\n                    balanceItem,\r\n                    balanceMerkleProof[depth * 3],\r\n                    balanceMerkleProof[depth * 3 + 1],\r\n                    balanceMerkleProof[depth * 3 + 2]\r\n                );\r\n            } else if (_id & 3 == 1) {\r\n                balanceItem = hashImpl(\r\n                    balanceMerkleProof[depth * 3],\r\n                    balanceItem,\r\n                    balanceMerkleProof[depth * 3 + 1],\r\n                    balanceMerkleProof[depth * 3 + 2]\r\n                );\r\n            } else if (_id & 3 == 2) {\r\n                balanceItem = hashImpl(\r\n                    balanceMerkleProof[depth * 3],\r\n                    balanceMerkleProof[depth * 3 + 1],\r\n                    balanceItem,\r\n                    balanceMerkleProof[depth * 3 + 2]\r\n                );\r\n            } else if (_id & 3 == 3) {\r\n                balanceItem = hashImpl(\r\n                    balanceMerkleProof[depth * 3],\r\n                    balanceMerkleProof[depth * 3 + 1],\r\n                    balanceMerkleProof[depth * 3 + 2],\r\n                    balanceItem\r\n                );\r\n            }\r\n            _id = _id >> 2;\r\n        }\r\n        return balanceItem;\r\n    }\r\n\r\n    function getAccountInternalsRoot(\r\n        uint24   accountID,\r\n        uint     pubKeyX,\r\n        uint     pubKeyY,\r\n        uint     nonce,\r\n        uint     balancesRoot,\r\n        uint[30] memory accountMerkleProof\r\n        )\r\n        private\r\n        pure\r\n        returns (uint)\r\n    {\r\n        uint accountItem = hashImpl(pubKeyX, pubKeyY, nonce, balancesRoot);\r\n        uint _id = accountID;\r\n        for (uint depth = 0; depth < 10; depth++) {\r\n            if (_id & 3 == 0) {\r\n                accountItem = hashImpl(\r\n                    accountItem,\r\n                    accountMerkleProof[depth * 3],\r\n                    accountMerkleProof[depth * 3 + 1],\r\n                    accountMerkleProof[depth * 3 + 2]\r\n                );\r\n            } else if (_id & 3 == 1) {\r\n                accountItem = hashImpl(\r\n                    accountMerkleProof[depth * 3],\r\n                    accountItem,\r\n                    accountMerkleProof[depth * 3 + 1],\r\n                    accountMerkleProof[depth * 3 + 2]\r\n                );\r\n            } else if (_id & 3 == 2) {\r\n                accountItem = hashImpl(\r\n                    accountMerkleProof[depth * 3],\r\n                    accountMerkleProof[depth * 3 + 1],\r\n                    accountItem,\r\n                    accountMerkleProof[depth * 3 + 2]\r\n                );\r\n            } else if (_id & 3 == 3) {\r\n                accountItem = hashImpl(\r\n                    accountMerkleProof[depth * 3],\r\n                    accountMerkleProof[depth * 3 + 1],\r\n                    accountMerkleProof[depth * 3 + 2],\r\n                    accountItem\r\n                );\r\n            }\r\n            _id = _id >> 2;\r\n        }\r\n        return accountItem;\r\n    }\r\n\r\n    function hashImpl(\r\n        uint t0,\r\n        uint t1,\r\n        uint t2,\r\n        uint t3\r\n        )\r\n        private\r\n        pure\r\n        returns (uint)\r\n    {\r\n        return Poseidon.hash_t5f6p52(t0, t1, t2, t3, 0);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"merkleRoot\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"accountID\",\"type\":\"uint24\"},{\"internalType\":\"uint16\",\"name\":\"tokenID\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"pubKeyX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pubKeyY\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"tradeHistoryRoot\",\"type\":\"uint256\"},{\"internalType\":\"uint256[30]\",\"name\":\"accountMerkleProof\",\"type\":\"uint256[30]\"},{\"internalType\":\"uint256[12]\",\"name\":\"balanceMerkleProof\",\"type\":\"uint256[12]\"}],\"name\":\"verifyAccountBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"merkleRoot\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"accountID\",\"type\":\"uint24\"},{\"internalType\":\"uint16\",\"name\":\"tokenID\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"pubKeyX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pubKeyY\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"tradeHistoryRoot\",\"type\":\"uint256\"},{\"internalType\":\"uint256[30]\",\"name\":\"accountMerkleProof\",\"type\":\"uint256[30]\"},{\"internalType\":\"uint256[12]\",\"name\":\"balanceMerkleProof\",\"type\":\"uint256[12]\"}],\"name\":\"isAccountBalanceCorrect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isCorrect\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"ExchangeBalances","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://431a3e2bfab7bbf88b016661b8fc36a98a6de256b90e3d97aed917bef1c76691"}]}