{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts\\lib\\Ownable.sol\r\n\r\npragma solidity 0.5.9;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Only owner is able call this function!\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts\\lib\\SafeMath.sol\r\n\r\npragma solidity ^0.5.9;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, 'SafeMul overflow!');\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, 'SafeDiv cannot divide by 0!');\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, 'SafeSub underflow!');\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, 'SafeAdd overflow!');\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, 'SafeMod cannot compute modulo of 0!');\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts\\lib\\ERC20Plus.sol\r\n\r\npragma solidity 0.5.9;\r\n\r\n/**\r\n * @title ERC20 interface with additional functions\r\n * @dev it has added functions that deals to minting, pausing token and token information\r\n */\r\ncontract ERC20Plus {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    // additonal functions\r\n    function mint(address _to, uint256 _amount) public returns (bool);\r\n    function owner() public view returns (address);\r\n    function transferOwnership(address newOwner) public;\r\n    function name() public view returns (string memory);\r\n    function symbol() public view returns (string memory);\r\n    function decimals() public view returns (uint8);\r\n    function paused() public view returns (bool);\r\n}\r\n\r\n// File: contracts\\lib\\Lockable.sol\r\n\r\npragma solidity 0.5.9;\r\n\r\n\r\ncontract Lockable is Ownable {\r\n\r\n    bool public locked;\r\n\r\n    modifier onlyWhenUnlocked() {\r\n        require(!locked, 'Contract is locked by owner!');\r\n        _;\r\n    }\r\n\r\n    function lock() external onlyOwner {\r\n        locked = true;\r\n    }\r\n\r\n    function unlock() external onlyOwner {\r\n        locked = false;\r\n    }\r\n}\r\n\r\n// File: contracts\\BonusTokenDistribution.sol\r\n\r\npragma solidity 0.5.9;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title BonusTokenDistribution - contract for handling bonus tokens\r\n * @author Markus Waas - <markus@starbase.co>\r\n */\r\n\r\ncontract BonusTokenDistribution is Lockable {\r\n    using SafeMath for uint256;\r\n\r\n    ERC20Plus public tokenOnSale;\r\n\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n\r\n    mapping (address => uint256) public bonusTokenBalances;\r\n\r\n    modifier isAfterClaimPeriod {\r\n        require(\r\n            (now > endTime.add(60 days)),\r\n            'Claim period is not yet finished!'\r\n        );\r\n\r\n        _;\r\n    }\r\n\r\n    modifier hasStarted {\r\n        require(\r\n            now >= startTime,\r\n            \"Distribution period not yet started!\"\r\n        );\r\n\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @param _startTime Timestamp for the beginning of the bonus campaign\r\n     * @param _endTime Timestamp of the end of the bonus campaign\r\n     * @param _tokenOnSale Token that will be distributed\r\n     */\r\n    constructor(\r\n        uint256 _startTime,\r\n        uint256 _endTime,\r\n        address _tokenOnSale\r\n    ) public {\r\n        require(_startTime >= now, \"startTime must be more than current time!\");\r\n        require(_endTime >= _startTime, \"endTime must be more than startTime!\");\r\n        require(_tokenOnSale != address(0), \"tokenOnSale cannot be 0!\");\r\n\r\n        startTime = _startTime;\r\n        endTime = _endTime;\r\n        tokenOnSale = ERC20Plus(_tokenOnSale);\r\n    }\r\n\r\n    /**\r\n     * @dev Adds bonus claim for user\r\n     * @param _user Address of the user\r\n     * @param _amount Amount of tokens he can claim\r\n     */\r\n    function addBonusClaim(address _user, uint256 _amount)\r\n        public\r\n        onlyOwner\r\n        hasStarted {\r\n        require(_user != address(0), \"user cannot be 0!\");\r\n        require(_amount > 0, \"amount cannot be 0!\");\r\n\r\n        bonusTokenBalances[_user] = bonusTokenBalances[_user].add(_amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw bonus tokens\r\n     */\r\n    function withdrawBonusTokens() public onlyWhenUnlocked hasStarted {\r\n        uint256 bonusTokens = bonusTokenBalances[msg.sender];\r\n        uint256 tokenBalance = tokenOnSale.balanceOf(address(this));\r\n\r\n        require(bonusTokens > 0, 'No bonus tokens to withdraw!');\r\n        require(tokenBalance >= bonusTokens, 'Not enough bonus tokens left!');\r\n\r\n        bonusTokenBalances[msg.sender] = 0;\r\n        tokenOnSale.transfer(msg.sender, bonusTokens);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw any left over tokens for owner after 60 days claim period.\r\n     */\r\n    function withdrawLeftoverBonusTokensOwner()\r\n        public\r\n        isAfterClaimPeriod\r\n        onlyOwner {\r\n        uint256 tokenBalance = tokenOnSale.balanceOf(address(this));\r\n        require(tokenBalance > 0, 'No bonus tokens leftover!');\r\n\r\n        tokenOnSale.transfer(msg.sender, tokenBalance);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenOnSale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"bonusTokenBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addBonusClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawLeftoverBonusTokensOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBonusTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_tokenOnSale\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BonusTokenDistribution","CompilerVersion":"v0.5.9+commit.e560f70d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005d65aee800000000000000000000000000000000000000000000000000000000880204f80000000000000000000000009382ece263c7fac96d51c44cb510597379119c11","Library":"","LicenseType":"None","SwarmSource":"bzzr://cb1d16ca9a6d41e49ab5e4a6353f7a667a1ce74fa43f45a98ffb7c7807e04460"}]}