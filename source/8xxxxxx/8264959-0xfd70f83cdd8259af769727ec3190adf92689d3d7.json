{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary  SafeMath {\r\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a );\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require( c >= a && c >= b );\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev The Authorized contract has an admin address and a switch activating or\r\n * deactivating the transfer functionality.\r\n */\r\ncontract Authorized {\r\n    // Define an admin\r\n    address public admin;\r\n    bool public _openTransfer = false;\r\n\r\n    constructor( address _admin ) public {\r\n        admin = _admin;\r\n    }\r\n\r\n    // Notify an event of opening transfer functionality.\r\n    event OpenTransfer( address indexed _operation, bool _previousFlag, bool _currentFlag );\r\n\r\n    // Notify an event of closing transfer functionality.\r\n    event CloseTransfer( address indexed _operation, bool _previousFlag, bool _currentFlag );\r\n\r\n    // Not Allowed if called by any account other than admin.\r\n    modifier onlyAdmin( ) {\r\n        require( msg.sender == admin);\r\n        _;\r\n    }\r\n\r\n    // Not Allowed if not open.\r\n    modifier onlyOpen( ) {\r\n        require( _openTransfer );\r\n        _;\r\n    }\r\n\r\n    // Called by the admin to open transfer functionality.\r\n    function openTransfer( ) public onlyAdmin returns(bool success) {\r\n        require( !_openTransfer, \"The flag is open\");\r\n\r\n        bool currentFlag = _openTransfer;\r\n        _openTransfer = true;\r\n\r\n        emit OpenTransfer(msg.sender, currentFlag, _openTransfer);\r\n        return true;\r\n    }\r\n\r\n    // Called by the admin to close transfer functionality.\r\n    function closeTransfer( ) public onlyAdmin returns(bool success) {\r\n        require(_openTransfer, \"The flag is close\");\r\n\r\n        bool currentFlag = _openTransfer;\r\n        _openTransfer = false;\r\n\r\n        emit CloseTransfer(msg.sender, currentFlag, _openTransfer);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\ncontract LBKCoin is  Authorized {\r\n    using SafeMath for uint256;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    mapping (address => bool) public freezeOf;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    // Notify an event of freezing an account.\r\n    event Freeze(address indexed from, bool _flag);\r\n\r\n    // Notify an event of unfreezing an account.\r\n    event Unfreeze(address indexed from, bool _flag);\r\n\r\n    constructor( string memory _name, string memory _symbol, uint8 _decimals, uint256 _totalSupply, address _admin ) public Authorized( _admin ) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n        totalSupply = _totalSupply;\r\n\r\n        // The initial fund is allocated to the admin.\r\n        balanceOf[_admin] = totalSupply;\r\n    }\r\n\r\n    // Send some funds when the transfer functionality is open.\r\n    function transfer(address _to, uint256 _value) public onlyOpen {\r\n        // Sender and receiver must be unfreezed.\r\n        require( freezeOf[msg.sender] == false && freezeOf[_to] == false );\r\n        require( _to != address(0) );\r\n        require( _value > 0 );\r\n\r\n        require (balanceOf[msg.sender] > _value) ;\r\n        require ((balanceOf[_to] + _value ) > balanceOf[_to]) ;\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].safeSub( _value );\r\n        balanceOf[_to] = balanceOf[_to].safeAdd( _value );\r\n        emit Transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    // Allow another account to spend the specified amount of funds only when the transfer functionality is open.\r\n    function approve(address _spender, uint256 _value) public onlyOpen returns (bool success) {\r\n        // Sender and spender must be unfreezed.\r\n        require( freezeOf[msg.sender] == false && freezeOf[_spender] == false );\r\n        require( _spender != address(0) );\r\n        require( _value >= 0 );\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    // Transfer some funds from one account to another, which is allowed\r\n    function transferFrom(address _from, address _to, uint256 _value) public onlyOpen returns (bool success) {\r\n        // Funds provider, sender and receiver must all be unfreezed.\r\n        require( freezeOf[msg.sender] == false && freezeOf[_from] == false && freezeOf[_to] == false );\r\n        require( _to != address(0) );\r\n        require( _value > 0 );\r\n\r\n        require( balanceOf[_from] >= _value );\r\n        require( (balanceOf[_to] + _value) >= balanceOf[_to] );\r\n\r\n        require (_value <= allowance[_from][msg.sender]);\r\n        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);\r\n        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);\r\n        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    // Only admin can burn some specified funds.\r\n    function burn(uint256 _value) public onlyAdmin returns (bool success) {\r\n        require( balanceOf[msg.sender] >= _value );\r\n        require( _value > 0 );\r\n\r\n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);\r\n        totalSupply = SafeMath.safeSub(totalSupply,_value);\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    // Only admin can freeze a unfreezed account.\r\n    function freeze(address _freezeAddress) public onlyAdmin returns (bool success) {\r\n        require( _freezeAddress != address(0) && _freezeAddress != admin );\r\n        require( freezeOf[_freezeAddress] == false );\r\n        freezeOf[_freezeAddress] = true;\r\n        emit Freeze(_freezeAddress, freezeOf[_freezeAddress]);\r\n        return true;\r\n    }\r\n\r\n    // Only admin can unfreeze a freezed account.\r\n    function unfreeze(address _unfreezeAddress) public onlyAdmin returns (bool success) {\r\n        require( _unfreezeAddress != address(0) && _unfreezeAddress != admin );\r\n        require( freezeOf[_unfreezeAddress] == true );\r\n        freezeOf[_unfreezeAddress] = false;\r\n        emit Unfreeze(_unfreezeAddress, freezeOf[_unfreezeAddress]);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unfreezeAddress\",\"type\":\"address\"}],\"name\":\"unfreeze\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeTransfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_freezeAddress\",\"type\":\"address\"}],\"name\":\"freeze\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"openTransfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_openTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"freezeOf\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"name\":\"_admin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"Unfreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_operation\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_previousFlag\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_currentFlag\",\"type\":\"bool\"}],\"name\":\"OpenTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_operation\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_previousFlag\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_currentFlag\",\"type\":\"bool\"}],\"name\":\"CloseTransfer\",\"type\":\"event\"}]","ContractName":"LBKCoin","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000002c68af0bb1400000000000000000000000000006b4f13dab8468caae7c294851a7202767e7044c900000000000000000000000000000000000000000000000000000000000000034c424b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034c424b0000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://3a8e8199668cd530818662f29766f0c8167339e5614608cdea534a77cb4914bf"}]}