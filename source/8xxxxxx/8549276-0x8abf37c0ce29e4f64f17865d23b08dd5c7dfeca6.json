{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2019-09-14\r\n*/\r\n\r\n// File: contracts/commons/SafeMath.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\r\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\r\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\r\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IERC20.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/interfaces/UniswapExchange.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n\r\ncontract UniswapExchange {\r\n    // Address of ERC20 token sold on this exchange\r\n    function tokenAddress() external view returns (address token);\r\n    // Address of Uniswap Factory\r\n    function factoryAddress() external view returns (address factory);\r\n    // Provide Liquidity\r\n    function addLiquidity(uint256 min_liquidity, uint256 max_tokens, uint256 deadline) external payable returns (uint256);\r\n    function removeLiquidity(uint256 amount, uint256 min_eth, uint256 min_tokens, uint256 deadline) external returns (uint256, uint256);\r\n    // Get Prices\r\n    function getEthToTokenInputPrice(uint256 eth_sold) external view returns (uint256 tokens_bought);\r\n    function getEthToTokenOutputPrice(uint256 tokens_bought) external view returns (uint256 eth_sold);\r\n    function getTokenToEthInputPrice(uint256 tokens_sold) external view returns (uint256 eth_bought);\r\n    function getTokenToEthOutputPrice(uint256 eth_bought) external view returns (uint256 tokens_sold);\r\n    // Trade ETH to ERC20\r\n    function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline) external payable returns (uint256  tokens_bought);\r\n    function ethToTokenTransferInput(uint256 min_tokens, uint256 deadline, address recipient) external payable returns (uint256  tokens_bought);\r\n    function ethToTokenSwapOutput(uint256 tokens_bought, uint256 deadline) external payable returns (uint256  eth_sold);\r\n    function ethToTokenTransferOutput(uint256 tokens_bought, uint256 deadline, address recipient) external payable returns (uint256  eth_sold);\r\n    // Trade ERC20 to ETH\r\n    function tokenToEthSwapInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline) external returns (uint256  eth_bought);\r\n    function tokenToEthTransferInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline, address recipient) external returns (uint256  eth_bought);\r\n    function tokenToEthSwapOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline) external returns (uint256  tokens_sold);\r\n    function tokenToEthTransferOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline, address recipient) external returns (uint256  tokens_sold);\r\n    // Trade ERC20 to ERC20\r\n    function tokenToTokenSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address token_addr) external returns (uint256  tokens_bought);\r\n    function tokenToTokenTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_bought);\r\n    function tokenToTokenSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address token_addr) external returns (uint256  tokens_sold);\r\n    function tokenToTokenTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_sold);\r\n    // Trade ERC20 to Custom Pool\r\n    function tokenToExchangeSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address exchange_addr) external returns (uint256  tokens_bought);\r\n    function tokenToExchangeTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_bought);\r\n    function tokenToExchangeSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address exchange_addr) external returns (uint256  tokens_sold);\r\n    function tokenToExchangeTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_sold);\r\n    // ERC20 comaptibility for liquidity tokens\r\n    bytes32 public name;\r\n    bytes32 public symbol;\r\n    uint256 public decimals;\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 value) external returns (bool);\r\n    function approve(address _spender, uint256 _value) external returns (bool);\r\n    function allowance(address _owner, address _spender) external view returns (uint256);\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    // Never use\r\n    function setup(address token_addr) external;\r\n}\r\n\r\n// File: contracts/interfaces/UniswapFactory.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n\r\n\r\n\r\ncontract UniswapFactory {\r\n    // Public Variables\r\n    address public exchangeTemplate;\r\n    uint256 public tokenCount;\r\n    // Create Exchange\r\n    function createExchange(address token) external returns (address exchange);\r\n    // Get Exchange and Token Info\r\n    function getExchange(address token) external view returns (UniswapExchange exchange);\r\n    function getToken(address exchange) external view returns (IERC20 token);\r\n    function getTokenWithId(uint256 tokenId) external view returns (address token);\r\n    // Never use\r\n    function initializeFactory(address template) external;\r\n}\r\n\r\n// File: contracts/libs/Fabric.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n\r\n\r\n/**\r\n * @title Fabric\r\n * @dev Create deterministics vaults.\r\n */\r\nlibrary Fabric {\r\n    /*Vault bytecode\r\n\r\n        def _fallback() payable:\r\n            call cd[56] with:\r\n                funct call.data[0 len 4]\r\n                gas cd[56] wei\r\n                args call.data[4 len 64]\r\n            selfdestruct(tx.origin)\r\n\r\n        // Constructor bytecode\r\n        0x6012600081600A8239f3\r\n\r\n        0x60 12 - PUSH1 12           // Size of the contract to return\r\n        0x60 00 - PUSH1 00           // Memory offset to return stored code\r\n        0x81    - DUP2  12           // Size of code to copy\r\n        0x60 0a - PUSH1 0A           // Start of the code to copy\r\n        0x82    - DUP3  00           // Dest memory for code copy\r\n        0x39    - CODECOPY 00 0A 12  // Code copy to memory\r\n        0xf3    - RETURN 00 12       // Return code to store\r\n\r\n        // Deployed contract bytecode\r\n        0x60008060448082803781806038355AF132FF\r\n\r\n        0x60 00 - PUSH1 00                    // Size for the call output\r\n        0x80    - DUP1  00                    // Offset for the call output\r\n        0x60 44 - PUSH1 44                    // Size for the call input\r\n        0x80    - DUP1  44                    // Size for copying calldata to memory\r\n        0x82    - DUP3  00                    // Offset for calldata copy\r\n        0x80    - DUP1  00                    // Offset for destination of calldata copy\r\n        0x37    - CALLDATACOPY 00 00 44       // Execute calldata copy, is going to be used for next call\r\n        0x81    - DUP2  00                    // Offset for call input\r\n        0x80    - DUP1  00                    // Amount of ETH to send during call\r\n        0x60 38 - PUSH1 38                    // calldata pointer to load value into stack\r\n        0x35    - CALLDATALOAD 38 (A)         // Load value (A), address to call\r\n        0x5a    - GAS                         // Remaining gas\r\n        0xf1    - CALL (A) (A) 00 00 44 00 00 // Execute call to address (A) with calldata mem[0:64]\r\n        0x32    - ORIGIN (B)                  // Dest funds for selfdestruct\r\n        0xff    - SELFDESTRUCT (B)            // selfdestruct contract, end of execution\r\n    */\r\n    bytes public constant code = hex\"6012600081600A8239F360008060448082803781806038355AF132FF\";\r\n    bytes32 public constant vaultCodeHash = bytes32(0xfa3da1081bc86587310fce8f3a5309785fc567b9b20875900cb289302d6bfa97);\r\n\r\n    /**\r\n    * @dev Get a deterministics vault.\r\n    */\r\n    function getVault(bytes32 _key) internal view returns (address) {\r\n        return address(\r\n            uint256(\r\n                keccak256(\r\n                    abi.encodePacked(\r\n                        byte(0xff),\r\n                        address(this),\r\n                        _key,\r\n                        vaultCodeHash\r\n                    )\r\n                )\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev Create deterministic vault.\r\n    */\r\n    function executeVault(bytes32 _key, IERC20 _token, address _to) internal returns (uint256 value) {\r\n        address addr;\r\n        bytes memory slotcode = code;\r\n\r\n        /* solium-disable-next-line */\r\n        assembly{\r\n          // Create the contract arguments for the constructor\r\n          addr := create2(0, add(slotcode, 0x20), mload(slotcode), _key)\r\n        }\r\n\r\n        value = _token.balanceOf(addr);\r\n        /* solium-disable-next-line */\r\n        (bool success, ) = addr.call(\r\n            abi.encodePacked(\r\n                abi.encodeWithSelector(\r\n                    _token.transfer.selector,\r\n                    _to,\r\n                    value\r\n                ),\r\n                address(_token)\r\n            )\r\n        );\r\n\r\n        require(success, \"error pulling tokens\");\r\n    }\r\n}\r\n\r\n// File: contracts/UniswapEX.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract UniswapEX {\r\n    using SafeMath for uint256;\r\n    using Fabric for bytes32;\r\n\r\n    event DepositETH(\r\n        bytes32 indexed _key,\r\n        address indexed _caller,\r\n        uint256 _amount,\r\n        bytes _data\r\n    );\r\n\r\n    event OrderExecuted(\r\n        bytes32 indexed _key,\r\n        address _fromToken,\r\n        address _toToken,\r\n        uint256 _minReturn,\r\n        uint256 _fee,\r\n        address _owner,\r\n        bytes32 _salt,\r\n        address _relayer,\r\n        uint256 _amount,\r\n        uint256 _bought\r\n    );\r\n\r\n    event OrderCancelled(\r\n        bytes32 indexed _key,\r\n        address _fromToken,\r\n        address _toToken,\r\n        uint256 _minReturn,\r\n        uint256 _fee,\r\n        address _owner,\r\n        bytes32 _salt,\r\n        uint256 _amount\r\n    );\r\n\r\n    address public constant ETH_ADDRESS = address(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\r\n    uint256 private constant never = uint(-1);\r\n\r\n    UniswapFactory public uniswapFactory;\r\n\r\n    mapping(bytes32 => uint256) public ethDeposits;\r\n\r\n    constructor(UniswapFactory _uniswapFactory) public {\r\n        uniswapFactory = _uniswapFactory;\r\n    }\r\n\r\n    function() external payable { }\r\n\r\n    function depositEth(\r\n        bytes calldata _data\r\n    ) external payable {\r\n        require(msg.value > 0, \"No value provided\");\r\n\r\n        bytes32 key = keccak256(_data);\r\n        ethDeposits[key] = ethDeposits[key].add(msg.value);\r\n        emit DepositETH(key, msg.sender, msg.value, _data);\r\n    }\r\n\r\n    function cancelOrder(\r\n        IERC20 _fromToken,\r\n        IERC20 _toToken,\r\n        uint256 _minReturn,\r\n        uint256 _fee,\r\n        address payable _owner,\r\n        bytes32 _salt\r\n    ) external {\r\n        require(msg.sender == _owner, \"Only the owner of the order can cancel it\");\r\n        bytes32 key = _keyOf(\r\n            _fromToken,\r\n            _toToken,\r\n            _minReturn,\r\n            _fee,\r\n            _owner,\r\n            _salt\r\n        );\r\n\r\n        uint256 amount;\r\n        if (address(_fromToken) == ETH_ADDRESS) {\r\n            amount = ethDeposits[key];\r\n            ethDeposits[key] = 0;\r\n            msg.sender.transfer(amount);\r\n        } else {\r\n            amount = key.executeVault(_fromToken, msg.sender);\r\n        }\r\n\r\n        emit OrderCancelled(\r\n            key,\r\n            address(_fromToken),\r\n            address(_toToken),\r\n            _minReturn,\r\n            _fee,\r\n            _owner,\r\n            _salt,\r\n            amount\r\n        );\r\n    }\r\n\r\n    function executeOrder(\r\n        IERC20 _fromToken,\r\n        IERC20 _toToken,\r\n        uint256 _minReturn,\r\n        uint256 _fee,\r\n        address payable _owner,\r\n        bytes32 _salt\r\n    ) external {\r\n        bytes32 key = _keyOf(\r\n            _fromToken,\r\n            _toToken,\r\n            _minReturn,\r\n            _fee,\r\n            _owner,\r\n            _salt\r\n        );\r\n\r\n        // Pull amount\r\n        uint256 amount = _pullOrder(_fromToken, key);\r\n        require(amount > 0, \"The order does not exists\");\r\n\r\n        uint256 bought;\r\n\r\n        if (address(_fromToken) == ETH_ADDRESS) {\r\n            // Keep some eth for paying the fee\r\n            uint256 sell = amount.sub(_fee);\r\n            bought = _ethToToken(uniswapFactory, _toToken, sell, _owner);\r\n            msg.sender.transfer(_fee);\r\n        } else if (address(_toToken) == ETH_ADDRESS) {\r\n            // Convert\r\n            bought = _tokenToEth(uniswapFactory, _fromToken, amount, address(this));\r\n            bought = bought.sub(_fee);\r\n\r\n            // Send fee and amount bought\r\n            msg.sender.transfer(_fee);\r\n            _owner.transfer(bought);\r\n        } else {\r\n            // Convert from fromToken to ETH\r\n            uint256 boughtEth = _tokenToEth(uniswapFactory, _fromToken, amount, address(this));\r\n            msg.sender.transfer(_fee);\r\n\r\n            // Convert from ETH to toToken\r\n            bought = _ethToToken(uniswapFactory, _toToken, boughtEth.sub(_fee), _owner);\r\n        }\r\n\r\n        require(bought >= _minReturn, \"Tokens bought are not enough\");\r\n\r\n        emit OrderExecuted(\r\n            key,\r\n            address(_fromToken),\r\n            address(_toToken),\r\n            _minReturn,\r\n            _fee,\r\n            _owner,\r\n            _salt,\r\n            msg.sender,\r\n            amount,\r\n            bought\r\n        );\r\n    }\r\n\r\n    function encodeTokenOrder(\r\n        IERC20 _fromToken,\r\n        IERC20 _toToken,\r\n        uint256 _amount,\r\n        uint256 _minReturn,\r\n        uint256 _fee,\r\n        address payable _owner,\r\n        bytes32 _salt\r\n    ) external view returns (bytes memory) {\r\n        return abi.encodeWithSelector(\r\n            _fromToken.transfer.selector,\r\n            vaultOfOrder(\r\n                _fromToken,\r\n                _toToken,\r\n                _minReturn,\r\n                _fee,\r\n                _owner,\r\n                _salt\r\n            ),\r\n            _amount,\r\n            abi.encode(\r\n                _fromToken,\r\n                _toToken,\r\n                _minReturn,\r\n                _fee,\r\n                _owner,\r\n                _salt\r\n            )\r\n        );\r\n    }\r\n\r\n    function encodeEthOrder(\r\n        address _fromToken,\r\n        address _toToken,\r\n        uint256 _minReturn,\r\n        uint256 _fee,\r\n        address payable _owner,\r\n        bytes32 _salt\r\n    ) external pure returns (bytes memory) {\r\n        return abi.encode(\r\n            _fromToken,\r\n            _toToken,\r\n            _minReturn,\r\n            _fee,\r\n            _owner,\r\n            _salt\r\n        );\r\n    }\r\n\r\n    function decodeOrder(\r\n        bytes calldata _data\r\n    ) external pure returns (\r\n        address fromToken,\r\n        address toToken,\r\n        uint256 minReturn,\r\n        uint256 fee,\r\n        address payable owner,\r\n        bytes32 salt\r\n    ) {\r\n        (\r\n            fromToken,\r\n            toToken,\r\n            minReturn,\r\n            fee,\r\n            owner,\r\n            salt\r\n        ) = abi.decode(\r\n            _data,\r\n            (address, address, uint256, uint256, address, bytes32)\r\n        );\r\n    }\r\n\r\n    function existOrder(\r\n        IERC20 _fromToken,\r\n        IERC20 _toToken,\r\n        uint256 _minReturn,\r\n        uint256 _fee,\r\n        address payable _owner,\r\n        bytes32 _salt\r\n    ) external view returns (bool) {\r\n        bytes32 key = _keyOf(\r\n            _fromToken,\r\n            _toToken,\r\n            _minReturn,\r\n            _fee,\r\n            _owner,\r\n            _salt\r\n        );\r\n\r\n        if (address(_fromToken) == ETH_ADDRESS) {\r\n            return ethDeposits[key] != 0;\r\n        } else {\r\n            return _fromToken.balanceOf(key.getVault()) != 0;\r\n        }\r\n    }\r\n\r\n    function canExecuteOrder(\r\n        IERC20 _fromToken,\r\n        IERC20 _toToken,\r\n        uint256 _minReturn,\r\n        uint256 _fee,\r\n        address payable _owner,\r\n        bytes32 _salt\r\n    ) external view returns (bool) {\r\n        bytes32 key = _keyOf(\r\n            _fromToken,\r\n            _toToken,\r\n            _minReturn,\r\n            _fee,\r\n            _owner,\r\n            _salt\r\n        );\r\n\r\n        // Pull amount\r\n        uint256 amount;\r\n        if (address(_fromToken) == ETH_ADDRESS) {\r\n            amount = ethDeposits[key];\r\n        } else {\r\n            amount = _fromToken.balanceOf(key.getVault());\r\n        }\r\n\r\n        uint256 bought;\r\n\r\n        if (address(_fromToken) == ETH_ADDRESS) {\r\n            if (amount <= _fee) {\r\n                return false;\r\n            }\r\n\r\n            uint256 sell = amount.sub(_fee);\r\n            bought = uniswapFactory.getExchange(address(_toToken)).getEthToTokenInputPrice(sell);\r\n        } else if (address(_toToken) == ETH_ADDRESS) {\r\n            bought = uniswapFactory.getExchange(address(_fromToken)).getTokenToEthInputPrice(amount);\r\n            if (bought <= _fee) {\r\n                return false;\r\n            }\r\n\r\n            bought = bought.sub(_fee);\r\n        } else {\r\n            uint256 boughtEth = uniswapFactory.getExchange(address(_fromToken)).getTokenToEthInputPrice(amount);\r\n            if (boughtEth <= _fee) {\r\n                return false;\r\n            }\r\n\r\n            bought = uniswapFactory.getExchange(address(_toToken)).getEthToTokenInputPrice(boughtEth.sub(_fee));\r\n        }\r\n\r\n        return bought >= _minReturn;\r\n    }\r\n\r\n    function vaultOfOrder(\r\n        IERC20 _fromToken,\r\n        IERC20 _toToken,\r\n        uint256 _minReturn,\r\n        uint256 _fee,\r\n        address payable _owner,\r\n        bytes32 _salt\r\n    ) public view returns (address) {\r\n        return _keyOf(\r\n            _fromToken,\r\n            _toToken,\r\n            _minReturn,\r\n            _fee,\r\n            _owner,\r\n            _salt\r\n        ).getVault();\r\n    }\r\n\r\n    function _ethToToken(\r\n        UniswapFactory _uniswapFactory,\r\n        IERC20 _token,\r\n        uint256 _amount,\r\n        address _dest\r\n    ) private returns (uint256) {\r\n        UniswapExchange uniswap = _uniswapFactory.getExchange(address(_token));\r\n\r\n        if (_dest != address(this)) {\r\n            return uniswap.ethToTokenTransferInput.value(_amount)(1, never, _dest);\r\n        } else {\r\n            return uniswap.ethToTokenSwapInput.value(_amount)(1, never);\r\n        }\r\n    }\r\n\r\n    function _tokenToEth(\r\n        UniswapFactory _uniswapFactory,\r\n        IERC20 _token,\r\n        uint256 _amount,\r\n        address _dest\r\n    ) private returns (uint256) {\r\n        UniswapExchange uniswap = _uniswapFactory.getExchange(address(_token));\r\n        require(address(uniswap) != address(0), \"The exchange should exist\");\r\n\r\n        // Check if previous allowance is enought and approve Uniswap if not\r\n        uint256 prevAllowance = _token.allowance(address(this), address(uniswap));\r\n        if (prevAllowance < _amount) {\r\n            if (prevAllowance != 0) {\r\n                _token.approve(address(uniswap), 0);\r\n            }\r\n\r\n            _token.approve(address(uniswap), uint(-1));\r\n        }\r\n\r\n        // Execute the trade\r\n        if (_dest != address(this)) {\r\n            return uniswap.tokenToEthTransferInput(_amount, 1, never, _dest);\r\n        } else {\r\n            return uniswap.tokenToEthSwapInput(_amount, 1, never);\r\n        }\r\n    }\r\n\r\n    function _pullOrder(\r\n        IERC20 _fromToken,\r\n        bytes32 _key\r\n    ) private returns (uint256 amount) {\r\n        if (address(_fromToken) == ETH_ADDRESS) {\r\n            amount = ethDeposits[_key];\r\n            ethDeposits[_key] = 0;\r\n        } else {\r\n            amount = _key.executeVault(_fromToken, address(this));\r\n        }\r\n    }\r\n\r\n    function _keyOf(\r\n        IERC20 _fromToken,\r\n        IERC20 _toToken,\r\n        uint256 _minReturn,\r\n        uint256 _fee,\r\n        address payable _owner,\r\n        bytes32 _salt\r\n    ) private pure returns (bytes32) {\r\n        return keccak256(\r\n            abi.encode(\r\n                _fromToken,\r\n                _toToken,\r\n                _minReturn,\r\n                _fee,\r\n                _owner,\r\n                _salt\r\n            )\r\n        );\r\n    }\r\n}\r\n\r\ncontract UniswapEXProt {\r\n    UniswapEX public uniswapEx;\r\n\r\n    constructor(UniswapEX _uniswapEx) public {\r\n        uniswapEx = _uniswapEx;\r\n    }\r\n\r\n    function getChecksum(\r\n        address payable _owner,\r\n        bytes32 _salt,\r\n        address _relayer\r\n    ) external pure returns (bytes32) {\r\n        return keccak256(\r\n            abi.encodePacked(\r\n                _salt,\r\n                _owner,\r\n                _relayer\r\n            )\r\n        );\r\n    }\r\n\r\n    function executeOrder(\r\n        IERC20 _fromToken,\r\n        IERC20 _toToken,\r\n        uint256 _minReturn,\r\n        uint256 _fee,\r\n        address payable _owner,\r\n        bytes32 _salt,\r\n        bytes32 _checksum\r\n    ) external {\r\n        bytes32 h = keccak256(\r\n            abi.encodePacked(\r\n                _salt,\r\n                _owner,\r\n                msg.sender\r\n            )\r\n        );\r\n\r\n        if (block.gaslimit < gasleft() && tx.gasprice != 0) {\r\n            require(h == _checksum, \"invalid checksum\");\r\n        }\r\n\r\n        uniswapEx.executeOrder(\r\n            _fromToken,\r\n            _toToken,\r\n            _minReturn,\r\n            _fee,\r\n            _owner,\r\n            _salt\r\n        );\r\n        \r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n\r\n    function () external payable { }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_checksum\",\"type\":\"bytes32\"}],\"name\":\"executeOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"}],\"name\":\"getChecksum\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniswapEx\",\"outputs\":[{\"internalType\":\"contract UniswapEX\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract UniswapEX\",\"name\":\"_uniswapEx\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"UniswapEXProt","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c176b7afa76d57a3fa7050442f4fe7f1b9755d0a","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://aecd9bc466ff00e4b565dadfe9f262ef143ac47e43b636625ae173fc521cd5c5"}]}