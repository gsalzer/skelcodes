{"status":"1","message":"OK","result":[{"SourceCode":"/**\n\nDeployed by Ren Project, https://renproject.io\n\nCommit hash: d0a3a36\nRepository: https://github.com/renproject/darknode-sol\nIssues: https://github.com/renproject/darknode-sol/issues\n\nLicenses\nopenzeppelin-solidity: (MIT) https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/LICENSE\ndarknode-sol: (GNU GPL V3) https://github.com/renproject/darknode-sol/blob/master/LICENSE\n\n*/\n\npragma solidity ^0.5.12;\n\n\ncontract Context {\n    \n    \n    constructor () internal { }\n    \n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; \n        return msg.data;\n    }\n}\n\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    \n    constructor () internal {\n        _owner = _msgSender();\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    \n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    \n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    \n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    \n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    \n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    \n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\nlibrary SafeMath {\n    \n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    \n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    \n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    \n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        \n        \n        \n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    \n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    \n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        \n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        \n\n        return c;\n    }\n\n    \n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    \n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\ncontract Claimable {\n    address private _pendingOwner;\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    \n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    \n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    \n    modifier onlyOwner() {\n        require(isOwner(), \"Claimable: caller is not the owner\");\n        _;\n    }\n\n    \n    modifier onlyPendingOwner() {\n      require(msg.sender == _pendingOwner, \"Claimable: caller is not the pending owner\");\n      _;\n    }\n\n    \n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    \n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    \n    function transferOwnership(address newOwner) public onlyOwner {\n      _pendingOwner = newOwner;\n    }\n\n    \n    function claimOwnership() public onlyPendingOwner {\n      emit OwnershipTransferred(_owner, _pendingOwner);\n      _owner = _pendingOwner;\n      _pendingOwner = address(0);\n    }\n}\n\ninterface IERC20 {\n    \n    function totalSupply() external view returns (uint256);\n\n    \n    function balanceOf(address account) external view returns (uint256);\n\n    \n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    \n    function allowance(address owner, address spender) external view returns (uint256);\n\n    \n    function approve(address spender, uint256 amount) external returns (bool);\n\n    \n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    \n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    \n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    \n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    \n    function transfer(address recipient, uint256 amount) public returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    \n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    \n    function approve(address spender, uint256 amount) public returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    \n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    \n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    \n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    \n    function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    \n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n     \n    function _burn(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    \n    function _approve(address owner, address spender, uint256 amount) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    \n    function _burnFrom(address account, uint256 amount) internal {\n        _burn(account, amount);\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\n    }\n}\n\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    \n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    \n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    \n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    \n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\ncontract ERC20Shifted is ERC20, ERC20Detailed, Claimable {\n\n    \n    constructor(string memory _name, string memory _symbol, uint8 _decimals) public ERC20Detailed(_name, _symbol, _decimals) {}\n\n    \n    \n    function recoverTokens(address _token) external onlyOwner {\n        if (_token == address(0x0)) {\n            msg.sender.transfer(address(this).balance);\n        } else {\n            ERC20(_token).transfer(msg.sender, ERC20(_token).balanceOf(address(this)));\n        }\n    }\n\n    function burn(address _from, uint256 _amount) public onlyOwner {\n        _burn(_from, _amount);\n    }\n\n    function mint(address _to, uint256 _amount) public onlyOwner {\n        _mint(_to, _amount);\n    }\n}\n\ncontract zBTC is ERC20Shifted(\"Shifted BTC\", \"zBTC\", 8) {}\n\ncontract zZEC is ERC20Shifted(\"Shifted ZEC\", \"zZEC\", 8) {}\n\ncontract zBCH is ERC20Shifted(\"Shifted BCH\", \"zBCH\", 8) {}\n\nlibrary LinkedList {\n\n    \n    address public constant NULL = address(0);\n\n    \n    struct Node {\n        bool inList;\n        address previous;\n        address next;\n    }\n\n    \n    struct List {\n        mapping (address => Node) list;\n    }\n\n    \n    function insertBefore(List storage self, address target, address newNode) internal {\n        require(!isInList(self, newNode), \"LinkedList: already in list\");\n        require(isInList(self, target) || target == NULL, \"LinkedList: not in list\");\n\n        \n        address prev = self.list[target].previous;\n\n        self.list[newNode].next = target;\n        self.list[newNode].previous = prev;\n        self.list[target].previous = newNode;\n        self.list[prev].next = newNode;\n\n        self.list[newNode].inList = true;\n    }\n\n    \n    function insertAfter(List storage self, address target, address newNode) internal {\n        require(!isInList(self, newNode), \"LinkedList: already in list\");\n        require(isInList(self, target) || target == NULL, \"LinkedList: not in list\");\n\n        \n        address n = self.list[target].next;\n\n        self.list[newNode].previous = target;\n        self.list[newNode].next = n;\n        self.list[target].next = newNode;\n        self.list[n].previous = newNode;\n\n        self.list[newNode].inList = true;\n    }\n\n    \n    function remove(List storage self, address node) internal {\n        require(isInList(self, node), \"LinkedList: not in list\");\n        if (node == NULL) {\n            return;\n        }\n        address p = self.list[node].previous;\n        address n = self.list[node].next;\n\n        self.list[p].next = n;\n        self.list[n].previous = p;\n\n        \n        \n        self.list[node].inList = false;\n        delete self.list[node];\n    }\n\n    \n    function prepend(List storage self, address node) internal {\n        \n\n        insertBefore(self, begin(self), node);\n    }\n\n    \n    function append(List storage self, address node) internal {\n        \n\n        insertAfter(self, end(self), node);\n    }\n\n    function swap(List storage self, address left, address right) internal {\n        \n\n        address previousRight = self.list[right].previous;\n        remove(self, right);\n        insertAfter(self, left, right);\n        remove(self, left);\n        insertAfter(self, previousRight, left);\n    }\n\n    function isInList(List storage self, address node) internal view returns (bool) {\n        return self.list[node].inList;\n    }\n\n    \n    function begin(List storage self) internal view returns (address) {\n        return self.list[NULL].next;\n    }\n\n    \n    function end(List storage self) internal view returns (address) {\n        return self.list[NULL].previous;\n    }\n\n    function next(List storage self, address node) internal view returns (address) {\n        require(isInList(self, node), \"LinkedList: not in list\");\n        return self.list[node].next;\n    }\n\n    function previous(List storage self, address node) internal view returns (address) {\n        require(isInList(self, node), \"LinkedList: not in list\");\n        return self.list[node].previous;\n    }\n\n}\n\ninterface IShifter {\n    function shiftIn(bytes32 _pHash, uint256 _amount, bytes32 _nHash, bytes calldata _sig) external returns (uint256);\n    function shiftOut(bytes calldata _to, uint256 _amount) external returns (uint256);\n    function shiftInFee() external view returns (uint256);\n    function shiftOutFee() external view returns (uint256);\n}\n\ncontract ShifterRegistry is Claimable {\n\n    \n    \n    event LogShifterRegistered(string _symbol, string indexed _indexedSymbol, address indexed _tokenAddress, address indexed _shifterAddress);\n    event LogShifterDeregistered(string _symbol, string indexed _indexedSymbol, address indexed _tokenAddress, address indexed _shifterAddress);\n    event LogShifterUpdated(address indexed _tokenAddress, address indexed _currentShifterAddress, address indexed _newShifterAddress);\n\n    \n    uint256 numShifters = 0;\n\n    \n    LinkedList.List private shifterList;\n\n    \n    LinkedList.List private shiftedTokenList;\n\n    \n    mapping (address=>address) private shifterByToken;\n\n    \n    mapping (string=>address) private tokenBySymbol;\n\n    \n    \n    function recoverTokens(address _token) external onlyOwner {\n        if (_token == address(0x0)) {\n            msg.sender.transfer(address(this).balance);\n        } else {\n            ERC20(_token).transfer(msg.sender, ERC20(_token).balanceOf(address(this)));\n        }\n    }\n\n    \n    \n    \n    \n    \n    function setShifter(address _tokenAddress, address _shifterAddress) external onlyOwner {\n        \n        require(!LinkedList.isInList(shifterList, _shifterAddress), \"ShifterRegistry: shifter already registered\");\n        require(shifterByToken[_tokenAddress] == address(0x0), \"ShifterRegistry: token already registered\");\n        string memory symbol = ERC20Shifted(_tokenAddress).symbol();\n        require(tokenBySymbol[symbol] == address(0x0), \"ShifterRegistry: symbol already registered\");\n\n        \n        LinkedList.append(shifterList, _shifterAddress);\n\n        \n        LinkedList.append(shiftedTokenList, _tokenAddress);\n\n        tokenBySymbol[symbol] = _tokenAddress;\n        shifterByToken[_tokenAddress] = _shifterAddress;\n        numShifters += 1;\n\n        emit LogShifterRegistered(symbol, symbol, _tokenAddress, _shifterAddress);\n    }\n\n    \n    \n    \n    \n    \n    function updateShifter(address _tokenAddress, address _newShifterAddress) external onlyOwner {\n        \n        address currentShifter = shifterByToken[_tokenAddress];\n        require(shifterByToken[_tokenAddress] != address(0x0), \"ShifterRegistry: token not registered\");\n\n        \n        LinkedList.remove(shifterList, currentShifter);\n\n        \n        LinkedList.append(shifterList, _newShifterAddress);\n\n        shifterByToken[_tokenAddress] = _newShifterAddress;\n\n        emit LogShifterUpdated(_tokenAddress, currentShifter, _newShifterAddress);\n    }\n\n    \n    \n    \n    \n    function removeShifter(string calldata _symbol) external onlyOwner {\n        \n        address tokenAddress = tokenBySymbol[_symbol];\n        require(tokenAddress != address(0x0), \"ShifterRegistry: symbol not registered\");\n\n        \n        address shifterAddress = shifterByToken[tokenAddress];\n\n        \n        shifterByToken[tokenAddress] = address(0x0);\n        tokenBySymbol[_symbol] = address(0x0);\n        LinkedList.remove(shifterList, shifterAddress);\n        LinkedList.remove(shiftedTokenList, tokenAddress);\n        numShifters -= 1;\n\n        emit LogShifterDeregistered(_symbol, _symbol, tokenAddress, shifterAddress);\n    }\n\n    \n    function getShifters(address _start, uint256 _count) external view returns (address[] memory) {\n        uint256 count;\n        if (_count == 0) {\n            count = numShifters;\n        } else {\n            count = _count;\n        }\n\n        address[] memory shifters = new address[](count);\n\n        \n        uint256 n = 0;\n        address next = _start;\n        if (next == address(0)) {\n            next = LinkedList.begin(shifterList);\n        }\n\n        while (n < count) {\n            if (next == address(0)) {\n                break;\n            }\n            shifters[n] = next;\n            next = LinkedList.next(shifterList, next);\n            n += 1;\n        }\n        return shifters;\n    }\n\n    \n    function getShiftedTokens(address _start, uint256 _count) external view returns (address[] memory) {\n        uint256 count;\n        if (_count == 0) {\n            count = numShifters;\n        } else {\n            count = _count;\n        }\n\n        address[] memory shiftedTokens = new address[](count);\n\n        \n        uint256 n = 0;\n        address next = _start;\n        if (next == address(0)) {\n            next = LinkedList.begin(shiftedTokenList);\n        }\n\n        while (n < count) {\n            if (next == address(0)) {\n                break;\n            }\n            shiftedTokens[n] = next;\n            next = LinkedList.next(shiftedTokenList, next);\n            n += 1;\n        }\n        return shiftedTokens;\n    }\n\n    \n    \n    \n    \n    function getShifterByToken(address _tokenAddress) external view returns (IShifter) {\n        return IShifter(shifterByToken[_tokenAddress]);\n    }\n\n    \n    \n    \n    \n    function getShifterBySymbol(string calldata _tokenSymbol) external view returns (IShifter) {\n        return IShifter(shifterByToken[tokenBySymbol[_tokenSymbol]]);\n    }\n\n    \n    \n    \n    \n    function getTokenBySymbol(string calldata _tokenSymbol) external view returns (address) {\n        return tokenBySymbol[_tokenSymbol];\n    }\n}\n\nlibrary Compare {\n\n    function bytesEqual(bytes memory a, bytes memory b) internal pure returns (bool) {\n        if (a.length != b.length) {\n            return false;\n        }\n        for (uint i = 0; i < a.length; i ++) {\n            if (a[i] != b[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\ncontract Puzzle is Ownable {\n    using SafeMath for uint256;\n\n    bytes public secretHash;     \n    uint256 public rewardAmount; \n    string public tokenSymbol;   \n    bool public rewardClaimed;   \n\n    uint256 public maxGasPrice;  \n\n    ShifterRegistry public registry;\n\n    modifier onlyNotFrontRunning() {\n        require(tx.gasprice <= maxGasPrice, \"gas price is too high\");\n        _;\n    }\n\n    event LogRewardClaimed(bytes _rewardAddress, bytes _secret, uint256 _rewardAmount);\n\n    \n    \n    \n    constructor(\n        ShifterRegistry _registry,\n        string memory _tokenSymbol,\n        bytes memory _secretHash,\n        uint256 _maxGasPrice\n    ) public {\n        registry = _registry;\n        tokenSymbol = _tokenSymbol;\n        secretHash = _secretHash;\n        maxGasPrice = _maxGasPrice;\n    }\n\n    \n    \n    \n    \n    function fund(\n        \n        uint256      _amount,\n        bytes32      _nHash,\n        bytes memory _sig\n    ) public {\n        require(_amount > 0, \"amount must be greater than 0\");\n        uint256 transferAmount = registry.getShifterBySymbol(tokenSymbol).shiftIn(0x0, _amount, _nHash, _sig);\n        rewardAmount = rewardAmount.add(transferAmount);\n    }\n\n    \n    \n    \n    \n    function shiftOut(bytes calldata _address, uint256 _amount) external onlyOwner {\n        registry.getShifterBySymbol(tokenSymbol).shiftOut(_address, _amount);\n        rewardAmount = rewardAmount.sub(_amount);\n    }\n\n    \n    \n    \n    \n    \n    \n    function validateSecret(bytes memory _secret) public view returns (bool) {\n        bytes memory h = abi.encodePacked(sha256(_secretMessage(_secret)));\n        return Compare.bytesEqual(h, secretHash);\n    }\n\n    function _secretMessage(bytes memory _secret) internal pure returns (bytes memory) {\n        return abi.encodePacked(\n            \"Secret(\", string(_secret),\n            \")\"\n        );\n    }\n\n}\n\ncontract SimplePuzzle is Puzzle {\n    \n    \n    \n    \n    constructor(\n        ShifterRegistry _registry,\n        string memory _tokenSymbol,\n        bytes memory _secretHash,\n        uint256 _maxGasPrice\n    ) public Puzzle(\n        _registry,\n        _tokenSymbol,\n        _secretHash,\n        _maxGasPrice\n    ) {}\n\n    \n    \n    \n    function claimReward(bytes memory _rewardAddress, bytes memory _secret) public onlyNotFrontRunning {\n        require(!rewardClaimed, \"reward already claimed\");\n        require(validateSecret(_secret), \"invalid secret\");\n        rewardClaimed = true;\n        \n        registry.getShifterBySymbol(tokenSymbol).shiftOut(_rewardAddress, rewardAmount);\n\n        emit LogRewardClaimed(_rewardAddress, _secret, rewardAmount);\n\n        \n        rewardAmount = 0;\n    }\n}\n\ncontract BTCPuzzle is SimplePuzzle {\n    constructor(\n        ShifterRegistry _registry,\n        string memory _tokenSymbol,\n        bytes memory _secretHash,\n        uint256 _maxGasPrice\n    ) public SimplePuzzle(\n        _registry,\n        _tokenSymbol,\n        _secretHash,\n        _maxGasPrice\n    ) {}\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ShifterRegistry\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_secretHash\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_maxGasPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_rewardAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_secret\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"}],\"name\":\"LogRewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_rewardAddress\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_secret\",\"type\":\"bytes\"}],\"name\":\"claimReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_nHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"fund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxGasPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract ShifterRegistry\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secretHash\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_address\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"shiftOut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_secret\",\"type\":\"bytes\"}],\"name\":\"validateSecret\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BTCPuzzle","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005d9bf2bad3dd710e4d533681ed16ed1cfeac9e6f000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000004e3b2920000000000000000000000000000000000000000000000000000000000000000047a4254430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000207e243e74517e58bfe445d87e2a105d40b9924e56e8675679c812695544a21cf6","Library":"","LicenseType":"","SwarmSource":"bzzr://04f37103b90a54dee8dab0e183436195e35b4669cef8404c2e6c2ddc4b2caf2c"}]}