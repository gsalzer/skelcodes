{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2018-02-01\r\n*/\r\n\r\n/*\r\n *  The CoinPoker Token contract complies with the ERC20 standard (see https://github.com/ethereum/EIPs/issues/20).\r\n *  All tokens not being sold during the crowdsale but the reserved token\r\n *  for tournaments future financing are burned.\r\n *  Author: Justas Kregzde\r\n */\r\n \r\npragma solidity ^0.4.19;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint a, uint b) internal returns (uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint a, uint b) internal returns (uint) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint a, uint b) internal returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint a, uint b) internal returns (uint) {\r\n        uint c = a + b;\r\n        assert(c>=a && c>=b);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract CoinPokerToken {\r\n    using SafeMath for uint;\r\n    // Public variables of the token\r\n    string constant public standard = \"ERC20\";\r\n    string constant public name = \"Poker Chips\";\r\n    string constant public symbol = \"CHP\";\r\n    uint8 constant public decimals = 18;\r\n    uint _totalSupply = 500000000e18; // Total supply of 500 Million CoinPoker Tokens\r\n    uint constant public tokensPreICO = 100000000e18; // 20% for pre-ICO\r\n    uint constant public tokensICO = 275000000e18; // 55% for ICO\r\n    uint constant public teamReserve = 50000000e18; // 10% for team/advisors/exchanges\r\n    uint constant public tournamentsReserve = 75000000e18; // 15% for tournaments, released by percentage of total tokens sale\r\n    uint public startTime = 1516960800; // Time after ICO, when tokens may be transferred. Friday, 26 January 2018 10:00:00 GMT\r\n    address public ownerAddr;\r\n    address public preIcoAddr; // pre-ICO token holder\r\n    address public tournamentsAddr; // tokens for tournaments\r\n    address public cashierAddr; // CoinPoker main cashier/game wallet\r\n    bool burned;\r\n\r\n    // Array with all balances\r\n    mapping (address => uint) balances;\r\n    mapping (address => mapping (address => uint)) allowed;\r\n\r\n    // Public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed _owner, address indexed spender, uint value);\r\n    event Burned(uint amount);\r\n\r\n    // What is the balance of a particular account?\r\n    function balanceOf(address _owner) constant returns (uint balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    // Returns the amount which _spender is still allowed to withdraw from _owner\r\n    function allowance(address _owner, address _spender) constant returns (uint remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    // Get the total token supply\r\n    function totalSupply() constant returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    //  Initializes contract with initial supply tokens to the creator of the contract\r\n    function CoinPokerToken(address _ownerAddr, address _preIcoAddr, address _tournamentsAddr, address _cashierAddr) {\r\n        ownerAddr = _ownerAddr;\r\n        preIcoAddr = _preIcoAddr;\r\n        tournamentsAddr = _tournamentsAddr;\r\n        cashierAddr = _cashierAddr;\r\n        balances[ownerAddr] = _totalSupply; // Give the owner all initial tokens\r\n    }\r\n\r\n    //  Send some of your tokens to a given address\r\n    function transfer(address _to, uint _value) returns(bool) {\r\n        if (now < startTime)  // Check if the crowdsale is already over\r\n            require(_to == cashierAddr); // allow only to transfer CHP (make a deposit) to game/cashier wallet\r\n        balances[msg.sender] = balances[msg.sender].sub(_value); // Subtract from the sender\r\n        balances[_to] = balances[_to].add(_value); // Add the same to the recipient\r\n        Transfer(msg.sender, _to, _value); // Notify anyone listening that this transfer took place\r\n        return true;\r\n    }\r\n\r\n    //  A contract or person attempts to get the tokens of somebody else.\r\n    //  This is only allowed if the token holder approved.\r\n    function transferFrom(address _from, address _to, uint _value) returns(bool) {\r\n        if (now < startTime)  // Check if the crowdsale is already over\r\n            require(_from == ownerAddr || _to == cashierAddr);\r\n        var _allowed = allowed[_from][msg.sender];\r\n        balances[_from] = balances[_from].sub(_value); // Subtract from the sender\r\n        balances[_to] = balances[_to].add(_value); // Add the same to the recipient\r\n        allowed[_from][msg.sender] = _allowed.sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\t\r\n    //   Approve the passed address to spend the specified amount of tokens\r\n    //   on behalf of msg.sender.\r\n    function approve(address _spender, uint _value) returns (bool) {\r\n        //https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function percent(uint numerator, uint denominator, uint precision) public constant returns(uint quotient) {\r\n        uint _numerator = numerator.mul(10 ** (precision.add(1)));\r\n        uint _quotient =  _numerator.div(denominator).add(5).div(10);\r\n        return (_quotient);\r\n    }\r\n\r\n    //  Called when ICO is closed. Burns the remaining tokens except the tokens reserved:\r\n    //  - for tournaments (released by percentage of total token sale, max 75'000'000)\r\n    //  - for pre-ICO (100'000'000)\r\n    //  - for team/advisors/exchanges (50'000'000).\r\n    //  Anybody may burn the tokens after ICO ended, but only once (in case the owner holds more tokens in the future).\r\n    //  this ensures that the owner will not posses a majority of the tokens.\r\n    function burn() {\r\n        // If tokens have not been burned already and the crowdsale ended\r\n        if (!burned && now > startTime) {\r\n            // Calculate tournament release amount (tournament_reserve * proportion_how_many_sold)\r\n            uint total_sold = _totalSupply.sub(balances[ownerAddr]);\r\n            total_sold = total_sold.add(tokensPreICO);\r\n            uint total_ico_amount = tokensPreICO.add(tokensICO);\r\n            uint percentage = percent(total_sold, total_ico_amount, 8);\r\n            uint tournamentsAmount = tournamentsReserve.mul(percentage).div(100000000);\r\n\r\n            // Calculate what's left\r\n            uint totalReserve = teamReserve.add(tokensPreICO);\r\n            totalReserve = totalReserve.add(tournamentsAmount);\r\n            uint difference = balances[ownerAddr].sub(totalReserve);\r\n\r\n            // Distribute tokens\r\n            balances[preIcoAddr] = balances[preIcoAddr].add(tokensPreICO);\r\n            balances[tournamentsAddr] = balances[tournamentsAddr].add(tournamentsAmount);\r\n            balances[ownerAddr] = teamReserve;\r\n\r\n            // Burn what's left\r\n            _totalSupply = _totalSupply.sub(difference);\r\n            burned = true;\r\n            Burned(difference);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"numerator\",\"type\":\"uint256\"},{\"name\":\"denominator\",\"type\":\"uint256\"},{\"name\":\"precision\",\"type\":\"uint256\"}],\"name\":\"percent\",\"outputs\":[{\"name\":\"quotient\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tournamentsReserve\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamReserve\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cashierAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preIcoAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tournamentsAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ownerAddr\",\"type\":\"address\"},{\"name\":\"_preIcoAddr\",\"type\":\"address\"},{\"name\":\"_tournamentsAddr\",\"type\":\"address\"},{\"name\":\"_cashierAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"}]","ContractName":"CoinPokerToken","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001c5ba31a004e8fc0852eeed0aa663fe9752b2bcd0000000000000000000000001c5ba31a004e8fc0852eeed0aa663fe9752b2bcd000000000000000000000000faa68ee0df6bc5e6a2174e7df2ec252931302e600000000000000000000000001c5ba31a004e8fc0852eeed0aa663fe9752b2bcd","Library":"","LicenseType":"None","SwarmSource":"bzzr://3afddce9478af134606ee4173424b1d711fec03a2b7e74b2a5ceab140d56ca37"}]}