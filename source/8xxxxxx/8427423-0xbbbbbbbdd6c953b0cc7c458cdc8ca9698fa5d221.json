{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n// HotBlock.io - Double Your Ether On Every HotBlock!\r\n//\r\n// Ethereum network generates a block every 15 seconds.\r\n// Any future block has a 50% chance to become hot and double your bet.\r\n//\r\n// Provably fair bets on ethereum blocks (Ver 1.0)\r\n// Every ethereum block has an unpredictable hash which is used by our random generation algorithm\r\n// to reveal hot blocks, so miners, players and hotblock.io canâ€™t tamper with the results.\r\n//\r\n// Refer to https://hotblock.io/whitepaper.pdf for detailed description and proofs.\r\n\r\ncontract HotBlock {\r\n  uint constant public MIN_COMMISSION = 0.0003 ether;\r\n  uint constant public COMMISSION_MULTIPLIER = 1000;\r\n\r\n  address public owner;\r\n  address public nextOwner;\r\n  address public revealer;\r\n\r\n  uint public betMin;\r\n  uint public betMax;\r\n\r\n  uint public commission;\r\n  uint public minCommission;\r\n  uint public commissionFunds;\r\n\r\n  uint public maxBetsPerBlock;\r\n\r\n  struct Bet {\r\n    address payable addr;\r\n    uint amount;\r\n    uint commission;\r\n  }\r\n\r\n  mapping(uint => Bet[]) public blockBets;\r\n  mapping(uint => bytes) public blockSignatures;\r\n\r\n  uint public lockedFunds;\r\n\r\n  event PaymentSuccess(address indexed _addr, uint _amount);\r\n  event PaymentFailure(address indexed _addr, uint _amount);\r\n  event BetPlaced(address indexed _addr, uint[] _blocks, uint[] _commissions);\r\n  event BlockRevealed(uint indexed _block, bool _lucky, uint _length, uint _remaining);\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, \"NOT_AN_OWNER\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyRevealer() {\r\n    require(msg.sender == revealer, \"NOT_A_REVEALER\");\r\n    _;\r\n  }\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n    betMin = 0.05 ether;\r\n    betMax = 5 ether;\r\n\r\n    commission = 1;\r\n    maxBetsPerBlock = 20;\r\n  }\r\n\r\n  function() external payable onlyOwner {}\r\n\r\n  function placeBet(uint[] memory _blocks, uint[] memory _bets) public payable {\r\n    require(betMin > 0 && betMax > 0, \"STOPPED\");\r\n    require(msg.value > 0, \"BET_NULL\");\r\n    require(_blocks.length > 0 && _blocks.length == _bets.length, \"BLOCKS_BETS_NOT_EQUAL\");\r\n\r\n    uint betAmount = msg.value;\r\n    uint[] memory _commissions = new uint[](_bets.length);\r\n\r\n    for (uint i = 0; i < _blocks.length; i++) {\r\n      uint blockNumber = _blocks[i];\r\n      uint _bet = _bets[i];\r\n\r\n      if (blockNumber > block.number && _bet <= betAmount && (betAmount >= betMin && betAmount <= betMax)) {\r\n        Bet[] storage bets = blockBets[blockNumber];\r\n\r\n        if (bets.length > maxBetsPerBlock) {\r\n          continue;\r\n        }\r\n\r\n        bool betBefore = false;\r\n        for (uint j = 0; j < bets.length; j++) {\r\n          if (bets[j].addr == msg.sender) {\r\n            betBefore = true;\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (!betBefore) {\r\n          uint winAmount = getWinAmount(_bet);\r\n          uint betCommission = getCommissionAmount(winAmount);\r\n\r\n          bets.push(Bet({ addr: msg.sender, amount: winAmount, commission: betCommission }));\r\n          _commissions[i] = betCommission;\r\n          betAmount -= _bet;\r\n          continue;\r\n        }\r\n      }\r\n\r\n      _blocks[i] = 0;\r\n    }\r\n\r\n    uint toBet = msg.value - betAmount;\r\n    if (betAmount > 0) {\r\n      msg.sender.transfer(betAmount);\r\n    }\r\n\r\n    lockedFunds += getWinAmount(toBet);\r\n\r\n    emit BetPlaced(msg.sender, _blocks, _commissions);\r\n  }\r\n\r\n  function revealBlock(uint _blockNumber, bytes memory signature, uint limit) public onlyRevealer {\r\n    require(_blockNumber < block.number && _blockNumber >= (block.number - 256), \"INVALID_BLOCK_NUMBER\");\r\n    require(ecdsaRecover(toEthSignedMessageHash(blockhash(_blockNumber)), signature) == msg.sender, \"INVALID_REVEAL_SIGNATURE\");\r\n\r\n    bool lucky = uint8(signature[signature.length - 1]) & 0x01 != 1;\r\n    uint processed = 0;\r\n\r\n    Bet[] storage bets = blockBets[_blockNumber];\r\n    for (uint i = 0; i < bets.length; i++) {\r\n      Bet storage bet = bets[i];\r\n\r\n      if (processed == limit) {\r\n          break;\r\n      }\r\n      processed++;\r\n\r\n      if (bet.amount > 0) {\r\n        uint winAmount = bet.amount - bet.commission;\r\n\r\n        if (lucky) {\r\n          if (bet.addr.send(winAmount)) {\r\n            emit PaymentSuccess(bet.addr, winAmount);\r\n          } else {\r\n            emit PaymentFailure(bet.addr, winAmount);\r\n            continue;\r\n          }\r\n\r\n          commissionFunds += bet.commission;\r\n        }\r\n\r\n        lockedFunds -= bet.amount;\r\n        bet.amount = 0;\r\n        bet.commission = 0;\r\n      }\r\n    }\r\n\r\n    if (blockSignatures[_blockNumber].length == 0) {\r\n      blockSignatures[_blockNumber] = signature;\r\n    }\r\n\r\n    emit BlockRevealed(_blockNumber, lucky, bets.length, bets.length - processed);\r\n  }\r\n\r\n  function refundBlock(uint _blockNumber, uint limit) public {\r\n    require(_blockNumber < (block.number - 256), \"INVALID_BLOCK_NUMBER\");\r\n\r\n    Bet[] storage bets = blockBets[_blockNumber];\r\n    uint processed = 0;\r\n\r\n    for (uint i = 0; i < bets.length; i++) {\r\n      Bet storage bet = bets[i];\r\n\r\n      if (processed == limit) {\r\n          break;\r\n      }\r\n      processed++;\r\n\r\n      if (bet.amount > 0) {\r\n        uint winAmount = bet.amount - bet.commission;\r\n\r\n        if (address(this).balance >= winAmount) {\r\n          bet.addr.send(winAmount);\r\n\r\n          lockedFunds -= bet.amount;\r\n          commissionFunds += bet.commission;\r\n\r\n          bet.amount = 0;\r\n          bet.commission = 0;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function getWinAmount(uint _betAmount) public pure returns (uint) {\r\n    return _betAmount * 2;\r\n  }\r\n\r\n  function getCommissionAmount(uint winAmount) public view returns (uint) {\r\n    uint betCommission = 0;\r\n    if (commission > 0) {\r\n      betCommission = max(winAmount / COMMISSION_MULTIPLIER * commission, MIN_COMMISSION);\r\n    }\r\n\r\n    return betCommission;\r\n  }\r\n\r\n  function transferOwnership(address _nextOwner) public onlyOwner {\r\n    nextOwner = _nextOwner;\r\n  }\r\n\r\n  function acceptOwnership() public {\r\n    require(msg.sender == nextOwner, \"NOT_A_NEXT_OWNER\");\r\n\r\n    owner = nextOwner;\r\n    nextOwner = address(0);\r\n  }\r\n\r\n  function setRevealer(address _revealer) public onlyOwner {\r\n    require(lockedFunds == 0, \"NOT_ALL_BETS_PROCESSED\");\r\n    revealer = _revealer;\r\n  }\r\n\r\n  function setBetRange(uint _min, uint _max) public onlyOwner {\r\n    require(_min > MIN_COMMISSION, \"MIN_BET_INVALID\");\r\n    betMin = _min;\r\n    betMax = _max;\r\n  }\r\n\r\n  function setMaxBetsPerBlock(uint _max) public onlyOwner {\r\n    maxBetsPerBlock = _max;\r\n  }\r\n\r\n  function setCommission(uint _commission) public onlyOwner {\r\n    require(_commission >= 0 && _commission <= (10 * COMMISSION_MULTIPLIER), \"COMMISSION_OUT_OF_RANGE\");\r\n    commission = _commission;\r\n  }\r\n\r\n  function withdrawCommission(uint amount) public onlyOwner {\r\n    uint withdrawAmount = amount;\r\n    if (amount == 0) {\r\n      withdrawAmount = commissionFunds;\r\n    }\r\n\r\n    require(commissionFunds > 0 && withdrawAmount <= commissionFunds, \"COMMISSION_NULL\");\r\n    msg.sender.transfer(withdrawAmount);\r\n    commissionFunds -= withdrawAmount;\r\n  }\r\n\r\n  function close() public onlyOwner {\r\n    require(lockedFunds == 0, \"NOT_ALL_BETS_PROCESSED\");\r\n    selfdestruct(msg.sender);\r\n  }\r\n\r\n  function ecdsaRecover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n      if (signature.length != 64) {\r\n          return (address(0));\r\n      }\r\n\r\n      bytes32 r;\r\n      bytes32 s;\r\n      uint8 v = 27;\r\n\r\n      assembly {\r\n          r := mload(add(signature, 0x20))\r\n          s := mload(add(signature, 0x40))\r\n      }\r\n\r\n      return ecrecover(hash, v, r, s);\r\n  }\r\n\r\n  function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n      return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n  }\r\n\r\n  function max(uint a, uint b) internal pure returns (uint) {\r\n      return a > b ? a : b;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_blockNumber\",\"type\":\"uint256\"},{\"name\":\"signature\",\"type\":\"bytes\"},{\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"revealBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"betMax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCommission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"revealer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMMISSION_MULTIPLIER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blockNumber\",\"type\":\"uint256\"},{\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"refundBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_commission\",\"type\":\"uint256\"}],\"name\":\"setCommission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blockSignatures\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBetsPerBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setMaxBetsPerBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blockBets\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"commission\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"winAmount\",\"type\":\"uint256\"}],\"name\":\"getCommissionAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_min\",\"type\":\"uint256\"},{\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setBetRange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"betMin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blocks\",\"type\":\"uint256[]\"},{\"name\":\"_bets\",\"type\":\"uint256[]\"}],\"name\":\"placeBet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_revealer\",\"type\":\"address\"}],\"name\":\"setRevealer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_COMMISSION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_betAmount\",\"type\":\"uint256\"}],\"name\":\"getWinAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commissionFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minCommission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nextOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"PaymentSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"PaymentFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_blocks\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"_commissions\",\"type\":\"uint256[]\"}],\"name\":\"BetPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_block\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_lucky\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_length\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_remaining\",\"type\":\"uint256\"}],\"name\":\"BlockRevealed\",\"type\":\"event\"}]","ContractName":"HotBlock","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8a0b0af18bcf2efbc2020d00614fdb80fd76f7468aaef48633f7b85958cedd6e"}]}