{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.11;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow checks.\r\n */\r\nlibrary SafeMath256 {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, \"Ownable: [onlyOwner]\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0), \"Ownable: _newOwner illegal\");\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused, \"Pausable: not paused\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused, \"Pausable: paused\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyOwner whenNotPaused {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyOwner whenPaused {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/// CoinMiner\r\n/// Verison 1.0\r\n\r\n/// goken contract, enjoy yourself\r\ncontract CoinMiner is Ownable, ERC20Basic, Pausable {\r\n    using SafeMath256 for uint256;\r\n\r\n    string private _name = \"CoinMiner V1.1\";\r\n    string private _symbol = \"COM\";\r\n    uint8 private _decimals = 6;\r\n    uint256 private _totalSupply;\r\n    mapping(address => uint256) internal balances;\r\n    // whitelist trigger\r\n    uint256 private _WHITELIST_TRIGGER = 1024000000;\r\n\r\n    // inviter\r\n    mapping (address => address) private _referee;\r\n    mapping (address => address[]) private _referrals;\r\n    mapping (address => bool) private _register;\r\n    // whitelist count\r\n    uint256 private _whitelistCounter = 0;\r\n\r\n    // level hierarchy\r\n    uint8[10] private WHITELIST_REWARDS = [\r\n        5, // level1\r\n        4, // level2\r\n        3, // level3\r\n        2, // level4\r\n        1 // level5\r\n    ];\r\n\r\n    // scale for ether to comï¼Œinit with 1 ether = 102400 COM\r\n    uint256 private _k1 = 1;\r\n    uint256 private _k2 = 9765625;\r\n\r\n    /// event list\r\n    event Donate(address indexed account, uint256 amount);\r\n    event Mint(address indexed to, uint256 amount);\r\n    event Burn(address indexed from, uint256 amount);\r\n    event JoinWhiteList(address indexed parent, address indexed child);\r\n\r\n    constructor() public {\r\n        _joinWhiteList(address(this), msg.sender);\r\n    }\r\n\r\n    /// donate\r\n    function () external payable whenNotPaused {\r\n        require(msg.value >= 1 ether, \"CoinMiner: must greater 1 ether\");\r\n\r\n        require(!(balanceOf(msg.sender) > 0), \"CoinMiner: balance is greater than zero\");\r\n        require(!isInWhiteList(msg.sender), \"CoinMiner: already whitelisted\");\r\n        require(!_register[msg.sender], \"CoinMiner: already register\");\r\n        uint256 award = 1024000000;\r\n        uint256 useEther = award.mul(_k2).div(_k1);\r\n        uint256 backEther = msg.value.sub(useEther);\r\n        // forbid user register\r\n        _register[msg.sender] = true;\r\n        // bakc to user\r\n        msg.sender.transfer(backEther);\r\n\r\n        _mint(msg.sender, award);\r\n    }\r\n\r\n    /// erc20 interface\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        if (_value == _WHITELIST_TRIGGER && isInWhiteList(_to) && !isInWhiteList(msg.sender)) {\r\n            // trigger\r\n            // join whitelist\r\n            _joinWhiteList(_to, msg.sender);\r\n            return _transfer(_to, _value);\r\n        } else {\r\n            // transfer\r\n            return _transfer(_to, _value);\r\n        }\r\n    }\r\n\r\n    /// check address in whitelist\r\n    function isInWhiteList(address account) private view returns(bool) {\r\n        return _referee[account] != address(0);\r\n    }\r\n\r\n    /// join white list\r\n    function _joinWhiteList(address parent, address child) private returns (bool) {\r\n        // bind address\r\n        _referee[child] = parent;\r\n        // level record\r\n        _referrals[parent].push(child);\r\n        // whitelist counter\r\n        _whitelistCounter = _whitelistCounter.add(1);\r\n        emit JoinWhiteList(parent, child);\r\n        return true;\r\n    }\r\n\r\n    /// move tokens\r\n    function _move(address from, address to, uint256 value) private {\r\n        require(value <= balances[from], \"CoinMiner: [_move] balance not enough\");\r\n        require(to != address(0), \"CoinMiner: [_move] balance not enough\");\r\n\r\n        balances[from] = balances[from].sub(value);\r\n        balances[to] = balances[to].add(value);\r\n    }\r\n\r\n    /// transfer token\r\n    function _transfer(address to, uint256 value) private returns (bool) {\r\n        _move(msg.sender, to, value);\r\n        emit Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /// mint\r\n    function _mint(address to, uint256 value) private {\r\n        _totalSupply = _totalSupply.add(value);\r\n        balances[to] = balances[to].add(value);\r\n        emit Mint(to, value);\r\n        emit Transfer(address(0), to, value);\r\n    }\r\n\r\n    /// burn\r\n    function _burn(address who, uint256 value) private {\r\n        require(value <= balances[who], \"CoinMiner: [_burn] value exceeds balance\");\r\n        balances[who] = balances[who].sub(value);\r\n        _totalSupply = _totalSupply.sub(value);\r\n        emit Burn(who, value);\r\n        emit Transfer(who, address(0), value);\r\n    }\r\n\r\n    /// burn\r\n    function burn(uint256 value) public {\r\n        _burn(msg.sender, value);\r\n    }\r\n\r\n    /// whitelist\r\n    function whitelistOf(address who) public view returns (address[] memory) {\r\n        return _referrals[who];\r\n    }\r\n\r\n    /// get address parent address\r\n    function parentOf(address who) public view returns(address) {\r\n        return _referee[who];\r\n    }\r\n\r\n    /// whitelist rewards\r\n    function whitelistRewards() public view returns(uint8[10] memory) {\r\n        return WHITELIST_REWARDS;\r\n    }\r\n\r\n    /// erc20 interface\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /// erc20 interface\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /// erc20 interface\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /// erc20 interface\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /// erc20 interface\r\n    function whitelistCounter() public view returns (uint256) {\r\n        return _whitelistCounter;\r\n    }\r\n\r\n    /// erc20 interface\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    // get scale\r\n    function getScale() public view returns (uint256, uint256) {\r\n        return (_k1, _k2);\r\n    }\r\n\r\n    /// withdraw\r\n    function withdrawEther(address payable recipient, uint256 amount) external onlyOwner {\r\n        require(recipient != address(0), \"CoinMiner: [WithdrawEther] recipient is the zero address\");\r\n\r\n        uint256 balance = address(this).balance;\r\n\r\n        require(balance >= amount, \"CoinMiner: [WithdrawEther] amount exceeds balance\");\r\n        recipient.transfer(amount);\r\n    }\r\n\r\n    /// mint token\r\n    function mint(address to, uint256 amount) external onlyOwner {\r\n        _mint(to, amount);\r\n    }\r\n\r\n    // burn\r\n    function burnByOwner(address who, uint256 value) external onlyOwner {\r\n        _burn(who, value);\r\n    }\r\n\r\n    // set scale\r\n    function setScale(uint256 k1, uint256 k2) external onlyOwner {\r\n        _k1 = k1;\r\n        _k2 = k2;\r\n    }\r\n}\r\n\r\n/// CoinMinerPublicSale\r\n/// Verison 1.0\r\n\r\ncontract CoinMinerPublicSale is Ownable {\r\n    using SafeMath256 for uint256;\r\n\r\n    string private _name = \"CoinMinerPublicSale V1.1\";\r\n\r\n    /// use to save miner info\r\n    struct Miner{\r\n        uint256 time;\r\n        uint256 etherAmount;\r\n        bool isExist;\r\n    }\r\n\r\n    /// CoinMiner\r\n    CoinMiner private _com;\r\n    // all miners\r\n    mapping(address => Miner) private _miners;\r\n    // award coefficient\r\n    uint256 _awardScale = 10;\r\n\r\n    /// bind com\r\n    constructor(CoinMiner com) public {\r\n        _com = com;\r\n    }\r\n\r\n    /// payable\r\n    function () external payable {\r\n        // address only join only once\r\n        if (msg.value == 0) {\r\n            // get mine\r\n            _getMine(msg.sender);\r\n        } else {\r\n            // craete miner\r\n            _createMiner(msg.sender, msg.value);\r\n            // dispath\r\n            _dispatch(msg.sender, msg.value);\r\n        }\r\n    }\r\n\r\n    /// create miner\r\n    function _createMiner(address who, uint256 etherValue) private {\r\n        require(!_miners[who].isExist, \"CoinMiner: you are already miner\");\r\n        // calculate token\r\n        uint256 comAmount = etherToCom(etherValue);\r\n        uint256 award = comAmount.mul(_awardScale).div(100);\r\n        _com.transfer(who, award);\r\n        // create miner\r\n        Miner memory miner = Miner(now, etherValue, true);\r\n        _miners[msg.sender] = miner;\r\n    }\r\n\r\n    /// dispatch ether\r\n    function _dispatch(address from, uint256 etherValue) private {\r\n        uint8[10] memory rewards = _com.whitelistRewards();\r\n        address pt = from;\r\n        for (uint8 i = 0; i < rewards.length; i++) {\r\n            pt = _com.parentOf(pt);\r\n            if (pt == address(0)) {\r\n                break;\r\n            }\r\n            uint256 vip = _com.whitelistOf(pt).length;\r\n            if (vip < i + 1) {\r\n                continue;\r\n            }\r\n            uint256 value = etherValue.mul(rewards[i]).div(100);\r\n            require(address(this).balance >= value, \"balance not enough\");\r\n            address payable recipient = address(uint160(pt));\r\n            recipient.transfer(value);\r\n        }\r\n    }\r\n\r\n    /// get mine\r\n    function _getMine(address  who) private {\r\n        require(_miners[who].isExist, \"CoinMiner: [_getAward] you are not a miner\");\r\n        Miner storage miner = _miners[msg.sender];\r\n        require(now > miner.time, \"CoinMiner: [_getAward] time is illegal, now less than taget time\");\r\n        uint256 timeDiff = now.sub(miner.time);\r\n        uint256 etherMine = 0;\r\n        uint256 comMine = 0;\r\n        if (timeDiff > 12 * 30 days) {\r\n            // greater 360 days, get 200% ether mine and 220% com\r\n            etherMine = miner.etherAmount.mul(2);\r\n            comMine = _etherToCom(miner.etherAmount).mul(11).div(5);\r\n        } else if(timeDiff > 6 * 30 days) {\r\n            // greater 180 days, get 150% mine\r\n            etherMine = miner.etherAmount.mul(3).div(2);\r\n            comMine = _etherToCom(miner.etherAmount).mul(3).div(2);\r\n        } else if (timeDiff > 3 * 30 days) {\r\n            // greater 90 days, get 100% mine\r\n            etherMine = miner.etherAmount;\r\n            comMine = _etherToCom(miner.etherAmount);\r\n        } else if (timeDiff > 1 * 30 days) {\r\n            // greater 30 days, get 60% ether mine and 60% com\r\n            etherMine = miner.etherAmount.mul(3).div(5);\r\n            comMine = _etherToCom(miner.etherAmount).mul(3).div(5);\r\n        } else {\r\n            // under 30 days, get 50% ether mine and 40% com\r\n            etherMine = miner.etherAmount.mul(1).div(2);\r\n            comMine = _etherToCom(miner.etherAmount).mul(2).div(5);\r\n        }\r\n        require(address(this).balance >= etherMine, \"CoinMiner: [_getMine] ether balance is not enough\");\r\n        require(_com.balanceOf(address(this)) >= comMine, \"CoinMiner: [_getMine] com balance is not enough\");\r\n        // exit mine\r\n        miner.isExist = false;\r\n        address payable recipient = address(uint160(who));\r\n        // retrun value\r\n        recipient.transfer(etherMine);\r\n        _com.transfer(who, comMine);\r\n    }\r\n\r\n    /// convert ether to com\r\n    function _etherToCom(uint256 amount) private view returns (uint256) {\r\n        (uint256 k1, uint256 k2) = _com.getScale();\r\n        return amount.mul(k1).div(k2);\r\n    }\r\n\r\n    /// convert com to ether\r\n    function _comToEther(uint256 amount) private view returns (uint256) {\r\n        (uint256 k1, uint256 k2) = _com.getScale();\r\n        return amount.mul(k2).div(k1);\r\n    }\r\n\r\n    /// show ether to com\r\n    function etherToCom(uint256 amount) public view returns (uint256) {\r\n        return _etherToCom(amount);\r\n    }\r\n\r\n    // show com to ether\r\n    function comToEther(uint256 amount) public view returns (uint256) {\r\n        return _comToEther(amount);\r\n    }\r\n\r\n    /// withdraw ether\r\n    function withdrawEther(address payable recipient, uint256 amount) external onlyOwner {\r\n        require(recipient != address(0), \"CoinMiner: [withdrawEther] recipient is the zero address\");\r\n\r\n        uint256 balance = address(this).balance;\r\n\r\n        require(balance >= amount, \"CoinMiner: [withdrawEther] exceeds balance\");\r\n        recipient.transfer(amount);\r\n    }\r\n\r\n    /// withdraw com token\r\n    function withdrawComToken(address payable recipient, uint256 amount) external onlyOwner {\r\n        require(recipient != address(0), \"CoinMiner: [withdrawEther] recipient is the zero address\");\r\n\r\n        uint256 balance = _com.balanceOf(address(this));\r\n\r\n        require(balance >= amount, \"CoinMiner: [withdrawcom] exceeds balance\");\r\n\r\n        _com.transfer(recipient, amount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnByOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"k1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"k2\",\"type\":\"uint256\"}],\"name\":\"setScale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistRewards\",\"outputs\":[{\"internalType\":\"uint8[10]\",\"name\":\"\",\"type\":\"uint8[10]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"whitelistOf\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getScale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"parentOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Donate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"parent\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"child\",\"type\":\"address\"}],\"name\":\"JoinWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CoinMiner","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://ee0bfcca5ba2fade913bdfdde3a2d2ca5ec3668b526046f11145aac564b9cc4c"}]}