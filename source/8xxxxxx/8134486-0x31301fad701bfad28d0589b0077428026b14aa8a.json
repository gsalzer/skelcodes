{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io \r\n*/\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\ncontract SafeMath {\r\n  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n        return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0, \"SafeMath: division by zero\");\r\n    uint256 c = a / b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a, \"SafeMath: subtraction overflow\");\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  function safeMod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0, \"SafeMath: modulo by zero\");\r\n\r\n    return a % b;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n    address public _owner;\r\n\r\n    /* The Ownable constructor sets the original `owner` of the contract to the sender account. */\r\n    constructor () public {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    /* Throws if called by any account other than the owner. */\r\n    modifier onlyOwner() {\r\n        if (msg.sender != _owner) {\r\n            revert(\"Error: sender is not same owner\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            _owner = newOwner;\r\n        }\r\n    }\r\n\r\n    /* Returns the address of the current owner. */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n}\r\n\r\n\r\ncontract StandardToken is SafeMath, Ownable{\r\n    uint256 public totalSupply;\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    mapping (address => bool) private deactivatedList;\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /* This notifies clients about the amount burnt */\r\n    event Burn(address indexed from, uint256 value);\r\n    \r\n    /* This notifies clients about the another contract to spend some tokens */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    modifier onlyActivatedList() {\r\n        require(deactivatedList[msg.sender] != true, \"Error: sender is in deactivatedList.\");\r\n        _;\r\n    }\r\n\r\n    function addDeactivatedList(address _deactivatedAccount) public onlyOwner {\r\n        deactivatedList[_deactivatedAccount] = true;\r\n    }\r\n\r\n    function getDeactivatedList(address _deactivatedAccount) public onlyOwner view returns(bool) {\r\n        return deactivatedList[_deactivatedAccount];\r\n    }\r\n\r\n    function removeDeactivatedList(address _deactivatedAccount) public onlyOwner {\r\n        deactivatedList[_deactivatedAccount] = false;\r\n    }\r\n\r\n    /* Send coins */\r\n    function transfer(address _to, uint256 _value) public onlyActivatedList returns (bool) {\r\n        require(_to != address(0x0), \"\");   // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(balanceOf[msg.sender] >= _value, \"\");\r\n        require(balanceOf[_to] + _value >= balanceOf[_to], \"\"); \r\n\r\n        if (balanceOf[msg.sender] >= _value && balanceOf[_to] + _value > balanceOf[_to]) {\r\n            balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);\r\n            balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);\r\n            emit Transfer(msg.sender, _to, _value);\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /* Allow another contract to spend some tokens in your behalf */\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /* This is an alternative to `approve` that can be used as a mitigation for problems*/\r\n    function increaseAllowance(address _spender, uint256 _value) public returns (bool) {\r\n        approve(_spender, SafeMath.safeAdd(allowance[msg.sender][_spender], _value));\r\n        return true;\r\n    }\r\n\r\n    /* This is an alternative to `approve` that can be used as a mitigation for problems*/\r\n    function decreaseAllowance(address _spender, uint256 _value) public returns (bool) {\r\n        approve(_spender, SafeMath.safeSub(allowance[msg.sender][_spender], _value));\r\n        return true;\r\n    }\r\n       \r\n    /* A contract attempts to get the coins */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_to != address(0x0), \"\");   // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_value <= balanceOf[_from]);\r\n        require(_value <= allowance[_from][msg.sender], \"TokenTransferFromError\");\r\n\r\n        require(msg.sender == _owner || deactivatedList[_from] != true, \"From is in deactivatedList\");\r\n\r\n        if (balanceOf[_from] >= _value && allowance[_from][msg.sender] >= _value && balanceOf[_to] + _value > balanceOf[_to]) {\r\n            balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);                           \r\n            // Subtract from the sender\r\n            balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                             \r\n            // Add the same to the recipient\r\n            allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);\r\n            emit Transfer(_from, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function burn() public pure {\r\n        require(false, \"This function is not supported\");\r\n    }\r\n\r\n    function withdrawEther() public pure {\r\n        require(false, \"This function is not supported\");\r\n    }\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    /* Modifier to make a function callable only when the contract is not paused. */\r\n    modifier whenNotPaused() {\r\n        if (paused) revert(\"Error: paused\");\r\n        _;\r\n    }\r\n\r\n    /* Modifier to make a function callable only when the contract is paused. */\r\n    modifier whenPaused() {\r\n        if (!paused) revert(\"Error: not paused\");\r\n        _;\r\n    }\r\n\r\n    /* Called by the owner to pause, triggers stopped state. */\r\n    function pause() public onlyOwner whenNotPaused returns (bool) {\r\n        paused = true;\r\n        emit Pause();\r\n        return true;\r\n    }\r\n\r\n    /* Called by the owner to unpause, returns to normal state */\r\n    function unpause() public onlyOwner whenPaused returns (bool) {\r\n        paused = false;\r\n        emit Unpause();\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n/* Pausable token. Simple ERC20 Token example, with pausable token creation*/\r\ncontract PausableToken is Pausable, StandardToken {\r\n    function transfer(address _to, uint _value) public whenNotPaused returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n}\r\n\r\ncontract PBToken is PausableToken{\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    //address public _owner;\r\n    string public version = \"1.1.1\";\r\n\r\n    mapping (address => uint256) public freezeOf;\r\n\r\n    /* This notifies clients about the amount frozen */\r\n    event Freeze(address indexed from, uint256 value);\r\n    \r\n    /* This notifies clients about the amount unfrozen */\r\n    event Unfreeze(address indexed from, uint256 value);\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    constructor (\r\n        uint256 initialSupply,\r\n        string memory tokenName,\r\n        uint8 decimalUnits,\r\n        string memory tokenSymbol\r\n    ) public {\r\n        totalSupply = initialSupply * 10 ** uint256(decimalUnits);                        // Update total supply\r\n        balanceOf[msg.sender] = totalSupply;              // Give the creator all initial tokens\r\n        name = tokenName;                                   // Set the name for display purposes\r\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\r\n        decimals = decimalUnits;                            // Amount of decimals for display purposes\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function freeze(uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value, \"\");   // Check if the sender has enough\r\n        require(_value > 0);\r\n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                      // Subtract from the sender\r\n        freezeOf[msg.sender] = SafeMath.safeAdd(freezeOf[msg.sender], _value);                                // Updates totalSupply\r\n        emit Freeze(msg.sender, _value);\r\n        return true;\r\n    }\r\n    \r\n    function unfreeze(uint256 _value) public returns (bool success) {\r\n        require(freezeOf[msg.sender] >= _value);     // Check if the sender has enough\r\n        require(_value > 0);\r\n        freezeOf[msg.sender] = SafeMath.safeSub(freezeOf[msg.sender], _value);                      // Subtract from the sender\r\n        balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], _value);\r\n        emit Unfreeze(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    // can accept ether\r\n    function () external payable { revert(\"error\"); }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_deactivatedAccount\",\"type\":\"address\"}],\"name\":\"removeDeactivatedList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_deactivatedAccount\",\"type\":\"address\"}],\"name\":\"getDeactivatedList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_deactivatedAccount\",\"type\":\"address\"}],\"name\":\"addDeactivatedList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"unfreeze\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"freezeOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"freeze\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"decimalUnits\",\"type\":\"uint8\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Unfreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]","ContractName":"PBToken","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000003b9aca000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000a5072696d65426c6f636b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004504d424b00000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://b3892def702ca1f7661af07627e700f098850f76d3dc6d10efdeaf79fee600f9"}]}