{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/IEscrow.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ninterface IEscrow {\r\n    function balance() external returns (uint);\r\n    function send(address payable addr, uint amt) external returns (bool);\r\n}\r\n\r\n// File: contracts/Escrow.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n* Thin wrapper around a ETH/ERC20 payment channel deposit that is controlled\r\n* by a library contract for the purpose of trading with atomic swaps using the\r\n* Arwen protocol.\r\n* @dev Abstract contract with `balance` and `send` methods that must be implemented\r\n* for either ETH or ERC20 tokens in derived contracts. The `send` method should only\r\n* callable by the library contract that controls this escrow\r\n*/\r\ncontract Escrow is IEscrow {\r\n\r\n    address public escrowLibrary;\r\n\r\n    modifier onlyLibrary() {\r\n        require(msg.sender == escrowLibrary, \"Only callable by library contract\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _escrowLibrary) internal {\r\n        escrowLibrary = _escrowLibrary;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n* Escrow Contract backed by ETH\r\n*/\r\ncontract EthEscrow is Escrow {\r\n\r\n    constructor(address escrowLibrary) public Escrow(escrowLibrary) {}\r\n\r\n    function send(address payable addr, uint amt) public onlyLibrary returns (bool) {\r\n        return addr.send(amt);\r\n    }\r\n\r\n    function balance() public returns (uint) {\r\n        return address(this).balance;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/cryptography/ECDSA.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * (.note) This call _does not revert_ if the signature is invalid, or\r\n     * if the signer is otherwise unable to be retrieved. In those scenarios,\r\n     * the zero address is returned.\r\n     *\r\n     * (.warning) `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise)\r\n     * be too long), and then calling `toEthSignedMessageHash` on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        // Check the signature length\r\n        if (signature.length != 65) {\r\n            return (address(0));\r\n        }\r\n\r\n        // Divide the signature in r, s and v variables\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        // ecrecover takes the signature parameters, and the only way to get them\r\n        // currently is to use assembly.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := byte(0, mload(add(signature, 0x60)))\r\n        }\r\n\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            return address(0);\r\n        }\r\n\r\n        if (v != 27 && v != 28) {\r\n            return address(0);\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        return ecrecover(hash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * replicates the behavior of the\r\n     * [`eth_sign`](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign)\r\n     * JSON-RPC method.\r\n     *\r\n     * See `recover`.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n}\r\n\r\n// File: contracts/EscrowLibrary.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n* Central contract containing the business logic for interacting with and\r\n* managing the state of Arwen unidirectional payment channels\r\n* @dev Escrows contracts are created and linked to this library from the\r\n* EscrowFactory contract\r\n*/\r\ncontract EscrowLibrary {\r\n\r\n    using SafeMath for uint;\r\n\r\n    string constant SIGNATURE_PREFIX = '\\x19Ethereum Signed Message:\\n';\r\n    uint constant FORCE_REFUND_TIME = 2 days;\r\n\r\n    /**\r\n    * Escrow State Machine\r\n    * @param None Preliminary state of an escrow before it has been created.\r\n    * @param Unfunded Initial state of the escrow once created. The escrow can only\r\n    * transition to the Open state once it has been funded with required escrow\r\n    * amount and openEscrow method is called.\r\n    * @param Open From this state the escrow can transition to Closed state\r\n    * via the cashout or refund methods or it can transition to PuzzlePosted state\r\n    * via the postPuzzle method.\r\n    * @param PuzzlePosted From this state the escrow can only transition to\r\n    * closed via the solve or puzzleRefund methods\r\n    * @param Closed The final sink state of the escrow\r\n    */\r\n    enum EscrowState {\r\n        None,\r\n        Unfunded,\r\n        Open,\r\n        PuzzlePosted,\r\n        Closed\r\n    }\r\n\r\n    /**\r\n    * Unique ID for each different type of signed message in the protocol\r\n    */\r\n    enum MessageTypeId {\r\n        None,\r\n        Cashout,\r\n        Puzzle,\r\n        Refund\r\n    }\r\n\r\n    /**\r\n    * Possible reasons the escrow can become closed\r\n    */\r\n    enum EscrowCloseReason {\r\n        Refund,\r\n        PuzzleRefund,\r\n        PuzzleSolve,\r\n        Cashout,\r\n        ForceRefund\r\n    }\r\n\r\n    event PuzzlePosted(address indexed escrow, bytes32 puzzleSighash);\r\n    event Preimage(address indexed escrow, bytes32 preimage, bytes32 puzzleSighash);\r\n    event EscrowClosed(address indexed escrow, EscrowCloseReason reason, bytes32 closingSighash);\r\n    event FundsTransferred(address indexed escrow, address reserveAddress);\r\n\r\n    struct EscrowParams {\r\n        // The amount expected to be funded by the escrower to open the payment channel\r\n        uint escrowAmount;\r\n\r\n        // Expiration time of the escrow when it can refunded by the escrower\r\n        uint escrowTimelock;\r\n\r\n        // Escrower's pub keys\r\n        address payable escrowerReserve;\r\n        address escrowerTrade;\r\n        address escrowerRefund;\r\n\r\n        // Payee's pub keys\r\n        address payable payeeReserve;\r\n        address payeeTrade;\r\n\r\n        // Current state of the escrow\r\n        EscrowState escrowState;\r\n\r\n        // Internal payee/escrower balances within the payment channel\r\n        uint escrowerBalance;\r\n        uint payeeBalance;\r\n    }\r\n\r\n    /**\r\n    * Represents a trade in the payment channel that can be executed\r\n    * on-chain by the payee by revealing a hash preimage\r\n    */\r\n    struct PuzzleParams {\r\n        // The amount of coins in this trade\r\n        uint tradeAmount;\r\n\r\n        // A hash output or \"puzzle\" which can be \"solved\" by revealing the preimage\r\n        bytes32 puzzle;\r\n\r\n        // The expiration time of the puzzle when the trade can be refunded by the escrower\r\n        uint puzzleTimelock;\r\n\r\n        // The signature hash of the `postPuzzle` message\r\n        bytes32 puzzleSighash;\r\n    }\r\n\r\n    // The EscrowFactory contract that deployed this library\r\n    address public escrowFactory;\r\n\r\n    // Mapping of escrow address to EscrowParams\r\n    mapping(address => EscrowParams) public escrows;\r\n\r\n    // Mapping of escrow address to PuzzleParams\r\n    // Only a single puzzle can be posted for a given escrow\r\n    mapping(address => PuzzleParams) public puzzles;\r\n\r\n    constructor() public {\r\n        escrowFactory = msg.sender;\r\n    }\r\n\r\n    modifier onlyFactory() {\r\n        require(msg.sender == escrowFactory, \"Can only be called by escrow factory\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * Add a new escrow that is controlled by the library\r\n    * @dev Only callable by the factory which should have already deployed the\r\n    * escrow at the provided address\r\n    */\r\n    function newEscrow(\r\n        address escrowAddress,\r\n        uint escrowAmount,\r\n        uint timelock,\r\n        address payable escrowerReserve,\r\n        address escrowerTrade,\r\n        address escrowerRefund,\r\n        address payable payeeReserve,\r\n        address payeeTrade\r\n    )\r\n        public\r\n        onlyFactory\r\n    {\r\n        require(escrows[escrowAddress].escrowState == EscrowState.None, \"Escrow already exists\");\r\n        require(escrowAmount > 0, \"Escrow amount too low\");\r\n\r\n        uint escrowerStartingBalance = 0;\r\n        uint payeeStartingBalance = 0;\r\n\r\n        escrows[escrowAddress] = EscrowParams(\r\n            escrowAmount,\r\n            timelock,\r\n            escrowerReserve,\r\n            escrowerTrade,\r\n            escrowerRefund,\r\n            payeeReserve,\r\n            payeeTrade,\r\n            EscrowState.Unfunded,\r\n            escrowerStartingBalance,\r\n            payeeStartingBalance\r\n        );\r\n\r\n        EscrowParams storage escrowParams = escrows[escrowAddress];\r\n\r\n        IEscrow escrow = IEscrow(escrowAddress);\r\n        uint escrowBalance = escrow.balance();\r\n\r\n        // Check the escrow is funded for at least escrowAmount\r\n        require(escrowBalance >= escrowAmount, \"Escrow not funded\");\r\n\r\n        escrowParams.escrowState = EscrowState.Open;\r\n\r\n        // If over-funded return any excess funds back to the escrower\r\n        if(escrowBalance > escrowAmount) {\r\n           escrow.send(escrowParams.escrowerReserve, escrowBalance.sub(escrowAmount));\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Cashout the escrow with the final balances after trading\r\n    * @dev Must be signed by both the escrower and payee trade keys\r\n    * @dev Must be in Open state\r\n    * @param amountTraded The total amount traded to the payee\r\n    */\r\n    function cashout(\r\n        address escrowAddress,\r\n        uint amountTraded,\r\n        bytes memory eSig,\r\n        bytes memory pSig\r\n    )\r\n        public\r\n    {\r\n        EscrowParams storage escrowParams = escrows[escrowAddress];\r\n        require(escrowParams.escrowState == EscrowState.Open, \"Escrow must be in state Open\");\r\n\r\n        // Length of the actual message: 20 + 1 + 32\r\n        string memory messageLength = '53';\r\n        bytes32 sighash = keccak256(abi.encodePacked(\r\n            SIGNATURE_PREFIX,\r\n            messageLength,\r\n            escrowAddress,\r\n            uint8(MessageTypeId.Cashout),\r\n            amountTraded\r\n        ));\r\n\r\n        // Check signatures\r\n        require(verify(sighash, eSig) == escrowParams.escrowerTrade, \"Invalid escrower cashout sig\");\r\n        require(verify(sighash, pSig) == escrowParams.payeeTrade, \"Invalid payee cashout sig\");\r\n\r\n        escrowParams.payeeBalance = amountTraded;\r\n        escrowParams.escrowerBalance = escrowParams.escrowAmount.sub(amountTraded);\r\n        escrowParams.escrowState = EscrowState.Closed;\r\n\r\n        if(escrowParams.escrowerBalance > 0) sendEscrower(escrowAddress, escrowParams);\r\n        if(escrowParams.payeeBalance > 0) sendPayee(escrowAddress, escrowParams);\r\n\r\n        emit EscrowClosed(escrowAddress, EscrowCloseReason.Cashout, sighash);\r\n    }\r\n\r\n    /**\r\n    * Allows the escrower to refund the escrow after the escrow expires\r\n    * @dev This is a signed refund because it allows the refunder to\r\n    * specify the amount traded in the escrow. This is useful for the escrower to\r\n    * benevolently close the escrow with the final balances despite the other\r\n    * party being offline\r\n    * @dev Must be signed by the escrower refund key\r\n    * @dev Must be in Open state\r\n    * @param amountTraded The total amount traded to the payee\r\n    */\r\n    function refund(address escrowAddress, uint amountTraded, bytes memory eSig) public {\r\n        EscrowParams storage escrowParams = escrows[escrowAddress];\r\n        require(escrowParams.escrowState == EscrowState.Open, \"Escrow must be in state Open\");\r\n        require(now >= escrowParams.escrowTimelock, \"Escrow timelock not reached\");\r\n        \r\n        // Length of the actual message: 20 + 1 + 32\r\n        string memory messageLength = '53';\r\n        bytes32 sighash = keccak256(abi.encodePacked(\r\n            SIGNATURE_PREFIX,\r\n            messageLength,\r\n            escrowAddress,\r\n            uint8(MessageTypeId.Refund),\r\n            amountTraded\r\n        ));\r\n\r\n        // Check signature\r\n        require(verify(sighash, eSig) == escrowParams.escrowerRefund, \"Invalid escrower sig\");\r\n\r\n        escrowParams.payeeBalance = amountTraded;\r\n        escrowParams.escrowerBalance = escrowParams.escrowAmount.sub(amountTraded);\r\n        escrowParams.escrowState = EscrowState.Closed;\r\n\r\n        if(escrowParams.escrowerBalance > 0) sendEscrower(escrowAddress, escrowParams);\r\n        if(escrowParams.payeeBalance > 0) sendPayee(escrowAddress, escrowParams);\r\n\r\n        emit EscrowClosed(escrowAddress, EscrowCloseReason.Refund, sighash);\r\n    }\r\n\r\n    /**\r\n    * Allows anyone to refund the escrow back to the escrower without a\r\n    * signature after escrowTimelock + FORCE_REFUND_TIME\r\n    * @dev This method can be used in the event the escrower's keys are lost\r\n    * or if the escrower remains offline for an extended period of time\r\n    */\r\n    function forceRefund(address escrowAddress) public {\r\n        EscrowParams storage escrowParams = escrows[escrowAddress];\r\n        require(escrowParams.escrowState == EscrowState.Open, \"Escrow must be in state Open\");\r\n        require(now >= escrowParams.escrowTimelock + FORCE_REFUND_TIME, \"Escrow force refund timelock not reached\");\r\n\r\n        escrowParams.escrowerBalance = IEscrow(escrowAddress).balance();\r\n        escrowParams.escrowState = EscrowState.Closed;\r\n\r\n        if(escrowParams.escrowerBalance > 0) sendEscrower(escrowAddress, escrowParams);\r\n\r\n        // Use 0x0 as the closing sighash because there is no signature required\r\n        emit EscrowClosed(escrowAddress, EscrowCloseReason.ForceRefund, 0x0);\r\n    }\r\n\r\n    /**\r\n    * Post a hash puzzle unlocks lastest trade in the escrow\r\n    * @dev Must be signed by both the escrower and payee trade keys\r\n    * @dev Must be in Open state\r\n    * @param prevAmountTraded The total amount traded to the payee in the\r\n    * payment channel before the last trade\r\n    * @param tradeAmount The last trade amount\r\n    * @param puzzle A hash puzzle where the solution (preimage) releases the\r\n    * `tradeAmount` to the payee\r\n    * @param  puzzleTimelock The time at which the `tradeAmount` can be\r\n    * refunded back to the escrower if the puzzle solution is not posted\r\n    */\r\n    function postPuzzle(\r\n        address escrowAddress,\r\n        uint prevAmountTraded,\r\n        uint tradeAmount,\r\n        bytes32 puzzle,\r\n        uint puzzleTimelock,\r\n        bytes memory eSig,\r\n        bytes memory pSig\r\n    )\r\n        public\r\n    {\r\n        EscrowParams storage escrowParams = escrows[escrowAddress];\r\n        require(escrowParams.escrowState == EscrowState.Open, \"Escrow must be in state Open\");\r\n\r\n        // Length of the actual message: 20 + 1 + 32 + 32 + 32 + 32\r\n        string memory messageLength = '149';\r\n        bytes32 sighash = keccak256(abi.encodePacked(\r\n            SIGNATURE_PREFIX,\r\n            messageLength,\r\n            escrowAddress,\r\n            uint8(MessageTypeId.Puzzle),\r\n            prevAmountTraded,\r\n            tradeAmount,\r\n            puzzle,\r\n            puzzleTimelock\r\n        ));\r\n\r\n        require(verify(sighash, eSig) == escrowParams.escrowerTrade, \"Invalid escrower sig\");\r\n        require(verify(sighash, pSig) == escrowParams.payeeTrade, \"Invalid payee sig\");\r\n\r\n        puzzles[escrowAddress] = PuzzleParams(\r\n            tradeAmount,\r\n            puzzle,\r\n            puzzleTimelock,\r\n            sighash\r\n        );\r\n\r\n        escrowParams.escrowState = EscrowState.PuzzlePosted;\r\n        escrowParams.payeeBalance = prevAmountTraded;\r\n        escrowParams.escrowerBalance = escrowParams.escrowAmount.sub(prevAmountTraded).sub(tradeAmount);\r\n\r\n        emit PuzzlePosted(escrowAddress, sighash);\r\n    }\r\n\r\n    /**\r\n    * Payee solves the hash puzzle redeeming the last trade amount of funds in the escrow\r\n    * @dev Must be in PuzzlePosted state\r\n    * @param preimage The preimage x such that H(x) == puzzle\r\n    */\r\n    function solvePuzzle(address escrowAddress, bytes32 preimage) public {\r\n        EscrowParams storage escrowParams = escrows[escrowAddress];\r\n        require(escrowParams.escrowState == EscrowState.PuzzlePosted, \"Escrow must be in state PuzzlePosted\");\r\n\r\n        PuzzleParams memory puzzleParams = puzzles[escrowAddress];\r\n        bytes32 h = sha256(abi.encodePacked(preimage));\r\n        require(h == puzzleParams.puzzle, \"Invalid preimage\");\r\n        emit Preimage(escrowAddress, preimage, puzzleParams.puzzleSighash);\r\n\r\n        escrowParams.payeeBalance = escrowParams.payeeBalance.add(puzzleParams.tradeAmount);\r\n        escrowParams.escrowState = EscrowState.Closed;\r\n\r\n        emit EscrowClosed(escrowAddress, EscrowCloseReason.PuzzleSolve, puzzleParams.puzzleSighash);\r\n    }\r\n\r\n    /**\r\n    * Escrower refunds the last trade amount after `puzzleTimelock` has been reached\r\n    * @dev Must be in PuzzlePosted state\r\n    */\r\n    function refundPuzzle(address escrowAddress) public {\r\n        EscrowParams storage escrowParams = escrows[escrowAddress];\r\n        require(escrowParams.escrowState == EscrowState.PuzzlePosted, \"Escrow must be in state PuzzlePosted\");\r\n\r\n        PuzzleParams memory puzzleParams = puzzles[escrowAddress];\r\n        require(now >= puzzleParams.puzzleTimelock, \"Puzzle timelock not reached\");\r\n        \r\n        escrowParams.escrowerBalance = escrowParams.escrowerBalance.add(puzzleParams.tradeAmount);\r\n        escrowParams.escrowState = EscrowState.Closed;\r\n\r\n        emit EscrowClosed(escrowAddress, EscrowCloseReason.PuzzleRefund, puzzleParams.puzzleSighash);\r\n    }\r\n\r\n    function withdraw(address escrowAddress, bool escrower) public {\r\n        EscrowParams storage escrowParams = escrows[escrowAddress];\r\n\r\n        require(escrowParams.escrowState == EscrowState.Closed, \"Withdraw attempted before escrow is closed\");\r\n\r\n        if(escrower) {\r\n            require(escrowParams.escrowerBalance > 0, \"escrower balance is 0\");\r\n            sendEscrower(escrowAddress, escrowParams);\r\n        } else {\r\n            require(escrowParams.payeeBalance > 0, \"payee balance is 0\");\r\n            sendPayee(escrowAddress, escrowParams);\r\n        }\r\n    }\r\n\r\n    function sendEscrower(address escrowAddress, EscrowParams storage escrowParams) internal {\r\n        IEscrow escrow = IEscrow(escrowAddress);\r\n\r\n        uint amountToSend = escrowParams.escrowerBalance;\r\n        escrowParams.escrowerBalance = 0;\r\n        require(escrow.send(escrowParams.escrowerReserve, amountToSend), \"escrower send failure\");\r\n\r\n        emit FundsTransferred(escrowAddress, escrowParams.escrowerReserve);\r\n    }\r\n\r\n    function sendPayee(address escrowAddress, EscrowParams storage escrowParams) internal {\r\n        IEscrow escrow = IEscrow(escrowAddress);\r\n\r\n        uint amountToSend = escrowParams.payeeBalance;\r\n        escrowParams.payeeBalance = 0;\r\n        require(escrow.send(escrowParams.payeeReserve, amountToSend), \"payee send failure\");\r\n\r\n        emit FundsTransferred(escrowAddress, escrowParams.payeeReserve);\r\n    }\r\n\r\n    /**\r\n    * Verify a EC signature (v,r,s) on a message digest h\r\n    * @return retAddr The recovered address from the signature or 0 if signature is invalid\r\n    */\r\n    function verify(bytes32 sighash, bytes memory sig) internal pure returns(address retAddr) {\r\n        retAddr = ECDSA.recover(sighash, sig);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/EscrowFactory.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n* Creates an EscrowLibrary contract and allows for creating new escrows linked\r\n* to that library\r\n* @dev The factory  contract can be self-destructed by the owner to prevent\r\n* new escrows from being created without affecting the library and the ability\r\n* to close already existing escrows\r\n*/\r\ncontract EscrowFactory is Ownable {\r\n\r\n    EscrowLibrary public escrowLibrary;\r\n\r\n    constructor () public {\r\n        escrowLibrary = new EscrowLibrary();\r\n    }\r\n\r\n    event EscrowCreated(\r\n        bytes32 indexed escrowParams,\r\n        address escrowAddress\r\n    );\r\n\r\n    function createEthEscrow(\r\n        uint escrowAmount,\r\n        uint timelock,\r\n        address payable escrowerReserve,\r\n        address escrowerTrade,\r\n        address escrowerRefund,\r\n        address payable payeeReserve,\r\n        address payeeTrade\r\n    )\r\n    public\r\n    {\r\n        bytes32 escrowParamsHash = keccak256(abi.encodePacked(\r\n            address(this),\r\n            escrowAmount,\r\n            timelock,\r\n            escrowerReserve,\r\n            escrowerTrade,\r\n            escrowerRefund,\r\n            payeeReserve,\r\n            payeeTrade\r\n        ));\r\n\r\n        bytes memory constructorArgs = abi.encode(address(escrowLibrary));\r\n        bytes memory bytecode = abi.encodePacked(type(EthEscrow).creationCode, constructorArgs);\r\n        address escrowAddress = createEscrow(bytecode, escrowParamsHash);\r\n\r\n        escrowLibrary.newEscrow(\r\n            escrowAddress,\r\n            escrowAmount,\r\n            timelock,\r\n            escrowerReserve,\r\n            escrowerTrade,\r\n            escrowerRefund,\r\n            payeeReserve,\r\n            payeeTrade\r\n        );\r\n\r\n        emit EscrowCreated(escrowParamsHash, escrowAddress);\r\n    }\r\n\r\n    function createEscrow(bytes memory code, bytes32 salt) internal returns (address) {\r\n        address addr;\r\n        assembly {\r\n            addr := create2(0, add(code, 0x20), mload(code), salt)\r\n            if iszero(extcodesize(addr)) {\r\n                revert(0, 0)\r\n            }\r\n        }\r\n        return addr;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"escrowLibrary\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":false,\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escrowLibrary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"send\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EthEscrow","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000301fc3566fc9e3eabef298648a251ae69dd2a846","Library":"","LicenseType":"None","SwarmSource":"bzzr://8c3ba139a8224b58388ec9d97c7e2ca66e61702d67a739946bcf2e3ba94b5080"}]}