{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.9;\r\n\r\nlibrary SafeMath {\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract HotelierCoin {\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint256 private _totalSupply;\r\n    address private _owner;\r\n    uint8 private _decimals;\r\n    bool private _isReserveEnabled;\r\n    \r\n    /**\r\n    \r\n    * All code definitions below\r\n    \r\n    */    \r\n    \r\n    uint8 private _code_for_department_of_team = 100; //23 mil\r\n    uint8 private _code_for_department_of_foundation_community_building = 103; //3 mil\r\n    uint8 private _code_for_department_of_advisor = 104; //4 mil\r\n    uint8 private _code_for_department_of_cashback_sales_ieo_p2p_rewards_airdrop = 101; //70mil\r\n    uint8 private _code_for_reserve_account = 102; //50 mil\r\n    \r\n    uint8 private _code_for_reserve_private_sales = 105; // 2.5 mil\r\n    \r\n    //5 percent of reserve/ private sales\r\n    //new mint events: 3 percent goes to team(1.5 mil), 7 percent goes to community and rewards(3.5 mil),  90 percent to reserve(45 mil)\r\n    \r\n    \r\n     /**\r\n    \r\n    * All mappings below\r\n    \r\n    */\r\n    mapping (address => uint256) private _balances;\r\n    mapping(uint8 => address) private _departmentInfo;\r\n    mapping(address => uint8) private _departmentCodeInfo;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    \r\n    /**\r\n    \r\n    * All events below\r\n    \r\n    */\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    \r\n    event MintOccured(uint256 totalCoins, address source);\r\n    \r\n    event ChangeOfDepartment(address oldAddy, address newlyAssignedAddy);\r\n    \r\n    event ReserveEnabled();\r\n    \r\n    /**\r\n     \r\n    * Constructor to initialize important values \r\n    \r\n    */\r\n        \r\n    constructor () public {\r\n        _name = \"HotelierCoin\";\r\n        _symbol = \"HTLC\";\r\n        _decimals = 8;\r\n        _totalSupply = 15000000000000000;\r\n        _balances[msg.sender] = _totalSupply;\r\n        _owner = msg.sender;\r\n        _isReserveEnabled = false;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner,\"ONLY AN OWNER CAN CALL THIS FUNCTION\");\r\n        _;\r\n    }\r\n    \r\n    /**\r\n    \r\n     *  return contract creator/admin.\r\n    \r\n     */\r\n     \r\n    function contractCreator() public view returns(address){\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n    \r\n     *  the name of the token.\r\n    \r\n     */\r\n     \r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n    \r\n     *  the symbol of the token.\r\n    \r\n     */\r\n     \r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    \r\n    /**\r\n     \r\n     * returns the decimals\r\n     \r\n     **/\r\n     \r\n     function decimals() public view returns(uint8 decimalCount){\r\n         return _decimals;\r\n     }\r\n    \r\n    /**\r\n     \r\n     *  total HTL token supply.\r\n     \r\n     */\r\n     \r\n    function totalSupply() external view returns(uint256){\r\n        return _totalSupply;\r\n    }\r\n    \r\n    /**\r\n     \r\n     * return the HTL balance of the address passed as a parameter.\r\n     \r\n     */\r\n     \r\n    function balanceOf(address owner) external view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n    \r\n    /**\r\n     \r\n     * return codes for various departments\r\n     \r\n     */\r\n     \r\n     function departmentCodeInfo(address departmentAddress) public view returns(uint8){\r\n         require(_departmentCodeInfo[departmentAddress] != 0, \"ADDRESS IS NOT IN USE IN ANY DEPARTMENT\");\r\n         return _departmentCodeInfo[departmentAddress];\r\n     }\r\n    \r\n    \r\n    /**\r\n     \r\n     * return the department address currently being allowed\r\n     \r\n     */\r\n     \r\n    function departmentInfo(uint8 departmentCode) public view returns(address){\r\n         require(_departmentInfo[departmentCode] != address(0), \"NO ADDRESS EXISTS\");\r\n        return _departmentInfo[departmentCode];\r\n    }    \r\n    \r\n    /**\r\n     \r\n     * retun allowance value for anyone.\r\n     \r\n     */\r\n     \r\n    function allowance(address owner, address spender) external view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    \r\n    function changeDepartmentAddress( address _addr, uint8 _departmentCode ) public onlyOwner returns (bool){\r\n        \r\n        require(_departmentInfo[_departmentCode] != address(0), \"NO ZERO ADDRESS CAN BE MADE DEPARTMENT ADDRESS\");\r\n        \r\n        for(uint8 i=100;i<106;i++){\r\n            require(_departmentInfo[i] != _addr, \"NO TWO DEPARTMENTS CAN HAVE THE SAME ADDRESS\");\r\n        }\r\n        \r\n        uint256 _balanceToApprove = _balances[_departmentInfo[_departmentCode]];\r\n        _balances[_departmentInfo[_departmentCode]] = _balances[_departmentInfo[_departmentCode]].sub(_balanceToApprove);\r\n        _balances[_addr] = _balances[_addr].add(_balanceToApprove);\r\n        \r\n        _allowances[_addr][msg.sender] = _balances[_addr];\r\n        \r\n        emit ChangeOfDepartment(_departmentInfo[_departmentCode], _addr);\r\n        emit Approval(_addr,msg.sender,_balanceToApprove);\r\n        emit Transfer(_departmentInfo[_departmentCode], _addr, _balances[_departmentInfo[_departmentCode]]);\r\n        \r\n        _departmentInfo[_departmentCode] = _addr;\r\n        _departmentCodeInfo[_addr] = _departmentCode;\r\n        return true;\r\n        \r\n    }\r\n    \r\n    function mint() public onlyOwner returns(bool){\r\n        \r\n        require(_balances[_departmentInfo[_code_for_department_of_cashback_sales_ieo_p2p_rewards_airdrop]] < 1000,\"CONDITIONS NOT MET FOR MINTING\");\r\n        \r\n        address team = _departmentInfo[_code_for_department_of_team];\r\n        uint256 teamShare = 150000000000000;\r\n        \r\n        address communityBuilding = _departmentInfo[_code_for_department_of_foundation_community_building];\r\n        uint256 communityBuildingShare = 350000000000000;\r\n        \r\n        address reserve = _departmentInfo[_code_for_reserve_account];\r\n        require(_balances[reserve] < 500000000000000, \"MINTING NOT POSSIBLE\");\r\n        uint256 reserveShare = 4500000000000000;\r\n        \r\n        \r\n        require(team != address(0), \"FORBIDDEN!:: MINT\");\r\n        require(communityBuilding != address(0), \"FORBIDDEN!:: MINT\");\r\n        require(reserve != address(0), \"FORBIDDEN!:: MINT\");\r\n        \r\n        require(teamShare + communityBuildingShare + reserveShare == 5000000000000000, \"MINTING VALUE ERROR!\" );\r\n\r\n        _mint(team,communityBuilding, reserve, teamShare, communityBuildingShare, reserveShare);\r\n        return true;\r\n        \r\n    }\r\n\r\n    function transfer(address to, uint256 value) external returns (bool) {\r\n        \r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n        \r\n    }\r\n    \r\n    /**\r\n     \r\n     * 50 mil \r\n     \r\n     */\r\n    \r\n    function setReserve(address reserve) external onlyOwner returns(bool){\r\n        require(_departmentInfo[_code_for_reserve_account] == address(0));\r\n        require(_departmentInfo[_code_for_reserve_private_sales] != reserve, \"ADDRESS ALREADY EXISTS FOR OTHER DEPARTMENT\");\r\n        require(_departmentInfo[_code_for_department_of_cashback_sales_ieo_p2p_rewards_airdrop] != reserve, \"ADDRESS ALREADY EXISTS FOR OTHER DEPARTMENT\");\r\n        require(_departmentInfo[_code_for_department_of_advisor] != reserve, \"ADDRESS ALREADY EXISTS FOR OTHER DEPARTMENT\");\r\n        require(_departmentInfo[_code_for_department_of_foundation_community_building] != reserve, \"ADDRESS ALREADY EXISTS FOR OTHER DEPARTMENT\");\r\n        require(_departmentInfo[_code_for_department_of_team] != reserve, \"ADDRESS ALREADY EXISTS FOR OTHER DEPARTMENT\");\r\n        require(reserve != address(0));\r\n        _departmentInfo[_code_for_reserve_account] =reserve;\r\n        _departmentCodeInfo[reserve] = _code_for_reserve_account;\r\n        _transfer(msg.sender, reserve, 5000000000000000);\r\n        _approve(reserve,_owner, 5000000000000000);\r\n        return true;\r\n        \r\n    }\r\n    \r\n    /**\r\n     \r\n     * 23 mil / 30 mil \r\n     \r\n     */\r\n     \r\n    function setTeam(address team) external onlyOwner returns(bool){\r\n        require(_departmentInfo[_code_for_department_of_team] == address(0));\r\n        require(_departmentInfo[_code_for_reserve_private_sales] != team, \"ADDRESS ALREADY EXISTS FOR OTHER DEPARTMENT\");\r\n        require(_departmentInfo[_code_for_department_of_cashback_sales_ieo_p2p_rewards_airdrop] != team, \"ADDRESS ALREADY EXISTS FOR OTHER DEPARTMENT\");\r\n        require(_departmentInfo[_code_for_department_of_advisor] != team, \"ADDRESS ALREADY EXISTS FOR OTHER DEPARTMENT\");\r\n        require(_departmentInfo[_code_for_department_of_foundation_community_building] != team, \"ADDRESS ALREADY EXISTS FOR OTHER DEPARTMENT\");\r\n        require(_departmentInfo[_code_for_reserve_account] != team, \"ADDRESS ALREADY EXISTS FOR OTHER DEPARTMENT\");\r\n        require(team != address(0));\r\n        _departmentInfo[_code_for_department_of_team] =team;\r\n        _departmentCodeInfo[team] = _code_for_department_of_team;\r\n        _transfer(msg.sender, team, 2300000000000000);\r\n        _approve(team,_owner, 2300000000000000);\r\n        return true;\r\n        \r\n    }\r\n    \r\n    /**\r\n     \r\n     * 3 mil / 30 mil\r\n     \r\n     */\r\n     \r\n    function setFoundationCommunityBuilding(address community) external onlyOwner returns(bool){\r\n        require(_departmentInfo[_code_for_department_of_foundation_community_building] == address(0));\r\n        require(_departmentInfo[_code_for_reserve_private_sales] != community, \"ADDRESS ALREADY EXISTS FOR OTHER DEPARTMENT\");\r\n        require(_departmentInfo[_code_for_department_of_cashback_sales_ieo_p2p_rewards_airdrop] != community, \"ADDRESS ALREADY EXISTS FOR OTHER DEPARTMENT\");\r\n        require(_departmentInfo[_code_for_department_of_advisor] != community, \"ADDRESS ALREADY EXISTS FOR OTHER DEPARTMENT\");\r\n        require(_departmentInfo[_code_for_department_of_team] != community, \"ADDRESS ALREADY EXISTS FOR OTHER DEPARTMENT\");\r\n        require(_departmentInfo[_code_for_reserve_account] != community, \"ADDRESS ALREADY EXISTS FOR OTHER DEPARTMENT\");\r\n        require(community != address(0));\r\n        _departmentInfo[_code_for_department_of_foundation_community_building] =community;\r\n        _departmentCodeInfo[community] = _code_for_department_of_foundation_community_building;\r\n        _transfer(msg.sender, community, 300000000000000);\r\n        _approve(community,_owner, 300000000000000);\r\n        return true;\r\n        \r\n    }\r\n    \r\n    /**\r\n     \r\n     * 4 mil / 30 mil \r\n     \r\n     */\r\n    \r\n    function setAdvisor(address advisor) external onlyOwner returns(bool){\r\n        require(_departmentInfo[_code_for_department_of_advisor] == address(0));\r\n        require(_departmentInfo[_code_for_reserve_private_sales] != advisor, \"ADDRESS ALREADY EXISTS FOR OTHER DEPARTMENT\");\r\n        require(_departmentInfo[_code_for_department_of_cashback_sales_ieo_p2p_rewards_airdrop] != advisor, \"ADDRESS ALREADY EXISTS FOR OTHER DEPARTMENT\");\r\n        require(_departmentInfo[_code_for_department_of_foundation_community_building] != advisor, \"ADDRESS ALREADY EXISTS FOR OTHER DEPARTMENT\");\r\n        require(_departmentInfo[_code_for_department_of_team] != advisor, \"ADDRESS ALREADY EXISTS FOR OTHER DEPARTMENT\");\r\n        require(_departmentInfo[_code_for_reserve_account] != advisor, \"ADDRESS ALREADY EXISTS FOR OTHER DEPARTMENT\");\r\n        require(advisor != address(0));\r\n        _departmentInfo[_code_for_department_of_advisor] =advisor;\r\n        _departmentCodeInfo[advisor] = _code_for_department_of_advisor;\r\n        _transfer(msg.sender, advisor, 400000000000000);\r\n        _approve(advisor,_owner, 400000000000000);\r\n        return true;\r\n        \r\n    }\r\n    \r\n    /**\r\n     \r\n     * 70 mil/ 70 mil \r\n     \r\n     */\r\n    \r\n    function setCashbackSalesIeoRewardsAirdrop(address cashback) external onlyOwner returns(bool){\r\n        require(_departmentInfo[_code_for_department_of_cashback_sales_ieo_p2p_rewards_airdrop] == address(0));\r\n        require(_departmentInfo[_code_for_reserve_private_sales] != cashback, \"ADDRESS ALREADY EXISTS FOR OTHER DEPARTMENT\");\r\n        require(_departmentInfo[_code_for_department_of_advisor] != cashback, \"ADDRESS ALREADY EXISTS FOR OTHER DEPARTMENT\");\r\n        require(_departmentInfo[_code_for_department_of_foundation_community_building] != cashback, \"ADDRESS ALREADY EXISTS FOR OTHER DEPARTMENT\");\r\n        require(_departmentInfo[_code_for_department_of_team] != cashback, \"ADDRESS ALREADY EXISTS FOR OTHER DEPARTMENT\");\r\n        require(_departmentInfo[_code_for_reserve_account] != cashback, \"ADDRESS ALREADY EXISTS FOR OTHER DEPARTMENT\");\r\n        require(cashback != address(0));\r\n        _departmentInfo[_code_for_department_of_cashback_sales_ieo_p2p_rewards_airdrop] =cashback;\r\n        _departmentCodeInfo[cashback] = _code_for_department_of_cashback_sales_ieo_p2p_rewards_airdrop;\r\n        _transfer(msg.sender, cashback, 7000000000000000);\r\n        _approve(cashback,_owner, 7000000000000000);\r\n        return true;\r\n        \r\n    }\r\n    \r\n    /**\r\n     \r\n     * 2.5 mil /50 mil (reserve) \r\n     \r\n     */\r\n     \r\n    function setPrivateSalesFromReserve(address privateSales) external onlyOwner returns(bool){\r\n        \r\n        require(_departmentInfo[_code_for_reserve_private_sales] == address(0));\r\n        require(_departmentInfo[_code_for_department_of_cashback_sales_ieo_p2p_rewards_airdrop] != privateSales, \"ADDRESS ALREADY EXISTS FOR OTHER DEPARTMENT\");\r\n        require(_departmentInfo[_code_for_department_of_advisor] != privateSales, \"ADDRESS ALREADY EXISTS FOR OTHER DEPARTMENT\");\r\n        require(_departmentInfo[_code_for_department_of_foundation_community_building] != privateSales, \"ADDRESS ALREADY EXISTS FOR OTHER DEPARTMENT\");\r\n        require(_departmentInfo[_code_for_department_of_team] != privateSales, \"ADDRESS ALREADY EXISTS FOR OTHER DEPARTMENT\");\r\n        require(_departmentInfo[_code_for_reserve_account] != privateSales, \"ADDRESS ALREADY EXISTS FOR OTHER DEPARTMENT\");\r\n        require(privateSales != address(0));\r\n        require(_allowances[_departmentInfo[_code_for_reserve_account]][msg.sender]  > 0, \"RESERVE ADDRESS MUST EXIST AND SET\");\r\n        _departmentInfo[_code_for_reserve_private_sales] = privateSales;\r\n        _departmentCodeInfo[privateSales] = _code_for_reserve_private_sales;\r\n        _transfer(_departmentInfo[_code_for_reserve_account], privateSales, 250000000000000);\r\n        _approve(privateSales,_owner, 250000000000000);\r\n        return true;\r\n        \r\n    }\r\n    \r\n\r\n    function transferFrom(address from, address to ,uint256 value) external returns (bool) {\r\n        \r\n        require(_allowances[from][msg.sender] > value , \"NOT ENOUGH ALLOWANCE VALUE TO SPEND\");\r\n        _transfer(from, to, value);\r\n        _approve(from, msg.sender,_allowances[from][msg.sender].sub(value));\r\n        return true;\r\n        \r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 _value) internal {\r\n        \r\n        require(from != address(0));\r\n        require(to != address(0));\r\n        if(_departmentInfo[_code_for_reserve_account] == from){\r\n            require(_isReserveEnabled == true, \"RESERVE CANT BE USED\");\r\n        }\r\n        \r\n            _balances[from] = _balances[from].sub(_value);\r\n            _balances[to] = _balances[to].add(_value);\r\n            \r\n     \r\n            emit Transfer(from, to, _value);\r\n        \r\n        \r\n    }\r\n    \r\n     function enableReserveTransfers() external onlyOwner returns(bool){\r\n         require(_departmentInfo[_code_for_department_of_cashback_sales_ieo_p2p_rewards_airdrop] != address(0));\r\n         require(_balances[_departmentInfo[_code_for_department_of_cashback_sales_ieo_p2p_rewards_airdrop]] <1000);\r\n            _isReserveEnabled = true;\r\n            emit ReserveEnabled();\r\n    }\r\n\r\n    function _mint(address team, address communityBuilding, address reserve, uint256 teamShare, uint256 communityBuildingShare, uint256 reserveShare) internal {\r\n        uint256 totalMintedCoins = teamShare + communityBuildingShare + reserveShare;\r\n        _totalSupply = _totalSupply.add(totalMintedCoins);\r\n        \r\n        _balances[team] = _balances[team].add(teamShare);\r\n        _balances[communityBuilding] = _balances[communityBuilding].add(communityBuildingShare);\r\n        _balances[reserve] = _balances[reserve].add(reserveShare);\r\n        \r\n        _allowances[team][_owner] = _allowances[team][_owner].add(teamShare);\r\n        _allowances[communityBuilding][_owner] = _allowances[communityBuilding][_owner].add(communityBuildingShare);\r\n        _allowances[reserve][_owner] = _allowances[reserve][_owner].add(reserveShare);\r\n        \r\n        emit Approval(team,_owner,teamShare);\r\n        emit Approval(communityBuilding,_owner,communityBuildingShare);\r\n        emit Approval(reserve,_owner,reserveShare);\r\n        \r\n        emit Transfer(address(0), team, teamShare);\r\n        emit Transfer(address(0), communityBuilding, communityBuildingShare);\r\n        emit Transfer(address(0), reserve, reserveShare);\r\n        \r\n        emit MintOccured(totalMintedCoins, msg.sender);\r\n    }\r\n\r\n\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0));\r\n        require(spender != address(0));\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"team\",\"type\":\"address\"}],\"name\":\"setTeam\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractCreator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"departmentAddress\",\"type\":\"address\"}],\"name\":\"departmentCodeInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"decimalCount\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"privateSales\",\"type\":\"address\"}],\"name\":\"setPrivateSalesFromReserve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"departmentCode\",\"type\":\"uint8\"}],\"name\":\"departmentInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"advisor\",\"type\":\"address\"}],\"name\":\"setAdvisor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"reserve\",\"type\":\"address\"}],\"name\":\"setReserve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableReserveTransfers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cashback\",\"type\":\"address\"}],\"name\":\"setCashbackSalesIeoRewardsAirdrop\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_departmentCode\",\"type\":\"uint8\"}],\"name\":\"changeDepartmentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"community\",\"type\":\"address\"}],\"name\":\"setFoundationCommunityBuilding\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"totalCoins\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"source\",\"type\":\"address\"}],\"name\":\"MintOccured\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldAddy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newlyAssignedAddy\",\"type\":\"address\"}],\"name\":\"ChangeOfDepartment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ReserveEnabled\",\"type\":\"event\"}]","ContractName":"HotelierCoin","CompilerVersion":"v0.5.9+commit.e560f70d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://13525646b3771f8d02449d281f9219c795c7fe2e4be4fb6d8d63f4a2c9b5dcd9"}]}