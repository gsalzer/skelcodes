{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.9;\r\n\r\ninterface DPlayCoinInterface {\r\n\t\r\n\tevent Transfer(address indexed from, address indexed to, uint value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint value);\r\n\t\r\n\tfunction name() external view returns (string memory);\r\n\tfunction symbol() external view returns (string memory);\r\n\tfunction decimals() external view returns (uint8);\r\n\t\r\n\tfunction totalSupply() external view returns (uint);\r\n\tfunction balanceOf(address owner) external view returns (uint balance);\r\n\tfunction transfer(address to, uint value) external returns (bool success);\r\n\tfunction transferFrom(address from, address to, uint value) external returns (bool success);\r\n\tfunction approve(address spender, uint value) external returns (bool success);\r\n\tfunction allowance(address owner, address spender) external view returns (uint remaining);\r\n\t\r\n\t// Returns the DC power.\r\n\t// DC 파워를 반환합니다.\r\n\tfunction getPower(address user) external view returns (uint power);\r\n}\r\n\r\ninterface ERC20 {\r\n\t\r\n\tevent Transfer(address indexed from, address indexed to, uint value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint value);\r\n\t\r\n\tfunction name() external view returns (string memory);\r\n\tfunction symbol() external view returns (string memory);\r\n\tfunction decimals() external view returns (uint8);\r\n\t\r\n\tfunction totalSupply() external view returns (uint);\r\n\tfunction balanceOf(address owner) external view returns (uint balance);\r\n\tfunction transfer(address to, uint value) external returns (bool success);\r\n\tfunction transferFrom(address from, address to, uint value) external returns (bool success);\r\n\tfunction approve(address spender, uint value) external returns (bool success);\r\n\tfunction allowance(address owner, address spender) external view returns (uint remaining);\r\n}\r\n\r\ninterface ERC165 {\r\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n}\r\n\r\ncontract NetworkChecker {\r\n\t\r\n\taddress constant private MAINNET_MILESTONE_ADDRESS = 0xa6e90A28F446D3639916959B6087F68D9B83fca9;\r\n\taddress constant private KOVAN_MILESTONE_ADDRESS = 0x9a6Dc2a58256239500D96fb6f13D73b70C3d88f9;\r\n\taddress constant private ROPSTEN_MILESTONE_ADDRESS = 0x212cC55dd760Ec5352185A922c61Ac41c8dDB197;\r\n\taddress constant private RINKEBY_MILESTONE_ADDRESS = 0x54d1991a37cbA30E5371F83e8c2B1F762c7096c2;\r\n\t\r\n\tenum Network {\r\n\t\tMainnet,\r\n\t\tKovan,\r\n\t\tRopsten,\r\n\t\tRinkeby,\r\n\t\tUnknown\r\n\t}\r\n\t\r\n\tNetwork public network;\r\n\t\r\n\t// Checks if the given address is a smart contract.\r\n\t// 주어진 주소가 스마트 계약인지 확인합니다.\r\n\tfunction checkIsSmartContract(address addr) private view returns (bool) {\r\n\t\tuint32 size;\r\n\t\tassembly { size := extcodesize(addr) }\r\n\t\treturn size > 0;\r\n\t}\r\n\t\r\n\tconstructor() public {\r\n\t\t\r\n\t\t// Checks if the contract runs on the main network.\r\n\t\t// Main 네트워크인지 확인합니다.\r\n\t\tif (checkIsSmartContract(MAINNET_MILESTONE_ADDRESS) == true) {\r\n\t\t\t(bool success, ) = MAINNET_MILESTONE_ADDRESS.call(abi.encodeWithSignature(\"helloMainnet()\"));\r\n\t\t\tif (success == true) {\r\n\t\t\t\tnetwork = Network.Mainnet;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// Checks if the contract is in the Kovan network.\r\n\t\t// Kovan 네트워크인지 확인합니다.\r\n\t\tif (checkIsSmartContract(KOVAN_MILESTONE_ADDRESS) == true) {\r\n\t\t\t(bool success, ) = KOVAN_MILESTONE_ADDRESS.call(abi.encodeWithSignature(\"helloKovan()\"));\r\n\t\t\tif (success == true) {\r\n\t\t\t\tnetwork = Network.Kovan;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// Checks if the contract is in the Ropsten network.\r\n\t\t// Ropsten 네트워크인지 확인합니다.\r\n\t\tif (checkIsSmartContract(ROPSTEN_MILESTONE_ADDRESS) == true) {\r\n\t\t\t(bool success, ) = ROPSTEN_MILESTONE_ADDRESS.call(abi.encodeWithSignature(\"helloRopsten()\"));\r\n\t\t\tif (success == true) {\r\n\t\t\t\tnetwork = Network.Ropsten;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// Checks if the contract is in the Rinkeby network.\r\n\t\t// Rinkeby 네트워크인지 확인합니다.\r\n\t\tif (checkIsSmartContract(RINKEBY_MILESTONE_ADDRESS) == true) {\r\n\t\t\t(bool success, ) = RINKEBY_MILESTONE_ADDRESS.call(abi.encodeWithSignature(\"helloRinkeby()\"));\r\n\t\t\tif (success == true) {\r\n\t\t\t\tnetwork = Network.Rinkeby;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// The network is unknown.\r\n\t\t// 알 수 없는 네트워크\r\n\t\tnetwork = Network.Unknown;\r\n\t}\r\n}\r\n\r\n// This library is for preventing overflow problems while calculating numbers.\r\n// 숫자 계산 시 오버플로우 문제를 방지하기 위한 라이브러리\r\nlibrary SafeMath {\r\n\t\r\n\tfunction add(uint a, uint b) pure internal returns (uint c) {\r\n\t\tc = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction sub(uint a, uint b) pure internal returns (uint c) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\t\r\n\tfunction mul(uint a, uint b) pure internal returns (uint c) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tc = a * b;\r\n\t\tassert(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction div(uint a, uint b) pure internal returns (uint c) {\r\n\t\treturn a / b;\r\n\t}\r\n}\r\n\r\ncontract DPlayCoin is DPlayCoinInterface, ERC20, ERC165, NetworkChecker {\r\n\tusing SafeMath for uint;\r\n\t\r\n\t// Token information\r\n\t// 토큰 정보\r\n\tstring constant private NAME = \"DPlay Coin\";\r\n\tstring constant private SYMBOL = \"DC\";\r\n\tuint8 constant private DECIMALS = 18;\r\n\tuint constant private TOTAL_SUPPLY = 10000000000 * (10 ** uint(DECIMALS));\r\n\t\r\n\tmapping(address => uint) private balances;\r\n\tmapping(address => mapping(address => uint)) private allowed;\r\n\t\r\n\t// The two addresses below are the addresses of the trusted smart contract, and don't need to be allowed.\r\n\t// 아래 두 주소는 신뢰하는 스마트 계약의 주소로 허락받을 필요가 없습니다.\r\n\t\r\n\t// The address of DPlay store\r\n\t// DPlay 스토어 주소\r\n\taddress public dplayStore;\r\n\t\r\n\t// The address of DPlay trading post\r\n\t// DPlay 교역소 주소\r\n\taddress public dplayTradingPost;\r\n\t\r\n\tconstructor() NetworkChecker() public {\r\n\t\t\r\n\t\tbalances[msg.sender] = TOTAL_SUPPLY;\r\n\t\t\r\n\t\temit Transfer(address(0x0), msg.sender, TOTAL_SUPPLY);\r\n\t}\r\n\t\r\n\t// Sets the address of DPlay store. (Done only once.)\r\n\t// DPlay 스토어 주소를 지정합니다. (단 한번만 가능합니다.)\r\n\tfunction setDPlayStoreOnce(address addr) external {\r\n\t\t\r\n\t\t// 비어있는 주소인 경우에만\r\n\t\trequire(dplayStore == address(0));\r\n\t\t\r\n\t\tdplayStore = addr;\r\n\t}\r\n\t\r\n\t// Sets the address of DPlay trading post. (Done only once.)\r\n\t// DPlay 교역소 주소를 지정합니다. (단 한번만 가능합니다.)\r\n\tfunction setDPlayTradingPostOnce(address addr) external {\r\n\t\t\r\n\t\t// Only an unused address can be used.\r\n\t\t// 비어있는 주소인 경우에만\r\n\t\trequire(dplayTradingPost == address(0));\r\n\t\t\r\n\t\tdplayTradingPost = addr;\r\n\t}\r\n\t\r\n\t// Checks if the address is misued.\r\n\t// 주소를 잘못 사용하는 것인지 체크 \r\n\tfunction checkAddressMisused(address target) internal view returns (bool) {\r\n\t\treturn\r\n\t\t\ttarget == address(0) ||\r\n\t\t\ttarget == address(this);\r\n\t}\r\n\t\r\n\t//ERC20: Returns the name of the token.\r\n\t//ERC20: 토큰의 이름 반환\r\n\tfunction name() external view returns (string memory) {\r\n\t\treturn NAME;\r\n\t}\r\n\t\r\n\t//ERC20: Returns the symbol of the token.\r\n\t//ERC20: 토큰의 심볼 반환\r\n\tfunction symbol() external view returns (string memory) {\r\n\t\treturn SYMBOL;\r\n\t}\r\n\t\r\n\t//ERC20: Returns the decimals of the token.\r\n\t//ERC20: 토큰의 소수점 반환\r\n\tfunction decimals() external view returns (uint8) {\r\n\t\treturn DECIMALS;\r\n\t}\r\n\t\r\n\t//ERC20: Returns the total number of tokens.\r\n\t//ERC20: 전체 토큰 수 반환\r\n\tfunction totalSupply() external view returns (uint) {\r\n\t\treturn TOTAL_SUPPLY;\r\n\t}\r\n\t\r\n\t//ERC20: Returns the number of tokens of a specific user.\r\n\t//ERC20: 특정 유저의 토큰 수를 반환합니다.\r\n\tfunction balanceOf(address user) external view returns (uint balance) {\r\n\t\treturn balances[user];\r\n\t}\r\n\t\r\n\t//ERC20: Transmits tokens to a specific user.\r\n\t//ERC20: 특정 유저에게 토큰을 전송합니다.\r\n\tfunction transfer(address to, uint amount) external returns (bool success) {\r\n\t\t\r\n\t\t// Blocks misuse of an address.\r\n\t\t// 주소 오용 차단\r\n\t\trequire(checkAddressMisused(to) != true);\r\n\t\t\r\n\t\trequire(amount <= balances[msg.sender]);\r\n\t\t\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(amount);\r\n\t\tbalances[to] = balances[to].add(amount);\r\n\t\t\r\n\t\temit Transfer(msg.sender, to, amount);\r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t//ERC20: Grants rights to send the amount of tokens to the spender.\r\n\t//ERC20: spender에 amount만큼의 토큰을 보낼 권리를 부여합니다.\r\n\tfunction approve(address spender, uint amount) external returns (bool success) {\r\n\t\t\r\n\t\tallowed[msg.sender][spender] = amount;\r\n\t\t\r\n\t\temit Approval(msg.sender, spender, amount);\r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t//ERC20: Returns the quantity of tokens to the spender\r\n\t//ERC20: spender가 인출하도록 허락 받은 토큰의 양을 반환합니다.\r\n\tfunction allowance(address user, address spender) external view returns (uint remaining) {\r\n\t\t\r\n\t\tif (\r\n\t\t// DPlay 스토어와 교역소는 모든 토큰을 전송할 수 있습니다.\r\n\t\tspender == dplayStore ||\r\n\t\tspender == dplayTradingPost) {\r\n\t\t\treturn balances[user];\r\n\t\t}\r\n\t\t\r\n\t\treturn allowed[user][spender];\r\n\t}\r\n\t\r\n\t//ERC20: The allowed spender sends the \"amount\" of tokens from the \"from\" to the \"to\".\r\n\t//ERC20: 허락된 spender가 from으로부터 amount만큼의 토큰을 to에게 전송합니다.\r\n\tfunction transferFrom(address from, address to, uint amount) external returns (bool success) {\r\n\t\t\r\n\t\t// Blocks misuse of an address.\r\n\t\t// 주소 오용 차단\r\n\t\trequire(checkAddressMisused(to) != true);\r\n\t\t\r\n\t\trequire(amount <= balances[from]);\r\n\t\t\r\n\t\trequire(\r\n\t\t\t// DPlay 스토어와 교역소는 모든 토큰을 전송할 수 있습니다.\r\n\t\t\tmsg.sender == dplayStore ||\r\n\t\t\tmsg.sender == dplayTradingPost ||\r\n\t\t\t\r\n\t\t\tamount <= allowed[from][msg.sender]\r\n\t\t);\r\n\t\t\r\n\t\tbalances[from] = balances[from].sub(amount);\r\n\t\tbalances[to] = balances[to].add(amount);\r\n\t\t\r\n\t\tif (\r\n\t\t\tmsg.sender != dplayStore &&\r\n\t\t\tmsg.sender != dplayTradingPost\r\n\t\t) {\r\n\t\t\tallowed[from][msg.sender] = allowed[from][msg.sender].sub(amount);\r\n\t\t}\r\n\t\t\r\n\t\temit Transfer(from, to, amount);\r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t//ERC165: Checks if the given interface has been implemented.\r\n\t//ERC165: 주어진 인터페이스가 구현되어 있는지 확인합니다.\r\n\tfunction supportsInterface(bytes4 interfaceID) external view returns (bool) {\r\n\t\treturn\r\n\t\t\t// ERC165\r\n\t\t\tinterfaceID == this.supportsInterface.selector ||\r\n\t\t\t// ERC20\r\n\t\t\tinterfaceID == 0x942e8b22 ||\r\n\t\t\tinterfaceID == 0x36372b07;\r\n\t}\r\n\t\r\n\t// Returns the DC power.\r\n\t// DC 파워를 반환합니다.\r\n\tfunction getPower(address user) external view returns (uint power) {\r\n\t\treturn balances[user];\r\n\t}\r\n\t\r\n\t// Creates DCs for testing.\r\n\t// 테스트용 DC를 생성합니다.\r\n\tfunction createDCForTest(uint amount) external {\r\n\t\tif (network == Network.Mainnet) {\r\n\t\t\trevert();\r\n\t\t} else {\r\n\t\t\tbalances[msg.sender] += amount;\r\n\t\t}\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setDPlayTradingPostOnce\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPower\",\"outputs\":[{\"name\":\"power\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"network\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"createDCForTest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setDPlayStoreOnce\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dplayStore\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dplayTradingPost\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"DPlayCoin","CompilerVersion":"v0.5.9+commit.e560f70d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://dd0cf612ea801cb3eb071890f1c6ba7b056fec0ba556eb18a1c800722adf3715"}]}