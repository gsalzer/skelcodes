{"status":"1","message":"OK","result":[{"SourceCode":"\n// File: contracts/gluon/GluonView.sol\n\npragma solidity 0.5.12;\n\n\ninterface GluonView {\n  function app(uint32 id) external view returns (address current, address proposal, uint activationBlock);\n  function current(uint32 id) external view returns (address);\n  function history(uint32 id) external view returns (address[] memory);\n  function getBalance(uint32 id, address asset) external view returns (uint);\n  function isAnyLogic(uint32 id, address logic) external view returns (bool);\n  function isAppOwner(uint32 id, address appOwner) external view returns (bool);\n  function proposals(address logic) external view returns (bool);\n  function totalAppsCount() external view returns(uint32);\n}\n\n// File: contracts/gluon/GluonCentric.sol\n\npragma solidity 0.5.12;\n\n\n\ncontract GluonCentric {\n  uint32 internal constant REGISTRY_INDEX = 0;\n  uint32 internal constant STAKE_INDEX = 1;\n\n  uint32 public id;\n  address public gluon;\n\n  constructor(uint32 id_, address gluon_) public {\n    id = id_;\n    gluon = gluon_;\n  }\n\n  modifier onlyCurrentLogic { require(currentLogic() == msg.sender, \"invalid sender; must be current logic contract\"); _; }\n  modifier onlyGluon { require(gluon == msg.sender, \"invalid sender; must be gluon contract\"); _; }\n  modifier onlyOwner { require(GluonView(gluon).isAppOwner(id, msg.sender), \"invalid sender; must be app owner\"); _; }\n\n  function currentLogic() public view returns (address) { return GluonView(gluon).current(id); }\n}\n\n// File: contracts/apps/registry/RegistryData.sol\n\npragma solidity 0.5.12;\n\n\n\ncontract RegistryData is GluonCentric {\n\n  mapping(address => address) public accounts;\n\n  constructor(address gluon) GluonCentric(REGISTRY_INDEX, gluon) public { }\n\n  function addKey(address apiKey, address account) external onlyCurrentLogic {\n    accounts[apiKey] = account;\n  }\n\n}\n","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gluon\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accounts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"apiKey\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addKey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentLogic\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gluon\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"id\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"RegistryData","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000075ace7a086ea0fb1a79e43cc6331ad053d8c67cb","Library":"","LicenseType":"","SwarmSource":"bzzr://5c00d3a7aeb580c91e0c5fe4733b2bd82586daeacfe981ffa714dda34de76cc9"}]}