{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ninterface TubInterface {\r\n    function tab(bytes32) external view returns (uint);\r\n    function rap(bytes32) external view returns (uint);\r\n    function pep() external view returns (PepInterface);\r\n    function cups(bytes32) external view returns (address, uint, uint, uint);\r\n}\r\n\r\ninterface PepInterface {\r\n    function peek() external view returns (bytes32, bool);\r\n}\r\n\r\ninterface InstaMcdAddress {\r\n    function dai() external view returns (address);\r\n    function gov() external view returns (address);\r\n    function saiTub() external view returns (address);\r\n    function weth() external view returns (address);\r\n    function sai() external view returns (address);\r\n}\r\n\r\ninterface UniswapExchange {\r\n    function getEthToTokenOutputPrice(uint256 tokensBought) external view returns (uint256 ethSold);\r\n    function getTokenToEthOutputPrice(uint256 ethBought) external view returns (uint256 tokensSold);\r\n}\r\n\r\ninterface UniswapFactoryInterface {\r\n    function getExchange(address token) external view returns (address exchange);\r\n}\r\n\r\ninterface OtcInterface {\r\n    function getPayAmount(address, address, uint) external view returns (uint);\r\n}\r\n\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    // uint constant RAY = 10 ** 27;\r\n\r\n    // function rmul(uint x, uint y) internal pure returns (uint z) {\r\n    //     z = add(mul(x, y), RAY / 2) / RAY;\r\n    // }\r\n\r\n    // function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n    //     z = add(mul(x, RAY), y / 2) / y;\r\n    // }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract CdpFee is DSMath {\r\n\r\n    address public instaMcdAddress = 0x5092b94F61b1aa54969C67b58695a6fB15D70645;\r\n    address public otcAddr = 0x39755357759cE0d7f32dC8dC45414CCa409AE24e;\r\n    address public ethAddr = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address public uniMkrEx = 0x2C4Bd064b998838076fa341A83d007FC2FA50957;\r\n    address public uniFactory = 0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95;\r\n    address public peekAddr = 0x5C1fc813d9c1B5ebb93889B3d63bA24984CA44B7;\r\n    address public mkr = 0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2;\r\n    address public weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    \r\n    function getMkrRate() public view returns (uint mkrInUsd) {\r\n        (bytes32 val,) = PepInterface(peekAddr).peek();\r\n        mkrInUsd = uint(val);\r\n    }\r\n\r\n    function getBestMkrSwap(address srcTknAddr, uint destMkrAmt) public view returns(uint bestEx, uint srcAmt) {\r\n        uint oasisPrice = getOasisSwap(srcTknAddr, destMkrAmt);\r\n        uint uniswapPrice = getUniswapSwap(srcTknAddr, destMkrAmt);\r\n        srcAmt = oasisPrice < uniswapPrice ? oasisPrice : uniswapPrice;\r\n        bestEx = oasisPrice < uniswapPrice ? 0 : 1; // if 0 then use Oasis for Swap, if 1 then use Uniswap\r\n    }\r\n\r\n    function getOasisSwap(address tokenAddr, uint destMkrAmt) public view returns(uint srcAmt) {\r\n        address srcTknAddr = tokenAddr == ethAddr ? weth : tokenAddr;\r\n        srcAmt = OtcInterface(otcAddr).getPayAmount(srcTknAddr, mkr, destMkrAmt);\r\n    }\r\n\r\n    function getUniswapSwap(address srcTknAddr, uint destMkrAmt) public view returns(uint srcAmt) {\r\n        UniswapExchange mkrEx = UniswapExchange(uniMkrEx);\r\n        if (srcTknAddr == ethAddr) {\r\n            srcAmt = mkrEx.getEthToTokenOutputPrice(destMkrAmt);\r\n        } else {\r\n            address buyTknExAddr = UniswapFactoryInterface(uniFactory).getExchange(srcTknAddr);\r\n            UniswapExchange buyTknEx = UniswapExchange(buyTknExAddr);\r\n            srcAmt = buyTknEx.getTokenToEthOutputPrice(mkrEx.getEthToTokenOutputPrice(destMkrAmt)); //Check thrilok is this correct\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"peekAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"srcTknAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"destMkrAmt\",\"type\":\"uint256\"}],\"name\":\"getBestMkrSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bestEx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"srcAmt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"otcAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniMkrEx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"destMkrAmt\",\"type\":\"uint256\"}],\"name\":\"getOasisSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"srcAmt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMkrRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mkrInUsd\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mkr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"instaMcdAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"srcTknAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"destMkrAmt\",\"type\":\"uint256\"}],\"name\":\"getUniswapSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"srcAmt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CdpFee","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://da219193c70cc2ccdf60ca284b914183a121605c2c454445309ce2d0ba2ed899"}]}