{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.7;\r\n\r\n// TG Team Fund\r\n//   Freezed till 2022-12-31 23:59:59, (timestamp 1625039999).\r\n//   Release 10% per 3 months.\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient,\r\n     * reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b > 0);\r\n        uint256 c = a / b;\r\n        assert(a == b * c + a % b);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n */\r\ncontract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract\r\n     * to the sender account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0));\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw Ether\r\n     */\r\n    function withdrawEther(address payable to, uint256 amount) external onlyOwner {\r\n        require(to != address(0));\r\n\r\n        uint256 balance = address(this).balance;\r\n\r\n        require(balance >= amount);\r\n        to.transfer(amount);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20{\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n}\r\n\r\n\r\n/**\r\n * @title TG Team Fund\r\n */\r\ncontract TGTeamFund is Ownable{\r\n    using SafeMath for uint256;\r\n\r\n    IERC20 public TG;\r\n\r\n    uint256 private _till = 1671606000;\r\n    uint256 private _TGAmount = 4200000000000000; // 4.2 billion\r\n    uint256 private _3mo = 2592000; // Three months: 2,592,000 seconds\r\n\r\n    uint256[10] private _freezedPct = [\r\n        100,    // 100%\r\n        90,     // 90%\r\n        80,     // 80%\r\n        70,     // 70%\r\n        60,     // 60%\r\n        50,     // 50%\r\n        40,     // 40%\r\n        30,     // 30%\r\n        20,     // 20%\r\n        10      // 10%\r\n    ];\r\n\r\n    event Donate(address indexed account, uint256 amount);\r\n\r\n\r\n    /**\r\n     * @dev constructor\r\n     */\r\n    constructor() public {}\r\n\r\n    /**\r\n     * @dev TG freezed amount.\r\n     */\r\n    function TGFreezed() public view returns (uint256) {\r\n        uint256 __freezed;\r\n\r\n        if (now > _till) {\r\n            uint256 __qrPassed = now.sub(_till).div(_3mo);\r\n\r\n            if (__qrPassed >= 10) {\r\n                __freezed = 0;\r\n            }\r\n            else {\r\n                __freezed = _TGAmount.mul(_freezedPct[__qrPassed]).div(100);\r\n            }\r\n\r\n            return __freezed;\r\n        }\r\n\r\n        return _TGAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Donate\r\n     */\r\n    function () external payable {\r\n        emit Donate(msg.sender, msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev transfer TG\r\n     */\r\n    function transferTG(address to, uint256 amount) external onlyOwner {\r\n        uint256 __freezed = TGFreezed();\r\n        uint256 __released = TG.balanceOf(address(this)).sub(__freezed);\r\n\r\n        require(__released >= amount);\r\n\r\n        assert(TG.transfer(to, amount));\r\n    }\r\n\r\n    /**\r\n     * @dev Rescue compatible ERC20 Token, except \"TG\"\r\n     *\r\n     * @param tokenAddr ERC20 The address of the ERC20 token contract\r\n     * @param receiver The address of the receiver\r\n     * @param amount uint256\r\n     */\r\n    function rescueTokens(address tokenAddr, address receiver, uint256 amount) external onlyOwner {\r\n        IERC20 _token = IERC20(tokenAddr);\r\n        require(TG != _token);\r\n        require(receiver != address(0));\r\n\r\n        uint256 balance = _token.balanceOf(address(this));\r\n        require(balance >= amount);\r\n        assert(_token.transfer(receiver, amount));\r\n    }\r\n\r\n    /**\r\n     * @dev set TG Address\r\n     */\r\n    function setTGAddress(address _TGAddr) public onlyOwner {\r\n        TG = IERC20(_TGAddr);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferTG\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_TGAddr\",\"type\":\"address\"}],\"name\":\"setTGAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TG\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddr\",\"type\":\"address\"},{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TGFreezed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Donate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TGTeamFund","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://15c59087ceeead3dac6140f457f23825bd05455cf536667553d2be3bda9e05dc"}]}