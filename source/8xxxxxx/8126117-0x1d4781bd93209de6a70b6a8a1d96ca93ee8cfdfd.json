{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.6.0;\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner,\"Only the owner of the contract can use this function\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    \r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\ncontract Pausable is Owned {\r\n    bool internal _paused;\r\n    \r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n    \r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n}\r\n\r\ncontract aaaaaa is ERC20Interface, Owned, Pausable {\r\n        \r\n    using SafeMath for uint;\r\n    \r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n    mapping(address => uint)blockedTime;\r\n   \r\n    uint _totalSupply;\r\n    \r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals;\r\n    uint public ownersRemaining;\r\n\r\n    event Pause(address indexed sender);\r\n    event Unpause(address indexed sender);\r\n    event Burn(address indexed from,address indexed to, uint tokens, address indexed sender);\r\n    event Mint(uint tokenIncrease, address indexed sender);\r\n    \r\n    constructor () public {\r\n        symbol = \"IZT\";\r\n        name = \"iZiFinance Token\";\r\n        decimals = 0;\r\n        _totalSupply = 10000000;\r\n        balances[owner] = _totalSupply;\r\n        ownersRemaining = 3;\r\n        emit Transfer(address(0), owner, _totalSupply);\r\n    }\r\n    \r\n    modifier notBlocked(){\r\n        require(blockedTime[msg.sender] <= now,\"Blocked: There still blocked time remaining\");\r\n        _;\r\n    }\r\n    \r\n    //ERC20\r\n    function totalSupply() public view returns (uint){\r\n        return _totalSupply.sub(balances[address(0)]);\r\n    }\r\n    \r\n    function balanceOf(address tokenOwner) public view returns (uint balance){\r\n        return balances[tokenOwner];\r\n    }\r\n    \r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining){\r\n        return allowed[tokenOwner][spender];        \r\n    }\r\n    \r\n    function transfer(address to, uint tokens) public whenNotPaused notBlocked returns (bool success){\r\n        require(balances[msg.sender] >= tokens,\"Insufficient balance\");\r\n        require(tokens > 0,\"Can't send a negative amount of tokens\");\r\n        require(to != address(0x0),\"Can't send to a null address\");\r\n        executeTransfer(msg.sender,to, tokens);\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n    \r\n    function approve(address spender, uint tokens) public whenNotPaused notBlocked returns (bool success){\r\n        require(balances[msg.sender] >= tokens,\"Insufficient amount of tokens\");\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n        \r\n    }\r\n    \r\n    function transferFrom(address from, address to, uint tokens) public whenNotPaused notBlocked returns (bool success){\r\n        require(balances[from] >= tokens,\"Insufficient balance\");\r\n        require(allowed[from][msg.sender] >= tokens,\"Insufficient allowance\");\r\n        require(tokens > 0,\"Can't send a negative amount of tokens\");\r\n        require(to != address(0x0),\"Can't send to a null address\");\r\n        executeTransfer(from, to, tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n    \r\n    //iZiFinance Token\r\n    function executeTransfer(address from,address to, uint tokens) private{\r\n        uint previousBalances = balances[from] + balances[to];\r\n        balances[from] = balances[from].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        require((balances[from] + balances[to] == previousBalances),\"The balance overflowed\");\r\n    }\r\n    \r\n    //Pausable\r\n    function pause() public onlyOwner whenNotPaused {\r\n        _paused = true;\r\n        emit Pause(msg.sender);\r\n    }\r\n\r\n    function unpause() public onlyOwner whenPaused {\r\n        _paused = false;\r\n        emit Unpause(msg.sender);\r\n    }\r\n    \r\n    //Mintable\r\n    function mint(uint tokenIncrease) public whenNotPaused onlyOwner{\r\n        require(tokenIncrease > 0,\"Can't mint a negative number\");\r\n        uint oldTotalSupply = _totalSupply;\r\n        _totalSupply = _totalSupply.add(tokenIncrease);\r\n        balances[owner] = balances[owner].add(tokenIncrease);\r\n        emit Mint(tokenIncrease, msg.sender);\r\n        require(_totalSupply > oldTotalSupply,\"Total supply overflowed\");\r\n    }\r\n    \r\n    //Burnable\r\n    function burnTokens(address from, address to)public whenNotPaused onlyOwner{\r\n        require(to != address(0x0),\"Can't send to a null address\");\r\n        uint previousBalances = balances[from] + balances[to];\r\n        uint oldbalance = balanceOf(from);\r\n        balances[from] = balances[from].sub(oldbalance);\r\n        balances[address(0x0)] = balances[address(0x0)].add(oldbalance);\r\n        emit Transfer(from,address(0x0),oldbalance);\r\n        mint(oldbalance);\r\n        balances[owner] = balances[owner].sub(oldbalance);\r\n        balances[to] = balances[to].add(oldbalance);\r\n        emit Burn(from, to, oldbalance,msg.sender);\r\n        require((balances[from] + balances[to] == previousBalances),\"The balance overflowed\");\r\n    }\r\n    \r\n    //Initial Owner Transfer\r\n    function sendToOwners(address to, uint value) public whenNotPaused onlyOwner{\r\n        require(ownersRemaining > 0,\"All initial owners were already set\");\r\n        uint oldUsers = ownersRemaining;\r\n        executeTransfer(owner,to,value);\r\n        blockedTime[to] = now + 1095 days;\r\n        ownersRemaining = ownersRemaining - 1;\r\n        emit Transfer(owner, to, value);\r\n        assert(ownersRemaining < oldUsers);\r\n    }\r\n    \r\n    function seeBlockedTime(address adressBlocked) public view returns (uint){\r\n        return blockedTime[adressBlocked];\r\n    }\r\n    \r\n    function seeNow() public view returns (uint){\r\n        return now;\r\n    }\r\n    \r\n    //Fallback\r\n    function () external payable {\r\n        revert();\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"sendToOwners\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownersRemaining\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seeNow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenIncrease\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adressBlocked\",\"type\":\"address\"}],\"name\":\"seeBlockedTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenIncrease\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"aaaaaa","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5b12d0c8fa48d8c933efc78fe6dbed5c672b7bfa468a08b9eb24732ad94e3e50"}]}