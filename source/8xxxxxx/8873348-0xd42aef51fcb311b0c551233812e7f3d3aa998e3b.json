{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.11;\r\n\r\n\r\ninterface IERC20 {\r\n  function balanceOf(address) external view returns (uint256);\r\n}\r\n\r\n\r\ncontract DepositStateChecker {\r\n  enum DepositState {\r\n    NoContractNoFunds,\r\n    NoContractDust,\r\n    NoContractSufficientFunds,\r\n    ContractNoFunds,\r\n    ContractDust,\r\n    ContractSufficientFunds\r\n  }\r\n    \r\n  IERC20 internal constant _DAI = IERC20(\r\n    0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359 // mainnet\r\n  );\r\n\r\n  IERC20 internal constant _USDC = IERC20(\r\n    0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48 // mainnet\r\n  );\r\n  \r\n  // Minimum supported deposit & non-maximum withdrawal size is .001 underlying.\r\n  uint256 private constant _JUST_UNDER_ONE_1000th_DAI = 999999999999999;\r\n  uint256 private constant _JUST_UNDER_ONE_1000th_USDC = 999;\r\n  \r\n  function getDepositStates(\r\n    address[] calldata smartWallets\r\n  ) external view returns (\r\n    DepositState[] memory depositStates\r\n  ) {\r\n    depositStates = new DepositState[](smartWallets.length);\r\n    address smartWallet;\r\n    uint256 size;\r\n    uint256 daiBalance;\r\n    uint256 usdcBalance;\r\n    for (uint256 i = 0; i < smartWallets.length; i++) {\r\n      smartWallet = smartWallets[i];\r\n      assembly { size := extcodesize(smartWallet) }\r\n      \r\n      daiBalance = _DAI.balanceOf(smartWallet);\r\n      if (daiBalance > _JUST_UNDER_ONE_1000th_DAI) {\r\n        depositStates[i] = (\r\n          size == 0 ?\r\n            DepositState.NoContractSufficientFunds :\r\n            DepositState.ContractSufficientFunds\r\n        );\r\n        continue;\r\n      }\r\n      \r\n      usdcBalance = _USDC.balanceOf(smartWallet);\r\n      if (daiBalance > _JUST_UNDER_ONE_1000th_DAI) {\r\n        depositStates[i] = (\r\n          size == 0 ?\r\n            DepositState.NoContractSufficientFunds :\r\n            DepositState.ContractSufficientFunds\r\n        );\r\n        continue;\r\n      }\r\n      \r\n      if (daiBalance == 0 && usdcBalance == 0) {\r\n        depositStates[i] = (\r\n          size == 0 ?\r\n            DepositState.NoContractNoFunds :\r\n            DepositState.ContractNoFunds\r\n        );\r\n      } else {\r\n        depositStates[i] = (\r\n          size == 0 ?\r\n            DepositState.NoContractDust :\r\n            DepositState.ContractDust\r\n        );\r\n      }\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"smartWallets\",\"type\":\"address[]\"}],\"name\":\"getDepositStates\",\"outputs\":[{\"internalType\":\"enum DepositStateChecker.DepositState[]\",\"name\":\"depositStates\",\"type\":\"uint8[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DepositStateChecker","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://0ea623140dd10c3c5da259b0e05ccdd8af106ca44934942bb79e0d245a82baee"}]}