{"status":"1","message":"OK","result":[{"SourceCode":"{\"ERC20Interface.sol\":{\"content\":\"pragma solidity ^0.4.24;\\r\\n\\r\\n// ----------------------------------------------------------------------------\\r\\n// ERC Token Standard #20 Interface\\r\\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\\r\\n// ----------------------------------------------------------------------------\\r\\ncontract ERC20Interface {\\r\\n    function totalSupply() public view returns (uint256);\\r\\n    function balanceOf(address tokenOwner) public view returns (uint256 balance);\\r\\n    function allowance(address tokenOwner, address spender) public view returns (uint256 remaining);\\r\\n    function transfer(address to, uint256 tokens) public returns (bool success);\\r\\n    function approve(address spender, uint256 tokens) public returns (bool success);\\r\\n    function transferFrom(address from, address to, uint256 tokens) public returns (bool success);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\\r\\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.4.24;\\r\\n\\r\\n// ----------------------------------------------------------------------------\\r\\n// Safe maths\\r\\n// ----------------------------------------------------------------------------\\r\\nlibrary SafeMath {\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        c = a + b;\\r\\n        require(c \\u003e= a);\\r\\n        return c;\\r\\n    }\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        require(b \\u003c= a);\\r\\n        c = a - b;\\r\\n        return c;\\r\\n    }\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        c = a * b;\\r\\n        require(c / a == b);\\r\\n        return c;\\r\\n    }\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        require(b != 0);\\r\\n        c = a / b;\\r\\n        return c;\\r\\n    }\\r\\n}\"},\"SLSToken.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./ERC20Interface.sol\\\";\\n\\ncontract SLSToken is ERC20Interface{\\n    using SafeMath for uint256;\\n    using SafeMath for uint8;\\n    \\n    event ListLog(address addr, uint8 indexed typeNo, bool active);\\n    event Trans(address indexed fromAddr, address indexed toAddr, uint256 transAmount, uint64 time);\\n    event OwnershipTransferred(address indexed _from, address indexed _to);\\n    event Deposit(address indexed sender, uint value);\\n\\n    string public symbol;\\n    string public name;\\n    uint8 public decimals;    \\n    uint256 public _totalSupply;\\n    \\n    address public owner;\\n    address private ownerContract = address(0x0);\\n\\n    mapping(address =\\u003e uint256) balances;\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) allowed;\\n    \\n    mapping(address =\\u003e bool) public blackList;\\n    \\n    constructor() public {\\n        symbol = \\\"SLS\\\";\\n        name = \\\"SLS Coin\\\";\\n        owner = msg.sender;\\n        decimals = 2;\\n        \\n        _totalSupply = 600 * 10**uint256(decimals);\\n        balances[owner] = _totalSupply;\\n        \\n        emit ListLog(owner, 1, true);\\n        emit Transfer(address(0x0), owner, _totalSupply);\\n    }\\n    \\n    function AssignOwner(address _ownerContract) \\n    public \\n    onlyOwner \\n    notNull(_ownerContract) \\n    {\\n        uint256 remainTokens = balances[owner];\\n        ownerContract = _ownerContract;\\n        balances[owner] = 0;\\n        balances[ownerContract] = balances[ownerContract].add(remainTokens);\\n        emit Transfer(owner, ownerContract, remainTokens);\\n        emit OwnershipTransferred(owner, ownerContract);\\n        owner = ownerContract;\\n    }\\n\\n    function transfer(address _to, uint256 _value) \\n    public \\n    notNull(_to) \\n    returns (bool success) \\n    {\\n        require(balances[msg.sender] \\u003e= _value);\\n        success = _transfer(msg.sender, _to, _value);\\n        require(success);\\n\\n\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(_value);\\n        \\n        emit Trans(msg.sender, _to, _value, uint64(now));\\n        return true;\\n    }\\n\\n    function transferFrom(address _from, address _to, uint256 _value) \\n    public \\n    notNull(_to) \\n    returns (bool success) \\n    {\\n        \\n        require(balances[_from] \\u003e= _value);\\n        require(allowed[_from][msg.sender] \\u003e= _value);\\n\\n        success = _transfer(_from, _to, _value);\\n        require(success);\\n\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(_value);\\n\\n        emit Trans(_from, _to, _value, uint64(now));\\n        return true;\\n    }\\n\\n\\n    function _transfer(address _from, address _to, uint256 _value) \\n    internal \\n    notNull(_from) \\n    notNull(_to) \\n    returns (bool) \\n    {\\n        require(!blackList[_from]);\\n        require(!blackList[_to]);       \\n        \\n        \\n        emit Transfer(_from, _to, _value);\\n        \\n        return true;\\n    }\\n\\n    function approve(address _spender, uint256 _value) \\n    public \\n    returns (bool success) \\n    {\\n        if ((_value != 0) \\u0026\\u0026 (allowed[msg.sender][_spender] != 0)) {\\n            return false;\\n        }\\n\\n        allowed[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    function allowance(address _tokenOwner, address _spender) \\n    public \\n    view \\n    returns (uint256 remaining) \\n    {\\n        return allowed[_tokenOwner][_spender];\\n    }\\n    \\n    function() \\n    payable\\n    {\\n        if (msg.value \\u003e 0)\\n            emit Deposit(msg.sender, msg.value);\\n    }\\n\\n    function tokenFallback(address from_, uint256 value_, bytes data_) \\n    external \\n    {\\n        from_;\\n        value_;\\n        data_;\\n        revert();\\n    }\\n    \\n    // ------------------------------------------------------------------------\\n    // Modifiers\\n    // ------------------------------------------------------------------------\\n    modifier onlyOwner {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    modifier notNull(address _address) {\\n        require(_address != address(0x0));\\n        _;\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // onlyOwner API\\n    // ------------------------------------------------------------------------\\n    \\n    \\n    function addBlacklist(address _addr) public notNull(_addr) onlyOwner {\\n        blackList[_addr] = true; \\n        emit ListLog(_addr, 3, true);\\n    }\\n    \\n    function delBlackList(address _addr) public notNull(_addr) onlyOwner {\\n        delete blackList[_addr];                \\n        emit ListLog(_addr, 3, false);\\n    }\\n\\n    function transferAnyERC20Token(address _tokenAddress, uint256 _tokens) \\n    public \\n    onlyOwner \\n    returns (bool success) \\n    {\\n        return ERC20Interface(_tokenAddress).transfer(owner, _tokens);\\n    }\\n\\n    function mintToken(address _targetAddr, uint256 _mintedAmount) \\n    public \\n    onlyOwner \\n    {\\n        balances[_targetAddr] = balances[_targetAddr].add(_mintedAmount);\\n        _totalSupply = _totalSupply.add(_mintedAmount);\\n        \\n        emit Transfer(address(0x0), _targetAddr, _mintedAmount);\\n    }\\n \\n    function burnToken(uint256 _burnedAmount) \\n    public \\n    onlyOwner \\n    {\\n        require(balances[owner] \\u003e= _burnedAmount);\\n        \\n        balances[owner] = balances[owner].sub(_burnedAmount);\\n        _totalSupply = _totalSupply.sub(_burnedAmount);\\n        \\n        emit Transfer(owner, address(0x0), _burnedAmount);\\n    }\\n\\n    function increaseApproval(address _spender, uint256 _addedValue) \\n    public \\n    notNull(_spender) \\n    onlyOwner returns (bool) \\n    {\\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n        return true;\\n   }\\n\\n    function decreaseApproval(address _spender, uint256 _subtractedValue) \\n    public \\n    notNull(_spender) \\n    onlyOwner returns (bool) \\n    {\\n        uint256 oldValue = allowed[msg.sender][_spender];\\n        if (_subtractedValue \\u003e oldValue) { \\n            allowed[msg.sender][_spender] = 0;\\n        } else {\\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n        }\\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n        return true;\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Public view API\\n    // ------------------------------------------------------------------------\\n    function balanceOf(address _tokenOwner) \\n    public \\n    view \\n    returns (uint256 balance) \\n    {\\n        return balances[_tokenOwner];\\n    }\\n    \\n    function totalSupply() \\n    public \\n    view \\n    returns (uint256) \\n    {\\n        return _totalSupply.sub(balances[address(0x0)]);\\n    }\\n}\"}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"delBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"blackList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targetAddr\",\"type\":\"address\"},{\"name\":\"_mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_burnedAmount\",\"type\":\"uint256\"}],\"name\":\"burnToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ownerContract\",\"type\":\"address\"}],\"name\":\"AssignOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addBlacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from_\",\"type\":\"address\"},{\"name\":\"value_\",\"type\":\"uint256\"},{\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"typeNo\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"ListLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"fromAddr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"toAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"transAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint64\"}],\"name\":\"Trans\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"SLSToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://04b0e26823db660b5b282546108581a0721bb94ffc29bc48c362961f752f5a13"}]}