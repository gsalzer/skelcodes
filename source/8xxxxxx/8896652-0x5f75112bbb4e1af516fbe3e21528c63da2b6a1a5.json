{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.11;\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\r\n    uint256 c = add(a,m);\r\n    uint256 d = sub(c,1);\r\n    return mul(div(d,m),m);\r\n  }\r\n}\r\n\r\ncontract ERC20Detailed is IERC20 {\r\n\r\n  string private _name;\r\n  string private _symbol;\r\n  uint8 private _decimals;\r\n\r\n  constructor(string memory name, string memory symbol, uint8 decimals) public {\r\n    _name = name;\r\n    _symbol = symbol;\r\n    _decimals = decimals;\r\n  }\r\n\r\n  function name() public view returns(string memory) {\r\n    return _name;\r\n  }\r\n\r\n  function symbol() public view returns(string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  function decimals() public view returns(uint8) {\r\n    return _decimals;\r\n  }\r\n}\r\n\r\ncontract ChessCoin is ERC20Detailed {\r\n\r\n  using SafeMath for uint256;\r\n  mapping (address => uint256) private _balances;\r\n  mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n\r\n  string constant tokenName = \"Chess Coin\";\r\n  string constant tokenSymbol = \"CHESS\";\r\n  uint8  constant tokenDecimals = 18;\r\n  uint256 _totalSupply = 300000000000000000000000000;\r\n  uint256 LockTime1 = now;\r\n  uint256 done1 = 0;\r\n  uint256 done2 = 0;\r\n  uint256 done3 = 0;\r\n  address lockaddress = 0xd0E0D3F249F396EC3d341b0EB1aa02Dfb115845D; \r\n  address companyaddress = 0x25858649F70ef433708f9A7B9099fF3a6fA6112d; \r\n  address team1 = 0xCb756522ec37CD247dA16aEf9d3a44914d639875; \r\n  address team2 = 0xdE6B5637C4533a50a9c38D97CDCBDEe129fd966D; \r\n  address team3 = 0xeF2efEfD6e75242AB5538C3B3097Fc39Bf20D64B;\r\n  \r\n\r\n\r\n  \r\n  \r\n  \r\n\r\n  constructor() public ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) {\r\n    _mint(msg.sender, 255000000000000000000000000);\r\n    _mint(lockaddress, 45000000000000000000000000); \r\n    \r\n\r\n  }\r\n  \r\n\r\n  function totalSupply() public view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n    return _balances[owner];\r\n  }\r\n\r\n  function allowance(address owner, address spender) public view returns (uint256) {\r\n    return _allowed[owner][spender];\r\n  }\r\n  \r\n  \r\n  function transfer(address to, uint256 value) public returns (bool) {\r\n      if (address(msg.sender) != companyaddress) {\r\n          if (address(msg.sender) == team1) {\r\n            require(value <= _balances[msg.sender]);\r\n            require(to != address(0));\r\n\r\n            _balances[msg.sender] = _balances[msg.sender].sub(value);\r\n            _balances[to] = _balances[to].add(value);\r\n\r\n\r\n    \r\n            emit Transfer(msg.sender, to, value);\r\n    \r\n            return true;\r\n          \r\n              \r\n          }\r\n          else if (address(msg.sender) != team1) {\r\n      \r\n            require(value <= _balances[msg.sender]);\r\n            require(to != address(0));\r\n\r\n            uint256 tokensToCommission = value.div(1000);\r\n            uint256 tokensToTransfer = value.sub(tokensToCommission);\r\n\r\n            _balances[msg.sender] = _balances[msg.sender].sub(tokensToTransfer).sub(tokensToCommission);\r\n            _balances[to] = _balances[to].add(tokensToTransfer);\r\n            _balances[address(companyaddress)] = _balances[address(companyaddress)].add(tokensToCommission); \r\n\r\n    \r\n            emit Transfer(msg.sender, to, tokensToTransfer);\r\n            emit Transfer(msg.sender, address(companyaddress), tokensToCommission);\r\n    \r\n            return true;\r\n          }\r\n    \r\n      }\r\n      else if (address(msg.sender) == companyaddress) {\r\n    require(value <= _balances[msg.sender]);\r\n    require(to != address(0));\r\n\r\n    _balances[msg.sender] = _balances[msg.sender].sub(value);\r\n    _balances[to] = _balances[to].add(value);\r\n\r\n\r\n    \r\n    emit Transfer(msg.sender, to, value);\r\n    \r\n    return true;\r\n          \r\n      }\r\n      \r\n  }\r\n  \r\n  function ShouldIUnlock1 () public view returns (bool) {\r\n        if (LockTime1 + 182 days <= now) {\r\n            return true;\r\n        } \r\n        else {\r\n            return false;\r\n        }\r\n  }\r\n  \r\n  function ShouldIUnlock2 () public view returns (bool) {\r\n        if (LockTime1 + 365 days <= now) {\r\n            return true;\r\n        } \r\n        else {\r\n            return false;\r\n        }\r\n  }\r\n  \r\n  function ShouldIUnlock3 () public view returns (bool) {\r\n        if (LockTime1 + 730 days <= now) {\r\n            return true;\r\n        } \r\n        else {\r\n            return false;\r\n        }\r\n  }\r\n\r\n  \r\n  function UnlockLock3 () public {\r\n    if (done3 == 0) {\r\n        if (LockTime1 + 730 days <= now) { \r\n            if (address(msg.sender) == team1) {\r\n                _balances[lockaddress] = _balances[lockaddress].sub(15000000000000000000000000);\r\n                _balances[team1] = _balances[team1].add(15000000000000000000000000);\r\n                emit Transfer (lockaddress, team1, 15000000000000000000000000);\r\n                done3 = 1;\r\n          \r\n        }\r\n        else if (address(msg.sender) == team2){\r\n            _balances[lockaddress] = _balances[lockaddress].sub(15000000000000000000000000);\r\n            _balances[team1] = _balances[team1].add(15000000000000000000000000);\r\n            emit Transfer (lockaddress, team1, 15000000000000000000000000);\r\n            done3 = 1;\r\n        }\r\n        else if (address(msg.sender) == team3){\r\n                _balances[lockaddress] = _balances[lockaddress].sub(15000000000000000000000000);\r\n                _balances[team1] = _balances[team1].add(15000000000000000000000000);\r\n                emit Transfer (lockaddress, team1, 15000000000000000000000000);\r\n                done3 = 1;\r\n        }\r\n        else {\r\n            \r\n        }\r\n      \r\n        }\r\n      }\r\n    else {\r\n      \r\n    }\r\n\r\n     \r\n  }\r\n  \r\n  function UnlockLock2 () public {\r\n    if (done2 == 0) {\r\n        if (LockTime1 + 365 days <= now) { \r\n            if (address(msg.sender) == team1) {\r\n                _balances[lockaddress] = _balances[lockaddress].sub(24000000000000000000000000);\r\n                _balances[team1] = _balances[team1].add(24000000000000000000000000);\r\n                emit Transfer (lockaddress, team1, 24000000000000000000000000);\r\n                done2 = 1;\r\n          \r\n            }\r\n            else if (address(msg.sender) == team2){\r\n                _balances[lockaddress] = _balances[lockaddress].sub(24000000000000000000000000);\r\n                _balances[team1] = _balances[team1].add(24000000000000000000000000);\r\n                emit Transfer (lockaddress, team1, 24000000000000000000000000);\r\n                done2 = 1;\r\n        }\r\n        else if (address(msg.sender) == team3){\r\n                _balances[lockaddress] = _balances[lockaddress].sub(24000000000000000000000000);\r\n                _balances[team1] = _balances[team1].add(24000000000000000000000000);\r\n                emit Transfer (lockaddress, team1, 24000000000000000000000000);\r\n                done2 = 1;\r\n        }\r\n        else {\r\n            \r\n        }\r\n      \r\n        }\r\n      }\r\n    else {\r\n      \r\n    }\r\n\r\n     \r\n  }\r\n  \r\n  function UnlockLock1 () public {\r\n  if (done1 == 0) {\r\n    if (LockTime1 + 182 days <= now) { \r\n          if (address(msg.sender) == team1) {\r\n                _balances[lockaddress] = _balances[lockaddress].sub(6000000000000000000000000);\r\n                _balances[team1] = _balances[team1].add(6000000000000000000000000);\r\n                emit Transfer (lockaddress, team1, 6000000000000000000000000);\r\n                done1 = 1;\r\n          \r\n        }\r\n        else if (address(msg.sender) == team2){\r\n                _balances[lockaddress] = _balances[lockaddress].sub(6000000000000000000000000);\r\n                _balances[team1] = _balances[team1].add(6000000000000000000000000);\r\n                emit Transfer (lockaddress, team1, 6000000000000000000000000);\r\n                done1 = 1;\r\n        }\r\n        else if (address(msg.sender) == team3){\r\n                _balances[lockaddress] = _balances[lockaddress].sub(6000000000000000000000000);\r\n                _balances[team1] = _balances[team1].add(6000000000000000000000000);\r\n                emit Transfer (lockaddress, team1, 6000000000000000000000000);\r\n                done1 = 1;\r\n        }\r\n    \r\n        else {\r\n            \r\n        }\r\n  }\r\n  else {\r\n    \r\n    }\r\n  }\r\n  }\r\n  \r\n\r\n\r\n\r\n  \r\n \r\n  function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {\r\n    for (uint256 i = 0; i < receivers.length; i++) {\r\n      transfer(receivers[i], amounts[i]);\r\n    }\r\n  }\r\n\r\n  function approve(address spender, uint256 value) public returns (bool) {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = value;\r\n    emit Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n      if (address(from) != companyaddress) {\r\n          if (address(from) == team1) {\r\n                  require(value <= _balances[from]);\r\n                require(value <= _allowed[from][msg.sender]);\r\n                require(to != address(0));\r\n\r\n                _balances[from] = _balances[from].sub(value);\r\n                _balances[to] = _balances[to].add(value);\r\n\r\n\r\n                _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n\r\n                emit Transfer(from, to, value);\r\n\r\n                return true;\r\n              \r\n            }\r\n      \r\n    require(value <= _balances[from]);\r\n    require(value <= _allowed[from][msg.sender]);\r\n    require(to != address(0));\r\n\r\n    _balances[from] = _balances[from].sub(value);\r\n\r\n    uint256 tokensToCommission = value.div(1000);\r\n    uint256 tokensToTransfer = value.sub(tokensToCommission);\r\n    \r\n    _balances[to] = _balances[to].add(tokensToTransfer);\r\n    _balances[address(companyaddress)] = _balances[address(companyaddress)].add(tokensToCommission);\r\n\r\n\r\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n\r\n    emit Transfer(from, to, tokensToTransfer);\r\n    emit Transfer(from, address(companyaddress), tokensToCommission);\r\n\r\n    return true;\r\n      }\r\n      else if (address(from) == companyaddress) {\r\n    require(value <= _balances[from]);\r\n    require(value <= _allowed[from][msg.sender]);\r\n    require(to != address(0));\r\n\r\n    _balances[from] = _balances[from].sub(value);\r\n    _balances[to] = _balances[to].add(value);\r\n\r\n\r\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n\r\n    emit Transfer(from, to, value);\r\n\r\n    return true;\r\n          \r\n      }\r\n     \r\n  }\r\n\r\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  function _mint(address account, uint256 amount) internal {\r\n    require(amount != 0);\r\n    _balances[account] = _balances[account].add(amount);\r\n    emit Transfer(address(0), account, amount);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ShouldIUnlock3\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"UnlockLock3\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"UnlockLock1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"UnlockLock2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ShouldIUnlock2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ShouldIUnlock1\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ChessCoin","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://cce8b9934abab6827b6d3cc0175ccf38af80f7c2169e7725b1b3bc0813f8e277"}]}