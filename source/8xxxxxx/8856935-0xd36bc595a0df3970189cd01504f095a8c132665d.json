{"status":"1","message":"OK","result":[{"SourceCode":"// File: @aragon/os/contracts/common/UnstructuredStorage.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\nlibrary UnstructuredStorage {\r\n    function getStorageBool(bytes32 position) internal view returns (bool data) {\r\n        assembly { data := sload(position) }\r\n    }\r\n\r\n    function getStorageAddress(bytes32 position) internal view returns (address data) {\r\n        assembly { data := sload(position) }\r\n    }\r\n\r\n    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\r\n        assembly { data := sload(position) }\r\n    }\r\n\r\n    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\r\n        assembly { data := sload(position) }\r\n    }\r\n\r\n    function setStorageBool(bytes32 position, bool data) internal {\r\n        assembly { sstore(position, data) }\r\n    }\r\n\r\n    function setStorageAddress(bytes32 position, address data) internal {\r\n        assembly { sstore(position, data) }\r\n    }\r\n\r\n    function setStorageBytes32(bytes32 position, bytes32 data) internal {\r\n        assembly { sstore(position, data) }\r\n    }\r\n\r\n    function setStorageUint256(bytes32 position, uint256 data) internal {\r\n        assembly { sstore(position, data) }\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/acl/IACL.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ninterface IACL {\r\n    function initialize(address permissionsCreator) external;\r\n\r\n    // TODO: this should be external\r\n    // See https://github.com/ethereum/solidity/issues/4832\r\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\r\n}\r\n\r\n// File: @aragon/os/contracts/common/IVaultRecoverable.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ninterface IVaultRecoverable {\r\n    event RecoverToVault(address indexed vault, address indexed token, uint256 amount);\r\n\r\n    function transferToVault(address token) external;\r\n\r\n    function allowRecoverability(address token) external view returns (bool);\r\n    function getRecoveryVault() external view returns (address);\r\n}\r\n\r\n// File: @aragon/os/contracts/kernel/IKernel.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\ninterface IKernelEvents {\r\n    event SetApp(bytes32 indexed namespace, bytes32 indexed appId, address app);\r\n}\r\n\r\n\r\n// This should be an interface, but interfaces can't inherit yet :(\r\ncontract IKernel is IKernelEvents, IVaultRecoverable {\r\n    function acl() public view returns (IACL);\r\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\r\n\r\n    function setApp(bytes32 namespace, bytes32 appId, address app) public;\r\n    function getApp(bytes32 namespace, bytes32 appId) public view returns (address);\r\n}\r\n\r\n// File: @aragon/os/contracts/apps/AppStorage.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\ncontract AppStorage {\r\n    using UnstructuredStorage for bytes32;\r\n\r\n    /* Hardcoded constants to save gas\r\n    bytes32 internal constant KERNEL_POSITION = keccak256(\"aragonOS.appStorage.kernel\");\r\n    bytes32 internal constant APP_ID_POSITION = keccak256(\"aragonOS.appStorage.appId\");\r\n    */\r\n    bytes32 internal constant KERNEL_POSITION = 0x4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b;\r\n    bytes32 internal constant APP_ID_POSITION = 0xd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b;\r\n\r\n    function kernel() public view returns (IKernel) {\r\n        return IKernel(KERNEL_POSITION.getStorageAddress());\r\n    }\r\n\r\n    function appId() public view returns (bytes32) {\r\n        return APP_ID_POSITION.getStorageBytes32();\r\n    }\r\n\r\n    function setKernel(IKernel _kernel) internal {\r\n        KERNEL_POSITION.setStorageAddress(address(_kernel));\r\n    }\r\n\r\n    function setAppId(bytes32 _appId) internal {\r\n        APP_ID_POSITION.setStorageBytes32(_appId);\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/acl/ACLSyntaxSugar.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ncontract ACLSyntaxSugar {\r\n    function arr() internal pure returns (uint256[]) {\r\n        return new uint256[](0);\r\n    }\r\n\r\n    function arr(bytes32 _a) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a));\r\n    }\r\n\r\n    function arr(bytes32 _a, bytes32 _b) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b));\r\n    }\r\n\r\n    function arr(address _a) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a));\r\n    }\r\n\r\n    function arr(address _a, address _b) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b));\r\n    }\r\n\r\n    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), _b, _c);\r\n    }\r\n\r\n    function arr(address _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), _b, _c, _d);\r\n    }\r\n\r\n    function arr(address _a, uint256 _b) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b));\r\n    }\r\n\r\n    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b), _c, _d, _e);\r\n    }\r\n\r\n    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b), uint256(_c));\r\n    }\r\n\r\n    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b), uint256(_c));\r\n    }\r\n\r\n    function arr(uint256 _a) internal pure returns (uint256[] r) {\r\n        r = new uint256[](1);\r\n        r[0] = _a;\r\n    }\r\n\r\n    function arr(uint256 _a, uint256 _b) internal pure returns (uint256[] r) {\r\n        r = new uint256[](2);\r\n        r[0] = _a;\r\n        r[1] = _b;\r\n    }\r\n\r\n    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\r\n        r = new uint256[](3);\r\n        r[0] = _a;\r\n        r[1] = _b;\r\n        r[2] = _c;\r\n    }\r\n\r\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\r\n        r = new uint256[](4);\r\n        r[0] = _a;\r\n        r[1] = _b;\r\n        r[2] = _c;\r\n        r[3] = _d;\r\n    }\r\n\r\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\r\n        r = new uint256[](5);\r\n        r[0] = _a;\r\n        r[1] = _b;\r\n        r[2] = _c;\r\n        r[3] = _d;\r\n        r[4] = _e;\r\n    }\r\n}\r\n\r\n\r\ncontract ACLHelpers {\r\n    function decodeParamOp(uint256 _x) internal pure returns (uint8 b) {\r\n        return uint8(_x >> (8 * 30));\r\n    }\r\n\r\n    function decodeParamId(uint256 _x) internal pure returns (uint8 b) {\r\n        return uint8(_x >> (8 * 31));\r\n    }\r\n\r\n    function decodeParamsList(uint256 _x) internal pure returns (uint32 a, uint32 b, uint32 c) {\r\n        a = uint32(_x);\r\n        b = uint32(_x >> (8 * 4));\r\n        c = uint32(_x >> (8 * 8));\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/Uint256Helpers.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\nlibrary Uint256Helpers {\r\n    uint256 private constant MAX_UINT64 = uint64(-1);\r\n\r\n    string private constant ERROR_NUMBER_TOO_BIG = \"UINT64_NUMBER_TOO_BIG\";\r\n\r\n    function toUint64(uint256 a) internal pure returns (uint64) {\r\n        require(a <= MAX_UINT64, ERROR_NUMBER_TOO_BIG);\r\n        return uint64(a);\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/TimeHelpers.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract TimeHelpers {\r\n    using Uint256Helpers for uint256;\r\n\r\n    /**\r\n    * @dev Returns the current block number.\r\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\r\n    *      tests.\r\n    */\r\n    function getBlockNumber() internal view returns (uint256) {\r\n        return block.number;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the current block number, converted to uint64.\r\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\r\n    *      tests.\r\n    */\r\n    function getBlockNumber64() internal view returns (uint64) {\r\n        return getBlockNumber().toUint64();\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the current timestamp.\r\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\r\n    *      tests.\r\n    */\r\n    function getTimestamp() internal view returns (uint256) {\r\n        return block.timestamp; // solium-disable-line security/no-block-members\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the current timestamp, converted to uint64.\r\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\r\n    *      tests.\r\n    */\r\n    function getTimestamp64() internal view returns (uint64) {\r\n        return getTimestamp().toUint64();\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/Initializable.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\ncontract Initializable is TimeHelpers {\r\n    using UnstructuredStorage for bytes32;\r\n\r\n    // keccak256(\"aragonOS.initializable.initializationBlock\")\r\n    bytes32 internal constant INITIALIZATION_BLOCK_POSITION = 0xebb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e;\r\n\r\n    string private constant ERROR_ALREADY_INITIALIZED = \"INIT_ALREADY_INITIALIZED\";\r\n    string private constant ERROR_NOT_INITIALIZED = \"INIT_NOT_INITIALIZED\";\r\n\r\n    modifier onlyInit {\r\n        require(getInitializationBlock() == 0, ERROR_ALREADY_INITIALIZED);\r\n        _;\r\n    }\r\n\r\n    modifier isInitialized {\r\n        require(hasInitialized(), ERROR_NOT_INITIALIZED);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @return Block number in which the contract was initialized\r\n    */\r\n    function getInitializationBlock() public view returns (uint256) {\r\n        return INITIALIZATION_BLOCK_POSITION.getStorageUint256();\r\n    }\r\n\r\n    /**\r\n    * @return Whether the contract has been initialized by the time of the current block\r\n    */\r\n    function hasInitialized() public view returns (bool) {\r\n        uint256 initializationBlock = getInitializationBlock();\r\n        return initializationBlock != 0 && getBlockNumber() >= initializationBlock;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to be called by top level contract after initialization has finished.\r\n    */\r\n    function initialized() internal onlyInit {\r\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(getBlockNumber());\r\n    }\r\n\r\n    /**\r\n    * @dev Function to be called by top level contract after initialization to enable the contract\r\n    *      at a future block number rather than immediately.\r\n    */\r\n    function initializedAt(uint256 _blockNumber) internal onlyInit {\r\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(_blockNumber);\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/Petrifiable.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract Petrifiable is Initializable {\r\n    // Use block UINT256_MAX (which should be never) as the initializable date\r\n    uint256 internal constant PETRIFIED_BLOCK = uint256(-1);\r\n\r\n    function isPetrified() public view returns (bool) {\r\n        return getInitializationBlock() == PETRIFIED_BLOCK;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to be called by top level contract to prevent being initialized.\r\n    *      Useful for freezing base contracts when they're used behind proxies.\r\n    */\r\n    function petrify() internal onlyInit {\r\n        initializedAt(PETRIFIED_BLOCK);\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/Autopetrified.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract Autopetrified is Petrifiable {\r\n    constructor() public {\r\n        // Immediately petrify base (non-proxy) instances of inherited contracts on deploy.\r\n        // This renders them uninitializable (and unusable without a proxy).\r\n        petrify();\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/ConversionHelpers.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\nlibrary ConversionHelpers {\r\n    string private constant ERROR_IMPROPER_LENGTH = \"CONVERSION_IMPROPER_LENGTH\";\r\n\r\n    function dangerouslyCastUintArrayToBytes(uint256[] memory _input) internal pure returns (bytes memory output) {\r\n        // Force cast the uint256[] into a bytes array, by overwriting its length\r\n        // Note that the bytes array doesn't need to be initialized as we immediately overwrite it\r\n        // with the input and a new length. The input becomes invalid from this point forward.\r\n        uint256 byteLength = _input.length * 32;\r\n        assembly {\r\n            output := _input\r\n            mstore(output, byteLength)\r\n        }\r\n    }\r\n\r\n    function dangerouslyCastBytesToUintArray(bytes memory _input) internal pure returns (uint256[] memory output) {\r\n        // Force cast the bytes array into a uint256[], by overwriting its length\r\n        // Note that the uint256[] doesn't need to be initialized as we immediately overwrite it\r\n        // with the input and a new length. The input becomes invalid from this point forward.\r\n        uint256 intsLength = _input.length / 32;\r\n        require(_input.length == intsLength * 32, ERROR_IMPROPER_LENGTH);\r\n\r\n        assembly {\r\n            output := _input\r\n            mstore(output, intsLength)\r\n        }\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/ReentrancyGuard.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract ReentrancyGuard {\r\n    using UnstructuredStorage for bytes32;\r\n\r\n    /* Hardcoded constants to save gas\r\n    bytes32 internal constant REENTRANCY_MUTEX_POSITION = keccak256(\"aragonOS.reentrancyGuard.mutex\");\r\n    */\r\n    bytes32 private constant REENTRANCY_MUTEX_POSITION = 0xe855346402235fdd185c890e68d2c4ecad599b88587635ee285bce2fda58dacb;\r\n\r\n    string private constant ERROR_REENTRANT = \"REENTRANCY_REENTRANT_CALL\";\r\n\r\n    modifier nonReentrant() {\r\n        // Ensure mutex is unlocked\r\n        require(!REENTRANCY_MUTEX_POSITION.getStorageBool(), ERROR_REENTRANT);\r\n\r\n        // Lock mutex before function call\r\n        REENTRANCY_MUTEX_POSITION.setStorageBool(true);\r\n\r\n        // Perform function call\r\n        _;\r\n\r\n        // Unlock mutex after function call\r\n        REENTRANCY_MUTEX_POSITION.setStorageBool(false);\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/lib/token/ERC20.sol\r\n\r\n// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/a9f910d34f0ab33a1ae5e714f69f9596a02b4d91/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint256);\r\n\r\n    function balanceOf(address _who) public view returns (uint256);\r\n\r\n    function allowance(address _owner, address _spender)\r\n        public view returns (uint256);\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n\r\n    function approve(address _spender, uint256 _value)\r\n        public returns (bool);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        public returns (bool);\r\n\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 value\r\n    );\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// File: @aragon/os/contracts/common/EtherTokenConstant.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n// aragonOS and aragon-apps rely on address(0) to denote native ETH, in\r\n// contracts where both tokens and ETH are accepted\r\ncontract EtherTokenConstant {\r\n    address internal constant ETH = address(0);\r\n}\r\n\r\n// File: @aragon/os/contracts/common/IsContract.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ncontract IsContract {\r\n    /*\r\n    * NOTE: this should NEVER be used for authentication\r\n    * (see pitfalls: https://github.com/fergarrui/ethereum-security/tree/master/contracts/extcodesize).\r\n    *\r\n    * This is only intended to be used as a sanity check that an address is actually a contract,\r\n    * RATHER THAN an address not being a contract.\r\n    */\r\n    function isContract(address _target) internal view returns (bool) {\r\n        if (_target == address(0)) {\r\n            return false;\r\n        }\r\n\r\n        uint256 size;\r\n        assembly { size := extcodesize(_target) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/SafeERC20.sol\r\n\r\n// Inspired by AdEx (https://github.com/AdExNetwork/adex-protocol-eth/blob/b9df617829661a7518ee10f4cb6c4108659dd6d5/contracts/libs/SafeERC20.sol)\r\n// and 0x (https://github.com/0xProject/0x-monorepo/blob/737d1dc54d72872e24abce5a1dbe1b66d35fa21a/contracts/protocol/contracts/protocol/AssetProxy/ERC20Proxy.sol#L143)\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\nlibrary SafeERC20 {\r\n    // Before 0.5, solidity has a mismatch between `address.transfer()` and `token.transfer()`:\r\n    // https://github.com/ethereum/solidity/issues/3544\r\n    bytes4 private constant TRANSFER_SELECTOR = 0xa9059cbb;\r\n\r\n    string private constant ERROR_TOKEN_BALANCE_REVERTED = \"SAFE_ERC_20_BALANCE_REVERTED\";\r\n    string private constant ERROR_TOKEN_ALLOWANCE_REVERTED = \"SAFE_ERC_20_ALLOWANCE_REVERTED\";\r\n\r\n    function invokeAndCheckSuccess(address _addr, bytes memory _calldata)\r\n        private\r\n        returns (bool)\r\n    {\r\n        bool ret;\r\n        assembly {\r\n            let ptr := mload(0x40)    // free memory pointer\r\n\r\n            let success := call(\r\n                gas,                  // forward all gas\r\n                _addr,                // address\r\n                0,                    // no value\r\n                add(_calldata, 0x20), // calldata start\r\n                mload(_calldata),     // calldata length\r\n                ptr,                  // write output over free memory\r\n                0x20                  // uint256 return\r\n            )\r\n\r\n            if gt(success, 0) {\r\n                // Check number of bytes returned from last function call\r\n                switch returndatasize\r\n\r\n                // No bytes returned: assume success\r\n                case 0 {\r\n                    ret := 1\r\n                }\r\n\r\n                // 32 bytes returned: check if non-zero\r\n                case 0x20 {\r\n                    // Only return success if returned data was true\r\n                    // Already have output in ptr\r\n                    ret := eq(mload(ptr), 1)\r\n                }\r\n\r\n                // Not sure what was returned: don't mark as success\r\n                default { }\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    function staticInvoke(address _addr, bytes memory _calldata)\r\n        private\r\n        view\r\n        returns (bool, uint256)\r\n    {\r\n        bool success;\r\n        uint256 ret;\r\n        assembly {\r\n            let ptr := mload(0x40)    // free memory pointer\r\n\r\n            success := staticcall(\r\n                gas,                  // forward all gas\r\n                _addr,                // address\r\n                add(_calldata, 0x20), // calldata start\r\n                mload(_calldata),     // calldata length\r\n                ptr,                  // write output over free memory\r\n                0x20                  // uint256 return\r\n            )\r\n\r\n            if gt(success, 0) {\r\n                ret := mload(ptr)\r\n            }\r\n        }\r\n        return (success, ret);\r\n    }\r\n\r\n    /**\r\n    * @dev Same as a standards-compliant ERC20.transfer() that never reverts (returns false).\r\n    *      Note that this makes an external call to the token.\r\n    */\r\n    function safeTransfer(ERC20 _token, address _to, uint256 _amount) internal returns (bool) {\r\n        bytes memory transferCallData = abi.encodeWithSelector(\r\n            TRANSFER_SELECTOR,\r\n            _to,\r\n            _amount\r\n        );\r\n        return invokeAndCheckSuccess(_token, transferCallData);\r\n    }\r\n\r\n    /**\r\n    * @dev Same as a standards-compliant ERC20.transferFrom() that never reverts (returns false).\r\n    *      Note that this makes an external call to the token.\r\n    */\r\n    function safeTransferFrom(ERC20 _token, address _from, address _to, uint256 _amount) internal returns (bool) {\r\n        bytes memory transferFromCallData = abi.encodeWithSelector(\r\n            _token.transferFrom.selector,\r\n            _from,\r\n            _to,\r\n            _amount\r\n        );\r\n        return invokeAndCheckSuccess(_token, transferFromCallData);\r\n    }\r\n\r\n    /**\r\n    * @dev Same as a standards-compliant ERC20.approve() that never reverts (returns false).\r\n    *      Note that this makes an external call to the token.\r\n    */\r\n    function safeApprove(ERC20 _token, address _spender, uint256 _amount) internal returns (bool) {\r\n        bytes memory approveCallData = abi.encodeWithSelector(\r\n            _token.approve.selector,\r\n            _spender,\r\n            _amount\r\n        );\r\n        return invokeAndCheckSuccess(_token, approveCallData);\r\n    }\r\n\r\n    /**\r\n    * @dev Static call into ERC20.balanceOf().\r\n    * Reverts if the call fails for some reason (should never fail).\r\n    */\r\n    function staticBalanceOf(ERC20 _token, address _owner) internal view returns (uint256) {\r\n        bytes memory balanceOfCallData = abi.encodeWithSelector(\r\n            _token.balanceOf.selector,\r\n            _owner\r\n        );\r\n\r\n        (bool success, uint256 tokenBalance) = staticInvoke(_token, balanceOfCallData);\r\n        require(success, ERROR_TOKEN_BALANCE_REVERTED);\r\n\r\n        return tokenBalance;\r\n    }\r\n\r\n    /**\r\n    * @dev Static call into ERC20.allowance().\r\n    * Reverts if the call fails for some reason (should never fail).\r\n    */\r\n    function staticAllowance(ERC20 _token, address _owner, address _spender) internal view returns (uint256) {\r\n        bytes memory allowanceCallData = abi.encodeWithSelector(\r\n            _token.allowance.selector,\r\n            _owner,\r\n            _spender\r\n        );\r\n\r\n        (bool success, uint256 allowance) = staticInvoke(_token, allowanceCallData);\r\n        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\r\n\r\n        return allowance;\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/VaultRecoverable.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract VaultRecoverable is IVaultRecoverable, EtherTokenConstant, IsContract {\r\n    using SafeERC20 for ERC20;\r\n\r\n    string private constant ERROR_DISALLOWED = \"RECOVER_DISALLOWED\";\r\n    string private constant ERROR_VAULT_NOT_CONTRACT = \"RECOVER_VAULT_NOT_CONTRACT\";\r\n    string private constant ERROR_TOKEN_TRANSFER_FAILED = \"RECOVER_TOKEN_TRANSFER_FAILED\";\r\n\r\n    /**\r\n     * @notice Send funds to recovery Vault. This contract should never receive funds,\r\n     *         but in case it does, this function allows one to recover them.\r\n     * @param _token Token balance to be sent to recovery vault.\r\n     */\r\n    function transferToVault(address _token) external {\r\n        require(allowRecoverability(_token), ERROR_DISALLOWED);\r\n        address vault = getRecoveryVault();\r\n        require(isContract(vault), ERROR_VAULT_NOT_CONTRACT);\r\n\r\n        uint256 balance;\r\n        if (_token == ETH) {\r\n            balance = address(this).balance;\r\n            vault.transfer(balance);\r\n        } else {\r\n            ERC20 token = ERC20(_token);\r\n            balance = token.staticBalanceOf(this);\r\n            require(token.safeTransfer(vault, balance), ERROR_TOKEN_TRANSFER_FAILED);\r\n        }\r\n\r\n        emit RecoverToVault(vault, _token, balance);\r\n    }\r\n\r\n    /**\r\n    * @dev By default deriving from AragonApp makes it recoverable\r\n    * @param token Token address that would be recovered\r\n    * @return bool whether the app allows the recovery\r\n    */\r\n    function allowRecoverability(address token) public view returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    // Cast non-implemented interface to be public so we can use it internally\r\n    function getRecoveryVault() public view returns (address);\r\n}\r\n\r\n// File: @aragon/os/contracts/evmscript/IEVMScriptExecutor.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ninterface IEVMScriptExecutor {\r\n    function execScript(bytes script, bytes input, address[] blacklist) external returns (bytes);\r\n    function executorType() external pure returns (bytes32);\r\n}\r\n\r\n// File: @aragon/os/contracts/evmscript/IEVMScriptRegistry.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract EVMScriptRegistryConstants {\r\n    /* Hardcoded constants to save gas\r\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = apmNamehash(\"evmreg\");\r\n    */\r\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = 0xddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd61;\r\n}\r\n\r\n\r\ninterface IEVMScriptRegistry {\r\n    function addScriptExecutor(IEVMScriptExecutor executor) external returns (uint id);\r\n    function disableScriptExecutor(uint256 executorId) external;\r\n\r\n    // TODO: this should be external\r\n    // See https://github.com/ethereum/solidity/issues/4832\r\n    function getScriptExecutor(bytes script) public view returns (IEVMScriptExecutor);\r\n}\r\n\r\n// File: @aragon/os/contracts/kernel/KernelConstants.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ncontract KernelAppIds {\r\n    /* Hardcoded constants to save gas\r\n    bytes32 internal constant KERNEL_CORE_APP_ID = apmNamehash(\"kernel\");\r\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = apmNamehash(\"acl\");\r\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = apmNamehash(\"vault\");\r\n    */\r\n    bytes32 internal constant KERNEL_CORE_APP_ID = 0x3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c;\r\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = 0xe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a;\r\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = 0x7e852e0fcfce6551c13800f1e7476f982525c2b5277ba14b24339c68416336d1;\r\n}\r\n\r\n\r\ncontract KernelNamespaceConstants {\r\n    /* Hardcoded constants to save gas\r\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = keccak256(\"core\");\r\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = keccak256(\"base\");\r\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = keccak256(\"app\");\r\n    */\r\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = 0xc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f8;\r\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = 0xf1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f;\r\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;\r\n}\r\n\r\n// File: @aragon/os/contracts/evmscript/EVMScriptRunner.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract EVMScriptRunner is AppStorage, Initializable, EVMScriptRegistryConstants, KernelNamespaceConstants {\r\n    string private constant ERROR_EXECUTOR_UNAVAILABLE = \"EVMRUN_EXECUTOR_UNAVAILABLE\";\r\n    string private constant ERROR_PROTECTED_STATE_MODIFIED = \"EVMRUN_PROTECTED_STATE_MODIFIED\";\r\n\r\n    /* This is manually crafted in assembly\r\n    string private constant ERROR_EXECUTOR_INVALID_RETURN = \"EVMRUN_EXECUTOR_INVALID_RETURN\";\r\n    */\r\n\r\n    event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData);\r\n\r\n    function getEVMScriptExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\r\n        return IEVMScriptExecutor(getEVMScriptRegistry().getScriptExecutor(_script));\r\n    }\r\n\r\n    function getEVMScriptRegistry() public view returns (IEVMScriptRegistry) {\r\n        address registryAddr = kernel().getApp(KERNEL_APP_ADDR_NAMESPACE, EVMSCRIPT_REGISTRY_APP_ID);\r\n        return IEVMScriptRegistry(registryAddr);\r\n    }\r\n\r\n    function runScript(bytes _script, bytes _input, address[] _blacklist)\r\n        internal\r\n        isInitialized\r\n        protectState\r\n        returns (bytes)\r\n    {\r\n        IEVMScriptExecutor executor = getEVMScriptExecutor(_script);\r\n        require(address(executor) != address(0), ERROR_EXECUTOR_UNAVAILABLE);\r\n\r\n        bytes4 sig = executor.execScript.selector;\r\n        bytes memory data = abi.encodeWithSelector(sig, _script, _input, _blacklist);\r\n\r\n        bytes memory output;\r\n        assembly {\r\n            let success := delegatecall(\r\n                gas,                // forward all gas\r\n                executor,           // address\r\n                add(data, 0x20),    // calldata start\r\n                mload(data),        // calldata length\r\n                0,                  // don't write output (we'll handle this ourselves)\r\n                0                   // don't write output\r\n            )\r\n\r\n            output := mload(0x40) // free mem ptr get\r\n\r\n            switch success\r\n            case 0 {\r\n                // If the call errored, forward its full error data\r\n                returndatacopy(output, 0, returndatasize)\r\n                revert(output, returndatasize)\r\n            }\r\n            default {\r\n                switch gt(returndatasize, 0x3f)\r\n                case 0 {\r\n                    // Need at least 0x40 bytes returned for properly ABI-encoded bytes values,\r\n                    // revert with \"EVMRUN_EXECUTOR_INVALID_RETURN\"\r\n                    // See remix: doing a `revert(\"EVMRUN_EXECUTOR_INVALID_RETURN\")` always results in\r\n                    // this memory layout\r\n                    mstore(output, 0x08c379a000000000000000000000000000000000000000000000000000000000)         // error identifier\r\n                    mstore(add(output, 0x04), 0x0000000000000000000000000000000000000000000000000000000000000020) // starting offset\r\n                    mstore(add(output, 0x24), 0x000000000000000000000000000000000000000000000000000000000000001e) // reason length\r\n                    mstore(add(output, 0x44), 0x45564d52554e5f4558454355544f525f494e56414c49445f52455455524e0000) // reason\r\n\r\n                    revert(output, 100) // 100 = 4 + 3 * 32 (error identifier + 3 words for the ABI encoded error)\r\n                }\r\n                default {\r\n                    // Copy result\r\n                    //\r\n                    // Needs to perform an ABI decode for the expected `bytes` return type of\r\n                    // `executor.execScript()` as solidity will automatically ABI encode the returned bytes as:\r\n                    //    [ position of the first dynamic length return value = 0x20 (32 bytes) ]\r\n                    //    [ output length (32 bytes) ]\r\n                    //    [ output content (N bytes) ]\r\n                    //\r\n                    // Perform the ABI decode by ignoring the first 32 bytes of the return data\r\n                    let copysize := sub(returndatasize, 0x20)\r\n                    returndatacopy(output, 0x20, copysize)\r\n\r\n                    mstore(0x40, add(output, copysize)) // free mem ptr set\r\n                }\r\n            }\r\n        }\r\n\r\n        emit ScriptResult(address(executor), _script, _input, output);\r\n\r\n        return output;\r\n    }\r\n\r\n    modifier protectState {\r\n        address preKernel = address(kernel());\r\n        bytes32 preAppId = appId();\r\n        _; // exec\r\n        require(address(kernel()) == preKernel, ERROR_PROTECTED_STATE_MODIFIED);\r\n        require(appId() == preAppId, ERROR_PROTECTED_STATE_MODIFIED);\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/apps/AragonApp.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Contracts inheriting from AragonApp are, by default, immediately petrified upon deployment so\r\n// that they can never be initialized.\r\n// Unless overriden, this behaviour enforces those contracts to be usable only behind an AppProxy.\r\n// ReentrancyGuard, EVMScriptRunner, and ACLSyntaxSugar are not directly used by this contract, but\r\n// are included so that they are automatically usable by subclassing contracts\r\ncontract AragonApp is AppStorage, Autopetrified, VaultRecoverable, ReentrancyGuard, EVMScriptRunner, ACLSyntaxSugar {\r\n    string private constant ERROR_AUTH_FAILED = \"APP_AUTH_FAILED\";\r\n\r\n    modifier auth(bytes32 _role) {\r\n        require(canPerform(msg.sender, _role, new uint256[](0)), ERROR_AUTH_FAILED);\r\n        _;\r\n    }\r\n\r\n    modifier authP(bytes32 _role, uint256[] _params) {\r\n        require(canPerform(msg.sender, _role, _params), ERROR_AUTH_FAILED);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Check whether an action can be performed by a sender for a particular role on this app\r\n    * @param _sender Sender of the call\r\n    * @param _role Role on this app\r\n    * @param _params Permission params for the role\r\n    * @return Boolean indicating whether the sender has the permissions to perform the action.\r\n    *         Always returns false if the app hasn't been initialized yet.\r\n    */\r\n    function canPerform(address _sender, bytes32 _role, uint256[] _params) public view returns (bool) {\r\n        if (!hasInitialized()) {\r\n            return false;\r\n        }\r\n\r\n        IKernel linkedKernel = kernel();\r\n        if (address(linkedKernel) == address(0)) {\r\n            return false;\r\n        }\r\n\r\n        return linkedKernel.hasPermission(\r\n            _sender,\r\n            address(this),\r\n            _role,\r\n            ConversionHelpers.dangerouslyCastUintArrayToBytes(_params)\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev Get the recovery vault for the app\r\n    * @return Recovery vault address for the app\r\n    */\r\n    function getRecoveryVault() public view returns (address) {\r\n        // Funds recovery via a vault is only available when used with a kernel\r\n        return kernel().getRecoveryVault(); // if kernel is not set, it will revert\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/DepositableStorage.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\ncontract DepositableStorage {\r\n    using UnstructuredStorage for bytes32;\r\n\r\n    // keccak256(\"aragonOS.depositableStorage.depositable\")\r\n    bytes32 internal constant DEPOSITABLE_POSITION = 0x665fd576fbbe6f247aff98f5c94a561e3f71ec2d3c988d56f12d342396c50cea;\r\n\r\n    function isDepositable() public view returns (bool) {\r\n        return DEPOSITABLE_POSITION.getStorageBool();\r\n    }\r\n\r\n    function setDepositable(bool _depositable) internal {\r\n        DEPOSITABLE_POSITION.setStorageBool(_depositable);\r\n    }\r\n}\r\n\r\n// File: @aragon/apps-vault/contracts/Vault.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Vault is EtherTokenConstant, AragonApp, DepositableStorage {\r\n    using SafeERC20 for ERC20;\r\n\r\n    bytes32 public constant TRANSFER_ROLE = keccak256(\"TRANSFER_ROLE\");\r\n\r\n    string private constant ERROR_DATA_NON_ZERO = \"VAULT_DATA_NON_ZERO\";\r\n    string private constant ERROR_NOT_DEPOSITABLE = \"VAULT_NOT_DEPOSITABLE\";\r\n    string private constant ERROR_DEPOSIT_VALUE_ZERO = \"VAULT_DEPOSIT_VALUE_ZERO\";\r\n    string private constant ERROR_TRANSFER_VALUE_ZERO = \"VAULT_TRANSFER_VALUE_ZERO\";\r\n    string private constant ERROR_SEND_REVERTED = \"VAULT_SEND_REVERTED\";\r\n    string private constant ERROR_VALUE_MISMATCH = \"VAULT_VALUE_MISMATCH\";\r\n    string private constant ERROR_TOKEN_TRANSFER_FROM_REVERTED = \"VAULT_TOKEN_TRANSFER_FROM_REVERT\";\r\n    string private constant ERROR_TOKEN_TRANSFER_REVERTED = \"VAULT_TOKEN_TRANSFER_REVERTED\";\r\n\r\n    event VaultTransfer(address indexed token, address indexed to, uint256 amount);\r\n    event VaultDeposit(address indexed token, address indexed sender, uint256 amount);\r\n\r\n    /**\r\n    * @dev On a normal send() or transfer() this fallback is never executed as it will be\r\n    *      intercepted by the Proxy (see aragonOS#281)\r\n    */\r\n    function () external payable isInitialized {\r\n        require(msg.data.length == 0, ERROR_DATA_NON_ZERO);\r\n        _deposit(ETH, msg.value);\r\n    }\r\n\r\n    /**\r\n    * @notice Initialize Vault app\r\n    * @dev As an AragonApp it needs to be initialized in order for roles (`auth` and `authP`) to work\r\n    */\r\n    function initialize() external onlyInit {\r\n        initialized();\r\n        setDepositable(true);\r\n    }\r\n\r\n    /**\r\n    * @notice Deposit `_value` `_token` to the vault\r\n    * @param _token Address of the token being transferred\r\n    * @param _value Amount of tokens being transferred\r\n    */\r\n    function deposit(address _token, uint256 _value) external payable isInitialized {\r\n        _deposit(_token, _value);\r\n    }\r\n\r\n    /**\r\n    * @notice Transfer `_value` `_token` from the Vault to `_to`\r\n    * @param _token Address of the token being transferred\r\n    * @param _to Address of the recipient of tokens\r\n    * @param _value Amount of tokens being transferred\r\n    */\r\n    /* solium-disable-next-line function-order */\r\n    function transfer(address _token, address _to, uint256 _value)\r\n        external\r\n        authP(TRANSFER_ROLE, arr(_token, _to, _value))\r\n    {\r\n        require(_value > 0, ERROR_TRANSFER_VALUE_ZERO);\r\n\r\n        if (_token == ETH) {\r\n            require(_to.send(_value), ERROR_SEND_REVERTED);\r\n        } else {\r\n            require(ERC20(_token).safeTransfer(_to, _value), ERROR_TOKEN_TRANSFER_REVERTED);\r\n        }\r\n\r\n        emit VaultTransfer(_token, _to, _value);\r\n    }\r\n\r\n    function balance(address _token) public view returns (uint256) {\r\n        if (_token == ETH) {\r\n            return address(this).balance;\r\n        } else {\r\n            return ERC20(_token).staticBalanceOf(address(this));\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Disable recovery escape hatch, as it could be used\r\n    *      maliciously to transfer funds away from the vault\r\n    */\r\n    function allowRecoverability(address) public view returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    function _deposit(address _token, uint256 _value) internal {\r\n        require(isDepositable(), ERROR_NOT_DEPOSITABLE);\r\n        require(_value > 0, ERROR_DEPOSIT_VALUE_ZERO);\r\n\r\n        if (_token == ETH) {\r\n            // Deposit is implicit in this case\r\n            require(msg.value == _value, ERROR_VALUE_MISMATCH);\r\n        } else {\r\n            require(\r\n                ERC20(_token).safeTransferFrom(msg.sender, address(this), _value),\r\n                ERROR_TOKEN_TRANSFER_FROM_REVERTED\r\n            );\r\n        }\r\n\r\n        emit VaultDeposit(_token, msg.sender, _value);\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/lib/math/SafeMath.sol\r\n\r\n// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/d51e38758e1d985661534534d5c61e27bece5042/contracts/math/SafeMath.sol\r\n// Adapted to use pragma ^0.4.24 and satisfy our linter rules\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    string private constant ERROR_ADD_OVERFLOW = \"MATH_ADD_OVERFLOW\";\r\n    string private constant ERROR_SUB_UNDERFLOW = \"MATH_SUB_UNDERFLOW\";\r\n    string private constant ERROR_MUL_OVERFLOW = \"MATH_MUL_OVERFLOW\";\r\n    string private constant ERROR_DIV_ZERO = \"MATH_DIV_ZERO\";\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = _a * _b;\r\n        require(c / _a == _b, ERROR_MUL_OVERFLOW);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = _a / _b;\r\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b <= _a, ERROR_SUB_UNDERFLOW);\r\n        uint256 c = _a - _b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        uint256 c = _a + _b;\r\n        require(c >= _a, ERROR_ADD_OVERFLOW);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, ERROR_DIV_ZERO);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/Projects.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer: GPL-3.0-or-later\r\n */\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n  * @title Bounties Interface\r\n  * @dev Defines a minimal interface blueprint for the StandardBounties contract\r\n  */\r\ninterface Bounties {\r\n    /**\r\n     * @notice Submit a fulfillment for issue #`_bountyId` with the following info: `_data`\r\n     */\r\n    function fulfillBounty(\r\n        address _sender,\r\n        uint _bountyId,\r\n        address[] _fulfillers,\r\n        string _data\r\n    ) external; //{}\r\n\r\n    /**\r\n     * @notice Update fulfillment for issue #`_bountyId` with the following info: `_data`\r\n     */\r\n    function updateFulfillment(\r\n        address _sender,\r\n        uint _bountyId,\r\n        uint _fulfillmentId,\r\n        address[] _fulfillers,\r\n        string _data\r\n    ) external; //{}\r\n\r\n    function issueBounty(\r\n        address sender,\r\n        address[] _issuers,\r\n        address[] _approvers,\r\n        string _data,\r\n        uint _deadline,\r\n        address _token,\r\n        uint _tokenVersion\r\n    ) external returns (uint);\r\n\r\n    function contribute(\r\n        address _sender,\r\n        uint _bountyId,\r\n        uint _amount\r\n    ) external payable;\r\n\r\n    function issueAndContribute(\r\n        address sender,\r\n        address[] _issuers,\r\n        address[] _approvers,\r\n        string _data,\r\n        uint _deadline,\r\n        address _token,\r\n        uint _tokenVersion,\r\n        uint _depositAmount\r\n    ) external payable returns (uint);\r\n\r\n    function performAction(\r\n        address _sender,\r\n        uint _bountyId,\r\n        string _data\r\n    ) external;\r\n\r\n    function acceptFulfillment(\r\n        address _sender,\r\n        uint _bountyId,\r\n        uint _fulfillmentId,\r\n        uint _approverId,\r\n        uint[] _tokenAmounts\r\n    ) external;\r\n\r\n    function drainBounty(\r\n        address _sender,\r\n        uint _bountyId,\r\n        uint _issuerId,\r\n        uint[] _amounts\r\n    ) external;\r\n\r\n    function changeDeadline(\r\n        address _sender,\r\n        uint _bountyId,\r\n        uint _issuerId,\r\n        uint _deadline\r\n    ) external;\r\n\r\n    function changeData(\r\n        address _sender,\r\n        uint _bountyId,\r\n        uint _issuerId,\r\n        string _data\r\n    ) external;\r\n}\r\n\r\n/**\r\n  * @title ERC20 Interface\r\n  * @dev Defines a minimal interface blueprint for ERC20 tokens interaction\r\n  */\r\ninterface ERC20Token {\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n    function transfer(address to, uint tokens) external returns (bool success);\r\n}\r\n\r\n\r\n/**\r\n  * @title Projects App\r\n  * @author Autark\r\n  * @dev Defines a registry for project tasks in addition to\r\n  * applying bounties in bulk and accepting fulfillment via this contract\r\n  */\r\ncontract Projects is AragonApp, DepositableStorage {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    Bounties public bountiesRegistry;\r\n    BountySettings public settings;\r\n    Vault public vault;\r\n    // Auth roles\r\n    bytes32 public constant FUND_ISSUES_ROLE =  keccak256(\"FUND_ISSUES_ROLE\");\r\n    bytes32 public constant REMOVE_ISSUES_ROLE = keccak256(\"REMOVE_ISSUES_ROLE\");\r\n    bytes32 public constant ADD_REPO_ROLE = keccak256(\"ADD_REPO_ROLE\");\r\n    bytes32 public constant CHANGE_SETTINGS_ROLE =  keccak256(\"CHANGE_SETTINGS_ROLE\");\r\n    bytes32 public constant CURATE_ISSUES_ROLE = keccak256(\"CURATE_ISSUES_ROLE\");\r\n    bytes32 public constant REMOVE_REPO_ROLE =  keccak256(\"REMOVE_REPO_ROLE\");\r\n    bytes32 public constant REVIEW_APPLICATION_ROLE = keccak256(\"REVIEW_APPLICATION_ROLE\");\r\n    bytes32 public constant WORK_REVIEW_ROLE = keccak256(\"WORK_REVIEW_ROLE\");\r\n    bytes32 public constant FUND_OPEN_ISSUES_ROLE = keccak256(\"FUND_OPEN_ISSUES_ROLE\");\r\n    bytes32 public constant UPDATE_BOUNTIES_ROLE = keccak256(\"UPDATE_BOUNTIES_ROLE\");\r\n\r\n    string private constant ERROR_PROJECTS_VAULT_NOT_CONTRACT = \"PROJECTS_VAULT_NOT_CONTRACT\";\r\n    string private constant ERROR_STANDARD_BOUNTIES_NOT_CONTRACT = \"STANDARD_BOUNTIES_NOT_CONTRACT\";\r\n    string private constant ERROR_LENGTH_EXCEEDED = \"LENGTH_EXCEEDED\";\r\n    string private constant ERROR_LENGTH_MISMATCH = \"ARRAY_LENGTH_MISMATCH\";\r\n    string private constant ERROR_CID_LENGTH = \"IPFS_ADDRESSES_LENGTH\";\r\n    string private constant ERROR_ISSUE_INACTIVE = \"ISSUE_NOT_ACTIVE\";\r\n    string private constant ERROR_ISSUE_ACTIVE = \"ISSUE_HAS_BOUNTY\";\r\n    string private constant ERROR_BOUNTY_FULFILLED = \"BOUNTY_FULFILLED\";\r\n    string private constant ERROR_BOUNTY_REMOVED = \"BOUNTY_REMOVED\";\r\n    string private constant ERROR_INVALID_AMOUNT = \"INVALID_TOKEN_AMOUNT\";\r\n    string private constant ERROR_ETH_CONTRACT = \"WRONG_ETH_TOKEN\";\r\n    string private constant ERROR_REPO_MISSING = \"REPO_NOT_ADDED\";\r\n    string private constant ERROR_REPO_EXISTS = \"REPO_ALREADY_ADDED\";\r\n    string private constant ERROR_USER_APPLIED = \"USER_ALREADY_APPLIED\";\r\n    string private constant ERROR_NO_APPLICATION = \"USER_APPLICATION_MISSING\";\r\n    string private constant ERROR_NO_ERC721 = \"ERC_721_FORBIDDEN\";\r\n    string private constant ERROR_PENDING_BOUNTIES = \"REPO_HAS_PENDING_BOUNTIES\";\r\n    string private constant ERROR_OPEN_BOUNTY = \"CANNOT_ASSIGN_OPEN_BOUNTY\";\r\n\r\n\r\n    // IPFS length const\r\n    uint256 private constant CID_LENGTH = 46;\r\n\r\n    // The entries in the repos registry.\r\n    mapping(bytes32 => Repo) private repos;\r\n    // issue counter to track how many open issues a repo has\r\n    mapping (bytes32 => uint256) openBounties;\r\n    // Gives us a repos array-like contruct so we can both \"iterate\" and upgrade gracefully\r\n    mapping(uint256 => bytes32) private repoIndex;\r\n    uint256 private repoIndexLength;\r\n    enum SubmissionStatus { Unreviewed, Accepted, Rejected }  // 0: unreviewed 1: Accepted 2: Rejected\r\n\r\n    // Structs\r\n    struct BountySettings {\r\n        uint256[] expMultipliers;\r\n        bytes32[] expLevels;\r\n        uint256 baseRate;\r\n        uint256 bountyDeadline;\r\n        address bountyCurrency;\r\n    }\r\n\r\n    struct Repo {\r\n        mapping(uint256 => Issue) issues;\r\n        uint index;\r\n    }\r\n\r\n    struct AssignmentRequest {\r\n        SubmissionStatus status;\r\n        string requestHash; //IPFS hash of the application data\r\n        bool exists;\r\n    }\r\n\r\n    struct Issue {\r\n        bytes32 repo;  // This is the internal repo identifier\r\n        uint256 number; // May be redundant tracking this\r\n        bool hasBounty;\r\n        bool fulfilled;\r\n        address tokenContract;\r\n        uint256 bountySize;\r\n        uint256 priority;\r\n        address bountyWallet; // Not sure if we'll have a way to \"retrieve\" this value from status open bounties\r\n        uint standardBountyId;\r\n        address assignee;\r\n        address[] applicants;\r\n        //uint256 submissionQty;\r\n        uint256[] submissionIndices;\r\n        mapping(address => AssignmentRequest) assignmentRequests;\r\n    }\r\n\r\n    // Fired when a repository is added to the registry.\r\n    event RepoAdded(bytes32 indexed repoId, uint index);\r\n    // Fired when a repository is removed from the registry.\r\n    event RepoRemoved(bytes32 indexed repoId, uint index);\r\n    // Fired when a repo is updated in the registry\r\n    event RepoUpdated(bytes32 indexed repoId, uint newIndex);\r\n    // Fired when a bounty is added to a repo\r\n    event BountyAdded(bytes32 repoId, uint256 issueNumber, uint256 bountySize, uint256 registryId, string ipfsHash);\r\n    // Fired when a bounty is removed\r\n    event BountyRemoved(bytes32 repoId, uint256 issueNumber, uint256 oldBountySize);\r\n    // Fired when an issue is curated\r\n    event IssueCurated(bytes32 repoId);\r\n    // Fired when settings are changed\r\n    event BountySettingsChanged();\r\n    // Fired when user requests issue assignment\r\n    event AssignmentRequested(bytes32 indexed repoId, uint256 issueNumber);\r\n    // Fired when Task Manager approves assignment request\r\n    event AssignmentApproved(address applicant, bytes32 indexed repoId, uint256 issueNumber);\r\n    // Fired when Task Manager rejects assignment request\r\n    event AssignmentRejected(address applicant, bytes32 indexed repoId, uint256 issueNumber);\r\n    // Fired when a reviewer accepts accepts a submission\r\n    event SubmissionAccepted(uint256 submissionNumber, bytes32 repoId, uint256 issueNumber);\r\n    // Fired when a reviewer rejects a submission\r\n    event SubmissionRejected(uint256 submissionNumber, bytes32 repoId, uint256 issueNumber);\r\n    // Fired when a bounty is opened up to work submissions from anyone\r\n    event AwaitingSubmissions(bytes32 repoId, uint256 issueNumber);\r\n\r\n\r\n    /**\r\n     * @notice Initialize Projects app for StandardBounties at `_bountiesAddr`\r\n     * @dev Initializes the Projects app, this is the Aragon custom constructor\r\n     * @param _bountiesAddr Address of the StandardBounties deployed instance Projects will rely on (changeable)\r\n     * @param _vault Address of the vault Projects will rely on (non changeable)\r\n     */\r\n    function initialize(\r\n        address _bountiesAddr,\r\n        Vault _vault\r\n    ) external onlyInit\r\n    {\r\n        require(isContract(_vault), ERROR_PROJECTS_VAULT_NOT_CONTRACT);\r\n        require(isContract(_bountiesAddr), ERROR_STANDARD_BOUNTIES_NOT_CONTRACT);\r\n\r\n        vault = _vault;\r\n\r\n        bountiesRegistry = Bounties(_bountiesAddr); // Standard Bounties instance\r\n\r\n        _addExperienceLevel(100, bytes32(\"Beginner\"));\r\n        _addExperienceLevel(300, bytes32(\"Intermediate\"));\r\n        _addExperienceLevel(500, bytes32(\"Advanced\"));\r\n\r\n        _changeBountySettings(\r\n            0, // baseRate\r\n            336, // bountyDeadline\r\n            ETH, // default bounty currency inits to ETH\r\n            _bountiesAddr // bountyAllocator\r\n        );\r\n\r\n        setDepositable(true);\r\n        initialized();\r\n    }\r\n\r\n///////////////////////\r\n// Set state functions\r\n///////////////////////\r\n\r\n\r\n    /**\r\n     * @notice Update settings for the Projects app\r\n     */\r\n    function changeBountySettings(\r\n        uint256[] _expMultipliers,\r\n        bytes32[] _expLevels,\r\n        uint256 _baseRate,\r\n        uint256 _bountyDeadline,\r\n        address _bountyCurrency,\r\n        address _bountyAllocator\r\n    ) external auth(CHANGE_SETTINGS_ROLE)\r\n    {\r\n        require(_expMultipliers.length == _expLevels.length, ERROR_LENGTH_MISMATCH);\r\n        require(_isBountiesContractValid(_bountyAllocator), ERROR_STANDARD_BOUNTIES_NOT_CONTRACT);\r\n        settings.expLevels.length = 0;\r\n        settings.expMultipliers.length = 0;\r\n        for (uint i = 0; i < _expLevels.length; i++) {\r\n            _addExperienceLevel(_expMultipliers[i], _expLevels[i]);\r\n        }\r\n        _changeBountySettings(_baseRate, _bountyDeadline, _bountyCurrency, _bountyAllocator);\r\n    }\r\n\r\n///////////////////////\r\n// View state functions\r\n///////////////////////\r\n\r\n    /**\r\n     * @notice Get issue data from the registry.\r\n     * @param _repoId The id of the repo in the projects registry\r\n     */\r\n    function getIssue(bytes32 _repoId, uint256 _issueNumber) external view isInitialized\r\n    returns(bool hasBounty, uint standardBountyId, bool fulfilled, uint balance, address assignee)\r\n    {\r\n        Issue storage issue = repos[_repoId].issues[_issueNumber];\r\n        hasBounty = issue.hasBounty;\r\n        fulfilled = issue.fulfilled;\r\n        standardBountyId = issue.standardBountyId;\r\n        balance = issue.bountySize;\r\n        assignee = issue.assignee;\r\n    }\r\n\r\n    /**\r\n     * @notice Get registry size.\r\n     */\r\n    function getReposCount() external view isInitialized returns (uint count) {\r\n        return repoIndexLength;\r\n    }\r\n\r\n    /**\r\n     * @notice Get an entry from the registry.\r\n     * @param _repoId The id of the repo in the projects registry\r\n     * @return index the repo registry index\r\n     */\r\n    function getRepo(bytes32 _repoId) external view isInitialized returns (uint256 index, uint256 openIssueCount) {\r\n        require(isRepoAdded(_repoId), ERROR_REPO_MISSING);\r\n        index = repos[_repoId].index;\r\n        openIssueCount = openBounties[_repoId];\r\n    }\r\n\r\n    /**\r\n     * @notice Get general settings.\r\n     * @return BountySettings\r\n     */\r\n\r\n    function getSettings() external view isInitialized returns (\r\n        uint256[] expMultipliers,\r\n        bytes32[] expLevels,\r\n        uint256 baseRate,\r\n        uint256 bountyDeadline,\r\n        address bountyCurrency,\r\n        address bountyAllocator\r\n        //address bountyArbiter\r\n    )\r\n    {\r\n        return (\r\n            settings.expMultipliers,\r\n            settings.expLevels,\r\n            settings.baseRate,\r\n            settings.bountyDeadline,\r\n            settings.bountyCurrency,\r\n            bountiesRegistry\r\n            //settings.bountyArbiter\r\n        );\r\n    }\r\n\r\n///////////////////////\r\n// Repository functions\r\n///////////////////////\r\n    /**\r\n     * @notice Add repository\r\n     * @param _repoId The id of the repo in the projects registry\r\n     * @return index for the added repo at the registry\r\n     */\r\n    function addRepo(\r\n        bytes32 _repoId\r\n    ) external auth(ADD_REPO_ROLE) returns (uint index)\r\n    {\r\n        require(!isRepoAdded(_repoId), ERROR_REPO_EXISTS);\r\n        repoIndex[repoIndexLength] = _repoId;\r\n        repos[_repoId].index = repoIndexLength++;\r\n        //repos[_repoId].index = repoIndex.push(_repoId) - 1;\r\n        emit RepoAdded(_repoId, repos[_repoId].index);\r\n        return repoIndexLength - 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Remove repository\r\n     * @param _repoId The id of the repo in the projects registry\r\n     */\r\n    function removeRepo(\r\n        bytes32 _repoId\r\n    ) external auth(REMOVE_REPO_ROLE) returns (bool success)\r\n    {\r\n        require(isRepoAdded(_repoId), ERROR_REPO_MISSING);\r\n        require(openBounties[_repoId] == 0, ERROR_PENDING_BOUNTIES);\r\n        uint rowToDelete = repos[_repoId].index;\r\n\r\n        if (repoIndexLength != 1) {\r\n            bytes32 repoToMove = repoIndex[repoIndexLength - 1];\r\n            repoIndex[rowToDelete] = repoToMove;\r\n            repos[repoToMove].index = rowToDelete;\r\n        }\r\n\r\n        repoIndexLength--;\r\n        emit RepoRemoved(_repoId, rowToDelete);\r\n        return true;\r\n    }\r\n\r\n///////////////////\r\n// External Bounty functions\r\n///////////////////\r\n\r\n    /**\r\n     * @notice Submit application for issue `_issueNumber` with application `_application`\r\n     * @param _repoId the repo id of the issue\r\n     * @param _issueNumber the issue up for assignment\r\n     * @param _application IPFS hash for the applicant's proposed timeline and strategy\r\n     */\r\n    function requestAssignment(\r\n        bytes32 _repoId,\r\n        uint256 _issueNumber,\r\n        string _application\r\n    ) external isInitialized\r\n    {\r\n        Issue storage issue = repos[_repoId].issues[_issueNumber];\r\n\r\n        require(!issue.fulfilled,ERROR_BOUNTY_FULFILLED);\r\n        require(issue.hasBounty, ERROR_ISSUE_INACTIVE);\r\n        require(issue.assignee != address(-1), ERROR_OPEN_BOUNTY);\r\n        require(issue.assignmentRequests[msg.sender].exists == false, ERROR_USER_APPLIED);\r\n\r\n        issue.applicants.push(msg.sender);\r\n        issue.assignmentRequests[msg.sender] = AssignmentRequest(\r\n            SubmissionStatus.Unreviewed,\r\n            _application,\r\n            true\r\n        );\r\n        bountiesRegistry.performAction(\r\n            address(this),\r\n            issue.standardBountyId,\r\n            _application\r\n        );\r\n        emit AssignmentRequested(_repoId, _issueNumber);\r\n    }\r\n\r\n    /**\r\n     * @notice `_approved ? 'Accept' : 'Reject'` `_requestor` for issue `_issueNumber`\r\n     * @param _repoId the repo id of the issue\r\n     * @param _issueNumber the issue up for assignment\r\n     * @param _requestor address of user that will be assigned the issue\r\n     * @param _updatedApplication IPFS hash of the application containing optional feedback\r\n     */\r\n    function reviewApplication(\r\n        bytes32 _repoId,\r\n        uint256 _issueNumber,\r\n        address _requestor,\r\n        string _updatedApplication,\r\n        bool _approved\r\n    ) external auth(REVIEW_APPLICATION_ROLE)\r\n    {\r\n        Issue storage issue = repos[_repoId].issues[_issueNumber];\r\n        require(issue.assignee != address(-1), ERROR_OPEN_BOUNTY);\r\n        require(issue.assignmentRequests[_requestor].exists == true, ERROR_NO_APPLICATION);\r\n        issue.assignmentRequests[_requestor].requestHash = _updatedApplication;\r\n\r\n        if (_approved) {\r\n            issue.assignee = _requestor;\r\n            issue.assignmentRequests[_requestor].status = SubmissionStatus.Accepted;\r\n            emit AssignmentApproved(_requestor, _repoId, _issueNumber);\r\n        } else {\r\n            issue.assignmentRequests[_requestor].status = SubmissionStatus.Rejected;\r\n            emit AssignmentRejected(_requestor, _repoId, _issueNumber);\r\n        }\r\n        bountiesRegistry.performAction(\r\n            address(this),\r\n            issue.standardBountyId,\r\n            _updatedApplication\r\n        );\r\n\r\n    }\r\n\r\n    /**\r\n     * @notice `_approved ? 'Accept' : 'Reject'` work for issue `_issueNumber` with info: `_updatedSubmissionHash`\r\n     * @dev add a submission to local state after it's been added to StandardBounties.sol\r\n     * @param _repoId the repo id of the issue\r\n     * @param _issueNumber the issue up for resolution\r\n     * @param _submissionNumber submission index of the submitted work for review\r\n     * @param _approved decision to accept the contribution\r\n     * @param _updatedSubmissionHash IPFS hash of the submission containing optional feedback\r\n     * @param _tokenAmounts array of amounts???\r\n     */\r\n    function reviewSubmission(\r\n        bytes32 _repoId,\r\n        uint256 _issueNumber,\r\n        uint256 _submissionNumber,\r\n        bool _approved,\r\n        string _updatedSubmissionHash,\r\n        uint256[] _tokenAmounts\r\n    ) external auth(WORK_REVIEW_ROLE)\r\n    {\r\n        Issue storage issue = repos[_repoId].issues[_issueNumber];\r\n\r\n        require(!issue.fulfilled,ERROR_BOUNTY_FULFILLED);\r\n        require(issue.assignee != address(0), ERROR_ISSUE_INACTIVE);\r\n\r\n        if (_approved) {\r\n            uint256 tokenTotal;\r\n            for (uint256 i = 0; i < _tokenAmounts.length; i++) {\r\n                tokenTotal = tokenTotal.add(_tokenAmounts[i]);\r\n            }\r\n            require(tokenTotal >= issue.bountySize, ERROR_INVALID_AMOUNT);\r\n\r\n            issue.fulfilled = true;\r\n            bountiesRegistry.acceptFulfillment(\r\n                address(this),\r\n                issue.standardBountyId,\r\n                _submissionNumber,\r\n                0,\r\n                _tokenAmounts\r\n            );\r\n            openBounties[_repoId] = openBounties[_repoId].sub(1);\r\n            emit SubmissionAccepted(_submissionNumber, _repoId, _issueNumber);\r\n        } else {\r\n            emit SubmissionRejected(_submissionNumber, _repoId, _issueNumber);\r\n        }\r\n\r\n        bountiesRegistry.performAction(\r\n            address(this),\r\n            issue.standardBountyId,\r\n            _updatedSubmissionHash\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Update bounty for issue `_issueNumber`: `_description`\r\n     * @param _repoId The id of the repos in the projects registry\r\n     * @param _issueNumber issue number the bounty is assigned to\r\n     * @param _data Information hash stored in the bounty\r\n     * @param _deadline new deadline for bounty fulfillments\r\n     * @param _description Utilized when forwarded to give background to the\r\n     *                     issues up for removal\r\n     */\r\n    function updateBounty(\r\n        bytes32 _repoId,\r\n        uint256 _issueNumber,\r\n        string _data,\r\n        uint256 _deadline,\r\n        string _description\r\n    ) external auth(UPDATE_BOUNTIES_ROLE)\r\n    {\r\n        Issue storage issue = repos[_repoId].issues[_issueNumber];\r\n\r\n        require(!issue.fulfilled,ERROR_BOUNTY_FULFILLED);\r\n        require(issue.hasBounty, ERROR_ISSUE_INACTIVE);\r\n\r\n        bountiesRegistry.changeData(\r\n            address(this),\r\n            issue.standardBountyId,\r\n            0,\r\n            _data\r\n        );\r\n        bountiesRegistry.changeDeadline(\r\n            address(this),\r\n            issue.standardBountyId,\r\n            0,\r\n            _deadline\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Remove funding from issues: `_description`\r\n     * @param _repoIds The ids of the repos in the projects registry\r\n     * @param _issueNumbers an array of bounty indexes\r\n     * @param _description Utilized when forwarded to give background to the\r\n     *                     issues up for removal\r\n     */\r\n    function removeBounties(\r\n        bytes32[] _repoIds,\r\n        uint256[] _issueNumbers,\r\n        string _description\r\n    ) external auth(REMOVE_ISSUES_ROLE)\r\n    {\r\n        require(_repoIds.length < 256, ERROR_LENGTH_EXCEEDED);\r\n        require(_issueNumbers.length < 256, ERROR_LENGTH_EXCEEDED);\r\n        require(_repoIds.length == _issueNumbers.length, ERROR_LENGTH_MISMATCH);\r\n        for (uint8 i = 0; i < _issueNumbers.length; i++) {\r\n            _removeBounty(_repoIds[i], _issueNumbers[i]);\r\n        }\r\n    }\r\n\r\n///////////////////////\r\n// External utility functions\r\n///////////////////////\r\n\r\n    /**\r\n     * @notice Returns Applicant array length\r\n     * @param _repoId the repo id of the issue\r\n     * @param _issueNumber the issue up for assignmen\r\n     * @return  array length of the applicants array\r\n     */\r\n    function getApplicantsLength(\r\n        bytes32 _repoId,\r\n        uint256 _issueNumber\r\n    ) external view isInitialized returns(uint256 applicantQty)\r\n    {\r\n        applicantQty = repos[_repoId].issues[_issueNumber].applicants.length;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns Applicant Address\r\n     * @param _repoId The repo id of the issue\r\n     * @param _issueNumber The issue up for assignment\r\n     * @param _idx The applicant's position in the array\r\n     * @return  applicant address\r\n     */\r\n    function getApplicant(\r\n        bytes32 _repoId,\r\n        uint256 _issueNumber,\r\n        uint256 _idx\r\n    ) external view isInitialized returns(address applicant, string application, SubmissionStatus status)\r\n    {\r\n        Issue storage issue = repos[_repoId].issues[_issueNumber];\r\n        applicant = issue.applicants[_idx];\r\n        application = issue.assignmentRequests[applicant].requestHash;\r\n        status = issue.assignmentRequests[applicant].status;\r\n    }\r\n\r\n///////////////////\r\n// Public Bounty functions\r\n///////////////////\r\n\r\n    /**\r\n     * @notice Fund issues: `_description`\r\n     * @param _repoIds The ids of the repos in the projects registry\r\n     * @param _issueNumbers An array of bounty indexes\r\n     * @param _bountySizes An array of bounty sizes\r\n     * @param _deadlines An array of bounty deadlines\r\n     * @param _tokenTypes An array of currency types: 0=ETH from user's wallet, 1=ETH from vault, 20=ERC20 token from vault\r\n     * @param _tokenContracts An array of token contracts\r\n     * @param _ipfsAddresses A string of IPFS addresses\r\n     * @param _description parsed and display to user when this function is forwarded\r\n     */\r\n    function addBounties(\r\n        bytes32[] _repoIds,\r\n        uint256[] _issueNumbers,\r\n        uint256[] _bountySizes,\r\n        uint256[] _deadlines,\r\n        uint256[] _tokenTypes,\r\n        address[] _tokenContracts,\r\n        string _ipfsAddresses,\r\n        string _description\r\n    ) public payable auth(FUND_ISSUES_ROLE)\r\n    {\r\n        // ensure the transvalue passed equals transaction value\r\n        //checkTransValueEqualsMessageValue(msg.value, _bountySizes,_tokenBounties);\r\n        string memory ipfsHash;\r\n        uint standardBountyId;\r\n        require(bytes(_ipfsAddresses).length == (CID_LENGTH * _bountySizes.length), ERROR_CID_LENGTH);\r\n\r\n        for (uint i = 0; i < _bountySizes.length; i++) {\r\n            ipfsHash = getHash(_ipfsAddresses, i);\r\n\r\n            // submit the bounty to the StandardBounties contract\r\n            standardBountyId = _issueBounty(\r\n                ipfsHash,\r\n                _deadlines[i],\r\n                _tokenContracts[i],\r\n                _tokenTypes[i],\r\n                _bountySizes[i]\r\n            );\r\n\r\n            //Add bounty to local registry\r\n            _addBounty(\r\n                _repoIds[i],\r\n                _issueNumbers[i],\r\n                standardBountyId,\r\n                _tokenContracts[i],\r\n                _bountySizes[i],\r\n                ipfsHash\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Fund open-submission issues: `_description`\r\n     * @param _repoIds The ids of the repos in the projects registry\r\n     * @param _issueNumbers an array of bounty indexes\r\n     * @param _bountySizes an array of bounty sizes\r\n     * @param _deadlines an array of bounty deadlines\r\n     * @param _tokenTypes array of currency types: 0=ETH, 20=ERC20\r\n     * @param _tokenContracts an array of token contracts\r\n     * @param _ipfsAddresses a string of ipfs addresses\r\n     * @param _description parsed and display to user when this function is forwarded\r\n     */\r\n    function addBountiesNoAssignment(\r\n        bytes32[] _repoIds,\r\n        uint256[] _issueNumbers,\r\n        uint256[] _bountySizes,\r\n        uint256[] _deadlines,\r\n        uint256[] _tokenTypes,\r\n        address[] _tokenContracts,\r\n        string _ipfsAddresses,\r\n        string _description\r\n    ) public payable auth(FUND_OPEN_ISSUES_ROLE)\r\n    {\r\n        string memory ipfsHash;\r\n        uint standardBountyId;\r\n\r\n        for (uint i = 0; i < _bountySizes.length; i++) {\r\n            ipfsHash = getHash(_ipfsAddresses, i);\r\n\r\n            // submit the bounty to the StandardBounties contract\r\n            standardBountyId = _issueBounty(\r\n                ipfsHash,\r\n                _deadlines[i],\r\n                _tokenContracts[i],\r\n                _tokenTypes[i],\r\n                _bountySizes[i]\r\n            );\r\n\r\n            //Add bounty to local registry\r\n            _addBounty(\r\n                _repoIds[i],\r\n                _issueNumbers[i],\r\n                standardBountyId,\r\n                _tokenContracts[i],\r\n                _bountySizes[i],\r\n                ipfsHash\r\n            );\r\n\r\n            repos[_repoIds[i]].issues[_issueNumbers[i]].assignee = address(-1);\r\n            emit AwaitingSubmissions(_repoIds[i], _issueNumbers[i]);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @notice Issue curation: `_description`\r\n     * @dev curateIssues(): This function conforms to the upcoming\r\n     *                      specId 2 forwarder interface\r\n     *                      and it is meant to be forwarded to a dot\r\n     *                      voting app instance or another voting app\r\n     *                      that utilizes dynamic forwarding.\r\n     *                      The unused parameters are in place to conform\r\n     *                      to the above specification.\r\n     * @param _description The description of the issue curation\r\n     */\r\n    function curateIssues(\r\n        address[] /*unused_Addresses*/,\r\n        uint256[] issuePriorities,\r\n        uint256[] issueDescriptionIndices,\r\n        string /* unused_issueDescriptions*/,\r\n        string _description,\r\n        uint256[] issueRepos,\r\n        uint256[] issueNumbers,\r\n        uint256 /* unused_curationId */\r\n    ) public auth(CURATE_ISSUES_ROLE)\r\n    {\r\n        bytes32 repoId;\r\n        uint256 issueLength = issuePriorities.length;\r\n        require(issueLength == issueDescriptionIndices.length, \"LENGTH_MISMATCH: issuePriorites and issueDescriptionIdx\");\r\n        require(issueLength == issueRepos.length, \"LENGTH_MISMATCH: issuePriorites and issueRepos\");\r\n        require(issueLength == issueNumbers.length, \"LENGTH_MISMATCH: issuePriorites and issueNumbers\");\r\n\r\n        for (uint256 i = 0; i < issueLength; i++) {\r\n            repoId = bytes32(issueRepos[i]);\r\n            repos[repoId].issues[uint256(issueNumbers[i])].priority = issuePriorities[i];\r\n            emit IssueCurated(repoId);\r\n        }\r\n    }\r\n\r\n///////////////////////\r\n// Public utility functions\r\n///////////////////////\r\n\r\n    /**\r\n     * @notice Checks if a repo exists in the registry\r\n     * @param _repoId The repo id to check\r\n     * @return _repoId Id for newly added repo\r\n     */\r\n    function isRepoAdded(bytes32 _repoId) public view isInitialized returns(bool isAdded) {\r\n        uint256 repoIdxVal = repos[_repoId].index;\r\n        if (repoIndexLength == 0)\r\n            return false;\r\n        if (repoIdxVal >= repoIndexLength)\r\n            return false;\r\n        return (repoIndex[repos[_repoId].index] == _repoId);\r\n    }\r\n\r\n///////////////////////\r\n// Internal functions\r\n///////////////////////\r\n\r\n    /**\r\n     * @dev checks the hashed contract code to ensure it matches the provided hash\r\n     */\r\n    function _isBountiesContractValid(address _bountyRegistry) internal view returns(bool) {\r\n        if (_bountyRegistry == address(0)) {\r\n            return false;\r\n        }\r\n        if (_bountyRegistry == address(bountiesRegistry)) {\r\n            return true;\r\n        }\r\n        uint256 size;\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly { size := extcodesize(_bountyRegistry) }\r\n        if (size != 23406) {\r\n            return false;\r\n        }\r\n        uint256 segments = 4;\r\n        uint256 segmentLength = size / segments;\r\n        bytes memory registryCode = new bytes(segmentLength);\r\n        bytes32[4] memory validRegistryHashes = [\r\n            bytes32(0x9904de0ff2a8144b30f80f0de9184731b7c39116b1f021bad12dcbb740f8371d),\r\n            bytes32(0xd2319fa5b8b5614a3634c84ff340d27fa6e5921162e44bc2256f379ad86608f3),\r\n            bytes32(0x0fd4c8d32b2c21b41989666a6d19f7a5f4987ae6d915dd96698de62db8a79643),\r\n            bytes32(0x6af9efdc22f9352086c68a7b5c270db4f0fdc2b5ab18984a2d17b92ae327e144)\r\n        ];\r\n        for (uint256 i = 0; i < segments; i++) {\r\n            // solium-disable-next-line security/no-inline-assembly\r\n            assembly{ extcodecopy(_bountyRegistry,add(0x20,registryCode),div(mul(i,segmentLength),segments),segmentLength) }\r\n            if (validRegistryHashes[i] != keccak256(registryCode)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Update bounty setting values\r\n     * @dev _changeBountySettings(): update app settings by changing contract setting state\r\n     */\r\n    function _changeBountySettings(\r\n        uint256 _baseRate,\r\n        uint256 _bountyDeadline,\r\n        address _bountyCurrency,\r\n        address _bountyAllocator\r\n    ) internal\r\n    {\r\n        settings.baseRate = _baseRate;\r\n        settings.bountyDeadline = _bountyDeadline;\r\n        settings.bountyCurrency = _bountyCurrency;\r\n        bountiesRegistry = Bounties(_bountyAllocator);\r\n\r\n        emit BountySettingsChanged();\r\n    }\r\n\r\n    /**\r\n     * @notice create a new experience level containing the multiplier and description\r\n     * @dev _addExperienceLevel():  Push new entries into the expMultiplier and expLevel\r\n     *                              arrays\r\n     */\r\n    function _addExperienceLevel(\r\n        uint _multiplier,\r\n        bytes32 _description\r\n    ) internal\r\n    {\r\n        settings.expMultipliers.push(_multiplier);\r\n        settings.expLevels.push(_description);\r\n    }\r\n\r\n    /**\r\n     * @notice passes provided info to the linked Standard Bounties contract\r\n     * @dev _issueBounty(): There are three forms of the contribute call.\r\n     *                      The first is used if ETH from the user is used as the bounty contribution\r\n     *                      The second is used if ETH from the vault is the bounty currency\r\n     *                      The third is used if an ERC20 token from the vault is the bounty currency\r\n     */\r\n    function _issueBounty(\r\n        string _ipfsHash,\r\n        uint256 _deadline,\r\n        address _tokenContract,\r\n        uint256 _tokenType,\r\n        uint256 _bountySize\r\n    ) internal returns (uint256 bountyId)\r\n    {\r\n        require(_tokenType != 721, ERROR_NO_ERC721);\r\n        uint256 registryTokenType;\r\n        if (_tokenType == 0) {\r\n            require(_tokenContract == ETH, ERROR_ETH_CONTRACT);\r\n            registryTokenType = _tokenType;\r\n        } else if (_tokenType == 1) {\r\n            require(_tokenContract == ETH, ERROR_ETH_CONTRACT);\r\n            registryTokenType = 0;\r\n        } else {\r\n            registryTokenType = _tokenType;\r\n        }\r\n\r\n        address[] memory issuers = new address[](1);\r\n        issuers[0] = address(this);\r\n\r\n        if (_tokenType > 0) {\r\n            vault.transfer(_tokenContract, this, _bountySize);\r\n            if (registryTokenType != 0) {\r\n                require(ERC20Token(_tokenContract).approve(bountiesRegistry, _bountySize), \"ERROR_ERC20_TRANSFER\");\r\n            }\r\n        }\r\n\r\n        if (registryTokenType == 0) {\r\n            bountyId = bountiesRegistry.issueAndContribute.value(_bountySize)(\r\n                address(this),      // address payable _sender\r\n                issuers,            // address payable [] memory _issuers\r\n                issuers,            // address [] memory _approvers\r\n                _ipfsHash,          // string memory _data\r\n                _deadline,          // uint _deadline\r\n                _tokenContract,     // address _token\r\n                registryTokenType,   // uint _tokenVersion\r\n                _bountySize\r\n            );\r\n        } else {\r\n            bountyId = bountiesRegistry.issueAndContribute(\r\n                address(this),      // address payable _sender\r\n                issuers,            // address payable [] memory _issuers\r\n                issuers,            // address [] memory _approvers\r\n                _ipfsHash,          // string memory _data\r\n                _deadline,          // uint _deadline\r\n                _tokenContract,     // address _token\r\n                registryTokenType,   // uint _tokenVersion\r\n                _bountySize\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice internal function that adds the bounty info to contract state\r\n     * @dev _addBounty():   Creates a new Issue instance in the specified Repo\r\n     *                      and initializes the the state parameters that aren't\r\n     *                      passed in\r\n     */\r\n    function _addBounty(\r\n        bytes32 _repoId,\r\n        uint256 _issueNumber,\r\n        uint _standardBountyId,\r\n        address _tokenContract,\r\n        uint256 _bountySize,\r\n        string _ipfsHash\r\n    ) internal\r\n    {\r\n        address[] memory emptyAddressArray = new address[](0);\r\n        uint256[] memory emptySubmissionIndexArray = new uint256[](0);\r\n        //Issue storage issue = repos[_repoId].issues[_issueNumber];\r\n        require(isRepoAdded(_repoId), ERROR_REPO_MISSING);\r\n        require(!repos[_repoId].issues[_issueNumber].hasBounty, ERROR_ISSUE_ACTIVE);\r\n\r\n        repos[_repoId].issues[_issueNumber] = Issue(\r\n            _repoId,\r\n            _issueNumber,\r\n            true,\r\n            false,\r\n            _tokenContract,\r\n            _bountySize,\r\n            999,\r\n            ETH,\r\n            _standardBountyId,\r\n            ETH,\r\n            emptyAddressArray,\r\n            //address(0),\r\n            //0,\r\n            emptySubmissionIndexArray\r\n        );\r\n        openBounties[_repoId] = openBounties[_repoId].add(1);\r\n        emit BountyAdded(\r\n            _repoId,\r\n            _issueNumber,\r\n            _bountySize,\r\n            _standardBountyId,\r\n            _ipfsHash\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice remove bounty from StandardBounties and local registry\r\n     * @dev _removeBounty():    First transfers the bounty value from\r\n     *                          the StandardBounties registry back\r\n     *                          to the Project's integrated vault.\r\n     *                          Next resets the issue's contract state.\r\n     * @param _repoId the repo id of the issue\r\n     * @param _issueNumber the issue up for assignment\r\n     */\r\n    function _removeBounty(\r\n        bytes32 _repoId,\r\n        uint256 _issueNumber\r\n    ) internal\r\n    {\r\n        Issue storage issue = repos[_repoId].issues[_issueNumber];\r\n        require(issue.hasBounty, ERROR_BOUNTY_REMOVED);\r\n        require(!issue.fulfilled, ERROR_BOUNTY_FULFILLED);\r\n        issue.hasBounty = false;\r\n        uint256[] memory originalAmount = new uint256[](1);\r\n        originalAmount[0] = issue.bountySize;\r\n        bountiesRegistry.drainBounty(\r\n            address(this),\r\n            issue.standardBountyId,\r\n            0,\r\n            originalAmount\r\n        );\r\n        _returnValueToVault(originalAmount[0], issue.tokenContract);\r\n        issue.bountySize = 0;\r\n        bountiesRegistry.changeDeadline(\r\n            address(this),\r\n            issue.standardBountyId,\r\n            0,\r\n            getTimestamp()\r\n        );\r\n        openBounties[_repoId] = openBounties[_repoId].sub(1);\r\n        emit BountyRemoved(\r\n            _repoId,\r\n            _issueNumber,\r\n            originalAmount[0]\r\n        );\r\n    }\r\n\r\n    function _returnValueToVault(uint256 _amount, address _token) internal {\r\n        if (_token == ETH)\r\n            vault.deposit.value(_amount)(_token, _amount);\r\n        else {\r\n            require(ERC20Token(_token).approve(vault, _amount), \"ERROR_ERC20__APPROVAL\");\r\n            vault.deposit(_token, _amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice parses InfoStrings for the CID hash\r\n     * @dev getHash():  First copies over the first 32 bytes.\r\n     *                  Next copies the remaining 14 bytes and\r\n     *                  and masks the remainder of the word\r\n     * @param _str The raw string to be parsed by the function\r\n     * @param _hashIndex The index of the hash to be parsed from\r\n     *                   the string of combined hashes\r\n     */\r\n    function getHash(\r\n        string _str,\r\n        uint256 _hashIndex\r\n    ) internal pure returns (string)\r\n    {\r\n        // first char is at location 0\r\n        //IPFS addresses span from 0 (startindex) to 46 (endIndex)\r\n        uint256 startIndex = _hashIndex * CID_LENGTH;\r\n        uint256 endIndex = startIndex + CID_LENGTH;\r\n        bytes memory strBytes = bytes(_str);\r\n        bytes memory result = new bytes(endIndex-startIndex);\r\n        uint256 length = endIndex - startIndex;\r\n        // destination in memory for the returned hash\r\n        uint256 dest;\r\n        // source location in memory for the returned hash\r\n        uint256 src;\r\n        // need to offset by 0x20 (32 bytes) to account for the first\r\n        // 32 \"header\" bytes\r\n        // then copy the first 32 bytes of the hash into the destination location\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            dest := add(result,0x20)\r\n            src := add(strBytes,add(0x20,startIndex))\r\n            mstore(dest, mload(src))\r\n        }\r\n        // copy the remaining 14 bytes and ensure the remaining\r\n        // 18 bytes of the word are set to \"00\" using a mask\r\n        src += 32;\r\n        dest += 32;\r\n        length -= 32;\r\n        uint mask = 256 ** (32 - length) - 1;\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let srcpart := and(mload(src), not(mask))\r\n            let destpart := and(mload(dest), mask)\r\n            mstore(dest, or(destpart, srcpart))\r\n        }\r\n\r\n        return string(result);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"hasInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_repoId\",\"type\":\"bytes32\"},{\"name\":\"_issueNumber\",\"type\":\"uint256\"}],\"name\":\"getIssue\",\"outputs\":[{\"name\":\"hasBounty\",\"type\":\"bool\"},{\"name\":\"standardBountyId\",\"type\":\"uint256\"},{\"name\":\"fulfilled\",\"type\":\"bool\"},{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"assignee\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REMOVE_ISSUES_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WORK_REVIEW_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_repoId\",\"type\":\"bytes32\"}],\"name\":\"removeRepo\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ADD_REPO_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_repoId\",\"type\":\"bytes32\"},{\"name\":\"_issueNumber\",\"type\":\"uint256\"},{\"name\":\"_submissionNumber\",\"type\":\"uint256\"},{\"name\":\"_approved\",\"type\":\"bool\"},{\"name\":\"_updatedSubmissionHash\",\"type\":\"string\"},{\"name\":\"_tokenAmounts\",\"type\":\"uint256[]\"}],\"name\":\"reviewSubmission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_repoId\",\"type\":\"bytes32\"},{\"name\":\"_issueNumber\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"string\"},{\"name\":\"_deadline\",\"type\":\"uint256\"},{\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"updateBounty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FUND_OPEN_ISSUES_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_repoId\",\"type\":\"bytes32\"}],\"name\":\"addRepo\",\"outputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_script\",\"type\":\"bytes\"}],\"name\":\"getEVMScriptExecutor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecoveryVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CHANGE_SETTINGS_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_repoId\",\"type\":\"bytes32\"}],\"name\":\"getRepo\",\"outputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"openIssueCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_repoId\",\"type\":\"bytes32\"}],\"name\":\"isRepoAdded\",\"outputs\":[{\"name\":\"isAdded\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REVIEW_APPLICATION_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bountiesAddr\",\"type\":\"address\"},{\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isDepositable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountiesRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_repoId\",\"type\":\"bytes32\"},{\"name\":\"_issueNumber\",\"type\":\"uint256\"}],\"name\":\"getApplicantsLength\",\"outputs\":[{\"name\":\"applicantQty\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REMOVE_REPO_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_repoId\",\"type\":\"bytes32\"},{\"name\":\"_issueNumber\",\"type\":\"uint256\"},{\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"getApplicant\",\"outputs\":[{\"name\":\"applicant\",\"type\":\"address\"},{\"name\":\"application\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"allowRecoverability\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSettings\",\"outputs\":[{\"name\":\"expMultipliers\",\"type\":\"uint256[]\"},{\"name\":\"expLevels\",\"type\":\"bytes32[]\"},{\"name\":\"baseRate\",\"type\":\"uint256\"},{\"name\":\"bountyDeadline\",\"type\":\"uint256\"},{\"name\":\"bountyCurrency\",\"type\":\"address\"},{\"name\":\"bountyAllocator\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_repoIds\",\"type\":\"bytes32[]\"},{\"name\":\"_issueNumbers\",\"type\":\"uint256[]\"},{\"name\":\"_bountySizes\",\"type\":\"uint256[]\"},{\"name\":\"_deadlines\",\"type\":\"uint256[]\"},{\"name\":\"_tokenTypes\",\"type\":\"uint256[]\"},{\"name\":\"_tokenContracts\",\"type\":\"address[]\"},{\"name\":\"_ipfsAddresses\",\"type\":\"string\"},{\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"addBounties\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitializationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_repoId\",\"type\":\"bytes32\"},{\"name\":\"_issueNumber\",\"type\":\"uint256\"},{\"name\":\"_requestor\",\"type\":\"address\"},{\"name\":\"_updatedApplication\",\"type\":\"string\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"reviewApplication\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getReposCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"transferToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"},{\"name\":\"_params\",\"type\":\"uint256[]\"}],\"name\":\"canPerform\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEVMScriptRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_repoIds\",\"type\":\"bytes32[]\"},{\"name\":\"_issueNumbers\",\"type\":\"uint256[]\"},{\"name\":\"_bountySizes\",\"type\":\"uint256[]\"},{\"name\":\"_deadlines\",\"type\":\"uint256[]\"},{\"name\":\"_tokenTypes\",\"type\":\"uint256[]\"},{\"name\":\"_tokenContracts\",\"type\":\"address[]\"},{\"name\":\"_ipfsAddresses\",\"type\":\"string\"},{\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"addBountiesNoAssignment\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FUND_ISSUES_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_expMultipliers\",\"type\":\"uint256[]\"},{\"name\":\"_expLevels\",\"type\":\"bytes32[]\"},{\"name\":\"_baseRate\",\"type\":\"uint256\"},{\"name\":\"_bountyDeadline\",\"type\":\"uint256\"},{\"name\":\"_bountyCurrency\",\"type\":\"address\"},{\"name\":\"_bountyAllocator\",\"type\":\"address\"}],\"name\":\"changeBountySettings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"issuePriorities\",\"type\":\"uint256[]\"},{\"name\":\"issueDescriptionIndices\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"_description\",\"type\":\"string\"},{\"name\":\"issueRepos\",\"type\":\"uint256[]\"},{\"name\":\"issueNumbers\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"curateIssues\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CURATE_ISSUES_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_repoIds\",\"type\":\"bytes32[]\"},{\"name\":\"_issueNumbers\",\"type\":\"uint256[]\"},{\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"removeBounties\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_repoId\",\"type\":\"bytes32\"},{\"name\":\"_issueNumber\",\"type\":\"uint256\"},{\"name\":\"_application\",\"type\":\"string\"}],\"name\":\"requestAssignment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPetrified\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"settings\",\"outputs\":[{\"name\":\"baseRate\",\"type\":\"uint256\"},{\"name\":\"bountyDeadline\",\"type\":\"uint256\"},{\"name\":\"bountyCurrency\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UPDATE_BOUNTIES_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"repoId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"RepoAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"repoId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"RepoRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"repoId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"newIndex\",\"type\":\"uint256\"}],\"name\":\"RepoUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"repoId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"issueNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bountySize\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"registryId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ipfsHash\",\"type\":\"string\"}],\"name\":\"BountyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"repoId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"issueNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldBountySize\",\"type\":\"uint256\"}],\"name\":\"BountyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"repoId\",\"type\":\"bytes32\"}],\"name\":\"IssueCurated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BountySettingsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"repoId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"issueNumber\",\"type\":\"uint256\"}],\"name\":\"AssignmentRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"applicant\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"repoId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"issueNumber\",\"type\":\"uint256\"}],\"name\":\"AssignmentApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"applicant\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"repoId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"issueNumber\",\"type\":\"uint256\"}],\"name\":\"AssignmentRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"submissionNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"repoId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"issueNumber\",\"type\":\"uint256\"}],\"name\":\"SubmissionAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"submissionNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"repoId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"issueNumber\",\"type\":\"uint256\"}],\"name\":\"SubmissionRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"repoId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"issueNumber\",\"type\":\"uint256\"}],\"name\":\"AwaitingSubmissions\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"script\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"input\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"ScriptResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoverToVault\",\"type\":\"event\"}]","ContractName":"Projects","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://d09bcbbcf9e1d46fddf9c28fa57c83b38ffc4a6a096c10c64cf4a74c5332ada1"}]}