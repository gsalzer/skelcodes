{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.10;\r\n\r\n/**\r\n * Copyright Â© 2017-2019 Ramp Network sp. z o.o. All rights reserved (MIT License).\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this software\r\n * and associated documentation files (the \"Software\"), to deal in the Software without restriction,\r\n * including without limitation the rights to use, copy, modify, merge, publish, distribute,\r\n * sublicense, and/or sell copies of the Software, and to permit persons to whom the Software\r\n * is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all copies\r\n * or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING\r\n * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE\r\n * AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\n\r\n/**\r\n * A standard, simple transferrable contract ownership.\r\n */\r\ncontract Ownable {\r\n\r\n    address public owner;\r\n\r\n    event OwnerChanged(address oldOwner, address newOwner);\r\n\r\n    constructor() internal {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"only the owner can call this\");\r\n        _;\r\n    }\r\n\r\n    function changeOwner(address _newOwner) external onlyOwner {\r\n        owner = _newOwner;\r\n        emit OwnerChanged(msg.sender, _newOwner);\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * A contract that can be stopped/restarted by its owner.\r\n */\r\ncontract Stoppable is Ownable {\r\n\r\n    bool public isActive = true;\r\n\r\n    event IsActiveChanged(bool _isActive);\r\n\r\n    modifier onlyActive() {\r\n        require(isActive, \"contract is stopped\");\r\n        _;\r\n    }\r\n\r\n    function setIsActive(bool _isActive) external onlyOwner {\r\n        if (_isActive == isActive) return;\r\n        isActive = _isActive;\r\n        emit IsActiveChanged(_isActive);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * A simple interface used by the escrows contract (precisely AssetAdapters) to interact\r\n * with the liquidity pools.\r\n */\r\ncontract RampInstantPoolInterface {\r\n\r\n    uint16 public ASSET_TYPE;\r\n\r\n    function sendFundsToSwap(uint256 _amount)\r\n        public /*onlyActive onlySwapsContract isWithinLimits*/ returns(bool success);\r\n\r\n}\r\n\r\n/**\r\n * An interface of the RampInstantEscrows functions that are used by the liquidity pool contracts.\r\n * See RampInstantEscrows.sol for more comments.\r\n */\r\ncontract RampInstantEscrowsPoolInterface {\r\n\r\n    uint16 public ASSET_TYPE;\r\n\r\n    function release(\r\n        address _pool,\r\n        address payable _receiver,\r\n        address _oracle,\r\n        bytes calldata _assetData,\r\n        bytes32 _paymentDetailsHash\r\n    )\r\n        external; /*statusAtLeast(Status.FINALIZE_ONLY) onlyOracleOrPool(_pool, _oracle)*/\r\n\r\n    function returnFunds(\r\n        address payable _pool,\r\n        address _receiver,\r\n        address _oracle,\r\n        bytes calldata _assetData,\r\n        bytes32 _paymentDetailsHash\r\n    )\r\n        external; /*statusAtLeast(Status.RETURN_ONLY) onlyOracleOrPool(_pool, _oracle)*/\r\n\r\n}\r\n\r\n/**\r\n * An abstract Ramp Instant Liquidity Pool. A liquidity provider deploys an instance of this\r\n * contract, and sends his funds to it. The escrows contract later withdraws portions of these\r\n * funds to be locked. The owner can withdraw any part of the funds at any time, or temporarily\r\n * block creating new escrows by stopping the contract.\r\n *\r\n * The pool owner can set and update min/max swap amounts, with an upper limit of 2^240 wei/units\r\n * (see `AssetAdapterWithFees` for more info).\r\n *\r\n * The paymentDetailsHash parameters works the same as in the `RampInstantEscrows` contract, only\r\n * with 0 value and empty transfer title. It describes the bank account where the pool owner expects\r\n * to be paid, and can be used to validate that a created swap indeed uses the same account.\r\n *\r\n * @author Ramp Network sp. z o.o.\r\n */\r\ncontract RampInstantPool is Ownable, Stoppable, RampInstantPoolInterface {\r\n\r\n    uint256 constant private MAX_SWAP_AMOUNT_LIMIT = 1 << 240;\r\n    uint16 public ASSET_TYPE;\r\n\r\n    address payable public swapsContract;\r\n    uint256 public minSwapAmount;\r\n    uint256 public maxSwapAmount;\r\n    bytes32 public paymentDetailsHash;\r\n\r\n    /**\r\n     * Triggered when the pool receives new funds, either a topup, or a returned escrow from an old\r\n     * swaps contract if it was changed. Avilable for ETH, ERC-223 and ERC-777 token pools.\r\n     * Doesn't work for plain ERC-20 tokens, since they don't provide such an interface.\r\n     */\r\n    event ReceivedFunds(address _from, uint256 _amount);\r\n    event LimitsChanged(uint256 _minAmount, uint256 _maxAmount);\r\n    event SwapsContractChanged(address _oldAddress, address _newAddress);\r\n\r\n    constructor(\r\n        address payable _swapsContract,\r\n        uint256 _minSwapAmount,\r\n        uint256 _maxSwapAmount,\r\n        bytes32 _paymentDetailsHash,\r\n        uint16 _assetType\r\n    )\r\n        public\r\n        validateLimits(_minSwapAmount, _maxSwapAmount)\r\n        validateSwapsContract(_swapsContract, _assetType)\r\n    {\r\n        swapsContract = _swapsContract;\r\n        paymentDetailsHash = _paymentDetailsHash;\r\n        minSwapAmount = _minSwapAmount;\r\n        maxSwapAmount = _maxSwapAmount;\r\n        ASSET_TYPE = _assetType;\r\n    }\r\n\r\n    function availableFunds() public view returns (uint256);\r\n\r\n    function withdrawFunds(address payable _to, uint256 _amount)\r\n        public /*onlyOwner*/ returns (bool success);\r\n\r\n    function withdrawAllFunds(address payable _to) public onlyOwner returns (bool success) {\r\n        return withdrawFunds(_to, availableFunds());\r\n    }\r\n\r\n    function setLimits(\r\n        uint256 _minAmount,\r\n        uint256 _maxAmount\r\n    ) public onlyOwner validateLimits(_minAmount, _maxAmount) {\r\n        minSwapAmount = _minAmount;\r\n        maxSwapAmount = _maxAmount;\r\n        emit LimitsChanged(_minAmount, _maxAmount);\r\n    }\r\n\r\n    function setSwapsContract(\r\n        address payable _swapsContract\r\n    ) public onlyOwner validateSwapsContract(_swapsContract, ASSET_TYPE) {\r\n        address oldSwapsContract = swapsContract;\r\n        swapsContract = _swapsContract;\r\n        emit SwapsContractChanged(oldSwapsContract, _swapsContract);\r\n    }\r\n\r\n    function sendFundsToSwap(uint256 _amount)\r\n        public /*onlyActive onlySwapsContract isWithinLimits*/ returns(bool success);\r\n\r\n    function releaseSwap(\r\n        address payable _receiver,\r\n        address _oracle,\r\n        bytes calldata _assetData,\r\n        bytes32 _paymentDetailsHash\r\n    ) external onlyOwner {\r\n        RampInstantEscrowsPoolInterface(swapsContract).release(\r\n            address(this),\r\n            _receiver,\r\n            _oracle,\r\n            _assetData,\r\n            _paymentDetailsHash\r\n        );\r\n    }\r\n\r\n    function returnSwap(\r\n        address _receiver,\r\n        address _oracle,\r\n        bytes calldata _assetData,\r\n        bytes32 _paymentDetailsHash\r\n    ) external onlyOwner {\r\n        RampInstantEscrowsPoolInterface(swapsContract).returnFunds(\r\n            address(this),\r\n            _receiver,\r\n            _oracle,\r\n            _assetData,\r\n            _paymentDetailsHash\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Needed for address(this) to be payable in call to returnFunds.\r\n     * The Eth pool overrides this to not throw.\r\n     */\r\n    function () external payable {\r\n        revert(\"this pool cannot receive ether\");\r\n    }\r\n\r\n    modifier onlySwapsContract() {\r\n        require(msg.sender == swapsContract, \"only the swaps contract can call this\");\r\n        _;\r\n    }\r\n\r\n    modifier isWithinLimits(uint256 _amount) {\r\n        require(_amount >= minSwapAmount && _amount <= maxSwapAmount, \"amount outside swap limits\");\r\n        _;\r\n    }\r\n\r\n    modifier validateLimits(uint256 _minAmount, uint256 _maxAmount) {\r\n        require(_minAmount <= _maxAmount, \"min limit over max limit\");\r\n        require(_maxAmount <= MAX_SWAP_AMOUNT_LIMIT, \"maxAmount too high\");\r\n        _;\r\n    }\r\n\r\n    modifier validateSwapsContract(address payable _swapsContract, uint16 _assetType) {\r\n        require(_swapsContract != address(0), \"null swaps contract address\");\r\n        require(\r\n            RampInstantEscrowsPoolInterface(_swapsContract).ASSET_TYPE() == _assetType,\r\n            \"pool asset type doesn't match swap contract\"\r\n        );\r\n        _;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * A pool that implements handling of ETH assets. See `RampInstantPool`.\r\n *\r\n * @author Ramp Network sp. z o.o.\r\n */\r\ncontract RampInstantEthPool is RampInstantPool {\r\n\r\n    uint16 internal constant ETH_TYPE_ID = 1;\r\n\r\n    constructor(\r\n        address payable _swapsContract,\r\n        uint256 _minSwapAmount,\r\n        uint256 _maxSwapAmount,\r\n        bytes32 _paymentDetailsHash\r\n    )\r\n        public\r\n        RampInstantPool(\r\n            _swapsContract, _minSwapAmount, _maxSwapAmount, _paymentDetailsHash, ETH_TYPE_ID\r\n        )\r\n    {}\r\n\r\n    function availableFunds() public view returns(uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function withdrawFunds(\r\n        address payable _to,\r\n        uint256 _amount\r\n    ) public onlyOwner returns (bool success) {\r\n        _to.transfer(_amount);  // always throws on failure\r\n        return true;\r\n    }\r\n\r\n    function sendFundsToSwap(\r\n        uint256 _amount\r\n    ) public onlyActive onlySwapsContract isWithinLimits(_amount) returns(bool success) {\r\n        swapsContract.transfer(_amount);  // always throws on failure\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * This adapter can receive eth payments, but no other use of the fallback function is allowed.\r\n     */\r\n    function () external payable {\r\n        require(msg.data.length == 0, \"invalid pool function called\");\r\n        if (msg.sender != swapsContract) {\r\n            emit ReceivedFunds(msg.sender, msg.value);\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_oracle\",\"type\":\"address\"},{\"name\":\"_assetData\",\"type\":\"bytes\"},{\"name\":\"_paymentDetailsHash\",\"type\":\"bytes32\"}],\"name\":\"returnSwap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setIsActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawAllFunds\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minSwapAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paymentDetailsHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"availableFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendFundsToSwap\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ASSET_TYPE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"name\":\"_maxAmount\",\"type\":\"uint256\"}],\"name\":\"setLimits\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSwapAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_swapsContract\",\"type\":\"address\"}],\"name\":\"setSwapsContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"swapsContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_oracle\",\"type\":\"address\"},{\"name\":\"_assetData\",\"type\":\"bytes\"},{\"name\":\"_paymentDetailsHash\",\"type\":\"bytes32\"}],\"name\":\"releaseSwap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_swapsContract\",\"type\":\"address\"},{\"name\":\"_minSwapAmount\",\"type\":\"uint256\"},{\"name\":\"_maxSwapAmount\",\"type\":\"uint256\"},{\"name\":\"_paymentDetailsHash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ReceivedFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_maxAmount\",\"type\":\"uint256\"}],\"name\":\"LimitsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"SwapsContractChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"IsActiveChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"}]","ContractName":"RampInstantEthPool","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"420","ConstructorArguments":"000000000000000000000000b3a06bcf2525486790f679653a40092535d1354500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000056bc75e2d63100000dc3de9c97a65d3a897fc4a4fc2da891002838a6922fa9b2921c3362defcb9507","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://c546a6654738fe5775dae9cde08db938fb7f1470f3de04e343398c3ba774b820"}]}