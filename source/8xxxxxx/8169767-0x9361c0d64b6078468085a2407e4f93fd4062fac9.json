{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.8;\n\ncontract EternalStorage {\n    /// @notice Internal mappings used to store all kinds on data into the contract\n    mapping(bytes32 => uint256) internal uintStorage;\n    mapping(bytes32 => string) internal stringStorage;\n    mapping(bytes32 => address) internal addressStorage;\n    mapping(bytes32 => bytes) internal bytesStorage;\n    mapping(bytes32 => bool) internal boolStorage;\n    mapping(bytes32 => int256) internal intStorage;\n    mapping(bytes32 => bytes32) internal bytes32Storage;\n\n    /// @notice Internal mappings used to store arrays of different data types\n    mapping(bytes32 => bytes32[]) internal bytes32ArrayStorage;\n    mapping(bytes32 => uint256[]) internal uintArrayStorage;\n    mapping(bytes32 => address[]) internal addressArrayStorage;\n    mapping(bytes32 => string[]) internal stringArrayStorage;\n\n    //////////////////\n    //// set functions\n    //////////////////\n    /// @notice Set the key values using the Overloaded `set` functions\n    /// Ex- string version = \"0.0.1\"; replace to\n    /// set(keccak256(abi.encodePacked(\"version\"), \"0.0.1\");\n    /// same for the other variables as well some more example listed below\n    /// ex1 - address securityTokenAddress = 0x123; replace to\n    /// set(keccak256(abi.encodePacked(\"securityTokenAddress\"), 0x123);\n    /// ex2 - bytes32 tokenDetails = \"I am ST20\"; replace to\n    /// set(keccak256(abi.encodePacked(\"tokenDetails\"), \"I am ST20\");\n    /// ex3 - mapping(string => address) ownedToken;\n    /// set(keccak256(abi.encodePacked(\"ownedToken\", \"Chris\")), 0x123);\n    /// ex4 - mapping(string => uint) tokenIndex;\n    /// tokenIndex[\"TOKEN\"] = 1; replace to set(keccak256(abi.encodePacked(\"tokenIndex\", \"TOKEN\"), 1);\n    /// ex5 - mapping(string => SymbolDetails) registeredSymbols; where SymbolDetails is the structure having different type of values as\n    /// {uint256 date, string name, address owner} etc.\n    /// registeredSymbols[\"TOKEN\"].name = \"MyFristToken\"; replace to set(keccak256(abi.encodePacked(\"registeredSymbols_name\", \"TOKEN\"), \"MyFirstToken\");\n    /// More generalized- set(keccak256(abi.encodePacked(\"registeredSymbols_<struct variable>\", \"keyname\"), \"value\");\n\n    function set(bytes32 _key, uint256 _value) internal {\n        uintStorage[_key] = _value;\n    }\n\n    function set(bytes32 _key, address _value) internal {\n        addressStorage[_key] = _value;\n    }\n\n    function set(bytes32 _key, bool _value) internal {\n        boolStorage[_key] = _value;\n    }\n\n    function set(bytes32 _key, bytes32 _value) internal {\n        bytes32Storage[_key] = _value;\n    }\n\n    function set(bytes32 _key, string memory _value) internal {\n        stringStorage[_key] = _value;\n    }\n\n    function set(bytes32 _key, bytes memory _value) internal {\n        bytesStorage[_key] = _value;\n    }\n\n    ////////////////////////////\n    // deleteArray functions\n    ////////////////////////////\n    /// @notice Function used to delete the array element.\n    /// Ex1- mapping(address => bytes32[]) tokensOwnedByOwner;\n    /// For deleting the item from array developers needs to create a funtion for that similarly\n    /// in this case we have the helper function deleteArrayBytes32() which will do it for us\n    /// deleteArrayBytes32(keccak256(abi.encodePacked(\"tokensOwnedByOwner\", 0x1), 3); -- it will delete the index 3\n\n    //Deletes from mapping (bytes32 => array[]) at index _index\n    function deleteArrayAddress(bytes32 _key, uint256 _index) internal {\n        address[] storage array = addressArrayStorage[_key];\n        require(_index < array.length, \"Index should less than length of the array\");\n        array[_index] = array[array.length - 1];\n        array.length = array.length - 1;\n    }\n\n    //Deletes from mapping (bytes32 => bytes32[]) at index _index\n    function deleteArrayBytes32(bytes32 _key, uint256 _index) internal {\n        bytes32[] storage array = bytes32ArrayStorage[_key];\n        require(_index < array.length, \"Index should less than length of the array\");\n        array[_index] = array[array.length - 1];\n        array.length = array.length - 1;\n    }\n\n    //Deletes from mapping (bytes32 => uint[]) at index _index\n    function deleteArrayUint(bytes32 _key, uint256 _index) internal {\n        uint256[] storage array = uintArrayStorage[_key];\n        require(_index < array.length, \"Index should less than length of the array\");\n        array[_index] = array[array.length - 1];\n        array.length = array.length - 1;\n    }\n\n    //Deletes from mapping (bytes32 => string[]) at index _index\n    function deleteArrayString(bytes32 _key, uint256 _index) internal {\n        string[] storage array = stringArrayStorage[_key];\n        require(_index < array.length, \"Index should less than length of the array\");\n        array[_index] = array[array.length - 1];\n        array.length = array.length - 1;\n    }\n\n    ////////////////////////////\n    //// pushArray functions\n    ///////////////////////////\n    /// @notice Below are the helper functions to facilitate storing arrays of different data types.\n    /// Ex1- mapping(address => bytes32[]) tokensOwnedByTicker;\n    /// tokensOwnedByTicker[owner] = tokensOwnedByTicker[owner].push(\"xyz\"); replace with\n    /// pushArray(keccak256(abi.encodePacked(\"tokensOwnedByTicker\", owner), \"xyz\");\n\n    /// @notice use to store the values for the array\n    /// @param _key bytes32 type\n    /// @param _value [uint256, string, bytes32, address] any of the data type in array\n    function pushArray(bytes32 _key, address _value) internal {\n        addressArrayStorage[_key].push(_value);\n    }\n\n    function pushArray(bytes32 _key, bytes32 _value) internal {\n        bytes32ArrayStorage[_key].push(_value);\n    }\n\n    function pushArray(bytes32 _key, string memory _value) internal {\n        stringArrayStorage[_key].push(_value);\n    }\n\n    function pushArray(bytes32 _key, uint256 _value) internal {\n        uintArrayStorage[_key].push(_value);\n    }\n\n    /////////////////////////\n    //// Set Array functions\n    ////////////////////////\n    /// @notice used to intialize the array\n    /// Ex1- mapping (address => address[]) public reputation;\n    /// reputation[0x1] = new address[](0); It can be replaced as\n    /// setArray(hash('reputation', 0x1), new address[](0));\n\n    function setArray(bytes32 _key, address[] memory _value) internal {\n        addressArrayStorage[_key] = _value;\n    }\n\n    function setArray(bytes32 _key, uint256[] memory _value) internal {\n        uintArrayStorage[_key] = _value;\n    }\n\n    function setArray(bytes32 _key, bytes32[] memory _value) internal {\n        bytes32ArrayStorage[_key] = _value;\n    }\n\n    function setArray(bytes32 _key, string[] memory _value) internal {\n        stringArrayStorage[_key] = _value;\n    }\n\n    /////////////////////////\n    /// getArray functions\n    /////////////////////////\n    /// @notice Get functions to get the array of the required data type\n    /// Ex1- mapping(address => bytes32[]) tokensOwnedByOwner;\n    /// getArrayBytes32(keccak256(abi.encodePacked(\"tokensOwnedByOwner\", 0x1)); It return the bytes32 array\n    /// Ex2- uint256 _len =  tokensOwnedByOwner[0x1].length; replace with\n    /// getArrayBytes32(keccak256(abi.encodePacked(\"tokensOwnedByOwner\", 0x1)).length;\n\n    function getArrayAddress(bytes32 _key) public view returns(address[] memory) {\n        return addressArrayStorage[_key];\n    }\n\n    function getArrayBytes32(bytes32 _key) public view returns(bytes32[] memory) {\n        return bytes32ArrayStorage[_key];\n    }\n\n    function getArrayUint(bytes32 _key) public view returns(uint[] memory) {\n        return uintArrayStorage[_key];\n    }\n\n    ///////////////////////////////////\n    /// setArrayIndexValue() functions\n    ///////////////////////////////////\n    /// @notice set the value of particular index of the address array\n    /// Ex1- mapping(bytes32 => address[]) moduleList;\n    /// general way is -- moduleList[moduleType][index] = temp;\n    /// It can be re-write as -- setArrayIndexValue(keccak256(abi.encodePacked('moduleList', moduleType)), index, temp);\n\n    function setArrayIndexValue(bytes32 _key, uint256 _index, address _value) internal {\n        addressArrayStorage[_key][_index] = _value;\n    }\n\n    function setArrayIndexValue(bytes32 _key, uint256 _index, uint256 _value) internal {\n        uintArrayStorage[_key][_index] = _value;\n    }\n\n    function setArrayIndexValue(bytes32 _key, uint256 _index, bytes32 _value) internal {\n        bytes32ArrayStorage[_key][_index] = _value;\n    }\n\n    function setArrayIndexValue(bytes32 _key, uint256 _index, string memory _value) internal {\n        stringArrayStorage[_key][_index] = _value;\n    }\n\n    /// Public getters functions\n    /////////////////////// @notice Get function use to get the value of the singleton state variables\n    /// Ex1- string public version = \"0.0.1\";\n    /// string _version = getString(keccak256(abi.encodePacked(\"version\"));\n    /// Ex2 - assert(temp1 == temp2); replace to\n    /// assert(getUint(keccak256(abi.encodePacked(temp1)) == getUint(keccak256(abi.encodePacked(temp2));\n    /// Ex3 - mapping(string => SymbolDetails) registeredSymbols; where SymbolDetails is the structure having different type of values as\n    /// {uint256 date, string name, address owner} etc.\n    /// string _name = getString(keccak256(abi.encodePacked(\"registeredSymbols_name\", \"TOKEN\"));\n\n    function getUintValue(bytes32 _variable) public view returns(uint256) {\n        return uintStorage[_variable];\n    }\n\n    function getBoolValue(bytes32 _variable) public view returns(bool) {\n        return boolStorage[_variable];\n    }\n\n    function getStringValue(bytes32 _variable) public view returns(string memory) {\n        return stringStorage[_variable];\n    }\n\n    function getAddressValue(bytes32 _variable) public view returns(address) {\n        return addressStorage[_variable];\n    }\n\n    function getBytes32Value(bytes32 _variable) public view returns(bytes32) {\n        return bytes32Storage[_variable];\n    }\n\n    function getBytesValue(bytes32 _variable) public view returns(bytes memory) {\n        return bytesStorage[_variable];\n    }\n\n}\n\n/**\n * @title Interface for all security tokens\n */\ninterface ISecurityToken {\n    // Standard ERC20 interface\n    function symbol() external view returns (string memory);\n    function name() external view returns (string memory);\n    function decimals() external view returns(uint8);\n    function totalSupply() external view returns(uint256);\n    function balanceOf(address owner) external view returns(uint256);\n    function allowance(address owner, address spender) external view returns(uint256);\n    function transfer(address to, uint256 value) external returns(bool);\n    function transferFrom(address from, address to, uint256 value) external returns(bool);\n    function approve(address spender, uint256 value) external returns(bool);\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @notice Transfers of securities may fail for a number of reasons. So this function will used to understand the\n     * cause of failure by getting the byte value. Which will be the ESC that follows the EIP 1066. ESC can be mapped\n     * with a reson string to understand the failure cause, table of Ethereum status code will always reside off-chain\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     * @param _data The `bytes _data` allows arbitrary data to be submitted alongside the transfer.\n     * @return byte Ethereum status code (ESC)\n     * @return bytes32 Application specific reason code\n     */\n    function canTransfer(address _to, uint256 _value, bytes calldata _data) external view returns (byte statusCode, bytes32 reasonCode);\n\n    // Emit at the time when module get added\n    event ModuleAdded(\n        uint8[] _types,\n        bytes32 indexed _name,\n        address indexed _moduleFactory,\n        address _module,\n        uint256 _moduleCost,\n        uint256 _budget,\n        bytes32 _label,\n        bool _archived\n    );\n\n    // Emit when the token details get updated\n    event UpdateTokenDetails(string _oldDetails, string _newDetails);\n    // Emit when the token name get updated\n    event UpdateTokenName(string _oldName, string _newName);\n    // Emit when the granularity get changed\n    event GranularityChanged(uint256 _oldGranularity, uint256 _newGranularity);\n    // Emit when is permanently frozen by the issuer\n    event FreezeIssuance();\n    // Emit when transfers are frozen or unfrozen\n    event FreezeTransfers(bool _status);\n    // Emit when new checkpoint created\n    event CheckpointCreated(uint256 indexed _checkpointId, uint256 _investorLength);\n    // Events to log controller actions\n    event SetController(address indexed _oldController, address indexed _newController);\n    //Event emit when the global treasury wallet address get changed\n    event TreasuryWalletChanged(address _oldTreasuryWallet, address _newTreasuryWallet);\n    event DisableController();\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    event TokenUpgraded(uint8 _major, uint8 _minor, uint8 _patch);\n\n    // Emit when Module get archived from the securityToken\n    event ModuleArchived(uint8[] _types, address _module); //Event emitted by the tokenLib.\n    // Emit when Module get unarchived from the securityToken\n    event ModuleUnarchived(uint8[] _types, address _module); //Event emitted by the tokenLib.\n    // Emit when Module get removed from the securityToken\n    event ModuleRemoved(uint8[] _types, address _module); //Event emitted by the tokenLib.\n    // Emit when the budget allocated to a module is changed\n    event ModuleBudgetChanged(uint8[] _moduleTypes, address _module, uint256 _oldBudget, uint256 _budget); //Event emitted by the tokenLib.\n\n    // Transfer Events\n    event TransferByPartition(\n        bytes32 indexed _fromPartition,\n        address _operator,\n        address indexed _from,\n        address indexed _to,\n        uint256 _value,\n        bytes _data,\n        bytes _operatorData\n    );\n\n    // Operator Events\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\n    event AuthorizedOperatorByPartition(bytes32 indexed partition, address indexed operator, address indexed tokenHolder);\n    event RevokedOperatorByPartition(bytes32 indexed partition, address indexed operator, address indexed tokenHolder);\n\n    // Issuance / Redemption Events\n    event IssuedByPartition(bytes32 indexed partition, address indexed to, uint256 value, bytes data);\n    event RedeemedByPartition(bytes32 indexed partition, address indexed operator, address indexed from, uint256 value, bytes data, bytes operatorData);\n\n    // Document Events\n    event DocumentRemoved(bytes32 indexed _name, string _uri, bytes32 _documentHash);\n    event DocumentUpdated(bytes32 indexed _name, string _uri, bytes32 _documentHash);\n\n    // Controller Events\n    event ControllerTransfer(\n        address _controller,\n        address indexed _from,\n        address indexed _to,\n        uint256 _value,\n        bytes _data,\n        bytes _operatorData\n    );\n\n    event ControllerRedemption(\n        address _controller,\n        address indexed _tokenHolder,\n        uint256 _value,\n        bytes _data,\n        bytes _operatorData\n    );\n\n    // Issuance / Redemption Events\n    event Issued(address indexed _operator, address indexed _to, uint256 _value, bytes _data);\n    event Redeemed(address indexed _operator, address indexed _from, uint256 _value, bytes _data);\n\n    /**\n     * @notice Initialization function\n     * @dev Expected to be called atomically with the proxy being created, by the owner of the token\n     * @dev Can only be called once\n     */\n    function initialize(address _getterDelegate) external;\n\n    /**\n     * @notice The standard provides an on-chain function to determine whether a transfer will succeed,\n     * and return details indicating the reason if the transfer is not valid.\n     * @param _from The address from whom the tokens get transferred.\n     * @param _to The address to which to transfer tokens to.\n     * @param _partition The partition from which to transfer tokens\n     * @param _value The amount of tokens to transfer from `_partition`\n     * @param _data Additional data attached to the transfer of tokens\n     * @return ESC (Ethereum Status Code) following the EIP-1066 standard\n     * @return Application specific reason codes with additional details\n     * @return The partition to which the transferred tokens were allocated for the _to address\n     */\n    function canTransferByPartition(\n        address _from,\n        address _to,\n        bytes32 _partition,\n        uint256 _value,\n        bytes calldata _data\n    )\n        external\n        view\n        returns (byte statusCode, bytes32 reasonCode, bytes32 partition);\n\n    /**\n     * @notice Transfers of securities may fail for a number of reasons. So this function will used to understand the\n     * cause of failure by getting the byte value. Which will be the ESC that follows the EIP 1066. ESC can be mapped\n     * with a reson string to understand the failure cause, table of Ethereum status code will always reside off-chain\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     * @param _data The `bytes _data` allows arbitrary data to be submitted alongside the transfer.\n     * @return byte Ethereum status code (ESC)\n     * @return bytes32 Application specific reason code\n     */\n    function canTransferFrom(address _from, address _to, uint256 _value, bytes calldata _data) external view returns (byte statusCode, bytes32 reasonCode);\n\n    /**\n     * @notice Used to attach a new document to the contract, or update the URI or hash of an existing attached document\n     * @dev Can only be executed by the owner of the contract.\n     * @param _name Name of the document. It should be unique always\n     * @param _uri Off-chain uri of the document from where it is accessible to investors/advisors to read.\n     * @param _documentHash hash (of the contents) of the document.\n     */\n    function setDocument(bytes32 _name, string calldata _uri, bytes32 _documentHash) external;\n\n    /**\n     * @notice Used to remove an existing document from the contract by giving the name of the document.\n     * @dev Can only be executed by the owner of the contract.\n     * @param _name Name of the document. It should be unique always\n     */\n    function removeDocument(bytes32 _name) external;\n\n    /**\n     * @notice Used to return the details of a document with a known name (`bytes32`).\n     * @param _name Name of the document\n     * @return string The URI associated with the document.\n     * @return bytes32 The hash (of the contents) of the document.\n     * @return uint256 the timestamp at which the document was last modified.\n     */\n    function getDocument(bytes32 _name) external view returns (string memory documentUri, bytes32 documentHash, uint256 documentTime);\n\n    /**\n     * @notice Used to retrieve a full list of documents attached to the smart contract.\n     * @return bytes32 List of all documents names present in the contract.\n     */\n    function getAllDocuments() external view returns (bytes32[] memory documentNames);\n\n    /**\n     * @notice In order to provide transparency over whether `controllerTransfer` / `controllerRedeem` are useable\n     * or not `isControllable` function will be used.\n     * @dev If `isControllable` returns `false` then it always return `false` and\n     * `controllerTransfer` / `controllerRedeem` will always revert.\n     * @return bool `true` when controller address is non-zero otherwise return `false`.\n     */\n    function isControllable() external view returns (bool controlled);\n\n    /**\n     * @notice Checks if an address is a module of certain type\n     * @param _module Address to check\n     * @param _type type to check against\n     */\n    function isModule(address _module, uint8 _type) external view returns(bool isValid);\n\n    /**\n     * @notice This function must be called to increase the total supply (Corresponds to mint function of ERC20).\n     * @dev It only be called by the token issuer or the operator defined by the issuer. ERC1594 doesn't have\n     * have the any logic related to operator but its superset ERC1400 have the operator logic and this function\n     * is allowed to call by the operator.\n     * @param _tokenHolder The account that will receive the created tokens (account should be whitelisted or KYCed).\n     * @param _value The amount of tokens need to be issued\n     * @param _data The `bytes _data` allows arbitrary data to be submitted alongside the transfer.\n     */\n    function issue(address _tokenHolder, uint256 _value, bytes calldata _data) external;\n\n    /**\n     * @notice issue new tokens and assigns them to the target _tokenHolder.\n     * @dev Can only be called by the issuer or STO attached to the token.\n     * @param _tokenHolders A list of addresses to whom the minted tokens will be dilivered\n     * @param _values A list of number of tokens get minted and transfer to corresponding address of the investor from _tokenHolders[] list\n     * @return success\n     */\n    function issueMulti(address[] calldata _tokenHolders, uint256[] calldata _values) external;\n\n    /**\n     * @notice Increases totalSupply and the corresponding amount of the specified owners partition\n     * @param _partition The partition to allocate the increase in balance\n     * @param _tokenHolder The token holder whose balance should be increased\n     * @param _value The amount by which to increase the balance\n     * @param _data Additional data attached to the minting of tokens\n     */\n    function issueByPartition(bytes32 _partition, address _tokenHolder, uint256 _value, bytes calldata _data) external;\n\n    /**\n     * @notice Decreases totalSupply and the corresponding amount of the specified partition of msg.sender\n     * @param _partition The partition to allocate the decrease in balance\n     * @param _value The amount by which to decrease the balance\n     * @param _data Additional data attached to the burning of tokens\n     */\n    function redeemByPartition(bytes32 _partition, uint256 _value, bytes calldata _data) external;\n\n    /**\n     * @notice This function redeem an amount of the token of a msg.sender. For doing so msg.sender may incentivize\n     * using different ways that could be implemented with in the `redeem` function definition. But those implementations\n     * are out of the scope of the ERC1594.\n     * @param _value The amount of tokens need to be redeemed\n     * @param _data The `bytes _data` it can be used in the token contract to authenticate the redemption.\n     */\n    function redeem(uint256 _value, bytes calldata _data) external;\n\n    /**\n     * @notice This function redeem an amount of the token of a msg.sender. For doing so msg.sender may incentivize\n     * using different ways that could be implemented with in the `redeem` function definition. But those implementations\n     * are out of the scope of the ERC1594.\n     * @dev It is analogy to `transferFrom`\n     * @param _tokenHolder The account whose tokens gets redeemed.\n     * @param _value The amount of tokens need to be redeemed\n     * @param _data The `bytes _data` it can be used in the token contract to authenticate the redemption.\n     */\n    function redeemFrom(address _tokenHolder, uint256 _value, bytes calldata _data) external;\n\n    /**\n     * @notice Decreases totalSupply and the corresponding amount of the specified partition of tokenHolder\n     * @dev This function can only be called by the authorised operator.\n     * @param _partition The partition to allocate the decrease in balance.\n     * @param _tokenHolder The token holder whose balance should be decreased\n     * @param _value The amount by which to decrease the balance\n     * @param _data Additional data attached to the burning of tokens\n     * @param _operatorData Additional data attached to the transfer of tokens by the operator\n     */\n    function operatorRedeemByPartition(\n        bytes32 _partition,\n        address _tokenHolder,\n        uint256 _value,\n        bytes calldata _data,\n        bytes calldata _operatorData\n    ) external;\n\n    /**\n     * @notice Validate permissions with PermissionManager if it exists, If no Permission return false\n     * @dev Note that IModule withPerm will allow ST owner all permissions anyway\n     * @dev this allows individual modules to override this logic if needed (to not allow ST owner all permissions)\n     * @param _delegate address of delegate\n     * @param _module address of PermissionManager module\n     * @param _perm the permissions\n     * @return success\n     */\n    function checkPermission(address _delegate, address _module, bytes32 _perm) external view returns(bool hasPermission);\n\n    /**\n     * @notice Returns module list for a module type\n     * @param _module Address of the module\n     * @return bytes32 Name\n     * @return address Module address\n     * @return address Module factory address\n     * @return bool Module archived\n     * @return uint8 Array of module types\n     * @return bytes32 Module label\n     */\n    function getModule(address _module) external view returns (bytes32 moduleName, address moduleAddress, address factoryAddress, bool isArchived, uint8[] memory moduleTypes, bytes32 moduleLabel);\n\n    /**\n     * @notice Returns module list for a module name\n     * @param _name Name of the module\n     * @return address[] List of modules with this name\n     */\n    function getModulesByName(bytes32 _name) external view returns(address[] memory modules);\n\n    /**\n     * @notice Returns module list for a module type\n     * @param _type Type of the module\n     * @return address[] List of modules with this type\n     */\n    function getModulesByType(uint8 _type) external view returns(address[] memory modules);\n\n    /**\n     * @notice use to return the global treasury wallet\n     */\n    function getTreasuryWallet() external view returns(address treasuryWallet);\n\n    /**\n     * @notice Queries totalSupply at a specified checkpoint\n     * @param _checkpointId Checkpoint ID to query as of\n     */\n    function totalSupplyAt(uint256 _checkpointId) external view returns(uint256 supply);\n\n    /**\n     * @notice Queries balance at a specified checkpoint\n     * @param _investor Investor to query balance for\n     * @param _checkpointId Checkpoint ID to query as of\n     */\n    function balanceOfAt(address _investor, uint256 _checkpointId) external view returns(uint256 balance);\n\n    /**\n     * @notice Creates a checkpoint that can be used to query historical balances / totalSuppy\n     */\n    function createCheckpoint() external returns(uint256 checkpointId);\n\n    /**\n     * @notice Gets list of times that checkpoints were created\n     * @return List of checkpoint times\n     */\n    function getCheckpointTimes() external view returns(uint256[] memory checkpointTimes);\n\n    /**\n     * @notice returns an array of investors\n     * NB - this length may differ from investorCount as it contains all investors that ever held tokens\n     * @return list of addresses\n     */\n    function getInvestors() external view returns(address[] memory investors);\n\n    /**\n     * @notice returns an array of investors at a given checkpoint\n     * NB - this length may differ from investorCount as it contains all investors that ever held tokens\n     * @param _checkpointId Checkpoint id at which investor list is to be populated\n     * @return list of investors\n     */\n    function getInvestorsAt(uint256 _checkpointId) external view returns(address[] memory investors);\n\n    /**\n     * @notice returns an array of investors with non zero balance at a given checkpoint\n     * @param _checkpointId Checkpoint id at which investor list is to be populated\n     * @param _start Position of investor to start iteration from\n     * @param _end Position of investor to stop iteration at\n     * @return list of investors\n     */\n    function getInvestorsSubsetAt(uint256 _checkpointId, uint256 _start, uint256 _end) external view returns(address[] memory investors);\n\n    /**\n     * @notice generates subset of investors\n     * NB - can be used in batches if investor list is large\n     * @param _start Position of investor to start iteration from\n     * @param _end Position of investor to stop iteration at\n     * @return list of investors\n     */\n    function iterateInvestors(uint256 _start, uint256 _end) external view returns(address[] memory investors);\n\n    /**\n     * @notice Gets current checkpoint ID\n     * @return Id\n     */\n    function currentCheckpointId() external view returns(uint256 checkpointId);\n\n    /**\n     * @notice Determines whether `_operator` is an operator for all partitions of `_tokenHolder`\n     * @param _operator The operator to check\n     * @param _tokenHolder The token holder to check\n     * @return Whether the `_operator` is an operator for all partitions of `_tokenHolder`\n     */\n    function isOperator(address _operator, address _tokenHolder) external view returns (bool isValid);\n\n    /**\n     * @notice Determines whether `_operator` is an operator for a specified partition of `_tokenHolder`\n     * @param _partition The partition to check\n     * @param _operator The operator to check\n     * @param _tokenHolder The token holder to check\n     * @return Whether the `_operator` is an operator for a specified partition of `_tokenHolder`\n     */\n    function isOperatorForPartition(bytes32 _partition, address _operator, address _tokenHolder) external view returns (bool isValid);\n\n    /**\n     * @notice Return all partitions\n     * @param _tokenHolder Whom balance need to queried\n     * @return List of partitions\n     */\n    function partitionsOf(address _tokenHolder) external view returns (bytes32[] memory partitions);\n\n    /**\n     * @notice Gets data store address\n     * @return data store address\n     */\n    function dataStore() external view returns (address dataStoreAddress);\n\n    /**\n    * @notice Allows owner to change data store\n    * @param _dataStore Address of the token data store\n    */\n    function changeDataStore(address _dataStore) external;\n\n\n    /**\n     * @notice Allows to change the treasury wallet address\n     * @param _wallet Ethereum address of the treasury wallet\n     */\n    function changeTreasuryWallet(address _wallet) external;\n\n    /**\n     * @notice Allows the owner to withdraw unspent POLY stored by them on the ST or any ERC20 token.\n     * @dev Owner can transfer POLY to the ST which will be used to pay for modules that require a POLY fee.\n     * @param _tokenContract Address of the ERC20Basic compliance token\n     * @param _value Amount of POLY to withdraw\n     */\n    function withdrawERC20(address _tokenContract, uint256 _value) external;\n\n    /**\n    * @notice Allows owner to increase/decrease POLY approval of one of the modules\n    * @param _module Module address\n    * @param _change Change in allowance\n    * @param _increase True if budget has to be increased, false if decrease\n    */\n    function changeModuleBudget(address _module, uint256 _change, bool _increase) external;\n\n    /**\n     * @notice Changes the tokenDetails\n     * @param _newTokenDetails New token details\n     */\n    function updateTokenDetails(string calldata _newTokenDetails) external;\n\n    /**\n    * @notice Allows owner to change token name\n    * @param _name new name of the token\n    */\n    function changeName(string calldata _name) external;\n\n    /**\n    * @notice Allows the owner to change token granularity\n    * @param _granularity Granularity level of the token\n    */\n    function changeGranularity(uint256 _granularity) external;\n\n    /**\n     * @notice Freezes all the transfers\n     */\n    function freezeTransfers() external;\n\n    /**\n     * @notice Un-freezes all the transfers\n     */\n    function unfreezeTransfers() external;\n\n    /**\n     * @notice Permanently freeze issuance of this security token.\n     * @dev It MUST NOT be possible to increase `totalSuppy` after this function is called.\n     */\n    function freezeIssuance(bytes calldata _signature) external;\n\n    /**\n      * @notice Attachs a module to the SecurityToken\n      * @dev  E.G.: On deployment (through the STR) ST gets a TransferManager module attached to it\n      * @dev to control restrictions on transfers.\n      * @param _moduleFactory is the address of the module factory to be added\n      * @param _data is data packed into bytes used to further configure the module (See STO usage)\n      * @param _maxCost max amount of POLY willing to pay to the module.\n      * @param _budget max amount of ongoing POLY willing to assign to the module.\n      * @param _label custom module label.\n      * @param _archived whether to add the module as an archived module\n      */\n    function addModuleWithLabel(\n        address _moduleFactory,\n        bytes calldata _data,\n        uint256 _maxCost,\n        uint256 _budget,\n        bytes32 _label,\n        bool _archived\n    ) external;\n\n    /**\n     * @notice Function used to attach a module to the security token\n     * @dev  E.G.: On deployment (through the STR) ST gets a TransferManager module attached to it\n     * @dev to control restrictions on transfers.\n     * @dev You are allowed to add a new moduleType if:\n     * @dev - there is no existing module of that type yet added\n     * @dev - the last member of the module list is replacable\n     * @param _moduleFactory is the address of the module factory to be added\n     * @param _data is data packed into bytes used to further configure the module (See STO usage)\n     * @param _maxCost max amount of POLY willing to pay to module. (WIP)\n     * @param _budget max amount of ongoing POLY willing to assign to the module.\n     * @param _archived whether to add the module as an archived module\n     */\n    function addModule(address _moduleFactory, bytes calldata _data, uint256 _maxCost, uint256 _budget, bool _archived) external;\n\n    /**\n    * @notice Archives a module attached to the SecurityToken\n    * @param _module address of module to archive\n    */\n    function archiveModule(address _module) external;\n\n    /**\n    * @notice Unarchives a module attached to the SecurityToken\n    * @param _module address of module to unarchive\n    */\n    function unarchiveModule(address _module) external;\n\n    /**\n    * @notice Removes a module attached to the SecurityToken\n    * @param _module address of module to archive\n    */\n    function removeModule(address _module) external;\n\n    /**\n     * @notice Used by the issuer to set the controller addresses\n     * @param _controller address of the controller\n     */\n    function setController(address _controller) external;\n\n    /**\n     * @notice This function allows an authorised address to transfer tokens between any two token holders.\n     * The transfer must still respect the balances of the token holders (so the transfer must be for at most\n     * `balanceOf(_from)` tokens) and potentially also need to respect other transfer restrictions.\n     * @dev This function can only be executed by the `controller` address.\n     * @param _from Address The address which you want to send tokens from\n     * @param _to Address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     * @param _data data to validate the transfer. (It is not used in this reference implementation\n     * because use of `_data` parameter is implementation specific).\n     * @param _operatorData data attached to the transfer by controller to emit in event. (It is more like a reason string\n     * for calling this function (aka force transfer) which provides the transparency on-chain).\n     */\n    function controllerTransfer(address _from, address _to, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n\n    /**\n     * @notice This function allows an authorised address to redeem tokens for any token holder.\n     * The redemption must still respect the balances of the token holder (so the redemption must be for at most\n     * `balanceOf(_tokenHolder)` tokens) and potentially also need to respect other transfer restrictions.\n     * @dev This function can only be executed by the `controller` address.\n     * @param _tokenHolder The account whose tokens will be redeemed.\n     * @param _value uint256 the amount of tokens need to be redeemed.\n     * @param _data data to validate the transfer. (It is not used in this reference implementation\n     * because use of `_data` parameter is implementation specific).\n     * @param _operatorData data attached to the transfer by controller to emit in event. (It is more like a reason string\n     * for calling this function (aka force transfer) which provides the transparency on-chain).\n     */\n    function controllerRedeem(address _tokenHolder, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n\n    /**\n     * @notice Used by the issuer to permanently disable controller functionality\n     * @dev enabled via feature switch \"disableControllerAllowed\"\n     */\n    function disableController(bytes calldata _signature) external;\n\n    /**\n     * @notice Used to get the version of the securityToken\n     */\n    function getVersion() external view returns(uint8[] memory version);\n\n    /**\n     * @notice Gets the investor count\n     */\n    function getInvestorCount() external view returns(uint256 investorCount);\n\n    /**\n     * @notice Gets the holder count (investors with non zero balance)\n     */\n    function holderCount() external view returns(uint256 count);\n\n    /**\n      * @notice Overloaded version of the transfer function\n      * @param _to receiver of transfer\n      * @param _value value of transfer\n      * @param _data data to indicate validation\n      * @return bool success\n      */\n    function transferWithData(address _to, uint256 _value, bytes calldata _data) external;\n\n    /**\n      * @notice Overloaded version of the transferFrom function\n      * @param _from sender of transfer\n      * @param _to receiver of transfer\n      * @param _value value of transfer\n      * @param _data data to indicate validation\n      * @return bool success\n      */\n    function transferFromWithData(address _from, address _to, uint256 _value, bytes calldata _data) external;\n\n    /**\n     * @notice Transfers the ownership of tokens from a specified partition from one address to another address\n     * @param _partition The partition from which to transfer tokens\n     * @param _to The address to which to transfer tokens to\n     * @param _value The amount of tokens to transfer from `_partition`\n     * @param _data Additional data attached to the transfer of tokens\n     * @return The partition to which the transferred tokens were allocated for the _to address\n     */\n    function transferByPartition(bytes32 _partition, address _to, uint256 _value, bytes calldata _data) external returns (bytes32 partition);\n\n    /**\n     * @notice Get the balance according to the provided partitions\n     * @param _partition Partition which differentiate the tokens.\n     * @param _tokenHolder Whom balance need to queried\n     * @return Amount of tokens as per the given partitions\n     */\n    function balanceOfByPartition(bytes32 _partition, address _tokenHolder) external view returns(uint256 balance);\n\n    /**\n      * @notice Provides the granularity of the token\n      * @return uint256\n      */\n    function granularity() external view returns(uint256 granularityAmount);\n\n    /**\n      * @notice Provides the address of the polymathRegistry\n      * @return address\n      */\n    function polymathRegistry() external view returns(address registryAddress);\n\n    /**\n    * @notice Upgrades a module attached to the SecurityToken\n    * @param _module address of module to archive\n    */\n    function upgradeModule(address _module) external;\n\n    /**\n    * @notice Upgrades security token\n    */\n    function upgradeToken() external;\n\n    /**\n     * @notice A security token issuer can specify that issuance has finished for the token\n     * (i.e. no new tokens can be minted or issued).\n     * @dev If a token returns FALSE for `isIssuable()` then it MUST always return FALSE in the future.\n     * If a token returns FALSE for `isIssuable()` then it MUST never allow additional tokens to be issued.\n     * @return bool `true` signifies the minting is allowed. While `false` denotes the end of minting\n     */\n    function isIssuable() external view returns (bool issuable);\n\n    /**\n     * @notice Authorises an operator for all partitions of `msg.sender`.\n     * NB - Allowing investors to authorize an investor to be an operator of all partitions\n     * but it doesn't mean we operator is allowed to transfer the LOCKED partition values.\n     * Logic for this restriction is written in `operatorTransferByPartition()` function.\n     * @param _operator An address which is being authorised.\n     */\n    function authorizeOperator(address _operator) external;\n\n    /**\n     * @notice Revokes authorisation of an operator previously given for all partitions of `msg.sender`.\n     * NB - Allowing investors to authorize an investor to be an operator of all partitions\n     * but it doesn't mean we operator is allowed to transfer the LOCKED partition values.\n     * Logic for this restriction is written in `operatorTransferByPartition()` function.\n     * @param _operator An address which is being de-authorised\n     */\n    function revokeOperator(address _operator) external;\n\n    /**\n     * @notice Authorises an operator for a given partition of `msg.sender`\n     * @param _partition The partition to which the operator is authorised\n     * @param _operator An address which is being authorised\n     */\n    function authorizeOperatorByPartition(bytes32 _partition, address _operator) external;\n\n    /**\n     * @notice Revokes authorisation of an operator previously given for a specified partition of `msg.sender`\n     * @param _partition The partition to which the operator is de-authorised\n     * @param _operator An address which is being de-authorised\n     */\n    function revokeOperatorByPartition(bytes32 _partition, address _operator) external;\n\n    /**\n     * @notice Transfers the ownership of tokens from a specified partition from one address to another address\n     * @param _partition The partition from which to transfer tokens.\n     * @param _from The address from which to transfer tokens from\n     * @param _to The address to which to transfer tokens to\n     * @param _value The amount of tokens to transfer from `_partition`\n     * @param _data Additional data attached to the transfer of tokens\n     * @param _operatorData Additional data attached to the transfer of tokens by the operator\n     * @return The partition to which the transferred tokens were allocated for the _to address\n     */\n    function operatorTransferByPartition(\n        bytes32 _partition,\n        address _from,\n        address _to,\n        uint256 _value,\n        bytes calldata _data,\n        bytes calldata _operatorData\n    )\n        external\n        returns (bytes32 partition);\n\n    /*\n    * @notice Returns if transfers are currently frozen or not\n    */\n    function transfersFrozen() external view returns (bool isFrozen);\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) external;\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() external view returns (bool);\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() external view returns (address ownerAddress);\n\n    function controller() external view returns(address controllerAddress);\n\n    function moduleRegistry() external view returns(address moduleRegistryAddress);\n\n    function securityTokenRegistry() external view returns(address securityTokenRegistryAddress);\n\n    function polyToken() external view returns(address polyTokenAddress);\n\n    function tokenFactory() external view returns(address tokenFactoryAddress);\n\n    function getterDelegate() external view returns(address delegate);\n\n    function controllerDisabled() external view returns(bool isDisabled);\n\n    function initialized() external view returns(bool isInitialized);\n\n    function tokenDetails() external view returns(string memory details);\n\n    function updateFromRegistry() external;\n\n}\n\n/**\n * @title Utility contract for reusable code\n */\nlibrary Util {\n    /**\n    * @notice Changes a string to upper case\n    * @param _base String to change\n    */\n    function upper(string memory _base) internal pure returns(string memory) {\n        bytes memory _baseBytes = bytes(_base);\n        for (uint i = 0; i < _baseBytes.length; i++) {\n            bytes1 b1 = _baseBytes[i];\n            if (b1 >= 0x61 && b1 <= 0x7A) {\n                b1 = bytes1(uint8(b1) - 32);\n            }\n            _baseBytes[i] = b1;\n        }\n        return string(_baseBytes);\n    }\n\n    /**\n     * @notice Changes the string into bytes32\n     * @param _source String that need to convert into bytes32\n     */\n    /// Notice - Maximum Length for _source will be 32 chars otherwise returned bytes32 value will have lossy value.\n    function stringToBytes32(string memory _source) internal pure returns(bytes32) {\n        return bytesToBytes32(bytes(_source), 0);\n    }\n\n    /**\n     * @notice Changes bytes into bytes32\n     * @param _b Bytes that need to convert into bytes32\n     * @param _offset Offset from which to begin conversion\n     */\n    /// Notice - Maximum length for _source will be 32 chars otherwise returned bytes32 value will have lossy value.\n    function bytesToBytes32(bytes memory _b, uint _offset) internal pure returns(bytes32) {\n        bytes32 result;\n\n        for (uint i = 0; i < _b.length; i++) {\n            result |= bytes32(_b[_offset + i] & 0xFF) >> (i * 8);\n        }\n        return result;\n    }\n\n    /**\n     * @notice Changes the bytes32 into string\n     * @param _source that need to convert into string\n     */\n    function bytes32ToString(bytes32 _source) internal pure returns(string memory) {\n        bytes memory bytesString = new bytes(32);\n        uint charCount = 0;\n        uint j = 0;\n        for (j = 0; j < 32; j++) {\n            byte char = byte(bytes32(uint(_source) * 2 ** (8 * j)));\n            if (char != 0) {\n                bytesString[charCount] = char;\n                charCount++;\n            }\n        }\n        bytes memory bytesStringTrimmed = new bytes(charCount);\n        for (j = 0; j < charCount; j++) {\n            bytesStringTrimmed[j] = bytesString[j];\n        }\n        return string(bytesStringTrimmed);\n    }\n\n    /**\n     * @notice Gets function signature from _data\n     * @param _data Passed data\n     * @return bytes4 sig\n     */\n    function getSig(bytes memory _data) internal pure returns(bytes4 sig) {\n        uint len = _data.length < 4 ? _data.length : 4;\n        for (uint256 i = 0; i < len; i++) {\n          sig |= bytes4(_data[i] & 0xFF) >> (i * 8);\n        }\n        return sig;\n    }\n}\n\nlibrary Encoder {\n    function getKey(string memory _key) internal pure returns(bytes32) {\n        return bytes32(keccak256(abi.encodePacked(_key)));\n    }\n\n    function getKey(string memory _key1, address _key2) internal pure returns(bytes32) {\n        return bytes32(keccak256(abi.encodePacked(_key1, _key2)));\n    }\n\n    function getKey(string memory _key1, string memory _key2) internal pure returns(bytes32) {\n        return bytes32(keccak256(abi.encodePacked(_key1, _key2)));\n    }\n\n    function getKey(string memory _key1, uint256 _key2) internal pure returns(bytes32) {\n        return bytes32(keccak256(abi.encodePacked(_key1, _key2)));\n    }\n\n    function getKey(string memory _key1, bytes32 _key2) internal pure returns(bytes32) {\n        return bytes32(keccak256(abi.encodePacked(_key1, _key2)));\n    }\n\n    function getKey(string memory _key1, bool _key2) internal pure returns(bytes32) {\n        return bytes32(keccak256(abi.encodePacked(_key1, _key2)));\n    }\n\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ninterface IOwnable {\n    /**\n    * @dev Returns owner\n    */\n    function owner() external view returns(address ownerAddress);\n\n    /**\n    * @dev Allows the current owner to relinquish control of the contract.\n    */\n    function renounceOwnership() external;\n\n    /**\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n    * @param _newOwner The address to transfer ownership to.\n    */\n    function transferOwnership(address _newOwner) external;\n\n}\n\n/**\n * @title Helper library use to compare or validate the semantic versions\n */\n\nlibrary VersionUtils {\n\n    function lessThanOrEqual(uint8[] memory _current, uint8[] memory _new) internal pure returns(bool) {\n        require(_current.length == 3);\n        require(_new.length == 3);\n        uint8 i = 0;\n        for (i = 0; i < _current.length; i++) {\n            if (_current[i] == _new[i]) continue;\n            if (_current[i] < _new[i]) return true;\n            if (_current[i] > _new[i]) return false;\n        }\n        return true;\n    }\n\n    function greaterThanOrEqual(uint8[] memory _current, uint8[] memory _new) internal pure returns(bool) {\n        require(_current.length == 3);\n        require(_new.length == 3);\n        uint8 i = 0;\n        for (i = 0; i < _current.length; i++) {\n            if (_current[i] == _new[i]) continue;\n            if (_current[i] > _new[i]) return true;\n            if (_current[i] < _new[i]) return false;\n        }\n        return true;\n    }\n\n    /**\n     * @notice Used to pack the uint8[] array data into uint24 value\n     * @param _major Major version\n     * @param _minor Minor version\n     * @param _patch Patch version\n     */\n    function pack(uint8 _major, uint8 _minor, uint8 _patch) internal pure returns(uint24) {\n        return (uint24(_major) << 16) | (uint24(_minor) << 8) | uint24(_patch);\n    }\n\n    /**\n     * @notice Used to convert packed data into uint8 array\n     * @param _packedVersion Packed data\n     */\n    function unpack(uint24 _packedVersion) internal pure returns(uint8[] memory) {\n        uint8[] memory _unpackVersion = new uint8[](3);\n        _unpackVersion[0] = uint8(_packedVersion >> 16);\n        _unpackVersion[1] = uint8(_packedVersion >> 8);\n        _unpackVersion[2] = uint8(_packedVersion);\n        return _unpackVersion;\n    }\n\n\n    /**\n     * @notice Used to packed the KYC data\n     */\n    function packKYC(uint64 _a, uint64 _b, uint64 _c, uint8 _d) internal pure returns(uint256) {\n        // this function packs 3 uint64 and a uint8 together in a uint256 to save storage cost\n        // a is rotated left by 136 bits, b is rotated left by 72 bits and c is rotated left by 8 bits.\n        // rotation pads empty bits with zeroes so now we can safely do a bitwise OR operation to pack\n        // all the variables together.\n        return (uint256(_a) << 136) | (uint256(_b) << 72) | (uint256(_c) << 8) | uint256(_d);\n    }\n\n    /**\n     * @notice Used to convert packed data into KYC data\n     * @param _packedVersion Packed data\n     */\n    function unpackKYC(uint256 _packedVersion) internal pure returns(uint64 canSendAfter, uint64 canReceiveAfter, uint64 expiryTime, uint8 added) {\n        canSendAfter = uint64(_packedVersion >> 136);\n        canReceiveAfter = uint64(_packedVersion >> 72);\n        expiryTime = uint64(_packedVersion >> 8);\n        added = uint8(_packedVersion);\n    }\n}\n\n/**\n * @title Interface to be implemented by all permission manager modules\n */\ninterface IPermissionManager {\n    /**\n    * @notice Used to check the permission on delegate corresponds to module contract address\n    * @param _delegate Ethereum address of the delegate\n    * @param _module Ethereum contract address of the module\n    * @param _perm Permission flag\n    * @return bool\n    */\n    function checkPermission(address _delegate, address _module, bytes32 _perm) external view returns(bool);\n\n    /**\n    * @notice Used to add a delegate\n    * @param _delegate Ethereum address of the delegate\n    * @param _details Details about the delegate i.e `Belongs to financial firm`\n    */\n    function addDelegate(address _delegate, bytes32 _details) external;\n\n    /**\n    * @notice Used to delete a delegate\n    * @param _delegate Ethereum address of the delegate\n    */\n    function deleteDelegate(address _delegate) external;\n\n    /**\n    * @notice Used to check if an address is a delegate or not\n    * @param _potentialDelegate the address of potential delegate\n    * @return bool\n    */\n    function checkDelegate(address _potentialDelegate) external view returns(bool);\n\n    /**\n    * @notice Used to provide/change the permission to the delegate corresponds to the module contract\n    * @param _delegate Ethereum address of the delegate\n    * @param _module Ethereum contract address of the module\n    * @param _perm Permission flag\n    * @param _valid Bool flag use to switch on/off the permission\n    * @return bool\n    */\n    function changePermission(address _delegate, address _module, bytes32 _perm, bool _valid) external;\n\n    /**\n    * @notice Used to change one or more permissions for a single delegate at once\n    * @param _delegate Ethereum address of the delegate\n    * @param _modules Multiple module matching the multiperms, needs to be same length\n    * @param _perms Multiple permission flag needs to be changed\n    * @param _valids Bool array consist the flag to switch on/off the permission\n    * @return nothing\n    */\n    function changePermissionMulti(\n        address _delegate,\n        address[] calldata _modules,\n        bytes32[] calldata _perms,\n        bool[] calldata _valids\n    ) external;\n\n    /**\n    * @notice Used to return all delegates with a given permission and module\n    * @param _module Ethereum contract address of the module\n    * @param _perm Permission flag\n    * @return address[]\n    */\n    function getAllDelegatesWithPerm(address _module, bytes32 _perm) external view returns(address[] memory);\n\n    /**\n    * @notice Used to return all permission of a single or multiple module\n    * @dev possible that function get out of gas is there are lot of modules and perm related to them\n    * @param _delegate Ethereum address of the delegate\n    * @param _types uint8[] of types\n    * @return address[] the address array of Modules this delegate has permission\n    * @return bytes32[] the permission array of the corresponding Modules\n    */\n    function getAllModulesAndPermsFromTypes(address _delegate, uint8[] calldata _types) external view returns(\n        address[] memory,\n        bytes32[] memory\n    );\n\n    /**\n    * @notice Used to get the Permission flag related the `this` contract\n    * @return Array of permission flags\n    */\n    function getPermissions() external view returns(bytes32[] memory);\n\n    /**\n    * @notice Used to get all delegates\n    * @return address[]\n    */\n    function getAllDelegates() external view returns(address[] memory);\n\n}\n\ncontract STRGetter is EternalStorage {\n\n    bytes32 constant STLAUNCHFEE = 0xd677304bb45536bb7fdfa6b9e47a3c58fe413f9e8f01474b0a4b9c6e0275baf2;\n    bytes32 constant TICKERREGFEE = 0x2fcc69711628630fb5a42566c68bd1092bc4aa26826736293969fddcd11cb2d2;\n    bytes32 constant EXPIRYLIMIT = 0x604268e9a73dfd777dcecb8a614493dd65c638bad2f5e7d709d378bd2fb0baee;\n    bytes32 constant IS_FEE_IN_POLY = 0x7152e5426955da44af11ecd67fec5e2a3ba747be974678842afa9394b9a075b6; //keccak256(\"IS_FEE_IN_POLY\")\n\n    /**\n     * @notice Returns the list of tickers owned by the selected address\n     * @param _owner is the address which owns the list of tickers\n     */\n    function getTickersByOwner(address _owner) external view returns(bytes32[] memory) {\n        uint256 count = 0;\n        // accessing the data structure userTotickers[_owner].length\n        bytes32[] memory tickers = getArrayBytes32(Encoder.getKey(\"userToTickers\", _owner));\n        uint i;\n        for (i = 0; i < tickers.length; i++) {\n            if (_ownerInTicker(tickers[i])) {\n                count++;\n            }\n        }\n        bytes32[] memory result = new bytes32[](count);\n        count = 0;\n        for (i = 0; i < tickers.length; i++) {\n            if (_ownerInTicker(tickers[i])) {\n                result[count] = tickers[i];\n                count++;\n            }\n        }\n        return result;\n    }\n\n    function _ownerInTicker(bytes32 _ticker) internal view returns (bool) {\n        string memory ticker = Util.bytes32ToString(_ticker);\n        /*solium-disable-next-line security/no-block-members*/\n        if (getUintValue(Encoder.getKey(\"registeredTickers_expiryDate\", ticker)) >= now || getBoolValue(Encoder.getKey(\"registeredTickers_status\", ticker))) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * @notice Returns the list of tokens owned by the selected address\n     * @param _owner is the address which owns the list of tickers\n     * @dev Intention is that this is called off-chain so block gas limit is not relevant\n     */\n    function getTokensByOwner(address _owner) external view returns(address[] memory) {\n        return _getTokens(false, _owner);\n    }\n\n    /**\n     * @notice Returns the list of all tokens\n     * @dev Intention is that this is called off-chain so block gas limit is not relevant\n     */\n    function getTokens() public view returns(address[] memory) {\n        return _getTokens(true, address(0));\n    }\n    /**\n     * @notice Returns the list of tokens owned by the selected address\n     * @param _allTokens if _allTokens is true returns all tokens despite on the second parameter\n     * @param _owner is the address which owns the list of tickers\n     */\n    function _getTokens(bool _allTokens, address _owner) internal view returns(address[] memory) {\n        // Loop over all active users, then all associated tickers of those users\n        // This ensures we find tokens, even if their owner has been modified\n        address[] memory activeUsers = getArrayAddress(Encoder.getKey(\"activeUsers\"));\n        bytes32[] memory tickers;\n        uint256 count = 0;\n        uint256 i = 0;\n        uint256 j = 0;\n        for (i = 0; i < activeUsers.length; i++) {\n            tickers = getArrayBytes32(Encoder.getKey(\"userToTickers\", activeUsers[i]));\n            for (j = 0; j < tickers.length; j++) {\n                if (address(0) != _ownerInToken(tickers[j], _allTokens, _owner)) {\n                    count++;\n                }\n            }\n        }\n        address[] memory result = new address[](count);\n        count = 0;\n        address token;\n        for (i = 0; i < activeUsers.length; i++) {\n            tickers = getArrayBytes32(Encoder.getKey(\"userToTickers\", activeUsers[i]));\n            for (j = 0; j < tickers.length; j++) {\n                token = _ownerInToken(tickers[j], _allTokens, _owner);\n                if (address(0) != token) {\n                    result[count] = token;\n                    count++;\n                }\n            }\n        }\n        return result;\n    }\n\n    function _ownerInToken(bytes32 _ticker, bool _allTokens, address _owner) internal view returns(address) {\n        address token = getAddressValue(Encoder.getKey(\"tickerToSecurityToken\", Util.bytes32ToString(_ticker)));\n        if (token != address(0)) {\n            if (_allTokens || IOwnable(token).owner() == _owner) {\n                return token;\n            }\n        }\n        return address(0);\n    }\n\n    /**\n     * @notice Returns the list of tokens to which the delegate has some access\n     * @param _delegate is the address for the delegate\n     * @dev Intention is that this is called off-chain so block gas limit is not relevant\n     */\n    function getTokensByDelegate(address _delegate) external view returns(address[] memory) {\n        // Loop over all active users, then all associated tickers of those users\n        // This ensures we find tokens, even if their owner has been modified\n        address[] memory tokens = getTokens();\n        uint256 count = 0;\n        uint256 i = 0;\n        for (i = 0; i < tokens.length; i++) {\n            if (_delegateInToken(tokens[i], _delegate)) {\n                count++;\n            }\n        }\n        address[] memory result = new address[](count);\n        count = 0;\n        for (i = 0; i < tokens.length; i++) {\n            if (_delegateInToken(tokens[i], _delegate)) {\n                result[count] = tokens[i];\n                count++;\n            }\n        }\n        return result;\n    }\n\n    function _delegateInToken(address _token, address _delegate) internal view returns(bool) {\n        uint256 j = 0;\n        address[] memory permissionManagers;\n        bool isArchived;\n        permissionManagers = ISecurityToken(_token).getModulesByType(1);\n        for (j = 0; j < permissionManagers.length; j++) {\n            (,,, isArchived,,) = ISecurityToken(_token).getModule(permissionManagers[j]);\n            if (!isArchived) {\n                if (IPermissionManager(permissionManagers[j]).checkDelegate(_delegate)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * @notice Returns the owner and timestamp for a given ticker\n     * @param _ticker is the ticker symbol\n     * @return address\n     * @return uint256\n     * @return uint256\n     * @return string\n     * @return bool\n     */\n    function getTickerDetails(string calldata _ticker) external view returns (address, uint256, uint256, string memory, bool) {\n        string memory ticker = Util.upper(_ticker);\n        bool tickerStatus = getTickerStatus(ticker);\n        uint256 expiryDate = getUintValue(Encoder.getKey(\"registeredTickers_expiryDate\", ticker));\n        /*solium-disable-next-line security/no-block-members*/\n        if ((tickerStatus == true) || (expiryDate > now)) {\n            address stAddress = getAddressValue(Encoder.getKey(\"tickerToSecurityToken\", ticker));\n            string memory tokenName = stAddress == address(0) ? \"\" : ISecurityToken(stAddress).name();\n            return\n            (\n                getTickerOwner(ticker),\n                getUintValue(Encoder.getKey(\"registeredTickers_registrationDate\", ticker)),\n                expiryDate,\n                tokenName,\n                tickerStatus\n            );\n        } else {\n            return (address(0), uint256(0), uint256(0), \"\", false);\n        }\n    }\n\n    /**\n     * @notice Returns the security token address by ticker symbol\n     * @param _ticker is the ticker of the security token\n     * @return address\n     */\n    function getSecurityTokenAddress(string calldata _ticker) external view returns (address) {\n        string memory ticker = Util.upper(_ticker);\n        return getAddressValue(Encoder.getKey(\"tickerToSecurityToken\", ticker));\n    }\n\n    /**\n    * @notice Returns the security token data by address\n    * @param _securityToken is the address of the security token.\n    * @return string is the ticker of the security Token.\n    * @return address is the issuer of the security Token.\n    * @return string is the details of the security token.\n    * @return uint256 is the timestamp at which security Token was deployed.\n    */\n    function getSecurityTokenData(address _securityToken) external view returns (string memory, address, string memory, uint256) {\n        return (\n            getStringValue(Encoder.getKey(\"securityTokens_ticker\", _securityToken)),\n            IOwnable(_securityToken).owner(),\n            getStringValue(Encoder.getKey(\"securityTokens_tokenDetails\", _securityToken)),\n            getUintValue(Encoder.getKey(\"securityTokens_deployedAt\", _securityToken))\n        );\n    }\n\n    /**\n     * @notice Returns the current STFactory Address\n     */\n    function getSTFactoryAddress() public view returns(address) {\n        return getAddressValue(Encoder.getKey(\"protocolVersionST\", getUintValue(Encoder.getKey(\"latestVersion\"))));\n    }\n\n    /**\n     * @notice Returns the STFactory Address of a particular version\n     * @param _protocolVersion Packed protocol version\n     */\n    function getSTFactoryAddressOfVersion(uint256 _protocolVersion) public view returns(address) {\n        return getAddressValue(Encoder.getKey(\"protocolVersionST\", _protocolVersion));\n    }\n\n    /**\n     * @notice Gets Protocol version\n     */\n    function getLatestProtocolVersion() public view returns(uint8[] memory) {\n        return VersionUtils.unpack(uint24(getUintValue(Encoder.getKey(\"latestVersion\"))));\n    }\n\n    /**\n     * @notice Gets the fee currency\n     * @return true = poly, false = usd\n     */\n    function getIsFeeInPoly() public view returns(bool) {\n        return getBoolValue(IS_FEE_IN_POLY);\n    }\n\n    /**\n     * @notice Gets the expiry limit\n     * @return Expiry limit\n     */\n    function getExpiryLimit() public view returns(uint256) {\n        return getUintValue(EXPIRYLIMIT);\n    }\n\n    /**\n     * @notice Gets the status of the ticker\n     * @param _ticker Ticker whose status need to determine\n     * @return bool\n     */\n    function getTickerStatus(string memory _ticker) public view returns(bool) {\n        return getBoolValue(Encoder.getKey(\"registeredTickers_status\", _ticker));\n    }\n\n    /**\n     * @notice Gets the owner of the ticker\n     * @param _ticker Ticker whose owner need to determine\n     * @return address Address of the owner\n     */\n    function getTickerOwner(string memory _ticker) public view returns(address) {\n        return getAddressValue(Encoder.getKey(\"registeredTickers_owner\", _ticker));\n    }\n\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_variable\",\"type\":\"bytes32\"}],\"name\":\"getBytes32Value\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getExpiryLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getTickersByOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ticker\",\"type\":\"string\"}],\"name\":\"getTickerOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getTokensByOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_variable\",\"type\":\"bytes32\"}],\"name\":\"getBytesValue\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_variable\",\"type\":\"bytes32\"}],\"name\":\"getAddressValue\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ticker\",\"type\":\"string\"}],\"name\":\"getTickerDetails\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getArrayAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ticker\",\"type\":\"string\"}],\"name\":\"getTickerStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_securityToken\",\"type\":\"address\"}],\"name\":\"getSecurityTokenData\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_variable\",\"type\":\"bytes32\"}],\"name\":\"getBoolValue\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_protocolVersion\",\"type\":\"uint256\"}],\"name\":\"getSTFactoryAddressOfVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_variable\",\"type\":\"bytes32\"}],\"name\":\"getStringValue\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getArrayBytes32\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLatestProtocolVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"getTokensByDelegate\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_variable\",\"type\":\"bytes32\"}],\"name\":\"getUintValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSTFactoryAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getIsFeeInPoly\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getArrayUint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ticker\",\"type\":\"string\"}],\"name\":\"getSecurityTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"STRGetter","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5d2276e33f81ade7c8f05817e642c5cb0ad4ddbe45ca0cb9ce4b66e33f1aa0c3"}]}