{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n// produced by the Solididy File Flattener (c) David Appleton 2018\r\n// contact : dave@akomba.com\r\n// released under Apache 2.0 licence\r\n// input  /home/dave/Documents/gotests/auctionTests/auction/auction_reveal_list.sol\r\n// flattened :  Tuesday, 27-Aug-19 13:53:00 UTC\r\ncontract Ownable {\r\n  address payable private _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == _owner, \"Forbidden\");\r\n    _;\r\n  }\r\n\r\n  constructor() public {\r\n    _owner = msg.sender;\r\n  }\r\n\r\n  function owner() public view returns (address payable) {\r\n    return _owner;\r\n  }\r\n\r\n  function transferOwnership(address payable newOwner) public onlyOwner {\r\n    require(newOwner != address(0), \"Non-zero address required.\");\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\ninterface IERC20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract auction is Ownable {\r\n\r\n    struct data {\r\n        bytes32 hashValue;\r\n        uint256 value;\r\n        bool    haveBid;\r\n        bool    revealed;\r\n        bool    refunded;\r\n        bool    flagged;\r\n        uint256 bid;\r\n    }\r\n\r\n    mapping (address => data) public information;\r\n    mapping (uint256 => address[]) public reveals;\r\n    mapping (address => bool) private done;\r\n    uint256[] private revealedValues;\r\n\r\n    uint256 private startBids;\r\n    uint256 private endBids;\r\n    uint256 private startReveal;\r\n    uint256 private endReveal;\r\n\r\n    uint256 private startWithdraw;\r\n    uint256 private endWithdraw;\r\n\r\n    uint256 private winningAmount;\r\n\r\n    uint256 public  minimumBid;\r\n\r\n    address payable private  wallet;\r\n\r\n    event  MinimumBid(uint256 _minimumBid);\r\n\r\n    event BiddingPeriod( uint256 startBids, uint256 endBids);\r\n    event RevealPeriod( uint256 startReveal, uint256 endReveal);\r\n    event WithdrawPeriod( uint256 startWithdraw, uint256 endWithdraw);\r\n\r\n\r\n    event BidSubmitted(address bidder, uint256 funding, bytes32 hash);\r\n    event BidRevealed(address bidder, uint256 bid);\r\n\r\n    event WinningAmount(uint256 winningAmount);\r\n    event WinnerWithTie(address tiedWinner);\r\n    event Refund(address bidder, uint256 refund);\r\n    event NothingToRefund(address bidder);\r\n    event RefundChange(address bidder, uint256 change);\r\n\r\n    event BalanceWithdrawn(address recipient,uint256 amount);\r\n\r\n    event Wallet(address _wallet);\r\n\r\n    modifier duringBidding {\r\n        require(now >= startBids,\"Bidding not started yet\");\r\n        require(now < endBids,\"Bidding has ended\");\r\n        _;\r\n    }\r\n\r\n    modifier duringReveal {\r\n        require(now >= startReveal,\"Reveal not started yet\");\r\n        require(now < endReveal,\"Reveal has ended\");\r\n        _;\r\n    }\r\n\r\n    modifier afterReveal {\r\n        require(now > endReveal,\"Reveal has not ended yet\");\r\n        _;\r\n    }\r\n\r\n    modifier duringWithdraw {\r\n        require(now > startWithdraw,\"Withdraw has not started yet\");\r\n        require(now < endWithdraw,\"Withdraw period over\");\r\n        _;\r\n    }\r\n\r\n    modifier afterWithdraw {\r\n        require(now > endWithdraw,\"Withdraw period over\");\r\n        _;\r\n    }\r\n\r\n    constructor(uint256 _startBids, uint256 _endBids, uint256 _startReveal, uint256 _endReveal, uint256 _minimumBid, address payable _wallet)\r\n    public {\r\n        require(_startBids != 0, \"dates must be non zero\");\r\n        require(_endBids != 0, \"dates must be non zero\");\r\n        require(_startReveal != 0, \"dates must be non zero\");\r\n        require(_endReveal != 0, \"dates must be non zero\");\r\n        require(_minimumBid != 0, \"minimum bid must be non zero\");\r\n        require(_wallet != address(0), \"Invalid wallet address\");\r\n\r\n        startBids = _startBids;\r\n        endBids = _endBids;\r\n        startReveal = _startReveal;\r\n        endReveal = _endReveal;\r\n        minimumBid = _minimumBid;\r\n        wallet = _wallet;\r\n\r\n        emit BiddingPeriod(startBids,endBids);\r\n        emit RevealPeriod(startReveal,endReveal);\r\n        emit MinimumBid(minimumBid);\r\n        emit Wallet(wallet);\r\n    }\r\n\r\n\r\n    function biddingTime(bytes32 _hash) public payable duringBidding {\r\n        require(! information[msg.sender].haveBid, \"only one bid per address\");\r\n        require(msg.value > minimumBid,\"Amount sent is less than minimum bid\");\r\n\r\n        data storage myData = information[msg.sender];\r\n        myData.hashValue = _hash;\r\n        myData.value = msg.value;\r\n        myData.haveBid = true;\r\n\r\n        emit BidSubmitted(msg.sender, msg.value, _hash);\r\n    }\r\n\r\n    function reveal(uint256 _bid, bytes memory randString) public duringReveal {\r\n        bytes32 myHash = calculateHash(_bid,randString);\r\n        data storage myData = information[msg.sender];\r\n        require(myHash == myData.hashValue, \"hashes do not match\");\r\n        require(_bid <= myData.value,\"Bid not valid\");\r\n        require(_bid >= minimumBid,\"Bid was less than minimum bid\");\r\n        require(!myData.revealed,\"Bid already revealed\");\r\n\r\n        myData.bid = _bid;\r\n        myData.revealed = true;\r\n\r\n        uint256 newLen = reveals[_bid].push(msg.sender);\r\n        if (newLen == 1) {\r\n            revealedValues.push(_bid);\r\n        }\r\n\r\n        emit BidRevealed(msg.sender,_bid);\r\n    }\r\n\r\n    function setWinningAmount(uint256 _winningAmount) public onlyOwner afterReveal {\r\n        winningAmount = _winningAmount;\r\n\r\n        emit WinningAmount(winningAmount);\r\n    }\r\n\r\n    function setWinningAddresses(address[] memory theAddresses,bool flagged) public onlyOwner  afterReveal{\r\n        uint256 pos;\r\n        for (pos = 0; pos < theAddresses.length; pos++) {\r\n            information[theAddresses[pos]].flagged = flagged;\r\n            emit WinnerWithTie(theAddresses[pos]);\r\n        }\r\n    }\r\n\r\n    function startWithdrawal(uint256 _startWithdraw, uint256 _endWithdraw) public onlyOwner {\r\n        require(winningAmount > 0,\"Winning Amount Not Set\");\r\n        require(_startWithdraw > now,\"Cannot start withdrawal in the past\");\r\n\r\n        startWithdraw = _startWithdraw;\r\n        endWithdraw = _endWithdraw;\r\n\r\n        emit WithdrawPeriod(startWithdraw,endWithdraw);\r\n    }\r\n\r\n    function withdrawRefund() public duringWithdraw {\r\n        data storage myData = information[msg.sender];\r\n        require(myData.bid > 0,\"No bid submitted\");\r\n        require(myData.revealed,\"bid was not revealed\");\r\n        require(!myData.refunded,\"Already refunded\");\r\n\r\n        myData.refunded = true;\r\n        uint withdraw;\r\n        bool winner;\r\n        (withdraw,winner) = withdrawalAmount(msg.sender);\r\n\r\n        if (!winner) {\r\n            emit Refund(msg.sender,withdraw);\r\n        } else if (withdraw > 0){\r\n            emit RefundChange(msg.sender,withdraw);\r\n        } else {\r\n            emit NothingToRefund(msg.sender);\r\n        }\r\n        if (withdraw > 0) {\r\n            msg.sender.transfer(withdraw);\r\n        }\r\n    }\r\n\r\n    function earlyWithdrawal(address[] memory winners) public onlyOwner duringWithdraw {\r\n        uint256 amount;\r\n        uint256 pos;\r\n        uint256 len = winners.length;\r\n        for (pos = 0; pos < len; pos++) {\r\n            address addr = winners[pos];\r\n            if (!done[addr]){\r\n                bool winner;\r\n                bool inperiod;\r\n                (winner, inperiod) = isWinner(addr);\r\n                require(winner && inperiod,\"Not a winner\");\r\n                amount += information[addr].bid;\r\n            }\r\n            done[addr] = true;\r\n        }\r\n        emit BalanceWithdrawn(wallet,amount);\r\n        wallet.transfer(amount);\r\n    }\r\n\r\n\r\n\r\n    function withdrawFees() public afterWithdraw onlyOwner {\r\n        emit BalanceWithdrawn(wallet,address(this).balance);\r\n        wallet.transfer(address(this).balance);\r\n    }\r\n\r\n    function calculateHash(uint256 _bid, bytes memory _randString) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(_bid,_randString));\r\n    }\r\n\r\n    function isWinner(address check) public view returns(bool winner, bool inPeriod) {\r\n        if (now < startWithdraw) {\r\n            return (false,false);\r\n        }\r\n        inPeriod = (now < endWithdraw); // already checked > start\r\n        winner = (information[check].bid > winningAmount) ||\r\n        ((information[check].bid == winningAmount) && (information[check].flagged));\r\n    }\r\n\r\n    function withdrawalAmount(address check) public view returns (uint256,bool) {\r\n        bool winner;\r\n        bool inPeriod;\r\n        (winner,inPeriod) = isWinner(check);\r\n        if (!inPeriod) return (0,false);\r\n        data memory myData = information[check];\r\n        if (!myData.revealed) return (0,false);\r\n        if (winner) {\r\n            return (myData.value - myData.bid, true);\r\n        }\r\n        return (myData.value, false);\r\n    }\r\n\r\n    function inBidding() public view returns (bool) {\r\n        return (now > startBids) && (now < endBids);\r\n    }\r\n    function inReveal() public view returns (bool) {\r\n        return (now > startReveal) && (now < endReveal);\r\n    }\r\n    function inWithdraw() public view returns (bool) {\r\n        return (now > startWithdraw) && (now < endWithdraw);\r\n    }\r\n\r\n    // NOTE : Value is sorted by order of reveal NOT VALUE\r\n    function revealedValue(uint256 position) public view returns (uint256) {\r\n        require(position <= revealedValues.length,\"position not in array\");\r\n        return revealedValues[position];\r\n    }\r\n\r\n    function numberOfRevealedValues() public view returns (uint256) {\r\n        return revealedValues.length;\r\n    }\r\n\r\n    function numberOfRevealsForValue(uint256 value) public view returns (uint256) {\r\n        return reveals[value].length;\r\n    }\r\n\r\n  function transferAnyERC20Token(address tokenAddress, uint256 amount) public onlyOwner returns (bool) {\r\n    return IERC20(tokenAddress).transfer(owner(), amount);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"withdrawRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inReveal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfRevealedValues\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bid\",\"type\":\"uint256\"},{\"name\":\"_randString\",\"type\":\"bytes\"}],\"name\":\"calculateHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"theAddresses\",\"type\":\"address[]\"},{\"name\":\"flagged\",\"type\":\"bool\"}],\"name\":\"setWinningAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startWithdraw\",\"type\":\"uint256\"},{\"name\":\"_endWithdraw\",\"type\":\"uint256\"}],\"name\":\"startWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_winningAmount\",\"type\":\"uint256\"}],\"name\":\"setWinningAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"check\",\"type\":\"address\"}],\"name\":\"isWinner\",\"outputs\":[{\"name\":\"winner\",\"type\":\"bool\"},{\"name\":\"inPeriod\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inBidding\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"biddingTime\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"information\",\"outputs\":[{\"name\":\"hashValue\",\"type\":\"bytes32\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"haveBid\",\"type\":\"bool\"},{\"name\":\"revealed\",\"type\":\"bool\"},{\"name\":\"refunded\",\"type\":\"bool\"},{\"name\":\"flagged\",\"type\":\"bool\"},{\"name\":\"bid\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"winners\",\"type\":\"address[]\"}],\"name\":\"earlyWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bid\",\"type\":\"uint256\"},{\"name\":\"randString\",\"type\":\"bytes\"}],\"name\":\"reveal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumBid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"check\",\"type\":\"address\"}],\"name\":\"withdrawalAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"revealedValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reveals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"numberOfRevealsForValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startBids\",\"type\":\"uint256\"},{\"name\":\"_endBids\",\"type\":\"uint256\"},{\"name\":\"_startReveal\",\"type\":\"uint256\"},{\"name\":\"_endReveal\",\"type\":\"uint256\"},{\"name\":\"_minimumBid\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_minimumBid\",\"type\":\"uint256\"}],\"name\":\"MinimumBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"startBids\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endBids\",\"type\":\"uint256\"}],\"name\":\"BiddingPeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"startReveal\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endReveal\",\"type\":\"uint256\"}],\"name\":\"RevealPeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"startWithdraw\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endWithdraw\",\"type\":\"uint256\"}],\"name\":\"WithdrawPeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"funding\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"BidSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bid\",\"type\":\"uint256\"}],\"name\":\"BidRevealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"winningAmount\",\"type\":\"uint256\"}],\"name\":\"WinningAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tiedWinner\",\"type\":\"address\"}],\"name\":\"WinnerWithTie\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"refund\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"NothingToRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"change\",\"type\":\"uint256\"}],\"name\":\"RefundChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BalanceWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"Wallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"auction","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005d656190000000000000000000000000000000000000000000000000000000005d680490000000000000000000000000000000000000000000000000000000005d680491000000000000000000000000000000000000000000000000000000005d6d4a900000000000000000000000000000000000000000000000004139c1192c5600000000000000000000000000006a1517622feb74a242e68a26f423ae38e020a0b1","Library":"","SwarmSource":"bzzr://6099a520ab00c954c993a08f8f6cd1a6975198ddb3e358b3a49d3082f162f442"}]}