{"status":"1","message":"OK","result":[{"SourceCode":"/**\n\nDeployed by Ren Project, https://renproject.io\n\nCommit hash: 89c31ce\nRepository: https://github.com/renproject/darknode-sol\nIssues: https://github.com/renproject/darknode-sol/issues\n\nLicenses\nopenzeppelin-solidity: (MIT) https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/LICENSE\ndarknode-sol: (GNU GPL V3) https://github.com/renproject/darknode-sol/blob/master/LICENSE\n\n*/\n\npragma solidity ^0.5.8;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n}\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see `ERC20Detailed`.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a `Transfer` event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\n     * zero by default.\n     *\n     * This value changes when `approve` or `transferFrom` are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * > Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an `Approval` event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a `Transfer` event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to `approve`. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @dev Implementation of the `IERC20` interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using `_mint`.\n * For a generic mechanism see `ERC20Mintable`.\n *\n * *For a detailed writeup see our guide [How to implement supply\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See `IERC20.approve`.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev See `IERC20.totalSupply`.\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See `IERC20.balanceOf`.\n     */\n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See `IERC20.transfer`.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See `IERC20.allowance`.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See `IERC20.approve`.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See `IERC20.transferFrom`.\n     *\n     * Emits an `Approval` event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of `ERC20`;\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `value`.\n     * - the caller must have allowance for `sender`'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to `approve` that can be used as a mitigation for\n     * problems described in `IERC20.approve`.\n     *\n     * Emits an `Approval` event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to `approve` that can be used as a mitigation for\n     * problems described in `IERC20.approve`.\n     *\n     * Emits an `Approval` event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to `transfer`, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a `Transfer` event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _balances[sender] = _balances[sender].sub(amount);\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a `Transfer` event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n     /**\n     * @dev Destoys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a `Transfer` event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an `Approval` event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    /**\n     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\n     * from the caller's allowance.\n     *\n     * See `_burn` and `_approve`.\n     */\n    function _burnFrom(address account, uint256 amount) internal {\n        _burn(account, amount);\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n    }\n}\n\n/**\n * @title Claimable\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n * This allows the new owner to accept the transfer.\n */\ncontract Claimable {\n    address private _pendingOwner;\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"caller is not the owner\");\n        _;\n    }\n\n    /**\n    * @dev Modifier throws if called by any account other than the pendingOwner.\n    */\n    modifier onlyPendingOwner() {\n      require(msg.sender == _pendingOwner, \"caller is not the pending owner\");\n      _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     * @notice Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n    * @dev Allows the current owner to set the pendingOwner address.\n    * @param newOwner The address to transfer ownership to.\n    */\n    function transferOwnership(address newOwner) public onlyOwner {\n      _pendingOwner = newOwner;\n    }\n\n    /**\n    * @dev Allows the pendingOwner address to finalize the transfer.\n    */\n    function claimOwnership() public onlyPendingOwner {\n      emit OwnershipTransferred(_owner, _pendingOwner);\n      _owner = _pendingOwner;\n      _pendingOwner = address(0);\n    }\n}\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n\n/**\n * @dev Collection of functions related to the address type,\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * This test is non-exhaustive, and there may be false-negatives: during the\n     * execution of a contract's constructor, its address will be reported as\n     * not containing a contract.\n     *\n     * > It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n}\n\n/// @notice Implements safeTransfer, safeTransferFrom and\n/// safeApprove for CompatibleERC20.\n///\n/// See https://github.com/ethereum/solidity/issues/4116\n///\n/// This library allows interacting with ERC20 tokens that implement any of\n/// these interfaces:\n///\n/// (1) transfer returns true on success, false on failure\n/// (2) transfer returns true on success, reverts on failure\n/// (3) transfer returns nothing on success, reverts on failure\n///\n/// Additionally, safeTransferFromWithFees will return the final token\n/// value received after accounting for token fees.\n\nlibrary CompatibleERC20Functions {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /// @notice Calls transferFrom on the token, reverts if the call fails and\n    /// returns the value transferred after fees.\n    function safeTransferFromWithFees(IERC20 token, address from, address to, uint256 value) internal returns (uint256) {\n        uint256 balancesBefore = token.balanceOf(to);\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n        require(previousReturnValue(), \"transferFrom failed\");\n        uint256 balancesAfter = token.balanceOf(to);\n        return Math.min(value, balancesAfter.sub(balancesBefore));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require((value == 0) || (token.allowance(address(this), spender) == 0), \"must first reset approval\");\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must equal true).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n\n        require(address(token).isContract(), \"token not found\");\n\n        // solium-disable-next-line security/no-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"token call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            require(abi.decode(returndata, (bool)), \"token call failed\");\n        }\n    }\n\n    /// @notice Checks the return value of the previous function. Returns true\n    /// if the previous function returned 32 non-zero bytes or returned zero\n    /// bytes.\n    function previousReturnValue() private pure returns (bool)\n    {\n        uint256 returnData = 0;\n\n        assembly { /* solium-disable-line security/no-inline-assembly */\n            // Switch on the number of bytes returned by the previous call\n            switch returndatasize\n\n            // 0 bytes: ERC20 of type (3), did not throw\n            case 0 {\n                returnData := 1\n            }\n\n            // 32 bytes: ERC20 of types (1) or (2)\n            case 32 {\n                // Copy the return data into scratch space\n                returndatacopy(0, 0, 32)\n\n                // Load  the return data into returnData\n                returnData := mload(0)\n            }\n\n            // Other return size: return false\n            default { }\n        }\n\n        return returnData != 0;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * > Note: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n/**\n * @dev Optional functions from the ERC20 standard.\n */\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\n     * these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei.\n     *\n     * > Note that this information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * `IERC20.balanceOf` and `IERC20.transfer`.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev Give an account access to this role.\n     */\n    function add(Role storage role, address account) internal {\n        require(!has(role, account), \"Roles: account already has role\");\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev Remove an account's access to this role.\n     */\n    function remove(Role storage role, address account) internal {\n        require(has(role, account), \"Roles: account does not have role\");\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev Check if an account has this role.\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0), \"Roles: account is the zero address\");\n        return role.bearer[account];\n    }\n}\n\ncontract PauserRole {\n    using Roles for Roles.Role;\n\n    event PauserAdded(address indexed account);\n    event PauserRemoved(address indexed account);\n\n    Roles.Role private _pausers;\n\n    constructor () internal {\n        _addPauser(msg.sender);\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(msg.sender), \"PauserRole: caller does not have the Pauser role\");\n        _;\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n\n    function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }\n\n    function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n\n    function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n}\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\ncontract Pausable is PauserRole {\n    /**\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\n     * to the deployer.\n     */\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused, \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused, \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Called by a pauser to pause, triggers stopped state.\n     */\n    function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    /**\n     * @dev Called by a pauser to unpause, returns to normal state.\n     */\n    function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n}\n\n/**\n * @title Pausable token\n * @dev ERC20 modified with pausable transfers.\n */\ncontract ERC20Pausable is ERC20, Pausable {\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transfer(to, value);\n    }\n\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transferFrom(from, to, value);\n    }\n\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n        return super.approve(spender, value);\n    }\n\n    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool) {\n        return super.increaseAllowance(spender, addedValue);\n    }\n\n    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool) {\n        return super.decreaseAllowance(spender, subtractedValue);\n    }\n}\n\n/**\n * @dev Extension of `ERC20` that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\ncontract ERC20Burnable is ERC20 {\n    /**\n     * @dev Destoys `amount` tokens from the caller.\n     *\n     * See `ERC20._burn`.\n     */\n    function burn(uint256 amount) public {\n        _burn(msg.sender, amount);\n    }\n\n    /**\n     * @dev See `ERC20._burnFrom`.\n     */\n    function burnFrom(address account, uint256 amount) public {\n        _burnFrom(account, amount);\n    }\n}\n\ncontract RenToken is Ownable, ERC20Detailed, ERC20Pausable, ERC20Burnable {\n\n    string private constant _name = \"Republic Token\";\n    string private constant _symbol = \"REN\";\n    uint8 private constant _decimals = 18;\n\n    uint256 public constant INITIAL_SUPPLY = 1000000000 * 10**uint256(_decimals);\n\n    /// @notice The RenToken Constructor.\n    constructor() ERC20Burnable() ERC20Pausable() ERC20Detailed(_name, _symbol, _decimals) public {\n        _mint(msg.sender, INITIAL_SUPPLY);\n    }\n\n    function transferTokens(address beneficiary, uint256 amount) public onlyOwner returns (bool) {\n        // Note: The deployed version has no revert reason\n        /* solium-disable-next-line error-reason */\n        require(amount > 0);\n\n        _transfer(msg.sender, beneficiary, amount);\n        emit Transfer(msg.sender, beneficiary, amount);\n\n        return true;\n    }\n}\n\n/// @notice DarknodeSlasher will become a voting system for darknodes to\n/// deregister other misbehaving darknodes.\n/// Right now, it is a placeholder.\ncontract DarknodeSlasher is Ownable {\n\n    DarknodeRegistry public darknodeRegistry;\n\n    constructor(DarknodeRegistry _darknodeRegistry) public {\n        darknodeRegistry = _darknodeRegistry;\n    }\n\n    function slash(address _prover, address _challenger1, address _challenger2)\n        external\n        onlyOwner\n    {\n        darknodeRegistry.slash(_prover, _challenger1, _challenger2);\n    }\n}\n\n/**\n * @notice LinkedList is a library for a circular double linked list.\n */\nlibrary LinkedList {\n\n    /*\n    * @notice A permanent NULL node (0x0) in the circular double linked list.\n    * NULL.next is the head, and NULL.previous is the tail.\n    */\n    address public constant NULL = address(0);\n\n    /**\n    * @notice A node points to the node before it, and the node after it. If\n    * node.previous = NULL, then the node is the head of the list. If\n    * node.next = NULL, then the node is the tail of the list.\n    */\n    struct Node {\n        bool inList;\n        address previous;\n        address next;\n    }\n\n    /**\n    * @notice LinkedList uses a mapping from address to nodes. Each address\n    * uniquely identifies a node, and in this way they are used like pointers.\n    */\n    struct List {\n        mapping (address => Node) list;\n    }\n\n    /**\n    * @notice Insert a new node before an existing node.\n    *\n    * @param self The list being used.\n    * @param target The existing node in the list.\n    * @param newNode The next node to insert before the target.\n    */\n    function insertBefore(List storage self, address target, address newNode) internal {\n        require(!isInList(self, newNode), \"already in list\");\n        require(isInList(self, target) || target == NULL, \"not in list\");\n\n        // It is expected that this value is sometimes NULL.\n        address prev = self.list[target].previous;\n\n        self.list[newNode].next = target;\n        self.list[newNode].previous = prev;\n        self.list[target].previous = newNode;\n        self.list[prev].next = newNode;\n\n        self.list[newNode].inList = true;\n    }\n\n    /**\n    * @notice Insert a new node after an existing node.\n    *\n    * @param self The list being used.\n    * @param target The existing node in the list.\n    * @param newNode The next node to insert after the target.\n    */\n    function insertAfter(List storage self, address target, address newNode) internal {\n        require(!isInList(self, newNode), \"already in list\");\n        require(isInList(self, target) || target == NULL, \"not in list\");\n\n        // It is expected that this value is sometimes NULL.\n        address n = self.list[target].next;\n\n        self.list[newNode].previous = target;\n        self.list[newNode].next = n;\n        self.list[target].next = newNode;\n        self.list[n].previous = newNode;\n\n        self.list[newNode].inList = true;\n    }\n\n    /**\n    * @notice Remove a node from the list, and fix the previous and next\n    * pointers that are pointing to the removed node. Removing anode that is not\n    * in the list will do nothing.\n    *\n    * @param self The list being using.\n    * @param node The node in the list to be removed.\n    */\n    function remove(List storage self, address node) internal {\n        require(isInList(self, node), \"not in list\");\n        if (node == NULL) {\n            return;\n        }\n        address p = self.list[node].previous;\n        address n = self.list[node].next;\n\n        self.list[p].next = n;\n        self.list[n].previous = p;\n\n        // Deleting the node should set this value to false, but we set it here for\n        // explicitness.\n        self.list[node].inList = false;\n        delete self.list[node];\n    }\n\n    /**\n    * @notice Insert a node at the beginning of the list.\n    *\n    * @param self The list being used.\n    * @param node The node to insert at the beginning of the list.\n    */\n    function prepend(List storage self, address node) internal {\n        // isInList(node) is checked in insertBefore\n\n        insertBefore(self, begin(self), node);\n    }\n\n    /**\n    * @notice Insert a node at the end of the list.\n    *\n    * @param self The list being used.\n    * @param node The node to insert at the end of the list.\n    */\n    function append(List storage self, address node) internal {\n        // isInList(node) is checked in insertBefore\n\n        insertAfter(self, end(self), node);\n    }\n\n    function swap(List storage self, address left, address right) internal {\n        // isInList(left) and isInList(right) are checked in remove\n\n        address previousRight = self.list[right].previous;\n        remove(self, right);\n        insertAfter(self, left, right);\n        remove(self, left);\n        insertAfter(self, previousRight, left);\n    }\n\n    function isInList(List storage self, address node) internal view returns (bool) {\n        return self.list[node].inList;\n    }\n\n    /**\n    * @notice Get the node at the beginning of a double linked list.\n    *\n    * @param self The list being used.\n    *\n    * @return A address identifying the node at the beginning of the double\n    * linked list.\n    */\n    function begin(List storage self) internal view returns (address) {\n        return self.list[NULL].next;\n    }\n\n    /**\n    * @notice Get the node at the end of a double linked list.\n    *\n    * @param self The list being used.\n    *\n    * @return A address identifying the node at the end of the double linked\n    * list.\n    */\n    function end(List storage self) internal view returns (address) {\n        return self.list[NULL].previous;\n    }\n\n    function next(List storage self, address node) internal view returns (address) {\n        require(isInList(self, node), \"not in list\");\n        return self.list[node].next;\n    }\n\n    function previous(List storage self, address node) internal view returns (address) {\n        require(isInList(self, node), \"not in list\");\n        return self.list[node].previous;\n    }\n\n}\n\n/// @notice This contract stores data and funds for the DarknodeRegistry\n/// contract. The data / fund logic and storage have been separated to improve\n/// upgradability.\ncontract DarknodeRegistryStore is Claimable {\n    using SafeMath for uint256;\n\n    string public VERSION; // Passed in as a constructor parameter.\n\n    /// @notice Darknodes are stored in the darknode struct. The owner is the\n    /// address that registered the darknode, the bond is the amount of REN that\n    /// was transferred during registration, and the public key is the\n    /// encryption key that should be used when sending sensitive information to\n    /// the darknode.\n    struct Darknode {\n        // The owner of a Darknode is the address that called the register\n        // function. The owner is the only address that is allowed to\n        // deregister the Darknode, unless the Darknode is slashed for\n        // malicious behavior.\n        address payable owner;\n\n        // The bond is the amount of REN submitted as a bond by the Darknode.\n        // This amount is reduced when the Darknode is slashed for malicious\n        // behavior.\n        uint256 bond;\n\n        // The block number at which the Darknode is considered registered.\n        uint256 registeredAt;\n\n        // The block number at which the Darknode is considered deregistered.\n        uint256 deregisteredAt;\n\n        // The public key used by this Darknode for encrypting sensitive data\n        // off chain. It is assumed that the Darknode has access to the\n        // respective private key, and that there is an agreement on the format\n        // of the public key.\n        bytes publicKey;\n    }\n\n    /// Registry data.\n    mapping(address => Darknode) private darknodeRegistry;\n    LinkedList.List private darknodes;\n\n    // RenToken.\n    RenToken public ren;\n\n    /// @notice The contract constructor.\n    ///\n    /// @param _VERSION A string defining the contract version.\n    /// @param _ren The address of the RenToken contract.\n    constructor(\n        string memory _VERSION,\n        RenToken _ren\n    ) public {\n        VERSION = _VERSION;\n        ren = _ren;\n    }\n\n    /// @notice Instantiates a darknode and appends it to the darknodes\n    /// linked-list.\n    ///\n    /// @param _darknodeID The darknode's ID.\n    /// @param _darknodeOwner The darknode's owner's address\n    /// @param _bond The darknode's bond value\n    /// @param _publicKey The darknode's public key\n    /// @param _registeredAt The time stamp when the darknode is registered.\n    /// @param _deregisteredAt The time stamp when the darknode is deregistered.\n    function appendDarknode(\n        address _darknodeID,\n        address payable _darknodeOwner,\n        uint256 _bond,\n        bytes calldata _publicKey,\n        uint256 _registeredAt,\n        uint256 _deregisteredAt\n    ) external onlyOwner {\n        Darknode memory darknode = Darknode({\n            owner: _darknodeOwner,\n            bond: _bond,\n            publicKey: _publicKey,\n            registeredAt: _registeredAt,\n            deregisteredAt: _deregisteredAt\n        });\n        darknodeRegistry[_darknodeID] = darknode;\n        LinkedList.append(darknodes, _darknodeID);\n    }\n\n    /// @notice Returns the address of the first darknode in the store\n    function begin() external view onlyOwner returns(address) {\n        return LinkedList.begin(darknodes);\n    }\n\n    /// @notice Returns the address of the next darknode in the store after the\n    /// given address.\n    function next(address darknodeID) external view onlyOwner returns(address) {\n        return LinkedList.next(darknodes, darknodeID);\n    }\n\n    /// @notice Removes a darknode from the store and transfers its bond to the\n    /// owner of this contract.\n    function removeDarknode(address darknodeID) external onlyOwner {\n        uint256 bond = darknodeRegistry[darknodeID].bond;\n        delete darknodeRegistry[darknodeID];\n        LinkedList.remove(darknodes, darknodeID);\n        require(ren.transfer(owner(), bond), \"bond transfer failed\");\n    }\n\n    /// @notice Updates the bond of a darknode. The new bond must be smaller\n    /// than the previous bond of the darknode.\n    function updateDarknodeBond(address darknodeID, uint256 decreasedBond) external onlyOwner {\n        uint256 previousBond = darknodeRegistry[darknodeID].bond;\n        require(decreasedBond < previousBond, \"bond not decreased\");\n        darknodeRegistry[darknodeID].bond = decreasedBond;\n        require(ren.transfer(owner(), previousBond.sub(decreasedBond)), \"bond transfer failed\");\n    }\n\n    /// @notice Updates the deregistration timestamp of a darknode.\n    function updateDarknodeDeregisteredAt(address darknodeID, uint256 deregisteredAt) external onlyOwner {\n        darknodeRegistry[darknodeID].deregisteredAt = deregisteredAt;\n    }\n\n    /// @notice Returns the owner of a given darknode.\n    function darknodeOwner(address darknodeID) external view onlyOwner returns (address payable) {\n        return darknodeRegistry[darknodeID].owner;\n    }\n\n    /// @notice Returns the bond of a given darknode.\n    function darknodeBond(address darknodeID) external view onlyOwner returns (uint256) {\n        return darknodeRegistry[darknodeID].bond;\n    }\n\n    /// @notice Returns the registration time of a given darknode.\n    function darknodeRegisteredAt(address darknodeID) external view onlyOwner returns (uint256) {\n        return darknodeRegistry[darknodeID].registeredAt;\n    }\n\n    /// @notice Returns the deregistration time of a given darknode.\n    function darknodeDeregisteredAt(address darknodeID) external view onlyOwner returns (uint256) {\n        return darknodeRegistry[darknodeID].deregisteredAt;\n    }\n\n    /// @notice Returns the encryption public key of a given darknode.\n    function darknodePublicKey(address darknodeID) external view onlyOwner returns (bytes memory) {\n        return darknodeRegistry[darknodeID].publicKey;\n    }\n}\n\n/// @notice DarknodeRegistry is responsible for the registration and\n/// deregistration of Darknodes.\ncontract DarknodeRegistry is Ownable {\n    using SafeMath for uint256;\n\n    string public VERSION; // Passed in as a constructor parameter.\n\n    /// @notice Darknode pods are shuffled after a fixed number of blocks.\n    /// An Epoch stores an epoch hash used as an (insecure) RNG seed, and the\n    /// blocknumber which restricts when the next epoch can be called.\n    struct Epoch {\n        uint256 epochhash;\n        uint256 blocknumber;\n    }\n\n    uint256 public numDarknodes;\n    uint256 public numDarknodesNextEpoch;\n    uint256 public numDarknodesPreviousEpoch;\n\n    /// Variables used to parameterize behavior.\n    uint256 public minimumBond;\n    uint256 public minimumPodSize;\n    uint256 public minimumEpochInterval;\n\n    /// When one of the above variables is modified, it is only updated when the\n    /// next epoch is called. These variables store the values for the next epoch.\n    uint256 public nextMinimumBond;\n    uint256 public nextMinimumPodSize;\n    uint256 public nextMinimumEpochInterval;\n\n    /// The current and previous epoch\n    Epoch public currentEpoch;\n    Epoch public previousEpoch;\n\n    /// Republic ERC20 token contract used to transfer bonds.\n    RenToken public ren;\n\n    /// Darknode Registry Store is the storage contract for darknodes.\n    DarknodeRegistryStore public store;\n\n    /// Darknode Slasher allows darknodes to vote on bond slashing.\n    DarknodeSlasher public slasher;\n    DarknodeSlasher public nextSlasher;\n\n    /// @notice Emitted when a darknode is registered.\n    /// @param _darknodeID The darknode ID that was registered.\n    /// @param _bond The amount of REN that was transferred as bond.\n    event LogDarknodeRegistered(address indexed _darknodeID, uint256 _bond);\n\n    /// @notice Emitted when a darknode is deregistered.\n    /// @param _darknodeID The darknode ID that was deregistered.\n    event LogDarknodeDeregistered(address indexed _darknodeID);\n\n    /// @notice Emitted when a refund has been made.\n    /// @param _owner The address that was refunded.\n    /// @param _amount The amount of REN that was refunded.\n    event LogDarknodeOwnerRefunded(address indexed _owner, uint256 _amount);\n\n    /// @notice Emitted when a new epoch has begun.\n    event LogNewEpoch(uint256 indexed epochhash);\n\n    /// @notice Emitted when a constructor parameter has been updated.\n    event LogMinimumBondUpdated(uint256 previousMinimumBond, uint256 nextMinimumBond);\n    event LogMinimumPodSizeUpdated(uint256 previousMinimumPodSize, uint256 nextMinimumPodSize);\n    event LogMinimumEpochIntervalUpdated(uint256 previousMinimumEpochInterval, uint256 nextMinimumEpochInterval);\n    event LogSlasherUpdated(address previousSlasher, address nextSlasher);\n\n    /// @notice Restrict a function to the owner that registered the darknode.\n    modifier onlyDarknodeOwner(address _darknodeID) {\n        require(store.darknodeOwner(_darknodeID) == msg.sender, \"must be darknode owner\");\n        _;\n    }\n\n    /// @notice Restrict a function to unregistered darknodes.\n    modifier onlyRefunded(address _darknodeID) {\n        require(isRefunded(_darknodeID), \"must be refunded or never registered\");\n        _;\n    }\n\n    /// @notice Restrict a function to refundable darknodes.\n    modifier onlyRefundable(address _darknodeID) {\n        require(isRefundable(_darknodeID), \"must be deregistered for at least one epoch\");\n        _;\n    }\n\n    /// @notice Restrict a function to registered nodes without a pending\n    /// deregistration.\n    modifier onlyDeregisterable(address _darknodeID) {\n        require(isDeregisterable(_darknodeID), \"must be deregisterable\");\n        _;\n    }\n\n    /// @notice Restrict a function to the Slasher contract.\n    modifier onlySlasher() {\n        require(address(slasher) == msg.sender, \"must be slasher\");\n        _;\n    }\n\n    /// @notice The contract constructor.\n    ///\n    /// @param _VERSION A string defining the contract version.\n    /// @param _renAddress The address of the RenToken contract.\n    /// @param _storeAddress The address of the DarknodeRegistryStore contract.\n    /// @param _minimumBond The minimum bond amount that can be submitted by a\n    ///        Darknode.\n    /// @param _minimumPodSize The minimum size of a Darknode pod.\n    /// @param _minimumEpochInterval The minimum number of blocks between\n    ///        epochs.\n    constructor(\n        string memory _VERSION,\n        RenToken _renAddress,\n        DarknodeRegistryStore _storeAddress,\n        uint256 _minimumBond,\n        uint256 _minimumPodSize,\n        uint256 _minimumEpochInterval\n    ) public {\n        VERSION = _VERSION;\n\n        store = _storeAddress;\n        ren = _renAddress;\n\n        minimumBond = _minimumBond;\n        nextMinimumBond = minimumBond;\n\n        minimumPodSize = _minimumPodSize;\n        nextMinimumPodSize = minimumPodSize;\n\n        minimumEpochInterval = _minimumEpochInterval;\n        nextMinimumEpochInterval = minimumEpochInterval;\n\n        currentEpoch = Epoch({\n            epochhash: uint256(blockhash(block.number - 1)),\n            blocknumber: block.number\n        });\n        numDarknodes = 0;\n        numDarknodesNextEpoch = 0;\n        numDarknodesPreviousEpoch = 0;\n    }\n\n    /// @notice Register a darknode and transfer the bond to this contract.\n    /// Before registering, the bond transfer must be approved in the REN\n    /// contract. The caller must provide a public encryption key for the\n    /// darknode. The darknode will remain pending registration until the next\n    /// epoch. Only after this period can the darknode be deregistered. The\n    /// caller of this method will be stored as the owner of the darknode.\n    ///\n    /// @param _darknodeID The darknode ID that will be registered.\n    /// @param _publicKey The public key of the darknode. It is stored to allow\n    ///        other darknodes and traders to encrypt messages to the trader.\n    function register(address _darknodeID, bytes calldata _publicKey) external onlyRefunded(_darknodeID) {\n        // Use the current minimum bond as the darknode's bond.\n        uint256 bond = minimumBond;\n\n        // Transfer bond to store\n        require(ren.transferFrom(msg.sender, address(store), bond), \"bond transfer failed\");\n\n        // Flag this darknode for registration\n        store.appendDarknode(\n            _darknodeID,\n            msg.sender,\n            bond,\n            _publicKey,\n            currentEpoch.blocknumber.add(minimumEpochInterval),\n            0\n        );\n\n        numDarknodesNextEpoch = numDarknodesNextEpoch.add(1);\n\n        // Emit an event.\n        emit LogDarknodeRegistered(_darknodeID, bond);\n    }\n\n    /// @notice Deregister a darknode. The darknode will not be deregistered\n    /// until the end of the epoch. After another epoch, the bond can be\n    /// refunded by calling the refund method.\n    /// @param _darknodeID The darknode ID that will be deregistered. The caller\n    ///        of this method store.darknodeRegisteredAt(_darknodeID) must be\n    //         the owner of this darknode.\n    function deregister(address _darknodeID) external onlyDeregisterable(_darknodeID) onlyDarknodeOwner(_darknodeID) {\n        deregisterDarknode(_darknodeID);\n    }\n\n    /// @notice Progress the epoch if it is possible to do so. This captures\n    /// the current timestamp and current blockhash and overrides the current\n    /// epoch.\n    function epoch() external {\n        if (previousEpoch.blocknumber == 0) {\n            // The first epoch must be called by the owner of the contract\n            require(msg.sender == owner(), \"not authorized (first epochs)\");\n        }\n\n        // Require that the epoch interval has passed\n        require(block.number >= currentEpoch.blocknumber.add(minimumEpochInterval), \"epoch interval has not passed\");\n        uint256 epochhash = uint256(blockhash(block.number - 1));\n\n        // Update the epoch hash and timestamp\n        previousEpoch = currentEpoch;\n        currentEpoch = Epoch({\n            epochhash: epochhash,\n            blocknumber: block.number\n        });\n\n        // Update the registry information\n        numDarknodesPreviousEpoch = numDarknodes;\n        numDarknodes = numDarknodesNextEpoch;\n\n        // If any update functions have been called, update the values now\n        if (nextMinimumBond != minimumBond) {\n            minimumBond = nextMinimumBond;\n            emit LogMinimumBondUpdated(minimumBond, nextMinimumBond);\n        }\n        if (nextMinimumPodSize != minimumPodSize) {\n            minimumPodSize = nextMinimumPodSize;\n            emit LogMinimumPodSizeUpdated(minimumPodSize, nextMinimumPodSize);\n        }\n        if (nextMinimumEpochInterval != minimumEpochInterval) {\n            minimumEpochInterval = nextMinimumEpochInterval;\n            emit LogMinimumEpochIntervalUpdated(minimumEpochInterval, nextMinimumEpochInterval);\n        }\n        if (nextSlasher != slasher) {\n            slasher = nextSlasher;\n            emit LogSlasherUpdated(address(slasher), address(nextSlasher));\n        }\n\n        // Emit an event\n        emit LogNewEpoch(epochhash);\n    }\n\n    /// @notice Allows the contract owner to initiate an ownership transfer of\n    /// the DarknodeRegistryStore. \n    /// @param _newOwner The address to transfer the ownership to.\n    function transferStoreOwnership(address _newOwner) external onlyOwner {\n        store.transferOwnership(_newOwner);\n    }\n\n    /// @notice Claims ownership of the store passed in to the constructor.\n    /// `transferStoreOwnership` must have previously been called when\n    /// transferring from another Darknode Registry.\n    function claimStoreOwnership() external onlyOwner {\n        store.claimOwnership();\n    }\n\n    /// @notice Allows the contract owner to update the minimum bond.\n    /// @param _nextMinimumBond The minimum bond amount that can be submitted by\n    ///        a darknode.\n    function updateMinimumBond(uint256 _nextMinimumBond) external onlyOwner {\n        // Will be updated next epoch\n        nextMinimumBond = _nextMinimumBond;\n    }\n\n    /// @notice Allows the contract owner to update the minimum pod size.\n    /// @param _nextMinimumPodSize The minimum size of a pod.\n    function updateMinimumPodSize(uint256 _nextMinimumPodSize) external onlyOwner {\n        // Will be updated next epoch\n        nextMinimumPodSize = _nextMinimumPodSize;\n    }\n\n    /// @notice Allows the contract owner to update the minimum epoch interval.\n    /// @param _nextMinimumEpochInterval The minimum number of blocks between epochs.\n    function updateMinimumEpochInterval(uint256 _nextMinimumEpochInterval) external onlyOwner {\n        // Will be updated next epoch\n        nextMinimumEpochInterval = _nextMinimumEpochInterval;\n    }\n\n    /// @notice Allow the contract owner to update the DarknodeSlasher contract\n    /// address.\n    /// @param _slasher The new slasher address.\n    function updateSlasher(DarknodeSlasher _slasher) external onlyOwner {\n        require(address(_slasher) != address(0), \"invalid slasher address\");\n        nextSlasher = _slasher;\n    }\n\n    /// @notice Allow the DarknodeSlasher contract to slash half of a darknode's\n    /// bond and deregister it. The bond is distributed as follows:\n    ///   1/2 is kept by the guilty prover\n    ///   1/8 is rewarded to the first challenger\n    ///   1/8 is rewarded to the second challenger\n    ///   1/4 becomes unassigned\n    /// @param _prover The guilty prover whose bond is being slashed\n    /// @param _challenger1 The first of the two darknodes who submitted the challenge\n    /// @param _challenger2 The second of the two darknodes who submitted the challenge\n    function slash(address _prover, address _challenger1, address _challenger2)\n        external\n        onlySlasher\n    {\n        uint256 penalty = store.darknodeBond(_prover) / 2;\n        uint256 reward = penalty / 4;\n\n        // Slash the bond of the failed prover in half\n        store.updateDarknodeBond(_prover, penalty);\n\n        // If the darknode has not been deregistered then deregister it\n        if (isDeregisterable(_prover)) {\n            deregisterDarknode(_prover);\n        }\n\n        // Reward the challengers with less than the penalty so that it is not\n        // worth challenging yourself\n        require(ren.transfer(store.darknodeOwner(_challenger1), reward), \"reward transfer failed\");\n        require(ren.transfer(store.darknodeOwner(_challenger2), reward), \"reward transfer failed\");\n    }\n\n    /// @notice Refund the bond of a deregistered darknode. This will make the\n    /// darknode available for registration again. Anyone can call this function\n    /// but the bond will always be refunded to the darknode owner.\n    ///\n    /// @param _darknodeID The darknode ID that will be refunded. The caller\n    ///        of this method must be the owner of this darknode.\n    function refund(address _darknodeID) external onlyRefundable(_darknodeID) {\n        address darknodeOwner = store.darknodeOwner(_darknodeID);\n\n        // Remember the bond amount\n        uint256 amount = store.darknodeBond(_darknodeID);\n\n        // Erase the darknode from the registry\n        store.removeDarknode(_darknodeID);\n\n        // Refund the owner by transferring REN\n        require(ren.transfer(darknodeOwner, amount), \"bond transfer failed\");\n\n        // Emit an event.\n        emit LogDarknodeOwnerRefunded(darknodeOwner, amount);\n    }\n\n    /// @notice Retrieves the address of the account that registered a darknode.\n    /// @param _darknodeID The ID of the darknode to retrieve the owner for.\n    function getDarknodeOwner(address _darknodeID) external view returns (address payable) {\n        return store.darknodeOwner(_darknodeID);\n    }\n\n    /// @notice Retrieves the bond amount of a darknode in 10^-18 REN.\n    /// @param _darknodeID The ID of the darknode to retrieve the bond for.\n    function getDarknodeBond(address _darknodeID) external view returns (uint256) {\n        return store.darknodeBond(_darknodeID);\n    }\n\n    /// @notice Retrieves the encryption public key of the darknode.\n    /// @param _darknodeID The ID of the darknode to retrieve the public key for.\n    function getDarknodePublicKey(address _darknodeID) external view returns (bytes memory) {\n        return store.darknodePublicKey(_darknodeID);\n    }\n\n    /// @notice Retrieves a list of darknodes which are registered for the\n    /// current epoch.\n    /// @param _start A darknode ID used as an offset for the list. If _start is\n    ///        0x0, the first dark node will be used. _start won't be\n    ///        included it is not registered for the epoch.\n    /// @param _count The number of darknodes to retrieve starting from _start.\n    ///        If _count is 0, all of the darknodes from _start are\n    ///        retrieved. If _count is more than the remaining number of\n    ///        registered darknodes, the rest of the list will contain\n    ///        0x0s.\n    function getDarknodes(address _start, uint256 _count) external view returns (address[] memory) {\n        uint256 count = _count;\n        if (count == 0) {\n            count = numDarknodes;\n        }\n        return getDarknodesFromEpochs(_start, count, false);\n    }\n\n    /// @notice Retrieves a list of darknodes which were registered for the\n    /// previous epoch. See `getDarknodes` for the parameter documentation.\n    function getPreviousDarknodes(address _start, uint256 _count) external view returns (address[] memory) {\n        uint256 count = _count;\n        if (count == 0) {\n            count = numDarknodesPreviousEpoch;\n        }\n        return getDarknodesFromEpochs(_start, count, true);\n    }\n\n    /// @notice Returns whether a darknode is scheduled to become registered\n    /// at next epoch.\n    /// @param _darknodeID The ID of the darknode to return\n    function isPendingRegistration(address _darknodeID) external view returns (bool) {\n        uint256 registeredAt = store.darknodeRegisteredAt(_darknodeID);\n        return registeredAt != 0 && registeredAt > currentEpoch.blocknumber;\n    }\n\n    /// @notice Returns if a darknode is in the pending deregistered state. In\n    /// this state a darknode is still considered registered.\n    function isPendingDeregistration(address _darknodeID) external view returns (bool) {\n        uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);\n        return deregisteredAt != 0 && deregisteredAt > currentEpoch.blocknumber;\n    }\n\n    /// @notice Returns if a darknode is in the deregistered state.\n    function isDeregistered(address _darknodeID) public view returns (bool) {\n        uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);\n        return deregisteredAt != 0 && deregisteredAt <= currentEpoch.blocknumber;\n    }\n\n    /// @notice Returns if a darknode can be deregistered. This is true if the\n    /// darknodes is in the registered state and has not attempted to\n    /// deregister yet.\n    function isDeregisterable(address _darknodeID) public view returns (bool) {\n        uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);\n        // The Darknode is currently in the registered state and has not been\n        // transitioned to the pending deregistration, or deregistered, state\n        return isRegistered(_darknodeID) && deregisteredAt == 0;\n    }\n\n    /// @notice Returns if a darknode is in the refunded state. This is true\n    /// for darknodes that have never been registered, or darknodes that have\n    /// been deregistered and refunded.\n    function isRefunded(address _darknodeID) public view returns (bool) {\n        uint256 registeredAt = store.darknodeRegisteredAt(_darknodeID);\n        uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);\n        return registeredAt == 0 && deregisteredAt == 0;\n    }\n\n    /// @notice Returns if a darknode is refundable. This is true for darknodes\n    /// that have been in the deregistered state for one full epoch.\n    function isRefundable(address _darknodeID) public view returns (bool) {\n        return isDeregistered(_darknodeID) && store.darknodeDeregisteredAt(_darknodeID) <= previousEpoch.blocknumber;\n    }\n\n    /// @notice Returns if a darknode is in the registered state.\n    function isRegistered(address _darknodeID) public view returns (bool) {\n        return isRegisteredInEpoch(_darknodeID, currentEpoch);\n    }\n\n    /// @notice Returns if a darknode was in the registered state last epoch.\n    function isRegisteredInPreviousEpoch(address _darknodeID) public view returns (bool) {\n        return isRegisteredInEpoch(_darknodeID, previousEpoch);\n    }\n\n    /// @notice Returns if a darknode was in the registered state for a given\n    /// epoch.\n    /// @param _darknodeID The ID of the darknode\n    /// @param _epoch One of currentEpoch, previousEpoch\n    function isRegisteredInEpoch(address _darknodeID, Epoch memory _epoch) private view returns (bool) {\n        uint256 registeredAt = store.darknodeRegisteredAt(_darknodeID);\n        uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);\n        bool registered = registeredAt != 0 && registeredAt <= _epoch.blocknumber;\n        bool notDeregistered = deregisteredAt == 0 || deregisteredAt > _epoch.blocknumber;\n        // The Darknode has been registered and has not yet been deregistered,\n        // although it might be pending deregistration\n        return registered && notDeregistered;\n    }\n\n    /// @notice Returns a list of darknodes registered for either the current\n    /// or the previous epoch. See `getDarknodes` for documentation on the\n    /// parameters `_start` and `_count`.\n    /// @param _usePreviousEpoch If true, use the previous epoch, otherwise use\n    ///        the current epoch.\n    function getDarknodesFromEpochs(address _start, uint256 _count, bool _usePreviousEpoch) private view returns (address[] memory) {\n        uint256 count = _count;\n        if (count == 0) {\n            count = numDarknodes;\n        }\n\n        address[] memory nodes = new address[](count);\n\n        // Begin with the first node in the list\n        uint256 n = 0;\n        address next = _start;\n        if (next == address(0)) {\n            next = store.begin();\n        }\n\n        // Iterate until all registered Darknodes have been collected\n        while (n < count) {\n            if (next == address(0)) {\n                break;\n            }\n            // Only include Darknodes that are currently registered\n            bool includeNext;\n            if (_usePreviousEpoch) {\n                includeNext = isRegisteredInPreviousEpoch(next);\n            } else {\n                includeNext = isRegistered(next);\n            }\n            if (!includeNext) {\n                next = store.next(next);\n                continue;\n            }\n            nodes[n] = next;\n            next = store.next(next);\n            n += 1;\n        }\n        return nodes;\n    }\n\n    /// Private function called by `deregister` and `slash`\n    function deregisterDarknode(address _darknodeID) private {\n        // Flag the darknode for deregistration\n        store.updateDarknodeDeregisteredAt(_darknodeID, currentEpoch.blocknumber.add(minimumEpochInterval));\n        numDarknodesNextEpoch = numDarknodesNextEpoch.sub(1);\n\n        // Emit an event\n        emit LogDarknodeDeregistered(_darknodeID);\n    }\n}\n\n/// @notice DarknodePaymentStore is responsible for tracking black/whitelisted\n///         darknodes as well as the balances which have been allocated to the\n///         darknodes. It is also responsible for holding the tokens to be paid\n///         out to darknodes.\ncontract DarknodePaymentStore is Claimable {\n    using SafeMath for uint256;\n    using CompatibleERC20Functions for ERC20;\n\n    string public VERSION; // Passed in as a constructor parameter.\n\n    /// @notice The special address for Ether.\n    address constant public ETHEREUM = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    /// @notice The size of the whitelist\n    uint256 public darknodeWhitelistLength;\n\n    /// @notice Mapping of darknode -> token -> balance\n    mapping(address => mapping(address => uint256)) public darknodeBalances;\n\n    /// @notice Mapping of token -> lockedAmount\n    mapping(address => uint256) public lockedBalances;\n\n    /// @notice mapping of darknode -> blacklistTimestamp\n    mapping(address => uint256) public darknodeBlacklist;\n\n    /// @notice mapping of darknode -> whitelistTimestamp\n    mapping(address => uint256) public darknodeWhitelist;\n\n    /// @notice The contract constructor.\n    ///\n    /// @param _VERSION A string defining the contract version.\n    constructor(\n        string memory _VERSION\n    ) public {\n        VERSION = _VERSION;\n    }\n\n    /// @notice Allow direct payments to be made to the DarknodePaymentStore.\n    function () external payable {\n    }\n\n    /// @notice Checks to see if a darknode is blacklisted\n    ///\n    /// @param _darknode The address of the darknode\n    /// @return true if the darknode is blacklisted\n    function isBlacklisted(address _darknode) public view returns (bool) {\n        return darknodeBlacklist[_darknode] != 0;\n    }\n\n    /// @notice Checks to see if a darknode is whitelisted\n    ///\n    /// @param _darknode The address of the darknode\n    /// @return true if the darknode is whitelisted\n    function isWhitelisted(address _darknode) public view returns (bool) {\n        return darknodeWhitelist[_darknode] != 0;\n    }\n\n    /// @notice Get the total balance of the contract for a particular token\n    ///\n    /// @param _token The token to check balance of\n    /// @return The total balance of the contract\n    function totalBalance(address _token) public view returns (uint256) {\n        if (_token == ETHEREUM) {\n            return address(this).balance;\n        } else {\n            return ERC20(_token).balanceOf(address(this));\n        }\n    }\n\n    /// @notice Get the available balance of the contract for a particular token\n    ///         This is the free amount which has not yet been allocated to\n    ///         darknodes.\n    ///\n    /// @param _token The token to check balance of\n    /// @return The available balance of the contract\n    function availableBalance(address _token) public view returns (uint256) {\n        return totalBalance(_token).sub(lockedBalances[_token]);\n    }\n\n    /// @notice Blacklists a darknode from participating in reward allocation.\n    ///         If the darknode is whitelisted, it is removed from the whitelist\n    ///         and the number of whitelisted nodes is decreased.\n    ///\n    /// @param _darknode The address of the darknode to blacklist\n    function blacklist(address _darknode) external onlyOwner {\n        require(!isBlacklisted(_darknode), \"darknode already blacklisted\");\n        darknodeBlacklist[_darknode] = block.timestamp;\n\n        // Unwhitelist if necessary\n        if (isWhitelisted(_darknode)) {\n            darknodeWhitelist[_darknode] = 0;\n            // Use SafeMath when subtracting to avoid underflows\n            darknodeWhitelistLength = darknodeWhitelistLength.sub(1);\n        }\n    }\n\n    /// @notice Whitelists a darknode allowing it to participate in reward\n    ///         allocation.\n    ///\n    /// @param _darknode The address of the darknode to whitelist\n    function whitelist(address _darknode) external onlyOwner {\n        require(!isBlacklisted(_darknode), \"darknode is blacklisted\");\n        require(!isWhitelisted(_darknode), \"darknode already whitelisted\");\n\n        darknodeWhitelist[_darknode] = block.timestamp;\n        darknodeWhitelistLength++;\n    }\n\n    /// @notice Increments the amount of funds allocated to a particular\n    ///         darknode.\n    ///\n    /// @param _darknode The address of the darknode to increase balance of\n    /// @param _token The token which the balance should be incremented\n    /// @param _amount The amount that the balance should be incremented by\n    function incrementDarknodeBalance(address _darknode, address _token, uint256 _amount) external onlyOwner {\n        require(_amount > 0, \"invalid amount\");\n        require(availableBalance(_token) >= _amount, \"insufficient contract balance\");\n\n        darknodeBalances[_darknode][_token] = darknodeBalances[_darknode][_token].add(_amount);\n        lockedBalances[_token] = lockedBalances[_token].add(_amount);\n    }\n\n    /// @notice Transfers an amount out of balance to a specified address\n    ///\n    /// @param _darknode The address of the darknode\n    /// @param _token Which token to transfer\n    /// @param _amount The amount to transfer\n    /// @param _recipient The address to withdraw it to\n    function transfer(address _darknode, address _token, uint256 _amount, address payable _recipient) external onlyOwner {\n        require(darknodeBalances[_darknode][_token] >= _amount, \"insufficient darknode balance\");\n        darknodeBalances[_darknode][_token] = darknodeBalances[_darknode][_token].sub(_amount);\n        lockedBalances[_token] = lockedBalances[_token].sub(_amount);\n\n        if (_token == ETHEREUM) {\n            _recipient.transfer(_amount);\n        } else {\n            ERC20(_token).safeTransfer(_recipient, _amount);\n        }\n    }\n\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"darknodeWhitelistLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_darknode\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"darknodeBlacklist\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"totalBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"darknodeBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"darknodeWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_darknode\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"availableBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_darknode\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"incrementDarknodeBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETHEREUM\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_darknode\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_darknode\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_darknode\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_VERSION\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"DarknodePaymentStore","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000106368616f736e65742d3236613466353700000000000000000000000000000000","Library":"","LicenseType":"","SwarmSource":"bzzr://ad5089c34d6c3c9787ddf6f5f10c3ef20d0d3c6a1e6661311fb00374e0ecccf9"}]}