{"status":"1","message":"OK","result":[{"SourceCode":"{\"ERC20.sol\":{\"content\":\"pragma solidity 0.5.8;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Standard ERC20 token\\r\\n *\\r\\n * @dev Implementation of the basic standard token.\\r\\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\\r\\n * Originally based on code by FirstBlood:\\r\\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\r\\n *\\r\\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\\r\\n * all accounts just by listening to said events. Note that this isn\\u0027t required by the specification, and other\\r\\n * compliant implementations may not do it.\\r\\n */\\r\\ncontract ERC20 is IERC20, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping (address =\\u003e uint256) internal _balances;\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) internal _allowed;\\r\\n    mapping (address =\\u003e uint256) internal _timeUpdates;\\r\\n    mapping (address =\\u003e uint256) internal _circulatingSupply;\\r\\n    mapping (address =\\u003e bool) private _isHolder;\\r\\n\\r\\n    address[] internal _holders;\\r\\n\\r\\n    uint256 internal _totalSupply;\\r\\n\\r\\n    /**\\r\\n     * @dev Total number of tokens in existence\\r\\n     */\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the balance of the specified address.\\r\\n     * @param owner The address to query the balance of.\\r\\n     * @return An uint256 representing the amount owned by the passed address.\\r\\n     */\\r\\n    function balanceOf(address owner) public view returns (uint256) {\\r\\n        return _balances[owner];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\r\\n     * @param owner address The address which owns the funds.\\r\\n     * @param spender address The address which will spend the funds.\\r\\n     * @return A uint256 specifying the amount of tokens still available for the spender.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view returns (uint256) {\\r\\n        return _allowed[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfer token for a specified address\\r\\n     * @param to The address to transfer to.\\r\\n     * @param value The amount to be transferred.\\r\\n     */\\r\\n    function transfer(address to, uint256 value) public returns (bool) {\\r\\n        _transfer(msg.sender, to, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\r\\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\\r\\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\r\\n     * race condition is to first reduce the spender\\u0027s allowance to 0 and set the desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     * @param spender The address which will spend the funds.\\r\\n     * @param value The amount of tokens to be spent.\\r\\n     */\\r\\n    function approve(address spender, uint256 value) public returns (bool) {\\r\\n        _approve(msg.sender, spender, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfer tokens from one address to another.\\r\\n     * Note that while this function emits an Approval event, this is not required as per the specification,\\r\\n     * and other compliant implementations may not emit the event.\\r\\n     * @param from address The address which you want to send tokens from\\r\\n     * @param to address The address which you want to transfer to\\r\\n     * @param value uint256 the amount of tokens to be transferred\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\\r\\n        _transfer(from, to, value);\\r\\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\\r\\n     * approve should be called when allowed_[_spender] == 0. To increment\\r\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\r\\n     * the first transaction is mined)\\r\\n     * From MonolithDAO Token.sol\\r\\n     * Emits an Approval event.\\r\\n     * @param spender The address which will spend the funds.\\r\\n     * @param addedValue The amount of tokens to increase the allowance by.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\r\\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\\r\\n     * approve should be called when allowed_[_spender] == 0. To decrement\\r\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\r\\n     * the first transaction is mined)\\r\\n     * From MonolithDAO Token.sol\\r\\n     * Emits an Approval event.\\r\\n     * @param spender The address which will spend the funds.\\r\\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\r\\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function getHolders() public view returns(address[] memory) {\\r\\n        return _holders;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfer token for a specified addresses\\r\\n     * @param from The address to transfer from.\\r\\n     * @param to The address to transfer to.\\r\\n     * @param value The amount to be transferred.\\r\\n     */\\r\\n    function _transfer(address from, address to, uint256 value) internal {\\r\\n        require(to != address(0), \\u0027to address can not be 0\\u0027);\\r\\n\\r\\n        _circulatingSupply[to] = _circulatingSupply[to].add(value);\\r\\n        _circulatingSupply[from] = _circulatingSupply[from].add(value);\\r\\n\\r\\n        _balances[from] = _balances[from].sub(value);\\r\\n        _balances[to] = _balances[to].add(value);\\r\\n\\r\\n        if(!_isHolder[to]) {\\r\\n            _isHolder[to] = true;\\r\\n           _holders.push(to);\\r\\n        }\\r\\n\\r\\n        emit Transfer(from, to, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function that mints an amount of the token and assigns it to\\r\\n     * an account. This encapsulates the modification of balances such that the\\r\\n     * proper events are emitted.\\r\\n     * @param account The account that will receive the created tokens.\\r\\n     * @param value The amount that will be created.\\r\\n     */\\r\\n    function _mint(address account, uint256 value) internal {\\r\\n        require(account != address(0), \\u0027destination address can not be 0\\u0027);\\r\\n\\r\\n        _totalSupply = _totalSupply.add(value);\\r\\n        _balances[account] = _balances[account].add(value);\\r\\n\\r\\n        if(!_isHolder[account]) {\\r\\n            _isHolder[account] = true;\\r\\n           _holders.push(account);\\r\\n        }\\r\\n\\r\\n        emit Transfer(address(0), account, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function that burns an amount of the token of a given\\r\\n     * account.\\r\\n     * @param account The account whose tokens will be burnt.\\r\\n     * @param value The amount that will be burnt.\\r\\n     */\\r\\n    function _burn(address account, uint256 value) internal {\\r\\n        require(account != address(0), \\u0027destination address can not be 0\\u0027);\\r\\n\\r\\n        _totalSupply = _totalSupply.sub(value);\\r\\n        _balances[account] = _balances[account].sub(value);\\r\\n        emit Transfer(account, address(0), value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve an address to spend another addresses\\u0027 tokens.\\r\\n     * @param owner The address that owns the tokens.\\r\\n     * @param spender The address that will spend the tokens.\\r\\n     * @param value The number of tokens that can be spent.\\r\\n     */\\r\\n    function _approve(address owner, address spender, uint256 value) internal {\\r\\n        require(spender != address(0), \\u0027spender can not be 0\\u0027);\\r\\n        require(owner != address(0), \\u0027owner can not be 0\\u0027);\\r\\n\\r\\n        _allowed[owner][spender] = value;\\r\\n        emit Approval(owner, spender, value);\\r\\n    }\\r\\n}\\r\\n\"},\"ERC20Whitelisted.sol\":{\"content\":\"pragma solidity 0.5.8;\\r\\n\\r\\nimport \\\"./ERC20.sol\\\";\\r\\n\\r\\ncontract ERC20Whitelisted is ERC20 {\\r\\n\\r\\n    mapping(address =\\u003e bool) internal _isWhitelisted;\\r\\n    mapping(address =\\u003e string) internal iso;\\r\\n\\r\\n    address[] internal whitelistedAddresses;\\r\\n\\r\\n    function isWhitelisted(address _account) public view returns(bool, string memory) {\\r\\n        return (_isWhitelisted[_account], iso[_account]);\\r\\n    }\\r\\n\\r\\n    function addWhitelisted(address _account, string memory _iso) public {\\r\\n        require(_isWhitelisted[_account] == false, \\u0027account already whitelisted\\u0027);\\r\\n        _isWhitelisted[_account] = true;\\r\\n        iso[_account] = _iso;\\r\\n\\r\\n        whitelistedAddresses.push(_account);\\r\\n    }\\r\\n\\r\\n    function removeWhitelisted(address _account) public {\\r\\n        _isWhitelisted[_account] = false;\\r\\n    }\\r\\n\\r\\n    function getWhitelistedAddresses() public view returns(address[] memory) {\\r\\n        return whitelistedAddresses;\\r\\n    }\\r\\n\\r\\n}\"},\"IERC20.sol\":{\"content\":\"pragma solidity 0.5.8;\\r\\n\\r\\n/**\\r\\n * @title ERC20 interface\\r\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\r\\n */\\r\\ninterface IERC20 {\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address who) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"},\"IRegulatorService.sol\":{\"content\":\"pragma solidity 0.5.8;\\r\\n\\r\\ninterface IRegulatorService {\\r\\n    function canMint(address to, string calldata iso, uint256 value) external view returns(bool);\\r\\n\\r\\n    function canTransfer(address from, string calldata isoFrom, address to, string calldata isoTo, uint256 value) external view returns(bool);\\r\\n\\r\\n    function canAddToWhitelist(address account, string calldata iso) external view returns(bool);\\r\\n\\r\\n    function canRemoveFromWhitelist(address account, string calldata iso) external view returns(bool);\\r\\n\\r\\n    function canRecoveryTokens(address from, address to) external view returns(bool);\\r\\n}\\r\\n\"},\"Ownable.sol\":{\"content\":\"pragma solidity 0.5.8;\\r\\n\\r\\n/**\\r\\n * @title Ownable\\r\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\r\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\r\\n */\\r\\ncontract Ownable {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\r\\n     * account.\\r\\n     */\\r\\n    constructor() internal {\\r\\n        _owner = msg.sender;\\r\\n        emit OwnershipTransferred(address(0), _owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return the address of the owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(isOwner(), \\\"Must be owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return true if `msg.sender` is the owner of the contract.\\r\\n     */\\r\\n    function isOwner() public view returns (bool) {\\r\\n        return msg.sender == _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows the current owner to relinquish control of the contract.\\r\\n     * @notice Renouncing to ownership will leave the contract without an owner.\\r\\n     * It will not be possible to call the functions with the `onlyOwner`\\r\\n     * modifier anymore.\\r\\n     */\\r\\n    function renounceOwnership() public onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\r\\n     * @param newOwner The address to transfer ownership to.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers control of the contract to a newOwner.\\r\\n     * @param newOwner The address to transfer ownership to.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal {\\r\\n        require(newOwner != address(0), \\\"Cannot transfer to zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\"},\"PermissionService.sol\":{\"content\":\"pragma solidity 0.5.8;\\r\\n\\r\\nimport \\\"./ERC20Whitelisted.sol\\\";\\r\\n\\r\\ncontract PermissionService is ERC20Whitelisted {\\r\\n\\r\\n    mapping (address =\\u003e bool) public mintablePermission;\\r\\n    mapping (address =\\u003e bool) public addWhitelistPermission;\\r\\n    mapping (address =\\u003e bool) public removeWhitelistPermission;\\r\\n    mapping (address =\\u003e bool) public replaceRegulatorServicePermission;\\r\\n    mapping (address =\\u003e bool) public editRightsPermission;\\r\\n    mapping (address =\\u003e bool) public recoveryTokensPermission;\\r\\n    mapping (address =\\u003e bool) public attributesPermission;\\r\\n    mapping (address =\\u003e bool) internal _isLocked;\\r\\n    mapping (address =\\u003e uint) internal _lockup;\\r\\n    mapping (address =\\u003e bool) internal _isAdded;\\r\\n\\r\\n    address[] internal addressesWithPermissions;\\r\\n\\r\\n    modifier onlyUnlocked() {\\r\\n        require(_isLocked[msg.sender] == false \\u0026\\u0026 _lockup[msg.sender] \\u003c block.timestamp);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyReplaceRegulatorServicePermission() {\\r\\n        require(replaceRegulatorServicePermission[msg.sender] || isOwner());\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyEditRightsPermission() {\\r\\n        require(editRightsPermission[msg.sender] || isOwner());\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyRemoveWhitelistPermission() {\\r\\n        require(removeWhitelistPermission[msg.sender] || recoveryTokensPermission[msg.sender] || isOwner());\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAddWhitelistPermission() {\\r\\n        require(addWhitelistPermission[msg.sender] || recoveryTokensPermission[msg.sender] || isOwner());\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyMintablePermission() {\\r\\n        require(mintablePermission[msg.sender] || recoveryTokensPermission[msg.sender] || isOwner());\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyRecoveryTokensPermission() {\\r\\n        require(recoveryTokensPermission[msg.sender] || isOwner());\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAttributesPermission() {\\r\\n        require(attributesPermission[msg.sender] || isOwner());\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function lockAddressFor(address account, uint time) public onlyEditRightsPermission {\\r\\n        require(time \\u003e block.timestamp);\\r\\n        _lockup[account] = time;\\r\\n    }\\r\\n\\r\\n    function lockAddress(address account) public onlyEditRightsPermission {\\r\\n        _isLocked[account] = true;\\r\\n    }\\r\\n\\r\\n    function unlockAddress(address account) public onlyEditRightsPermission {\\r\\n        _isLocked[account] = false;\\r\\n        _lockup[account] = 0;\\r\\n    }\\r\\n\\r\\n    function isLocked(address account) public view returns(bool) {\\r\\n        return _isLocked[account] || _lockup[account] \\u003e= block.timestamp;\\r\\n    }\\r\\n\\r\\n    function getTimeLockFor(address account) public view returns(uint) {\\r\\n        return _lockup[account];\\r\\n    }\\r\\n\\r\\n    function addMintablePermission(address _address) public onlyEditRightsPermission {\\r\\n        if(_isAdded[_address] == false) {\\r\\n            addressesWithPermissions.push(_address);\\r\\n            _isAdded[_address] = true;\\r\\n        }\\r\\n        mintablePermission[_address] = true;\\r\\n    }\\r\\n\\r\\n    function addAddWhitelistPermission(address _address) public onlyEditRightsPermission {\\r\\n        if(_isAdded[_address] == false) {\\r\\n            addressesWithPermissions.push(_address);\\r\\n            _isAdded[_address] = true;\\r\\n        }\\r\\n        addWhitelistPermission[_address] = true;\\r\\n    }\\r\\n\\r\\n    function addRemoveWhitelistPermission(address _address) public onlyEditRightsPermission {\\r\\n        if(_isAdded[_address] == false) {\\r\\n            addressesWithPermissions.push(_address);\\r\\n            _isAdded[_address] = true;\\r\\n        }\\r\\n        removeWhitelistPermission[_address] = true;\\r\\n    }\\r\\n\\r\\n    function addReplaceRegulatorServicePermission(address _address) public onlyEditRightsPermission {\\r\\n        if(_isAdded[_address] == false) {\\r\\n            addressesWithPermissions.push(_address);\\r\\n            _isAdded[_address] = true;\\r\\n        }\\r\\n        replaceRegulatorServicePermission[_address] = true;\\r\\n    }\\r\\n\\r\\n    function addEditRightsPermission(address _address) public onlyEditRightsPermission {\\r\\n        if(_isAdded[_address] == false) {\\r\\n            addressesWithPermissions.push(_address);\\r\\n            _isAdded[_address] = true;\\r\\n        }\\r\\n        editRightsPermission[_address] = true;\\r\\n    }\\r\\n\\r\\n    function addRecoveryTokensPermission(address _address) public onlyEditRightsPermission {\\r\\n        if(_isAdded[_address] == false) {\\r\\n            addressesWithPermissions.push(_address);\\r\\n            _isAdded[_address] = true;\\r\\n        }\\r\\n        recoveryTokensPermission[_address] = true;\\r\\n    }\\r\\n\\r\\n    function addAttributesPermission(address _address) public onlyEditRightsPermission {\\r\\n        if(_isAdded[_address] == false) {\\r\\n            addressesWithPermissions.push(_address);\\r\\n            _isAdded[_address] = true;\\r\\n        }\\r\\n        attributesPermission[_address] = true;\\r\\n    }\\r\\n\\r\\n    function removeMintablePermission(address _address) public onlyEditRightsPermission {\\r\\n        mintablePermission[_address] = false;\\r\\n    }\\r\\n\\r\\n    function removeAddWhitelistPermission(address _address) public onlyEditRightsPermission {\\r\\n        addWhitelistPermission[_address] = false;\\r\\n    }\\r\\n\\r\\n    function removeRemoveWhitelistPermission(address _address) public onlyEditRightsPermission {\\r\\n        removeWhitelistPermission[_address] = false;\\r\\n    }\\r\\n\\r\\n    function removeReplaceRegulatorServicePermission(address _address) public onlyEditRightsPermission {\\r\\n        replaceRegulatorServicePermission[_address] = false;\\r\\n    }\\r\\n\\r\\n    function removeEditRightsPermission(address _address) public onlyEditRightsPermission {\\r\\n        editRightsPermission[_address] = false;\\r\\n    }\\r\\n\\r\\n    function removeRecoveryTokensPermission(address _address) public onlyEditRightsPermission {\\r\\n        recoveryTokensPermission[_address] = false;\\r\\n    }\\r\\n\\r\\n    function removeAttributesPermission(address _address) public onlyEditRightsPermission {\\r\\n        attributesPermission[_address] = false;\\r\\n    }\\r\\n\\r\\n    function getAddressesWithPermissions() public view returns(address[] memory) {\\r\\n        return addressesWithPermissions;\\r\\n    }\\r\\n\\r\\n\\r\\n}\"},\"RegulatedToken.sol\":{\"content\":\"pragma solidity 0.5.8;\\r\\n\\r\\nimport \\\"./PermissionService.sol\\\";\\r\\nimport \\\"./IRegulatorService.sol\\\";\\r\\n\\r\\ncontract RegulatedToken is PermissionService {\\r\\n    string public name = \\\"SCI Equity Token\\\";\\r\\n    string public symbol = \\\"SCI\\\";\\r\\n    uint8 public decimals = 8;\\r\\n    string public CIK = \\\"0001782615\\\";\\r\\n\\r\\n    IRegulatorService public regulatorService;\\r\\n\\r\\n    event TokensRecovered(address _from, address _to, uint _amount);\\r\\n\\r\\n    constructor(address _regulatorService) public {\\r\\n        regulatorService = IRegulatorService(_regulatorService);\\r\\n        _totalSupply = 0;\\r\\n    }\\r\\n\\r\\n    function replaceRegulatorService(address _newRegulatorService) public onlyReplaceRegulatorServicePermission {\\r\\n        regulatorService = IRegulatorService(_newRegulatorService);\\r\\n    }\\r\\n\\r\\n    function changeSymbol(string memory _newSymbol) public onlyAttributesPermission {\\r\\n        symbol = _newSymbol;\\r\\n    }\\r\\n\\r\\n    function changeCIK(string memory _newCIK) public onlyAttributesPermission {\\r\\n        CIK = _newCIK;\\r\\n    }\\r\\n\\r\\n    function changename(string memory _newName) public onlyAttributesPermission {\\r\\n        name = _newName;\\r\\n    }\\r\\n\\r\\n    function addWhitelisted(address _account, string memory _iso) public onlyAddWhitelistPermission {\\r\\n        require(regulatorService.canAddToWhitelist(_account, _iso), \\\"Regulator service is not allowed add this account to whitelist\\\");\\r\\n        super.addWhitelisted(_account, _iso);\\r\\n    }\\r\\n\\r\\n    function removeWhitelisted(address _account) public onlyRemoveWhitelistPermission {\\r\\n        (bool _isWhitelistedAccount, string memory _iso) = isWhitelisted(_account);\\r\\n\\r\\n        require(_isWhitelistedAccount, \\\"Account is not whitelisted\\\");\\r\\n        require(regulatorService.canRemoveFromWhitelist(_account, _iso), \\\"Regulator service is not allowed remove this account from whitelist\\\");\\r\\n\\r\\n        super.removeWhitelisted(_account);\\r\\n    }\\r\\n\\r\\n    function transfer(address _to, uint _amount) public onlyUnlocked returns(bool) {\\r\\n        (bool _isWhitelistedFrom, string memory _isoFrom) = isWhitelisted(msg.sender);\\r\\n        (bool _isWhitelistedTo, string memory _isoTo) = isWhitelisted(_to);\\r\\n\\r\\n        require (_isWhitelistedFrom \\u0026\\u0026 _isWhitelistedTo, \\\"Sender or recipient is not whitelisted\\\");\\r\\n        require(regulatorService.canTransfer(msg.sender, _isoFrom, _to, _isoTo, _amount), \\\"Regulator service is not allowed to transfer\\\");\\r\\n\\r\\n        return super.transfer(_to, _amount);\\r\\n    }\\r\\n\\r\\n    function transferFrom(address _from, address _to, uint _amount) public onlyUnlocked returns(bool) {\\r\\n        (bool _isWhitelistedFrom, string memory _isoFrom) = isWhitelisted(_from);\\r\\n        (bool _isWhitelistedTo, string memory _isoTo) = isWhitelisted(_to);\\r\\n\\r\\n        require (_isWhitelistedFrom \\u0026\\u0026 _isWhitelistedTo, \\\"Sender or recipient is not whitelisted\\\");\\r\\n        require(regulatorService.canTransfer(_from, _isoFrom, _to, _isoTo, _amount), \\\"Regulator service is not allowed to make the transfer\\\");\\r\\n\\r\\n        return super.transferFrom(_from, _to, _amount);\\r\\n    }\\r\\n\\r\\n    function mint(address _for, uint _amount) public onlyMintablePermission {\\r\\n        (bool _isWhitelisted, string memory _iso) = isWhitelisted(_for);\\r\\n        require(_isWhitelisted, \\\"Recipient is not whitelisted\\\");\\r\\n        require(regulatorService.canMint(_for, _iso, _amount), \\\"Regulator service is not allowed this minting\\\");\\r\\n\\r\\n        _mint(_for, _amount);\\r\\n    }\\r\\n\\r\\n    function recoveryTokens(address _from, address _to) public onlyRecoveryTokensPermission {\\r\\n        require(regulatorService.canRecoveryTokens(_from, _to), \\\"Regulator service is not allowed this token recovery\\\");\\r\\n\\r\\n        (bool _isWhitelisted, string memory _iso) = isWhitelisted(_from);\\r\\n        require(_isWhitelisted, \\\"Account from is not whitelisted\\\");\\r\\n\\r\\n        uint balance = balanceOf(_from);\\r\\n\\r\\n        removeWhitelisted(_from);\\r\\n        addWhitelisted(_to, _iso);\\r\\n\\r\\n        _burn(_from, balance);\\r\\n        mint(_to, balance);\\r\\n\\r\\n        emit TokensRecovered(_from, _to, balance);\\r\\n    }\\r\\n}\"},\"RegulatorService.sol\":{\"content\":\"pragma solidity 0.5.8;\\r\\n\\r\\nimport \\\"./IRegulatorService.sol\\\";\\r\\n\\r\\nlibrary StringUtils {\\r\\n    /// @dev Does a byte-by-byte lexicographical comparison of two strings.\\r\\n    /// @return a negative number if `_a` is smaller, zero if they are equal\\r\\n    /// and a positive numbe if `_b` is smaller.\\r\\n    function compare(string memory _a, string memory _b) internal pure returns (int) {\\r\\n        bytes memory a = bytes(_a);\\r\\n        bytes memory b = bytes(_b);\\r\\n        uint minLength = a.length;\\r\\n        if (b.length \\u003c minLength) minLength = b.length;\\r\\n        //@todo unroll the loop into increments of 32 and do full 32 byte comparisons\\r\\n        for (uint i = 0; i \\u003c minLength; i ++)\\r\\n            if (a[i] \\u003c b[i])\\r\\n                return -1;\\r\\n            else if (a[i] \\u003e b[i])\\r\\n                return 1;\\r\\n        if (a.length \\u003c b.length)\\r\\n            return -1;\\r\\n        else if (a.length \\u003e b.length)\\r\\n            return 1;\\r\\n        else\\r\\n            return 0;\\r\\n    }\\r\\n    /// @dev Compares two strings and returns true iff they are equal.\\r\\n    function equal(string memory _a, string memory _b) internal pure returns (bool) {\\r\\n        return compare(_a, _b) == 0;\\r\\n    }\\r\\n    /// @dev Finds the index of the first occurrence of _needle in _haystack\\r\\n    function indexOf(string memory _haystack, string memory _needle) internal pure returns (int)\\r\\n    {\\r\\n      bytes memory h = bytes(_haystack);\\r\\n      bytes memory n = bytes(_needle);\\r\\n      if(h.length \\u003c 1 || n.length \\u003c 1 || (n.length \\u003e h.length))\\r\\n        return -1;\\r\\n      else if(h.length \\u003e (2**128 - 1)) // since we have to be able to return -1 (if the char isn\\u0027t found or input error), this function must return an \\\"int\\\" type with a max length of (2^128 - 1)\\r\\n        return -1;\\r\\n      else\\r\\n      {\\r\\n        uint subindex = 0;\\r\\n        for (uint i = 0; i \\u003c h.length; i ++)\\r\\n        {\\r\\n          if (h[i] == n[0]) // found the first char of b\\r\\n          {\\r\\n            subindex = 1;\\r\\n            while(subindex \\u003c n.length \\u0026\\u0026 (i + subindex) \\u003c h.length \\u0026\\u0026 h[i + subindex] == n[subindex]) // search until the chars don\\u0027t match or until we reach the end of a or b\\r\\n            {\\r\\n              subindex++;\\r\\n            }\\r\\n            if(subindex == n.length)\\r\\n              return int(i);\\r\\n          }\\r\\n        }\\r\\n        return -1;\\r\\n      }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\ncontract RegulatorService is IRegulatorService {\\r\\n    using StringUtils for string;\\r\\n\\r\\n    function canMint(address to, string calldata iso, uint256 value) external view returns(bool) {\\r\\n    \\treturn true;\\r\\n    }\\r\\n\\r\\n    function canTransfer(address from, string calldata isoFrom, address to, string calldata isoTo, uint256 value) external view returns(bool) {\\r\\n        require (block.timestamp \\u003e 1609632000 || isoFrom.equal(\\\"saver\\\"));\\r\\n    \\treturn true;\\r\\n    }\\r\\n\\r\\n    function canAddToWhitelist(address account, string calldata iso) external view returns(bool) {\\r\\n    \\treturn true;\\r\\n    }\\r\\n\\r\\n    function canRemoveFromWhitelist(address account, string calldata iso) external view returns(bool) {\\r\\n    \\treturn true;\\r\\n    }\\r\\n\\r\\n    function canRecoveryTokens(address from, address to) external view returns(bool) {\\r\\n    \\treturn true;\\r\\n    }\\r\\n}\\r\\n\"},\"SafeMath.sol\":{\"content\":\"pragma solidity 0.5.8;\\r\\n\\r\\n/**\\r\\n * @title SafeMath\\r\\n * @dev Unsigned math operations with safety checks that revert on error\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Multiplies two unsigned integers, reverts on overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b);\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b \\u003e 0);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Adds two unsigned integers, reverts on overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a);\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\r\\n     * reverts when dividing by zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b != 0);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\"}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"recoveryTokensPermission\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeEditRightsPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"attributesPermission\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintablePermission\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeRemoveWhitelistPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"lockAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addMintablePermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_for\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newName\",\"type\":\"string\"}],\"name\":\"changename\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeReplaceRegulatorServicePermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeRecoveryTokensPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHolders\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addEditRightsPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CIK\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWhitelistedAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"editRightsPermission\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lockAddressFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addAttributesPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addWhitelistPermission\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"replaceRegulatorServicePermission\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAddressesWithPermissions\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTimeLockFor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_iso\",\"type\":\"string\"}],\"name\":\"addWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addAddWhitelistPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSymbol\",\"type\":\"string\"}],\"name\":\"changeSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unlockAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRegulatorService\",\"type\":\"address\"}],\"name\":\"replaceRegulatorService\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCIK\",\"type\":\"string\"}],\"name\":\"changeCIK\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeAddWhitelistPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"recoveryTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addRemoveWhitelistPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"regulatorService\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeMintablePermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addRecoveryTokensPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeAttributesPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"removeWhitelistPermission\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addReplaceRegulatorServicePermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_regulatorService\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokensRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"RegulatedToken","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000028005a1181fd35996131c198ee6f5757738512b","Library":"","SwarmSource":"bzzr://4e3e1ab9a531cdb1795c140b3c66e35687ec421f1606efb2462903d8b522849c"}]}