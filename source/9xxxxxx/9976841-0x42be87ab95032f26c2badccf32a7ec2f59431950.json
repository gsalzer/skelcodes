{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\n// interface OneInchInterace {\r\n\r\n// }\r\n\r\ninterface OneSplitInterface {\r\n    function swap(\r\n        TokenInterface fromToken,\r\n        TokenInterface toToken,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        uint256[] calldata distribution, // [Uniswap, Kyber, Bancor, Oasis]\r\n        uint256 disableFlags // 16 - Compound, 32 - Fulcrum, 64 - Chai, 128 - Aave, 256 - SmartToken, 1024 - bDAI\r\n    ) external payable;\r\n\r\n    function getExpectedReturn(\r\n        TokenInterface fromToken,\r\n        TokenInterface toToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 disableFlags\r\n    )\r\n    external\r\n    view\r\n    returns(\r\n        uint256 returnAmount,\r\n        uint256[] memory distribution\r\n    );\r\n}\r\n\r\n\r\ninterface TokenInterface {\r\n    function allowance(address, address) external view returns (uint);\r\n    function balanceOf(address) external view returns (uint);\r\n    function approve(address, uint) external;\r\n    function transfer(address, uint) external returns (bool);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n}\r\n\r\n// interface MemoryInterface {\r\n//     function getUint(uint _id) external returns (uint _num);\r\n//     function setUint(uint _id, uint _val) external;\r\n// }\r\n\r\n// interface EventInterface {\r\n//     function emitEvent(uint _connectorType, uint _connectorID, bytes32 _eventCode, bytes calldata _eventData) external;\r\n// }\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Helpers is DSMath {\r\n    /**\r\n     * @dev Return ethereum address\r\n     */\r\n    function getAddressETH() internal pure returns (address) {\r\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; // ETH Address\r\n    }\r\n\r\n    // /**\r\n    //  * @dev Return Memory Variable Address\r\n    //  */\r\n    // function getMemoryAddr() internal pure returns (address) {\r\n    //     return 0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F; // InstaMemory Address\r\n    // }\r\n\r\n    // /**\r\n    //  * @dev Return InstaEvent Address.\r\n    //  */\r\n    // function getEventAddr() internal pure returns (address) {\r\n    //     return 0x2af7ea6Cb911035f3eb1ED895Cb6692C39ecbA97; // InstaEvent Address\r\n    // }\r\n\r\n    // /**\r\n    //  * @dev Get Uint value from InstaMemory Contract.\r\n    // */\r\n    // function getUint(uint getId, uint val) internal returns (uint returnVal) {\r\n    //     returnVal = getId == 0 ? val : MemoryInterface(getMemoryAddr()).getUint(getId);\r\n    // }\r\n\r\n    // /**\r\n    //  * @dev Set Uint value in InstaMemory Contract.\r\n    // */\r\n    // function setUint(uint setId, uint val) internal {\r\n    //     if (setId != 0) MemoryInterface(getMemoryAddr()).setUint(setId, val);\r\n    // }\r\n\r\n    // /**\r\n    //  * @dev Connector Details\r\n    // */\r\n    // function connectorID() public pure returns(uint _type, uint _id) {\r\n    //     (_type, _id) = (1, 0);\r\n    // }\r\n}\r\n\r\n\r\ncontract CompoundHelpers is Helpers {\r\n    // /**\r\n    //  * @dev Return 1 Inch Address\r\n    //  */\r\n    // function getOneInchAddress() internal pure returns (address) {\r\n    //     return 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\r\n    // }\r\n\r\n    /**\r\n     * @dev Return 1 Split Address\r\n     */\r\n    function getOneSplitAddress() internal pure returns (address) {\r\n        return 0xC586BeF4a0992C495Cf22e1aeEE4E446CECDee0E;\r\n    }\r\n}\r\n\r\n\r\ncontract BasicResolver is CompoundHelpers {\r\n\r\n    function sell(\r\n        address buyAddr,\r\n        address sellAddr,\r\n        uint sellAmt,\r\n        uint unitAmt,\r\n        uint getId\r\n    ) external payable {\r\n        TokenInterface _buyAddr = TokenInterface(buyAddr);\r\n        TokenInterface _sellAddr = TokenInterface(sellAddr);\r\n        OneSplitInterface oneSplitContract = OneSplitInterface(getOneSplitAddress());\r\n        uint ethAmt = getAddressETH() == sellAddr ? sellAmt : 0;\r\n        (uint buyAmt, uint[] memory distribution) =\r\n        oneSplitContract.getExpectedReturn(\r\n                _sellAddr,\r\n                _buyAddr,\r\n                sellAmt,\r\n                unitAmt,\r\n                getId\r\n            );\r\n        oneSplitContract.swap.value(ethAmt)(\r\n            _sellAddr,\r\n            _buyAddr,\r\n            sellAmt,\r\n            buyAmt,\r\n            distribution,\r\n            getId\r\n        );\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"BasicResolver","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"ipfs://55d4174ad3026919af907eec46e2ee8489eec4530f0aa94581966b8353fdd001"}]}