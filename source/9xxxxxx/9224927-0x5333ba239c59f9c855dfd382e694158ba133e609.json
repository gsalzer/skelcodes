{"status":"1","message":"OK","result":[{"SourceCode":"// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/TokenExpress.sol\r\n\r\npragma solidity ^0.4.25;\r\n\r\n\r\n\r\ncontract TokenExpress is Ownable {\r\n    event Deposit(bytes32 indexed escrowId, address indexed sender, uint256 amount);\r\n    event Send(bytes32 indexed escrowId, address indexed recipient, uint256 amount);\r\n    event Recovery(bytes32 indexed escrowId, address indexed sender, uint256 amount);\r\n\r\n    using SafeMath for uint256;\r\n\r\n    // ユーザに負担してもらう手数料（wei）\r\n    uint256 fee = 1000000;\r\n\r\n    // ユーザが回収できるようになるまでの時間（時間）\r\n    uint256 lockTime = 14 * 24;\r\n\r\n    // オーナー以外に管理権限があるユーザ\r\n    address administrator = 0x0;\r\n\r\n    // 送金情報を保存する構造体\r\n    struct TransferInfo {\r\n        address from;\r\n        address to;\r\n        uint256 amount;\r\n        uint256 date;\r\n        bool    sent;\r\n    }\r\n\r\n    // デポジット情報\r\n    mapping (bytes32 => TransferInfo) private _transferInfo;\r\n\r\n    /**\r\n     * コンストラクタ\r\n     */\r\n    constructor () public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * デポジットを行う\r\n     * 引数１：システムで発行されたID\r\n     * 引数２：送金額（wei で指定）\r\n     * 引数３：送金先アドレス\r\n     * ※ 送金額＋手数料分のETHを送ってもらう必要がある\r\n     *\r\n     * df121a97\r\n     */\r\n    function etherDeposit(bytes32 id, uint256 amount) payable public {\r\n        // 既にIDが登録されていたら変更は不可\r\n        require(_transferInfo[id].from == 0x0, \"ID is already exists.\");\r\n\r\n        // 実際に送られた ether が送金額＋手数料よりも低ければエラー\r\n        require(amount + fee <= msg.value, \"Value is too low.\");\r\n\r\n        // 送金情報を登録する\r\n        _transferInfo[id].from   = msg.sender;\r\n        _transferInfo[id].to     = 0x0;\r\n        _transferInfo[id].amount = amount;\r\n        _transferInfo[id].date   = block.timestamp;\r\n        emit Deposit(id, msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * 送金を行う\r\n     * 引数１：システムで発行されたID\r\n     *\r\n     * 3af19adb\r\n     */\r\n    function etherSend(bytes32 id, address to) public {\r\n        // IDが登録されていなければエラー\r\n        require(_transferInfo[id].from != 0x0, \"ID error.\");\r\n\r\n        // 既に送金・回収されていればエラー\r\n        require(_transferInfo[id].sent == false, \"Already sent.\");\r\n\r\n        // 送金先が不正なアドレスならエラー\r\n        require(to != 0x0, \"Address error.\");\r\n\r\n        // 送金指示をしたアドレスが、オーナーか管理者かデポジット者以外だったらエラー\r\n        require(msg.sender == owner || msg.sender == administrator || msg.sender == _transferInfo[id].from, \"Invalid address.\");\r\n\r\n        to.transfer(_transferInfo[id].amount);\r\n        _transferInfo[id].to = to;\r\n        _transferInfo[id].sent = true;\r\n        emit Send(id, to, _transferInfo[id].amount);\r\n    }\r\n\r\n    /**\r\n     * 回収を行う\r\n     * 引数１：システムで発行されたID\r\n     *\r\n     * 6b87124e\r\n     */\r\n    function etherRecovery(bytes32 id) public {\r\n        // IDが登録されていなければエラー\r\n        require(_transferInfo[id].from != 0x0, \"ID error.\");\r\n\r\n        // 既に送金・回収されていればエラー\r\n        require(_transferInfo[id].sent == false, \"Already recoveried.\");\r\n\r\n        // ロックタイムを過ぎて今ければエラー\r\n        require(_transferInfo[id].date + lockTime * 60 * 60 <= block.timestamp, \"Locked.\");\r\n\r\n        address to = _transferInfo[id].from;\r\n        to.transfer(_transferInfo[id].amount);\r\n        _transferInfo[id].sent = true;\r\n        emit Recovery(id, _transferInfo[id].from, _transferInfo[id].amount);\r\n    }\r\n\r\n    /**\r\n     * 指定したIDの情報を返す\r\n     * onlyOwner にした方が良いかも\r\n     */\r\n    function etherInfo(bytes32 id) public view returns (address, address, uint256, bool) {\r\n        return (_transferInfo[id].from, _transferInfo[id].to, _transferInfo[id].amount, _transferInfo[id].sent);\r\n    }\r\n\r\n    /**\r\n     * オーナー以外の管理者を設定する\r\n     * 引数１：管理者のアドレス\r\n     *\r\n     *\r\n     */\r\n    function setAdmin(address _admin) onlyOwner public {\r\n        administrator = _admin;\r\n    }\r\n\r\n    /**\r\n     * オーナー以外の管理者を取得する\r\n     */\r\n    function getAdmin() public view returns (address) {\r\n        return administrator;\r\n    }\r\n\r\n    /**\r\n     * 手数料の値を変更する\r\n     * 引数１：手数料の値（wei）\r\n     *\r\n     * 69fe0e2d\r\n     */\r\n    function setFee(uint256 _fee) onlyOwner public {\r\n        fee = _fee;\r\n    }\r\n\r\n    /**\r\n     * 手数料の値を返す\r\n     */\r\n    function getFee() public view returns (uint256) {\r\n        return fee;\r\n    }\r\n\r\n    /**\r\n     * ロック期間を変更する\r\n     * 引数１：ロック期間（時間）\r\n     *\r\n     * ae04d45d\r\n     */\r\n    function setLockTime(uint256 _lockTime) onlyOwner public {\r\n        lockTime = _lockTime;\r\n    }\r\n\r\n    /**\r\n     * ロック期間の値を返す\r\n     */\r\n    function getLockTime() public view returns (uint256) {\r\n        return lockTime;\r\n    }\r\n\r\n    /**\r\n     * コントラクトの残高確認\r\n     */\r\n    function getBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    /**\r\n     * オーナーによる Ether の回収\r\n     * 引数１：送り先アドレス\r\n     * 引数２；送金額\r\n     *\r\n     * 3ef5e35f\r\n     */\r\n    function sendEtherToOwner(address to, uint256 amount) onlyOwner public {\r\n        to.transfer(amount);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendEtherToOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"etherDeposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"etherRecovery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"etherInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockTime\",\"type\":\"uint256\"}],\"name\":\"setLockTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLockTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"etherSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"escrowId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"escrowId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Send\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"escrowId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TokenExpress","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://ed28b19d3431f85a7a8eb52dcd352633a70a661bdc97d3c47c58d48ee4173f3e"}]}