{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.14;\r\n\r\ninterface HEX {\r\n    function xfLobbyEnter(address referrerAddr)\r\n    external\r\n    payable;\r\n\r\n    function xfLobbyExit(uint256 enterDay, uint256 count)\r\n    external;\r\n\r\n    function xfLobbyPendingDays(address memberAddr)\r\n    external\r\n    view\r\n    returns (uint256[2] memory words);\r\n\r\n    function balanceOf (address account)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n    function transfer (address recipient, uint256 amount)\r\n    external\r\n    returns (bool);\r\n\r\n    function currentDay ()\r\n    external\r\n    view\r\n    returns (uint256);\r\n}\r\n\r\ncontract ReferralSplitter {\r\n\r\n    event DistributedShares(\r\n        uint256 timestamp,\r\n        address indexed senderAddress,\r\n        uint256 totalDistributed\r\n    );\r\n    \r\n    event DistributedEthDonation(\r\n        uint256 timestamp,\r\n        address indexed donatorAddress,\r\n        uint256 totalDonated\r\n    );\r\n\r\n    HEX internal hx = HEX(0x2b591e99afE9f32eAA6214f7B7629768c40Eeb39);\r\n\r\n    uint256 public minGasHearts = 10000000000;\r\n    uint256 private allocatedGasHearts;\r\n    address payable public gasWallet;\r\n    \r\n    address payable internal KYLE = 0xD30BC4859A79852157211E6db19dE159673a67E2; // 20\r\n    address payable internal KEVIN = 0x3487b398546C9b757921df6dE78EC308203f5830; // 15\r\n    address payable internal AMIRIS = 0x406D1fC98D231aD69807Cd41d4D6F8273401354f; // 6\r\n    address payable internal MICHAEL = 0xe551072153c02fa33d4903CAb0435Fb86F1a80cb; // 13\r\n    address payable internal JARED = 0x5eCb4D3B4b451b838242c3CF8404ef18f5C486aB; // 5\r\n    address payable internal LOUIS = 0x454f203260a74C0A8B5c0a78fbA5B4e8B31dCC63; // 1\r\n    address payable internal LOTTO = 0x1EF0Bab01329a6CE39e92eA6B88828430B1Cd91f;// 10\r\n    address payable internal DONATOR = 0x723e82Eb1A1b419Fb36e9bD65E50A979cd13d341; // 7.5\r\n    address payable internal MARCO = 0xbf1984B12878c6A25f0921535c76C05a60bdEf39; // 7.5\r\n    address payable internal SWIFT = 0x88BA4dc5571660A1693E421D83EC97015B53580D; // 7.5\r\n    address payable internal MARK = 0x35e9034f47cc00b8A9b555fC1FDB9598b2c245fD; // 7.5\r\n    \r\n    mapping(address => bool) contributors;\r\n    \r\n    modifier onlyContributors(){\r\n        require(contributors[msg.sender], \"not a contributor\");\r\n        _;\r\n    }\r\n    \r\n    constructor() public {\r\n        gasWallet = msg.sender;\r\n        contributors[KYLE] = true;\r\n        contributors[KEVIN] = true;\r\n        contributors[AMIRIS] = true;\r\n        contributors[MICHAEL] = true;\r\n        contributors[JARED] = true;\r\n        contributors[LOUIS] = true;\r\n        contributors[LOTTO] = true;\r\n        contributors[DONATOR] = true;\r\n        contributors[MARCO] = true;\r\n        contributors[SWIFT] = true;\r\n        contributors[MARK] = true;\r\n    }\r\n    \r\n    function distribute () public {\r\n        //get balance    \r\n        uint256 balance = hx.balanceOf(address(this));\r\n        //minGasHearts allocation must be below 1% of balance. this stops any 1 contributor setting an excessively high minGasHearts to drain the contract. reduce minGasHearts in the case of high contract balance at will)\r\n        require(minGasHearts < (balance / 100), \"minGasHearts must not be > 1% of contract HEX balance - reduce minGasHearts to enable distribution\");\r\n        //deduct for gas\r\n        allocatedGasHearts += minGasHearts;\r\n        require(balance > (allocatedGasHearts + 99), \"balance does not cover gas allocation\");\r\n        balance -= allocatedGasHearts;\r\n        //distribute\r\n        uint256 onePercent = balance / 100;\r\n        uint256 fivePercent = balance / 20;\r\n        hx.transfer(KYLE, 4*fivePercent); // 20%\r\n        hx.transfer(KEVIN, 3*fivePercent); // 15%\r\n        hx.transfer(AMIRIS, fivePercent + onePercent); // 6%\r\n        hx.transfer(MICHAEL, (2*fivePercent) + (3*onePercent)); // 13%\r\n        hx.transfer(JARED, fivePercent); // 5%\r\n        hx.transfer(LOUIS, onePercent); // 1%\r\n        hx.transfer(LOTTO, 2*fivePercent); // 10%\r\n        hx.transfer(DONATOR, fivePercent + (fivePercent/2)); // 7.5%\r\n        hx.transfer(MARCO, fivePercent + (fivePercent/2)); // 7.5%\r\n        hx.transfer(SWIFT, fivePercent + (fivePercent/2)); // 7.5%\r\n        hx.transfer(MARK, fivePercent + (fivePercent/2)); // 7.5%\r\n        emit DistributedShares(now, msg.sender, balance);\r\n    }\r\n    \r\n    function setMinGasHearts(uint256 _minGasHearts) public onlyContributors{\r\n        require(_minGasHearts> 0, \"min hearts for gas cannot be zero\");\r\n        minGasHearts = _minGasHearts;\r\n    }\r\n    \r\n    function withdrawGasAllocation() public onlyContributors {\r\n        require(gasWallet != address(0), \"gas wallet cannot be zero address\");\r\n        require(allocatedGasHearts > 0, \"zero allocated hex for gas\");\r\n        //transfer HEX to gas wallet\r\n        hx.transfer(gasWallet, allocatedGasHearts);\r\n        //reset allocation\r\n        allocatedGasHearts = 0;\r\n    }\r\n    \r\n    function setGasWallet(address payable _gasWallet) public onlyContributors{\r\n        require(_gasWallet != address(0), \"cannot be zero address\");\r\n        gasWallet = _gasWallet;\r\n    }\r\n    \r\n    //fallback for eth sent to contract - auto distribute as donation\r\n    function() external payable{\r\n        donate();    \r\n    }\r\n    \r\n    function donate() public payable {\r\n        require(msg.value > 0);\r\n        uint256 balance = msg.value;\r\n        uint256 onePercent = balance / 100;\r\n        uint256 fivePercent = balance / 20;\r\n        KYLE.transfer(4*fivePercent); // 20%\r\n        KEVIN.transfer(3*fivePercent); // 15%\r\n        AMIRIS.transfer(fivePercent + onePercent); // 6%\r\n        MICHAEL.transfer((2*fivePercent) + (3*onePercent)); // 13%\r\n        JARED.transfer(fivePercent); // 5%\r\n        LOUIS.transfer(onePercent); // 1%\r\n        LOTTO.transfer(2*fivePercent); // 10%\r\n        DONATOR.transfer(fivePercent + (fivePercent/2)); // 7.5%\r\n        MARCO.transfer(fivePercent + (fivePercent/2)); // 7.5%\r\n        SWIFT.transfer(fivePercent + (fivePercent/2)); // 7.5%\r\n        MARK.transfer(fivePercent + (fivePercent/2)); // 7.5%\r\n        emit DistributedEthDonation(now, msg.sender, balance);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"donatorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDonated\",\"type\":\"uint256\"}],\"name\":\"DistributedEthDonation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDistributed\",\"type\":\"uint256\"}],\"name\":\"DistributedShares\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"distribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"donate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gasWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minGasHearts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_gasWallet\",\"type\":\"address\"}],\"name\":\"setGasWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minGasHearts\",\"type\":\"uint256\"}],\"name\":\"setMinGasHearts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawGasAllocation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ReferralSplitter","CompilerVersion":"v0.5.14+commit.1f1aaa4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://1c8f5651520b5c6196d1afa779b619677064f692e730b5707dc63b6783d51e42"}]}