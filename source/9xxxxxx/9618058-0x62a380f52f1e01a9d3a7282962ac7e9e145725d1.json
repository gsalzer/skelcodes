{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/ERC20.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n\r\n    function balanceOf(address _who) public view returns (uint256);\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address _owner, address _spender) public view returns (uint256);\r\n\r\n    function symbol() public view returns (string memory);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// File: contracts/Ownable.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address _newOwner) internal {\r\n        require(_newOwner != address(0));\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/ReentrancyGuard.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n/**\r\n * @title Helps contracts guard against reentrancy attacks.\r\n * @author Remco Bloemen <remco@2Ï€.com>, Eenae <alexey@mixbytes.io>\r\n * @dev If you mark a function `nonReentrant`, you should also\r\n * mark it `external`.\r\n */\r\ncontract ReentrancyGuard {\r\n\r\n    /// @dev Constant for unlocked guard state - non-zero to prevent extra gas costs.\r\n    /// See: https://github.com/OpenZeppelin/openzeppelin-solidity/issues/1056\r\n    uint256 internal constant REENTRANCY_GUARD_FREE = 1;\r\n\r\n    /// @dev Constant for locked guard state\r\n    uint256 internal constant REENTRANCY_GUARD_LOCKED = 2;\r\n\r\n    /**\r\n     * @dev We use a single lock for the whole contract.\r\n     */\r\n    uint256 internal reentrancyLock = REENTRANCY_GUARD_FREE;\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * If you mark a function `nonReentrant`, you should also\r\n     * mark it `external`. Calling one `nonReentrant` function from\r\n     * another is not supported. Instead, you can implement a\r\n     * `private` function doing the actual work, and an `external`\r\n     * wrapper marked as `nonReentrant`.\r\n     */\r\n    modifier nonReentrant() {\r\n        require(reentrancyLock == REENTRANCY_GUARD_FREE);\r\n        reentrancyLock = REENTRANCY_GUARD_LOCKED;\r\n        _;\r\n        reentrancyLock = REENTRANCY_GUARD_FREE;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/tradeLogic/OneSplitTradeLogic.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\n\r\n\r\ninterface OneSplit {\r\n    function goodSwap(\r\n        ERC20 fromToken,\r\n        ERC20 toToken,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        uint256 parts,\r\n        uint256 disableFlags // 1 - Uniswap, 2 - Kyber, 4 - Bancor, 8 - Oasis, 16 - Compound, 32 - Fulcrum, 64 - Chai, 128 - Aave, 256 - SmartToken, 1024 - bDAI\r\n    ) external payable;\r\n}\r\n\r\ncontract OneSplitTradeLogic is Ownable, ReentrancyGuard\r\n{\r\n    bool public isTradeLogic = true;\r\n    OneSplit public oneSplit;\r\n\r\n    constructor(address _oneSplit) public\r\n    {\r\n        setOneSplit(_oneSplit);\r\n    }\r\n\r\n    function swap(address source, address dest, uint sourceAmount) public nonReentrant returns (uint)\r\n    {\r\n        ERC20(source).approve(address(oneSplit), sourceAmount);\r\n        oneSplit.goodSwap(ERC20(source), ERC20(dest), sourceAmount, 1, 1, 0);\r\n        return ERC20(dest).balanceOf(address(this));\r\n    }\r\n\r\n    function setOneSplit(address _oneSplit) public onlyOwner\r\n    {\r\n        oneSplit = OneSplit(_oneSplit);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"oneSplit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oneSplit\",\"type\":\"address\"}],\"name\":\"setOneSplit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isTradeLogic\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"source\",\"type\":\"address\"},{\"name\":\"dest\",\"type\":\"address\"},{\"name\":\"sourceAmount\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_oneSplit\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"OneSplitTradeLogic","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000001814222fa8c8c1c1bf380e3bbfbd9de8657da476","Library":"","LicenseType":"None","SwarmSource":"bzzr://74f2e8733237259959acda46f8854169a078cda3e8566a2811f31f5cbf49c9f0"}]}