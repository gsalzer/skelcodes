{"status":"1","message":"OK","result":[{"SourceCode":"{\"ERC20Interface.sol\":{\"content\":\"pragma solidity \\u003e= 0.5.3 \\u003c 0.6.0;\\r\\n\\r\\n//  ERC20 Interface\\r\\n//  - interface for ERC20 token functions for compatibility\\r\\ninterface ERC20Interface {\\r\\n    function balanceOf(address _who) external view returns (uint256);\\r\\n    function transfer(address _to, uint256 _value) external returns (bool);\\r\\n    function allowance(address _owner, address _spender) external view returns (uint256);\\r\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\\r\\n    function approve(address _spender, uint256 _value) external returns (bool);\\r\\n    \\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"},\"LotteryCampaign.sol\":{\"content\":\"pragma solidity \\u003e= 0.5.3 \\u003c 0.6.0;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./TimestampMonthConv.sol\\\";\\r\\nimport \\\"./ERC20Interface.sol\\\";\\r\\n\\r\\ncontract Ownership {\\r\\n    address private _owner;\\r\\n    \\r\\n    event OwnerOwnershipTransferred(address indexed prevOwner, address indexed newOwner);\\r\\n    \\r\\n    // Returns contract owner address\\r\\n    function owner() public view returns (address){\\r\\n        return _owner;\\r\\n    }\\r\\n    \\r\\n    // Check if caller is owner account\\r\\n    function isOwner() public view returns (bool){\\r\\n        return (msg.sender == _owner);\\r\\n    }\\r\\n    \\r\\n    // Modifier for function restricted to owner only\\r\\n    modifier onlyOwner() {\\r\\n        require(isOwner(), \\\"Ownership: the caller is not the owner address\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    // Transfer owner\\u0027s ownership to new address\\r\\n    // # param newOwner: address of new owner to be transferred\\r\\n    function transferOwnerOwnership(address newOwner) public onlyOwner {\\r\\n        _transferOwnerOwnership(newOwner);\\r\\n    }\\r\\n    \\r\\n    // ==== internal functions ====\\r\\n\\r\\n    function _transferOwnerOwnership(address newOwner) internal {\\r\\n        require (newOwner != address(0), \\\"Ownable: new owner is zero address\\\");\\r\\n        emit OwnerOwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n    \\r\\n    function _setupOwnership(address own) internal {\\r\\n        require (own != address(0), \\\"Ownable: owner is zero address\\\");\\r\\n        _owner = own;\\r\\n        \\r\\n        emit OwnerOwnershipTransferred(address(0), own);\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface LockupInterface {\\r\\n    function isRegisteredParticipant(address userAddress) external view returns (bool);\\r\\n    function getParticipantLockAmount(address userAddress) external view returns (uint256);\\r\\n}\\r\\n\\r\\ncontract LotteryCampaign is Ownership {\\r\\n    using TimestampMonthConv for uint256;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    enum Tiers {TIER1, TIER2, TIER3, TIER4}\\r\\n    enum LotteryStatus {NULL, JOINED, SELECTED, CLAIMED}\\r\\n    enum LotteryAvailability {CLOSED, OPEN}\\r\\n    LotteryAvailability lottOpen;\\r\\n    \\r\\n    struct Participants {\\r\\n        Tiers tier;\\r\\n        LotteryStatus status;\\r\\n    }\\r\\n    \\r\\n    uint8 decimal;\\r\\n    uint256 nonce;\\r\\n    uint256 public endTime;\\r\\n    bool internal t1_transfer = false;\\r\\n    bool internal t2_transfer = false;\\r\\n    bool internal t3_transfer = false;\\r\\n    bool internal t4_transfer = false;\\r\\n    address internal lockupContract;\\r\\n    \\r\\n    address[] participantsTier1;\\r\\n    address[] participantsTier2;\\r\\n    address[] participantsTier3;\\r\\n    address[] participantsTier4;\\r\\n\\r\\n    address[] selectedTier1;\\r\\n    address[] selectedTier2;\\r\\n    address[] selectedTier3;\\r\\n    address[] selectedTier4;\\r\\n    \\r\\n    mapping (address =\\u003e Participants) participantList;\\r\\n\\r\\n    event Active(uint256 timestamp);\\r\\n    event Inactive(uint256 timestamp);\\r\\n    event Supply(uint256 indexed owner, uint256 amount);\\r\\n    event Return(uint256 indexed owner, uint256 amount);\\r\\n    event RegisterLottery(address indexed user, Tiers tier, uint256 timestamp);\\r\\n    event SelectedLottery(address indexed user, Tiers tier);\\r\\n    event RewardLottery(address indexed user, uint256 amountEth, uint256 timestamp);\\r\\n    event EndTimeShifted(uint256 oldTime, uint256 newTime);\\r\\n    \\r\\n    constructor(address owner, uint8 WWB_decimals, address lockupCampaign) public {\\r\\n        _setupOwnership(owner);\\r\\n        decimal = WWB_decimals;\\r\\n        lockupContract = lockupCampaign;\\r\\n    }\\r\\n\\r\\n    // --------------- Main lottery function ---------------\\r\\n\\r\\n    // Change the lottery contract\\u0027s active state to `open` and adds 1 month for closing\\r\\n    function startLotteryPeriod() public onlyOwner {\\r\\n        lottOpen = LotteryAvailability.OPEN;\\r\\n        endTime = now.addMonths(1);\\r\\n        emit Active(now);\\r\\n    }\\r\\n    \\r\\n    // Change the end time **Note: should not input time later than current timestamp\\r\\n    function changeEndPeriod(uint256 timestamp) public onlyOwner {\\r\\n        require(timestamp \\u003e now, \\\"LotteryCampaign: Input time invalid, time should be greater than current time\\\");\\r\\n        emit EndTimeShifted(endTime, timestamp);\\r\\n        endTime = timestamp;\\r\\n    }\\r\\n\\r\\n    // Terminates the contract\\r\\n    function killContract() public onlyOwner {\\r\\n        selfdestruct(address(uint160(owner())));\\r\\n    }\\r\\n    \\r\\n    // Checks whether the lottery is active\\r\\n    function isOpen() public view returns (bool) {\\r\\n        return(lottOpen == LotteryAvailability.OPEN);\\r\\n    }\\r\\n\\r\\n    // Updates the period of lottery activeness\\r\\n    function updatePeriod() public {\\r\\n        if(now \\u003e endTime) {\\r\\n            lottOpen = LotteryAvailability.CLOSED;\\r\\n            emit Inactive(now);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    // Fallback for supplying ETH\\r\\n    function () external payable{\\r\\n        require(msg.sender == owner(), \\\"LotteryCampaign: only owner can send ETH in this contract\\\");\\r\\n    }\\r\\n    \\r\\n    // Checks ETH balance in this contract\\r\\n    function balance() public view onlyOwner returns (uint256){\\r\\n        return address(this).balance;\\r\\n    }\\r\\n    \\r\\n    // Send back remaining ETH balance to owner\\r\\n    function sendBackBalance() public onlyOwner returns (uint256){\\r\\n        address payable own = address(uint160(owner()));\\r\\n        own.transfer(balance());\\r\\n    }\\r\\n\\r\\n    // Registers users for lottery selection. Only applies for users who registers for WWB lockup campaign\\r\\n    // # params user: address of the user participated on WWB lockup campaign\\r\\n    function register(address user) public returns (bool stat){\\r\\n        updatePeriod();\\r\\n        require(isOpen(), \\\"LotteryCampaign: lottery is closed\\\");\\r\\n        require(participantList[user].status == LotteryStatus.NULL, \\\"LotteryCampaign: user already registered\\\");\\r\\n        _verify(user);\\r\\n        stat = _checkTier(user);\\r\\n    }\\r\\n\\r\\n    // Retrieve information of successfully registered user\\r\\n    // # params user: address of the user participated on WWB lockup campaign\\r\\n    // * returns (Tiers): enum of which Tiers is registered\\r\\n    // * returns (LotteryStatus): enum of the user status\\r\\n    function getInfo(address user) public view returns(Tiers, LotteryStatus) {\\r\\n        return(participantList[user].tier, participantList[user].status);\\r\\n    }\\r\\n\\r\\n    // Retrieve all participating users for Tier 1\\r\\n    function getTier1List() public view returns (address[] memory){\\r\\n        return participantsTier1;\\r\\n    }\\r\\n\\r\\n    // Retrieve all participating users for Tier 2\\r\\n    function getTier2List() public view returns (address[] memory){\\r\\n        return participantsTier2;\\r\\n    }\\r\\n\\r\\n    // Retrieve all participating users for Tier 3\\r\\n    function getTier3List() public view returns (address[] memory){\\r\\n        return participantsTier3;\\r\\n    }\\r\\n\\r\\n    // Retrieve all participating users for Tier 4\\r\\n    function getTier4List() public view returns (address[] memory){\\r\\n        return participantsTier4;\\r\\n    }\\r\\n\\r\\n    // Insert the selected users for Tier 1 to selected list. **lottery is handled on other location due to security reason\\r\\n    // # params user: address of the selected user participated on WWB lockup campaign\\r\\n    function insertSelectionTier1(address user) public onlyOwner{\\r\\n        require(!isOpen(), \\\"LotteryCampaign: lottery is still open\\\");\\r\\n        require(participantList[user].status != LotteryStatus.NULL, \\\"LotteryCampaign: user does not exists in lottey\\\");\\r\\n        \\r\\n        _insertSelection(user, selectedTier1, 50);\\r\\n    }\\r\\n\\r\\n    // Insert the selected users for Tier 1 to selected list by bulk. **lottery is handled on other location due to security reason\\r\\n    // # params users: array of addresses of selected user participated on WWB lockup campaign in Tier 1\\r\\n    function insertBulkTier1(address[] memory users) public onlyOwner {\\r\\n        require(!isOpen(), \\\"LotteryCampaign: lottery is still open\\\");\\r\\n        selectedTier1 = users;\\r\\n\\r\\n        _bulkChecks(users, Tiers.TIER1);\\r\\n    }\\r\\n\\r\\n    // Insert the selected users for Tier 2 to selected list. **lottery is handled on other location due to security reason\\r\\n    // # params user: address of the selected user participated on WWB lockup campaign\\r\\n    function insertSelectionTier2(address user) public {\\r\\n        require(!isOpen(), \\\"LotteryCampaign: lottery is still open\\\");\\r\\n        require(participantList[user].status != LotteryStatus.NULL, \\\"LotteryCampaign: user does not exists in lottey\\\");\\r\\n        \\r\\n        _insertSelection(user, selectedTier2, 30);\\r\\n    }\\r\\n\\r\\n    // Insert the selected users for Tier 2 to selected list by bulk. **lottery is handled on other location due to security reason\\r\\n    // # params users: array of addresses of selected user participated on WWB lockup campaign in Tier 2\\r\\n    function insertBulkTier2(address[] memory users) public onlyOwner {\\r\\n        require(lottOpen == LotteryAvailability.CLOSED, \\\"LotteryCampaign: lottery is still open\\\");\\r\\n        selectedTier2 = users;\\r\\n\\r\\n        _bulkChecks(users, Tiers.TIER2);\\r\\n    }\\r\\n\\r\\n    // Insert the selected users for Tier 3 to selected list. **lottery is handled on other location due to security reason\\r\\n    // # params user: address of the selected user participated on WWB lockup campaign\\r\\n    function insertSelectionTier3(address user) public {\\r\\n        require(!isOpen(), \\\"LotteryCampaign: lottery is still open\\\");\\r\\n        require(participantList[user].status != LotteryStatus.NULL, \\\"LotteryCampaign: user does not exists in lottey\\\");\\r\\n        \\r\\n        _insertSelection(user, selectedTier3, 20);\\r\\n    }\\r\\n\\r\\n    // Insert the selected users for Tier 3 to selected list by bulk. **lottery is handled on other location due to security reason\\r\\n    // # params users: array of addresses of selected user participated on WWB lockup campaign in Tier 3\\r\\n    function insertBulkTier3(address[] memory users) public onlyOwner {\\r\\n        require(!isOpen(), \\\"LotteryCampaign: lottery is still open\\\");\\r\\n        selectedTier3 = users;\\r\\n\\r\\n        _bulkChecks(users, Tiers.TIER3);\\r\\n    }\\r\\n\\r\\n    // Insert the selected users for Tier 4 to selected list. **lottery is handled on other location due to security reason\\r\\n    // # params user: address of the selected user participated on WWB lockup campaign\\r\\n    function insertSelectionTier4(address user) public {\\r\\n        require(!isOpen(), \\\"LotteryCampaign: lottery is still open\\\");\\r\\n        require(participantList[user].status != LotteryStatus.NULL, \\\"LotteryCampaign: user does not exists in lottey\\\");\\r\\n        \\r\\n        _insertSelection(user, selectedTier4, 10);\\r\\n    }\\r\\n\\r\\n    // Insert the selected users for Tier 4 to selected list by bulk. **lottery is handled on other location due to security reason\\r\\n    // # params users: array of addresses of selected user participated on WWB lockup campaign in Tier 4\\r\\n    function insertBulkTier4(address[] memory users) public onlyOwner {\\r\\n        require(!isOpen(), \\\"LotteryCampaign: lottery is still open\\\");\\r\\n        selectedTier4 = users;\\r\\n\\r\\n        _bulkChecks(users, Tiers.TIER4);\\r\\n    }\\r\\n\\r\\n    // Transfer the ETH to the user address that have been selected for respective Tier.\\r\\n    // # params user: address of the selected user participated on WWB lockup campaign\\r\\n    function transferSelectedUsers(address user) public {\\r\\n        updatePeriod();\\r\\n        require(!isOpen(), \\\"LotteryCampaign: lottery is still open\\\");\\r\\n        require(participantList[user].status == LotteryStatus.SELECTED, \\\"LotteryCampaign: user is not selected in lottey\\\");\\r\\n\\r\\n        _transferOut(user);\\r\\n    }\\r\\n\\r\\n    // Send out ETH to selected users by bulk for Tier 1\\r\\n    function bulkTransferSelectionTier1() public onlyOwner{\\r\\n        require(!isOpen(), \\\"LotteryCampaign: lottery is still open\\\");\\r\\n        require(t1_transfer != true, \\\"LotteryCampaign: ETH have been given out for Tier 1\\\");\\r\\n        \\r\\n        _bulkTransferOut(selectedTier1, 100000000000000000);\\r\\n        t1_transfer = true;\\r\\n    }\\r\\n\\r\\n    // Send out ETH to selected users by bulk for Tier 2\\r\\n    function bulkTransferSelectionTier2() public onlyOwner{\\r\\n        require(!isOpen(), \\\"LotteryCampaign: lottery is still open\\\");\\r\\n        require(t2_transfer != true, \\\"LotteryCampaign: ETH have been given out for Tier 2\\\");\\r\\n        \\r\\n        _bulkTransferOut(selectedTier2, 500000000000000000);\\r\\n        t2_transfer = true;\\r\\n    }\\r\\n\\r\\n    // Send out ETH to selected users by bulk for Tier 3\\r\\n    function bulkTransferSelectionTier3() public onlyOwner{\\r\\n        require(!isOpen(), \\\"LotteryCampaign: lottery is still open\\\");\\r\\n        require(t3_transfer != true, \\\"LotteryCampaign: ETH have been given out for Tier 3\\\");\\r\\n        \\r\\n        _bulkTransferOut(selectedTier3, 1500000000000000000);\\r\\n        t3_transfer = true;\\r\\n    }\\r\\n\\r\\n    // Send out ETH to selected users by bulk for Tier 4\\r\\n    function bulkTransferSelectionTier4() public onlyOwner{\\r\\n        require(!isOpen(), \\\"LotteryCampaign: lottery is still open\\\");\\r\\n        require(t4_transfer != true, \\\"LotteryCampaign: ETH have been given out for Tier 4\\\");\\r\\n        \\r\\n        _bulkTransferOut(selectedTier3, 10000000000000000000);\\r\\n        t4_transfer = true;\\r\\n    }\\r\\n    \\r\\n    // --------------- internal functions ---------------\\r\\n\\r\\n    function _verify(address user) internal view {\\r\\n        bool result = LockupInterface(lockupContract).isRegisteredParticipant(user);\\r\\n        require(result, \\\"LotteryCampaign: user does not participate in LockupCampaing yet\\\");\\r\\n    }\\r\\n\\r\\n    function _checkTier(address user) internal returns (bool stat){\\r\\n        uint256 amt = LockupInterface(lockupContract).getParticipantLockAmount(user);\\r\\n        Participants memory userP;\\r\\n\\r\\n        // test: re-edit the amt values\\r\\n        if(amt \\u003e= 100000 * 10**uint256(decimal) \\u0026\\u0026 amt \\u003c 500000 * 10**uint256(decimal)){\\r\\n            participantsTier1.push(user);\\r\\n            userP = Participants(Tiers.TIER1, LotteryStatus.JOINED);\\r\\n            participantList[user] = userP;\\r\\n            emit RegisterLottery(user, Tiers.TIER1, now);\\r\\n            stat = true;\\r\\n        } else if(amt \\u003e= 500000 * 10**uint256(decimal) \\u0026\\u0026 amt \\u003c 1000000 * 10**uint256(decimal)){\\r\\n            participantsTier2.push(user);\\r\\n            userP = Participants(Tiers.TIER2, LotteryStatus.JOINED);\\r\\n            participantList[user] = userP;\\r\\n            emit RegisterLottery(user, Tiers.TIER2, now);\\r\\n            stat = true;\\r\\n        } else if(amt \\u003e= 1000000 * 10**uint256(decimal) \\u0026\\u0026 amt \\u003c 5000000 * 10**uint256(decimal)){\\r\\n            participantsTier3.push(user);\\r\\n            userP = Participants(Tiers.TIER3, LotteryStatus.JOINED);\\r\\n            participantList[user] = userP;\\r\\n            emit RegisterLottery(user, Tiers.TIER3, now);\\r\\n            stat = true;\\r\\n        } else if(amt \\u003e= 5000000 * 10**uint256(decimal)){\\r\\n            participantsTier4.push(user);\\r\\n            userP = Participants(Tiers.TIER4, LotteryStatus.JOINED);\\r\\n            participantList[user] = userP;\\r\\n            emit RegisterLottery(user, Tiers.TIER4, now);\\r\\n            stat = true;\\r\\n        } else {\\r\\n            stat = false;\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function _insertSelection(address usr, address[] storage selected, uint256 max) internal {\\r\\n        require(selected.length \\u003c= max, \\\"LotteryCampaign: Selected list for this tier is full\\\");\\r\\n        selected.push(usr);\\r\\n        participantList[usr].status != LotteryStatus.SELECTED;\\r\\n     \\r\\n        emit SelectedLottery(usr, participantList[usr].tier);\\r\\n    }\\r\\n\\r\\n    function _rand(uint256 maxcount) internal returns (uint256) {\\r\\n        uint randomnumber = uint(keccak256(abi.encodePacked(now, msg.sender, nonce))) % maxcount;\\r\\n        //randomnumber = randomnumber + 100;\\r\\n        nonce++;\\r\\n        return randomnumber;\\r\\n    }\\r\\n\\r\\n    function _transferOut(address user) internal{\\r\\n        address payable p_user = address(uint160(user));\\r\\n        if(participantList[user].tier == Tiers.TIER1){\\r\\n            p_user.transfer(100000000000000000);\\r\\n            emit RewardLottery(user, 100000000000000000, now);\\r\\n        } else if (participantList[user].tier == Tiers.TIER2){\\r\\n            p_user.transfer(500000000000000000);\\r\\n            emit RewardLottery(user, 500000000000000000, now);\\r\\n        } else if (participantList[user].tier == Tiers.TIER3){\\r\\n            p_user.transfer(1500000000000000000);\\r\\n            emit RewardLottery(user, 1500000000000000000, now);\\r\\n        } else if (participantList[user].tier == Tiers.TIER3){\\r\\n            p_user.transfer(10000000000000000000);\\r\\n            emit RewardLottery(user, 10000000000000000000, now);\\r\\n        }\\r\\n        participantList[user].status != LotteryStatus.CLAIMED;\\r\\n    }\\r\\n    \\r\\n    function _bulkTransferOut(address[] storage selected, uint256 weiAmount) internal {\\r\\n        for(uint i = 0; i \\u003c selected.length; i++){\\r\\n            address payable user = address(uint160(selected[i]));\\r\\n            user.transfer(weiAmount);\\r\\n            participantList[selected[i]].status != LotteryStatus.CLAIMED;\\r\\n            \\r\\n            emit RewardLottery(selected[i], weiAmount, now);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _bulkChecks (address[] memory users, Tiers tier) internal {\\r\\n        for(uint i = 0; i \\u003c users.length; i++){\\r\\n            participantList[users[i]].status != LotteryStatus.SELECTED;\\r\\n            emit SelectedLottery(users[i], tier);\\r\\n        }\\r\\n    }\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"pragma solidity \\u003e= 0.5.3 \\u003c 0.6.0;\\r\\n\\r\\n//  SafeMath library\\r\\n//  - uint security overflow/underflow prevention\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) { return 0; }\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b);\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0);\\r\\n        uint256 c = a / b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a);\\r\\n        uint256 c = a - b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a);\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b != 0);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\"},\"TimestampMonthConv.sol\":{\"content\":\"pragma solidity \\u003e=0.5.3 \\u003c 0.6.0;\\r\\n\\r\\n//   Timestamp Month Conversion library\\r\\n//  - date and timestamp related conversion/operations for months\\r\\n\\r\\nlibrary TimestampMonthConv {\\r\\n    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\\r\\n    uint constant SECONDS_PER_HOUR = 60 * 60;\\r\\n    uint constant SECONDS_PER_MINUTE = 60;\\r\\n    int constant OFFSET19700101 = 2440588;\\r\\n    \\r\\n    function _daysFromDate(uint year, uint month, uint day) internal pure returns (uint _days) {\\r\\n        require(year \\u003e= 1970);\\r\\n        int _year = int(year);\\r\\n        int _month = int(month);\\r\\n        int _day = int(day);\\r\\n\\r\\n        int __days = _day\\r\\n          - 32075\\r\\n          + 1461 * (_year + 4800 + (_month - 14) / 12) / 4\\r\\n          + 367 * (_month - 2 - (_month - 14) / 12 * 12) / 12\\r\\n          - 3 * ((_year + 4900 + (_month - 14) / 12) / 100) / 4\\r\\n          - OFFSET19700101;\\r\\n\\r\\n        _days = uint(__days);\\r\\n    }\\r\\n    \\r\\n    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\\r\\n        int __days = int(_days);\\r\\n        \\r\\n        int L = __days + 68569 + OFFSET19700101;\\r\\n        int N = 4 * L / 146097;\\r\\n        L = L - (146097 * N + 3) / 4;\\r\\n        int _year = 4000 * (L + 1) / 1461001;\\r\\n        L = L - 1461 * _year / 4 + 31;\\r\\n        int _month = 80 * L / 2447;\\r\\n        int _day = L - 2447 * _month / 80;\\r\\n        L = _month / 11;\\r\\n        _month = _month + 2 - 12 * L;\\r\\n        _year = 100 * (N - 49) + _year + L;\\r\\n\\r\\n        year = uint(_year);\\r\\n        month = uint(_month);\\r\\n        day = uint(_day);\\r\\n    }\\r\\n    \\r\\n    function _getDaysInMonth(uint year, uint month) internal pure returns (uint daysInMonth) {\\r\\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\\r\\n            daysInMonth = 31;\\r\\n        } else if (month != 2) {\\r\\n            daysInMonth = 30;\\r\\n        } else {\\r\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function _isLeapYear(uint year) internal pure returns (bool leapYear) {\\r\\n        leapYear = ((year % 4 == 0) \\u0026\\u0026 (year % 100 != 0)) || (year % 400 == 0);\\r\\n    }\\r\\n    \\r\\n    function addMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\r\\n        uint year;\\r\\n        uint month;\\r\\n        uint day;\\r\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n        month += _months;\\r\\n        year += (month - 1) / 12;\\r\\n        month = (month - 1) % 12 + 1;\\r\\n        uint daysInMonth = _getDaysInMonth(year, month);\\r\\n        if (day \\u003e daysInMonth) {\\r\\n            day = daysInMonth;\\r\\n        }\\r\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\r\\n        require(newTimestamp \\u003e= timestamp);\\r\\n    }\\r\\n    \\r\\n    function diffMonths(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _months) {\\r\\n        require(fromTimestamp \\u003c= toTimestamp);\\r\\n        uint fromYear;\\r\\n        uint fromMonth;\\r\\n        uint fromDay;\\r\\n        uint toYear;\\r\\n        uint toMonth;\\r\\n        uint toDay;\\r\\n        (fromYear, fromMonth, fromDay) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\r\\n        (toYear, toMonth, toDay) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\r\\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\\r\\n    }\\r\\n}\\r\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"WWB_decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"lockupCampaign\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Active\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"EndTimeShifted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Inactive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum LotteryCampaign.Tiers\",\"name\":\"tier\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RegisterLottery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"owner\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Return\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountEth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RewardLottery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum LotteryCampaign.Tiers\",\"name\":\"tier\",\"type\":\"uint8\"}],\"name\":\"SelectedLottery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"owner\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Supply\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"bulkTransferSelectionTier1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"bulkTransferSelectionTier2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"bulkTransferSelectionTier3\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"bulkTransferSelectionTier4\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"changeEndPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getInfo\",\"outputs\":[{\"internalType\":\"enum LotteryCampaign.Tiers\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"enum LotteryCampaign.LotteryStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTier1List\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTier2List\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTier3List\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTier4List\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"insertBulkTier1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"insertBulkTier2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"insertBulkTier3\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"insertBulkTier4\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"insertSelectionTier1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"insertSelectionTier2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"insertSelectionTier3\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"insertSelectionTier4\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"killContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"stat\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendBackBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startLotteryPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnerOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"transferSelectedUsers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updatePeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LotteryCampaign","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000002e5e6ebd6865effab33360d3c6102f723fd053d200000000000000000000000000000000000000000000000000000000000000060000000000000000000000008631316985dcbd442db6136fd0fa0e21d9767f8d","Library":"","LicenseType":"None","SwarmSource":"bzzr://6db216f75358c824954ea6551db4c503daf591a1d1c9d80762178930615e7c27"}]}