{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.16;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IRegistry {\r\n    function isValid(address handler) external view returns (bool result);\r\n}\r\n\r\ncontract Proxy {\r\n    address[] public tokens;\r\n\r\n    modifier isTokenEmpty() {\r\n        require(tokens.length == 0, \"token list not empty\");\r\n        _;\r\n    }\r\n\r\n    function () payable external {}\r\n    // keccak256 hash of \"furucombo.handler.registry\"\r\n    bytes32 private constant HANDLER_REGISTRY =\r\n        0x6874162fd62902201ea0f4bf541086067b3b88bd802fac9e150fd2d1db584e19;\r\n\r\n    constructor(address registry) public {\r\n        bytes32 slot = HANDLER_REGISTRY;\r\n        assembly {\r\n            sstore(slot, registry)\r\n        }\r\n    }\r\n\r\n    function _getRegistry() internal view returns (address registry) {\r\n        bytes32 slot = HANDLER_REGISTRY;\r\n        assembly {\r\n            registry := sload(slot)\r\n        }\r\n    }\r\n\r\n    function _isValid(address handler) internal view returns (bool result) {\r\n        return IRegistry(_getRegistry()).isValid(handler);\r\n    }\r\n\r\n    function batchExec(address[] memory tos, bytes[] memory datas)\r\n        isTokenEmpty\r\n        public\r\n        payable\r\n    {\r\n        _preProcess();\r\n\r\n        for (uint256 i = 0; i < tos.length; i++) {\r\n            require(_isValid(tos[i]), \"invalid handler\");\r\n            _exec(tos[i], datas[i]);\r\n        }\r\n\r\n        _postProcess();\r\n    }\r\n\r\n    function _exec(address _to, bytes memory _data) internal returns (bytes memory result) {\r\n        assembly {\r\n            let succeeded := delegatecall(sub(gas, 5000), _to, add(_data, 0x20), mload(_data), 0, 0)\r\n            let size := returndatasize\r\n\r\n            result := mload(0x40)\r\n            mstore(0x40, add(result, and(add(add(size, 0x20), 0x1f), not(0x1f))))\r\n            mstore(result, size)\r\n            returndatacopy(add(result, 0x20), 0, size)\r\n\r\n            switch iszero(succeeded)\r\n            case 1 {\r\n                revert(add(result, 0x20), size)\r\n            }\r\n        }\r\n    }\r\n\r\n    function _preProcess() internal {\r\n    }\r\n\r\n    function _postProcess() internal {\r\n        // Token involved should be returned to user\r\n        while (tokens.length > 0) {\r\n            address token = tokens[tokens.length - 1];\r\n            uint256 amount = IERC20(token).balanceOf(address(this));\r\n            if (amount > 0)\r\n                IERC20(token).transfer(msg.sender, amount);\r\n            tokens.pop();\r\n        }\r\n\r\n        // Balance should also be returned to user\r\n        uint256 amount = address(this).balance;\r\n        if (amount > 0)\r\n            msg.sender.transfer(amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"}],\"name\":\"batchExec\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Proxy","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000af1134a479c0d3ecae95cec4490b97305ac17970","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://9b9717125c50307349348254b52b2323607c37a906e65145d7fa16e8750ba41b"}]}