{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.16;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Locks ERC20 tokens for a specific period\r\n */\r\ncontract BlockbirdLock {\r\n\r\n  /**\r\n   * ERC20 contract for which we can lock tokens.\r\n   */\r\n  IERC20 lockContract;\r\n\r\n  /**\r\n   * @dev Structure that holds information about locked tokens.\r\n   */\r\n  struct Lock {\r\n    uint256 amount;\r\n    uint256 duration;\r\n  }\r\n\r\n  /**\r\n   * @dev Mapping of locked tokens.\r\n   */\r\n  mapping(address => Lock) public lockedTokens;\r\n\r\n  /**\r\n   * @dev Sets contract for which we can lock tokens.\r\n   * @param lockContractAddress Address of ERC20 token.\r\n   */\r\n  constructor(address lockContractAddress) public {\r\n    lockContract = IERC20(lockContractAddress);\r\n  }\r\n\r\n  /**\r\n   * @dev Locks token for a specified period.\r\n   * @param recipient Address that will be able to withdraw tokens after specified time.\r\n   * @param amount Amount of tokens we are locking up.\r\n   * @param duration Duration for which the tokens will be locked.\r\n   */\r\n  function lock(\r\n    address recipient,\r\n    uint256 amount,\r\n    uint256 duration\r\n  )\r\n    external\r\n  {\r\n    require(lockedTokens[recipient].amount == 0, 'BlockbirdLock: Tokens for this recipent already locked.');\r\n    lockedTokens[recipient] = Lock({ amount: amount, duration: duration });\r\n    lockContract.transferFrom(msg.sender, address(this), amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Withdraw locked tokens.s\r\n   */\r\n  function withdraw()\r\n    external\r\n  {\r\n    require(lockedTokens[msg.sender].duration < now, 'BlockbirdLock: Lock time has not yet passed.');\r\n    uint256 amount = lockedTokens[msg.sender].amount;\r\n    delete lockedTokens[msg.sender];\r\n    lockContract.transfer(msg.sender, amount);\r\n  }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lockContractAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BlockbirdLock","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000069606be5674da265c0d11477dced7fcfeedc468b","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://3796f7a1d4047895c69dae78e5c4cfa600d24e919144f6620bbb7d016ab97f2a"}]}