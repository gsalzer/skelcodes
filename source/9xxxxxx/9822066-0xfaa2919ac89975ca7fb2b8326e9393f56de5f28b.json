{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.16;\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n /**\r\n * @dev Interface to interact with HEX ERC20 tokens\r\n */\r\ncontract ERC20{\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n}\r\n\r\ncontract HEX4{\r\n    function distribute(uint256 _amount) public;\r\n}\r\n\r\ncontract Treasury{\r\n     function transfer(address to, uint256 amount) external returns(bool);\r\n}\r\n\r\ncontract RandomNumberGenerator{\r\n     function generateRandomNumber(uint256 maxValue) public returns(uint256);\r\n}\r\n\r\n /**\r\n * @dev Hex Lotto game contract\r\n */\r\ncontract HexLotto is Ownable{\r\n\r\n    using SafeMath for uint256;\r\n\r\n    struct Entry {\r\n        uint256 ticketNumber;\r\n        uint256 tickets;\r\n        uint256 hexAmount;\r\n        address buyer;\r\n        address ref;\r\n    }\r\n\r\n    struct PlayerStats {\r\n        uint256 totalAmount;\r\n        uint256 totalTickets;\r\n        uint256 amountWon;\r\n        uint256 bonusWithdrawalTickets;\r\n        uint256 bonusAmount;\r\n    }\r\n\r\n    mapping(bytes32 => uint8) validQueryIds;\r\n    mapping(address => PlayerStats) public playerStats;\r\n\r\n    uint256 public totalAmount;\r\n    uint256 public totalTickets;\r\n    uint256 public ticketPrice;\r\n    uint256 public minimumPotAmount;\r\n    uint256 public minimumParticipants;\r\n    uint256 public bonusTicketsWithdrawn;\r\n    uint256 nonce;\r\n\r\n    uint256 public lastWinnerId;\r\n\r\n    address token;\r\n    address hex4;\r\n    address treasuryContract;\r\n    address randomGenerationContract;\r\n    address donatorWallet;\r\n    address devWallet;\r\n    address devWallet2;\r\n    address devWallet3;\r\n    address devWallet4;\r\n    address devWallet5;\r\n\r\n    address[] public players;\r\n\r\n    uint256 public hourlyPot;\r\n    uint256 public monthlyPot;\r\n    uint256 public yearlyPot;\r\n    uint256 public threeYearlyPot;\r\n\r\n    uint256 public hourlyTickets;\r\n    uint256 public monthlyTickets;\r\n    uint256 public yearlyTickets;\r\n    uint256 public threeYearlyTickets;\r\n\r\n    uint256 public hex4amount;\r\n\r\n    uint256 public lastHourly = now;\r\n    uint256 public lastMonthly = now;\r\n    uint256 public lastYearly = now;\r\n    uint256 public lastThreeYearly = now;\r\n\r\n    uint256 hour = 3600;\r\n    uint256 day = hour * 24;\r\n    uint256 month = day * 30;\r\n    uint256 threeHundredDays = day * 300;\r\n    uint256 threeYears = 31556926 * 3;\r\n\r\n    Entry[] public hourlyParticipants;\r\n    Entry[] public monthlyParticipants;\r\n    Entry[] public yearlyParticipants;\r\n    Entry[] public threeYearlyParticipants;\r\n\r\n    event Enter(\r\n        address indexed from,\r\n        uint amount,\r\n        address ref\r\n    );\r\n\r\n    event Won(\r\n        address indexed player,\r\n        uint amount\r\n    );\r\n\r\n    event Withdrawn(\r\n        address indexed player,\r\n        uint amount\r\n    );\r\n\r\n    modifier isTreasurySet() {\r\n        require(treasuryContract != address(0), \"Treasury contract isn't set\");\r\n        _;\r\n    }\r\n\r\n    modifier isRandomNumberSet() {\r\n        require(randomGenerationContract != address(0), \"Random generator contract contract isn't set\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        //HexToken address\r\n        token = address(0x2b591e99afE9f32eAA6214f7B7629768c40Eeb39);\r\n        hex4 = address(0xd52dca990CFC3760e0Cb0A60D96BE0da43fEbf19);\r\n        donatorWallet = address(0x723e82Eb1A1b419Fb36e9bD65E50A979cd13d341);\r\n        devWallet = address(0x35e9034f47cc00b8A9b555fC1FDB9598b2c245fD);\r\n        devWallet2 = address(0xB1A7Fe276cA916d8e7349Fa78ef805F64705331E);\r\n        devWallet3 = address(0xbf1984B12878c6A25f0921535c76C05a60bdEf39);\r\n        devWallet4 = address(0xD30BC4859A79852157211E6db19dE159673a67E2);\r\n        devWallet5 = address(0xe551072153c02fa33d4903CAb0435Fb86F1a80cb);\r\n        nonce = 1;\r\n        minimumParticipants = 3;\r\n        ticketPrice = 500000000000; //default ticket price 5000 HEX\r\n        minimumPotAmount = 2550000000000; //default min pot amount 25500 HEX\r\n\r\n        //Push sentinel values\r\n        hourlyParticipants.push(Entry(0, 0, 0, address(0), address(0)));\r\n        monthlyParticipants.push(Entry(0, 0, 0, address(0), address(0)));\r\n        yearlyParticipants.push(Entry(0, 0, 0, address(0), address(0)));\r\n        threeYearlyParticipants.push(Entry(0, 0, 0, address(0), address(0)));\r\n    }\r\n\r\n    function setTreasury(address newTreasuryContract) public onlyOwner{\r\n        require(newTreasuryContract != address(0), \"New treasury is the 0 address\");\r\n        treasuryContract = newTreasuryContract;\r\n    }\r\n    \r\n    function setRandomGenerator(address newRandomGenerator) public onlyOwner {\r\n        require(newRandomGenerator != address(0), \"New random generator contract is the 0 address\");\r\n        randomGenerationContract = newRandomGenerator;\r\n    }\r\n    \r\n    /**\r\n     * @dev Sets ticket price for a single lotto ticket\r\n    */\r\n    function setTicketPrice(uint256 amount) public onlyOwner{\r\n        require(amount > 0, \"amount must be greater than 0\");\r\n        ticketPrice = amount;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the minimum pot for all tiers before game can finish\r\n    */\r\n    function setMinimumPot(uint256 amount) public onlyOwner{\r\n        require(amount > 0, \"amount must be greater than 0\");\r\n        minimumPotAmount = amount;\r\n    }\r\n\r\n    /**\r\n     * @dev Array getter functions\r\n    */\r\n    function getHourlyParticipants() public view returns(Entry[] memory) {\r\n        return hourlyParticipants;\r\n    }\r\n\r\n    function getMonthlyParticipants() public view returns(Entry[] memory) {\r\n        return monthlyParticipants;\r\n    }\r\n\r\n    function getYearlyParticipants() public view returns(Entry[] memory) {\r\n        return yearlyParticipants;\r\n    }\r\n\r\n    function getThreeYearlyParticipants() public view returns(Entry[] memory) {\r\n        return threeYearlyParticipants;\r\n    }\r\n\r\n    function getPlayers() public view returns(address[] memory) {\r\n        return players;\r\n    }\r\n\r\n    function distributeToHex4() public {\r\n        HEX4(hex4).distribute(hex4amount);\r\n        hex4amount = 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Distributes HEX quantities into the relevant tiers, treasury wallets and approves for HEXMAX\r\n    */\r\n    function distribute(uint256 quantity, uint256 tickets, address ref) private {\r\n        uint256[7] memory quantities;\r\n\r\n        quantities[0] = quantity.mul(69).div(100); //Hourly\r\n        quantities[1] = quantity.mul(10).div(100); //Monthly\r\n        quantities[2] = quantity.mul(4).div(100); //300 days\r\n        quantities[3] = quantity.mul(1).div(100); //3 yearly\r\n        quantities[4] = quantity.mul(10).div(100); //Dev\r\n        quantities[5] = quantity.mul(1).div(100); //Hex4\r\n        quantities[6] = quantity.mul(5).div(100); //Treasury\r\n\r\n        //send 5% to owner treasury\r\n        require(ERC20(token).transfer(treasuryContract, quantities[6]), \"send to treasury failed\");\r\n\r\n        //approve Hex4 to allow distribution of 1%\r\n        hex4amount += quantities[5];\r\n        require(ERC20(token).approve(hex4, hex4amount), \"approve hex failed\");\r\n\r\n        //send 10% to donator & devs split equally\r\n        require(ERC20(token).transfer(donatorWallet, quantities[4].div(6)), 'send to donator failed');\r\n        require(ERC20(token).transfer(devWallet, quantities[4].div(6)), 'send to dev failed');\r\n        require(ERC20(token).transfer(devWallet2, quantities[4].div(6)), 'send to dev2 failed');\r\n        require(ERC20(token).transfer(devWallet3, quantities[4].div(6)), 'send to dev3 failed');\r\n        require(ERC20(token).transfer(devWallet4, quantities[4].div(6)), 'send to dev4 failed');\r\n        require(ERC20(token).transfer(devWallet5, quantities[4].div(6)), 'send to dev5 failed');\r\n\r\n        //update pot values\r\n        hourlyPot += quantities[0];\r\n        monthlyPot += quantities[1];\r\n        yearlyPot += quantities[2];\r\n        threeYearlyPot += quantities[3];\r\n\r\n        saveEntries(tickets, quantities[0], quantities[1], quantities[2], quantities[3], ref);\r\n    }\r\n\r\n    /**\r\n     * @dev Buys 'tickets' for lottery and splits tokens into tier entries\r\n     * User must call approve with this contract address before entering\r\n    */\r\n    function entry (uint256 tickets, address ref) public isTreasurySet{\r\n\r\n        uint256 quantity = ticketPrice.mul(tickets);\r\n\r\n        //get the user's balance\r\n        uint256 userBalance = ERC20(token).balanceOf(msg.sender);\r\n\r\n        //check user's balance\r\n        require(userBalance >= quantity, \"Not enough HEX tokens in balance.\");\r\n\r\n        //transfer pre approved amount to contract\r\n        require(ERC20(token).transferFrom(msg.sender, address(this), quantity), \"Transfer failed.\");\r\n\r\n        // 69% Hourly, 10% Monthly, 4% 300 Days, and 1% 3 Years\r\n        distribute(quantity, tickets, ref);\r\n\r\n        playerStats[msg.sender].totalAmount += quantity;\r\n        playerStats[msg.sender].totalTickets += tickets;\r\n\r\n        totalTickets += tickets;\r\n        totalAmount += quantity;\r\n        emit Enter(msg.sender, quantity, ref);\r\n     }\r\n\r\n    /**\r\n    * @dev Creates ticket entries into arrays for all tiers\r\n    */\r\n    function saveEntries(\r\n        uint256 tickets, \r\n        uint256 hourly, \r\n        uint256 monthly, \r\n        uint256 yearly, \r\n        uint256 threeYearly, \r\n        address ref\r\n    ) \r\n        private \r\n    {\r\n        Entry memory hourlyEntry = Entry(hourlyTickets + tickets, tickets, hourly, msg.sender, ref);\r\n        Entry memory monthlyEntry = Entry(monthlyTickets + tickets, tickets, monthly, msg.sender, ref);\r\n        Entry memory yearlyEntry = Entry(yearlyTickets + tickets, tickets, yearly, msg.sender, ref);\r\n        Entry memory threeYearlyEntry = Entry(threeYearlyTickets + tickets, tickets, threeYearly, msg.sender, ref);\r\n\r\n        hourlyParticipants.push(hourlyEntry);\r\n        monthlyParticipants.push(monthlyEntry);\r\n        yearlyParticipants.push(yearlyEntry);\r\n        threeYearlyParticipants.push(threeYearlyEntry);\r\n\r\n        hourlyTickets += tickets;\r\n        monthlyTickets += tickets;\r\n        yearlyTickets += tickets;\r\n        threeYearlyTickets += tickets;\r\n\r\n        players.push(msg.sender);\r\n    }\r\n\r\n    /**\r\n    * Get HEX balance of treasury wallet.\r\n    */\r\n    function getTreasuryBalance() public view isTreasurySet returns(uint256)  {\r\n         return ERC20(token).balanceOf(treasuryContract);\r\n    }\r\n\r\n    function getAvailableBonusTickets(address player) public view returns(uint256){\r\n\r\n        if(playerStats[player].totalTickets == 0) {\r\n            return 0;\r\n        }\r\n        \r\n        return playerStats[player].totalTickets - playerStats[player].bonusWithdrawalTickets;\r\n    }\r\n\r\n    function getAvailableBonusAmount(address player) public view returns(uint256){\r\n\r\n        uint256 playerAvailable = getAvailableBonusTickets(player);\r\n        uint256 totalAvailable = totalTickets.sub(bonusTicketsWithdrawn);\r\n\r\n        if(playerAvailable == 0 || totalAvailable == 0) {\r\n            return 0;\r\n        }\r\n        \r\n        return getTreasuryBalance().mul(playerAvailable).div(totalAvailable);\r\n    }\r\n\r\n    /**\r\n    * Withdraws all referral/treasury backed percentage amount\r\n    */\r\n    function withdraw() public isTreasurySet {\r\n        require(totalTickets > bonusTicketsWithdrawn, \"No bonus available to withdraw\");\r\n        uint256 amount = getAvailableBonusAmount(msg.sender);\r\n        require(amount > 0, \"No bonus available\");\r\n        require(Treasury(treasuryContract).transfer(msg.sender, amount), \"Withdrawal failed\");\r\n        \r\n        bonusTicketsWithdrawn += (playerStats[msg.sender].totalTickets - playerStats[msg.sender].bonusWithdrawalTickets);\r\n        playerStats[msg.sender].bonusWithdrawalTickets = playerStats[msg.sender].totalTickets;\r\n        playerStats[msg.sender].bonusAmount += amount;\r\n\r\n        emit Withdrawn(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Schedule to call once per hour\r\n    * Finishes current game and calls random number\r\n    */\r\n    function finishHourly() external isRandomNumberSet{\r\n        require(now > lastHourly.add(hour), \"Can only finish game once per hour.\");\r\n        require(hourlyParticipants.length >= minimumParticipants, \"Needs to meet minimum participants\");\r\n        require(hourlyPot > minimumPotAmount, \"Hourly pot needs to be higher before game can finish\");\r\n        \r\n        uint256 winningTicketNumber = RandomNumberGenerator(randomGenerationContract).generateRandomNumber(hourlyTickets);\r\n\r\n        pickHourlyWinner(winningTicketNumber);\r\n    }\r\n\r\n     /**\r\n    * @dev Transfers prize to random winner\r\n    */\r\n    function pickHourlyWinner(uint256 random) private {\r\n        uint256 randomWinner = random % (hourlyTickets - 1);\r\n        lastWinnerId = randomWinner;\r\n\r\n        address[2] memory winner = pickWinner(hourlyParticipants, randomWinner);\r\n        address hourlyWinner = winner[0];//buyer address\r\n        address winnerRef = winner[1];//ref address\r\n        require(hourlyWinner != address(0), \"Can not send to 0 address\");\r\n        //does user have ref?\r\n        uint winnings;\r\n        if(winnerRef == address(0)){\r\n            winnings = hourlyPot;\r\n        }\r\n        else{\r\n            uint refWinnings = hourlyPot.div(20);//5% of winning to ref\r\n            winnings = hourlyPot.sub(refWinnings);\r\n            require(ERC20(token).transfer(winnerRef, refWinnings), \"ref transfer failed\");\r\n        }\r\n       \r\n        playerStats[hourlyWinner].amountWon += hourlyPot;\r\n\r\n        lastHourly = now;\r\n        hourlyPot = 0;\r\n        hourlyTickets = 0;\r\n        delete hourlyParticipants;\r\n        hourlyParticipants.push(Entry(0, 0, 0, address(0), address(0)));\r\n\r\n        emit Won(hourlyWinner, winnings);\r\n\r\n        require(ERC20(token).transfer(hourlyWinner, winnings), \"transfer failed\");\r\n     }\r\n     \r\n  \r\n    /**\r\n    * @dev Schedule to call once per month\r\n    * Finishes current game and calls random number\r\n    */\r\n    function finishMonthly() external isRandomNumberSet{\r\n        require(now > lastMonthly.add(month), \"Can only finish game once per month.\");\r\n        require(monthlyParticipants.length >= minimumParticipants, \"Needs to meet minimum participants\");\r\n        require(monthlyPot > minimumPotAmount, \"Monthly pot needs to be higher before game can finish\");\r\n\r\n         uint256 winningTicketNumber = RandomNumberGenerator(randomGenerationContract).generateRandomNumber(monthlyTickets);\r\n\r\n        pickMonthlyWinner(winningTicketNumber);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfers prize to random winner\r\n    */\r\n    function pickMonthlyWinner(uint256 random) private {\r\n        uint256 randomWinner = random % (monthlyTickets - 1);\r\n        lastWinnerId = randomWinner;\r\n\r\n        address[2] memory winner = pickWinner(monthlyParticipants, randomWinner);\r\n        address monthlyWinner = winner[0];//buyer address\r\n        address winnerRef = winner[1];//ref address\r\n        require(monthlyWinner != address(0), \"Can not send to 0 address\");\r\n        uint winnings;\r\n        //does user have ref?\r\n        if(winnerRef == address(0)){\r\n            winnings = monthlyPot;\r\n        }\r\n        else{\r\n            uint refWinnings = monthlyPot.div(20);//5% of winning to ref\r\n            winnings = monthlyPot.sub(refWinnings);\r\n            require(ERC20(token).transfer(winnerRef, refWinnings), \"ref transfer failed\");\r\n        }\r\n       \r\n        playerStats[monthlyWinner].amountWon += monthlyPot;\r\n\r\n        lastMonthly = now;\r\n        monthlyPot = 0;\r\n        monthlyTickets = 0;\r\n        delete monthlyParticipants;\r\n        monthlyParticipants.push(Entry(0, 0, 0, address(0), address(0)));\r\n\r\n        emit Won(monthlyWinner, winnings);\r\n\r\n        require(ERC20(token).transfer(monthlyWinner, winnings), \"transfer failed\");\r\n     }\r\n\r\n    /**\r\n    * @dev Schedule to call once per year\r\n    * Finishes current game and calls random number\r\n    */\r\n    function finishYearly() external isRandomNumberSet{\r\n        require(now > lastYearly.add(threeHundredDays), \"Can only finish game once every 300 days.\");\r\n        require(yearlyParticipants.length >= minimumParticipants, \"Needs to meet minimum participants\");\r\n        require(yearlyPot > minimumPotAmount, \"Yearly pot needs to be higher before game can finish\");\r\n\r\n        uint256 winningTicketNumber = RandomNumberGenerator(randomGenerationContract).generateRandomNumber(yearlyTickets);\r\n        pickYearlyWinner(winningTicketNumber);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfers prize to random winner\r\n    */\r\n    function pickYearlyWinner(uint256 random) private {\r\n        uint256 randomWinner = random % (yearlyTickets - 1);\r\n        lastWinnerId = randomWinner;\r\n\r\n        address[2] memory winner = pickWinner(yearlyParticipants, randomWinner);\r\n        address yearlyWinner = winner[0];//buyer address\r\n        address winnerRef = winner[1];//ref address\r\n        require(yearlyWinner != address(0), \"Can not send to 0 address\");\r\n        uint winnings;\r\n        //does user have ref?\r\n        if(winnerRef == address(0)){\r\n            winnings = yearlyPot;\r\n        }\r\n        else{\r\n            uint refWinnings = yearlyPot.div(20);//5% of winning to ref\r\n            winnings = yearlyPot.sub(refWinnings);\r\n            require(ERC20(token).transfer(winnerRef, refWinnings), \"ref transfer failed\");\r\n        }\r\n\r\n        playerStats[yearlyWinner].amountWon += yearlyPot;\r\n\r\n        lastYearly = now;\r\n        yearlyPot = 0;\r\n        yearlyTickets = 0;\r\n        delete yearlyParticipants;\r\n        yearlyParticipants.push(Entry(0, 0, 0, address(0), address(0)));\r\n\r\n        emit Won(yearlyWinner, winnings);\r\n\r\n        require(ERC20(token).transfer(yearlyWinner, winnings), \"transfer failed\");\r\n     }\r\n\r\n    /**\r\n    * @dev Schedule to call once every 3 years\r\n    * Finishes current game and calls random number\r\n    */\r\n    function finishThreeYearly() external isRandomNumberSet {\r\n        require(now > lastThreeYearly.add(threeYears),  \"Can only finish game every three years.\");\r\n        require(threeYearlyParticipants.length >= minimumParticipants, \"Needs to meet minimum participants\");\r\n        require(threeYearlyPot >  minimumPotAmount, \"3 yearly pot needs to be higher before game can finish\");\r\n\r\n        uint256 winningTicketNumber = RandomNumberGenerator(randomGenerationContract).generateRandomNumber(threeYearlyTickets);\r\n        \r\n        pickThreeYearlyWinner(winningTicketNumber);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfers prize to random winner\r\n    */\r\n    function pickThreeYearlyWinner(uint256 random) private {\r\n        uint256 randomWinner = random % (threeYearlyTickets - 1);\r\n        lastWinnerId = randomWinner;\r\n\r\n        address[2] memory winner = pickWinner(threeYearlyParticipants, randomWinner);\r\n        address threeYearlyWinner = winner[0];//buyer address\r\n        address winnerRef = winner[1];//ref address\r\n        require(threeYearlyWinner != address(0), \"Can not send to 0 address\");\r\n        uint winnings;\r\n        //does user have ref?\r\n        if(winnerRef == address(0)){\r\n            winnings = threeYearlyPot;\r\n        }\r\n        else{\r\n            uint refWinnings = threeYearlyPot.div(20);//5% of winning to ref\r\n            winnings = threeYearlyPot.sub(refWinnings);\r\n            require(ERC20(token).transfer(winnerRef, refWinnings), \"ref transfer failed\");\r\n        }\r\n       \r\n        playerStats[threeYearlyWinner].amountWon += threeYearlyPot;\r\n\r\n        lastThreeYearly = now;\r\n        threeYearlyPot = 0;\r\n        threeYearlyTickets = 0;\r\n        delete threeYearlyParticipants;\r\n        threeYearlyParticipants.push(Entry(0, 0, 0, address(0), address(0)));\r\n\r\n        emit Won(threeYearlyWinner, winnings);\r\n\r\n        require(ERC20(token).transfer(threeYearlyWinner, winnings), \"transfer failed\");\r\n     }\r\n\r\n    /**\r\n    * @dev Returns a winner address chosen at random from the participant list\r\n    */\r\n    function pickWinner(Entry[] memory entries, uint256 random) internal pure returns(address[2] memory) {\r\n\r\n        address winner;\r\n        address ref;\r\n        uint256 left = 0;\r\n        uint256 right = entries.length-1;\r\n        uint256 middle;\r\n\r\n        while(left <= right){\r\n          middle = (left+right) >> 1; // floor((left + right) / 2)\r\n          if(middle == 0){\r\n            require(false, \"Sentinel value, no valid winner\");\r\n          }\r\n          uint256 ticket = entries[middle].ticketNumber;\r\n          if (ticket < random) {\r\n            left = middle + 1;\r\n          } else {\r\n            if(entries[middle-1].ticketNumber >= random) {\r\n              right = middle - 1;\r\n            } else {\r\n              winner = entries[middle].buyer;\r\n              ref = entries[middle].ref;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        return ([winner, ref]);\r\n     }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"Enter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Won\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusTicketsWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"distributeToHex4\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tickets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"entry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishHourly\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMonthly\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishThreeYearly\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishYearly\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getAvailableBonusAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getAvailableBonusTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHourlyParticipants\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ticketNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tickets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hexAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"internalType\":\"struct HexLotto.Entry[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMonthlyParticipants\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ticketNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tickets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hexAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"internalType\":\"struct HexLotto.Entry[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPlayers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getThreeYearlyParticipants\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ticketNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tickets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hexAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"internalType\":\"struct HexLotto.Entry[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTreasuryBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getYearlyParticipants\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ticketNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tickets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hexAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"internalType\":\"struct HexLotto.Entry[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hex4amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hourlyParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tickets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hexAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hourlyPot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hourlyTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastHourly\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastMonthly\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastThreeYearly\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastWinnerId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastYearly\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumPotAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"monthlyParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tickets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hexAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"monthlyPot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"monthlyTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTickets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountWon\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusWithdrawalTickets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMinimumPot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRandomGenerator\",\"type\":\"address\"}],\"name\":\"setRandomGenerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setTicketPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTreasuryContract\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"threeYearlyParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tickets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hexAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"threeYearlyPot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"threeYearlyTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"yearlyParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tickets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hexAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"yearlyPot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"yearlyTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"HexLotto","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://c054da1ee45cc65e9dcc0908cdc0635e50699e2a0757e24905cbe7ed852c9187"}]}